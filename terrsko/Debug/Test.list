
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8f0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001184  0800fad0  0800fad0  0001fad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c54  08010c54  00030404  2**0
                  CONTENTS
  4 .ARM          00000008  08010c54  08010c54  00020c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c5c  08010c5c  00030404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c5c  08010c5c  00020c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c60  08010c60  00020c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  08010c64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023a0  20000404  08011068  00030404  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200027a4  08011068  000327a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030404  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004fe19  00000000  00000000  00030434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009243  00000000  00000000  0008024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ea0  00000000  00000000  00089490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003370  00000000  00000000  0008c330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038d2d  00000000  00000000  0008f6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000545d0  00000000  00000000  000c83cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013fd76  00000000  00000000  0011c99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0025c713  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009188  00000000  00000000  0025c764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00035bd9  00000000  00000000  002658ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000404 	.word	0x20000404
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800fab8 	.word	0x0800fab8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000408 	.word	0x20000408
 800021c:	0800fab8 	.word	0x0800fab8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <action_reset>:
bool move_right	=	false;
bool move_down	=	false;
bool move_left	=	false;

void action_reset(uint8_t action_index) {
	if (action_index == 0) {
 8001048:	b918      	cbnz	r0, 8001052 <action_reset+0xa>
		act_up			=	false;
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <action_reset+0x78>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	4770      	bx	lr
	} else if (action_index == 1) {
 8001052:	2801      	cmp	r0, #1
 8001054:	d010      	beq.n	8001078 <action_reset+0x30>
		act_right		=	false;
	} else if (action_index == 2) {
 8001056:	2802      	cmp	r0, #2
 8001058:	d012      	beq.n	8001080 <action_reset+0x38>
		act_down		=	false;
	} else if (action_index == 3) {
 800105a:	2803      	cmp	r0, #3
 800105c:	d014      	beq.n	8001088 <action_reset+0x40>
		act_left		=	false;
	} else if (action_index == 4) {
 800105e:	2804      	cmp	r0, #4
 8001060:	d016      	beq.n	8001090 <action_reset+0x48>
		ok					=	false;
	} else if (action_index == 5) {
 8001062:	2805      	cmp	r0, #5
 8001064:	d018      	beq.n	8001098 <action_reset+0x50>
		esc					=	false;
	} else if (action_index == 6) {
 8001066:	2806      	cmp	r0, #6
 8001068:	d01a      	beq.n	80010a0 <action_reset+0x58>
		move_up			= false;
	} else if (action_index == 7) {
 800106a:	2807      	cmp	r0, #7
 800106c:	d01c      	beq.n	80010a8 <action_reset+0x60>
		move_right 	= false;
	} else if (action_index == 8) {
 800106e:	2808      	cmp	r0, #8
 8001070:	d01e      	beq.n	80010b0 <action_reset+0x68>
		move_down		= false;
	} else if (action_index == 9) {
 8001072:	2809      	cmp	r0, #9
 8001074:	d020      	beq.n	80010b8 <action_reset+0x70>
		move_left		= false;
	}
}
 8001076:	4770      	bx	lr
		act_right		=	false;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <action_reset+0x7c>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	4770      	bx	lr
		act_down		=	false;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <action_reset+0x80>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
 8001086:	4770      	bx	lr
		act_left		=	false;
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <action_reset+0x84>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
 800108e:	4770      	bx	lr
		ok					=	false;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <action_reset+0x88>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	4770      	bx	lr
		esc					=	false;
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <action_reset+0x8c>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	4770      	bx	lr
		move_up			= false;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <action_reset+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	4770      	bx	lr
		move_right 	= false;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <action_reset+0x94>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	4770      	bx	lr
		move_down		= false;
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <action_reset+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	4770      	bx	lr
		move_left		= false;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <action_reset+0x9c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
}
 80010be:	e7da      	b.n	8001076 <action_reset+0x2e>
 80010c0:	20000423 	.word	0x20000423
 80010c4:	20000422 	.word	0x20000422
 80010c8:	20000420 	.word	0x20000420
 80010cc:	20000421 	.word	0x20000421
 80010d0:	20000429 	.word	0x20000429
 80010d4:	20000424 	.word	0x20000424
 80010d8:	20000428 	.word	0x20000428
 80010dc:	20000427 	.word	0x20000427
 80010e0:	20000425 	.word	0x20000425
 80010e4:	20000426 	.word	0x20000426

080010e8 <action_set>:
/*
 * This funcion updates joystick input logicaly
 * the other buttons are set to be handled as interrupts
 */
void action_set(coord_t* joystick_raw) {
	if (joystick_raw->x > 2500) {
 80010e8:	6803      	ldr	r3, [r0, #0]
 80010ea:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80010ee:	4293      	cmp	r3, r2
 80010f0:	dd11      	ble.n	8001116 <action_set+0x2e>
		move_right 	= true;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <action_set+0x58>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
		move_left		= false;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <action_set+0x5c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
	} else if (joystick_raw->x < 1000) {
		move_right 	= false;
		move_left		= true;
	}

	if (joystick_raw->y > 2500) {
 80010fe:	6843      	ldr	r3, [r0, #4]
 8001100:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001104:	4293      	cmp	r3, r2
 8001106:	dd10      	ble.n	800112a <action_set+0x42>
		move_up			= true;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <action_set+0x60>)
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
		move_down		= false;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <action_set+0x64>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	4770      	bx	lr
	} else if (joystick_raw->x < 1000) {
 8001116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800111a:	daf0      	bge.n	80010fe <action_set+0x16>
		move_right 	= false;
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <action_set+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
		move_left		= true;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <action_set+0x5c>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	e7e9      	b.n	80010fe <action_set+0x16>
	} else if (joystick_raw->y < 1000) {
 800112a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800112e:	da05      	bge.n	800113c <action_set+0x54>
		move_up			= false;
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <action_set+0x60>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
		move_down		= true;
 8001136:	4b05      	ldr	r3, [pc, #20]	; (800114c <action_set+0x64>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
	}
}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000427 	.word	0x20000427
 8001144:	20000426 	.word	0x20000426
 8001148:	20000428 	.word	0x20000428
 800114c:	20000425 	.word	0x20000425

08001150 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001150:	b510      	push	{r4, lr}
 8001152:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001154:	2400      	movs	r4, #0
 8001156:	9409      	str	r4, [sp, #36]	; 0x24
 8001158:	940a      	str	r4, [sp, #40]	; 0x28
 800115a:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 800115c:	2220      	movs	r2, #32
 800115e:	4621      	mov	r1, r4
 8001160:	a801      	add	r0, sp, #4
 8001162:	f00a f83b 	bl	800b1dc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001166:	4820      	ldr	r0, [pc, #128]	; (80011e8 <MX_ADC1_Init+0x98>)
 8001168:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800116c:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800116e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001172:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001174:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001176:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 8001178:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800117a:	6144      	str	r4, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800117c:	2304      	movs	r3, #4
 800117e:	6183      	str	r3, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001180:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001182:	7744      	strb	r4, [r0, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001184:	2301      	movs	r3, #1
 8001186:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001188:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800118c:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800118e:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001190:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001194:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001196:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800119a:	f002 f9a1 	bl	80034e0 <HAL_ADC_Init>
 800119e:	b9c8      	cbnz	r0, 80011d4 <MX_ADC1_Init+0x84>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011a0:	2300      	movs	r3, #0
 80011a2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011a4:	a909      	add	r1, sp, #36	; 0x24
 80011a6:	4810      	ldr	r0, [pc, #64]	; (80011e8 <MX_ADC1_Init+0x98>)
 80011a8:	f002 fecc 	bl	8003f44 <HAL_ADCEx_MultiModeConfigChannel>
 80011ac:	b9a8      	cbnz	r0, 80011da <MX_ADC1_Init+0x8a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_ADC1_Init+0x9c>)
 80011b0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b2:	2306      	movs	r3, #6
 80011b4:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011b6:	2300      	movs	r3, #0
 80011b8:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ba:	227f      	movs	r2, #127	; 0x7f
 80011bc:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011be:	2204      	movs	r2, #4
 80011c0:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 80011c2:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c4:	eb0d 0102 	add.w	r1, sp, r2
 80011c8:	4807      	ldr	r0, [pc, #28]	; (80011e8 <MX_ADC1_Init+0x98>)
 80011ca:	f002 fb37 	bl	800383c <HAL_ADC_ConfigChannel>
 80011ce:	b938      	cbnz	r0, 80011e0 <MX_ADC1_Init+0x90>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d0:	b00c      	add	sp, #48	; 0x30
 80011d2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80011d4:	f000 fed0 	bl	8001f78 <Error_Handler>
 80011d8:	e7e2      	b.n	80011a0 <MX_ADC1_Init+0x50>
    Error_Handler();
 80011da:	f000 fecd 	bl	8001f78 <Error_Handler>
 80011de:	e7e6      	b.n	80011ae <MX_ADC1_Init+0x5e>
    Error_Handler();
 80011e0:	f000 feca 	bl	8001f78 <Error_Handler>
}
 80011e4:	e7f4      	b.n	80011d0 <MX_ADC1_Init+0x80>
 80011e6:	bf00      	nop
 80011e8:	20000434 	.word	0x20000434
 80011ec:	08600004 	.word	0x08600004

080011f0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011f0:	b500      	push	{lr}
 80011f2:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011f4:	2220      	movs	r2, #32
 80011f6:	2100      	movs	r1, #0
 80011f8:	4668      	mov	r0, sp
 80011fa:	f009 ffef 	bl	800b1dc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011fe:	481b      	ldr	r0, [pc, #108]	; (800126c <MX_ADC2_Init+0x7c>)
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_ADC2_Init+0x80>)
 8001202:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001204:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001208:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800120a:	2300      	movs	r3, #0
 800120c:	6083      	str	r3, [r0, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800120e:	60c3      	str	r3, [r0, #12]
  hadc2.Init.GainCompensation = 0;
 8001210:	6103      	str	r3, [r0, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001212:	6143      	str	r3, [r0, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001214:	2204      	movs	r2, #4
 8001216:	6182      	str	r2, [r0, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001218:	7703      	strb	r3, [r0, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800121a:	7743      	strb	r3, [r0, #29]
  hadc2.Init.NbrOfConversion = 1;
 800121c:	2201      	movs	r2, #1
 800121e:	6202      	str	r2, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001220:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001224:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001226:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001228:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800122c:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800122e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001232:	f002 f955 	bl	80034e0 <HAL_ADC_Init>
 8001236:	b990      	cbnz	r0, 800125e <MX_ADC2_Init+0x6e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_ADC2_Init+0x84>)
 800123a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800123c:	2306      	movs	r3, #6
 800123e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001240:	2300      	movs	r3, #0
 8001242:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001244:	227f      	movs	r2, #127	; 0x7f
 8001246:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001248:	2204      	movs	r2, #4
 800124a:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 800124c:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800124e:	4669      	mov	r1, sp
 8001250:	4806      	ldr	r0, [pc, #24]	; (800126c <MX_ADC2_Init+0x7c>)
 8001252:	f002 faf3 	bl	800383c <HAL_ADC_ConfigChannel>
 8001256:	b928      	cbnz	r0, 8001264 <MX_ADC2_Init+0x74>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001258:	b009      	add	sp, #36	; 0x24
 800125a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800125e:	f000 fe8b 	bl	8001f78 <Error_Handler>
 8001262:	e7e9      	b.n	8001238 <MX_ADC2_Init+0x48>
    Error_Handler();
 8001264:	f000 fe88 	bl	8001f78 <Error_Handler>
}
 8001268:	e7f6      	b.n	8001258 <MX_ADC2_Init+0x68>
 800126a:	bf00      	nop
 800126c:	200004a0 	.word	0x200004a0
 8001270:	50000100 	.word	0x50000100
 8001274:	14f00020 	.word	0x14f00020

08001278 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001278:	b510      	push	{r4, lr}
 800127a:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800127c:	2400      	movs	r4, #0
 800127e:	9409      	str	r4, [sp, #36]	; 0x24
 8001280:	940a      	str	r4, [sp, #40]	; 0x28
 8001282:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8001284:	2220      	movs	r2, #32
 8001286:	4621      	mov	r1, r4
 8001288:	a801      	add	r0, sp, #4
 800128a:	f009 ffa7 	bl	800b1dc <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800128e:	481f      	ldr	r0, [pc, #124]	; (800130c <MX_ADC3_Init+0x94>)
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <MX_ADC3_Init+0x98>)
 8001292:	6003      	str	r3, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001294:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001298:	6043      	str	r3, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800129a:	6084      	str	r4, [r0, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800129c:	60c4      	str	r4, [r0, #12]
  hadc3.Init.GainCompensation = 0;
 800129e:	6104      	str	r4, [r0, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012a0:	6144      	str	r4, [r0, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a2:	2304      	movs	r3, #4
 80012a4:	6183      	str	r3, [r0, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80012a6:	7704      	strb	r4, [r0, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80012a8:	7744      	strb	r4, [r0, #29]
  hadc3.Init.NbrOfConversion = 1;
 80012aa:	2301      	movs	r3, #1
 80012ac:	6203      	str	r3, [r0, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012ae:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b2:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012b4:	6304      	str	r4, [r0, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80012b6:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012ba:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80012bc:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012c0:	f002 f90e 	bl	80034e0 <HAL_ADC_Init>
 80012c4:	b9c8      	cbnz	r0, 80012fa <MX_ADC3_Init+0x82>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012c6:	2300      	movs	r3, #0
 80012c8:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80012ca:	a909      	add	r1, sp, #36	; 0x24
 80012cc:	480f      	ldr	r0, [pc, #60]	; (800130c <MX_ADC3_Init+0x94>)
 80012ce:	f002 fe39 	bl	8003f44 <HAL_ADCEx_MultiModeConfigChannel>
 80012d2:	b9a8      	cbnz	r0, 8001300 <MX_ADC3_Init+0x88>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_ADC3_Init+0x9c>)
 80012d6:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012d8:	2306      	movs	r3, #6
 80012da:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012dc:	2300      	movs	r3, #0
 80012de:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012e0:	227f      	movs	r2, #127	; 0x7f
 80012e2:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012e4:	2204      	movs	r2, #4
 80012e6:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 80012e8:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012ea:	eb0d 0102 	add.w	r1, sp, r2
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <MX_ADC3_Init+0x94>)
 80012f0:	f002 faa4 	bl	800383c <HAL_ADC_ConfigChannel>
 80012f4:	b938      	cbnz	r0, 8001306 <MX_ADC3_Init+0x8e>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012f6:	b00c      	add	sp, #48	; 0x30
 80012f8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80012fa:	f000 fe3d 	bl	8001f78 <Error_Handler>
 80012fe:	e7e2      	b.n	80012c6 <MX_ADC3_Init+0x4e>
    Error_Handler();
 8001300:	f000 fe3a 	bl	8001f78 <Error_Handler>
 8001304:	e7e6      	b.n	80012d4 <MX_ADC3_Init+0x5c>
    Error_Handler();
 8001306:	f000 fe37 	bl	8001f78 <Error_Handler>
}
 800130a:	e7f4      	b.n	80012f6 <MX_ADC3_Init+0x7e>
 800130c:	2000050c 	.word	0x2000050c
 8001310:	50000400 	.word	0x50000400
 8001314:	21800100 	.word	0x21800100

08001318 <MX_ADC4_Init>:
/* ADC4 init function */
// JOYSTICK
void MX_ADC4_Init(void)
{
 8001318:	b500      	push	{lr}
 800131a:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800131c:	2220      	movs	r2, #32
 800131e:	2100      	movs	r1, #0
 8001320:	4668      	mov	r0, sp
 8001322:	f009 ff5b 	bl	800b1dc <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001326:	4822      	ldr	r0, [pc, #136]	; (80013b0 <MX_ADC4_Init+0x98>)
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <MX_ADC4_Init+0x9c>)
 800132a:	6003      	str	r3, [r0, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800132c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001330:	6043      	str	r3, [r0, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001332:	2300      	movs	r3, #0
 8001334:	6083      	str	r3, [r0, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001336:	60c3      	str	r3, [r0, #12]
  hadc4.Init.GainCompensation = 0;
 8001338:	6103      	str	r3, [r0, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800133a:	2201      	movs	r2, #1
 800133c:	6142      	str	r2, [r0, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800133e:	2104      	movs	r1, #4
 8001340:	6181      	str	r1, [r0, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001342:	7703      	strb	r3, [r0, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001344:	7742      	strb	r2, [r0, #29]
  hadc4.Init.NbrOfConversion = 2;
 8001346:	2102      	movs	r1, #2
 8001348:	6201      	str	r1, [r0, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800134a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800134e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001350:	6303      	str	r3, [r0, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001352:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001356:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001358:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800135c:	f002 f8c0 	bl	80034e0 <HAL_ADC_Init>
 8001360:	b9e0      	cbnz	r0, 800139c <MX_ADC4_Init+0x84>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_ADC4_Init+0xa0>)
 8001364:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001366:	2306      	movs	r3, #6
 8001368:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800136a:	2307      	movs	r3, #7
 800136c:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800136e:	237f      	movs	r3, #127	; 0x7f
 8001370:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001372:	2304      	movs	r3, #4
 8001374:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800137a:	4669      	mov	r1, sp
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <MX_ADC4_Init+0x98>)
 800137e:	f002 fa5d 	bl	800383c <HAL_ADC_ConfigChannel>
 8001382:	b970      	cbnz	r0, 80013a2 <MX_ADC4_Init+0x8a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <MX_ADC4_Init+0xa4>)
 8001386:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001388:	230c      	movs	r3, #12
 800138a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800138c:	4669      	mov	r1, sp
 800138e:	4808      	ldr	r0, [pc, #32]	; (80013b0 <MX_ADC4_Init+0x98>)
 8001390:	f002 fa54 	bl	800383c <HAL_ADC_ConfigChannel>
 8001394:	b940      	cbnz	r0, 80013a8 <MX_ADC4_Init+0x90>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001396:	b009      	add	sp, #36	; 0x24
 8001398:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800139c:	f000 fdec 	bl	8001f78 <Error_Handler>
 80013a0:	e7df      	b.n	8001362 <MX_ADC4_Init+0x4a>
    Error_Handler();
 80013a2:	f000 fde9 	bl	8001f78 <Error_Handler>
 80013a6:	e7ed      	b.n	8001384 <MX_ADC4_Init+0x6c>
    Error_Handler();
 80013a8:	f000 fde6 	bl	8001f78 <Error_Handler>
}
 80013ac:	e7f3      	b.n	8001396 <MX_ADC4_Init+0x7e>
 80013ae:	bf00      	nop
 80013b0:	20000578 	.word	0x20000578
 80013b4:	50000500 	.word	0x50000500
 80013b8:	10c00010 	.word	0x10c00010
 80013bc:	14f00020 	.word	0x14f00020

080013c0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013c0:	b530      	push	{r4, r5, lr}
 80013c2:	b0a7      	sub	sp, #156	; 0x9c
 80013c4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	2100      	movs	r1, #0
 80013c8:	9121      	str	r1, [sp, #132]	; 0x84
 80013ca:	9122      	str	r1, [sp, #136]	; 0x88
 80013cc:	9123      	str	r1, [sp, #140]	; 0x8c
 80013ce:	9124      	str	r1, [sp, #144]	; 0x90
 80013d0:	9125      	str	r1, [sp, #148]	; 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d2:	2254      	movs	r2, #84	; 0x54
 80013d4:	a80c      	add	r0, sp, #48	; 0x30
 80013d6:	f009 ff01 	bl	800b1dc <memset>
  if(adcHandle->Instance==ADC1)
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013e0:	d00c      	beq.n	80013fc <HAL_ADC_MspInit+0x3c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 80013e2:	4a96      	ldr	r2, [pc, #600]	; (800163c <HAL_ADC_MspInit+0x27c>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d03d      	beq.n	8001464 <HAL_ADC_MspInit+0xa4>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 80013e8:	4a95      	ldr	r2, [pc, #596]	; (8001640 <HAL_ADC_MspInit+0x280>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	f000 80a2 	beq.w	8001534 <HAL_ADC_MspInit+0x174>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC4)
 80013f0:	4a94      	ldr	r2, [pc, #592]	; (8001644 <HAL_ADC_MspInit+0x284>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	f000 80d2 	beq.w	800159c <HAL_ADC_MspInit+0x1dc>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 80013f8:	b027      	add	sp, #156	; 0x9c
 80013fa:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001400:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001402:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001406:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001408:	a80c      	add	r0, sp, #48	; 0x30
 800140a:	f005 fdcb 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 800140e:	b9d8      	cbnz	r0, 8001448 <HAL_ADC_MspInit+0x88>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001410:	4a8d      	ldr	r2, [pc, #564]	; (8001648 <HAL_ADC_MspInit+0x288>)
 8001412:	6813      	ldr	r3, [r2, #0]
 8001414:	3301      	adds	r3, #1
 8001416:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001418:	2b01      	cmp	r3, #1
 800141a:	d018      	beq.n	800144e <HAL_ADC_MspInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b8b      	ldr	r3, [pc, #556]	; (800164c <HAL_ADC_MspInit+0x28c>)
 800141e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001420:	f042 0201 	orr.w	r2, r2, #1
 8001424:	64da      	str	r2, [r3, #76]	; 0x4c
 8001426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AD0_Pin|AD1_Pin|AD2_Pin|AD3_Pin;
 8001430:	230f      	movs	r3, #15
 8001432:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001434:	2303      	movs	r3, #3
 8001436:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143c:	a921      	add	r1, sp, #132	; 0x84
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001442:	f003 fb9d 	bl	8004b80 <HAL_GPIO_Init>
 8001446:	e7d7      	b.n	80013f8 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001448:	f000 fd96 	bl	8001f78 <Error_Handler>
 800144c:	e7e0      	b.n	8001410 <HAL_ADC_MspInit+0x50>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800144e:	4b7f      	ldr	r3, [pc, #508]	; (800164c <HAL_ADC_MspInit+0x28c>)
 8001450:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001452:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001456:	64da      	str	r2, [r3, #76]	; 0x4c
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	9b01      	ldr	r3, [sp, #4]
 8001462:	e7db      	b.n	800141c <HAL_ADC_MspInit+0x5c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001464:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001468:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800146a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800146e:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001470:	a80c      	add	r0, sp, #48	; 0x30
 8001472:	f005 fd97 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001476:	2800      	cmp	r0, #0
 8001478:	d14e      	bne.n	8001518 <HAL_ADC_MspInit+0x158>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800147a:	4a73      	ldr	r2, [pc, #460]	; (8001648 <HAL_ADC_MspInit+0x288>)
 800147c:	6813      	ldr	r3, [r2, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001482:	2b01      	cmp	r3, #1
 8001484:	d04b      	beq.n	800151e <HAL_ADC_MspInit+0x15e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001486:	4b71      	ldr	r3, [pc, #452]	; (800164c <HAL_ADC_MspInit+0x28c>)
 8001488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800148a:	f042 0220 	orr.w	r2, r2, #32
 800148e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001490:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001492:	f002 0220 	and.w	r2, r2, #32
 8001496:	9204      	str	r2, [sp, #16]
 8001498:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800149c:	f042 0201 	orr.w	r2, r2, #1
 80014a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80014a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014a4:	f002 0201 	and.w	r2, r2, #1
 80014a8:	9205      	str	r2, [sp, #20]
 80014aa:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ae:	f042 0204 	orr.w	r2, r2, #4
 80014b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80014b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014b6:	f002 0204 	and.w	r2, r2, #4
 80014ba:	9206      	str	r2, [sp, #24]
 80014bc:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014c0:	f042 0202 	orr.w	r2, r2, #2
 80014c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	9307      	str	r3, [sp, #28]
 80014ce:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = AD5_Pin;
 80014d0:	2302      	movs	r3, #2
 80014d2:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d4:	2503      	movs	r5, #3
 80014d6:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2400      	movs	r4, #0
 80014da:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD5_GPIO_Port, &GPIO_InitStruct);
 80014dc:	a921      	add	r1, sp, #132	; 0x84
 80014de:	485c      	ldr	r0, [pc, #368]	; (8001650 <HAL_ADC_MspInit+0x290>)
 80014e0:	f003 fb4e 	bl	8004b80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD8_Pin;
 80014e4:	2320      	movs	r3, #32
 80014e6:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e8:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD8_GPIO_Port, &GPIO_InitStruct);
 80014ec:	a921      	add	r1, sp, #132	; 0x84
 80014ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f2:	f003 fb45 	bl	8004b80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD4_Pin|AD6_Pin;
 80014f6:	2330      	movs	r3, #48	; 0x30
 80014f8:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014fa:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fe:	a921      	add	r1, sp, #132	; 0x84
 8001500:	4854      	ldr	r0, [pc, #336]	; (8001654 <HAL_ADC_MspInit+0x294>)
 8001502:	f003 fb3d 	bl	8004b80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD7_Pin;
 8001506:	2304      	movs	r3, #4
 8001508:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150a:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD7_GPIO_Port, &GPIO_InitStruct);
 800150e:	a921      	add	r1, sp, #132	; 0x84
 8001510:	4851      	ldr	r0, [pc, #324]	; (8001658 <HAL_ADC_MspInit+0x298>)
 8001512:	f003 fb35 	bl	8004b80 <HAL_GPIO_Init>
 8001516:	e76f      	b.n	80013f8 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001518:	f000 fd2e 	bl	8001f78 <Error_Handler>
 800151c:	e7ad      	b.n	800147a <HAL_ADC_MspInit+0xba>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800151e:	4b4b      	ldr	r3, [pc, #300]	; (800164c <HAL_ADC_MspInit+0x28c>)
 8001520:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001522:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001526:	64da      	str	r2, [r3, #76]	; 0x4c
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800152e:	9303      	str	r3, [sp, #12]
 8001530:	9b03      	ldr	r3, [sp, #12]
 8001532:	e7a8      	b.n	8001486 <HAL_ADC_MspInit+0xc6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001538:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800153a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800153e:	931e      	str	r3, [sp, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001540:	a80c      	add	r0, sp, #48	; 0x30
 8001542:	f005 fd2f 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001546:	b9d8      	cbnz	r0, 8001580 <HAL_ADC_MspInit+0x1c0>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001548:	4a44      	ldr	r2, [pc, #272]	; (800165c <HAL_ADC_MspInit+0x29c>)
 800154a:	6813      	ldr	r3, [r2, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001550:	2b01      	cmp	r3, #1
 8001552:	d018      	beq.n	8001586 <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001554:	4b3d      	ldr	r3, [pc, #244]	; (800164c <HAL_ADC_MspInit+0x28c>)
 8001556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001558:	f042 0208 	orr.w	r2, r2, #8
 800155c:	64da      	str	r2, [r3, #76]	; 0x4c
 800155e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	9309      	str	r3, [sp, #36]	; 0x24
 8001566:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = AD9_Pin|AD10_Pin|AD11_Pin;
 8001568:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800156c:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800156e:	2303      	movs	r3, #3
 8001570:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001576:	a921      	add	r1, sp, #132	; 0x84
 8001578:	4839      	ldr	r0, [pc, #228]	; (8001660 <HAL_ADC_MspInit+0x2a0>)
 800157a:	f003 fb01 	bl	8004b80 <HAL_GPIO_Init>
 800157e:	e73b      	b.n	80013f8 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001580:	f000 fcfa 	bl	8001f78 <Error_Handler>
 8001584:	e7e0      	b.n	8001548 <HAL_ADC_MspInit+0x188>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001586:	4b31      	ldr	r3, [pc, #196]	; (800164c <HAL_ADC_MspInit+0x28c>)
 8001588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800158a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800158e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	9308      	str	r3, [sp, #32]
 8001598:	9b08      	ldr	r3, [sp, #32]
 800159a:	e7db      	b.n	8001554 <HAL_ADC_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800159c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a0:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80015a6:	931e      	str	r3, [sp, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a8:	a80c      	add	r0, sp, #48	; 0x30
 80015aa:	f005 fcfb 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	2800      	cmp	r0, #0
 80015b0:	d133      	bne.n	800161a <HAL_ADC_MspInit+0x25a>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80015b2:	4a2a      	ldr	r2, [pc, #168]	; (800165c <HAL_ADC_MspInit+0x29c>)
 80015b4:	6813      	ldr	r3, [r2, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d030      	beq.n	8001620 <HAL_ADC_MspInit+0x260>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	4b23      	ldr	r3, [pc, #140]	; (800164c <HAL_ADC_MspInit+0x28c>)
 80015c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015c2:	f042 0202 	orr.w	r2, r2, #2
 80015c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80015d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80015d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80015d6:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d8:	2303      	movs	r3, #3
 80015da:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2500      	movs	r5, #0
 80015de:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	a921      	add	r1, sp, #132	; 0x84
 80015e2:	481d      	ldr	r0, [pc, #116]	; (8001658 <HAL_ADC_MspInit+0x298>)
 80015e4:	f003 facc 	bl	8004b80 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel5;
 80015e8:	481e      	ldr	r0, [pc, #120]	; (8001664 <HAL_ADC_MspInit+0x2a4>)
 80015ea:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <HAL_ADC_MspInit+0x2a8>)
 80015ec:	6003      	str	r3, [r0, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80015ee:	2326      	movs	r3, #38	; 0x26
 80015f0:	6043      	str	r3, [r0, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f2:	6085      	str	r5, [r0, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f4:	60c5      	str	r5, [r0, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	6103      	str	r3, [r0, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015fe:	6143      	str	r3, [r0, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001600:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001604:	6183      	str	r3, [r0, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8001606:	2320      	movs	r3, #32
 8001608:	61c3      	str	r3, [r0, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 800160a:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800160c:	f002 ffd2 	bl	80045b4 <HAL_DMA_Init>
 8001610:	b988      	cbnz	r0, 8001636 <HAL_ADC_MspInit+0x276>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_ADC_MspInit+0x2a4>)
 8001614:	6563      	str	r3, [r4, #84]	; 0x54
 8001616:	629c      	str	r4, [r3, #40]	; 0x28
}
 8001618:	e6ee      	b.n	80013f8 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 800161a:	f000 fcad 	bl	8001f78 <Error_Handler>
 800161e:	e7c8      	b.n	80015b2 <HAL_ADC_MspInit+0x1f2>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_ADC_MspInit+0x28c>)
 8001622:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001624:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001628:	64da      	str	r2, [r3, #76]	; 0x4c
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001630:	930a      	str	r3, [sp, #40]	; 0x28
 8001632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001634:	e7c3      	b.n	80015be <HAL_ADC_MspInit+0x1fe>
      Error_Handler();
 8001636:	f000 fc9f 	bl	8001f78 <Error_Handler>
 800163a:	e7ea      	b.n	8001612 <HAL_ADC_MspInit+0x252>
 800163c:	50000100 	.word	0x50000100
 8001640:	50000400 	.word	0x50000400
 8001644:	50000500 	.word	0x50000500
 8001648:	2000042c 	.word	0x2000042c
 800164c:	40021000 	.word	0x40021000
 8001650:	48001400 	.word	0x48001400
 8001654:	48000800 	.word	0x48000800
 8001658:	48000400 	.word	0x48000400
 800165c:	20000430 	.word	0x20000430
 8001660:	48000c00 	.word	0x48000c00
 8001664:	200005e4 	.word	0x200005e4
 8001668:	40020058 	.word	0x40020058

0800166c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800166c:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800166e:	4808      	ldr	r0, [pc, #32]	; (8001690 <MX_CRC_Init+0x24>)
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <MX_CRC_Init+0x28>)
 8001672:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001678:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800167a:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800167c:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800167e:	2301      	movs	r3, #1
 8001680:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001682:	f002 fdb5 	bl	80041f0 <HAL_CRC_Init>
 8001686:	b900      	cbnz	r0, 800168a <MX_CRC_Init+0x1e>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001688:	bd08      	pop	{r3, pc}
    Error_Handler();
 800168a:	f000 fc75 	bl	8001f78 <Error_Handler>
}
 800168e:	e7fb      	b.n	8001688 <MX_CRC_Init+0x1c>
 8001690:	20000644 	.word	0x20000644
 8001694:	40023000 	.word	0x40023000

08001698 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8001698:	6802      	ldr	r2, [r0, #0]
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_CRC_MspInit+0x28>)
 800169c:	429a      	cmp	r2, r3
 800169e:	d000      	beq.n	80016a2 <HAL_CRC_MspInit+0xa>
 80016a0:	4770      	bx	lr
{
 80016a2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80016a4:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80016a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016ae:	649a      	str	r2, [r3, #72]	; 0x48
 80016b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80016ba:	b002      	add	sp, #8
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40023000 	.word	0x40023000

080016c4 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DAC_HandleTypeDef hdac2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80016c4:	b500      	push	{lr}
 80016c6:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016c8:	2230      	movs	r2, #48	; 0x30
 80016ca:	2100      	movs	r1, #0
 80016cc:	4668      	mov	r0, sp
 80016ce:	f009 fd85 	bl	800b1dc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016d2:	4811      	ldr	r0, [pc, #68]	; (8001718 <MX_DAC1_Init+0x54>)
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_DAC1_Init+0x58>)
 80016d6:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016d8:	f002 fe01 	bl	80042de <HAL_DAC_Init>
 80016dc:	b9a8      	cbnz	r0, 800170a <MX_DAC1_Init+0x46>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80016de:	2302      	movs	r3, #2
 80016e0:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80016e2:	2200      	movs	r2, #0
 80016e4:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80016e8:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016ec:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80016ee:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80016f0:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016f2:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80016f4:	2301      	movs	r3, #1
 80016f6:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016f8:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016fa:	4669      	mov	r1, sp
 80016fc:	4806      	ldr	r0, [pc, #24]	; (8001718 <MX_DAC1_Init+0x54>)
 80016fe:	f002 fe01 	bl	8004304 <HAL_DAC_ConfigChannel>
 8001702:	b928      	cbnz	r0, 8001710 <MX_DAC1_Init+0x4c>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001704:	b00d      	add	sp, #52	; 0x34
 8001706:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800170a:	f000 fc35 	bl	8001f78 <Error_Handler>
 800170e:	e7e6      	b.n	80016de <MX_DAC1_Init+0x1a>
    Error_Handler();
 8001710:	f000 fc32 	bl	8001f78 <Error_Handler>
}
 8001714:	e7f6      	b.n	8001704 <MX_DAC1_Init+0x40>
 8001716:	bf00      	nop
 8001718:	20000668 	.word	0x20000668
 800171c:	50000800 	.word	0x50000800

08001720 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001720:	b500      	push	{lr}
 8001722:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001724:	2230      	movs	r2, #48	; 0x30
 8001726:	2100      	movs	r1, #0
 8001728:	4668      	mov	r0, sp
 800172a:	f009 fd57 	bl	800b1dc <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 800172e:	4811      	ldr	r0, [pc, #68]	; (8001774 <MX_DAC2_Init+0x54>)
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_DAC2_Init+0x58>)
 8001732:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001734:	f002 fdd3 	bl	80042de <HAL_DAC_Init>
 8001738:	b9a8      	cbnz	r0, 8001766 <MX_DAC2_Init+0x46>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800173a:	2302      	movs	r3, #2
 800173c:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800173e:	2200      	movs	r2, #0
 8001740:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001744:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001748:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800174a:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800174c:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800174e:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001750:	2301      	movs	r3, #1
 8001752:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001754:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001756:	4669      	mov	r1, sp
 8001758:	4806      	ldr	r0, [pc, #24]	; (8001774 <MX_DAC2_Init+0x54>)
 800175a:	f002 fdd3 	bl	8004304 <HAL_DAC_ConfigChannel>
 800175e:	b928      	cbnz	r0, 800176c <MX_DAC2_Init+0x4c>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001760:	b00d      	add	sp, #52	; 0x34
 8001762:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001766:	f000 fc07 	bl	8001f78 <Error_Handler>
 800176a:	e7e6      	b.n	800173a <MX_DAC2_Init+0x1a>
    Error_Handler();
 800176c:	f000 fc04 	bl	8001f78 <Error_Handler>
}
 8001770:	e7f6      	b.n	8001760 <MX_DAC2_Init+0x40>
 8001772:	bf00      	nop
 8001774:	2000067c 	.word	0x2000067c
 8001778:	50000c00 	.word	0x50000c00

0800177c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800177c:	b500      	push	{lr}
 800177e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	2300      	movs	r3, #0
 8001782:	9305      	str	r3, [sp, #20]
 8001784:	9306      	str	r3, [sp, #24]
 8001786:	9307      	str	r3, [sp, #28]
 8001788:	9308      	str	r3, [sp, #32]
 800178a:	9309      	str	r3, [sp, #36]	; 0x24
  if(dacHandle->Instance==DAC1)
 800178c:	6803      	ldr	r3, [r0, #0]
 800178e:	4a21      	ldr	r2, [pc, #132]	; (8001814 <HAL_DAC_MspInit+0x98>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d005      	beq.n	80017a0 <HAL_DAC_MspInit+0x24>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
  else if(dacHandle->Instance==DAC2)
 8001794:	4a20      	ldr	r2, [pc, #128]	; (8001818 <HAL_DAC_MspInit+0x9c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01f      	beq.n	80017da <HAL_DAC_MspInit+0x5e>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800179a:	b00b      	add	sp, #44	; 0x2c
 800179c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 80017a0:	4b1e      	ldr	r3, [pc, #120]	; (800181c <HAL_DAC_MspInit+0xa0>)
 80017a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80017aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017ac:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80017b0:	9201      	str	r2, [sp, #4]
 80017b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017b6:	f042 0201 	orr.w	r2, r2, #1
 80017ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DAC1_Pin;
 80017c6:	2310      	movs	r3, #16
 80017c8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ca:	2303      	movs	r3, #3
 80017cc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(DAC1_GPIO_Port, &GPIO_InitStruct);
 80017ce:	a905      	add	r1, sp, #20
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d4:	f003 f9d4 	bl	8004b80 <HAL_GPIO_Init>
 80017d8:	e7df      	b.n	800179a <HAL_DAC_MspInit+0x1e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_DAC_MspInit+0xa0>)
 80017dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80017e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80017e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017e6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80017ea:	9203      	str	r2, [sp, #12]
 80017ec:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017f0:	f042 0201 	orr.w	r2, r2, #1
 80017f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80017f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	9304      	str	r3, [sp, #16]
 80017fe:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = DAC2_Pin;
 8001800:	2340      	movs	r3, #64	; 0x40
 8001802:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001804:	2303      	movs	r3, #3
 8001806:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(DAC2_GPIO_Port, &GPIO_InitStruct);
 8001808:	a905      	add	r1, sp, #20
 800180a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180e:	f003 f9b7 	bl	8004b80 <HAL_GPIO_Init>
}
 8001812:	e7c2      	b.n	800179a <HAL_DAC_MspInit+0x1e>
 8001814:	50000800 	.word	0x50000800
 8001818:	50000c00 	.word	0x50000c00
 800181c:	40021000 	.word	0x40021000

08001820 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
void MX_DMA_Init(void)
{
 8001820:	b500      	push	{lr}
 8001822:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <MX_DMA_Init+0xc4>)
 8001826:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001828:	f042 0204 	orr.w	r2, r2, #4
 800182c:	649a      	str	r2, [r3, #72]	; 0x48
 800182e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001830:	f002 0204 	and.w	r2, r2, #4
 8001834:	9200      	str	r2, [sp, #0]
 8001836:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001838:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	649a      	str	r2, [r3, #72]	; 0x48
 8001840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	9b01      	ldr	r3, [sp, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 800184a:	4827      	ldr	r0, [pc, #156]	; (80018e8 <MX_DMA_Init+0xc8>)
 800184c:	4b27      	ldr	r3, [pc, #156]	; (80018ec <MX_DMA_Init+0xcc>)
 800184e:	6003      	str	r3, [r0, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_MEM2MEM;
 8001850:	2300      	movs	r3, #0
 8001852:	6043      	str	r3, [r0, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001854:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001858:	6082      	str	r2, [r0, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 800185a:	2240      	movs	r2, #64	; 0x40
 800185c:	60c2      	str	r2, [r0, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_DISABLE;
 800185e:	6103      	str	r3, [r0, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001864:	6142      	str	r2, [r0, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001866:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800186a:	6182      	str	r2, [r0, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 800186c:	61c3      	str	r3, [r0, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_HIGH;
 800186e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001872:	6203      	str	r3, [r0, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8001874:	f002 fe9e 	bl	80045b4 <HAL_DMA_Init>
 8001878:	bb88      	cbnz	r0, 80018de <MX_DMA_Init+0xbe>
    Error_Handler();
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	4611      	mov	r1, r2
 800187e:	200b      	movs	r0, #11
 8001880:	f002 fc5c 	bl	800413c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001884:	200b      	movs	r0, #11
 8001886:	f002 fc91 	bl	80041ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	4611      	mov	r1, r2
 800188e:	200d      	movs	r0, #13
 8001890:	f002 fc54 	bl	800413c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001894:	200d      	movs	r0, #13
 8001896:	f002 fc89 	bl	80041ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	4611      	mov	r1, r2
 800189e:	200e      	movs	r0, #14
 80018a0:	f002 fc4c 	bl	800413c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80018a4:	200e      	movs	r0, #14
 80018a6:	f002 fc81 	bl	80041ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	4611      	mov	r1, r2
 80018ae:	200f      	movs	r0, #15
 80018b0:	f002 fc44 	bl	800413c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80018b4:	200f      	movs	r0, #15
 80018b6:	f002 fc79 	bl	80041ac <HAL_NVIC_EnableIRQ>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ba:	490d      	ldr	r1, [pc, #52]	; (80018f0 <MX_DMA_Init+0xd0>)
 80018bc:	68cb      	ldr	r3, [r1, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <MX_DMA_Init+0xd4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018ca:	6018      	str	r0, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	68c9      	ldr	r1, [r1, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ce:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018d6:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);

}
 80018d8:	b003      	add	sp, #12
 80018da:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80018de:	f000 fb4b 	bl	8001f78 <Error_Handler>
 80018e2:	e7ca      	b.n	800187a <MX_DMA_Init+0x5a>
 80018e4:	40021000 	.word	0x40021000
 80018e8:	20000690 	.word	0x20000690
 80018ec:	40020008 	.word	0x40020008
 80018f0:	e000ed00 	.word	0xe000ed00
 80018f4:	e000e100 	.word	0xe000e100

080018f8 <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80018f8:	b508      	push	{r3, lr}
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80018fa:	480f      	ldr	r0, [pc, #60]	; (8001938 <MX_FDCAN2_Init+0x40>)
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_FDCAN2_Init+0x44>)
 80018fe:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001900:	2300      	movs	r3, #0
 8001902:	6043      	str	r3, [r0, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001904:	6083      	str	r3, [r0, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001906:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001908:	7403      	strb	r3, [r0, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800190a:	7443      	strb	r3, [r0, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800190c:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800190e:	2210      	movs	r2, #16
 8001910:	6142      	str	r2, [r0, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001912:	2201      	movs	r2, #1
 8001914:	6182      	str	r2, [r0, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001916:	2102      	movs	r1, #2
 8001918:	61c1      	str	r1, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800191a:	6201      	str	r1, [r0, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800191c:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800191e:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001920:	62c2      	str	r2, [r0, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001922:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001924:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001926:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001928:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800192a:	f003 f83f 	bl	80049ac <HAL_FDCAN_Init>
 800192e:	b900      	cbnz	r0, 8001932 <MX_FDCAN2_Init+0x3a>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001930:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001932:	f000 fb21 	bl	8001f78 <Error_Handler>
}
 8001936:	e7fb      	b.n	8001930 <MX_FDCAN2_Init+0x38>
 8001938:	200006f0 	.word	0x200006f0
 800193c:	40006800 	.word	0x40006800

08001940 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001940:	b510      	push	{r4, lr}
 8001942:	b09c      	sub	sp, #112	; 0x70
 8001944:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001946:	2100      	movs	r1, #0
 8001948:	9117      	str	r1, [sp, #92]	; 0x5c
 800194a:	9118      	str	r1, [sp, #96]	; 0x60
 800194c:	9119      	str	r1, [sp, #100]	; 0x64
 800194e:	911a      	str	r1, [sp, #104]	; 0x68
 8001950:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001952:	2254      	movs	r2, #84	; 0x54
 8001954:	a802      	add	r0, sp, #8
 8001956:	f009 fc41 	bl	800b1dc <memset>
  if(fdcanHandle->Instance==FDCAN2)
 800195a:	6822      	ldr	r2, [r4, #0]
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_FDCAN_MspInit+0x84>)
 800195e:	429a      	cmp	r2, r3
 8001960:	d001      	beq.n	8001966 <HAL_FDCAN_MspInit+0x26>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001962:	b01c      	add	sp, #112	; 0x70
 8001964:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196a:	9302      	str	r3, [sp, #8]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800196c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001970:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001972:	a802      	add	r0, sp, #8
 8001974:	f005 fb16 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001978:	bb08      	cbnz	r0, 80019be <HAL_FDCAN_MspInit+0x7e>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <HAL_FDCAN_MspInit+0x88>)
 800197c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800197e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001982:	659a      	str	r2, [r3, #88]	; 0x58
 8001984:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001986:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800198a:	9200      	str	r2, [sp, #0]
 800198c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001990:	f042 0202 	orr.w	r2, r2, #2
 8001994:	64da      	str	r2, [r3, #76]	; 0x4c
 8001996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 80019a0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80019a4:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80019b0:	2309      	movs	r3, #9
 80019b2:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	a917      	add	r1, sp, #92	; 0x5c
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <HAL_FDCAN_MspInit+0x8c>)
 80019b8:	f003 f8e2 	bl	8004b80 <HAL_GPIO_Init>
}
 80019bc:	e7d1      	b.n	8001962 <HAL_FDCAN_MspInit+0x22>
      Error_Handler();
 80019be:	f000 fadb 	bl	8001f78 <Error_Handler>
 80019c2:	e7da      	b.n	800197a <HAL_FDCAN_MspInit+0x3a>
 80019c4:	40006800 	.word	0x40006800
 80019c8:	40021000 	.word	0x40021000
 80019cc:	48000400 	.word	0x48000400

080019d0 <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80019d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d2:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	2300      	movs	r3, #0
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	9302      	str	r3, [sp, #8]
 80019da:	9303      	str	r3, [sp, #12]
 80019dc:	9304      	str	r3, [sp, #16]
 80019de:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_FMC_MspInit+0x7c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	b10b      	cbz	r3, 80019ea <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80019e6:	b007      	add	sp, #28
 80019e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_FMC_MspInit+0x7c>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 80019f0:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_FMC_MspInit+0x80>)
 80019f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019f4:	f042 0201 	orr.w	r2, r2, #1
 80019f8:	651a      	str	r2, [r3, #80]	; 0x50
 80019fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001a04:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001a08:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2602      	movs	r6, #2
 8001a0c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2503      	movs	r5, #3
 8001a10:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a12:	240c      	movs	r4, #12
 8001a14:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a16:	a901      	add	r1, sp, #4
 8001a18:	480e      	ldr	r0, [pc, #56]	; (8001a54 <HAL_FMC_MspInit+0x84>)
 8001a1a:	f003 f8b1 	bl	8004b80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001a1e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001a22:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2700      	movs	r7, #0
 8001a28:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a2c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2e:	a901      	add	r1, sp, #4
 8001a30:	4809      	ldr	r0, [pc, #36]	; (8001a58 <HAL_FMC_MspInit+0x88>)
 8001a32:	f003 f8a5 	bl	8004b80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8001a36:	2320      	movs	r3, #32
 8001a38:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a40:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8001a42:	a901      	add	r1, sp, #4
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <HAL_FMC_MspInit+0x8c>)
 8001a46:	f003 f89b 	bl	8004b80 <HAL_GPIO_Init>
 8001a4a:	e7cc      	b.n	80019e6 <HAL_FMC_MspInit+0x16>
 8001a4c:	20000754 	.word	0x20000754
 8001a50:	40021000 	.word	0x40021000
 8001a54:	48001000 	.word	0x48001000
 8001a58:	48000c00 	.word	0x48000c00
 8001a5c:	48001800 	.word	0x48001800

08001a60 <MX_FMC_Init>:
{
 8001a60:	b510      	push	{r4, lr}
 8001a62:	b088      	sub	sp, #32
  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001a64:	2220      	movs	r2, #32
 8001a66:	2100      	movs	r1, #0
 8001a68:	4668      	mov	r0, sp
 8001a6a:	f009 fbb7 	bl	800b1dc <memset>
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001a6e:	4818      	ldr	r0, [pc, #96]	; (8001ad0 <MX_FMC_Init+0x70>)
 8001a70:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001a74:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001a76:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001a7a:	6043      	str	r3, [r0, #4]
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6082      	str	r2, [r0, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001a80:	60c2      	str	r2, [r0, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001a82:	6102      	str	r2, [r0, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001a84:	2110      	movs	r1, #16
 8001a86:	6141      	str	r1, [r0, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001a88:	6182      	str	r2, [r0, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001a8a:	61c2      	str	r2, [r0, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001a8c:	6202      	str	r2, [r0, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a92:	6243      	str	r3, [r0, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001a94:	6282      	str	r2, [r0, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001a96:	62c2      	str	r2, [r0, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001a98:	6302      	str	r2, [r0, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001a9a:	6342      	str	r2, [r0, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001a9c:	6382      	str	r2, [r0, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001a9e:	63c2      	str	r2, [r0, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8001aa0:	6442      	str	r2, [r0, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001aa2:	6402      	str	r2, [r0, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8001aa4:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
  Timing.AddressSetupTime = 1;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	9300      	str	r3, [sp, #0]
  Timing.AddressHoldTime = 15;
 8001aac:	240f      	movs	r4, #15
 8001aae:	9401      	str	r4, [sp, #4]
  Timing.DataSetupTime = 1;
 8001ab0:	9302      	str	r3, [sp, #8]
  Timing.DataHoldTime = 1;
 8001ab2:	9303      	str	r3, [sp, #12]
  Timing.BusTurnAroundDuration = 1;
 8001ab4:	9304      	str	r3, [sp, #16]
  Timing.CLKDivision = 16;
 8001ab6:	9105      	str	r1, [sp, #20]
  Timing.DataLatency = 17;
 8001ab8:	2311      	movs	r3, #17
 8001aba:	9306      	str	r3, [sp, #24]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001abc:	4669      	mov	r1, sp
 8001abe:	f005 fca1 	bl	8007404 <HAL_SRAM_Init>
 8001ac2:	b908      	cbnz	r0, 8001ac8 <MX_FMC_Init+0x68>
}
 8001ac4:	b008      	add	sp, #32
 8001ac6:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8001ac8:	f000 fa56 	bl	8001f78 <Error_Handler>
}
 8001acc:	e7fa      	b.n	8001ac4 <MX_FMC_Init+0x64>
 8001ace:	bf00      	nop
 8001ad0:	20000758 	.word	0x20000758

08001ad4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001ad4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001ad6:	f7ff ff7b 	bl	80019d0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ada:	bd08      	pop	{r3, pc}

08001adc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ae0:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae2:	2400      	movs	r4, #0
 8001ae4:	9407      	str	r4, [sp, #28]
 8001ae6:	9408      	str	r4, [sp, #32]
 8001ae8:	9409      	str	r4, [sp, #36]	; 0x24
 8001aea:	940a      	str	r4, [sp, #40]	; 0x28
 8001aec:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aee:	4b71      	ldr	r3, [pc, #452]	; (8001cb4 <MX_GPIO_Init+0x1d8>)
 8001af0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001af2:	f042 0210 	orr.w	r2, r2, #16
 8001af6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001af8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001afa:	f002 0210 	and.w	r2, r2, #16
 8001afe:	9200      	str	r2, [sp, #0]
 8001b00:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b04:	f042 0204 	orr.w	r2, r2, #4
 8001b08:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b0c:	f002 0204 	and.w	r2, r2, #4
 8001b10:	9201      	str	r2, [sp, #4]
 8001b12:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b16:	f042 0220 	orr.w	r2, r2, #32
 8001b1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b1e:	f002 0220 	and.w	r2, r2, #32
 8001b22:	9202      	str	r2, [sp, #8]
 8001b24:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b28:	f042 0201 	orr.w	r2, r2, #1
 8001b2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b30:	f002 0201 	and.w	r2, r2, #1
 8001b34:	9203      	str	r2, [sp, #12]
 8001b36:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b3a:	f042 0202 	orr.w	r2, r2, #2
 8001b3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b42:	f002 0202 	and.w	r2, r2, #2
 8001b46:	9204      	str	r2, [sp, #16]
 8001b48:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b4c:	f042 0208 	orr.w	r2, r2, #8
 8001b50:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b54:	f002 0208 	and.w	r2, r2, #8
 8001b58:	9205      	str	r2, [sp, #20]
 8001b5a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b62:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b6a:	9306      	str	r3, [sp, #24]
 8001b6c:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin|LED3_Pin|LED0_Pin
 8001b6e:	f8df a150 	ldr.w	sl, [pc, #336]	; 8001cc0 <MX_GPIO_Init+0x1e4>
 8001b72:	4622      	mov	r2, r4
 8001b74:	f640 013c 	movw	r1, #2108	; 0x83c
 8001b78:	4650      	mov	r0, sl
 8001b7a:	f003 f8eb 	bl	8004d54 <HAL_GPIO_WritePin>
                          |ARDUINO_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);
 8001b7e:	4f4e      	ldr	r7, [pc, #312]	; (8001cb8 <MX_GPIO_Init+0x1dc>)
 8001b80:	4622      	mov	r2, r4
 8001b82:	210f      	movs	r1, #15
 8001b84:	4638      	mov	r0, r7
 8001b86:	f003 f8e5 	bl	8004d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8001b8a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8001cc4 <MX_GPIO_Init+0x1e8>
 8001b8e:	4622      	mov	r2, r4
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	4648      	mov	r0, r9
 8001b94:	f003 f8de 	bl	8004d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001b98:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8001cc8 <MX_GPIO_Init+0x1ec>
 8001b9c:	4622      	mov	r2, r4
 8001b9e:	2108      	movs	r1, #8
 8001ba0:	4640      	mov	r0, r8
 8001ba2:	f003 f8d7 	bl	8004d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIN_SLP_Pin|LCD_BKLT_Pin, GPIO_PIN_RESET);
 8001ba6:	f8df b124 	ldr.w	fp, [pc, #292]	; 8001ccc <MX_GPIO_Init+0x1f0>
 8001baa:	4622      	mov	r2, r4
 8001bac:	2160      	movs	r1, #96	; 0x60
 8001bae:	4658      	mov	r0, fp
 8001bb0:	f003 f8d0 	bl	8004d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001bb4:	4e41      	ldr	r6, [pc, #260]	; (8001cbc <MX_GPIO_Init+0x1e0>)
 8001bb6:	4622      	mov	r2, r4
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4630      	mov	r0, r6
 8001bbc:	f003 f8ca 	bl	8004d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2102      	movs	r1, #2
 8001bc4:	4630      	mov	r0, r6
 8001bc6:	f003 f8c5 	bl	8004d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = JOY_BTN_Pin|BTN_OK_Pin;
 8001bca:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001bce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd0:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd2:	2501      	movs	r5, #1
 8001bd4:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd6:	a907      	add	r1, sp, #28
 8001bd8:	4638      	mov	r0, r7
 8001bda:	f002 ffd1 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_ESC_Pin;
 8001bde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001be2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001be4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001be8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bea:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(BTN_ESC_GPIO_Port, &GPIO_InitStruct);
 8001bec:	a907      	add	r1, sp, #28
 8001bee:	4638      	mov	r0, r7
 8001bf0:	f002 ffc6 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|ARDUINO_CS_Pin;
 8001bf4:	f640 0338 	movw	r3, #2104	; 0x838
 8001bf8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfa:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c00:	a907      	add	r1, sp, #28
 8001c02:	4650      	mov	r0, sl
 8001c04:	f002 ffbc 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
 8001c08:	230f      	movs	r3, #15
 8001c0a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c12:	a907      	add	r1, sp, #28
 8001c14:	4638      	mov	r0, r7
 8001c16:	f002 ffb3 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001c26:	a907      	add	r1, sp, #28
 8001c28:	4650      	mov	r0, sl
 8001c2a:	f002 ffa9 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_DOWN_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 8001c2e:	f240 1343 	movw	r3, #323	; 0x143
 8001c32:	9307      	str	r3, [sp, #28]
//  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c38:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c3a:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c3c:	a907      	add	r1, sp, #28
 8001c3e:	4648      	mov	r0, r9
 8001c40:	f002 ff9e 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	a907      	add	r1, sp, #28
 8001c50:	4648      	mov	r0, r9
 8001c52:	f002 ff95 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001c56:	2308      	movs	r3, #8
 8001c58:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001c60:	a907      	add	r1, sp, #28
 8001c62:	4640      	mov	r0, r8
 8001c64:	f002 ff8c 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_PENIRQ_Pin;
 8001c68:	2340      	movs	r3, #64	; 0x40
 8001c6a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_PENIRQ_GPIO_Port, &GPIO_InitStruct);
 8001c70:	a907      	add	r1, sp, #28
 8001c72:	4640      	mov	r0, r8
 8001c74:	f002 ff84 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LIN_SLP_Pin|LCD_BKLT_Pin;
 8001c78:	2360      	movs	r3, #96	; 0x60
 8001c7a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	a907      	add	r1, sp, #28
 8001c84:	4658      	mov	r0, fp
 8001c86:	f002 ff7b 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001c8a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8001c92:	a907      	add	r1, sp, #28
 8001c94:	4630      	mov	r0, r6
 8001c96:	f002 ff73 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca0:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca2:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	a907      	add	r1, sp, #28
 8001ca6:	4630      	mov	r0, r6
 8001ca8:	f002 ff6a 	bl	8004b80 <HAL_GPIO_Init>

}
 8001cac:	b00d      	add	sp, #52	; 0x34
 8001cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	48000800 	.word	0x48000800
 8001cbc:	48001000 	.word	0x48001000
 8001cc0:	48001400 	.word	0x48001400
 8001cc4:	48001800 	.word	0x48001800
 8001cc8:	48000c00 	.word	0x48000c00
 8001ccc:	48000400 	.word	0x48000400

08001cd0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cd0:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cd2:	4812      	ldr	r0, [pc, #72]	; (8001d1c <MX_I2C1_Init+0x4c>)
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <MX_I2C1_Init+0x50>)
 8001cd6:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10902A95;
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <MX_I2C1_Init+0x54>)
 8001cda:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce4:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ce6:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ce8:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cea:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cec:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cee:	f003 f87f 	bl	8004df0 <HAL_I2C_Init>
 8001cf2:	b950      	cbnz	r0, 8001d0a <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4809      	ldr	r0, [pc, #36]	; (8001d1c <MX_I2C1_Init+0x4c>)
 8001cf8:	f003 fbe5 	bl	80054c6 <HAL_I2CEx_ConfigAnalogFilter>
 8001cfc:	b940      	cbnz	r0, 8001d10 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 5) != HAL_OK)
 8001cfe:	2105      	movs	r1, #5
 8001d00:	4806      	ldr	r0, [pc, #24]	; (8001d1c <MX_I2C1_Init+0x4c>)
 8001d02:	f003 fc0e 	bl	8005522 <HAL_I2CEx_ConfigDigitalFilter>
 8001d06:	b930      	cbnz	r0, 8001d16 <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d08:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001d0a:	f000 f935 	bl	8001f78 <Error_Handler>
 8001d0e:	e7f1      	b.n	8001cf4 <MX_I2C1_Init+0x24>
    Error_Handler();
 8001d10:	f000 f932 	bl	8001f78 <Error_Handler>
 8001d14:	e7f3      	b.n	8001cfe <MX_I2C1_Init+0x2e>
    Error_Handler();
 8001d16:	f000 f92f 	bl	8001f78 <Error_Handler>
}
 8001d1a:	e7f5      	b.n	8001d08 <MX_I2C1_Init+0x38>
 8001d1c:	20000870 	.word	0x20000870
 8001d20:	40005400 	.word	0x40005400
 8001d24:	10902a95 	.word	0x10902a95

08001d28 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001d28:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d2a:	4815      	ldr	r0, [pc, #84]	; (8001d80 <MX_I2C2_Init+0x58>)
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <MX_I2C2_Init+0x5c>)
 8001d2e:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x60505F8C;
 8001d30:	f103 5301 	add.w	r3, r3, #541065216	; 0x20400000
 8001d34:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001d38:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 8001d3c:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d42:	2201      	movs	r2, #1
 8001d44:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d46:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d48:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d4a:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d4c:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d4e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d50:	f003 f84e 	bl	8004df0 <HAL_I2C_Init>
 8001d54:	b950      	cbnz	r0, 8001d6c <MX_I2C2_Init+0x44>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d56:	2100      	movs	r1, #0
 8001d58:	4809      	ldr	r0, [pc, #36]	; (8001d80 <MX_I2C2_Init+0x58>)
 8001d5a:	f003 fbb4 	bl	80054c6 <HAL_I2CEx_ConfigAnalogFilter>
 8001d5e:	b940      	cbnz	r0, 8001d72 <MX_I2C2_Init+0x4a>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d60:	2100      	movs	r1, #0
 8001d62:	4807      	ldr	r0, [pc, #28]	; (8001d80 <MX_I2C2_Init+0x58>)
 8001d64:	f003 fbdd 	bl	8005522 <HAL_I2CEx_ConfigDigitalFilter>
 8001d68:	b930      	cbnz	r0, 8001d78 <MX_I2C2_Init+0x50>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d6a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001d6c:	f000 f904 	bl	8001f78 <Error_Handler>
 8001d70:	e7f1      	b.n	8001d56 <MX_I2C2_Init+0x2e>
    Error_Handler();
 8001d72:	f000 f901 	bl	8001f78 <Error_Handler>
 8001d76:	e7f3      	b.n	8001d60 <MX_I2C2_Init+0x38>
    Error_Handler();
 8001d78:	f000 f8fe 	bl	8001f78 <Error_Handler>
}
 8001d7c:	e7f5      	b.n	8001d6a <MX_I2C2_Init+0x42>
 8001d7e:	bf00      	nop
 8001d80:	200008bc 	.word	0x200008bc
 8001d84:	40005800 	.word	0x40005800

08001d88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d8c:	b0a1      	sub	sp, #132	; 0x84
 8001d8e:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	2100      	movs	r1, #0
 8001d92:	911b      	str	r1, [sp, #108]	; 0x6c
 8001d94:	911c      	str	r1, [sp, #112]	; 0x70
 8001d96:	911d      	str	r1, [sp, #116]	; 0x74
 8001d98:	911e      	str	r1, [sp, #120]	; 0x78
 8001d9a:	911f      	str	r1, [sp, #124]	; 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d9c:	2254      	movs	r2, #84	; 0x54
 8001d9e:	a806      	add	r0, sp, #24
 8001da0:	f009 fa1c 	bl	800b1dc <memset>
  if(i2cHandle->Instance==I2C1)
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	4a5d      	ldr	r2, [pc, #372]	; (8001f1c <HAL_I2C_MspInit+0x194>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d006      	beq.n	8001dba <HAL_I2C_MspInit+0x32>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 8001dac:	4a5c      	ldr	r2, [pc, #368]	; (8001f20 <HAL_I2C_MspInit+0x198>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	f000 8086 	beq.w	8001ec0 <HAL_I2C_MspInit+0x138>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001db4:	b021      	add	sp, #132	; 0x84
 8001db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001dba:	2340      	movs	r3, #64	; 0x40
 8001dbc:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dbe:	a806      	add	r0, sp, #24
 8001dc0:	f005 f8f0 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	d172      	bne.n	8001eae <HAL_I2C_MspInit+0x126>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	4e56      	ldr	r6, [pc, #344]	; (8001f24 <HAL_I2C_MspInit+0x19c>)
 8001dca:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	64f3      	str	r3, [r6, #76]	; 0x4c
 8001dd2:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ddc:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001dde:	f043 0302 	orr.w	r3, r3, #2
 8001de2:	64f3      	str	r3, [r6, #76]	; 0x4c
 8001de4:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	9302      	str	r3, [sp, #8]
 8001dec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df2:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df4:	f04f 0912 	mov.w	r9, #18
 8001df8:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2500      	movs	r5, #0
 8001dfe:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	951e      	str	r5, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e02:	f04f 0804 	mov.w	r8, #4
 8001e06:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0a:	a91b      	add	r1, sp, #108	; 0x6c
 8001e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e10:	f002 feb6 	bl	8004b80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e14:	2780      	movs	r7, #128	; 0x80
 8001e16:	971b      	str	r7, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e18:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	951e      	str	r5, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e20:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e24:	a91b      	add	r1, sp, #108	; 0x6c
 8001e26:	4840      	ldr	r0, [pc, #256]	; (8001f28 <HAL_I2C_MspInit+0x1a0>)
 8001e28:	f002 feaa 	bl	8004b80 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e2c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001e2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e32:	65b3      	str	r3, [r6, #88]	; 0x58
 8001e34:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3a:	9303      	str	r3, [sp, #12]
 8001e3c:	9b03      	ldr	r3, [sp, #12]
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8001e3e:	483b      	ldr	r0, [pc, #236]	; (8001f2c <HAL_I2C_MspInit+0x1a4>)
 8001e40:	4b3b      	ldr	r3, [pc, #236]	; (8001f30 <HAL_I2C_MspInit+0x1a8>)
 8001e42:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001e44:	2310      	movs	r3, #16
 8001e46:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e48:	6085      	str	r5, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e4a:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e4c:	6107      	str	r7, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e4e:	6145      	str	r5, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e50:	6185      	str	r5, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001e52:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e54:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001e56:	f002 fbad 	bl	80045b4 <HAL_DMA_Init>
 8001e5a:	bb58      	cbnz	r0, 8001eb4 <HAL_I2C_MspInit+0x12c>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001e5c:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <HAL_I2C_MspInit+0x1a4>)
 8001e5e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001e60:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8001e62:	4834      	ldr	r0, [pc, #208]	; (8001f34 <HAL_I2C_MspInit+0x1ac>)
 8001e64:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <HAL_I2C_MspInit+0x1b0>)
 8001e66:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001e68:	2311      	movs	r3, #17
 8001e6a:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e6c:	2310      	movs	r3, #16
 8001e6e:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e74:	2280      	movs	r2, #128	; 0x80
 8001e76:	6102      	str	r2, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e78:	6143      	str	r3, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e7a:	6183      	str	r3, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001e7c:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e7e:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001e80:	f002 fb98 	bl	80045b4 <HAL_DMA_Init>
 8001e84:	b9c8      	cbnz	r0, 8001eba <HAL_I2C_MspInit+0x132>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001e86:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_I2C_MspInit+0x1ac>)
 8001e88:	63a3      	str	r3, [r4, #56]	; 0x38
 8001e8a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4611      	mov	r1, r2
 8001e90:	201f      	movs	r0, #31
 8001e92:	f002 f953 	bl	800413c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e96:	201f      	movs	r0, #31
 8001e98:	f002 f988 	bl	80041ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	2020      	movs	r0, #32
 8001ea2:	f002 f94b 	bl	800413c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001ea6:	2020      	movs	r0, #32
 8001ea8:	f002 f980 	bl	80041ac <HAL_NVIC_EnableIRQ>
 8001eac:	e782      	b.n	8001db4 <HAL_I2C_MspInit+0x2c>
      Error_Handler();
 8001eae:	f000 f863 	bl	8001f78 <Error_Handler>
 8001eb2:	e789      	b.n	8001dc8 <HAL_I2C_MspInit+0x40>
      Error_Handler();
 8001eb4:	f000 f860 	bl	8001f78 <Error_Handler>
 8001eb8:	e7d0      	b.n	8001e5c <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 8001eba:	f000 f85d 	bl	8001f78 <Error_Handler>
 8001ebe:	e7e2      	b.n	8001e86 <HAL_I2C_MspInit+0xfe>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec4:	a806      	add	r0, sp, #24
 8001ec6:	f005 f86d 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001eca:	bb18      	cbnz	r0, 8001f14 <HAL_I2C_MspInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ecc:	4c15      	ldr	r4, [pc, #84]	; (8001f24 <HAL_I2C_MspInit+0x19c>)
 8001ece:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001ed6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	9304      	str	r3, [sp, #16]
 8001ede:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ee0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ee4:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee6:	2312      	movs	r3, #18
 8001ee8:	931c      	str	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	931d      	str	r3, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	931e      	str	r3, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	931f      	str	r3, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef6:	a91b      	add	r1, sp, #108	; 0x6c
 8001ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efc:	f002 fe40 	bl	8004b80 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f06:	65a3      	str	r3, [r4, #88]	; 0x58
 8001f08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0e:	9305      	str	r3, [sp, #20]
 8001f10:	9b05      	ldr	r3, [sp, #20]
}
 8001f12:	e74f      	b.n	8001db4 <HAL_I2C_MspInit+0x2c>
      Error_Handler();
 8001f14:	f000 f830 	bl	8001f78 <Error_Handler>
 8001f18:	e7d8      	b.n	8001ecc <HAL_I2C_MspInit+0x144>
 8001f1a:	bf00      	nop
 8001f1c:	40005400 	.word	0x40005400
 8001f20:	40005800 	.word	0x40005800
 8001f24:	40021000 	.word	0x40021000
 8001f28:	48000400 	.word	0x48000400
 8001f2c:	200007b0 	.word	0x200007b0
 8001f30:	40020030 	.word	0x40020030
 8001f34:	20000810 	.word	0x20000810
 8001f38:	40020044 	.word	0x40020044

08001f3c <joystick_init>:
 */
#include "joystick.h"

void joystick_init(joystick_t *joystick)
{
	joystick->raw_min.x = 640;
 8001f3c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001f40:	6003      	str	r3, [r0, #0]
	joystick->raw_max.x = 3070;
 8001f42:	f640 33fe 	movw	r3, #3070	; 0xbfe
 8001f46:	6083      	str	r3, [r0, #8]
	joystick->raw_min.y = 733;
 8001f48:	f240 23dd 	movw	r3, #733	; 0x2dd
 8001f4c:	6043      	str	r3, [r0, #4]
	joystick->raw_max.y = 3185;
 8001f4e:	f640 4371 	movw	r3, #3185	; 0xc71
 8001f52:	60c3      	str	r3, [r0, #12]
	joystick->out_max.x = 90;
 8001f54:	235a      	movs	r3, #90	; 0x5a
 8001f56:	6103      	str	r3, [r0, #16]
	joystick->out_max.y = 90;
 8001f58:	6143      	str	r3, [r0, #20]


	joystick->x_k = (float) joystick->out_max.x / (joystick->raw_max.x - joystick->raw_min.x);
 8001f5a:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <joystick_init+0x34>)
 8001f5c:	6183      	str	r3, [r0, #24]
	joystick->y_k = (float) joystick->out_max.y / (joystick->raw_max.y - joystick->raw_min.y);
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <joystick_init+0x38>)
 8001f60:	61c3      	str	r3, [r0, #28]
	joystick->n.x = (joystick->raw_max.x+joystick->raw_min.x)/2;
 8001f62:	f240 733f 	movw	r3, #1855	; 0x73f
 8001f66:	6203      	str	r3, [r0, #32]
	joystick->n.y = (joystick->raw_max.y+joystick->raw_min.y)/2;
 8001f68:	f240 73a7 	movw	r3, #1959	; 0x7a7
 8001f6c:	6243      	str	r3, [r0, #36]	; 0x24

}
 8001f6e:	4770      	bx	lr
 8001f70:	3d17b426 	.word	0x3d17b426
 8001f74:	3d1657b3 	.word	0x3d1657b3

08001f78 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f78:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f7a:	e7fe      	b.n	8001f7a <Error_Handler+0x2>

08001f7c <SystemClock_Config>:
{
 8001f7c:	b500      	push	{lr}
 8001f7e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f80:	2238      	movs	r2, #56	; 0x38
 8001f82:	2100      	movs	r1, #0
 8001f84:	a806      	add	r0, sp, #24
 8001f86:	f009 f929 	bl	800b1dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	9001      	str	r0, [sp, #4]
 8001f8e:	9002      	str	r0, [sp, #8]
 8001f90:	9003      	str	r0, [sp, #12]
 8001f92:	9004      	str	r0, [sp, #16]
 8001f94:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001f96:	f004 fae9 	bl	800656c <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001f9a:	2321      	movs	r3, #33	; 0x21
 8001f9c:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001f9e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001fa2:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fac:	2103      	movs	r1, #3
 8001fae:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001fb0:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8001fb2:	222a      	movs	r2, #42	; 0x2a
 8001fb4:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fb6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8001fb8:	2206      	movs	r2, #6
 8001fba:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fbc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fbe:	a806      	add	r0, sp, #24
 8001fc0:	f004 fc12 	bl	80067e8 <HAL_RCC_OscConfig>
 8001fc4:	b980      	cbnz	r0, 8001fe8 <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc6:	230f      	movs	r3, #15
 8001fc8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fd2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fd4:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fd6:	2104      	movs	r1, #4
 8001fd8:	eb0d 0001 	add.w	r0, sp, r1
 8001fdc:	f004 febc 	bl	8006d58 <HAL_RCC_ClockConfig>
 8001fe0:	b920      	cbnz	r0, 8001fec <SystemClock_Config+0x70>
}
 8001fe2:	b015      	add	sp, #84	; 0x54
 8001fe4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001fe8:	f7ff ffc6 	bl	8001f78 <Error_Handler>
    Error_Handler();
 8001fec:	f7ff ffc4 	bl	8001f78 <Error_Handler>

08001ff0 <main>:
{
 8001ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ff4:	b090      	sub	sp, #64	; 0x40
	coord_t joystick_raw	=	{0,0};
 8001ff6:	2400      	movs	r4, #0
 8001ff8:	940e      	str	r4, [sp, #56]	; 0x38
 8001ffa:	940f      	str	r4, [sp, #60]	; 0x3c
	coord_t joystick_new	=	{0,0};
 8001ffc:	940c      	str	r4, [sp, #48]	; 0x30
 8001ffe:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_Init();
 8002000:	f001 fa38 	bl	8003474 <HAL_Init>
  SystemClock_Config();
 8002004:	f7ff ffba 	bl	8001f7c <SystemClock_Config>
  MX_GPIO_Init();
 8002008:	f7ff fd68 	bl	8001adc <MX_GPIO_Init>
  MX_ADC1_Init();
 800200c:	f7ff f8a0 	bl	8001150 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002010:	f7ff f8ee 	bl	80011f0 <MX_ADC2_Init>
  MX_FMC_Init();
 8002014:	f7ff fd24 	bl	8001a60 <MX_FMC_Init>
  MX_I2C2_Init();
 8002018:	f7ff fe86 	bl	8001d28 <MX_I2C2_Init>
  MX_UART4_Init();
 800201c:	f000 fd9c 	bl	8002b58 <MX_UART4_Init>
  MX_UART5_Init();
 8002020:	f000 fdce 	bl	8002bc0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8002024:	f000 fe00 	bl	8002c28 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002028:	f000 fef8 	bl	8002e1c <MX_USART2_UART_Init>
  MX_QUADSPI1_Init();
 800202c:	f000 f890 	bl	8002150 <MX_QUADSPI1_Init>
  MX_SPI1_Init();
 8002030:	f000 f918 	bl	8002264 <MX_SPI1_Init>
  MX_TIM5_Init();
 8002034:	f000 fb52 	bl	80026dc <MX_TIM5_Init>
  MX_TIM8_Init();
 8002038:	f000 fbc6 	bl	80027c8 <MX_TIM8_Init>
  MX_TIM20_Init();
 800203c:	f000 fce4 	bl	8002a08 <MX_TIM20_Init>
  MX_ADC3_Init();
 8002040:	f7ff f91a 	bl	8001278 <MX_ADC3_Init>
  MX_DAC1_Init();
 8002044:	f7ff fb3e 	bl	80016c4 <MX_DAC1_Init>
  MX_DAC2_Init();
 8002048:	f7ff fb6a 	bl	8001720 <MX_DAC2_Init>
  MX_FDCAN2_Init();
 800204c:	f7ff fc54 	bl	80018f8 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8002050:	f7ff fe3e 	bl	8001cd0 <MX_I2C1_Init>
  MX_TIM15_Init();
 8002054:	f000 fc60 	bl	8002918 <MX_TIM15_Init>
  MX_USART3_UART_Init();
 8002058:	f000 ff14 	bl	8002e84 <MX_USART3_UART_Init>
  MX_USB_Device_Init();
 800205c:	f008 fe38 	bl	800acd0 <MX_USB_Device_Init>
  MX_DMA_Init();
 8002060:	f7ff fbde 	bl	8001820 <MX_DMA_Init>
  MX_CRC_Init();
 8002064:	f7ff fb02 	bl	800166c <MX_CRC_Init>
  MX_ADC4_Init();	//bug workaround: https://community.st.com/s/question/0D50X0000BVnBhASQV/bug-report-dma-and-adc-initialization-order-changed-in-stm32f4-hal-v1241-causing-incorrect-adc-operation
 8002068:	f7ff f956 	bl	8001318 <MX_ADC4_Init>
	LCD_Init();
 800206c:	f007 fd4a 	bl	8009b04 <LCD_Init>
	LCD_UG_init();
 8002070:	f007 febc 	bl	8009dec <LCD_UG_init>
  joystick_init(&joystick);
 8002074:	a802      	add	r0, sp, #8
 8002076:	f7ff ff61 	bl	8001f3c <joystick_init>
  HAL_ADC_Start_DMA(&hadc4, &joystick_raw, 2);
 800207a:	2202      	movs	r2, #2
 800207c:	a90e      	add	r1, sp, #56	; 0x38
 800207e:	4831      	ldr	r0, [pc, #196]	; (8002144 <main+0x154>)
 8002080:	f001 fec4 	bl	8003e0c <HAL_ADC_Start_DMA>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 2);
 8002084:	2202      	movs	r2, #2
 8002086:	2101      	movs	r1, #1
 8002088:	2006      	movs	r0, #6
 800208a:	f002 f857 	bl	800413c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800208e:	2006      	movs	r0, #6
 8002090:	f002 f88c 	bl	80041ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 2);
 8002094:	2202      	movs	r2, #2
 8002096:	2101      	movs	r1, #1
 8002098:	2007      	movs	r0, #7
 800209a:	f002 f84f 	bl	800413c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800209e:	2007      	movs	r0, #7
 80020a0:	f002 f884 	bl	80041ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 2);
 80020a4:	2202      	movs	r2, #2
 80020a6:	2101      	movs	r1, #1
 80020a8:	200a      	movs	r0, #10
 80020aa:	f002 f847 	bl	800413c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020ae:	2017      	movs	r0, #23
 80020b0:	f002 f87c 	bl	80041ac <HAL_NVIC_EnableIRQ>
	life_points* lp 					= malloc(sizeof(life_points));
 80020b4:	2004      	movs	r0, #4
 80020b6:	f009 f889 	bl	800b1cc <malloc>
 80020ba:	4680      	mov	r8, r0
	lp->life_points = 100;
 80020bc:	2364      	movs	r3, #100	; 0x64
 80020be:	6003      	str	r3, [r0, #0]
	acceleration* guysko_acc 	= malloc(sizeof(acceleration));
 80020c0:	2004      	movs	r0, #4
 80020c2:	f009 f883 	bl	800b1cc <malloc>
 80020c6:	4606      	mov	r6, r0
	guysko_acc->x = 0;
 80020c8:	8004      	strh	r4, [r0, #0]
	guysko_acc->y = 0;
 80020ca:	8044      	strh	r4, [r0, #2]
	velocity* guysko_vel 			= malloc(sizeof(velocity));
 80020cc:	2004      	movs	r0, #4
 80020ce:	f009 f87d 	bl	800b1cc <malloc>
 80020d2:	4607      	mov	r7, r0
	guysko_vel->x = 0;
 80020d4:	8004      	strh	r4, [r0, #0]
	guysko_vel->y = 0;
 80020d6:	8044      	strh	r4, [r0, #2]
	move* guysko_mov 					= malloc(sizeof(move));
 80020d8:	200c      	movs	r0, #12
 80020da:	f009 f877 	bl	800b1cc <malloc>
 80020de:	4605      	mov	r5, r0
	guysko_mov->x = 0;
 80020e0:	8004      	strh	r4, [r0, #0]
	guysko_mov->y = 0;
 80020e2:	8044      	strh	r4, [r0, #2]
	guysko_mov->x_remainder = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	6043      	str	r3, [r0, #4]
	guysko_mov->y_remainder = 0;
 80020e8:	6083      	str	r3, [r0, #8]
	position* guysko_pos 			= malloc(sizeof(position));
 80020ea:	2004      	movs	r0, #4
 80020ec:	f009 f86e 	bl	800b1cc <malloc>
	guysko_pos->x = 50;
 80020f0:	2332      	movs	r3, #50	; 0x32
 80020f2:	8003      	strh	r3, [r0, #0]
	guysko_pos->y = 150;
 80020f4:	2396      	movs	r3, #150	; 0x96
 80020f6:	7083      	strb	r3, [r0, #2]
	guysko* player = new_guysko(lp, 0, guysko_acc, guysko_vel, guysko_mov, guysko_pos);
 80020f8:	9001      	str	r0, [sp, #4]
 80020fa:	9500      	str	r5, [sp, #0]
 80020fc:	463b      	mov	r3, r7
 80020fe:	4632      	mov	r2, r6
 8002100:	4621      	mov	r1, r4
 8002102:	4640      	mov	r0, r8
 8002104:	f001 f93c 	bl	8003380 <new_guysko>
 8002108:	4604      	mov	r4, r0
  	cycle = false;
 800210a:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <main+0x158>)
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
  	update_guysko_velocity(player);
 8002110:	4620      	mov	r0, r4
 8002112:	f001 f851 	bl	80031b8 <update_guysko_velocity>
  	update_guysko_move(player, FPS);
 8002116:	4b0d      	ldr	r3, [pc, #52]	; (800214c <main+0x15c>)
 8002118:	7819      	ldrb	r1, [r3, #0]
 800211a:	4620      	mov	r0, r4
 800211c:	f000 ffec 	bl	80030f8 <update_guysko_move>
  	update_guysko_position(player);
 8002120:	4620      	mov	r0, r4
 8002122:	f000 ffd8 	bl	80030d6 <update_guysko_position>
  	draw_guysko(player);
 8002126:	4620      	mov	r0, r4
 8002128:	f001 f8d0 	bl	80032cc <draw_guysko>
		action_set(&joystick_raw);
 800212c:	a80e      	add	r0, sp, #56	; 0x38
 800212e:	f7fe ffdb 	bl	80010e8 <action_set>
  	while (!cycle) {
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <main+0x158>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1e7      	bne.n	800210a <main+0x11a>
  		action_set(&joystick_raw);
 800213a:	a80e      	add	r0, sp, #56	; 0x38
 800213c:	f7fe ffd4 	bl	80010e8 <action_set>
 8002140:	e7f7      	b.n	8002132 <main+0x142>
 8002142:	bf00      	nop
 8002144:	20000578 	.word	0x20000578
 8002148:	20000908 	.word	0x20000908
 800214c:	20000000 	.word	0x20000000

08002150 <MX_QUADSPI1_Init>:

QSPI_HandleTypeDef hqspi1;

/* QUADSPI1 init function */
void MX_QUADSPI1_Init(void)
{
 8002150:	b508      	push	{r3, lr}
  /* USER CODE END QUADSPI1_Init 0 */

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  hqspi1.Instance = QUADSPI;
 8002152:	480a      	ldr	r0, [pc, #40]	; (800217c <MX_QUADSPI1_Init+0x2c>)
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <MX_QUADSPI1_Init+0x30>)
 8002156:	6003      	str	r3, [r0, #0]
  hqspi1.Init.ClockPrescaler = 255;
 8002158:	23ff      	movs	r3, #255	; 0xff
 800215a:	6043      	str	r3, [r0, #4]
  hqspi1.Init.FifoThreshold = 1;
 800215c:	2201      	movs	r2, #1
 800215e:	6082      	str	r2, [r0, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002160:	2300      	movs	r3, #0
 8002162:	60c3      	str	r3, [r0, #12]
  hqspi1.Init.FlashSize = 1;
 8002164:	6102      	str	r2, [r0, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002166:	6143      	str	r3, [r0, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002168:	6183      	str	r3, [r0, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_1;
 800216a:	61c3      	str	r3, [r0, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800216c:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 800216e:	f004 fab7 	bl	80066e0 <HAL_QSPI_Init>
 8002172:	b900      	cbnz	r0, 8002176 <MX_QUADSPI1_Init+0x26>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 8002174:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002176:	f7ff feff 	bl	8001f78 <Error_Handler>
}
 800217a:	e7fb      	b.n	8002174 <MX_QUADSPI1_Init+0x24>
 800217c:	2000090c 	.word	0x2000090c
 8002180:	a0001000 	.word	0xa0001000

08002184 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002184:	b570      	push	{r4, r5, r6, lr}
 8002186:	b09e      	sub	sp, #120	; 0x78
 8002188:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218a:	2100      	movs	r1, #0
 800218c:	9119      	str	r1, [sp, #100]	; 0x64
 800218e:	911a      	str	r1, [sp, #104]	; 0x68
 8002190:	911b      	str	r1, [sp, #108]	; 0x6c
 8002192:	911c      	str	r1, [sp, #112]	; 0x70
 8002194:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002196:	2254      	movs	r2, #84	; 0x54
 8002198:	a804      	add	r0, sp, #16
 800219a:	f009 f81f 	bl	800b1dc <memset>
  if(qspiHandle->Instance==QUADSPI)
 800219e:	6822      	ldr	r2, [r4, #0]
 80021a0:	4b2c      	ldr	r3, [pc, #176]	; (8002254 <HAL_QSPI_MspInit+0xd0>)
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d001      	beq.n	80021aa <HAL_QSPI_MspInit+0x26>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80021a6:	b01e      	add	sp, #120	; 0x78
 80021a8:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80021aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021ae:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b0:	a804      	add	r0, sp, #16
 80021b2:	f004 fef7 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 80021b6:	2800      	cmp	r0, #0
 80021b8:	d148      	bne.n	800224c <HAL_QSPI_MspInit+0xc8>
    __HAL_RCC_QSPI_CLK_ENABLE();
 80021ba:	4b27      	ldr	r3, [pc, #156]	; (8002258 <HAL_QSPI_MspInit+0xd4>)
 80021bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021c2:	651a      	str	r2, [r3, #80]	; 0x50
 80021c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021c6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80021ca:	9200      	str	r2, [sp, #0]
 80021cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021d0:	f042 0201 	orr.w	r2, r2, #1
 80021d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80021d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021d8:	f002 0201 	and.w	r2, r2, #1
 80021dc:	9201      	str	r2, [sp, #4]
 80021de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021e2:	f042 0202 	orr.w	r2, r2, #2
 80021e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80021e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021ea:	f002 0202 	and.w	r2, r2, #2
 80021ee:	9202      	str	r2, [sp, #8]
 80021f0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021f4:	f042 0220 	orr.w	r2, r2, #32
 80021f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80021fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	9303      	str	r3, [sp, #12]
 8002202:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = QSPI_IO2_Pin;
 8002204:	2380      	movs	r3, #128	; 0x80
 8002206:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2602      	movs	r6, #2
 800220a:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2400      	movs	r4, #0
 800220e:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002212:	250a      	movs	r5, #10
 8002214:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(QSPI_IO2_GPIO_Port, &GPIO_InitStruct);
 8002216:	a919      	add	r1, sp, #100	; 0x64
 8002218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221c:	f002 fcb0 	bl	8004b80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_IO1_Pin|QSPI_IO0_Pin|QSPI_CLK_Pin|QSPI_NCS_Pin;
 8002220:	f640 4303 	movw	r3, #3075	; 0xc03
 8002224:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800222c:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222e:	a919      	add	r1, sp, #100	; 0x64
 8002230:	480a      	ldr	r0, [pc, #40]	; (800225c <HAL_QSPI_MspInit+0xd8>)
 8002232:	f002 fca5 	bl	8004b80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_IO3_Pin;
 8002236:	2340      	movs	r3, #64	; 0x40
 8002238:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223e:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002240:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(QSPI_IO3_GPIO_Port, &GPIO_InitStruct);
 8002242:	a919      	add	r1, sp, #100	; 0x64
 8002244:	4806      	ldr	r0, [pc, #24]	; (8002260 <HAL_QSPI_MspInit+0xdc>)
 8002246:	f002 fc9b 	bl	8004b80 <HAL_GPIO_Init>
}
 800224a:	e7ac      	b.n	80021a6 <HAL_QSPI_MspInit+0x22>
      Error_Handler();
 800224c:	f7ff fe94 	bl	8001f78 <Error_Handler>
 8002250:	e7b3      	b.n	80021ba <HAL_QSPI_MspInit+0x36>
 8002252:	bf00      	nop
 8002254:	a0001000 	.word	0xa0001000
 8002258:	40021000 	.word	0x40021000
 800225c:	48000400 	.word	0x48000400
 8002260:	48001400 	.word	0x48001400

08002264 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002264:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002266:	4810      	ldr	r0, [pc, #64]	; (80022a8 <MX_SPI1_Init+0x44>)
 8002268:	4b10      	ldr	r3, [pc, #64]	; (80022ac <MX_SPI1_Init+0x48>)
 800226a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800226c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002270:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002272:	2300      	movs	r3, #0
 8002274:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002276:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800227a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800227c:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800227e:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002284:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002286:	2228      	movs	r2, #40	; 0x28
 8002288:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800228a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800228c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800228e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002290:	2207      	movs	r2, #7
 8002292:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002294:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002296:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002298:	f005 f840 	bl	800731c <HAL_SPI_Init>
 800229c:	b900      	cbnz	r0, 80022a0 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800229e:	bd08      	pop	{r3, pc}
    Error_Handler();
 80022a0:	f7ff fe6a 	bl	8001f78 <Error_Handler>
}
 80022a4:	e7fb      	b.n	800229e <MX_SPI1_Init+0x3a>
 80022a6:	bf00      	nop
 80022a8:	20000958 	.word	0x20000958
 80022ac:	40013000 	.word	0x40013000

080022b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022b0:	b500      	push	{lr}
 80022b2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	2300      	movs	r3, #0
 80022b6:	9303      	str	r3, [sp, #12]
 80022b8:	9304      	str	r3, [sp, #16]
 80022ba:	9305      	str	r3, [sp, #20]
 80022bc:	9306      	str	r3, [sp, #24]
 80022be:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 80022c0:	6802      	ldr	r2, [r0, #0]
 80022c2:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_SPI_MspInit+0x5c>)
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d002      	beq.n	80022ce <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022c8:	b009      	add	sp, #36	; 0x24
 80022ca:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022ce:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80022d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022d8:	661a      	str	r2, [r3, #96]	; 0x60
 80022da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80022e0:	9201      	str	r2, [sp, #4]
 80022e2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80022ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f2:	9302      	str	r3, [sp, #8]
 80022f4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80022f6:	231c      	movs	r3, #28
 80022f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022fe:	2305      	movs	r3, #5
 8002300:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002302:	a903      	add	r1, sp, #12
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <HAL_SPI_MspInit+0x60>)
 8002306:	f002 fc3b 	bl	8004b80 <HAL_GPIO_Init>
}
 800230a:	e7dd      	b.n	80022c8 <HAL_SPI_MspInit+0x18>
 800230c:	40013000 	.word	0x40013000
 8002310:	48001800 	.word	0x48001800

08002314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002314:	b500      	push	{lr}
 8002316:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_MspInit+0x34>)
 800231a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800231c:	f042 0201 	orr.w	r2, r2, #1
 8002320:	661a      	str	r2, [r3, #96]	; 0x60
 8002322:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002324:	f002 0201 	and.w	r2, r2, #1
 8002328:	9200      	str	r2, [sp, #0]
 800232a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800232e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002332:	659a      	str	r2, [r3, #88]	; 0x58
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800233e:	f004 f99b 	bl	8006678 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002342:	b003      	add	sp, #12
 8002344:	f85d fb04 	ldr.w	pc, [sp], #4
 8002348:	40021000 	.word	0x40021000

0800234c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800234c:	e7fe      	b.n	800234c <NMI_Handler>

0800234e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800234e:	e7fe      	b.n	800234e <HardFault_Handler>

08002350 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002350:	e7fe      	b.n	8002350 <MemManage_Handler>

08002352 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002352:	e7fe      	b.n	8002352 <BusFault_Handler>

08002354 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002354:	e7fe      	b.n	8002354 <UsageFault_Handler>

08002356 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002356:	4770      	bx	lr

08002358 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002358:	4770      	bx	lr

0800235a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800235a:	4770      	bx	lr

0800235c <SysTick_Handler>:
volatile	uint8_t	milliseconds 	= 0;
extern bool cycle;
extern uint8_t FPS;

void SysTick_Handler(void)
{
 800235c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800235e:	f001 f899 	bl	8003494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  	// Here the frame rate of TERRSKO is set to values of 10 to 100 FPS
    if (milliseconds >= FPS) {
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <SysTick_Handler+0x2c>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	4a08      	ldr	r2, [pc, #32]	; (800238c <SysTick_Handler+0x30>)
 800236a:	7812      	ldrb	r2, [r2, #0]
 800236c:	4293      	cmp	r3, r2
 800236e:	d305      	bcc.n	800237c <SysTick_Handler+0x20>
    	milliseconds = 0;
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <SysTick_Handler+0x2c>)
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
    	cycle = true;
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <SysTick_Handler+0x34>)
 8002378:	2201      	movs	r2, #1
 800237a:	701a      	strb	r2, [r3, #0]
    }
    milliseconds++;
 800237c:	4a02      	ldr	r2, [pc, #8]	; (8002388 <SysTick_Handler+0x2c>)
 800237e:	7813      	ldrb	r3, [r2, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	b2db      	uxtb	r3, r3
 8002384:	7013      	strb	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002386:	bd08      	pop	{r3, pc}
 8002388:	200009bc 	.word	0x200009bc
 800238c:	20000000 	.word	0x20000000
 8002390:	20000908 	.word	0x20000908

08002394 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002394:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 8002396:	4802      	ldr	r0, [pc, #8]	; (80023a0 <DMA1_Channel1_IRQHandler+0xc>)
 8002398:	f002 fa5d 	bl	8004856 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800239c:	bd08      	pop	{r3, pc}
 800239e:	bf00      	nop
 80023a0:	20000690 	.word	0x20000690

080023a4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80023a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80023a6:	4802      	ldr	r0, [pc, #8]	; (80023b0 <DMA1_Channel3_IRQHandler+0xc>)
 80023a8:	f002 fa55 	bl	8004856 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80023ac:	bd08      	pop	{r3, pc}
 80023ae:	bf00      	nop
 80023b0:	200007b0 	.word	0x200007b0

080023b4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80023b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80023b6:	4802      	ldr	r0, [pc, #8]	; (80023c0 <DMA1_Channel4_IRQHandler+0xc>)
 80023b8:	f002 fa4d 	bl	8004856 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80023bc:	bd08      	pop	{r3, pc}
 80023be:	bf00      	nop
 80023c0:	20000810 	.word	0x20000810

080023c4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80023c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80023c6:	4802      	ldr	r0, [pc, #8]	; (80023d0 <DMA1_Channel5_IRQHandler+0xc>)
 80023c8:	f002 fa45 	bl	8004856 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80023cc:	bd08      	pop	{r3, pc}
 80023ce:	bf00      	nop
 80023d0:	200005e4 	.word	0x200005e4

080023d4 <DMA1_Channel6_IRQHandler>:
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80023d4:	4770      	bx	lr

080023d6 <DMA1_Channel7_IRQHandler>:
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80023d6:	4770      	bx	lr

080023d8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80023d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80023da:	4802      	ldr	r0, [pc, #8]	; (80023e4 <USB_LP_IRQHandler+0xc>)
 80023dc:	f003 fe83 	bl	80060e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80023e0:	bd08      	pop	{r3, pc}
 80023e2:	bf00      	nop
 80023e4:	20002280 	.word	0x20002280

080023e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80023e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80023ea:	4802      	ldr	r0, [pc, #8]	; (80023f4 <I2C1_EV_IRQHandler+0xc>)
 80023ec:	f002 fd5e 	bl	8004eac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80023f0:	bd08      	pop	{r3, pc}
 80023f2:	bf00      	nop
 80023f4:	20000870 	.word	0x20000870

080023f8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80023f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80023fa:	4802      	ldr	r0, [pc, #8]	; (8002404 <I2C1_ER_IRQHandler+0xc>)
 80023fc:	f003 f821 	bl	8005442 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002400:	bd08      	pop	{r3, pc}
 8002402:	bf00      	nop
 8002404:	20000870 	.word	0x20000870

08002408 <EXTI0_IRQHandler>:
//	}
//}
/*	TIM2 IS READY FOR ACTIVITY IN FREQUENCY: 1HZ */

void EXTI0_IRQHandler() {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0)) {
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <EXTI0_IRQHandler+0x18>)
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	f013 0f01 	tst.w	r3, #1
 8002410:	d002      	beq.n	8002418 <EXTI0_IRQHandler+0x10>
			act_up = true;
 8002412:	4b04      	ldr	r3, [pc, #16]	; (8002424 <EXTI0_IRQHandler+0x1c>)
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8002418:	4b01      	ldr	r3, [pc, #4]	; (8002420 <EXTI0_IRQHandler+0x18>)
 800241a:	2201      	movs	r2, #1
 800241c:	615a      	str	r2, [r3, #20]
}
 800241e:	4770      	bx	lr
 8002420:	40010400 	.word	0x40010400
 8002424:	20000423 	.word	0x20000423

08002428 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler() {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1)) {
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <EXTI1_IRQHandler+0x18>)
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	f013 0f02 	tst.w	r3, #2
 8002430:	d002      	beq.n	8002438 <EXTI1_IRQHandler+0x10>
		act_left = true;
 8002432:	4b04      	ldr	r3, [pc, #16]	; (8002444 <EXTI1_IRQHandler+0x1c>)
 8002434:	2201      	movs	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 8002438:	4b01      	ldr	r3, [pc, #4]	; (8002440 <EXTI1_IRQHandler+0x18>)
 800243a:	2202      	movs	r2, #2
 800243c:	615a      	str	r2, [r3, #20]
}
 800243e:	4770      	bx	lr
 8002440:	40010400 	.word	0x40010400
 8002444:	20000421 	.word	0x20000421

08002448 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler() {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6)) {
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <EXTI9_5_IRQHandler+0x30>)
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002450:	d002      	beq.n	8002458 <EXTI9_5_IRQHandler+0x10>
		act_down = true;
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <EXTI9_5_IRQHandler+0x34>)
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
	}
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8)) {
 8002458:	4b07      	ldr	r3, [pc, #28]	; (8002478 <EXTI9_5_IRQHandler+0x30>)
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002460:	d002      	beq.n	8002468 <EXTI9_5_IRQHandler+0x20>
		act_right = true;
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <EXTI9_5_IRQHandler+0x38>)
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <EXTI9_5_IRQHandler+0x30>)
 800246a:	2240      	movs	r2, #64	; 0x40
 800246c:	615a      	str	r2, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 800246e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002472:	615a      	str	r2, [r3, #20]
}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40010400 	.word	0x40010400
 800247c:	20000420 	.word	0x20000420
 8002480:	20000422 	.word	0x20000422

08002484 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002484:	2001      	movs	r0, #1
 8002486:	4770      	bx	lr

08002488 <_kill>:

int _kill(int pid, int sig)
{
 8002488:	b508      	push	{r3, lr}
	errno = EINVAL;
 800248a:	f008 fe75 	bl	800b178 <__errno>
 800248e:	2316      	movs	r3, #22
 8002490:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002496:	bd08      	pop	{r3, pc}

08002498 <_exit>:

void _exit (int status)
{
 8002498:	b508      	push	{r3, lr}
	_kill(status, -1);
 800249a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800249e:	f7ff fff3 	bl	8002488 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024a2:	e7fe      	b.n	80024a2 <_exit+0xa>

080024a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024a4:	b570      	push	{r4, r5, r6, lr}
 80024a6:	460c      	mov	r4, r1
 80024a8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024aa:	2500      	movs	r5, #0
 80024ac:	e006      	b.n	80024bc <_read+0x18>
	{
		*ptr++ = __io_getchar();
 80024ae:	f3af 8000 	nop.w
 80024b2:	4621      	mov	r1, r4
 80024b4:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b8:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 80024ba:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024bc:	42b5      	cmp	r5, r6
 80024be:	dbf6      	blt.n	80024ae <_read+0xa>
	}

return len;
}
 80024c0:	4630      	mov	r0, r6
 80024c2:	bd70      	pop	{r4, r5, r6, pc}

080024c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024c4:	b570      	push	{r4, r5, r6, lr}
 80024c6:	460c      	mov	r4, r1
 80024c8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ca:	2500      	movs	r5, #0
 80024cc:	e004      	b.n	80024d8 <_write+0x14>
	{
		__io_putchar(*ptr++);
 80024ce:	f814 0b01 	ldrb.w	r0, [r4], #1
 80024d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d6:	3501      	adds	r5, #1
 80024d8:	42b5      	cmp	r5, r6
 80024da:	dbf8      	blt.n	80024ce <_write+0xa>
	}
	return len;
}
 80024dc:	4630      	mov	r0, r6
 80024de:	bd70      	pop	{r4, r5, r6, pc}

080024e0 <_close>:

int _close(int file)
{
	return -1;
}
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024e4:	4770      	bx	lr

080024e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80024e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ea:	604b      	str	r3, [r1, #4]
	return 0;
}
 80024ec:	2000      	movs	r0, #0
 80024ee:	4770      	bx	lr

080024f0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80024f0:	2001      	movs	r0, #1
 80024f2:	4770      	bx	lr

080024f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80024f4:	2000      	movs	r0, #0
 80024f6:	4770      	bx	lr

080024f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024f8:	b510      	push	{r4, lr}
 80024fa:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024fc:	4a0c      	ldr	r2, [pc, #48]	; (8002530 <_sbrk+0x38>)
 80024fe:	490d      	ldr	r1, [pc, #52]	; (8002534 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002500:	480d      	ldr	r0, [pc, #52]	; (8002538 <_sbrk+0x40>)
 8002502:	6800      	ldr	r0, [r0, #0]
 8002504:	b140      	cbz	r0, 8002518 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002506:	480c      	ldr	r0, [pc, #48]	; (8002538 <_sbrk+0x40>)
 8002508:	6800      	ldr	r0, [r0, #0]
 800250a:	4403      	add	r3, r0
 800250c:	1a52      	subs	r2, r2, r1
 800250e:	4293      	cmp	r3, r2
 8002510:	d806      	bhi.n	8002520 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <_sbrk+0x40>)
 8002514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002516:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002518:	4807      	ldr	r0, [pc, #28]	; (8002538 <_sbrk+0x40>)
 800251a:	4c08      	ldr	r4, [pc, #32]	; (800253c <_sbrk+0x44>)
 800251c:	6004      	str	r4, [r0, #0]
 800251e:	e7f2      	b.n	8002506 <_sbrk+0xe>
    errno = ENOMEM;
 8002520:	f008 fe2a 	bl	800b178 <__errno>
 8002524:	230c      	movs	r3, #12
 8002526:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800252c:	e7f3      	b.n	8002516 <_sbrk+0x1e>
 800252e:	bf00      	nop
 8002530:	20020000 	.word	0x20020000
 8002534:	00000400 	.word	0x00000400
 8002538:	200009c0 	.word	0x200009c0
 800253c:	200027a8 	.word	0x200027a8

08002540 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002540:	4a03      	ldr	r2, [pc, #12]	; (8002550 <SystemInit+0x10>)
 8002542:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002546:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800254a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800254e:	4770      	bx	lr
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim20);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002554:	b084      	sub	sp, #16

  if(tim_baseHandle->Instance==TIM5)
 8002556:	6803      	ldr	r3, [r0, #0]
 8002558:	4a1c      	ldr	r2, [pc, #112]	; (80025cc <HAL_TIM_Base_MspInit+0x78>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d013      	beq.n	8002586 <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 800255e:	4a1c      	ldr	r2, [pc, #112]	; (80025d0 <HAL_TIM_Base_MspInit+0x7c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d01c      	beq.n	800259e <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM15)
 8002564:	4a1b      	ldr	r2, [pc, #108]	; (80025d4 <HAL_TIM_Base_MspInit+0x80>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d024      	beq.n	80025b4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM20)
 800256a:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <HAL_TIM_Base_MspInit+0x84>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d114      	bne.n	800259a <HAL_TIM_Base_MspInit+0x46>
  {
  /* USER CODE BEGIN TIM20_MspInit 0 */

  /* USER CODE END TIM20_MspInit 0 */
    /* TIM20 clock enable */
    __HAL_RCC_TIM20_CLK_ENABLE();
 8002570:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <HAL_TIM_Base_MspInit+0x88>)
 8002572:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002574:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002578:	661a      	str	r2, [r3, #96]	; 0x60
 800257a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002580:	9303      	str	r3, [sp, #12]
 8002582:	9b03      	ldr	r3, [sp, #12]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8002584:	e009      	b.n	800259a <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <HAL_TIM_Base_MspInit+0x88>)
 8002588:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800258a:	f042 0208 	orr.w	r2, r2, #8
 800258e:	659a      	str	r2, [r3, #88]	; 0x58
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	9b00      	ldr	r3, [sp, #0]
}
 800259a:	b004      	add	sp, #16
 800259c:	4770      	bx	lr
    __HAL_RCC_TIM8_CLK_ENABLE();
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <HAL_TIM_Base_MspInit+0x88>)
 80025a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025a6:	661a      	str	r2, [r3, #96]	; 0x60
 80025a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	9b01      	ldr	r3, [sp, #4]
 80025b2:	e7f2      	b.n	800259a <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <HAL_TIM_Base_MspInit+0x88>)
 80025b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025bc:	661a      	str	r2, [r3, #96]	; 0x60
 80025be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c4:	9302      	str	r3, [sp, #8]
 80025c6:	9b02      	ldr	r3, [sp, #8]
 80025c8:	e7e7      	b.n	800259a <HAL_TIM_Base_MspInit+0x46>
 80025ca:	bf00      	nop
 80025cc:	40000c00 	.word	0x40000c00
 80025d0:	40013400 	.word	0x40013400
 80025d4:	40014000 	.word	0x40014000
 80025d8:	40015000 	.word	0x40015000
 80025dc:	40021000 	.word	0x40021000

080025e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025e0:	b500      	push	{lr}
 80025e2:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	2300      	movs	r3, #0
 80025e6:	9305      	str	r3, [sp, #20]
 80025e8:	9306      	str	r3, [sp, #24]
 80025ea:	9307      	str	r3, [sp, #28]
 80025ec:	9308      	str	r3, [sp, #32]
 80025ee:	9309      	str	r3, [sp, #36]	; 0x24
  if(timHandle->Instance==TIM5)
 80025f0:	6803      	ldr	r3, [r0, #0]
 80025f2:	4a33      	ldr	r2, [pc, #204]	; (80026c0 <HAL_TIM_MspPostInit+0xe0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00b      	beq.n	8002610 <HAL_TIM_MspPostInit+0x30>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 80025f8:	4a32      	ldr	r2, [pc, #200]	; (80026c4 <HAL_TIM_MspPostInit+0xe4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d01e      	beq.n	800263c <HAL_TIM_MspPostInit+0x5c>

  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM15)
 80025fe:	4a32      	ldr	r2, [pc, #200]	; (80026c8 <HAL_TIM_MspPostInit+0xe8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d031      	beq.n	8002668 <HAL_TIM_MspPostInit+0x88>

  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM20)
 8002604:	4a31      	ldr	r2, [pc, #196]	; (80026cc <HAL_TIM_MspPostInit+0xec>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d044      	beq.n	8002694 <HAL_TIM_MspPostInit+0xb4>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 800260a:	b00b      	add	sp, #44	; 0x2c
 800260c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002610:	4b2f      	ldr	r3, [pc, #188]	; (80026d0 <HAL_TIM_MspPostInit+0xf0>)
 8002612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002614:	f042 0220 	orr.w	r2, r2, #32
 8002618:	64da      	str	r2, [r3, #76]	; 0x4c
 800261a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM2_Pin|PWM3_Pin|PWM4_Pin;
 8002624:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002628:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262a:	2302      	movs	r3, #2
 800262c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 800262e:	2306      	movs	r3, #6
 8002630:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002632:	a905      	add	r1, sp, #20
 8002634:	4827      	ldr	r0, [pc, #156]	; (80026d4 <HAL_TIM_MspPostInit+0xf4>)
 8002636:	f002 faa3 	bl	8004b80 <HAL_GPIO_Init>
 800263a:	e7e6      	b.n	800260a <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800263c:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <HAL_TIM_MspPostInit+0xf0>)
 800263e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002640:	f042 0204 	orr.w	r2, r2, #4
 8002644:	64da      	str	r2, [r3, #76]	; 0x4c
 8002646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	9302      	str	r3, [sp, #8]
 800264e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM10_Pin|PWM11_Pin|PWM12_Pin|PWM13_Pin;
 8002650:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002654:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800265a:	2304      	movs	r3, #4
 800265c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800265e:	a905      	add	r1, sp, #20
 8002660:	481d      	ldr	r0, [pc, #116]	; (80026d8 <HAL_TIM_MspPostInit+0xf8>)
 8002662:	f002 fa8d 	bl	8004b80 <HAL_GPIO_Init>
 8002666:	e7d0      	b.n	800260a <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <HAL_TIM_MspPostInit+0xf0>)
 800266a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800266c:	f042 0220 	orr.w	r2, r2, #32
 8002670:	64da      	str	r2, [r3, #76]	; 0x4c
 8002672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	9303      	str	r3, [sp, #12]
 800267a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = PWM5_Pin;
 800267c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002680:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
 8002686:	2303      	movs	r3, #3
 8002688:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(PWM5_GPIO_Port, &GPIO_InitStruct);
 800268a:	a905      	add	r1, sp, #20
 800268c:	4811      	ldr	r0, [pc, #68]	; (80026d4 <HAL_TIM_MspPostInit+0xf4>)
 800268e:	f002 fa77 	bl	8004b80 <HAL_GPIO_Init>
 8002692:	e7ba      	b.n	800260a <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <HAL_TIM_MspPostInit+0xf0>)
 8002696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002698:	f042 0220 	orr.w	r2, r2, #32
 800269c:	64da      	str	r2, [r3, #76]	; 0x4c
 800269e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	9304      	str	r3, [sp, #16]
 80026a6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = PWM6_Pin|PWM7_Pin|PWM8_Pin|PWM9_Pin;
 80026a8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80026ac:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 80026b2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026b4:	a905      	add	r1, sp, #20
 80026b6:	4807      	ldr	r0, [pc, #28]	; (80026d4 <HAL_TIM_MspPostInit+0xf4>)
 80026b8:	f002 fa62 	bl	8004b80 <HAL_GPIO_Init>
}
 80026bc:	e7a5      	b.n	800260a <HAL_TIM_MspPostInit+0x2a>
 80026be:	bf00      	nop
 80026c0:	40000c00 	.word	0x40000c00
 80026c4:	40013400 	.word	0x40013400
 80026c8:	40014000 	.word	0x40014000
 80026cc:	40015000 	.word	0x40015000
 80026d0:	40021000 	.word	0x40021000
 80026d4:	48001400 	.word	0x48001400
 80026d8:	48000800 	.word	0x48000800

080026dc <MX_TIM5_Init>:
{
 80026dc:	b500      	push	{lr}
 80026de:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026e0:	2300      	movs	r3, #0
 80026e2:	930a      	str	r3, [sp, #40]	; 0x28
 80026e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80026e6:	930c      	str	r3, [sp, #48]	; 0x30
 80026e8:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ea:	9307      	str	r3, [sp, #28]
 80026ec:	9308      	str	r3, [sp, #32]
 80026ee:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	9302      	str	r3, [sp, #8]
 80026f6:	9303      	str	r3, [sp, #12]
 80026f8:	9304      	str	r3, [sp, #16]
 80026fa:	9305      	str	r3, [sp, #20]
 80026fc:	9306      	str	r3, [sp, #24]
  htim5.Instance = TIM5;
 80026fe:	4830      	ldr	r0, [pc, #192]	; (80027c0 <MX_TIM5_Init+0xe4>)
 8002700:	4a30      	ldr	r2, [pc, #192]	; (80027c4 <MX_TIM5_Init+0xe8>)
 8002702:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 10;
 8002704:	220a      	movs	r2, #10
 8002706:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002708:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 10000;
 800270a:	f242 7210 	movw	r2, #10000	; 0x2710
 800270e:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002710:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002716:	f005 f8a9 	bl	800786c <HAL_TIM_Base_Init>
 800271a:	2800      	cmp	r0, #0
 800271c:	d13a      	bne.n	8002794 <MX_TIM5_Init+0xb8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800271e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002722:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002724:	a90a      	add	r1, sp, #40	; 0x28
 8002726:	4826      	ldr	r0, [pc, #152]	; (80027c0 <MX_TIM5_Init+0xe4>)
 8002728:	f005 f9f8 	bl	8007b1c <HAL_TIM_ConfigClockSource>
 800272c:	2800      	cmp	r0, #0
 800272e:	d134      	bne.n	800279a <MX_TIM5_Init+0xbe>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002730:	4823      	ldr	r0, [pc, #140]	; (80027c0 <MX_TIM5_Init+0xe4>)
 8002732:	f005 f8cb 	bl	80078cc <HAL_TIM_PWM_Init>
 8002736:	2800      	cmp	r0, #0
 8002738:	d132      	bne.n	80027a0 <MX_TIM5_Init+0xc4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002740:	a907      	add	r1, sp, #28
 8002742:	481f      	ldr	r0, [pc, #124]	; (80027c0 <MX_TIM5_Init+0xe4>)
 8002744:	f005 fa94 	bl	8007c70 <HAL_TIMEx_MasterConfigSynchronization>
 8002748:	bb68      	cbnz	r0, 80027a6 <MX_TIM5_Init+0xca>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800274a:	2360      	movs	r3, #96	; 0x60
 800274c:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 200;
 800274e:	23c8      	movs	r3, #200	; 0xc8
 8002750:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002752:	2300      	movs	r3, #0
 8002754:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002756:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002758:	2204      	movs	r2, #4
 800275a:	4669      	mov	r1, sp
 800275c:	4818      	ldr	r0, [pc, #96]	; (80027c0 <MX_TIM5_Init+0xe4>)
 800275e:	f005 f933 	bl	80079c8 <HAL_TIM_PWM_ConfigChannel>
 8002762:	bb18      	cbnz	r0, 80027ac <MX_TIM5_Init+0xd0>
  sConfigOC.Pulse = 400;
 8002764:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002768:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800276a:	2208      	movs	r2, #8
 800276c:	4669      	mov	r1, sp
 800276e:	4814      	ldr	r0, [pc, #80]	; (80027c0 <MX_TIM5_Init+0xe4>)
 8002770:	f005 f92a 	bl	80079c8 <HAL_TIM_PWM_ConfigChannel>
 8002774:	b9e8      	cbnz	r0, 80027b2 <MX_TIM5_Init+0xd6>
  sConfigOC.Pulse = 600;
 8002776:	f44f 7316 	mov.w	r3, #600	; 0x258
 800277a:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800277c:	220c      	movs	r2, #12
 800277e:	4669      	mov	r1, sp
 8002780:	480f      	ldr	r0, [pc, #60]	; (80027c0 <MX_TIM5_Init+0xe4>)
 8002782:	f005 f921 	bl	80079c8 <HAL_TIM_PWM_ConfigChannel>
 8002786:	b9b8      	cbnz	r0, 80027b8 <MX_TIM5_Init+0xdc>
  HAL_TIM_MspPostInit(&htim5);
 8002788:	480d      	ldr	r0, [pc, #52]	; (80027c0 <MX_TIM5_Init+0xe4>)
 800278a:	f7ff ff29 	bl	80025e0 <HAL_TIM_MspPostInit>
}
 800278e:	b00f      	add	sp, #60	; 0x3c
 8002790:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002794:	f7ff fbf0 	bl	8001f78 <Error_Handler>
 8002798:	e7c1      	b.n	800271e <MX_TIM5_Init+0x42>
    Error_Handler();
 800279a:	f7ff fbed 	bl	8001f78 <Error_Handler>
 800279e:	e7c7      	b.n	8002730 <MX_TIM5_Init+0x54>
    Error_Handler();
 80027a0:	f7ff fbea 	bl	8001f78 <Error_Handler>
 80027a4:	e7c9      	b.n	800273a <MX_TIM5_Init+0x5e>
    Error_Handler();
 80027a6:	f7ff fbe7 	bl	8001f78 <Error_Handler>
 80027aa:	e7ce      	b.n	800274a <MX_TIM5_Init+0x6e>
    Error_Handler();
 80027ac:	f7ff fbe4 	bl	8001f78 <Error_Handler>
 80027b0:	e7d8      	b.n	8002764 <MX_TIM5_Init+0x88>
    Error_Handler();
 80027b2:	f7ff fbe1 	bl	8001f78 <Error_Handler>
 80027b6:	e7de      	b.n	8002776 <MX_TIM5_Init+0x9a>
    Error_Handler();
 80027b8:	f7ff fbde 	bl	8001f78 <Error_Handler>
 80027bc:	e7e4      	b.n	8002788 <MX_TIM5_Init+0xac>
 80027be:	bf00      	nop
 80027c0:	20000a5c 	.word	0x20000a5c
 80027c4:	40000c00 	.word	0x40000c00

080027c8 <MX_TIM8_Init>:
{
 80027c8:	b510      	push	{r4, lr}
 80027ca:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027cc:	2400      	movs	r4, #0
 80027ce:	9418      	str	r4, [sp, #96]	; 0x60
 80027d0:	9419      	str	r4, [sp, #100]	; 0x64
 80027d2:	941a      	str	r4, [sp, #104]	; 0x68
 80027d4:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d6:	9415      	str	r4, [sp, #84]	; 0x54
 80027d8:	9416      	str	r4, [sp, #88]	; 0x58
 80027da:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027dc:	940e      	str	r4, [sp, #56]	; 0x38
 80027de:	940f      	str	r4, [sp, #60]	; 0x3c
 80027e0:	9410      	str	r4, [sp, #64]	; 0x40
 80027e2:	9411      	str	r4, [sp, #68]	; 0x44
 80027e4:	9412      	str	r4, [sp, #72]	; 0x48
 80027e6:	9413      	str	r4, [sp, #76]	; 0x4c
 80027e8:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027ea:	2234      	movs	r2, #52	; 0x34
 80027ec:	4621      	mov	r1, r4
 80027ee:	a801      	add	r0, sp, #4
 80027f0:	f008 fcf4 	bl	800b1dc <memset>
  htim8.Instance = TIM8;
 80027f4:	4846      	ldr	r0, [pc, #280]	; (8002910 <MX_TIM8_Init+0x148>)
 80027f6:	4b47      	ldr	r3, [pc, #284]	; (8002914 <MX_TIM8_Init+0x14c>)
 80027f8:	6003      	str	r3, [r0, #0]
  htim8.Init.Prescaler = 0;
 80027fa:	6044      	str	r4, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027fc:	6084      	str	r4, [r0, #8]
  htim8.Init.Period = 65535;
 80027fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002802:	60c3      	str	r3, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002804:	6104      	str	r4, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 8002806:	6144      	str	r4, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002808:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800280a:	f005 f82f 	bl	800786c <HAL_TIM_Base_Init>
 800280e:	2800      	cmp	r0, #0
 8002810:	d162      	bne.n	80028d8 <MX_TIM8_Init+0x110>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002816:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002818:	a918      	add	r1, sp, #96	; 0x60
 800281a:	483d      	ldr	r0, [pc, #244]	; (8002910 <MX_TIM8_Init+0x148>)
 800281c:	f005 f97e 	bl	8007b1c <HAL_TIM_ConfigClockSource>
 8002820:	2800      	cmp	r0, #0
 8002822:	d15c      	bne.n	80028de <MX_TIM8_Init+0x116>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002824:	483a      	ldr	r0, [pc, #232]	; (8002910 <MX_TIM8_Init+0x148>)
 8002826:	f005 f851 	bl	80078cc <HAL_TIM_PWM_Init>
 800282a:	2800      	cmp	r0, #0
 800282c:	d15a      	bne.n	80028e4 <MX_TIM8_Init+0x11c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800282e:	2300      	movs	r3, #0
 8002830:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002832:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002834:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002836:	a915      	add	r1, sp, #84	; 0x54
 8002838:	4835      	ldr	r0, [pc, #212]	; (8002910 <MX_TIM8_Init+0x148>)
 800283a:	f005 fa19 	bl	8007c70 <HAL_TIMEx_MasterConfigSynchronization>
 800283e:	2800      	cmp	r0, #0
 8002840:	d153      	bne.n	80028ea <MX_TIM8_Init+0x122>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002842:	2360      	movs	r3, #96	; 0x60
 8002844:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 1000;
 8002846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284a:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800284c:	2200      	movs	r2, #0
 800284e:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002850:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002852:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002854:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002856:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002858:	a90e      	add	r1, sp, #56	; 0x38
 800285a:	482d      	ldr	r0, [pc, #180]	; (8002910 <MX_TIM8_Init+0x148>)
 800285c:	f005 f8b4 	bl	80079c8 <HAL_TIM_PWM_ConfigChannel>
 8002860:	2800      	cmp	r0, #0
 8002862:	d145      	bne.n	80028f0 <MX_TIM8_Init+0x128>
  sConfigOC.Pulse = 2000;
 8002864:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002868:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800286a:	2204      	movs	r2, #4
 800286c:	a90e      	add	r1, sp, #56	; 0x38
 800286e:	4828      	ldr	r0, [pc, #160]	; (8002910 <MX_TIM8_Init+0x148>)
 8002870:	f005 f8aa 	bl	80079c8 <HAL_TIM_PWM_ConfigChannel>
 8002874:	2800      	cmp	r0, #0
 8002876:	d13e      	bne.n	80028f6 <MX_TIM8_Init+0x12e>
  sConfigOC.Pulse = 4000;
 8002878:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800287c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800287e:	2208      	movs	r2, #8
 8002880:	a90e      	add	r1, sp, #56	; 0x38
 8002882:	4823      	ldr	r0, [pc, #140]	; (8002910 <MX_TIM8_Init+0x148>)
 8002884:	f005 f8a0 	bl	80079c8 <HAL_TIM_PWM_ConfigChannel>
 8002888:	2800      	cmp	r0, #0
 800288a:	d137      	bne.n	80028fc <MX_TIM8_Init+0x134>
  sConfigOC.Pulse = 8000;
 800288c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8002890:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002892:	220c      	movs	r2, #12
 8002894:	a90e      	add	r1, sp, #56	; 0x38
 8002896:	481e      	ldr	r0, [pc, #120]	; (8002910 <MX_TIM8_Init+0x148>)
 8002898:	f005 f896 	bl	80079c8 <HAL_TIM_PWM_ConfigChannel>
 800289c:	2800      	cmp	r0, #0
 800289e:	d130      	bne.n	8002902 <MX_TIM8_Init+0x13a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028a0:	2300      	movs	r3, #0
 80028a2:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028a4:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028a6:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028a8:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028aa:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028b0:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80028b2:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80028b4:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80028b6:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80028b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028bc:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80028be:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80028c0:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028c2:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80028c4:	a901      	add	r1, sp, #4
 80028c6:	4812      	ldr	r0, [pc, #72]	; (8002910 <MX_TIM8_Init+0x148>)
 80028c8:	f005 fa28 	bl	8007d1c <HAL_TIMEx_ConfigBreakDeadTime>
 80028cc:	b9e0      	cbnz	r0, 8002908 <MX_TIM8_Init+0x140>
  HAL_TIM_MspPostInit(&htim8);
 80028ce:	4810      	ldr	r0, [pc, #64]	; (8002910 <MX_TIM8_Init+0x148>)
 80028d0:	f7ff fe86 	bl	80025e0 <HAL_TIM_MspPostInit>
}
 80028d4:	b01c      	add	sp, #112	; 0x70
 80028d6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80028d8:	f7ff fb4e 	bl	8001f78 <Error_Handler>
 80028dc:	e799      	b.n	8002812 <MX_TIM8_Init+0x4a>
    Error_Handler();
 80028de:	f7ff fb4b 	bl	8001f78 <Error_Handler>
 80028e2:	e79f      	b.n	8002824 <MX_TIM8_Init+0x5c>
    Error_Handler();
 80028e4:	f7ff fb48 	bl	8001f78 <Error_Handler>
 80028e8:	e7a1      	b.n	800282e <MX_TIM8_Init+0x66>
    Error_Handler();
 80028ea:	f7ff fb45 	bl	8001f78 <Error_Handler>
 80028ee:	e7a8      	b.n	8002842 <MX_TIM8_Init+0x7a>
    Error_Handler();
 80028f0:	f7ff fb42 	bl	8001f78 <Error_Handler>
 80028f4:	e7b6      	b.n	8002864 <MX_TIM8_Init+0x9c>
    Error_Handler();
 80028f6:	f7ff fb3f 	bl	8001f78 <Error_Handler>
 80028fa:	e7bd      	b.n	8002878 <MX_TIM8_Init+0xb0>
    Error_Handler();
 80028fc:	f7ff fb3c 	bl	8001f78 <Error_Handler>
 8002900:	e7c4      	b.n	800288c <MX_TIM8_Init+0xc4>
    Error_Handler();
 8002902:	f7ff fb39 	bl	8001f78 <Error_Handler>
 8002906:	e7cb      	b.n	80028a0 <MX_TIM8_Init+0xd8>
    Error_Handler();
 8002908:	f7ff fb36 	bl	8001f78 <Error_Handler>
 800290c:	e7df      	b.n	80028ce <MX_TIM8_Init+0x106>
 800290e:	bf00      	nop
 8002910:	20000aa8 	.word	0x20000aa8
 8002914:	40013400 	.word	0x40013400

08002918 <MX_TIM15_Init>:
{
 8002918:	b510      	push	{r4, lr}
 800291a:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800291c:	2400      	movs	r4, #0
 800291e:	9418      	str	r4, [sp, #96]	; 0x60
 8002920:	9419      	str	r4, [sp, #100]	; 0x64
 8002922:	941a      	str	r4, [sp, #104]	; 0x68
 8002924:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002926:	9415      	str	r4, [sp, #84]	; 0x54
 8002928:	9416      	str	r4, [sp, #88]	; 0x58
 800292a:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 800292c:	940e      	str	r4, [sp, #56]	; 0x38
 800292e:	940f      	str	r4, [sp, #60]	; 0x3c
 8002930:	9410      	str	r4, [sp, #64]	; 0x40
 8002932:	9411      	str	r4, [sp, #68]	; 0x44
 8002934:	9412      	str	r4, [sp, #72]	; 0x48
 8002936:	9413      	str	r4, [sp, #76]	; 0x4c
 8002938:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800293a:	2234      	movs	r2, #52	; 0x34
 800293c:	4621      	mov	r1, r4
 800293e:	a801      	add	r0, sp, #4
 8002940:	f008 fc4c 	bl	800b1dc <memset>
  htim15.Instance = TIM15;
 8002944:	482e      	ldr	r0, [pc, #184]	; (8002a00 <MX_TIM15_Init+0xe8>)
 8002946:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <MX_TIM15_Init+0xec>)
 8002948:	6003      	str	r3, [r0, #0]
  htim15.Init.Prescaler = 0;
 800294a:	6044      	str	r4, [r0, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800294c:	6084      	str	r4, [r0, #8]
  htim15.Init.Period = 32768;
 800294e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002952:	60c3      	str	r3, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002954:	6104      	str	r4, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 8002956:	6144      	str	r4, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002958:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800295a:	f004 ff87 	bl	800786c <HAL_TIM_Base_Init>
 800295e:	2800      	cmp	r0, #0
 8002960:	d13c      	bne.n	80029dc <MX_TIM15_Init+0xc4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002966:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002968:	a918      	add	r1, sp, #96	; 0x60
 800296a:	4825      	ldr	r0, [pc, #148]	; (8002a00 <MX_TIM15_Init+0xe8>)
 800296c:	f005 f8d6 	bl	8007b1c <HAL_TIM_ConfigClockSource>
 8002970:	2800      	cmp	r0, #0
 8002972:	d136      	bne.n	80029e2 <MX_TIM15_Init+0xca>
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002974:	4822      	ldr	r0, [pc, #136]	; (8002a00 <MX_TIM15_Init+0xe8>)
 8002976:	f004 ffa9 	bl	80078cc <HAL_TIM_PWM_Init>
 800297a:	2800      	cmp	r0, #0
 800297c:	d134      	bne.n	80029e8 <MX_TIM15_Init+0xd0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800297e:	2300      	movs	r3, #0
 8002980:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002982:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002984:	a915      	add	r1, sp, #84	; 0x54
 8002986:	481e      	ldr	r0, [pc, #120]	; (8002a00 <MX_TIM15_Init+0xe8>)
 8002988:	f005 f972 	bl	8007c70 <HAL_TIMEx_MasterConfigSynchronization>
 800298c:	2800      	cmp	r0, #0
 800298e:	d12e      	bne.n	80029ee <MX_TIM15_Init+0xd6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002990:	2360      	movs	r3, #96	; 0x60
 8002992:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 16000;
 8002994:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8002998:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800299a:	2300      	movs	r3, #0
 800299c:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800299e:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029a0:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029a2:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029a4:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029a6:	2204      	movs	r2, #4
 80029a8:	a90e      	add	r1, sp, #56	; 0x38
 80029aa:	4815      	ldr	r0, [pc, #84]	; (8002a00 <MX_TIM15_Init+0xe8>)
 80029ac:	f005 f80c 	bl	80079c8 <HAL_TIM_PWM_ConfigChannel>
 80029b0:	bb00      	cbnz	r0, 80029f4 <MX_TIM15_Init+0xdc>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029b6:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029b8:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029ba:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029bc:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029c2:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80029c4:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029c6:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80029c8:	a901      	add	r1, sp, #4
 80029ca:	480d      	ldr	r0, [pc, #52]	; (8002a00 <MX_TIM15_Init+0xe8>)
 80029cc:	f005 f9a6 	bl	8007d1c <HAL_TIMEx_ConfigBreakDeadTime>
 80029d0:	b998      	cbnz	r0, 80029fa <MX_TIM15_Init+0xe2>
  HAL_TIM_MspPostInit(&htim15);
 80029d2:	480b      	ldr	r0, [pc, #44]	; (8002a00 <MX_TIM15_Init+0xe8>)
 80029d4:	f7ff fe04 	bl	80025e0 <HAL_TIM_MspPostInit>
}
 80029d8:	b01c      	add	sp, #112	; 0x70
 80029da:	bd10      	pop	{r4, pc}
    Error_Handler();
 80029dc:	f7ff facc 	bl	8001f78 <Error_Handler>
 80029e0:	e7bf      	b.n	8002962 <MX_TIM15_Init+0x4a>
    Error_Handler();
 80029e2:	f7ff fac9 	bl	8001f78 <Error_Handler>
 80029e6:	e7c5      	b.n	8002974 <MX_TIM15_Init+0x5c>
    Error_Handler();
 80029e8:	f7ff fac6 	bl	8001f78 <Error_Handler>
 80029ec:	e7c7      	b.n	800297e <MX_TIM15_Init+0x66>
    Error_Handler();
 80029ee:	f7ff fac3 	bl	8001f78 <Error_Handler>
 80029f2:	e7cd      	b.n	8002990 <MX_TIM15_Init+0x78>
    Error_Handler();
 80029f4:	f7ff fac0 	bl	8001f78 <Error_Handler>
 80029f8:	e7db      	b.n	80029b2 <MX_TIM15_Init+0x9a>
    Error_Handler();
 80029fa:	f7ff fabd 	bl	8001f78 <Error_Handler>
 80029fe:	e7e8      	b.n	80029d2 <MX_TIM15_Init+0xba>
 8002a00:	200009c4 	.word	0x200009c4
 8002a04:	40014000 	.word	0x40014000

08002a08 <MX_TIM20_Init>:
{
 8002a08:	b510      	push	{r4, lr}
 8002a0a:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a0c:	2400      	movs	r4, #0
 8002a0e:	9418      	str	r4, [sp, #96]	; 0x60
 8002a10:	9419      	str	r4, [sp, #100]	; 0x64
 8002a12:	941a      	str	r4, [sp, #104]	; 0x68
 8002a14:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a16:	9415      	str	r4, [sp, #84]	; 0x54
 8002a18:	9416      	str	r4, [sp, #88]	; 0x58
 8002a1a:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a1c:	940e      	str	r4, [sp, #56]	; 0x38
 8002a1e:	940f      	str	r4, [sp, #60]	; 0x3c
 8002a20:	9410      	str	r4, [sp, #64]	; 0x40
 8002a22:	9411      	str	r4, [sp, #68]	; 0x44
 8002a24:	9412      	str	r4, [sp, #72]	; 0x48
 8002a26:	9413      	str	r4, [sp, #76]	; 0x4c
 8002a28:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a2a:	2234      	movs	r2, #52	; 0x34
 8002a2c:	4621      	mov	r1, r4
 8002a2e:	a801      	add	r0, sp, #4
 8002a30:	f008 fbd4 	bl	800b1dc <memset>
  htim20.Instance = TIM20;
 8002a34:	4846      	ldr	r0, [pc, #280]	; (8002b50 <MX_TIM20_Init+0x148>)
 8002a36:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <MX_TIM20_Init+0x14c>)
 8002a38:	6003      	str	r3, [r0, #0]
  htim20.Init.Prescaler = 0;
 8002a3a:	6044      	str	r4, [r0, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3c:	6084      	str	r4, [r0, #8]
  htim20.Init.Period = 16000;
 8002a3e:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8002a42:	60c3      	str	r3, [r0, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a44:	6104      	str	r4, [r0, #16]
  htim20.Init.RepetitionCounter = 0;
 8002a46:	6144      	str	r4, [r0, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a48:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8002a4a:	f004 ff0f 	bl	800786c <HAL_TIM_Base_Init>
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d162      	bne.n	8002b18 <MX_TIM20_Init+0x110>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a56:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8002a58:	a918      	add	r1, sp, #96	; 0x60
 8002a5a:	483d      	ldr	r0, [pc, #244]	; (8002b50 <MX_TIM20_Init+0x148>)
 8002a5c:	f005 f85e 	bl	8007b1c <HAL_TIM_ConfigClockSource>
 8002a60:	2800      	cmp	r0, #0
 8002a62:	d15c      	bne.n	8002b1e <MX_TIM20_Init+0x116>
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8002a64:	483a      	ldr	r0, [pc, #232]	; (8002b50 <MX_TIM20_Init+0x148>)
 8002a66:	f004 ff31 	bl	80078cc <HAL_TIM_PWM_Init>
 8002a6a:	2800      	cmp	r0, #0
 8002a6c:	d15a      	bne.n	8002b24 <MX_TIM20_Init+0x11c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a72:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a74:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8002a76:	a915      	add	r1, sp, #84	; 0x54
 8002a78:	4835      	ldr	r0, [pc, #212]	; (8002b50 <MX_TIM20_Init+0x148>)
 8002a7a:	f005 f8f9 	bl	8007c70 <HAL_TIMEx_MasterConfigSynchronization>
 8002a7e:	2800      	cmp	r0, #0
 8002a80:	d153      	bne.n	8002b2a <MX_TIM20_Init+0x122>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a82:	2360      	movs	r3, #96	; 0x60
 8002a84:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 8000;
 8002a86:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8002a8a:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a90:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a92:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a94:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a96:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a98:	a90e      	add	r1, sp, #56	; 0x38
 8002a9a:	482d      	ldr	r0, [pc, #180]	; (8002b50 <MX_TIM20_Init+0x148>)
 8002a9c:	f004 ff94 	bl	80079c8 <HAL_TIM_PWM_ConfigChannel>
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	d145      	bne.n	8002b30 <MX_TIM20_Init+0x128>
  sConfigOC.Pulse = 10000;
 8002aa4:	f242 7310 	movw	r3, #10000	; 0x2710
 8002aa8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002aaa:	2204      	movs	r2, #4
 8002aac:	a90e      	add	r1, sp, #56	; 0x38
 8002aae:	4828      	ldr	r0, [pc, #160]	; (8002b50 <MX_TIM20_Init+0x148>)
 8002ab0:	f004 ff8a 	bl	80079c8 <HAL_TIM_PWM_ConfigChannel>
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	d13e      	bne.n	8002b36 <MX_TIM20_Init+0x12e>
  sConfigOC.Pulse = 12000;
 8002ab8:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8002abc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002abe:	2208      	movs	r2, #8
 8002ac0:	a90e      	add	r1, sp, #56	; 0x38
 8002ac2:	4823      	ldr	r0, [pc, #140]	; (8002b50 <MX_TIM20_Init+0x148>)
 8002ac4:	f004 ff80 	bl	80079c8 <HAL_TIM_PWM_ConfigChannel>
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d137      	bne.n	8002b3c <MX_TIM20_Init+0x134>
  sConfigOC.Pulse = 15000;
 8002acc:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002ad0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ad2:	220c      	movs	r2, #12
 8002ad4:	a90e      	add	r1, sp, #56	; 0x38
 8002ad6:	481e      	ldr	r0, [pc, #120]	; (8002b50 <MX_TIM20_Init+0x148>)
 8002ad8:	f004 ff76 	bl	80079c8 <HAL_TIM_PWM_ConfigChannel>
 8002adc:	2800      	cmp	r0, #0
 8002ade:	d130      	bne.n	8002b42 <MX_TIM20_Init+0x13a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ae4:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ae6:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ae8:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002aea:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002aec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002af0:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002af2:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002af4:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002af6:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002af8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002afc:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002afe:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002b00:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b02:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8002b04:	a901      	add	r1, sp, #4
 8002b06:	4812      	ldr	r0, [pc, #72]	; (8002b50 <MX_TIM20_Init+0x148>)
 8002b08:	f005 f908 	bl	8007d1c <HAL_TIMEx_ConfigBreakDeadTime>
 8002b0c:	b9e0      	cbnz	r0, 8002b48 <MX_TIM20_Init+0x140>
  HAL_TIM_MspPostInit(&htim20);
 8002b0e:	4810      	ldr	r0, [pc, #64]	; (8002b50 <MX_TIM20_Init+0x148>)
 8002b10:	f7ff fd66 	bl	80025e0 <HAL_TIM_MspPostInit>
}
 8002b14:	b01c      	add	sp, #112	; 0x70
 8002b16:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002b18:	f7ff fa2e 	bl	8001f78 <Error_Handler>
 8002b1c:	e799      	b.n	8002a52 <MX_TIM20_Init+0x4a>
    Error_Handler();
 8002b1e:	f7ff fa2b 	bl	8001f78 <Error_Handler>
 8002b22:	e79f      	b.n	8002a64 <MX_TIM20_Init+0x5c>
    Error_Handler();
 8002b24:	f7ff fa28 	bl	8001f78 <Error_Handler>
 8002b28:	e7a1      	b.n	8002a6e <MX_TIM20_Init+0x66>
    Error_Handler();
 8002b2a:	f7ff fa25 	bl	8001f78 <Error_Handler>
 8002b2e:	e7a8      	b.n	8002a82 <MX_TIM20_Init+0x7a>
    Error_Handler();
 8002b30:	f7ff fa22 	bl	8001f78 <Error_Handler>
 8002b34:	e7b6      	b.n	8002aa4 <MX_TIM20_Init+0x9c>
    Error_Handler();
 8002b36:	f7ff fa1f 	bl	8001f78 <Error_Handler>
 8002b3a:	e7bd      	b.n	8002ab8 <MX_TIM20_Init+0xb0>
    Error_Handler();
 8002b3c:	f7ff fa1c 	bl	8001f78 <Error_Handler>
 8002b40:	e7c4      	b.n	8002acc <MX_TIM20_Init+0xc4>
    Error_Handler();
 8002b42:	f7ff fa19 	bl	8001f78 <Error_Handler>
 8002b46:	e7cb      	b.n	8002ae0 <MX_TIM20_Init+0xd8>
    Error_Handler();
 8002b48:	f7ff fa16 	bl	8001f78 <Error_Handler>
 8002b4c:	e7df      	b.n	8002b0e <MX_TIM20_Init+0x106>
 8002b4e:	bf00      	nop
 8002b50:	20000a10 	.word	0x20000a10
 8002b54:	40015000 	.word	0x40015000

08002b58 <MX_UART4_Init>:
UART_HandleTypeDef huart3;


/* UART4 init function */
void MX_UART4_Init(void)
{
 8002b58:	b508      	push	{r3, lr}
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002b5a:	4817      	ldr	r0, [pc, #92]	; (8002bb8 <MX_UART4_Init+0x60>)
 8002b5c:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <MX_UART4_Init+0x64>)
 8002b5e:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8002b60:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002b64:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002b66:	2300      	movs	r3, #0
 8002b68:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002b6a:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002b6c:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002b6e:	220c      	movs	r2, #12
 8002b70:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b72:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b74:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b76:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b78:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b7a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002b7c:	f005 fc09 	bl	8008392 <HAL_UART_Init>
 8002b80:	b970      	cbnz	r0, 8002ba0 <MX_UART4_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b82:	2100      	movs	r1, #0
 8002b84:	480c      	ldr	r0, [pc, #48]	; (8002bb8 <MX_UART4_Init+0x60>)
 8002b86:	f005 fc7c 	bl	8008482 <HAL_UARTEx_SetTxFifoThreshold>
 8002b8a:	b960      	cbnz	r0, 8002ba6 <MX_UART4_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	480a      	ldr	r0, [pc, #40]	; (8002bb8 <MX_UART4_Init+0x60>)
 8002b90:	f005 fc9c 	bl	80084cc <HAL_UARTEx_SetRxFifoThreshold>
 8002b94:	b950      	cbnz	r0, 8002bac <MX_UART4_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002b96:	4808      	ldr	r0, [pc, #32]	; (8002bb8 <MX_UART4_Init+0x60>)
 8002b98:	f005 fc54 	bl	8008444 <HAL_UARTEx_DisableFifoMode>
 8002b9c:	b948      	cbnz	r0, 8002bb2 <MX_UART4_Init+0x5a>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002b9e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002ba0:	f7ff f9ea 	bl	8001f78 <Error_Handler>
 8002ba4:	e7ed      	b.n	8002b82 <MX_UART4_Init+0x2a>
    Error_Handler();
 8002ba6:	f7ff f9e7 	bl	8001f78 <Error_Handler>
 8002baa:	e7ef      	b.n	8002b8c <MX_UART4_Init+0x34>
    Error_Handler();
 8002bac:	f7ff f9e4 	bl	8001f78 <Error_Handler>
 8002bb0:	e7f1      	b.n	8002b96 <MX_UART4_Init+0x3e>
    Error_Handler();
 8002bb2:	f7ff f9e1 	bl	8001f78 <Error_Handler>
}
 8002bb6:	e7f2      	b.n	8002b9e <MX_UART4_Init+0x46>
 8002bb8:	20000c14 	.word	0x20000c14
 8002bbc:	40004c00 	.word	0x40004c00

08002bc0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002bc0:	b508      	push	{r3, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002bc2:	4817      	ldr	r0, [pc, #92]	; (8002c20 <MX_UART5_Init+0x60>)
 8002bc4:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <MX_UART5_Init+0x64>)
 8002bc6:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 8002bc8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002bcc:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002bd2:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002bd4:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bda:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bdc:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bde:	6203      	str	r3, [r0, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002be0:	6243      	str	r3, [r0, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002be2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002be4:	f005 fbd5 	bl	8008392 <HAL_UART_Init>
 8002be8:	b970      	cbnz	r0, 8002c08 <MX_UART5_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bea:	2100      	movs	r1, #0
 8002bec:	480c      	ldr	r0, [pc, #48]	; (8002c20 <MX_UART5_Init+0x60>)
 8002bee:	f005 fc48 	bl	8008482 <HAL_UARTEx_SetTxFifoThreshold>
 8002bf2:	b960      	cbnz	r0, 8002c0e <MX_UART5_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	480a      	ldr	r0, [pc, #40]	; (8002c20 <MX_UART5_Init+0x60>)
 8002bf8:	f005 fc68 	bl	80084cc <HAL_UARTEx_SetRxFifoThreshold>
 8002bfc:	b950      	cbnz	r0, 8002c14 <MX_UART5_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002bfe:	4808      	ldr	r0, [pc, #32]	; (8002c20 <MX_UART5_Init+0x60>)
 8002c00:	f005 fc20 	bl	8008444 <HAL_UARTEx_DisableFifoMode>
 8002c04:	b948      	cbnz	r0, 8002c1a <MX_UART5_Init+0x5a>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002c06:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002c08:	f7ff f9b6 	bl	8001f78 <Error_Handler>
 8002c0c:	e7ed      	b.n	8002bea <MX_UART5_Init+0x2a>
    Error_Handler();
 8002c0e:	f7ff f9b3 	bl	8001f78 <Error_Handler>
 8002c12:	e7ef      	b.n	8002bf4 <MX_UART5_Init+0x34>
    Error_Handler();
 8002c14:	f7ff f9b0 	bl	8001f78 <Error_Handler>
 8002c18:	e7f1      	b.n	8002bfe <MX_UART5_Init+0x3e>
    Error_Handler();
 8002c1a:	f7ff f9ad 	bl	8001f78 <Error_Handler>
}
 8002c1e:	e7f2      	b.n	8002c06 <MX_UART5_Init+0x46>
 8002c20:	20000ca4 	.word	0x20000ca4
 8002c24:	40005000 	.word	0x40005000

08002c28 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c28:	b570      	push	{r4, r5, r6, lr}
 8002c2a:	b0a6      	sub	sp, #152	; 0x98

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	2100      	movs	r1, #0
 8002c30:	a81e      	add	r0, sp, #120	; 0x78
 8002c32:	f008 fad3 	bl	800b1dc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c36:	2100      	movs	r1, #0
 8002c38:	9118      	str	r1, [sp, #96]	; 0x60
 8002c3a:	9119      	str	r1, [sp, #100]	; 0x64
 8002c3c:	911a      	str	r1, [sp, #104]	; 0x68
 8002c3e:	911b      	str	r1, [sp, #108]	; 0x6c
 8002c40:	911c      	str	r1, [sp, #112]	; 0x70
 8002c42:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c44:	2254      	movs	r2, #84	; 0x54
 8002c46:	a803      	add	r0, sp, #12
 8002c48:	f008 fac8 	bl	800b1dc <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	9303      	str	r3, [sp, #12]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c50:	a803      	add	r0, sp, #12
 8002c52:	f004 f9a7 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 8002c56:	2800      	cmp	r0, #0
 8002c58:	f040 80d2 	bne.w	8002e00 <MX_USART1_UART_Init+0x1d8>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002c5c:	4b6a      	ldr	r3, [pc, #424]	; (8002e08 <MX_USART1_UART_Init+0x1e0>)
 8002c5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c64:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002c66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c68:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002c6c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002c6e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c7a:	f002 0201 	and.w	r2, r2, #1
 8002c7e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8002c80:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c88:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c90:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002c92:	9b00      	ldr	r3, [sp, #0]
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOG);
  /**USART1 GPIO Configuration
  PA10   ------> USART1_RX
  PG9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c98:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c9a:	2602      	movs	r6, #2
 8002c9c:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c9e:	2400      	movs	r4, #0
 8002ca0:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ca2:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ca4:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002ca6:	2507      	movs	r5, #7
 8002ca8:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002caa:	a918      	add	r1, sp, #96	; 0x60
 8002cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb0:	f005 fcfa 	bl	80086a8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cb8:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002cba:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002cbc:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cbe:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cc0:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002cc2:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cc4:	a918      	add	r1, sp, #96	; 0x60
 8002cc6:	4851      	ldr	r0, [pc, #324]	; (8002e0c <MX_USART1_UART_Init+0x1e4>)
 8002cc8:	f005 fcee 	bl	80086a8 <LL_GPIO_Init>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8002ccc:	4b50      	ldr	r3, [pc, #320]	; (8002e10 <MX_USART1_UART_Init+0x1e8>)
 8002cce:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8002cd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cd6:	f042 0218 	orr.w	r2, r2, #24
 8002cda:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8002cde:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ce0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ce4:	f022 0210 	bic.w	r2, r2, #16
 8002ce8:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8002cea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002cec:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002cf0:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8002cf2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002cf4:	f022 0220 	bic.w	r2, r2, #32
 8002cf8:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8002cfa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d00:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8002d02:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d08:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8002d0a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d0c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d10:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8002d12:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d14:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d18:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8002d1a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8002d1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d22:	f042 0219 	orr.w	r2, r2, #25
 8002d26:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8002d2a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002d2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d32:	f022 0210 	bic.w	r2, r2, #16
 8002d36:	f042 0210 	orr.w	r2, r2, #16
 8002d3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8002d3e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002d42:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002d46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8002d4a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002d4e:	f022 0220 	bic.w	r2, r2, #32
 8002d52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8002d56:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8002d62:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002d66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8002d6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002d72:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8002d7a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002d7e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8002d86:	941e      	str	r4, [sp, #120]	; 0x78
  USART_InitStruct.BaudRate = 115200;
 8002d88:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002d8c:	931f      	str	r3, [sp, #124]	; 0x7c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002d8e:	9420      	str	r4, [sp, #128]	; 0x80
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002d90:	9421      	str	r4, [sp, #132]	; 0x84
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002d92:	9422      	str	r4, [sp, #136]	; 0x88
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002d94:	230c      	movs	r3, #12
 8002d96:	9323      	str	r3, [sp, #140]	; 0x8c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002d98:	9424      	str	r4, [sp, #144]	; 0x90
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002d9a:	9425      	str	r4, [sp, #148]	; 0x94
  LL_USART_Init(USART1, &USART_InitStruct);
 8002d9c:	a91e      	add	r1, sp, #120	; 0x78
 8002d9e:	481d      	ldr	r0, [pc, #116]	; (8002e14 <MX_USART1_UART_Init+0x1ec>)
 8002da0:	f005 fe98 	bl	8008ad4 <LL_USART_Init>
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8002da4:	4b1c      	ldr	r3, [pc, #112]	; (8002e18 <MX_USART1_UART_Init+0x1f0>)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da6:	e853 2f00 	ldrex	r2, [r3]
 8002daa:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dae:	e843 2100 	strex	r1, r2, [r3]
 8002db2:	2900      	cmp	r1, #0
 8002db4:	d1f6      	bne.n	8002da4 <MX_USART1_UART_Init+0x17c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db6:	e853 2f00 	ldrex	r2, [r3]
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8002dba:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbe:	e843 2100 	strex	r1, r2, [r3]
 8002dc2:	2900      	cmp	r1, #0
 8002dc4:	d1f7      	bne.n	8002db6 <MX_USART1_UART_Init+0x18e>
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8002dc6:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <MX_USART1_UART_Init+0x1ec>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002dce:	601a      	str	r2, [r3, #0]
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dde:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8002de8:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <MX_USART1_UART_Init+0x1ec>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002df0:	d0fa      	beq.n	8002de8 <MX_USART1_UART_Init+0x1c0>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8002df2:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <MX_USART1_UART_Init+0x1ec>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002dfa:	d0f5      	beq.n	8002de8 <MX_USART1_UART_Init+0x1c0>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dfc:	b026      	add	sp, #152	; 0x98
 8002dfe:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8002e00:	f7ff f8ba 	bl	8001f78 <Error_Handler>
 8002e04:	e72a      	b.n	8002c5c <MX_USART1_UART_Init+0x34>
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	48001800 	.word	0x48001800
 8002e10:	40020000 	.word	0x40020000
 8002e14:	40013800 	.word	0x40013800
 8002e18:	40013808 	.word	0x40013808

08002e1c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e1c:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e1e:	4817      	ldr	r0, [pc, #92]	; (8002e7c <MX_USART2_UART_Init+0x60>)
 8002e20:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <MX_USART2_UART_Init+0x64>)
 8002e22:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002e24:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002e28:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e2e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e30:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e32:	220c      	movs	r2, #12
 8002e34:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e36:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e38:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e3a:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e3c:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e3e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e40:	f005 faa7 	bl	8008392 <HAL_UART_Init>
 8002e44:	b970      	cbnz	r0, 8002e64 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e46:	2100      	movs	r1, #0
 8002e48:	480c      	ldr	r0, [pc, #48]	; (8002e7c <MX_USART2_UART_Init+0x60>)
 8002e4a:	f005 fb1a 	bl	8008482 <HAL_UARTEx_SetTxFifoThreshold>
 8002e4e:	b960      	cbnz	r0, 8002e6a <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e50:	2100      	movs	r1, #0
 8002e52:	480a      	ldr	r0, [pc, #40]	; (8002e7c <MX_USART2_UART_Init+0x60>)
 8002e54:	f005 fb3a 	bl	80084cc <HAL_UARTEx_SetRxFifoThreshold>
 8002e58:	b950      	cbnz	r0, 8002e70 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002e5a:	4808      	ldr	r0, [pc, #32]	; (8002e7c <MX_USART2_UART_Init+0x60>)
 8002e5c:	f005 faf2 	bl	8008444 <HAL_UARTEx_DisableFifoMode>
 8002e60:	b948      	cbnz	r0, 8002e76 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e62:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002e64:	f7ff f888 	bl	8001f78 <Error_Handler>
 8002e68:	e7ed      	b.n	8002e46 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8002e6a:	f7ff f885 	bl	8001f78 <Error_Handler>
 8002e6e:	e7ef      	b.n	8002e50 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8002e70:	f7ff f882 	bl	8001f78 <Error_Handler>
 8002e74:	e7f1      	b.n	8002e5a <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8002e76:	f7ff f87f 	bl	8001f78 <Error_Handler>
}
 8002e7a:	e7f2      	b.n	8002e62 <MX_USART2_UART_Init+0x46>
 8002e7c:	20000af4 	.word	0x20000af4
 8002e80:	40004400 	.word	0x40004400

08002e84 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e84:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e86:	4817      	ldr	r0, [pc, #92]	; (8002ee4 <MX_USART3_UART_Init+0x60>)
 8002e88:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <MX_USART3_UART_Init+0x64>)
 8002e8a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8002e8c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002e90:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e92:	2300      	movs	r3, #0
 8002e94:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e96:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e98:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e9a:	220c      	movs	r2, #12
 8002e9c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e9e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea0:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ea2:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ea4:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ea6:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ea8:	f005 fa73 	bl	8008392 <HAL_UART_Init>
 8002eac:	b970      	cbnz	r0, 8002ecc <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eae:	2100      	movs	r1, #0
 8002eb0:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <MX_USART3_UART_Init+0x60>)
 8002eb2:	f005 fae6 	bl	8008482 <HAL_UARTEx_SetTxFifoThreshold>
 8002eb6:	b960      	cbnz	r0, 8002ed2 <MX_USART3_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eb8:	2100      	movs	r1, #0
 8002eba:	480a      	ldr	r0, [pc, #40]	; (8002ee4 <MX_USART3_UART_Init+0x60>)
 8002ebc:	f005 fb06 	bl	80084cc <HAL_UARTEx_SetRxFifoThreshold>
 8002ec0:	b950      	cbnz	r0, 8002ed8 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002ec2:	4808      	ldr	r0, [pc, #32]	; (8002ee4 <MX_USART3_UART_Init+0x60>)
 8002ec4:	f005 fabe 	bl	8008444 <HAL_UARTEx_DisableFifoMode>
 8002ec8:	b948      	cbnz	r0, 8002ede <MX_USART3_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002eca:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002ecc:	f7ff f854 	bl	8001f78 <Error_Handler>
 8002ed0:	e7ed      	b.n	8002eae <MX_USART3_UART_Init+0x2a>
    Error_Handler();
 8002ed2:	f7ff f851 	bl	8001f78 <Error_Handler>
 8002ed6:	e7ef      	b.n	8002eb8 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 8002ed8:	f7ff f84e 	bl	8001f78 <Error_Handler>
 8002edc:	e7f1      	b.n	8002ec2 <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 8002ede:	f7ff f84b 	bl	8001f78 <Error_Handler>
}
 8002ee2:	e7f2      	b.n	8002eca <MX_USART3_UART_Init+0x46>
 8002ee4:	20000b84 	.word	0x20000b84
 8002ee8:	40004800 	.word	0x40004800

08002eec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002eec:	b570      	push	{r4, r5, r6, lr}
 8002eee:	b0a4      	sub	sp, #144	; 0x90
 8002ef0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	911f      	str	r1, [sp, #124]	; 0x7c
 8002ef6:	9120      	str	r1, [sp, #128]	; 0x80
 8002ef8:	9121      	str	r1, [sp, #132]	; 0x84
 8002efa:	9122      	str	r1, [sp, #136]	; 0x88
 8002efc:	9123      	str	r1, [sp, #140]	; 0x8c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002efe:	2254      	movs	r2, #84	; 0x54
 8002f00:	a80a      	add	r0, sp, #40	; 0x28
 8002f02:	f008 f96b 	bl	800b1dc <memset>
  if(uartHandle->Instance==UART4)
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	4a66      	ldr	r2, [pc, #408]	; (80030a4 <HAL_UART_MspInit+0x1b8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00b      	beq.n	8002f26 <HAL_UART_MspInit+0x3a>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART5)
 8002f0e:	4a66      	ldr	r2, [pc, #408]	; (80030a8 <HAL_UART_MspInit+0x1bc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d033      	beq.n	8002f7c <HAL_UART_MspInit+0x90>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002f14:	4a65      	ldr	r2, [pc, #404]	; (80030ac <HAL_UART_MspInit+0x1c0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d06f      	beq.n	8002ffa <HAL_UART_MspInit+0x10e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8002f1a:	4a65      	ldr	r2, [pc, #404]	; (80030b0 <HAL_UART_MspInit+0x1c4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	f000 8096 	beq.w	800304e <HAL_UART_MspInit+0x162>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002f22:	b024      	add	sp, #144	; 0x90
 8002f24:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002f26:	2308      	movs	r3, #8
 8002f28:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f2a:	a80a      	add	r0, sp, #40	; 0x28
 8002f2c:	f004 f83a 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 8002f30:	bb08      	cbnz	r0, 8002f76 <HAL_UART_MspInit+0x8a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002f32:	4b60      	ldr	r3, [pc, #384]	; (80030b4 <HAL_UART_MspInit+0x1c8>)
 8002f34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f36:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002f3a:	659a      	str	r2, [r3, #88]	; 0x58
 8002f3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f3e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002f42:	9201      	str	r2, [sp, #4]
 8002f44:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f48:	f042 0204 	orr.w	r2, r2, #4
 8002f4c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	9302      	str	r3, [sp, #8]
 8002f56:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f58:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f5c:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f66:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002f68:	2305      	movs	r3, #5
 8002f6a:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f6c:	a91f      	add	r1, sp, #124	; 0x7c
 8002f6e:	4852      	ldr	r0, [pc, #328]	; (80030b8 <HAL_UART_MspInit+0x1cc>)
 8002f70:	f001 fe06 	bl	8004b80 <HAL_GPIO_Init>
 8002f74:	e7d5      	b.n	8002f22 <HAL_UART_MspInit+0x36>
      Error_Handler();
 8002f76:	f7fe ffff 	bl	8001f78 <Error_Handler>
 8002f7a:	e7da      	b.n	8002f32 <HAL_UART_MspInit+0x46>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002f7c:	2310      	movs	r3, #16
 8002f7e:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f80:	a80a      	add	r0, sp, #40	; 0x28
 8002f82:	f004 f80f 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 8002f86:	2800      	cmp	r0, #0
 8002f88:	d134      	bne.n	8002ff4 <HAL_UART_MspInit+0x108>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002f8a:	4b4a      	ldr	r3, [pc, #296]	; (80030b4 <HAL_UART_MspInit+0x1c8>)
 8002f8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f8e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f92:	659a      	str	r2, [r3, #88]	; 0x58
 8002f94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f96:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f9a:	9203      	str	r2, [sp, #12]
 8002f9c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fa0:	f042 0204 	orr.w	r2, r2, #4
 8002fa4:	64da      	str	r2, [r3, #76]	; 0x4c
 8002fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fa8:	f002 0204 	and.w	r2, r2, #4
 8002fac:	9204      	str	r2, [sp, #16]
 8002fae:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fb2:	f042 0208 	orr.w	r2, r2, #8
 8002fb6:	64da      	str	r2, [r3, #76]	; 0x4c
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	9305      	str	r3, [sp, #20]
 8002fc0:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = LIN_TX_Pin;
 8002fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc6:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc8:	2602      	movs	r6, #2
 8002fca:	9620      	str	r6, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	2400      	movs	r4, #0
 8002fce:	9421      	str	r4, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd0:	9422      	str	r4, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002fd2:	2505      	movs	r5, #5
 8002fd4:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(LIN_TX_GPIO_Port, &GPIO_InitStruct);
 8002fd6:	a91f      	add	r1, sp, #124	; 0x7c
 8002fd8:	4837      	ldr	r0, [pc, #220]	; (80030b8 <HAL_UART_MspInit+0x1cc>)
 8002fda:	f001 fdd1 	bl	8004b80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIN_RX_Pin;
 8002fde:	2304      	movs	r3, #4
 8002fe0:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe2:	9620      	str	r6, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	9421      	str	r4, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe6:	9422      	str	r4, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002fe8:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(LIN_RX_GPIO_Port, &GPIO_InitStruct);
 8002fea:	a91f      	add	r1, sp, #124	; 0x7c
 8002fec:	4833      	ldr	r0, [pc, #204]	; (80030bc <HAL_UART_MspInit+0x1d0>)
 8002fee:	f001 fdc7 	bl	8004b80 <HAL_GPIO_Init>
 8002ff2:	e796      	b.n	8002f22 <HAL_UART_MspInit+0x36>
      Error_Handler();
 8002ff4:	f7fe ffc0 	bl	8001f78 <Error_Handler>
 8002ff8:	e7c7      	b.n	8002f8a <HAL_UART_MspInit+0x9e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ffe:	a80a      	add	r0, sp, #40	; 0x28
 8003000:	f003 ffd0 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 8003004:	bb00      	cbnz	r0, 8003048 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003006:	4b2b      	ldr	r3, [pc, #172]	; (80030b4 <HAL_UART_MspInit+0x1c8>)
 8003008:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800300a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800300e:	659a      	str	r2, [r3, #88]	; 0x58
 8003010:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003012:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003016:	9206      	str	r2, [sp, #24]
 8003018:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800301a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800301c:	f042 0202 	orr.w	r2, r2, #2
 8003020:	64da      	str	r2, [r3, #76]	; 0x4c
 8003022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	9307      	str	r3, [sp, #28]
 800302a:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800302c:	2318      	movs	r3, #24
 800302e:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	2302      	movs	r3, #2
 8003032:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003038:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800303a:	2307      	movs	r3, #7
 800303c:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303e:	a91f      	add	r1, sp, #124	; 0x7c
 8003040:	481f      	ldr	r0, [pc, #124]	; (80030c0 <HAL_UART_MspInit+0x1d4>)
 8003042:	f001 fd9d 	bl	8004b80 <HAL_GPIO_Init>
 8003046:	e76c      	b.n	8002f22 <HAL_UART_MspInit+0x36>
      Error_Handler();
 8003048:	f7fe ff96 	bl	8001f78 <Error_Handler>
 800304c:	e7db      	b.n	8003006 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800304e:	2304      	movs	r3, #4
 8003050:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003052:	a80a      	add	r0, sp, #40	; 0x28
 8003054:	f003 ffa6 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 8003058:	bb08      	cbnz	r0, 800309e <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800305a:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <HAL_UART_MspInit+0x1c8>)
 800305c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800305e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003062:	659a      	str	r2, [r3, #88]	; 0x58
 8003064:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003066:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800306a:	9208      	str	r2, [sp, #32]
 800306c:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800306e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003070:	f042 0202 	orr.w	r2, r2, #2
 8003074:	64da      	str	r2, [r3, #76]	; 0x4c
 8003076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	9309      	str	r3, [sp, #36]	; 0x24
 800307e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003080:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003084:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003086:	2302      	movs	r3, #2
 8003088:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308e:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003090:	2307      	movs	r3, #7
 8003092:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003094:	a91f      	add	r1, sp, #124	; 0x7c
 8003096:	480a      	ldr	r0, [pc, #40]	; (80030c0 <HAL_UART_MspInit+0x1d4>)
 8003098:	f001 fd72 	bl	8004b80 <HAL_GPIO_Init>
}
 800309c:	e741      	b.n	8002f22 <HAL_UART_MspInit+0x36>
      Error_Handler();
 800309e:	f7fe ff6b 	bl	8001f78 <Error_Handler>
 80030a2:	e7da      	b.n	800305a <HAL_UART_MspInit+0x16e>
 80030a4:	40004c00 	.word	0x40004c00
 80030a8:	40005000 	.word	0x40005000
 80030ac:	40004400 	.word	0x40004400
 80030b0:	40004800 	.word	0x40004800
 80030b4:	40021000 	.word	0x40021000
 80030b8:	48000800 	.word	0x48000800
 80030bc:	48000c00 	.word	0x48000c00
 80030c0:	48000400 	.word	0x48000400

080030c4 <set_move>:


#include "move.h"

void set_move (move* mov, short x, short y) {
	mov->x = x;
 80030c4:	8001      	strh	r1, [r0, #0]
	mov->y = y;
 80030c6:	8042      	strh	r2, [r0, #2]
}
 80030c8:	4770      	bx	lr

080030ca <set_postition>:


#include "position.h"

void set_postition (position* pos, uint16_t x, uint8_t y) {
	pos->x = x;
 80030ca:	8001      	strh	r1, [r0, #0]
	pos->y = y;
 80030cc:	7082      	strb	r2, [r0, #2]

}
 80030ce:	4770      	bx	lr

080030d0 <set_velocity>:


#include "velocity.h"

void set_velocity(velocity* vel, short x, short y) {
	vel->x = x;
 80030d0:	8001      	strh	r1, [r0, #0]
	vel->y = y;
 80030d2:	8042      	strh	r2, [r0, #2]
}
 80030d4:	4770      	bx	lr

080030d6 <update_guysko_position>:

#include <stdlib.h>

#include "guysko.h"

void update_guysko_position (guysko* player) {
 80030d6:	b508      	push	{r3, lr}
 80030d8:	4603      	mov	r3, r0
	set_postition(player->pos, player->pos->x + player->mov->x, player->pos->y - player->mov->y);
 80030da:	6940      	ldr	r0, [r0, #20]
 80030dc:	8801      	ldrh	r1, [r0, #0]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	f8b3 c000 	ldrh.w	ip, [r3]
 80030e4:	7882      	ldrb	r2, [r0, #2]
 80030e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030ea:	1ad2      	subs	r2, r2, r3
 80030ec:	4461      	add	r1, ip
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	b289      	uxth	r1, r1
 80030f2:	f7ff ffea 	bl	80030ca <set_postition>
}
 80030f6:	bd08      	pop	{r3, pc}

080030f8 <update_guysko_move>:

void update_guysko_move (guysko* player, int FPS) {
 80030f8:	b510      	push	{r4, lr}
	float mov_x = ((float)1 / ((float) (1000 / FPS) / (float)player->vel->x)) + player->mov->x_remainder;
 80030fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030fe:	fb93 f3f1 	sdiv	r3, r3, r1
 8003102:	ee07 3a90 	vmov	s15, r3
 8003106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800310a:	68c3      	ldr	r3, [r0, #12]
 800310c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003110:	ee07 2a10 	vmov	s14, r2
 8003114:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003118:	eec7 5a87 	vdiv.f32	s11, s15, s14
 800311c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003120:	eec6 6a25 	vdiv.f32	s13, s12, s11
 8003124:	6904      	ldr	r4, [r0, #16]
 8003126:	ed94 7a01 	vldr	s14, [r4, #4]
 800312a:	ee76 6a87 	vadd.f32	s13, s13, s14
	float mov_y = ((float)1 / ((float) (1000 / FPS) / (float)player->vel->y)) + player->mov->y_remainder;
 800312e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003132:	ee07 3a10 	vmov	s14, r3
 8003136:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800313a:	eec7 5a87 	vdiv.f32	s11, s15, s14
 800313e:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8003142:	edd4 7a02 	vldr	s15, [r4, #8]
 8003146:	ee37 7a27 	vadd.f32	s14, s14, s15

	short pix_move_x = (short) mov_x % 100;
 800314a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800314e:	ee17 3a90 	vmov	r3, s15
 8003152:	b219      	sxth	r1, r3
 8003154:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <update_guysko_move+0xbc>)
 8003156:	fb83 c201 	smull	ip, r2, r3, r1
 800315a:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 800315e:	ebcc 1c62 	rsb	ip, ip, r2, asr #5
 8003162:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8003166:	fb0e 111c 	mls	r1, lr, ip, r1
 800316a:	b209      	sxth	r1, r1
	short pix_move_y = (short) mov_y % 100;
 800316c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8003170:	ee17 2a90 	vmov	r2, s15
 8003174:	b212      	sxth	r2, r2
 8003176:	fb83 c302 	smull	ip, r3, r3, r2
 800317a:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800317e:	ebcc 1363 	rsb	r3, ip, r3, asr #5
 8003182:	fb0e 2213 	mls	r2, lr, r3, r2
 8003186:	b212      	sxth	r2, r2

	player->mov->x_remainder = mov_x - (float)pix_move_x;
 8003188:	ee07 1a90 	vmov	s15, r1
 800318c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003190:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003194:	edc4 6a01 	vstr	s13, [r4, #4]
	player->mov->y_remainder = mov_y - (float)pix_move_y;
 8003198:	ee07 2a90 	vmov	s15, r2
 800319c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031a0:	6903      	ldr	r3, [r0, #16]
 80031a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031a6:	ed83 7a02 	vstr	s14, [r3, #8]

	set_move(player->mov, pix_move_x, pix_move_y);
 80031aa:	6900      	ldr	r0, [r0, #16]
 80031ac:	f7ff ff8a 	bl	80030c4 <set_move>
}
 80031b0:	bd10      	pop	{r4, pc}
 80031b2:	bf00      	nop
 80031b4:	51eb851f 	.word	0x51eb851f

080031b8 <update_guysko_velocity>:

void update_guysko_velocity(guysko* player) {
 80031b8:	b510      	push	{r4, lr}
 80031ba:	4604      	mov	r4, r0
	// x axis
	/*
	 * TODO: it can move right and left if and only if there is a solid
	 * block underneath
	 */
	if (move_right) {
 80031bc:	4b3f      	ldr	r3, [pc, #252]	; (80032bc <update_guysko_velocity+0x104>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d034      	beq.n	800322e <update_guysko_velocity+0x76>
		if (player->vel->x < 0) set_velocity(player->vel, 0 + GUYSKO_WALK_VEL_INC, player->vel->y);
 80031c4:	68c0      	ldr	r0, [r0, #12]
 80031c6:	f9b0 1000 	ldrsh.w	r1, [r0]
 80031ca:	2900      	cmp	r1, #0
 80031cc:	db23      	blt.n	8003216 <update_guysko_velocity+0x5e>
		else set_velocity(player->vel, player->vel->x + GUYSKO_WALK_VEL_INC, player->vel->y);
 80031ce:	b289      	uxth	r1, r1
 80031d0:	3105      	adds	r1, #5
 80031d2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80031d6:	b209      	sxth	r1, r1
 80031d8:	f7ff ff7a 	bl	80030d0 <set_velocity>
	// MAX VELOCITY IN X DIRECTION
		if (player->vel->x > GUYSKO_MAX_RIGHT_VELOCITY) set_velocity(player->vel, GUYSKO_MAX_RIGHT_VELOCITY, player->vel->y);
 80031dc:	68e0      	ldr	r0, [r4, #12]
 80031de:	f9b0 3000 	ldrsh.w	r3, [r0]
 80031e2:	2b64      	cmp	r3, #100	; 0x64
 80031e4:	dc1d      	bgt.n	8003222 <update_guysko_velocity+0x6a>
		action_reset(MOVE_RIGHT_INDEX);
 80031e6:	2007      	movs	r0, #7
 80031e8:	f7fd ff2e 	bl	8001048 <action_reset>
	} else {
		set_velocity(player->vel, 0, player->vel->y);
	}

	// y axis
	set_velocity(player->vel, player->vel->x, player->vel->y + GRAVITY);
 80031ec:	68e0      	ldr	r0, [r4, #12]
 80031ee:	8842      	ldrh	r2, [r0, #2]
 80031f0:	3a05      	subs	r2, #5
 80031f2:	b212      	sxth	r2, r2
 80031f4:	f9b0 1000 	ldrsh.w	r1, [r0]
 80031f8:	f7ff ff6a 	bl	80030d0 <set_velocity>
	if (move_up /* && pos_y >= 220 ce guysko nima nič "solid" pod seboj*/) {
 80031fc:	4b30      	ldr	r3, [pc, #192]	; (80032c0 <update_guysko_velocity+0x108>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d142      	bne.n	800328a <update_guysko_velocity+0xd2>
		set_velocity(player->vel, player->vel->x, player->vel->y + GUYSKO_JUMP_ACCELERATION);
		action_reset(MOVE_UP_INDEX);
	}
	// MAX VELOCITY IN Y DIRECTION
	if (player->vel->y < GUYSKO_MAX_DOWN_VELOCITY) {
 8003204:	68e0      	ldr	r0, [r4, #12]
 8003206:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800320a:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 800320e:	db48      	blt.n	80032a2 <update_guysko_velocity+0xea>
		set_velocity(player->vel, player->vel->x, GUYSKO_MAX_DOWN_VELOCITY);
	} else if (player->vel->y > GUYSKO_MAX_UP_VELOCITY) {
 8003210:	2b96      	cmp	r3, #150	; 0x96
 8003212:	dc4c      	bgt.n	80032ae <update_guysko_velocity+0xf6>
		set_velocity(player->vel, player->vel->x, GUYSKO_MAX_UP_VELOCITY);
	}

	// TODO: DIFFERENCE OF PREVIOUS AND NEW VELOCITY: FOR DAMAGE OF HIGH FALL
}
 8003214:	bd10      	pop	{r4, pc}
		if (player->vel->x < 0) set_velocity(player->vel, 0 + GUYSKO_WALK_VEL_INC, player->vel->y);
 8003216:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800321a:	2105      	movs	r1, #5
 800321c:	f7ff ff58 	bl	80030d0 <set_velocity>
 8003220:	e7dc      	b.n	80031dc <update_guysko_velocity+0x24>
		if (player->vel->x > GUYSKO_MAX_RIGHT_VELOCITY) set_velocity(player->vel, GUYSKO_MAX_RIGHT_VELOCITY, player->vel->y);
 8003222:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8003226:	2164      	movs	r1, #100	; 0x64
 8003228:	f7ff ff52 	bl	80030d0 <set_velocity>
 800322c:	e7db      	b.n	80031e6 <update_guysko_velocity+0x2e>
	} else if (move_left) {
 800322e:	4b25      	ldr	r3, [pc, #148]	; (80032c4 <update_guysko_velocity+0x10c>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	b31b      	cbz	r3, 800327c <update_guysko_velocity+0xc4>
		if (player->vel->x > 0) set_velocity(player->vel, 0 - GUYSKO_WALK_VEL_INC, player->vel->y);
 8003234:	68c0      	ldr	r0, [r0, #12]
 8003236:	f9b0 1000 	ldrsh.w	r1, [r0]
 800323a:	2900      	cmp	r1, #0
 800323c:	dd0f      	ble.n	800325e <update_guysko_velocity+0xa6>
 800323e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8003242:	f06f 0104 	mvn.w	r1, #4
 8003246:	f7ff ff43 	bl	80030d0 <set_velocity>
		if (player->vel->x < GUYSKO_MAX_LEFT_VELOCITY) set_velocity(player->vel, GUYSKO_MAX_LEFT_VELOCITY, player->vel->y);
 800324a:	68e0      	ldr	r0, [r4, #12]
 800324c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8003250:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003254:	db0b      	blt.n	800326e <update_guysko_velocity+0xb6>
		action_reset(MOVE_LEFT_INDEX);
 8003256:	2009      	movs	r0, #9
 8003258:	f7fd fef6 	bl	8001048 <action_reset>
 800325c:	e7c6      	b.n	80031ec <update_guysko_velocity+0x34>
		else set_velocity(player->vel, player->vel->x - GUYSKO_WALK_VEL_INC, player->vel->y);
 800325e:	b289      	uxth	r1, r1
 8003260:	3905      	subs	r1, #5
 8003262:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8003266:	b209      	sxth	r1, r1
 8003268:	f7ff ff32 	bl	80030d0 <set_velocity>
 800326c:	e7ed      	b.n	800324a <update_guysko_velocity+0x92>
		if (player->vel->x < GUYSKO_MAX_LEFT_VELOCITY) set_velocity(player->vel, GUYSKO_MAX_LEFT_VELOCITY, player->vel->y);
 800326e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8003272:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8003276:	f7ff ff2b 	bl	80030d0 <set_velocity>
 800327a:	e7ec      	b.n	8003256 <update_guysko_velocity+0x9e>
		set_velocity(player->vel, 0, player->vel->y);
 800327c:	68c0      	ldr	r0, [r0, #12]
 800327e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8003282:	2100      	movs	r1, #0
 8003284:	f7ff ff24 	bl	80030d0 <set_velocity>
 8003288:	e7b0      	b.n	80031ec <update_guysko_velocity+0x34>
		set_velocity(player->vel, player->vel->x, player->vel->y + GUYSKO_JUMP_ACCELERATION);
 800328a:	68e0      	ldr	r0, [r4, #12]
 800328c:	8842      	ldrh	r2, [r0, #2]
 800328e:	3264      	adds	r2, #100	; 0x64
 8003290:	b212      	sxth	r2, r2
 8003292:	f9b0 1000 	ldrsh.w	r1, [r0]
 8003296:	f7ff ff1b 	bl	80030d0 <set_velocity>
		action_reset(MOVE_UP_INDEX);
 800329a:	2006      	movs	r0, #6
 800329c:	f7fd fed4 	bl	8001048 <action_reset>
 80032a0:	e7b0      	b.n	8003204 <update_guysko_velocity+0x4c>
		set_velocity(player->vel, player->vel->x, GUYSKO_MAX_DOWN_VELOCITY);
 80032a2:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <update_guysko_velocity+0x110>)
 80032a4:	f9b0 1000 	ldrsh.w	r1, [r0]
 80032a8:	f7ff ff12 	bl	80030d0 <set_velocity>
 80032ac:	e7b2      	b.n	8003214 <update_guysko_velocity+0x5c>
		set_velocity(player->vel, player->vel->x, GUYSKO_MAX_UP_VELOCITY);
 80032ae:	2296      	movs	r2, #150	; 0x96
 80032b0:	f9b0 1000 	ldrsh.w	r1, [r0]
 80032b4:	f7ff ff0c 	bl	80030d0 <set_velocity>
}
 80032b8:	e7ac      	b.n	8003214 <update_guysko_velocity+0x5c>
 80032ba:	bf00      	nop
 80032bc:	20000427 	.word	0x20000427
 80032c0:	20000428 	.word	0x20000428
 80032c4:	20000426 	.word	0x20000426
 80032c8:	fffffed4 	.word	0xfffffed4

080032cc <draw_guysko>:


void draw_guysko (guysko* player) {
 80032cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032d0:	b083      	sub	sp, #12
 80032d2:	9001      	str	r0, [sp, #4]
	int index = 0;
	uint16_t draw_startPoint_x = player->pos->x - (GUYSKO_IMG_X / 2);
 80032d4:	6943      	ldr	r3, [r0, #20]
 80032d6:	f8b3 b000 	ldrh.w	fp, [r3]
 80032da:	f1ab 0b06 	sub.w	fp, fp, #6
 80032de:	fa1f fb8b 	uxth.w	fp, fp
	uint8_t draw_startPoint_y = player->pos->y - GUYSKO_IMG_Y;
 80032e2:	f893 a002 	ldrb.w	sl, [r3, #2]
 80032e6:	f1aa 0a17 	sub.w	sl, sl, #23
 80032ea:	fa5f fa8a 	uxtb.w	sl, sl

	for (int i = 0; i < GUYSKO_IMG_SIZE / 2; i += 1) {
 80032ee:	2700      	movs	r7, #0
	int index = 0;
 80032f0:	463c      	mov	r4, r7
	for (int i = 0; i < GUYSKO_IMG_SIZE / 2; i += 1) {
 80032f2:	e027      	b.n	8003344 <draw_guysko+0x78>
		uint8_t offset_x = index % (GUYSKO_IMG_X / 2);
 80032f4:	481e      	ldr	r0, [pc, #120]	; (8003370 <draw_guysko+0xa4>)
 80032f6:	fb80 3004 	smull	r3, r0, r0, r4
 80032fa:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
 80032fe:	4605      	mov	r5, r0
 8003300:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003304:	eba4 0040 	sub.w	r0, r4, r0, lsl #1
 8003308:	b2c0      	uxtb	r0, r0
		uint8_t offset_y = index / (GUYSKO_IMG_X / 2);
		index++;
 800330a:	3401      	adds	r4, #1
		// TODO: BEAUTIFY THIS SECTION OF CODE
		int frst_nibble =	(guysko_r_0[i] & 0b11110000) >> 4;
 800330c:	4b19      	ldr	r3, [pc, #100]	; (8003374 <draw_guysko+0xa8>)
 800330e:	5dde      	ldrb	r6, [r3, r7]
 8003310:	0933      	lsrs	r3, r6, #4
		int scnd_nibble =	(guysko_r_0[i] & 0b00001111) >> 0;
 8003312:	f006 060f 	and.w	r6, r6, #15
		UG_DrawPixel(draw_startPoint_x + 2 * offset_x, draw_startPoint_y + offset_y, GUYSKO_R_0[frst_nibble]);
 8003316:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 800331a:	fa1f f880 	uxth.w	r8, r0
 800331e:	fa5a f585 	uxtab	r5, sl, r5
 8003322:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800337c <draw_guysko+0xb0>
 8003326:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800332a:	4629      	mov	r1, r5
 800332c:	b200      	sxth	r0, r0
 800332e:	f006 fdd9 	bl	8009ee4 <UG_DrawPixel>
		UG_DrawPixel(draw_startPoint_x + 2 * offset_x + 1, draw_startPoint_y + offset_y, GUYSKO_R_0[scnd_nibble]);
 8003332:	f108 0001 	add.w	r0, r8, #1
 8003336:	f839 2016 	ldrh.w	r2, [r9, r6, lsl #1]
 800333a:	4629      	mov	r1, r5
 800333c:	b200      	sxth	r0, r0
 800333e:	f006 fdd1 	bl	8009ee4 <UG_DrawPixel>
	for (int i = 0; i < GUYSKO_IMG_SIZE / 2; i += 1) {
 8003342:	3701      	adds	r7, #1
 8003344:	2f89      	cmp	r7, #137	; 0x89
 8003346:	ddd5      	ble.n	80032f4 <draw_guysko+0x28>
//				UG_DrawPixel(draw_startPoint_x + 2 * offset_x, draw_startPoint_y + offset_y, GUYSKO_L_2[frst_nibble]);
//				UG_DrawPixel(draw_startPoint_x + 2 * offset_x + 1, draw_startPoint_y + offset_y, GUYSKO_L_2[scnd_nibble]);
//			}
//		}
	}
	player->state++;
 8003348:	9801      	ldr	r0, [sp, #4]
 800334a:	7903      	ldrb	r3, [r0, #4]
 800334c:	3301      	adds	r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	7103      	strb	r3, [r0, #4]
	if (player->state >= 3) player->state = player->state % 3;
 8003352:	2b02      	cmp	r3, #2
 8003354:	d908      	bls.n	8003368 <draw_guysko+0x9c>
 8003356:	4a08      	ldr	r2, [pc, #32]	; (8003378 <draw_guysko+0xac>)
 8003358:	fba2 1203 	umull	r1, r2, r2, r3
 800335c:	f002 01fe 	and.w	r1, r2, #254	; 0xfe
 8003360:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	7103      	strb	r3, [r0, #4]
}
 8003368:	b003      	add	sp, #12
 800336a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800336e:	bf00      	nop
 8003370:	2aaaaaab 	.word	0x2aaaaaab
 8003374:	20000024 	.word	0x20000024
 8003378:	aaaaaaab 	.word	0xaaaaaaab
 800337c:	20000008 	.word	0x20000008

08003380 <new_guysko>:
 * @param acceleration	guysko's acceleration
 * @param velocity 			guysko's velocity
 * @param move					difference of position guysko will make inbetween frame
 * @param position 			guysko's new position
 */
guysko* new_guysko(life_points* lp, uint8_t state, acceleration*acc, velocity* vel, move* mov, position* pos) {
 8003380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003382:	4607      	mov	r7, r0
 8003384:	4616      	mov	r6, r2
 8003386:	461d      	mov	r5, r3
	guysko* player = malloc(sizeof(guysko));
 8003388:	2018      	movs	r0, #24
 800338a:	f007 ff1f 	bl	800b1cc <malloc>
 800338e:	4604      	mov	r4, r0

	player->lp					= malloc(sizeof(life_points));
 8003390:	2004      	movs	r0, #4
 8003392:	f007 ff1b 	bl	800b1cc <malloc>
 8003396:	6020      	str	r0, [r4, #0]
	player->lp->life_points = lp->life_points;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	6003      	str	r3, [r0, #0]

	player->state 			= 0;
 800339c:	2300      	movs	r3, #0
 800339e:	7123      	strb	r3, [r4, #4]

	player->acc			 		= malloc(sizeof(acceleration));
 80033a0:	2004      	movs	r0, #4
 80033a2:	f007 ff13 	bl	800b1cc <malloc>
 80033a6:	60a0      	str	r0, [r4, #8]
	player->acc					= acc;
 80033a8:	60a6      	str	r6, [r4, #8]

	player->vel 				= malloc(sizeof(velocity));
 80033aa:	2004      	movs	r0, #4
 80033ac:	f007 ff0e 	bl	800b1cc <malloc>
 80033b0:	60e0      	str	r0, [r4, #12]
	player->vel					= vel;
 80033b2:	60e5      	str	r5, [r4, #12]

	player->mov 				= malloc(sizeof(move));
 80033b4:	200c      	movs	r0, #12
 80033b6:	f007 ff09 	bl	800b1cc <malloc>
 80033ba:	6120      	str	r0, [r4, #16]
	player->mov 				= mov;
 80033bc:	9b06      	ldr	r3, [sp, #24]
 80033be:	6123      	str	r3, [r4, #16]

	player->pos 				= malloc(sizeof(position));
 80033c0:	2004      	movs	r0, #4
 80033c2:	f007 ff03 	bl	800b1cc <malloc>
 80033c6:	6160      	str	r0, [r4, #20]
	player->pos		 			= pos;
 80033c8:	9b07      	ldr	r3, [sp, #28]
 80033ca:	6163      	str	r3, [r4, #20]


	return player;
}
 80033cc:	4620      	mov	r0, r4
 80033ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   r0, =_estack
 80033d0:	480d      	ldr	r0, [pc, #52]	; (8003408 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033d4:	480d      	ldr	r0, [pc, #52]	; (800340c <LoopForever+0x6>)
  ldr r1, =_edata
 80033d6:	490e      	ldr	r1, [pc, #56]	; (8003410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033d8:	4a0e      	ldr	r2, [pc, #56]	; (8003414 <LoopForever+0xe>)
  movs r3, #0
 80033da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80033dc:	e002      	b.n	80033e4 <LoopCopyDataInit>

080033de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033e2:	3304      	adds	r3, #4

080033e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033e8:	d3f9      	bcc.n	80033de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ea:	4a0b      	ldr	r2, [pc, #44]	; (8003418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033ec:	4c0b      	ldr	r4, [pc, #44]	; (800341c <LoopForever+0x16>)
  movs r3, #0
 80033ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033f0:	e001      	b.n	80033f6 <LoopFillZerobss>

080033f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033f4:	3204      	adds	r2, #4

080033f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033f8:	d3fb      	bcc.n	80033f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80033fa:	f7ff f8a1 	bl	8002540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033fe:	f007 fec1 	bl	800b184 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003402:	f7fe fdf5 	bl	8001ff0 <main>

08003406 <LoopForever>:

LoopForever:
    b LoopForever
 8003406:	e7fe      	b.n	8003406 <LoopForever>
	  ldr   r0, =_estack
 8003408:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800340c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003410:	20000404 	.word	0x20000404
  ldr r2, =_sidata
 8003414:	08010c64 	.word	0x08010c64
  ldr r2, =_sbss
 8003418:	20000404 	.word	0x20000404
  ldr r4, =_ebss
 800341c:	200027a4 	.word	0x200027a4

08003420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003420:	e7fe      	b.n	8003420 <ADC1_2_IRQHandler>
	...

08003424 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8003424:	4b10      	ldr	r3, [pc, #64]	; (8003468 <HAL_InitTick+0x44>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	b90b      	cbnz	r3, 800342e <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800342a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800342c:	4770      	bx	lr
{
 800342e:	b510      	push	{r4, lr}
 8003430:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003432:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003436:	fbb0 f3f3 	udiv	r3, r0, r3
 800343a:	4a0c      	ldr	r2, [pc, #48]	; (800346c <HAL_InitTick+0x48>)
 800343c:	6810      	ldr	r0, [r2, #0]
 800343e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003442:	f000 fec1 	bl	80041c8 <HAL_SYSTICK_Config>
 8003446:	b968      	cbnz	r0, 8003464 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003448:	2c0f      	cmp	r4, #15
 800344a:	d901      	bls.n	8003450 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 800344c:	2001      	movs	r0, #1
 800344e:	e00a      	b.n	8003466 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003450:	2200      	movs	r2, #0
 8003452:	4621      	mov	r1, r4
 8003454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003458:	f000 fe70 	bl	800413c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <HAL_InitTick+0x4c>)
 800345e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8003460:	2000      	movs	r0, #0
 8003462:	e000      	b.n	8003466 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8003464:	2001      	movs	r0, #1
}
 8003466:	bd10      	pop	{r4, pc}
 8003468:	200000b0 	.word	0x200000b0
 800346c:	20000004 	.word	0x20000004
 8003470:	200000b4 	.word	0x200000b4

08003474 <HAL_Init>:
{
 8003474:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003476:	2003      	movs	r0, #3
 8003478:	f000 fe4e 	bl	8004118 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800347c:	2000      	movs	r0, #0
 800347e:	f7ff ffd1 	bl	8003424 <HAL_InitTick>
 8003482:	b110      	cbz	r0, 800348a <HAL_Init+0x16>
    status = HAL_ERROR;
 8003484:	2401      	movs	r4, #1
}
 8003486:	4620      	mov	r0, r4
 8003488:	bd10      	pop	{r4, pc}
 800348a:	4604      	mov	r4, r0
    HAL_MspInit();
 800348c:	f7fe ff42 	bl	8002314 <HAL_MspInit>
 8003490:	e7f9      	b.n	8003486 <HAL_Init+0x12>
	...

08003494 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003494:	4a03      	ldr	r2, [pc, #12]	; (80034a4 <HAL_IncTick+0x10>)
 8003496:	6813      	ldr	r3, [r2, #0]
 8003498:	4903      	ldr	r1, [pc, #12]	; (80034a8 <HAL_IncTick+0x14>)
 800349a:	6809      	ldr	r1, [r1, #0]
 800349c:	440b      	add	r3, r1
 800349e:	6013      	str	r3, [r2, #0]
}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000d34 	.word	0x20000d34
 80034a8:	200000b0 	.word	0x200000b0

080034ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80034ac:	4b01      	ldr	r3, [pc, #4]	; (80034b4 <HAL_GetTick+0x8>)
 80034ae:	6818      	ldr	r0, [r3, #0]
}
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	20000d34 	.word	0x20000d34

080034b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034b8:	b538      	push	{r3, r4, r5, lr}
 80034ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80034bc:	f7ff fff6 	bl	80034ac <HAL_GetTick>
 80034c0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034c2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80034c6:	d002      	beq.n	80034ce <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80034c8:	4b04      	ldr	r3, [pc, #16]	; (80034dc <HAL_Delay+0x24>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034ce:	f7ff ffed 	bl	80034ac <HAL_GetTick>
 80034d2:	1b40      	subs	r0, r0, r5
 80034d4:	42a0      	cmp	r0, r4
 80034d6:	d3fa      	bcc.n	80034ce <HAL_Delay+0x16>
  {
  }
}
 80034d8:	bd38      	pop	{r3, r4, r5, pc}
 80034da:	bf00      	nop
 80034dc:	200000b0 	.word	0x200000b0

080034e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034e0:	b530      	push	{r4, r5, lr}
 80034e2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80034e8:	2800      	cmp	r0, #0
 80034ea:	f000 8138 	beq.w	800375e <HAL_ADC_Init+0x27e>
 80034ee:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034f0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80034f2:	b313      	cbz	r3, 800353a <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80034f4:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 80034fc:	d005      	beq.n	800350a <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8003504:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003508:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800350a:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800350c:	6893      	ldr	r3, [r2, #8]
 800350e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003512:	d11f      	bne.n	8003554 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 8003514:	6893      	ldr	r3, [r2, #8]
 8003516:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800351a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800351e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003522:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003524:	4b8f      	ldr	r3, [pc, #572]	; (8003764 <HAL_ADC_Init+0x284>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	099b      	lsrs	r3, r3, #6
 800352a:	4a8f      	ldr	r2, [pc, #572]	; (8003768 <HAL_ADC_Init+0x288>)
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	099b      	lsrs	r3, r3, #6
 8003532:	3301      	adds	r3, #1
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003538:	e009      	b.n	800354e <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 800353a:	f7fd ff41 	bl	80013c0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800353e:	2300      	movs	r3, #0
 8003540:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8003542:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8003546:	e7d5      	b.n	80034f4 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8003548:	9b01      	ldr	r3, [sp, #4]
 800354a:	3b01      	subs	r3, #1
 800354c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800354e:	9b01      	ldr	r3, [sp, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f9      	bne.n	8003548 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003554:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003556:	6893      	ldr	r3, [r2, #8]
 8003558:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800355c:	d13d      	bne.n	80035da <HAL_ADC_Init+0xfa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003560:	f043 0310 	orr.w	r3, r3, #16
 8003564:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003566:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800356e:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003570:	6893      	ldr	r3, [r2, #8]
 8003572:	f013 0304 	ands.w	r3, r3, #4
 8003576:	d000      	beq.n	800357a <HAL_ADC_Init+0x9a>
 8003578:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800357a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800357c:	f011 0f10 	tst.w	r1, #16
 8003580:	f040 80e6 	bne.w	8003750 <HAL_ADC_Init+0x270>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003584:	2b00      	cmp	r3, #0
 8003586:	f040 80e3 	bne.w	8003750 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800358a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800358c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003590:	f043 0302 	orr.w	r3, r3, #2
 8003594:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003596:	6893      	ldr	r3, [r2, #8]
 8003598:	f013 0f01 	tst.w	r3, #1
 800359c:	d13e      	bne.n	800361c <HAL_ADC_Init+0x13c>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800359e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80035a2:	d01c      	beq.n	80035de <HAL_ADC_Init+0xfe>
 80035a4:	4b71      	ldr	r3, [pc, #452]	; (800376c <HAL_ADC_Init+0x28c>)
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d019      	beq.n	80035de <HAL_ADC_Init+0xfe>
 80035aa:	4b71      	ldr	r3, [pc, #452]	; (8003770 <HAL_ADC_Init+0x290>)
 80035ac:	6899      	ldr	r1, [r3, #8]
 80035ae:	f011 0101 	ands.w	r1, r1, #1
 80035b2:	d000      	beq.n	80035b6 <HAL_ADC_Init+0xd6>
 80035b4:	2101      	movs	r1, #1
 80035b6:	4b6f      	ldr	r3, [pc, #444]	; (8003774 <HAL_ADC_Init+0x294>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f013 0301 	ands.w	r3, r3, #1
 80035be:	d000      	beq.n	80035c2 <HAL_ADC_Init+0xe2>
 80035c0:	2301      	movs	r3, #1
 80035c2:	430b      	orrs	r3, r1
 80035c4:	496c      	ldr	r1, [pc, #432]	; (8003778 <HAL_ADC_Init+0x298>)
 80035c6:	6889      	ldr	r1, [r1, #8]
 80035c8:	f011 0101 	ands.w	r1, r1, #1
 80035cc:	d000      	beq.n	80035d0 <HAL_ADC_Init+0xf0>
 80035ce:	2101      	movs	r1, #1
 80035d0:	430b      	orrs	r3, r1
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	e012      	b.n	8003600 <HAL_ADC_Init+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035da:	2000      	movs	r0, #0
 80035dc:	e7c8      	b.n	8003570 <HAL_ADC_Init+0x90>
 80035de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f013 0301 	ands.w	r3, r3, #1
 80035e8:	d000      	beq.n	80035ec <HAL_ADC_Init+0x10c>
 80035ea:	2301      	movs	r3, #1
 80035ec:	495f      	ldr	r1, [pc, #380]	; (800376c <HAL_ADC_Init+0x28c>)
 80035ee:	6889      	ldr	r1, [r1, #8]
 80035f0:	f011 0101 	ands.w	r1, r1, #1
 80035f4:	d000      	beq.n	80035f8 <HAL_ADC_Init+0x118>
 80035f6:	2101      	movs	r1, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035f8:	430b      	orrs	r3, r1
 80035fa:	bf0c      	ite	eq
 80035fc:	2301      	moveq	r3, #1
 80035fe:	2300      	movne	r3, #0
 8003600:	b163      	cbz	r3, 800361c <HAL_ADC_Init+0x13c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003602:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003606:	d072      	beq.n	80036ee <HAL_ADC_Init+0x20e>
 8003608:	4b58      	ldr	r3, [pc, #352]	; (800376c <HAL_ADC_Init+0x28c>)
 800360a:	429a      	cmp	r2, r3
 800360c:	d06d      	beq.n	80036ea <HAL_ADC_Init+0x20a>
 800360e:	495b      	ldr	r1, [pc, #364]	; (800377c <HAL_ADC_Init+0x29c>)
 8003610:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003612:	688a      	ldr	r2, [r1, #8]
 8003614:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8003618:	4313      	orrs	r3, r2
 800361a:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800361c:	7f62      	ldrb	r2, [r4, #29]
                hadc->Init.Overrun                                                     |
 800361e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003620:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 8003624:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 8003626:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 8003628:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 800362a:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800362c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003630:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003634:	2a01      	cmp	r2, #1
 8003636:	d05c      	beq.n	80036f2 <HAL_ADC_Init+0x212>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003638:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800363a:	b122      	cbz	r2, 8003646 <HAL_ADC_Init+0x166>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800363c:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003640:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003642:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003644:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003646:	6821      	ldr	r1, [r4, #0]
 8003648:	68cd      	ldr	r5, [r1, #12]
 800364a:	4a4d      	ldr	r2, [pc, #308]	; (8003780 <HAL_ADC_Init+0x2a0>)
 800364c:	402a      	ands	r2, r5
 800364e:	4313      	orrs	r3, r2
 8003650:	60cb      	str	r3, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003652:	6822      	ldr	r2, [r4, #0]
 8003654:	6913      	ldr	r3, [r2, #16]
 8003656:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800365a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800365c:	430b      	orrs	r3, r1
 800365e:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003660:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003662:	688b      	ldr	r3, [r1, #8]
 8003664:	f013 0304 	ands.w	r3, r3, #4
 8003668:	d000      	beq.n	800366c <HAL_ADC_Init+0x18c>
 800366a:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800366c:	688a      	ldr	r2, [r1, #8]
 800366e:	f012 0208 	ands.w	r2, r2, #8
 8003672:	d000      	beq.n	8003676 <HAL_ADC_Init+0x196>
 8003674:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003676:	bb4b      	cbnz	r3, 80036cc <HAL_ADC_Init+0x1ec>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003678:	bb42      	cbnz	r2, 80036cc <HAL_ADC_Init+0x1ec>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800367a:	7f22      	ldrb	r2, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800367c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003680:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003682:	ea43 3282 	orr.w	r2, r3, r2, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003686:	68cb      	ldr	r3, [r1, #12]
 8003688:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800368c:	f023 0302 	bic.w	r3, r3, #2
 8003690:	4313      	orrs	r3, r2
 8003692:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003694:	6923      	ldr	r3, [r4, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d030      	beq.n	80036fc <HAL_ADC_Init+0x21c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800369a:	6822      	ldr	r2, [r4, #0]
 800369c:	6913      	ldr	r3, [r2, #16]
 800369e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a2:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80036a4:	6822      	ldr	r2, [r4, #0]
 80036a6:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80036aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80036ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036b2:	6921      	ldr	r1, [r4, #16]
 80036b4:	430b      	orrs	r3, r1
 80036b6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80036ba:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d02b      	beq.n	800371a <HAL_ADC_Init+0x23a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036c2:	6822      	ldr	r2, [r4, #0]
 80036c4:	6913      	ldr	r3, [r2, #16]
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036cc:	6963      	ldr	r3, [r4, #20]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d035      	beq.n	800373e <HAL_ADC_Init+0x25e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80036d2:	6822      	ldr	r2, [r4, #0]
 80036d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80036d6:	f023 030f 	bic.w	r3, r3, #15
 80036da:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80036dc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80036de:	f023 0303 	bic.w	r3, r3, #3
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80036e8:	e037      	b.n	800375a <HAL_ADC_Init+0x27a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80036ea:	4926      	ldr	r1, [pc, #152]	; (8003784 <HAL_ADC_Init+0x2a4>)
 80036ec:	e790      	b.n	8003610 <HAL_ADC_Init+0x130>
 80036ee:	4925      	ldr	r1, [pc, #148]	; (8003784 <HAL_ADC_Init+0x2a4>)
 80036f0:	e78e      	b.n	8003610 <HAL_ADC_Init+0x130>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80036f4:	3a01      	subs	r2, #1
 80036f6:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80036fa:	e79d      	b.n	8003638 <HAL_ADC_Init+0x158>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80036fc:	6822      	ldr	r2, [r4, #0]
 80036fe:	6913      	ldr	r3, [r2, #16]
 8003700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003704:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003706:	6822      	ldr	r2, [r4, #0]
 8003708:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800370c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003710:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003714:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003718:	e7cf      	b.n	80036ba <HAL_ADC_Init+0x1da>
        MODIFY_REG(hadc->Instance->CFGR2,
 800371a:	6821      	ldr	r1, [r4, #0]
 800371c:	690b      	ldr	r3, [r1, #16]
 800371e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003722:	f023 0304 	bic.w	r3, r3, #4
 8003726:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003728:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800372a:	432a      	orrs	r2, r5
 800372c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800372e:	432a      	orrs	r2, r5
 8003730:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8003732:	432a      	orrs	r2, r5
 8003734:	4313      	orrs	r3, r2
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	610b      	str	r3, [r1, #16]
 800373c:	e7c6      	b.n	80036cc <HAL_ADC_Init+0x1ec>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800373e:	6821      	ldr	r1, [r4, #0]
 8003740:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003742:	f023 030f 	bic.w	r3, r3, #15
 8003746:	6a22      	ldr	r2, [r4, #32]
 8003748:	3a01      	subs	r2, #1
 800374a:	4313      	orrs	r3, r2
 800374c:	630b      	str	r3, [r1, #48]	; 0x30
 800374e:	e7c5      	b.n	80036dc <HAL_ADC_Init+0x1fc>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003750:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003752:	f043 0310 	orr.w	r3, r3, #16
 8003756:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003758:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 800375a:	b003      	add	sp, #12
 800375c:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800375e:	2001      	movs	r0, #1
 8003760:	e7fb      	b.n	800375a <HAL_ADC_Init+0x27a>
 8003762:	bf00      	nop
 8003764:	20000004 	.word	0x20000004
 8003768:	053e2d63 	.word	0x053e2d63
 800376c:	50000100 	.word	0x50000100
 8003770:	50000400 	.word	0x50000400
 8003774:	50000500 	.word	0x50000500
 8003778:	50000600 	.word	0x50000600
 800377c:	50000700 	.word	0x50000700
 8003780:	fff04007 	.word	0xfff04007
 8003784:	50000300 	.word	0x50000300

08003788 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003788:	4770      	bx	lr

0800378a <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800378a:	4770      	bx	lr

0800378c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800378c:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800378e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003790:	f7ff fffb 	bl	800378a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003794:	bd08      	pop	{r3, pc}

08003796 <HAL_ADC_ErrorCallback>:
}
 8003796:	4770      	bx	lr

08003798 <ADC_DMAConvCplt>:
{
 8003798:	b508      	push	{r3, lr}
 800379a:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800379c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800379e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80037a0:	f012 0f50 	tst.w	r2, #80	; 0x50
 80037a4:	d130      	bne.n	8003808 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037a6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80037a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ac:	65c3      	str	r3, [r0, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80037ae:	6803      	ldr	r3, [r0, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	f012 0f08 	tst.w	r2, #8
 80037b6:	d014      	beq.n	80037e2 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80037be:	d120      	bne.n	8003802 <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80037c6:	d11c      	bne.n	8003802 <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037c8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80037ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037ce:	65c3      	str	r3, [r0, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037d0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80037d2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80037d6:	d114      	bne.n	8003802 <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037d8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	65c3      	str	r3, [r0, #92]	; 0x5c
 80037e0:	e00f      	b.n	8003802 <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f013 0f02 	tst.w	r3, #2
 80037e8:	d10b      	bne.n	8003802 <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037ea:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80037ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037f0:	65c3      	str	r3, [r0, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037f2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80037f4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80037f8:	d103      	bne.n	8003802 <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037fa:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8003802:	f7ff ffc1 	bl	8003788 <HAL_ADC_ConvCpltCallback>
}
 8003806:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003808:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800380a:	f012 0f10 	tst.w	r2, #16
 800380e:	d104      	bne.n	800381a <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003810:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003812:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003814:	4618      	mov	r0, r3
 8003816:	4790      	blx	r2
}
 8003818:	e7f5      	b.n	8003806 <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 800381a:	f7ff ffbc 	bl	8003796 <HAL_ADC_ErrorCallback>
 800381e:	e7f2      	b.n	8003806 <ADC_DMAConvCplt+0x6e>

08003820 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003820:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003822:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003824:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800382a:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800382c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800382e:	f043 0304 	orr.w	r3, r3, #4
 8003832:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003834:	f7ff ffaf 	bl	8003796 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003838:	bd08      	pop	{r3, pc}
	...

0800383c <HAL_ADC_ConfigChannel>:
{
 800383c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800383e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003840:	2200      	movs	r2, #0
 8003842:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003844:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8003848:	2a01      	cmp	r2, #1
 800384a:	f000 8284 	beq.w	8003d56 <HAL_ADC_ConfigChannel+0x51a>
 800384e:	4603      	mov	r3, r0
 8003850:	2201      	movs	r2, #1
 8003852:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003856:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003858:	68a8      	ldr	r0, [r5, #8]
 800385a:	f010 0f04 	tst.w	r0, #4
 800385e:	d009      	beq.n	8003874 <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003860:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003862:	f042 0220 	orr.w	r2, r2, #32
 8003866:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8003868:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8003870:	b003      	add	sp, #12
 8003872:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003874:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003876:	3530      	adds	r5, #48	; 0x30
 8003878:	0a22      	lsrs	r2, r4, #8
 800387a:	0092      	lsls	r2, r2, #2
 800387c:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8003880:	58a8      	ldr	r0, [r5, r2]
 8003882:	f004 0e1f 	and.w	lr, r4, #31
 8003886:	241f      	movs	r4, #31
 8003888:	fa04 f40e 	lsl.w	r4, r4, lr
 800388c:	ea20 0004 	bic.w	r0, r0, r4
 8003890:	680c      	ldr	r4, [r1, #0]
 8003892:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8003896:	fa0c fc0e 	lsl.w	ip, ip, lr
 800389a:	ea40 000c 	orr.w	r0, r0, ip
 800389e:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038a0:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038a2:	6882      	ldr	r2, [r0, #8]
 80038a4:	f012 0204 	ands.w	r2, r2, #4
 80038a8:	d000      	beq.n	80038ac <HAL_ADC_ConfigChannel+0x70>
 80038aa:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038ac:	6884      	ldr	r4, [r0, #8]
 80038ae:	f014 0408 	ands.w	r4, r4, #8
 80038b2:	d000      	beq.n	80038b6 <HAL_ADC_ConfigChannel+0x7a>
 80038b4:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038b6:	2a00      	cmp	r2, #0
 80038b8:	d150      	bne.n	800395c <HAL_ADC_ConfigChannel+0x120>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038ba:	2c00      	cmp	r4, #0
 80038bc:	d14e      	bne.n	800395c <HAL_ADC_ConfigChannel+0x120>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80038be:	688f      	ldr	r7, [r1, #8]
 80038c0:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 80038c4:	f000 8086 	beq.w	80039d4 <HAL_ADC_ConfigChannel+0x198>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80038c8:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80038ca:	3014      	adds	r0, #20
 80038cc:	0e72      	lsrs	r2, r6, #25
 80038ce:	0092      	lsls	r2, r2, #2
 80038d0:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 80038d4:	5885      	ldr	r5, [r0, r2]
 80038d6:	f3c6 5e04 	ubfx	lr, r6, #20, #5
 80038da:	f04f 0c07 	mov.w	ip, #7
 80038de:	fa0c fc0e 	lsl.w	ip, ip, lr
 80038e2:	ea25 0c0c 	bic.w	ip, r5, ip
 80038e6:	fa07 f50e 	lsl.w	r5, r7, lr
 80038ea:	ea4c 0505 	orr.w	r5, ip, r5
 80038ee:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80038f0:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80038f2:	6942      	ldr	r2, [r0, #20]
 80038f4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038f8:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80038fa:	694d      	ldr	r5, [r1, #20]
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	68c2      	ldr	r2, [r0, #12]
 8003900:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003904:	0052      	lsls	r2, r2, #1
 8003906:	fa05 f202 	lsl.w	r2, r5, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800390a:	690e      	ldr	r6, [r1, #16]
 800390c:	2e04      	cmp	r6, #4
 800390e:	d079      	beq.n	8003a04 <HAL_ADC_ConfigChannel+0x1c8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003910:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8003912:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8003916:	4dae      	ldr	r5, [pc, #696]	; (8003bd0 <HAL_ADC_ConfigChannel+0x394>)
 8003918:	403d      	ands	r5, r7
 800391a:	680f      	ldr	r7, [r1, #0]
 800391c:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 8003920:	433a      	orrs	r2, r7
 8003922:	4315      	orrs	r5, r2
 8003924:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8003928:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	690e      	ldr	r6, [r1, #16]
 8003930:	6988      	ldr	r0, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003932:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8003934:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 8003938:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 800393c:	4328      	orrs	r0, r5
 800393e:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	690d      	ldr	r5, [r1, #16]
 8003946:	7f08      	ldrb	r0, [r1, #28]
 8003948:	2801      	cmp	r0, #1
 800394a:	d058      	beq.n	80039fe <HAL_ADC_ConfigChannel+0x1c2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800394c:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 800394e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8003952:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8003956:	4304      	orrs	r4, r0
 8003958:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800395c:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800395e:	6890      	ldr	r0, [r2, #8]
 8003960:	f010 0f01 	tst.w	r0, #1
 8003964:	d112      	bne.n	800398c <HAL_ADC_ConfigChannel+0x150>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003966:	6808      	ldr	r0, [r1, #0]
 8003968:	68cd      	ldr	r5, [r1, #12]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800396a:	4c9a      	ldr	r4, [pc, #616]	; (8003bd4 <HAL_ADC_ConfigChannel+0x398>)
 800396c:	42a5      	cmp	r5, r4
 800396e:	f000 80b1 	beq.w	8003ad4 <HAL_ADC_ConfigChannel+0x298>
    CLEAR_BIT(ADCx->DIFSEL,
 8003972:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8003976:	f3c0 0012 	ubfx	r0, r0, #0, #19
 800397a:	ea24 0000 	bic.w	r0, r4, r0
 800397e:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003982:	68c8      	ldr	r0, [r1, #12]
 8003984:	4a93      	ldr	r2, [pc, #588]	; (8003bd4 <HAL_ADC_ConfigChannel+0x398>)
 8003986:	4290      	cmp	r0, r2
 8003988:	f000 80ac 	beq.w	8003ae4 <HAL_ADC_ConfigChannel+0x2a8>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800398c:	680a      	ldr	r2, [r1, #0]
 800398e:	4992      	ldr	r1, [pc, #584]	; (8003bd8 <HAL_ADC_ConfigChannel+0x39c>)
 8003990:	420a      	tst	r2, r1
 8003992:	f000 81da 	beq.w	8003d4a <HAL_ADC_ConfigChannel+0x50e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003996:	6819      	ldr	r1, [r3, #0]
 8003998:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800399c:	f000 8173 	beq.w	8003c86 <HAL_ADC_ConfigChannel+0x44a>
 80039a0:	488e      	ldr	r0, [pc, #568]	; (8003bdc <HAL_ADC_ConfigChannel+0x3a0>)
 80039a2:	4281      	cmp	r1, r0
 80039a4:	f000 816c 	beq.w	8003c80 <HAL_ADC_ConfigChannel+0x444>
 80039a8:	488d      	ldr	r0, [pc, #564]	; (8003be0 <HAL_ADC_ConfigChannel+0x3a4>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80039aa:	6880      	ldr	r0, [r0, #8]
 80039ac:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80039b0:	4d8c      	ldr	r5, [pc, #560]	; (8003be4 <HAL_ADC_ConfigChannel+0x3a8>)
 80039b2:	42aa      	cmp	r2, r5
 80039b4:	f000 8169 	beq.w	8003c8a <HAL_ADC_ConfigChannel+0x44e>
 80039b8:	4d8b      	ldr	r5, [pc, #556]	; (8003be8 <HAL_ADC_ConfigChannel+0x3ac>)
 80039ba:	42aa      	cmp	r2, r5
 80039bc:	f000 8165 	beq.w	8003c8a <HAL_ADC_ConfigChannel+0x44e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039c0:	4d8a      	ldr	r5, [pc, #552]	; (8003bec <HAL_ADC_ConfigChannel+0x3b0>)
 80039c2:	42aa      	cmp	r2, r5
 80039c4:	f000 8194 	beq.w	8003cf0 <HAL_ADC_ConfigChannel+0x4b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80039c8:	4d89      	ldr	r5, [pc, #548]	; (8003bf0 <HAL_ADC_ConfigChannel+0x3b4>)
 80039ca:	42aa      	cmp	r2, r5
 80039cc:	f000 81a8 	beq.w	8003d20 <HAL_ADC_ConfigChannel+0x4e4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039d0:	2000      	movs	r0, #0
 80039d2:	e74a      	b.n	800386a <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80039d4:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039d6:	3014      	adds	r0, #20
 80039d8:	0e6a      	lsrs	r2, r5, #25
 80039da:	0092      	lsls	r2, r2, #2
 80039dc:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 80039e0:	5886      	ldr	r6, [r0, r2]
 80039e2:	f3c5 5504 	ubfx	r5, r5, #20, #5
 80039e6:	2707      	movs	r7, #7
 80039e8:	fa07 f505 	lsl.w	r5, r7, r5
 80039ec:	ea26 0505 	bic.w	r5, r6, r5
 80039f0:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80039f2:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80039f4:	6942      	ldr	r2, [r0, #20]
 80039f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80039fa:	6142      	str	r2, [r0, #20]
}
 80039fc:	e77d      	b.n	80038fa <HAL_ADC_ConfigChannel+0xbe>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80039fe:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8003a02:	e7a3      	b.n	800394c <HAL_ADC_ConfigChannel+0x110>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a04:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8003a06:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a08:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a0c:	680a      	ldr	r2, [r1, #0]
 8003a0e:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003a12:	bb85      	cbnz	r5, 8003a76 <HAL_ADC_ConfigChannel+0x23a>
 8003a14:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a18:	4294      	cmp	r4, r2
 8003a1a:	d034      	beq.n	8003a86 <HAL_ADC_ConfigChannel+0x24a>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a1c:	681c      	ldr	r4, [r3, #0]
 8003a1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a20:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003a22:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a26:	680a      	ldr	r2, [r1, #0]
 8003a28:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003a2c:	bb85      	cbnz	r5, 8003a90 <HAL_ADC_ConfigChannel+0x254>
 8003a2e:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a32:	4290      	cmp	r0, r2
 8003a34:	d034      	beq.n	8003aa0 <HAL_ADC_ConfigChannel+0x264>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a36:	681c      	ldr	r4, [r3, #0]
 8003a38:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8003a3a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003a3c:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a40:	680a      	ldr	r2, [r1, #0]
 8003a42:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003a46:	bb85      	cbnz	r5, 8003aaa <HAL_ADC_ConfigChannel+0x26e>
 8003a48:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a4c:	4290      	cmp	r0, r2
 8003a4e:	d034      	beq.n	8003aba <HAL_ADC_ConfigChannel+0x27e>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a50:	681c      	ldr	r4, [r3, #0]
 8003a52:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003a54:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003a56:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a5a:	680a      	ldr	r2, [r1, #0]
 8003a5c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003a60:	bb85      	cbnz	r5, 8003ac4 <HAL_ADC_ConfigChannel+0x288>
 8003a62:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a66:	4290      	cmp	r0, r2
 8003a68:	f47f af78 	bne.w	800395c <HAL_ADC_ConfigChannel+0x120>
  MODIFY_REG(*preg,
 8003a6c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003a6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a72:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 8003a74:	e772      	b.n	800395c <HAL_ADC_ConfigChannel+0x120>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a76:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003a7a:	b112      	cbz	r2, 8003a82 <HAL_ADC_ConfigChannel+0x246>
  return __builtin_clz(value);
 8003a7c:	fab2 f282 	clz	r2, r2
 8003a80:	e7ca      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x1dc>
    return 32U;
 8003a82:	2220      	movs	r2, #32
 8003a84:	e7c8      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(*preg,
 8003a86:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8003a88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a8c:	6602      	str	r2, [r0, #96]	; 0x60
}
 8003a8e:	e7c5      	b.n	8003a1c <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003a94:	b112      	cbz	r2, 8003a9c <HAL_ADC_ConfigChannel+0x260>
  return __builtin_clz(value);
 8003a96:	fab2 f282 	clz	r2, r2
 8003a9a:	e7ca      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x1f6>
    return 32U;
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	e7c8      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x1f6>
  MODIFY_REG(*preg,
 8003aa0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003aa2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003aa6:	6662      	str	r2, [r4, #100]	; 0x64
}
 8003aa8:	e7c5      	b.n	8003a36 <HAL_ADC_ConfigChannel+0x1fa>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003aae:	b112      	cbz	r2, 8003ab6 <HAL_ADC_ConfigChannel+0x27a>
  return __builtin_clz(value);
 8003ab0:	fab2 f282 	clz	r2, r2
 8003ab4:	e7ca      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x210>
    return 32U;
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	e7c8      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x210>
  MODIFY_REG(*preg,
 8003aba:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8003abc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ac0:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8003ac2:	e7c5      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003ac8:	b112      	cbz	r2, 8003ad0 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8003aca:	fab2 f282 	clz	r2, r2
 8003ace:	e7ca      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x22a>
    return 32U;
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	e7c8      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x22a>
    SET_BIT(ADCx->DIFSEL,
 8003ad4:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8003ad8:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8003adc:	4320      	orrs	r0, r4
 8003ade:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 8003ae2:	e74e      	b.n	8003982 <HAL_ADC_ConfigChannel+0x146>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ae4:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ae6:	680a      	ldr	r2, [r1, #0]
 8003ae8:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003aec:	2d00      	cmp	r5, #0
 8003aee:	d138      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x326>
 8003af0:	0e90      	lsrs	r0, r2, #26
 8003af2:	3001      	adds	r0, #1
 8003af4:	f000 001f 	and.w	r0, r0, #31
 8003af8:	2809      	cmp	r0, #9
 8003afa:	bf8c      	ite	hi
 8003afc:	2000      	movhi	r0, #0
 8003afe:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d077      	beq.n	8003bf4 <HAL_ADC_ConfigChannel+0x3b8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b04:	2d00      	cmp	r5, #0
 8003b06:	d13b      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x344>
 8003b08:	0e90      	lsrs	r0, r2, #26
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	0680      	lsls	r0, r0, #26
 8003b0e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003b12:	2d00      	cmp	r5, #0
 8003b14:	d140      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x35c>
 8003b16:	0e96      	lsrs	r6, r2, #26
 8003b18:	3601      	adds	r6, #1
 8003b1a:	f006 071f 	and.w	r7, r6, #31
 8003b1e:	2601      	movs	r6, #1
 8003b20:	40be      	lsls	r6, r7
 8003b22:	4330      	orrs	r0, r6
 8003b24:	2d00      	cmp	r5, #0
 8003b26:	d145      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x378>
 8003b28:	0e92      	lsrs	r2, r2, #26
 8003b2a:	3201      	adds	r2, #1
 8003b2c:	f002 021f 	and.w	r2, r2, #31
 8003b30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003b34:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b36:	4302      	orrs	r2, r0
 8003b38:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b3a:	f104 0614 	add.w	r6, r4, #20
 8003b3e:	0e55      	lsrs	r5, r2, #25
 8003b40:	00ad      	lsls	r5, r5, #2
 8003b42:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8003b46:	5974      	ldr	r4, [r6, r5]
 8003b48:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003b4c:	f04f 0c07 	mov.w	ip, #7
 8003b50:	fa0c fc02 	lsl.w	ip, ip, r2
 8003b54:	ea24 0c0c 	bic.w	ip, r4, ip
 8003b58:	4090      	lsls	r0, r2
 8003b5a:	ea4c 0000 	orr.w	r0, ip, r0
 8003b5e:	5170      	str	r0, [r6, r5]
}
 8003b60:	e714      	b.n	800398c <HAL_ADC_ConfigChannel+0x150>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b62:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003b66:	b148      	cbz	r0, 8003b7c <HAL_ADC_ConfigChannel+0x340>
  return __builtin_clz(value);
 8003b68:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b6c:	3001      	adds	r0, #1
 8003b6e:	f000 001f 	and.w	r0, r0, #31
 8003b72:	2809      	cmp	r0, #9
 8003b74:	bf8c      	ite	hi
 8003b76:	2000      	movhi	r0, #0
 8003b78:	2001      	movls	r0, #1
 8003b7a:	e7c1      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8003b7c:	2020      	movs	r0, #32
 8003b7e:	e7f5      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x330>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003b84:	b130      	cbz	r0, 8003b94 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003b86:	fab0 f080 	clz	r0, r0
 8003b8a:	3001      	adds	r0, #1
 8003b8c:	0680      	lsls	r0, r0, #26
 8003b8e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003b92:	e7be      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x2d6>
    return 32U;
 8003b94:	2020      	movs	r0, #32
 8003b96:	e7f8      	b.n	8003b8a <HAL_ADC_ConfigChannel+0x34e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b98:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8003b9c:	b146      	cbz	r6, 8003bb0 <HAL_ADC_ConfigChannel+0x374>
  return __builtin_clz(value);
 8003b9e:	fab6 f686 	clz	r6, r6
 8003ba2:	3601      	adds	r6, #1
 8003ba4:	f006 061f 	and.w	r6, r6, #31
 8003ba8:	2701      	movs	r7, #1
 8003baa:	fa07 f606 	lsl.w	r6, r7, r6
 8003bae:	e7b8      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x2e6>
    return 32U;
 8003bb0:	2620      	movs	r6, #32
 8003bb2:	e7f6      	b.n	8003ba2 <HAL_ADC_ConfigChannel+0x366>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003bb8:	b142      	cbz	r2, 8003bcc <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003bba:	fab2 f282 	clz	r2, r2
 8003bbe:	3201      	adds	r2, #1
 8003bc0:	f002 021f 	and.w	r2, r2, #31
 8003bc4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003bc8:	0512      	lsls	r2, r2, #20
 8003bca:	e7b4      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003bcc:	2220      	movs	r2, #32
 8003bce:	e7f6      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x382>
 8003bd0:	03fff000 	.word	0x03fff000
 8003bd4:	407f0000 	.word	0x407f0000
 8003bd8:	80080000 	.word	0x80080000
 8003bdc:	50000100 	.word	0x50000100
 8003be0:	50000700 	.word	0x50000700
 8003be4:	c3210000 	.word	0xc3210000
 8003be8:	90c00010 	.word	0x90c00010
 8003bec:	c7520000 	.word	0xc7520000
 8003bf0:	cb840000 	.word	0xcb840000
 8003bf4:	b9cd      	cbnz	r5, 8003c2a <HAL_ADC_ConfigChannel+0x3ee>
 8003bf6:	0e90      	lsrs	r0, r2, #26
 8003bf8:	3001      	adds	r0, #1
 8003bfa:	0680      	lsls	r0, r0, #26
 8003bfc:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003c00:	b9fd      	cbnz	r5, 8003c42 <HAL_ADC_ConfigChannel+0x406>
 8003c02:	0e96      	lsrs	r6, r2, #26
 8003c04:	3601      	adds	r6, #1
 8003c06:	f006 071f 	and.w	r7, r6, #31
 8003c0a:	2601      	movs	r6, #1
 8003c0c:	40be      	lsls	r6, r7
 8003c0e:	4330      	orrs	r0, r6
 8003c10:	bb2d      	cbnz	r5, 8003c5e <HAL_ADC_ConfigChannel+0x422>
 8003c12:	0e92      	lsrs	r2, r2, #26
 8003c14:	3201      	adds	r2, #1
 8003c16:	f002 021f 	and.w	r2, r2, #31
 8003c1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003c1e:	3a1e      	subs	r2, #30
 8003c20:	0512      	lsls	r2, r2, #20
 8003c22:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c26:	4302      	orrs	r2, r0
 8003c28:	e786      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x2fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003c2e:	b130      	cbz	r0, 8003c3e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003c30:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c34:	3001      	adds	r0, #1
 8003c36:	0680      	lsls	r0, r0, #26
 8003c38:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003c3c:	e7e0      	b.n	8003c00 <HAL_ADC_ConfigChannel+0x3c4>
    return 32U;
 8003c3e:	2020      	movs	r0, #32
 8003c40:	e7f8      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8003c46:	b146      	cbz	r6, 8003c5a <HAL_ADC_ConfigChannel+0x41e>
  return __builtin_clz(value);
 8003c48:	fab6 f686 	clz	r6, r6
 8003c4c:	3601      	adds	r6, #1
 8003c4e:	f006 061f 	and.w	r6, r6, #31
 8003c52:	2701      	movs	r7, #1
 8003c54:	fa07 f606 	lsl.w	r6, r7, r6
 8003c58:	e7d9      	b.n	8003c0e <HAL_ADC_ConfigChannel+0x3d2>
    return 32U;
 8003c5a:	2620      	movs	r6, #32
 8003c5c:	e7f6      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x410>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003c62:	b15a      	cbz	r2, 8003c7c <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8003c64:	fab2 f282 	clz	r2, r2
 8003c68:	3201      	adds	r2, #1
 8003c6a:	f002 021f 	and.w	r2, r2, #31
 8003c6e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003c72:	3a1e      	subs	r2, #30
 8003c74:	0512      	lsls	r2, r2, #20
 8003c76:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003c7a:	e7d4      	b.n	8003c26 <HAL_ADC_ConfigChannel+0x3ea>
    return 32U;
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	e7f3      	b.n	8003c68 <HAL_ADC_ConfigChannel+0x42c>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c80:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8003c84:	e691      	b.n	80039aa <HAL_ADC_ConfigChannel+0x16e>
 8003c86:	4835      	ldr	r0, [pc, #212]	; (8003d5c <HAL_ADC_ConfigChannel+0x520>)
 8003c88:	e68f      	b.n	80039aa <HAL_ADC_ConfigChannel+0x16e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c8a:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8003c8e:	f47f ae97 	bne.w	80039c0 <HAL_ADC_ConfigChannel+0x184>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c92:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003c96:	d004      	beq.n	8003ca2 <HAL_ADC_ConfigChannel+0x466>
 8003c98:	4a31      	ldr	r2, [pc, #196]	; (8003d60 <HAL_ADC_ConfigChannel+0x524>)
 8003c9a:	4291      	cmp	r1, r2
 8003c9c:	d001      	beq.n	8003ca2 <HAL_ADC_ConfigChannel+0x466>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	e5e3      	b.n	800386a <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ca2:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003ca6:	d019      	beq.n	8003cdc <HAL_ADC_ConfigChannel+0x4a0>
 8003ca8:	4a2e      	ldr	r2, [pc, #184]	; (8003d64 <HAL_ADC_ConfigChannel+0x528>)
 8003caa:	4291      	cmp	r1, r2
 8003cac:	d014      	beq.n	8003cd8 <HAL_ADC_ConfigChannel+0x49c>
 8003cae:	492e      	ldr	r1, [pc, #184]	; (8003d68 <HAL_ADC_ConfigChannel+0x52c>)
 8003cb0:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003cb4:	688a      	ldr	r2, [r1, #8]
 8003cb6:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003cba:	4314      	orrs	r4, r2
 8003cbc:	608c      	str	r4, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cbe:	4a2b      	ldr	r2, [pc, #172]	; (8003d6c <HAL_ADC_ConfigChannel+0x530>)
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	0992      	lsrs	r2, r2, #6
 8003cc4:	492a      	ldr	r1, [pc, #168]	; (8003d70 <HAL_ADC_ConfigChannel+0x534>)
 8003cc6:	fba1 1202 	umull	r1, r2, r1, r2
 8003cca:	0992      	lsrs	r2, r2, #6
 8003ccc:	3201      	adds	r2, #1
 8003cce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003cd2:	0092      	lsls	r2, r2, #2
 8003cd4:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003cd6:	e006      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x4aa>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cd8:	4920      	ldr	r1, [pc, #128]	; (8003d5c <HAL_ADC_ConfigChannel+0x520>)
 8003cda:	e7e9      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x474>
 8003cdc:	491f      	ldr	r1, [pc, #124]	; (8003d5c <HAL_ADC_ConfigChannel+0x520>)
 8003cde:	e7e7      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x474>
            wait_loop_index--;
 8003ce0:	9a01      	ldr	r2, [sp, #4]
 8003ce2:	3a01      	subs	r2, #1
 8003ce4:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003ce6:	9a01      	ldr	r2, [sp, #4]
 8003ce8:	2a00      	cmp	r2, #0
 8003cea:	d1f9      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x4a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cec:	2000      	movs	r0, #0
 8003cee:	e5bc      	b.n	800386a <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cf0:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8003cf4:	f47f ae68 	bne.w	80039c8 <HAL_ADC_ConfigChannel+0x18c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cf8:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003cfc:	d00e      	beq.n	8003d1c <HAL_ADC_ConfigChannel+0x4e0>
 8003cfe:	4a19      	ldr	r2, [pc, #100]	; (8003d64 <HAL_ADC_ConfigChannel+0x528>)
 8003d00:	4291      	cmp	r1, r2
 8003d02:	d009      	beq.n	8003d18 <HAL_ADC_ConfigChannel+0x4dc>
 8003d04:	4918      	ldr	r1, [pc, #96]	; (8003d68 <HAL_ADC_ConfigChannel+0x52c>)
 8003d06:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 8003d0a:	688a      	ldr	r2, [r1, #8]
 8003d0c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003d10:	4314      	orrs	r4, r2
 8003d12:	608c      	str	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d14:	2000      	movs	r0, #0
}
 8003d16:	e5a8      	b.n	800386a <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d18:	4910      	ldr	r1, [pc, #64]	; (8003d5c <HAL_ADC_ConfigChannel+0x520>)
 8003d1a:	e7f4      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x4ca>
 8003d1c:	490f      	ldr	r1, [pc, #60]	; (8003d5c <HAL_ADC_ConfigChannel+0x520>)
 8003d1e:	e7f2      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x4ca>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d20:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003d24:	d113      	bne.n	8003d4e <HAL_ADC_ConfigChannel+0x512>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d26:	4a0f      	ldr	r2, [pc, #60]	; (8003d64 <HAL_ADC_ConfigChannel+0x528>)
 8003d28:	4291      	cmp	r1, r2
 8003d2a:	d012      	beq.n	8003d52 <HAL_ADC_ConfigChannel+0x516>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d2c:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003d30:	d009      	beq.n	8003d46 <HAL_ADC_ConfigChannel+0x50a>
 8003d32:	480d      	ldr	r0, [pc, #52]	; (8003d68 <HAL_ADC_ConfigChannel+0x52c>)
 8003d34:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003d38:	6881      	ldr	r1, [r0, #8]
 8003d3a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d42:	2000      	movs	r0, #0
}
 8003d44:	e591      	b.n	800386a <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d46:	4805      	ldr	r0, [pc, #20]	; (8003d5c <HAL_ADC_ConfigChannel+0x520>)
 8003d48:	e7f4      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x4f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	e58d      	b.n	800386a <HAL_ADC_ConfigChannel+0x2e>
 8003d4e:	2000      	movs	r0, #0
 8003d50:	e58b      	b.n	800386a <HAL_ADC_ConfigChannel+0x2e>
 8003d52:	2000      	movs	r0, #0
 8003d54:	e589      	b.n	800386a <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8003d56:	2002      	movs	r0, #2
 8003d58:	e58a      	b.n	8003870 <HAL_ADC_ConfigChannel+0x34>
 8003d5a:	bf00      	nop
 8003d5c:	50000300 	.word	0x50000300
 8003d60:	50000600 	.word	0x50000600
 8003d64:	50000100 	.word	0x50000100
 8003d68:	50000700 	.word	0x50000700
 8003d6c:	20000004 	.word	0x20000004
 8003d70:	053e2d63 	.word	0x053e2d63

08003d74 <ADC_Enable>:
{
 8003d74:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d76:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	f012 0f01 	tst.w	r2, #1
 8003d7e:	d140      	bne.n	8003e02 <ADC_Enable+0x8e>
 8003d80:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003d82:	6899      	ldr	r1, [r3, #8]
 8003d84:	4a20      	ldr	r2, [pc, #128]	; (8003e08 <ADC_Enable+0x94>)
 8003d86:	4211      	tst	r1, r2
 8003d88:	d009      	beq.n	8003d9e <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d8a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003d8c:	f043 0310 	orr.w	r3, r3, #16
 8003d90:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d92:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 8003d9a:	2001      	movs	r0, #1
 8003d9c:	e032      	b.n	8003e04 <ADC_Enable+0x90>
  MODIFY_REG(ADCx->CR,
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003da4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003da8:	f042 0201 	orr.w	r2, r2, #1
 8003dac:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003dae:	f7ff fb7d 	bl	80034ac <HAL_GetTick>
 8003db2:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	f012 0f01 	tst.w	r2, #1
 8003dbc:	d11f      	bne.n	8003dfe <ADC_Enable+0x8a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	f012 0f01 	tst.w	r2, #1
 8003dc4:	d107      	bne.n	8003dd6 <ADC_Enable+0x62>
  MODIFY_REG(ADCx->CR,
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003dcc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003dd0:	f042 0201 	orr.w	r2, r2, #1
 8003dd4:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dd6:	f7ff fb69 	bl	80034ac <HAL_GetTick>
 8003dda:	1b43      	subs	r3, r0, r5
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d9e9      	bls.n	8003db4 <ADC_Enable+0x40>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f013 0f01 	tst.w	r3, #1
 8003de8:	d1e4      	bne.n	8003db4 <ADC_Enable+0x40>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003dec:	f043 0310 	orr.w	r3, r3, #16
 8003df0:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8003dfa:	2001      	movs	r0, #1
 8003dfc:	e002      	b.n	8003e04 <ADC_Enable+0x90>
  return HAL_OK;
 8003dfe:	2000      	movs	r0, #0
 8003e00:	e000      	b.n	8003e04 <ADC_Enable+0x90>
 8003e02:	2000      	movs	r0, #0
}
 8003e04:	bd38      	pop	{r3, r4, r5, pc}
 8003e06:	bf00      	nop
 8003e08:	8000003f 	.word	0x8000003f

08003e0c <HAL_ADC_Start_DMA>:
{
 8003e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e10:	4604      	mov	r4, r0
 8003e12:	460f      	mov	r7, r1
 8003e14:	4690      	mov	r8, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e16:	6800      	ldr	r0, [r0, #0]
 8003e18:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003e1c:	d021      	beq.n	8003e62 <HAL_ADC_Start_DMA+0x56>
 8003e1e:	4b42      	ldr	r3, [pc, #264]	; (8003f28 <HAL_ADC_Start_DMA+0x11c>)
 8003e20:	4298      	cmp	r0, r3
 8003e22:	d01b      	beq.n	8003e5c <HAL_ADC_Start_DMA+0x50>
 8003e24:	4b41      	ldr	r3, [pc, #260]	; (8003f2c <HAL_ADC_Start_DMA+0x120>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003e26:	689e      	ldr	r6, [r3, #8]
 8003e28:	f006 061f 	and.w	r6, r6, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e2c:	6885      	ldr	r5, [r0, #8]
 8003e2e:	f015 0f04 	tst.w	r5, #4
 8003e32:	d174      	bne.n	8003f1e <HAL_ADC_Start_DMA+0x112>
    __HAL_LOCK(hadc);
 8003e34:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d073      	beq.n	8003f24 <HAL_ADC_Start_DMA+0x118>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003e42:	4b3b      	ldr	r3, [pc, #236]	; (8003f30 <HAL_ADC_Start_DMA+0x124>)
 8003e44:	4298      	cmp	r0, r3
 8003e46:	d00e      	beq.n	8003e66 <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e48:	b16e      	cbz	r6, 8003e66 <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e4a:	2e05      	cmp	r6, #5
 8003e4c:	d00b      	beq.n	8003e66 <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e4e:	2e09      	cmp	r6, #9
 8003e50:	d009      	beq.n	8003e66 <HAL_ADC_Start_DMA+0x5a>
      __HAL_UNLOCK(hadc);
 8003e52:	2300      	movs	r3, #0
 8003e54:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8003e58:	2001      	movs	r0, #1
 8003e5a:	e061      	b.n	8003f20 <HAL_ADC_Start_DMA+0x114>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e5c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003e60:	e7e1      	b.n	8003e26 <HAL_ADC_Start_DMA+0x1a>
 8003e62:	4b34      	ldr	r3, [pc, #208]	; (8003f34 <HAL_ADC_Start_DMA+0x128>)
 8003e64:	e7df      	b.n	8003e26 <HAL_ADC_Start_DMA+0x1a>
      tmp_hal_status = ADC_Enable(hadc);
 8003e66:	4620      	mov	r0, r4
 8003e68:	f7ff ff84 	bl	8003d74 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	d152      	bne.n	8003f16 <HAL_ADC_Start_DMA+0x10a>
        ADC_STATE_CLR_SET(hadc->State,
 8003e70:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e76:	f023 0301 	bic.w	r3, r3, #1
 8003e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7e:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	4a29      	ldr	r2, [pc, #164]	; (8003f28 <HAL_ADC_Start_DMA+0x11c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d040      	beq.n	8003f0a <HAL_ADC_Start_DMA+0xfe>
 8003e88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d039      	beq.n	8003f04 <HAL_ADC_Start_DMA+0xf8>
 8003e90:	461a      	mov	r2, r3
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d000      	beq.n	8003e98 <HAL_ADC_Start_DMA+0x8c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e96:	b91e      	cbnz	r6, 8003ea0 <HAL_ADC_Start_DMA+0x94>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e98:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e9e:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003ea0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003ea2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003ea6:	d033      	beq.n	8003f10 <HAL_ADC_Start_DMA+0x104>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ea8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003eaa:	f023 0306 	bic.w	r3, r3, #6
 8003eae:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003eb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003eb2:	4a21      	ldr	r2, [pc, #132]	; (8003f38 <HAL_ADC_Start_DMA+0x12c>)
 8003eb4:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003eb6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003eb8:	4a20      	ldr	r2, [pc, #128]	; (8003f3c <HAL_ADC_Start_DMA+0x130>)
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ebc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ebe:	4a20      	ldr	r2, [pc, #128]	; (8003f40 <HAL_ADC_Start_DMA+0x134>)
 8003ec0:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	221c      	movs	r2, #28
 8003ec6:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ece:	6822      	ldr	r2, [r4, #0]
 8003ed0:	6853      	ldr	r3, [r2, #4]
 8003ed2:	f043 0310 	orr.w	r3, r3, #16
 8003ed6:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003ed8:	6822      	ldr	r2, [r4, #0]
 8003eda:	68d3      	ldr	r3, [r2, #12]
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ee2:	6821      	ldr	r1, [r4, #0]
 8003ee4:	4643      	mov	r3, r8
 8003ee6:	463a      	mov	r2, r7
 8003ee8:	3140      	adds	r1, #64	; 0x40
 8003eea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003eec:	f000 fc2a 	bl	8004744 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ef0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003ef2:	6893      	ldr	r3, [r2, #8]
 8003ef4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ef8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003efc:	f043 0304 	orr.w	r3, r3, #4
 8003f00:	6093      	str	r3, [r2, #8]
}
 8003f02:	e00d      	b.n	8003f20 <HAL_ADC_Start_DMA+0x114>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f04:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003f08:	e7c3      	b.n	8003e92 <HAL_ADC_Start_DMA+0x86>
 8003f0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003f0e:	e7c0      	b.n	8003e92 <HAL_ADC_Start_DMA+0x86>
          ADC_CLEAR_ERRORCODE(hadc);
 8003f10:	2300      	movs	r3, #0
 8003f12:	6623      	str	r3, [r4, #96]	; 0x60
 8003f14:	e7cc      	b.n	8003eb0 <HAL_ADC_Start_DMA+0xa4>
        __HAL_UNLOCK(hadc);
 8003f16:	2300      	movs	r3, #0
 8003f18:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8003f1c:	e000      	b.n	8003f20 <HAL_ADC_Start_DMA+0x114>
    tmp_hal_status = HAL_BUSY;
 8003f1e:	2002      	movs	r0, #2
}
 8003f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 8003f24:	2002      	movs	r0, #2
 8003f26:	e7fb      	b.n	8003f20 <HAL_ADC_Start_DMA+0x114>
 8003f28:	50000100 	.word	0x50000100
 8003f2c:	50000700 	.word	0x50000700
 8003f30:	50000600 	.word	0x50000600
 8003f34:	50000300 	.word	0x50000300
 8003f38:	08003799 	.word	0x08003799
 8003f3c:	0800378d 	.word	0x0800378d
 8003f40:	08003821 	.word	0x08003821

08003f44 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f44:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8003f48:	2a01      	cmp	r2, #1
 8003f4a:	f000 80d6 	beq.w	80040fa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
{
 8003f4e:	b410      	push	{r4}
 8003f50:	b09d      	sub	sp, #116	; 0x74
 8003f52:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003f54:	2201      	movs	r2, #1
 8003f56:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003f5e:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f60:	6800      	ldr	r0, [r0, #0]
 8003f62:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003f66:	d047      	beq.n	8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8003f68:	4a65      	ldr	r2, [pc, #404]	; (8004100 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003f6a:	4290      	cmp	r0, r2
 8003f6c:	d047      	beq.n	8003ffe <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8003f6e:	2200      	movs	r2, #0
 8003f70:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8003f72:	9a01      	ldr	r2, [sp, #4]
 8003f74:	2a00      	cmp	r2, #0
 8003f76:	d046      	beq.n	8004006 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f78:	6892      	ldr	r2, [r2, #8]
 8003f7a:	f012 0204 	ands.w	r2, r2, #4
 8003f7e:	d000      	beq.n	8003f82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f80:	2201      	movs	r2, #1
 8003f82:	6884      	ldr	r4, [r0, #8]
 8003f84:	f014 0f04 	tst.w	r4, #4
 8003f88:	f040 80a7 	bne.w	80040da <HAL_ADCEx_MultiModeConfigChannel+0x196>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003f8c:	2a00      	cmp	r2, #0
 8003f8e:	f040 80a4 	bne.w	80040da <HAL_ADCEx_MultiModeConfigChannel+0x196>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f92:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003f96:	d042      	beq.n	800401e <HAL_ADCEx_MultiModeConfigChannel+0xda>
 8003f98:	4a5a      	ldr	r2, [pc, #360]	; (8004104 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003f9a:	4290      	cmp	r0, r2
 8003f9c:	d03c      	beq.n	8004018 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8003f9e:	4a5a      	ldr	r2, [pc, #360]	; (8004108 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fa0:	6808      	ldr	r0, [r1, #0]
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	d05c      	beq.n	8004060 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003fa6:	6890      	ldr	r0, [r2, #8]
 8003fa8:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8003fac:	684c      	ldr	r4, [r1, #4]
 8003fae:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8003fb2:	ea44 344c 	orr.w	r4, r4, ip, lsl #13
 8003fb6:	4320      	orrs	r0, r4
 8003fb8:	6090      	str	r0, [r2, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fba:	6818      	ldr	r0, [r3, #0]
 8003fbc:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003fc0:	d02f      	beq.n	8004022 <HAL_ADCEx_MultiModeConfigChannel+0xde>
 8003fc2:	4c50      	ldr	r4, [pc, #320]	; (8004104 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003fc4:	42a0      	cmp	r0, r4
 8003fc6:	d02c      	beq.n	8004022 <HAL_ADCEx_MultiModeConfigChannel+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fc8:	484d      	ldr	r0, [pc, #308]	; (8004100 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003fca:	6884      	ldr	r4, [r0, #8]
 8003fcc:	f014 0401 	ands.w	r4, r4, #1
 8003fd0:	d000      	beq.n	8003fd4 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8003fd2:	2401      	movs	r4, #1
 8003fd4:	484d      	ldr	r0, [pc, #308]	; (800410c <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8003fd6:	6880      	ldr	r0, [r0, #8]
 8003fd8:	f010 0001 	ands.w	r0, r0, #1
 8003fdc:	d000      	beq.n	8003fe0 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8003fde:	2001      	movs	r0, #1
 8003fe0:	4320      	orrs	r0, r4
 8003fe2:	4c4b      	ldr	r4, [pc, #300]	; (8004110 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003fe4:	68a4      	ldr	r4, [r4, #8]
 8003fe6:	f014 0401 	ands.w	r4, r4, #1
 8003fea:	d000      	beq.n	8003fee <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8003fec:	2401      	movs	r4, #1
 8003fee:	4320      	orrs	r0, r4
 8003ff0:	bf0c      	ite	eq
 8003ff2:	2001      	moveq	r0, #1
 8003ff4:	2000      	movne	r0, #0
 8003ff6:	e025      	b.n	8004044 <HAL_ADCEx_MultiModeConfigChannel+0x100>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003ff8:	4a42      	ldr	r2, [pc, #264]	; (8004104 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003ffa:	9201      	str	r2, [sp, #4]
 8003ffc:	e7b9      	b.n	8003f72 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8003ffe:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004002:	9201      	str	r2, [sp, #4]
 8004004:	e7b5      	b.n	8003f72 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004006:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004008:	f042 0220 	orr.w	r2, r2, #32
 800400c:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 8004014:	2001      	movs	r0, #1
 8004016:	e068      	b.n	80040ea <HAL_ADCEx_MultiModeConfigChannel+0x1a6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004018:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800401c:	e7c0      	b.n	8003fa0 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 800401e:	4a3d      	ldr	r2, [pc, #244]	; (8004114 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004020:	e7be      	b.n	8003fa0 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8004022:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004026:	6880      	ldr	r0, [r0, #8]
 8004028:	f010 0001 	ands.w	r0, r0, #1
 800402c:	d000      	beq.n	8004030 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 800402e:	2001      	movs	r0, #1
 8004030:	4c34      	ldr	r4, [pc, #208]	; (8004104 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004032:	68a4      	ldr	r4, [r4, #8]
 8004034:	f014 0401 	ands.w	r4, r4, #1
 8004038:	d000      	beq.n	800403c <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 800403a:	2401      	movs	r4, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800403c:	4320      	orrs	r0, r4
 800403e:	bf0c      	ite	eq
 8004040:	2001      	moveq	r0, #1
 8004042:	2000      	movne	r0, #0
 8004044:	2800      	cmp	r0, #0
 8004046:	d054      	beq.n	80040f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004048:	6890      	ldr	r0, [r2, #8]
 800404a:	f420 6071 	bic.w	r0, r0, #3856	; 0xf10
 800404e:	f020 000f 	bic.w	r0, r0, #15
 8004052:	680c      	ldr	r4, [r1, #0]
 8004054:	6889      	ldr	r1, [r1, #8]
 8004056:	4321      	orrs	r1, r4
 8004058:	4308      	orrs	r0, r1
 800405a:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800405c:	2000      	movs	r0, #0
 800405e:	e041      	b.n	80040e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004060:	6891      	ldr	r1, [r2, #8]
 8004062:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8004066:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004068:	6819      	ldr	r1, [r3, #0]
 800406a:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800406e:	d01a      	beq.n	80040a6 <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8004070:	4824      	ldr	r0, [pc, #144]	; (8004104 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004072:	4281      	cmp	r1, r0
 8004074:	d017      	beq.n	80040a6 <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8004076:	4922      	ldr	r1, [pc, #136]	; (8004100 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004078:	6888      	ldr	r0, [r1, #8]
 800407a:	f010 0001 	ands.w	r0, r0, #1
 800407e:	d000      	beq.n	8004082 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004080:	2001      	movs	r0, #1
 8004082:	4922      	ldr	r1, [pc, #136]	; (800410c <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8004084:	6889      	ldr	r1, [r1, #8]
 8004086:	f011 0101 	ands.w	r1, r1, #1
 800408a:	d000      	beq.n	800408e <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 800408c:	2101      	movs	r1, #1
 800408e:	4301      	orrs	r1, r0
 8004090:	481f      	ldr	r0, [pc, #124]	; (8004110 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8004092:	6880      	ldr	r0, [r0, #8]
 8004094:	f010 0001 	ands.w	r0, r0, #1
 8004098:	d000      	beq.n	800409c <HAL_ADCEx_MultiModeConfigChannel+0x158>
 800409a:	2001      	movs	r0, #1
 800409c:	4301      	orrs	r1, r0
 800409e:	bf0c      	ite	eq
 80040a0:	2101      	moveq	r1, #1
 80040a2:	2100      	movne	r1, #0
 80040a4:	e010      	b.n	80040c8 <HAL_ADCEx_MultiModeConfigChannel+0x184>
 80040a6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80040aa:	6889      	ldr	r1, [r1, #8]
 80040ac:	f011 0101 	ands.w	r1, r1, #1
 80040b0:	d000      	beq.n	80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80040b2:	2101      	movs	r1, #1
 80040b4:	4813      	ldr	r0, [pc, #76]	; (8004104 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80040b6:	6880      	ldr	r0, [r0, #8]
 80040b8:	f010 0001 	ands.w	r0, r0, #1
 80040bc:	d000      	beq.n	80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x17c>
 80040be:	2001      	movs	r0, #1
 80040c0:	4301      	orrs	r1, r0
 80040c2:	bf0c      	ite	eq
 80040c4:	2101      	moveq	r1, #1
 80040c6:	2100      	movne	r1, #0
 80040c8:	b1a9      	cbz	r1, 80040f6 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80040ca:	6891      	ldr	r1, [r2, #8]
 80040cc:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 80040d0:	f021 010f 	bic.w	r1, r1, #15
 80040d4:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040d6:	2000      	movs	r0, #0
 80040d8:	e004      	b.n	80040e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040dc:	f042 0220 	orr.w	r2, r2, #32
 80040e0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80040e2:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80040ea:	b01d      	add	sp, #116	; 0x74
 80040ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040f0:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040f2:	2000      	movs	r0, #0
 80040f4:	e7f6      	b.n	80040e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
 80040f6:	2000      	movs	r0, #0
 80040f8:	e7f4      	b.n	80040e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  __HAL_LOCK(hadc);
 80040fa:	2002      	movs	r0, #2
}
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	50000400 	.word	0x50000400
 8004104:	50000100 	.word	0x50000100
 8004108:	50000700 	.word	0x50000700
 800410c:	50000500 	.word	0x50000500
 8004110:	50000600 	.word	0x50000600
 8004114:	50000300 	.word	0x50000300

08004118 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004118:	4a07      	ldr	r2, [pc, #28]	; (8004138 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800411a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800411c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004120:	041b      	lsls	r3, r3, #16
 8004122:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004124:	0200      	lsls	r0, r0, #8
 8004126:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800412a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800412c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004134:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004136:	4770      	bx	lr
 8004138:	e000ed00 	.word	0xe000ed00

0800413c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800413c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800413e:	4b19      	ldr	r3, [pc, #100]	; (80041a4 <HAL_NVIC_SetPriority+0x68>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004146:	f1c3 0c07 	rsb	ip, r3, #7
 800414a:	f1bc 0f04 	cmp.w	ip, #4
 800414e:	bf28      	it	cs
 8004150:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004154:	f103 0e04 	add.w	lr, r3, #4
 8004158:	f1be 0f06 	cmp.w	lr, #6
 800415c:	d918      	bls.n	8004190 <HAL_NVIC_SetPriority+0x54>
 800415e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004160:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8004164:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004168:	ea21 010c 	bic.w	r1, r1, ip
 800416c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800416e:	fa0e f303 	lsl.w	r3, lr, r3
 8004172:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004176:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004178:	2800      	cmp	r0, #0
 800417a:	db0b      	blt.n	8004194 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417c:	0109      	lsls	r1, r1, #4
 800417e:	b2c9      	uxtb	r1, r1
 8004180:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004184:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004188:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800418c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004190:	2300      	movs	r3, #0
 8004192:	e7e5      	b.n	8004160 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004194:	f000 000f 	and.w	r0, r0, #15
 8004198:	0109      	lsls	r1, r1, #4
 800419a:	b2c9      	uxtb	r1, r1
 800419c:	4b02      	ldr	r3, [pc, #8]	; (80041a8 <HAL_NVIC_SetPriority+0x6c>)
 800419e:	5419      	strb	r1, [r3, r0]
 80041a0:	e7f4      	b.n	800418c <HAL_NVIC_SetPriority+0x50>
 80041a2:	bf00      	nop
 80041a4:	e000ed00 	.word	0xe000ed00
 80041a8:	e000ed14 	.word	0xe000ed14

080041ac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80041ac:	2800      	cmp	r0, #0
 80041ae:	db07      	blt.n	80041c0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041b0:	f000 021f 	and.w	r2, r0, #31
 80041b4:	0940      	lsrs	r0, r0, #5
 80041b6:	2301      	movs	r3, #1
 80041b8:	4093      	lsls	r3, r2
 80041ba:	4a02      	ldr	r2, [pc, #8]	; (80041c4 <HAL_NVIC_EnableIRQ+0x18>)
 80041bc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	e000e100 	.word	0xe000e100

080041c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041c8:	3801      	subs	r0, #1
 80041ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80041ce:	d20b      	bcs.n	80041e8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80041d4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d6:	4a05      	ldr	r2, [pc, #20]	; (80041ec <HAL_SYSTICK_Config+0x24>)
 80041d8:	21f0      	movs	r1, #240	; 0xf0
 80041da:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041de:	2000      	movs	r0, #0
 80041e0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041e2:	2207      	movs	r2, #7
 80041e4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041e6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80041e8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80041ea:	4770      	bx	lr
 80041ec:	e000ed00 	.word	0xe000ed00

080041f0 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80041f0:	2800      	cmp	r0, #0
 80041f2:	d038      	beq.n	8004266 <HAL_CRC_Init+0x76>
{
 80041f4:	b510      	push	{r4, lr}
 80041f6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80041f8:	7f43      	ldrb	r3, [r0, #29]
 80041fa:	b31b      	cbz	r3, 8004244 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80041fc:	2302      	movs	r3, #2
 80041fe:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004200:	7923      	ldrb	r3, [r4, #4]
 8004202:	bb1b      	cbnz	r3, 800424c <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	4a19      	ldr	r2, [pc, #100]	; (800426c <HAL_CRC_Init+0x7c>)
 8004208:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800420a:	6822      	ldr	r2, [r4, #0]
 800420c:	6893      	ldr	r3, [r2, #8]
 800420e:	f023 0318 	bic.w	r3, r3, #24
 8004212:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004214:	7963      	ldrb	r3, [r4, #5]
 8004216:	bb13      	cbnz	r3, 800425e <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800421e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004220:	6822      	ldr	r2, [r4, #0]
 8004222:	6893      	ldr	r3, [r2, #8]
 8004224:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004228:	6961      	ldr	r1, [r4, #20]
 800422a:	430b      	orrs	r3, r1
 800422c:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800422e:	6822      	ldr	r2, [r4, #0]
 8004230:	6893      	ldr	r3, [r2, #8]
 8004232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004236:	69a1      	ldr	r1, [r4, #24]
 8004238:	430b      	orrs	r3, r1
 800423a:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800423c:	2301      	movs	r3, #1
 800423e:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8004240:	2000      	movs	r0, #0
}
 8004242:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8004244:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8004246:	f7fd fa27 	bl	8001698 <HAL_CRC_MspInit>
 800424a:	e7d7      	b.n	80041fc <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800424c:	68e2      	ldr	r2, [r4, #12]
 800424e:	68a1      	ldr	r1, [r4, #8]
 8004250:	4620      	mov	r0, r4
 8004252:	f000 f80d 	bl	8004270 <HAL_CRCEx_Polynomial_Set>
 8004256:	2800      	cmp	r0, #0
 8004258:	d0dc      	beq.n	8004214 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 800425a:	2001      	movs	r0, #1
 800425c:	e7f1      	b.n	8004242 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800425e:	6823      	ldr	r3, [r4, #0]
 8004260:	6922      	ldr	r2, [r4, #16]
 8004262:	611a      	str	r2, [r3, #16]
 8004264:	e7dc      	b.n	8004220 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8004266:	2001      	movs	r0, #1
}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	04c11db7 	.word	0x04c11db7

08004270 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004270:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004272:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004274:	461c      	mov	r4, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b134      	cbz	r4, 8004288 <HAL_CRCEx_Polynomial_Set+0x18>
 800427a:	f003 0c1f 	and.w	ip, r3, #31
 800427e:	fa21 fc0c 	lsr.w	ip, r1, ip
 8004282:	f01c 0f01 	tst.w	ip, #1
 8004286:	d0f5      	beq.n	8004274 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8004288:	2a18      	cmp	r2, #24
 800428a:	d822      	bhi.n	80042d2 <HAL_CRCEx_Polynomial_Set+0x62>
 800428c:	e8df f002 	tbb	[pc, r2]
 8004290:	2121210f 	.word	0x2121210f
 8004294:	21212121 	.word	0x21212121
 8004298:	2121211d 	.word	0x2121211d
 800429c:	21212121 	.word	0x21212121
 80042a0:	21212119 	.word	0x21212119
 80042a4:	21212121 	.word	0x21212121
 80042a8:	0d          	.byte	0x0d
 80042a9:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80042aa:	2b06      	cmp	r3, #6
 80042ac:	d815      	bhi.n	80042da <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80042ae:	6803      	ldr	r3, [r0, #0]
 80042b0:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80042b2:	6801      	ldr	r1, [r0, #0]
 80042b4:	688b      	ldr	r3, [r1, #8]
 80042b6:	f023 0318 	bic.w	r3, r3, #24
 80042ba:	431a      	orrs	r2, r3
 80042bc:	608a      	str	r2, [r1, #8]
 80042be:	2000      	movs	r0, #0
 80042c0:	e008      	b.n	80042d4 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 80042c2:	2b07      	cmp	r3, #7
 80042c4:	d9f3      	bls.n	80042ae <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 80042c6:	2001      	movs	r0, #1
 80042c8:	e004      	b.n	80042d4 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 80042ca:	2b0f      	cmp	r3, #15
 80042cc:	d9ef      	bls.n	80042ae <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 80042ce:	2001      	movs	r0, #1
 80042d0:	e000      	b.n	80042d4 <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 80042d2:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 80042d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042d8:	4770      	bx	lr
        status =   HAL_ERROR;
 80042da:	2001      	movs	r0, #1
 80042dc:	e7fa      	b.n	80042d4 <HAL_CRCEx_Polynomial_Set+0x64>

080042de <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80042de:	b170      	cbz	r0, 80042fe <HAL_DAC_Init+0x20>
{
 80042e0:	b510      	push	{r4, lr}
 80042e2:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80042e4:	7903      	ldrb	r3, [r0, #4]
 80042e6:	b133      	cbz	r3, 80042f6 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80042e8:	2302      	movs	r3, #2
 80042ea:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80042ec:	2000      	movs	r0, #0
 80042ee:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80042f0:	2301      	movs	r3, #1
 80042f2:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 80042f4:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80042f6:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80042f8:	f7fd fa40 	bl	800177c <HAL_DAC_MspInit>
 80042fc:	e7f4      	b.n	80042e8 <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 80042fe:	2001      	movs	r0, #1
}
 8004300:	4770      	bx	lr
	...

08004304 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004304:	7943      	ldrb	r3, [r0, #5]
 8004306:	2b01      	cmp	r3, #1
 8004308:	f000 80f4 	beq.w	80044f4 <HAL_DAC_ConfigChannel+0x1f0>
{
 800430c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004310:	4604      	mov	r4, r0
 8004312:	460e      	mov	r6, r1
 8004314:	4615      	mov	r5, r2
  __HAL_LOCK(hdac);
 8004316:	2301      	movs	r3, #1
 8004318:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800431a:	2302      	movs	r3, #2
 800431c:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800431e:	688b      	ldr	r3, [r1, #8]
 8004320:	2b04      	cmp	r3, #4
 8004322:	d017      	beq.n	8004354 <HAL_DAC_ConfigChannel+0x50>
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004324:	69f3      	ldr	r3, [r6, #28]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d05e      	beq.n	80043e8 <HAL_DAC_ConfigChannel+0xe4>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800432e:	f005 0510 	and.w	r5, r5, #16
 8004332:	2307      	movs	r3, #7
 8004334:	40ab      	lsls	r3, r5
 8004336:	ea27 0703 	bic.w	r7, r7, r3
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800433a:	69b3      	ldr	r3, [r6, #24]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d060      	beq.n	8004402 <HAL_DAC_ConfigChannel+0xfe>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004340:	2b02      	cmp	r3, #2
 8004342:	f000 80bd 	beq.w	80044c0 <HAL_DAC_ConfigChannel+0x1bc>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004346:	6973      	ldr	r3, [r6, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	f040 80bc 	bne.w	80044c6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800434e:	f04f 0801 	mov.w	r8, #1
 8004352:	e058      	b.n	8004406 <HAL_DAC_ConfigChannel+0x102>
    tickstart = HAL_GetTick();
 8004354:	f7ff f8aa 	bl	80034ac <HAL_GetTick>
 8004358:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 800435a:	b17d      	cbz	r5, 800437c <HAL_DAC_ConfigChannel+0x78>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004360:	2b00      	cmp	r3, #0
 8004362:	da3a      	bge.n	80043da <HAL_DAC_ConfigChannel+0xd6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004364:	f7ff f8a2 	bl	80034ac <HAL_GetTick>
 8004368:	1bc0      	subs	r0, r0, r7
 800436a:	2801      	cmp	r0, #1
 800436c:	d9f6      	bls.n	800435c <HAL_DAC_ConfigChannel+0x58>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800436e:	6923      	ldr	r3, [r4, #16]
 8004370:	f043 0308 	orr.w	r3, r3, #8
 8004374:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004376:	2003      	movs	r0, #3
 8004378:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 800437a:	e09f      	b.n	80044bc <HAL_DAC_ConfigChannel+0x1b8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004380:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004384:	d00b      	beq.n	800439e <HAL_DAC_ConfigChannel+0x9a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004386:	f7ff f891 	bl	80034ac <HAL_GetTick>
 800438a:	1bc0      	subs	r0, r0, r7
 800438c:	2801      	cmp	r0, #1
 800438e:	d9f5      	bls.n	800437c <HAL_DAC_ConfigChannel+0x78>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004390:	6923      	ldr	r3, [r4, #16]
 8004392:	f043 0308 	orr.w	r3, r3, #8
 8004396:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004398:	2003      	movs	r0, #3
 800439a:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 800439c:	e08e      	b.n	80044bc <HAL_DAC_ConfigChannel+0x1b8>
      HAL_Delay(1);
 800439e:	2001      	movs	r0, #1
 80043a0:	f7ff f88a 	bl	80034b8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80043aa:	6820      	ldr	r0, [r4, #0]
 80043ac:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80043ae:	f005 0110 	and.w	r1, r5, #16
 80043b2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80043b6:	408b      	lsls	r3, r1
 80043b8:	ea22 0203 	bic.w	r2, r2, r3
 80043bc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80043be:	408b      	lsls	r3, r1
 80043c0:	431a      	orrs	r2, r3
 80043c2:	6482      	str	r2, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80043c4:	6820      	ldr	r0, [r4, #0]
 80043c6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80043c8:	22ff      	movs	r2, #255	; 0xff
 80043ca:	408a      	lsls	r2, r1
 80043cc:	ea23 0302 	bic.w	r3, r3, r2
 80043d0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80043d2:	408a      	lsls	r2, r1
 80043d4:	4313      	orrs	r3, r2
 80043d6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80043d8:	e7a4      	b.n	8004324 <HAL_DAC_ConfigChannel+0x20>
      HAL_Delay(1U);
 80043da:	2001      	movs	r0, #1
 80043dc:	f7ff f86c 	bl	80034b8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80043e4:	645a      	str	r2, [r3, #68]	; 0x44
 80043e6:	e7e0      	b.n	80043aa <HAL_DAC_ConfigChannel+0xa6>
    tmpreg1 = hdac->Instance->CCR;
 80043e8:	6821      	ldr	r1, [r4, #0]
 80043ea:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80043ec:	f005 0010 	and.w	r0, r5, #16
 80043f0:	231f      	movs	r3, #31
 80043f2:	4083      	lsls	r3, r0
 80043f4:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80043f8:	6a33      	ldr	r3, [r6, #32]
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043fa:	4083      	lsls	r3, r0
 80043fc:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 80043fe:	638b      	str	r3, [r1, #56]	; 0x38
 8004400:	e793      	b.n	800432a <HAL_DAC_ConfigChannel+0x26>
    connectOnChip = 0x00000000UL;
 8004402:	f04f 0800 	mov.w	r8, #0
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004406:	68b3      	ldr	r3, [r6, #8]
 8004408:	6972      	ldr	r2, [r6, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	ea43 0308 	orr.w	r3, r3, r8
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004410:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004414:	40aa      	lsls	r2, r5
 8004416:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800441a:	7932      	ldrb	r2, [r6, #4]
 800441c:	2a01      	cmp	r2, #1
 800441e:	d055      	beq.n	80044cc <HAL_DAC_ConfigChannel+0x1c8>
 8004420:	f04f 0800 	mov.w	r8, #0
 8004424:	ea48 0303 	orr.w	r3, r8, r3
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800442c:	40aa      	lsls	r2, r5
 800442e:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004432:	7972      	ldrb	r2, [r6, #5]
 8004434:	2a01      	cmp	r2, #1
 8004436:	d04c      	beq.n	80044d2 <HAL_DAC_ConfigChannel+0x1ce>
 8004438:	f04f 0800 	mov.w	r8, #0
 800443c:	ea48 0803 	orr.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004440:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004444:	6833      	ldr	r3, [r6, #0]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d046      	beq.n	80044d8 <HAL_DAC_ConfigChannel+0x1d4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800444a:	431f      	orrs	r7, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800444c:	fa08 f805 	lsl.w	r8, r8, r5
 8004450:	ea48 0707 	orr.w	r7, r8, r7
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004458:	6821      	ldr	r1, [r4, #0]
 800445a:	680b      	ldr	r3, [r1, #0]
 800445c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004460:	40aa      	lsls	r2, r5
 8004462:	ea23 0302 	bic.w	r3, r3, r2
 8004466:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004468:	6821      	ldr	r1, [r4, #0]
 800446a:	680b      	ldr	r3, [r1, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800446c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004470:	40aa      	lsls	r2, r5
 8004472:	ea23 0202 	bic.w	r2, r3, r2
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004476:	68f3      	ldr	r3, [r6, #12]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004478:	40ab      	lsls	r3, r5
 800447a:	4313      	orrs	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800447c:	600b      	str	r3, [r1, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800447e:	6821      	ldr	r1, [r4, #0]
 8004480:	680b      	ldr	r3, [r1, #0]
 8004482:	22c0      	movs	r2, #192	; 0xc0
 8004484:	40aa      	lsls	r2, r5
 8004486:	ea23 0302 	bic.w	r3, r3, r2
 800448a:	600b      	str	r3, [r1, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800448c:	68f2      	ldr	r2, [r6, #12]
 800448e:	f3c2 0383 	ubfx	r3, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004492:	6932      	ldr	r2, [r6, #16]
 8004494:	0892      	lsrs	r2, r2, #2
 8004496:	0212      	lsls	r2, r2, #8
 8004498:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800449c:	431a      	orrs	r2, r3
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800449e:	6820      	ldr	r0, [r4, #0]
 80044a0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80044a2:	f640 710f 	movw	r1, #3855	; 0xf0f
 80044a6:	40a9      	lsls	r1, r5
 80044a8:	ea23 0301 	bic.w	r3, r3, r1
 80044ac:	fa02 f505 	lsl.w	r5, r2, r5
 80044b0:	431d      	orrs	r5, r3
 80044b2:	6605      	str	r5, [r0, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80044b4:	2301      	movs	r3, #1
 80044b6:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80044b8:	2000      	movs	r0, #0
 80044ba:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 80044bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 80044c0:	f04f 0801 	mov.w	r8, #1
 80044c4:	e79f      	b.n	8004406 <HAL_DAC_ConfigChannel+0x102>
      connectOnChip = 0x00000000UL;
 80044c6:	f04f 0800 	mov.w	r8, #0
 80044ca:	e79c      	b.n	8004406 <HAL_DAC_ConfigChannel+0x102>
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80044cc:	f44f 7880 	mov.w	r8, #256	; 0x100
 80044d0:	e7a8      	b.n	8004424 <HAL_DAC_ConfigChannel+0x120>
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80044d2:	f44f 7800 	mov.w	r8, #512	; 0x200
 80044d6:	e7b1      	b.n	800443c <HAL_DAC_ConfigChannel+0x138>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80044d8:	f002 fd3a 	bl	8006f50 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <HAL_DAC_ConfigChannel+0x1f4>)
 80044de:	4298      	cmp	r0, r3
 80044e0:	d902      	bls.n	80044e8 <HAL_DAC_ConfigChannel+0x1e4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80044e2:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 80044e6:	e7b1      	b.n	800444c <HAL_DAC_ConfigChannel+0x148>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80044e8:	4b04      	ldr	r3, [pc, #16]	; (80044fc <HAL_DAC_ConfigChannel+0x1f8>)
 80044ea:	4298      	cmp	r0, r3
 80044ec:	d9ae      	bls.n	800444c <HAL_DAC_ConfigChannel+0x148>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80044ee:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80044f2:	e7ab      	b.n	800444c <HAL_DAC_ConfigChannel+0x148>
  __HAL_LOCK(hdac);
 80044f4:	2002      	movs	r0, #2
}
 80044f6:	4770      	bx	lr
 80044f8:	09896800 	.word	0x09896800
 80044fc:	04c4b400 	.word	0x04c4b400

08004500 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004500:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004502:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8004504:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8004506:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004508:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800450a:	b114      	cbz	r4, 8004512 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800450c:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800450e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8004510:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004512:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004514:	f004 0c1f 	and.w	ip, r4, #31
 8004518:	2401      	movs	r4, #1
 800451a:	fa04 f40c 	lsl.w	r4, r4, ip
 800451e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004520:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004522:	6804      	ldr	r4, [r0, #0]
 8004524:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004526:	6883      	ldr	r3, [r0, #8]
 8004528:	2b10      	cmp	r3, #16
 800452a:	d005      	beq.n	8004538 <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800452c:	6803      	ldr	r3, [r0, #0]
 800452e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004530:	6803      	ldr	r3, [r0, #0]
 8004532:	60da      	str	r2, [r3, #12]
  }
}
 8004534:	bc30      	pop	{r4, r5}
 8004536:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8004538:	6803      	ldr	r3, [r0, #0]
 800453a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800453c:	6803      	ldr	r3, [r0, #0]
 800453e:	60d9      	str	r1, [r3, #12]
 8004540:	e7f8      	b.n	8004534 <DMA_SetConfig+0x34>
	...

08004544 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004544:	6803      	ldr	r3, [r0, #0]
 8004546:	4a0c      	ldr	r2, [pc, #48]	; (8004578 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d813      	bhi.n	8004574 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800454c:	490b      	ldr	r1, [pc, #44]	; (800457c <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800454e:	b2db      	uxtb	r3, r3
 8004550:	3b08      	subs	r3, #8
 8004552:	4a0b      	ldr	r2, [pc, #44]	; (8004580 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004558:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800455a:	f022 0203 	bic.w	r2, r2, #3
 800455e:	440a      	add	r2, r1
 8004560:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004562:	4a08      	ldr	r2, [pc, #32]	; (8004584 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8004564:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004566:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800456a:	2201      	movs	r2, #1
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	6503      	str	r3, [r0, #80]	; 0x50
}
 8004572:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004574:	4904      	ldr	r1, [pc, #16]	; (8004588 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8004576:	e7ea      	b.n	800454e <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 8004578:	40020407 	.word	0x40020407
 800457c:	40020800 	.word	0x40020800
 8004580:	cccccccd 	.word	0xcccccccd
 8004584:	40020880 	.word	0x40020880
 8004588:	40020820 	.word	0x40020820

0800458c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800458c:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800458e:	4a07      	ldr	r2, [pc, #28]	; (80045ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8004590:	441a      	add	r2, r3
 8004592:	0092      	lsls	r2, r2, #2
 8004594:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004596:	4a06      	ldr	r2, [pc, #24]	; (80045b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8004598:	6582      	str	r2, [r0, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800459a:	3b01      	subs	r3, #1
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	2201      	movs	r2, #1
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	1000823f 	.word	0x1000823f
 80045b0:	40020940 	.word	0x40020940

080045b4 <HAL_DMA_Init>:
  if (hdma == NULL)
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d05b      	beq.n	8004670 <HAL_DMA_Init+0xbc>
{
 80045b8:	b510      	push	{r4, lr}
 80045ba:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80045bc:	6801      	ldr	r1, [r0, #0]
 80045be:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <HAL_DMA_Init+0xc0>)
 80045c0:	4299      	cmp	r1, r3
 80045c2:	d83d      	bhi.n	8004640 <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80045c4:	4b2c      	ldr	r3, [pc, #176]	; (8004678 <HAL_DMA_Init+0xc4>)
 80045c6:	440b      	add	r3, r1
 80045c8:	4a2c      	ldr	r2, [pc, #176]	; (800467c <HAL_DMA_Init+0xc8>)
 80045ca:	fba2 2303 	umull	r2, r3, r2, r3
 80045ce:	091b      	lsrs	r3, r3, #4
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80045d4:	4b2a      	ldr	r3, [pc, #168]	; (8004680 <HAL_DMA_Init+0xcc>)
 80045d6:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80045d8:	2302      	movs	r3, #2
 80045da:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 80045de:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80045e0:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80045e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 80045e8:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ea:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 80045ec:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ee:	6920      	ldr	r0, [r4, #16]
 80045f0:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045f2:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045f4:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045f6:	69a0      	ldr	r0, [r4, #24]
 80045f8:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80045fa:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045fc:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80045fe:	6a20      	ldr	r0, [r4, #32]
 8004600:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8004602:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8004604:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004606:	4620      	mov	r0, r4
 8004608:	f7ff ff9c 	bl	8004544 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800460c:	68a3      	ldr	r3, [r4, #8]
 800460e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004612:	d020      	beq.n	8004656 <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004614:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004616:	7922      	ldrb	r2, [r4, #4]
 8004618:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800461a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800461c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800461e:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004620:	6863      	ldr	r3, [r4, #4]
 8004622:	3b01      	subs	r3, #1
 8004624:	2b03      	cmp	r3, #3
 8004626:	d919      	bls.n	800465c <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800462c:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800462e:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004630:	2000      	movs	r0, #0
 8004632:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8004634:	2301      	movs	r3, #1
 8004636:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 800463a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800463e:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004640:	4b10      	ldr	r3, [pc, #64]	; (8004684 <HAL_DMA_Init+0xd0>)
 8004642:	440b      	add	r3, r1
 8004644:	4a0d      	ldr	r2, [pc, #52]	; (800467c <HAL_DMA_Init+0xc8>)
 8004646:	fba2 2303 	umull	r2, r3, r2, r3
 800464a:	091b      	lsrs	r3, r3, #4
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004650:	4b0d      	ldr	r3, [pc, #52]	; (8004688 <HAL_DMA_Init+0xd4>)
 8004652:	6403      	str	r3, [r0, #64]	; 0x40
 8004654:	e7c0      	b.n	80045d8 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004656:	2300      	movs	r3, #0
 8004658:	6063      	str	r3, [r4, #4]
 800465a:	e7db      	b.n	8004614 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800465c:	4620      	mov	r0, r4
 800465e:	f7ff ff95 	bl	800458c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004662:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004668:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800466a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800466c:	605a      	str	r2, [r3, #4]
 800466e:	e7df      	b.n	8004630 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8004670:	2001      	movs	r0, #1
}
 8004672:	4770      	bx	lr
 8004674:	40020407 	.word	0x40020407
 8004678:	bffdfff8 	.word	0xbffdfff8
 800467c:	cccccccd 	.word	0xcccccccd
 8004680:	40020000 	.word	0x40020000
 8004684:	bffdfbf8 	.word	0xbffdfbf8
 8004688:	40020400 	.word	0x40020400

0800468c <HAL_DMA_DeInit>:
  if (NULL == hdma)
 800468c:	2800      	cmp	r0, #0
 800468e:	d04b      	beq.n	8004728 <HAL_DMA_DeInit+0x9c>
{
 8004690:	b538      	push	{r3, r4, r5, lr}
 8004692:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8004694:	6802      	ldr	r2, [r0, #0]
 8004696:	6813      	ldr	r3, [r2, #0]
 8004698:	f023 0301 	bic.w	r3, r3, #1
 800469c:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800469e:	6802      	ldr	r2, [r0, #0]
 80046a0:	4b22      	ldr	r3, [pc, #136]	; (800472c <HAL_DMA_DeInit+0xa0>)
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d82c      	bhi.n	8004700 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80046a6:	4b22      	ldr	r3, [pc, #136]	; (8004730 <HAL_DMA_DeInit+0xa4>)
 80046a8:	4413      	add	r3, r2
 80046aa:	4922      	ldr	r1, [pc, #136]	; (8004734 <HAL_DMA_DeInit+0xa8>)
 80046ac:	fba1 1303 	umull	r1, r3, r1, r3
 80046b0:	091b      	lsrs	r3, r3, #4
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80046b6:	4b20      	ldr	r3, [pc, #128]	; (8004738 <HAL_DMA_DeInit+0xac>)
 80046b8:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR  = 0;
 80046ba:	2500      	movs	r5, #0
 80046bc:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80046c0:	f003 021f 	and.w	r2, r3, #31
 80046c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80046c6:	2301      	movs	r3, #1
 80046c8:	4093      	lsls	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046cc:	4620      	mov	r0, r4
 80046ce:	f7ff ff39 	bl	8004544 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0;
 80046d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80046d4:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80046d8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80046da:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80046dc:	6863      	ldr	r3, [r4, #4]
 80046de:	3b01      	subs	r3, #1
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d918      	bls.n	8004716 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 80046e4:	2000      	movs	r0, #0
 80046e6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80046e8:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80046ea:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 80046ec:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80046ee:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80046f0:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80046f2:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046f4:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80046f6:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80046fa:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80046fe:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004700:	4b0e      	ldr	r3, [pc, #56]	; (800473c <HAL_DMA_DeInit+0xb0>)
 8004702:	4413      	add	r3, r2
 8004704:	490b      	ldr	r1, [pc, #44]	; (8004734 <HAL_DMA_DeInit+0xa8>)
 8004706:	fba1 1303 	umull	r1, r3, r1, r3
 800470a:	091b      	lsrs	r3, r3, #4
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004710:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <HAL_DMA_DeInit+0xb4>)
 8004712:	6403      	str	r3, [r0, #64]	; 0x40
 8004714:	e7d1      	b.n	80046ba <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004716:	4620      	mov	r0, r4
 8004718:	f7ff ff38 	bl	800458c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800471c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800471e:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004720:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004722:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004724:	605a      	str	r2, [r3, #4]
 8004726:	e7dd      	b.n	80046e4 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8004728:	2001      	movs	r0, #1
}
 800472a:	4770      	bx	lr
 800472c:	40020407 	.word	0x40020407
 8004730:	bffdfff8 	.word	0xbffdfff8
 8004734:	cccccccd 	.word	0xcccccccd
 8004738:	40020000 	.word	0x40020000
 800473c:	bffdfbf8 	.word	0xbffdfbf8
 8004740:	40020400 	.word	0x40020400

08004744 <HAL_DMA_Start_IT>:
{
 8004744:	b538      	push	{r3, r4, r5, lr}
 8004746:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004748:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 800474c:	2801      	cmp	r0, #1
 800474e:	d041      	beq.n	80047d4 <HAL_DMA_Start_IT+0x90>
 8004750:	2001      	movs	r0, #1
 8004752:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8004756:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800475a:	b2c0      	uxtb	r0, r0
 800475c:	2801      	cmp	r0, #1
 800475e:	d004      	beq.n	800476a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8004760:	2300      	movs	r3, #0
 8004762:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8004766:	2002      	movs	r0, #2
}
 8004768:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800476a:	2002      	movs	r0, #2
 800476c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004770:	2000      	movs	r0, #0
 8004772:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004774:	6825      	ldr	r5, [r4, #0]
 8004776:	6828      	ldr	r0, [r5, #0]
 8004778:	f020 0001 	bic.w	r0, r0, #1
 800477c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800477e:	4620      	mov	r0, r4
 8004780:	f7ff febe 	bl	8004500 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004784:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004786:	b1d3      	cbz	r3, 80047be <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004788:	6822      	ldr	r2, [r4, #0]
 800478a:	6813      	ldr	r3, [r2, #0]
 800478c:	f043 030e 	orr.w	r3, r3, #14
 8004790:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004792:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800479a:	d003      	beq.n	80047a4 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047a2:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80047a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80047a6:	b11b      	cbz	r3, 80047b0 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ae:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80047b0:	6822      	ldr	r2, [r4, #0]
 80047b2:	6813      	ldr	r3, [r2, #0]
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ba:	2000      	movs	r0, #0
 80047bc:	e7d4      	b.n	8004768 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047be:	6822      	ldr	r2, [r4, #0]
 80047c0:	6813      	ldr	r3, [r2, #0]
 80047c2:	f023 0304 	bic.w	r3, r3, #4
 80047c6:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047c8:	6822      	ldr	r2, [r4, #0]
 80047ca:	6813      	ldr	r3, [r2, #0]
 80047cc:	f043 030a 	orr.w	r3, r3, #10
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	e7de      	b.n	8004792 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80047d4:	2002      	movs	r0, #2
 80047d6:	e7c7      	b.n	8004768 <HAL_DMA_Start_IT+0x24>

080047d8 <HAL_DMA_Abort_IT>:
{
 80047d8:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80047da:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d009      	beq.n	80047f8 <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047e4:	2304      	movs	r3, #4
 80047e6:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80047e8:	2301      	movs	r3, #1
 80047ea:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80047ee:	2200      	movs	r2, #0
 80047f0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    status = HAL_ERROR;
 80047f4:	4618      	mov	r0, r3
}
 80047f6:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047f8:	6802      	ldr	r2, [r0, #0]
 80047fa:	6813      	ldr	r3, [r2, #0]
 80047fc:	f023 030e 	bic.w	r3, r3, #14
 8004800:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004802:	6802      	ldr	r2, [r0, #0]
 8004804:	6813      	ldr	r3, [r2, #0]
 8004806:	f023 0301 	bic.w	r3, r3, #1
 800480a:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800480c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800480e:	6813      	ldr	r3, [r2, #0]
 8004810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004814:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004816:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004818:	f003 021f 	and.w	r2, r3, #31
 800481c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800481e:	2301      	movs	r3, #1
 8004820:	4093      	lsls	r3, r2
 8004822:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004824:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004826:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004828:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800482a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800482c:	b133      	cbz	r3, 800483c <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004834:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004836:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004838:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800483a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800483c:	2301      	movs	r3, #1
 800483e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004842:	2300      	movs	r3, #0
 8004844:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8004848:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800484a:	b113      	cbz	r3, 8004852 <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 800484c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800484e:	2000      	movs	r0, #0
 8004850:	e7d1      	b.n	80047f6 <HAL_DMA_Abort_IT+0x1e>
 8004852:	2000      	movs	r0, #0
 8004854:	e7cf      	b.n	80047f6 <HAL_DMA_Abort_IT+0x1e>

08004856 <HAL_DMA_IRQHandler>:
{
 8004856:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004858:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800485a:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800485c:	6804      	ldr	r4, [r0, #0]
 800485e:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004860:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004862:	f003 031f 	and.w	r3, r3, #31
 8004866:	2204      	movs	r2, #4
 8004868:	409a      	lsls	r2, r3
 800486a:	420a      	tst	r2, r1
 800486c:	d015      	beq.n	800489a <HAL_DMA_IRQHandler+0x44>
 800486e:	f015 0f04 	tst.w	r5, #4
 8004872:	d012      	beq.n	800489a <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	f013 0f20 	tst.w	r3, #32
 800487a:	d103      	bne.n	8004884 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	f023 0304 	bic.w	r3, r3, #4
 8004882:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004884:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004886:	f003 021f 	and.w	r2, r3, #31
 800488a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800488c:	2304      	movs	r3, #4
 800488e:	4093      	lsls	r3, r2
 8004890:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8004892:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004894:	b103      	cbz	r3, 8004898 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8004896:	4798      	blx	r3
}
 8004898:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800489a:	2202      	movs	r2, #2
 800489c:	409a      	lsls	r2, r3
 800489e:	420a      	tst	r2, r1
 80048a0:	d01c      	beq.n	80048dc <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 80048a2:	f015 0f02 	tst.w	r5, #2
 80048a6:	d019      	beq.n	80048dc <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	f013 0f20 	tst.w	r3, #32
 80048ae:	d106      	bne.n	80048be <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	f023 030a 	bic.w	r3, r3, #10
 80048b6:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80048b8:	2301      	movs	r3, #1
 80048ba:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80048be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048c0:	f003 021f 	and.w	r2, r3, #31
 80048c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80048c6:	2302      	movs	r3, #2
 80048c8:	4093      	lsls	r3, r2
 80048ca:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 80048cc:	2300      	movs	r3, #0
 80048ce:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 80048d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0df      	beq.n	8004898 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 80048d8:	4798      	blx	r3
 80048da:	e7dd      	b.n	8004898 <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80048dc:	2208      	movs	r2, #8
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	420b      	tst	r3, r1
 80048e4:	d0d8      	beq.n	8004898 <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 80048e6:	f015 0f08 	tst.w	r5, #8
 80048ea:	d0d5      	beq.n	8004898 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	f023 030e 	bic.w	r3, r3, #14
 80048f2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80048f4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80048fc:	2201      	movs	r2, #1
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004904:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004906:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800490a:	2300      	movs	r3, #0
 800490c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004910:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0c0      	beq.n	8004898 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004916:	4798      	blx	r3
  return;
 8004918:	e7be      	b.n	8004898 <HAL_DMA_IRQHandler+0x42>

0800491a <HAL_DMA_GetState>:
  return hdma->State;
 800491a:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 800491e:	4770      	bx	lr

08004920 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004920:	b410      	push	{r4}
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004922:	6802      	ldr	r2, [r0, #0]
 8004924:	4b1d      	ldr	r3, [pc, #116]	; (800499c <FDCAN_CalcultateRamBlockAddresses+0x7c>)
 8004926:	429a      	cmp	r2, r3
 8004928:	d028      	beq.n	800497c <FDCAN_CalcultateRamBlockAddresses+0x5c>
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800492a:	491d      	ldr	r1, [pc, #116]	; (80049a0 <FDCAN_CalcultateRamBlockAddresses+0x80>)
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800492c:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <FDCAN_CalcultateRamBlockAddresses+0x84>)
 800492e:	429a      	cmp	r2, r3
 8004930:	d026      	beq.n	8004980 <FDCAN_CalcultateRamBlockAddresses+0x60>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004932:	6401      	str	r1, [r0, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004934:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004938:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800493c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800493e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004942:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004946:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800494a:	6443      	str	r3, [r0, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800494c:	6802      	ldr	r2, [r0, #0]
 800494e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004952:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004956:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004958:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 800495c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004960:	f101 03b0 	add.w	r3, r1, #176	; 0xb0
 8004964:	6483      	str	r3, [r0, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004966:	f501 73c4 	add.w	r3, r1, #392	; 0x188
 800496a:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800496c:	f501 7318 	add.w	r3, r1, #608	; 0x260
 8004970:	6503      	str	r3, [r0, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004972:	f501 731e 	add.w	r3, r1, #632	; 0x278
 8004976:	6543      	str	r3, [r0, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004978:	460b      	mov	r3, r1
 800497a:	e007      	b.n	800498c <FDCAN_CalcultateRamBlockAddresses+0x6c>
    SramCanInstanceBase += SRAMCAN_SIZE;
 800497c:	490a      	ldr	r1, [pc, #40]	; (80049a8 <FDCAN_CalcultateRamBlockAddresses+0x88>)
 800497e:	e7d5      	b.n	800492c <FDCAN_CalcultateRamBlockAddresses+0xc>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004980:	f501 61d4 	add.w	r1, r1, #1696	; 0x6a0
 8004984:	e7d5      	b.n	8004932 <FDCAN_CalcultateRamBlockAddresses+0x12>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004986:	2200      	movs	r2, #0
 8004988:	f843 2b04 	str.w	r2, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800498c:	f501 7254 	add.w	r2, r1, #848	; 0x350
 8004990:	429a      	cmp	r2, r3
 8004992:	d8f8      	bhi.n	8004986 <FDCAN_CalcultateRamBlockAddresses+0x66>
  }
}
 8004994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40006800 	.word	0x40006800
 80049a0:	4000a400 	.word	0x4000a400
 80049a4:	40006c00 	.word	0x40006c00
 80049a8:	4000a750 	.word	0x4000a750

080049ac <HAL_FDCAN_Init>:
  if (hfdcan == NULL)
 80049ac:	2800      	cmp	r0, #0
 80049ae:	f000 80e3 	beq.w	8004b78 <HAL_FDCAN_Init+0x1cc>
{
 80049b2:	b538      	push	{r3, r4, r5, lr}
 80049b4:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80049b6:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80049ba:	b1d3      	cbz	r3, 80049f2 <HAL_FDCAN_Init+0x46>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80049bc:	6822      	ldr	r2, [r4, #0]
 80049be:	6993      	ldr	r3, [r2, #24]
 80049c0:	f023 0310 	bic.w	r3, r3, #16
 80049c4:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 80049c6:	f7fe fd71 	bl	80034ac <HAL_GetTick>
 80049ca:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80049cc:	6823      	ldr	r3, [r4, #0]
 80049ce:	699a      	ldr	r2, [r3, #24]
 80049d0:	f012 0f08 	tst.w	r2, #8
 80049d4:	d012      	beq.n	80049fc <HAL_FDCAN_Init+0x50>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80049d6:	f7fe fd69 	bl	80034ac <HAL_GetTick>
 80049da:	1b40      	subs	r0, r0, r5
 80049dc:	280a      	cmp	r0, #10
 80049de:	d9f5      	bls.n	80049cc <HAL_FDCAN_Init+0x20>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80049e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80049e8:	2303      	movs	r3, #3
 80049ea:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80049ee:	2001      	movs	r0, #1
}
 80049f0:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 80049f2:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 80049f6:	f7fc ffa3 	bl	8001940 <HAL_FDCAN_MspInit>
 80049fa:	e7df      	b.n	80049bc <HAL_FDCAN_Init+0x10>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80049fc:	699a      	ldr	r2, [r3, #24]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8004a04:	f7fe fd52 	bl	80034ac <HAL_GetTick>
 8004a08:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	f012 0f01 	tst.w	r2, #1
 8004a12:	d10d      	bne.n	8004a30 <HAL_FDCAN_Init+0x84>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004a14:	f7fe fd4a 	bl	80034ac <HAL_GetTick>
 8004a18:	1b40      	subs	r0, r0, r5
 8004a1a:	280a      	cmp	r0, #10
 8004a1c:	d9f5      	bls.n	8004a0a <HAL_FDCAN_Init+0x5e>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004a1e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004a20:	f043 0301 	orr.w	r3, r3, #1
 8004a24:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004a26:	2303      	movs	r3, #3
 8004a28:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	e7df      	b.n	80049f0 <HAL_FDCAN_Init+0x44>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	f042 0202 	orr.w	r2, r2, #2
 8004a36:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8004a38:	6822      	ldr	r2, [r4, #0]
 8004a3a:	4b50      	ldr	r3, [pc, #320]	; (8004b7c <HAL_FDCAN_Init+0x1d0>)
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d042      	beq.n	8004ac6 <HAL_FDCAN_Init+0x11a>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004a40:	7c23      	ldrb	r3, [r4, #16]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d045      	beq.n	8004ad2 <HAL_FDCAN_Init+0x126>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004a46:	6822      	ldr	r2, [r4, #0]
 8004a48:	6993      	ldr	r3, [r2, #24]
 8004a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a4e:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004a50:	7c63      	ldrb	r3, [r4, #17]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d043      	beq.n	8004ade <HAL_FDCAN_Init+0x132>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004a56:	6822      	ldr	r2, [r4, #0]
 8004a58:	6993      	ldr	r3, [r2, #24]
 8004a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a5e:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004a60:	7ca3      	ldrb	r3, [r4, #18]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d041      	beq.n	8004aea <HAL_FDCAN_Init+0x13e>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a66:	6822      	ldr	r2, [r4, #0]
 8004a68:	6993      	ldr	r3, [r2, #24]
 8004a6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a6e:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004a70:	6822      	ldr	r2, [r4, #0]
 8004a72:	6993      	ldr	r3, [r2, #24]
 8004a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a78:	68a1      	ldr	r1, [r4, #8]
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004a7e:	6822      	ldr	r2, [r4, #0]
 8004a80:	6993      	ldr	r3, [r2, #24]
 8004a82:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8004a86:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a88:	6822      	ldr	r2, [r4, #0]
 8004a8a:	6913      	ldr	r3, [r2, #16]
 8004a8c:	f023 0310 	bic.w	r3, r3, #16
 8004a90:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004a92:	68e3      	ldr	r3, [r4, #12]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d02e      	beq.n	8004af6 <HAL_FDCAN_Init+0x14a>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d031      	beq.n	8004b00 <HAL_FDCAN_Init+0x154>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d054      	beq.n	8004b4a <HAL_FDCAN_Init+0x19e>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004aa0:	6822      	ldr	r2, [r4, #0]
 8004aa2:	6993      	ldr	r3, [r2, #24]
 8004aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa8:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004aaa:	6822      	ldr	r2, [r4, #0]
 8004aac:	6913      	ldr	r3, [r2, #16]
 8004aae:	f043 0310 	orr.w	r3, r3, #16
 8004ab2:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004ab4:	68e3      	ldr	r3, [r4, #12]
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	d122      	bne.n	8004b00 <HAL_FDCAN_Init+0x154>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004aba:	6822      	ldr	r2, [r4, #0]
 8004abc:	6993      	ldr	r3, [r2, #24]
 8004abe:	f043 0320 	orr.w	r3, r3, #32
 8004ac2:	6193      	str	r3, [r2, #24]
 8004ac4:	e01c      	b.n	8004b00 <HAL_FDCAN_Init+0x154>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004ac6:	6862      	ldr	r2, [r4, #4]
 8004ac8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004acc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8004ad0:	e7b6      	b.n	8004a40 <HAL_FDCAN_Init+0x94>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004ad2:	6822      	ldr	r2, [r4, #0]
 8004ad4:	6993      	ldr	r3, [r2, #24]
 8004ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ada:	6193      	str	r3, [r2, #24]
 8004adc:	e7b8      	b.n	8004a50 <HAL_FDCAN_Init+0xa4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004ade:	6822      	ldr	r2, [r4, #0]
 8004ae0:	6993      	ldr	r3, [r2, #24]
 8004ae2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ae6:	6193      	str	r3, [r2, #24]
 8004ae8:	e7ba      	b.n	8004a60 <HAL_FDCAN_Init+0xb4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	6993      	ldr	r3, [r2, #24]
 8004aee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004af2:	6193      	str	r3, [r2, #24]
 8004af4:	e7bc      	b.n	8004a70 <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004af6:	6822      	ldr	r2, [r4, #0]
 8004af8:	6993      	ldr	r3, [r2, #24]
 8004afa:	f043 0304 	orr.w	r3, r3, #4
 8004afe:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b00:	69a3      	ldr	r3, [r4, #24]
 8004b02:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004b04:	69e3      	ldr	r3, [r4, #28]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b0a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004b0e:	6a22      	ldr	r2, [r4, #32]
 8004b10:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004b12:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004b14:	6962      	ldr	r2, [r4, #20]
 8004b16:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b18:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b1e:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004b20:	68a3      	ldr	r3, [r4, #8]
 8004b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b26:	d016      	beq.n	8004b56 <HAL_FDCAN_Init+0x1aa>
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004b28:	6822      	ldr	r2, [r4, #0]
 8004b2a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004b2e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004b30:	430b      	orrs	r3, r1
 8004b32:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004b36:	4620      	mov	r0, r4
 8004b38:	f7ff fef2 	bl	8004920 <FDCAN_CalcultateRamBlockAddresses>
  hfdcan->LatestTxFifoQRequest = 0U;
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004b40:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return HAL_OK;
 8004b48:	e752      	b.n	80049f0 <HAL_FDCAN_Init+0x44>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004b4a:	6822      	ldr	r2, [r4, #0]
 8004b4c:	6993      	ldr	r3, [r2, #24]
 8004b4e:	f043 0320 	orr.w	r3, r3, #32
 8004b52:	6193      	str	r3, [r2, #24]
 8004b54:	e7d4      	b.n	8004b00 <HAL_FDCAN_Init+0x154>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004b56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b58:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004b5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004b5c:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004b5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004b62:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004b64:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004b66:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004b6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004b6c:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004b6e:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004b70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004b74:	60cb      	str	r3, [r1, #12]
 8004b76:	e7d7      	b.n	8004b28 <HAL_FDCAN_Init+0x17c>
    return HAL_ERROR;
 8004b78:	2001      	movs	r0, #1
}
 8004b7a:	4770      	bx	lr
 8004b7c:	40006400 	.word	0x40006400

08004b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b82:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8004b84:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b86:	e062      	b.n	8004c4e <HAL_GPIO_Init+0xce>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b88:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b8a:	005e      	lsls	r6, r3, #1
 8004b8c:	2403      	movs	r4, #3
 8004b8e:	40b4      	lsls	r4, r6
 8004b90:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b94:	68cc      	ldr	r4, [r1, #12]
 8004b96:	40b4      	lsls	r4, r6
 8004b98:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004b9a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b9c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b9e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ba2:	684c      	ldr	r4, [r1, #4]
 8004ba4:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004ba8:	409c      	lsls	r4, r3
 8004baa:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8004bae:	6044      	str	r4, [r0, #4]
 8004bb0:	e05e      	b.n	8004c70 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bb2:	08dd      	lsrs	r5, r3, #3
 8004bb4:	3508      	adds	r5, #8
 8004bb6:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bba:	f003 0407 	and.w	r4, r3, #7
 8004bbe:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004bc2:	240f      	movs	r4, #15
 8004bc4:	fa04 f40c 	lsl.w	r4, r4, ip
 8004bc8:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bcc:	690c      	ldr	r4, [r1, #16]
 8004bce:	fa04 f40c 	lsl.w	r4, r4, ip
 8004bd2:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004bd6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004bda:	e060      	b.n	8004c9e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bdc:	2405      	movs	r4, #5
 8004bde:	e000      	b.n	8004be2 <HAL_GPIO_Init+0x62>
 8004be0:	2400      	movs	r4, #0
 8004be2:	fa04 f40e 	lsl.w	r4, r4, lr
 8004be6:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004be8:	f10c 0c02 	add.w	ip, ip, #2
 8004bec:	4d55      	ldr	r5, [pc, #340]	; (8004d44 <HAL_GPIO_Init+0x1c4>)
 8004bee:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bf2:	4c55      	ldr	r4, [pc, #340]	; (8004d48 <HAL_GPIO_Init+0x1c8>)
 8004bf4:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8004bf6:	43d4      	mvns	r4, r2
 8004bf8:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bfc:	684f      	ldr	r7, [r1, #4]
 8004bfe:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8004c02:	d001      	beq.n	8004c08 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8004c04:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004c08:	4d4f      	ldr	r5, [pc, #316]	; (8004d48 <HAL_GPIO_Init+0x1c8>)
 8004c0a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8004c0c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8004c0e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c12:	684f      	ldr	r7, [r1, #4]
 8004c14:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8004c18:	d001      	beq.n	8004c1e <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8004c1a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8004c1e:	4d4a      	ldr	r5, [pc, #296]	; (8004d48 <HAL_GPIO_Init+0x1c8>)
 8004c20:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 8004c22:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8004c24:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c28:	684f      	ldr	r7, [r1, #4]
 8004c2a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8004c2e:	d001      	beq.n	8004c34 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8004c30:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8004c34:	4d44      	ldr	r5, [pc, #272]	; (8004d48 <HAL_GPIO_Init+0x1c8>)
 8004c36:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004c38:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8004c3a:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c3c:	684e      	ldr	r6, [r1, #4]
 8004c3e:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8004c42:	d001      	beq.n	8004c48 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8004c44:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8004c48:	4a3f      	ldr	r2, [pc, #252]	; (8004d48 <HAL_GPIO_Init+0x1c8>)
 8004c4a:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8004c4c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c4e:	680a      	ldr	r2, [r1, #0]
 8004c50:	fa32 f403 	lsrs.w	r4, r2, r3
 8004c54:	d074      	beq.n	8004d40 <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c56:	f04f 0c01 	mov.w	ip, #1
 8004c5a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8004c5e:	ea1c 0202 	ands.w	r2, ip, r2
 8004c62:	d0f3      	beq.n	8004c4c <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c64:	684c      	ldr	r4, [r1, #4]
 8004c66:	f004 0403 	and.w	r4, r4, #3
 8004c6a:	3c01      	subs	r4, #1
 8004c6c:	2c01      	cmp	r4, #1
 8004c6e:	d98b      	bls.n	8004b88 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c70:	684c      	ldr	r4, [r1, #4]
 8004c72:	f004 0403 	and.w	r4, r4, #3
 8004c76:	2c03      	cmp	r4, #3
 8004c78:	d00c      	beq.n	8004c94 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8004c7a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c7c:	005d      	lsls	r5, r3, #1
 8004c7e:	f04f 0c03 	mov.w	ip, #3
 8004c82:	fa0c fc05 	lsl.w	ip, ip, r5
 8004c86:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c8a:	688c      	ldr	r4, [r1, #8]
 8004c8c:	40ac      	lsls	r4, r5
 8004c8e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8004c92:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c94:	684c      	ldr	r4, [r1, #4]
 8004c96:	f004 0403 	and.w	r4, r4, #3
 8004c9a:	2c02      	cmp	r4, #2
 8004c9c:	d089      	beq.n	8004bb2 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8004c9e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ca0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004ca4:	f04f 0c03 	mov.w	ip, #3
 8004ca8:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004cac:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cb0:	684c      	ldr	r4, [r1, #4]
 8004cb2:	f004 0403 	and.w	r4, r4, #3
 8004cb6:	fa04 f40e 	lsl.w	r4, r4, lr
 8004cba:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8004cbe:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004cc0:	684c      	ldr	r4, [r1, #4]
 8004cc2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8004cc6:	d0c1      	beq.n	8004c4c <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cc8:	4c20      	ldr	r4, [pc, #128]	; (8004d4c <HAL_GPIO_Init+0x1cc>)
 8004cca:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8004ccc:	f045 0501 	orr.w	r5, r5, #1
 8004cd0:	6625      	str	r5, [r4, #96]	; 0x60
 8004cd2:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8004cd4:	f004 0401 	and.w	r4, r4, #1
 8004cd8:	9401      	str	r4, [sp, #4]
 8004cda:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004cdc:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004ce0:	f10c 0502 	add.w	r5, ip, #2
 8004ce4:	4c17      	ldr	r4, [pc, #92]	; (8004d44 <HAL_GPIO_Init+0x1c4>)
 8004ce6:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004cea:	f003 0403 	and.w	r4, r3, #3
 8004cee:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004cf2:	240f      	movs	r4, #15
 8004cf4:	fa04 f40e 	lsl.w	r4, r4, lr
 8004cf8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004cfc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004d00:	f43f af6e 	beq.w	8004be0 <HAL_GPIO_Init+0x60>
 8004d04:	4c12      	ldr	r4, [pc, #72]	; (8004d50 <HAL_GPIO_Init+0x1d0>)
 8004d06:	42a0      	cmp	r0, r4
 8004d08:	d012      	beq.n	8004d30 <HAL_GPIO_Init+0x1b0>
 8004d0a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004d0e:	42a0      	cmp	r0, r4
 8004d10:	d010      	beq.n	8004d34 <HAL_GPIO_Init+0x1b4>
 8004d12:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004d16:	42a0      	cmp	r0, r4
 8004d18:	d00e      	beq.n	8004d38 <HAL_GPIO_Init+0x1b8>
 8004d1a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004d1e:	42a0      	cmp	r0, r4
 8004d20:	d00c      	beq.n	8004d3c <HAL_GPIO_Init+0x1bc>
 8004d22:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004d26:	42a0      	cmp	r0, r4
 8004d28:	f43f af58 	beq.w	8004bdc <HAL_GPIO_Init+0x5c>
 8004d2c:	2406      	movs	r4, #6
 8004d2e:	e758      	b.n	8004be2 <HAL_GPIO_Init+0x62>
 8004d30:	2401      	movs	r4, #1
 8004d32:	e756      	b.n	8004be2 <HAL_GPIO_Init+0x62>
 8004d34:	2402      	movs	r4, #2
 8004d36:	e754      	b.n	8004be2 <HAL_GPIO_Init+0x62>
 8004d38:	2403      	movs	r4, #3
 8004d3a:	e752      	b.n	8004be2 <HAL_GPIO_Init+0x62>
 8004d3c:	2404      	movs	r4, #4
 8004d3e:	e750      	b.n	8004be2 <HAL_GPIO_Init+0x62>
  }
}
 8004d40:	b003      	add	sp, #12
 8004d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d44:	40010000 	.word	0x40010000
 8004d48:	40010400 	.word	0x40010400
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	48000400 	.word	0x48000400

08004d54 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d54:	b10a      	cbz	r2, 8004d5a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d56:	6181      	str	r1, [r0, #24]
 8004d58:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d5a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004d5c:	4770      	bx	lr

08004d5e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d5e:	6803      	ldr	r3, [r0, #0]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	f012 0f02 	tst.w	r2, #2
 8004d66:	d001      	beq.n	8004d6c <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d68:	2200      	movs	r2, #0
 8004d6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d6c:	6803      	ldr	r3, [r0, #0]
 8004d6e:	699a      	ldr	r2, [r3, #24]
 8004d70:	f012 0f01 	tst.w	r2, #1
 8004d74:	d103      	bne.n	8004d7e <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d76:	699a      	ldr	r2, [r3, #24]
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	619a      	str	r2, [r3, #24]
  }
}
 8004d7e:	4770      	bx	lr

08004d80 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004d80:	f011 0f01 	tst.w	r1, #1
 8004d84:	d009      	beq.n	8004d9a <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d86:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004d8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d8e:	2b28      	cmp	r3, #40	; 0x28
 8004d90:	d001      	beq.n	8004d96 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d92:	23f2      	movs	r3, #242	; 0xf2
 8004d94:	e002      	b.n	8004d9c <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004d96:	2342      	movs	r3, #66	; 0x42
 8004d98:	e000      	b.n	8004d9c <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8004d9a:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004d9c:	f011 0f02 	tst.w	r1, #2
 8004da0:	d009      	beq.n	8004db6 <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004da2:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004da6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004daa:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8004dae:	2a28      	cmp	r2, #40	; 0x28
 8004db0:	d010      	beq.n	8004dd4 <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004db2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004db6:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8004dba:	d10d      	bne.n	8004dd8 <I2C_Disable_IRQ+0x58>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004dbc:	2910      	cmp	r1, #16
 8004dbe:	d00e      	beq.n	8004dde <I2C_Disable_IRQ+0x5e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004dc0:	2920      	cmp	r1, #32
 8004dc2:	d00f      	beq.n	8004de4 <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004dc4:	2940      	cmp	r1, #64	; 0x40
 8004dc6:	d010      	beq.n	8004dea <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004dc8:	6801      	ldr	r1, [r0, #0]
 8004dca:	680a      	ldr	r2, [r1, #0]
 8004dcc:	ea22 0303 	bic.w	r3, r2, r3
 8004dd0:	600b      	str	r3, [r1, #0]
}
 8004dd2:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004dd4:	4663      	mov	r3, ip
 8004dd6:	e7ee      	b.n	8004db6 <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004dd8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004ddc:	e7ee      	b.n	8004dbc <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004dde:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004de2:	e7ed      	b.n	8004dc0 <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 8004de4:	f043 0320 	orr.w	r3, r3, #32
 8004de8:	e7ec      	b.n	8004dc4 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 8004dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dee:	e7eb      	b.n	8004dc8 <I2C_Disable_IRQ+0x48>

08004df0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004df0:	2800      	cmp	r0, #0
 8004df2:	d059      	beq.n	8004ea8 <HAL_I2C_Init+0xb8>
{
 8004df4:	b510      	push	{r4, lr}
 8004df6:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004df8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d043      	beq.n	8004e88 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e00:	2324      	movs	r3, #36	; 0x24
 8004e02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004e06:	6822      	ldr	r2, [r4, #0]
 8004e08:	6813      	ldr	r3, [r2, #0]
 8004e0a:	f023 0301 	bic.w	r3, r3, #1
 8004e0e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e10:	6863      	ldr	r3, [r4, #4]
 8004e12:	6822      	ldr	r2, [r4, #0]
 8004e14:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004e18:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e1a:	6822      	ldr	r2, [r4, #0]
 8004e1c:	6893      	ldr	r3, [r2, #8]
 8004e1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e22:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e24:	68e3      	ldr	r3, [r4, #12]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d033      	beq.n	8004e92 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e2a:	68a3      	ldr	r3, [r4, #8]
 8004e2c:	6822      	ldr	r2, [r4, #0]
 8004e2e:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8004e32:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e34:	68e3      	ldr	r3, [r4, #12]
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d031      	beq.n	8004e9e <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e3a:	6822      	ldr	r2, [r4, #0]
 8004e3c:	6853      	ldr	r3, [r2, #4]
 8004e3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e46:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e48:	6822      	ldr	r2, [r4, #0]
 8004e4a:	68d3      	ldr	r3, [r2, #12]
 8004e4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e50:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e52:	6923      	ldr	r3, [r4, #16]
 8004e54:	6962      	ldr	r2, [r4, #20]
 8004e56:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e58:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e5a:	6822      	ldr	r2, [r4, #0]
 8004e5c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004e60:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e62:	69e3      	ldr	r3, [r4, #28]
 8004e64:	6a21      	ldr	r1, [r4, #32]
 8004e66:	6822      	ldr	r2, [r4, #0]
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004e6c:	6822      	ldr	r2, [r4, #0]
 8004e6e:	6813      	ldr	r3, [r2, #0]
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e76:	2000      	movs	r0, #0
 8004e78:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e7a:	2320      	movs	r3, #32
 8004e7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e80:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e82:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004e86:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004e88:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004e8c:	f7fc ff7c 	bl	8001d88 <HAL_I2C_MspInit>
 8004e90:	e7b6      	b.n	8004e00 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e92:	68a3      	ldr	r3, [r4, #8]
 8004e94:	6822      	ldr	r2, [r4, #0]
 8004e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9a:	6093      	str	r3, [r2, #8]
 8004e9c:	e7ca      	b.n	8004e34 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ea4:	605a      	str	r2, [r3, #4]
 8004ea6:	e7c8      	b.n	8004e3a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8004ea8:	2001      	movs	r0, #1
}
 8004eaa:	4770      	bx	lr

08004eac <HAL_I2C_EV_IRQHandler>:
{
 8004eac:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004eae:	6803      	ldr	r3, [r0, #0]
 8004eb0:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004eb2:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8004eb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004eb6:	b103      	cbz	r3, 8004eba <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8004eb8:	4798      	blx	r3
}
 8004eba:	bd08      	pop	{r3, pc}

08004ebc <HAL_I2C_SlaveTxCpltCallback>:
}
 8004ebc:	4770      	bx	lr

08004ebe <HAL_I2C_SlaveRxCpltCallback>:
}
 8004ebe:	4770      	bx	lr

08004ec0 <I2C_ITSlaveSeqCplt>:
{
 8004ec0:	b510      	push	{r4, lr}
 8004ec2:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004ec4:	6803      	ldr	r3, [r0, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec8:	2100      	movs	r1, #0
 8004eca:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004ece:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004ed2:	d00e      	beq.n	8004ef2 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004eda:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004edc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b29      	cmp	r3, #41	; 0x29
 8004ee4:	d00d      	beq.n	8004f02 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ee6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b2a      	cmp	r3, #42	; 0x2a
 8004eee:	d018      	beq.n	8004f22 <I2C_ITSlaveSeqCplt+0x62>
}
 8004ef0:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004ef2:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004ef6:	d0f1      	beq.n	8004edc <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	e7ec      	b.n	8004edc <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f02:	2328      	movs	r3, #40	; 0x28
 8004f04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f08:	2321      	movs	r3, #33	; 0x21
 8004f0a:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f7ff ff36 	bl	8004d80 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004f14:	2300      	movs	r3, #0
 8004f16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f7ff ffce 	bl	8004ebc <HAL_I2C_SlaveTxCpltCallback>
 8004f20:	e7e6      	b.n	8004ef0 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f22:	2328      	movs	r3, #40	; 0x28
 8004f24:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f28:	2322      	movs	r3, #34	; 0x22
 8004f2a:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004f2c:	2102      	movs	r1, #2
 8004f2e:	4620      	mov	r0, r4
 8004f30:	f7ff ff26 	bl	8004d80 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004f34:	2300      	movs	r3, #0
 8004f36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	f7ff ffbf 	bl	8004ebe <HAL_I2C_SlaveRxCpltCallback>
}
 8004f40:	e7d6      	b.n	8004ef0 <I2C_ITSlaveSeqCplt+0x30>

08004f42 <HAL_I2C_AddrCallback>:
}
 8004f42:	4770      	bx	lr

08004f44 <I2C_ITAddrCplt>:
{
 8004f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f46:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f48:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004f4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f50:	2b28      	cmp	r3, #40	; 0x28
 8004f52:	d006      	beq.n	8004f62 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f54:	6803      	ldr	r3, [r0, #0]
 8004f56:	2208      	movs	r2, #8
 8004f58:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8004f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8004f62:	6803      	ldr	r3, [r0, #0]
 8004f64:	699e      	ldr	r6, [r3, #24]
 8004f66:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004f6a:	699a      	ldr	r2, [r3, #24]
 8004f6c:	0c12      	lsrs	r2, r2, #16
 8004f6e:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004f78:	68df      	ldr	r7, [r3, #12]
 8004f7a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f7e:	68c1      	ldr	r1, [r0, #12]
 8004f80:	2902      	cmp	r1, #2
 8004f82:	d122      	bne.n	8004fca <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004f84:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8004f88:	f015 0f06 	tst.w	r5, #6
 8004f8c:	d110      	bne.n	8004fb0 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8004f8e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004f90:	3101      	adds	r1, #1
 8004f92:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004f94:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004f96:	2902      	cmp	r1, #2
 8004f98:	d1e2      	bne.n	8004f60 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f9e:	2008      	movs	r0, #8
 8004fa0:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8004fa2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004fa6:	4631      	mov	r1, r6
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f7ff ffca 	bl	8004f42 <HAL_I2C_AddrCallback>
 8004fae:	e7d7      	b.n	8004f60 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004fb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fb4:	f7ff fee4 	bl	8004d80 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004fbe:	463a      	mov	r2, r7
 8004fc0:	4631      	mov	r1, r6
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f7ff ffbd 	bl	8004f42 <HAL_I2C_AddrCallback>
 8004fc8:	e7ca      	b.n	8004f60 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004fca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fce:	f7ff fed7 	bl	8004d80 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004fd8:	462a      	mov	r2, r5
 8004fda:	4631      	mov	r1, r6
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f7ff ffb0 	bl	8004f42 <HAL_I2C_AddrCallback>
 8004fe2:	e7bd      	b.n	8004f60 <I2C_ITAddrCplt+0x1c>

08004fe4 <HAL_I2C_ListenCpltCallback>:
}
 8004fe4:	4770      	bx	lr
	...

08004fe8 <I2C_ITListenCplt>:
{
 8004fe8:	b510      	push	{r4, lr}
 8004fea:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fec:	4b17      	ldr	r3, [pc, #92]	; (800504c <I2C_ITListenCplt+0x64>)
 8004fee:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ffa:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004ffe:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005000:	f011 0f04 	tst.w	r1, #4
 8005004:	d013      	beq.n	800502e <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005006:	6803      	ldr	r3, [r0, #0]
 8005008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800500a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800500c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800500e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005010:	3301      	adds	r3, #1
 8005012:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8005014:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8005016:	b153      	cbz	r3, 800502e <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8005018:	3b01      	subs	r3, #1
 800501a:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 800501c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29b      	uxth	r3, r3
 8005024:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005026:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005028:	f043 0304 	orr.w	r3, r3, #4
 800502c:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800502e:	f248 0103 	movw	r1, #32771	; 0x8003
 8005032:	4620      	mov	r0, r4
 8005034:	f7ff fea4 	bl	8004d80 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	2210      	movs	r2, #16
 800503c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800503e:	2300      	movs	r3, #0
 8005040:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8005044:	4620      	mov	r0, r4
 8005046:	f7ff ffcd 	bl	8004fe4 <HAL_I2C_ListenCpltCallback>
}
 800504a:	bd10      	pop	{r4, pc}
 800504c:	ffff0000 	.word	0xffff0000

08005050 <HAL_I2C_ErrorCallback>:
}
 8005050:	4770      	bx	lr

08005052 <HAL_I2C_AbortCpltCallback>:
}
 8005052:	4770      	bx	lr

08005054 <I2C_TreatErrorCallback>:
{
 8005054:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005056:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b60      	cmp	r3, #96	; 0x60
 800505e:	d006      	beq.n	800506e <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005060:	2300      	movs	r3, #0
 8005062:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005064:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005068:	f7ff fff2 	bl	8005050 <HAL_I2C_ErrorCallback>
}
 800506c:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800506e:	2320      	movs	r3, #32
 8005070:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005074:	2300      	movs	r3, #0
 8005076:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005078:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800507c:	f7ff ffe9 	bl	8005052 <HAL_I2C_AbortCpltCallback>
 8005080:	e7f4      	b.n	800506c <I2C_TreatErrorCallback+0x18>
	...

08005084 <I2C_ITError>:
{
 8005084:	b510      	push	{r4, lr}
 8005086:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005088:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800508c:	2000      	movs	r0, #0
 800508e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005092:	4a3b      	ldr	r2, [pc, #236]	; (8005180 <I2C_ITError+0xfc>)
 8005094:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005096:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8005098:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800509a:	430a      	orrs	r2, r1
 800509c:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800509e:	3b28      	subs	r3, #40	; 0x28
 80050a0:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d819      	bhi.n	80050da <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80050a6:	2103      	movs	r1, #3
 80050a8:	4620      	mov	r0, r4
 80050aa:	f7ff fe69 	bl	8004d80 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80050ae:	2328      	movs	r3, #40	; 0x28
 80050b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80050b4:	4b33      	ldr	r3, [pc, #204]	; (8005184 <I2C_ITError+0x100>)
 80050b6:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 80050b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80050ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80050bc:	b11a      	cbz	r2, 80050c6 <I2C_ITError+0x42>
 80050be:	2b11      	cmp	r3, #17
 80050c0:	d01b      	beq.n	80050fa <I2C_ITError+0x76>
 80050c2:	2b21      	cmp	r3, #33	; 0x21
 80050c4:	d019      	beq.n	80050fa <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80050c6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80050c8:	b11a      	cbz	r2, 80050d2 <I2C_ITError+0x4e>
 80050ca:	2b12      	cmp	r3, #18
 80050cc:	d036      	beq.n	800513c <I2C_ITError+0xb8>
 80050ce:	2b22      	cmp	r3, #34	; 0x22
 80050d0:	d034      	beq.n	800513c <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 80050d2:	4620      	mov	r0, r4
 80050d4:	f7ff ffbe 	bl	8005054 <I2C_TreatErrorCallback>
}
 80050d8:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80050da:	f248 0103 	movw	r1, #32771	; 0x8003
 80050de:	4620      	mov	r0, r4
 80050e0:	f7ff fe4e 	bl	8004d80 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80050e4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b60      	cmp	r3, #96	; 0x60
 80050ec:	d002      	beq.n	80050f4 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 80050ee:	2320      	movs	r3, #32
 80050f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 80050f4:	2300      	movs	r3, #0
 80050f6:	6363      	str	r3, [r4, #52]	; 0x34
 80050f8:	e7de      	b.n	80050b8 <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005102:	d003      	beq.n	800510c <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800510a:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800510c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800510e:	f7ff fc04 	bl	800491a <HAL_DMA_GetState>
 8005112:	2801      	cmp	r0, #1
 8005114:	d00e      	beq.n	8005134 <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005118:	4a1b      	ldr	r2, [pc, #108]	; (8005188 <I2C_ITError+0x104>)
 800511a:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800511c:	2300      	movs	r3, #0
 800511e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005122:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005124:	f7ff fb58 	bl	80047d8 <HAL_DMA_Abort_IT>
 8005128:	2800      	cmp	r0, #0
 800512a:	d0d5      	beq.n	80050d8 <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800512c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800512e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005130:	4798      	blx	r3
 8005132:	e7d1      	b.n	80050d8 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8005134:	4620      	mov	r0, r4
 8005136:	f7ff ff8d 	bl	8005054 <I2C_TreatErrorCallback>
 800513a:	e7cd      	b.n	80050d8 <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005144:	d003      	beq.n	800514e <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800514c:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800514e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005150:	f7ff fbe3 	bl	800491a <HAL_DMA_GetState>
 8005154:	2801      	cmp	r0, #1
 8005156:	d00e      	beq.n	8005176 <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005158:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800515a:	4a0b      	ldr	r2, [pc, #44]	; (8005188 <I2C_ITError+0x104>)
 800515c:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800515e:	2300      	movs	r3, #0
 8005160:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005164:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005166:	f7ff fb37 	bl	80047d8 <HAL_DMA_Abort_IT>
 800516a:	2800      	cmp	r0, #0
 800516c:	d0b4      	beq.n	80050d8 <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800516e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005170:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005172:	4798      	blx	r3
 8005174:	e7b0      	b.n	80050d8 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8005176:	4620      	mov	r0, r4
 8005178:	f7ff ff6c 	bl	8005054 <I2C_TreatErrorCallback>
 800517c:	e7ac      	b.n	80050d8 <I2C_ITError+0x54>
 800517e:	bf00      	nop
 8005180:	ffff0000 	.word	0xffff0000
 8005184:	080052f5 	.word	0x080052f5
 8005188:	080054ad 	.word	0x080054ad

0800518c <I2C_ITSlaveCplt>:
{
 800518c:	b570      	push	{r4, r5, r6, lr}
 800518e:	4604      	mov	r4, r0
 8005190:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005192:	6802      	ldr	r2, [r0, #0]
 8005194:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005196:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800519a:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800519c:	2120      	movs	r1, #32
 800519e:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80051a0:	2b21      	cmp	r3, #33	; 0x21
 80051a2:	d00d      	beq.n	80051c0 <I2C_ITSlaveCplt+0x34>
 80051a4:	2b29      	cmp	r3, #41	; 0x29
 80051a6:	d00b      	beq.n	80051c0 <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80051a8:	2b22      	cmp	r3, #34	; 0x22
 80051aa:	d001      	beq.n	80051b0 <I2C_ITSlaveCplt+0x24>
 80051ac:	2b2a      	cmp	r3, #42	; 0x2a
 80051ae:	d10e      	bne.n	80051ce <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80051b0:	f248 0102 	movw	r1, #32770	; 0x8002
 80051b4:	4620      	mov	r0, r4
 80051b6:	f7ff fde3 	bl	8004d80 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051ba:	2322      	movs	r3, #34	; 0x22
 80051bc:	6323      	str	r3, [r4, #48]	; 0x30
 80051be:	e006      	b.n	80051ce <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80051c0:	f248 0101 	movw	r1, #32769	; 0x8001
 80051c4:	4620      	mov	r0, r4
 80051c6:	f7ff fddb 	bl	8004d80 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051ca:	2321      	movs	r3, #33	; 0x21
 80051cc:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80051ce:	6822      	ldr	r2, [r4, #0]
 80051d0:	6853      	ldr	r3, [r2, #4]
 80051d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051d6:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 80051d8:	6822      	ldr	r2, [r4, #0]
 80051da:	6853      	ldr	r3, [r2, #4]
 80051dc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80051e0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80051e4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80051e8:	f023 0301 	bic.w	r3, r3, #1
 80051ec:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 80051ee:	4620      	mov	r0, r4
 80051f0:	f7ff fdb5 	bl	8004d5e <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80051f4:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80051f8:	d040      	beq.n	800527c <I2C_ITSlaveCplt+0xf0>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80051fa:	6822      	ldr	r2, [r4, #0]
 80051fc:	6813      	ldr	r3, [r2, #0]
 80051fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005202:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8005204:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005206:	b11b      	cbz	r3, 8005210 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	b29b      	uxth	r3, r3
 800520e:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005210:	f015 0f04 	tst.w	r5, #4
 8005214:	d011      	beq.n	800523a <I2C_ITSlaveCplt+0xae>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005216:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800521e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005220:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005224:	3301      	adds	r3, #1
 8005226:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8005228:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800522a:	b133      	cbz	r3, 800523a <I2C_ITSlaveCplt+0xae>
      hi2c->XferSize--;
 800522c:	3b01      	subs	r3, #1
 800522e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005230:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	b29b      	uxth	r3, r3
 8005238:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800523a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800523c:	b29b      	uxth	r3, r3
 800523e:	b11b      	cbz	r3, 8005248 <I2C_ITSlaveCplt+0xbc>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005240:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005242:	f043 0304 	orr.w	r3, r3, #4
 8005246:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005248:	2300      	movs	r3, #0
 800524a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 800524e:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005250:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005252:	bb1b      	cbnz	r3, 800529c <I2C_ITSlaveCplt+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005254:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005256:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800525a:	d12d      	bne.n	80052b8 <I2C_ITSlaveCplt+0x12c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800525c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b22      	cmp	r3, #34	; 0x22
 8005264:	d038      	beq.n	80052d8 <I2C_ITSlaveCplt+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 8005266:	2320      	movs	r3, #32
 8005268:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800526c:	2300      	movs	r3, #0
 800526e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005270:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005274:	4620      	mov	r0, r4
 8005276:	f7ff fe21 	bl	8004ebc <HAL_I2C_SlaveTxCpltCallback>
}
 800527a:	e02c      	b.n	80052d6 <I2C_ITSlaveCplt+0x14a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800527c:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8005280:	d0c6      	beq.n	8005210 <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005282:	6822      	ldr	r2, [r4, #0]
 8005284:	6813      	ldr	r3, [r2, #0]
 8005286:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800528a:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 800528c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0be      	beq.n	8005210 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	b29b      	uxth	r3, r3
 8005298:	8563      	strh	r3, [r4, #42]	; 0x2a
 800529a:	e7b9      	b.n	8005210 <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800529c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800529e:	4620      	mov	r0, r4
 80052a0:	f7ff fef0 	bl	8005084 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80052a4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b28      	cmp	r3, #40	; 0x28
 80052ac:	d113      	bne.n	80052d6 <I2C_ITSlaveCplt+0x14a>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80052ae:	4629      	mov	r1, r5
 80052b0:	4620      	mov	r0, r4
 80052b2:	f7ff fe99 	bl	8004fe8 <I2C_ITListenCplt>
 80052b6:	e00e      	b.n	80052d6 <I2C_ITSlaveCplt+0x14a>
    I2C_ITSlaveSeqCplt(hi2c);
 80052b8:	4620      	mov	r0, r4
 80052ba:	f7ff fe01 	bl	8004ec0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052be:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <I2C_ITSlaveCplt+0x164>)
 80052c0:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80052c2:	2320      	movs	r3, #32
 80052c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052c8:	2300      	movs	r3, #0
 80052ca:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80052cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80052d0:	4620      	mov	r0, r4
 80052d2:	f7ff fe87 	bl	8004fe4 <HAL_I2C_ListenCpltCallback>
}
 80052d6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80052d8:	2320      	movs	r3, #32
 80052da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052de:	2300      	movs	r3, #0
 80052e0:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80052e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052e6:	4620      	mov	r0, r4
 80052e8:	f7ff fde9 	bl	8004ebe <HAL_I2C_SlaveRxCpltCallback>
 80052ec:	e7f3      	b.n	80052d6 <I2C_ITSlaveCplt+0x14a>
 80052ee:	bf00      	nop
 80052f0:	ffff0000 	.word	0xffff0000

080052f4 <I2C_Slave_ISR_IT>:
{
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 80052f6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80052f8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	f000 809e 	beq.w	800543e <I2C_Slave_ISR_IT+0x14a>
 8005302:	4604      	mov	r4, r0
 8005304:	460d      	mov	r5, r1
 8005306:	4616      	mov	r6, r2
 8005308:	2301      	movs	r3, #1
 800530a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800530e:	f011 0f20 	tst.w	r1, #32
 8005312:	d002      	beq.n	800531a <I2C_Slave_ISR_IT+0x26>
 8005314:	f012 0f20 	tst.w	r2, #32
 8005318:	d119      	bne.n	800534e <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800531a:	f015 0f10 	tst.w	r5, #16
 800531e:	d03e      	beq.n	800539e <I2C_Slave_ISR_IT+0xaa>
 8005320:	f016 0f10 	tst.w	r6, #16
 8005324:	d03b      	beq.n	800539e <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 8005326:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005328:	b29b      	uxth	r3, r3
 800532a:	bb43      	cbnz	r3, 800537e <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800532c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b28      	cmp	r3, #40	; 0x28
 8005334:	d00e      	beq.n	8005354 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005336:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b29      	cmp	r3, #41	; 0x29
 800533e:	d011      	beq.n	8005364 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	2210      	movs	r2, #16
 8005344:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8005346:	2000      	movs	r0, #0
 8005348:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800534c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800534e:	f7ff ff1d 	bl	800518c <I2C_ITSlaveCplt>
 8005352:	e7e2      	b.n	800531a <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005354:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8005358:	d1ed      	bne.n	8005336 <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800535a:	4629      	mov	r1, r5
 800535c:	4620      	mov	r0, r4
 800535e:	f7ff fe43 	bl	8004fe8 <I2C_ITListenCplt>
 8005362:	e7f0      	b.n	8005346 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005364:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8005368:	d0ea      	beq.n	8005340 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	2210      	movs	r2, #16
 800536e:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8005370:	4620      	mov	r0, r4
 8005372:	f7ff fcf4 	bl	8004d5e <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8005376:	4620      	mov	r0, r4
 8005378:	f7ff fda2 	bl	8004ec0 <I2C_ITSlaveSeqCplt>
 800537c:	e7e3      	b.n	8005346 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	2210      	movs	r2, #16
 8005382:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005384:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005386:	f043 0304 	orr.w	r3, r3, #4
 800538a:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800538c:	b117      	cbz	r7, 8005394 <I2C_Slave_ISR_IT+0xa0>
 800538e:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8005392:	d1d8      	bne.n	8005346 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005394:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005396:	4620      	mov	r0, r4
 8005398:	f7ff fe74 	bl	8005084 <I2C_ITError>
 800539c:	e7d3      	b.n	8005346 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800539e:	f015 0f04 	tst.w	r5, #4
 80053a2:	d01f      	beq.n	80053e4 <I2C_Slave_ISR_IT+0xf0>
 80053a4:	f016 0f04 	tst.w	r6, #4
 80053a8:	d01c      	beq.n	80053e4 <I2C_Slave_ISR_IT+0xf0>
    if (hi2c->XferCount > 0U)
 80053aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	b173      	cbz	r3, 80053ce <I2C_Slave_ISR_IT+0xda>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053b6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80053b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053ba:	3301      	adds	r3, #1
 80053bc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80053be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80053c0:	3b01      	subs	r3, #1
 80053c2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80053c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 80053ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1b7      	bne.n	8005346 <I2C_Slave_ISR_IT+0x52>
 80053d6:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80053da:	d0b4      	beq.n	8005346 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 80053dc:	4620      	mov	r0, r4
 80053de:	f7ff fd6f 	bl	8004ec0 <I2C_ITSlaveSeqCplt>
 80053e2:	e7b0      	b.n	8005346 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80053e4:	f015 0f08 	tst.w	r5, #8
 80053e8:	d002      	beq.n	80053f0 <I2C_Slave_ISR_IT+0xfc>
 80053ea:	f016 0f08 	tst.w	r6, #8
 80053ee:	d118      	bne.n	8005422 <I2C_Slave_ISR_IT+0x12e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80053f0:	f015 0f02 	tst.w	r5, #2
 80053f4:	d0a7      	beq.n	8005346 <I2C_Slave_ISR_IT+0x52>
 80053f6:	f016 0f02 	tst.w	r6, #2
 80053fa:	d0a4      	beq.n	8005346 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 80053fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053fe:	b29b      	uxth	r3, r3
 8005400:	b1a3      	cbz	r3, 800542c <I2C_Slave_ISR_IT+0x138>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005402:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	7812      	ldrb	r2, [r2, #0]
 8005408:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800540a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800540c:	3301      	adds	r3, #1
 800540e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005410:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005412:	b29b      	uxth	r3, r3
 8005414:	3b01      	subs	r3, #1
 8005416:	b29b      	uxth	r3, r3
 8005418:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800541a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800541c:	3b01      	subs	r3, #1
 800541e:	8523      	strh	r3, [r4, #40]	; 0x28
 8005420:	e791      	b.n	8005346 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005422:	4629      	mov	r1, r5
 8005424:	4620      	mov	r0, r4
 8005426:	f7ff fd8d 	bl	8004f44 <I2C_ITAddrCplt>
 800542a:	e78c      	b.n	8005346 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800542c:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8005430:	d001      	beq.n	8005436 <I2C_Slave_ISR_IT+0x142>
 8005432:	2f00      	cmp	r7, #0
 8005434:	d187      	bne.n	8005346 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8005436:	4620      	mov	r0, r4
 8005438:	f7ff fd42 	bl	8004ec0 <I2C_ITSlaveSeqCplt>
 800543c:	e783      	b.n	8005346 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 800543e:	2002      	movs	r0, #2
 8005440:	e784      	b.n	800534c <I2C_Slave_ISR_IT+0x58>

08005442 <HAL_I2C_ER_IRQHandler>:
{
 8005442:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005444:	6802      	ldr	r2, [r0, #0]
 8005446:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005448:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800544a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800544e:	d009      	beq.n	8005464 <HAL_I2C_ER_IRQHandler+0x22>
 8005450:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005454:	d006      	beq.n	8005464 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005456:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005458:	f044 0401 	orr.w	r4, r4, #1
 800545c:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800545e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8005462:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005464:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005468:	d00a      	beq.n	8005480 <HAL_I2C_ER_IRQHandler+0x3e>
 800546a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800546e:	d007      	beq.n	8005480 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005470:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005472:	f042 0208 	orr.w	r2, r2, #8
 8005476:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005478:	6802      	ldr	r2, [r0, #0]
 800547a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800547e:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005480:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005484:	d00a      	beq.n	800549c <HAL_I2C_ER_IRQHandler+0x5a>
 8005486:	f011 0f80 	tst.w	r1, #128	; 0x80
 800548a:	d007      	beq.n	800549c <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800548c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800548e:	f043 0302 	orr.w	r3, r3, #2
 8005492:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005494:	6803      	ldr	r3, [r0, #0]
 8005496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800549a:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 800549c:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800549e:	f011 0f0b 	tst.w	r1, #11
 80054a2:	d100      	bne.n	80054a6 <HAL_I2C_ER_IRQHandler+0x64>
}
 80054a4:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 80054a6:	f7ff fded 	bl	8005084 <I2C_ITError>
}
 80054aa:	e7fb      	b.n	80054a4 <HAL_I2C_ER_IRQHandler+0x62>

080054ac <I2C_DMAAbort>:
{
 80054ac:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80054ae:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 80054b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80054b2:	b10b      	cbz	r3, 80054b8 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80054b4:	2200      	movs	r2, #0
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 80054b8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80054ba:	b10b      	cbz	r3, 80054c0 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80054bc:	2200      	movs	r2, #0
 80054be:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 80054c0:	f7ff fdc8 	bl	8005054 <I2C_TreatErrorCallback>
}
 80054c4:	bd08      	pop	{r3, pc}

080054c6 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d124      	bne.n	800551a <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054d0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d022      	beq.n	800551e <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80054d8:	2301      	movs	r3, #1
 80054da:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054de:	2324      	movs	r3, #36	; 0x24
 80054e0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054e4:	6802      	ldr	r2, [r0, #0]
 80054e6:	6813      	ldr	r3, [r2, #0]
 80054e8:	f023 0301 	bic.w	r3, r3, #1
 80054ec:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054ee:	6802      	ldr	r2, [r0, #0]
 80054f0:	6813      	ldr	r3, [r2, #0]
 80054f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054f6:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054f8:	6802      	ldr	r2, [r0, #0]
 80054fa:	6813      	ldr	r3, [r2, #0]
 80054fc:	4319      	orrs	r1, r3
 80054fe:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005500:	6802      	ldr	r2, [r0, #0]
 8005502:	6813      	ldr	r3, [r2, #0]
 8005504:	f043 0301 	orr.w	r3, r3, #1
 8005508:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800550a:	2320      	movs	r3, #32
 800550c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005510:	2300      	movs	r3, #0
 8005512:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005516:	4618      	mov	r0, r3
 8005518:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800551a:	2002      	movs	r0, #2
 800551c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800551e:	2002      	movs	r0, #2
  }
}
 8005520:	4770      	bx	lr

08005522 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005522:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b20      	cmp	r3, #32
 800552a:	d122      	bne.n	8005572 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800552c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005530:	2b01      	cmp	r3, #1
 8005532:	d020      	beq.n	8005576 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8005534:	2301      	movs	r3, #1
 8005536:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800553a:	2324      	movs	r3, #36	; 0x24
 800553c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005540:	6802      	ldr	r2, [r0, #0]
 8005542:	6813      	ldr	r3, [r2, #0]
 8005544:	f023 0301 	bic.w	r3, r3, #1
 8005548:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800554a:	6802      	ldr	r2, [r0, #0]
 800554c:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800554e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005552:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005556:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005558:	6802      	ldr	r2, [r0, #0]
 800555a:	6813      	ldr	r3, [r2, #0]
 800555c:	f043 0301 	orr.w	r3, r3, #1
 8005560:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005562:	2320      	movs	r3, #32
 8005564:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005568:	2300      	movs	r3, #0
 800556a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800556e:	4618      	mov	r0, r3
 8005570:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005572:	2002      	movs	r0, #2
 8005574:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005576:	2002      	movs	r0, #2
  }
}
 8005578:	4770      	bx	lr

0800557a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800557a:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800557c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005580:	d043      	beq.n	800560a <HAL_PCD_EP_DB_Receive+0x90>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005582:	6804      	ldr	r4, [r0, #0]
 8005584:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8005588:	f891 c000 	ldrb.w	ip, [r1]
 800558c:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 8005590:	fa1e f383 	uxtah	r3, lr, r3
 8005594:	4423      	add	r3, r4
 8005596:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 800559a:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 800559e:	698b      	ldr	r3, [r1, #24]
 80055a0:	42a3      	cmp	r3, r4
 80055a2:	d328      	bcc.n	80055f6 <HAL_PCD_EP_DB_Receive+0x7c>
    {
      ep->xfer_len -= count;
 80055a4:	1b1b      	subs	r3, r3, r4
 80055a6:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 80055a8:	698b      	ldr	r3, [r1, #24]
 80055aa:	b97b      	cbnz	r3, 80055cc <HAL_PCD_EP_DB_Receive+0x52>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80055ac:	6805      	ldr	r5, [r0, #0]
 80055ae:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c8:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80055cc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80055d0:	d00e      	beq.n	80055f0 <HAL_PCD_EP_DB_Receive+0x76>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80055d2:	6802      	ldr	r2, [r0, #0]
 80055d4:	780d      	ldrb	r5, [r1, #0]
 80055d6:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80055da:	b29b      	uxth	r3, r3
 80055dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055ec:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 80055f0:	b924      	cbnz	r4, 80055fc <HAL_PCD_EP_DB_Receive+0x82>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 80055f2:	4620      	mov	r0, r4
 80055f4:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	618b      	str	r3, [r1, #24]
 80055fa:	e7d5      	b.n	80055a8 <HAL_PCD_EP_DB_Receive+0x2e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80055fc:	4623      	mov	r3, r4
 80055fe:	890a      	ldrh	r2, [r1, #8]
 8005600:	6949      	ldr	r1, [r1, #20]
 8005602:	6800      	ldr	r0, [r0, #0]
 8005604:	f004 fa1d 	bl	8009a42 <USB_ReadPMA>
 8005608:	e7f3      	b.n	80055f2 <HAL_PCD_EP_DB_Receive+0x78>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800560a:	6804      	ldr	r4, [r0, #0]
 800560c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8005610:	f891 c000 	ldrb.w	ip, [r1]
 8005614:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 8005618:	fa1e f383 	uxtah	r3, lr, r3
 800561c:	4423      	add	r3, r4
 800561e:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	; 0x406
 8005622:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 8005626:	698b      	ldr	r3, [r1, #24]
 8005628:	42a3      	cmp	r3, r4
 800562a:	d32f      	bcc.n	800568c <HAL_PCD_EP_DB_Receive+0x112>
      ep->xfer_len -= count;
 800562c:	1b1b      	subs	r3, r3, r4
 800562e:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8005630:	698b      	ldr	r3, [r1, #24]
 8005632:	b97b      	cbnz	r3, 8005654 <HAL_PCD_EP_DB_Receive+0xda>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005634:	6805      	ldr	r5, [r0, #0]
 8005636:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 800563a:	b29b      	uxth	r3, r3
 800563c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005644:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800564c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005650:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005654:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005658:	d10f      	bne.n	800567a <HAL_PCD_EP_DB_Receive+0x100>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800565a:	6802      	ldr	r2, [r0, #0]
 800565c:	f891 c000 	ldrb.w	ip, [r1]
 8005660:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8005664:	b29b      	uxth	r3, r3
 8005666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800566e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005672:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005676:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 800567a:	2c00      	cmp	r4, #0
 800567c:	d0b9      	beq.n	80055f2 <HAL_PCD_EP_DB_Receive+0x78>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800567e:	4623      	mov	r3, r4
 8005680:	894a      	ldrh	r2, [r1, #10]
 8005682:	6949      	ldr	r1, [r1, #20]
 8005684:	6800      	ldr	r0, [r0, #0]
 8005686:	f004 f9dc 	bl	8009a42 <USB_ReadPMA>
 800568a:	e7b2      	b.n	80055f2 <HAL_PCD_EP_DB_Receive+0x78>
      ep->xfer_len = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	618b      	str	r3, [r1, #24]
 8005690:	e7ce      	b.n	8005630 <HAL_PCD_EP_DB_Receive+0xb6>

08005692 <HAL_PCD_Init>:
  if (hpcd == NULL)
 8005692:	2800      	cmp	r0, #0
 8005694:	d06d      	beq.n	8005772 <HAL_PCD_Init+0xe0>
{
 8005696:	b530      	push	{r4, r5, lr}
 8005698:	b087      	sub	sp, #28
 800569a:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800569c:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80056a0:	b13b      	cbz	r3, 80056b2 <HAL_PCD_Init+0x20>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80056a2:	2303      	movs	r3, #3
 80056a4:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80056a8:	6820      	ldr	r0, [r4, #0]
 80056aa:	f003 faa8 	bl	8008bfe <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ae:	2300      	movs	r3, #0
 80056b0:	e01f      	b.n	80056f2 <HAL_PCD_Init+0x60>
    hpcd->Lock = HAL_UNLOCKED;
 80056b2:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80056b6:	f005 fc05 	bl	800aec4 <HAL_PCD_MspInit>
 80056ba:	e7f2      	b.n	80056a2 <HAL_PCD_Init+0x10>
    hpcd->IN_ep[i].is_in = 1U;
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80056c2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80056c6:	2001      	movs	r0, #1
 80056c8:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 80056ca:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80056ce:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80056d2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80056d6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80056da:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056dc:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 80056e0:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 80056e4:	2000      	movs	r0, #0
 80056e6:	f88c 0003 	strb.w	r0, [ip, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056ea:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056ec:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80056ee:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056f0:	b2d3      	uxtb	r3, r2
 80056f2:	6860      	ldr	r0, [r4, #4]
 80056f4:	4283      	cmp	r3, r0
 80056f6:	d3e1      	bcc.n	80056bc <HAL_PCD_Init+0x2a>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056f8:	2300      	movs	r3, #0
 80056fa:	e016      	b.n	800572a <HAL_PCD_Init+0x98>
    hpcd->OUT_ep[i].is_in = 0U;
 80056fc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005700:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005704:	2100      	movs	r1, #0
 8005706:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 800570a:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800570e:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005712:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005716:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800571a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800571e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005722:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005726:	3301      	adds	r3, #1
 8005728:	b2db      	uxtb	r3, r3
 800572a:	4298      	cmp	r0, r3
 800572c:	d8e6      	bhi.n	80056fc <HAL_PCD_Init+0x6a>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800572e:	46a4      	mov	ip, r4
 8005730:	f85c 5b10 	ldr.w	r5, [ip], #16
 8005734:	46ee      	mov	lr, sp
 8005736:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800573a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800573e:	f8dc 3000 	ldr.w	r3, [ip]
 8005742:	f8ce 3000 	str.w	r3, [lr]
 8005746:	1d23      	adds	r3, r4, #4
 8005748:	cb0e      	ldmia	r3, {r1, r2, r3}
 800574a:	4628      	mov	r0, r5
 800574c:	f003 fa61 	bl	8008c12 <USB_DevInit>
  hpcd->USB_Address = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005756:	2301      	movs	r3, #1
 8005758:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 800575c:	69e3      	ldr	r3, [r4, #28]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d002      	beq.n	8005768 <HAL_PCD_Init+0xd6>
  return HAL_OK;
 8005762:	2000      	movs	r0, #0
}
 8005764:	b007      	add	sp, #28
 8005766:	bd30      	pop	{r4, r5, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005768:	4620      	mov	r0, r4
 800576a:	f000 fee8 	bl	800653e <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 800576e:	2000      	movs	r0, #0
 8005770:	e7f8      	b.n	8005764 <HAL_PCD_Init+0xd2>
    return HAL_ERROR;
 8005772:	2001      	movs	r0, #1
}
 8005774:	4770      	bx	lr

08005776 <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 8005776:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800577a:	2b01      	cmp	r3, #1
 800577c:	d00e      	beq.n	800579c <HAL_PCD_Start+0x26>
{
 800577e:	b510      	push	{r4, lr}
 8005780:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005782:	2301      	movs	r3, #1
 8005784:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005788:	6800      	ldr	r0, [r0, #0]
 800578a:	f003 fa2f 	bl	8008bec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800578e:	6820      	ldr	r0, [r4, #0]
 8005790:	f003 fd84 	bl	800929c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005794:	2000      	movs	r0, #0
 8005796:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800579a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800579c:	2002      	movs	r0, #2
}
 800579e:	4770      	bx	lr

080057a0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80057a0:	b570      	push	{r4, r5, r6, lr}
 80057a2:	4605      	mov	r5, r0
 80057a4:	460c      	mov	r4, r1
 80057a6:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057a8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80057ac:	f000 8109 	beq.w	80059c2 <HAL_PCD_EP_DB_Transmit+0x222>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80057b0:	6802      	ldr	r2, [r0, #0]
 80057b2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80057b6:	7809      	ldrb	r1, [r1, #0]
 80057b8:	00c8      	lsls	r0, r1, #3
 80057ba:	fa10 f383 	uxtah	r3, r0, r3
 80057be:	4413      	add	r3, r2
 80057c0:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80057c4:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 80057c8:	69a3      	ldr	r3, [r4, #24]
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d951      	bls.n	8005872 <HAL_PCD_EP_DB_Transmit+0xd2>
    {
      ep->xfer_len -= TxPctSize;
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80057d2:	69a3      	ldr	r3, [r4, #24]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d168      	bne.n	80058aa <HAL_PCD_EP_DB_Transmit+0x10a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057d8:	7863      	ldrb	r3, [r4, #1]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d14c      	bne.n	8005878 <HAL_PCD_EP_DB_Transmit+0xd8>
 80057de:	682a      	ldr	r2, [r5, #0]
 80057e0:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80057e4:	fa12 f383 	uxtah	r3, r2, r3
 80057e8:	4403      	add	r3, r0
 80057ea:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80057ee:	b292      	uxth	r2, r2
 80057f0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80057f4:	b292      	uxth	r2, r2
 80057f6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80057fa:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80057fe:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005802:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005806:	b292      	uxth	r2, r2
 8005808:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800580c:	6829      	ldr	r1, [r5, #0]
 800580e:	7862      	ldrb	r2, [r4, #1]
 8005810:	2a00      	cmp	r2, #0
 8005812:	d13d      	bne.n	8005890 <HAL_PCD_EP_DB_Transmit+0xf0>
 8005814:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8005818:	fa11 f383 	uxtah	r3, r1, r3
 800581c:	7822      	ldrb	r2, [r4, #0]
 800581e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005822:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005826:	b292      	uxth	r2, r2
 8005828:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800582c:	b292      	uxth	r2, r2
 800582e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005832:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005836:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800583a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800583e:	b292      	uxth	r2, r2
 8005840:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005844:	7821      	ldrb	r1, [r4, #0]
 8005846:	4628      	mov	r0, r5
 8005848:	f005 fb80 	bl	800af4c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800584c:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8005850:	d040      	beq.n	80058d4 <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005852:	682a      	ldr	r2, [r5, #0]
 8005854:	7821      	ldrb	r1, [r4, #0]
 8005856:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800585a:	b29b      	uxth	r3, r3
 800585c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800586c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8005870:	e030      	b.n	80058d4 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	61a3      	str	r3, [r4, #24]
 8005876:	e7ac      	b.n	80057d2 <HAL_PCD_EP_DB_Transmit+0x32>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005878:	2b01      	cmp	r3, #1
 800587a:	d1c7      	bne.n	800580c <HAL_PCD_EP_DB_Transmit+0x6c>
 800587c:	682a      	ldr	r2, [r5, #0]
 800587e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005882:	fa12 f383 	uxtah	r3, r2, r3
 8005886:	4403      	add	r3, r0
 8005888:	2200      	movs	r2, #0
 800588a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800588e:	e7bd      	b.n	800580c <HAL_PCD_EP_DB_Transmit+0x6c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005890:	2a01      	cmp	r2, #1
 8005892:	d1d7      	bne.n	8005844 <HAL_PCD_EP_DB_Transmit+0xa4>
 8005894:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8005898:	fa11 f383 	uxtah	r3, r1, r3
 800589c:	7821      	ldrb	r1, [r4, #0]
 800589e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80058a2:	2200      	movs	r2, #0
 80058a4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80058a8:	e7cc      	b.n	8005844 <HAL_PCD_EP_DB_Transmit+0xa4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80058aa:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80058ae:	d00d      	beq.n	80058cc <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80058b0:	6828      	ldr	r0, [r5, #0]
 80058b2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c8:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80058cc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d012      	beq.n	80058fa <HAL_PCD_EP_DB_Transmit+0x15a>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80058d4:	682a      	ldr	r2, [r5, #0]
 80058d6:	7821      	ldrb	r1, [r4, #0]
 80058d8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80058ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 80058f6:	2000      	movs	r0, #0
 80058f8:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 80058fa:	6963      	ldr	r3, [r4, #20]
 80058fc:	4413      	add	r3, r2
 80058fe:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8005900:	69e3      	ldr	r3, [r4, #28]
 8005902:	4413      	add	r3, r2
 8005904:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8005906:	6a21      	ldr	r1, [r4, #32]
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	4299      	cmp	r1, r3
 800590c:	d31b      	bcc.n	8005946 <HAL_PCD_EP_DB_Transmit+0x1a6>
          ep->xfer_len_db -= len;
 800590e:	1ac9      	subs	r1, r1, r3
 8005910:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005912:	7862      	ldrb	r2, [r4, #1]
 8005914:	2a00      	cmp	r2, #0
 8005916:	d13f      	bne.n	8005998 <HAL_PCD_EP_DB_Transmit+0x1f8>
 8005918:	6829      	ldr	r1, [r5, #0]
 800591a:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800591e:	fa11 f282 	uxtah	r2, r1, r2
 8005922:	7821      	ldrb	r1, [r4, #0]
 8005924:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005928:	2b3e      	cmp	r3, #62	; 0x3e
 800592a:	d918      	bls.n	800595e <HAL_PCD_EP_DB_Transmit+0x1be>
 800592c:	0959      	lsrs	r1, r3, #5
 800592e:	f013 0f1f 	tst.w	r3, #31
 8005932:	d100      	bne.n	8005936 <HAL_PCD_EP_DB_Transmit+0x196>
 8005934:	3901      	subs	r1, #1
 8005936:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800593a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800593e:	b289      	uxth	r1, r1
 8005940:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8005944:	e02a      	b.n	800599c <HAL_PCD_EP_DB_Transmit+0x1fc>
        else if (ep->xfer_len_db == 0U)
 8005946:	b921      	cbnz	r1, 8005952 <HAL_PCD_EP_DB_Transmit+0x1b2>
          ep->xfer_fill_db = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 800594e:	4613      	mov	r3, r2
 8005950:	e7df      	b.n	8005912 <HAL_PCD_EP_DB_Transmit+0x172>
          ep->xfer_fill_db = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8005958:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 800595a:	460b      	mov	r3, r1
 800595c:	e7d9      	b.n	8005912 <HAL_PCD_EP_DB_Transmit+0x172>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800595e:	b98b      	cbnz	r3, 8005984 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8005960:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8005964:	b289      	uxth	r1, r1
 8005966:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800596a:	b289      	uxth	r1, r1
 800596c:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8005970:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8005974:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005978:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800597c:	b289      	uxth	r1, r1
 800597e:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8005982:	e00b      	b.n	800599c <HAL_PCD_EP_DB_Transmit+0x1fc>
 8005984:	0859      	lsrs	r1, r3, #1
 8005986:	f013 0f01 	tst.w	r3, #1
 800598a:	d000      	beq.n	800598e <HAL_PCD_EP_DB_Transmit+0x1ee>
 800598c:	3101      	adds	r1, #1
 800598e:	0289      	lsls	r1, r1, #10
 8005990:	b289      	uxth	r1, r1
 8005992:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8005996:	e001      	b.n	800599c <HAL_PCD_EP_DB_Transmit+0x1fc>
 8005998:	2a01      	cmp	r2, #1
 800599a:	d006      	beq.n	80059aa <HAL_PCD_EP_DB_Transmit+0x20a>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800599c:	b29b      	uxth	r3, r3
 800599e:	8922      	ldrh	r2, [r4, #8]
 80059a0:	6961      	ldr	r1, [r4, #20]
 80059a2:	6828      	ldr	r0, [r5, #0]
 80059a4:	f003 fc89 	bl	80092ba <USB_WritePMA>
 80059a8:	e794      	b.n	80058d4 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80059aa:	6829      	ldr	r1, [r5, #0]
 80059ac:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80059b0:	fa11 f282 	uxtah	r2, r1, r2
 80059b4:	7821      	ldrb	r1, [r4, #0]
 80059b6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80059ba:	b299      	uxth	r1, r3
 80059bc:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80059c0:	e7ec      	b.n	800599c <HAL_PCD_EP_DB_Transmit+0x1fc>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059c2:	6802      	ldr	r2, [r0, #0]
 80059c4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80059c8:	7809      	ldrb	r1, [r1, #0]
 80059ca:	00c8      	lsls	r0, r1, #3
 80059cc:	fa10 f383 	uxtah	r3, r0, r3
 80059d0:	4413      	add	r3, r2
 80059d2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80059d6:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 80059da:	69a3      	ldr	r3, [r4, #24]
 80059dc:	4293      	cmp	r3, r2
 80059de:	d352      	bcc.n	8005a86 <HAL_PCD_EP_DB_Transmit+0x2e6>
      ep->xfer_len -= TxPctSize;
 80059e0:	1a9b      	subs	r3, r3, r2
 80059e2:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 80059e4:	69a3      	ldr	r3, [r4, #24]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d169      	bne.n	8005abe <HAL_PCD_EP_DB_Transmit+0x31e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059ea:	7863      	ldrb	r3, [r4, #1]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d14d      	bne.n	8005a8c <HAL_PCD_EP_DB_Transmit+0x2ec>
 80059f0:	682a      	ldr	r2, [r5, #0]
 80059f2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80059f6:	fa12 f383 	uxtah	r3, r2, r3
 80059fa:	4418      	add	r0, r3
 80059fc:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 8005a0c:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 8005a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a1e:	6829      	ldr	r1, [r5, #0]
 8005a20:	7862      	ldrb	r2, [r4, #1]
 8005a22:	2a00      	cmp	r2, #0
 8005a24:	d13e      	bne.n	8005aa4 <HAL_PCD_EP_DB_Transmit+0x304>
 8005a26:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8005a2a:	fa11 f383 	uxtah	r3, r1, r3
 8005a2e:	7822      	ldrb	r2, [r4, #0]
 8005a30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a34:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005a38:	b292      	uxth	r2, r2
 8005a3a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005a3e:	b292      	uxth	r2, r2
 8005a40:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005a44:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005a48:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005a4c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005a50:	b292      	uxth	r2, r2
 8005a52:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a56:	7821      	ldrb	r1, [r4, #0]
 8005a58:	4628      	mov	r0, r5
 8005a5a:	f005 fa77 	bl	800af4c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005a5e:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8005a62:	f47f af37 	bne.w	80058d4 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005a66:	682a      	ldr	r2, [r5, #0]
 8005a68:	7821      	ldrb	r1, [r4, #0]
 8005a6a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a80:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8005a84:	e726      	b.n	80058d4 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61a3      	str	r3, [r4, #24]
 8005a8a:	e7ab      	b.n	80059e4 <HAL_PCD_EP_DB_Transmit+0x244>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d1c6      	bne.n	8005a1e <HAL_PCD_EP_DB_Transmit+0x27e>
 8005a90:	682a      	ldr	r2, [r5, #0]
 8005a92:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005a96:	fa12 f383 	uxtah	r3, r2, r3
 8005a9a:	4418      	add	r0, r3
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 8005aa2:	e7bc      	b.n	8005a1e <HAL_PCD_EP_DB_Transmit+0x27e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005aa4:	2a01      	cmp	r2, #1
 8005aa6:	d1d6      	bne.n	8005a56 <HAL_PCD_EP_DB_Transmit+0x2b6>
 8005aa8:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8005aac:	fa11 f383 	uxtah	r3, r1, r3
 8005ab0:	7821      	ldrb	r1, [r4, #0]
 8005ab2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005abc:	e7cb      	b.n	8005a56 <HAL_PCD_EP_DB_Transmit+0x2b6>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005abe:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8005ac2:	d10d      	bne.n	8005ae0 <HAL_PCD_EP_DB_Transmit+0x340>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005ac4:	6828      	ldr	r0, [r5, #0]
 8005ac6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005adc:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8005ae0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	f47f aef5 	bne.w	80058d4 <HAL_PCD_EP_DB_Transmit+0x134>
        ep->xfer_buff += TxPctSize;
 8005aea:	6963      	ldr	r3, [r4, #20]
 8005aec:	4413      	add	r3, r2
 8005aee:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8005af0:	69e3      	ldr	r3, [r4, #28]
 8005af2:	4413      	add	r3, r2
 8005af4:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8005af6:	6a21      	ldr	r1, [r4, #32]
 8005af8:	6923      	ldr	r3, [r4, #16]
 8005afa:	4299      	cmp	r1, r3
 8005afc:	d31b      	bcc.n	8005b36 <HAL_PCD_EP_DB_Transmit+0x396>
          ep->xfer_len_db -= len;
 8005afe:	1ac9      	subs	r1, r1, r3
 8005b00:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b02:	6829      	ldr	r1, [r5, #0]
 8005b04:	7862      	ldrb	r2, [r4, #1]
 8005b06:	2a00      	cmp	r2, #0
 8005b08:	d13e      	bne.n	8005b88 <HAL_PCD_EP_DB_Transmit+0x3e8>
 8005b0a:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8005b0e:	fa11 f282 	uxtah	r2, r1, r2
 8005b12:	7821      	ldrb	r1, [r4, #0]
 8005b14:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005b18:	2b3e      	cmp	r3, #62	; 0x3e
 8005b1a:	d918      	bls.n	8005b4e <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005b1c:	0959      	lsrs	r1, r3, #5
 8005b1e:	f013 0f1f 	tst.w	r3, #31
 8005b22:	d100      	bne.n	8005b26 <HAL_PCD_EP_DB_Transmit+0x386>
 8005b24:	3901      	subs	r1, #1
 8005b26:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8005b2a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005b2e:	b289      	uxth	r1, r1
 8005b30:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8005b34:	e02a      	b.n	8005b8c <HAL_PCD_EP_DB_Transmit+0x3ec>
        else if (ep->xfer_len_db == 0U)
 8005b36:	b921      	cbnz	r1, 8005b42 <HAL_PCD_EP_DB_Transmit+0x3a2>
          ep->xfer_fill_db = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 8005b3e:	4613      	mov	r3, r2
 8005b40:	e7df      	b.n	8005b02 <HAL_PCD_EP_DB_Transmit+0x362>
          ep->xfer_len_db = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8005b46:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	e7d9      	b.n	8005b02 <HAL_PCD_EP_DB_Transmit+0x362>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b4e:	b98b      	cbnz	r3, 8005b74 <HAL_PCD_EP_DB_Transmit+0x3d4>
 8005b50:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8005b54:	b289      	uxth	r1, r1
 8005b56:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8005b5a:	b289      	uxth	r1, r1
 8005b5c:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8005b60:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8005b64:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005b68:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005b6c:	b289      	uxth	r1, r1
 8005b6e:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8005b72:	e00b      	b.n	8005b8c <HAL_PCD_EP_DB_Transmit+0x3ec>
 8005b74:	0859      	lsrs	r1, r3, #1
 8005b76:	f013 0f01 	tst.w	r3, #1
 8005b7a:	d000      	beq.n	8005b7e <HAL_PCD_EP_DB_Transmit+0x3de>
 8005b7c:	3101      	adds	r1, #1
 8005b7e:	0289      	lsls	r1, r1, #10
 8005b80:	b289      	uxth	r1, r1
 8005b82:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8005b86:	e001      	b.n	8005b8c <HAL_PCD_EP_DB_Transmit+0x3ec>
 8005b88:	2a01      	cmp	r2, #1
 8005b8a:	d006      	beq.n	8005b9a <HAL_PCD_EP_DB_Transmit+0x3fa>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	8962      	ldrh	r2, [r4, #10]
 8005b90:	6961      	ldr	r1, [r4, #20]
 8005b92:	6828      	ldr	r0, [r5, #0]
 8005b94:	f003 fb91 	bl	80092ba <USB_WritePMA>
 8005b98:	e69c      	b.n	80058d4 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b9a:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8005b9e:	fa11 f282 	uxtah	r2, r1, r2
 8005ba2:	7821      	ldrb	r1, [r4, #0]
 8005ba4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005ba8:	b299      	uxth	r1, r3
 8005baa:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8005bae:	e7ed      	b.n	8005b8c <HAL_PCD_EP_DB_Transmit+0x3ec>

08005bb0 <PCD_EP_ISR_Handler>:
{
 8005bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb4:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005bb6:	e0ca      	b.n	8005d4e <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005bb8:	8803      	ldrh	r3, [r0, #0]
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005bd0:	6829      	ldr	r1, [r5, #0]
 8005bd2:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8005bd6:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8005bda:	00d2      	lsls	r2, r2, #3
 8005bdc:	fa12 f383 	uxtah	r3, r2, r3
 8005be0:	440b      	add	r3, r1
 8005be2:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8005be6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bea:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8005bec:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8005bee:	4413      	add	r3, r2
 8005bf0:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	f005 f9a9 	bl	800af4c <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005bfa:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 80a5 	beq.w	8005d4e <PCD_EP_ISR_Handler+0x19e>
 8005c04:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f040 80a1 	bne.w	8005d4e <PCD_EP_ISR_Handler+0x19e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005c0c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8005c10:	682a      	ldr	r2, [r5, #0]
 8005c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c16:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8005c20:	e095      	b.n	8005d4e <PCD_EP_ISR_Handler+0x19e>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005c22:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005c26:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8005c2a:	00d2      	lsls	r2, r2, #3
 8005c2c:	fa12 f383 	uxtah	r3, r2, r3
 8005c30:	4403      	add	r3, r0
 8005c32:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8005c36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c3a:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005c3e:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8005c42:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 8005c46:	f003 fefc 	bl	8009a42 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005c4a:	682a      	ldr	r2, [r5, #0]
 8005c4c:	8813      	ldrh	r3, [r2, #0]
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c52:	051b      	lsls	r3, r3, #20
 8005c54:	0d1b      	lsrs	r3, r3, #20
 8005c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c5a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	f005 f961 	bl	800af24 <HAL_PCD_SetupStageCallback>
 8005c62:	e074      	b.n	8005d4e <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005c64:	b989      	cbnz	r1, 8005c8a <PCD_EP_ISR_Handler+0xda>
 8005c66:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005c6a:	b292      	uxth	r2, r2
 8005c6c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005c70:	b292      	uxth	r2, r2
 8005c72:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005c76:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005c7a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005c7e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005c82:	b292      	uxth	r2, r2
 8005c84:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005c88:	e0bf      	b.n	8005e0a <PCD_EP_ISR_Handler+0x25a>
 8005c8a:	084a      	lsrs	r2, r1, #1
 8005c8c:	f011 0f01 	tst.w	r1, #1
 8005c90:	d000      	beq.n	8005c94 <PCD_EP_ISR_Handler+0xe4>
 8005c92:	3201      	adds	r2, #1
 8005c94:	0292      	lsls	r2, r2, #10
 8005c96:	b292      	uxth	r2, r2
 8005c98:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005c9c:	e0b5      	b.n	8005e0a <PCD_EP_ISR_Handler+0x25a>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005c9e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8005ca2:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005ca4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005ca8:	f040 80be 	bne.w	8005e28 <PCD_EP_ISR_Handler+0x278>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005cac:	f016 0f80 	tst.w	r6, #128	; 0x80
 8005cb0:	d04d      	beq.n	8005d4e <PCD_EP_ISR_Handler+0x19e>
        ep = &hpcd->IN_ep[epindex];
 8005cb2:	1c62      	adds	r2, r4, #1
 8005cb4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005cb8:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005cbc:	6828      	ldr	r0, [r5, #0]
 8005cbe:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->type != EP_TYPE_BULK)
 8005cda:	78cb      	ldrb	r3, [r1, #3]
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	f000 81a7 	beq.w	8006030 <PCD_EP_ISR_Handler+0x480>
          ep->xfer_len = 0U;
 8005ce2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005ce6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005cea:	2200      	movs	r2, #0
 8005cec:	641a      	str	r2, [r3, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8005cee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cf2:	b323      	cbz	r3, 8005d3e <PCD_EP_ISR_Handler+0x18e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005cf4:	f016 0f40 	tst.w	r6, #64	; 0x40
 8005cf8:	f000 8163 	beq.w	8005fc2 <PCD_EP_ISR_Handler+0x412>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005cfc:	784b      	ldrb	r3, [r1, #1]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f040 814c 	bne.w	8005f9c <PCD_EP_ISR_Handler+0x3ec>
 8005d04:	682a      	ldr	r2, [r5, #0]
 8005d06:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005d0a:	fa12 f383 	uxtah	r3, r2, r3
 8005d0e:	1c62      	adds	r2, r4, #1
 8005d10:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005d14:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8005d18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d1c:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8005d20:	b292      	uxth	r2, r2
 8005d22:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005d26:	b292      	uxth	r2, r2
 8005d28:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8005d2c:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8005d30:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005d34:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005d38:	b292      	uxth	r2, r2
 8005d3a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d3e:	3401      	adds	r4, #1
 8005d40:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005d44:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 8005d48:	4628      	mov	r0, r5
 8005d4a:	f005 f8ff 	bl	800af4c <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005d4e:	6828      	ldr	r0, [r5, #0]
 8005d50:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8005d54:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005d58:	f000 81ae 	beq.w	80060b8 <PCD_EP_ISR_Handler+0x508>
    wIstr = hpcd->Instance->ISTR;
 8005d5c:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8005d60:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8005d62:	f014 040f 	ands.w	r4, r4, #15
 8005d66:	d19a      	bne.n	8005c9e <PCD_EP_ISR_Handler+0xee>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005d68:	f013 0f10 	tst.w	r3, #16
 8005d6c:	f43f af24 	beq.w	8005bb8 <PCD_EP_ISR_Handler+0x8>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005d70:	8803      	ldrh	r3, [r0, #0]
 8005d72:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005d74:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005d78:	f47f af53 	bne.w	8005c22 <PCD_EP_ISR_Handler+0x72>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005d7c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005d80:	d0e5      	beq.n	8005d4e <PCD_EP_ISR_Handler+0x19e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005d82:	8803      	ldrh	r3, [r0, #0]
 8005d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d88:	051b      	lsls	r3, r3, #20
 8005d8a:	0d1b      	lsrs	r3, r3, #20
 8005d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d90:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d92:	6828      	ldr	r0, [r5, #0]
 8005d94:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005d98:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8005d9c:	00d2      	lsls	r2, r2, #3
 8005d9e:	fa12 f383 	uxtah	r3, r2, r3
 8005da2:	4403      	add	r3, r0
 8005da4:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8005da8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dac:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005db0:	b18b      	cbz	r3, 8005dd6 <PCD_EP_ISR_Handler+0x226>
 8005db2:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 8005db6:	b171      	cbz	r1, 8005dd6 <PCD_EP_ISR_Handler+0x226>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005db8:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8005dbc:	f003 fe41 	bl	8009a42 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8005dc0:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 8005dc4:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 8005dc8:	4413      	add	r3, r2
 8005dca:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005dce:	2100      	movs	r1, #0
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	f005 f8af 	bl	800af34 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005dd6:	682b      	ldr	r3, [r5, #0]
 8005dd8:	881a      	ldrh	r2, [r3, #0]
 8005dda:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005dde:	d1b6      	bne.n	8005d4e <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005de0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005de4:	fa13 f382 	uxtah	r3, r3, r2
 8005de8:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 8005dec:	293e      	cmp	r1, #62	; 0x3e
 8005dee:	f67f af39 	bls.w	8005c64 <PCD_EP_ISR_Handler+0xb4>
 8005df2:	094a      	lsrs	r2, r1, #5
 8005df4:	f011 0f1f 	tst.w	r1, #31
 8005df8:	d100      	bne.n	8005dfc <PCD_EP_ISR_Handler+0x24c>
 8005dfa:	3a01      	subs	r2, #1
 8005dfc:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8005e00:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005e04:	b292      	uxth	r2, r2
 8005e06:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005e0a:	682a      	ldr	r2, [r5, #0]
 8005e0c:	8813      	ldrh	r3, [r2, #0]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e18:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e24:	8013      	strh	r3, [r2, #0]
 8005e26:	e792      	b.n	8005d4e <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005e28:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8005e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e30:	051b      	lsls	r3, r3, #20
 8005e32:	0d1b      	lsrs	r3, r3, #20
 8005e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e38:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8005e3c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005e40:	00c9      	lsls	r1, r1, #3
 8005e42:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005e46:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 8005e4a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005e4e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005e52:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d140      	bne.n	8005edc <PCD_EP_ISR_Handler+0x32c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005e5a:	6828      	ldr	r0, [r5, #0]
 8005e5c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005e60:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005e64:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005e68:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8005e6c:	00d2      	lsls	r2, r2, #3
 8005e6e:	fa12 f383 	uxtah	r3, r2, r3
 8005e72:	4403      	add	r3, r0
 8005e74:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8005e78:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8005e7c:	bb17      	cbnz	r7, 8005ec4 <PCD_EP_ISR_Handler+0x314>
        ep->xfer_count += count;
 8005e7e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005e82:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005e86:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8005e8a:	443a      	add	r2, r7
 8005e8c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8005e90:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8005e94:	443a      	add	r2, r7
 8005e96:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005e9a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8005e9e:	b13b      	cbz	r3, 8005eb0 <PCD_EP_ISR_Handler+0x300>
 8005ea0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005ea4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005ea8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8005eac:	429f      	cmp	r7, r3
 8005eae:	d270      	bcs.n	8005f92 <PCD_EP_ISR_Handler+0x3e2>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005eb0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005eb4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005eb8:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	f005 f839 	bl	800af34 <HAL_PCD_DataOutStageCallback>
 8005ec2:	e6f3      	b.n	8005cac <PCD_EP_ISR_Handler+0xfc>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005ec4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005ec8:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005ecc:	463b      	mov	r3, r7
 8005ece:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8005ed2:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005ed6:	f003 fdb4 	bl	8009a42 <USB_ReadPMA>
 8005eda:	e7d0      	b.n	8005e7e <PCD_EP_ISR_Handler+0x2ce>
          if (ep->type == EP_TYPE_BULK)
 8005edc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005ee0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005ee4:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d033      	beq.n	8005f54 <PCD_EP_ISR_Handler+0x3a4>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005eec:	6829      	ldr	r1, [r5, #0]
 8005eee:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005ef2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005ef6:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8005efa:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f10:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005f14:	6828      	ldr	r0, [r5, #0]
 8005f16:	f892 3168 	ldrb.w	r3, [r2, #360]	; 0x168
 8005f1a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005f1e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005f22:	d01e      	beq.n	8005f62 <PCD_EP_ISR_Handler+0x3b2>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005f24:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	fa13 f382 	uxtah	r3, r3, r2
 8005f2e:	4403      	add	r3, r0
 8005f30:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	; 0x402
 8005f34:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8005f38:	2f00      	cmp	r7, #0
 8005f3a:	d0a0      	beq.n	8005e7e <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005f3c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005f40:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005f44:	463b      	mov	r3, r7
 8005f46:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8005f4a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005f4e:	f003 fd78 	bl	8009a42 <USB_ReadPMA>
 8005f52:	e794      	b.n	8005e7e <PCD_EP_ISR_Handler+0x2ce>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005f54:	4632      	mov	r2, r6
 8005f56:	4641      	mov	r1, r8
 8005f58:	4628      	mov	r0, r5
 8005f5a:	f7ff fb0e 	bl	800557a <HAL_PCD_EP_DB_Receive>
 8005f5e:	4607      	mov	r7, r0
 8005f60:	e78d      	b.n	8005e7e <PCD_EP_ISR_Handler+0x2ce>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005f62:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	fa13 f382 	uxtah	r3, r3, r2
 8005f6c:	4403      	add	r3, r0
 8005f6e:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8005f72:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8005f76:	2f00      	cmp	r7, #0
 8005f78:	d081      	beq.n	8005e7e <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005f7a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005f7e:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005f82:	463b      	mov	r3, r7
 8005f84:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8005f88:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005f8c:	f003 fd59 	bl	8009a42 <USB_ReadPMA>
 8005f90:	e775      	b.n	8005e7e <PCD_EP_ISR_Handler+0x2ce>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005f92:	4641      	mov	r1, r8
 8005f94:	6828      	ldr	r0, [r5, #0]
 8005f96:	f003 f9a4 	bl	80092e2 <USB_EPStartXfer>
 8005f9a:	e687      	b.n	8005cac <PCD_EP_ISR_Handler+0xfc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	f47f aece 	bne.w	8005d3e <PCD_EP_ISR_Handler+0x18e>
 8005fa2:	682a      	ldr	r2, [r5, #0]
 8005fa4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005fa8:	fa12 f383 	uxtah	r3, r2, r3
 8005fac:	1c62      	adds	r2, r4, #1
 8005fae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005fb2:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8005fb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8005fc0:	e6bd      	b.n	8005d3e <PCD_EP_ISR_Handler+0x18e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005fc2:	6829      	ldr	r1, [r5, #0]
 8005fc4:	1c63      	adds	r3, r4, #1
 8005fc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005fca:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005fce:	785a      	ldrb	r2, [r3, #1]
 8005fd0:	b9e2      	cbnz	r2, 800600c <PCD_EP_ISR_Handler+0x45c>
 8005fd2:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8005fd6:	fa11 f383 	uxtah	r3, r1, r3
 8005fda:	1c62      	adds	r2, r4, #1
 8005fdc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005fe0:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8005fe4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fe8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005fec:	b292      	uxth	r2, r2
 8005fee:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005ff2:	b292      	uxth	r2, r2
 8005ff4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005ff8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005ffc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006000:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006004:	b292      	uxth	r2, r2
 8006006:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800600a:	e698      	b.n	8005d3e <PCD_EP_ISR_Handler+0x18e>
 800600c:	2a01      	cmp	r2, #1
 800600e:	f47f ae96 	bne.w	8005d3e <PCD_EP_ISR_Handler+0x18e>
 8006012:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8006016:	fa11 f383 	uxtah	r3, r1, r3
 800601a:	1c62      	adds	r2, r4, #1
 800601c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006020:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8006024:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006028:	2200      	movs	r2, #0
 800602a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800602e:	e686      	b.n	8005d3e <PCD_EP_ISR_Handler+0x18e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006030:	f416 7f80 	tst.w	r6, #256	; 0x100
 8006034:	d13b      	bne.n	80060ae <PCD_EP_ISR_Handler+0x4fe>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006036:	6828      	ldr	r0, [r5, #0]
 8006038:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800603c:	1c62      	adds	r2, r4, #1
 800603e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006042:	f815 6032 	ldrb.w	r6, [r5, r2, lsl #3]
 8006046:	00f2      	lsls	r2, r6, #3
 8006048:	fa12 f383 	uxtah	r3, r2, r3
 800604c:	4403      	add	r3, r0
 800604e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8006052:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 8006056:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800605a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800605e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006060:	429a      	cmp	r2, r3
 8006062:	d910      	bls.n	8006086 <PCD_EP_ISR_Handler+0x4d6>
              ep->xfer_len -= TxPctSize;
 8006064:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 8006068:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 800606c:	1ad2      	subs	r2, r2, r3
 800606e:	643a      	str	r2, [r7, #64]	; 0x40
            if (ep->xfer_len == 0U)
 8006070:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8006074:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8006078:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800607a:	b95a      	cbnz	r2, 8006094 <PCD_EP_ISR_Handler+0x4e4>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800607c:	4631      	mov	r1, r6
 800607e:	4628      	mov	r0, r5
 8006080:	f004 ff64 	bl	800af4c <HAL_PCD_DataInStageCallback>
 8006084:	e663      	b.n	8005d4e <PCD_EP_ISR_Handler+0x19e>
              ep->xfer_len = 0U;
 8006086:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800608a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800608e:	2700      	movs	r7, #0
 8006090:	6417      	str	r7, [r2, #64]	; 0x40
 8006092:	e7ed      	b.n	8006070 <PCD_EP_ISR_Handler+0x4c0>
              ep->xfer_buff += TxPctSize;
 8006094:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8006098:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800609c:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 800609e:	441e      	add	r6, r3
 80060a0:	63d6      	str	r6, [r2, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 80060a2:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80060a4:	4423      	add	r3, r4
 80060a6:	6453      	str	r3, [r2, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060a8:	f003 f91b 	bl	80092e2 <USB_EPStartXfer>
 80060ac:	e64f      	b.n	8005d4e <PCD_EP_ISR_Handler+0x19e>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80060ae:	4632      	mov	r2, r6
 80060b0:	4628      	mov	r0, r5
 80060b2:	f7ff fb75 	bl	80057a0 <HAL_PCD_EP_DB_Transmit>
 80060b6:	e64a      	b.n	8005d4e <PCD_EP_ISR_Handler+0x19e>
}
 80060b8:	2000      	movs	r0, #0
 80060ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080060be <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80060be:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d00d      	beq.n	80060e2 <HAL_PCD_SetAddress+0x24>
{
 80060c6:	b510      	push	{r4, lr}
 80060c8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80060ca:	2301      	movs	r3, #1
 80060cc:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80060d0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80060d4:	6800      	ldr	r0, [r0, #0]
 80060d6:	f003 f8db 	bl	8009290 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80060da:	2000      	movs	r0, #0
 80060dc:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80060e0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80060e2:	2002      	movs	r0, #2
}
 80060e4:	4770      	bx	lr

080060e6 <HAL_PCD_IRQHandler>:
{
 80060e6:	b510      	push	{r4, lr}
 80060e8:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80060ea:	6800      	ldr	r0, [r0, #0]
 80060ec:	f003 f8e1 	bl	80092b2 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80060f0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80060f4:	d123      	bne.n	800613e <HAL_PCD_IRQHandler+0x58>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80060f6:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80060fa:	d124      	bne.n	8006146 <HAL_PCD_IRQHandler+0x60>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80060fc:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8006100:	d132      	bne.n	8006168 <HAL_PCD_IRQHandler+0x82>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006102:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8006106:	d139      	bne.n	800617c <HAL_PCD_IRQHandler+0x96>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006108:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 800610c:	d140      	bne.n	8006190 <HAL_PCD_IRQHandler+0xaa>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800610e:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8006112:	d167      	bne.n	80061e4 <HAL_PCD_IRQHandler+0xfe>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006114:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006118:	f040 8081 	bne.w	800621e <HAL_PCD_IRQHandler+0x138>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800611c:	f410 7f00 	tst.w	r0, #512	; 0x200
 8006120:	f040 80ad 	bne.w	800627e <HAL_PCD_IRQHandler+0x198>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006124:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006128:	d027      	beq.n	800617a <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800612a:	6822      	ldr	r2, [r4, #0]
 800612c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006130:	b29b      	uxth	r3, r3
 8006132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006136:	b29b      	uxth	r3, r3
 8006138:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 800613c:	e01d      	b.n	800617a <HAL_PCD_IRQHandler+0x94>
    (void)PCD_EP_ISR_Handler(hpcd);
 800613e:	4620      	mov	r0, r4
 8006140:	f7ff fd36 	bl	8005bb0 <PCD_EP_ISR_Handler>
    return;
 8006144:	e019      	b.n	800617a <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006146:	6822      	ldr	r2, [r4, #0]
 8006148:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800614c:	b29b      	uxth	r3, r3
 800614e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006152:	b29b      	uxth	r3, r3
 8006154:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8006158:	4620      	mov	r0, r4
 800615a:	f004 ff08 	bl	800af6e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800615e:	2100      	movs	r1, #0
 8006160:	4620      	mov	r0, r4
 8006162:	f7ff ffac 	bl	80060be <HAL_PCD_SetAddress>
    return;
 8006166:	e008      	b.n	800617a <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006168:	6822      	ldr	r2, [r4, #0]
 800616a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800616e:	b29b      	uxth	r3, r3
 8006170:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006174:	b29b      	uxth	r3, r3
 8006176:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 800617a:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800617c:	6822      	ldr	r2, [r4, #0]
 800617e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006182:	b29b      	uxth	r3, r3
 8006184:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006188:	b29b      	uxth	r3, r3
 800618a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 800618e:	e7f4      	b.n	800617a <HAL_PCD_IRQHandler+0x94>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006190:	6822      	ldr	r2, [r4, #0]
 8006192:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8006196:	b29b      	uxth	r3, r3
 8006198:	f023 0304 	bic.w	r3, r3, #4
 800619c:	b29b      	uxth	r3, r3
 800619e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80061a2:	6822      	ldr	r2, [r4, #0]
 80061a4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f023 0308 	bic.w	r3, r3, #8
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 80061b4:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d00c      	beq.n	80061d6 <HAL_PCD_IRQHandler+0xf0>
    HAL_PCD_ResumeCallback(hpcd);
 80061bc:	4620      	mov	r0, r4
 80061be:	f004 fef9 	bl	800afb4 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80061c2:	6822      	ldr	r2, [r4, #0]
 80061c4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 80061d4:	e7d1      	b.n	800617a <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 80061d6:	2100      	movs	r1, #0
 80061d8:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80061dc:	4620      	mov	r0, r4
 80061de:	f004 ffa1 	bl	800b124 <HAL_PCDEx_LPM_Callback>
 80061e2:	e7eb      	b.n	80061bc <HAL_PCD_IRQHandler+0xd6>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80061e4:	6822      	ldr	r2, [r4, #0]
 80061e6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	f043 0308 	orr.w	r3, r3, #8
 80061f0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80061f4:	6822      	ldr	r2, [r4, #0]
 80061f6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006200:	b29b      	uxth	r3, r3
 8006202:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006206:	6822      	ldr	r2, [r4, #0]
 8006208:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800620c:	b29b      	uxth	r3, r3
 800620e:	f043 0304 	orr.w	r3, r3, #4
 8006212:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8006216:	4620      	mov	r0, r4
 8006218:	f004 febc 	bl	800af94 <HAL_PCD_SuspendCallback>
    return;
 800621c:	e7ad      	b.n	800617a <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800621e:	6822      	ldr	r2, [r4, #0]
 8006220:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006224:	b29b      	uxth	r3, r3
 8006226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800622a:	b29b      	uxth	r3, r3
 800622c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006230:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8006234:	b9fb      	cbnz	r3, 8006276 <HAL_PCD_IRQHandler+0x190>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006236:	6822      	ldr	r2, [r4, #0]
 8006238:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800623c:	b29b      	uxth	r3, r3
 800623e:	f043 0304 	orr.w	r3, r3, #4
 8006242:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006246:	6822      	ldr	r2, [r4, #0]
 8006248:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800624c:	b29b      	uxth	r3, r3
 800624e:	f043 0308 	orr.w	r3, r3, #8
 8006252:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8006256:	2101      	movs	r1, #1
 8006258:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006262:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8006266:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800626a:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800626e:	4620      	mov	r0, r4
 8006270:	f004 ff58 	bl	800b124 <HAL_PCDEx_LPM_Callback>
 8006274:	e781      	b.n	800617a <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_SuspendCallback(hpcd);
 8006276:	4620      	mov	r0, r4
 8006278:	f004 fe8c 	bl	800af94 <HAL_PCD_SuspendCallback>
    return;
 800627c:	e77d      	b.n	800617a <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800627e:	6822      	ldr	r2, [r4, #0]
 8006280:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006284:	b29b      	uxth	r3, r3
 8006286:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800628a:	b29b      	uxth	r3, r3
 800628c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8006290:	4620      	mov	r0, r4
 8006292:	f004 fe66 	bl	800af62 <HAL_PCD_SOFCallback>
    return;
 8006296:	e770      	b.n	800617a <HAL_PCD_IRQHandler+0x94>

08006298 <HAL_PCD_EP_Open>:
{
 8006298:	b510      	push	{r4, lr}
 800629a:	4604      	mov	r4, r0
 800629c:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800629e:	f011 0f80 	tst.w	r1, #128	; 0x80
 80062a2:	d12a      	bne.n	80062fa <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062a4:	f001 0007 	and.w	r0, r1, #7
 80062a8:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80062ac:	00c9      	lsls	r1, r1, #3
 80062ae:	f501 7eb4 	add.w	lr, r1, #360	; 0x168
 80062b2:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 80062b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80062ba:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80062be:	f04f 0e00 	mov.w	lr, #0
 80062c2:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80062c6:	f00c 0c07 	and.w	ip, ip, #7
 80062ca:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 80062ce:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 80062d0:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80062d2:	784a      	ldrb	r2, [r1, #1]
 80062d4:	b10a      	cbz	r2, 80062da <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 80062d6:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d019      	beq.n	8006312 <HAL_PCD_EP_Open+0x7a>
  __HAL_LOCK(hpcd);
 80062de:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d018      	beq.n	8006318 <HAL_PCD_EP_Open+0x80>
 80062e6:	2301      	movs	r3, #1
 80062e8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80062ec:	6820      	ldr	r0, [r4, #0]
 80062ee:	f002 fca1 	bl	8008c34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062f2:	2000      	movs	r0, #0
 80062f4:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80062f8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062fa:	f001 0007 	and.w	r0, r1, #7
 80062fe:	3001      	adds	r0, #1
 8006300:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8006304:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 8006308:	f04f 0e01 	mov.w	lr, #1
 800630c:	f881 e001 	strb.w	lr, [r1, #1]
 8006310:	e7d9      	b.n	80062c6 <HAL_PCD_EP_Open+0x2e>
    ep->data_pid_start = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	710b      	strb	r3, [r1, #4]
 8006316:	e7e2      	b.n	80062de <HAL_PCD_EP_Open+0x46>
  __HAL_LOCK(hpcd);
 8006318:	2002      	movs	r0, #2
 800631a:	e7ed      	b.n	80062f8 <HAL_PCD_EP_Open+0x60>

0800631c <HAL_PCD_EP_Close>:
{
 800631c:	b510      	push	{r4, lr}
 800631e:	4604      	mov	r4, r0
 8006320:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8006322:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006326:	d11f      	bne.n	8006368 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006328:	f001 0207 	and.w	r2, r1, #7
 800632c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8006330:	00c9      	lsls	r1, r1, #3
 8006332:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8006336:	4401      	add	r1, r0
    ep->is_in = 0U;
 8006338:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800633c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8006340:	2000      	movs	r0, #0
 8006342:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800634c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8006350:	2b01      	cmp	r3, #1
 8006352:	d013      	beq.n	800637c <HAL_PCD_EP_Close+0x60>
 8006354:	2301      	movs	r3, #1
 8006356:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800635a:	6820      	ldr	r0, [r4, #0]
 800635c:	f002 fe37 	bl	8008fce <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006360:	2000      	movs	r0, #0
 8006362:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8006366:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006368:	f001 0207 	and.w	r2, r1, #7
 800636c:	3201      	adds	r2, #1
 800636e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8006372:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8006376:	2001      	movs	r0, #1
 8006378:	7048      	strb	r0, [r1, #1]
 800637a:	e7e4      	b.n	8006346 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 800637c:	2002      	movs	r0, #2
 800637e:	e7f2      	b.n	8006366 <HAL_PCD_EP_Close+0x4a>

08006380 <HAL_PCD_EP_Receive>:
{
 8006380:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006382:	f001 0407 	and.w	r4, r1, #7
 8006386:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800638a:	00c9      	lsls	r1, r1, #3
 800638c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8006390:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8006392:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8006396:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800639a:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 800639e:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
  ep->is_in = 0U;
 80063a8:	f88c 3169 	strb.w	r3, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80063ac:	f88c 4168 	strb.w	r4, [ip, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80063b0:	b924      	cbnz	r4, 80063bc <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80063b2:	6800      	ldr	r0, [r0, #0]
 80063b4:	f002 ff95 	bl	80092e2 <USB_EPStartXfer>
}
 80063b8:	2000      	movs	r0, #0
 80063ba:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80063bc:	6800      	ldr	r0, [r0, #0]
 80063be:	f002 ff90 	bl	80092e2 <USB_EPStartXfer>
 80063c2:	e7f9      	b.n	80063b8 <HAL_PCD_EP_Receive+0x38>

080063c4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80063c4:	f001 0107 	and.w	r1, r1, #7
 80063c8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80063cc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 80063d0:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 80063d4:	4770      	bx	lr

080063d6 <HAL_PCD_EP_Transmit>:
{
 80063d6:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063d8:	f001 0407 	and.w	r4, r1, #7
 80063dc:	f104 0c01 	add.w	ip, r4, #1
 80063e0:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 80063e4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 80063e8:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
 80063ec:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 80063f0:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
  ep->xfer_len = len;
 80063f4:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 80063f8:	2201      	movs	r2, #1
 80063fa:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
  ep->xfer_len_db = len;
 80063fe:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
  ep->xfer_count = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44
  ep->is_in = 1U;
 8006408:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800640a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800640e:	f800 403c 	strb.w	r4, [r0, ip, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006412:	b924      	cbnz	r4, 800641e <HAL_PCD_EP_Transmit+0x48>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006414:	6800      	ldr	r0, [r0, #0]
 8006416:	f002 ff64 	bl	80092e2 <USB_EPStartXfer>
}
 800641a:	2000      	movs	r0, #0
 800641c:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800641e:	6800      	ldr	r0, [r0, #0]
 8006420:	f002 ff5f 	bl	80092e2 <USB_EPStartXfer>
 8006424:	e7f9      	b.n	800641a <HAL_PCD_EP_Transmit+0x44>

08006426 <HAL_PCD_EP_SetStall>:
{
 8006426:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006428:	f001 0207 	and.w	r2, r1, #7
 800642c:	6841      	ldr	r1, [r0, #4]
 800642e:	428a      	cmp	r2, r1
 8006430:	d82a      	bhi.n	8006488 <HAL_PCD_EP_SetStall+0x62>
{
 8006432:	b510      	push	{r4, lr}
 8006434:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8006436:	f013 0f80 	tst.w	r3, #128	; 0x80
 800643a:	d11d      	bne.n	8006478 <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 800643c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006440:	00c9      	lsls	r1, r1, #3
 8006442:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8006446:	4401      	add	r1, r0
    ep->is_in = 0U;
 8006448:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800644c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006450:	2000      	movs	r0, #0
 8006452:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8006456:	2301      	movs	r3, #1
 8006458:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800645a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800645c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8006460:	2b01      	cmp	r3, #1
 8006462:	d013      	beq.n	800648c <HAL_PCD_EP_SetStall+0x66>
 8006464:	2301      	movs	r3, #1
 8006466:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800646a:	6820      	ldr	r0, [r4, #0]
 800646c:	f002 fe9a 	bl	80091a4 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8006470:	2000      	movs	r0, #0
 8006472:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8006476:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006478:	1c53      	adds	r3, r2, #1
 800647a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800647e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8006482:	2001      	movs	r0, #1
 8006484:	7048      	strb	r0, [r1, #1]
 8006486:	e7e6      	b.n	8006456 <HAL_PCD_EP_SetStall+0x30>
    return HAL_ERROR;
 8006488:	2001      	movs	r0, #1
}
 800648a:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 800648c:	2002      	movs	r0, #2
 800648e:	e7f2      	b.n	8006476 <HAL_PCD_EP_SetStall+0x50>

08006490 <HAL_PCD_EP_ClrStall>:
{
 8006490:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006492:	f001 010f 	and.w	r1, r1, #15
 8006496:	6842      	ldr	r2, [r0, #4]
 8006498:	4291      	cmp	r1, r2
 800649a:	d830      	bhi.n	80064fe <HAL_PCD_EP_ClrStall+0x6e>
{
 800649c:	b510      	push	{r4, lr}
 800649e:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80064a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80064a4:	d121      	bne.n	80064ea <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064a6:	f003 0207 	and.w	r2, r3, #7
 80064aa:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80064ae:	00c9      	lsls	r1, r1, #3
 80064b0:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80064b4:	4401      	add	r1, r0
    ep->is_in = 0U;
 80064b6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80064ba:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80064be:	2000      	movs	r0, #0
 80064c0:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 80064c4:	2200      	movs	r2, #0
 80064c6:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064c8:	f003 0307 	and.w	r3, r3, #7
 80064cc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80064ce:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d015      	beq.n	8006502 <HAL_PCD_EP_ClrStall+0x72>
 80064d6:	2301      	movs	r3, #1
 80064d8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80064dc:	6820      	ldr	r0, [r4, #0]
 80064de:	f002 fe86 	bl	80091ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80064e2:	2000      	movs	r0, #0
 80064e4:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80064e8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064ea:	f003 0207 	and.w	r2, r3, #7
 80064ee:	3201      	adds	r2, #1
 80064f0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80064f4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80064f8:	2001      	movs	r0, #1
 80064fa:	7048      	strb	r0, [r1, #1]
 80064fc:	e7e2      	b.n	80064c4 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 80064fe:	2001      	movs	r0, #1
}
 8006500:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8006502:	2002      	movs	r0, #2
 8006504:	e7f0      	b.n	80064e8 <HAL_PCD_EP_ClrStall+0x58>

08006506 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006506:	f011 0f80 	tst.w	r1, #128	; 0x80
 800650a:	d00b      	beq.n	8006524 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800650c:	f001 0107 	and.w	r1, r1, #7
 8006510:	3101      	adds	r1, #1
 8006512:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006516:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800651a:	b952      	cbnz	r2, 8006532 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800651c:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800651e:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8006520:	2000      	movs	r0, #0
 8006522:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8006524:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006528:	00c9      	lsls	r1, r1, #3
 800652a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800652e:	4401      	add	r1, r0
 8006530:	e7f3      	b.n	800651a <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8006532:	2201      	movs	r2, #1
 8006534:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006536:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006538:	0c1b      	lsrs	r3, r3, #16
 800653a:	814b      	strh	r3, [r1, #10]
 800653c:	e7f0      	b.n	8006520 <HAL_PCDEx_PMAConfig+0x1a>

0800653e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800653e:	4603      	mov	r3, r0

  USB_TypeDef *USBx = hpcd->Instance;
 8006540:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 8006542:	2101      	movs	r1, #1
 8006544:	f8c0 12e8 	str.w	r1, [r0, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8006548:	2000      	movs	r0, #0
 800654a:	f883 02e0 	strb.w	r0, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800654e:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8006552:	b29b      	uxth	r3, r3
 8006554:	430b      	orrs	r3, r1
 8006556:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800655a:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800655e:	b29b      	uxth	r3, r3
 8006560:	f043 0302 	orr.w	r3, r3, #2
 8006564:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8006568:	4770      	bx	lr
	...

0800656c <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800656c:	2800      	cmp	r0, #0
 800656e:	d136      	bne.n	80065de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006570:	4b3e      	ldr	r3, [pc, #248]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800657c:	d008      	beq.n	8006590 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800657e:	4a3b      	ldr	r2, [pc, #236]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006580:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006588:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800658c:	2000      	movs	r0, #0
 800658e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006590:	4a36      	ldr	r2, [pc, #216]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006592:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006596:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800659a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800659e:	6813      	ldr	r3, [r2, #0]
 80065a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80065a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065a8:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065aa:	4b31      	ldr	r3, [pc, #196]	; (8006670 <HAL_PWREx_ControlVoltageScaling+0x104>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2232      	movs	r2, #50	; 0x32
 80065b0:	fb02 f303 	mul.w	r3, r2, r3
 80065b4:	4a2f      	ldr	r2, [pc, #188]	; (8006674 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80065b6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ba:	0c9b      	lsrs	r3, r3, #18
 80065bc:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065be:	e000      	b.n	80065c2 <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 80065c0:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065c2:	4a2a      	ldr	r2, [pc, #168]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80065c4:	6952      	ldr	r2, [r2, #20]
 80065c6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80065ca:	d001      	beq.n	80065d0 <HAL_PWREx_ControlVoltageScaling+0x64>
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1f7      	bne.n	80065c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80065d0:	4b26      	ldr	r3, [pc, #152]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80065d8:	d144      	bne.n	8006664 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 80065da:	2000      	movs	r0, #0
 80065dc:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80065de:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80065e2:	d008      	beq.n	80065f6 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80065e4:	4a21      	ldr	r2, [pc, #132]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80065e6:	6813      	ldr	r3, [r2, #0]
 80065e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80065ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065f0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80065f2:	2000      	movs	r0, #0
 80065f4:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80065f6:	4b1d      	ldr	r3, [pc, #116]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80065fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006602:	d008      	beq.n	8006616 <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006604:	4a19      	ldr	r2, [pc, #100]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006606:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800660a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800660e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8006612:	2000      	movs	r0, #0
 8006614:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006616:	4a15      	ldr	r2, [pc, #84]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006618:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800661c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006620:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006624:	6813      	ldr	r3, [r2, #0]
 8006626:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800662a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800662e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006630:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2232      	movs	r2, #50	; 0x32
 8006636:	fb02 f303 	mul.w	r3, r2, r3
 800663a:	4a0e      	ldr	r2, [pc, #56]	; (8006674 <HAL_PWREx_ControlVoltageScaling+0x108>)
 800663c:	fba2 2303 	umull	r2, r3, r2, r3
 8006640:	0c9b      	lsrs	r3, r3, #18
 8006642:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006644:	e000      	b.n	8006648 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 8006646:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006648:	4a08      	ldr	r2, [pc, #32]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x100>)
 800664a:	6952      	ldr	r2, [r2, #20]
 800664c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006650:	d001      	beq.n	8006656 <HAL_PWREx_ControlVoltageScaling+0xea>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1f7      	bne.n	8006646 <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006656:	4b05      	ldr	r3, [pc, #20]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800665e:	d103      	bne.n	8006668 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8006660:	2000      	movs	r0, #0
 8006662:	4770      	bx	lr
        return HAL_TIMEOUT;
 8006664:	2003      	movs	r0, #3
 8006666:	4770      	bx	lr
        return HAL_TIMEOUT;
 8006668:	2003      	movs	r0, #3
}
 800666a:	4770      	bx	lr
 800666c:	40007000 	.word	0x40007000
 8006670:	20000004 	.word	0x20000004
 8006674:	431bde83 	.word	0x431bde83

08006678 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006678:	4a02      	ldr	r2, [pc, #8]	; (8006684 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800667a:	6893      	ldr	r3, [r2, #8]
 800667c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006680:	6093      	str	r3, [r2, #8]
}
 8006682:	4770      	bx	lr
 8006684:	40007000 	.word	0x40007000

08006688 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800668c:	4605      	mov	r5, r0
 800668e:	460f      	mov	r7, r1
 8006690:	4616      	mov	r6, r2
 8006692:	4699      	mov	r9, r3
 8006694:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006698:	682c      	ldr	r4, [r5, #0]
 800669a:	68a4      	ldr	r4, [r4, #8]
 800669c:	423c      	tst	r4, r7
 800669e:	bf14      	ite	ne
 80066a0:	f04f 0c01 	movne.w	ip, #1
 80066a4:	f04f 0c00 	moveq.w	ip, #0
 80066a8:	45b4      	cmp	ip, r6
 80066aa:	d014      	beq.n	80066d6 <QSPI_WaitFlagStateUntilTimeout+0x4e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ac:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80066b0:	d0f2      	beq.n	8006698 <QSPI_WaitFlagStateUntilTimeout+0x10>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b2:	f7fc fefb 	bl	80034ac <HAL_GetTick>
 80066b6:	eba0 0009 	sub.w	r0, r0, r9
 80066ba:	4540      	cmp	r0, r8
 80066bc:	d802      	bhi.n	80066c4 <QSPI_WaitFlagStateUntilTimeout+0x3c>
 80066be:	f1b8 0f00 	cmp.w	r8, #0
 80066c2:	d1e9      	bne.n	8006698 <QSPI_WaitFlagStateUntilTimeout+0x10>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80066c4:	2304      	movs	r3, #4
 80066c6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80066ca:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80066cc:	f043 0301 	orr.w	r3, r3, #1
 80066d0:	646b      	str	r3, [r5, #68]	; 0x44

        return HAL_ERROR;
 80066d2:	2001      	movs	r0, #1
 80066d4:	e000      	b.n	80066d8 <QSPI_WaitFlagStateUntilTimeout+0x50>
      }
    }
  }
  return HAL_OK;
 80066d6:	2000      	movs	r0, #0
}
 80066d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080066dc <HAL_QSPI_SetTimeout>:
  hqspi->Timeout = Timeout;
 80066dc:	6481      	str	r1, [r0, #72]	; 0x48
}
 80066de:	4770      	bx	lr

080066e0 <HAL_QSPI_Init>:
{
 80066e0:	b570      	push	{r4, r5, r6, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80066e6:	f7fc fee1 	bl	80034ac <HAL_GetTick>
  if(hqspi == NULL)
 80066ea:	2c00      	cmp	r4, #0
 80066ec:	d04c      	beq.n	8006788 <HAL_QSPI_Init+0xa8>
 80066ee:	4606      	mov	r6, r0
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80066f0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d03c      	beq.n	8006772 <HAL_QSPI_Init+0x92>
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80066f8:	6825      	ldr	r5, [r4, #0]
 80066fa:	682a      	ldr	r2, [r5, #0]
 80066fc:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8006700:	68a1      	ldr	r1, [r4, #8]
 8006702:	3901      	subs	r1, #1
 8006704:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006708:	602a      	str	r2, [r5, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800670a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	4633      	mov	r3, r6
 8006710:	2200      	movs	r2, #0
 8006712:	2120      	movs	r1, #32
 8006714:	4620      	mov	r0, r4
 8006716:	f7ff ffb7 	bl	8006688 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800671a:	bb28      	cbnz	r0, 8006768 <HAL_QSPI_Init+0x88>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800671c:	6821      	ldr	r1, [r4, #0]
 800671e:	680b      	ldr	r3, [r1, #0]
 8006720:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006724:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006728:	6865      	ldr	r5, [r4, #4]
 800672a:	68e2      	ldr	r2, [r4, #12]
 800672c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8006730:	69e5      	ldr	r5, [r4, #28]
 8006732:	432a      	orrs	r2, r5
 8006734:	6a25      	ldr	r5, [r4, #32]
 8006736:	432a      	orrs	r2, r5
 8006738:	4313      	orrs	r3, r2
 800673a:	600b      	str	r3, [r1, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800673c:	6821      	ldr	r1, [r4, #0]
 800673e:	684a      	ldr	r2, [r1, #4]
 8006740:	4b12      	ldr	r3, [pc, #72]	; (800678c <HAL_QSPI_Init+0xac>)
 8006742:	4013      	ands	r3, r2
 8006744:	6925      	ldr	r5, [r4, #16]
 8006746:	6962      	ldr	r2, [r4, #20]
 8006748:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800674c:	69a5      	ldr	r5, [r4, #24]
 800674e:	432a      	orrs	r2, r5
 8006750:	4313      	orrs	r3, r2
 8006752:	604b      	str	r3, [r1, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8006754:	6822      	ldr	r2, [r4, #0]
 8006756:	6813      	ldr	r3, [r2, #0]
 8006758:	f043 0301 	orr.w	r3, r3, #1
 800675c:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800675e:	2300      	movs	r3, #0
 8006760:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8006762:	2301      	movs	r3, #1
 8006764:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8006768:	2300      	movs	r3, #0
 800676a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800676e:	b002      	add	sp, #8
 8006770:	bd70      	pop	{r4, r5, r6, pc}
    hqspi->Lock = HAL_UNLOCKED;
 8006772:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8006776:	4620      	mov	r0, r4
 8006778:	f7fb fd04 	bl	8002184 <HAL_QSPI_MspInit>
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800677c:	f241 3188 	movw	r1, #5000	; 0x1388
 8006780:	4620      	mov	r0, r4
 8006782:	f7ff ffab 	bl	80066dc <HAL_QSPI_SetTimeout>
 8006786:	e7b7      	b.n	80066f8 <HAL_QSPI_Init+0x18>
    return HAL_ERROR;
 8006788:	2001      	movs	r0, #1
 800678a:	e7f0      	b.n	800676e <HAL_QSPI_Init+0x8e>
 800678c:	ffe0f8fe 	.word	0xffe0f8fe

08006790 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006790:	4b12      	ldr	r3, [pc, #72]	; (80067dc <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8006792:	68da      	ldr	r2, [r3, #12]
 8006794:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006798:	68d8      	ldr	r0, [r3, #12]
 800679a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800679e:	1c43      	adds	r3, r0, #1

  switch (pllsource)
 80067a0:	2a03      	cmp	r2, #3
 80067a2:	d011      	beq.n	80067c8 <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067a4:	480e      	ldr	r0, [pc, #56]	; (80067e0 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 80067a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80067aa:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80067b2:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80067b6:	4b09      	ldr	r3, [pc, #36]	; (80067dc <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80067be:	3301      	adds	r3, #1
 80067c0:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 80067c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80067c6:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067c8:	4806      	ldr	r0, [pc, #24]	; (80067e4 <RCC_GetSysClockFreqFromPLLSource+0x54>)
 80067ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80067ce:	4b03      	ldr	r3, [pc, #12]	; (80067dc <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80067d6:	fb03 f000 	mul.w	r0, r3, r0
    break;
 80067da:	e7ec      	b.n	80067b6 <RCC_GetSysClockFreqFromPLLSource+0x26>
 80067dc:	40021000 	.word	0x40021000
 80067e0:	00f42400 	.word	0x00f42400
 80067e4:	007a1200 	.word	0x007a1200

080067e8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80067e8:	2800      	cmp	r0, #0
 80067ea:	f000 8254 	beq.w	8006c96 <HAL_RCC_OscConfig+0x4ae>
{
 80067ee:	b570      	push	{r4, r5, r6, lr}
 80067f0:	b082      	sub	sp, #8
 80067f2:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067f4:	6803      	ldr	r3, [r0, #0]
 80067f6:	f013 0f01 	tst.w	r3, #1
 80067fa:	d037      	beq.n	800686c <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067fc:	4aa4      	ldr	r2, [pc, #656]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 80067fe:	6893      	ldr	r3, [r2, #8]
 8006800:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006804:	68d2      	ldr	r2, [r2, #12]
 8006806:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800680a:	2b0c      	cmp	r3, #12
 800680c:	d023      	beq.n	8006856 <HAL_RCC_OscConfig+0x6e>
 800680e:	2b08      	cmp	r3, #8
 8006810:	d023      	beq.n	800685a <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006812:	6863      	ldr	r3, [r4, #4]
 8006814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006818:	d04e      	beq.n	80068b8 <HAL_RCC_OscConfig+0xd0>
 800681a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800681e:	d051      	beq.n	80068c4 <HAL_RCC_OscConfig+0xdc>
 8006820:	4b9b      	ldr	r3, [pc, #620]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006830:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006832:	6863      	ldr	r3, [r4, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d052      	beq.n	80068de <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 8006838:	f7fc fe38 	bl	80034ac <HAL_GetTick>
 800683c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800683e:	4b94      	ldr	r3, [pc, #592]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006846:	d111      	bne.n	800686c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006848:	f7fc fe30 	bl	80034ac <HAL_GetTick>
 800684c:	1b40      	subs	r0, r0, r5
 800684e:	2864      	cmp	r0, #100	; 0x64
 8006850:	d9f5      	bls.n	800683e <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8006852:	2003      	movs	r0, #3
 8006854:	e228      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006856:	2a03      	cmp	r2, #3
 8006858:	d1d9      	bne.n	800680e <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800685a:	4b8d      	ldr	r3, [pc, #564]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006862:	d003      	beq.n	800686c <HAL_RCC_OscConfig+0x84>
 8006864:	6863      	ldr	r3, [r4, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 8217 	beq.w	8006c9a <HAL_RCC_OscConfig+0x4b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	f013 0f02 	tst.w	r3, #2
 8006872:	d05d      	beq.n	8006930 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006874:	4a86      	ldr	r2, [pc, #536]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 8006876:	6893      	ldr	r3, [r2, #8]
 8006878:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800687c:	68d2      	ldr	r2, [r2, #12]
 800687e:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006882:	2b0c      	cmp	r3, #12
 8006884:	d03a      	beq.n	80068fc <HAL_RCC_OscConfig+0x114>
 8006886:	2b04      	cmp	r3, #4
 8006888:	d03a      	beq.n	8006900 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800688a:	68e3      	ldr	r3, [r4, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d075      	beq.n	800697c <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8006890:	4a7f      	ldr	r2, [pc, #508]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 8006892:	6813      	ldr	r3, [r2, #0]
 8006894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006898:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800689a:	f7fc fe07 	bl	80034ac <HAL_GetTick>
 800689e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068a0:	4b7b      	ldr	r3, [pc, #492]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80068a8:	d15f      	bne.n	800696a <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068aa:	f7fc fdff 	bl	80034ac <HAL_GetTick>
 80068ae:	1b40      	subs	r0, r0, r5
 80068b0:	2802      	cmp	r0, #2
 80068b2:	d9f5      	bls.n	80068a0 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 80068b4:	2003      	movs	r0, #3
 80068b6:	e1f7      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068b8:	4a75      	ldr	r2, [pc, #468]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 80068ba:	6813      	ldr	r3, [r2, #0]
 80068bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	e7b6      	b.n	8006832 <HAL_RCC_OscConfig+0x4a>
 80068c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80068c8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	e7a9      	b.n	8006832 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 80068de:	f7fc fde5 	bl	80034ac <HAL_GetTick>
 80068e2:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068e4:	4b6a      	ldr	r3, [pc, #424]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80068ec:	d0be      	beq.n	800686c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068ee:	f7fc fddd 	bl	80034ac <HAL_GetTick>
 80068f2:	1b40      	subs	r0, r0, r5
 80068f4:	2864      	cmp	r0, #100	; 0x64
 80068f6:	d9f5      	bls.n	80068e4 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 80068f8:	2003      	movs	r0, #3
 80068fa:	e1d5      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80068fc:	2a02      	cmp	r2, #2
 80068fe:	d1c2      	bne.n	8006886 <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006900:	4b63      	ldr	r3, [pc, #396]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006908:	d003      	beq.n	8006912 <HAL_RCC_OscConfig+0x12a>
 800690a:	68e3      	ldr	r3, [r4, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 81c6 	beq.w	8006c9e <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006912:	4a5f      	ldr	r2, [pc, #380]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 8006914:	6853      	ldr	r3, [r2, #4]
 8006916:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800691a:	6921      	ldr	r1, [r4, #16]
 800691c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006920:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006922:	4b5c      	ldr	r3, [pc, #368]	; (8006a94 <HAL_RCC_OscConfig+0x2ac>)
 8006924:	6818      	ldr	r0, [r3, #0]
 8006926:	f7fc fd7d 	bl	8003424 <HAL_InitTick>
 800692a:	2800      	cmp	r0, #0
 800692c:	f040 81b9 	bne.w	8006ca2 <HAL_RCC_OscConfig+0x4ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	f013 0f08 	tst.w	r3, #8
 8006936:	d04c      	beq.n	80069d2 <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006938:	6963      	ldr	r3, [r4, #20]
 800693a:	b39b      	cbz	r3, 80069a4 <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 800693c:	4a54      	ldr	r2, [pc, #336]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 800693e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006942:	f043 0301 	orr.w	r3, r3, #1
 8006946:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800694a:	f7fc fdaf 	bl	80034ac <HAL_GetTick>
 800694e:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006950:	4b4f      	ldr	r3, [pc, #316]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 8006952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006956:	f013 0f02 	tst.w	r3, #2
 800695a:	d13a      	bne.n	80069d2 <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800695c:	f7fc fda6 	bl	80034ac <HAL_GetTick>
 8006960:	1b40      	subs	r0, r0, r5
 8006962:	2802      	cmp	r0, #2
 8006964:	d9f4      	bls.n	8006950 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 8006966:	2003      	movs	r0, #3
 8006968:	e19e      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800696a:	4a49      	ldr	r2, [pc, #292]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 800696c:	6853      	ldr	r3, [r2, #4]
 800696e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006972:	6921      	ldr	r1, [r4, #16]
 8006974:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006978:	6053      	str	r3, [r2, #4]
 800697a:	e7d9      	b.n	8006930 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 800697c:	4a44      	ldr	r2, [pc, #272]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 800697e:	6813      	ldr	r3, [r2, #0]
 8006980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006984:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006986:	f7fc fd91 	bl	80034ac <HAL_GetTick>
 800698a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800698c:	4b40      	ldr	r3, [pc, #256]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006994:	d0cc      	beq.n	8006930 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006996:	f7fc fd89 	bl	80034ac <HAL_GetTick>
 800699a:	1b40      	subs	r0, r0, r5
 800699c:	2802      	cmp	r0, #2
 800699e:	d9f5      	bls.n	800698c <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 80069a0:	2003      	movs	r0, #3
 80069a2:	e181      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_LSI_DISABLE();
 80069a4:	4a3a      	ldr	r2, [pc, #232]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 80069a6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80069aa:	f023 0301 	bic.w	r3, r3, #1
 80069ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80069b2:	f7fc fd7b 	bl	80034ac <HAL_GetTick>
 80069b6:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069b8:	4b35      	ldr	r3, [pc, #212]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 80069ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069be:	f013 0f02 	tst.w	r3, #2
 80069c2:	d006      	beq.n	80069d2 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069c4:	f7fc fd72 	bl	80034ac <HAL_GetTick>
 80069c8:	1b40      	subs	r0, r0, r5
 80069ca:	2802      	cmp	r0, #2
 80069cc:	d9f4      	bls.n	80069b8 <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 80069ce:	2003      	movs	r0, #3
 80069d0:	e16a      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	f013 0f04 	tst.w	r3, #4
 80069d8:	f000 8081 	beq.w	8006ade <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80069dc:	4b2c      	ldr	r3, [pc, #176]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 80069de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80069e4:	d136      	bne.n	8006a54 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80069e6:	4b2a      	ldr	r3, [pc, #168]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 80069e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80069ee:	659a      	str	r2, [r3, #88]	; 0x58
 80069f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069f6:	9301      	str	r3, [sp, #4]
 80069f8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80069fa:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069fc:	4b26      	ldr	r3, [pc, #152]	; (8006a98 <HAL_RCC_OscConfig+0x2b0>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006a04:	d028      	beq.n	8006a58 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a06:	68a3      	ldr	r3, [r4, #8]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d039      	beq.n	8006a80 <HAL_RCC_OscConfig+0x298>
 8006a0c:	2b05      	cmp	r3, #5
 8006a0e:	d045      	beq.n	8006a9c <HAL_RCC_OscConfig+0x2b4>
 8006a10:	4b1f      	ldr	r3, [pc, #124]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 8006a12:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006a16:	f022 0201 	bic.w	r2, r2, #1
 8006a1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006a1e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006a22:	f022 0204 	bic.w	r2, r2, #4
 8006a26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a2a:	68a3      	ldr	r3, [r4, #8]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d043      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x2d0>
      tickstart = HAL_GetTick();
 8006a30:	f7fc fd3c 	bl	80034ac <HAL_GetTick>
 8006a34:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a36:	4b16      	ldr	r3, [pc, #88]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 8006a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a3c:	f013 0f02 	tst.w	r3, #2
 8006a40:	d14c      	bne.n	8006adc <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a42:	f7fc fd33 	bl	80034ac <HAL_GetTick>
 8006a46:	1b80      	subs	r0, r0, r6
 8006a48:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a4c:	4298      	cmp	r0, r3
 8006a4e:	d9f2      	bls.n	8006a36 <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 8006a50:	2003      	movs	r0, #3
 8006a52:	e129      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
    FlagStatus       pwrclkchanged = RESET;
 8006a54:	2500      	movs	r5, #0
 8006a56:	e7d1      	b.n	80069fc <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a58:	4a0f      	ldr	r2, [pc, #60]	; (8006a98 <HAL_RCC_OscConfig+0x2b0>)
 8006a5a:	6813      	ldr	r3, [r2, #0]
 8006a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a60:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006a62:	f7fc fd23 	bl	80034ac <HAL_GetTick>
 8006a66:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a68:	4b0b      	ldr	r3, [pc, #44]	; (8006a98 <HAL_RCC_OscConfig+0x2b0>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006a70:	d1c9      	bne.n	8006a06 <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a72:	f7fc fd1b 	bl	80034ac <HAL_GetTick>
 8006a76:	1b80      	subs	r0, r0, r6
 8006a78:	2802      	cmp	r0, #2
 8006a7a:	d9f5      	bls.n	8006a68 <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 8006a7c:	2003      	movs	r0, #3
 8006a7e:	e113      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a80:	4a03      	ldr	r2, [pc, #12]	; (8006a90 <HAL_RCC_OscConfig+0x2a8>)
 8006a82:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006a86:	f043 0301 	orr.w	r3, r3, #1
 8006a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a8e:	e7cc      	b.n	8006a2a <HAL_RCC_OscConfig+0x242>
 8006a90:	40021000 	.word	0x40021000
 8006a94:	200000b4 	.word	0x200000b4
 8006a98:	40007000 	.word	0x40007000
 8006a9c:	4b8a      	ldr	r3, [pc, #552]	; (8006cc8 <HAL_RCC_OscConfig+0x4e0>)
 8006a9e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006aa2:	f042 0204 	orr.w	r2, r2, #4
 8006aa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006aaa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006aae:	f042 0201 	orr.w	r2, r2, #1
 8006ab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006ab6:	e7b8      	b.n	8006a2a <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 8006ab8:	f7fc fcf8 	bl	80034ac <HAL_GetTick>
 8006abc:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006abe:	4b82      	ldr	r3, [pc, #520]	; (8006cc8 <HAL_RCC_OscConfig+0x4e0>)
 8006ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac4:	f013 0f02 	tst.w	r3, #2
 8006ac8:	d008      	beq.n	8006adc <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aca:	f7fc fcef 	bl	80034ac <HAL_GetTick>
 8006ace:	1b80      	subs	r0, r0, r6
 8006ad0:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ad4:	4298      	cmp	r0, r3
 8006ad6:	d9f2      	bls.n	8006abe <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 8006ad8:	2003      	movs	r0, #3
 8006ada:	e0e5      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
    if (pwrclkchanged == SET)
 8006adc:	b9e5      	cbnz	r5, 8006b18 <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	f013 0f20 	tst.w	r3, #32
 8006ae4:	d035      	beq.n	8006b52 <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ae6:	69a3      	ldr	r3, [r4, #24]
 8006ae8:	b1e3      	cbz	r3, 8006b24 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 8006aea:	4a77      	ldr	r2, [pc, #476]	; (8006cc8 <HAL_RCC_OscConfig+0x4e0>)
 8006aec:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8006af0:	f043 0301 	orr.w	r3, r3, #1
 8006af4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8006af8:	f7fc fcd8 	bl	80034ac <HAL_GetTick>
 8006afc:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006afe:	4b72      	ldr	r3, [pc, #456]	; (8006cc8 <HAL_RCC_OscConfig+0x4e0>)
 8006b00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b04:	f013 0f02 	tst.w	r3, #2
 8006b08:	d123      	bne.n	8006b52 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b0a:	f7fc fccf 	bl	80034ac <HAL_GetTick>
 8006b0e:	1b40      	subs	r0, r0, r5
 8006b10:	2802      	cmp	r0, #2
 8006b12:	d9f4      	bls.n	8006afe <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 8006b14:	2003      	movs	r0, #3
 8006b16:	e0c7      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b18:	4a6b      	ldr	r2, [pc, #428]	; (8006cc8 <HAL_RCC_OscConfig+0x4e0>)
 8006b1a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b20:	6593      	str	r3, [r2, #88]	; 0x58
 8006b22:	e7dc      	b.n	8006ade <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 8006b24:	4a68      	ldr	r2, [pc, #416]	; (8006cc8 <HAL_RCC_OscConfig+0x4e0>)
 8006b26:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8006b2a:	f023 0301 	bic.w	r3, r3, #1
 8006b2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8006b32:	f7fc fcbb 	bl	80034ac <HAL_GetTick>
 8006b36:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b38:	4b63      	ldr	r3, [pc, #396]	; (8006cc8 <HAL_RCC_OscConfig+0x4e0>)
 8006b3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b3e:	f013 0f02 	tst.w	r3, #2
 8006b42:	d006      	beq.n	8006b52 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b44:	f7fc fcb2 	bl	80034ac <HAL_GetTick>
 8006b48:	1b40      	subs	r0, r0, r5
 8006b4a:	2802      	cmp	r0, #2
 8006b4c:	d9f4      	bls.n	8006b38 <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 8006b4e:	2003      	movs	r0, #3
 8006b50:	e0aa      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b52:	69e3      	ldr	r3, [r4, #28]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 80a6 	beq.w	8006ca6 <HAL_RCC_OscConfig+0x4be>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b5a:	4a5b      	ldr	r2, [pc, #364]	; (8006cc8 <HAL_RCC_OscConfig+0x4e0>)
 8006b5c:	6892      	ldr	r2, [r2, #8]
 8006b5e:	f002 020c 	and.w	r2, r2, #12
 8006b62:	2a0c      	cmp	r2, #12
 8006b64:	d069      	beq.n	8006c3a <HAL_RCC_OscConfig+0x452>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d01d      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x3be>
        __HAL_RCC_PLL_DISABLE();
 8006b6a:	4b57      	ldr	r3, [pc, #348]	; (8006cc8 <HAL_RCC_OscConfig+0x4e0>)
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006b72:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	f022 0203 	bic.w	r2, r2, #3
 8006b7a:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8006b82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006b86:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8006b88:	f7fc fc90 	bl	80034ac <HAL_GetTick>
 8006b8c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b8e:	4b4e      	ldr	r3, [pc, #312]	; (8006cc8 <HAL_RCC_OscConfig+0x4e0>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006b96:	d04e      	beq.n	8006c36 <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b98:	f7fc fc88 	bl	80034ac <HAL_GetTick>
 8006b9c:	1b00      	subs	r0, r0, r4
 8006b9e:	2802      	cmp	r0, #2
 8006ba0:	d9f5      	bls.n	8006b8e <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 8006ba2:	2003      	movs	r0, #3
 8006ba4:	e080      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_DISABLE();
 8006ba6:	4a48      	ldr	r2, [pc, #288]	; (8006cc8 <HAL_RCC_OscConfig+0x4e0>)
 8006ba8:	6813      	ldr	r3, [r2, #0]
 8006baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006bb0:	f7fc fc7c 	bl	80034ac <HAL_GetTick>
 8006bb4:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bb6:	4b44      	ldr	r3, [pc, #272]	; (8006cc8 <HAL_RCC_OscConfig+0x4e0>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006bbe:	d006      	beq.n	8006bce <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bc0:	f7fc fc74 	bl	80034ac <HAL_GetTick>
 8006bc4:	1b40      	subs	r0, r0, r5
 8006bc6:	2802      	cmp	r0, #2
 8006bc8:	d9f5      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x3ce>
            return HAL_TIMEOUT;
 8006bca:	2003      	movs	r0, #3
 8006bcc:	e06c      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bce:	4a3e      	ldr	r2, [pc, #248]	; (8006cc8 <HAL_RCC_OscConfig+0x4e0>)
 8006bd0:	68d3      	ldr	r3, [r2, #12]
 8006bd2:	493e      	ldr	r1, [pc, #248]	; (8006ccc <HAL_RCC_OscConfig+0x4e4>)
 8006bd4:	4019      	ands	r1, r3
 8006bd6:	6a23      	ldr	r3, [r4, #32]
 8006bd8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006bda:	3801      	subs	r0, #1
 8006bdc:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8006be0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006be2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006be6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006be8:	0840      	lsrs	r0, r0, #1
 8006bea:	3801      	subs	r0, #1
 8006bec:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8006bf0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006bf2:	0840      	lsrs	r0, r0, #1
 8006bf4:	3801      	subs	r0, #1
 8006bf6:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8006bfa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006bfc:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8006c00:	430b      	orrs	r3, r1
 8006c02:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8006c04:	6813      	ldr	r3, [r2, #0]
 8006c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c0a:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c0c:	68d3      	ldr	r3, [r2, #12]
 8006c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c12:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8006c14:	f7fc fc4a 	bl	80034ac <HAL_GetTick>
 8006c18:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c1a:	4b2b      	ldr	r3, [pc, #172]	; (8006cc8 <HAL_RCC_OscConfig+0x4e0>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006c22:	d106      	bne.n	8006c32 <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c24:	f7fc fc42 	bl	80034ac <HAL_GetTick>
 8006c28:	1b00      	subs	r0, r0, r4
 8006c2a:	2802      	cmp	r0, #2
 8006c2c:	d9f5      	bls.n	8006c1a <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 8006c2e:	2003      	movs	r0, #3
 8006c30:	e03a      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 8006c32:	2000      	movs	r0, #0
 8006c34:	e038      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
 8006c36:	2000      	movs	r0, #0
 8006c38:	e036      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d036      	beq.n	8006cac <HAL_RCC_OscConfig+0x4c4>
      temp_pllckcfg = RCC->PLLCFGR;
 8006c3e:	4b22      	ldr	r3, [pc, #136]	; (8006cc8 <HAL_RCC_OscConfig+0x4e0>)
 8006c40:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c42:	f003 0103 	and.w	r1, r3, #3
 8006c46:	6a22      	ldr	r2, [r4, #32]
 8006c48:	4291      	cmp	r1, r2
 8006c4a:	d131      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x4c8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c52:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c54:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8006c58:	d12c      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x4cc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c5a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006c5e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c60:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006c64:	d128      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c66:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006c6a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c6c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8006c70:	d124      	bne.n	8006cbc <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c72:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8006c76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006c78:	0852      	lsrs	r2, r2, #1
 8006c7a:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c7c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8006c80:	d11e      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006c82:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8006c86:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006c88:	0852      	lsrs	r2, r2, #1
 8006c8a:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c8c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8006c90:	d118      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x4dc>
  return HAL_OK;
 8006c92:	2000      	movs	r0, #0
 8006c94:	e008      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
    return HAL_ERROR;
 8006c96:	2001      	movs	r0, #1
}
 8006c98:	4770      	bx	lr
        return HAL_ERROR;
 8006c9a:	2001      	movs	r0, #1
 8006c9c:	e004      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8006c9e:	2001      	movs	r0, #1
 8006ca0:	e002      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
          return HAL_ERROR;
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	e000      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 8006ca6:	2000      	movs	r0, #0
}
 8006ca8:	b002      	add	sp, #8
 8006caa:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8006cac:	2001      	movs	r0, #1
 8006cae:	e7fb      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8006cb0:	2001      	movs	r0, #1
 8006cb2:	e7f9      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
 8006cb4:	2001      	movs	r0, #1
 8006cb6:	e7f7      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
 8006cb8:	2001      	movs	r0, #1
 8006cba:	e7f5      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
 8006cbc:	2001      	movs	r0, #1
 8006cbe:	e7f3      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	e7f1      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
 8006cc4:	2001      	movs	r0, #1
 8006cc6:	e7ef      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4c0>
 8006cc8:	40021000 	.word	0x40021000
 8006ccc:	019f800c 	.word	0x019f800c

08006cd0 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006cd0:	4b1e      	ldr	r3, [pc, #120]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x7c>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f003 030c 	and.w	r3, r3, #12
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	d033      	beq.n	8006d44 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006cdc:	4b1b      	ldr	r3, [pc, #108]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x7c>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f003 030c 	and.w	r3, r3, #12
 8006ce4:	2b08      	cmp	r3, #8
 8006ce6:	d02f      	beq.n	8006d48 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006ce8:	4b18      	ldr	r3, [pc, #96]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x7c>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f003 030c 	and.w	r3, r3, #12
 8006cf0:	2b0c      	cmp	r3, #12
 8006cf2:	d001      	beq.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 8006cf4:	2000      	movs	r0, #0
}
 8006cf6:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006cf8:	4b14      	ldr	r3, [pc, #80]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x7c>)
 8006cfa:	68da      	ldr	r2, [r3, #12]
 8006cfc:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d00:	68d8      	ldr	r0, [r3, #12]
 8006d02:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8006d06:	1c43      	adds	r3, r0, #1
    switch (pllsource)
 8006d08:	2a03      	cmp	r2, #3
 8006d0a:	d011      	beq.n	8006d30 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d0c:	4810      	ldr	r0, [pc, #64]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x80>)
 8006d0e:	fbb0 f0f3 	udiv	r0, r0, r3
 8006d12:	4b0e      	ldr	r3, [pc, #56]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x7c>)
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8006d1a:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d1e:	4b0b      	ldr	r3, [pc, #44]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x7c>)
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8006d26:	3301      	adds	r3, #1
 8006d28:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8006d2a:	fbb0 f0f3 	udiv	r0, r0, r3
 8006d2e:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d30:	4808      	ldr	r0, [pc, #32]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x84>)
 8006d32:	fbb0 f0f3 	udiv	r0, r0, r3
 8006d36:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x7c>)
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8006d3e:	fb03 f000 	mul.w	r0, r3, r0
      break;
 8006d42:	e7ec      	b.n	8006d1e <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8006d44:	4802      	ldr	r0, [pc, #8]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x80>)
 8006d46:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8006d48:	4802      	ldr	r0, [pc, #8]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x84>)
 8006d4a:	4770      	bx	lr
 8006d4c:	40021000 	.word	0x40021000
 8006d50:	00f42400 	.word	0x00f42400
 8006d54:	007a1200 	.word	0x007a1200

08006d58 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	f000 80e6 	beq.w	8006f2a <HAL_RCC_ClockConfig+0x1d2>
{
 8006d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d60:	460c      	mov	r4, r1
 8006d62:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d64:	4b74      	ldr	r3, [pc, #464]	; (8006f38 <HAL_RCC_ClockConfig+0x1e0>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 030f 	and.w	r3, r3, #15
 8006d6c:	428b      	cmp	r3, r1
 8006d6e:	d20b      	bcs.n	8006d88 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d70:	4a71      	ldr	r2, [pc, #452]	; (8006f38 <HAL_RCC_ClockConfig+0x1e0>)
 8006d72:	6813      	ldr	r3, [r2, #0]
 8006d74:	f023 030f 	bic.w	r3, r3, #15
 8006d78:	430b      	orrs	r3, r1
 8006d7a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d7c:	6813      	ldr	r3, [r2, #0]
 8006d7e:	f003 030f 	and.w	r3, r3, #15
 8006d82:	428b      	cmp	r3, r1
 8006d84:	f040 80d3 	bne.w	8006f2e <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d88:	682e      	ldr	r6, [r5, #0]
 8006d8a:	f016 0601 	ands.w	r6, r6, #1
 8006d8e:	d05f      	beq.n	8006e50 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d90:	686b      	ldr	r3, [r5, #4]
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d02f      	beq.n	8006df6 <HAL_RCC_ClockConfig+0x9e>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d04d      	beq.n	8006e36 <HAL_RCC_ClockConfig+0xde>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d9a:	4b68      	ldr	r3, [pc, #416]	; (8006f3c <HAL_RCC_ClockConfig+0x1e4>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006da2:	f000 80c6 	beq.w	8006f32 <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006da6:	f7ff ff93 	bl	8006cd0 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8006daa:	4b65      	ldr	r3, [pc, #404]	; (8006f40 <HAL_RCC_ClockConfig+0x1e8>)
 8006dac:	4298      	cmp	r0, r3
 8006dae:	d94d      	bls.n	8006e4c <HAL_RCC_ClockConfig+0xf4>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006db0:	4a62      	ldr	r2, [pc, #392]	; (8006f3c <HAL_RCC_ClockConfig+0x1e4>)
 8006db2:	6893      	ldr	r3, [r2, #8]
 8006db4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dbc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006dbe:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dc0:	4a5e      	ldr	r2, [pc, #376]	; (8006f3c <HAL_RCC_ClockConfig+0x1e4>)
 8006dc2:	6893      	ldr	r3, [r2, #8]
 8006dc4:	f023 0303 	bic.w	r3, r3, #3
 8006dc8:	6869      	ldr	r1, [r5, #4]
 8006dca:	430b      	orrs	r3, r1
 8006dcc:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8006dce:	f7fc fb6d 	bl	80034ac <HAL_GetTick>
 8006dd2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd4:	4b59      	ldr	r3, [pc, #356]	; (8006f3c <HAL_RCC_ClockConfig+0x1e4>)
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f003 030c 	and.w	r3, r3, #12
 8006ddc:	686a      	ldr	r2, [r5, #4]
 8006dde:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006de2:	d035      	beq.n	8006e50 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006de4:	f7fc fb62 	bl	80034ac <HAL_GetTick>
 8006de8:	1bc0      	subs	r0, r0, r7
 8006dea:	f241 3388 	movw	r3, #5000	; 0x1388
 8006dee:	4298      	cmp	r0, r3
 8006df0:	d9f0      	bls.n	8006dd4 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8006df2:	2003      	movs	r0, #3
 8006df4:	e078      	b.n	8006ee8 <HAL_RCC_ClockConfig+0x190>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006df6:	4b51      	ldr	r3, [pc, #324]	; (8006f3c <HAL_RCC_ClockConfig+0x1e4>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006dfe:	d101      	bne.n	8006e04 <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8006e00:	2001      	movs	r0, #1
 8006e02:	e071      	b.n	8006ee8 <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006e04:	f7ff fcc4 	bl	8006790 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8006e08:	4b4d      	ldr	r3, [pc, #308]	; (8006f40 <HAL_RCC_ClockConfig+0x1e8>)
 8006e0a:	4298      	cmp	r0, r3
 8006e0c:	d91a      	bls.n	8006e44 <HAL_RCC_ClockConfig+0xec>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006e0e:	4b4b      	ldr	r3, [pc, #300]	; (8006f3c <HAL_RCC_ClockConfig+0x1e4>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8006e16:	d005      	beq.n	8006e24 <HAL_RCC_ClockConfig+0xcc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e18:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006e1a:	f016 0602 	ands.w	r6, r6, #2
 8006e1e:	d0cf      	beq.n	8006dc0 <HAL_RCC_ClockConfig+0x68>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006e20:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e22:	b98b      	cbnz	r3, 8006e48 <HAL_RCC_ClockConfig+0xf0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e24:	4a45      	ldr	r2, [pc, #276]	; (8006f3c <HAL_RCC_ClockConfig+0x1e4>)
 8006e26:	6893      	ldr	r3, [r2, #8]
 8006e28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006e32:	2680      	movs	r6, #128	; 0x80
 8006e34:	e7c4      	b.n	8006dc0 <HAL_RCC_ClockConfig+0x68>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e36:	4b41      	ldr	r3, [pc, #260]	; (8006f3c <HAL_RCC_ClockConfig+0x1e4>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006e3e:	d1b2      	bne.n	8006da6 <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 8006e40:	2001      	movs	r0, #1
 8006e42:	e051      	b.n	8006ee8 <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006e44:	2600      	movs	r6, #0
 8006e46:	e7bb      	b.n	8006dc0 <HAL_RCC_ClockConfig+0x68>
 8006e48:	2600      	movs	r6, #0
 8006e4a:	e7b9      	b.n	8006dc0 <HAL_RCC_ClockConfig+0x68>
 8006e4c:	2600      	movs	r6, #0
 8006e4e:	e7b7      	b.n	8006dc0 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e50:	682b      	ldr	r3, [r5, #0]
 8006e52:	f013 0f02 	tst.w	r3, #2
 8006e56:	d048      	beq.n	8006eea <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e58:	f013 0f04 	tst.w	r3, #4
 8006e5c:	d004      	beq.n	8006e68 <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e5e:	4a37      	ldr	r2, [pc, #220]	; (8006f3c <HAL_RCC_ClockConfig+0x1e4>)
 8006e60:	6893      	ldr	r3, [r2, #8]
 8006e62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006e66:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	f013 0f08 	tst.w	r3, #8
 8006e6e:	d006      	beq.n	8006e7e <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006e70:	4a32      	ldr	r2, [pc, #200]	; (8006f3c <HAL_RCC_ClockConfig+0x1e4>)
 8006e72:	6893      	ldr	r3, [r2, #8]
 8006e74:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006e78:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006e7c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e7e:	4a2f      	ldr	r2, [pc, #188]	; (8006f3c <HAL_RCC_ClockConfig+0x1e4>)
 8006e80:	6893      	ldr	r3, [r2, #8]
 8006e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e86:	68a9      	ldr	r1, [r5, #8]
 8006e88:	430b      	orrs	r3, r1
 8006e8a:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e8c:	4b2a      	ldr	r3, [pc, #168]	; (8006f38 <HAL_RCC_ClockConfig+0x1e0>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 030f 	and.w	r3, r3, #15
 8006e94:	42a3      	cmp	r3, r4
 8006e96:	d830      	bhi.n	8006efa <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e98:	682b      	ldr	r3, [r5, #0]
 8006e9a:	f013 0f04 	tst.w	r3, #4
 8006e9e:	d006      	beq.n	8006eae <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ea0:	4a26      	ldr	r2, [pc, #152]	; (8006f3c <HAL_RCC_ClockConfig+0x1e4>)
 8006ea2:	6893      	ldr	r3, [r2, #8]
 8006ea4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006ea8:	68e9      	ldr	r1, [r5, #12]
 8006eaa:	430b      	orrs	r3, r1
 8006eac:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eae:	682b      	ldr	r3, [r5, #0]
 8006eb0:	f013 0f08 	tst.w	r3, #8
 8006eb4:	d007      	beq.n	8006ec6 <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006eb6:	4a21      	ldr	r2, [pc, #132]	; (8006f3c <HAL_RCC_ClockConfig+0x1e4>)
 8006eb8:	6893      	ldr	r3, [r2, #8]
 8006eba:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006ebe:	6929      	ldr	r1, [r5, #16]
 8006ec0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006ec4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ec6:	f7ff ff03 	bl	8006cd0 <HAL_RCC_GetSysClockFreq>
 8006eca:	4b1c      	ldr	r3, [pc, #112]	; (8006f3c <HAL_RCC_ClockConfig+0x1e4>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006ed2:	4a1c      	ldr	r2, [pc, #112]	; (8006f44 <HAL_RCC_ClockConfig+0x1ec>)
 8006ed4:	5cd3      	ldrb	r3, [r2, r3]
 8006ed6:	f003 031f 	and.w	r3, r3, #31
 8006eda:	40d8      	lsrs	r0, r3
 8006edc:	4b1a      	ldr	r3, [pc, #104]	; (8006f48 <HAL_RCC_ClockConfig+0x1f0>)
 8006ede:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8006ee0:	4b1a      	ldr	r3, [pc, #104]	; (8006f4c <HAL_RCC_ClockConfig+0x1f4>)
 8006ee2:	6818      	ldr	r0, [r3, #0]
 8006ee4:	f7fc fa9e 	bl	8003424 <HAL_InitTick>
}
 8006ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 8006eea:	2e80      	cmp	r6, #128	; 0x80
 8006eec:	d1ce      	bne.n	8006e8c <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006eee:	4a13      	ldr	r2, [pc, #76]	; (8006f3c <HAL_RCC_ClockConfig+0x1e4>)
 8006ef0:	6893      	ldr	r3, [r2, #8]
 8006ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ef6:	6093      	str	r3, [r2, #8]
 8006ef8:	e7c8      	b.n	8006e8c <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006efa:	4a0f      	ldr	r2, [pc, #60]	; (8006f38 <HAL_RCC_ClockConfig+0x1e0>)
 8006efc:	6813      	ldr	r3, [r2, #0]
 8006efe:	f023 030f 	bic.w	r3, r3, #15
 8006f02:	4323      	orrs	r3, r4
 8006f04:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006f06:	f7fc fad1 	bl	80034ac <HAL_GetTick>
 8006f0a:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f0c:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <HAL_RCC_ClockConfig+0x1e0>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 030f 	and.w	r3, r3, #15
 8006f14:	42a3      	cmp	r3, r4
 8006f16:	d0bf      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f18:	f7fc fac8 	bl	80034ac <HAL_GetTick>
 8006f1c:	1b80      	subs	r0, r0, r6
 8006f1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f22:	4298      	cmp	r0, r3
 8006f24:	d9f2      	bls.n	8006f0c <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 8006f26:	2003      	movs	r0, #3
 8006f28:	e7de      	b.n	8006ee8 <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 8006f2a:	2001      	movs	r0, #1
}
 8006f2c:	4770      	bx	lr
      return HAL_ERROR;
 8006f2e:	2001      	movs	r0, #1
 8006f30:	e7da      	b.n	8006ee8 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 8006f32:	2001      	movs	r0, #1
 8006f34:	e7d8      	b.n	8006ee8 <HAL_RCC_ClockConfig+0x190>
 8006f36:	bf00      	nop
 8006f38:	40022000 	.word	0x40022000
 8006f3c:	40021000 	.word	0x40021000
 8006f40:	04c4b400 	.word	0x04c4b400
 8006f44:	0800fad0 	.word	0x0800fad0
 8006f48:	20000004 	.word	0x20000004
 8006f4c:	200000b4 	.word	0x200000b4

08006f50 <HAL_RCC_GetHCLKFreq>:
}
 8006f50:	4b01      	ldr	r3, [pc, #4]	; (8006f58 <HAL_RCC_GetHCLKFreq+0x8>)
 8006f52:	6818      	ldr	r0, [r3, #0]
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	20000004 	.word	0x20000004

08006f5c <HAL_RCC_GetPCLK1Freq>:
{
 8006f5c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f5e:	f7ff fff7 	bl	8006f50 <HAL_RCC_GetHCLKFreq>
 8006f62:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006f6a:	4a04      	ldr	r2, [pc, #16]	; (8006f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f6c:	5cd3      	ldrb	r3, [r2, r3]
 8006f6e:	f003 031f 	and.w	r3, r3, #31
}
 8006f72:	40d8      	lsrs	r0, r3
 8006f74:	bd08      	pop	{r3, pc}
 8006f76:	bf00      	nop
 8006f78:	40021000 	.word	0x40021000
 8006f7c:	0800fae0 	.word	0x0800fae0

08006f80 <HAL_RCC_GetPCLK2Freq>:
{
 8006f80:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006f82:	f7ff ffe5 	bl	8006f50 <HAL_RCC_GetHCLKFreq>
 8006f86:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006f8e:	4a04      	ldr	r2, [pc, #16]	; (8006fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f90:	5cd3      	ldrb	r3, [r2, r3]
 8006f92:	f003 031f 	and.w	r3, r3, #31
}
 8006f96:	40d8      	lsrs	r0, r3
 8006f98:	bd08      	pop	{r3, pc}
 8006f9a:	bf00      	nop
 8006f9c:	40021000 	.word	0x40021000
 8006fa0:	0800fae0 	.word	0x0800fae0

08006fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006faa:	6803      	ldr	r3, [r0, #0]
 8006fac:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8006fb0:	d06e      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xec>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fb2:	4b35      	ldr	r3, [pc, #212]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006fba:	d11e      	bne.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fbc:	4b32      	ldr	r3, [pc, #200]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006fbe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006fc0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006fc4:	659a      	str	r2, [r3, #88]	; 0x58
 8006fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fcc:	9301      	str	r3, [sp, #4]
 8006fce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006fd0:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fd2:	4a2e      	ldr	r2, [pc, #184]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006fd4:	6813      	ldr	r3, [r2, #0]
 8006fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fdc:	f7fc fa66 	bl	80034ac <HAL_GetTick>
 8006fe0:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fe2:	4b2a      	ldr	r3, [pc, #168]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006fea:	d108      	bne.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fec:	f7fc fa5e 	bl	80034ac <HAL_GetTick>
 8006ff0:	1b40      	subs	r0, r0, r5
 8006ff2:	2802      	cmp	r0, #2
 8006ff4:	d9f5      	bls.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 8006ff6:	2503      	movs	r5, #3
 8006ff8:	e002      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 8006ffa:	2600      	movs	r6, #0
 8006ffc:	e7e9      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ffe:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8007000:	bb45      	cbnz	r5, 8007054 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007002:	4b21      	ldr	r3, [pc, #132]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007008:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800700c:	d015      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x96>
 800700e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007010:	429a      	cmp	r2, r3
 8007012:	d012      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007014:	4a1c      	ldr	r2, [pc, #112]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007016:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800701a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800701e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8007022:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8007026:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800702a:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800702e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007032:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800703a:	f013 0f01 	tst.w	r3, #1
 800703e:	d110      	bne.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 8007040:	b945      	cbnz	r5, 8007054 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007042:	4a11      	ldr	r2, [pc, #68]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007044:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800704c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800704e:	430b      	orrs	r3, r1
 8007050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007054:	b1ee      	cbz	r6, 8007092 <HAL_RCCEx_PeriphCLKConfig+0xee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007056:	4a0c      	ldr	r2, [pc, #48]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007058:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800705a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800705e:	6593      	str	r3, [r2, #88]	; 0x58
 8007060:	e017      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 8007062:	f7fc fa23 	bl	80034ac <HAL_GetTick>
 8007066:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007068:	4b07      	ldr	r3, [pc, #28]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800706a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800706e:	f013 0f02 	tst.w	r3, #2
 8007072:	d1e5      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007074:	f7fc fa1a 	bl	80034ac <HAL_GetTick>
 8007078:	1bc0      	subs	r0, r0, r7
 800707a:	f241 3388 	movw	r3, #5000	; 0x1388
 800707e:	4298      	cmp	r0, r3
 8007080:	d9f2      	bls.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 8007082:	2503      	movs	r5, #3
 8007084:	e7dc      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8007086:	bf00      	nop
 8007088:	40021000 	.word	0x40021000
 800708c:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007090:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	f013 0f01 	tst.w	r3, #1
 8007098:	d008      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800709a:	4a9f      	ldr	r2, [pc, #636]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800709c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80070a0:	f023 0303 	bic.w	r3, r3, #3
 80070a4:	6861      	ldr	r1, [r4, #4]
 80070a6:	430b      	orrs	r3, r1
 80070a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	f013 0f02 	tst.w	r3, #2
 80070b2:	d008      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070b4:	4a98      	ldr	r2, [pc, #608]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80070ba:	f023 030c 	bic.w	r3, r3, #12
 80070be:	68a1      	ldr	r1, [r4, #8]
 80070c0:	430b      	orrs	r3, r1
 80070c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	f013 0f04 	tst.w	r3, #4
 80070cc:	d008      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070ce:	4a92      	ldr	r2, [pc, #584]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070d0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80070d4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80070d8:	68e1      	ldr	r1, [r4, #12]
 80070da:	430b      	orrs	r3, r1
 80070dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	f013 0f08 	tst.w	r3, #8
 80070e6:	d008      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070e8:	4a8b      	ldr	r2, [pc, #556]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80070ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80070f2:	6921      	ldr	r1, [r4, #16]
 80070f4:	430b      	orrs	r3, r1
 80070f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	f013 0f10 	tst.w	r3, #16
 8007100:	d008      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007102:	4a85      	ldr	r2, [pc, #532]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007104:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800710c:	6961      	ldr	r1, [r4, #20]
 800710e:	430b      	orrs	r3, r1
 8007110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	f013 0f20 	tst.w	r3, #32
 800711a:	d008      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800711c:	4a7e      	ldr	r2, [pc, #504]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800711e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007122:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007126:	69a1      	ldr	r1, [r4, #24]
 8007128:	430b      	orrs	r3, r1
 800712a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007134:	d008      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007136:	4a78      	ldr	r2, [pc, #480]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007138:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800713c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007140:	69e1      	ldr	r1, [r4, #28]
 8007142:	430b      	orrs	r3, r1
 8007144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800714e:	d008      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007150:	4a71      	ldr	r2, [pc, #452]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007152:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007156:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800715a:	6a21      	ldr	r1, [r4, #32]
 800715c:	430b      	orrs	r3, r1
 800715e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007168:	d008      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800716a:	4a6b      	ldr	r2, [pc, #428]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800716c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007170:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007174:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007176:	430b      	orrs	r3, r1
 8007178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800717c:	6823      	ldr	r3, [r4, #0]
 800717e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007182:	d008      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007184:	4a64      	ldr	r2, [pc, #400]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007186:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800718a:	f023 0303 	bic.w	r3, r3, #3
 800718e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007190:	430b      	orrs	r3, r1
 8007192:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	f413 7f00 	tst.w	r3, #512	; 0x200
 800719c:	d008      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800719e:	4a5e      	ldr	r2, [pc, #376]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071a0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80071a4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80071a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80071aa:	430b      	orrs	r3, r1
 80071ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80071b6:	d00c      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071b8:	4a57      	ldr	r2, [pc, #348]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80071be:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80071c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80071c4:	430b      	orrs	r3, r1
 80071c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80071ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80071cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071d0:	d079      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80071d8:	d00c      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80071da:	4a4f      	ldr	r2, [pc, #316]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80071e0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80071e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071e6:	430b      	orrs	r3, r1
 80071e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80071ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071f2:	d06d      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071f4:	6823      	ldr	r3, [r4, #0]
 80071f6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80071fa:	d00c      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071fc:	4a46      	ldr	r2, [pc, #280]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007202:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8007206:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007208:	430b      	orrs	r3, r1
 800720a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800720e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007214:	d061      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x336>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800721c:	d00c      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800721e:	4a3e      	ldr	r2, [pc, #248]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007220:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007224:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8007228:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800722a:	430b      	orrs	r3, r1
 800722c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007230:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007232:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007236:	d055      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800723e:	d00c      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007240:	4a35      	ldr	r2, [pc, #212]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007242:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007246:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800724a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800724c:	430b      	orrs	r3, r1
 800724e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007252:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007258:	d049      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007260:	d00c      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007262:	4a2d      	ldr	r2, [pc, #180]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007264:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007268:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800726c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800726e:	430b      	orrs	r3, r1
 8007270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007274:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007276:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800727a:	d03d      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x354>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007282:	d00c      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007284:	4a24      	ldr	r2, [pc, #144]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007286:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800728a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800728e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007290:	430b      	orrs	r3, r1
 8007292:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007296:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729c:	d031      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x35e>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80072a4:	d00c      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80072a6:	4a1c      	ldr	r2, [pc, #112]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072a8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80072ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80072b0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80072b2:	430b      	orrs	r3, r1
 80072b4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80072b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80072ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072be:	d025      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x368>
  }

#endif /* QUADSPI */

  return status;
}
 80072c0:	4628      	mov	r0, r5
 80072c2:	b003      	add	sp, #12
 80072c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072c6:	68d3      	ldr	r3, [r2, #12]
 80072c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072cc:	60d3      	str	r3, [r2, #12]
 80072ce:	e780      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072d0:	68d3      	ldr	r3, [r2, #12]
 80072d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072d6:	60d3      	str	r3, [r2, #12]
 80072d8:	e78c      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072da:	68d3      	ldr	r3, [r2, #12]
 80072dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072e0:	60d3      	str	r3, [r2, #12]
 80072e2:	e798      	b.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072e4:	68d3      	ldr	r3, [r2, #12]
 80072e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072ea:	60d3      	str	r3, [r2, #12]
 80072ec:	e7a4      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072ee:	68d3      	ldr	r3, [r2, #12]
 80072f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072f4:	60d3      	str	r3, [r2, #12]
 80072f6:	e7b0      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80072f8:	68d3      	ldr	r3, [r2, #12]
 80072fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072fe:	60d3      	str	r3, [r2, #12]
 8007300:	e7bc      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007302:	68d3      	ldr	r3, [r2, #12]
 8007304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007308:	60d3      	str	r3, [r2, #12]
 800730a:	e7c8      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800730c:	68d3      	ldr	r3, [r2, #12]
 800730e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007312:	60d3      	str	r3, [r2, #12]
 8007314:	e7d4      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007316:	bf00      	nop
 8007318:	40021000 	.word	0x40021000

0800731c <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800731c:	2800      	cmp	r0, #0
 800731e:	d06f      	beq.n	8007400 <HAL_SPI_Init+0xe4>
{
 8007320:	b510      	push	{r4, lr}
 8007322:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007324:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007326:	b933      	cbnz	r3, 8007336 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007328:	6843      	ldr	r3, [r0, #4]
 800732a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800732e:	d005      	beq.n	800733c <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007330:	2300      	movs	r3, #0
 8007332:	61c3      	str	r3, [r0, #28]
 8007334:	e002      	b.n	800733c <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007336:	2300      	movs	r3, #0
 8007338:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800733a:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800733c:	2300      	movs	r3, #0
 800733e:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007340:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8007344:	2b00      	cmp	r3, #0
 8007346:	d052      	beq.n	80073ee <HAL_SPI_Init+0xd2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007348:	2302      	movs	r3, #2
 800734a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800734e:	6822      	ldr	r2, [r4, #0]
 8007350:	6813      	ldr	r3, [r2, #0]
 8007352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007356:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007358:	68e3      	ldr	r3, [r4, #12]
 800735a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800735e:	d94c      	bls.n	80073fa <HAL_SPI_Init+0xde>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007360:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007362:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007366:	d004      	beq.n	8007372 <HAL_SPI_Init+0x56>
 8007368:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800736c:	d001      	beq.n	8007372 <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800736e:	2300      	movs	r3, #0
 8007370:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007372:	6863      	ldr	r3, [r4, #4]
 8007374:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8007378:	68a1      	ldr	r1, [r4, #8]
 800737a:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800737e:	430b      	orrs	r3, r1
 8007380:	6921      	ldr	r1, [r4, #16]
 8007382:	f001 0102 	and.w	r1, r1, #2
 8007386:	430b      	orrs	r3, r1
 8007388:	6961      	ldr	r1, [r4, #20]
 800738a:	f001 0101 	and.w	r1, r1, #1
 800738e:	430b      	orrs	r3, r1
 8007390:	69a1      	ldr	r1, [r4, #24]
 8007392:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8007396:	430b      	orrs	r3, r1
 8007398:	69e1      	ldr	r1, [r4, #28]
 800739a:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800739e:	430b      	orrs	r3, r1
 80073a0:	6a21      	ldr	r1, [r4, #32]
 80073a2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80073a6:	430b      	orrs	r3, r1
 80073a8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80073aa:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80073ae:	6820      	ldr	r0, [r4, #0]
 80073b0:	430b      	orrs	r3, r1
 80073b2:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80073b4:	8b63      	ldrh	r3, [r4, #26]
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80073bc:	f001 0110 	and.w	r1, r1, #16
 80073c0:	430b      	orrs	r3, r1
 80073c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073c4:	f001 0108 	and.w	r1, r1, #8
 80073c8:	430b      	orrs	r3, r1
 80073ca:	68e1      	ldr	r1, [r4, #12]
 80073cc:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80073d0:	430b      	orrs	r3, r1
 80073d2:	6821      	ldr	r1, [r4, #0]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073d8:	6822      	ldr	r2, [r4, #0]
 80073da:	69d3      	ldr	r3, [r2, #28]
 80073dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073e0:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073e2:	2000      	movs	r0, #0
 80073e4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80073e6:	2301      	movs	r3, #1
 80073e8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 80073ec:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80073ee:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80073f2:	4620      	mov	r0, r4
 80073f4:	f7fa ff5c 	bl	80022b0 <HAL_SPI_MspInit>
 80073f8:	e7a6      	b.n	8007348 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80073fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80073fe:	e7b0      	b.n	8007362 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8007400:	2001      	movs	r0, #1
}
 8007402:	4770      	bx	lr

08007404 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007404:	b340      	cbz	r0, 8007458 <HAL_SRAM_Init+0x54>
{
 8007406:	b570      	push	{r4, r5, r6, lr}
 8007408:	460e      	mov	r6, r1
 800740a:	4615      	mov	r5, r2
 800740c:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800740e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8007412:	b1e3      	cbz	r3, 800744e <HAL_SRAM_Init+0x4a>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007414:	4621      	mov	r1, r4
 8007416:	f851 0b08 	ldr.w	r0, [r1], #8
 800741a:	f001 f87d 	bl	8008518 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800741e:	68a2      	ldr	r2, [r4, #8]
 8007420:	4631      	mov	r1, r6
 8007422:	6820      	ldr	r0, [r4, #0]
 8007424:	f001 f8e8 	bl	80085f8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007428:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800742a:	68a2      	ldr	r2, [r4, #8]
 800742c:	4629      	mov	r1, r5
 800742e:	6860      	ldr	r0, [r4, #4]
 8007430:	f001 f915 	bl	800865e <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007434:	6822      	ldr	r2, [r4, #0]
 8007436:	68a1      	ldr	r1, [r4, #8]
 8007438:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800743c:	f043 0301 	orr.w	r3, r3, #1
 8007440:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007444:	2301      	movs	r3, #1
 8007446:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 800744a:	2000      	movs	r0, #0
}
 800744c:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 800744e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SRAM_MspInit(hsram);
 8007452:	f7fa fb3f 	bl	8001ad4 <HAL_SRAM_MspInit>
 8007456:	e7dd      	b.n	8007414 <HAL_SRAM_Init+0x10>
    return HAL_ERROR;
 8007458:	2001      	movs	r0, #1
}
 800745a:	4770      	bx	lr

0800745c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800745c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800745e:	6a03      	ldr	r3, [r0, #32]
 8007460:	f023 0301 	bic.w	r3, r3, #1
 8007464:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007466:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007468:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800746a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800746c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007470:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007474:	680c      	ldr	r4, [r1, #0]
 8007476:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007478:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800747c:	688c      	ldr	r4, [r1, #8]
 800747e:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007480:	4c21      	ldr	r4, [pc, #132]	; (8007508 <TIM_OC1_SetConfig+0xac>)
 8007482:	42a0      	cmp	r0, r4
 8007484:	d013      	beq.n	80074ae <TIM_OC1_SetConfig+0x52>
 8007486:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800748a:	42a0      	cmp	r0, r4
 800748c:	d00f      	beq.n	80074ae <TIM_OC1_SetConfig+0x52>
 800748e:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8007492:	42a0      	cmp	r0, r4
 8007494:	d00b      	beq.n	80074ae <TIM_OC1_SetConfig+0x52>
 8007496:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800749a:	42a0      	cmp	r0, r4
 800749c:	d007      	beq.n	80074ae <TIM_OC1_SetConfig+0x52>
 800749e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80074a2:	42a0      	cmp	r0, r4
 80074a4:	d003      	beq.n	80074ae <TIM_OC1_SetConfig+0x52>
 80074a6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80074aa:	42a0      	cmp	r0, r4
 80074ac:	d105      	bne.n	80074ba <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074ae:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074b2:	68cc      	ldr	r4, [r1, #12]
 80074b4:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074b6:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ba:	4c13      	ldr	r4, [pc, #76]	; (8007508 <TIM_OC1_SetConfig+0xac>)
 80074bc:	42a0      	cmp	r0, r4
 80074be:	d013      	beq.n	80074e8 <TIM_OC1_SetConfig+0x8c>
 80074c0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80074c4:	42a0      	cmp	r0, r4
 80074c6:	d00f      	beq.n	80074e8 <TIM_OC1_SetConfig+0x8c>
 80074c8:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80074cc:	42a0      	cmp	r0, r4
 80074ce:	d00b      	beq.n	80074e8 <TIM_OC1_SetConfig+0x8c>
 80074d0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80074d4:	42a0      	cmp	r0, r4
 80074d6:	d007      	beq.n	80074e8 <TIM_OC1_SetConfig+0x8c>
 80074d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80074dc:	42a0      	cmp	r0, r4
 80074de:	d003      	beq.n	80074e8 <TIM_OC1_SetConfig+0x8c>
 80074e0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80074e4:	42a0      	cmp	r0, r4
 80074e6:	d107      	bne.n	80074f8 <TIM_OC1_SetConfig+0x9c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074e8:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074ec:	694c      	ldr	r4, [r1, #20]
 80074ee:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074f2:	698d      	ldr	r5, [r1, #24]
 80074f4:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f8:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074fa:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074fc:	684a      	ldr	r2, [r1, #4]
 80074fe:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007500:	6203      	str	r3, [r0, #32]
}
 8007502:	bc30      	pop	{r4, r5}
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	40012c00 	.word	0x40012c00

0800750c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800750c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800750e:	6a03      	ldr	r3, [r0, #32]
 8007510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007514:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007516:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007518:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800751a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800751c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007520:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007524:	680d      	ldr	r5, [r1, #0]
 8007526:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800752c:	688d      	ldr	r5, [r1, #8]
 800752e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007532:	4d1c      	ldr	r5, [pc, #112]	; (80075a4 <TIM_OC3_SetConfig+0x98>)
 8007534:	42a8      	cmp	r0, r5
 8007536:	d007      	beq.n	8007548 <TIM_OC3_SetConfig+0x3c>
 8007538:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800753c:	42a8      	cmp	r0, r5
 800753e:	d003      	beq.n	8007548 <TIM_OC3_SetConfig+0x3c>
 8007540:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8007544:	42a8      	cmp	r0, r5
 8007546:	d106      	bne.n	8007556 <TIM_OC3_SetConfig+0x4a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007548:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800754c:	68cd      	ldr	r5, [r1, #12]
 800754e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007552:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007556:	4d13      	ldr	r5, [pc, #76]	; (80075a4 <TIM_OC3_SetConfig+0x98>)
 8007558:	42a8      	cmp	r0, r5
 800755a:	d013      	beq.n	8007584 <TIM_OC3_SetConfig+0x78>
 800755c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007560:	42a8      	cmp	r0, r5
 8007562:	d00f      	beq.n	8007584 <TIM_OC3_SetConfig+0x78>
 8007564:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007568:	42a8      	cmp	r0, r5
 800756a:	d00b      	beq.n	8007584 <TIM_OC3_SetConfig+0x78>
 800756c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007570:	42a8      	cmp	r0, r5
 8007572:	d007      	beq.n	8007584 <TIM_OC3_SetConfig+0x78>
 8007574:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007578:	42a8      	cmp	r0, r5
 800757a:	d003      	beq.n	8007584 <TIM_OC3_SetConfig+0x78>
 800757c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007580:	42a8      	cmp	r0, r5
 8007582:	d107      	bne.n	8007594 <TIM_OC3_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007584:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007588:	694c      	ldr	r4, [r1, #20]
 800758a:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800758e:	698c      	ldr	r4, [r1, #24]
 8007590:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007594:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007596:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007598:	684a      	ldr	r2, [r1, #4]
 800759a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800759c:	6203      	str	r3, [r0, #32]
}
 800759e:	bc30      	pop	{r4, r5}
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	40012c00 	.word	0x40012c00

080075a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075a8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075aa:	6a03      	ldr	r3, [r0, #32]
 80075ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075b0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075b6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075b8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80075bc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075c0:	680d      	ldr	r5, [r1, #0]
 80075c2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075ca:	688d      	ldr	r5, [r1, #8]
 80075cc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80075d0:	4d1b      	ldr	r5, [pc, #108]	; (8007640 <TIM_OC4_SetConfig+0x98>)
 80075d2:	42a8      	cmp	r0, r5
 80075d4:	d007      	beq.n	80075e6 <TIM_OC4_SetConfig+0x3e>
 80075d6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80075da:	42a8      	cmp	r0, r5
 80075dc:	d003      	beq.n	80075e6 <TIM_OC4_SetConfig+0x3e>
 80075de:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80075e2:	42a8      	cmp	r0, r5
 80075e4:	d106      	bne.n	80075f4 <TIM_OC4_SetConfig+0x4c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80075e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80075ea:	68cd      	ldr	r5, [r1, #12]
 80075ec:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80075f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f4:	4d12      	ldr	r5, [pc, #72]	; (8007640 <TIM_OC4_SetConfig+0x98>)
 80075f6:	42a8      	cmp	r0, r5
 80075f8:	d013      	beq.n	8007622 <TIM_OC4_SetConfig+0x7a>
 80075fa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80075fe:	42a8      	cmp	r0, r5
 8007600:	d00f      	beq.n	8007622 <TIM_OC4_SetConfig+0x7a>
 8007602:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007606:	42a8      	cmp	r0, r5
 8007608:	d00b      	beq.n	8007622 <TIM_OC4_SetConfig+0x7a>
 800760a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800760e:	42a8      	cmp	r0, r5
 8007610:	d007      	beq.n	8007622 <TIM_OC4_SetConfig+0x7a>
 8007612:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007616:	42a8      	cmp	r0, r5
 8007618:	d003      	beq.n	8007622 <TIM_OC4_SetConfig+0x7a>
 800761a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800761e:	42a8      	cmp	r0, r5
 8007620:	d107      	bne.n	8007632 <TIM_OC4_SetConfig+0x8a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007622:	f424 4c40 	bic.w	ip, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007626:	694c      	ldr	r4, [r1, #20]
 8007628:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800762c:	698c      	ldr	r4, [r1, #24]
 800762e:	ea4c 1484 	orr.w	r4, ip, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007632:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007634:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007636:	684a      	ldr	r2, [r1, #4]
 8007638:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800763a:	6203      	str	r3, [r0, #32]
}
 800763c:	bc30      	pop	{r4, r5}
 800763e:	4770      	bx	lr
 8007640:	40012c00 	.word	0x40012c00

08007644 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007644:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007646:	6a03      	ldr	r3, [r0, #32]
 8007648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800764c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007650:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007652:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007654:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007658:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800765c:	680d      	ldr	r5, [r1, #0]
 800765e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007660:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007664:	688d      	ldr	r5, [r1, #8]
 8007666:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800766a:	4d11      	ldr	r5, [pc, #68]	; (80076b0 <TIM_OC5_SetConfig+0x6c>)
 800766c:	42a8      	cmp	r0, r5
 800766e:	d013      	beq.n	8007698 <TIM_OC5_SetConfig+0x54>
 8007670:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007674:	42a8      	cmp	r0, r5
 8007676:	d00f      	beq.n	8007698 <TIM_OC5_SetConfig+0x54>
 8007678:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800767c:	42a8      	cmp	r0, r5
 800767e:	d00b      	beq.n	8007698 <TIM_OC5_SetConfig+0x54>
 8007680:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007684:	42a8      	cmp	r0, r5
 8007686:	d007      	beq.n	8007698 <TIM_OC5_SetConfig+0x54>
 8007688:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800768c:	42a8      	cmp	r0, r5
 800768e:	d003      	beq.n	8007698 <TIM_OC5_SetConfig+0x54>
 8007690:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007694:	42a8      	cmp	r0, r5
 8007696:	d104      	bne.n	80076a2 <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007698:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800769c:	694d      	ldr	r5, [r1, #20]
 800769e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076a4:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80076a6:	684a      	ldr	r2, [r1, #4]
 80076a8:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076aa:	6203      	str	r3, [r0, #32]
}
 80076ac:	bc30      	pop	{r4, r5}
 80076ae:	4770      	bx	lr
 80076b0:	40012c00 	.word	0x40012c00

080076b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80076b4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80076b6:	6a03      	ldr	r3, [r0, #32]
 80076b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80076bc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076be:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076c2:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80076c4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80076c8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076cc:	680d      	ldr	r5, [r1, #0]
 80076ce:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80076d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80076d6:	688d      	ldr	r5, [r1, #8]
 80076d8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076dc:	4d11      	ldr	r5, [pc, #68]	; (8007724 <TIM_OC6_SetConfig+0x70>)
 80076de:	42a8      	cmp	r0, r5
 80076e0:	d013      	beq.n	800770a <TIM_OC6_SetConfig+0x56>
 80076e2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80076e6:	42a8      	cmp	r0, r5
 80076e8:	d00f      	beq.n	800770a <TIM_OC6_SetConfig+0x56>
 80076ea:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80076ee:	42a8      	cmp	r0, r5
 80076f0:	d00b      	beq.n	800770a <TIM_OC6_SetConfig+0x56>
 80076f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80076f6:	42a8      	cmp	r0, r5
 80076f8:	d007      	beq.n	800770a <TIM_OC6_SetConfig+0x56>
 80076fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80076fe:	42a8      	cmp	r0, r5
 8007700:	d003      	beq.n	800770a <TIM_OC6_SetConfig+0x56>
 8007702:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007706:	42a8      	cmp	r0, r5
 8007708:	d104      	bne.n	8007714 <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800770a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800770e:	694d      	ldr	r5, [r1, #20]
 8007710:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007714:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007716:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007718:	684a      	ldr	r2, [r1, #4]
 800771a:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800771c:	6203      	str	r3, [r0, #32]
}
 800771e:	bc30      	pop	{r4, r5}
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	40012c00 	.word	0x40012c00

08007728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007728:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800772a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800772c:	6a04      	ldr	r4, [r0, #32]
 800772e:	f024 0401 	bic.w	r4, r4, #1
 8007732:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007734:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007736:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800773a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800773e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8007742:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007744:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007746:	6203      	str	r3, [r0, #32]
}
 8007748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800774c:	4770      	bx	lr

0800774e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800774e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007750:	6a04      	ldr	r4, [r0, #32]
 8007752:	f024 0410 	bic.w	r4, r4, #16
 8007756:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007758:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800775a:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800775c:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007760:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007764:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007768:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800776c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800776e:	6203      	str	r3, [r0, #32]
}
 8007770:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007774:	4770      	bx	lr

08007776 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007776:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007778:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800777c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007780:	430b      	orrs	r3, r1
 8007782:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007786:	6083      	str	r3, [r0, #8]
}
 8007788:	4770      	bx	lr

0800778a <HAL_TIM_PWM_MspInit>:
}
 800778a:	4770      	bx	lr

0800778c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800778c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800778e:	4a36      	ldr	r2, [pc, #216]	; (8007868 <TIM_Base_SetConfig+0xdc>)
 8007790:	4290      	cmp	r0, r2
 8007792:	d016      	beq.n	80077c2 <TIM_Base_SetConfig+0x36>
 8007794:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007798:	d013      	beq.n	80077c2 <TIM_Base_SetConfig+0x36>
 800779a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800779e:	4290      	cmp	r0, r2
 80077a0:	d00f      	beq.n	80077c2 <TIM_Base_SetConfig+0x36>
 80077a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077a6:	4290      	cmp	r0, r2
 80077a8:	d00b      	beq.n	80077c2 <TIM_Base_SetConfig+0x36>
 80077aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077ae:	4290      	cmp	r0, r2
 80077b0:	d007      	beq.n	80077c2 <TIM_Base_SetConfig+0x36>
 80077b2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80077b6:	4290      	cmp	r0, r2
 80077b8:	d003      	beq.n	80077c2 <TIM_Base_SetConfig+0x36>
 80077ba:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80077be:	4290      	cmp	r0, r2
 80077c0:	d103      	bne.n	80077ca <TIM_Base_SetConfig+0x3e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80077c6:	684a      	ldr	r2, [r1, #4]
 80077c8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077ca:	4a27      	ldr	r2, [pc, #156]	; (8007868 <TIM_Base_SetConfig+0xdc>)
 80077cc:	4290      	cmp	r0, r2
 80077ce:	d022      	beq.n	8007816 <TIM_Base_SetConfig+0x8a>
 80077d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80077d4:	d01f      	beq.n	8007816 <TIM_Base_SetConfig+0x8a>
 80077d6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80077da:	4290      	cmp	r0, r2
 80077dc:	d01b      	beq.n	8007816 <TIM_Base_SetConfig+0x8a>
 80077de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077e2:	4290      	cmp	r0, r2
 80077e4:	d017      	beq.n	8007816 <TIM_Base_SetConfig+0x8a>
 80077e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077ea:	4290      	cmp	r0, r2
 80077ec:	d013      	beq.n	8007816 <TIM_Base_SetConfig+0x8a>
 80077ee:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80077f2:	4290      	cmp	r0, r2
 80077f4:	d00f      	beq.n	8007816 <TIM_Base_SetConfig+0x8a>
 80077f6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80077fa:	4290      	cmp	r0, r2
 80077fc:	d00b      	beq.n	8007816 <TIM_Base_SetConfig+0x8a>
 80077fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007802:	4290      	cmp	r0, r2
 8007804:	d007      	beq.n	8007816 <TIM_Base_SetConfig+0x8a>
 8007806:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800780a:	4290      	cmp	r0, r2
 800780c:	d003      	beq.n	8007816 <TIM_Base_SetConfig+0x8a>
 800780e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007812:	4290      	cmp	r0, r2
 8007814:	d103      	bne.n	800781e <TIM_Base_SetConfig+0x92>
    tmpcr1 &= ~TIM_CR1_CKD;
 8007816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800781a:	68ca      	ldr	r2, [r1, #12]
 800781c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800781e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007822:	694a      	ldr	r2, [r1, #20]
 8007824:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007826:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007828:	688b      	ldr	r3, [r1, #8]
 800782a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800782c:	680b      	ldr	r3, [r1, #0]
 800782e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007830:	4b0d      	ldr	r3, [pc, #52]	; (8007868 <TIM_Base_SetConfig+0xdc>)
 8007832:	4298      	cmp	r0, r3
 8007834:	d013      	beq.n	800785e <TIM_Base_SetConfig+0xd2>
 8007836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800783a:	4298      	cmp	r0, r3
 800783c:	d00f      	beq.n	800785e <TIM_Base_SetConfig+0xd2>
 800783e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007842:	4298      	cmp	r0, r3
 8007844:	d00b      	beq.n	800785e <TIM_Base_SetConfig+0xd2>
 8007846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800784a:	4298      	cmp	r0, r3
 800784c:	d007      	beq.n	800785e <TIM_Base_SetConfig+0xd2>
 800784e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007852:	4298      	cmp	r0, r3
 8007854:	d003      	beq.n	800785e <TIM_Base_SetConfig+0xd2>
 8007856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800785a:	4298      	cmp	r0, r3
 800785c:	d101      	bne.n	8007862 <TIM_Base_SetConfig+0xd6>
    TIMx->RCR = Structure->RepetitionCounter;
 800785e:	690b      	ldr	r3, [r1, #16]
 8007860:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007862:	2301      	movs	r3, #1
 8007864:	6143      	str	r3, [r0, #20]
}
 8007866:	4770      	bx	lr
 8007868:	40012c00 	.word	0x40012c00

0800786c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800786c:	b360      	cbz	r0, 80078c8 <HAL_TIM_Base_Init+0x5c>
{
 800786e:	b510      	push	{r4, lr}
 8007870:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007872:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007876:	b313      	cbz	r3, 80078be <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8007878:	2302      	movs	r3, #2
 800787a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800787e:	4621      	mov	r1, r4
 8007880:	f851 0b04 	ldr.w	r0, [r1], #4
 8007884:	f7ff ff82 	bl	800778c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007888:	2301      	movs	r3, #1
 800788a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800788e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007892:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007896:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800789a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800789e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80078aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078ae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80078b2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80078b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80078ba:	2000      	movs	r0, #0
}
 80078bc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80078be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80078c2:	f7fa fe47 	bl	8002554 <HAL_TIM_Base_MspInit>
 80078c6:	e7d7      	b.n	8007878 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80078c8:	2001      	movs	r0, #1
}
 80078ca:	4770      	bx	lr

080078cc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80078cc:	b360      	cbz	r0, 8007928 <HAL_TIM_PWM_Init+0x5c>
{
 80078ce:	b510      	push	{r4, lr}
 80078d0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80078d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80078d6:	b313      	cbz	r3, 800791e <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80078d8:	2302      	movs	r3, #2
 80078da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078de:	4621      	mov	r1, r4
 80078e0:	f851 0b04 	ldr.w	r0, [r1], #4
 80078e4:	f7ff ff52 	bl	800778c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078e8:	2301      	movs	r3, #1
 80078ea:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80078f2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80078f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80078fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80078fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007906:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800790a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800790e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007912:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007916:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800791a:	2000      	movs	r0, #0
}
 800791c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800791e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007922:	f7ff ff32 	bl	800778a <HAL_TIM_PWM_MspInit>
 8007926:	e7d7      	b.n	80078d8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8007928:	2001      	movs	r0, #1
}
 800792a:	4770      	bx	lr

0800792c <TIM_OC2_SetConfig>:
{
 800792c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800792e:	6a03      	ldr	r3, [r0, #32]
 8007930:	f023 0310 	bic.w	r3, r3, #16
 8007934:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007936:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007938:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800793a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800793c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007940:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007944:	680d      	ldr	r5, [r1, #0]
 8007946:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800794a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800794e:	688d      	ldr	r5, [r1, #8]
 8007950:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007954:	4d1b      	ldr	r5, [pc, #108]	; (80079c4 <TIM_OC2_SetConfig+0x98>)
 8007956:	42a8      	cmp	r0, r5
 8007958:	d007      	beq.n	800796a <TIM_OC2_SetConfig+0x3e>
 800795a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800795e:	42a8      	cmp	r0, r5
 8007960:	d003      	beq.n	800796a <TIM_OC2_SetConfig+0x3e>
 8007962:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8007966:	42a8      	cmp	r0, r5
 8007968:	d106      	bne.n	8007978 <TIM_OC2_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC2NP;
 800796a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800796e:	68cd      	ldr	r5, [r1, #12]
 8007970:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007978:	4d12      	ldr	r5, [pc, #72]	; (80079c4 <TIM_OC2_SetConfig+0x98>)
 800797a:	42a8      	cmp	r0, r5
 800797c:	d013      	beq.n	80079a6 <TIM_OC2_SetConfig+0x7a>
 800797e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007982:	42a8      	cmp	r0, r5
 8007984:	d00f      	beq.n	80079a6 <TIM_OC2_SetConfig+0x7a>
 8007986:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800798a:	42a8      	cmp	r0, r5
 800798c:	d00b      	beq.n	80079a6 <TIM_OC2_SetConfig+0x7a>
 800798e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007992:	42a8      	cmp	r0, r5
 8007994:	d007      	beq.n	80079a6 <TIM_OC2_SetConfig+0x7a>
 8007996:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800799a:	42a8      	cmp	r0, r5
 800799c:	d003      	beq.n	80079a6 <TIM_OC2_SetConfig+0x7a>
 800799e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80079a2:	42a8      	cmp	r0, r5
 80079a4:	d107      	bne.n	80079b6 <TIM_OC2_SetConfig+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079a6:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079aa:	694c      	ldr	r4, [r1, #20]
 80079ac:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079b0:	698c      	ldr	r4, [r1, #24]
 80079b2:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80079b6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80079b8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80079ba:	684a      	ldr	r2, [r1, #4]
 80079bc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80079be:	6203      	str	r3, [r0, #32]
}
 80079c0:	bc30      	pop	{r4, r5}
 80079c2:	4770      	bx	lr
 80079c4:	40012c00 	.word	0x40012c00

080079c8 <HAL_TIM_PWM_ConfigChannel>:
{
 80079c8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80079ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	f000 8095 	beq.w	8007afe <HAL_TIM_PWM_ConfigChannel+0x136>
 80079d4:	4604      	mov	r4, r0
 80079d6:	460d      	mov	r5, r1
 80079d8:	2301      	movs	r3, #1
 80079da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80079de:	2a14      	cmp	r2, #20
 80079e0:	f200 8088 	bhi.w	8007af4 <HAL_TIM_PWM_ConfigChannel+0x12c>
 80079e4:	e8df f002 	tbb	[pc, r2]
 80079e8:	8686860b 	.word	0x8686860b
 80079ec:	8686861f 	.word	0x8686861f
 80079f0:	86868634 	.word	0x86868634
 80079f4:	86868648 	.word	0x86868648
 80079f8:	8686865d 	.word	0x8686865d
 80079fc:	71          	.byte	0x71
 80079fd:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079fe:	6800      	ldr	r0, [r0, #0]
 8007a00:	f7ff fd2c 	bl	800745c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a04:	6822      	ldr	r2, [r4, #0]
 8007a06:	6993      	ldr	r3, [r2, #24]
 8007a08:	f043 0308 	orr.w	r3, r3, #8
 8007a0c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a0e:	6822      	ldr	r2, [r4, #0]
 8007a10:	6993      	ldr	r3, [r2, #24]
 8007a12:	f023 0304 	bic.w	r3, r3, #4
 8007a16:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a18:	6822      	ldr	r2, [r4, #0]
 8007a1a:	6993      	ldr	r3, [r2, #24]
 8007a1c:	6929      	ldr	r1, [r5, #16]
 8007a1e:	430b      	orrs	r3, r1
 8007a20:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007a22:	2000      	movs	r0, #0
      break;
 8007a24:	e067      	b.n	8007af6 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a26:	6800      	ldr	r0, [r0, #0]
 8007a28:	f7ff ff80 	bl	800792c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a2c:	6822      	ldr	r2, [r4, #0]
 8007a2e:	6993      	ldr	r3, [r2, #24]
 8007a30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007a34:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a36:	6822      	ldr	r2, [r4, #0]
 8007a38:	6993      	ldr	r3, [r2, #24]
 8007a3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a3e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a40:	6822      	ldr	r2, [r4, #0]
 8007a42:	6993      	ldr	r3, [r2, #24]
 8007a44:	6929      	ldr	r1, [r5, #16]
 8007a46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007a4a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007a4c:	2000      	movs	r0, #0
      break;
 8007a4e:	e052      	b.n	8007af6 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a50:	6800      	ldr	r0, [r0, #0]
 8007a52:	f7ff fd5b 	bl	800750c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a56:	6822      	ldr	r2, [r4, #0]
 8007a58:	69d3      	ldr	r3, [r2, #28]
 8007a5a:	f043 0308 	orr.w	r3, r3, #8
 8007a5e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a60:	6822      	ldr	r2, [r4, #0]
 8007a62:	69d3      	ldr	r3, [r2, #28]
 8007a64:	f023 0304 	bic.w	r3, r3, #4
 8007a68:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a6a:	6822      	ldr	r2, [r4, #0]
 8007a6c:	69d3      	ldr	r3, [r2, #28]
 8007a6e:	6929      	ldr	r1, [r5, #16]
 8007a70:	430b      	orrs	r3, r1
 8007a72:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007a74:	2000      	movs	r0, #0
      break;
 8007a76:	e03e      	b.n	8007af6 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a78:	6800      	ldr	r0, [r0, #0]
 8007a7a:	f7ff fd95 	bl	80075a8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a7e:	6822      	ldr	r2, [r4, #0]
 8007a80:	69d3      	ldr	r3, [r2, #28]
 8007a82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007a86:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a88:	6822      	ldr	r2, [r4, #0]
 8007a8a:	69d3      	ldr	r3, [r2, #28]
 8007a8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a90:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a92:	6822      	ldr	r2, [r4, #0]
 8007a94:	69d3      	ldr	r3, [r2, #28]
 8007a96:	6929      	ldr	r1, [r5, #16]
 8007a98:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007a9c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007a9e:	2000      	movs	r0, #0
      break;
 8007aa0:	e029      	b.n	8007af6 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007aa2:	6800      	ldr	r0, [r0, #0]
 8007aa4:	f7ff fdce 	bl	8007644 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007aa8:	6822      	ldr	r2, [r4, #0]
 8007aaa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007aac:	f043 0308 	orr.w	r3, r3, #8
 8007ab0:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ab2:	6822      	ldr	r2, [r4, #0]
 8007ab4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007ab6:	f023 0304 	bic.w	r3, r3, #4
 8007aba:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007abc:	6822      	ldr	r2, [r4, #0]
 8007abe:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007ac0:	6929      	ldr	r1, [r5, #16]
 8007ac2:	430b      	orrs	r3, r1
 8007ac4:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8007ac6:	2000      	movs	r0, #0
      break;
 8007ac8:	e015      	b.n	8007af6 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007aca:	6800      	ldr	r0, [r0, #0]
 8007acc:	f7ff fdf2 	bl	80076b4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ad0:	6822      	ldr	r2, [r4, #0]
 8007ad2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007ad4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007ad8:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ada:	6822      	ldr	r2, [r4, #0]
 8007adc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007ade:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ae2:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ae4:	6822      	ldr	r2, [r4, #0]
 8007ae6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007ae8:	6929      	ldr	r1, [r5, #16]
 8007aea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007aee:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8007af0:	2000      	movs	r0, #0
      break;
 8007af2:	e000      	b.n	8007af6 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8007af4:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8007af6:	2300      	movs	r3, #0
 8007af8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007afc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8007afe:	2002      	movs	r0, #2
 8007b00:	e7fc      	b.n	8007afc <HAL_TIM_PWM_ConfigChannel+0x134>

08007b02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b02:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b04:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b06:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b0a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b14:	6082      	str	r2, [r0, #8]
}
 8007b16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007b1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	f000 809b 	beq.w	8007c5c <HAL_TIM_ConfigClockSource+0x140>
{
 8007b26:	b510      	push	{r4, lr}
 8007b28:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007b30:	2302      	movs	r3, #2
 8007b32:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007b36:	6802      	ldr	r2, [r0, #0]
 8007b38:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b3a:	4b49      	ldr	r3, [pc, #292]	; (8007c60 <HAL_TIM_ConfigClockSource+0x144>)
 8007b3c:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8007b3e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8007b40:	680b      	ldr	r3, [r1, #0]
 8007b42:	2b70      	cmp	r3, #112	; 0x70
 8007b44:	d061      	beq.n	8007c0a <HAL_TIM_ConfigClockSource+0xee>
 8007b46:	d831      	bhi.n	8007bac <HAL_TIM_ConfigClockSource+0x90>
 8007b48:	2b50      	cmp	r3, #80	; 0x50
 8007b4a:	d078      	beq.n	8007c3e <HAL_TIM_ConfigClockSource+0x122>
 8007b4c:	d90c      	bls.n	8007b68 <HAL_TIM_ConfigClockSource+0x4c>
 8007b4e:	2b60      	cmp	r3, #96	; 0x60
 8007b50:	d12a      	bne.n	8007ba8 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b52:	68ca      	ldr	r2, [r1, #12]
 8007b54:	6849      	ldr	r1, [r1, #4]
 8007b56:	6820      	ldr	r0, [r4, #0]
 8007b58:	f7ff fdf9 	bl	800774e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b5c:	2160      	movs	r1, #96	; 0x60
 8007b5e:	6820      	ldr	r0, [r4, #0]
 8007b60:	f7ff fe09 	bl	8007776 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007b64:	2000      	movs	r0, #0
      break;
 8007b66:	e038      	b.n	8007bda <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8007b68:	2b40      	cmp	r3, #64	; 0x40
 8007b6a:	d10a      	bne.n	8007b82 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b6c:	68ca      	ldr	r2, [r1, #12]
 8007b6e:	6849      	ldr	r1, [r1, #4]
 8007b70:	6820      	ldr	r0, [r4, #0]
 8007b72:	f7ff fdd9 	bl	8007728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b76:	2140      	movs	r1, #64	; 0x40
 8007b78:	6820      	ldr	r0, [r4, #0]
 8007b7a:	f7ff fdfc 	bl	8007776 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007b7e:	2000      	movs	r0, #0
      break;
 8007b80:	e02b      	b.n	8007bda <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8007b82:	d867      	bhi.n	8007c54 <HAL_TIM_ConfigClockSource+0x138>
 8007b84:	2b20      	cmp	r3, #32
 8007b86:	d007      	beq.n	8007b98 <HAL_TIM_ConfigClockSource+0x7c>
 8007b88:	d903      	bls.n	8007b92 <HAL_TIM_ConfigClockSource+0x76>
 8007b8a:	2b30      	cmp	r3, #48	; 0x30
 8007b8c:	d004      	beq.n	8007b98 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8007b8e:	2001      	movs	r0, #1
 8007b90:	e023      	b.n	8007bda <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8007b92:	b10b      	cbz	r3, 8007b98 <HAL_TIM_ConfigClockSource+0x7c>
 8007b94:	2b10      	cmp	r3, #16
 8007b96:	d105      	bne.n	8007ba4 <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6820      	ldr	r0, [r4, #0]
 8007b9c:	f7ff fdeb 	bl	8007776 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007ba0:	2000      	movs	r0, #0
      break;
 8007ba2:	e01a      	b.n	8007bda <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8007ba4:	2001      	movs	r0, #1
 8007ba6:	e018      	b.n	8007bda <HAL_TIM_ConfigClockSource+0xbe>
 8007ba8:	2001      	movs	r0, #1
 8007baa:	e016      	b.n	8007bda <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8007bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bb0:	d038      	beq.n	8007c24 <HAL_TIM_ConfigClockSource+0x108>
 8007bb2:	d90e      	bls.n	8007bd2 <HAL_TIM_ConfigClockSource+0xb6>
 8007bb4:	4a2b      	ldr	r2, [pc, #172]	; (8007c64 <HAL_TIM_ConfigClockSource+0x148>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d0ee      	beq.n	8007b98 <HAL_TIM_ConfigClockSource+0x7c>
 8007bba:	d915      	bls.n	8007be8 <HAL_TIM_ConfigClockSource+0xcc>
 8007bbc:	4a2a      	ldr	r2, [pc, #168]	; (8007c68 <HAL_TIM_ConfigClockSource+0x14c>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d0ea      	beq.n	8007b98 <HAL_TIM_ConfigClockSource+0x7c>
 8007bc2:	3210      	adds	r2, #16
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d0e7      	beq.n	8007b98 <HAL_TIM_ConfigClockSource+0x7c>
 8007bc8:	3a20      	subs	r2, #32
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d0e4      	beq.n	8007b98 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8007bce:	2001      	movs	r0, #1
 8007bd0:	e003      	b.n	8007bda <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8007bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bd6:	d13f      	bne.n	8007c58 <HAL_TIM_ConfigClockSource+0x13c>
 8007bd8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007be0:	2300      	movs	r3, #0
 8007be2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007be6:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8007be8:	3a20      	subs	r2, #32
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d0d4      	beq.n	8007b98 <HAL_TIM_ConfigClockSource+0x7c>
 8007bee:	d904      	bls.n	8007bfa <HAL_TIM_ConfigClockSource+0xde>
 8007bf0:	4a1e      	ldr	r2, [pc, #120]	; (8007c6c <HAL_TIM_ConfigClockSource+0x150>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d0d0      	beq.n	8007b98 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	e7ef      	b.n	8007bda <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8007bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bfe:	d0cb      	beq.n	8007b98 <HAL_TIM_ConfigClockSource+0x7c>
 8007c00:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007c04:	d0c8      	beq.n	8007b98 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8007c06:	2001      	movs	r0, #1
 8007c08:	e7e7      	b.n	8007bda <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 8007c0a:	68cb      	ldr	r3, [r1, #12]
 8007c0c:	684a      	ldr	r2, [r1, #4]
 8007c0e:	6889      	ldr	r1, [r1, #8]
 8007c10:	6820      	ldr	r0, [r4, #0]
 8007c12:	f7ff ff76 	bl	8007b02 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007c16:	6822      	ldr	r2, [r4, #0]
 8007c18:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c1a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007c1e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007c20:	2000      	movs	r0, #0
      break;
 8007c22:	e7da      	b.n	8007bda <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 8007c24:	68cb      	ldr	r3, [r1, #12]
 8007c26:	684a      	ldr	r2, [r1, #4]
 8007c28:	6889      	ldr	r1, [r1, #8]
 8007c2a:	6820      	ldr	r0, [r4, #0]
 8007c2c:	f7ff ff69 	bl	8007b02 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c30:	6822      	ldr	r2, [r4, #0]
 8007c32:	6893      	ldr	r3, [r2, #8]
 8007c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c38:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007c3a:	2000      	movs	r0, #0
      break;
 8007c3c:	e7cd      	b.n	8007bda <HAL_TIM_ConfigClockSource+0xbe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c3e:	68ca      	ldr	r2, [r1, #12]
 8007c40:	6849      	ldr	r1, [r1, #4]
 8007c42:	6820      	ldr	r0, [r4, #0]
 8007c44:	f7ff fd70 	bl	8007728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c48:	2150      	movs	r1, #80	; 0x50
 8007c4a:	6820      	ldr	r0, [r4, #0]
 8007c4c:	f7ff fd93 	bl	8007776 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007c50:	2000      	movs	r0, #0
      break;
 8007c52:	e7c2      	b.n	8007bda <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8007c54:	2001      	movs	r0, #1
 8007c56:	e7c0      	b.n	8007bda <HAL_TIM_ConfigClockSource+0xbe>
 8007c58:	2001      	movs	r0, #1
 8007c5a:	e7be      	b.n	8007bda <HAL_TIM_ConfigClockSource+0xbe>
  __HAL_LOCK(htim);
 8007c5c:	2002      	movs	r0, #2
}
 8007c5e:	4770      	bx	lr
 8007c60:	ffce0088 	.word	0xffce0088
 8007c64:	00100040 	.word	0x00100040
 8007c68:	00100060 	.word	0x00100060
 8007c6c:	00100030 	.word	0x00100030

08007c70 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c70:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d04c      	beq.n	8007d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
{
 8007c78:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c80:	2302      	movs	r3, #2
 8007c82:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c86:	6802      	ldr	r2, [r0, #0]
 8007c88:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c8a:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c8c:	4d22      	ldr	r5, [pc, #136]	; (8007d18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007c8e:	42aa      	cmp	r2, r5
 8007c90:	d007      	beq.n	8007ca2 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8007c92:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007c96:	42aa      	cmp	r2, r5
 8007c98:	d003      	beq.n	8007ca2 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8007c9a:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8007c9e:	42aa      	cmp	r2, r5
 8007ca0:	d103      	bne.n	8007caa <HAL_TIMEx_MasterConfigSynchronization+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ca2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ca6:	684d      	ldr	r5, [r1, #4]
 8007ca8:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007caa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cb2:	680d      	ldr	r5, [r1, #0]
 8007cb4:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cb6:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cb8:	6803      	ldr	r3, [r0, #0]
 8007cba:	4a17      	ldr	r2, [pc, #92]	; (8007d18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d01a      	beq.n	8007cf6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc4:	d017      	beq.n	8007cf6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007cc6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d013      	beq.n	8007cf6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007cce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d00f      	beq.n	8007cf6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007cd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d00b      	beq.n	8007cf6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007cde:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d007      	beq.n	8007cf6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007ce6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d003      	beq.n	8007cf6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007cee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d104      	bne.n	8007d00 <HAL_TIMEx_MasterConfigSynchronization+0x90>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cf6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cfa:	688a      	ldr	r2, [r1, #8]
 8007cfc:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cfe:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d00:	2301      	movs	r3, #1
 8007d02:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d06:	2300      	movs	r3, #0
 8007d08:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8007d0c:	4618      	mov	r0, r3
}
 8007d0e:	bc30      	pop	{r4, r5}
 8007d10:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007d12:	2002      	movs	r0, #2
}
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	40012c00 	.word	0x40012c00

08007d1c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d060      	beq.n	8007de6 <HAL_TIMEx_ConfigBreakDeadTime+0xca>
{
 8007d24:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8007d26:	2301      	movs	r3, #1
 8007d28:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d2c:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d32:	688a      	ldr	r2, [r1, #8]
 8007d34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d3a:	684a      	ldr	r2, [r1, #4]
 8007d3c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d42:	680a      	ldr	r2, [r1, #0]
 8007d44:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d4a:	690a      	ldr	r2, [r1, #16]
 8007d4c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d52:	694a      	ldr	r2, [r1, #20]
 8007d54:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d5a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8007d5c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007d5e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8007d62:	698a      	ldr	r2, [r1, #24]
 8007d64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007d68:	6802      	ldr	r2, [r0, #0]
 8007d6a:	4c20      	ldr	r4, [pc, #128]	; (8007dec <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8007d6c:	42a2      	cmp	r2, r4
 8007d6e:	d007      	beq.n	8007d80 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007d70:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007d74:	42a2      	cmp	r2, r4
 8007d76:	d003      	beq.n	8007d80 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007d78:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8007d7c:	42a2      	cmp	r2, r4
 8007d7e:	d103      	bne.n	8007d88 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d84:	69cc      	ldr	r4, [r1, #28]
 8007d86:	4323      	orrs	r3, r4
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007d88:	4c18      	ldr	r4, [pc, #96]	; (8007dec <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8007d8a:	42a2      	cmp	r2, r4
 8007d8c:	d007      	beq.n	8007d9e <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8007d8e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007d92:	42a2      	cmp	r2, r4
 8007d94:	d003      	beq.n	8007d9e <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8007d96:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8007d9a:	42a2      	cmp	r2, r4
 8007d9c:	d11b      	bne.n	8007dd6 <HAL_TIMEx_ConfigBreakDeadTime+0xba>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007d9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007da2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8007da4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007da8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dac:	6a0c      	ldr	r4, [r1, #32]
 8007dae:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007db0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007db4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8007db6:	4323      	orrs	r3, r4

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007db8:	4c0c      	ldr	r4, [pc, #48]	; (8007dec <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8007dba:	42a2      	cmp	r2, r4
 8007dbc:	d007      	beq.n	8007dce <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8007dbe:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007dc2:	42a2      	cmp	r2, r4
 8007dc4:	d003      	beq.n	8007dce <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8007dc6:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8007dca:	42a2      	cmp	r2, r4
 8007dcc:	d103      	bne.n	8007dd6 <HAL_TIMEx_ConfigBreakDeadTime+0xba>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007dce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007dd2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8007dd4:	430b      	orrs	r3, r1
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007dd6:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8007dde:	4618      	mov	r0, r3
}
 8007de0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007de4:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007de6:	2002      	movs	r0, #2
}
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	40012c00 	.word	0x40012c00

08007df0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007df0:	b570      	push	{r4, r5, r6, lr}
 8007df2:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007df4:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007df6:	6883      	ldr	r3, [r0, #8]
 8007df8:	6902      	ldr	r2, [r0, #16]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	6942      	ldr	r2, [r0, #20]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	69c2      	ldr	r2, [r0, #28]
 8007e02:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e04:	6808      	ldr	r0, [r1, #0]
 8007e06:	4a96      	ldr	r2, [pc, #600]	; (8008060 <UART_SetConfig+0x270>)
 8007e08:	4002      	ands	r2, r0
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e0e:	6822      	ldr	r2, [r4, #0]
 8007e10:	6853      	ldr	r3, [r2, #4]
 8007e12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007e16:	68e1      	ldr	r1, [r4, #12]
 8007e18:	430b      	orrs	r3, r1
 8007e1a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e1c:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e1e:	6822      	ldr	r2, [r4, #0]
 8007e20:	4b90      	ldr	r3, [pc, #576]	; (8008064 <UART_SetConfig+0x274>)
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d001      	beq.n	8007e2a <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e26:	6a23      	ldr	r3, [r4, #32]
 8007e28:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e2a:	6893      	ldr	r3, [r2, #8]
 8007e2c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007e30:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007e34:	430b      	orrs	r3, r1
 8007e36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e38:	6822      	ldr	r2, [r4, #0]
 8007e3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007e3c:	f023 030f 	bic.w	r3, r3, #15
 8007e40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007e42:	430b      	orrs	r3, r1
 8007e44:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	4a87      	ldr	r2, [pc, #540]	; (8008068 <UART_SetConfig+0x278>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d010      	beq.n	8007e70 <UART_SetConfig+0x80>
 8007e4e:	4a87      	ldr	r2, [pc, #540]	; (800806c <UART_SetConfig+0x27c>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d021      	beq.n	8007e98 <UART_SetConfig+0xa8>
 8007e54:	4a86      	ldr	r2, [pc, #536]	; (8008070 <UART_SetConfig+0x280>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d037      	beq.n	8007eca <UART_SetConfig+0xda>
 8007e5a:	4a86      	ldr	r2, [pc, #536]	; (8008074 <UART_SetConfig+0x284>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d05c      	beq.n	8007f1a <UART_SetConfig+0x12a>
 8007e60:	4a85      	ldr	r2, [pc, #532]	; (8008078 <UART_SetConfig+0x288>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d06b      	beq.n	8007f3e <UART_SetConfig+0x14e>
 8007e66:	4a7f      	ldr	r2, [pc, #508]	; (8008064 <UART_SetConfig+0x274>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d07d      	beq.n	8007f68 <UART_SetConfig+0x178>
 8007e6c:	2210      	movs	r2, #16
 8007e6e:	e03a      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007e70:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8007e74:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007e78:	f002 0203 	and.w	r2, r2, #3
 8007e7c:	2a03      	cmp	r2, #3
 8007e7e:	d809      	bhi.n	8007e94 <UART_SetConfig+0xa4>
 8007e80:	e8df f002 	tbb	[pc, r2]
 8007e84:	06870402 	.word	0x06870402
 8007e88:	2201      	movs	r2, #1
 8007e8a:	e02c      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007e8c:	2204      	movs	r2, #4
 8007e8e:	e02a      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007e90:	2208      	movs	r2, #8
 8007e92:	e028      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007e94:	2210      	movs	r2, #16
 8007e96:	e026      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007e98:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8007e9c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007ea0:	f002 020c 	and.w	r2, r2, #12
 8007ea4:	2a0c      	cmp	r2, #12
 8007ea6:	d80e      	bhi.n	8007ec6 <UART_SetConfig+0xd6>
 8007ea8:	e8df f002 	tbb	[pc, r2]
 8007eac:	0d0d0d07 	.word	0x0d0d0d07
 8007eb0:	0d0d0d09 	.word	0x0d0d0d09
 8007eb4:	0d0d0d75 	.word	0x0d0d0d75
 8007eb8:	0b          	.byte	0x0b
 8007eb9:	00          	.byte	0x00
 8007eba:	2200      	movs	r2, #0
 8007ebc:	e013      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007ebe:	2204      	movs	r2, #4
 8007ec0:	e011      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007ec2:	2208      	movs	r2, #8
 8007ec4:	e00f      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007ec6:	2210      	movs	r2, #16
 8007ec8:	e00d      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007eca:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8007ece:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007ed2:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8007ed6:	2a20      	cmp	r2, #32
 8007ed8:	d05f      	beq.n	8007f9a <UART_SetConfig+0x1aa>
 8007eda:	d81a      	bhi.n	8007f12 <UART_SetConfig+0x122>
 8007edc:	2a00      	cmp	r2, #0
 8007ede:	d05e      	beq.n	8007f9e <UART_SetConfig+0x1ae>
 8007ee0:	2a10      	cmp	r2, #16
 8007ee2:	d15e      	bne.n	8007fa2 <UART_SetConfig+0x1b2>
 8007ee4:	2204      	movs	r2, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ee6:	495f      	ldr	r1, [pc, #380]	; (8008064 <UART_SetConfig+0x274>)
 8007ee8:	428b      	cmp	r3, r1
 8007eea:	d076      	beq.n	8007fda <UART_SetConfig+0x1ea>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eec:	69e0      	ldr	r0, [r4, #28]
 8007eee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007ef2:	f000 80c9 	beq.w	8008088 <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ef6:	2a08      	cmp	r2, #8
 8007ef8:	f200 8134 	bhi.w	8008164 <UART_SetConfig+0x374>
 8007efc:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007f00:	011900f7 	.word	0x011900f7
 8007f04:	013200f5 	.word	0x013200f5
 8007f08:	0132011c 	.word	0x0132011c
 8007f0c:	01320132 	.word	0x01320132
 8007f10:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f12:	2a30      	cmp	r2, #48	; 0x30
 8007f14:	d147      	bne.n	8007fa6 <UART_SetConfig+0x1b6>
 8007f16:	2208      	movs	r2, #8
 8007f18:	e7e5      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007f1a:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8007f1e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007f22:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8007f26:	2a80      	cmp	r2, #128	; 0x80
 8007f28:	d03f      	beq.n	8007faa <UART_SetConfig+0x1ba>
 8007f2a:	d804      	bhi.n	8007f36 <UART_SetConfig+0x146>
 8007f2c:	b3fa      	cbz	r2, 8007fae <UART_SetConfig+0x1be>
 8007f2e:	2a40      	cmp	r2, #64	; 0x40
 8007f30:	d13f      	bne.n	8007fb2 <UART_SetConfig+0x1c2>
 8007f32:	2204      	movs	r2, #4
 8007f34:	e7d7      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007f36:	2ac0      	cmp	r2, #192	; 0xc0
 8007f38:	d13d      	bne.n	8007fb6 <UART_SetConfig+0x1c6>
 8007f3a:	2208      	movs	r2, #8
 8007f3c:	e7d3      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007f3e:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8007f42:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007f46:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8007f4a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007f4e:	d034      	beq.n	8007fba <UART_SetConfig+0x1ca>
 8007f50:	d805      	bhi.n	8007f5e <UART_SetConfig+0x16e>
 8007f52:	b3a2      	cbz	r2, 8007fbe <UART_SetConfig+0x1ce>
 8007f54:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007f58:	d133      	bne.n	8007fc2 <UART_SetConfig+0x1d2>
 8007f5a:	2204      	movs	r2, #4
 8007f5c:	e7c3      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007f5e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007f62:	d130      	bne.n	8007fc6 <UART_SetConfig+0x1d6>
 8007f64:	2208      	movs	r2, #8
 8007f66:	e7be      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007f68:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8007f6c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007f70:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8007f74:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007f78:	d027      	beq.n	8007fca <UART_SetConfig+0x1da>
 8007f7a:	d805      	bhi.n	8007f88 <UART_SetConfig+0x198>
 8007f7c:	b33a      	cbz	r2, 8007fce <UART_SetConfig+0x1de>
 8007f7e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007f82:	d126      	bne.n	8007fd2 <UART_SetConfig+0x1e2>
 8007f84:	2204      	movs	r2, #4
 8007f86:	e7ae      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007f88:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8007f8c:	d123      	bne.n	8007fd6 <UART_SetConfig+0x1e6>
 8007f8e:	2208      	movs	r2, #8
 8007f90:	e7a9      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007f92:	2202      	movs	r2, #2
 8007f94:	e7a7      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007f96:	2202      	movs	r2, #2
 8007f98:	e7a5      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	e7a3      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	e7a1      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007fa2:	2210      	movs	r2, #16
 8007fa4:	e79f      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007fa6:	2210      	movs	r2, #16
 8007fa8:	e79d      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007faa:	2202      	movs	r2, #2
 8007fac:	e79b      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007fae:	2200      	movs	r2, #0
 8007fb0:	e799      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007fb2:	2210      	movs	r2, #16
 8007fb4:	e797      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007fb6:	2210      	movs	r2, #16
 8007fb8:	e795      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007fba:	2202      	movs	r2, #2
 8007fbc:	e793      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	e791      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007fc2:	2210      	movs	r2, #16
 8007fc4:	e78f      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007fc6:	2210      	movs	r2, #16
 8007fc8:	e78d      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007fca:	2202      	movs	r2, #2
 8007fcc:	e78b      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007fce:	2200      	movs	r2, #0
 8007fd0:	e789      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007fd2:	2210      	movs	r2, #16
 8007fd4:	e787      	b.n	8007ee6 <UART_SetConfig+0xf6>
 8007fd6:	2210      	movs	r2, #16
 8007fd8:	e785      	b.n	8007ee6 <UART_SetConfig+0xf6>
    switch (clocksource)
 8007fda:	2a08      	cmp	r2, #8
 8007fdc:	f200 80b2 	bhi.w	8008144 <UART_SetConfig+0x354>
 8007fe0:	e8df f002 	tbb	[pc, r2]
 8007fe4:	b03bb008 	.word	0xb03bb008
 8007fe8:	b0b0b038 	.word	0xb0b0b038
 8007fec:	05          	.byte	0x05
 8007fed:	00          	.byte	0x00
 8007fee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007ff2:	e004      	b.n	8007ffe <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ff4:	f7fe ffb2 	bl	8006f5c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	f000 80a5 	beq.w	8008148 <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ffe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008000:	4b1e      	ldr	r3, [pc, #120]	; (800807c <UART_SetConfig+0x28c>)
 8008002:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8008006:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800800a:	6865      	ldr	r5, [r4, #4]
 800800c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8008010:	4299      	cmp	r1, r3
 8008012:	f200 809b 	bhi.w	800814c <UART_SetConfig+0x35c>
 8008016:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800801a:	f200 8099 	bhi.w	8008150 <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800801e:	2600      	movs	r6, #0
 8008020:	4633      	mov	r3, r6
 8008022:	4631      	mov	r1, r6
 8008024:	f7f8 fe58 	bl	8000cd8 <__aeabi_uldivmod>
 8008028:	0209      	lsls	r1, r1, #8
 800802a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800802e:	0200      	lsls	r0, r0, #8
 8008030:	086b      	lsrs	r3, r5, #1
 8008032:	18c0      	adds	r0, r0, r3
 8008034:	462a      	mov	r2, r5
 8008036:	4633      	mov	r3, r6
 8008038:	f141 0100 	adc.w	r1, r1, #0
 800803c:	f7f8 fe4c 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008040:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8008044:	4b0e      	ldr	r3, [pc, #56]	; (8008080 <UART_SetConfig+0x290>)
 8008046:	429a      	cmp	r2, r3
 8008048:	f200 8084 	bhi.w	8008154 <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 800804c:	6823      	ldr	r3, [r4, #0]
 800804e:	60d8      	str	r0, [r3, #12]
 8008050:	4630      	mov	r0, r6
 8008052:	e065      	b.n	8008120 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 8008054:	f7fe fe3c 	bl	8006cd0 <HAL_RCC_GetSysClockFreq>
        break;
 8008058:	e7ce      	b.n	8007ff8 <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 800805a:	480a      	ldr	r0, [pc, #40]	; (8008084 <UART_SetConfig+0x294>)
 800805c:	e7cf      	b.n	8007ffe <UART_SetConfig+0x20e>
 800805e:	bf00      	nop
 8008060:	cfff69f3 	.word	0xcfff69f3
 8008064:	40008000 	.word	0x40008000
 8008068:	40013800 	.word	0x40013800
 800806c:	40004400 	.word	0x40004400
 8008070:	40004800 	.word	0x40004800
 8008074:	40004c00 	.word	0x40004c00
 8008078:	40005000 	.word	0x40005000
 800807c:	0800fae8 	.word	0x0800fae8
 8008080:	000ffcff 	.word	0x000ffcff
 8008084:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8008088:	2a08      	cmp	r2, #8
 800808a:	d865      	bhi.n	8008158 <UART_SetConfig+0x368>
 800808c:	e8df f002 	tbb	[pc, r2]
 8008090:	64052707 	.word	0x64052707
 8008094:	6464642a 	.word	0x6464642a
 8008098:	0b          	.byte	0x0b
 8008099:	00          	.byte	0x00
 800809a:	4835      	ldr	r0, [pc, #212]	; (8008170 <UART_SetConfig+0x380>)
 800809c:	e003      	b.n	80080a6 <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800809e:	f7fe ff5d 	bl	8006f5c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d05a      	beq.n	800815c <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80080a8:	4b32      	ldr	r3, [pc, #200]	; (8008174 <UART_SetConfig+0x384>)
 80080aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80080ae:	fbb0 f0f3 	udiv	r0, r0, r3
 80080b2:	6862      	ldr	r2, [r4, #4]
 80080b4:	0853      	lsrs	r3, r2, #1
 80080b6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80080ba:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080be:	f1a0 0210 	sub.w	r2, r0, #16
 80080c2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d84a      	bhi.n	8008160 <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080ca:	b283      	uxth	r3, r0
 80080cc:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080d0:	f3c0 0042 	ubfx	r0, r0, #1, #3
 80080d4:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	60d8      	str	r0, [r3, #12]
 80080da:	2000      	movs	r0, #0
 80080dc:	e020      	b.n	8008120 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 80080de:	f7fe ff4f 	bl	8006f80 <HAL_RCC_GetPCLK2Freq>
        break;
 80080e2:	e7de      	b.n	80080a2 <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 80080e4:	f7fe fdf4 	bl	8006cd0 <HAL_RCC_GetSysClockFreq>
        break;
 80080e8:	e7db      	b.n	80080a2 <UART_SetConfig+0x2b2>
    switch (clocksource)
 80080ea:	4821      	ldr	r0, [pc, #132]	; (8008170 <UART_SetConfig+0x380>)
 80080ec:	e003      	b.n	80080f6 <UART_SetConfig+0x306>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080ee:	f7fe ff35 	bl	8006f5c <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d038      	beq.n	8008168 <UART_SetConfig+0x378>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80080f8:	4b1e      	ldr	r3, [pc, #120]	; (8008174 <UART_SetConfig+0x384>)
 80080fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80080fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8008102:	6863      	ldr	r3, [r4, #4]
 8008104:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8008108:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800810c:	f1a0 0210 	sub.w	r2, r0, #16
 8008110:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8008114:	429a      	cmp	r2, r3
 8008116:	d829      	bhi.n	800816c <UART_SetConfig+0x37c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	b280      	uxth	r0, r0
 800811c:	60d8      	str	r0, [r3, #12]
 800811e:	2000      	movs	r0, #0
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008120:	2301      	movs	r3, #1
 8008122:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008126:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800812a:	2300      	movs	r3, #0
 800812c:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800812e:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 8008130:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8008132:	f7fe ff25 	bl	8006f80 <HAL_RCC_GetPCLK2Freq>
        break;
 8008136:	e7dc      	b.n	80080f2 <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 8008138:	f7fe fdca 	bl	8006cd0 <HAL_RCC_GetSysClockFreq>
        break;
 800813c:	e7d9      	b.n	80080f2 <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 800813e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008142:	e7d8      	b.n	80080f6 <UART_SetConfig+0x306>
    switch (clocksource)
 8008144:	2001      	movs	r0, #1
 8008146:	e7eb      	b.n	8008120 <UART_SetConfig+0x330>
 8008148:	2000      	movs	r0, #0
 800814a:	e7e9      	b.n	8008120 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800814c:	2001      	movs	r0, #1
 800814e:	e7e7      	b.n	8008120 <UART_SetConfig+0x330>
 8008150:	2001      	movs	r0, #1
 8008152:	e7e5      	b.n	8008120 <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 8008154:	2001      	movs	r0, #1
 8008156:	e7e3      	b.n	8008120 <UART_SetConfig+0x330>
    switch (clocksource)
 8008158:	2001      	movs	r0, #1
 800815a:	e7e1      	b.n	8008120 <UART_SetConfig+0x330>
 800815c:	2000      	movs	r0, #0
 800815e:	e7df      	b.n	8008120 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8008160:	2001      	movs	r0, #1
 8008162:	e7dd      	b.n	8008120 <UART_SetConfig+0x330>
    switch (clocksource)
 8008164:	2001      	movs	r0, #1
 8008166:	e7db      	b.n	8008120 <UART_SetConfig+0x330>
 8008168:	2000      	movs	r0, #0
 800816a:	e7d9      	b.n	8008120 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800816c:	2001      	movs	r0, #1
 800816e:	e7d7      	b.n	8008120 <UART_SetConfig+0x330>
 8008170:	00f42400 	.word	0x00f42400
 8008174:	0800fae8 	.word	0x0800fae8

08008178 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008178:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800817a:	f013 0f01 	tst.w	r3, #1
 800817e:	d006      	beq.n	800818e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008180:	6802      	ldr	r2, [r0, #0]
 8008182:	6853      	ldr	r3, [r2, #4]
 8008184:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008188:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800818a:	430b      	orrs	r3, r1
 800818c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800818e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008190:	f013 0f02 	tst.w	r3, #2
 8008194:	d006      	beq.n	80081a4 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008196:	6802      	ldr	r2, [r0, #0]
 8008198:	6853      	ldr	r3, [r2, #4]
 800819a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800819e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80081a0:	430b      	orrs	r3, r1
 80081a2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80081a6:	f013 0f04 	tst.w	r3, #4
 80081aa:	d006      	beq.n	80081ba <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081ac:	6802      	ldr	r2, [r0, #0]
 80081ae:	6853      	ldr	r3, [r2, #4]
 80081b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081b4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80081b6:	430b      	orrs	r3, r1
 80081b8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80081bc:	f013 0f08 	tst.w	r3, #8
 80081c0:	d006      	beq.n	80081d0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081c2:	6802      	ldr	r2, [r0, #0]
 80081c4:	6853      	ldr	r3, [r2, #4]
 80081c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081ca:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80081cc:	430b      	orrs	r3, r1
 80081ce:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80081d2:	f013 0f10 	tst.w	r3, #16
 80081d6:	d006      	beq.n	80081e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081d8:	6802      	ldr	r2, [r0, #0]
 80081da:	6893      	ldr	r3, [r2, #8]
 80081dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081e0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80081e2:	430b      	orrs	r3, r1
 80081e4:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80081e8:	f013 0f20 	tst.w	r3, #32
 80081ec:	d006      	beq.n	80081fc <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081ee:	6802      	ldr	r2, [r0, #0]
 80081f0:	6893      	ldr	r3, [r2, #8]
 80081f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081f6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80081f8:	430b      	orrs	r3, r1
 80081fa:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80081fe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008202:	d00a      	beq.n	800821a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008204:	6802      	ldr	r2, [r0, #0]
 8008206:	6853      	ldr	r3, [r2, #4]
 8008208:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800820c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800820e:	430b      	orrs	r3, r1
 8008210:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008212:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008218:	d00b      	beq.n	8008232 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800821a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800821c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008220:	d006      	beq.n	8008230 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008222:	6802      	ldr	r2, [r0, #0]
 8008224:	6853      	ldr	r3, [r2, #4]
 8008226:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800822a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800822c:	430b      	orrs	r3, r1
 800822e:	6053      	str	r3, [r2, #4]
  }
}
 8008230:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008232:	6802      	ldr	r2, [r0, #0]
 8008234:	6853      	ldr	r3, [r2, #4]
 8008236:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800823a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800823c:	430b      	orrs	r3, r1
 800823e:	6053      	str	r3, [r2, #4]
 8008240:	e7eb      	b.n	800821a <UART_AdvFeatureConfig+0xa2>

08008242 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008242:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008246:	4605      	mov	r5, r0
 8008248:	460f      	mov	r7, r1
 800824a:	4616      	mov	r6, r2
 800824c:	4699      	mov	r9, r3
 800824e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008252:	682c      	ldr	r4, [r5, #0]
 8008254:	69e4      	ldr	r4, [r4, #28]
 8008256:	ea37 0304 	bics.w	r3, r7, r4
 800825a:	bf0c      	ite	eq
 800825c:	f04f 0c01 	moveq.w	ip, #1
 8008260:	f04f 0c00 	movne.w	ip, #0
 8008264:	45b4      	cmp	ip, r6
 8008266:	d157      	bne.n	8008318 <UART_WaitOnFlagUntilTimeout+0xd6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008268:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800826c:	d0f1      	beq.n	8008252 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800826e:	f7fb f91d 	bl	80034ac <HAL_GetTick>
 8008272:	eba0 0009 	sub.w	r0, r0, r9
 8008276:	4540      	cmp	r0, r8
 8008278:	d82f      	bhi.n	80082da <UART_WaitOnFlagUntilTimeout+0x98>
 800827a:	f1b8 0f00 	cmp.w	r8, #0
 800827e:	d02c      	beq.n	80082da <UART_WaitOnFlagUntilTimeout+0x98>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008280:	682b      	ldr	r3, [r5, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	f012 0f04 	tst.w	r2, #4
 8008288:	d0e3      	beq.n	8008252 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800828a:	69da      	ldr	r2, [r3, #28]
 800828c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008290:	d0df      	beq.n	8008252 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008292:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008296:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008298:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829a:	e852 3f00 	ldrex	r3, [r2]
 800829e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a2:	e842 3100 	strex	r1, r3, [r2]
 80082a6:	2900      	cmp	r1, #0
 80082a8:	d1f6      	bne.n	8008298 <UART_WaitOnFlagUntilTimeout+0x56>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082aa:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ac:	f102 0308 	add.w	r3, r2, #8
 80082b0:	e853 3f00 	ldrex	r3, [r3]
 80082b4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b8:	3208      	adds	r2, #8
 80082ba:	e842 3100 	strex	r1, r3, [r2]
 80082be:	2900      	cmp	r1, #0
 80082c0:	d1f3      	bne.n	80082aa <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 80082c2:	2320      	movs	r3, #32
 80082c4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80082c8:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082cc:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082d0:	2300      	movs	r3, #0
 80082d2:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80

          return HAL_TIMEOUT;
 80082d6:	2003      	movs	r0, #3
 80082d8:	e01f      	b.n	800831a <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80082da:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	e852 3f00 	ldrex	r3, [r2]
 80082e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e4:	e842 3100 	strex	r1, r3, [r2]
 80082e8:	2900      	cmp	r1, #0
 80082ea:	d1f6      	bne.n	80082da <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ec:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ee:	f102 0308 	add.w	r3, r2, #8
 80082f2:	e853 3f00 	ldrex	r3, [r3]
 80082f6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fa:	3208      	adds	r2, #8
 80082fc:	e842 3100 	strex	r1, r3, [r2]
 8008300:	2900      	cmp	r1, #0
 8008302:	d1f3      	bne.n	80082ec <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8008304:	2320      	movs	r3, #32
 8008306:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800830a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800830e:	2300      	movs	r3, #0
 8008310:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8008314:	2003      	movs	r0, #3
 8008316:	e000      	b.n	800831a <UART_WaitOnFlagUntilTimeout+0xd8>
        }
      }
    }
  }
  return HAL_OK;
 8008318:	2000      	movs	r0, #0
}
 800831a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800831e <UART_CheckIdleState>:
{
 800831e:	b530      	push	{r4, r5, lr}
 8008320:	b083      	sub	sp, #12
 8008322:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008324:	2300      	movs	r3, #0
 8008326:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800832a:	f7fb f8bf 	bl	80034ac <HAL_GetTick>
 800832e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008330:	6822      	ldr	r2, [r4, #0]
 8008332:	6812      	ldr	r2, [r2, #0]
 8008334:	f012 0f08 	tst.w	r2, #8
 8008338:	d10f      	bne.n	800835a <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f013 0f04 	tst.w	r3, #4
 8008342:	d118      	bne.n	8008376 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8008344:	2320      	movs	r3, #32
 8008346:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800834a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800834e:	2000      	movs	r0, #0
 8008350:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8008352:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8008356:	b003      	add	sp, #12
 8008358:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800835a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	4603      	mov	r3, r0
 8008362:	2200      	movs	r2, #0
 8008364:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008368:	4620      	mov	r0, r4
 800836a:	f7ff ff6a 	bl	8008242 <UART_WaitOnFlagUntilTimeout>
 800836e:	2800      	cmp	r0, #0
 8008370:	d0e3      	beq.n	800833a <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8008372:	2003      	movs	r0, #3
 8008374:	e7ef      	b.n	8008356 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008376:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	462b      	mov	r3, r5
 800837e:	2200      	movs	r2, #0
 8008380:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008384:	4620      	mov	r0, r4
 8008386:	f7ff ff5c 	bl	8008242 <UART_WaitOnFlagUntilTimeout>
 800838a:	2800      	cmp	r0, #0
 800838c:	d0da      	beq.n	8008344 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800838e:	2003      	movs	r0, #3
 8008390:	e7e1      	b.n	8008356 <UART_CheckIdleState+0x38>

08008392 <HAL_UART_Init>:
  if (huart == NULL)
 8008392:	b378      	cbz	r0, 80083f4 <HAL_UART_Init+0x62>
{
 8008394:	b510      	push	{r4, lr}
 8008396:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008398:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800839c:	b30b      	cbz	r3, 80083e2 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800839e:	2324      	movs	r3, #36	; 0x24
 80083a0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80083a4:	6822      	ldr	r2, [r4, #0]
 80083a6:	6813      	ldr	r3, [r2, #0]
 80083a8:	f023 0301 	bic.w	r3, r3, #1
 80083ac:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083ae:	4620      	mov	r0, r4
 80083b0:	f7ff fd1e 	bl	8007df0 <UART_SetConfig>
 80083b4:	2801      	cmp	r0, #1
 80083b6:	d013      	beq.n	80083e0 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80083ba:	b9bb      	cbnz	r3, 80083ec <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083bc:	6822      	ldr	r2, [r4, #0]
 80083be:	6853      	ldr	r3, [r2, #4]
 80083c0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80083c4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083c6:	6822      	ldr	r2, [r4, #0]
 80083c8:	6893      	ldr	r3, [r2, #8]
 80083ca:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80083ce:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80083d0:	6822      	ldr	r2, [r4, #0]
 80083d2:	6813      	ldr	r3, [r2, #0]
 80083d4:	f043 0301 	orr.w	r3, r3, #1
 80083d8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80083da:	4620      	mov	r0, r4
 80083dc:	f7ff ff9f 	bl	800831e <UART_CheckIdleState>
}
 80083e0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80083e2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80083e6:	f7fa fd81 	bl	8002eec <HAL_UART_MspInit>
 80083ea:	e7d8      	b.n	800839e <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80083ec:	4620      	mov	r0, r4
 80083ee:	f7ff fec3 	bl	8008178 <UART_AdvFeatureConfig>
 80083f2:	e7e3      	b.n	80083bc <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80083f4:	2001      	movs	r0, #1
}
 80083f6:	4770      	bx	lr

080083f8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80083f8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80083fa:	b92b      	cbnz	r3, 8008408 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80083fc:	2301      	movs	r3, #1
 80083fe:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008402:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8008406:	4770      	bx	lr
{
 8008408:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800840a:	6803      	ldr	r3, [r0, #0]
 800840c:	689a      	ldr	r2, [r3, #8]
 800840e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008412:	6899      	ldr	r1, [r3, #8]
 8008414:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008416:	4d09      	ldr	r5, [pc, #36]	; (800843c <UARTEx_SetNbDataToProcess+0x44>)
 8008418:	5c6b      	ldrb	r3, [r5, r1]
 800841a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800841c:	4c08      	ldr	r4, [pc, #32]	; (8008440 <UARTEx_SetNbDataToProcess+0x48>)
 800841e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008420:	fb93 f3f1 	sdiv	r3, r3, r1
 8008424:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008428:	5cab      	ldrb	r3, [r5, r2]
 800842a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800842c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800842e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008432:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8008436:	bc30      	pop	{r4, r5}
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	0800fb08 	.word	0x0800fb08
 8008440:	0800fb00 	.word	0x0800fb00

08008444 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8008444:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008448:	2b01      	cmp	r3, #1
 800844a:	d018      	beq.n	800847e <HAL_UARTEx_DisableFifoMode+0x3a>
 800844c:	2301      	movs	r3, #1
 800844e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008452:	2324      	movs	r3, #36	; 0x24
 8008454:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008458:	6803      	ldr	r3, [r0, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800845c:	6819      	ldr	r1, [r3, #0]
 800845e:	f021 0101 	bic.w	r1, r1, #1
 8008462:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008464:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008468:	2300      	movs	r3, #0
 800846a:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800846c:	6801      	ldr	r1, [r0, #0]
 800846e:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008470:	2220      	movs	r2, #32
 8008472:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008476:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800847a:	4618      	mov	r0, r3
 800847c:	4770      	bx	lr
  __HAL_LOCK(huart);
 800847e:	2002      	movs	r0, #2
}
 8008480:	4770      	bx	lr

08008482 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8008482:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008484:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008488:	2b01      	cmp	r3, #1
 800848a:	d01d      	beq.n	80084c8 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800848c:	4604      	mov	r4, r0
 800848e:	2301      	movs	r3, #1
 8008490:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008494:	2324      	movs	r3, #36	; 0x24
 8008496:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800849a:	6803      	ldr	r3, [r0, #0]
 800849c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	f022 0201 	bic.w	r2, r2, #1
 80084a4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084a6:	6802      	ldr	r2, [r0, #0]
 80084a8:	6893      	ldr	r3, [r2, #8]
 80084aa:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80084ae:	4319      	orrs	r1, r3
 80084b0:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80084b2:	f7ff ffa1 	bl	80083f8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80084ba:	2320      	movs	r3, #32
 80084bc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80084c0:	2000      	movs	r0, #0
 80084c2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80084c6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80084c8:	2002      	movs	r0, #2
 80084ca:	e7fc      	b.n	80084c6 <HAL_UARTEx_SetTxFifoThreshold+0x44>

080084cc <HAL_UARTEx_SetRxFifoThreshold>:
{
 80084cc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80084ce:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d01d      	beq.n	8008512 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80084d6:	4604      	mov	r4, r0
 80084d8:	2301      	movs	r3, #1
 80084da:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80084de:	2324      	movs	r3, #36	; 0x24
 80084e0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084e4:	6803      	ldr	r3, [r0, #0]
 80084e6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	f022 0201 	bic.w	r2, r2, #1
 80084ee:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084f0:	6802      	ldr	r2, [r0, #0]
 80084f2:	6893      	ldr	r3, [r2, #8]
 80084f4:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80084f8:	4319      	orrs	r1, r3
 80084fa:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80084fc:	f7ff ff7c 	bl	80083f8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008504:	2320      	movs	r3, #32
 8008506:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800850a:	2000      	movs	r0, #0
 800850c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8008510:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008512:	2002      	movs	r0, #2
 8008514:	e7fc      	b.n	8008510 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08008518 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8008518:	b430      	push	{r4, r5}
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800851a:	680a      	ldr	r2, [r1, #0]
 800851c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8008520:	f023 0301 	bic.w	r3, r3, #1
 8008524:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008528:	688b      	ldr	r3, [r1, #8]
 800852a:	2b08      	cmp	r3, #8
 800852c:	d036      	beq.n	800859c <FMC_NORSRAM_Init+0x84>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800852e:	2400      	movs	r4, #0
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008530:	684a      	ldr	r2, [r1, #4]
  btcr_reg = (flashaccess                   | \
 8008532:	4322      	orrs	r2, r4
              Init->DataAddressMux          | \
 8008534:	4313      	orrs	r3, r2
              Init->MemoryType              | \
              Init->MemoryDataWidth         | \
 8008536:	68ca      	ldr	r2, [r1, #12]
              Init->MemoryType              | \
 8008538:	4313      	orrs	r3, r2
              Init->BurstAccessMode         | \
 800853a:	690a      	ldr	r2, [r1, #16]
              Init->MemoryDataWidth         | \
 800853c:	4313      	orrs	r3, r2
              Init->WaitSignalPolarity      | \
 800853e:	694a      	ldr	r2, [r1, #20]
              Init->BurstAccessMode         | \
 8008540:	4313      	orrs	r3, r2
              Init->WaitSignalActive        | \
 8008542:	698a      	ldr	r2, [r1, #24]
              Init->WaitSignalPolarity      | \
 8008544:	4313      	orrs	r3, r2
              Init->WriteOperation          | \
 8008546:	69ca      	ldr	r2, [r1, #28]
              Init->WaitSignalActive        | \
 8008548:	4313      	orrs	r3, r2
              Init->WaitSignal              | \
 800854a:	6a0a      	ldr	r2, [r1, #32]
              Init->WriteOperation          | \
 800854c:	4313      	orrs	r3, r2
              Init->ExtendedMode            | \
 800854e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
              Init->WaitSignal              | \
 8008550:	4313      	orrs	r3, r2
              Init->AsynchronousWait        | \
 8008552:	6a8a      	ldr	r2, [r1, #40]	; 0x28
              Init->ExtendedMode            | \
 8008554:	4313      	orrs	r3, r2
              Init->WriteBurst);
 8008556:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8008558:	4313      	orrs	r3, r2

  btcr_reg |= Init->ContinuousClock;
 800855a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800855c:	4313      	orrs	r3, r2
  btcr_reg |= Init->WriteFifo;
 800855e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8008560:	431a      	orrs	r2, r3
  btcr_reg |= Init->NBLSetupTime;
 8008562:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8008564:	431a      	orrs	r2, r3
  btcr_reg |= Init->PageSize;
 8008566:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8008568:	431a      	orrs	r2, r3
  mask |= FMC_BCR1_CCLKEN;
  mask |= FMC_BCR1_WFDIS;
  mask |= FMC_BCRx_NBLSET;
  mask |= FMC_BCRx_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800856a:	680c      	ldr	r4, [r1, #0]
 800856c:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8008570:	4b20      	ldr	r3, [pc, #128]	; (80085f4 <FMC_NORSRAM_Init+0xdc>)
 8008572:	402b      	ands	r3, r5
 8008574:	4313      	orrs	r3, r2
 8008576:	f840 3024 	str.w	r3, [r0, r4, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800857a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800857c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008580:	d00e      	beq.n	80085a0 <FMC_NORSRAM_Init+0x88>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8008582:	680b      	ldr	r3, [r1, #0]
 8008584:	b11b      	cbz	r3, 800858e <FMC_NORSRAM_Init+0x76>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8008586:	6803      	ldr	r3, [r0, #0]
 8008588:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800858a:	4313      	orrs	r3, r2
 800858c:	6003      	str	r3, [r0, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800858e:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 8008592:	2b01      	cmp	r3, #1
 8008594:	d00d      	beq.n	80085b2 <FMC_NORSRAM_Init+0x9a>
        break;
    }
  }

  return HAL_OK;
}
 8008596:	2000      	movs	r0, #0
 8008598:	bc30      	pop	{r4, r5}
 800859a:	4770      	bx	lr
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800859c:	2440      	movs	r4, #64	; 0x40
 800859e:	e7c7      	b.n	8008530 <FMC_NORSRAM_Init+0x18>
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80085a0:	680a      	ldr	r2, [r1, #0]
 80085a2:	2a00      	cmp	r2, #0
 80085a4:	d0ed      	beq.n	8008582 <FMC_NORSRAM_Init+0x6a>
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80085a6:	6802      	ldr	r2, [r0, #0]
 80085a8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80085ac:	4313      	orrs	r3, r2
 80085ae:	6003      	str	r3, [r0, #0]
 80085b0:	e7e7      	b.n	8008582 <FMC_NORSRAM_Init+0x6a>
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 80085b2:	6a03      	ldr	r3, [r0, #32]
 80085b4:	0c1b      	lsrs	r3, r3, #16
 80085b6:	041b      	lsls	r3, r3, #16
 80085b8:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 80085ba:	4313      	orrs	r3, r2
 80085bc:	6203      	str	r3, [r0, #32]
    switch (Init->NSBank)
 80085be:	680b      	ldr	r3, [r1, #0]
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d00c      	beq.n	80085de <FMC_NORSRAM_Init+0xc6>
 80085c4:	2b04      	cmp	r3, #4
 80085c6:	d00f      	beq.n	80085e8 <FMC_NORSRAM_Init+0xd0>
 80085c8:	b123      	cbz	r3, 80085d4 <FMC_NORSRAM_Init+0xbc>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 80085ca:	6a03      	ldr	r3, [r0, #32]
 80085cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085d0:	6203      	str	r3, [r0, #32]
        break;
 80085d2:	e7e0      	b.n	8008596 <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 80085d4:	6a03      	ldr	r3, [r0, #32]
 80085d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085da:	6203      	str	r3, [r0, #32]
        break;
 80085dc:	e7db      	b.n	8008596 <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 80085de:	6a03      	ldr	r3, [r0, #32]
 80085e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085e4:	6203      	str	r3, [r0, #32]
        break;
 80085e6:	e7d6      	b.n	8008596 <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 80085e8:	6a03      	ldr	r3, [r0, #32]
 80085ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085ee:	6203      	str	r3, [r0, #32]
        break;
 80085f0:	e7d1      	b.n	8008596 <FMC_NORSRAM_Init+0x7e>
 80085f2:	bf00      	nop
 80085f4:	ff000480 	.word	0xff000480

080085f8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80085f8:	b410      	push	{r4}
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80085fa:	3201      	adds	r2, #1
 80085fc:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8008600:	680b      	ldr	r3, [r1, #0]
 8008602:	684c      	ldr	r4, [r1, #4]
 8008604:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8008608:	688c      	ldr	r4, [r1, #8]
 800860a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800860e:	68cc      	ldr	r4, [r1, #12]
 8008610:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 8008614:	690c      	ldr	r4, [r1, #16]
 8008616:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800861a:	694c      	ldr	r4, [r1, #20]
 800861c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8008620:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8008624:	698c      	ldr	r4, [r1, #24]
 8008626:	f1a4 0c02 	sub.w	ip, r4, #2
 800862a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 800862e:	69cc      	ldr	r4, [r1, #28]
 8008630:	4323      	orrs	r3, r4
 8008632:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008636:	6803      	ldr	r3, [r0, #0]
 8008638:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800863c:	d00b      	beq.n	8008656 <FMC_NORSRAM_Timing_Init+0x5e>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800863e:	6843      	ldr	r3, [r0, #4]
 8008640:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8008644:	694a      	ldr	r2, [r1, #20]
 8008646:	3a01      	subs	r2, #1
 8008648:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800864c:	6843      	ldr	r3, [r0, #4]
 800864e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008652:	4313      	orrs	r3, r2
 8008654:	6043      	str	r3, [r0, #4]
  }

  return HAL_OK;
}
 8008656:	2000      	movs	r0, #0
 8008658:	f85d 4b04 	ldr.w	r4, [sp], #4
 800865c:	4770      	bx	lr

0800865e <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800865e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008662:	d005      	beq.n	8008670 <FMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008664:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008668:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800866c:	2000      	movs	r0, #0
 800866e:	4770      	bx	lr
{
 8008670:	b410      	push	{r4}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008672:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8008676:	f003 6c7f 	and.w	ip, r3, #267386880	; 0xff00000
 800867a:	680b      	ldr	r3, [r1, #0]
 800867c:	684c      	ldr	r4, [r1, #4]
 800867e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8008682:	688c      	ldr	r4, [r1, #8]
 8008684:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8008688:	68cc      	ldr	r4, [r1, #12]
 800868a:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 800868e:	69cc      	ldr	r4, [r1, #28]
 8008690:	4323      	orrs	r3, r4
 8008692:	6909      	ldr	r1, [r1, #16]
 8008694:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008698:	ea4c 0303 	orr.w	r3, ip, r3
 800869c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 80086a0:	2000      	movs	r0, #0
 80086a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80086a8:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80086aa:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086ac:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80086b0:	b112      	cbz	r2, 80086b8 <LL_GPIO_Init+0x10>
  return __builtin_clz(value);
 80086b2:	fab2 f282 	clz	r2, r2
 80086b6:	e04e      	b.n	8008756 <LL_GPIO_Init+0xae>
    return 32U;
 80086b8:	2220      	movs	r2, #32

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80086ba:	e04c      	b.n	8008756 <LL_GPIO_Init+0xae>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80086bc:	688e      	ldr	r6, [r1, #8]
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80086be:	6885      	ldr	r5, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086c0:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 80086c4:	b1e4      	cbz	r4, 8008700 <LL_GPIO_Init+0x58>
  return __builtin_clz(value);
 80086c6:	fab4 f484 	clz	r4, r4
 80086ca:	0064      	lsls	r4, r4, #1
 80086cc:	f04f 0c03 	mov.w	ip, #3
 80086d0:	fa0c f404 	lsl.w	r4, ip, r4
 80086d4:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086d8:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 80086dc:	b194      	cbz	r4, 8008704 <LL_GPIO_Init+0x5c>
  return __builtin_clz(value);
 80086de:	fab4 f484 	clz	r4, r4
 80086e2:	0064      	lsls	r4, r4, #1
 80086e4:	fa06 f404 	lsl.w	r4, r6, r4
 80086e8:	432c      	orrs	r4, r5
 80086ea:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80086ec:	680d      	ldr	r5, [r1, #0]
 80086ee:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80086f0:	6844      	ldr	r4, [r0, #4]
 80086f2:	ea24 0405 	bic.w	r4, r4, r5
 80086f6:	fb06 f505 	mul.w	r5, r6, r5
 80086fa:	432c      	orrs	r4, r5
 80086fc:	6044      	str	r4, [r0, #4]
}
 80086fe:	e039      	b.n	8008774 <LL_GPIO_Init+0xcc>
    return 32U;
 8008700:	2420      	movs	r4, #32
 8008702:	e7e2      	b.n	80086ca <LL_GPIO_Init+0x22>
 8008704:	2420      	movs	r4, #32
 8008706:	e7ec      	b.n	80086e2 <LL_GPIO_Init+0x3a>
 8008708:	2420      	movs	r4, #32
 800870a:	e03b      	b.n	8008784 <LL_GPIO_Init+0xdc>
 800870c:	2420      	movs	r4, #32
 800870e:	e046      	b.n	800879e <LL_GPIO_Init+0xf6>
 8008710:	2420      	movs	r4, #32
 8008712:	e056      	b.n	80087c2 <LL_GPIO_Init+0x11a>
 8008714:	2420      	movs	r4, #32
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008716:	00a4      	lsls	r4, r4, #2
 8008718:	fa06 f404 	lsl.w	r4, r6, r4
 800871c:	432c      	orrs	r4, r5
 800871e:	6204      	str	r4, [r0, #32]
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008720:	684e      	ldr	r6, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008722:	6805      	ldr	r5, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008724:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8008728:	2c00      	cmp	r4, #0
 800872a:	d075      	beq.n	8008818 <LL_GPIO_Init+0x170>
  return __builtin_clz(value);
 800872c:	fab4 f484 	clz	r4, r4
 8008730:	0064      	lsls	r4, r4, #1
 8008732:	f04f 0c03 	mov.w	ip, #3
 8008736:	fa0c f404 	lsl.w	r4, ip, r4
 800873a:	ea25 0404 	bic.w	r4, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800873e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8008742:	2b00      	cmp	r3, #0
 8008744:	d06a      	beq.n	800881c <LL_GPIO_Init+0x174>
  return __builtin_clz(value);
 8008746:	fab3 f383 	clz	r3, r3
 800874a:	005b      	lsls	r3, r3, #1
 800874c:	fa06 f303 	lsl.w	r3, r6, r3
 8008750:	4323      	orrs	r3, r4
 8008752:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8008754:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008756:	680b      	ldr	r3, [r1, #0]
 8008758:	fa33 f402 	lsrs.w	r4, r3, r2
 800875c:	d060      	beq.n	8008820 <LL_GPIO_Init+0x178>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800875e:	f04f 0c01 	mov.w	ip, #1
 8008762:	fa0c fc02 	lsl.w	ip, ip, r2
    if (currentpin != 0x00u)
 8008766:	ea1c 0303 	ands.w	r3, ip, r3
 800876a:	d0f3      	beq.n	8008754 <LL_GPIO_Init+0xac>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800876c:	684c      	ldr	r4, [r1, #4]
 800876e:	3c01      	subs	r4, #1
 8008770:	2c01      	cmp	r4, #1
 8008772:	d9a3      	bls.n	80086bc <LL_GPIO_Init+0x14>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008774:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008776:	68c5      	ldr	r5, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008778:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800877c:	2c00      	cmp	r4, #0
 800877e:	d0c3      	beq.n	8008708 <LL_GPIO_Init+0x60>
  return __builtin_clz(value);
 8008780:	fab4 f484 	clz	r4, r4
 8008784:	0064      	lsls	r4, r4, #1
 8008786:	f04f 0c03 	mov.w	ip, #3
 800878a:	fa0c f404 	lsl.w	r4, ip, r4
 800878e:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008792:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8008796:	2c00      	cmp	r4, #0
 8008798:	d0b8      	beq.n	800870c <LL_GPIO_Init+0x64>
  return __builtin_clz(value);
 800879a:	fab4 f484 	clz	r4, r4
 800879e:	0064      	lsls	r4, r4, #1
 80087a0:	fa06 f404 	lsl.w	r4, r6, r4
 80087a4:	432c      	orrs	r4, r5
 80087a6:	60c4      	str	r4, [r0, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80087a8:	684c      	ldr	r4, [r1, #4]
 80087aa:	2c02      	cmp	r4, #2
 80087ac:	d1b8      	bne.n	8008720 <LL_GPIO_Init+0x78>
        if (currentpin < LL_GPIO_PIN_8)
 80087ae:	2bff      	cmp	r3, #255	; 0xff
 80087b0:	d814      	bhi.n	80087dc <LL_GPIO_Init+0x134>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80087b2:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80087b4:	6a05      	ldr	r5, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087b6:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 80087ba:	2c00      	cmp	r4, #0
 80087bc:	d0a8      	beq.n	8008710 <LL_GPIO_Init+0x68>
  return __builtin_clz(value);
 80087be:	fab4 f484 	clz	r4, r4
 80087c2:	00a4      	lsls	r4, r4, #2
 80087c4:	270f      	movs	r7, #15
 80087c6:	fa07 f404 	lsl.w	r4, r7, r4
 80087ca:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087ce:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 80087d2:	2c00      	cmp	r4, #0
 80087d4:	d09e      	beq.n	8008714 <LL_GPIO_Init+0x6c>
  return __builtin_clz(value);
 80087d6:	fab4 f484 	clz	r4, r4
 80087da:	e79c      	b.n	8008716 <LL_GPIO_Init+0x6e>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80087dc:	694f      	ldr	r7, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80087de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087e0:	0a1c      	lsrs	r4, r3, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087e2:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80087e6:	b19d      	cbz	r5, 8008810 <LL_GPIO_Init+0x168>
  return __builtin_clz(value);
 80087e8:	fab5 f585 	clz	r5, r5
 80087ec:	00ad      	lsls	r5, r5, #2
 80087ee:	f04f 0c0f 	mov.w	ip, #15
 80087f2:	fa0c f505 	lsl.w	r5, ip, r5
 80087f6:	ea26 0505 	bic.w	r5, r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087fa:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80087fe:	b14c      	cbz	r4, 8008814 <LL_GPIO_Init+0x16c>
  return __builtin_clz(value);
 8008800:	fab4 f484 	clz	r4, r4
 8008804:	00a4      	lsls	r4, r4, #2
 8008806:	fa07 f404 	lsl.w	r4, r7, r4
 800880a:	432c      	orrs	r4, r5
 800880c:	6244      	str	r4, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800880e:	e787      	b.n	8008720 <LL_GPIO_Init+0x78>
    return 32U;
 8008810:	2520      	movs	r5, #32
 8008812:	e7eb      	b.n	80087ec <LL_GPIO_Init+0x144>
 8008814:	2420      	movs	r4, #32
 8008816:	e7f5      	b.n	8008804 <LL_GPIO_Init+0x15c>
 8008818:	2420      	movs	r4, #32
 800881a:	e789      	b.n	8008730 <LL_GPIO_Init+0x88>
 800881c:	2320      	movs	r3, #32
 800881e:	e794      	b.n	800874a <LL_GPIO_Init+0xa2>
  }
  return (SUCCESS);
}
 8008820:	2000      	movs	r0, #0
 8008822:	bcf0      	pop	{r4, r5, r6, r7}
 8008824:	4770      	bx	lr
	...

08008828 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008828:	4b04      	ldr	r3, [pc, #16]	; (800883c <RCC_GetHCLKClockFreq+0x14>)
 800882a:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800882c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008830:	4a03      	ldr	r2, [pc, #12]	; (8008840 <RCC_GetHCLKClockFreq+0x18>)
 8008832:	5cd3      	ldrb	r3, [r2, r3]
 8008834:	f003 031f 	and.w	r3, r3, #31
}
 8008838:	40d8      	lsrs	r0, r3
 800883a:	4770      	bx	lr
 800883c:	40021000 	.word	0x40021000
 8008840:	0800fad0 	.word	0x0800fad0

08008844 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008844:	4b04      	ldr	r3, [pc, #16]	; (8008858 <RCC_GetPCLK1ClockFreq+0x14>)
 8008846:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8008848:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800884c:	4a03      	ldr	r2, [pc, #12]	; (800885c <RCC_GetPCLK1ClockFreq+0x18>)
 800884e:	5cd3      	ldrb	r3, [r2, r3]
 8008850:	f003 031f 	and.w	r3, r3, #31
}
 8008854:	40d8      	lsrs	r0, r3
 8008856:	4770      	bx	lr
 8008858:	40021000 	.word	0x40021000
 800885c:	0800fae0 	.word	0x0800fae0

08008860 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008860:	4b04      	ldr	r3, [pc, #16]	; (8008874 <RCC_GetPCLK2ClockFreq+0x14>)
 8008862:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8008864:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008868:	4a03      	ldr	r2, [pc, #12]	; (8008878 <RCC_GetPCLK2ClockFreq+0x18>)
 800886a:	5cd3      	ldrb	r3, [r2, r3]
 800886c:	f003 031f 	and.w	r3, r3, #31
}
 8008870:	40d8      	lsrs	r0, r3
 8008872:	4770      	bx	lr
 8008874:	40021000 	.word	0x40021000
 8008878:	0800fae0 	.word	0x0800fae0

0800887c <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800887c:	4b0e      	ldr	r3, [pc, #56]	; (80088b8 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8008884:	2b03      	cmp	r3, #3
 8008886:	d014      	beq.n	80088b2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8008888:	480c      	ldr	r0, [pc, #48]	; (80088bc <RCC_PLL_GetFreqDomain_SYS+0x40>)
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800888a:	4a0b      	ldr	r2, [pc, #44]	; (80088b8 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 800888c:	68d3      	ldr	r3, [r2, #12]
 800888e:	f3c3 2306 	ubfx	r3, r3, #8, #7

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008892:	fb03 f000 	mul.w	r0, r3, r0
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008896:	68d3      	ldr	r3, [r2, #12]
 8008898:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800889c:	3301      	adds	r3, #1
 800889e:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80088a2:	68d3      	ldr	r3, [r2, #12]
 80088a4:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80088a8:	3301      	adds	r3, #1
 80088aa:	005b      	lsls	r3, r3, #1
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80088ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80088b0:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 80088b2:	4803      	ldr	r0, [pc, #12]	; (80088c0 <RCC_PLL_GetFreqDomain_SYS+0x44>)
 80088b4:	e7e9      	b.n	800888a <RCC_PLL_GetFreqDomain_SYS+0xe>
 80088b6:	bf00      	nop
 80088b8:	40021000 	.word	0x40021000
 80088bc:	00f42400 	.word	0x00f42400
 80088c0:	007a1200 	.word	0x007a1200

080088c4 <RCC_GetSystemClockFreq>:
{
 80088c4:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80088c6:	4b07      	ldr	r3, [pc, #28]	; (80088e4 <RCC_GetSystemClockFreq+0x20>)
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 80088ce:	2b08      	cmp	r3, #8
 80088d0:	d004      	beq.n	80088dc <RCC_GetSystemClockFreq+0x18>
 80088d2:	2b0c      	cmp	r3, #12
 80088d4:	d104      	bne.n	80088e0 <RCC_GetSystemClockFreq+0x1c>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80088d6:	f7ff ffd1 	bl	800887c <RCC_PLL_GetFreqDomain_SYS>
      break;
 80088da:	e002      	b.n	80088e2 <RCC_GetSystemClockFreq+0x1e>
      frequency = HSE_VALUE;
 80088dc:	4802      	ldr	r0, [pc, #8]	; (80088e8 <RCC_GetSystemClockFreq+0x24>)
 80088de:	e000      	b.n	80088e2 <RCC_GetSystemClockFreq+0x1e>
  switch (LL_RCC_GetSysClkSource())
 80088e0:	4802      	ldr	r0, [pc, #8]	; (80088ec <RCC_GetSystemClockFreq+0x28>)
}
 80088e2:	bd08      	pop	{r3, pc}
 80088e4:	40021000 	.word	0x40021000
 80088e8:	007a1200 	.word	0x007a1200
 80088ec:	00f42400 	.word	0x00f42400

080088f0 <LL_RCC_GetUSARTClockFreq>:
{
 80088f0:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80088f2:	2803      	cmp	r0, #3
 80088f4:	d005      	beq.n	8008902 <LL_RCC_GetUSARTClockFreq+0x12>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80088f6:	280c      	cmp	r0, #12
 80088f8:	d02c      	beq.n	8008954 <LL_RCC_GetUSARTClockFreq+0x64>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80088fa:	2830      	cmp	r0, #48	; 0x30
 80088fc:	d053      	beq.n	80089a6 <LL_RCC_GetUSARTClockFreq+0xb6>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80088fe:	2000      	movs	r0, #0
}
 8008900:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8008902:	4b3d      	ldr	r3, [pc, #244]	; (80089f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 8008904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008908:	4003      	ands	r3, r0
 800890a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800890e:	4b3b      	ldr	r3, [pc, #236]	; (80089fc <LL_RCC_GetUSARTClockFreq+0x10c>)
 8008910:	4298      	cmp	r0, r3
 8008912:	d00f      	beq.n	8008934 <LL_RCC_GetUSARTClockFreq+0x44>
 8008914:	f1b0 1f03 	cmp.w	r0, #196611	; 0x30003
 8008918:	d013      	beq.n	8008942 <LL_RCC_GetUSARTClockFreq+0x52>
 800891a:	3b01      	subs	r3, #1
 800891c:	4298      	cmp	r0, r3
 800891e:	d006      	beq.n	800892e <LL_RCC_GetUSARTClockFreq+0x3e>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008920:	f7ff ffd0 	bl	80088c4 <RCC_GetSystemClockFreq>
 8008924:	f7ff ff80 	bl	8008828 <RCC_GetHCLKClockFreq>
 8008928:	f7ff ff9a 	bl	8008860 <RCC_GetPCLK2ClockFreq>
        break;
 800892c:	e7e8      	b.n	8008900 <LL_RCC_GetUSARTClockFreq+0x10>
        usart_frequency = RCC_GetSystemClockFreq();
 800892e:	f7ff ffc9 	bl	80088c4 <RCC_GetSystemClockFreq>
        break;
 8008932:	e7e5      	b.n	8008900 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008934:	4b30      	ldr	r3, [pc, #192]	; (80089f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 8008936:	6818      	ldr	r0, [r3, #0]
 8008938:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800893c:	d0e0      	beq.n	8008900 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = HSI_VALUE;
 800893e:	4830      	ldr	r0, [pc, #192]	; (8008a00 <LL_RCC_GetUSARTClockFreq+0x110>)
 8008940:	e7de      	b.n	8008900 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008942:	4b2d      	ldr	r3, [pc, #180]	; (80089f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 8008944:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8008948:	f010 0002 	ands.w	r0, r0, #2
 800894c:	d0d8      	beq.n	8008900 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = LSE_VALUE;
 800894e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008952:	e7d5      	b.n	8008900 <LL_RCC_GetUSARTClockFreq+0x10>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8008954:	4b28      	ldr	r3, [pc, #160]	; (80089f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 8008956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800895a:	4003      	ands	r3, r0
 800895c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8008960:	4b28      	ldr	r3, [pc, #160]	; (8008a04 <LL_RCC_GetUSARTClockFreq+0x114>)
 8008962:	4298      	cmp	r0, r3
 8008964:	d00f      	beq.n	8008986 <LL_RCC_GetUSARTClockFreq+0x96>
 8008966:	f1b0 1f0c 	cmp.w	r0, #786444	; 0xc000c
 800896a:	d013      	beq.n	8008994 <LL_RCC_GetUSARTClockFreq+0xa4>
 800896c:	3b04      	subs	r3, #4
 800896e:	4298      	cmp	r0, r3
 8008970:	d006      	beq.n	8008980 <LL_RCC_GetUSARTClockFreq+0x90>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008972:	f7ff ffa7 	bl	80088c4 <RCC_GetSystemClockFreq>
 8008976:	f7ff ff57 	bl	8008828 <RCC_GetHCLKClockFreq>
 800897a:	f7ff ff63 	bl	8008844 <RCC_GetPCLK1ClockFreq>
        break;
 800897e:	e7bf      	b.n	8008900 <LL_RCC_GetUSARTClockFreq+0x10>
        usart_frequency = RCC_GetSystemClockFreq();
 8008980:	f7ff ffa0 	bl	80088c4 <RCC_GetSystemClockFreq>
        break;
 8008984:	e7bc      	b.n	8008900 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008986:	4b1c      	ldr	r3, [pc, #112]	; (80089f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 8008988:	6818      	ldr	r0, [r3, #0]
 800898a:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800898e:	d0b7      	beq.n	8008900 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = HSI_VALUE;
 8008990:	481b      	ldr	r0, [pc, #108]	; (8008a00 <LL_RCC_GetUSARTClockFreq+0x110>)
 8008992:	e7b5      	b.n	8008900 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008994:	4b18      	ldr	r3, [pc, #96]	; (80089f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 8008996:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800899a:	f010 0002 	ands.w	r0, r0, #2
 800899e:	d0af      	beq.n	8008900 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = LSE_VALUE;
 80089a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80089a4:	e7ac      	b.n	8008900 <LL_RCC_GetUSARTClockFreq+0x10>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80089a6:	4b14      	ldr	r3, [pc, #80]	; (80089f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 80089a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ac:	4003      	ands	r3, r0
 80089ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80089b2:	4b15      	ldr	r3, [pc, #84]	; (8008a08 <LL_RCC_GetUSARTClockFreq+0x118>)
 80089b4:	4298      	cmp	r0, r3
 80089b6:	d00f      	beq.n	80089d8 <LL_RCC_GetUSARTClockFreq+0xe8>
 80089b8:	f1b0 1f30 	cmp.w	r0, #3145776	; 0x300030
 80089bc:	d013      	beq.n	80089e6 <LL_RCC_GetUSARTClockFreq+0xf6>
 80089be:	3b10      	subs	r3, #16
 80089c0:	4298      	cmp	r0, r3
 80089c2:	d006      	beq.n	80089d2 <LL_RCC_GetUSARTClockFreq+0xe2>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80089c4:	f7ff ff7e 	bl	80088c4 <RCC_GetSystemClockFreq>
 80089c8:	f7ff ff2e 	bl	8008828 <RCC_GetHCLKClockFreq>
 80089cc:	f7ff ff3a 	bl	8008844 <RCC_GetPCLK1ClockFreq>
          break;
 80089d0:	e796      	b.n	8008900 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = RCC_GetSystemClockFreq();
 80089d2:	f7ff ff77 	bl	80088c4 <RCC_GetSystemClockFreq>
          break;
 80089d6:	e793      	b.n	8008900 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80089d8:	4b07      	ldr	r3, [pc, #28]	; (80089f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 80089da:	6818      	ldr	r0, [r3, #0]
 80089dc:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80089e0:	d08e      	beq.n	8008900 <LL_RCC_GetUSARTClockFreq+0x10>
            usart_frequency = HSI_VALUE;
 80089e2:	4807      	ldr	r0, [pc, #28]	; (8008a00 <LL_RCC_GetUSARTClockFreq+0x110>)
 80089e4:	e78c      	b.n	8008900 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80089e6:	4b04      	ldr	r3, [pc, #16]	; (80089f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 80089e8:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80089ec:	f010 0002 	ands.w	r0, r0, #2
 80089f0:	d086      	beq.n	8008900 <LL_RCC_GetUSARTClockFreq+0x10>
            usart_frequency = LSE_VALUE;
 80089f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return usart_frequency;
 80089f6:	e783      	b.n	8008900 <LL_RCC_GetUSARTClockFreq+0x10>
 80089f8:	40021000 	.word	0x40021000
 80089fc:	00030002 	.word	0x00030002
 8008a00:	00f42400 	.word	0x00f42400
 8008a04:	000c0008 	.word	0x000c0008
 8008a08:	00300020 	.word	0x00300020

08008a0c <LL_RCC_GetUARTClockFreq>:
{
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	4604      	mov	r4, r0
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8008a10:	28c0      	cmp	r0, #192	; 0xc0
 8008a12:	d004      	beq.n	8008a1e <LL_RCC_GetUARTClockFreq+0x12>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8008a14:	2000      	movs	r0, #0
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8008a16:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 8008a1a:	d029      	beq.n	8008a70 <LL_RCC_GetUARTClockFreq+0x64>
}
 8008a1c:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8008a1e:	4b29      	ldr	r3, [pc, #164]	; (8008ac4 <LL_RCC_GetUARTClockFreq+0xb8>)
 8008a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a24:	4003      	ands	r3, r0
 8008a26:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8008a2a:	4a27      	ldr	r2, [pc, #156]	; (8008ac8 <LL_RCC_GetUARTClockFreq+0xbc>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d00f      	beq.n	8008a50 <LL_RCC_GetUARTClockFreq+0x44>
 8008a30:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8008a34:	d013      	beq.n	8008a5e <LL_RCC_GetUARTClockFreq+0x52>
 8008a36:	3a40      	subs	r2, #64	; 0x40
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d006      	beq.n	8008a4a <LL_RCC_GetUARTClockFreq+0x3e>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008a3c:	f7ff ff42 	bl	80088c4 <RCC_GetSystemClockFreq>
 8008a40:	f7ff fef2 	bl	8008828 <RCC_GetHCLKClockFreq>
 8008a44:	f7ff fefe 	bl	8008844 <RCC_GetPCLK1ClockFreq>
        break;
 8008a48:	e7e5      	b.n	8008a16 <LL_RCC_GetUARTClockFreq+0xa>
        uart_frequency = RCC_GetSystemClockFreq();
 8008a4a:	f7ff ff3b 	bl	80088c4 <RCC_GetSystemClockFreq>
        break;
 8008a4e:	e7e2      	b.n	8008a16 <LL_RCC_GetUARTClockFreq+0xa>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008a50:	4b1c      	ldr	r3, [pc, #112]	; (8008ac4 <LL_RCC_GetUARTClockFreq+0xb8>)
 8008a52:	6818      	ldr	r0, [r3, #0]
 8008a54:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8008a58:	d0dd      	beq.n	8008a16 <LL_RCC_GetUARTClockFreq+0xa>
          uart_frequency = HSI_VALUE;
 8008a5a:	481c      	ldr	r0, [pc, #112]	; (8008acc <LL_RCC_GetUARTClockFreq+0xc0>)
 8008a5c:	e7db      	b.n	8008a16 <LL_RCC_GetUARTClockFreq+0xa>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008a5e:	4b19      	ldr	r3, [pc, #100]	; (8008ac4 <LL_RCC_GetUARTClockFreq+0xb8>)
 8008a60:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8008a64:	f010 0002 	ands.w	r0, r0, #2
 8008a68:	d0d5      	beq.n	8008a16 <LL_RCC_GetUARTClockFreq+0xa>
          uart_frequency = LSE_VALUE;
 8008a6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008a6e:	e7d2      	b.n	8008a16 <LL_RCC_GetUARTClockFreq+0xa>
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8008a70:	4b14      	ldr	r3, [pc, #80]	; (8008ac4 <LL_RCC_GetUARTClockFreq+0xb8>)
 8008a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a76:	4023      	ands	r3, r4
 8008a78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8008a7c:	4b14      	ldr	r3, [pc, #80]	; (8008ad0 <LL_RCC_GetUARTClockFreq+0xc4>)
 8008a7e:	429c      	cmp	r4, r3
 8008a80:	d010      	beq.n	8008aa4 <LL_RCC_GetUARTClockFreq+0x98>
 8008a82:	f1b4 2f03 	cmp.w	r4, #50332416	; 0x3000300
 8008a86:	d014      	beq.n	8008ab2 <LL_RCC_GetUARTClockFreq+0xa6>
 8008a88:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008a8c:	429c      	cmp	r4, r3
 8008a8e:	d006      	beq.n	8008a9e <LL_RCC_GetUARTClockFreq+0x92>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008a90:	f7ff ff18 	bl	80088c4 <RCC_GetSystemClockFreq>
 8008a94:	f7ff fec8 	bl	8008828 <RCC_GetHCLKClockFreq>
 8008a98:	f7ff fed4 	bl	8008844 <RCC_GetPCLK1ClockFreq>
        break;
 8008a9c:	e7be      	b.n	8008a1c <LL_RCC_GetUARTClockFreq+0x10>
        uart_frequency = RCC_GetSystemClockFreq();
 8008a9e:	f7ff ff11 	bl	80088c4 <RCC_GetSystemClockFreq>
        break;
 8008aa2:	e7bb      	b.n	8008a1c <LL_RCC_GetUARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008aa4:	4b07      	ldr	r3, [pc, #28]	; (8008ac4 <LL_RCC_GetUARTClockFreq+0xb8>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008aac:	d0b6      	beq.n	8008a1c <LL_RCC_GetUARTClockFreq+0x10>
          uart_frequency = HSI_VALUE;
 8008aae:	4807      	ldr	r0, [pc, #28]	; (8008acc <LL_RCC_GetUARTClockFreq+0xc0>)
 8008ab0:	e7b4      	b.n	8008a1c <LL_RCC_GetUARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008ab2:	4b04      	ldr	r3, [pc, #16]	; (8008ac4 <LL_RCC_GetUARTClockFreq+0xb8>)
 8008ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ab8:	f013 0f02 	tst.w	r3, #2
 8008abc:	d0ae      	beq.n	8008a1c <LL_RCC_GetUARTClockFreq+0x10>
          uart_frequency = LSE_VALUE;
 8008abe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return uart_frequency;
 8008ac2:	e7ab      	b.n	8008a1c <LL_RCC_GetUARTClockFreq+0x10>
 8008ac4:	40021000 	.word	0x40021000
 8008ac8:	00c00080 	.word	0x00c00080
 8008acc:	00f42400 	.word	0x00f42400
 8008ad0:	03000200 	.word	0x03000200

08008ad4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8008ad4:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8008ad6:	6803      	ldr	r3, [r0, #0]
 8008ad8:	f013 0f01 	tst.w	r3, #1
 8008adc:	d175      	bne.n	8008bca <LL_USART_Init+0xf6>
 8008ade:	4604      	mov	r4, r0
 8008ae0:	460d      	mov	r5, r1
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8008ae2:	6803      	ldr	r3, [r0, #0]
 8008ae4:	4a3a      	ldr	r2, [pc, #232]	; (8008bd0 <LL_USART_Init+0xfc>)
 8008ae6:	401a      	ands	r2, r3
 8008ae8:	688b      	ldr	r3, [r1, #8]
 8008aea:	6909      	ldr	r1, [r1, #16]
 8008aec:	430b      	orrs	r3, r1
 8008aee:	6969      	ldr	r1, [r5, #20]
 8008af0:	430b      	orrs	r3, r1
 8008af2:	69e9      	ldr	r1, [r5, #28]
 8008af4:	430b      	orrs	r3, r1
 8008af6:	4313      	orrs	r3, r2
 8008af8:	6003      	str	r3, [r0, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8008afa:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8008afc:	6842      	ldr	r2, [r0, #4]
 8008afe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008b02:	4313      	orrs	r3, r2
 8008b04:	6043      	str	r3, [r0, #4]
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8008b06:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8008b08:	6882      	ldr	r2, [r0, #8]
 8008b0a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	6083      	str	r3, [r0, #8]

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8008b12:	4b30      	ldr	r3, [pc, #192]	; (8008bd4 <LL_USART_Init+0x100>)
 8008b14:	4298      	cmp	r0, r3
 8008b16:	d013      	beq.n	8008b40 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 8008b18:	4b2f      	ldr	r3, [pc, #188]	; (8008bd8 <LL_USART_Init+0x104>)
 8008b1a:	4298      	cmp	r0, r3
 8008b1c:	d019      	beq.n	8008b52 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
    }
    else if (USARTx == USART3)
 8008b1e:	4b2f      	ldr	r3, [pc, #188]	; (8008bdc <LL_USART_Init+0x108>)
 8008b20:	4298      	cmp	r0, r3
 8008b22:	d01a      	beq.n	8008b5a <LL_USART_Init+0x86>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8008b24:	4b2e      	ldr	r3, [pc, #184]	; (8008be0 <LL_USART_Init+0x10c>)
 8008b26:	4298      	cmp	r0, r3
 8008b28:	d01b      	beq.n	8008b62 <LL_USART_Init+0x8e>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8008b2a:	4b2e      	ldr	r3, [pc, #184]	; (8008be4 <LL_USART_Init+0x110>)
 8008b2c:	4298      	cmp	r0, r3
 8008b2e:	d01c      	beq.n	8008b6a <LL_USART_Init+0x96>
  ErrorStatus status = ERROR;
 8008b30:	2001      	movs	r0, #1
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8008b32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008b34:	f022 020f 	bic.w	r2, r2, #15
 8008b38:	882b      	ldrh	r3, [r5, #0]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	62e3      	str	r3, [r4, #44]	; 0x2c
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8008b40:	2003      	movs	r0, #3
 8008b42:	f7ff fed5 	bl	80088f0 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d03d      	beq.n	8008bc6 <LL_USART_Init+0xf2>
        && (USART_InitStruct->BaudRate != 0U))
 8008b4a:	686a      	ldr	r2, [r5, #4]
 8008b4c:	b992      	cbnz	r2, 8008b74 <LL_USART_Init+0xa0>
  ErrorStatus status = ERROR;
 8008b4e:	2001      	movs	r0, #1
 8008b50:	e7ef      	b.n	8008b32 <LL_USART_Init+0x5e>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8008b52:	200c      	movs	r0, #12
 8008b54:	f7ff fecc 	bl	80088f0 <LL_RCC_GetUSARTClockFreq>
 8008b58:	e7f5      	b.n	8008b46 <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8008b5a:	2030      	movs	r0, #48	; 0x30
 8008b5c:	f7ff fec8 	bl	80088f0 <LL_RCC_GetUSARTClockFreq>
 8008b60:	e7f1      	b.n	8008b46 <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8008b62:	20c0      	movs	r0, #192	; 0xc0
 8008b64:	f7ff ff52 	bl	8008a0c <LL_RCC_GetUARTClockFreq>
 8008b68:	e7ed      	b.n	8008b46 <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8008b6a:	f44f 7040 	mov.w	r0, #768	; 0x300
 8008b6e:	f7ff ff4d 	bl	8008a0c <LL_RCC_GetUARTClockFreq>
 8008b72:	e7e8      	b.n	8008b46 <LL_USART_Init+0x72>
      LL_USART_SetBaudRate(USARTx,
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	69e9      	ldr	r1, [r5, #28]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8008b78:	2b0b      	cmp	r3, #11
 8008b7a:	d80f      	bhi.n	8008b9c <LL_USART_Init+0xc8>
  else if (BaudRate == 0U)
 8008b7c:	b172      	cbz	r2, 8008b9c <LL_USART_Init+0xc8>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8008b7e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008b82:	d00d      	beq.n	8008ba0 <LL_USART_Init+0xcc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	4918      	ldr	r1, [pc, #96]	; (8008be8 <LL_USART_Init+0x114>)
 8008b88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008b8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b90:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 8008b9c:	2000      	movs	r0, #0
}
 8008b9e:	e7c8      	b.n	8008b32 <LL_USART_Init+0x5e>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	4911      	ldr	r1, [pc, #68]	; (8008be8 <LL_USART_Init+0x114>)
 8008ba4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008ba8:	fbb0 f0f3 	udiv	r0, r0, r3
 8008bac:	0853      	lsrs	r3, r2, #1
 8008bae:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8008bb2:	fbb0 f3f2 	udiv	r3, r0, r2
    brrtemp = usartdiv & 0xFFF0U;
 8008bb6:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8008bba:	401a      	ands	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bbc:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8008bc0:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 8008bc2:	60e3      	str	r3, [r4, #12]
 8008bc4:	e7ea      	b.n	8008b9c <LL_USART_Init+0xc8>
  ErrorStatus status = ERROR;
 8008bc6:	2001      	movs	r0, #1
 8008bc8:	e7b3      	b.n	8008b32 <LL_USART_Init+0x5e>
 8008bca:	2001      	movs	r0, #1
 8008bcc:	e7b7      	b.n	8008b3e <LL_USART_Init+0x6a>
 8008bce:	bf00      	nop
 8008bd0:	efff69f3 	.word	0xefff69f3
 8008bd4:	40013800 	.word	0x40013800
 8008bd8:	40004400 	.word	0x40004400
 8008bdc:	40004800 	.word	0x40004800
 8008be0:	40004c00 	.word	0x40004c00
 8008be4:	40005000 	.word	0x40005000
 8008be8:	0800fb10 	.word	0x0800fb10

08008bec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008bec:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008bee:	2000      	movs	r0, #0
 8008bf0:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008bf4:	f64b 7280 	movw	r2, #49024	; 0xbf80
 8008bf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8008bfc:	4770      	bx	lr

08008bfe <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008bfe:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8008c02:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8008c06:	045b      	lsls	r3, r3, #17
 8008c08:	0c5b      	lsrs	r3, r3, #17
 8008c0a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8008c0e:	2000      	movs	r0, #0
 8008c10:	4770      	bx	lr

08008c12 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008c12:	b084      	sub	sp, #16
 8008c14:	4684      	mov	ip, r0
 8008c16:	a801      	add	r0, sp, #4
 8008c18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008c22:	2000      	movs	r0, #0
 8008c24:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008c28:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008c2c:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 8008c30:	b004      	add	sp, #16
 8008c32:	4770      	bx	lr

08008c34 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c34:	b510      	push	{r4, lr}
 8008c36:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008c38:	780a      	ldrb	r2, [r1, #0]
 8008c3a:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
 8008c3e:	fa1f fc8c 	uxth.w	ip, ip
 8008c42:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 8008c46:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8008c4a:	fa1f fc8c 	uxth.w	ip, ip

  /* initialize Endpoint */
  switch (ep->type)
 8008c4e:	78c8      	ldrb	r0, [r1, #3]
 8008c50:	2803      	cmp	r0, #3
 8008c52:	d862      	bhi.n	8008d1a <USB_ActivateEndpoint+0xe6>
 8008c54:	e8df f000 	tbb	[pc, r0]
 8008c58:	59025d56 	.word	0x59025d56
 8008c5c:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008c5e:	f248 0e80 	movw	lr, #32896	; 0x8080
 8008c62:	ea4c 0c0e 	orr.w	ip, ip, lr
 8008c66:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008c6a:	f891 c000 	ldrb.w	ip, [r1]
 8008c6e:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8008c72:	b212      	sxth	r2, r2
 8008c74:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008c78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008c7c:	ea4c 0202 	orr.w	r2, ip, r2
 8008c80:	b292      	uxth	r2, r2
 8008c82:	ea42 020e 	orr.w	r2, r2, lr
 8008c86:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 8008c8a:	7b0a      	ldrb	r2, [r1, #12]
 8008c8c:	2a00      	cmp	r2, #0
 8008c8e:	f040 80c2 	bne.w	8008e16 <USB_ActivateEndpoint+0x1e2>
  {
    if (ep->is_in != 0U)
 8008c92:	784a      	ldrb	r2, [r1, #1]
 8008c94:	2a00      	cmp	r2, #0
 8008c96:	d051      	beq.n	8008d3c <USB_ActivateEndpoint+0x108>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008c98:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8008c9c:	fa13 f282 	uxtah	r2, r3, r2
 8008ca0:	780c      	ldrb	r4, [r1, #0]
 8008ca2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008ca6:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8008caa:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008cae:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008cb2:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cb6:	780c      	ldrb	r4, [r1, #0]
 8008cb8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008cbc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008cc0:	d00c      	beq.n	8008cdc <USB_ActivateEndpoint+0xa8>
 8008cc2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008cc6:	b292      	uxth	r2, r2
 8008cc8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008ccc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008cd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008cd4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008cd8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8008cdc:	78ca      	ldrb	r2, [r1, #3]
 8008cde:	2a01      	cmp	r2, #1
 8008ce0:	d01d      	beq.n	8008d1e <USB_ActivateEndpoint+0xea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008ce2:	7809      	ldrb	r1, [r1, #0]
 8008ce4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008ce8:	b292      	uxth	r2, r2
 8008cea:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cf2:	f082 0220 	eor.w	r2, r2, #32
 8008cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008cfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008cfe:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8008d02:	e066      	b.n	8008dd2 <USB_ActivateEndpoint+0x19e>
      wEpRegVal |= USB_EP_CONTROL;
 8008d04:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
      break;
 8008d08:	e7a9      	b.n	8008c5e <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_INTERRUPT;
 8008d0a:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8008d0e:	2000      	movs	r0, #0
      break;
 8008d10:	e7a5      	b.n	8008c5e <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008d12:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8008d16:	2000      	movs	r0, #0
      break;
 8008d18:	e7a1      	b.n	8008c5e <USB_ActivateEndpoint+0x2a>
      ret = HAL_ERROR;
 8008d1a:	2001      	movs	r0, #1
 8008d1c:	e79f      	b.n	8008c5e <USB_ActivateEndpoint+0x2a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d1e:	7809      	ldrb	r1, [r1, #0]
 8008d20:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008d24:	b292      	uxth	r2, r2
 8008d26:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008d36:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8008d3a:	e04a      	b.n	8008dd2 <USB_ActivateEndpoint+0x19e>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008d3c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8008d40:	fa13 f282 	uxtah	r2, r3, r2
 8008d44:	780c      	ldrb	r4, [r1, #0]
 8008d46:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008d4a:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8008d4e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008d52:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008d56:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008d5a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8008d5e:	fa13 f282 	uxtah	r2, r3, r2
 8008d62:	780c      	ldrb	r4, [r1, #0]
 8008d64:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008d68:	690c      	ldr	r4, [r1, #16]
 8008d6a:	2c3e      	cmp	r4, #62	; 0x3e
 8008d6c:	d932      	bls.n	8008dd4 <USB_ActivateEndpoint+0x1a0>
 8008d6e:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 8008d72:	f014 0f1f 	tst.w	r4, #31
 8008d76:	d101      	bne.n	8008d7c <USB_ActivateEndpoint+0x148>
 8008d78:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008d7c:	ea6f 6ccc 	mvn.w	ip, ip, lsl #27
 8008d80:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 8008d84:	fa1f fc8c 	uxth.w	ip, ip
 8008d88:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d8c:	780c      	ldrb	r4, [r1, #0]
 8008d8e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008d92:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8008d96:	d00c      	beq.n	8008db2 <USB_ActivateEndpoint+0x17e>
 8008d98:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008d9c:	b292      	uxth	r2, r2
 8008d9e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008da2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008da6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008daa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008dae:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008db2:	7809      	ldrb	r1, [r1, #0]
 8008db4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008db8:	b292      	uxth	r2, r2
 8008dba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008dbe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008dc2:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8008dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008dce:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8008dd2:	bd10      	pop	{r4, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008dd4:	b98c      	cbnz	r4, 8008dfa <USB_ActivateEndpoint+0x1c6>
 8008dd6:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8008dda:	b2a4      	uxth	r4, r4
 8008ddc:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8008de0:	b2a4      	uxth	r4, r4
 8008de2:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8008de6:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8008dea:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8008dee:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8008df2:	b2a4      	uxth	r4, r4
 8008df4:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8008df8:	e7c8      	b.n	8008d8c <USB_ActivateEndpoint+0x158>
 8008dfa:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8008dfe:	f014 0f01 	tst.w	r4, #1
 8008e02:	d001      	beq.n	8008e08 <USB_ActivateEndpoint+0x1d4>
 8008e04:	f10c 0c01 	add.w	ip, ip, #1
 8008e08:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8008e0c:	fa1f fc8c 	uxth.w	ip, ip
 8008e10:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
 8008e14:	e7ba      	b.n	8008d8c <USB_ActivateEndpoint+0x158>
    if (ep->type == EP_TYPE_BULK)
 8008e16:	78ca      	ldrb	r2, [r1, #3]
 8008e18:	2a02      	cmp	r2, #2
 8008e1a:	d072      	beq.n	8008f02 <USB_ActivateEndpoint+0x2ce>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008e1c:	780c      	ldrb	r4, [r1, #0]
 8008e1e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008e22:	b292      	uxth	r2, r2
 8008e24:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8008e28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008e2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e34:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008e38:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8008e3c:	fa13 f282 	uxtah	r2, r3, r2
 8008e40:	f891 c000 	ldrb.w	ip, [r1]
 8008e44:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8008e48:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8008e4c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008e50:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008e54:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
 8008e58:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8008e5c:	fa13 f282 	uxtah	r2, r3, r2
 8008e60:	f891 c000 	ldrb.w	ip, [r1]
 8008e64:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8008e68:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8008e6c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008e70:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008e74:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404
    if (ep->is_in == 0U)
 8008e78:	784a      	ldrb	r2, [r1, #1]
 8008e7a:	2a00      	cmp	r2, #0
 8008e7c:	d150      	bne.n	8008f20 <USB_ActivateEndpoint+0x2ec>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e7e:	780c      	ldrb	r4, [r1, #0]
 8008e80:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008e84:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8008e88:	d00c      	beq.n	8008ea4 <USB_ActivateEndpoint+0x270>
 8008e8a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008e8e:	b292      	uxth	r2, r2
 8008e90:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008e94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008e98:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008e9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ea0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ea4:	780c      	ldrb	r4, [r1, #0]
 8008ea6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008eaa:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008eae:	d00c      	beq.n	8008eca <USB_ActivateEndpoint+0x296>
 8008eb0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008eb4:	b292      	uxth	r2, r2
 8008eb6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008eba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ec2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008ec6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008eca:	f891 c000 	ldrb.w	ip, [r1]
 8008ece:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8008ed2:	b292      	uxth	r2, r2
 8008ed4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008ed8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008edc:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8008ee0:	f248 0480 	movw	r4, #32896	; 0x8080
 8008ee4:	4322      	orrs	r2, r4
 8008ee6:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008eea:	7809      	ldrb	r1, [r1, #0]
 8008eec:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008ef0:	b292      	uxth	r2, r2
 8008ef2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008efa:	4322      	orrs	r2, r4
 8008efc:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8008f00:	e767      	b.n	8008dd2 <USB_ActivateEndpoint+0x19e>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008f02:	780c      	ldrb	r4, [r1, #0]
 8008f04:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008f08:	b292      	uxth	r2, r2
 8008f0a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008f0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008f12:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8008f16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f1a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8008f1e:	e78b      	b.n	8008e38 <USB_ActivateEndpoint+0x204>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f20:	780c      	ldrb	r4, [r1, #0]
 8008f22:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008f26:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8008f2a:	d00c      	beq.n	8008f46 <USB_ActivateEndpoint+0x312>
 8008f2c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008f30:	b292      	uxth	r2, r2
 8008f32:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008f36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008f3a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008f3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f42:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f46:	780c      	ldrb	r4, [r1, #0]
 8008f48:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008f4c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008f50:	d00c      	beq.n	8008f6c <USB_ActivateEndpoint+0x338>
 8008f52:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008f56:	b292      	uxth	r2, r2
 8008f58:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008f5c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008f60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f64:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008f68:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8008f6c:	78ca      	ldrb	r2, [r1, #3]
 8008f6e:	2a01      	cmp	r2, #1
 8008f70:	d01e      	beq.n	8008fb0 <USB_ActivateEndpoint+0x37c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008f72:	780c      	ldrb	r4, [r1, #0]
 8008f74:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008f78:	b292      	uxth	r2, r2
 8008f7a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f82:	f082 0220 	eor.w	r2, r2, #32
 8008f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f8e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f92:	7809      	ldrb	r1, [r1, #0]
 8008f94:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008f98:	b292      	uxth	r2, r2
 8008f9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008f9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fa6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008faa:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8008fae:	e710      	b.n	8008dd2 <USB_ActivateEndpoint+0x19e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008fb0:	780c      	ldrb	r4, [r1, #0]
 8008fb2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008fb6:	b292      	uxth	r2, r2
 8008fb8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008fc8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8008fcc:	e7e1      	b.n	8008f92 <USB_ActivateEndpoint+0x35e>

08008fce <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8008fce:	7b0b      	ldrb	r3, [r1, #12]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d146      	bne.n	8009062 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8008fd4:	784b      	ldrb	r3, [r1, #1]
 8008fd6:	b313      	cbz	r3, 800901e <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fd8:	780a      	ldrb	r2, [r1, #0]
 8008fda:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008fde:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008fe2:	d00c      	beq.n	8008ffe <USB_DeactivateEndpoint+0x30>
 8008fe4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ff6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ffa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ffe:	780a      	ldrb	r2, [r1, #0]
 8009000:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009004:	b29b      	uxth	r3, r3
 8009006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800900a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800900e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009016:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800901a:	2000      	movs	r0, #0
 800901c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800901e:	780a      	ldrb	r2, [r1, #0]
 8009020:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009024:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8009028:	d00c      	beq.n	8009044 <USB_DeactivateEndpoint+0x76>
 800902a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800902e:	b29b      	uxth	r3, r3
 8009030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009038:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800903c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009040:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009044:	780a      	ldrb	r2, [r1, #0]
 8009046:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800904a:	b29b      	uxth	r3, r3
 800904c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800905c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8009060:	e7db      	b.n	800901a <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8009062:	784b      	ldrb	r3, [r1, #1]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d14e      	bne.n	8009106 <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009068:	780a      	ldrb	r2, [r1, #0]
 800906a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800906e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8009072:	d00c      	beq.n	800908e <USB_DeactivateEndpoint+0xc0>
 8009074:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009078:	b29b      	uxth	r3, r3
 800907a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800907e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009082:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800908a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800908e:	780a      	ldrb	r2, [r1, #0]
 8009090:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009094:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009098:	d00c      	beq.n	80090b4 <USB_DeactivateEndpoint+0xe6>
 800909a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800909e:	b29b      	uxth	r3, r3
 80090a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80090b0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80090b4:	780a      	ldrb	r2, [r1, #0]
 80090b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80090cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090d0:	780b      	ldrb	r3, [r1, #0]
 80090d2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80090d6:	b292      	uxth	r2, r2
 80090d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80090dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80090e0:	f248 0c80 	movw	ip, #32896	; 0x8080
 80090e4:	ea42 020c 	orr.w	r2, r2, ip
 80090e8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090ec:	780a      	ldrb	r2, [r1, #0]
 80090ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090fc:	ea43 030c 	orr.w	r3, r3, ip
 8009100:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8009104:	e789      	b.n	800901a <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009106:	780a      	ldrb	r2, [r1, #0]
 8009108:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800910c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8009110:	d00c      	beq.n	800912c <USB_DeactivateEndpoint+0x15e>
 8009112:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009116:	b29b      	uxth	r3, r3
 8009118:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800911c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009128:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800912c:	780a      	ldrb	r2, [r1, #0]
 800912e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009132:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009136:	d00c      	beq.n	8009152 <USB_DeactivateEndpoint+0x184>
 8009138:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800913c:	b29b      	uxth	r3, r3
 800913e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800914a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800914e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8009152:	780a      	ldrb	r2, [r1, #0]
 8009154:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009158:	b29b      	uxth	r3, r3
 800915a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800915e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009162:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800916a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800916e:	780b      	ldrb	r3, [r1, #0]
 8009170:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009174:	b292      	uxth	r2, r2
 8009176:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800917a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800917e:	f248 0c80 	movw	ip, #32896	; 0x8080
 8009182:	ea42 020c 	orr.w	r2, r2, ip
 8009186:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800918a:	780a      	ldrb	r2, [r1, #0]
 800918c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009190:	b29b      	uxth	r3, r3
 8009192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800919a:	ea43 030c 	orr.w	r3, r3, ip
 800919e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80091a2:	e73a      	b.n	800901a <USB_DeactivateEndpoint+0x4c>

080091a4 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80091a4:	784b      	ldrb	r3, [r1, #1]
 80091a6:	b18b      	cbz	r3, 80091cc <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80091a8:	780a      	ldrb	r2, [r1, #0]
 80091aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091b8:	f083 0310 	eor.w	r3, r3, #16
 80091bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091c4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 80091c8:	2000      	movs	r0, #0
 80091ca:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80091cc:	780a      	ldrb	r2, [r1, #0]
 80091ce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80091e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091e8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80091ec:	e7ec      	b.n	80091c8 <USB_EPSetStall+0x24>

080091ee <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80091ee:	7b0b      	ldrb	r3, [r1, #12]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d14b      	bne.n	800928c <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 80091f4:	784b      	ldrb	r3, [r1, #1]
 80091f6:	b333      	cbz	r3, 8009246 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091f8:	780a      	ldrb	r2, [r1, #0]
 80091fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80091fe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009202:	d00c      	beq.n	800921e <USB_EPClearStall+0x30>
 8009204:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009208:	b29b      	uxth	r3, r3
 800920a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800920e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009216:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800921a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800921e:	78cb      	ldrb	r3, [r1, #3]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d033      	beq.n	800928c <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009224:	780a      	ldrb	r2, [r1, #0]
 8009226:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800922a:	b29b      	uxth	r3, r3
 800922c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009234:	f083 0320 	eor.w	r3, r3, #32
 8009238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800923c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009240:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8009244:	e022      	b.n	800928c <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009246:	780a      	ldrb	r2, [r1, #0]
 8009248:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800924c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8009250:	d00c      	beq.n	800926c <USB_EPClearStall+0x7e>
 8009252:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009256:	b29b      	uxth	r3, r3
 8009258:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800925c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009260:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009268:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800926c:	780a      	ldrb	r2, [r1, #0]
 800926e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009272:	b29b      	uxth	r3, r3
 8009274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009288:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800928c:	2000      	movs	r0, #0
 800928e:	4770      	bx	lr

08009290 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8009290:	b911      	cbnz	r1, 8009298 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009292:	2380      	movs	r3, #128	; 0x80
 8009294:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8009298:	2000      	movs	r0, #0
 800929a:	4770      	bx	lr

0800929c <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800929c:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 80092a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 80092ae:	2000      	movs	r0, #0
 80092b0:	4770      	bx	lr

080092b2 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80092b2:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80092b6:	b280      	uxth	r0, r0
 80092b8:	4770      	bx	lr

080092ba <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80092ba:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80092bc:	1c5c      	adds	r4, r3, #1
 80092be:	0864      	lsrs	r4, r4, #1
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80092c0:	4402      	add	r2, r0
 80092c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 80092c6:	e007      	b.n	80092d8 <USB_WritePMA+0x1e>
  {
    temp1 = *pBuf;
 80092c8:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80092ca:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 80092cc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80092d0:	f822 3b02 	strh.w	r3, [r2], #2

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80092d4:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 80092d6:	3c01      	subs	r4, #1
 80092d8:	2c00      	cmp	r4, #0
 80092da:	d1f5      	bne.n	80092c8 <USB_WritePMA+0xe>
  }
}
 80092dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <USB_EPStartXfer>:
{
 80092e2:	b570      	push	{r4, r5, r6, lr}
 80092e4:	4605      	mov	r5, r0
 80092e6:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 80092e8:	784a      	ldrb	r2, [r1, #1]
 80092ea:	2a01      	cmp	r2, #1
 80092ec:	d032      	beq.n	8009354 <USB_EPStartXfer+0x72>
    if (ep->doublebuffer == 0U)
 80092ee:	7b0b      	ldrb	r3, [r1, #12]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f040 8283 	bne.w	80097fc <USB_EPStartXfer+0x51a>
      if (ep->xfer_len > ep->maxpacket)
 80092f6:	698b      	ldr	r3, [r1, #24]
 80092f8:	690a      	ldr	r2, [r1, #16]
 80092fa:	4293      	cmp	r3, r2
 80092fc:	f240 825d 	bls.w	80097ba <USB_EPStartXfer+0x4d8>
        ep->xfer_len -= len;
 8009300:	1a9b      	subs	r3, r3, r2
 8009302:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009304:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8009308:	fa15 f383 	uxtah	r3, r5, r3
 800930c:	7821      	ldrb	r1, [r4, #0]
 800930e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009312:	2a3e      	cmp	r2, #62	; 0x3e
 8009314:	f240 8255 	bls.w	80097c2 <USB_EPStartXfer+0x4e0>
 8009318:	0951      	lsrs	r1, r2, #5
 800931a:	f012 0f1f 	tst.w	r2, #31
 800931e:	d100      	bne.n	8009322 <USB_EPStartXfer+0x40>
 8009320:	3901      	subs	r1, #1
 8009322:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8009326:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800932a:	b289      	uxth	r1, r1
 800932c:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009330:	7822      	ldrb	r2, [r4, #0]
 8009332:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8009336:	b29b      	uxth	r3, r3
 8009338:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800933c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009340:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800934c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8009350:	2000      	movs	r0, #0
}
 8009352:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 8009354:	698e      	ldr	r6, [r1, #24]
 8009356:	6909      	ldr	r1, [r1, #16]
 8009358:	428e      	cmp	r6, r1
 800935a:	d900      	bls.n	800935e <USB_EPStartXfer+0x7c>
      len = ep->maxpacket;
 800935c:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 800935e:	7b23      	ldrb	r3, [r4, #12]
 8009360:	b32b      	cbz	r3, 80093ae <USB_EPStartXfer+0xcc>
      if (ep->type == EP_TYPE_BULK)
 8009362:	78e3      	ldrb	r3, [r4, #3]
 8009364:	2b02      	cmp	r3, #2
 8009366:	d044      	beq.n	80093f2 <USB_EPStartXfer+0x110>
        ep->xfer_len_db -= len;
 8009368:	6a23      	ldr	r3, [r4, #32]
 800936a:	1b9b      	subs	r3, r3, r6
 800936c:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800936e:	7823      	ldrb	r3, [r4, #0]
 8009370:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
 8009374:	f011 0f40 	tst.w	r1, #64	; 0x40
 8009378:	f000 81dc 	beq.w	8009734 <USB_EPStartXfer+0x452>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800937c:	2a00      	cmp	r2, #0
 800937e:	f040 81c9 	bne.w	8009714 <USB_EPStartXfer+0x432>
 8009382:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8009386:	fa15 f282 	uxtah	r2, r5, r2
 800938a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800938e:	2e3e      	cmp	r6, #62	; 0x3e
 8009390:	f240 81a3 	bls.w	80096da <USB_EPStartXfer+0x3f8>
 8009394:	0972      	lsrs	r2, r6, #5
 8009396:	f016 0f1f 	tst.w	r6, #31
 800939a:	d100      	bne.n	800939e <USB_EPStartXfer+0xbc>
 800939c:	3a01      	subs	r2, #1
 800939e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80093a2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80093a6:	b292      	uxth	r2, r2
 80093a8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80093ac:	e1bb      	b.n	8009726 <USB_EPStartXfer+0x444>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80093ae:	b2b6      	uxth	r6, r6
 80093b0:	4633      	mov	r3, r6
 80093b2:	88e2      	ldrh	r2, [r4, #6]
 80093b4:	6961      	ldr	r1, [r4, #20]
 80093b6:	4628      	mov	r0, r5
 80093b8:	f7ff ff7f 	bl	80092ba <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80093bc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80093c0:	fa15 f383 	uxtah	r3, r5, r3
 80093c4:	7822      	ldrb	r2, [r4, #0]
 80093c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093ca:	f8a3 6402 	strh.w	r6, [r3, #1026]	; 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80093ce:	7822      	ldrb	r2, [r4, #0]
 80093d0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093de:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80093e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ea:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 80093ee:	2000      	movs	r0, #0
 80093f0:	e7af      	b.n	8009352 <USB_EPStartXfer+0x70>
        if (ep->xfer_len_db > ep->maxpacket)
 80093f2:	6a23      	ldr	r3, [r4, #32]
 80093f4:	4299      	cmp	r1, r3
 80093f6:	f080 8152 	bcs.w	800969e <USB_EPStartXfer+0x3bc>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80093fa:	7822      	ldrb	r2, [r4, #0]
 80093fc:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8009400:	b29b      	uxth	r3, r3
 8009402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800940a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800940e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009412:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 8009416:	6a23      	ldr	r3, [r4, #32]
 8009418:	1b9b      	subs	r3, r3, r6
 800941a:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800941c:	7823      	ldrb	r3, [r4, #0]
 800941e:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 8009422:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009426:	f000 809d 	beq.w	8009564 <USB_EPStartXfer+0x282>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800942a:	7862      	ldrb	r2, [r4, #1]
 800942c:	bb8a      	cbnz	r2, 8009492 <USB_EPStartXfer+0x1b0>
 800942e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8009432:	fa15 f282 	uxtah	r2, r5, r2
 8009436:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800943a:	2e3e      	cmp	r6, #62	; 0x3e
 800943c:	d90c      	bls.n	8009458 <USB_EPStartXfer+0x176>
 800943e:	0972      	lsrs	r2, r6, #5
 8009440:	f016 0f1f 	tst.w	r6, #31
 8009444:	d100      	bne.n	8009448 <USB_EPStartXfer+0x166>
 8009446:	3a01      	subs	r2, #1
 8009448:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800944c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009450:	b292      	uxth	r2, r2
 8009452:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009456:	e01e      	b.n	8009496 <USB_EPStartXfer+0x1b4>
 8009458:	b98e      	cbnz	r6, 800947e <USB_EPStartXfer+0x19c>
 800945a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800945e:	b292      	uxth	r2, r2
 8009460:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009464:	b292      	uxth	r2, r2
 8009466:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800946a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800946e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009472:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009476:	b292      	uxth	r2, r2
 8009478:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800947c:	e00b      	b.n	8009496 <USB_EPStartXfer+0x1b4>
 800947e:	0872      	lsrs	r2, r6, #1
 8009480:	f016 0f01 	tst.w	r6, #1
 8009484:	d000      	beq.n	8009488 <USB_EPStartXfer+0x1a6>
 8009486:	3201      	adds	r2, #1
 8009488:	0292      	lsls	r2, r2, #10
 800948a:	b292      	uxth	r2, r2
 800948c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009490:	e001      	b.n	8009496 <USB_EPStartXfer+0x1b4>
 8009492:	2a01      	cmp	r2, #1
 8009494:	d027      	beq.n	80094e6 <USB_EPStartXfer+0x204>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009496:	b2b3      	uxth	r3, r6
 8009498:	8962      	ldrh	r2, [r4, #10]
 800949a:	6961      	ldr	r1, [r4, #20]
 800949c:	4628      	mov	r0, r5
 800949e:	f7ff ff0c 	bl	80092ba <USB_WritePMA>
            ep->xfer_buff += len;
 80094a2:	6963      	ldr	r3, [r4, #20]
 80094a4:	4433      	add	r3, r6
 80094a6:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80094a8:	6a23      	ldr	r3, [r4, #32]
 80094aa:	6922      	ldr	r2, [r4, #16]
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d924      	bls.n	80094fa <USB_EPStartXfer+0x218>
              ep->xfer_len_db -= len;
 80094b0:	1b9b      	subs	r3, r3, r6
 80094b2:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80094b4:	7863      	ldrb	r3, [r4, #1]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d140      	bne.n	800953c <USB_EPStartXfer+0x25a>
 80094ba:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80094be:	fa15 f383 	uxtah	r3, r5, r3
 80094c2:	7822      	ldrb	r2, [r4, #0]
 80094c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094c8:	2e3e      	cmp	r6, #62	; 0x3e
 80094ca:	d91a      	bls.n	8009502 <USB_EPStartXfer+0x220>
 80094cc:	0972      	lsrs	r2, r6, #5
 80094ce:	f016 0f1f 	tst.w	r6, #31
 80094d2:	d100      	bne.n	80094d6 <USB_EPStartXfer+0x1f4>
 80094d4:	3a01      	subs	r2, #1
 80094d6:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80094da:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80094de:	b292      	uxth	r2, r2
 80094e0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80094e4:	e02c      	b.n	8009540 <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80094e6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80094ea:	fa15 f282 	uxtah	r2, r5, r2
 80094ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80094f2:	b2b2      	uxth	r2, r6
 80094f4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80094f8:	e7cd      	b.n	8009496 <USB_EPStartXfer+0x1b4>
              ep->xfer_len_db = 0U;
 80094fa:	2200      	movs	r2, #0
 80094fc:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 80094fe:	461e      	mov	r6, r3
 8009500:	e7d8      	b.n	80094b4 <USB_EPStartXfer+0x1d2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009502:	b98e      	cbnz	r6, 8009528 <USB_EPStartXfer+0x246>
 8009504:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8009508:	b292      	uxth	r2, r2
 800950a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800950e:	b292      	uxth	r2, r2
 8009510:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009514:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8009518:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800951c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009520:	b292      	uxth	r2, r2
 8009522:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009526:	e00b      	b.n	8009540 <USB_EPStartXfer+0x25e>
 8009528:	0872      	lsrs	r2, r6, #1
 800952a:	f016 0f01 	tst.w	r6, #1
 800952e:	d000      	beq.n	8009532 <USB_EPStartXfer+0x250>
 8009530:	3201      	adds	r2, #1
 8009532:	0292      	lsls	r2, r2, #10
 8009534:	b292      	uxth	r2, r2
 8009536:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800953a:	e001      	b.n	8009540 <USB_EPStartXfer+0x25e>
 800953c:	2b01      	cmp	r3, #1
 800953e:	d006      	beq.n	800954e <USB_EPStartXfer+0x26c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009540:	b2b3      	uxth	r3, r6
 8009542:	8922      	ldrh	r2, [r4, #8]
 8009544:	6961      	ldr	r1, [r4, #20]
 8009546:	4628      	mov	r0, r5
 8009548:	f7ff feb7 	bl	80092ba <USB_WritePMA>
 800954c:	e73f      	b.n	80093ce <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800954e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8009552:	fa15 f383 	uxtah	r3, r5, r3
 8009556:	7822      	ldrb	r2, [r4, #0]
 8009558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800955c:	b2b2      	uxth	r2, r6
 800955e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009562:	e7ed      	b.n	8009540 <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009564:	7862      	ldrb	r2, [r4, #1]
 8009566:	bb8a      	cbnz	r2, 80095cc <USB_EPStartXfer+0x2ea>
 8009568:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800956c:	fa15 f282 	uxtah	r2, r5, r2
 8009570:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009574:	2e3e      	cmp	r6, #62	; 0x3e
 8009576:	d90c      	bls.n	8009592 <USB_EPStartXfer+0x2b0>
 8009578:	0972      	lsrs	r2, r6, #5
 800957a:	f016 0f1f 	tst.w	r6, #31
 800957e:	d100      	bne.n	8009582 <USB_EPStartXfer+0x2a0>
 8009580:	3a01      	subs	r2, #1
 8009582:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8009586:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800958a:	b292      	uxth	r2, r2
 800958c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009590:	e01e      	b.n	80095d0 <USB_EPStartXfer+0x2ee>
 8009592:	b98e      	cbnz	r6, 80095b8 <USB_EPStartXfer+0x2d6>
 8009594:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8009598:	b292      	uxth	r2, r2
 800959a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800959e:	b292      	uxth	r2, r2
 80095a0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80095a4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80095a8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80095ac:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80095b0:	b292      	uxth	r2, r2
 80095b2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80095b6:	e00b      	b.n	80095d0 <USB_EPStartXfer+0x2ee>
 80095b8:	0872      	lsrs	r2, r6, #1
 80095ba:	f016 0f01 	tst.w	r6, #1
 80095be:	d000      	beq.n	80095c2 <USB_EPStartXfer+0x2e0>
 80095c0:	3201      	adds	r2, #1
 80095c2:	0292      	lsls	r2, r2, #10
 80095c4:	b292      	uxth	r2, r2
 80095c6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80095ca:	e001      	b.n	80095d0 <USB_EPStartXfer+0x2ee>
 80095cc:	2a01      	cmp	r2, #1
 80095ce:	d027      	beq.n	8009620 <USB_EPStartXfer+0x33e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095d0:	b2b3      	uxth	r3, r6
 80095d2:	8922      	ldrh	r2, [r4, #8]
 80095d4:	6961      	ldr	r1, [r4, #20]
 80095d6:	4628      	mov	r0, r5
 80095d8:	f7ff fe6f 	bl	80092ba <USB_WritePMA>
            ep->xfer_buff += len;
 80095dc:	6963      	ldr	r3, [r4, #20]
 80095de:	4433      	add	r3, r6
 80095e0:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80095e2:	6a23      	ldr	r3, [r4, #32]
 80095e4:	6922      	ldr	r2, [r4, #16]
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d924      	bls.n	8009634 <USB_EPStartXfer+0x352>
              ep->xfer_len_db -= len;
 80095ea:	1b9b      	subs	r3, r3, r6
 80095ec:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80095ee:	7863      	ldrb	r3, [r4, #1]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d140      	bne.n	8009676 <USB_EPStartXfer+0x394>
 80095f4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80095f8:	fa15 f383 	uxtah	r3, r5, r3
 80095fc:	7822      	ldrb	r2, [r4, #0]
 80095fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009602:	2e3e      	cmp	r6, #62	; 0x3e
 8009604:	d91a      	bls.n	800963c <USB_EPStartXfer+0x35a>
 8009606:	0972      	lsrs	r2, r6, #5
 8009608:	f016 0f1f 	tst.w	r6, #31
 800960c:	d100      	bne.n	8009610 <USB_EPStartXfer+0x32e>
 800960e:	3a01      	subs	r2, #1
 8009610:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8009614:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009618:	b292      	uxth	r2, r2
 800961a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800961e:	e02c      	b.n	800967a <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009620:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8009624:	fa15 f282 	uxtah	r2, r5, r2
 8009628:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800962c:	b2b2      	uxth	r2, r6
 800962e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009632:	e7cd      	b.n	80095d0 <USB_EPStartXfer+0x2ee>
              ep->xfer_len_db = 0U;
 8009634:	2200      	movs	r2, #0
 8009636:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8009638:	461e      	mov	r6, r3
 800963a:	e7d8      	b.n	80095ee <USB_EPStartXfer+0x30c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800963c:	b98e      	cbnz	r6, 8009662 <USB_EPStartXfer+0x380>
 800963e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009642:	b292      	uxth	r2, r2
 8009644:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009648:	b292      	uxth	r2, r2
 800964a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800964e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009652:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009656:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800965a:	b292      	uxth	r2, r2
 800965c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009660:	e00b      	b.n	800967a <USB_EPStartXfer+0x398>
 8009662:	0872      	lsrs	r2, r6, #1
 8009664:	f016 0f01 	tst.w	r6, #1
 8009668:	d000      	beq.n	800966c <USB_EPStartXfer+0x38a>
 800966a:	3201      	adds	r2, #1
 800966c:	0292      	lsls	r2, r2, #10
 800966e:	b292      	uxth	r2, r2
 8009670:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009674:	e001      	b.n	800967a <USB_EPStartXfer+0x398>
 8009676:	2b01      	cmp	r3, #1
 8009678:	d006      	beq.n	8009688 <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800967a:	b2b3      	uxth	r3, r6
 800967c:	8962      	ldrh	r2, [r4, #10]
 800967e:	6961      	ldr	r1, [r4, #20]
 8009680:	4628      	mov	r0, r5
 8009682:	f7ff fe1a 	bl	80092ba <USB_WritePMA>
 8009686:	e6a2      	b.n	80093ce <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009688:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800968c:	fa15 f383 	uxtah	r3, r5, r3
 8009690:	7822      	ldrb	r2, [r4, #0]
 8009692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009696:	b2b2      	uxth	r2, r6
 8009698:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800969c:	e7ed      	b.n	800967a <USB_EPStartXfer+0x398>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800969e:	7821      	ldrb	r1, [r4, #0]
 80096a0:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 80096a4:	b292      	uxth	r2, r2
 80096a6:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80096aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80096ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80096b6:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80096ba:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80096be:	fa15 f282 	uxtah	r2, r5, r2
 80096c2:	7821      	ldrb	r1, [r4, #0]
 80096c4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096ce:	8922      	ldrh	r2, [r4, #8]
 80096d0:	6961      	ldr	r1, [r4, #20]
 80096d2:	4628      	mov	r0, r5
 80096d4:	f7ff fdf1 	bl	80092ba <USB_WritePMA>
 80096d8:	e679      	b.n	80093ce <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80096da:	b98e      	cbnz	r6, 8009700 <USB_EPStartXfer+0x41e>
 80096dc:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80096e0:	b292      	uxth	r2, r2
 80096e2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80096e6:	b292      	uxth	r2, r2
 80096e8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80096ec:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80096f0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80096f4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80096f8:	b292      	uxth	r2, r2
 80096fa:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80096fe:	e012      	b.n	8009726 <USB_EPStartXfer+0x444>
 8009700:	0872      	lsrs	r2, r6, #1
 8009702:	f016 0f01 	tst.w	r6, #1
 8009706:	d000      	beq.n	800970a <USB_EPStartXfer+0x428>
 8009708:	3201      	adds	r2, #1
 800970a:	0292      	lsls	r2, r2, #10
 800970c:	b292      	uxth	r2, r2
 800970e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009712:	e008      	b.n	8009726 <USB_EPStartXfer+0x444>
 8009714:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8009718:	fa15 f282 	uxtah	r2, r5, r2
 800971c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009720:	b2b2      	uxth	r2, r6
 8009722:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009726:	b2b3      	uxth	r3, r6
 8009728:	8962      	ldrh	r2, [r4, #10]
 800972a:	6961      	ldr	r1, [r4, #20]
 800972c:	4628      	mov	r0, r5
 800972e:	f7ff fdc4 	bl	80092ba <USB_WritePMA>
 8009732:	e64c      	b.n	80093ce <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009734:	bb8a      	cbnz	r2, 800979a <USB_EPStartXfer+0x4b8>
 8009736:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800973a:	fa15 f282 	uxtah	r2, r5, r2
 800973e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009742:	2e3e      	cmp	r6, #62	; 0x3e
 8009744:	d90c      	bls.n	8009760 <USB_EPStartXfer+0x47e>
 8009746:	0972      	lsrs	r2, r6, #5
 8009748:	f016 0f1f 	tst.w	r6, #31
 800974c:	d100      	bne.n	8009750 <USB_EPStartXfer+0x46e>
 800974e:	3a01      	subs	r2, #1
 8009750:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8009754:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009758:	b292      	uxth	r2, r2
 800975a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800975e:	e025      	b.n	80097ac <USB_EPStartXfer+0x4ca>
 8009760:	b98e      	cbnz	r6, 8009786 <USB_EPStartXfer+0x4a4>
 8009762:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8009766:	b292      	uxth	r2, r2
 8009768:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800976c:	b292      	uxth	r2, r2
 800976e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009772:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8009776:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800977a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800977e:	b292      	uxth	r2, r2
 8009780:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009784:	e012      	b.n	80097ac <USB_EPStartXfer+0x4ca>
 8009786:	0872      	lsrs	r2, r6, #1
 8009788:	f016 0f01 	tst.w	r6, #1
 800978c:	d000      	beq.n	8009790 <USB_EPStartXfer+0x4ae>
 800978e:	3201      	adds	r2, #1
 8009790:	0292      	lsls	r2, r2, #10
 8009792:	b292      	uxth	r2, r2
 8009794:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009798:	e008      	b.n	80097ac <USB_EPStartXfer+0x4ca>
 800979a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800979e:	fa15 f282 	uxtah	r2, r5, r2
 80097a2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80097a6:	b2b2      	uxth	r2, r6
 80097a8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097ac:	b2b3      	uxth	r3, r6
 80097ae:	8922      	ldrh	r2, [r4, #8]
 80097b0:	6961      	ldr	r1, [r4, #20]
 80097b2:	4628      	mov	r0, r5
 80097b4:	f7ff fd81 	bl	80092ba <USB_WritePMA>
 80097b8:	e609      	b.n	80093ce <USB_EPStartXfer+0xec>
        ep->xfer_len = 0U;
 80097ba:	2200      	movs	r2, #0
 80097bc:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 80097be:	461a      	mov	r2, r3
 80097c0:	e5a0      	b.n	8009304 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80097c2:	b98a      	cbnz	r2, 80097e8 <USB_EPStartXfer+0x506>
 80097c4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80097c8:	b292      	uxth	r2, r2
 80097ca:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80097ce:	b292      	uxth	r2, r2
 80097d0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80097d4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80097d8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80097dc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80097e0:	b292      	uxth	r2, r2
 80097e2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80097e6:	e5a3      	b.n	8009330 <USB_EPStartXfer+0x4e>
 80097e8:	0851      	lsrs	r1, r2, #1
 80097ea:	f012 0f01 	tst.w	r2, #1
 80097ee:	d000      	beq.n	80097f2 <USB_EPStartXfer+0x510>
 80097f0:	3101      	adds	r1, #1
 80097f2:	0289      	lsls	r1, r1, #10
 80097f4:	b289      	uxth	r1, r1
 80097f6:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 80097fa:	e599      	b.n	8009330 <USB_EPStartXfer+0x4e>
      if (ep->type == EP_TYPE_BULK)
 80097fc:	78cb      	ldrb	r3, [r1, #3]
 80097fe:	2b02      	cmp	r3, #2
 8009800:	d03b      	beq.n	800987a <USB_EPStartXfer+0x598>
      else if (ep->type == EP_TYPE_ISOC)
 8009802:	2b01      	cmp	r3, #1
 8009804:	f040 811b 	bne.w	8009a3e <USB_EPStartXfer+0x75c>
        if (ep->xfer_len > ep->maxpacket)
 8009808:	6989      	ldr	r1, [r1, #24]
 800980a:	6923      	ldr	r3, [r4, #16]
 800980c:	4299      	cmp	r1, r3
 800980e:	f240 80ca 	bls.w	80099a6 <USB_EPStartXfer+0x6c4>
          ep->xfer_len -= len;
 8009812:	1ac9      	subs	r1, r1, r3
 8009814:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009816:	b9aa      	cbnz	r2, 8009844 <USB_EPStartXfer+0x562>
 8009818:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800981c:	fa15 f282 	uxtah	r2, r5, r2
 8009820:	7821      	ldrb	r1, [r4, #0]
 8009822:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009826:	2b3e      	cmp	r3, #62	; 0x3e
 8009828:	f240 80c1 	bls.w	80099ae <USB_EPStartXfer+0x6cc>
 800982c:	0959      	lsrs	r1, r3, #5
 800982e:	f013 0f1f 	tst.w	r3, #31
 8009832:	d100      	bne.n	8009836 <USB_EPStartXfer+0x554>
 8009834:	3901      	subs	r1, #1
 8009836:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800983a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800983e:	b289      	uxth	r1, r1
 8009840:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8009844:	7862      	ldrb	r2, [r4, #1]
 8009846:	2a00      	cmp	r2, #0
 8009848:	f040 80eb 	bne.w	8009a22 <USB_EPStartXfer+0x740>
 800984c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8009850:	fa15 f282 	uxtah	r2, r5, r2
 8009854:	7821      	ldrb	r1, [r4, #0]
 8009856:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800985a:	2b3e      	cmp	r3, #62	; 0x3e
 800985c:	f240 80c4 	bls.w	80099e8 <USB_EPStartXfer+0x706>
 8009860:	0959      	lsrs	r1, r3, #5
 8009862:	f013 0f1f 	tst.w	r3, #31
 8009866:	d100      	bne.n	800986a <USB_EPStartXfer+0x588>
 8009868:	3901      	subs	r1, #1
 800986a:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 800986e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009872:	b29b      	uxth	r3, r3
 8009874:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8009878:	e55a      	b.n	8009330 <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800987a:	b9aa      	cbnz	r2, 80098a8 <USB_EPStartXfer+0x5c6>
 800987c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009880:	fa10 f383 	uxtah	r3, r0, r3
 8009884:	780a      	ldrb	r2, [r1, #0]
 8009886:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800988a:	6909      	ldr	r1, [r1, #16]
 800988c:	293e      	cmp	r1, #62	; 0x3e
 800988e:	d925      	bls.n	80098dc <USB_EPStartXfer+0x5fa>
 8009890:	094a      	lsrs	r2, r1, #5
 8009892:	f011 0f1f 	tst.w	r1, #31
 8009896:	d100      	bne.n	800989a <USB_EPStartXfer+0x5b8>
 8009898:	3a01      	subs	r2, #1
 800989a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800989e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80098a2:	b292      	uxth	r2, r2
 80098a4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80098a8:	7863      	ldrb	r3, [r4, #1]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d150      	bne.n	8009950 <USB_EPStartXfer+0x66e>
 80098ae:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80098b2:	fa15 f383 	uxtah	r3, r5, r3
 80098b6:	7822      	ldrb	r2, [r4, #0]
 80098b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098bc:	6921      	ldr	r1, [r4, #16]
 80098be:	293e      	cmp	r1, #62	; 0x3e
 80098c0:	d929      	bls.n	8009916 <USB_EPStartXfer+0x634>
 80098c2:	094a      	lsrs	r2, r1, #5
 80098c4:	f011 0f1f 	tst.w	r1, #31
 80098c8:	d100      	bne.n	80098cc <USB_EPStartXfer+0x5ea>
 80098ca:	3a01      	subs	r2, #1
 80098cc:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80098d0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80098d4:	b292      	uxth	r2, r2
 80098d6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80098da:	e03b      	b.n	8009954 <USB_EPStartXfer+0x672>
 80098dc:	b989      	cbnz	r1, 8009902 <USB_EPStartXfer+0x620>
 80098de:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80098e2:	b292      	uxth	r2, r2
 80098e4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80098e8:	b292      	uxth	r2, r2
 80098ea:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80098ee:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80098f2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80098f6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80098fa:	b292      	uxth	r2, r2
 80098fc:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009900:	e7d2      	b.n	80098a8 <USB_EPStartXfer+0x5c6>
 8009902:	084a      	lsrs	r2, r1, #1
 8009904:	f011 0f01 	tst.w	r1, #1
 8009908:	d000      	beq.n	800990c <USB_EPStartXfer+0x62a>
 800990a:	3201      	adds	r2, #1
 800990c:	0292      	lsls	r2, r2, #10
 800990e:	b292      	uxth	r2, r2
 8009910:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009914:	e7c8      	b.n	80098a8 <USB_EPStartXfer+0x5c6>
 8009916:	b989      	cbnz	r1, 800993c <USB_EPStartXfer+0x65a>
 8009918:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800991c:	b292      	uxth	r2, r2
 800991e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009922:	b292      	uxth	r2, r2
 8009924:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009928:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800992c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009930:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009934:	b292      	uxth	r2, r2
 8009936:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800993a:	e00b      	b.n	8009954 <USB_EPStartXfer+0x672>
 800993c:	084a      	lsrs	r2, r1, #1
 800993e:	f011 0f01 	tst.w	r1, #1
 8009942:	d000      	beq.n	8009946 <USB_EPStartXfer+0x664>
 8009944:	3201      	adds	r2, #1
 8009946:	0292      	lsls	r2, r2, #10
 8009948:	b292      	uxth	r2, r2
 800994a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800994e:	e001      	b.n	8009954 <USB_EPStartXfer+0x672>
 8009950:	2b01      	cmp	r3, #1
 8009952:	d01d      	beq.n	8009990 <USB_EPStartXfer+0x6ae>
        if (ep->xfer_count != 0U)
 8009954:	69e3      	ldr	r3, [r4, #28]
 8009956:	2b00      	cmp	r3, #0
 8009958:	f43f acea 	beq.w	8009330 <USB_EPStartXfer+0x4e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800995c:	7822      	ldrb	r2, [r4, #0]
 800995e:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009962:	f244 0340 	movw	r3, #16448	; 0x4040
 8009966:	ea03 0001 	and.w	r0, r3, r1
 800996a:	438b      	bics	r3, r1
 800996c:	d002      	beq.n	8009974 <USB_EPStartXfer+0x692>
 800996e:	2800      	cmp	r0, #0
 8009970:	f47f acde 	bne.w	8009330 <USB_EPStartXfer+0x4e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009974:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8009978:	b29b      	uxth	r3, r3
 800997a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800997e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009986:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800998a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800998e:	e4cf      	b.n	8009330 <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009990:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8009994:	fa15 f383 	uxtah	r3, r5, r3
 8009998:	7822      	ldrb	r2, [r4, #0]
 800999a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800999e:	8a22      	ldrh	r2, [r4, #16]
 80099a0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80099a4:	e7d6      	b.n	8009954 <USB_EPStartXfer+0x672>
          ep->xfer_len = 0U;
 80099a6:	2300      	movs	r3, #0
 80099a8:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 80099aa:	460b      	mov	r3, r1
 80099ac:	e733      	b.n	8009816 <USB_EPStartXfer+0x534>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80099ae:	b98b      	cbnz	r3, 80099d4 <USB_EPStartXfer+0x6f2>
 80099b0:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80099b4:	b289      	uxth	r1, r1
 80099b6:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80099ba:	b289      	uxth	r1, r1
 80099bc:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80099c0:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80099c4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80099c8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80099cc:	b289      	uxth	r1, r1
 80099ce:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80099d2:	e737      	b.n	8009844 <USB_EPStartXfer+0x562>
 80099d4:	0859      	lsrs	r1, r3, #1
 80099d6:	f013 0f01 	tst.w	r3, #1
 80099da:	d000      	beq.n	80099de <USB_EPStartXfer+0x6fc>
 80099dc:	3101      	adds	r1, #1
 80099de:	0289      	lsls	r1, r1, #10
 80099e0:	b289      	uxth	r1, r1
 80099e2:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80099e6:	e72d      	b.n	8009844 <USB_EPStartXfer+0x562>
 80099e8:	b98b      	cbnz	r3, 8009a0e <USB_EPStartXfer+0x72c>
 80099ea:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 80099fa:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 80099fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8009a0c:	e490      	b.n	8009330 <USB_EPStartXfer+0x4e>
 8009a0e:	0859      	lsrs	r1, r3, #1
 8009a10:	f013 0f01 	tst.w	r3, #1
 8009a14:	d000      	beq.n	8009a18 <USB_EPStartXfer+0x736>
 8009a16:	3101      	adds	r1, #1
 8009a18:	028b      	lsls	r3, r1, #10
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8009a20:	e486      	b.n	8009330 <USB_EPStartXfer+0x4e>
 8009a22:	2a01      	cmp	r2, #1
 8009a24:	f47f ac84 	bne.w	8009330 <USB_EPStartXfer+0x4e>
 8009a28:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8009a2c:	fa15 f282 	uxtah	r2, r5, r2
 8009a30:	7821      	ldrb	r1, [r4, #0]
 8009a32:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8009a3c:	e478      	b.n	8009330 <USB_EPStartXfer+0x4e>
        return HAL_ERROR;
 8009a3e:	2001      	movs	r0, #1
 8009a40:	e487      	b.n	8009352 <USB_EPStartXfer+0x70>

08009a42 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009a42:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009a44:	085c      	lsrs	r4, r3, #1
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009a46:	4410      	add	r0, r2
 8009a48:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8009a4c:	e007      	b.n	8009a5e <USB_ReadPMA+0x1c>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009a4e:	f830 2b02 	ldrh.w	r2, [r0], #2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009a52:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009a54:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8009a58:	704a      	strb	r2, [r1, #1]
    pBuf++;
 8009a5a:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8009a5c:	3c01      	subs	r4, #1
 8009a5e:	2c00      	cmp	r4, #0
 8009a60:	d1f5      	bne.n	8009a4e <USB_ReadPMA+0xc>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009a62:	f013 0f01 	tst.w	r3, #1
 8009a66:	d001      	beq.n	8009a6c <USB_ReadPMA+0x2a>
  {
    temp = *pdwVal;
 8009a68:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009a6a:	700b      	strb	r3, [r1, #0]
  }
}
 8009a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a70:	4770      	bx	lr
	...

08009a74 <LCD_IO_Init>:
/*!
 * @brief Nizkonivojska inicializacija zaslona
 * @internal
 */
static void LCD_IO_Init()
{
 8009a74:	b538      	push	{r3, r4, r5, lr}
	LCD_RST_LOW();
 8009a76:	4c05      	ldr	r4, [pc, #20]	; (8009a8c <LCD_IO_Init+0x18>)
 8009a78:	2508      	movs	r5, #8
 8009a7a:	62a5      	str	r5, [r4, #40]	; 0x28
	HAL_Delay(120);
 8009a7c:	2078      	movs	r0, #120	; 0x78
 8009a7e:	f7f9 fd1b 	bl	80034b8 <HAL_Delay>
	LCD_RST_HIGH();
 8009a82:	61a5      	str	r5, [r4, #24]
	HAL_Delay(120);
 8009a84:	2078      	movs	r0, #120	; 0x78
 8009a86:	f7f9 fd17 	bl	80034b8 <HAL_Delay>
}
 8009a8a:	bd38      	pop	{r3, r4, r5, pc}
 8009a8c:	48000c00 	.word	0x48000c00

08009a90 <LCD_SetBacklight>:
 * @param state logična vrednost
 */

void LCD_SetBacklight(uint8_t state)
{
	if (state == 1)
 8009a90:	2801      	cmp	r0, #1
 8009a92:	d003      	beq.n	8009a9c <LCD_SetBacklight+0xc>
		LCD_BCKL_ON();
	else
		LCD_BCKL_OFF();
 8009a94:	4b03      	ldr	r3, [pc, #12]	; (8009aa4 <LCD_SetBacklight+0x14>)
 8009a96:	2240      	movs	r2, #64	; 0x40
 8009a98:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009a9a:	4770      	bx	lr
		LCD_BCKL_ON();
 8009a9c:	4b01      	ldr	r3, [pc, #4]	; (8009aa4 <LCD_SetBacklight+0x14>)
 8009a9e:	2240      	movs	r2, #64	; 0x40
 8009aa0:	619a      	str	r2, [r3, #24]
 8009aa2:	4770      	bx	lr
 8009aa4:	48000400 	.word	0x48000400

08009aa8 <LCD_FillRect>:
 *
 * Funkcija izbere želeno območje, potem pa tolikokrat pošlje izbrano barvo,
 * kolikor slikovnih točk je potrebnih.
 */
void LCD_FillRect(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint16_t c)
{
 8009aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aac:	4607      	mov	r7, r0
 8009aae:	4688      	mov	r8, r1
 8009ab0:	4615      	mov	r5, r2
 8009ab2:	461e      	mov	r6, r3
	uint32_t max_count   = ILI9341_GetParam(LCD_AREA);     /* Št. vseh pikslov     */
 8009ab4:	2002      	movs	r0, #2
 8009ab6:	f000 f967 	bl	8009d88 <ILI9341_GetParam>
 8009aba:	4604      	mov	r4, r0
	uint32_t pixel_count = w*h;  /* Dejansko št. pikslov */
 8009abc:	fb06 f305 	mul.w	r3, r6, r5

	if(pixel_count > max_count)
 8009ac0:	4298      	cmp	r0, r3
 8009ac2:	d300      	bcc.n	8009ac6 <LCD_FillRect+0x1e>
	uint32_t pixel_count = w*h;  /* Dejansko št. pikslov */
 8009ac4:	461c      	mov	r4, r3
		pixel_count = max_count;

	// Izbor koordinat piksla
	ILI9341_SetDisplayWindow(x, y, w, h);
 8009ac6:	4633      	mov	r3, r6
 8009ac8:	462a      	mov	r2, r5
 8009aca:	4641      	mov	r1, r8
 8009acc:	4638      	mov	r0, r7
 8009ace:	f000 f87d 	bl	8009bcc <ILI9341_SetDisplayWindow>

#ifdef ILI9341_USEDMA
	ILI9341_SendRepeatedDataDMA(c, pixel_count);
 8009ad2:	4621      	mov	r1, r4
 8009ad4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8009ad8:	f000 f910 	bl	8009cfc <ILI9341_SendRepeatedDataDMA>
#else
	ILI9341_SendRepeatedData(c, pixel_count);
#endif

}
 8009adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009ae0 <LCD_ClearScreen>:

/*!
 * @brief Počisti zaslon (prebarvaj s črno barvo)
 */
void LCD_ClearScreen()
{
 8009ae0:	b510      	push	{r4, lr}
 8009ae2:	b082      	sub	sp, #8
    LCD_FillRect(0, 0, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT), 0);
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	f000 f94f 	bl	8009d88 <ILI9341_GetParam>
 8009aea:	4604      	mov	r4, r0
 8009aec:	2001      	movs	r0, #1
 8009aee:	f000 f94b 	bl	8009d88 <ILI9341_GetParam>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2000      	movs	r0, #0
 8009af6:	9000      	str	r0, [sp, #0]
 8009af8:	4622      	mov	r2, r4
 8009afa:	4601      	mov	r1, r0
 8009afc:	f7ff ffd4 	bl	8009aa8 <LCD_FillRect>
}
 8009b00:	b002      	add	sp, #8
 8009b02:	bd10      	pop	{r4, pc}

08009b04 <LCD_Init>:
{
 8009b04:	b508      	push	{r3, lr}
	LCD_IO_Init();
 8009b06:	f7ff ffb5 	bl	8009a74 <LCD_IO_Init>
	ILI9341_Init(ILI9341_COLORSPACE_RBG565, ILI9341_MISKO_ROTATE_0);
 8009b0a:	2103      	movs	r1, #3
 8009b0c:	2055      	movs	r0, #85	; 0x55
 8009b0e:	f000 f8ab 	bl	8009c68 <ILI9341_Init>
	ILI9341_DisplayOn();
 8009b12:	f000 f92d 	bl	8009d70 <ILI9341_DisplayOn>
	LCD_ClearScreen();
 8009b16:	f7ff ffe3 	bl	8009ae0 <LCD_ClearScreen>
	ILI9341_WaitTransfer();
 8009b1a:	f000 f815 	bl	8009b48 <ILI9341_WaitTransfer>
	LCD_SetBacklight(1);
 8009b1e:	2001      	movs	r0, #1
 8009b20:	f7ff ffb6 	bl	8009a90 <LCD_SetBacklight>
}
 8009b24:	bd08      	pop	{r3, pc}
	...

08009b28 <ILI9341_SendData>:
 */
void ILI9341_SendData(LCD_IO_Data_t *data, uint32_t length)
{
	uint8_t increment = LCD_IO_DATA_WRITE_CYCLES;

	for (uint32_t i = 0; i < (length/increment); i += increment)
 8009b28:	2300      	movs	r3, #0
 8009b2a:	e007      	b.n	8009b3c <ILI9341_SendData+0x14>
		FMC_BANK1_WriteData(data[i]);
 8009b2c:	f830 c013 	ldrh.w	ip, [r0, r3, lsl #1]
	*(LCD_IO_Data_t *)(FMC_BANK1_MEM) = data;
 8009b30:	4a04      	ldr	r2, [pc, #16]	; (8009b44 <ILI9341_SendData+0x1c>)
 8009b32:	f8a2 c000 	strh.w	ip, [r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009b36:	f3bf 8f4f 	dsb	sy
	for (uint32_t i = 0; i < (length/increment); i += increment)
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	428b      	cmp	r3, r1
 8009b3e:	d3f5      	bcc.n	8009b2c <ILI9341_SendData+0x4>
}
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	60010000 	.word	0x60010000

08009b48 <ILI9341_WaitTransfer>:
#endif
}

//! @brief Počakaj na prenos podatka FSMC->Ili9341.
void ILI9341_WaitTransfer()
{
 8009b48:	b508      	push	{r3, lr}
#ifdef ILI9341_USEDMA
	while (HAL_DMA_GetState(&hLCDDMA) != HAL_DMA_STATE_READY);
 8009b4a:	4803      	ldr	r0, [pc, #12]	; (8009b58 <ILI9341_WaitTransfer+0x10>)
 8009b4c:	f7fa fee5 	bl	800491a <HAL_DMA_GetState>
 8009b50:	2801      	cmp	r0, #1
 8009b52:	d1fa      	bne.n	8009b4a <ILI9341_WaitTransfer+0x2>
#endif
}
 8009b54:	bd08      	pop	{r3, pc}
 8009b56:	bf00      	nop
 8009b58:	20000690 	.word	0x20000690

08009b5c <ILI9341_SetAddress>:
{
 8009b5c:	b510      	push	{r4, lr}
 8009b5e:	4604      	mov	r4, r0
	ILI9341_WaitTransfer();
 8009b60:	f7ff fff2 	bl	8009b48 <ILI9341_WaitTransfer>
	FMC_BANK1_SetAddress(*address);
 8009b64:	8822      	ldrh	r2, [r4, #0]
	*(LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 8009b66:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8009b6a:	801a      	strh	r2, [r3, #0]
 8009b6c:	f3bf 8f4f 	dsb	sy
}
 8009b70:	bd10      	pop	{r4, pc}
	...

08009b74 <ILI9341_SetOrientation>:
{
 8009b74:	b510      	push	{r4, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	4604      	mov	r4, r0
	ILI9341_Data_t command   = ILI9341_MAC; /* Memory Access Control */
 8009b7a:	2336      	movs	r3, #54	; 0x36
 8009b7c:	f8ad 3006 	strh.w	r3, [sp, #6]
	ILI9341_Data_t parameter = (ILI9341_Data_t)orientations[orientation];
 8009b80:	4b10      	ldr	r3, [pc, #64]	; (8009bc4 <ILI9341_SetOrientation+0x50>)
 8009b82:	f833 3020 	ldrh.w	r3, [r3, r0, lsl #2]
 8009b86:	f8ad 3004 	strh.w	r3, [sp, #4]
	ILI9341_SetAddress(&command);
 8009b8a:	f10d 0006 	add.w	r0, sp, #6
 8009b8e:	f7ff ffe5 	bl	8009b5c <ILI9341_SetAddress>
	ILI9341_SendData(&parameter, 1);
 8009b92:	2101      	movs	r1, #1
 8009b94:	a801      	add	r0, sp, #4
 8009b96:	f7ff ffc7 	bl	8009b28 <ILI9341_SendData>
	switch (orientation) {
 8009b9a:	b144      	cbz	r4, 8009bae <ILI9341_SetOrientation+0x3a>
 8009b9c:	2c03      	cmp	r4, #3
 8009b9e:	d006      	beq.n	8009bae <ILI9341_SetOrientation+0x3a>
		LCD.width  = ILI9341_WIDTH;
 8009ba0:	4b09      	ldr	r3, [pc, #36]	; (8009bc8 <ILI9341_SetOrientation+0x54>)
 8009ba2:	22f0      	movs	r2, #240	; 0xf0
 8009ba4:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_HEIGHT;
 8009ba6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009baa:	605a      	str	r2, [r3, #4]
		break;
 8009bac:	e005      	b.n	8009bba <ILI9341_SetOrientation+0x46>
		LCD.width  = ILI9341_HEIGHT;
 8009bae:	4b06      	ldr	r3, [pc, #24]	; (8009bc8 <ILI9341_SetOrientation+0x54>)
 8009bb0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009bb4:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_WIDTH;
 8009bb6:	22f0      	movs	r2, #240	; 0xf0
 8009bb8:	605a      	str	r2, [r3, #4]
	LCD.orientation = orientation;
 8009bba:	4b03      	ldr	r3, [pc, #12]	; (8009bc8 <ILI9341_SetOrientation+0x54>)
 8009bbc:	609c      	str	r4, [r3, #8]
}
 8009bbe:	b002      	add	sp, #8
 8009bc0:	bd10      	pop	{r4, pc}
 8009bc2:	bf00      	nop
 8009bc4:	0800fb40 	.word	0x0800fb40
 8009bc8:	20000d38 	.word	0x20000d38

08009bcc <ILI9341_SetDisplayWindow>:
{
 8009bcc:	b530      	push	{r4, r5, lr}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	460c      	mov	r4, r1
 8009bd2:	461d      	mov	r5, r3
	command = ILI9341_CASET;
 8009bd4:	232a      	movs	r3, #42	; 0x2a
 8009bd6:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = (ILI9341_Data_t)(Xpos >> 8U);
 8009bda:	f3c0 230f 	ubfx	r3, r0, #8, #16
 8009bde:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter[1] = (ILI9341_Data_t)(Xpos & 0xFFU);
 8009be2:	b2c3      	uxtb	r3, r0
 8009be4:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter[2] = (ILI9341_Data_t)((Xpos + Width - 1U) >> 8U);
 8009be8:	1883      	adds	r3, r0, r2
 8009bea:	3b01      	subs	r3, #1
 8009bec:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8009bf0:	f8ad 3008 	strh.w	r3, [sp, #8]
	parameter[3] = (ILI9341_Data_t)((Xpos + Width - 1U) & 0xFFU);
 8009bf4:	fa12 f080 	uxtah	r0, r2, r0
 8009bf8:	b280      	uxth	r0, r0
 8009bfa:	3801      	subs	r0, #1
 8009bfc:	b2c0      	uxtb	r0, r0
 8009bfe:	f8ad 000a 	strh.w	r0, [sp, #10]
	ILI9341_SetAddress(&command);
 8009c02:	f10d 000e 	add.w	r0, sp, #14
 8009c06:	f7ff ffa9 	bl	8009b5c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 8009c0a:	2104      	movs	r1, #4
 8009c0c:	eb0d 0001 	add.w	r0, sp, r1
 8009c10:	f7ff ff8a 	bl	8009b28 <ILI9341_SendData>
	command = ILI9341_RASET;
 8009c14:	232b      	movs	r3, #43	; 0x2b
 8009c16:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter [0] = (ILI9341_Data_t)(Ypos >> 8U);
 8009c1a:	f3c4 230f 	ubfx	r3, r4, #8, #16
 8009c1e:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter [1] = (ILI9341_Data_t)(Ypos & 0xFFU);
 8009c22:	b2e3      	uxtb	r3, r4
 8009c24:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter [2] = (ILI9341_Data_t)((Ypos + Height - 1U) >> 8U);
 8009c28:	1962      	adds	r2, r4, r5
 8009c2a:	3a01      	subs	r2, #1
 8009c2c:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8009c30:	f8ad 2008 	strh.w	r2, [sp, #8]
	parameter [3] = (ILI9341_Data_t)((Ypos + Height - 1U) & 0xFFU);
 8009c34:	fa15 f484 	uxtah	r4, r5, r4
 8009c38:	b2a4      	uxth	r4, r4
 8009c3a:	3c01      	subs	r4, #1
 8009c3c:	b2e4      	uxtb	r4, r4
 8009c3e:	f8ad 400a 	strh.w	r4, [sp, #10]
	ILI9341_SetAddress(&command);
 8009c42:	f10d 000e 	add.w	r0, sp, #14
 8009c46:	f7ff ff89 	bl	8009b5c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 8009c4a:	2104      	movs	r1, #4
 8009c4c:	eb0d 0001 	add.w	r0, sp, r1
 8009c50:	f7ff ff6a 	bl	8009b28 <ILI9341_SendData>
	command = ILI9341_GRAM;
 8009c54:	232c      	movs	r3, #44	; 0x2c
 8009c56:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 8009c5a:	f10d 000e 	add.w	r0, sp, #14
 8009c5e:	f7ff ff7d 	bl	8009b5c <ILI9341_SetAddress>
}
 8009c62:	b005      	add	sp, #20
 8009c64:	bd30      	pop	{r4, r5, pc}
	...

08009c68 <ILI9341_Init>:
{
 8009c68:	b510      	push	{r4, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	4604      	mov	r4, r0
	ILI9341_SetOrientation(orientation);
 8009c6e:	4608      	mov	r0, r1
 8009c70:	f7ff ff80 	bl	8009b74 <ILI9341_SetOrientation>
	ILI9341_SetDisplayWindow(0U, 0U, LCD.width, LCD.height);
 8009c74:	4a20      	ldr	r2, [pc, #128]	; (8009cf8 <ILI9341_Init+0x90>)
 8009c76:	6853      	ldr	r3, [r2, #4]
 8009c78:	6812      	ldr	r2, [r2, #0]
 8009c7a:	2100      	movs	r1, #0
 8009c7c:	4608      	mov	r0, r1
 8009c7e:	f7ff ffa5 	bl	8009bcc <ILI9341_SetDisplayWindow>
	command = ILI9341_SLEEP_OUT;
 8009c82:	2311      	movs	r3, #17
 8009c84:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 8009c88:	f10d 000e 	add.w	r0, sp, #14
 8009c8c:	f7ff ff66 	bl	8009b5c <ILI9341_SetAddress>
	HAL_Delay(200);
 8009c90:	20c8      	movs	r0, #200	; 0xc8
 8009c92:	f7f9 fc11 	bl	80034b8 <HAL_Delay>
	command = ILI9341_NORMAL_MODE_ON;
 8009c96:	2313      	movs	r3, #19
 8009c98:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 8009c9c:	f10d 000e 	add.w	r0, sp, #14
 8009ca0:	f7ff ff5c 	bl	8009b5c <ILI9341_SetAddress>
	HAL_Delay(100);
 8009ca4:	2064      	movs	r0, #100	; 0x64
 8009ca6:	f7f9 fc07 	bl	80034b8 <HAL_Delay>
	command = ILI9341_PIXEL_FORMAT;
 8009caa:	233a      	movs	r3, #58	; 0x3a
 8009cac:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = color_space;
 8009cb0:	f8ad 4004 	strh.w	r4, [sp, #4]
	ILI9341_SetAddress(&command);
 8009cb4:	f10d 000e 	add.w	r0, sp, #14
 8009cb8:	f7ff ff50 	bl	8009b5c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 1);
 8009cbc:	2101      	movs	r1, #1
 8009cbe:	a801      	add	r0, sp, #4
 8009cc0:	f7ff ff32 	bl	8009b28 <ILI9341_SendData>
	HAL_Delay(100);
 8009cc4:	2064      	movs	r0, #100	; 0x64
 8009cc6:	f7f9 fbf7 	bl	80034b8 <HAL_Delay>
	command = ILI9341_INTERFACE;
 8009cca:	23f6      	movs	r3, #246	; 0xf6
 8009ccc:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = 0x49;
 8009cd0:	2349      	movs	r3, #73	; 0x49
 8009cd2:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter[1] = 0;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter[2] = 0x20;
 8009cdc:	2320      	movs	r3, #32
 8009cde:	f8ad 3008 	strh.w	r3, [sp, #8]
	ILI9341_SetAddress(&command);
 8009ce2:	f10d 000e 	add.w	r0, sp, #14
 8009ce6:	f7ff ff39 	bl	8009b5c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 3);
 8009cea:	2103      	movs	r1, #3
 8009cec:	a801      	add	r0, sp, #4
 8009cee:	f7ff ff1b 	bl	8009b28 <ILI9341_SendData>
}
 8009cf2:	b004      	add	sp, #16
 8009cf4:	bd10      	pop	{r4, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20000d38 	.word	0x20000d38

08009cfc <ILI9341_SendRepeatedDataDMA>:
{
 8009cfc:	b530      	push	{r4, r5, lr}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	460c      	mov	r4, r1
 8009d02:	f8ad 0006 	strh.w	r0, [sp, #6]
	switch (hLCDDMA.Init.PeriphDataAlignment)
 8009d06:	4b18      	ldr	r3, [pc, #96]	; (8009d68 <ILI9341_SendRepeatedDataDMA+0x6c>)
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	b17b      	cbz	r3, 8009d2c <ILI9341_SendRepeatedDataDMA+0x30>
 8009d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d10:	d100      	bne.n	8009d14 <ILI9341_SendRepeatedDataDMA+0x18>
			len = (num_copies / (2*LCD_IO_DATA_WRITE_CYCLES));
 8009d12:	084c      	lsrs	r4, r1, #1
	ILI9341_WaitTransfer();
 8009d14:	f7ff ff18 	bl	8009b48 <ILI9341_WaitTransfer>
	HAL_DMA_DeInit(&hLCDDMA);
 8009d18:	4d13      	ldr	r5, [pc, #76]	; (8009d68 <ILI9341_SendRepeatedDataDMA+0x6c>)
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	f7fa fcb6 	bl	800468c <HAL_DMA_DeInit>
	hLCDDMA.Init.PeriphInc = DMA_PINC_DISABLE;	// dont increment source address
 8009d20:	2300      	movs	r3, #0
 8009d22:	60eb      	str	r3, [r5, #12]
	HAL_DMA_Init(&hLCDDMA);
 8009d24:	4628      	mov	r0, r5
 8009d26:	f7fa fc45 	bl	80045b4 <HAL_DMA_Init>
 8009d2a:	e00e      	b.n	8009d4a <ILI9341_SendRepeatedDataDMA+0x4e>
			len = 2*num_copies/LCD_IO_DATA_WRITE_CYCLES;
 8009d2c:	004c      	lsls	r4, r1, #1
			break;
 8009d2e:	e7f1      	b.n	8009d14 <ILI9341_SendRepeatedDataDMA+0x18>
			len -= 65535;
 8009d30:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
 8009d34:	3cff      	subs	r4, #255	; 0xff
			transfer = 65535;
 8009d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t) &data, (uint32_t)FMC_BANK1_MEM, transfer) != HAL_OK) return 1;
 8009d3a:	4a0c      	ldr	r2, [pc, #48]	; (8009d6c <ILI9341_SendRepeatedDataDMA+0x70>)
 8009d3c:	f10d 0106 	add.w	r1, sp, #6
 8009d40:	4809      	ldr	r0, [pc, #36]	; (8009d68 <ILI9341_SendRepeatedDataDMA+0x6c>)
 8009d42:	f7fa fcff 	bl	8004744 <HAL_DMA_Start_IT>
 8009d46:	b960      	cbnz	r0, 8009d62 <ILI9341_SendRepeatedDataDMA+0x66>
	while (len);
 8009d48:	b134      	cbz	r4, 8009d58 <ILI9341_SendRepeatedDataDMA+0x5c>
		ILI9341_WaitTransfer();
 8009d4a:	f7ff fefd 	bl	8009b48 <ILI9341_WaitTransfer>
		if (len > 65535)
 8009d4e:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8009d52:	d2ed      	bcs.n	8009d30 <ILI9341_SendRepeatedDataDMA+0x34>
		if (transfer == 0) return 1;
 8009d54:	b914      	cbnz	r4, 8009d5c <ILI9341_SendRepeatedDataDMA+0x60>
 8009d56:	2001      	movs	r0, #1
}
 8009d58:	b003      	add	sp, #12
 8009d5a:	bd30      	pop	{r4, r5, pc}
			transfer = len;
 8009d5c:	4623      	mov	r3, r4
			len = 0;
 8009d5e:	2400      	movs	r4, #0
 8009d60:	e7eb      	b.n	8009d3a <ILI9341_SendRepeatedDataDMA+0x3e>
		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t) &data, (uint32_t)FMC_BANK1_MEM, transfer) != HAL_OK) return 1;
 8009d62:	2001      	movs	r0, #1
 8009d64:	e7f8      	b.n	8009d58 <ILI9341_SendRepeatedDataDMA+0x5c>
 8009d66:	bf00      	nop
 8009d68:	20000690 	.word	0x20000690
 8009d6c:	60010000 	.word	0x60010000

08009d70 <ILI9341_DisplayOn>:

//! @brief Strojno omogoči zaslon
void ILI9341_DisplayOn()
{
 8009d70:	b500      	push	{lr}
 8009d72:	b083      	sub	sp, #12
	ILI9341_Data_t command = ILI9341_DISPLAY_ON;
 8009d74:	2329      	movs	r3, #41	; 0x29
 8009d76:	f8ad 3006 	strh.w	r3, [sp, #6]
	ILI9341_SetAddress(&command);
 8009d7a:	f10d 0006 	add.w	r0, sp, #6
 8009d7e:	f7ff feed 	bl	8009b5c <ILI9341_SetAddress>
}
 8009d82:	b003      	add	sp, #12
 8009d84:	f85d fb04 	ldr.w	pc, [sp], #4

08009d88 <ILI9341_GetParam>:
 */
uint32_t ILI9341_GetParam(LCD_Param_t param)
{
	uint32_t value = 0;

	switch (param) {
 8009d88:	2803      	cmp	r0, #3
 8009d8a:	d803      	bhi.n	8009d94 <ILI9341_GetParam+0xc>
 8009d8c:	e8df f000 	tbb	[pc, r0]
 8009d90:	0a0d0704 	.word	0x0a0d0704
 8009d94:	2000      	movs	r0, #0
 8009d96:	4770      	bx	lr
	case LCD_WIDTH:
		value = LCD.width;
 8009d98:	4b05      	ldr	r3, [pc, #20]	; (8009db0 <ILI9341_GetParam+0x28>)
 8009d9a:	6818      	ldr	r0, [r3, #0]
		break;
 8009d9c:	4770      	bx	lr
	case LCD_HEIGHT:
		value = LCD.height;
 8009d9e:	4b04      	ldr	r3, [pc, #16]	; (8009db0 <ILI9341_GetParam+0x28>)
 8009da0:	6858      	ldr	r0, [r3, #4]
		break;
 8009da2:	4770      	bx	lr
	case LCD_AREA:
		value = ILI9341_AREA;
		break;
	case LCD_ORIENTATION:
		value = LCD.orientation;
 8009da4:	4b02      	ldr	r3, [pc, #8]	; (8009db0 <ILI9341_GetParam+0x28>)
 8009da6:	6898      	ldr	r0, [r3, #8]
		break;
 8009da8:	4770      	bx	lr
		value = ILI9341_AREA;
 8009daa:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
	default:
		break;
	}

	return value;
}
 8009dae:	4770      	bx	lr
 8009db0:	20000d38 	.word	0x20000d38

08009db4 <UserPixelSetFunction>:


#include "lcd_ugui.h"

void UserPixelSetFunction(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 8009db4:	b500      	push	{lr}
 8009db6:	b083      	sub	sp, #12
 8009db8:	f8ad 2006 	strh.w	r2, [sp, #6]
	ILI9341_SetDisplayWindow(x, y, 1, 1);
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	f7ff ff04 	bl	8009bcc <ILI9341_SetDisplayWindow>
	ILI9341_SendData((LCD_IO_Data_t *)&c, 1);
 8009dc4:	2101      	movs	r1, #1
 8009dc6:	f10d 0006 	add.w	r0, sp, #6
 8009dca:	f7ff fead 	bl	8009b28 <ILI9341_SendData>
}
 8009dce:	b003      	add	sp, #12
 8009dd0:	f85d fb04 	ldr.w	pc, [sp], #4

08009dd4 <_HW_FillFrame_>:

UG_RESULT _HW_FillFrame_(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 8009dd4:	b510      	push	{r4, lr}
 8009dd6:	b082      	sub	sp, #8
	LCD_FillRect(x1, y1, x2-x1, y2-y1, c);
 8009dd8:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8009ddc:	9400      	str	r4, [sp, #0]
 8009dde:	1a5b      	subs	r3, r3, r1
 8009de0:	1a12      	subs	r2, r2, r0
 8009de2:	f7ff fe61 	bl	8009aa8 <LCD_FillRect>
	return UG_RESULT_OK;
}
 8009de6:	2000      	movs	r0, #0
 8009de8:	b002      	add	sp, #8
 8009dea:	bd10      	pop	{r4, pc}

08009dec <LCD_UG_init>:


UG_GUI gui;

UG_S16 LCD_UG_init(void)
{
 8009dec:	b510      	push	{r4, lr}
	UG_Init(&gui, UserPixelSetFunction, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT));
 8009dee:	2000      	movs	r0, #0
 8009df0:	f7ff ffca 	bl	8009d88 <ILI9341_GetParam>
 8009df4:	4604      	mov	r4, r0
 8009df6:	2001      	movs	r0, #1
 8009df8:	f7ff ffc6 	bl	8009d88 <ILI9341_GetParam>
 8009dfc:	b203      	sxth	r3, r0
 8009dfe:	b222      	sxth	r2, r4
 8009e00:	490b      	ldr	r1, [pc, #44]	; (8009e30 <LCD_UG_init+0x44>)
 8009e02:	480c      	ldr	r0, [pc, #48]	; (8009e34 <LCD_UG_init+0x48>)
 8009e04:	f000 f81c 	bl	8009e40 <UG_Init>
	UG_DriverRegister(DRIVER_FILL_FRAME, (void *)_HW_FillFrame_);
 8009e08:	490b      	ldr	r1, [pc, #44]	; (8009e38 <LCD_UG_init+0x4c>)
 8009e0a:	2001      	movs	r0, #1
 8009e0c:	f000 f882 	bl	8009f14 <UG_DriverRegister>
	UG_DriverEnable(DRIVER_FILL_FRAME);
 8009e10:	2001      	movs	r0, #1
 8009e12:	f000 f88d 	bl	8009f30 <UG_DriverEnable>

	UG_FontSelect(&FONT_8X12);
 8009e16:	4809      	ldr	r0, [pc, #36]	; (8009e3c <LCD_UG_init+0x50>)
 8009e18:	f000 f852 	bl	8009ec0 <UG_FontSelect>
	UG_SetForecolor(C_WHITE);
 8009e1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009e20:	f000 f868 	bl	8009ef4 <UG_SetForecolor>
	UG_SetBackcolor(C_BLACK);
 8009e24:	2000      	movs	r0, #0
 8009e26:	f000 f86d 	bl	8009f04 <UG_SetBackcolor>
	return 0;
}
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	bd10      	pop	{r4, pc}
 8009e2e:	bf00      	nop
 8009e30:	08009db5 	.word	0x08009db5
 8009e34:	20000d44 	.word	0x20000d44
 8009e38:	08009dd5 	.word	0x08009dd5
 8009e3c:	0800fb50 	.word	0x0800fb50

08009e40 <UG_Init>:

UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 8009e40:	6001      	str	r1, [r0, #0]
   g->x_dim = x;
 8009e42:	8082      	strh	r2, [r0, #4]
   g->y_dim = y;
 8009e44:	80c3      	strh	r3, [r0, #6]
   g->console.x_start = 4;
 8009e46:	2104      	movs	r1, #4
 8009e48:	8401      	strh	r1, [r0, #32]
   g->console.y_start = 4;
 8009e4a:	8441      	strh	r1, [r0, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 8009e4c:	b292      	uxth	r2, r2
 8009e4e:	3a04      	subs	r2, #4
 8009e50:	b292      	uxth	r2, r2
 8009e52:	3a01      	subs	r2, #1
 8009e54:	b212      	sxth	r2, r2
 8009e56:	8482      	strh	r2, [r0, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	3b04      	subs	r3, #4
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	b21b      	sxth	r3, r3
 8009e62:	84c3      	strh	r3, [r0, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 8009e64:	8382      	strh	r2, [r0, #28]
   g->console.y_pos = g->console.y_end;
 8009e66:	83c3      	strh	r3, [r0, #30]
   g->char_h_space = 1;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   g->char_v_space = 1;
 8009e6e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
   g->font.p = NULL;
 8009e72:	2300      	movs	r3, #0
 8009e74:	62c3      	str	r3, [r0, #44]	; 0x2c
   g->font.char_height = 0;
 8009e76:	8683      	strh	r3, [r0, #52]	; 0x34
   g->font.char_width = 0;
 8009e78:	8643      	strh	r3, [r0, #50]	; 0x32
   g->font.start_char = 0;
 8009e7a:	86c3      	strh	r3, [r0, #54]	; 0x36
   g->font.end_char = 0;
 8009e7c:	8703      	strh	r3, [r0, #56]	; 0x38
   g->font.widths = NULL;
 8009e7e:	63c3      	str	r3, [r0, #60]	; 0x3c
   #ifdef USE_COLOR_RGB888
   g->desktop_color = 0x5E8BEf;
   #endif
   #ifdef USE_COLOR_RGB565
   g->desktop_color = 0x5C5D;
 8009e80:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8009e84:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
   #endif
   g->fore_color = C_WHITE;
 8009e88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e8c:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
   g->back_color = C_BLACK;
 8009e90:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
   g->next_window = NULL;
 8009e94:	6103      	str	r3, [r0, #16]
   g->active_window = NULL;
 8009e96:	6143      	str	r3, [r0, #20]
   g->last_window = NULL;
 8009e98:	6183      	str	r3, [r0, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8009e9a:	e008      	b.n	8009eae <UG_Init+0x6e>
   {
      g->driver[i].driver = NULL;
 8009e9c:	f103 0209 	add.w	r2, r3, #9
 8009ea0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	6051      	str	r1, [r2, #4]
      g->driver[i].state = 0;
 8009ea8:	7211      	strb	r1, [r2, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8009eaa:	3301      	adds	r3, #1
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d9f4      	bls.n	8009e9c <UG_Init+0x5c>
   }

   gui = g;
 8009eb2:	4b02      	ldr	r3, [pc, #8]	; (8009ebc <UG_Init+0x7c>)
 8009eb4:	6018      	str	r0, [r3, #0]
   return 1;
}
 8009eb6:	2001      	movs	r0, #1
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	20000da8 	.word	0x20000da8

08009ec0 <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 8009ec0:	b500      	push	{lr}
   gui->font = *font;
 8009ec2:	4b07      	ldr	r3, [pc, #28]	; (8009ee0 <UG_FontSelect+0x20>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f103 0c2c 	add.w	ip, r3, #44	; 0x2c
 8009eca:	4686      	mov	lr, r0
 8009ecc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009ed0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009ed4:	f8de 3000 	ldr.w	r3, [lr]
 8009ed8:	f8cc 3000 	str.w	r3, [ip]
}
 8009edc:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ee0:	20000da8 	.word	0x20000da8

08009ee4 <UG_DrawPixel>:
   UG_DrawArc(x1+r, y2-r, r, 0x30, c);
   UG_DrawArc(x2-r, y2-r, r, 0xC0, c);
}

void UG_DrawPixel( UG_S16 x0, UG_S16 y0, UG_COLOR c )
{
 8009ee4:	b508      	push	{r3, lr}
   gui->pset(x0,y0,c);
 8009ee6:	4b02      	ldr	r3, [pc, #8]	; (8009ef0 <UG_DrawPixel+0xc>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4798      	blx	r3
}
 8009eee:	bd08      	pop	{r3, pc}
 8009ef0:	20000da8 	.word	0x20000da8

08009ef4 <UG_SetForecolor>:
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
   gui->fore_color = c;
 8009ef4:	4b02      	ldr	r3, [pc, #8]	; (8009f00 <UG_SetForecolor+0xc>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
}
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	20000da8 	.word	0x20000da8

08009f04 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
   gui->back_color = c;
 8009f04:	4b02      	ldr	r3, [pc, #8]	; (8009f10 <UG_SetBackcolor+0xc>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
}
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	20000da8 	.word	0x20000da8

08009f14 <UG_DriverRegister>:
/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8009f14:	2802      	cmp	r0, #2
 8009f16:	d807      	bhi.n	8009f28 <UG_DriverRegister+0x14>

   gui->driver[type].driver = driver;
 8009f18:	4b04      	ldr	r3, [pc, #16]	; (8009f2c <UG_DriverRegister+0x18>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	3009      	adds	r0, #9
 8009f1e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8009f22:	6041      	str	r1, [r0, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8009f24:	2303      	movs	r3, #3
 8009f26:	7203      	strb	r3, [r0, #8]
}
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	20000da8 	.word	0x20000da8

08009f30 <UG_DriverEnable>:

void UG_DriverEnable( UG_U8 type )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8009f30:	2802      	cmp	r0, #2
 8009f32:	d80f      	bhi.n	8009f54 <UG_DriverEnable+0x24>
   if ( gui->driver[type].state & DRIVER_REGISTERED )
 8009f34:	4b08      	ldr	r3, [pc, #32]	; (8009f58 <UG_DriverEnable+0x28>)
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	f100 0309 	add.w	r3, r0, #9
 8009f3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009f40:	7a1b      	ldrb	r3, [r3, #8]
 8009f42:	f013 0f01 	tst.w	r3, #1
 8009f46:	d005      	beq.n	8009f54 <UG_DriverEnable+0x24>
   {
      gui->driver[type].state |= DRIVER_ENABLED;
 8009f48:	3009      	adds	r0, #9
 8009f4a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8009f4e:	f043 0302 	orr.w	r3, r3, #2
 8009f52:	7203      	strb	r3, [r0, #8]
   }
}
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	20000da8 	.word	0x20000da8

08009f5c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009f5c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f5e:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8009f62:	b184      	cbz	r4, 8009f86 <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009f64:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8009f68:	b17b      	cbz	r3, 8009f8a <USBD_CDC_EP0_RxReady+0x2e>
 8009f6a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8009f6e:	28ff      	cmp	r0, #255	; 0xff
 8009f70:	d00d      	beq.n	8009f8e <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8009f78:	4621      	mov	r1, r4
 8009f7a:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8009f7c:	23ff      	movs	r3, #255	; 0xff
 8009f7e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009f82:	2000      	movs	r0, #0
}
 8009f84:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8009f86:	2003      	movs	r0, #3
 8009f88:	e7fc      	b.n	8009f84 <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	e7fa      	b.n	8009f84 <USBD_CDC_EP0_RxReady+0x28>
 8009f8e:	2000      	movs	r0, #0
 8009f90:	e7f8      	b.n	8009f84 <USBD_CDC_EP0_RxReady+0x28>
	...

08009f94 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009f94:	2343      	movs	r3, #67	; 0x43
 8009f96:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8009f98:	4800      	ldr	r0, [pc, #0]	; (8009f9c <USBD_CDC_GetFSCfgDesc+0x8>)
 8009f9a:	4770      	bx	lr
 8009f9c:	200000f0 	.word	0x200000f0

08009fa0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009fa0:	2343      	movs	r3, #67	; 0x43
 8009fa2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8009fa4:	4800      	ldr	r0, [pc, #0]	; (8009fa8 <USBD_CDC_GetHSCfgDesc+0x8>)
 8009fa6:	4770      	bx	lr
 8009fa8:	20000134 	.word	0x20000134

08009fac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009fac:	2343      	movs	r3, #67	; 0x43
 8009fae:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8009fb0:	4800      	ldr	r0, [pc, #0]	; (8009fb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8009fb2:	4770      	bx	lr
 8009fb4:	20000184 	.word	0x20000184

08009fb8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009fb8:	230a      	movs	r3, #10
 8009fba:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8009fbc:	4800      	ldr	r0, [pc, #0]	; (8009fc0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8009fbe:	4770      	bx	lr
 8009fc0:	20000178 	.word	0x20000178

08009fc4 <USBD_CDC_DataOut>:
{
 8009fc4:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fc6:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8009fca:	b175      	cbz	r5, 8009fea <USBD_CDC_DataOut+0x26>
 8009fcc:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009fce:	f001 f8a3 	bl	800b118 <USBD_LL_GetRxDataSize>
 8009fd2:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009fd6:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8009fe0:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8009fe4:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8009fe6:	2000      	movs	r0, #0
}
 8009fe8:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8009fea:	2003      	movs	r0, #3
 8009fec:	e7fc      	b.n	8009fe8 <USBD_CDC_DataOut+0x24>

08009fee <USBD_CDC_DataIn>:
{
 8009fee:	b510      	push	{r4, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009ff0:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 8009ff4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8009ff8:	b353      	cbz	r3, 800a050 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009ffa:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8009ffe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a002:	6992      	ldr	r2, [r2, #24]
 800a004:	b14a      	cbz	r2, 800a01a <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a006:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800a00a:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 800a00e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800a010:	fbb2 fcf4 	udiv	ip, r2, r4
 800a014:	fb04 221c 	mls	r2, r4, ip, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a018:	b172      	cbz	r2, 800a038 <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 800a01a:	2200      	movs	r2, #0
 800a01c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a020:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800a024:	6914      	ldr	r4, [r2, #16]
 800a026:	b1ac      	cbz	r4, 800a054 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a028:	460a      	mov	r2, r1
 800a02a:	f503 7104 	add.w	r1, r3, #528	; 0x210
 800a02e:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800a032:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 800a034:	2000      	movs	r0, #0
}
 800a036:	bd10      	pop	{r4, pc}
    pdev->ep_in[epnum].total_length = 0U;
 800a038:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800a03c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a040:	2400      	movs	r4, #0
 800a042:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a044:	4623      	mov	r3, r4
 800a046:	4622      	mov	r2, r4
 800a048:	f001 f856 	bl	800b0f8 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800a04c:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a04e:	e7f2      	b.n	800a036 <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 800a050:	2003      	movs	r0, #3
 800a052:	e7f0      	b.n	800a036 <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 800a054:	2000      	movs	r0, #0
 800a056:	e7ee      	b.n	800a036 <USBD_CDC_DataIn+0x48>

0800a058 <USBD_CDC_Setup>:
{
 800a058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a05a:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a05c:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800a060:	2300      	movs	r3, #0
 800a062:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800a066:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 800a06a:	2e00      	cmp	r6, #0
 800a06c:	d06c      	beq.n	800a148 <USBD_CDC_Setup+0xf0>
 800a06e:	4607      	mov	r7, r0
 800a070:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a072:	780b      	ldrb	r3, [r1, #0]
 800a074:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800a078:	d02a      	beq.n	800a0d0 <USBD_CDC_Setup+0x78>
 800a07a:	2d20      	cmp	r5, #32
 800a07c:	d15e      	bne.n	800a13c <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 800a07e:	88ca      	ldrh	r2, [r1, #6]
 800a080:	b1f2      	cbz	r2, 800a0c0 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 800a082:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a086:	d00f      	beq.n	800a0a8 <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a088:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	4631      	mov	r1, r6
 800a090:	7860      	ldrb	r0, [r4, #1]
 800a092:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a094:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a096:	2a07      	cmp	r2, #7
 800a098:	bf28      	it	cs
 800a09a:	2207      	movcs	r2, #7
 800a09c:	4631      	mov	r1, r6
 800a09e:	4638      	mov	r0, r7
 800a0a0:	f000 fdd4 	bl	800ac4c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a0a4:	2500      	movs	r5, #0
 800a0a6:	e04c      	b.n	800a142 <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 800a0a8:	784b      	ldrb	r3, [r1, #1]
 800a0aa:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a0ae:	798b      	ldrb	r3, [r1, #6]
 800a0b0:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a0b4:	88ca      	ldrh	r2, [r1, #6]
 800a0b6:	4631      	mov	r1, r6
 800a0b8:	f000 fddd 	bl	800ac76 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800a0bc:	2500      	movs	r5, #0
 800a0be:	e040      	b.n	800a142 <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a0c0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	7848      	ldrb	r0, [r1, #1]
 800a0ca:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 800a0cc:	2500      	movs	r5, #0
 800a0ce:	e038      	b.n	800a142 <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 800a0d0:	784e      	ldrb	r6, [r1, #1]
 800a0d2:	2e0b      	cmp	r6, #11
 800a0d4:	d82e      	bhi.n	800a134 <USBD_CDC_Setup+0xdc>
 800a0d6:	e8df f006 	tbb	[pc, r6]
 800a0da:	3406      	.short	0x3406
 800a0dc:	2d2d2d2d 	.word	0x2d2d2d2d
 800a0e0:	2d2d2d2d 	.word	0x2d2d2d2d
 800a0e4:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	2b03      	cmp	r3, #3
 800a0ee:	d003      	beq.n	800a0f8 <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 800a0f0:	f000 fa72 	bl	800a5d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a0f4:	2503      	movs	r5, #3
 800a0f6:	e024      	b.n	800a142 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a0f8:	2202      	movs	r2, #2
 800a0fa:	a901      	add	r1, sp, #4
 800a0fc:	f000 fda6 	bl	800ac4c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a100:	4635      	mov	r5, r6
 800a102:	e01e      	b.n	800a142 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a104:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	2b03      	cmp	r3, #3
 800a10c:	d003      	beq.n	800a116 <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 800a10e:	f000 fa63 	bl	800a5d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a112:	2503      	movs	r5, #3
 800a114:	e015      	b.n	800a142 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a116:	2201      	movs	r2, #1
 800a118:	f10d 0107 	add.w	r1, sp, #7
 800a11c:	f000 fd96 	bl	800ac4c <USBD_CtlSendData>
 800a120:	e00f      	b.n	800a142 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a122:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a126:	b2db      	uxtb	r3, r3
 800a128:	2b03      	cmp	r3, #3
 800a12a:	d00a      	beq.n	800a142 <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 800a12c:	f000 fa54 	bl	800a5d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a130:	2503      	movs	r5, #3
 800a132:	e006      	b.n	800a142 <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 800a134:	f000 fa50 	bl	800a5d8 <USBD_CtlError>
          ret = USBD_FAIL;
 800a138:	2503      	movs	r5, #3
          break;
 800a13a:	e002      	b.n	800a142 <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 800a13c:	f000 fa4c 	bl	800a5d8 <USBD_CtlError>
      ret = USBD_FAIL;
 800a140:	2503      	movs	r5, #3
}
 800a142:	4628      	mov	r0, r5
 800a144:	b003      	add	sp, #12
 800a146:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800a148:	2503      	movs	r5, #3
 800a14a:	e7fa      	b.n	800a142 <USBD_CDC_Setup+0xea>

0800a14c <USBD_CDC_DeInit>:
{
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a150:	2181      	movs	r1, #129	; 0x81
 800a152:	f000 ff9a 	bl	800b08a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a156:	2500      	movs	r5, #0
 800a158:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a15a:	2101      	movs	r1, #1
 800a15c:	4620      	mov	r0, r4
 800a15e:	f000 ff94 	bl	800b08a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a162:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a166:	2182      	movs	r1, #130	; 0x82
 800a168:	4620      	mov	r0, r4
 800a16a:	f000 ff8e 	bl	800b08a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a16e:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a172:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 800a176:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800a17a:	b14b      	cbz	r3, 800a190 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a17c:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a184:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800a188:	f000 fff4 	bl	800b174 <USBD_static_free>
    pdev->pClassData = NULL;
 800a18c:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800a190:	2000      	movs	r0, #0
 800a192:	bd38      	pop	{r3, r4, r5, pc}

0800a194 <USBD_CDC_Init>:
{
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a198:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a19c:	f000 ffe6 	bl	800b16c <USBD_static_malloc>
  if (hcdc == NULL)
 800a1a0:	b3b8      	cbz	r0, 800a212 <USBD_CDC_Init+0x7e>
 800a1a2:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 800a1a4:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1a8:	7c23      	ldrb	r3, [r4, #16]
 800a1aa:	bbbb      	cbnz	r3, 800a21c <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a1ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1b0:	2202      	movs	r2, #2
 800a1b2:	2181      	movs	r1, #129	; 0x81
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f000 ff5d 	bl	800b074 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a1ba:	2501      	movs	r5, #1
 800a1bc:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a1be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1c2:	2202      	movs	r2, #2
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f000 ff54 	bl	800b074 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a1cc:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a1d0:	2310      	movs	r3, #16
 800a1d2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a1d6:	2308      	movs	r3, #8
 800a1d8:	2203      	movs	r2, #3
 800a1da:	2182      	movs	r1, #130	; 0x82
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f000 ff49 	bl	800b074 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a1e8:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4798      	blx	r3
  hcdc->TxState = 0U;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800a1f6:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1fa:	7c25      	ldrb	r5, [r4, #16]
 800a1fc:	bb15      	cbnz	r5, 800a244 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a202:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800a206:	2101      	movs	r1, #1
 800a208:	4620      	mov	r0, r4
 800a20a:	f000 ff7d 	bl	800b108 <USBD_LL_PrepareReceive>
}
 800a20e:	4628      	mov	r0, r5
 800a210:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 800a212:	2300      	movs	r3, #0
 800a214:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a218:	2502      	movs	r5, #2
 800a21a:	e7f8      	b.n	800a20e <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a21c:	2340      	movs	r3, #64	; 0x40
 800a21e:	2202      	movs	r2, #2
 800a220:	2181      	movs	r1, #129	; 0x81
 800a222:	4620      	mov	r0, r4
 800a224:	f000 ff26 	bl	800b074 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a228:	2501      	movs	r5, #1
 800a22a:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a22c:	2340      	movs	r3, #64	; 0x40
 800a22e:	2202      	movs	r2, #2
 800a230:	4629      	mov	r1, r5
 800a232:	4620      	mov	r0, r4
 800a234:	f000 ff1e 	bl	800b074 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a238:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a23c:	2310      	movs	r3, #16
 800a23e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800a242:	e7c8      	b.n	800a1d6 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a244:	2340      	movs	r3, #64	; 0x40
 800a246:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800a24a:	2101      	movs	r1, #1
 800a24c:	4620      	mov	r0, r4
 800a24e:	f000 ff5b 	bl	800b108 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800a252:	2500      	movs	r5, #0
 800a254:	e7db      	b.n	800a20e <USBD_CDC_Init+0x7a>

0800a256 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800a256:	b119      	cbz	r1, 800a260 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800a258:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a25c:	2000      	movs	r0, #0
 800a25e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800a260:	2003      	movs	r0, #3
}
 800a262:	4770      	bx	lr

0800a264 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a264:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800a268:	b12b      	cbz	r3, 800a276 <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800a26a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a26e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a272:	2000      	movs	r0, #0
 800a274:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800a276:	2003      	movs	r0, #3
}
 800a278:	4770      	bx	lr

0800a27a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a27a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800a27e:	b11b      	cbz	r3, 800a288 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800a280:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a284:	2000      	movs	r0, #0
 800a286:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800a288:	2003      	movs	r0, #3
}
 800a28a:	4770      	bx	lr

0800a28c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a28c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a28e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800a292:	b192      	cbz	r2, 800a2ba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a294:	7c04      	ldrb	r4, [r0, #16]
 800a296:	b944      	cbnz	r4, 800a2aa <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a29c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800a2a0:	2101      	movs	r1, #1
 800a2a2:	f000 ff31 	bl	800b108 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a2aa:	2340      	movs	r3, #64	; 0x40
 800a2ac:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	f000 ff29 	bl	800b108 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800a2b6:	2400      	movs	r4, #0
 800a2b8:	e7f5      	b.n	800a2a6 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 800a2ba:	2403      	movs	r4, #3
 800a2bc:	e7f3      	b.n	800a2a6 <USBD_CDC_ReceivePacket+0x1a>

0800a2be <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a2be:	b198      	cbz	r0, 800a2e8 <USBD_Init+0x2a>
{
 800a2c0:	b508      	push	{r3, lr}
 800a2c2:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a2c4:	2000      	movs	r0, #0
 800a2c6:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a2ca:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a2ce:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a2d2:	b109      	cbz	r1, 800a2d8 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800a2d4:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2d8:	2101      	movs	r1, #1
 800a2da:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 800a2de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f000 fe7b 	bl	800afdc <USBD_LL_Init>

  return ret;
}
 800a2e6:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800a2e8:	2003      	movs	r0, #3
}
 800a2ea:	4770      	bx	lr

0800a2ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a2ec:	b510      	push	{r4, lr}
 800a2ee:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800a2f6:	b161      	cbz	r1, 800a312 <USBD_RegisterClass+0x26>
 800a2f8:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a2fa:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a2fe:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800a300:	b14b      	cbz	r3, 800a316 <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a302:	f10d 0006 	add.w	r0, sp, #6
 800a306:	4798      	blx	r3
 800a308:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a30c:	2000      	movs	r0, #0
}
 800a30e:	b002      	add	sp, #8
 800a310:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800a312:	2003      	movs	r0, #3
 800a314:	e7fb      	b.n	800a30e <USBD_RegisterClass+0x22>
  return USBD_OK;
 800a316:	2000      	movs	r0, #0
 800a318:	e7f9      	b.n	800a30e <USBD_RegisterClass+0x22>

0800a31a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a31a:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a31c:	f000 fea2 	bl	800b064 <USBD_LL_Start>
}
 800a320:	bd08      	pop	{r3, pc}

0800a322 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a322:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800a324:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a328:	b113      	cbz	r3, 800a330 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4798      	blx	r3
  }

  return ret;
}
 800a32e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a330:	2003      	movs	r0, #3
 800a332:	e7fc      	b.n	800a32e <USBD_SetClassConfig+0xc>

0800a334 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a334:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a336:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a33a:	b10b      	cbz	r3, 800a340 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	4798      	blx	r3
  }

  return USBD_OK;
}
 800a340:	2000      	movs	r0, #0
 800a342:	bd08      	pop	{r3, pc}

0800a344 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a348:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800a34c:	4628      	mov	r0, r5
 800a34e:	f000 f92f 	bl	800a5b0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a352:	2301      	movs	r3, #1
 800a354:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a358:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800a35c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a360:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800a364:	f001 031f 	and.w	r3, r1, #31
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d00d      	beq.n	800a388 <USBD_LL_SetupStage+0x44>
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d010      	beq.n	800a392 <USBD_LL_SetupStage+0x4e>
 800a370:	b12b      	cbz	r3, 800a37e <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a372:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800a376:	4620      	mov	r0, r4
 800a378:	f000 fe8f 	bl	800b09a <USBD_LL_StallEP>
      break;
 800a37c:	e003      	b.n	800a386 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a37e:	4629      	mov	r1, r5
 800a380:	4620      	mov	r0, r4
 800a382:	f000 fae4 	bl	800a94e <USBD_StdDevReq>
  }

  return ret;
}
 800a386:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a388:	4629      	mov	r1, r5
 800a38a:	4620      	mov	r0, r4
 800a38c:	f000 fb17 	bl	800a9be <USBD_StdItfReq>
      break;
 800a390:	e7f9      	b.n	800a386 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a392:	4629      	mov	r1, r5
 800a394:	4620      	mov	r0, r4
 800a396:	f000 fb46 	bl	800aa26 <USBD_StdEPReq>
      break;
 800a39a:	e7f4      	b.n	800a386 <USBD_LL_SetupStage+0x42>

0800a39c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a3a0:	460d      	mov	r5, r1
 800a3a2:	bb41      	cbnz	r1, 800a3f6 <USBD_LL_DataOutStage+0x5a>
 800a3a4:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a3a6:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800a3aa:	2a03      	cmp	r2, #3
 800a3ac:	d001      	beq.n	800a3b2 <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 800a3ae:	4608      	mov	r0, r1
}
 800a3b0:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800a3b2:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 800a3b6:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800a3ba:	4291      	cmp	r1, r2
 800a3bc:	d809      	bhi.n	800a3d2 <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3be:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	2b03      	cmp	r3, #3
 800a3c6:	d00f      	beq.n	800a3e8 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	f000 fc6b 	bl	800aca4 <USBD_CtlSendStatus>
  return USBD_OK;
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	e7ee      	b.n	800a3b0 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800a3d2:	1a89      	subs	r1, r1, r2
 800a3d4:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a3d8:	428a      	cmp	r2, r1
 800a3da:	bf28      	it	cs
 800a3dc:	460a      	movcs	r2, r1
 800a3de:	4619      	mov	r1, r3
 800a3e0:	f000 fc58 	bl	800ac94 <USBD_CtlContinueRx>
  return USBD_OK;
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	e7e3      	b.n	800a3b0 <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 800a3e8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d0ea      	beq.n	800a3c8 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 800a3f2:	4798      	blx	r3
 800a3f4:	e7e8      	b.n	800a3c8 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3f6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b03      	cmp	r3, #3
 800a3fe:	d001      	beq.n	800a404 <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 800a400:	2000      	movs	r0, #0
 800a402:	e7d5      	b.n	800a3b0 <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 800a404:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	b10b      	cbz	r3, 800a410 <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a40c:	4798      	blx	r3
        if (ret != USBD_OK)
 800a40e:	e7cf      	b.n	800a3b0 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 800a410:	2000      	movs	r0, #0
 800a412:	e7cd      	b.n	800a3b0 <USBD_LL_DataOutStage+0x14>

0800a414 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a414:	b538      	push	{r3, r4, r5, lr}
 800a416:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a418:	460d      	mov	r5, r1
 800a41a:	2900      	cmp	r1, #0
 800a41c:	d14a      	bne.n	800a4b4 <USBD_LL_DataInStage+0xa0>
 800a41e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a420:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800a424:	2a02      	cmp	r2, #2
 800a426:	d005      	beq.n	800a434 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a428:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d03c      	beq.n	800a4aa <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 800a430:	4628      	mov	r0, r5
}
 800a432:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800a434:	69c2      	ldr	r2, [r0, #28]
 800a436:	6a01      	ldr	r1, [r0, #32]
 800a438:	428a      	cmp	r2, r1
 800a43a:	d80e      	bhi.n	800a45a <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 800a43c:	428a      	cmp	r2, r1
 800a43e:	d018      	beq.n	800a472 <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a440:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b03      	cmp	r3, #3
 800a448:	d027      	beq.n	800a49a <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a44a:	2180      	movs	r1, #128	; 0x80
 800a44c:	4620      	mov	r0, r4
 800a44e:	f000 fe24 	bl	800b09a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a452:	4620      	mov	r0, r4
 800a454:	f000 fc31 	bl	800acba <USBD_CtlReceiveStatus>
 800a458:	e7e6      	b.n	800a428 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800a45a:	1a52      	subs	r2, r2, r1
 800a45c:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a45e:	4619      	mov	r1, r3
 800a460:	f000 fc01 	bl	800ac66 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a464:	2300      	movs	r3, #0
 800a466:	461a      	mov	r2, r3
 800a468:	4619      	mov	r1, r3
 800a46a:	4620      	mov	r0, r4
 800a46c:	f000 fe4c 	bl	800b108 <USBD_LL_PrepareReceive>
 800a470:	e7da      	b.n	800a428 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800a472:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800a474:	4299      	cmp	r1, r3
 800a476:	d8e3      	bhi.n	800a440 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 800a478:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d2df      	bcs.n	800a440 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a480:	2200      	movs	r2, #0
 800a482:	4611      	mov	r1, r2
 800a484:	f000 fbef 	bl	800ac66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a488:	2100      	movs	r1, #0
 800a48a:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a48e:	460b      	mov	r3, r1
 800a490:	460a      	mov	r2, r1
 800a492:	4620      	mov	r0, r4
 800a494:	f000 fe38 	bl	800b108 <USBD_LL_PrepareReceive>
 800a498:	e7c6      	b.n	800a428 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 800a49a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d0d2      	beq.n	800a44a <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	4798      	blx	r3
 800a4a8:	e7cf      	b.n	800a44a <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	e7be      	b.n	800a432 <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4b4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b03      	cmp	r3, #3
 800a4bc:	d001      	beq.n	800a4c2 <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 800a4be:	2000      	movs	r0, #0
 800a4c0:	e7b7      	b.n	800a432 <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 800a4c2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a4c6:	695b      	ldr	r3, [r3, #20]
 800a4c8:	b10b      	cbz	r3, 800a4ce <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a4ca:	4798      	blx	r3
        if (ret != USBD_OK)
 800a4cc:	e7b1      	b.n	800a432 <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 800a4ce:	2000      	movs	r0, #0
 800a4d0:	e7af      	b.n	800a432 <USBD_LL_DataInStage+0x1e>

0800a4d2 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800a4de:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800a4e0:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a4e4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a4e8:	b1f3      	cbz	r3, 800a528 <USBD_LL_Reset+0x56>
{
 800a4ea:	b570      	push	{r4, r5, r6, lr}
 800a4ec:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800a4ee:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800a4f2:	b11a      	cbz	r2, 800a4fc <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	b10b      	cbz	r3, 800a4fc <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4fc:	2340      	movs	r3, #64	; 0x40
 800a4fe:	2200      	movs	r2, #0
 800a500:	4611      	mov	r1, r2
 800a502:	4620      	mov	r0, r4
 800a504:	f000 fdb6 	bl	800b074 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a508:	2601      	movs	r6, #1
 800a50a:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a50e:	2540      	movs	r5, #64	; 0x40
 800a510:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a514:	462b      	mov	r3, r5
 800a516:	2200      	movs	r2, #0
 800a518:	2180      	movs	r1, #128	; 0x80
 800a51a:	4620      	mov	r0, r4
 800a51c:	f000 fdaa 	bl	800b074 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a520:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a522:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800a524:	2000      	movs	r0, #0
}
 800a526:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800a528:	2003      	movs	r0, #3
}
 800a52a:	4770      	bx	lr

0800a52c <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800a52c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800a52e:	2000      	movs	r0, #0
 800a530:	4770      	bx	lr

0800a532 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800a532:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a536:	b2db      	uxtb	r3, r3
 800a538:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a53c:	2304      	movs	r3, #4
 800a53e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800a542:	2000      	movs	r0, #0
 800a544:	4770      	bx	lr

0800a546 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a546:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2b04      	cmp	r3, #4
 800a54e:	d001      	beq.n	800a554 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800a550:	2000      	movs	r0, #0
 800a552:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800a554:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800a55e:	e7f7      	b.n	800a550 <USBD_LL_Resume+0xa>

0800a560 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800a560:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800a564:	b162      	cbz	r2, 800a580 <USBD_LL_SOF+0x20>
{
 800a566:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a568:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	2b03      	cmp	r3, #3
 800a570:	d001      	beq.n	800a576 <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800a572:	2000      	movs	r0, #0
}
 800a574:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800a576:	69d3      	ldr	r3, [r2, #28]
 800a578:	b123      	cbz	r3, 800a584 <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 800a57a:	4798      	blx	r3
  return USBD_OK;
 800a57c:	2000      	movs	r0, #0
 800a57e:	e7f9      	b.n	800a574 <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 800a580:	2003      	movs	r0, #3
}
 800a582:	4770      	bx	lr
  return USBD_OK;
 800a584:	2000      	movs	r0, #0
 800a586:	e7f5      	b.n	800a574 <USBD_LL_SOF+0x14>

0800a588 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a588:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800a58a:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800a58c:	e002      	b.n	800a594 <USBD_GetLen+0xc>
  {
    len++;
 800a58e:	3001      	adds	r0, #1
 800a590:	b2c0      	uxtb	r0, r0
    pbuff++;
 800a592:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800a594:	781a      	ldrb	r2, [r3, #0]
 800a596:	2a00      	cmp	r2, #0
 800a598:	d1f9      	bne.n	800a58e <USBD_GetLen+0x6>
  }

  return len;
}
 800a59a:	4770      	bx	lr

0800a59c <USBD_SetFeature>:
{
 800a59c:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a59e:	884b      	ldrh	r3, [r1, #2]
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d000      	beq.n	800a5a6 <USBD_SetFeature+0xa>
}
 800a5a4:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800a5a6:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a5aa:	f000 fb7b 	bl	800aca4 <USBD_CtlSendStatus>
}
 800a5ae:	e7f9      	b.n	800a5a4 <USBD_SetFeature+0x8>

0800a5b0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800a5b0:	780b      	ldrb	r3, [r1, #0]
 800a5b2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800a5b4:	784b      	ldrb	r3, [r1, #1]
 800a5b6:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800a5b8:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800a5ba:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a5bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800a5c0:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800a5c2:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800a5c4:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a5c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800a5ca:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800a5cc:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800a5ce:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a5d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800a5d4:	80c3      	strh	r3, [r0, #6]
}
 800a5d6:	4770      	bx	lr

0800a5d8 <USBD_CtlError>:
{
 800a5d8:	b510      	push	{r4, lr}
 800a5da:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5dc:	2180      	movs	r1, #128	; 0x80
 800a5de:	f000 fd5c 	bl	800b09a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a5e2:	2100      	movs	r1, #0
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f000 fd58 	bl	800b09a <USBD_LL_StallEP>
}
 800a5ea:	bd10      	pop	{r4, pc}

0800a5ec <USBD_GetDescriptor>:
{
 800a5ec:	b530      	push	{r4, r5, lr}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800a5fa:	884a      	ldrh	r2, [r1, #2]
 800a5fc:	0a13      	lsrs	r3, r2, #8
 800a5fe:	3b01      	subs	r3, #1
 800a600:	2b0e      	cmp	r3, #14
 800a602:	f200 80bc 	bhi.w	800a77e <USBD_GetDescriptor+0x192>
 800a606:	e8df f003 	tbb	[pc, r3]
 800a60a:	3015      	.short	0x3015
 800a60c:	9ebaba44 	.word	0x9ebaba44
 800a610:	bababaab 	.word	0xbababaab
 800a614:	babababa 	.word	0xbabababa
 800a618:	08          	.byte	0x08
 800a619:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a61a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a61e:	69db      	ldr	r3, [r3, #28]
 800a620:	b123      	cbz	r3, 800a62c <USBD_GetDescriptor+0x40>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a622:	f10d 0106 	add.w	r1, sp, #6
 800a626:	7c00      	ldrb	r0, [r0, #16]
 800a628:	4798      	blx	r3
  if (err != 0U)
 800a62a:	e00a      	b.n	800a642 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800a62c:	4629      	mov	r1, r5
 800a62e:	f7ff ffd3 	bl	800a5d8 <USBD_CtlError>
  if (err != 0U)
 800a632:	e018      	b.n	800a666 <USBD_GetDescriptor+0x7a>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a634:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f10d 0106 	add.w	r1, sp, #6
 800a63e:	7c00      	ldrb	r0, [r0, #16]
 800a640:	4798      	blx	r3
  if (req->wLength != 0U)
 800a642:	88ea      	ldrh	r2, [r5, #6]
 800a644:	2a00      	cmp	r2, #0
 800a646:	f000 80a3 	beq.w	800a790 <USBD_GetDescriptor+0x1a4>
    if (len != 0U)
 800a64a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f000 8099 	beq.w	800a786 <USBD_GetDescriptor+0x19a>
      len = MIN(len, req->wLength);
 800a654:	429a      	cmp	r2, r3
 800a656:	bf28      	it	cs
 800a658:	461a      	movcs	r2, r3
 800a65a:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a65e:	4601      	mov	r1, r0
 800a660:	4620      	mov	r0, r4
 800a662:	f000 faf3 	bl	800ac4c <USBD_CtlSendData>
}
 800a666:	b003      	add	sp, #12
 800a668:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a66a:	7c03      	ldrb	r3, [r0, #16]
 800a66c:	b943      	cbnz	r3, 800a680 <USBD_GetDescriptor+0x94>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a66e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a674:	f10d 0006 	add.w	r0, sp, #6
 800a678:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a67a:	2302      	movs	r3, #2
 800a67c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a67e:	e7e0      	b.n	800a642 <USBD_GetDescriptor+0x56>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a680:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a686:	f10d 0006 	add.w	r0, sp, #6
 800a68a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a68c:	2302      	movs	r3, #2
 800a68e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a690:	e7d7      	b.n	800a642 <USBD_GetDescriptor+0x56>
      switch ((uint8_t)(req->wValue))
 800a692:	b2d2      	uxtb	r2, r2
 800a694:	2a05      	cmp	r2, #5
 800a696:	d852      	bhi.n	800a73e <USBD_GetDescriptor+0x152>
 800a698:	e8df f002 	tbb	[pc, r2]
 800a69c:	2a1d1003 	.word	0x2a1d1003
 800a6a0:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a6a2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	b123      	cbz	r3, 800a6b4 <USBD_GetDescriptor+0xc8>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a6aa:	f10d 0106 	add.w	r1, sp, #6
 800a6ae:	7c00      	ldrb	r0, [r0, #16]
 800a6b0:	4798      	blx	r3
  if (err != 0U)
 800a6b2:	e7c6      	b.n	800a642 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a6b4:	4629      	mov	r1, r5
 800a6b6:	f7ff ff8f 	bl	800a5d8 <USBD_CtlError>
  if (err != 0U)
 800a6ba:	e7d4      	b.n	800a666 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a6bc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	b123      	cbz	r3, 800a6ce <USBD_GetDescriptor+0xe2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a6c4:	f10d 0106 	add.w	r1, sp, #6
 800a6c8:	7c00      	ldrb	r0, [r0, #16]
 800a6ca:	4798      	blx	r3
  if (err != 0U)
 800a6cc:	e7b9      	b.n	800a642 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	f7ff ff82 	bl	800a5d8 <USBD_CtlError>
  if (err != 0U)
 800a6d4:	e7c7      	b.n	800a666 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a6d6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	b123      	cbz	r3, 800a6e8 <USBD_GetDescriptor+0xfc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a6de:	f10d 0106 	add.w	r1, sp, #6
 800a6e2:	7c00      	ldrb	r0, [r0, #16]
 800a6e4:	4798      	blx	r3
  if (err != 0U)
 800a6e6:	e7ac      	b.n	800a642 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a6e8:	4629      	mov	r1, r5
 800a6ea:	f7ff ff75 	bl	800a5d8 <USBD_CtlError>
  if (err != 0U)
 800a6ee:	e7ba      	b.n	800a666 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a6f0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	b123      	cbz	r3, 800a702 <USBD_GetDescriptor+0x116>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a6f8:	f10d 0106 	add.w	r1, sp, #6
 800a6fc:	7c00      	ldrb	r0, [r0, #16]
 800a6fe:	4798      	blx	r3
  if (err != 0U)
 800a700:	e79f      	b.n	800a642 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a702:	4629      	mov	r1, r5
 800a704:	f7ff ff68 	bl	800a5d8 <USBD_CtlError>
  if (err != 0U)
 800a708:	e7ad      	b.n	800a666 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a70a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a70e:	695b      	ldr	r3, [r3, #20]
 800a710:	b123      	cbz	r3, 800a71c <USBD_GetDescriptor+0x130>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a712:	f10d 0106 	add.w	r1, sp, #6
 800a716:	7c00      	ldrb	r0, [r0, #16]
 800a718:	4798      	blx	r3
  if (err != 0U)
 800a71a:	e792      	b.n	800a642 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a71c:	4629      	mov	r1, r5
 800a71e:	f7ff ff5b 	bl	800a5d8 <USBD_CtlError>
  if (err != 0U)
 800a722:	e7a0      	b.n	800a666 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a724:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	b123      	cbz	r3, 800a736 <USBD_GetDescriptor+0x14a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a72c:	f10d 0106 	add.w	r1, sp, #6
 800a730:	7c00      	ldrb	r0, [r0, #16]
 800a732:	4798      	blx	r3
  if (err != 0U)
 800a734:	e785      	b.n	800a642 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a736:	4629      	mov	r1, r5
 800a738:	f7ff ff4e 	bl	800a5d8 <USBD_CtlError>
  if (err != 0U)
 800a73c:	e793      	b.n	800a666 <USBD_GetDescriptor+0x7a>
          USBD_CtlError(pdev, req);
 800a73e:	4629      	mov	r1, r5
 800a740:	f7ff ff4a 	bl	800a5d8 <USBD_CtlError>
  if (err != 0U)
 800a744:	e78f      	b.n	800a666 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a746:	7c03      	ldrb	r3, [r0, #16]
 800a748:	b933      	cbnz	r3, 800a758 <USBD_GetDescriptor+0x16c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a74a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a750:	f10d 0006 	add.w	r0, sp, #6
 800a754:	4798      	blx	r3
  if (err != 0U)
 800a756:	e774      	b.n	800a642 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800a758:	4629      	mov	r1, r5
 800a75a:	f7ff ff3d 	bl	800a5d8 <USBD_CtlError>
  if (err != 0U)
 800a75e:	e782      	b.n	800a666 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a760:	7c03      	ldrb	r3, [r0, #16]
 800a762:	b943      	cbnz	r3, 800a776 <USBD_GetDescriptor+0x18a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a764:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a76a:	f10d 0006 	add.w	r0, sp, #6
 800a76e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a770:	2307      	movs	r3, #7
 800a772:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a774:	e765      	b.n	800a642 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800a776:	4629      	mov	r1, r5
 800a778:	f7ff ff2e 	bl	800a5d8 <USBD_CtlError>
  if (err != 0U)
 800a77c:	e773      	b.n	800a666 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 800a77e:	4629      	mov	r1, r5
 800a780:	f7ff ff2a 	bl	800a5d8 <USBD_CtlError>
    return;
 800a784:	e76f      	b.n	800a666 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 800a786:	4629      	mov	r1, r5
 800a788:	4620      	mov	r0, r4
 800a78a:	f7ff ff25 	bl	800a5d8 <USBD_CtlError>
 800a78e:	e76a      	b.n	800a666 <USBD_GetDescriptor+0x7a>
    (void)USBD_CtlSendStatus(pdev);
 800a790:	4620      	mov	r0, r4
 800a792:	f000 fa87 	bl	800aca4 <USBD_CtlSendStatus>
 800a796:	e766      	b.n	800a666 <USBD_GetDescriptor+0x7a>

0800a798 <USBD_SetAddress>:
{
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a79c:	888b      	ldrh	r3, [r1, #4]
 800a79e:	b9fb      	cbnz	r3, 800a7e0 <USBD_SetAddress+0x48>
 800a7a0:	88cb      	ldrh	r3, [r1, #6]
 800a7a2:	b9eb      	cbnz	r3, 800a7e0 <USBD_SetAddress+0x48>
 800a7a4:	884b      	ldrh	r3, [r1, #2]
 800a7a6:	2b7f      	cmp	r3, #127	; 0x7f
 800a7a8:	d81a      	bhi.n	800a7e0 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a7aa:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	2b03      	cmp	r3, #3
 800a7b6:	d00c      	beq.n	800a7d2 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 800a7b8:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a7bc:	4629      	mov	r1, r5
 800a7be:	f000 fc93 	bl	800b0e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f000 fa6e 	bl	800aca4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800a7c8:	b135      	cbz	r5, 800a7d8 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7ca:	2302      	movs	r3, #2
 800a7cc:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800a7d0:	e009      	b.n	800a7e6 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 800a7d2:	f7ff ff01 	bl	800a5d8 <USBD_CtlError>
 800a7d6:	e006      	b.n	800a7e6 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800a7de:	e002      	b.n	800a7e6 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	f7ff fef9 	bl	800a5d8 <USBD_CtlError>
}
 800a7e6:	bd38      	pop	{r3, r4, r5, pc}

0800a7e8 <USBD_SetConfig>:
{
 800a7e8:	b570      	push	{r4, r5, r6, lr}
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800a7ee:	788d      	ldrb	r5, [r1, #2]
 800a7f0:	4b2e      	ldr	r3, [pc, #184]	; (800a8ac <USBD_SetConfig+0xc4>)
 800a7f2:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a7f4:	2d01      	cmp	r5, #1
 800a7f6:	d810      	bhi.n	800a81a <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800a7f8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d00f      	beq.n	800a822 <USBD_SetConfig+0x3a>
 800a802:	2b03      	cmp	r3, #3
 800a804:	d023      	beq.n	800a84e <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 800a806:	f7ff fee7 	bl	800a5d8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a80a:	4b28      	ldr	r3, [pc, #160]	; (800a8ac <USBD_SetConfig+0xc4>)
 800a80c:	7819      	ldrb	r1, [r3, #0]
 800a80e:	4620      	mov	r0, r4
 800a810:	f7ff fd90 	bl	800a334 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a814:	2503      	movs	r5, #3
}
 800a816:	4628      	mov	r0, r5
 800a818:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800a81a:	f7ff fedd 	bl	800a5d8 <USBD_CtlError>
    return USBD_FAIL;
 800a81e:	2503      	movs	r5, #3
 800a820:	e7f9      	b.n	800a816 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800a822:	b18d      	cbz	r5, 800a848 <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 800a824:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a826:	4629      	mov	r1, r5
 800a828:	f7ff fd7b 	bl	800a322 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a82c:	4605      	mov	r5, r0
 800a82e:	b120      	cbz	r0, 800a83a <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 800a830:	4631      	mov	r1, r6
 800a832:	4620      	mov	r0, r4
 800a834:	f7ff fed0 	bl	800a5d8 <USBD_CtlError>
 800a838:	e7ed      	b.n	800a816 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800a83a:	4620      	mov	r0, r4
 800a83c:	f000 fa32 	bl	800aca4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a840:	2303      	movs	r3, #3
 800a842:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800a846:	e7e6      	b.n	800a816 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800a848:	f000 fa2c 	bl	800aca4 <USBD_CtlSendStatus>
 800a84c:	e7e3      	b.n	800a816 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800a84e:	b1cd      	cbz	r5, 800a884 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 800a850:	6841      	ldr	r1, [r0, #4]
 800a852:	428d      	cmp	r5, r1
 800a854:	d025      	beq.n	800a8a2 <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a856:	b2c9      	uxtb	r1, r1
 800a858:	f7ff fd6c 	bl	800a334 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a85c:	4b13      	ldr	r3, [pc, #76]	; (800a8ac <USBD_SetConfig+0xc4>)
 800a85e:	7819      	ldrb	r1, [r3, #0]
 800a860:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a862:	4620      	mov	r0, r4
 800a864:	f7ff fd5d 	bl	800a322 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a868:	4605      	mov	r5, r0
 800a86a:	b1b0      	cbz	r0, 800a89a <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 800a86c:	4631      	mov	r1, r6
 800a86e:	4620      	mov	r0, r4
 800a870:	f7ff feb2 	bl	800a5d8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a874:	7921      	ldrb	r1, [r4, #4]
 800a876:	4620      	mov	r0, r4
 800a878:	f7ff fd5c 	bl	800a334 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a87c:	2302      	movs	r3, #2
 800a87e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800a882:	e7c8      	b.n	800a816 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a884:	2302      	movs	r3, #2
 800a886:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a88a:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a88c:	4629      	mov	r1, r5
 800a88e:	f7ff fd51 	bl	800a334 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a892:	4620      	mov	r0, r4
 800a894:	f000 fa06 	bl	800aca4 <USBD_CtlSendStatus>
 800a898:	e7bd      	b.n	800a816 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800a89a:	4620      	mov	r0, r4
 800a89c:	f000 fa02 	bl	800aca4 <USBD_CtlSendStatus>
 800a8a0:	e7b9      	b.n	800a816 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800a8a2:	f000 f9ff 	bl	800aca4 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800a8a6:	2500      	movs	r5, #0
 800a8a8:	e7b5      	b.n	800a816 <USBD_SetConfig+0x2e>
 800a8aa:	bf00      	nop
 800a8ac:	20000dac 	.word	0x20000dac

0800a8b0 <USBD_GetConfig>:
{
 800a8b0:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800a8b2:	88cb      	ldrh	r3, [r1, #6]
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d10b      	bne.n	800a8d0 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800a8b8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d909      	bls.n	800a8d6 <USBD_GetConfig+0x26>
 800a8c2:	2b03      	cmp	r3, #3
 800a8c4:	d109      	bne.n	800a8da <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	1d01      	adds	r1, r0, #4
 800a8ca:	f000 f9bf 	bl	800ac4c <USBD_CtlSendData>
        break;
 800a8ce:	e001      	b.n	800a8d4 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800a8d0:	f7ff fe82 	bl	800a5d8 <USBD_CtlError>
}
 800a8d4:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800a8d6:	b25b      	sxtb	r3, r3
 800a8d8:	b913      	cbnz	r3, 800a8e0 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 800a8da:	f7ff fe7d 	bl	800a5d8 <USBD_CtlError>
}
 800a8de:	e7f9      	b.n	800a8d4 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 800a8e0:	4601      	mov	r1, r0
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f000 f9af 	bl	800ac4c <USBD_CtlSendData>
        break;
 800a8ee:	e7f1      	b.n	800a8d4 <USBD_GetConfig+0x24>

0800a8f0 <USBD_GetStatus>:
{
 800a8f0:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800a8f2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	d812      	bhi.n	800a922 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800a8fc:	88cb      	ldrh	r3, [r1, #6]
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d10c      	bne.n	800a91c <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a902:	2301      	movs	r3, #1
 800a904:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800a906:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800a90a:	b10b      	cbz	r3, 800a910 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a90c:	2303      	movs	r3, #3
 800a90e:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a910:	2202      	movs	r2, #2
 800a912:	f100 010c 	add.w	r1, r0, #12
 800a916:	f000 f999 	bl	800ac4c <USBD_CtlSendData>
}
 800a91a:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800a91c:	f7ff fe5c 	bl	800a5d8 <USBD_CtlError>
        break;
 800a920:	e7fb      	b.n	800a91a <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800a922:	f7ff fe59 	bl	800a5d8 <USBD_CtlError>
}
 800a926:	e7f8      	b.n	800a91a <USBD_GetStatus+0x2a>

0800a928 <USBD_ClrFeature>:
{
 800a928:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800a92a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a92e:	3b01      	subs	r3, #1
 800a930:	2b02      	cmp	r3, #2
 800a932:	d809      	bhi.n	800a948 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a934:	884b      	ldrh	r3, [r1, #2]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d000      	beq.n	800a93c <USBD_ClrFeature+0x14>
}
 800a93a:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800a93c:	2300      	movs	r3, #0
 800a93e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a942:	f000 f9af 	bl	800aca4 <USBD_CtlSendStatus>
 800a946:	e7f8      	b.n	800a93a <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800a948:	f7ff fe46 	bl	800a5d8 <USBD_CtlError>
}
 800a94c:	e7f5      	b.n	800a93a <USBD_ClrFeature+0x12>

0800a94e <USBD_StdDevReq>:
{
 800a94e:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a950:	780c      	ldrb	r4, [r1, #0]
 800a952:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800a956:	2c20      	cmp	r4, #32
 800a958:	d006      	beq.n	800a968 <USBD_StdDevReq+0x1a>
 800a95a:	2c40      	cmp	r4, #64	; 0x40
 800a95c:	d004      	beq.n	800a968 <USBD_StdDevReq+0x1a>
 800a95e:	b154      	cbz	r4, 800a976 <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 800a960:	f7ff fe3a 	bl	800a5d8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a964:	2400      	movs	r4, #0
      break;
 800a966:	e004      	b.n	800a972 <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a968:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	4798      	blx	r3
 800a970:	4604      	mov	r4, r0
}
 800a972:	4620      	mov	r0, r4
 800a974:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800a976:	784d      	ldrb	r5, [r1, #1]
 800a978:	2d09      	cmp	r5, #9
 800a97a:	d81d      	bhi.n	800a9b8 <USBD_StdDevReq+0x6a>
 800a97c:	e8df f005 	tbb	[pc, r5]
 800a980:	161c1912 	.word	0x161c1912
 800a984:	1c05081c 	.word	0x1c05081c
 800a988:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800a98a:	f7ff fe2f 	bl	800a5ec <USBD_GetDescriptor>
          break;
 800a98e:	e7f0      	b.n	800a972 <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 800a990:	f7ff ff02 	bl	800a798 <USBD_SetAddress>
          break;
 800a994:	e7ed      	b.n	800a972 <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 800a996:	f7ff ff27 	bl	800a7e8 <USBD_SetConfig>
 800a99a:	4604      	mov	r4, r0
          break;
 800a99c:	e7e9      	b.n	800a972 <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 800a99e:	f7ff ff87 	bl	800a8b0 <USBD_GetConfig>
          break;
 800a9a2:	e7e6      	b.n	800a972 <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 800a9a4:	f7ff ffa4 	bl	800a8f0 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800a9a8:	462c      	mov	r4, r5
          break;
 800a9aa:	e7e2      	b.n	800a972 <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 800a9ac:	f7ff fdf6 	bl	800a59c <USBD_SetFeature>
          break;
 800a9b0:	e7df      	b.n	800a972 <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 800a9b2:	f7ff ffb9 	bl	800a928 <USBD_ClrFeature>
          break;
 800a9b6:	e7dc      	b.n	800a972 <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 800a9b8:	f7ff fe0e 	bl	800a5d8 <USBD_CtlError>
          break;
 800a9bc:	e7d9      	b.n	800a972 <USBD_StdDevReq+0x24>

0800a9be <USBD_StdItfReq>:
{
 800a9be:	b570      	push	{r4, r5, r6, lr}
 800a9c0:	4605      	mov	r5, r0
 800a9c2:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9c4:	780b      	ldrb	r3, [r1, #0]
 800a9c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9ca:	2b20      	cmp	r3, #32
 800a9cc:	d007      	beq.n	800a9de <USBD_StdItfReq+0x20>
 800a9ce:	2b40      	cmp	r3, #64	; 0x40
 800a9d0:	d005      	beq.n	800a9de <USBD_StdItfReq+0x20>
 800a9d2:	b123      	cbz	r3, 800a9de <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800a9d4:	f7ff fe00 	bl	800a5d8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a9d8:	2600      	movs	r6, #0
}
 800a9da:	4630      	mov	r0, r6
 800a9dc:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800a9de:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d818      	bhi.n	800aa1a <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a9e8:	7923      	ldrb	r3, [r4, #4]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d80f      	bhi.n	800aa0e <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9ee:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	4621      	mov	r1, r4
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	4798      	blx	r3
 800a9fa:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a9fc:	88e3      	ldrh	r3, [r4, #6]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1eb      	bne.n	800a9da <USBD_StdItfReq+0x1c>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	d1e9      	bne.n	800a9da <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800aa06:	4628      	mov	r0, r5
 800aa08:	f000 f94c 	bl	800aca4 <USBD_CtlSendStatus>
 800aa0c:	e7e5      	b.n	800a9da <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 800aa0e:	4621      	mov	r1, r4
 800aa10:	4628      	mov	r0, r5
 800aa12:	f7ff fde1 	bl	800a5d8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800aa16:	2600      	movs	r6, #0
 800aa18:	e7df      	b.n	800a9da <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 800aa1a:	4621      	mov	r1, r4
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	f7ff fddb 	bl	800a5d8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800aa22:	2600      	movs	r6, #0
          break;
 800aa24:	e7d9      	b.n	800a9da <USBD_StdItfReq+0x1c>

0800aa26 <USBD_StdEPReq>:
{
 800aa26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa28:	4606      	mov	r6, r0
 800aa2a:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800aa2c:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa2e:	780c      	ldrb	r4, [r1, #0]
 800aa30:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800aa34:	2c20      	cmp	r4, #32
 800aa36:	d008      	beq.n	800aa4a <USBD_StdEPReq+0x24>
 800aa38:	b2d9      	uxtb	r1, r3
 800aa3a:	2c40      	cmp	r4, #64	; 0x40
 800aa3c:	d005      	beq.n	800aa4a <USBD_StdEPReq+0x24>
 800aa3e:	b16c      	cbz	r4, 800aa5c <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 800aa40:	4629      	mov	r1, r5
 800aa42:	f7ff fdc9 	bl	800a5d8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800aa46:	2400      	movs	r4, #0
      break;
 800aa48:	e006      	b.n	800aa58 <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa4a:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	4629      	mov	r1, r5
 800aa52:	4630      	mov	r0, r6
 800aa54:	4798      	blx	r3
 800aa56:	4604      	mov	r4, r0
}
 800aa58:	4620      	mov	r0, r4
 800aa5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 800aa5c:	786f      	ldrb	r7, [r5, #1]
 800aa5e:	2f01      	cmp	r7, #1
 800aa60:	d02f      	beq.n	800aac2 <USBD_StdEPReq+0x9c>
 800aa62:	2f03      	cmp	r7, #3
 800aa64:	d005      	beq.n	800aa72 <USBD_StdEPReq+0x4c>
 800aa66:	2f00      	cmp	r7, #0
 800aa68:	d059      	beq.n	800ab1e <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 800aa6a:	4629      	mov	r1, r5
 800aa6c:	f7ff fdb4 	bl	800a5d8 <USBD_CtlError>
          break;
 800aa70:	e7f2      	b.n	800aa58 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800aa72:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d005      	beq.n	800aa88 <USBD_StdEPReq+0x62>
 800aa7c:	2b03      	cmp	r3, #3
 800aa7e:	d012      	beq.n	800aaa6 <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 800aa80:	4629      	mov	r1, r5
 800aa82:	f7ff fda9 	bl	800a5d8 <USBD_CtlError>
              break;
 800aa86:	e7e7      	b.n	800aa58 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa88:	b109      	cbz	r1, 800aa8e <USBD_StdEPReq+0x68>
 800aa8a:	2980      	cmp	r1, #128	; 0x80
 800aa8c:	d104      	bne.n	800aa98 <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 800aa8e:	4629      	mov	r1, r5
 800aa90:	4630      	mov	r0, r6
 800aa92:	f7ff fda1 	bl	800a5d8 <USBD_CtlError>
 800aa96:	e7df      	b.n	800aa58 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa98:	f000 faff 	bl	800b09a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa9c:	2180      	movs	r1, #128	; 0x80
 800aa9e:	4630      	mov	r0, r6
 800aaa0:	f000 fafb 	bl	800b09a <USBD_LL_StallEP>
 800aaa4:	e7d8      	b.n	800aa58 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aaa6:	886b      	ldrh	r3, [r5, #2]
 800aaa8:	b923      	cbnz	r3, 800aab4 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aaaa:	b119      	cbz	r1, 800aab4 <USBD_StdEPReq+0x8e>
 800aaac:	2980      	cmp	r1, #128	; 0x80
 800aaae:	d001      	beq.n	800aab4 <USBD_StdEPReq+0x8e>
 800aab0:	88eb      	ldrh	r3, [r5, #6]
 800aab2:	b11b      	cbz	r3, 800aabc <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 800aab4:	4630      	mov	r0, r6
 800aab6:	f000 f8f5 	bl	800aca4 <USBD_CtlSendStatus>
              break;
 800aaba:	e7cd      	b.n	800aa58 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aabc:	f000 faed 	bl	800b09a <USBD_LL_StallEP>
 800aac0:	e7f8      	b.n	800aab4 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 800aac2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d005      	beq.n	800aad8 <USBD_StdEPReq+0xb2>
 800aacc:	2b03      	cmp	r3, #3
 800aace:	d012      	beq.n	800aaf6 <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 800aad0:	4629      	mov	r1, r5
 800aad2:	f7ff fd81 	bl	800a5d8 <USBD_CtlError>
              break;
 800aad6:	e7bf      	b.n	800aa58 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aad8:	b109      	cbz	r1, 800aade <USBD_StdEPReq+0xb8>
 800aada:	2980      	cmp	r1, #128	; 0x80
 800aadc:	d104      	bne.n	800aae8 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 800aade:	4629      	mov	r1, r5
 800aae0:	4630      	mov	r0, r6
 800aae2:	f7ff fd79 	bl	800a5d8 <USBD_CtlError>
 800aae6:	e7b7      	b.n	800aa58 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aae8:	f000 fad7 	bl	800b09a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aaec:	2180      	movs	r1, #128	; 0x80
 800aaee:	4630      	mov	r0, r6
 800aaf0:	f000 fad3 	bl	800b09a <USBD_LL_StallEP>
 800aaf4:	e7b0      	b.n	800aa58 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aaf6:	886b      	ldrh	r3, [r5, #2]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d1ad      	bne.n	800aa58 <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 800aafc:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800ab00:	d10a      	bne.n	800ab18 <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 800ab02:	4630      	mov	r0, r6
 800ab04:	f000 f8ce 	bl	800aca4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab08:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	4629      	mov	r1, r5
 800ab10:	4630      	mov	r0, r6
 800ab12:	4798      	blx	r3
 800ab14:	4604      	mov	r4, r0
 800ab16:	e79f      	b.n	800aa58 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab18:	f000 fac7 	bl	800b0aa <USBD_LL_ClearStallEP>
 800ab1c:	e7f1      	b.n	800ab02 <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 800ab1e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800ab22:	b2d2      	uxtb	r2, r2
 800ab24:	2a02      	cmp	r2, #2
 800ab26:	d006      	beq.n	800ab36 <USBD_StdEPReq+0x110>
 800ab28:	2a03      	cmp	r2, #3
 800ab2a:	d029      	beq.n	800ab80 <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	f7ff fd53 	bl	800a5d8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ab32:	463c      	mov	r4, r7
              break;
 800ab34:	e790      	b.n	800aa58 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab36:	b109      	cbz	r1, 800ab3c <USBD_StdEPReq+0x116>
 800ab38:	2980      	cmp	r1, #128	; 0x80
 800ab3a:	d113      	bne.n	800ab64 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ab40:	d115      	bne.n	800ab6e <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab42:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab46:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ab4a:	0089      	lsls	r1, r1, #2
 800ab4c:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800ab50:	4431      	add	r1, r6
 800ab52:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800ab54:	2300      	movs	r3, #0
 800ab56:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab58:	2202      	movs	r2, #2
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f000 f876 	bl	800ac4c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800ab60:	463c      	mov	r4, r7
              break;
 800ab62:	e779      	b.n	800aa58 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 800ab64:	4629      	mov	r1, r5
 800ab66:	f7ff fd37 	bl	800a5d8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ab6a:	463c      	mov	r4, r7
                break;
 800ab6c:	e774      	b.n	800aa58 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab6e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800ab72:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ab76:	0089      	lsls	r1, r1, #2
 800ab78:	3110      	adds	r1, #16
 800ab7a:	4431      	add	r1, r6
 800ab7c:	3104      	adds	r1, #4
 800ab7e:	e7e9      	b.n	800ab54 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 800ab80:	b25b      	sxtb	r3, r3
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	db1f      	blt.n	800abc6 <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab86:	f001 020f 	and.w	r2, r1, #15
 800ab8a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800ab8e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ab92:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800ab96:	b322      	cbz	r2, 800abe2 <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	db27      	blt.n	800abec <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab9c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aba0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800aba4:	009c      	lsls	r4, r3, #2
 800aba6:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 800abaa:	4434      	add	r4, r6
 800abac:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800abae:	b109      	cbz	r1, 800abb4 <USBD_StdEPReq+0x18e>
 800abb0:	2980      	cmp	r1, #128	; 0x80
 800abb2:	d124      	bne.n	800abfe <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 800abb4:	2300      	movs	r3, #0
 800abb6:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abb8:	2202      	movs	r2, #2
 800abba:	4621      	mov	r1, r4
 800abbc:	4630      	mov	r0, r6
 800abbe:	f000 f845 	bl	800ac4c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800abc2:	463c      	mov	r4, r7
              break;
 800abc4:	e748      	b.n	800aa58 <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800abc6:	f001 020f 	and.w	r2, r1, #15
 800abca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800abce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800abd2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800abd4:	2a00      	cmp	r2, #0
 800abd6:	d1df      	bne.n	800ab98 <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 800abd8:	4629      	mov	r1, r5
 800abda:	f7ff fcfd 	bl	800a5d8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800abde:	463c      	mov	r4, r7
                  break;
 800abe0:	e73a      	b.n	800aa58 <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 800abe2:	4629      	mov	r1, r5
 800abe4:	f7ff fcf8 	bl	800a5d8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800abe8:	463c      	mov	r4, r7
                  break;
 800abea:	e735      	b.n	800aa58 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abec:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800abf0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800abf4:	009c      	lsls	r4, r3, #2
 800abf6:	3410      	adds	r4, #16
 800abf8:	4434      	add	r4, r6
 800abfa:	3404      	adds	r4, #4
 800abfc:	e7d7      	b.n	800abae <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800abfe:	4630      	mov	r0, r6
 800ac00:	f000 fa5b 	bl	800b0ba <USBD_LL_IsStallEP>
 800ac04:	b110      	cbz	r0, 800ac0c <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 800ac06:	2301      	movs	r3, #1
 800ac08:	6023      	str	r3, [r4, #0]
 800ac0a:	e7d5      	b.n	800abb8 <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	6023      	str	r3, [r4, #0]
 800ac10:	e7d2      	b.n	800abb8 <USBD_StdEPReq+0x192>

0800ac12 <USBD_GetString>:
  if (desc == NULL)
 800ac12:	b1d0      	cbz	r0, 800ac4a <USBD_GetString+0x38>
{
 800ac14:	b570      	push	{r4, r5, r6, lr}
 800ac16:	460d      	mov	r5, r1
 800ac18:	4616      	mov	r6, r2
 800ac1a:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ac1c:	f7ff fcb4 	bl	800a588 <USBD_GetLen>
 800ac20:	1c43      	adds	r3, r0, #1
 800ac22:	005b      	lsls	r3, r3, #1
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800ac28:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ac2a:	2303      	movs	r3, #3
 800ac2c:	706b      	strb	r3, [r5, #1]
  idx++;
 800ac2e:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800ac30:	e007      	b.n	800ac42 <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 800ac32:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800ac34:	3401      	adds	r4, #1
    idx++;
 800ac36:	1c5a      	adds	r2, r3, #1
 800ac38:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	54a9      	strb	r1, [r5, r2]
    idx++;
 800ac3e:	3302      	adds	r3, #2
 800ac40:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800ac42:	7822      	ldrb	r2, [r4, #0]
 800ac44:	2a00      	cmp	r2, #0
 800ac46:	d1f4      	bne.n	800ac32 <USBD_GetString+0x20>
}
 800ac48:	bd70      	pop	{r4, r5, r6, pc}
 800ac4a:	4770      	bx	lr

0800ac4c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ac4c:	b508      	push	{r3, lr}
 800ac4e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ac50:	2202      	movs	r2, #2
 800ac52:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ac56:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ac58:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac5a:	460a      	mov	r2, r1
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	f000 fa4b 	bl	800b0f8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800ac62:	2000      	movs	r0, #0
 800ac64:	bd08      	pop	{r3, pc}

0800ac66 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ac66:	b508      	push	{r3, lr}
 800ac68:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac6a:	460a      	mov	r2, r1
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	f000 fa43 	bl	800b0f8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800ac72:	2000      	movs	r0, #0
 800ac74:	bd08      	pop	{r3, pc}

0800ac76 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ac76:	b508      	push	{r3, lr}
 800ac78:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ac7a:	2203      	movs	r2, #3
 800ac7c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ac80:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ac84:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac88:	460a      	mov	r2, r1
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	f000 fa3c 	bl	800b108 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ac90:	2000      	movs	r0, #0
 800ac92:	bd08      	pop	{r3, pc}

0800ac94 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ac94:	b508      	push	{r3, lr}
 800ac96:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac98:	460a      	mov	r2, r1
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	f000 fa34 	bl	800b108 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800aca0:	2000      	movs	r0, #0
 800aca2:	bd08      	pop	{r3, pc}

0800aca4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aca4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aca6:	2204      	movs	r2, #4
 800aca8:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800acac:	2300      	movs	r3, #0
 800acae:	461a      	mov	r2, r3
 800acb0:	4619      	mov	r1, r3
 800acb2:	f000 fa21 	bl	800b0f8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800acb6:	2000      	movs	r0, #0
 800acb8:	bd08      	pop	{r3, pc}

0800acba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800acba:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800acbc:	2205      	movs	r2, #5
 800acbe:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acc2:	2300      	movs	r3, #0
 800acc4:	461a      	mov	r2, r3
 800acc6:	4619      	mov	r1, r3
 800acc8:	f000 fa1e 	bl	800b108 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800accc:	2000      	movs	r0, #0
 800acce:	bd08      	pop	{r3, pc}

0800acd0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800acd0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800acd2:	2200      	movs	r2, #0
 800acd4:	490f      	ldr	r1, [pc, #60]	; (800ad14 <MX_USB_Device_Init+0x44>)
 800acd6:	4810      	ldr	r0, [pc, #64]	; (800ad18 <MX_USB_Device_Init+0x48>)
 800acd8:	f7ff faf1 	bl	800a2be <USBD_Init>
 800acdc:	b970      	cbnz	r0, 800acfc <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800acde:	490f      	ldr	r1, [pc, #60]	; (800ad1c <MX_USB_Device_Init+0x4c>)
 800ace0:	480d      	ldr	r0, [pc, #52]	; (800ad18 <MX_USB_Device_Init+0x48>)
 800ace2:	f7ff fb03 	bl	800a2ec <USBD_RegisterClass>
 800ace6:	b960      	cbnz	r0, 800ad02 <MX_USB_Device_Init+0x32>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800ace8:	490d      	ldr	r1, [pc, #52]	; (800ad20 <MX_USB_Device_Init+0x50>)
 800acea:	480b      	ldr	r0, [pc, #44]	; (800ad18 <MX_USB_Device_Init+0x48>)
 800acec:	f7ff fab3 	bl	800a256 <USBD_CDC_RegisterInterface>
 800acf0:	b950      	cbnz	r0, 800ad08 <MX_USB_Device_Init+0x38>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800acf2:	4809      	ldr	r0, [pc, #36]	; (800ad18 <MX_USB_Device_Init+0x48>)
 800acf4:	f7ff fb11 	bl	800a31a <USBD_Start>
 800acf8:	b948      	cbnz	r0, 800ad0e <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800acfa:	bd08      	pop	{r3, pc}
    Error_Handler();
 800acfc:	f7f7 f93c 	bl	8001f78 <Error_Handler>
 800ad00:	e7ed      	b.n	800acde <MX_USB_Device_Init+0xe>
    Error_Handler();
 800ad02:	f7f7 f939 	bl	8001f78 <Error_Handler>
 800ad06:	e7ef      	b.n	800ace8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800ad08:	f7f7 f936 	bl	8001f78 <Error_Handler>
 800ad0c:	e7f1      	b.n	800acf2 <MX_USB_Device_Init+0x22>
    Error_Handler();
 800ad0e:	f7f7 f933 	bl	8001f78 <Error_Handler>
}
 800ad12:	e7f2      	b.n	800acfa <MX_USB_Device_Init+0x2a>
 800ad14:	200001dc 	.word	0x200001dc
 800ad18:	20000db0 	.word	0x20000db0
 800ad1c:	200000b8 	.word	0x200000b8
 800ad20:	200001c8 	.word	0x200001c8

0800ad24 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800ad24:	2000      	movs	r0, #0
 800ad26:	4770      	bx	lr

0800ad28 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800ad28:	2000      	movs	r0, #0
 800ad2a:	4770      	bx	lr

0800ad2c <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	4770      	bx	lr

0800ad30 <CDC_Receive_FS>:
{
 800ad30:	b510      	push	{r4, lr}
 800ad32:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ad34:	4c04      	ldr	r4, [pc, #16]	; (800ad48 <CDC_Receive_FS+0x18>)
 800ad36:	4620      	mov	r0, r4
 800ad38:	f7ff fa9f 	bl	800a27a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	f7ff faa5 	bl	800a28c <USBD_CDC_ReceivePacket>
}
 800ad42:	2000      	movs	r0, #0
 800ad44:	bd10      	pop	{r4, pc}
 800ad46:	bf00      	nop
 800ad48:	20000db0 	.word	0x20000db0

0800ad4c <CDC_Init_FS>:
{
 800ad4c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ad4e:	4c06      	ldr	r4, [pc, #24]	; (800ad68 <CDC_Init_FS+0x1c>)
 800ad50:	2200      	movs	r2, #0
 800ad52:	4906      	ldr	r1, [pc, #24]	; (800ad6c <CDC_Init_FS+0x20>)
 800ad54:	4620      	mov	r0, r4
 800ad56:	f7ff fa85 	bl	800a264 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ad5a:	4905      	ldr	r1, [pc, #20]	; (800ad70 <CDC_Init_FS+0x24>)
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	f7ff fa8c 	bl	800a27a <USBD_CDC_SetRxBuffer>
}
 800ad62:	2000      	movs	r0, #0
 800ad64:	bd10      	pop	{r4, pc}
 800ad66:	bf00      	nop
 800ad68:	20000db0 	.word	0x20000db0
 800ad6c:	20001880 	.word	0x20001880
 800ad70:	20001080 	.word	0x20001080

0800ad74 <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ad74:	2312      	movs	r3, #18
 800ad76:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 800ad78:	4800      	ldr	r0, [pc, #0]	; (800ad7c <USBD_CDC_DeviceDescriptor+0x8>)
 800ad7a:	4770      	bx	lr
 800ad7c:	200001fc 	.word	0x200001fc

0800ad80 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ad80:	2304      	movs	r3, #4
 800ad82:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800ad84:	4800      	ldr	r0, [pc, #0]	; (800ad88 <USBD_CDC_LangIDStrDescriptor+0x8>)
 800ad86:	4770      	bx	lr
 800ad88:	20000210 	.word	0x20000210

0800ad8c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d21e      	bcs.n	800add0 <IntToUnicode+0x44>
{
 800ad92:	b500      	push	{lr}
 800ad94:	e010      	b.n	800adb8 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad96:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 800ad9a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 800ad9e:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800ada0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800ada4:	f10c 0c01 	add.w	ip, ip, #1
 800ada8:	f04f 0e00 	mov.w	lr, #0
 800adac:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 800adb0:	3301      	adds	r3, #1
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d209      	bcs.n	800adcc <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 800adb8:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 800adbc:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 800adc0:	d2e9      	bcs.n	800ad96 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800adc2:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800adc6:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800adca:	e7e8      	b.n	800ad9e <IntToUnicode+0x12>
  }
}
 800adcc:	f85d fb04 	ldr.w	pc, [sp], #4
 800add0:	4770      	bx	lr
	...

0800add4 <Get_SerialNum>:
{
 800add4:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800add6:	4b0b      	ldr	r3, [pc, #44]	; (800ae04 <Get_SerialNum+0x30>)
 800add8:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800addc:	f8d3 4594 	ldr.w	r4, [r3, #1428]	; 0x594
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ade0:	f8d3 3598 	ldr.w	r3, [r3, #1432]	; 0x598
  if (deviceserial0 != 0)
 800ade4:	18c0      	adds	r0, r0, r3
 800ade6:	d100      	bne.n	800adea <Get_SerialNum+0x16>
}
 800ade8:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800adea:	4d07      	ldr	r5, [pc, #28]	; (800ae08 <Get_SerialNum+0x34>)
 800adec:	2208      	movs	r2, #8
 800adee:	1ca9      	adds	r1, r5, #2
 800adf0:	f7ff ffcc 	bl	800ad8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800adf4:	2204      	movs	r2, #4
 800adf6:	f105 0112 	add.w	r1, r5, #18
 800adfa:	4620      	mov	r0, r4
 800adfc:	f7ff ffc6 	bl	800ad8c <IntToUnicode>
}
 800ae00:	e7f2      	b.n	800ade8 <Get_SerialNum+0x14>
 800ae02:	bf00      	nop
 800ae04:	1fff7000 	.word	0x1fff7000
 800ae08:	20000214 	.word	0x20000214

0800ae0c <USBD_CDC_SerialStrDescriptor>:
{
 800ae0c:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800ae0e:	231a      	movs	r3, #26
 800ae10:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800ae12:	f7ff ffdf 	bl	800add4 <Get_SerialNum>
}
 800ae16:	4801      	ldr	r0, [pc, #4]	; (800ae1c <USBD_CDC_SerialStrDescriptor+0x10>)
 800ae18:	bd08      	pop	{r3, pc}
 800ae1a:	bf00      	nop
 800ae1c:	20000214 	.word	0x20000214

0800ae20 <USBD_CDC_ProductStrDescriptor>:
{
 800ae20:	b508      	push	{r3, lr}
 800ae22:	460a      	mov	r2, r1
  if(speed == 0)
 800ae24:	b928      	cbnz	r0, 800ae32 <USBD_CDC_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ae26:	4905      	ldr	r1, [pc, #20]	; (800ae3c <USBD_CDC_ProductStrDescriptor+0x1c>)
 800ae28:	4805      	ldr	r0, [pc, #20]	; (800ae40 <USBD_CDC_ProductStrDescriptor+0x20>)
 800ae2a:	f7ff fef2 	bl	800ac12 <USBD_GetString>
}
 800ae2e:	4803      	ldr	r0, [pc, #12]	; (800ae3c <USBD_CDC_ProductStrDescriptor+0x1c>)
 800ae30:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ae32:	4902      	ldr	r1, [pc, #8]	; (800ae3c <USBD_CDC_ProductStrDescriptor+0x1c>)
 800ae34:	4802      	ldr	r0, [pc, #8]	; (800ae40 <USBD_CDC_ProductStrDescriptor+0x20>)
 800ae36:	f7ff feec 	bl	800ac12 <USBD_GetString>
 800ae3a:	e7f8      	b.n	800ae2e <USBD_CDC_ProductStrDescriptor+0xe>
 800ae3c:	20002080 	.word	0x20002080
 800ae40:	08010764 	.word	0x08010764

0800ae44 <USBD_CDC_ManufacturerStrDescriptor>:
{
 800ae44:	b510      	push	{r4, lr}
 800ae46:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ae48:	4c03      	ldr	r4, [pc, #12]	; (800ae58 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 800ae4a:	4621      	mov	r1, r4
 800ae4c:	4803      	ldr	r0, [pc, #12]	; (800ae5c <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 800ae4e:	f7ff fee0 	bl	800ac12 <USBD_GetString>
}
 800ae52:	4620      	mov	r0, r4
 800ae54:	bd10      	pop	{r4, pc}
 800ae56:	bf00      	nop
 800ae58:	20002080 	.word	0x20002080
 800ae5c:	0801077c 	.word	0x0801077c

0800ae60 <USBD_CDC_ConfigStrDescriptor>:
{
 800ae60:	b508      	push	{r3, lr}
 800ae62:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800ae64:	b928      	cbnz	r0, 800ae72 <USBD_CDC_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ae66:	4905      	ldr	r1, [pc, #20]	; (800ae7c <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800ae68:	4805      	ldr	r0, [pc, #20]	; (800ae80 <USBD_CDC_ConfigStrDescriptor+0x20>)
 800ae6a:	f7ff fed2 	bl	800ac12 <USBD_GetString>
}
 800ae6e:	4803      	ldr	r0, [pc, #12]	; (800ae7c <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800ae70:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ae72:	4902      	ldr	r1, [pc, #8]	; (800ae7c <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800ae74:	4802      	ldr	r0, [pc, #8]	; (800ae80 <USBD_CDC_ConfigStrDescriptor+0x20>)
 800ae76:	f7ff fecc 	bl	800ac12 <USBD_GetString>
 800ae7a:	e7f8      	b.n	800ae6e <USBD_CDC_ConfigStrDescriptor+0xe>
 800ae7c:	20002080 	.word	0x20002080
 800ae80:	08010790 	.word	0x08010790

0800ae84 <USBD_CDC_InterfaceStrDescriptor>:
{
 800ae84:	b508      	push	{r3, lr}
 800ae86:	460a      	mov	r2, r1
  if(speed == 0)
 800ae88:	b928      	cbnz	r0, 800ae96 <USBD_CDC_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ae8a:	4905      	ldr	r1, [pc, #20]	; (800aea0 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800ae8c:	4805      	ldr	r0, [pc, #20]	; (800aea4 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 800ae8e:	f7ff fec0 	bl	800ac12 <USBD_GetString>
}
 800ae92:	4803      	ldr	r0, [pc, #12]	; (800aea0 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800ae94:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ae96:	4902      	ldr	r1, [pc, #8]	; (800aea0 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800ae98:	4802      	ldr	r0, [pc, #8]	; (800aea4 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 800ae9a:	f7ff feba 	bl	800ac12 <USBD_GetString>
 800ae9e:	e7f8      	b.n	800ae92 <USBD_CDC_InterfaceStrDescriptor+0xe>
 800aea0:	20002080 	.word	0x20002080
 800aea4:	0801079c 	.word	0x0801079c

0800aea8 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800aea8:	2803      	cmp	r0, #3
 800aeaa:	d805      	bhi.n	800aeb8 <USBD_Get_USB_Status+0x10>
 800aeac:	e8df f000 	tbb	[pc, r0]
 800aeb0:	05020405 	.word	0x05020405
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aeb4:	2001      	movs	r0, #1
    break;
 800aeb6:	4770      	bx	lr
      usb_status = USBD_FAIL;
 800aeb8:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800aeba:	4770      	bx	lr

0800aebc <SystemClockConfig_Resume>:
{
 800aebc:	b508      	push	{r3, lr}
  SystemClock_Config();
 800aebe:	f7f7 f85d 	bl	8001f7c <SystemClock_Config>
}
 800aec2:	bd08      	pop	{r3, pc}

0800aec4 <HAL_PCD_MspInit>:
{
 800aec4:	b510      	push	{r4, lr}
 800aec6:	b096      	sub	sp, #88	; 0x58
 800aec8:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800aeca:	2254      	movs	r2, #84	; 0x54
 800aecc:	2100      	movs	r1, #0
 800aece:	a801      	add	r0, sp, #4
 800aed0:	f000 f984 	bl	800b1dc <memset>
  if(pcdHandle->Instance==USB)
 800aed4:	6822      	ldr	r2, [r4, #0]
 800aed6:	4b11      	ldr	r3, [pc, #68]	; (800af1c <HAL_PCD_MspInit+0x58>)
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d001      	beq.n	800aee0 <HAL_PCD_MspInit+0x1c>
}
 800aedc:	b016      	add	sp, #88	; 0x58
 800aede:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800aee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aee4:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800aee6:	a801      	add	r0, sp, #4
 800aee8:	f7fc f85c 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 800aeec:	b990      	cbnz	r0, 800af14 <HAL_PCD_MspInit+0x50>
    __HAL_RCC_USB_CLK_ENABLE();
 800aeee:	4b0c      	ldr	r3, [pc, #48]	; (800af20 <HAL_PCD_MspInit+0x5c>)
 800aef0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aef2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800aef6:	659a      	str	r2, [r3, #88]	; 0x58
 800aef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aefa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aefe:	9300      	str	r3, [sp, #0]
 800af00:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800af02:	2200      	movs	r2, #0
 800af04:	4611      	mov	r1, r2
 800af06:	2014      	movs	r0, #20
 800af08:	f7f9 f918 	bl	800413c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800af0c:	2014      	movs	r0, #20
 800af0e:	f7f9 f94d 	bl	80041ac <HAL_NVIC_EnableIRQ>
}
 800af12:	e7e3      	b.n	800aedc <HAL_PCD_MspInit+0x18>
      Error_Handler();
 800af14:	f7f7 f830 	bl	8001f78 <Error_Handler>
 800af18:	e7e9      	b.n	800aeee <HAL_PCD_MspInit+0x2a>
 800af1a:	bf00      	nop
 800af1c:	40005c00 	.word	0x40005c00
 800af20:	40021000 	.word	0x40021000

0800af24 <HAL_PCD_SetupStageCallback>:
{
 800af24:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800af26:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800af2a:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800af2e:	f7ff fa09 	bl	800a344 <USBD_LL_SetupStage>
}
 800af32:	bd08      	pop	{r3, pc}

0800af34 <HAL_PCD_DataOutStageCallback>:
{
 800af34:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800af36:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800af3a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800af3e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800af42:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800af46:	f7ff fa29 	bl	800a39c <USBD_LL_DataOutStage>
}
 800af4a:	bd08      	pop	{r3, pc}

0800af4c <HAL_PCD_DataInStageCallback>:
{
 800af4c:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800af4e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800af52:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800af56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af58:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800af5c:	f7ff fa5a 	bl	800a414 <USBD_LL_DataInStage>
}
 800af60:	bd08      	pop	{r3, pc}

0800af62 <HAL_PCD_SOFCallback>:
{
 800af62:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800af64:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800af68:	f7ff fafa 	bl	800a560 <USBD_LL_SOF>
}
 800af6c:	bd08      	pop	{r3, pc}

0800af6e <HAL_PCD_ResetCallback>:
{
 800af6e:	b510      	push	{r4, lr}
 800af70:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800af72:	6883      	ldr	r3, [r0, #8]
 800af74:	2b02      	cmp	r3, #2
 800af76:	d109      	bne.n	800af8c <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af78:	2101      	movs	r1, #1
 800af7a:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800af7e:	f7ff fad5 	bl	800a52c <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af82:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800af86:	f7ff faa4 	bl	800a4d2 <USBD_LL_Reset>
}
 800af8a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800af8c:	f7f6 fff4 	bl	8001f78 <Error_Handler>
 800af90:	e7f2      	b.n	800af78 <HAL_PCD_ResetCallback+0xa>
	...

0800af94 <HAL_PCD_SuspendCallback>:
{
 800af94:	b510      	push	{r4, lr}
 800af96:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af98:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800af9c:	f7ff fac9 	bl	800a532 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800afa0:	69a3      	ldr	r3, [r4, #24]
 800afa2:	b123      	cbz	r3, 800afae <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800afa4:	4a02      	ldr	r2, [pc, #8]	; (800afb0 <HAL_PCD_SuspendCallback+0x1c>)
 800afa6:	6913      	ldr	r3, [r2, #16]
 800afa8:	f043 0306 	orr.w	r3, r3, #6
 800afac:	6113      	str	r3, [r2, #16]
}
 800afae:	bd10      	pop	{r4, pc}
 800afb0:	e000ed00 	.word	0xe000ed00

0800afb4 <HAL_PCD_ResumeCallback>:
{
 800afb4:	b510      	push	{r4, lr}
 800afb6:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800afb8:	6983      	ldr	r3, [r0, #24]
 800afba:	b923      	cbnz	r3, 800afc6 <HAL_PCD_ResumeCallback+0x12>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800afbc:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800afc0:	f7ff fac1 	bl	800a546 <USBD_LL_Resume>
}
 800afc4:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800afc6:	4a04      	ldr	r2, [pc, #16]	; (800afd8 <HAL_PCD_ResumeCallback+0x24>)
 800afc8:	6913      	ldr	r3, [r2, #16]
 800afca:	f023 0306 	bic.w	r3, r3, #6
 800afce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800afd0:	f7ff ff74 	bl	800aebc <SystemClockConfig_Resume>
 800afd4:	e7f2      	b.n	800afbc <HAL_PCD_ResumeCallback+0x8>
 800afd6:	bf00      	nop
 800afd8:	e000ed00 	.word	0xe000ed00

0800afdc <USBD_LL_Init>:
{
 800afdc:	b510      	push	{r4, lr}
 800afde:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800afe0:	481e      	ldr	r0, [pc, #120]	; (800b05c <USBD_LL_Init+0x80>)
 800afe2:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800afe6:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Instance = USB;
 800afea:	4b1d      	ldr	r3, [pc, #116]	; (800b060 <USBD_LL_Init+0x84>)
 800afec:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800afee:	2308      	movs	r3, #8
 800aff0:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800aff2:	2302      	movs	r3, #2
 800aff4:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aff6:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800aff8:	2300      	movs	r3, #0
 800affa:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800affc:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800affe:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b000:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b002:	f7fa fb46 	bl	8005692 <HAL_PCD_Init>
 800b006:	bb30      	cbnz	r0, 800b056 <USBD_LL_Init+0x7a>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b008:	2318      	movs	r3, #24
 800b00a:	2200      	movs	r2, #0
 800b00c:	4611      	mov	r1, r2
 800b00e:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b012:	f7fb fa78 	bl	8006506 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b016:	2358      	movs	r3, #88	; 0x58
 800b018:	2200      	movs	r2, #0
 800b01a:	2180      	movs	r1, #128	; 0x80
 800b01c:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b020:	f7fb fa71 	bl	8006506 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b024:	23c0      	movs	r3, #192	; 0xc0
 800b026:	2200      	movs	r2, #0
 800b028:	2181      	movs	r1, #129	; 0x81
 800b02a:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b02e:	f7fb fa6a 	bl	8006506 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b032:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b036:	2200      	movs	r2, #0
 800b038:	2101      	movs	r1, #1
 800b03a:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b03e:	f7fb fa62 	bl	8006506 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b042:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b046:	2200      	movs	r2, #0
 800b048:	2182      	movs	r1, #130	; 0x82
 800b04a:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800b04e:	f7fb fa5a 	bl	8006506 <HAL_PCDEx_PMAConfig>
}
 800b052:	2000      	movs	r0, #0
 800b054:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800b056:	f7f6 ff8f 	bl	8001f78 <Error_Handler>
 800b05a:	e7d5      	b.n	800b008 <USBD_LL_Init+0x2c>
 800b05c:	20002280 	.word	0x20002280
 800b060:	40005c00 	.word	0x40005c00

0800b064 <USBD_LL_Start>:
{
 800b064:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800b066:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b06a:	f7fa fb84 	bl	8005776 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b06e:	f7ff ff1b 	bl	800aea8 <USBD_Get_USB_Status>
}
 800b072:	bd08      	pop	{r3, pc}

0800b074 <USBD_LL_OpenEP>:
{
 800b074:	b508      	push	{r3, lr}
 800b076:	4694      	mov	ip, r2
 800b078:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b07a:	4663      	mov	r3, ip
 800b07c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b080:	f7fb f90a 	bl	8006298 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b084:	f7ff ff10 	bl	800aea8 <USBD_Get_USB_Status>
}
 800b088:	bd08      	pop	{r3, pc}

0800b08a <USBD_LL_CloseEP>:
{
 800b08a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b08c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b090:	f7fb f944 	bl	800631c <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b094:	f7ff ff08 	bl	800aea8 <USBD_Get_USB_Status>
}
 800b098:	bd08      	pop	{r3, pc}

0800b09a <USBD_LL_StallEP>:
{
 800b09a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b09c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b0a0:	f7fb f9c1 	bl	8006426 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0a4:	f7ff ff00 	bl	800aea8 <USBD_Get_USB_Status>
}
 800b0a8:	bd08      	pop	{r3, pc}

0800b0aa <USBD_LL_ClearStallEP>:
{
 800b0aa:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b0ac:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b0b0:	f7fb f9ee 	bl	8006490 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0b4:	f7ff fef8 	bl	800aea8 <USBD_Get_USB_Status>
}
 800b0b8:	bd08      	pop	{r3, pc}

0800b0ba <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b0ba:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800b0be:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b0c2:	d108      	bne.n	800b0d6 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b0c4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800b0c8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b0cc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b0d0:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800b0d4:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b0d6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800b0da:	3101      	adds	r1, #1
 800b0dc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b0e0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b0e4:	7888      	ldrb	r0, [r1, #2]
 800b0e6:	4770      	bx	lr

0800b0e8 <USBD_LL_SetUSBAddress>:
{
 800b0e8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b0ea:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b0ee:	f7fa ffe6 	bl	80060be <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0f2:	f7ff fed9 	bl	800aea8 <USBD_Get_USB_Status>
}
 800b0f6:	bd08      	pop	{r3, pc}

0800b0f8 <USBD_LL_Transmit>:
{
 800b0f8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b0fa:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b0fe:	f7fb f96a 	bl	80063d6 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b102:	f7ff fed1 	bl	800aea8 <USBD_Get_USB_Status>
}
 800b106:	bd08      	pop	{r3, pc}

0800b108 <USBD_LL_PrepareReceive>:
{
 800b108:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b10a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b10e:	f7fb f937 	bl	8006380 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b112:	f7ff fec9 	bl	800aea8 <USBD_Get_USB_Status>
}
 800b116:	bd08      	pop	{r3, pc}

0800b118 <USBD_LL_GetRxDataSize>:
{
 800b118:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b11a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b11e:	f7fb f951 	bl	80063c4 <HAL_PCD_EP_GetRxCount>
}
 800b122:	bd08      	pop	{r3, pc}

0800b124 <HAL_PCDEx_LPM_Callback>:
{
 800b124:	b510      	push	{r4, lr}
 800b126:	4604      	mov	r4, r0
  switch (msg)
 800b128:	b111      	cbz	r1, 800b130 <HAL_PCDEx_LPM_Callback+0xc>
 800b12a:	2901      	cmp	r1, #1
 800b12c:	d00f      	beq.n	800b14e <HAL_PCDEx_LPM_Callback+0x2a>
}
 800b12e:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 800b130:	6983      	ldr	r3, [r0, #24]
 800b132:	b923      	cbnz	r3, 800b13e <HAL_PCDEx_LPM_Callback+0x1a>
    USBD_LL_Resume(hpcd->pData);
 800b134:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800b138:	f7ff fa05 	bl	800a546 <USBD_LL_Resume>
    break;
 800b13c:	e7f7      	b.n	800b12e <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 800b13e:	f7ff febd 	bl	800aebc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b142:	4a09      	ldr	r2, [pc, #36]	; (800b168 <HAL_PCDEx_LPM_Callback+0x44>)
 800b144:	6913      	ldr	r3, [r2, #16]
 800b146:	f023 0306 	bic.w	r3, r3, #6
 800b14a:	6113      	str	r3, [r2, #16]
 800b14c:	e7f2      	b.n	800b134 <HAL_PCDEx_LPM_Callback+0x10>
    USBD_LL_Suspend(hpcd->pData);
 800b14e:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800b152:	f7ff f9ee 	bl	800a532 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b156:	69a3      	ldr	r3, [r4, #24]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d0e8      	beq.n	800b12e <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b15c:	4a02      	ldr	r2, [pc, #8]	; (800b168 <HAL_PCDEx_LPM_Callback+0x44>)
 800b15e:	6913      	ldr	r3, [r2, #16]
 800b160:	f043 0306 	orr.w	r3, r3, #6
 800b164:	6113      	str	r3, [r2, #16]
}
 800b166:	e7e2      	b.n	800b12e <HAL_PCDEx_LPM_Callback+0xa>
 800b168:	e000ed00 	.word	0xe000ed00

0800b16c <USBD_static_malloc>:
}
 800b16c:	4800      	ldr	r0, [pc, #0]	; (800b170 <USBD_static_malloc+0x4>)
 800b16e:	4770      	bx	lr
 800b170:	20002574 	.word	0x20002574

0800b174 <USBD_static_free>:
}
 800b174:	4770      	bx	lr
	...

0800b178 <__errno>:
 800b178:	4b01      	ldr	r3, [pc, #4]	; (800b180 <__errno+0x8>)
 800b17a:	6818      	ldr	r0, [r3, #0]
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	20000230 	.word	0x20000230

0800b184 <__libc_init_array>:
 800b184:	b570      	push	{r4, r5, r6, lr}
 800b186:	4d0d      	ldr	r5, [pc, #52]	; (800b1bc <__libc_init_array+0x38>)
 800b188:	4c0d      	ldr	r4, [pc, #52]	; (800b1c0 <__libc_init_array+0x3c>)
 800b18a:	1b64      	subs	r4, r4, r5
 800b18c:	10a4      	asrs	r4, r4, #2
 800b18e:	2600      	movs	r6, #0
 800b190:	42a6      	cmp	r6, r4
 800b192:	d109      	bne.n	800b1a8 <__libc_init_array+0x24>
 800b194:	4d0b      	ldr	r5, [pc, #44]	; (800b1c4 <__libc_init_array+0x40>)
 800b196:	4c0c      	ldr	r4, [pc, #48]	; (800b1c8 <__libc_init_array+0x44>)
 800b198:	f004 fc8e 	bl	800fab8 <_init>
 800b19c:	1b64      	subs	r4, r4, r5
 800b19e:	10a4      	asrs	r4, r4, #2
 800b1a0:	2600      	movs	r6, #0
 800b1a2:	42a6      	cmp	r6, r4
 800b1a4:	d105      	bne.n	800b1b2 <__libc_init_array+0x2e>
 800b1a6:	bd70      	pop	{r4, r5, r6, pc}
 800b1a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1ac:	4798      	blx	r3
 800b1ae:	3601      	adds	r6, #1
 800b1b0:	e7ee      	b.n	800b190 <__libc_init_array+0xc>
 800b1b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1b6:	4798      	blx	r3
 800b1b8:	3601      	adds	r6, #1
 800b1ba:	e7f2      	b.n	800b1a2 <__libc_init_array+0x1e>
 800b1bc:	08010c5c 	.word	0x08010c5c
 800b1c0:	08010c5c 	.word	0x08010c5c
 800b1c4:	08010c5c 	.word	0x08010c5c
 800b1c8:	08010c60 	.word	0x08010c60

0800b1cc <malloc>:
 800b1cc:	4b02      	ldr	r3, [pc, #8]	; (800b1d8 <malloc+0xc>)
 800b1ce:	4601      	mov	r1, r0
 800b1d0:	6818      	ldr	r0, [r3, #0]
 800b1d2:	f000 b877 	b.w	800b2c4 <_malloc_r>
 800b1d6:	bf00      	nop
 800b1d8:	20000230 	.word	0x20000230

0800b1dc <memset>:
 800b1dc:	4402      	add	r2, r0
 800b1de:	4603      	mov	r3, r0
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d100      	bne.n	800b1e6 <memset+0xa>
 800b1e4:	4770      	bx	lr
 800b1e6:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ea:	e7f9      	b.n	800b1e0 <memset+0x4>

0800b1ec <_free_r>:
 800b1ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ee:	2900      	cmp	r1, #0
 800b1f0:	d044      	beq.n	800b27c <_free_r+0x90>
 800b1f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1f6:	9001      	str	r0, [sp, #4]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f1a1 0404 	sub.w	r4, r1, #4
 800b1fe:	bfb8      	it	lt
 800b200:	18e4      	addlt	r4, r4, r3
 800b202:	f003 f83f 	bl	800e284 <__malloc_lock>
 800b206:	4a1e      	ldr	r2, [pc, #120]	; (800b280 <_free_r+0x94>)
 800b208:	9801      	ldr	r0, [sp, #4]
 800b20a:	6813      	ldr	r3, [r2, #0]
 800b20c:	b933      	cbnz	r3, 800b21c <_free_r+0x30>
 800b20e:	6063      	str	r3, [r4, #4]
 800b210:	6014      	str	r4, [r2, #0]
 800b212:	b003      	add	sp, #12
 800b214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b218:	f003 b83a 	b.w	800e290 <__malloc_unlock>
 800b21c:	42a3      	cmp	r3, r4
 800b21e:	d908      	bls.n	800b232 <_free_r+0x46>
 800b220:	6825      	ldr	r5, [r4, #0]
 800b222:	1961      	adds	r1, r4, r5
 800b224:	428b      	cmp	r3, r1
 800b226:	bf01      	itttt	eq
 800b228:	6819      	ldreq	r1, [r3, #0]
 800b22a:	685b      	ldreq	r3, [r3, #4]
 800b22c:	1949      	addeq	r1, r1, r5
 800b22e:	6021      	streq	r1, [r4, #0]
 800b230:	e7ed      	b.n	800b20e <_free_r+0x22>
 800b232:	461a      	mov	r2, r3
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	b10b      	cbz	r3, 800b23c <_free_r+0x50>
 800b238:	42a3      	cmp	r3, r4
 800b23a:	d9fa      	bls.n	800b232 <_free_r+0x46>
 800b23c:	6811      	ldr	r1, [r2, #0]
 800b23e:	1855      	adds	r5, r2, r1
 800b240:	42a5      	cmp	r5, r4
 800b242:	d10b      	bne.n	800b25c <_free_r+0x70>
 800b244:	6824      	ldr	r4, [r4, #0]
 800b246:	4421      	add	r1, r4
 800b248:	1854      	adds	r4, r2, r1
 800b24a:	42a3      	cmp	r3, r4
 800b24c:	6011      	str	r1, [r2, #0]
 800b24e:	d1e0      	bne.n	800b212 <_free_r+0x26>
 800b250:	681c      	ldr	r4, [r3, #0]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	6053      	str	r3, [r2, #4]
 800b256:	4421      	add	r1, r4
 800b258:	6011      	str	r1, [r2, #0]
 800b25a:	e7da      	b.n	800b212 <_free_r+0x26>
 800b25c:	d902      	bls.n	800b264 <_free_r+0x78>
 800b25e:	230c      	movs	r3, #12
 800b260:	6003      	str	r3, [r0, #0]
 800b262:	e7d6      	b.n	800b212 <_free_r+0x26>
 800b264:	6825      	ldr	r5, [r4, #0]
 800b266:	1961      	adds	r1, r4, r5
 800b268:	428b      	cmp	r3, r1
 800b26a:	bf04      	itt	eq
 800b26c:	6819      	ldreq	r1, [r3, #0]
 800b26e:	685b      	ldreq	r3, [r3, #4]
 800b270:	6063      	str	r3, [r4, #4]
 800b272:	bf04      	itt	eq
 800b274:	1949      	addeq	r1, r1, r5
 800b276:	6021      	streq	r1, [r4, #0]
 800b278:	6054      	str	r4, [r2, #4]
 800b27a:	e7ca      	b.n	800b212 <_free_r+0x26>
 800b27c:	b003      	add	sp, #12
 800b27e:	bd30      	pop	{r4, r5, pc}
 800b280:	20002794 	.word	0x20002794

0800b284 <sbrk_aligned>:
 800b284:	b570      	push	{r4, r5, r6, lr}
 800b286:	4e0e      	ldr	r6, [pc, #56]	; (800b2c0 <sbrk_aligned+0x3c>)
 800b288:	460c      	mov	r4, r1
 800b28a:	6831      	ldr	r1, [r6, #0]
 800b28c:	4605      	mov	r5, r0
 800b28e:	b911      	cbnz	r1, 800b296 <sbrk_aligned+0x12>
 800b290:	f000 ff06 	bl	800c0a0 <_sbrk_r>
 800b294:	6030      	str	r0, [r6, #0]
 800b296:	4621      	mov	r1, r4
 800b298:	4628      	mov	r0, r5
 800b29a:	f000 ff01 	bl	800c0a0 <_sbrk_r>
 800b29e:	1c43      	adds	r3, r0, #1
 800b2a0:	d00a      	beq.n	800b2b8 <sbrk_aligned+0x34>
 800b2a2:	1cc4      	adds	r4, r0, #3
 800b2a4:	f024 0403 	bic.w	r4, r4, #3
 800b2a8:	42a0      	cmp	r0, r4
 800b2aa:	d007      	beq.n	800b2bc <sbrk_aligned+0x38>
 800b2ac:	1a21      	subs	r1, r4, r0
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	f000 fef6 	bl	800c0a0 <_sbrk_r>
 800b2b4:	3001      	adds	r0, #1
 800b2b6:	d101      	bne.n	800b2bc <sbrk_aligned+0x38>
 800b2b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b2bc:	4620      	mov	r0, r4
 800b2be:	bd70      	pop	{r4, r5, r6, pc}
 800b2c0:	20002798 	.word	0x20002798

0800b2c4 <_malloc_r>:
 800b2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c8:	1ccd      	adds	r5, r1, #3
 800b2ca:	f025 0503 	bic.w	r5, r5, #3
 800b2ce:	3508      	adds	r5, #8
 800b2d0:	2d0c      	cmp	r5, #12
 800b2d2:	bf38      	it	cc
 800b2d4:	250c      	movcc	r5, #12
 800b2d6:	2d00      	cmp	r5, #0
 800b2d8:	4607      	mov	r7, r0
 800b2da:	db01      	blt.n	800b2e0 <_malloc_r+0x1c>
 800b2dc:	42a9      	cmp	r1, r5
 800b2de:	d905      	bls.n	800b2ec <_malloc_r+0x28>
 800b2e0:	230c      	movs	r3, #12
 800b2e2:	603b      	str	r3, [r7, #0]
 800b2e4:	2600      	movs	r6, #0
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ec:	4e2e      	ldr	r6, [pc, #184]	; (800b3a8 <_malloc_r+0xe4>)
 800b2ee:	f002 ffc9 	bl	800e284 <__malloc_lock>
 800b2f2:	6833      	ldr	r3, [r6, #0]
 800b2f4:	461c      	mov	r4, r3
 800b2f6:	bb34      	cbnz	r4, 800b346 <_malloc_r+0x82>
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	f7ff ffc2 	bl	800b284 <sbrk_aligned>
 800b300:	1c43      	adds	r3, r0, #1
 800b302:	4604      	mov	r4, r0
 800b304:	d14d      	bne.n	800b3a2 <_malloc_r+0xde>
 800b306:	6834      	ldr	r4, [r6, #0]
 800b308:	4626      	mov	r6, r4
 800b30a:	2e00      	cmp	r6, #0
 800b30c:	d140      	bne.n	800b390 <_malloc_r+0xcc>
 800b30e:	6823      	ldr	r3, [r4, #0]
 800b310:	4631      	mov	r1, r6
 800b312:	4638      	mov	r0, r7
 800b314:	eb04 0803 	add.w	r8, r4, r3
 800b318:	f000 fec2 	bl	800c0a0 <_sbrk_r>
 800b31c:	4580      	cmp	r8, r0
 800b31e:	d13a      	bne.n	800b396 <_malloc_r+0xd2>
 800b320:	6821      	ldr	r1, [r4, #0]
 800b322:	3503      	adds	r5, #3
 800b324:	1a6d      	subs	r5, r5, r1
 800b326:	f025 0503 	bic.w	r5, r5, #3
 800b32a:	3508      	adds	r5, #8
 800b32c:	2d0c      	cmp	r5, #12
 800b32e:	bf38      	it	cc
 800b330:	250c      	movcc	r5, #12
 800b332:	4629      	mov	r1, r5
 800b334:	4638      	mov	r0, r7
 800b336:	f7ff ffa5 	bl	800b284 <sbrk_aligned>
 800b33a:	3001      	adds	r0, #1
 800b33c:	d02b      	beq.n	800b396 <_malloc_r+0xd2>
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	442b      	add	r3, r5
 800b342:	6023      	str	r3, [r4, #0]
 800b344:	e00e      	b.n	800b364 <_malloc_r+0xa0>
 800b346:	6822      	ldr	r2, [r4, #0]
 800b348:	1b52      	subs	r2, r2, r5
 800b34a:	d41e      	bmi.n	800b38a <_malloc_r+0xc6>
 800b34c:	2a0b      	cmp	r2, #11
 800b34e:	d916      	bls.n	800b37e <_malloc_r+0xba>
 800b350:	1961      	adds	r1, r4, r5
 800b352:	42a3      	cmp	r3, r4
 800b354:	6025      	str	r5, [r4, #0]
 800b356:	bf18      	it	ne
 800b358:	6059      	strne	r1, [r3, #4]
 800b35a:	6863      	ldr	r3, [r4, #4]
 800b35c:	bf08      	it	eq
 800b35e:	6031      	streq	r1, [r6, #0]
 800b360:	5162      	str	r2, [r4, r5]
 800b362:	604b      	str	r3, [r1, #4]
 800b364:	4638      	mov	r0, r7
 800b366:	f104 060b 	add.w	r6, r4, #11
 800b36a:	f002 ff91 	bl	800e290 <__malloc_unlock>
 800b36e:	f026 0607 	bic.w	r6, r6, #7
 800b372:	1d23      	adds	r3, r4, #4
 800b374:	1af2      	subs	r2, r6, r3
 800b376:	d0b6      	beq.n	800b2e6 <_malloc_r+0x22>
 800b378:	1b9b      	subs	r3, r3, r6
 800b37a:	50a3      	str	r3, [r4, r2]
 800b37c:	e7b3      	b.n	800b2e6 <_malloc_r+0x22>
 800b37e:	6862      	ldr	r2, [r4, #4]
 800b380:	42a3      	cmp	r3, r4
 800b382:	bf0c      	ite	eq
 800b384:	6032      	streq	r2, [r6, #0]
 800b386:	605a      	strne	r2, [r3, #4]
 800b388:	e7ec      	b.n	800b364 <_malloc_r+0xa0>
 800b38a:	4623      	mov	r3, r4
 800b38c:	6864      	ldr	r4, [r4, #4]
 800b38e:	e7b2      	b.n	800b2f6 <_malloc_r+0x32>
 800b390:	4634      	mov	r4, r6
 800b392:	6876      	ldr	r6, [r6, #4]
 800b394:	e7b9      	b.n	800b30a <_malloc_r+0x46>
 800b396:	230c      	movs	r3, #12
 800b398:	603b      	str	r3, [r7, #0]
 800b39a:	4638      	mov	r0, r7
 800b39c:	f002 ff78 	bl	800e290 <__malloc_unlock>
 800b3a0:	e7a1      	b.n	800b2e6 <_malloc_r+0x22>
 800b3a2:	6025      	str	r5, [r4, #0]
 800b3a4:	e7de      	b.n	800b364 <_malloc_r+0xa0>
 800b3a6:	bf00      	nop
 800b3a8:	20002794 	.word	0x20002794

0800b3ac <__cvt>:
 800b3ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3b0:	ec55 4b10 	vmov	r4, r5, d0
 800b3b4:	2d00      	cmp	r5, #0
 800b3b6:	460e      	mov	r6, r1
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	462b      	mov	r3, r5
 800b3bc:	bfbb      	ittet	lt
 800b3be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b3c2:	461d      	movlt	r5, r3
 800b3c4:	2300      	movge	r3, #0
 800b3c6:	232d      	movlt	r3, #45	; 0x2d
 800b3c8:	700b      	strb	r3, [r1, #0]
 800b3ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b3d0:	4691      	mov	r9, r2
 800b3d2:	f023 0820 	bic.w	r8, r3, #32
 800b3d6:	bfbc      	itt	lt
 800b3d8:	4622      	movlt	r2, r4
 800b3da:	4614      	movlt	r4, r2
 800b3dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b3e0:	d005      	beq.n	800b3ee <__cvt+0x42>
 800b3e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b3e6:	d100      	bne.n	800b3ea <__cvt+0x3e>
 800b3e8:	3601      	adds	r6, #1
 800b3ea:	2102      	movs	r1, #2
 800b3ec:	e000      	b.n	800b3f0 <__cvt+0x44>
 800b3ee:	2103      	movs	r1, #3
 800b3f0:	ab03      	add	r3, sp, #12
 800b3f2:	9301      	str	r3, [sp, #4]
 800b3f4:	ab02      	add	r3, sp, #8
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	ec45 4b10 	vmov	d0, r4, r5
 800b3fc:	4653      	mov	r3, sl
 800b3fe:	4632      	mov	r2, r6
 800b400:	f001 fdbe 	bl	800cf80 <_dtoa_r>
 800b404:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b408:	4607      	mov	r7, r0
 800b40a:	d102      	bne.n	800b412 <__cvt+0x66>
 800b40c:	f019 0f01 	tst.w	r9, #1
 800b410:	d022      	beq.n	800b458 <__cvt+0xac>
 800b412:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b416:	eb07 0906 	add.w	r9, r7, r6
 800b41a:	d110      	bne.n	800b43e <__cvt+0x92>
 800b41c:	783b      	ldrb	r3, [r7, #0]
 800b41e:	2b30      	cmp	r3, #48	; 0x30
 800b420:	d10a      	bne.n	800b438 <__cvt+0x8c>
 800b422:	2200      	movs	r2, #0
 800b424:	2300      	movs	r3, #0
 800b426:	4620      	mov	r0, r4
 800b428:	4629      	mov	r1, r5
 800b42a:	f7f5 fb75 	bl	8000b18 <__aeabi_dcmpeq>
 800b42e:	b918      	cbnz	r0, 800b438 <__cvt+0x8c>
 800b430:	f1c6 0601 	rsb	r6, r6, #1
 800b434:	f8ca 6000 	str.w	r6, [sl]
 800b438:	f8da 3000 	ldr.w	r3, [sl]
 800b43c:	4499      	add	r9, r3
 800b43e:	2200      	movs	r2, #0
 800b440:	2300      	movs	r3, #0
 800b442:	4620      	mov	r0, r4
 800b444:	4629      	mov	r1, r5
 800b446:	f7f5 fb67 	bl	8000b18 <__aeabi_dcmpeq>
 800b44a:	b108      	cbz	r0, 800b450 <__cvt+0xa4>
 800b44c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b450:	2230      	movs	r2, #48	; 0x30
 800b452:	9b03      	ldr	r3, [sp, #12]
 800b454:	454b      	cmp	r3, r9
 800b456:	d307      	bcc.n	800b468 <__cvt+0xbc>
 800b458:	9b03      	ldr	r3, [sp, #12]
 800b45a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b45c:	1bdb      	subs	r3, r3, r7
 800b45e:	4638      	mov	r0, r7
 800b460:	6013      	str	r3, [r2, #0]
 800b462:	b004      	add	sp, #16
 800b464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b468:	1c59      	adds	r1, r3, #1
 800b46a:	9103      	str	r1, [sp, #12]
 800b46c:	701a      	strb	r2, [r3, #0]
 800b46e:	e7f0      	b.n	800b452 <__cvt+0xa6>

0800b470 <__exponent>:
 800b470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b472:	4603      	mov	r3, r0
 800b474:	2900      	cmp	r1, #0
 800b476:	bfb8      	it	lt
 800b478:	4249      	neglt	r1, r1
 800b47a:	f803 2b02 	strb.w	r2, [r3], #2
 800b47e:	bfb4      	ite	lt
 800b480:	222d      	movlt	r2, #45	; 0x2d
 800b482:	222b      	movge	r2, #43	; 0x2b
 800b484:	2909      	cmp	r1, #9
 800b486:	7042      	strb	r2, [r0, #1]
 800b488:	dd2a      	ble.n	800b4e0 <__exponent+0x70>
 800b48a:	f10d 0407 	add.w	r4, sp, #7
 800b48e:	46a4      	mov	ip, r4
 800b490:	270a      	movs	r7, #10
 800b492:	46a6      	mov	lr, r4
 800b494:	460a      	mov	r2, r1
 800b496:	fb91 f6f7 	sdiv	r6, r1, r7
 800b49a:	fb07 1516 	mls	r5, r7, r6, r1
 800b49e:	3530      	adds	r5, #48	; 0x30
 800b4a0:	2a63      	cmp	r2, #99	; 0x63
 800b4a2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b4a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b4aa:	4631      	mov	r1, r6
 800b4ac:	dcf1      	bgt.n	800b492 <__exponent+0x22>
 800b4ae:	3130      	adds	r1, #48	; 0x30
 800b4b0:	f1ae 0502 	sub.w	r5, lr, #2
 800b4b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b4b8:	1c44      	adds	r4, r0, #1
 800b4ba:	4629      	mov	r1, r5
 800b4bc:	4561      	cmp	r1, ip
 800b4be:	d30a      	bcc.n	800b4d6 <__exponent+0x66>
 800b4c0:	f10d 0209 	add.w	r2, sp, #9
 800b4c4:	eba2 020e 	sub.w	r2, r2, lr
 800b4c8:	4565      	cmp	r5, ip
 800b4ca:	bf88      	it	hi
 800b4cc:	2200      	movhi	r2, #0
 800b4ce:	4413      	add	r3, r2
 800b4d0:	1a18      	subs	r0, r3, r0
 800b4d2:	b003      	add	sp, #12
 800b4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4da:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b4de:	e7ed      	b.n	800b4bc <__exponent+0x4c>
 800b4e0:	2330      	movs	r3, #48	; 0x30
 800b4e2:	3130      	adds	r1, #48	; 0x30
 800b4e4:	7083      	strb	r3, [r0, #2]
 800b4e6:	70c1      	strb	r1, [r0, #3]
 800b4e8:	1d03      	adds	r3, r0, #4
 800b4ea:	e7f1      	b.n	800b4d0 <__exponent+0x60>

0800b4ec <_printf_float>:
 800b4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f0:	ed2d 8b02 	vpush	{d8}
 800b4f4:	b08d      	sub	sp, #52	; 0x34
 800b4f6:	460c      	mov	r4, r1
 800b4f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b4fc:	4616      	mov	r6, r2
 800b4fe:	461f      	mov	r7, r3
 800b500:	4605      	mov	r5, r0
 800b502:	f002 fe9b 	bl	800e23c <_localeconv_r>
 800b506:	f8d0 a000 	ldr.w	sl, [r0]
 800b50a:	4650      	mov	r0, sl
 800b50c:	f7f4 fe88 	bl	8000220 <strlen>
 800b510:	2300      	movs	r3, #0
 800b512:	930a      	str	r3, [sp, #40]	; 0x28
 800b514:	6823      	ldr	r3, [r4, #0]
 800b516:	9305      	str	r3, [sp, #20]
 800b518:	f8d8 3000 	ldr.w	r3, [r8]
 800b51c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b520:	3307      	adds	r3, #7
 800b522:	f023 0307 	bic.w	r3, r3, #7
 800b526:	f103 0208 	add.w	r2, r3, #8
 800b52a:	f8c8 2000 	str.w	r2, [r8]
 800b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b532:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b536:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b53a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b53e:	9307      	str	r3, [sp, #28]
 800b540:	f8cd 8018 	str.w	r8, [sp, #24]
 800b544:	ee08 0a10 	vmov	s16, r0
 800b548:	4b9f      	ldr	r3, [pc, #636]	; (800b7c8 <_printf_float+0x2dc>)
 800b54a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b54e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b552:	f7f5 fb13 	bl	8000b7c <__aeabi_dcmpun>
 800b556:	bb88      	cbnz	r0, 800b5bc <_printf_float+0xd0>
 800b558:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b55c:	4b9a      	ldr	r3, [pc, #616]	; (800b7c8 <_printf_float+0x2dc>)
 800b55e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b562:	f7f5 faed 	bl	8000b40 <__aeabi_dcmple>
 800b566:	bb48      	cbnz	r0, 800b5bc <_printf_float+0xd0>
 800b568:	2200      	movs	r2, #0
 800b56a:	2300      	movs	r3, #0
 800b56c:	4640      	mov	r0, r8
 800b56e:	4649      	mov	r1, r9
 800b570:	f7f5 fadc 	bl	8000b2c <__aeabi_dcmplt>
 800b574:	b110      	cbz	r0, 800b57c <_printf_float+0x90>
 800b576:	232d      	movs	r3, #45	; 0x2d
 800b578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b57c:	4b93      	ldr	r3, [pc, #588]	; (800b7cc <_printf_float+0x2e0>)
 800b57e:	4894      	ldr	r0, [pc, #592]	; (800b7d0 <_printf_float+0x2e4>)
 800b580:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b584:	bf94      	ite	ls
 800b586:	4698      	movls	r8, r3
 800b588:	4680      	movhi	r8, r0
 800b58a:	2303      	movs	r3, #3
 800b58c:	6123      	str	r3, [r4, #16]
 800b58e:	9b05      	ldr	r3, [sp, #20]
 800b590:	f023 0204 	bic.w	r2, r3, #4
 800b594:	6022      	str	r2, [r4, #0]
 800b596:	f04f 0900 	mov.w	r9, #0
 800b59a:	9700      	str	r7, [sp, #0]
 800b59c:	4633      	mov	r3, r6
 800b59e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b5a0:	4621      	mov	r1, r4
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	f000 f9d8 	bl	800b958 <_printf_common>
 800b5a8:	3001      	adds	r0, #1
 800b5aa:	f040 8090 	bne.w	800b6ce <_printf_float+0x1e2>
 800b5ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5b2:	b00d      	add	sp, #52	; 0x34
 800b5b4:	ecbd 8b02 	vpop	{d8}
 800b5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5bc:	4642      	mov	r2, r8
 800b5be:	464b      	mov	r3, r9
 800b5c0:	4640      	mov	r0, r8
 800b5c2:	4649      	mov	r1, r9
 800b5c4:	f7f5 fada 	bl	8000b7c <__aeabi_dcmpun>
 800b5c8:	b140      	cbz	r0, 800b5dc <_printf_float+0xf0>
 800b5ca:	464b      	mov	r3, r9
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	bfbc      	itt	lt
 800b5d0:	232d      	movlt	r3, #45	; 0x2d
 800b5d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b5d6:	487f      	ldr	r0, [pc, #508]	; (800b7d4 <_printf_float+0x2e8>)
 800b5d8:	4b7f      	ldr	r3, [pc, #508]	; (800b7d8 <_printf_float+0x2ec>)
 800b5da:	e7d1      	b.n	800b580 <_printf_float+0x94>
 800b5dc:	6863      	ldr	r3, [r4, #4]
 800b5de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b5e2:	9206      	str	r2, [sp, #24]
 800b5e4:	1c5a      	adds	r2, r3, #1
 800b5e6:	d13f      	bne.n	800b668 <_printf_float+0x17c>
 800b5e8:	2306      	movs	r3, #6
 800b5ea:	6063      	str	r3, [r4, #4]
 800b5ec:	9b05      	ldr	r3, [sp, #20]
 800b5ee:	6861      	ldr	r1, [r4, #4]
 800b5f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	9303      	str	r3, [sp, #12]
 800b5f8:	ab0a      	add	r3, sp, #40	; 0x28
 800b5fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b5fe:	ab09      	add	r3, sp, #36	; 0x24
 800b600:	ec49 8b10 	vmov	d0, r8, r9
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	6022      	str	r2, [r4, #0]
 800b608:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b60c:	4628      	mov	r0, r5
 800b60e:	f7ff fecd 	bl	800b3ac <__cvt>
 800b612:	9b06      	ldr	r3, [sp, #24]
 800b614:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b616:	2b47      	cmp	r3, #71	; 0x47
 800b618:	4680      	mov	r8, r0
 800b61a:	d108      	bne.n	800b62e <_printf_float+0x142>
 800b61c:	1cc8      	adds	r0, r1, #3
 800b61e:	db02      	blt.n	800b626 <_printf_float+0x13a>
 800b620:	6863      	ldr	r3, [r4, #4]
 800b622:	4299      	cmp	r1, r3
 800b624:	dd41      	ble.n	800b6aa <_printf_float+0x1be>
 800b626:	f1ab 0b02 	sub.w	fp, fp, #2
 800b62a:	fa5f fb8b 	uxtb.w	fp, fp
 800b62e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b632:	d820      	bhi.n	800b676 <_printf_float+0x18a>
 800b634:	3901      	subs	r1, #1
 800b636:	465a      	mov	r2, fp
 800b638:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b63c:	9109      	str	r1, [sp, #36]	; 0x24
 800b63e:	f7ff ff17 	bl	800b470 <__exponent>
 800b642:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b644:	1813      	adds	r3, r2, r0
 800b646:	2a01      	cmp	r2, #1
 800b648:	4681      	mov	r9, r0
 800b64a:	6123      	str	r3, [r4, #16]
 800b64c:	dc02      	bgt.n	800b654 <_printf_float+0x168>
 800b64e:	6822      	ldr	r2, [r4, #0]
 800b650:	07d2      	lsls	r2, r2, #31
 800b652:	d501      	bpl.n	800b658 <_printf_float+0x16c>
 800b654:	3301      	adds	r3, #1
 800b656:	6123      	str	r3, [r4, #16]
 800b658:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d09c      	beq.n	800b59a <_printf_float+0xae>
 800b660:	232d      	movs	r3, #45	; 0x2d
 800b662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b666:	e798      	b.n	800b59a <_printf_float+0xae>
 800b668:	9a06      	ldr	r2, [sp, #24]
 800b66a:	2a47      	cmp	r2, #71	; 0x47
 800b66c:	d1be      	bne.n	800b5ec <_printf_float+0x100>
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1bc      	bne.n	800b5ec <_printf_float+0x100>
 800b672:	2301      	movs	r3, #1
 800b674:	e7b9      	b.n	800b5ea <_printf_float+0xfe>
 800b676:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b67a:	d118      	bne.n	800b6ae <_printf_float+0x1c2>
 800b67c:	2900      	cmp	r1, #0
 800b67e:	6863      	ldr	r3, [r4, #4]
 800b680:	dd0b      	ble.n	800b69a <_printf_float+0x1ae>
 800b682:	6121      	str	r1, [r4, #16]
 800b684:	b913      	cbnz	r3, 800b68c <_printf_float+0x1a0>
 800b686:	6822      	ldr	r2, [r4, #0]
 800b688:	07d0      	lsls	r0, r2, #31
 800b68a:	d502      	bpl.n	800b692 <_printf_float+0x1a6>
 800b68c:	3301      	adds	r3, #1
 800b68e:	440b      	add	r3, r1
 800b690:	6123      	str	r3, [r4, #16]
 800b692:	65a1      	str	r1, [r4, #88]	; 0x58
 800b694:	f04f 0900 	mov.w	r9, #0
 800b698:	e7de      	b.n	800b658 <_printf_float+0x16c>
 800b69a:	b913      	cbnz	r3, 800b6a2 <_printf_float+0x1b6>
 800b69c:	6822      	ldr	r2, [r4, #0]
 800b69e:	07d2      	lsls	r2, r2, #31
 800b6a0:	d501      	bpl.n	800b6a6 <_printf_float+0x1ba>
 800b6a2:	3302      	adds	r3, #2
 800b6a4:	e7f4      	b.n	800b690 <_printf_float+0x1a4>
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e7f2      	b.n	800b690 <_printf_float+0x1a4>
 800b6aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b6ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6b0:	4299      	cmp	r1, r3
 800b6b2:	db05      	blt.n	800b6c0 <_printf_float+0x1d4>
 800b6b4:	6823      	ldr	r3, [r4, #0]
 800b6b6:	6121      	str	r1, [r4, #16]
 800b6b8:	07d8      	lsls	r0, r3, #31
 800b6ba:	d5ea      	bpl.n	800b692 <_printf_float+0x1a6>
 800b6bc:	1c4b      	adds	r3, r1, #1
 800b6be:	e7e7      	b.n	800b690 <_printf_float+0x1a4>
 800b6c0:	2900      	cmp	r1, #0
 800b6c2:	bfd4      	ite	le
 800b6c4:	f1c1 0202 	rsble	r2, r1, #2
 800b6c8:	2201      	movgt	r2, #1
 800b6ca:	4413      	add	r3, r2
 800b6cc:	e7e0      	b.n	800b690 <_printf_float+0x1a4>
 800b6ce:	6823      	ldr	r3, [r4, #0]
 800b6d0:	055a      	lsls	r2, r3, #21
 800b6d2:	d407      	bmi.n	800b6e4 <_printf_float+0x1f8>
 800b6d4:	6923      	ldr	r3, [r4, #16]
 800b6d6:	4642      	mov	r2, r8
 800b6d8:	4631      	mov	r1, r6
 800b6da:	4628      	mov	r0, r5
 800b6dc:	47b8      	blx	r7
 800b6de:	3001      	adds	r0, #1
 800b6e0:	d12c      	bne.n	800b73c <_printf_float+0x250>
 800b6e2:	e764      	b.n	800b5ae <_printf_float+0xc2>
 800b6e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b6e8:	f240 80e0 	bls.w	800b8ac <_printf_float+0x3c0>
 800b6ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	f7f5 fa10 	bl	8000b18 <__aeabi_dcmpeq>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	d034      	beq.n	800b766 <_printf_float+0x27a>
 800b6fc:	4a37      	ldr	r2, [pc, #220]	; (800b7dc <_printf_float+0x2f0>)
 800b6fe:	2301      	movs	r3, #1
 800b700:	4631      	mov	r1, r6
 800b702:	4628      	mov	r0, r5
 800b704:	47b8      	blx	r7
 800b706:	3001      	adds	r0, #1
 800b708:	f43f af51 	beq.w	800b5ae <_printf_float+0xc2>
 800b70c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b710:	429a      	cmp	r2, r3
 800b712:	db02      	blt.n	800b71a <_printf_float+0x22e>
 800b714:	6823      	ldr	r3, [r4, #0]
 800b716:	07d8      	lsls	r0, r3, #31
 800b718:	d510      	bpl.n	800b73c <_printf_float+0x250>
 800b71a:	ee18 3a10 	vmov	r3, s16
 800b71e:	4652      	mov	r2, sl
 800b720:	4631      	mov	r1, r6
 800b722:	4628      	mov	r0, r5
 800b724:	47b8      	blx	r7
 800b726:	3001      	adds	r0, #1
 800b728:	f43f af41 	beq.w	800b5ae <_printf_float+0xc2>
 800b72c:	f04f 0800 	mov.w	r8, #0
 800b730:	f104 091a 	add.w	r9, r4, #26
 800b734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b736:	3b01      	subs	r3, #1
 800b738:	4543      	cmp	r3, r8
 800b73a:	dc09      	bgt.n	800b750 <_printf_float+0x264>
 800b73c:	6823      	ldr	r3, [r4, #0]
 800b73e:	079b      	lsls	r3, r3, #30
 800b740:	f100 8105 	bmi.w	800b94e <_printf_float+0x462>
 800b744:	68e0      	ldr	r0, [r4, #12]
 800b746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b748:	4298      	cmp	r0, r3
 800b74a:	bfb8      	it	lt
 800b74c:	4618      	movlt	r0, r3
 800b74e:	e730      	b.n	800b5b2 <_printf_float+0xc6>
 800b750:	2301      	movs	r3, #1
 800b752:	464a      	mov	r2, r9
 800b754:	4631      	mov	r1, r6
 800b756:	4628      	mov	r0, r5
 800b758:	47b8      	blx	r7
 800b75a:	3001      	adds	r0, #1
 800b75c:	f43f af27 	beq.w	800b5ae <_printf_float+0xc2>
 800b760:	f108 0801 	add.w	r8, r8, #1
 800b764:	e7e6      	b.n	800b734 <_printf_float+0x248>
 800b766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b768:	2b00      	cmp	r3, #0
 800b76a:	dc39      	bgt.n	800b7e0 <_printf_float+0x2f4>
 800b76c:	4a1b      	ldr	r2, [pc, #108]	; (800b7dc <_printf_float+0x2f0>)
 800b76e:	2301      	movs	r3, #1
 800b770:	4631      	mov	r1, r6
 800b772:	4628      	mov	r0, r5
 800b774:	47b8      	blx	r7
 800b776:	3001      	adds	r0, #1
 800b778:	f43f af19 	beq.w	800b5ae <_printf_float+0xc2>
 800b77c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b780:	4313      	orrs	r3, r2
 800b782:	d102      	bne.n	800b78a <_printf_float+0x29e>
 800b784:	6823      	ldr	r3, [r4, #0]
 800b786:	07d9      	lsls	r1, r3, #31
 800b788:	d5d8      	bpl.n	800b73c <_printf_float+0x250>
 800b78a:	ee18 3a10 	vmov	r3, s16
 800b78e:	4652      	mov	r2, sl
 800b790:	4631      	mov	r1, r6
 800b792:	4628      	mov	r0, r5
 800b794:	47b8      	blx	r7
 800b796:	3001      	adds	r0, #1
 800b798:	f43f af09 	beq.w	800b5ae <_printf_float+0xc2>
 800b79c:	f04f 0900 	mov.w	r9, #0
 800b7a0:	f104 0a1a 	add.w	sl, r4, #26
 800b7a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7a6:	425b      	negs	r3, r3
 800b7a8:	454b      	cmp	r3, r9
 800b7aa:	dc01      	bgt.n	800b7b0 <_printf_float+0x2c4>
 800b7ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7ae:	e792      	b.n	800b6d6 <_printf_float+0x1ea>
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	4652      	mov	r2, sl
 800b7b4:	4631      	mov	r1, r6
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	47b8      	blx	r7
 800b7ba:	3001      	adds	r0, #1
 800b7bc:	f43f aef7 	beq.w	800b5ae <_printf_float+0xc2>
 800b7c0:	f109 0901 	add.w	r9, r9, #1
 800b7c4:	e7ee      	b.n	800b7a4 <_printf_float+0x2b8>
 800b7c6:	bf00      	nop
 800b7c8:	7fefffff 	.word	0x7fefffff
 800b7cc:	080107b0 	.word	0x080107b0
 800b7d0:	080107b4 	.word	0x080107b4
 800b7d4:	080107bc 	.word	0x080107bc
 800b7d8:	080107b8 	.word	0x080107b8
 800b7dc:	080107c0 	.word	0x080107c0
 800b7e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	bfa8      	it	ge
 800b7e8:	461a      	movge	r2, r3
 800b7ea:	2a00      	cmp	r2, #0
 800b7ec:	4691      	mov	r9, r2
 800b7ee:	dc37      	bgt.n	800b860 <_printf_float+0x374>
 800b7f0:	f04f 0b00 	mov.w	fp, #0
 800b7f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7f8:	f104 021a 	add.w	r2, r4, #26
 800b7fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b7fe:	9305      	str	r3, [sp, #20]
 800b800:	eba3 0309 	sub.w	r3, r3, r9
 800b804:	455b      	cmp	r3, fp
 800b806:	dc33      	bgt.n	800b870 <_printf_float+0x384>
 800b808:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b80c:	429a      	cmp	r2, r3
 800b80e:	db3b      	blt.n	800b888 <_printf_float+0x39c>
 800b810:	6823      	ldr	r3, [r4, #0]
 800b812:	07da      	lsls	r2, r3, #31
 800b814:	d438      	bmi.n	800b888 <_printf_float+0x39c>
 800b816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b818:	9a05      	ldr	r2, [sp, #20]
 800b81a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b81c:	1a9a      	subs	r2, r3, r2
 800b81e:	eba3 0901 	sub.w	r9, r3, r1
 800b822:	4591      	cmp	r9, r2
 800b824:	bfa8      	it	ge
 800b826:	4691      	movge	r9, r2
 800b828:	f1b9 0f00 	cmp.w	r9, #0
 800b82c:	dc35      	bgt.n	800b89a <_printf_float+0x3ae>
 800b82e:	f04f 0800 	mov.w	r8, #0
 800b832:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b836:	f104 0a1a 	add.w	sl, r4, #26
 800b83a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b83e:	1a9b      	subs	r3, r3, r2
 800b840:	eba3 0309 	sub.w	r3, r3, r9
 800b844:	4543      	cmp	r3, r8
 800b846:	f77f af79 	ble.w	800b73c <_printf_float+0x250>
 800b84a:	2301      	movs	r3, #1
 800b84c:	4652      	mov	r2, sl
 800b84e:	4631      	mov	r1, r6
 800b850:	4628      	mov	r0, r5
 800b852:	47b8      	blx	r7
 800b854:	3001      	adds	r0, #1
 800b856:	f43f aeaa 	beq.w	800b5ae <_printf_float+0xc2>
 800b85a:	f108 0801 	add.w	r8, r8, #1
 800b85e:	e7ec      	b.n	800b83a <_printf_float+0x34e>
 800b860:	4613      	mov	r3, r2
 800b862:	4631      	mov	r1, r6
 800b864:	4642      	mov	r2, r8
 800b866:	4628      	mov	r0, r5
 800b868:	47b8      	blx	r7
 800b86a:	3001      	adds	r0, #1
 800b86c:	d1c0      	bne.n	800b7f0 <_printf_float+0x304>
 800b86e:	e69e      	b.n	800b5ae <_printf_float+0xc2>
 800b870:	2301      	movs	r3, #1
 800b872:	4631      	mov	r1, r6
 800b874:	4628      	mov	r0, r5
 800b876:	9205      	str	r2, [sp, #20]
 800b878:	47b8      	blx	r7
 800b87a:	3001      	adds	r0, #1
 800b87c:	f43f ae97 	beq.w	800b5ae <_printf_float+0xc2>
 800b880:	9a05      	ldr	r2, [sp, #20]
 800b882:	f10b 0b01 	add.w	fp, fp, #1
 800b886:	e7b9      	b.n	800b7fc <_printf_float+0x310>
 800b888:	ee18 3a10 	vmov	r3, s16
 800b88c:	4652      	mov	r2, sl
 800b88e:	4631      	mov	r1, r6
 800b890:	4628      	mov	r0, r5
 800b892:	47b8      	blx	r7
 800b894:	3001      	adds	r0, #1
 800b896:	d1be      	bne.n	800b816 <_printf_float+0x32a>
 800b898:	e689      	b.n	800b5ae <_printf_float+0xc2>
 800b89a:	9a05      	ldr	r2, [sp, #20]
 800b89c:	464b      	mov	r3, r9
 800b89e:	4442      	add	r2, r8
 800b8a0:	4631      	mov	r1, r6
 800b8a2:	4628      	mov	r0, r5
 800b8a4:	47b8      	blx	r7
 800b8a6:	3001      	adds	r0, #1
 800b8a8:	d1c1      	bne.n	800b82e <_printf_float+0x342>
 800b8aa:	e680      	b.n	800b5ae <_printf_float+0xc2>
 800b8ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8ae:	2a01      	cmp	r2, #1
 800b8b0:	dc01      	bgt.n	800b8b6 <_printf_float+0x3ca>
 800b8b2:	07db      	lsls	r3, r3, #31
 800b8b4:	d538      	bpl.n	800b928 <_printf_float+0x43c>
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	4642      	mov	r2, r8
 800b8ba:	4631      	mov	r1, r6
 800b8bc:	4628      	mov	r0, r5
 800b8be:	47b8      	blx	r7
 800b8c0:	3001      	adds	r0, #1
 800b8c2:	f43f ae74 	beq.w	800b5ae <_printf_float+0xc2>
 800b8c6:	ee18 3a10 	vmov	r3, s16
 800b8ca:	4652      	mov	r2, sl
 800b8cc:	4631      	mov	r1, r6
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	47b8      	blx	r7
 800b8d2:	3001      	adds	r0, #1
 800b8d4:	f43f ae6b 	beq.w	800b5ae <_printf_float+0xc2>
 800b8d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b8dc:	2200      	movs	r2, #0
 800b8de:	2300      	movs	r3, #0
 800b8e0:	f7f5 f91a 	bl	8000b18 <__aeabi_dcmpeq>
 800b8e4:	b9d8      	cbnz	r0, 800b91e <_printf_float+0x432>
 800b8e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8e8:	f108 0201 	add.w	r2, r8, #1
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	4631      	mov	r1, r6
 800b8f0:	4628      	mov	r0, r5
 800b8f2:	47b8      	blx	r7
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	d10e      	bne.n	800b916 <_printf_float+0x42a>
 800b8f8:	e659      	b.n	800b5ae <_printf_float+0xc2>
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	4652      	mov	r2, sl
 800b8fe:	4631      	mov	r1, r6
 800b900:	4628      	mov	r0, r5
 800b902:	47b8      	blx	r7
 800b904:	3001      	adds	r0, #1
 800b906:	f43f ae52 	beq.w	800b5ae <_printf_float+0xc2>
 800b90a:	f108 0801 	add.w	r8, r8, #1
 800b90e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b910:	3b01      	subs	r3, #1
 800b912:	4543      	cmp	r3, r8
 800b914:	dcf1      	bgt.n	800b8fa <_printf_float+0x40e>
 800b916:	464b      	mov	r3, r9
 800b918:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b91c:	e6dc      	b.n	800b6d8 <_printf_float+0x1ec>
 800b91e:	f04f 0800 	mov.w	r8, #0
 800b922:	f104 0a1a 	add.w	sl, r4, #26
 800b926:	e7f2      	b.n	800b90e <_printf_float+0x422>
 800b928:	2301      	movs	r3, #1
 800b92a:	4642      	mov	r2, r8
 800b92c:	e7df      	b.n	800b8ee <_printf_float+0x402>
 800b92e:	2301      	movs	r3, #1
 800b930:	464a      	mov	r2, r9
 800b932:	4631      	mov	r1, r6
 800b934:	4628      	mov	r0, r5
 800b936:	47b8      	blx	r7
 800b938:	3001      	adds	r0, #1
 800b93a:	f43f ae38 	beq.w	800b5ae <_printf_float+0xc2>
 800b93e:	f108 0801 	add.w	r8, r8, #1
 800b942:	68e3      	ldr	r3, [r4, #12]
 800b944:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b946:	1a5b      	subs	r3, r3, r1
 800b948:	4543      	cmp	r3, r8
 800b94a:	dcf0      	bgt.n	800b92e <_printf_float+0x442>
 800b94c:	e6fa      	b.n	800b744 <_printf_float+0x258>
 800b94e:	f04f 0800 	mov.w	r8, #0
 800b952:	f104 0919 	add.w	r9, r4, #25
 800b956:	e7f4      	b.n	800b942 <_printf_float+0x456>

0800b958 <_printf_common>:
 800b958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b95c:	4616      	mov	r6, r2
 800b95e:	4699      	mov	r9, r3
 800b960:	688a      	ldr	r2, [r1, #8]
 800b962:	690b      	ldr	r3, [r1, #16]
 800b964:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b968:	4293      	cmp	r3, r2
 800b96a:	bfb8      	it	lt
 800b96c:	4613      	movlt	r3, r2
 800b96e:	6033      	str	r3, [r6, #0]
 800b970:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b974:	4607      	mov	r7, r0
 800b976:	460c      	mov	r4, r1
 800b978:	b10a      	cbz	r2, 800b97e <_printf_common+0x26>
 800b97a:	3301      	adds	r3, #1
 800b97c:	6033      	str	r3, [r6, #0]
 800b97e:	6823      	ldr	r3, [r4, #0]
 800b980:	0699      	lsls	r1, r3, #26
 800b982:	bf42      	ittt	mi
 800b984:	6833      	ldrmi	r3, [r6, #0]
 800b986:	3302      	addmi	r3, #2
 800b988:	6033      	strmi	r3, [r6, #0]
 800b98a:	6825      	ldr	r5, [r4, #0]
 800b98c:	f015 0506 	ands.w	r5, r5, #6
 800b990:	d106      	bne.n	800b9a0 <_printf_common+0x48>
 800b992:	f104 0a19 	add.w	sl, r4, #25
 800b996:	68e3      	ldr	r3, [r4, #12]
 800b998:	6832      	ldr	r2, [r6, #0]
 800b99a:	1a9b      	subs	r3, r3, r2
 800b99c:	42ab      	cmp	r3, r5
 800b99e:	dc26      	bgt.n	800b9ee <_printf_common+0x96>
 800b9a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b9a4:	1e13      	subs	r3, r2, #0
 800b9a6:	6822      	ldr	r2, [r4, #0]
 800b9a8:	bf18      	it	ne
 800b9aa:	2301      	movne	r3, #1
 800b9ac:	0692      	lsls	r2, r2, #26
 800b9ae:	d42b      	bmi.n	800ba08 <_printf_common+0xb0>
 800b9b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b9b4:	4649      	mov	r1, r9
 800b9b6:	4638      	mov	r0, r7
 800b9b8:	47c0      	blx	r8
 800b9ba:	3001      	adds	r0, #1
 800b9bc:	d01e      	beq.n	800b9fc <_printf_common+0xa4>
 800b9be:	6823      	ldr	r3, [r4, #0]
 800b9c0:	68e5      	ldr	r5, [r4, #12]
 800b9c2:	6832      	ldr	r2, [r6, #0]
 800b9c4:	f003 0306 	and.w	r3, r3, #6
 800b9c8:	2b04      	cmp	r3, #4
 800b9ca:	bf08      	it	eq
 800b9cc:	1aad      	subeq	r5, r5, r2
 800b9ce:	68a3      	ldr	r3, [r4, #8]
 800b9d0:	6922      	ldr	r2, [r4, #16]
 800b9d2:	bf0c      	ite	eq
 800b9d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9d8:	2500      	movne	r5, #0
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	bfc4      	itt	gt
 800b9de:	1a9b      	subgt	r3, r3, r2
 800b9e0:	18ed      	addgt	r5, r5, r3
 800b9e2:	2600      	movs	r6, #0
 800b9e4:	341a      	adds	r4, #26
 800b9e6:	42b5      	cmp	r5, r6
 800b9e8:	d11a      	bne.n	800ba20 <_printf_common+0xc8>
 800b9ea:	2000      	movs	r0, #0
 800b9ec:	e008      	b.n	800ba00 <_printf_common+0xa8>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	4652      	mov	r2, sl
 800b9f2:	4649      	mov	r1, r9
 800b9f4:	4638      	mov	r0, r7
 800b9f6:	47c0      	blx	r8
 800b9f8:	3001      	adds	r0, #1
 800b9fa:	d103      	bne.n	800ba04 <_printf_common+0xac>
 800b9fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba04:	3501      	adds	r5, #1
 800ba06:	e7c6      	b.n	800b996 <_printf_common+0x3e>
 800ba08:	18e1      	adds	r1, r4, r3
 800ba0a:	1c5a      	adds	r2, r3, #1
 800ba0c:	2030      	movs	r0, #48	; 0x30
 800ba0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ba12:	4422      	add	r2, r4
 800ba14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ba18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ba1c:	3302      	adds	r3, #2
 800ba1e:	e7c7      	b.n	800b9b0 <_printf_common+0x58>
 800ba20:	2301      	movs	r3, #1
 800ba22:	4622      	mov	r2, r4
 800ba24:	4649      	mov	r1, r9
 800ba26:	4638      	mov	r0, r7
 800ba28:	47c0      	blx	r8
 800ba2a:	3001      	adds	r0, #1
 800ba2c:	d0e6      	beq.n	800b9fc <_printf_common+0xa4>
 800ba2e:	3601      	adds	r6, #1
 800ba30:	e7d9      	b.n	800b9e6 <_printf_common+0x8e>
	...

0800ba34 <_printf_i>:
 800ba34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba38:	7e0f      	ldrb	r7, [r1, #24]
 800ba3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ba3c:	2f78      	cmp	r7, #120	; 0x78
 800ba3e:	4691      	mov	r9, r2
 800ba40:	4680      	mov	r8, r0
 800ba42:	460c      	mov	r4, r1
 800ba44:	469a      	mov	sl, r3
 800ba46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ba4a:	d807      	bhi.n	800ba5c <_printf_i+0x28>
 800ba4c:	2f62      	cmp	r7, #98	; 0x62
 800ba4e:	d80a      	bhi.n	800ba66 <_printf_i+0x32>
 800ba50:	2f00      	cmp	r7, #0
 800ba52:	f000 80d8 	beq.w	800bc06 <_printf_i+0x1d2>
 800ba56:	2f58      	cmp	r7, #88	; 0x58
 800ba58:	f000 80a3 	beq.w	800bba2 <_printf_i+0x16e>
 800ba5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ba64:	e03a      	b.n	800badc <_printf_i+0xa8>
 800ba66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ba6a:	2b15      	cmp	r3, #21
 800ba6c:	d8f6      	bhi.n	800ba5c <_printf_i+0x28>
 800ba6e:	a101      	add	r1, pc, #4	; (adr r1, 800ba74 <_printf_i+0x40>)
 800ba70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba74:	0800bacd 	.word	0x0800bacd
 800ba78:	0800bae1 	.word	0x0800bae1
 800ba7c:	0800ba5d 	.word	0x0800ba5d
 800ba80:	0800ba5d 	.word	0x0800ba5d
 800ba84:	0800ba5d 	.word	0x0800ba5d
 800ba88:	0800ba5d 	.word	0x0800ba5d
 800ba8c:	0800bae1 	.word	0x0800bae1
 800ba90:	0800ba5d 	.word	0x0800ba5d
 800ba94:	0800ba5d 	.word	0x0800ba5d
 800ba98:	0800ba5d 	.word	0x0800ba5d
 800ba9c:	0800ba5d 	.word	0x0800ba5d
 800baa0:	0800bbed 	.word	0x0800bbed
 800baa4:	0800bb11 	.word	0x0800bb11
 800baa8:	0800bbcf 	.word	0x0800bbcf
 800baac:	0800ba5d 	.word	0x0800ba5d
 800bab0:	0800ba5d 	.word	0x0800ba5d
 800bab4:	0800bc0f 	.word	0x0800bc0f
 800bab8:	0800ba5d 	.word	0x0800ba5d
 800babc:	0800bb11 	.word	0x0800bb11
 800bac0:	0800ba5d 	.word	0x0800ba5d
 800bac4:	0800ba5d 	.word	0x0800ba5d
 800bac8:	0800bbd7 	.word	0x0800bbd7
 800bacc:	682b      	ldr	r3, [r5, #0]
 800bace:	1d1a      	adds	r2, r3, #4
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	602a      	str	r2, [r5, #0]
 800bad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800badc:	2301      	movs	r3, #1
 800bade:	e0a3      	b.n	800bc28 <_printf_i+0x1f4>
 800bae0:	6820      	ldr	r0, [r4, #0]
 800bae2:	6829      	ldr	r1, [r5, #0]
 800bae4:	0606      	lsls	r6, r0, #24
 800bae6:	f101 0304 	add.w	r3, r1, #4
 800baea:	d50a      	bpl.n	800bb02 <_printf_i+0xce>
 800baec:	680e      	ldr	r6, [r1, #0]
 800baee:	602b      	str	r3, [r5, #0]
 800baf0:	2e00      	cmp	r6, #0
 800baf2:	da03      	bge.n	800bafc <_printf_i+0xc8>
 800baf4:	232d      	movs	r3, #45	; 0x2d
 800baf6:	4276      	negs	r6, r6
 800baf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bafc:	485e      	ldr	r0, [pc, #376]	; (800bc78 <_printf_i+0x244>)
 800bafe:	230a      	movs	r3, #10
 800bb00:	e019      	b.n	800bb36 <_printf_i+0x102>
 800bb02:	680e      	ldr	r6, [r1, #0]
 800bb04:	602b      	str	r3, [r5, #0]
 800bb06:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bb0a:	bf18      	it	ne
 800bb0c:	b236      	sxthne	r6, r6
 800bb0e:	e7ef      	b.n	800baf0 <_printf_i+0xbc>
 800bb10:	682b      	ldr	r3, [r5, #0]
 800bb12:	6820      	ldr	r0, [r4, #0]
 800bb14:	1d19      	adds	r1, r3, #4
 800bb16:	6029      	str	r1, [r5, #0]
 800bb18:	0601      	lsls	r1, r0, #24
 800bb1a:	d501      	bpl.n	800bb20 <_printf_i+0xec>
 800bb1c:	681e      	ldr	r6, [r3, #0]
 800bb1e:	e002      	b.n	800bb26 <_printf_i+0xf2>
 800bb20:	0646      	lsls	r6, r0, #25
 800bb22:	d5fb      	bpl.n	800bb1c <_printf_i+0xe8>
 800bb24:	881e      	ldrh	r6, [r3, #0]
 800bb26:	4854      	ldr	r0, [pc, #336]	; (800bc78 <_printf_i+0x244>)
 800bb28:	2f6f      	cmp	r7, #111	; 0x6f
 800bb2a:	bf0c      	ite	eq
 800bb2c:	2308      	moveq	r3, #8
 800bb2e:	230a      	movne	r3, #10
 800bb30:	2100      	movs	r1, #0
 800bb32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bb36:	6865      	ldr	r5, [r4, #4]
 800bb38:	60a5      	str	r5, [r4, #8]
 800bb3a:	2d00      	cmp	r5, #0
 800bb3c:	bfa2      	ittt	ge
 800bb3e:	6821      	ldrge	r1, [r4, #0]
 800bb40:	f021 0104 	bicge.w	r1, r1, #4
 800bb44:	6021      	strge	r1, [r4, #0]
 800bb46:	b90e      	cbnz	r6, 800bb4c <_printf_i+0x118>
 800bb48:	2d00      	cmp	r5, #0
 800bb4a:	d04d      	beq.n	800bbe8 <_printf_i+0x1b4>
 800bb4c:	4615      	mov	r5, r2
 800bb4e:	fbb6 f1f3 	udiv	r1, r6, r3
 800bb52:	fb03 6711 	mls	r7, r3, r1, r6
 800bb56:	5dc7      	ldrb	r7, [r0, r7]
 800bb58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bb5c:	4637      	mov	r7, r6
 800bb5e:	42bb      	cmp	r3, r7
 800bb60:	460e      	mov	r6, r1
 800bb62:	d9f4      	bls.n	800bb4e <_printf_i+0x11a>
 800bb64:	2b08      	cmp	r3, #8
 800bb66:	d10b      	bne.n	800bb80 <_printf_i+0x14c>
 800bb68:	6823      	ldr	r3, [r4, #0]
 800bb6a:	07de      	lsls	r6, r3, #31
 800bb6c:	d508      	bpl.n	800bb80 <_printf_i+0x14c>
 800bb6e:	6923      	ldr	r3, [r4, #16]
 800bb70:	6861      	ldr	r1, [r4, #4]
 800bb72:	4299      	cmp	r1, r3
 800bb74:	bfde      	ittt	le
 800bb76:	2330      	movle	r3, #48	; 0x30
 800bb78:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bb7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bb80:	1b52      	subs	r2, r2, r5
 800bb82:	6122      	str	r2, [r4, #16]
 800bb84:	f8cd a000 	str.w	sl, [sp]
 800bb88:	464b      	mov	r3, r9
 800bb8a:	aa03      	add	r2, sp, #12
 800bb8c:	4621      	mov	r1, r4
 800bb8e:	4640      	mov	r0, r8
 800bb90:	f7ff fee2 	bl	800b958 <_printf_common>
 800bb94:	3001      	adds	r0, #1
 800bb96:	d14c      	bne.n	800bc32 <_printf_i+0x1fe>
 800bb98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb9c:	b004      	add	sp, #16
 800bb9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bba2:	4835      	ldr	r0, [pc, #212]	; (800bc78 <_printf_i+0x244>)
 800bba4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bba8:	6829      	ldr	r1, [r5, #0]
 800bbaa:	6823      	ldr	r3, [r4, #0]
 800bbac:	f851 6b04 	ldr.w	r6, [r1], #4
 800bbb0:	6029      	str	r1, [r5, #0]
 800bbb2:	061d      	lsls	r5, r3, #24
 800bbb4:	d514      	bpl.n	800bbe0 <_printf_i+0x1ac>
 800bbb6:	07df      	lsls	r7, r3, #31
 800bbb8:	bf44      	itt	mi
 800bbba:	f043 0320 	orrmi.w	r3, r3, #32
 800bbbe:	6023      	strmi	r3, [r4, #0]
 800bbc0:	b91e      	cbnz	r6, 800bbca <_printf_i+0x196>
 800bbc2:	6823      	ldr	r3, [r4, #0]
 800bbc4:	f023 0320 	bic.w	r3, r3, #32
 800bbc8:	6023      	str	r3, [r4, #0]
 800bbca:	2310      	movs	r3, #16
 800bbcc:	e7b0      	b.n	800bb30 <_printf_i+0xfc>
 800bbce:	6823      	ldr	r3, [r4, #0]
 800bbd0:	f043 0320 	orr.w	r3, r3, #32
 800bbd4:	6023      	str	r3, [r4, #0]
 800bbd6:	2378      	movs	r3, #120	; 0x78
 800bbd8:	4828      	ldr	r0, [pc, #160]	; (800bc7c <_printf_i+0x248>)
 800bbda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bbde:	e7e3      	b.n	800bba8 <_printf_i+0x174>
 800bbe0:	0659      	lsls	r1, r3, #25
 800bbe2:	bf48      	it	mi
 800bbe4:	b2b6      	uxthmi	r6, r6
 800bbe6:	e7e6      	b.n	800bbb6 <_printf_i+0x182>
 800bbe8:	4615      	mov	r5, r2
 800bbea:	e7bb      	b.n	800bb64 <_printf_i+0x130>
 800bbec:	682b      	ldr	r3, [r5, #0]
 800bbee:	6826      	ldr	r6, [r4, #0]
 800bbf0:	6961      	ldr	r1, [r4, #20]
 800bbf2:	1d18      	adds	r0, r3, #4
 800bbf4:	6028      	str	r0, [r5, #0]
 800bbf6:	0635      	lsls	r5, r6, #24
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	d501      	bpl.n	800bc00 <_printf_i+0x1cc>
 800bbfc:	6019      	str	r1, [r3, #0]
 800bbfe:	e002      	b.n	800bc06 <_printf_i+0x1d2>
 800bc00:	0670      	lsls	r0, r6, #25
 800bc02:	d5fb      	bpl.n	800bbfc <_printf_i+0x1c8>
 800bc04:	8019      	strh	r1, [r3, #0]
 800bc06:	2300      	movs	r3, #0
 800bc08:	6123      	str	r3, [r4, #16]
 800bc0a:	4615      	mov	r5, r2
 800bc0c:	e7ba      	b.n	800bb84 <_printf_i+0x150>
 800bc0e:	682b      	ldr	r3, [r5, #0]
 800bc10:	1d1a      	adds	r2, r3, #4
 800bc12:	602a      	str	r2, [r5, #0]
 800bc14:	681d      	ldr	r5, [r3, #0]
 800bc16:	6862      	ldr	r2, [r4, #4]
 800bc18:	2100      	movs	r1, #0
 800bc1a:	4628      	mov	r0, r5
 800bc1c:	f7f4 fb08 	bl	8000230 <memchr>
 800bc20:	b108      	cbz	r0, 800bc26 <_printf_i+0x1f2>
 800bc22:	1b40      	subs	r0, r0, r5
 800bc24:	6060      	str	r0, [r4, #4]
 800bc26:	6863      	ldr	r3, [r4, #4]
 800bc28:	6123      	str	r3, [r4, #16]
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc30:	e7a8      	b.n	800bb84 <_printf_i+0x150>
 800bc32:	6923      	ldr	r3, [r4, #16]
 800bc34:	462a      	mov	r2, r5
 800bc36:	4649      	mov	r1, r9
 800bc38:	4640      	mov	r0, r8
 800bc3a:	47d0      	blx	sl
 800bc3c:	3001      	adds	r0, #1
 800bc3e:	d0ab      	beq.n	800bb98 <_printf_i+0x164>
 800bc40:	6823      	ldr	r3, [r4, #0]
 800bc42:	079b      	lsls	r3, r3, #30
 800bc44:	d413      	bmi.n	800bc6e <_printf_i+0x23a>
 800bc46:	68e0      	ldr	r0, [r4, #12]
 800bc48:	9b03      	ldr	r3, [sp, #12]
 800bc4a:	4298      	cmp	r0, r3
 800bc4c:	bfb8      	it	lt
 800bc4e:	4618      	movlt	r0, r3
 800bc50:	e7a4      	b.n	800bb9c <_printf_i+0x168>
 800bc52:	2301      	movs	r3, #1
 800bc54:	4632      	mov	r2, r6
 800bc56:	4649      	mov	r1, r9
 800bc58:	4640      	mov	r0, r8
 800bc5a:	47d0      	blx	sl
 800bc5c:	3001      	adds	r0, #1
 800bc5e:	d09b      	beq.n	800bb98 <_printf_i+0x164>
 800bc60:	3501      	adds	r5, #1
 800bc62:	68e3      	ldr	r3, [r4, #12]
 800bc64:	9903      	ldr	r1, [sp, #12]
 800bc66:	1a5b      	subs	r3, r3, r1
 800bc68:	42ab      	cmp	r3, r5
 800bc6a:	dcf2      	bgt.n	800bc52 <_printf_i+0x21e>
 800bc6c:	e7eb      	b.n	800bc46 <_printf_i+0x212>
 800bc6e:	2500      	movs	r5, #0
 800bc70:	f104 0619 	add.w	r6, r4, #25
 800bc74:	e7f5      	b.n	800bc62 <_printf_i+0x22e>
 800bc76:	bf00      	nop
 800bc78:	080107c2 	.word	0x080107c2
 800bc7c:	080107d3 	.word	0x080107d3

0800bc80 <_scanf_float>:
 800bc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc84:	b087      	sub	sp, #28
 800bc86:	4617      	mov	r7, r2
 800bc88:	9303      	str	r3, [sp, #12]
 800bc8a:	688b      	ldr	r3, [r1, #8]
 800bc8c:	1e5a      	subs	r2, r3, #1
 800bc8e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bc92:	bf83      	ittte	hi
 800bc94:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bc98:	195b      	addhi	r3, r3, r5
 800bc9a:	9302      	strhi	r3, [sp, #8]
 800bc9c:	2300      	movls	r3, #0
 800bc9e:	bf86      	itte	hi
 800bca0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bca4:	608b      	strhi	r3, [r1, #8]
 800bca6:	9302      	strls	r3, [sp, #8]
 800bca8:	680b      	ldr	r3, [r1, #0]
 800bcaa:	468b      	mov	fp, r1
 800bcac:	2500      	movs	r5, #0
 800bcae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800bcb2:	f84b 3b1c 	str.w	r3, [fp], #28
 800bcb6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bcba:	4680      	mov	r8, r0
 800bcbc:	460c      	mov	r4, r1
 800bcbe:	465e      	mov	r6, fp
 800bcc0:	46aa      	mov	sl, r5
 800bcc2:	46a9      	mov	r9, r5
 800bcc4:	9501      	str	r5, [sp, #4]
 800bcc6:	68a2      	ldr	r2, [r4, #8]
 800bcc8:	b152      	cbz	r2, 800bce0 <_scanf_float+0x60>
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	2b4e      	cmp	r3, #78	; 0x4e
 800bcd0:	d864      	bhi.n	800bd9c <_scanf_float+0x11c>
 800bcd2:	2b40      	cmp	r3, #64	; 0x40
 800bcd4:	d83c      	bhi.n	800bd50 <_scanf_float+0xd0>
 800bcd6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800bcda:	b2c8      	uxtb	r0, r1
 800bcdc:	280e      	cmp	r0, #14
 800bcde:	d93a      	bls.n	800bd56 <_scanf_float+0xd6>
 800bce0:	f1b9 0f00 	cmp.w	r9, #0
 800bce4:	d003      	beq.n	800bcee <_scanf_float+0x6e>
 800bce6:	6823      	ldr	r3, [r4, #0]
 800bce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcec:	6023      	str	r3, [r4, #0]
 800bcee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bcf2:	f1ba 0f01 	cmp.w	sl, #1
 800bcf6:	f200 8113 	bhi.w	800bf20 <_scanf_float+0x2a0>
 800bcfa:	455e      	cmp	r6, fp
 800bcfc:	f200 8105 	bhi.w	800bf0a <_scanf_float+0x28a>
 800bd00:	2501      	movs	r5, #1
 800bd02:	4628      	mov	r0, r5
 800bd04:	b007      	add	sp, #28
 800bd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800bd0e:	2a0d      	cmp	r2, #13
 800bd10:	d8e6      	bhi.n	800bce0 <_scanf_float+0x60>
 800bd12:	a101      	add	r1, pc, #4	; (adr r1, 800bd18 <_scanf_float+0x98>)
 800bd14:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bd18:	0800be57 	.word	0x0800be57
 800bd1c:	0800bce1 	.word	0x0800bce1
 800bd20:	0800bce1 	.word	0x0800bce1
 800bd24:	0800bce1 	.word	0x0800bce1
 800bd28:	0800beb7 	.word	0x0800beb7
 800bd2c:	0800be8f 	.word	0x0800be8f
 800bd30:	0800bce1 	.word	0x0800bce1
 800bd34:	0800bce1 	.word	0x0800bce1
 800bd38:	0800be65 	.word	0x0800be65
 800bd3c:	0800bce1 	.word	0x0800bce1
 800bd40:	0800bce1 	.word	0x0800bce1
 800bd44:	0800bce1 	.word	0x0800bce1
 800bd48:	0800bce1 	.word	0x0800bce1
 800bd4c:	0800be1d 	.word	0x0800be1d
 800bd50:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bd54:	e7db      	b.n	800bd0e <_scanf_float+0x8e>
 800bd56:	290e      	cmp	r1, #14
 800bd58:	d8c2      	bhi.n	800bce0 <_scanf_float+0x60>
 800bd5a:	a001      	add	r0, pc, #4	; (adr r0, 800bd60 <_scanf_float+0xe0>)
 800bd5c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bd60:	0800be0f 	.word	0x0800be0f
 800bd64:	0800bce1 	.word	0x0800bce1
 800bd68:	0800be0f 	.word	0x0800be0f
 800bd6c:	0800bea3 	.word	0x0800bea3
 800bd70:	0800bce1 	.word	0x0800bce1
 800bd74:	0800bdbd 	.word	0x0800bdbd
 800bd78:	0800bdf9 	.word	0x0800bdf9
 800bd7c:	0800bdf9 	.word	0x0800bdf9
 800bd80:	0800bdf9 	.word	0x0800bdf9
 800bd84:	0800bdf9 	.word	0x0800bdf9
 800bd88:	0800bdf9 	.word	0x0800bdf9
 800bd8c:	0800bdf9 	.word	0x0800bdf9
 800bd90:	0800bdf9 	.word	0x0800bdf9
 800bd94:	0800bdf9 	.word	0x0800bdf9
 800bd98:	0800bdf9 	.word	0x0800bdf9
 800bd9c:	2b6e      	cmp	r3, #110	; 0x6e
 800bd9e:	d809      	bhi.n	800bdb4 <_scanf_float+0x134>
 800bda0:	2b60      	cmp	r3, #96	; 0x60
 800bda2:	d8b2      	bhi.n	800bd0a <_scanf_float+0x8a>
 800bda4:	2b54      	cmp	r3, #84	; 0x54
 800bda6:	d077      	beq.n	800be98 <_scanf_float+0x218>
 800bda8:	2b59      	cmp	r3, #89	; 0x59
 800bdaa:	d199      	bne.n	800bce0 <_scanf_float+0x60>
 800bdac:	2d07      	cmp	r5, #7
 800bdae:	d197      	bne.n	800bce0 <_scanf_float+0x60>
 800bdb0:	2508      	movs	r5, #8
 800bdb2:	e029      	b.n	800be08 <_scanf_float+0x188>
 800bdb4:	2b74      	cmp	r3, #116	; 0x74
 800bdb6:	d06f      	beq.n	800be98 <_scanf_float+0x218>
 800bdb8:	2b79      	cmp	r3, #121	; 0x79
 800bdba:	e7f6      	b.n	800bdaa <_scanf_float+0x12a>
 800bdbc:	6821      	ldr	r1, [r4, #0]
 800bdbe:	05c8      	lsls	r0, r1, #23
 800bdc0:	d51a      	bpl.n	800bdf8 <_scanf_float+0x178>
 800bdc2:	9b02      	ldr	r3, [sp, #8]
 800bdc4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bdc8:	6021      	str	r1, [r4, #0]
 800bdca:	f109 0901 	add.w	r9, r9, #1
 800bdce:	b11b      	cbz	r3, 800bdd8 <_scanf_float+0x158>
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	3201      	adds	r2, #1
 800bdd4:	9302      	str	r3, [sp, #8]
 800bdd6:	60a2      	str	r2, [r4, #8]
 800bdd8:	68a3      	ldr	r3, [r4, #8]
 800bdda:	3b01      	subs	r3, #1
 800bddc:	60a3      	str	r3, [r4, #8]
 800bdde:	6923      	ldr	r3, [r4, #16]
 800bde0:	3301      	adds	r3, #1
 800bde2:	6123      	str	r3, [r4, #16]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	3b01      	subs	r3, #1
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	607b      	str	r3, [r7, #4]
 800bdec:	f340 8084 	ble.w	800bef8 <_scanf_float+0x278>
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	603b      	str	r3, [r7, #0]
 800bdf6:	e766      	b.n	800bcc6 <_scanf_float+0x46>
 800bdf8:	eb1a 0f05 	cmn.w	sl, r5
 800bdfc:	f47f af70 	bne.w	800bce0 <_scanf_float+0x60>
 800be00:	6822      	ldr	r2, [r4, #0]
 800be02:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800be06:	6022      	str	r2, [r4, #0]
 800be08:	f806 3b01 	strb.w	r3, [r6], #1
 800be0c:	e7e4      	b.n	800bdd8 <_scanf_float+0x158>
 800be0e:	6822      	ldr	r2, [r4, #0]
 800be10:	0610      	lsls	r0, r2, #24
 800be12:	f57f af65 	bpl.w	800bce0 <_scanf_float+0x60>
 800be16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be1a:	e7f4      	b.n	800be06 <_scanf_float+0x186>
 800be1c:	f1ba 0f00 	cmp.w	sl, #0
 800be20:	d10e      	bne.n	800be40 <_scanf_float+0x1c0>
 800be22:	f1b9 0f00 	cmp.w	r9, #0
 800be26:	d10e      	bne.n	800be46 <_scanf_float+0x1c6>
 800be28:	6822      	ldr	r2, [r4, #0]
 800be2a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800be2e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800be32:	d108      	bne.n	800be46 <_scanf_float+0x1c6>
 800be34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800be38:	6022      	str	r2, [r4, #0]
 800be3a:	f04f 0a01 	mov.w	sl, #1
 800be3e:	e7e3      	b.n	800be08 <_scanf_float+0x188>
 800be40:	f1ba 0f02 	cmp.w	sl, #2
 800be44:	d055      	beq.n	800bef2 <_scanf_float+0x272>
 800be46:	2d01      	cmp	r5, #1
 800be48:	d002      	beq.n	800be50 <_scanf_float+0x1d0>
 800be4a:	2d04      	cmp	r5, #4
 800be4c:	f47f af48 	bne.w	800bce0 <_scanf_float+0x60>
 800be50:	3501      	adds	r5, #1
 800be52:	b2ed      	uxtb	r5, r5
 800be54:	e7d8      	b.n	800be08 <_scanf_float+0x188>
 800be56:	f1ba 0f01 	cmp.w	sl, #1
 800be5a:	f47f af41 	bne.w	800bce0 <_scanf_float+0x60>
 800be5e:	f04f 0a02 	mov.w	sl, #2
 800be62:	e7d1      	b.n	800be08 <_scanf_float+0x188>
 800be64:	b97d      	cbnz	r5, 800be86 <_scanf_float+0x206>
 800be66:	f1b9 0f00 	cmp.w	r9, #0
 800be6a:	f47f af3c 	bne.w	800bce6 <_scanf_float+0x66>
 800be6e:	6822      	ldr	r2, [r4, #0]
 800be70:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800be74:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800be78:	f47f af39 	bne.w	800bcee <_scanf_float+0x6e>
 800be7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800be80:	6022      	str	r2, [r4, #0]
 800be82:	2501      	movs	r5, #1
 800be84:	e7c0      	b.n	800be08 <_scanf_float+0x188>
 800be86:	2d03      	cmp	r5, #3
 800be88:	d0e2      	beq.n	800be50 <_scanf_float+0x1d0>
 800be8a:	2d05      	cmp	r5, #5
 800be8c:	e7de      	b.n	800be4c <_scanf_float+0x1cc>
 800be8e:	2d02      	cmp	r5, #2
 800be90:	f47f af26 	bne.w	800bce0 <_scanf_float+0x60>
 800be94:	2503      	movs	r5, #3
 800be96:	e7b7      	b.n	800be08 <_scanf_float+0x188>
 800be98:	2d06      	cmp	r5, #6
 800be9a:	f47f af21 	bne.w	800bce0 <_scanf_float+0x60>
 800be9e:	2507      	movs	r5, #7
 800bea0:	e7b2      	b.n	800be08 <_scanf_float+0x188>
 800bea2:	6822      	ldr	r2, [r4, #0]
 800bea4:	0591      	lsls	r1, r2, #22
 800bea6:	f57f af1b 	bpl.w	800bce0 <_scanf_float+0x60>
 800beaa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800beae:	6022      	str	r2, [r4, #0]
 800beb0:	f8cd 9004 	str.w	r9, [sp, #4]
 800beb4:	e7a8      	b.n	800be08 <_scanf_float+0x188>
 800beb6:	6822      	ldr	r2, [r4, #0]
 800beb8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bebc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bec0:	d006      	beq.n	800bed0 <_scanf_float+0x250>
 800bec2:	0550      	lsls	r0, r2, #21
 800bec4:	f57f af0c 	bpl.w	800bce0 <_scanf_float+0x60>
 800bec8:	f1b9 0f00 	cmp.w	r9, #0
 800becc:	f43f af0f 	beq.w	800bcee <_scanf_float+0x6e>
 800bed0:	0591      	lsls	r1, r2, #22
 800bed2:	bf58      	it	pl
 800bed4:	9901      	ldrpl	r1, [sp, #4]
 800bed6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800beda:	bf58      	it	pl
 800bedc:	eba9 0101 	subpl.w	r1, r9, r1
 800bee0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bee4:	bf58      	it	pl
 800bee6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800beea:	6022      	str	r2, [r4, #0]
 800beec:	f04f 0900 	mov.w	r9, #0
 800bef0:	e78a      	b.n	800be08 <_scanf_float+0x188>
 800bef2:	f04f 0a03 	mov.w	sl, #3
 800bef6:	e787      	b.n	800be08 <_scanf_float+0x188>
 800bef8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800befc:	4639      	mov	r1, r7
 800befe:	4640      	mov	r0, r8
 800bf00:	4798      	blx	r3
 800bf02:	2800      	cmp	r0, #0
 800bf04:	f43f aedf 	beq.w	800bcc6 <_scanf_float+0x46>
 800bf08:	e6ea      	b.n	800bce0 <_scanf_float+0x60>
 800bf0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bf0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bf12:	463a      	mov	r2, r7
 800bf14:	4640      	mov	r0, r8
 800bf16:	4798      	blx	r3
 800bf18:	6923      	ldr	r3, [r4, #16]
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	6123      	str	r3, [r4, #16]
 800bf1e:	e6ec      	b.n	800bcfa <_scanf_float+0x7a>
 800bf20:	1e6b      	subs	r3, r5, #1
 800bf22:	2b06      	cmp	r3, #6
 800bf24:	d825      	bhi.n	800bf72 <_scanf_float+0x2f2>
 800bf26:	2d02      	cmp	r5, #2
 800bf28:	d836      	bhi.n	800bf98 <_scanf_float+0x318>
 800bf2a:	455e      	cmp	r6, fp
 800bf2c:	f67f aee8 	bls.w	800bd00 <_scanf_float+0x80>
 800bf30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bf34:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bf38:	463a      	mov	r2, r7
 800bf3a:	4640      	mov	r0, r8
 800bf3c:	4798      	blx	r3
 800bf3e:	6923      	ldr	r3, [r4, #16]
 800bf40:	3b01      	subs	r3, #1
 800bf42:	6123      	str	r3, [r4, #16]
 800bf44:	e7f1      	b.n	800bf2a <_scanf_float+0x2aa>
 800bf46:	9802      	ldr	r0, [sp, #8]
 800bf48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bf4c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800bf50:	9002      	str	r0, [sp, #8]
 800bf52:	463a      	mov	r2, r7
 800bf54:	4640      	mov	r0, r8
 800bf56:	4798      	blx	r3
 800bf58:	6923      	ldr	r3, [r4, #16]
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	6123      	str	r3, [r4, #16]
 800bf5e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bf62:	fa5f fa8a 	uxtb.w	sl, sl
 800bf66:	f1ba 0f02 	cmp.w	sl, #2
 800bf6a:	d1ec      	bne.n	800bf46 <_scanf_float+0x2c6>
 800bf6c:	3d03      	subs	r5, #3
 800bf6e:	b2ed      	uxtb	r5, r5
 800bf70:	1b76      	subs	r6, r6, r5
 800bf72:	6823      	ldr	r3, [r4, #0]
 800bf74:	05da      	lsls	r2, r3, #23
 800bf76:	d52f      	bpl.n	800bfd8 <_scanf_float+0x358>
 800bf78:	055b      	lsls	r3, r3, #21
 800bf7a:	d510      	bpl.n	800bf9e <_scanf_float+0x31e>
 800bf7c:	455e      	cmp	r6, fp
 800bf7e:	f67f aebf 	bls.w	800bd00 <_scanf_float+0x80>
 800bf82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bf86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bf8a:	463a      	mov	r2, r7
 800bf8c:	4640      	mov	r0, r8
 800bf8e:	4798      	blx	r3
 800bf90:	6923      	ldr	r3, [r4, #16]
 800bf92:	3b01      	subs	r3, #1
 800bf94:	6123      	str	r3, [r4, #16]
 800bf96:	e7f1      	b.n	800bf7c <_scanf_float+0x2fc>
 800bf98:	46aa      	mov	sl, r5
 800bf9a:	9602      	str	r6, [sp, #8]
 800bf9c:	e7df      	b.n	800bf5e <_scanf_float+0x2de>
 800bf9e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bfa2:	6923      	ldr	r3, [r4, #16]
 800bfa4:	2965      	cmp	r1, #101	; 0x65
 800bfa6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800bfaa:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800bfae:	6123      	str	r3, [r4, #16]
 800bfb0:	d00c      	beq.n	800bfcc <_scanf_float+0x34c>
 800bfb2:	2945      	cmp	r1, #69	; 0x45
 800bfb4:	d00a      	beq.n	800bfcc <_scanf_float+0x34c>
 800bfb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bfba:	463a      	mov	r2, r7
 800bfbc:	4640      	mov	r0, r8
 800bfbe:	4798      	blx	r3
 800bfc0:	6923      	ldr	r3, [r4, #16]
 800bfc2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	1eb5      	subs	r5, r6, #2
 800bfca:	6123      	str	r3, [r4, #16]
 800bfcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bfd0:	463a      	mov	r2, r7
 800bfd2:	4640      	mov	r0, r8
 800bfd4:	4798      	blx	r3
 800bfd6:	462e      	mov	r6, r5
 800bfd8:	6825      	ldr	r5, [r4, #0]
 800bfda:	f015 0510 	ands.w	r5, r5, #16
 800bfde:	d159      	bne.n	800c094 <_scanf_float+0x414>
 800bfe0:	7035      	strb	r5, [r6, #0]
 800bfe2:	6823      	ldr	r3, [r4, #0]
 800bfe4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bfe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfec:	d11b      	bne.n	800c026 <_scanf_float+0x3a6>
 800bfee:	9b01      	ldr	r3, [sp, #4]
 800bff0:	454b      	cmp	r3, r9
 800bff2:	eba3 0209 	sub.w	r2, r3, r9
 800bff6:	d123      	bne.n	800c040 <_scanf_float+0x3c0>
 800bff8:	2200      	movs	r2, #0
 800bffa:	4659      	mov	r1, fp
 800bffc:	4640      	mov	r0, r8
 800bffe:	f000 fea9 	bl	800cd54 <_strtod_r>
 800c002:	6822      	ldr	r2, [r4, #0]
 800c004:	9b03      	ldr	r3, [sp, #12]
 800c006:	f012 0f02 	tst.w	r2, #2
 800c00a:	ec57 6b10 	vmov	r6, r7, d0
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	d021      	beq.n	800c056 <_scanf_float+0x3d6>
 800c012:	9903      	ldr	r1, [sp, #12]
 800c014:	1d1a      	adds	r2, r3, #4
 800c016:	600a      	str	r2, [r1, #0]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	e9c3 6700 	strd	r6, r7, [r3]
 800c01e:	68e3      	ldr	r3, [r4, #12]
 800c020:	3301      	adds	r3, #1
 800c022:	60e3      	str	r3, [r4, #12]
 800c024:	e66d      	b.n	800bd02 <_scanf_float+0x82>
 800c026:	9b04      	ldr	r3, [sp, #16]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d0e5      	beq.n	800bff8 <_scanf_float+0x378>
 800c02c:	9905      	ldr	r1, [sp, #20]
 800c02e:	230a      	movs	r3, #10
 800c030:	462a      	mov	r2, r5
 800c032:	3101      	adds	r1, #1
 800c034:	4640      	mov	r0, r8
 800c036:	f000 ff15 	bl	800ce64 <_strtol_r>
 800c03a:	9b04      	ldr	r3, [sp, #16]
 800c03c:	9e05      	ldr	r6, [sp, #20]
 800c03e:	1ac2      	subs	r2, r0, r3
 800c040:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c044:	429e      	cmp	r6, r3
 800c046:	bf28      	it	cs
 800c048:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c04c:	4912      	ldr	r1, [pc, #72]	; (800c098 <_scanf_float+0x418>)
 800c04e:	4630      	mov	r0, r6
 800c050:	f000 f83c 	bl	800c0cc <siprintf>
 800c054:	e7d0      	b.n	800bff8 <_scanf_float+0x378>
 800c056:	9903      	ldr	r1, [sp, #12]
 800c058:	f012 0f04 	tst.w	r2, #4
 800c05c:	f103 0204 	add.w	r2, r3, #4
 800c060:	600a      	str	r2, [r1, #0]
 800c062:	d1d9      	bne.n	800c018 <_scanf_float+0x398>
 800c064:	f8d3 8000 	ldr.w	r8, [r3]
 800c068:	ee10 2a10 	vmov	r2, s0
 800c06c:	ee10 0a10 	vmov	r0, s0
 800c070:	463b      	mov	r3, r7
 800c072:	4639      	mov	r1, r7
 800c074:	f7f4 fd82 	bl	8000b7c <__aeabi_dcmpun>
 800c078:	b128      	cbz	r0, 800c086 <_scanf_float+0x406>
 800c07a:	4808      	ldr	r0, [pc, #32]	; (800c09c <_scanf_float+0x41c>)
 800c07c:	f000 f820 	bl	800c0c0 <nanf>
 800c080:	ed88 0a00 	vstr	s0, [r8]
 800c084:	e7cb      	b.n	800c01e <_scanf_float+0x39e>
 800c086:	4630      	mov	r0, r6
 800c088:	4639      	mov	r1, r7
 800c08a:	f7f4 fdd5 	bl	8000c38 <__aeabi_d2f>
 800c08e:	f8c8 0000 	str.w	r0, [r8]
 800c092:	e7c4      	b.n	800c01e <_scanf_float+0x39e>
 800c094:	2500      	movs	r5, #0
 800c096:	e634      	b.n	800bd02 <_scanf_float+0x82>
 800c098:	080107e4 	.word	0x080107e4
 800c09c:	08010bf0 	.word	0x08010bf0

0800c0a0 <_sbrk_r>:
 800c0a0:	b538      	push	{r3, r4, r5, lr}
 800c0a2:	4d06      	ldr	r5, [pc, #24]	; (800c0bc <_sbrk_r+0x1c>)
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	4608      	mov	r0, r1
 800c0aa:	602b      	str	r3, [r5, #0]
 800c0ac:	f7f6 fa24 	bl	80024f8 <_sbrk>
 800c0b0:	1c43      	adds	r3, r0, #1
 800c0b2:	d102      	bne.n	800c0ba <_sbrk_r+0x1a>
 800c0b4:	682b      	ldr	r3, [r5, #0]
 800c0b6:	b103      	cbz	r3, 800c0ba <_sbrk_r+0x1a>
 800c0b8:	6023      	str	r3, [r4, #0]
 800c0ba:	bd38      	pop	{r3, r4, r5, pc}
 800c0bc:	2000279c 	.word	0x2000279c

0800c0c0 <nanf>:
 800c0c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c0c8 <nanf+0x8>
 800c0c4:	4770      	bx	lr
 800c0c6:	bf00      	nop
 800c0c8:	7fc00000 	.word	0x7fc00000

0800c0cc <siprintf>:
 800c0cc:	b40e      	push	{r1, r2, r3}
 800c0ce:	b500      	push	{lr}
 800c0d0:	b09c      	sub	sp, #112	; 0x70
 800c0d2:	ab1d      	add	r3, sp, #116	; 0x74
 800c0d4:	9002      	str	r0, [sp, #8]
 800c0d6:	9006      	str	r0, [sp, #24]
 800c0d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0dc:	4809      	ldr	r0, [pc, #36]	; (800c104 <siprintf+0x38>)
 800c0de:	9107      	str	r1, [sp, #28]
 800c0e0:	9104      	str	r1, [sp, #16]
 800c0e2:	4909      	ldr	r1, [pc, #36]	; (800c108 <siprintf+0x3c>)
 800c0e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0e8:	9105      	str	r1, [sp, #20]
 800c0ea:	6800      	ldr	r0, [r0, #0]
 800c0ec:	9301      	str	r3, [sp, #4]
 800c0ee:	a902      	add	r1, sp, #8
 800c0f0:	f002 fe06 	bl	800ed00 <_svfiprintf_r>
 800c0f4:	9b02      	ldr	r3, [sp, #8]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	701a      	strb	r2, [r3, #0]
 800c0fa:	b01c      	add	sp, #112	; 0x70
 800c0fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c100:	b003      	add	sp, #12
 800c102:	4770      	bx	lr
 800c104:	20000230 	.word	0x20000230
 800c108:	ffff0208 	.word	0xffff0208

0800c10c <sulp>:
 800c10c:	b570      	push	{r4, r5, r6, lr}
 800c10e:	4604      	mov	r4, r0
 800c110:	460d      	mov	r5, r1
 800c112:	ec45 4b10 	vmov	d0, r4, r5
 800c116:	4616      	mov	r6, r2
 800c118:	f002 fc32 	bl	800e980 <__ulp>
 800c11c:	ec51 0b10 	vmov	r0, r1, d0
 800c120:	b17e      	cbz	r6, 800c142 <sulp+0x36>
 800c122:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c126:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	dd09      	ble.n	800c142 <sulp+0x36>
 800c12e:	051b      	lsls	r3, r3, #20
 800c130:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c134:	2400      	movs	r4, #0
 800c136:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c13a:	4622      	mov	r2, r4
 800c13c:	462b      	mov	r3, r5
 800c13e:	f7f4 fa83 	bl	8000648 <__aeabi_dmul>
 800c142:	bd70      	pop	{r4, r5, r6, pc}
 800c144:	0000      	movs	r0, r0
	...

0800c148 <_strtod_l>:
 800c148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14c:	ed2d 8b02 	vpush	{d8}
 800c150:	b09d      	sub	sp, #116	; 0x74
 800c152:	461f      	mov	r7, r3
 800c154:	2300      	movs	r3, #0
 800c156:	9318      	str	r3, [sp, #96]	; 0x60
 800c158:	4ba2      	ldr	r3, [pc, #648]	; (800c3e4 <_strtod_l+0x29c>)
 800c15a:	9213      	str	r2, [sp, #76]	; 0x4c
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	9305      	str	r3, [sp, #20]
 800c160:	4604      	mov	r4, r0
 800c162:	4618      	mov	r0, r3
 800c164:	4688      	mov	r8, r1
 800c166:	f7f4 f85b 	bl	8000220 <strlen>
 800c16a:	f04f 0a00 	mov.w	sl, #0
 800c16e:	4605      	mov	r5, r0
 800c170:	f04f 0b00 	mov.w	fp, #0
 800c174:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c178:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c17a:	781a      	ldrb	r2, [r3, #0]
 800c17c:	2a2b      	cmp	r2, #43	; 0x2b
 800c17e:	d04e      	beq.n	800c21e <_strtod_l+0xd6>
 800c180:	d83b      	bhi.n	800c1fa <_strtod_l+0xb2>
 800c182:	2a0d      	cmp	r2, #13
 800c184:	d834      	bhi.n	800c1f0 <_strtod_l+0xa8>
 800c186:	2a08      	cmp	r2, #8
 800c188:	d834      	bhi.n	800c1f4 <_strtod_l+0xac>
 800c18a:	2a00      	cmp	r2, #0
 800c18c:	d03e      	beq.n	800c20c <_strtod_l+0xc4>
 800c18e:	2300      	movs	r3, #0
 800c190:	930a      	str	r3, [sp, #40]	; 0x28
 800c192:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c194:	7833      	ldrb	r3, [r6, #0]
 800c196:	2b30      	cmp	r3, #48	; 0x30
 800c198:	f040 80b0 	bne.w	800c2fc <_strtod_l+0x1b4>
 800c19c:	7873      	ldrb	r3, [r6, #1]
 800c19e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c1a2:	2b58      	cmp	r3, #88	; 0x58
 800c1a4:	d168      	bne.n	800c278 <_strtod_l+0x130>
 800c1a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1a8:	9301      	str	r3, [sp, #4]
 800c1aa:	ab18      	add	r3, sp, #96	; 0x60
 800c1ac:	9702      	str	r7, [sp, #8]
 800c1ae:	9300      	str	r3, [sp, #0]
 800c1b0:	4a8d      	ldr	r2, [pc, #564]	; (800c3e8 <_strtod_l+0x2a0>)
 800c1b2:	ab19      	add	r3, sp, #100	; 0x64
 800c1b4:	a917      	add	r1, sp, #92	; 0x5c
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	f001 fd38 	bl	800dc2c <__gethex>
 800c1bc:	f010 0707 	ands.w	r7, r0, #7
 800c1c0:	4605      	mov	r5, r0
 800c1c2:	d005      	beq.n	800c1d0 <_strtod_l+0x88>
 800c1c4:	2f06      	cmp	r7, #6
 800c1c6:	d12c      	bne.n	800c222 <_strtod_l+0xda>
 800c1c8:	3601      	adds	r6, #1
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	9617      	str	r6, [sp, #92]	; 0x5c
 800c1ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c1d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	f040 8590 	bne.w	800ccf8 <_strtod_l+0xbb0>
 800c1d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1da:	b1eb      	cbz	r3, 800c218 <_strtod_l+0xd0>
 800c1dc:	4652      	mov	r2, sl
 800c1de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c1e2:	ec43 2b10 	vmov	d0, r2, r3
 800c1e6:	b01d      	add	sp, #116	; 0x74
 800c1e8:	ecbd 8b02 	vpop	{d8}
 800c1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f0:	2a20      	cmp	r2, #32
 800c1f2:	d1cc      	bne.n	800c18e <_strtod_l+0x46>
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	9317      	str	r3, [sp, #92]	; 0x5c
 800c1f8:	e7be      	b.n	800c178 <_strtod_l+0x30>
 800c1fa:	2a2d      	cmp	r2, #45	; 0x2d
 800c1fc:	d1c7      	bne.n	800c18e <_strtod_l+0x46>
 800c1fe:	2201      	movs	r2, #1
 800c200:	920a      	str	r2, [sp, #40]	; 0x28
 800c202:	1c5a      	adds	r2, r3, #1
 800c204:	9217      	str	r2, [sp, #92]	; 0x5c
 800c206:	785b      	ldrb	r3, [r3, #1]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1c2      	bne.n	800c192 <_strtod_l+0x4a>
 800c20c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c20e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c212:	2b00      	cmp	r3, #0
 800c214:	f040 856e 	bne.w	800ccf4 <_strtod_l+0xbac>
 800c218:	4652      	mov	r2, sl
 800c21a:	465b      	mov	r3, fp
 800c21c:	e7e1      	b.n	800c1e2 <_strtod_l+0x9a>
 800c21e:	2200      	movs	r2, #0
 800c220:	e7ee      	b.n	800c200 <_strtod_l+0xb8>
 800c222:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c224:	b13a      	cbz	r2, 800c236 <_strtod_l+0xee>
 800c226:	2135      	movs	r1, #53	; 0x35
 800c228:	a81a      	add	r0, sp, #104	; 0x68
 800c22a:	f002 fcb4 	bl	800eb96 <__copybits>
 800c22e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c230:	4620      	mov	r0, r4
 800c232:	f002 f873 	bl	800e31c <_Bfree>
 800c236:	3f01      	subs	r7, #1
 800c238:	2f04      	cmp	r7, #4
 800c23a:	d806      	bhi.n	800c24a <_strtod_l+0x102>
 800c23c:	e8df f007 	tbb	[pc, r7]
 800c240:	1714030a 	.word	0x1714030a
 800c244:	0a          	.byte	0x0a
 800c245:	00          	.byte	0x00
 800c246:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c24a:	0728      	lsls	r0, r5, #28
 800c24c:	d5c0      	bpl.n	800c1d0 <_strtod_l+0x88>
 800c24e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c252:	e7bd      	b.n	800c1d0 <_strtod_l+0x88>
 800c254:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c258:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c25a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c25e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c262:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c266:	e7f0      	b.n	800c24a <_strtod_l+0x102>
 800c268:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c3ec <_strtod_l+0x2a4>
 800c26c:	e7ed      	b.n	800c24a <_strtod_l+0x102>
 800c26e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c272:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c276:	e7e8      	b.n	800c24a <_strtod_l+0x102>
 800c278:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c27a:	1c5a      	adds	r2, r3, #1
 800c27c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c27e:	785b      	ldrb	r3, [r3, #1]
 800c280:	2b30      	cmp	r3, #48	; 0x30
 800c282:	d0f9      	beq.n	800c278 <_strtod_l+0x130>
 800c284:	2b00      	cmp	r3, #0
 800c286:	d0a3      	beq.n	800c1d0 <_strtod_l+0x88>
 800c288:	2301      	movs	r3, #1
 800c28a:	f04f 0900 	mov.w	r9, #0
 800c28e:	9304      	str	r3, [sp, #16]
 800c290:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c292:	9308      	str	r3, [sp, #32]
 800c294:	f8cd 901c 	str.w	r9, [sp, #28]
 800c298:	464f      	mov	r7, r9
 800c29a:	220a      	movs	r2, #10
 800c29c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c29e:	7806      	ldrb	r6, [r0, #0]
 800c2a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c2a4:	b2d9      	uxtb	r1, r3
 800c2a6:	2909      	cmp	r1, #9
 800c2a8:	d92a      	bls.n	800c300 <_strtod_l+0x1b8>
 800c2aa:	9905      	ldr	r1, [sp, #20]
 800c2ac:	462a      	mov	r2, r5
 800c2ae:	f002 fe2f 	bl	800ef10 <strncmp>
 800c2b2:	b398      	cbz	r0, 800c31c <_strtod_l+0x1d4>
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	4632      	mov	r2, r6
 800c2b8:	463d      	mov	r5, r7
 800c2ba:	9005      	str	r0, [sp, #20]
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2a65      	cmp	r2, #101	; 0x65
 800c2c0:	d001      	beq.n	800c2c6 <_strtod_l+0x17e>
 800c2c2:	2a45      	cmp	r2, #69	; 0x45
 800c2c4:	d118      	bne.n	800c2f8 <_strtod_l+0x1b0>
 800c2c6:	b91d      	cbnz	r5, 800c2d0 <_strtod_l+0x188>
 800c2c8:	9a04      	ldr	r2, [sp, #16]
 800c2ca:	4302      	orrs	r2, r0
 800c2cc:	d09e      	beq.n	800c20c <_strtod_l+0xc4>
 800c2ce:	2500      	movs	r5, #0
 800c2d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c2d4:	f108 0201 	add.w	r2, r8, #1
 800c2d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800c2da:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c2de:	2a2b      	cmp	r2, #43	; 0x2b
 800c2e0:	d075      	beq.n	800c3ce <_strtod_l+0x286>
 800c2e2:	2a2d      	cmp	r2, #45	; 0x2d
 800c2e4:	d07b      	beq.n	800c3de <_strtod_l+0x296>
 800c2e6:	f04f 0c00 	mov.w	ip, #0
 800c2ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c2ee:	2909      	cmp	r1, #9
 800c2f0:	f240 8082 	bls.w	800c3f8 <_strtod_l+0x2b0>
 800c2f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c2f8:	2600      	movs	r6, #0
 800c2fa:	e09d      	b.n	800c438 <_strtod_l+0x2f0>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	e7c4      	b.n	800c28a <_strtod_l+0x142>
 800c300:	2f08      	cmp	r7, #8
 800c302:	bfd8      	it	le
 800c304:	9907      	ldrle	r1, [sp, #28]
 800c306:	f100 0001 	add.w	r0, r0, #1
 800c30a:	bfda      	itte	le
 800c30c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c310:	9307      	strle	r3, [sp, #28]
 800c312:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c316:	3701      	adds	r7, #1
 800c318:	9017      	str	r0, [sp, #92]	; 0x5c
 800c31a:	e7bf      	b.n	800c29c <_strtod_l+0x154>
 800c31c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c31e:	195a      	adds	r2, r3, r5
 800c320:	9217      	str	r2, [sp, #92]	; 0x5c
 800c322:	5d5a      	ldrb	r2, [r3, r5]
 800c324:	2f00      	cmp	r7, #0
 800c326:	d037      	beq.n	800c398 <_strtod_l+0x250>
 800c328:	9005      	str	r0, [sp, #20]
 800c32a:	463d      	mov	r5, r7
 800c32c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c330:	2b09      	cmp	r3, #9
 800c332:	d912      	bls.n	800c35a <_strtod_l+0x212>
 800c334:	2301      	movs	r3, #1
 800c336:	e7c2      	b.n	800c2be <_strtod_l+0x176>
 800c338:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c33e:	785a      	ldrb	r2, [r3, #1]
 800c340:	3001      	adds	r0, #1
 800c342:	2a30      	cmp	r2, #48	; 0x30
 800c344:	d0f8      	beq.n	800c338 <_strtod_l+0x1f0>
 800c346:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c34a:	2b08      	cmp	r3, #8
 800c34c:	f200 84d9 	bhi.w	800cd02 <_strtod_l+0xbba>
 800c350:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c352:	9005      	str	r0, [sp, #20]
 800c354:	2000      	movs	r0, #0
 800c356:	9308      	str	r3, [sp, #32]
 800c358:	4605      	mov	r5, r0
 800c35a:	3a30      	subs	r2, #48	; 0x30
 800c35c:	f100 0301 	add.w	r3, r0, #1
 800c360:	d014      	beq.n	800c38c <_strtod_l+0x244>
 800c362:	9905      	ldr	r1, [sp, #20]
 800c364:	4419      	add	r1, r3
 800c366:	9105      	str	r1, [sp, #20]
 800c368:	462b      	mov	r3, r5
 800c36a:	eb00 0e05 	add.w	lr, r0, r5
 800c36e:	210a      	movs	r1, #10
 800c370:	4573      	cmp	r3, lr
 800c372:	d113      	bne.n	800c39c <_strtod_l+0x254>
 800c374:	182b      	adds	r3, r5, r0
 800c376:	2b08      	cmp	r3, #8
 800c378:	f105 0501 	add.w	r5, r5, #1
 800c37c:	4405      	add	r5, r0
 800c37e:	dc1c      	bgt.n	800c3ba <_strtod_l+0x272>
 800c380:	9907      	ldr	r1, [sp, #28]
 800c382:	230a      	movs	r3, #10
 800c384:	fb03 2301 	mla	r3, r3, r1, r2
 800c388:	9307      	str	r3, [sp, #28]
 800c38a:	2300      	movs	r3, #0
 800c38c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c38e:	1c51      	adds	r1, r2, #1
 800c390:	9117      	str	r1, [sp, #92]	; 0x5c
 800c392:	7852      	ldrb	r2, [r2, #1]
 800c394:	4618      	mov	r0, r3
 800c396:	e7c9      	b.n	800c32c <_strtod_l+0x1e4>
 800c398:	4638      	mov	r0, r7
 800c39a:	e7d2      	b.n	800c342 <_strtod_l+0x1fa>
 800c39c:	2b08      	cmp	r3, #8
 800c39e:	dc04      	bgt.n	800c3aa <_strtod_l+0x262>
 800c3a0:	9e07      	ldr	r6, [sp, #28]
 800c3a2:	434e      	muls	r6, r1
 800c3a4:	9607      	str	r6, [sp, #28]
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	e7e2      	b.n	800c370 <_strtod_l+0x228>
 800c3aa:	f103 0c01 	add.w	ip, r3, #1
 800c3ae:	f1bc 0f10 	cmp.w	ip, #16
 800c3b2:	bfd8      	it	le
 800c3b4:	fb01 f909 	mulle.w	r9, r1, r9
 800c3b8:	e7f5      	b.n	800c3a6 <_strtod_l+0x25e>
 800c3ba:	2d10      	cmp	r5, #16
 800c3bc:	bfdc      	itt	le
 800c3be:	230a      	movle	r3, #10
 800c3c0:	fb03 2909 	mlale	r9, r3, r9, r2
 800c3c4:	e7e1      	b.n	800c38a <_strtod_l+0x242>
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	9305      	str	r3, [sp, #20]
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e77c      	b.n	800c2c8 <_strtod_l+0x180>
 800c3ce:	f04f 0c00 	mov.w	ip, #0
 800c3d2:	f108 0202 	add.w	r2, r8, #2
 800c3d6:	9217      	str	r2, [sp, #92]	; 0x5c
 800c3d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c3dc:	e785      	b.n	800c2ea <_strtod_l+0x1a2>
 800c3de:	f04f 0c01 	mov.w	ip, #1
 800c3e2:	e7f6      	b.n	800c3d2 <_strtod_l+0x28a>
 800c3e4:	08010a38 	.word	0x08010a38
 800c3e8:	080107ec 	.word	0x080107ec
 800c3ec:	7ff00000 	.word	0x7ff00000
 800c3f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c3f2:	1c51      	adds	r1, r2, #1
 800c3f4:	9117      	str	r1, [sp, #92]	; 0x5c
 800c3f6:	7852      	ldrb	r2, [r2, #1]
 800c3f8:	2a30      	cmp	r2, #48	; 0x30
 800c3fa:	d0f9      	beq.n	800c3f0 <_strtod_l+0x2a8>
 800c3fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c400:	2908      	cmp	r1, #8
 800c402:	f63f af79 	bhi.w	800c2f8 <_strtod_l+0x1b0>
 800c406:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c40a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c40c:	9206      	str	r2, [sp, #24]
 800c40e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c410:	1c51      	adds	r1, r2, #1
 800c412:	9117      	str	r1, [sp, #92]	; 0x5c
 800c414:	7852      	ldrb	r2, [r2, #1]
 800c416:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c41a:	2e09      	cmp	r6, #9
 800c41c:	d937      	bls.n	800c48e <_strtod_l+0x346>
 800c41e:	9e06      	ldr	r6, [sp, #24]
 800c420:	1b89      	subs	r1, r1, r6
 800c422:	2908      	cmp	r1, #8
 800c424:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c428:	dc02      	bgt.n	800c430 <_strtod_l+0x2e8>
 800c42a:	4576      	cmp	r6, lr
 800c42c:	bfa8      	it	ge
 800c42e:	4676      	movge	r6, lr
 800c430:	f1bc 0f00 	cmp.w	ip, #0
 800c434:	d000      	beq.n	800c438 <_strtod_l+0x2f0>
 800c436:	4276      	negs	r6, r6
 800c438:	2d00      	cmp	r5, #0
 800c43a:	d14d      	bne.n	800c4d8 <_strtod_l+0x390>
 800c43c:	9904      	ldr	r1, [sp, #16]
 800c43e:	4301      	orrs	r1, r0
 800c440:	f47f aec6 	bne.w	800c1d0 <_strtod_l+0x88>
 800c444:	2b00      	cmp	r3, #0
 800c446:	f47f aee1 	bne.w	800c20c <_strtod_l+0xc4>
 800c44a:	2a69      	cmp	r2, #105	; 0x69
 800c44c:	d027      	beq.n	800c49e <_strtod_l+0x356>
 800c44e:	dc24      	bgt.n	800c49a <_strtod_l+0x352>
 800c450:	2a49      	cmp	r2, #73	; 0x49
 800c452:	d024      	beq.n	800c49e <_strtod_l+0x356>
 800c454:	2a4e      	cmp	r2, #78	; 0x4e
 800c456:	f47f aed9 	bne.w	800c20c <_strtod_l+0xc4>
 800c45a:	499f      	ldr	r1, [pc, #636]	; (800c6d8 <_strtod_l+0x590>)
 800c45c:	a817      	add	r0, sp, #92	; 0x5c
 800c45e:	f001 fe3d 	bl	800e0dc <__match>
 800c462:	2800      	cmp	r0, #0
 800c464:	f43f aed2 	beq.w	800c20c <_strtod_l+0xc4>
 800c468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	2b28      	cmp	r3, #40	; 0x28
 800c46e:	d12d      	bne.n	800c4cc <_strtod_l+0x384>
 800c470:	499a      	ldr	r1, [pc, #616]	; (800c6dc <_strtod_l+0x594>)
 800c472:	aa1a      	add	r2, sp, #104	; 0x68
 800c474:	a817      	add	r0, sp, #92	; 0x5c
 800c476:	f001 fe45 	bl	800e104 <__hexnan>
 800c47a:	2805      	cmp	r0, #5
 800c47c:	d126      	bne.n	800c4cc <_strtod_l+0x384>
 800c47e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c480:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c484:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c488:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c48c:	e6a0      	b.n	800c1d0 <_strtod_l+0x88>
 800c48e:	210a      	movs	r1, #10
 800c490:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c494:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c498:	e7b9      	b.n	800c40e <_strtod_l+0x2c6>
 800c49a:	2a6e      	cmp	r2, #110	; 0x6e
 800c49c:	e7db      	b.n	800c456 <_strtod_l+0x30e>
 800c49e:	4990      	ldr	r1, [pc, #576]	; (800c6e0 <_strtod_l+0x598>)
 800c4a0:	a817      	add	r0, sp, #92	; 0x5c
 800c4a2:	f001 fe1b 	bl	800e0dc <__match>
 800c4a6:	2800      	cmp	r0, #0
 800c4a8:	f43f aeb0 	beq.w	800c20c <_strtod_l+0xc4>
 800c4ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c4ae:	498d      	ldr	r1, [pc, #564]	; (800c6e4 <_strtod_l+0x59c>)
 800c4b0:	3b01      	subs	r3, #1
 800c4b2:	a817      	add	r0, sp, #92	; 0x5c
 800c4b4:	9317      	str	r3, [sp, #92]	; 0x5c
 800c4b6:	f001 fe11 	bl	800e0dc <__match>
 800c4ba:	b910      	cbnz	r0, 800c4c2 <_strtod_l+0x37a>
 800c4bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c4be:	3301      	adds	r3, #1
 800c4c0:	9317      	str	r3, [sp, #92]	; 0x5c
 800c4c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c6f4 <_strtod_l+0x5ac>
 800c4c6:	f04f 0a00 	mov.w	sl, #0
 800c4ca:	e681      	b.n	800c1d0 <_strtod_l+0x88>
 800c4cc:	4886      	ldr	r0, [pc, #536]	; (800c6e8 <_strtod_l+0x5a0>)
 800c4ce:	f002 fd17 	bl	800ef00 <nan>
 800c4d2:	ec5b ab10 	vmov	sl, fp, d0
 800c4d6:	e67b      	b.n	800c1d0 <_strtod_l+0x88>
 800c4d8:	9b05      	ldr	r3, [sp, #20]
 800c4da:	9807      	ldr	r0, [sp, #28]
 800c4dc:	1af3      	subs	r3, r6, r3
 800c4de:	2f00      	cmp	r7, #0
 800c4e0:	bf08      	it	eq
 800c4e2:	462f      	moveq	r7, r5
 800c4e4:	2d10      	cmp	r5, #16
 800c4e6:	9306      	str	r3, [sp, #24]
 800c4e8:	46a8      	mov	r8, r5
 800c4ea:	bfa8      	it	ge
 800c4ec:	f04f 0810 	movge.w	r8, #16
 800c4f0:	f7f4 f830 	bl	8000554 <__aeabi_ui2d>
 800c4f4:	2d09      	cmp	r5, #9
 800c4f6:	4682      	mov	sl, r0
 800c4f8:	468b      	mov	fp, r1
 800c4fa:	dd13      	ble.n	800c524 <_strtod_l+0x3dc>
 800c4fc:	4b7b      	ldr	r3, [pc, #492]	; (800c6ec <_strtod_l+0x5a4>)
 800c4fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c502:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c506:	f7f4 f89f 	bl	8000648 <__aeabi_dmul>
 800c50a:	4682      	mov	sl, r0
 800c50c:	4648      	mov	r0, r9
 800c50e:	468b      	mov	fp, r1
 800c510:	f7f4 f820 	bl	8000554 <__aeabi_ui2d>
 800c514:	4602      	mov	r2, r0
 800c516:	460b      	mov	r3, r1
 800c518:	4650      	mov	r0, sl
 800c51a:	4659      	mov	r1, fp
 800c51c:	f7f3 fede 	bl	80002dc <__adddf3>
 800c520:	4682      	mov	sl, r0
 800c522:	468b      	mov	fp, r1
 800c524:	2d0f      	cmp	r5, #15
 800c526:	dc38      	bgt.n	800c59a <_strtod_l+0x452>
 800c528:	9b06      	ldr	r3, [sp, #24]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f43f ae50 	beq.w	800c1d0 <_strtod_l+0x88>
 800c530:	dd24      	ble.n	800c57c <_strtod_l+0x434>
 800c532:	2b16      	cmp	r3, #22
 800c534:	dc0b      	bgt.n	800c54e <_strtod_l+0x406>
 800c536:	496d      	ldr	r1, [pc, #436]	; (800c6ec <_strtod_l+0x5a4>)
 800c538:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c53c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c540:	4652      	mov	r2, sl
 800c542:	465b      	mov	r3, fp
 800c544:	f7f4 f880 	bl	8000648 <__aeabi_dmul>
 800c548:	4682      	mov	sl, r0
 800c54a:	468b      	mov	fp, r1
 800c54c:	e640      	b.n	800c1d0 <_strtod_l+0x88>
 800c54e:	9a06      	ldr	r2, [sp, #24]
 800c550:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c554:	4293      	cmp	r3, r2
 800c556:	db20      	blt.n	800c59a <_strtod_l+0x452>
 800c558:	4c64      	ldr	r4, [pc, #400]	; (800c6ec <_strtod_l+0x5a4>)
 800c55a:	f1c5 050f 	rsb	r5, r5, #15
 800c55e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c562:	4652      	mov	r2, sl
 800c564:	465b      	mov	r3, fp
 800c566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c56a:	f7f4 f86d 	bl	8000648 <__aeabi_dmul>
 800c56e:	9b06      	ldr	r3, [sp, #24]
 800c570:	1b5d      	subs	r5, r3, r5
 800c572:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c576:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c57a:	e7e3      	b.n	800c544 <_strtod_l+0x3fc>
 800c57c:	9b06      	ldr	r3, [sp, #24]
 800c57e:	3316      	adds	r3, #22
 800c580:	db0b      	blt.n	800c59a <_strtod_l+0x452>
 800c582:	9b05      	ldr	r3, [sp, #20]
 800c584:	1b9e      	subs	r6, r3, r6
 800c586:	4b59      	ldr	r3, [pc, #356]	; (800c6ec <_strtod_l+0x5a4>)
 800c588:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c58c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c590:	4650      	mov	r0, sl
 800c592:	4659      	mov	r1, fp
 800c594:	f7f4 f982 	bl	800089c <__aeabi_ddiv>
 800c598:	e7d6      	b.n	800c548 <_strtod_l+0x400>
 800c59a:	9b06      	ldr	r3, [sp, #24]
 800c59c:	eba5 0808 	sub.w	r8, r5, r8
 800c5a0:	4498      	add	r8, r3
 800c5a2:	f1b8 0f00 	cmp.w	r8, #0
 800c5a6:	dd74      	ble.n	800c692 <_strtod_l+0x54a>
 800c5a8:	f018 030f 	ands.w	r3, r8, #15
 800c5ac:	d00a      	beq.n	800c5c4 <_strtod_l+0x47c>
 800c5ae:	494f      	ldr	r1, [pc, #316]	; (800c6ec <_strtod_l+0x5a4>)
 800c5b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c5b4:	4652      	mov	r2, sl
 800c5b6:	465b      	mov	r3, fp
 800c5b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5bc:	f7f4 f844 	bl	8000648 <__aeabi_dmul>
 800c5c0:	4682      	mov	sl, r0
 800c5c2:	468b      	mov	fp, r1
 800c5c4:	f038 080f 	bics.w	r8, r8, #15
 800c5c8:	d04f      	beq.n	800c66a <_strtod_l+0x522>
 800c5ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c5ce:	dd22      	ble.n	800c616 <_strtod_l+0x4ce>
 800c5d0:	2500      	movs	r5, #0
 800c5d2:	462e      	mov	r6, r5
 800c5d4:	9507      	str	r5, [sp, #28]
 800c5d6:	9505      	str	r5, [sp, #20]
 800c5d8:	2322      	movs	r3, #34	; 0x22
 800c5da:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c6f4 <_strtod_l+0x5ac>
 800c5de:	6023      	str	r3, [r4, #0]
 800c5e0:	f04f 0a00 	mov.w	sl, #0
 800c5e4:	9b07      	ldr	r3, [sp, #28]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	f43f adf2 	beq.w	800c1d0 <_strtod_l+0x88>
 800c5ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	f001 fe94 	bl	800e31c <_Bfree>
 800c5f4:	9905      	ldr	r1, [sp, #20]
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f001 fe90 	bl	800e31c <_Bfree>
 800c5fc:	4631      	mov	r1, r6
 800c5fe:	4620      	mov	r0, r4
 800c600:	f001 fe8c 	bl	800e31c <_Bfree>
 800c604:	9907      	ldr	r1, [sp, #28]
 800c606:	4620      	mov	r0, r4
 800c608:	f001 fe88 	bl	800e31c <_Bfree>
 800c60c:	4629      	mov	r1, r5
 800c60e:	4620      	mov	r0, r4
 800c610:	f001 fe84 	bl	800e31c <_Bfree>
 800c614:	e5dc      	b.n	800c1d0 <_strtod_l+0x88>
 800c616:	4b36      	ldr	r3, [pc, #216]	; (800c6f0 <_strtod_l+0x5a8>)
 800c618:	9304      	str	r3, [sp, #16]
 800c61a:	2300      	movs	r3, #0
 800c61c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c620:	4650      	mov	r0, sl
 800c622:	4659      	mov	r1, fp
 800c624:	4699      	mov	r9, r3
 800c626:	f1b8 0f01 	cmp.w	r8, #1
 800c62a:	dc21      	bgt.n	800c670 <_strtod_l+0x528>
 800c62c:	b10b      	cbz	r3, 800c632 <_strtod_l+0x4ea>
 800c62e:	4682      	mov	sl, r0
 800c630:	468b      	mov	fp, r1
 800c632:	4b2f      	ldr	r3, [pc, #188]	; (800c6f0 <_strtod_l+0x5a8>)
 800c634:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c638:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c63c:	4652      	mov	r2, sl
 800c63e:	465b      	mov	r3, fp
 800c640:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c644:	f7f4 f800 	bl	8000648 <__aeabi_dmul>
 800c648:	4b2a      	ldr	r3, [pc, #168]	; (800c6f4 <_strtod_l+0x5ac>)
 800c64a:	460a      	mov	r2, r1
 800c64c:	400b      	ands	r3, r1
 800c64e:	492a      	ldr	r1, [pc, #168]	; (800c6f8 <_strtod_l+0x5b0>)
 800c650:	428b      	cmp	r3, r1
 800c652:	4682      	mov	sl, r0
 800c654:	d8bc      	bhi.n	800c5d0 <_strtod_l+0x488>
 800c656:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c65a:	428b      	cmp	r3, r1
 800c65c:	bf86      	itte	hi
 800c65e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c6fc <_strtod_l+0x5b4>
 800c662:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800c666:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c66a:	2300      	movs	r3, #0
 800c66c:	9304      	str	r3, [sp, #16]
 800c66e:	e084      	b.n	800c77a <_strtod_l+0x632>
 800c670:	f018 0f01 	tst.w	r8, #1
 800c674:	d005      	beq.n	800c682 <_strtod_l+0x53a>
 800c676:	9b04      	ldr	r3, [sp, #16]
 800c678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67c:	f7f3 ffe4 	bl	8000648 <__aeabi_dmul>
 800c680:	2301      	movs	r3, #1
 800c682:	9a04      	ldr	r2, [sp, #16]
 800c684:	3208      	adds	r2, #8
 800c686:	f109 0901 	add.w	r9, r9, #1
 800c68a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c68e:	9204      	str	r2, [sp, #16]
 800c690:	e7c9      	b.n	800c626 <_strtod_l+0x4de>
 800c692:	d0ea      	beq.n	800c66a <_strtod_l+0x522>
 800c694:	f1c8 0800 	rsb	r8, r8, #0
 800c698:	f018 020f 	ands.w	r2, r8, #15
 800c69c:	d00a      	beq.n	800c6b4 <_strtod_l+0x56c>
 800c69e:	4b13      	ldr	r3, [pc, #76]	; (800c6ec <_strtod_l+0x5a4>)
 800c6a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6a4:	4650      	mov	r0, sl
 800c6a6:	4659      	mov	r1, fp
 800c6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ac:	f7f4 f8f6 	bl	800089c <__aeabi_ddiv>
 800c6b0:	4682      	mov	sl, r0
 800c6b2:	468b      	mov	fp, r1
 800c6b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c6b8:	d0d7      	beq.n	800c66a <_strtod_l+0x522>
 800c6ba:	f1b8 0f1f 	cmp.w	r8, #31
 800c6be:	dd1f      	ble.n	800c700 <_strtod_l+0x5b8>
 800c6c0:	2500      	movs	r5, #0
 800c6c2:	462e      	mov	r6, r5
 800c6c4:	9507      	str	r5, [sp, #28]
 800c6c6:	9505      	str	r5, [sp, #20]
 800c6c8:	2322      	movs	r3, #34	; 0x22
 800c6ca:	f04f 0a00 	mov.w	sl, #0
 800c6ce:	f04f 0b00 	mov.w	fp, #0
 800c6d2:	6023      	str	r3, [r4, #0]
 800c6d4:	e786      	b.n	800c5e4 <_strtod_l+0x49c>
 800c6d6:	bf00      	nop
 800c6d8:	080107bd 	.word	0x080107bd
 800c6dc:	08010800 	.word	0x08010800
 800c6e0:	080107b5 	.word	0x080107b5
 800c6e4:	08010944 	.word	0x08010944
 800c6e8:	08010bf0 	.word	0x08010bf0
 800c6ec:	08010ad0 	.word	0x08010ad0
 800c6f0:	08010aa8 	.word	0x08010aa8
 800c6f4:	7ff00000 	.word	0x7ff00000
 800c6f8:	7ca00000 	.word	0x7ca00000
 800c6fc:	7fefffff 	.word	0x7fefffff
 800c700:	f018 0310 	ands.w	r3, r8, #16
 800c704:	bf18      	it	ne
 800c706:	236a      	movne	r3, #106	; 0x6a
 800c708:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800cab8 <_strtod_l+0x970>
 800c70c:	9304      	str	r3, [sp, #16]
 800c70e:	4650      	mov	r0, sl
 800c710:	4659      	mov	r1, fp
 800c712:	2300      	movs	r3, #0
 800c714:	f018 0f01 	tst.w	r8, #1
 800c718:	d004      	beq.n	800c724 <_strtod_l+0x5dc>
 800c71a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c71e:	f7f3 ff93 	bl	8000648 <__aeabi_dmul>
 800c722:	2301      	movs	r3, #1
 800c724:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c728:	f109 0908 	add.w	r9, r9, #8
 800c72c:	d1f2      	bne.n	800c714 <_strtod_l+0x5cc>
 800c72e:	b10b      	cbz	r3, 800c734 <_strtod_l+0x5ec>
 800c730:	4682      	mov	sl, r0
 800c732:	468b      	mov	fp, r1
 800c734:	9b04      	ldr	r3, [sp, #16]
 800c736:	b1c3      	cbz	r3, 800c76a <_strtod_l+0x622>
 800c738:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c73c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c740:	2b00      	cmp	r3, #0
 800c742:	4659      	mov	r1, fp
 800c744:	dd11      	ble.n	800c76a <_strtod_l+0x622>
 800c746:	2b1f      	cmp	r3, #31
 800c748:	f340 8124 	ble.w	800c994 <_strtod_l+0x84c>
 800c74c:	2b34      	cmp	r3, #52	; 0x34
 800c74e:	bfde      	ittt	le
 800c750:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c754:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800c758:	fa03 f202 	lslle.w	r2, r3, r2
 800c75c:	f04f 0a00 	mov.w	sl, #0
 800c760:	bfcc      	ite	gt
 800c762:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c766:	ea02 0b01 	andle.w	fp, r2, r1
 800c76a:	2200      	movs	r2, #0
 800c76c:	2300      	movs	r3, #0
 800c76e:	4650      	mov	r0, sl
 800c770:	4659      	mov	r1, fp
 800c772:	f7f4 f9d1 	bl	8000b18 <__aeabi_dcmpeq>
 800c776:	2800      	cmp	r0, #0
 800c778:	d1a2      	bne.n	800c6c0 <_strtod_l+0x578>
 800c77a:	9b07      	ldr	r3, [sp, #28]
 800c77c:	9300      	str	r3, [sp, #0]
 800c77e:	9908      	ldr	r1, [sp, #32]
 800c780:	462b      	mov	r3, r5
 800c782:	463a      	mov	r2, r7
 800c784:	4620      	mov	r0, r4
 800c786:	f001 fe31 	bl	800e3ec <__s2b>
 800c78a:	9007      	str	r0, [sp, #28]
 800c78c:	2800      	cmp	r0, #0
 800c78e:	f43f af1f 	beq.w	800c5d0 <_strtod_l+0x488>
 800c792:	9b05      	ldr	r3, [sp, #20]
 800c794:	1b9e      	subs	r6, r3, r6
 800c796:	9b06      	ldr	r3, [sp, #24]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	bfb4      	ite	lt
 800c79c:	4633      	movlt	r3, r6
 800c79e:	2300      	movge	r3, #0
 800c7a0:	930c      	str	r3, [sp, #48]	; 0x30
 800c7a2:	9b06      	ldr	r3, [sp, #24]
 800c7a4:	2500      	movs	r5, #0
 800c7a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c7aa:	9312      	str	r3, [sp, #72]	; 0x48
 800c7ac:	462e      	mov	r6, r5
 800c7ae:	9b07      	ldr	r3, [sp, #28]
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	6859      	ldr	r1, [r3, #4]
 800c7b4:	f001 fd72 	bl	800e29c <_Balloc>
 800c7b8:	9005      	str	r0, [sp, #20]
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	f43f af0c 	beq.w	800c5d8 <_strtod_l+0x490>
 800c7c0:	9b07      	ldr	r3, [sp, #28]
 800c7c2:	691a      	ldr	r2, [r3, #16]
 800c7c4:	3202      	adds	r2, #2
 800c7c6:	f103 010c 	add.w	r1, r3, #12
 800c7ca:	0092      	lsls	r2, r2, #2
 800c7cc:	300c      	adds	r0, #12
 800c7ce:	f001 fd4b 	bl	800e268 <memcpy>
 800c7d2:	ec4b ab10 	vmov	d0, sl, fp
 800c7d6:	aa1a      	add	r2, sp, #104	; 0x68
 800c7d8:	a919      	add	r1, sp, #100	; 0x64
 800c7da:	4620      	mov	r0, r4
 800c7dc:	f002 f94c 	bl	800ea78 <__d2b>
 800c7e0:	ec4b ab18 	vmov	d8, sl, fp
 800c7e4:	9018      	str	r0, [sp, #96]	; 0x60
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	f43f aef6 	beq.w	800c5d8 <_strtod_l+0x490>
 800c7ec:	2101      	movs	r1, #1
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	f001 fe96 	bl	800e520 <__i2b>
 800c7f4:	4606      	mov	r6, r0
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	f43f aeee 	beq.w	800c5d8 <_strtod_l+0x490>
 800c7fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c7fe:	9904      	ldr	r1, [sp, #16]
 800c800:	2b00      	cmp	r3, #0
 800c802:	bfab      	itete	ge
 800c804:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c806:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c808:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c80a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c80e:	bfac      	ite	ge
 800c810:	eb03 0902 	addge.w	r9, r3, r2
 800c814:	1ad7      	sublt	r7, r2, r3
 800c816:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c818:	eba3 0801 	sub.w	r8, r3, r1
 800c81c:	4490      	add	r8, r2
 800c81e:	4ba1      	ldr	r3, [pc, #644]	; (800caa4 <_strtod_l+0x95c>)
 800c820:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c824:	4598      	cmp	r8, r3
 800c826:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c82a:	f280 80c7 	bge.w	800c9bc <_strtod_l+0x874>
 800c82e:	eba3 0308 	sub.w	r3, r3, r8
 800c832:	2b1f      	cmp	r3, #31
 800c834:	eba2 0203 	sub.w	r2, r2, r3
 800c838:	f04f 0101 	mov.w	r1, #1
 800c83c:	f300 80b1 	bgt.w	800c9a2 <_strtod_l+0x85a>
 800c840:	fa01 f303 	lsl.w	r3, r1, r3
 800c844:	930d      	str	r3, [sp, #52]	; 0x34
 800c846:	2300      	movs	r3, #0
 800c848:	9308      	str	r3, [sp, #32]
 800c84a:	eb09 0802 	add.w	r8, r9, r2
 800c84e:	9b04      	ldr	r3, [sp, #16]
 800c850:	45c1      	cmp	r9, r8
 800c852:	4417      	add	r7, r2
 800c854:	441f      	add	r7, r3
 800c856:	464b      	mov	r3, r9
 800c858:	bfa8      	it	ge
 800c85a:	4643      	movge	r3, r8
 800c85c:	42bb      	cmp	r3, r7
 800c85e:	bfa8      	it	ge
 800c860:	463b      	movge	r3, r7
 800c862:	2b00      	cmp	r3, #0
 800c864:	bfc2      	ittt	gt
 800c866:	eba8 0803 	subgt.w	r8, r8, r3
 800c86a:	1aff      	subgt	r7, r7, r3
 800c86c:	eba9 0903 	subgt.w	r9, r9, r3
 800c870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c872:	2b00      	cmp	r3, #0
 800c874:	dd17      	ble.n	800c8a6 <_strtod_l+0x75e>
 800c876:	4631      	mov	r1, r6
 800c878:	461a      	mov	r2, r3
 800c87a:	4620      	mov	r0, r4
 800c87c:	f001 ff10 	bl	800e6a0 <__pow5mult>
 800c880:	4606      	mov	r6, r0
 800c882:	2800      	cmp	r0, #0
 800c884:	f43f aea8 	beq.w	800c5d8 <_strtod_l+0x490>
 800c888:	4601      	mov	r1, r0
 800c88a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c88c:	4620      	mov	r0, r4
 800c88e:	f001 fe5d 	bl	800e54c <__multiply>
 800c892:	900b      	str	r0, [sp, #44]	; 0x2c
 800c894:	2800      	cmp	r0, #0
 800c896:	f43f ae9f 	beq.w	800c5d8 <_strtod_l+0x490>
 800c89a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c89c:	4620      	mov	r0, r4
 800c89e:	f001 fd3d 	bl	800e31c <_Bfree>
 800c8a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8a4:	9318      	str	r3, [sp, #96]	; 0x60
 800c8a6:	f1b8 0f00 	cmp.w	r8, #0
 800c8aa:	f300 808c 	bgt.w	800c9c6 <_strtod_l+0x87e>
 800c8ae:	9b06      	ldr	r3, [sp, #24]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	dd08      	ble.n	800c8c6 <_strtod_l+0x77e>
 800c8b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c8b6:	9905      	ldr	r1, [sp, #20]
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	f001 fef1 	bl	800e6a0 <__pow5mult>
 800c8be:	9005      	str	r0, [sp, #20]
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	f43f ae89 	beq.w	800c5d8 <_strtod_l+0x490>
 800c8c6:	2f00      	cmp	r7, #0
 800c8c8:	dd08      	ble.n	800c8dc <_strtod_l+0x794>
 800c8ca:	9905      	ldr	r1, [sp, #20]
 800c8cc:	463a      	mov	r2, r7
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	f001 ff40 	bl	800e754 <__lshift>
 800c8d4:	9005      	str	r0, [sp, #20]
 800c8d6:	2800      	cmp	r0, #0
 800c8d8:	f43f ae7e 	beq.w	800c5d8 <_strtod_l+0x490>
 800c8dc:	f1b9 0f00 	cmp.w	r9, #0
 800c8e0:	dd08      	ble.n	800c8f4 <_strtod_l+0x7ac>
 800c8e2:	4631      	mov	r1, r6
 800c8e4:	464a      	mov	r2, r9
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	f001 ff34 	bl	800e754 <__lshift>
 800c8ec:	4606      	mov	r6, r0
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	f43f ae72 	beq.w	800c5d8 <_strtod_l+0x490>
 800c8f4:	9a05      	ldr	r2, [sp, #20]
 800c8f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	f001 ffb7 	bl	800e86c <__mdiff>
 800c8fe:	4605      	mov	r5, r0
 800c900:	2800      	cmp	r0, #0
 800c902:	f43f ae69 	beq.w	800c5d8 <_strtod_l+0x490>
 800c906:	68c3      	ldr	r3, [r0, #12]
 800c908:	930b      	str	r3, [sp, #44]	; 0x2c
 800c90a:	2300      	movs	r3, #0
 800c90c:	60c3      	str	r3, [r0, #12]
 800c90e:	4631      	mov	r1, r6
 800c910:	f001 ff90 	bl	800e834 <__mcmp>
 800c914:	2800      	cmp	r0, #0
 800c916:	da60      	bge.n	800c9da <_strtod_l+0x892>
 800c918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c91a:	ea53 030a 	orrs.w	r3, r3, sl
 800c91e:	f040 8082 	bne.w	800ca26 <_strtod_l+0x8de>
 800c922:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c926:	2b00      	cmp	r3, #0
 800c928:	d17d      	bne.n	800ca26 <_strtod_l+0x8de>
 800c92a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c92e:	0d1b      	lsrs	r3, r3, #20
 800c930:	051b      	lsls	r3, r3, #20
 800c932:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c936:	d976      	bls.n	800ca26 <_strtod_l+0x8de>
 800c938:	696b      	ldr	r3, [r5, #20]
 800c93a:	b913      	cbnz	r3, 800c942 <_strtod_l+0x7fa>
 800c93c:	692b      	ldr	r3, [r5, #16]
 800c93e:	2b01      	cmp	r3, #1
 800c940:	dd71      	ble.n	800ca26 <_strtod_l+0x8de>
 800c942:	4629      	mov	r1, r5
 800c944:	2201      	movs	r2, #1
 800c946:	4620      	mov	r0, r4
 800c948:	f001 ff04 	bl	800e754 <__lshift>
 800c94c:	4631      	mov	r1, r6
 800c94e:	4605      	mov	r5, r0
 800c950:	f001 ff70 	bl	800e834 <__mcmp>
 800c954:	2800      	cmp	r0, #0
 800c956:	dd66      	ble.n	800ca26 <_strtod_l+0x8de>
 800c958:	9904      	ldr	r1, [sp, #16]
 800c95a:	4a53      	ldr	r2, [pc, #332]	; (800caa8 <_strtod_l+0x960>)
 800c95c:	465b      	mov	r3, fp
 800c95e:	2900      	cmp	r1, #0
 800c960:	f000 8081 	beq.w	800ca66 <_strtod_l+0x91e>
 800c964:	ea02 010b 	and.w	r1, r2, fp
 800c968:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c96c:	dc7b      	bgt.n	800ca66 <_strtod_l+0x91e>
 800c96e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c972:	f77f aea9 	ble.w	800c6c8 <_strtod_l+0x580>
 800c976:	4b4d      	ldr	r3, [pc, #308]	; (800caac <_strtod_l+0x964>)
 800c978:	4650      	mov	r0, sl
 800c97a:	4659      	mov	r1, fp
 800c97c:	2200      	movs	r2, #0
 800c97e:	f7f3 fe63 	bl	8000648 <__aeabi_dmul>
 800c982:	460b      	mov	r3, r1
 800c984:	4303      	orrs	r3, r0
 800c986:	bf08      	it	eq
 800c988:	2322      	moveq	r3, #34	; 0x22
 800c98a:	4682      	mov	sl, r0
 800c98c:	468b      	mov	fp, r1
 800c98e:	bf08      	it	eq
 800c990:	6023      	streq	r3, [r4, #0]
 800c992:	e62b      	b.n	800c5ec <_strtod_l+0x4a4>
 800c994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c998:	fa02 f303 	lsl.w	r3, r2, r3
 800c99c:	ea03 0a0a 	and.w	sl, r3, sl
 800c9a0:	e6e3      	b.n	800c76a <_strtod_l+0x622>
 800c9a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c9a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c9aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c9ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c9b2:	fa01 f308 	lsl.w	r3, r1, r8
 800c9b6:	9308      	str	r3, [sp, #32]
 800c9b8:	910d      	str	r1, [sp, #52]	; 0x34
 800c9ba:	e746      	b.n	800c84a <_strtod_l+0x702>
 800c9bc:	2300      	movs	r3, #0
 800c9be:	9308      	str	r3, [sp, #32]
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	930d      	str	r3, [sp, #52]	; 0x34
 800c9c4:	e741      	b.n	800c84a <_strtod_l+0x702>
 800c9c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c9c8:	4642      	mov	r2, r8
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	f001 fec2 	bl	800e754 <__lshift>
 800c9d0:	9018      	str	r0, [sp, #96]	; 0x60
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	f47f af6b 	bne.w	800c8ae <_strtod_l+0x766>
 800c9d8:	e5fe      	b.n	800c5d8 <_strtod_l+0x490>
 800c9da:	465f      	mov	r7, fp
 800c9dc:	d16e      	bne.n	800cabc <_strtod_l+0x974>
 800c9de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c9e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9e4:	b342      	cbz	r2, 800ca38 <_strtod_l+0x8f0>
 800c9e6:	4a32      	ldr	r2, [pc, #200]	; (800cab0 <_strtod_l+0x968>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d128      	bne.n	800ca3e <_strtod_l+0x8f6>
 800c9ec:	9b04      	ldr	r3, [sp, #16]
 800c9ee:	4651      	mov	r1, sl
 800c9f0:	b1eb      	cbz	r3, 800ca2e <_strtod_l+0x8e6>
 800c9f2:	4b2d      	ldr	r3, [pc, #180]	; (800caa8 <_strtod_l+0x960>)
 800c9f4:	403b      	ands	r3, r7
 800c9f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c9fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9fe:	d819      	bhi.n	800ca34 <_strtod_l+0x8ec>
 800ca00:	0d1b      	lsrs	r3, r3, #20
 800ca02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ca06:	fa02 f303 	lsl.w	r3, r2, r3
 800ca0a:	4299      	cmp	r1, r3
 800ca0c:	d117      	bne.n	800ca3e <_strtod_l+0x8f6>
 800ca0e:	4b29      	ldr	r3, [pc, #164]	; (800cab4 <_strtod_l+0x96c>)
 800ca10:	429f      	cmp	r7, r3
 800ca12:	d102      	bne.n	800ca1a <_strtod_l+0x8d2>
 800ca14:	3101      	adds	r1, #1
 800ca16:	f43f addf 	beq.w	800c5d8 <_strtod_l+0x490>
 800ca1a:	4b23      	ldr	r3, [pc, #140]	; (800caa8 <_strtod_l+0x960>)
 800ca1c:	403b      	ands	r3, r7
 800ca1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ca22:	f04f 0a00 	mov.w	sl, #0
 800ca26:	9b04      	ldr	r3, [sp, #16]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d1a4      	bne.n	800c976 <_strtod_l+0x82e>
 800ca2c:	e5de      	b.n	800c5ec <_strtod_l+0x4a4>
 800ca2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca32:	e7ea      	b.n	800ca0a <_strtod_l+0x8c2>
 800ca34:	4613      	mov	r3, r2
 800ca36:	e7e8      	b.n	800ca0a <_strtod_l+0x8c2>
 800ca38:	ea53 030a 	orrs.w	r3, r3, sl
 800ca3c:	d08c      	beq.n	800c958 <_strtod_l+0x810>
 800ca3e:	9b08      	ldr	r3, [sp, #32]
 800ca40:	b1db      	cbz	r3, 800ca7a <_strtod_l+0x932>
 800ca42:	423b      	tst	r3, r7
 800ca44:	d0ef      	beq.n	800ca26 <_strtod_l+0x8de>
 800ca46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca48:	9a04      	ldr	r2, [sp, #16]
 800ca4a:	4650      	mov	r0, sl
 800ca4c:	4659      	mov	r1, fp
 800ca4e:	b1c3      	cbz	r3, 800ca82 <_strtod_l+0x93a>
 800ca50:	f7ff fb5c 	bl	800c10c <sulp>
 800ca54:	4602      	mov	r2, r0
 800ca56:	460b      	mov	r3, r1
 800ca58:	ec51 0b18 	vmov	r0, r1, d8
 800ca5c:	f7f3 fc3e 	bl	80002dc <__adddf3>
 800ca60:	4682      	mov	sl, r0
 800ca62:	468b      	mov	fp, r1
 800ca64:	e7df      	b.n	800ca26 <_strtod_l+0x8de>
 800ca66:	4013      	ands	r3, r2
 800ca68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ca6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ca70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ca74:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ca78:	e7d5      	b.n	800ca26 <_strtod_l+0x8de>
 800ca7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca7c:	ea13 0f0a 	tst.w	r3, sl
 800ca80:	e7e0      	b.n	800ca44 <_strtod_l+0x8fc>
 800ca82:	f7ff fb43 	bl	800c10c <sulp>
 800ca86:	4602      	mov	r2, r0
 800ca88:	460b      	mov	r3, r1
 800ca8a:	ec51 0b18 	vmov	r0, r1, d8
 800ca8e:	f7f3 fc23 	bl	80002d8 <__aeabi_dsub>
 800ca92:	2200      	movs	r2, #0
 800ca94:	2300      	movs	r3, #0
 800ca96:	4682      	mov	sl, r0
 800ca98:	468b      	mov	fp, r1
 800ca9a:	f7f4 f83d 	bl	8000b18 <__aeabi_dcmpeq>
 800ca9e:	2800      	cmp	r0, #0
 800caa0:	d0c1      	beq.n	800ca26 <_strtod_l+0x8de>
 800caa2:	e611      	b.n	800c6c8 <_strtod_l+0x580>
 800caa4:	fffffc02 	.word	0xfffffc02
 800caa8:	7ff00000 	.word	0x7ff00000
 800caac:	39500000 	.word	0x39500000
 800cab0:	000fffff 	.word	0x000fffff
 800cab4:	7fefffff 	.word	0x7fefffff
 800cab8:	08010818 	.word	0x08010818
 800cabc:	4631      	mov	r1, r6
 800cabe:	4628      	mov	r0, r5
 800cac0:	f002 f836 	bl	800eb30 <__ratio>
 800cac4:	ec59 8b10 	vmov	r8, r9, d0
 800cac8:	ee10 0a10 	vmov	r0, s0
 800cacc:	2200      	movs	r2, #0
 800cace:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cad2:	4649      	mov	r1, r9
 800cad4:	f7f4 f834 	bl	8000b40 <__aeabi_dcmple>
 800cad8:	2800      	cmp	r0, #0
 800cada:	d07a      	beq.n	800cbd2 <_strtod_l+0xa8a>
 800cadc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d04a      	beq.n	800cb78 <_strtod_l+0xa30>
 800cae2:	4b95      	ldr	r3, [pc, #596]	; (800cd38 <_strtod_l+0xbf0>)
 800cae4:	2200      	movs	r2, #0
 800cae6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800caea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800cd38 <_strtod_l+0xbf0>
 800caee:	f04f 0800 	mov.w	r8, #0
 800caf2:	4b92      	ldr	r3, [pc, #584]	; (800cd3c <_strtod_l+0xbf4>)
 800caf4:	403b      	ands	r3, r7
 800caf6:	930d      	str	r3, [sp, #52]	; 0x34
 800caf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cafa:	4b91      	ldr	r3, [pc, #580]	; (800cd40 <_strtod_l+0xbf8>)
 800cafc:	429a      	cmp	r2, r3
 800cafe:	f040 80b0 	bne.w	800cc62 <_strtod_l+0xb1a>
 800cb02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cb06:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800cb0a:	ec4b ab10 	vmov	d0, sl, fp
 800cb0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cb12:	f001 ff35 	bl	800e980 <__ulp>
 800cb16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cb1a:	ec53 2b10 	vmov	r2, r3, d0
 800cb1e:	f7f3 fd93 	bl	8000648 <__aeabi_dmul>
 800cb22:	4652      	mov	r2, sl
 800cb24:	465b      	mov	r3, fp
 800cb26:	f7f3 fbd9 	bl	80002dc <__adddf3>
 800cb2a:	460b      	mov	r3, r1
 800cb2c:	4983      	ldr	r1, [pc, #524]	; (800cd3c <_strtod_l+0xbf4>)
 800cb2e:	4a85      	ldr	r2, [pc, #532]	; (800cd44 <_strtod_l+0xbfc>)
 800cb30:	4019      	ands	r1, r3
 800cb32:	4291      	cmp	r1, r2
 800cb34:	4682      	mov	sl, r0
 800cb36:	d960      	bls.n	800cbfa <_strtod_l+0xab2>
 800cb38:	ee18 3a90 	vmov	r3, s17
 800cb3c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d104      	bne.n	800cb4e <_strtod_l+0xa06>
 800cb44:	ee18 3a10 	vmov	r3, s16
 800cb48:	3301      	adds	r3, #1
 800cb4a:	f43f ad45 	beq.w	800c5d8 <_strtod_l+0x490>
 800cb4e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800cd50 <_strtod_l+0xc08>
 800cb52:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800cb56:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f001 fbdf 	bl	800e31c <_Bfree>
 800cb5e:	9905      	ldr	r1, [sp, #20]
 800cb60:	4620      	mov	r0, r4
 800cb62:	f001 fbdb 	bl	800e31c <_Bfree>
 800cb66:	4631      	mov	r1, r6
 800cb68:	4620      	mov	r0, r4
 800cb6a:	f001 fbd7 	bl	800e31c <_Bfree>
 800cb6e:	4629      	mov	r1, r5
 800cb70:	4620      	mov	r0, r4
 800cb72:	f001 fbd3 	bl	800e31c <_Bfree>
 800cb76:	e61a      	b.n	800c7ae <_strtod_l+0x666>
 800cb78:	f1ba 0f00 	cmp.w	sl, #0
 800cb7c:	d11b      	bne.n	800cbb6 <_strtod_l+0xa6e>
 800cb7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb82:	b9f3      	cbnz	r3, 800cbc2 <_strtod_l+0xa7a>
 800cb84:	4b6c      	ldr	r3, [pc, #432]	; (800cd38 <_strtod_l+0xbf0>)
 800cb86:	2200      	movs	r2, #0
 800cb88:	4640      	mov	r0, r8
 800cb8a:	4649      	mov	r1, r9
 800cb8c:	f7f3 ffce 	bl	8000b2c <__aeabi_dcmplt>
 800cb90:	b9d0      	cbnz	r0, 800cbc8 <_strtod_l+0xa80>
 800cb92:	4640      	mov	r0, r8
 800cb94:	4649      	mov	r1, r9
 800cb96:	4b6c      	ldr	r3, [pc, #432]	; (800cd48 <_strtod_l+0xc00>)
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f7f3 fd55 	bl	8000648 <__aeabi_dmul>
 800cb9e:	4680      	mov	r8, r0
 800cba0:	4689      	mov	r9, r1
 800cba2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cba6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800cbaa:	9315      	str	r3, [sp, #84]	; 0x54
 800cbac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cbb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cbb4:	e79d      	b.n	800caf2 <_strtod_l+0x9aa>
 800cbb6:	f1ba 0f01 	cmp.w	sl, #1
 800cbba:	d102      	bne.n	800cbc2 <_strtod_l+0xa7a>
 800cbbc:	2f00      	cmp	r7, #0
 800cbbe:	f43f ad83 	beq.w	800c6c8 <_strtod_l+0x580>
 800cbc2:	4b62      	ldr	r3, [pc, #392]	; (800cd4c <_strtod_l+0xc04>)
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	e78e      	b.n	800cae6 <_strtod_l+0x99e>
 800cbc8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800cd48 <_strtod_l+0xc00>
 800cbcc:	f04f 0800 	mov.w	r8, #0
 800cbd0:	e7e7      	b.n	800cba2 <_strtod_l+0xa5a>
 800cbd2:	4b5d      	ldr	r3, [pc, #372]	; (800cd48 <_strtod_l+0xc00>)
 800cbd4:	4640      	mov	r0, r8
 800cbd6:	4649      	mov	r1, r9
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f7f3 fd35 	bl	8000648 <__aeabi_dmul>
 800cbde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbe0:	4680      	mov	r8, r0
 800cbe2:	4689      	mov	r9, r1
 800cbe4:	b933      	cbnz	r3, 800cbf4 <_strtod_l+0xaac>
 800cbe6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cbea:	900e      	str	r0, [sp, #56]	; 0x38
 800cbec:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cbf2:	e7dd      	b.n	800cbb0 <_strtod_l+0xa68>
 800cbf4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800cbf8:	e7f9      	b.n	800cbee <_strtod_l+0xaa6>
 800cbfa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cbfe:	9b04      	ldr	r3, [sp, #16]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d1a8      	bne.n	800cb56 <_strtod_l+0xa0e>
 800cc04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cc08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc0a:	0d1b      	lsrs	r3, r3, #20
 800cc0c:	051b      	lsls	r3, r3, #20
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d1a1      	bne.n	800cb56 <_strtod_l+0xa0e>
 800cc12:	4640      	mov	r0, r8
 800cc14:	4649      	mov	r1, r9
 800cc16:	f7f4 f877 	bl	8000d08 <__aeabi_d2lz>
 800cc1a:	f7f3 fce7 	bl	80005ec <__aeabi_l2d>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	460b      	mov	r3, r1
 800cc22:	4640      	mov	r0, r8
 800cc24:	4649      	mov	r1, r9
 800cc26:	f7f3 fb57 	bl	80002d8 <__aeabi_dsub>
 800cc2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc30:	ea43 030a 	orr.w	r3, r3, sl
 800cc34:	4313      	orrs	r3, r2
 800cc36:	4680      	mov	r8, r0
 800cc38:	4689      	mov	r9, r1
 800cc3a:	d055      	beq.n	800cce8 <_strtod_l+0xba0>
 800cc3c:	a336      	add	r3, pc, #216	; (adr r3, 800cd18 <_strtod_l+0xbd0>)
 800cc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc42:	f7f3 ff73 	bl	8000b2c <__aeabi_dcmplt>
 800cc46:	2800      	cmp	r0, #0
 800cc48:	f47f acd0 	bne.w	800c5ec <_strtod_l+0x4a4>
 800cc4c:	a334      	add	r3, pc, #208	; (adr r3, 800cd20 <_strtod_l+0xbd8>)
 800cc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc52:	4640      	mov	r0, r8
 800cc54:	4649      	mov	r1, r9
 800cc56:	f7f3 ff87 	bl	8000b68 <__aeabi_dcmpgt>
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	f43f af7b 	beq.w	800cb56 <_strtod_l+0xa0e>
 800cc60:	e4c4      	b.n	800c5ec <_strtod_l+0x4a4>
 800cc62:	9b04      	ldr	r3, [sp, #16]
 800cc64:	b333      	cbz	r3, 800ccb4 <_strtod_l+0xb6c>
 800cc66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc68:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cc6c:	d822      	bhi.n	800ccb4 <_strtod_l+0xb6c>
 800cc6e:	a32e      	add	r3, pc, #184	; (adr r3, 800cd28 <_strtod_l+0xbe0>)
 800cc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc74:	4640      	mov	r0, r8
 800cc76:	4649      	mov	r1, r9
 800cc78:	f7f3 ff62 	bl	8000b40 <__aeabi_dcmple>
 800cc7c:	b1a0      	cbz	r0, 800cca8 <_strtod_l+0xb60>
 800cc7e:	4649      	mov	r1, r9
 800cc80:	4640      	mov	r0, r8
 800cc82:	f7f3 ffb9 	bl	8000bf8 <__aeabi_d2uiz>
 800cc86:	2801      	cmp	r0, #1
 800cc88:	bf38      	it	cc
 800cc8a:	2001      	movcc	r0, #1
 800cc8c:	f7f3 fc62 	bl	8000554 <__aeabi_ui2d>
 800cc90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc92:	4680      	mov	r8, r0
 800cc94:	4689      	mov	r9, r1
 800cc96:	bb23      	cbnz	r3, 800cce2 <_strtod_l+0xb9a>
 800cc98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc9c:	9010      	str	r0, [sp, #64]	; 0x40
 800cc9e:	9311      	str	r3, [sp, #68]	; 0x44
 800cca0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cca4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ccac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ccb0:	1a9b      	subs	r3, r3, r2
 800ccb2:	9309      	str	r3, [sp, #36]	; 0x24
 800ccb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ccb8:	eeb0 0a48 	vmov.f32	s0, s16
 800ccbc:	eef0 0a68 	vmov.f32	s1, s17
 800ccc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ccc4:	f001 fe5c 	bl	800e980 <__ulp>
 800ccc8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cccc:	ec53 2b10 	vmov	r2, r3, d0
 800ccd0:	f7f3 fcba 	bl	8000648 <__aeabi_dmul>
 800ccd4:	ec53 2b18 	vmov	r2, r3, d8
 800ccd8:	f7f3 fb00 	bl	80002dc <__adddf3>
 800ccdc:	4682      	mov	sl, r0
 800ccde:	468b      	mov	fp, r1
 800cce0:	e78d      	b.n	800cbfe <_strtod_l+0xab6>
 800cce2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800cce6:	e7db      	b.n	800cca0 <_strtod_l+0xb58>
 800cce8:	a311      	add	r3, pc, #68	; (adr r3, 800cd30 <_strtod_l+0xbe8>)
 800ccea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccee:	f7f3 ff1d 	bl	8000b2c <__aeabi_dcmplt>
 800ccf2:	e7b2      	b.n	800cc5a <_strtod_l+0xb12>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	930a      	str	r3, [sp, #40]	; 0x28
 800ccf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ccfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccfc:	6013      	str	r3, [r2, #0]
 800ccfe:	f7ff ba6b 	b.w	800c1d8 <_strtod_l+0x90>
 800cd02:	2a65      	cmp	r2, #101	; 0x65
 800cd04:	f43f ab5f 	beq.w	800c3c6 <_strtod_l+0x27e>
 800cd08:	2a45      	cmp	r2, #69	; 0x45
 800cd0a:	f43f ab5c 	beq.w	800c3c6 <_strtod_l+0x27e>
 800cd0e:	2301      	movs	r3, #1
 800cd10:	f7ff bb94 	b.w	800c43c <_strtod_l+0x2f4>
 800cd14:	f3af 8000 	nop.w
 800cd18:	94a03595 	.word	0x94a03595
 800cd1c:	3fdfffff 	.word	0x3fdfffff
 800cd20:	35afe535 	.word	0x35afe535
 800cd24:	3fe00000 	.word	0x3fe00000
 800cd28:	ffc00000 	.word	0xffc00000
 800cd2c:	41dfffff 	.word	0x41dfffff
 800cd30:	94a03595 	.word	0x94a03595
 800cd34:	3fcfffff 	.word	0x3fcfffff
 800cd38:	3ff00000 	.word	0x3ff00000
 800cd3c:	7ff00000 	.word	0x7ff00000
 800cd40:	7fe00000 	.word	0x7fe00000
 800cd44:	7c9fffff 	.word	0x7c9fffff
 800cd48:	3fe00000 	.word	0x3fe00000
 800cd4c:	bff00000 	.word	0xbff00000
 800cd50:	7fefffff 	.word	0x7fefffff

0800cd54 <_strtod_r>:
 800cd54:	4b01      	ldr	r3, [pc, #4]	; (800cd5c <_strtod_r+0x8>)
 800cd56:	f7ff b9f7 	b.w	800c148 <_strtod_l>
 800cd5a:	bf00      	nop
 800cd5c:	20000298 	.word	0x20000298

0800cd60 <_strtol_l.constprop.0>:
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd66:	d001      	beq.n	800cd6c <_strtol_l.constprop.0+0xc>
 800cd68:	2b24      	cmp	r3, #36	; 0x24
 800cd6a:	d906      	bls.n	800cd7a <_strtol_l.constprop.0+0x1a>
 800cd6c:	f7fe fa04 	bl	800b178 <__errno>
 800cd70:	2316      	movs	r3, #22
 800cd72:	6003      	str	r3, [r0, #0]
 800cd74:	2000      	movs	r0, #0
 800cd76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ce60 <_strtol_l.constprop.0+0x100>
 800cd7e:	460d      	mov	r5, r1
 800cd80:	462e      	mov	r6, r5
 800cd82:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd86:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cd8a:	f017 0708 	ands.w	r7, r7, #8
 800cd8e:	d1f7      	bne.n	800cd80 <_strtol_l.constprop.0+0x20>
 800cd90:	2c2d      	cmp	r4, #45	; 0x2d
 800cd92:	d132      	bne.n	800cdfa <_strtol_l.constprop.0+0x9a>
 800cd94:	782c      	ldrb	r4, [r5, #0]
 800cd96:	2701      	movs	r7, #1
 800cd98:	1cb5      	adds	r5, r6, #2
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d05b      	beq.n	800ce56 <_strtol_l.constprop.0+0xf6>
 800cd9e:	2b10      	cmp	r3, #16
 800cda0:	d109      	bne.n	800cdb6 <_strtol_l.constprop.0+0x56>
 800cda2:	2c30      	cmp	r4, #48	; 0x30
 800cda4:	d107      	bne.n	800cdb6 <_strtol_l.constprop.0+0x56>
 800cda6:	782c      	ldrb	r4, [r5, #0]
 800cda8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cdac:	2c58      	cmp	r4, #88	; 0x58
 800cdae:	d14d      	bne.n	800ce4c <_strtol_l.constprop.0+0xec>
 800cdb0:	786c      	ldrb	r4, [r5, #1]
 800cdb2:	2310      	movs	r3, #16
 800cdb4:	3502      	adds	r5, #2
 800cdb6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cdba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cdbe:	f04f 0c00 	mov.w	ip, #0
 800cdc2:	fbb8 f9f3 	udiv	r9, r8, r3
 800cdc6:	4666      	mov	r6, ip
 800cdc8:	fb03 8a19 	mls	sl, r3, r9, r8
 800cdcc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cdd0:	f1be 0f09 	cmp.w	lr, #9
 800cdd4:	d816      	bhi.n	800ce04 <_strtol_l.constprop.0+0xa4>
 800cdd6:	4674      	mov	r4, lr
 800cdd8:	42a3      	cmp	r3, r4
 800cdda:	dd24      	ble.n	800ce26 <_strtol_l.constprop.0+0xc6>
 800cddc:	f1bc 0f00 	cmp.w	ip, #0
 800cde0:	db1e      	blt.n	800ce20 <_strtol_l.constprop.0+0xc0>
 800cde2:	45b1      	cmp	r9, r6
 800cde4:	d31c      	bcc.n	800ce20 <_strtol_l.constprop.0+0xc0>
 800cde6:	d101      	bne.n	800cdec <_strtol_l.constprop.0+0x8c>
 800cde8:	45a2      	cmp	sl, r4
 800cdea:	db19      	blt.n	800ce20 <_strtol_l.constprop.0+0xc0>
 800cdec:	fb06 4603 	mla	r6, r6, r3, r4
 800cdf0:	f04f 0c01 	mov.w	ip, #1
 800cdf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cdf8:	e7e8      	b.n	800cdcc <_strtol_l.constprop.0+0x6c>
 800cdfa:	2c2b      	cmp	r4, #43	; 0x2b
 800cdfc:	bf04      	itt	eq
 800cdfe:	782c      	ldrbeq	r4, [r5, #0]
 800ce00:	1cb5      	addeq	r5, r6, #2
 800ce02:	e7ca      	b.n	800cd9a <_strtol_l.constprop.0+0x3a>
 800ce04:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ce08:	f1be 0f19 	cmp.w	lr, #25
 800ce0c:	d801      	bhi.n	800ce12 <_strtol_l.constprop.0+0xb2>
 800ce0e:	3c37      	subs	r4, #55	; 0x37
 800ce10:	e7e2      	b.n	800cdd8 <_strtol_l.constprop.0+0x78>
 800ce12:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ce16:	f1be 0f19 	cmp.w	lr, #25
 800ce1a:	d804      	bhi.n	800ce26 <_strtol_l.constprop.0+0xc6>
 800ce1c:	3c57      	subs	r4, #87	; 0x57
 800ce1e:	e7db      	b.n	800cdd8 <_strtol_l.constprop.0+0x78>
 800ce20:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ce24:	e7e6      	b.n	800cdf4 <_strtol_l.constprop.0+0x94>
 800ce26:	f1bc 0f00 	cmp.w	ip, #0
 800ce2a:	da05      	bge.n	800ce38 <_strtol_l.constprop.0+0xd8>
 800ce2c:	2322      	movs	r3, #34	; 0x22
 800ce2e:	6003      	str	r3, [r0, #0]
 800ce30:	4646      	mov	r6, r8
 800ce32:	b942      	cbnz	r2, 800ce46 <_strtol_l.constprop.0+0xe6>
 800ce34:	4630      	mov	r0, r6
 800ce36:	e79e      	b.n	800cd76 <_strtol_l.constprop.0+0x16>
 800ce38:	b107      	cbz	r7, 800ce3c <_strtol_l.constprop.0+0xdc>
 800ce3a:	4276      	negs	r6, r6
 800ce3c:	2a00      	cmp	r2, #0
 800ce3e:	d0f9      	beq.n	800ce34 <_strtol_l.constprop.0+0xd4>
 800ce40:	f1bc 0f00 	cmp.w	ip, #0
 800ce44:	d000      	beq.n	800ce48 <_strtol_l.constprop.0+0xe8>
 800ce46:	1e69      	subs	r1, r5, #1
 800ce48:	6011      	str	r1, [r2, #0]
 800ce4a:	e7f3      	b.n	800ce34 <_strtol_l.constprop.0+0xd4>
 800ce4c:	2430      	movs	r4, #48	; 0x30
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d1b1      	bne.n	800cdb6 <_strtol_l.constprop.0+0x56>
 800ce52:	2308      	movs	r3, #8
 800ce54:	e7af      	b.n	800cdb6 <_strtol_l.constprop.0+0x56>
 800ce56:	2c30      	cmp	r4, #48	; 0x30
 800ce58:	d0a5      	beq.n	800cda6 <_strtol_l.constprop.0+0x46>
 800ce5a:	230a      	movs	r3, #10
 800ce5c:	e7ab      	b.n	800cdb6 <_strtol_l.constprop.0+0x56>
 800ce5e:	bf00      	nop
 800ce60:	08010841 	.word	0x08010841

0800ce64 <_strtol_r>:
 800ce64:	f7ff bf7c 	b.w	800cd60 <_strtol_l.constprop.0>

0800ce68 <quorem>:
 800ce68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce6c:	6903      	ldr	r3, [r0, #16]
 800ce6e:	690c      	ldr	r4, [r1, #16]
 800ce70:	42a3      	cmp	r3, r4
 800ce72:	4607      	mov	r7, r0
 800ce74:	f2c0 8081 	blt.w	800cf7a <quorem+0x112>
 800ce78:	3c01      	subs	r4, #1
 800ce7a:	f101 0814 	add.w	r8, r1, #20
 800ce7e:	f100 0514 	add.w	r5, r0, #20
 800ce82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce86:	9301      	str	r3, [sp, #4]
 800ce88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ce8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce90:	3301      	adds	r3, #1
 800ce92:	429a      	cmp	r2, r3
 800ce94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ce98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ce9c:	fbb2 f6f3 	udiv	r6, r2, r3
 800cea0:	d331      	bcc.n	800cf06 <quorem+0x9e>
 800cea2:	f04f 0e00 	mov.w	lr, #0
 800cea6:	4640      	mov	r0, r8
 800cea8:	46ac      	mov	ip, r5
 800ceaa:	46f2      	mov	sl, lr
 800ceac:	f850 2b04 	ldr.w	r2, [r0], #4
 800ceb0:	b293      	uxth	r3, r2
 800ceb2:	fb06 e303 	mla	r3, r6, r3, lr
 800ceb6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ceba:	b29b      	uxth	r3, r3
 800cebc:	ebaa 0303 	sub.w	r3, sl, r3
 800cec0:	f8dc a000 	ldr.w	sl, [ip]
 800cec4:	0c12      	lsrs	r2, r2, #16
 800cec6:	fa13 f38a 	uxtah	r3, r3, sl
 800ceca:	fb06 e202 	mla	r2, r6, r2, lr
 800cece:	9300      	str	r3, [sp, #0]
 800ced0:	9b00      	ldr	r3, [sp, #0]
 800ced2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ced6:	b292      	uxth	r2, r2
 800ced8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cedc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cee0:	f8bd 3000 	ldrh.w	r3, [sp]
 800cee4:	4581      	cmp	r9, r0
 800cee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ceea:	f84c 3b04 	str.w	r3, [ip], #4
 800ceee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cef2:	d2db      	bcs.n	800ceac <quorem+0x44>
 800cef4:	f855 300b 	ldr.w	r3, [r5, fp]
 800cef8:	b92b      	cbnz	r3, 800cf06 <quorem+0x9e>
 800cefa:	9b01      	ldr	r3, [sp, #4]
 800cefc:	3b04      	subs	r3, #4
 800cefe:	429d      	cmp	r5, r3
 800cf00:	461a      	mov	r2, r3
 800cf02:	d32e      	bcc.n	800cf62 <quorem+0xfa>
 800cf04:	613c      	str	r4, [r7, #16]
 800cf06:	4638      	mov	r0, r7
 800cf08:	f001 fc94 	bl	800e834 <__mcmp>
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	db24      	blt.n	800cf5a <quorem+0xf2>
 800cf10:	3601      	adds	r6, #1
 800cf12:	4628      	mov	r0, r5
 800cf14:	f04f 0c00 	mov.w	ip, #0
 800cf18:	f858 2b04 	ldr.w	r2, [r8], #4
 800cf1c:	f8d0 e000 	ldr.w	lr, [r0]
 800cf20:	b293      	uxth	r3, r2
 800cf22:	ebac 0303 	sub.w	r3, ip, r3
 800cf26:	0c12      	lsrs	r2, r2, #16
 800cf28:	fa13 f38e 	uxtah	r3, r3, lr
 800cf2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cf30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf3a:	45c1      	cmp	r9, r8
 800cf3c:	f840 3b04 	str.w	r3, [r0], #4
 800cf40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cf44:	d2e8      	bcs.n	800cf18 <quorem+0xb0>
 800cf46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf4e:	b922      	cbnz	r2, 800cf5a <quorem+0xf2>
 800cf50:	3b04      	subs	r3, #4
 800cf52:	429d      	cmp	r5, r3
 800cf54:	461a      	mov	r2, r3
 800cf56:	d30a      	bcc.n	800cf6e <quorem+0x106>
 800cf58:	613c      	str	r4, [r7, #16]
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	b003      	add	sp, #12
 800cf5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf62:	6812      	ldr	r2, [r2, #0]
 800cf64:	3b04      	subs	r3, #4
 800cf66:	2a00      	cmp	r2, #0
 800cf68:	d1cc      	bne.n	800cf04 <quorem+0x9c>
 800cf6a:	3c01      	subs	r4, #1
 800cf6c:	e7c7      	b.n	800cefe <quorem+0x96>
 800cf6e:	6812      	ldr	r2, [r2, #0]
 800cf70:	3b04      	subs	r3, #4
 800cf72:	2a00      	cmp	r2, #0
 800cf74:	d1f0      	bne.n	800cf58 <quorem+0xf0>
 800cf76:	3c01      	subs	r4, #1
 800cf78:	e7eb      	b.n	800cf52 <quorem+0xea>
 800cf7a:	2000      	movs	r0, #0
 800cf7c:	e7ee      	b.n	800cf5c <quorem+0xf4>
	...

0800cf80 <_dtoa_r>:
 800cf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf84:	ed2d 8b04 	vpush	{d8-d9}
 800cf88:	ec57 6b10 	vmov	r6, r7, d0
 800cf8c:	b093      	sub	sp, #76	; 0x4c
 800cf8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cf90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cf94:	9106      	str	r1, [sp, #24]
 800cf96:	ee10 aa10 	vmov	sl, s0
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	9209      	str	r2, [sp, #36]	; 0x24
 800cf9e:	930c      	str	r3, [sp, #48]	; 0x30
 800cfa0:	46bb      	mov	fp, r7
 800cfa2:	b975      	cbnz	r5, 800cfc2 <_dtoa_r+0x42>
 800cfa4:	2010      	movs	r0, #16
 800cfa6:	f7fe f911 	bl	800b1cc <malloc>
 800cfaa:	4602      	mov	r2, r0
 800cfac:	6260      	str	r0, [r4, #36]	; 0x24
 800cfae:	b920      	cbnz	r0, 800cfba <_dtoa_r+0x3a>
 800cfb0:	4ba7      	ldr	r3, [pc, #668]	; (800d250 <_dtoa_r+0x2d0>)
 800cfb2:	21ea      	movs	r1, #234	; 0xea
 800cfb4:	48a7      	ldr	r0, [pc, #668]	; (800d254 <_dtoa_r+0x2d4>)
 800cfb6:	f001 ffcd 	bl	800ef54 <__assert_func>
 800cfba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cfbe:	6005      	str	r5, [r0, #0]
 800cfc0:	60c5      	str	r5, [r0, #12]
 800cfc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfc4:	6819      	ldr	r1, [r3, #0]
 800cfc6:	b151      	cbz	r1, 800cfde <_dtoa_r+0x5e>
 800cfc8:	685a      	ldr	r2, [r3, #4]
 800cfca:	604a      	str	r2, [r1, #4]
 800cfcc:	2301      	movs	r3, #1
 800cfce:	4093      	lsls	r3, r2
 800cfd0:	608b      	str	r3, [r1, #8]
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	f001 f9a2 	bl	800e31c <_Bfree>
 800cfd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfda:	2200      	movs	r2, #0
 800cfdc:	601a      	str	r2, [r3, #0]
 800cfde:	1e3b      	subs	r3, r7, #0
 800cfe0:	bfaa      	itet	ge
 800cfe2:	2300      	movge	r3, #0
 800cfe4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cfe8:	f8c8 3000 	strge.w	r3, [r8]
 800cfec:	4b9a      	ldr	r3, [pc, #616]	; (800d258 <_dtoa_r+0x2d8>)
 800cfee:	bfbc      	itt	lt
 800cff0:	2201      	movlt	r2, #1
 800cff2:	f8c8 2000 	strlt.w	r2, [r8]
 800cff6:	ea33 030b 	bics.w	r3, r3, fp
 800cffa:	d11b      	bne.n	800d034 <_dtoa_r+0xb4>
 800cffc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cffe:	f242 730f 	movw	r3, #9999	; 0x270f
 800d002:	6013      	str	r3, [r2, #0]
 800d004:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d008:	4333      	orrs	r3, r6
 800d00a:	f000 8592 	beq.w	800db32 <_dtoa_r+0xbb2>
 800d00e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d010:	b963      	cbnz	r3, 800d02c <_dtoa_r+0xac>
 800d012:	4b92      	ldr	r3, [pc, #584]	; (800d25c <_dtoa_r+0x2dc>)
 800d014:	e022      	b.n	800d05c <_dtoa_r+0xdc>
 800d016:	4b92      	ldr	r3, [pc, #584]	; (800d260 <_dtoa_r+0x2e0>)
 800d018:	9301      	str	r3, [sp, #4]
 800d01a:	3308      	adds	r3, #8
 800d01c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d01e:	6013      	str	r3, [r2, #0]
 800d020:	9801      	ldr	r0, [sp, #4]
 800d022:	b013      	add	sp, #76	; 0x4c
 800d024:	ecbd 8b04 	vpop	{d8-d9}
 800d028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d02c:	4b8b      	ldr	r3, [pc, #556]	; (800d25c <_dtoa_r+0x2dc>)
 800d02e:	9301      	str	r3, [sp, #4]
 800d030:	3303      	adds	r3, #3
 800d032:	e7f3      	b.n	800d01c <_dtoa_r+0x9c>
 800d034:	2200      	movs	r2, #0
 800d036:	2300      	movs	r3, #0
 800d038:	4650      	mov	r0, sl
 800d03a:	4659      	mov	r1, fp
 800d03c:	f7f3 fd6c 	bl	8000b18 <__aeabi_dcmpeq>
 800d040:	ec4b ab19 	vmov	d9, sl, fp
 800d044:	4680      	mov	r8, r0
 800d046:	b158      	cbz	r0, 800d060 <_dtoa_r+0xe0>
 800d048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d04a:	2301      	movs	r3, #1
 800d04c:	6013      	str	r3, [r2, #0]
 800d04e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d050:	2b00      	cmp	r3, #0
 800d052:	f000 856b 	beq.w	800db2c <_dtoa_r+0xbac>
 800d056:	4883      	ldr	r0, [pc, #524]	; (800d264 <_dtoa_r+0x2e4>)
 800d058:	6018      	str	r0, [r3, #0]
 800d05a:	1e43      	subs	r3, r0, #1
 800d05c:	9301      	str	r3, [sp, #4]
 800d05e:	e7df      	b.n	800d020 <_dtoa_r+0xa0>
 800d060:	ec4b ab10 	vmov	d0, sl, fp
 800d064:	aa10      	add	r2, sp, #64	; 0x40
 800d066:	a911      	add	r1, sp, #68	; 0x44
 800d068:	4620      	mov	r0, r4
 800d06a:	f001 fd05 	bl	800ea78 <__d2b>
 800d06e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d072:	ee08 0a10 	vmov	s16, r0
 800d076:	2d00      	cmp	r5, #0
 800d078:	f000 8084 	beq.w	800d184 <_dtoa_r+0x204>
 800d07c:	ee19 3a90 	vmov	r3, s19
 800d080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d084:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d088:	4656      	mov	r6, sl
 800d08a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d08e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d092:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d096:	4b74      	ldr	r3, [pc, #464]	; (800d268 <_dtoa_r+0x2e8>)
 800d098:	2200      	movs	r2, #0
 800d09a:	4630      	mov	r0, r6
 800d09c:	4639      	mov	r1, r7
 800d09e:	f7f3 f91b 	bl	80002d8 <__aeabi_dsub>
 800d0a2:	a365      	add	r3, pc, #404	; (adr r3, 800d238 <_dtoa_r+0x2b8>)
 800d0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a8:	f7f3 face 	bl	8000648 <__aeabi_dmul>
 800d0ac:	a364      	add	r3, pc, #400	; (adr r3, 800d240 <_dtoa_r+0x2c0>)
 800d0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b2:	f7f3 f913 	bl	80002dc <__adddf3>
 800d0b6:	4606      	mov	r6, r0
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	460f      	mov	r7, r1
 800d0bc:	f7f3 fa5a 	bl	8000574 <__aeabi_i2d>
 800d0c0:	a361      	add	r3, pc, #388	; (adr r3, 800d248 <_dtoa_r+0x2c8>)
 800d0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c6:	f7f3 fabf 	bl	8000648 <__aeabi_dmul>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	4630      	mov	r0, r6
 800d0d0:	4639      	mov	r1, r7
 800d0d2:	f7f3 f903 	bl	80002dc <__adddf3>
 800d0d6:	4606      	mov	r6, r0
 800d0d8:	460f      	mov	r7, r1
 800d0da:	f7f3 fd65 	bl	8000ba8 <__aeabi_d2iz>
 800d0de:	2200      	movs	r2, #0
 800d0e0:	9000      	str	r0, [sp, #0]
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	4630      	mov	r0, r6
 800d0e6:	4639      	mov	r1, r7
 800d0e8:	f7f3 fd20 	bl	8000b2c <__aeabi_dcmplt>
 800d0ec:	b150      	cbz	r0, 800d104 <_dtoa_r+0x184>
 800d0ee:	9800      	ldr	r0, [sp, #0]
 800d0f0:	f7f3 fa40 	bl	8000574 <__aeabi_i2d>
 800d0f4:	4632      	mov	r2, r6
 800d0f6:	463b      	mov	r3, r7
 800d0f8:	f7f3 fd0e 	bl	8000b18 <__aeabi_dcmpeq>
 800d0fc:	b910      	cbnz	r0, 800d104 <_dtoa_r+0x184>
 800d0fe:	9b00      	ldr	r3, [sp, #0]
 800d100:	3b01      	subs	r3, #1
 800d102:	9300      	str	r3, [sp, #0]
 800d104:	9b00      	ldr	r3, [sp, #0]
 800d106:	2b16      	cmp	r3, #22
 800d108:	d85a      	bhi.n	800d1c0 <_dtoa_r+0x240>
 800d10a:	9a00      	ldr	r2, [sp, #0]
 800d10c:	4b57      	ldr	r3, [pc, #348]	; (800d26c <_dtoa_r+0x2ec>)
 800d10e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d116:	ec51 0b19 	vmov	r0, r1, d9
 800d11a:	f7f3 fd07 	bl	8000b2c <__aeabi_dcmplt>
 800d11e:	2800      	cmp	r0, #0
 800d120:	d050      	beq.n	800d1c4 <_dtoa_r+0x244>
 800d122:	9b00      	ldr	r3, [sp, #0]
 800d124:	3b01      	subs	r3, #1
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	2300      	movs	r3, #0
 800d12a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d12c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d12e:	1b5d      	subs	r5, r3, r5
 800d130:	1e6b      	subs	r3, r5, #1
 800d132:	9305      	str	r3, [sp, #20]
 800d134:	bf45      	ittet	mi
 800d136:	f1c5 0301 	rsbmi	r3, r5, #1
 800d13a:	9304      	strmi	r3, [sp, #16]
 800d13c:	2300      	movpl	r3, #0
 800d13e:	2300      	movmi	r3, #0
 800d140:	bf4c      	ite	mi
 800d142:	9305      	strmi	r3, [sp, #20]
 800d144:	9304      	strpl	r3, [sp, #16]
 800d146:	9b00      	ldr	r3, [sp, #0]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	db3d      	blt.n	800d1c8 <_dtoa_r+0x248>
 800d14c:	9b05      	ldr	r3, [sp, #20]
 800d14e:	9a00      	ldr	r2, [sp, #0]
 800d150:	920a      	str	r2, [sp, #40]	; 0x28
 800d152:	4413      	add	r3, r2
 800d154:	9305      	str	r3, [sp, #20]
 800d156:	2300      	movs	r3, #0
 800d158:	9307      	str	r3, [sp, #28]
 800d15a:	9b06      	ldr	r3, [sp, #24]
 800d15c:	2b09      	cmp	r3, #9
 800d15e:	f200 8089 	bhi.w	800d274 <_dtoa_r+0x2f4>
 800d162:	2b05      	cmp	r3, #5
 800d164:	bfc4      	itt	gt
 800d166:	3b04      	subgt	r3, #4
 800d168:	9306      	strgt	r3, [sp, #24]
 800d16a:	9b06      	ldr	r3, [sp, #24]
 800d16c:	f1a3 0302 	sub.w	r3, r3, #2
 800d170:	bfcc      	ite	gt
 800d172:	2500      	movgt	r5, #0
 800d174:	2501      	movle	r5, #1
 800d176:	2b03      	cmp	r3, #3
 800d178:	f200 8087 	bhi.w	800d28a <_dtoa_r+0x30a>
 800d17c:	e8df f003 	tbb	[pc, r3]
 800d180:	59383a2d 	.word	0x59383a2d
 800d184:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d188:	441d      	add	r5, r3
 800d18a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d18e:	2b20      	cmp	r3, #32
 800d190:	bfc1      	itttt	gt
 800d192:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d196:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d19a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d19e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d1a2:	bfda      	itte	le
 800d1a4:	f1c3 0320 	rsble	r3, r3, #32
 800d1a8:	fa06 f003 	lslle.w	r0, r6, r3
 800d1ac:	4318      	orrgt	r0, r3
 800d1ae:	f7f3 f9d1 	bl	8000554 <__aeabi_ui2d>
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	4606      	mov	r6, r0
 800d1b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d1ba:	3d01      	subs	r5, #1
 800d1bc:	930e      	str	r3, [sp, #56]	; 0x38
 800d1be:	e76a      	b.n	800d096 <_dtoa_r+0x116>
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e7b2      	b.n	800d12a <_dtoa_r+0x1aa>
 800d1c4:	900b      	str	r0, [sp, #44]	; 0x2c
 800d1c6:	e7b1      	b.n	800d12c <_dtoa_r+0x1ac>
 800d1c8:	9b04      	ldr	r3, [sp, #16]
 800d1ca:	9a00      	ldr	r2, [sp, #0]
 800d1cc:	1a9b      	subs	r3, r3, r2
 800d1ce:	9304      	str	r3, [sp, #16]
 800d1d0:	4253      	negs	r3, r2
 800d1d2:	9307      	str	r3, [sp, #28]
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	930a      	str	r3, [sp, #40]	; 0x28
 800d1d8:	e7bf      	b.n	800d15a <_dtoa_r+0x1da>
 800d1da:	2300      	movs	r3, #0
 800d1dc:	9308      	str	r3, [sp, #32]
 800d1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	dc55      	bgt.n	800d290 <_dtoa_r+0x310>
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	9209      	str	r2, [sp, #36]	; 0x24
 800d1ee:	e00c      	b.n	800d20a <_dtoa_r+0x28a>
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	e7f3      	b.n	800d1dc <_dtoa_r+0x25c>
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1f8:	9308      	str	r3, [sp, #32]
 800d1fa:	9b00      	ldr	r3, [sp, #0]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	9302      	str	r3, [sp, #8]
 800d200:	3301      	adds	r3, #1
 800d202:	2b01      	cmp	r3, #1
 800d204:	9303      	str	r3, [sp, #12]
 800d206:	bfb8      	it	lt
 800d208:	2301      	movlt	r3, #1
 800d20a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d20c:	2200      	movs	r2, #0
 800d20e:	6042      	str	r2, [r0, #4]
 800d210:	2204      	movs	r2, #4
 800d212:	f102 0614 	add.w	r6, r2, #20
 800d216:	429e      	cmp	r6, r3
 800d218:	6841      	ldr	r1, [r0, #4]
 800d21a:	d93d      	bls.n	800d298 <_dtoa_r+0x318>
 800d21c:	4620      	mov	r0, r4
 800d21e:	f001 f83d 	bl	800e29c <_Balloc>
 800d222:	9001      	str	r0, [sp, #4]
 800d224:	2800      	cmp	r0, #0
 800d226:	d13b      	bne.n	800d2a0 <_dtoa_r+0x320>
 800d228:	4b11      	ldr	r3, [pc, #68]	; (800d270 <_dtoa_r+0x2f0>)
 800d22a:	4602      	mov	r2, r0
 800d22c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d230:	e6c0      	b.n	800cfb4 <_dtoa_r+0x34>
 800d232:	2301      	movs	r3, #1
 800d234:	e7df      	b.n	800d1f6 <_dtoa_r+0x276>
 800d236:	bf00      	nop
 800d238:	636f4361 	.word	0x636f4361
 800d23c:	3fd287a7 	.word	0x3fd287a7
 800d240:	8b60c8b3 	.word	0x8b60c8b3
 800d244:	3fc68a28 	.word	0x3fc68a28
 800d248:	509f79fb 	.word	0x509f79fb
 800d24c:	3fd34413 	.word	0x3fd34413
 800d250:	0801094e 	.word	0x0801094e
 800d254:	08010965 	.word	0x08010965
 800d258:	7ff00000 	.word	0x7ff00000
 800d25c:	0801094a 	.word	0x0801094a
 800d260:	08010941 	.word	0x08010941
 800d264:	080107c1 	.word	0x080107c1
 800d268:	3ff80000 	.word	0x3ff80000
 800d26c:	08010ad0 	.word	0x08010ad0
 800d270:	080109c0 	.word	0x080109c0
 800d274:	2501      	movs	r5, #1
 800d276:	2300      	movs	r3, #0
 800d278:	9306      	str	r3, [sp, #24]
 800d27a:	9508      	str	r5, [sp, #32]
 800d27c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d280:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d284:	2200      	movs	r2, #0
 800d286:	2312      	movs	r3, #18
 800d288:	e7b0      	b.n	800d1ec <_dtoa_r+0x26c>
 800d28a:	2301      	movs	r3, #1
 800d28c:	9308      	str	r3, [sp, #32]
 800d28e:	e7f5      	b.n	800d27c <_dtoa_r+0x2fc>
 800d290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d292:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d296:	e7b8      	b.n	800d20a <_dtoa_r+0x28a>
 800d298:	3101      	adds	r1, #1
 800d29a:	6041      	str	r1, [r0, #4]
 800d29c:	0052      	lsls	r2, r2, #1
 800d29e:	e7b8      	b.n	800d212 <_dtoa_r+0x292>
 800d2a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2a2:	9a01      	ldr	r2, [sp, #4]
 800d2a4:	601a      	str	r2, [r3, #0]
 800d2a6:	9b03      	ldr	r3, [sp, #12]
 800d2a8:	2b0e      	cmp	r3, #14
 800d2aa:	f200 809d 	bhi.w	800d3e8 <_dtoa_r+0x468>
 800d2ae:	2d00      	cmp	r5, #0
 800d2b0:	f000 809a 	beq.w	800d3e8 <_dtoa_r+0x468>
 800d2b4:	9b00      	ldr	r3, [sp, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	dd32      	ble.n	800d320 <_dtoa_r+0x3a0>
 800d2ba:	4ab7      	ldr	r2, [pc, #732]	; (800d598 <_dtoa_r+0x618>)
 800d2bc:	f003 030f 	and.w	r3, r3, #15
 800d2c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d2c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d2c8:	9b00      	ldr	r3, [sp, #0]
 800d2ca:	05d8      	lsls	r0, r3, #23
 800d2cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d2d0:	d516      	bpl.n	800d300 <_dtoa_r+0x380>
 800d2d2:	4bb2      	ldr	r3, [pc, #712]	; (800d59c <_dtoa_r+0x61c>)
 800d2d4:	ec51 0b19 	vmov	r0, r1, d9
 800d2d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d2dc:	f7f3 fade 	bl	800089c <__aeabi_ddiv>
 800d2e0:	f007 070f 	and.w	r7, r7, #15
 800d2e4:	4682      	mov	sl, r0
 800d2e6:	468b      	mov	fp, r1
 800d2e8:	2503      	movs	r5, #3
 800d2ea:	4eac      	ldr	r6, [pc, #688]	; (800d59c <_dtoa_r+0x61c>)
 800d2ec:	b957      	cbnz	r7, 800d304 <_dtoa_r+0x384>
 800d2ee:	4642      	mov	r2, r8
 800d2f0:	464b      	mov	r3, r9
 800d2f2:	4650      	mov	r0, sl
 800d2f4:	4659      	mov	r1, fp
 800d2f6:	f7f3 fad1 	bl	800089c <__aeabi_ddiv>
 800d2fa:	4682      	mov	sl, r0
 800d2fc:	468b      	mov	fp, r1
 800d2fe:	e028      	b.n	800d352 <_dtoa_r+0x3d2>
 800d300:	2502      	movs	r5, #2
 800d302:	e7f2      	b.n	800d2ea <_dtoa_r+0x36a>
 800d304:	07f9      	lsls	r1, r7, #31
 800d306:	d508      	bpl.n	800d31a <_dtoa_r+0x39a>
 800d308:	4640      	mov	r0, r8
 800d30a:	4649      	mov	r1, r9
 800d30c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d310:	f7f3 f99a 	bl	8000648 <__aeabi_dmul>
 800d314:	3501      	adds	r5, #1
 800d316:	4680      	mov	r8, r0
 800d318:	4689      	mov	r9, r1
 800d31a:	107f      	asrs	r7, r7, #1
 800d31c:	3608      	adds	r6, #8
 800d31e:	e7e5      	b.n	800d2ec <_dtoa_r+0x36c>
 800d320:	f000 809b 	beq.w	800d45a <_dtoa_r+0x4da>
 800d324:	9b00      	ldr	r3, [sp, #0]
 800d326:	4f9d      	ldr	r7, [pc, #628]	; (800d59c <_dtoa_r+0x61c>)
 800d328:	425e      	negs	r6, r3
 800d32a:	4b9b      	ldr	r3, [pc, #620]	; (800d598 <_dtoa_r+0x618>)
 800d32c:	f006 020f 	and.w	r2, r6, #15
 800d330:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d338:	ec51 0b19 	vmov	r0, r1, d9
 800d33c:	f7f3 f984 	bl	8000648 <__aeabi_dmul>
 800d340:	1136      	asrs	r6, r6, #4
 800d342:	4682      	mov	sl, r0
 800d344:	468b      	mov	fp, r1
 800d346:	2300      	movs	r3, #0
 800d348:	2502      	movs	r5, #2
 800d34a:	2e00      	cmp	r6, #0
 800d34c:	d17a      	bne.n	800d444 <_dtoa_r+0x4c4>
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d1d3      	bne.n	800d2fa <_dtoa_r+0x37a>
 800d352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d354:	2b00      	cmp	r3, #0
 800d356:	f000 8082 	beq.w	800d45e <_dtoa_r+0x4de>
 800d35a:	4b91      	ldr	r3, [pc, #580]	; (800d5a0 <_dtoa_r+0x620>)
 800d35c:	2200      	movs	r2, #0
 800d35e:	4650      	mov	r0, sl
 800d360:	4659      	mov	r1, fp
 800d362:	f7f3 fbe3 	bl	8000b2c <__aeabi_dcmplt>
 800d366:	2800      	cmp	r0, #0
 800d368:	d079      	beq.n	800d45e <_dtoa_r+0x4de>
 800d36a:	9b03      	ldr	r3, [sp, #12]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d076      	beq.n	800d45e <_dtoa_r+0x4de>
 800d370:	9b02      	ldr	r3, [sp, #8]
 800d372:	2b00      	cmp	r3, #0
 800d374:	dd36      	ble.n	800d3e4 <_dtoa_r+0x464>
 800d376:	9b00      	ldr	r3, [sp, #0]
 800d378:	4650      	mov	r0, sl
 800d37a:	4659      	mov	r1, fp
 800d37c:	1e5f      	subs	r7, r3, #1
 800d37e:	2200      	movs	r2, #0
 800d380:	4b88      	ldr	r3, [pc, #544]	; (800d5a4 <_dtoa_r+0x624>)
 800d382:	f7f3 f961 	bl	8000648 <__aeabi_dmul>
 800d386:	9e02      	ldr	r6, [sp, #8]
 800d388:	4682      	mov	sl, r0
 800d38a:	468b      	mov	fp, r1
 800d38c:	3501      	adds	r5, #1
 800d38e:	4628      	mov	r0, r5
 800d390:	f7f3 f8f0 	bl	8000574 <__aeabi_i2d>
 800d394:	4652      	mov	r2, sl
 800d396:	465b      	mov	r3, fp
 800d398:	f7f3 f956 	bl	8000648 <__aeabi_dmul>
 800d39c:	4b82      	ldr	r3, [pc, #520]	; (800d5a8 <_dtoa_r+0x628>)
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f7f2 ff9c 	bl	80002dc <__adddf3>
 800d3a4:	46d0      	mov	r8, sl
 800d3a6:	46d9      	mov	r9, fp
 800d3a8:	4682      	mov	sl, r0
 800d3aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d3ae:	2e00      	cmp	r6, #0
 800d3b0:	d158      	bne.n	800d464 <_dtoa_r+0x4e4>
 800d3b2:	4b7e      	ldr	r3, [pc, #504]	; (800d5ac <_dtoa_r+0x62c>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	4640      	mov	r0, r8
 800d3b8:	4649      	mov	r1, r9
 800d3ba:	f7f2 ff8d 	bl	80002d8 <__aeabi_dsub>
 800d3be:	4652      	mov	r2, sl
 800d3c0:	465b      	mov	r3, fp
 800d3c2:	4680      	mov	r8, r0
 800d3c4:	4689      	mov	r9, r1
 800d3c6:	f7f3 fbcf 	bl	8000b68 <__aeabi_dcmpgt>
 800d3ca:	2800      	cmp	r0, #0
 800d3cc:	f040 8295 	bne.w	800d8fa <_dtoa_r+0x97a>
 800d3d0:	4652      	mov	r2, sl
 800d3d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d3d6:	4640      	mov	r0, r8
 800d3d8:	4649      	mov	r1, r9
 800d3da:	f7f3 fba7 	bl	8000b2c <__aeabi_dcmplt>
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	f040 8289 	bne.w	800d8f6 <_dtoa_r+0x976>
 800d3e4:	ec5b ab19 	vmov	sl, fp, d9
 800d3e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	f2c0 8148 	blt.w	800d680 <_dtoa_r+0x700>
 800d3f0:	9a00      	ldr	r2, [sp, #0]
 800d3f2:	2a0e      	cmp	r2, #14
 800d3f4:	f300 8144 	bgt.w	800d680 <_dtoa_r+0x700>
 800d3f8:	4b67      	ldr	r3, [pc, #412]	; (800d598 <_dtoa_r+0x618>)
 800d3fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d404:	2b00      	cmp	r3, #0
 800d406:	f280 80d5 	bge.w	800d5b4 <_dtoa_r+0x634>
 800d40a:	9b03      	ldr	r3, [sp, #12]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	f300 80d1 	bgt.w	800d5b4 <_dtoa_r+0x634>
 800d412:	f040 826f 	bne.w	800d8f4 <_dtoa_r+0x974>
 800d416:	4b65      	ldr	r3, [pc, #404]	; (800d5ac <_dtoa_r+0x62c>)
 800d418:	2200      	movs	r2, #0
 800d41a:	4640      	mov	r0, r8
 800d41c:	4649      	mov	r1, r9
 800d41e:	f7f3 f913 	bl	8000648 <__aeabi_dmul>
 800d422:	4652      	mov	r2, sl
 800d424:	465b      	mov	r3, fp
 800d426:	f7f3 fb95 	bl	8000b54 <__aeabi_dcmpge>
 800d42a:	9e03      	ldr	r6, [sp, #12]
 800d42c:	4637      	mov	r7, r6
 800d42e:	2800      	cmp	r0, #0
 800d430:	f040 8245 	bne.w	800d8be <_dtoa_r+0x93e>
 800d434:	9d01      	ldr	r5, [sp, #4]
 800d436:	2331      	movs	r3, #49	; 0x31
 800d438:	f805 3b01 	strb.w	r3, [r5], #1
 800d43c:	9b00      	ldr	r3, [sp, #0]
 800d43e:	3301      	adds	r3, #1
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	e240      	b.n	800d8c6 <_dtoa_r+0x946>
 800d444:	07f2      	lsls	r2, r6, #31
 800d446:	d505      	bpl.n	800d454 <_dtoa_r+0x4d4>
 800d448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d44c:	f7f3 f8fc 	bl	8000648 <__aeabi_dmul>
 800d450:	3501      	adds	r5, #1
 800d452:	2301      	movs	r3, #1
 800d454:	1076      	asrs	r6, r6, #1
 800d456:	3708      	adds	r7, #8
 800d458:	e777      	b.n	800d34a <_dtoa_r+0x3ca>
 800d45a:	2502      	movs	r5, #2
 800d45c:	e779      	b.n	800d352 <_dtoa_r+0x3d2>
 800d45e:	9f00      	ldr	r7, [sp, #0]
 800d460:	9e03      	ldr	r6, [sp, #12]
 800d462:	e794      	b.n	800d38e <_dtoa_r+0x40e>
 800d464:	9901      	ldr	r1, [sp, #4]
 800d466:	4b4c      	ldr	r3, [pc, #304]	; (800d598 <_dtoa_r+0x618>)
 800d468:	4431      	add	r1, r6
 800d46a:	910d      	str	r1, [sp, #52]	; 0x34
 800d46c:	9908      	ldr	r1, [sp, #32]
 800d46e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d472:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d476:	2900      	cmp	r1, #0
 800d478:	d043      	beq.n	800d502 <_dtoa_r+0x582>
 800d47a:	494d      	ldr	r1, [pc, #308]	; (800d5b0 <_dtoa_r+0x630>)
 800d47c:	2000      	movs	r0, #0
 800d47e:	f7f3 fa0d 	bl	800089c <__aeabi_ddiv>
 800d482:	4652      	mov	r2, sl
 800d484:	465b      	mov	r3, fp
 800d486:	f7f2 ff27 	bl	80002d8 <__aeabi_dsub>
 800d48a:	9d01      	ldr	r5, [sp, #4]
 800d48c:	4682      	mov	sl, r0
 800d48e:	468b      	mov	fp, r1
 800d490:	4649      	mov	r1, r9
 800d492:	4640      	mov	r0, r8
 800d494:	f7f3 fb88 	bl	8000ba8 <__aeabi_d2iz>
 800d498:	4606      	mov	r6, r0
 800d49a:	f7f3 f86b 	bl	8000574 <__aeabi_i2d>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	4640      	mov	r0, r8
 800d4a4:	4649      	mov	r1, r9
 800d4a6:	f7f2 ff17 	bl	80002d8 <__aeabi_dsub>
 800d4aa:	3630      	adds	r6, #48	; 0x30
 800d4ac:	f805 6b01 	strb.w	r6, [r5], #1
 800d4b0:	4652      	mov	r2, sl
 800d4b2:	465b      	mov	r3, fp
 800d4b4:	4680      	mov	r8, r0
 800d4b6:	4689      	mov	r9, r1
 800d4b8:	f7f3 fb38 	bl	8000b2c <__aeabi_dcmplt>
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	d163      	bne.n	800d588 <_dtoa_r+0x608>
 800d4c0:	4642      	mov	r2, r8
 800d4c2:	464b      	mov	r3, r9
 800d4c4:	4936      	ldr	r1, [pc, #216]	; (800d5a0 <_dtoa_r+0x620>)
 800d4c6:	2000      	movs	r0, #0
 800d4c8:	f7f2 ff06 	bl	80002d8 <__aeabi_dsub>
 800d4cc:	4652      	mov	r2, sl
 800d4ce:	465b      	mov	r3, fp
 800d4d0:	f7f3 fb2c 	bl	8000b2c <__aeabi_dcmplt>
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	f040 80b5 	bne.w	800d644 <_dtoa_r+0x6c4>
 800d4da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4dc:	429d      	cmp	r5, r3
 800d4de:	d081      	beq.n	800d3e4 <_dtoa_r+0x464>
 800d4e0:	4b30      	ldr	r3, [pc, #192]	; (800d5a4 <_dtoa_r+0x624>)
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	4650      	mov	r0, sl
 800d4e6:	4659      	mov	r1, fp
 800d4e8:	f7f3 f8ae 	bl	8000648 <__aeabi_dmul>
 800d4ec:	4b2d      	ldr	r3, [pc, #180]	; (800d5a4 <_dtoa_r+0x624>)
 800d4ee:	4682      	mov	sl, r0
 800d4f0:	468b      	mov	fp, r1
 800d4f2:	4640      	mov	r0, r8
 800d4f4:	4649      	mov	r1, r9
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f7f3 f8a6 	bl	8000648 <__aeabi_dmul>
 800d4fc:	4680      	mov	r8, r0
 800d4fe:	4689      	mov	r9, r1
 800d500:	e7c6      	b.n	800d490 <_dtoa_r+0x510>
 800d502:	4650      	mov	r0, sl
 800d504:	4659      	mov	r1, fp
 800d506:	f7f3 f89f 	bl	8000648 <__aeabi_dmul>
 800d50a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d50c:	9d01      	ldr	r5, [sp, #4]
 800d50e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d510:	4682      	mov	sl, r0
 800d512:	468b      	mov	fp, r1
 800d514:	4649      	mov	r1, r9
 800d516:	4640      	mov	r0, r8
 800d518:	f7f3 fb46 	bl	8000ba8 <__aeabi_d2iz>
 800d51c:	4606      	mov	r6, r0
 800d51e:	f7f3 f829 	bl	8000574 <__aeabi_i2d>
 800d522:	3630      	adds	r6, #48	; 0x30
 800d524:	4602      	mov	r2, r0
 800d526:	460b      	mov	r3, r1
 800d528:	4640      	mov	r0, r8
 800d52a:	4649      	mov	r1, r9
 800d52c:	f7f2 fed4 	bl	80002d8 <__aeabi_dsub>
 800d530:	f805 6b01 	strb.w	r6, [r5], #1
 800d534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d536:	429d      	cmp	r5, r3
 800d538:	4680      	mov	r8, r0
 800d53a:	4689      	mov	r9, r1
 800d53c:	f04f 0200 	mov.w	r2, #0
 800d540:	d124      	bne.n	800d58c <_dtoa_r+0x60c>
 800d542:	4b1b      	ldr	r3, [pc, #108]	; (800d5b0 <_dtoa_r+0x630>)
 800d544:	4650      	mov	r0, sl
 800d546:	4659      	mov	r1, fp
 800d548:	f7f2 fec8 	bl	80002dc <__adddf3>
 800d54c:	4602      	mov	r2, r0
 800d54e:	460b      	mov	r3, r1
 800d550:	4640      	mov	r0, r8
 800d552:	4649      	mov	r1, r9
 800d554:	f7f3 fb08 	bl	8000b68 <__aeabi_dcmpgt>
 800d558:	2800      	cmp	r0, #0
 800d55a:	d173      	bne.n	800d644 <_dtoa_r+0x6c4>
 800d55c:	4652      	mov	r2, sl
 800d55e:	465b      	mov	r3, fp
 800d560:	4913      	ldr	r1, [pc, #76]	; (800d5b0 <_dtoa_r+0x630>)
 800d562:	2000      	movs	r0, #0
 800d564:	f7f2 feb8 	bl	80002d8 <__aeabi_dsub>
 800d568:	4602      	mov	r2, r0
 800d56a:	460b      	mov	r3, r1
 800d56c:	4640      	mov	r0, r8
 800d56e:	4649      	mov	r1, r9
 800d570:	f7f3 fadc 	bl	8000b2c <__aeabi_dcmplt>
 800d574:	2800      	cmp	r0, #0
 800d576:	f43f af35 	beq.w	800d3e4 <_dtoa_r+0x464>
 800d57a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d57c:	1e6b      	subs	r3, r5, #1
 800d57e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d580:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d584:	2b30      	cmp	r3, #48	; 0x30
 800d586:	d0f8      	beq.n	800d57a <_dtoa_r+0x5fa>
 800d588:	9700      	str	r7, [sp, #0]
 800d58a:	e049      	b.n	800d620 <_dtoa_r+0x6a0>
 800d58c:	4b05      	ldr	r3, [pc, #20]	; (800d5a4 <_dtoa_r+0x624>)
 800d58e:	f7f3 f85b 	bl	8000648 <__aeabi_dmul>
 800d592:	4680      	mov	r8, r0
 800d594:	4689      	mov	r9, r1
 800d596:	e7bd      	b.n	800d514 <_dtoa_r+0x594>
 800d598:	08010ad0 	.word	0x08010ad0
 800d59c:	08010aa8 	.word	0x08010aa8
 800d5a0:	3ff00000 	.word	0x3ff00000
 800d5a4:	40240000 	.word	0x40240000
 800d5a8:	401c0000 	.word	0x401c0000
 800d5ac:	40140000 	.word	0x40140000
 800d5b0:	3fe00000 	.word	0x3fe00000
 800d5b4:	9d01      	ldr	r5, [sp, #4]
 800d5b6:	4656      	mov	r6, sl
 800d5b8:	465f      	mov	r7, fp
 800d5ba:	4642      	mov	r2, r8
 800d5bc:	464b      	mov	r3, r9
 800d5be:	4630      	mov	r0, r6
 800d5c0:	4639      	mov	r1, r7
 800d5c2:	f7f3 f96b 	bl	800089c <__aeabi_ddiv>
 800d5c6:	f7f3 faef 	bl	8000ba8 <__aeabi_d2iz>
 800d5ca:	4682      	mov	sl, r0
 800d5cc:	f7f2 ffd2 	bl	8000574 <__aeabi_i2d>
 800d5d0:	4642      	mov	r2, r8
 800d5d2:	464b      	mov	r3, r9
 800d5d4:	f7f3 f838 	bl	8000648 <__aeabi_dmul>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	460b      	mov	r3, r1
 800d5dc:	4630      	mov	r0, r6
 800d5de:	4639      	mov	r1, r7
 800d5e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d5e4:	f7f2 fe78 	bl	80002d8 <__aeabi_dsub>
 800d5e8:	f805 6b01 	strb.w	r6, [r5], #1
 800d5ec:	9e01      	ldr	r6, [sp, #4]
 800d5ee:	9f03      	ldr	r7, [sp, #12]
 800d5f0:	1bae      	subs	r6, r5, r6
 800d5f2:	42b7      	cmp	r7, r6
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	d135      	bne.n	800d666 <_dtoa_r+0x6e6>
 800d5fa:	f7f2 fe6f 	bl	80002dc <__adddf3>
 800d5fe:	4642      	mov	r2, r8
 800d600:	464b      	mov	r3, r9
 800d602:	4606      	mov	r6, r0
 800d604:	460f      	mov	r7, r1
 800d606:	f7f3 faaf 	bl	8000b68 <__aeabi_dcmpgt>
 800d60a:	b9d0      	cbnz	r0, 800d642 <_dtoa_r+0x6c2>
 800d60c:	4642      	mov	r2, r8
 800d60e:	464b      	mov	r3, r9
 800d610:	4630      	mov	r0, r6
 800d612:	4639      	mov	r1, r7
 800d614:	f7f3 fa80 	bl	8000b18 <__aeabi_dcmpeq>
 800d618:	b110      	cbz	r0, 800d620 <_dtoa_r+0x6a0>
 800d61a:	f01a 0f01 	tst.w	sl, #1
 800d61e:	d110      	bne.n	800d642 <_dtoa_r+0x6c2>
 800d620:	4620      	mov	r0, r4
 800d622:	ee18 1a10 	vmov	r1, s16
 800d626:	f000 fe79 	bl	800e31c <_Bfree>
 800d62a:	2300      	movs	r3, #0
 800d62c:	9800      	ldr	r0, [sp, #0]
 800d62e:	702b      	strb	r3, [r5, #0]
 800d630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d632:	3001      	adds	r0, #1
 800d634:	6018      	str	r0, [r3, #0]
 800d636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d638:	2b00      	cmp	r3, #0
 800d63a:	f43f acf1 	beq.w	800d020 <_dtoa_r+0xa0>
 800d63e:	601d      	str	r5, [r3, #0]
 800d640:	e4ee      	b.n	800d020 <_dtoa_r+0xa0>
 800d642:	9f00      	ldr	r7, [sp, #0]
 800d644:	462b      	mov	r3, r5
 800d646:	461d      	mov	r5, r3
 800d648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d64c:	2a39      	cmp	r2, #57	; 0x39
 800d64e:	d106      	bne.n	800d65e <_dtoa_r+0x6de>
 800d650:	9a01      	ldr	r2, [sp, #4]
 800d652:	429a      	cmp	r2, r3
 800d654:	d1f7      	bne.n	800d646 <_dtoa_r+0x6c6>
 800d656:	9901      	ldr	r1, [sp, #4]
 800d658:	2230      	movs	r2, #48	; 0x30
 800d65a:	3701      	adds	r7, #1
 800d65c:	700a      	strb	r2, [r1, #0]
 800d65e:	781a      	ldrb	r2, [r3, #0]
 800d660:	3201      	adds	r2, #1
 800d662:	701a      	strb	r2, [r3, #0]
 800d664:	e790      	b.n	800d588 <_dtoa_r+0x608>
 800d666:	4ba6      	ldr	r3, [pc, #664]	; (800d900 <_dtoa_r+0x980>)
 800d668:	2200      	movs	r2, #0
 800d66a:	f7f2 ffed 	bl	8000648 <__aeabi_dmul>
 800d66e:	2200      	movs	r2, #0
 800d670:	2300      	movs	r3, #0
 800d672:	4606      	mov	r6, r0
 800d674:	460f      	mov	r7, r1
 800d676:	f7f3 fa4f 	bl	8000b18 <__aeabi_dcmpeq>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	d09d      	beq.n	800d5ba <_dtoa_r+0x63a>
 800d67e:	e7cf      	b.n	800d620 <_dtoa_r+0x6a0>
 800d680:	9a08      	ldr	r2, [sp, #32]
 800d682:	2a00      	cmp	r2, #0
 800d684:	f000 80d7 	beq.w	800d836 <_dtoa_r+0x8b6>
 800d688:	9a06      	ldr	r2, [sp, #24]
 800d68a:	2a01      	cmp	r2, #1
 800d68c:	f300 80ba 	bgt.w	800d804 <_dtoa_r+0x884>
 800d690:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d692:	2a00      	cmp	r2, #0
 800d694:	f000 80b2 	beq.w	800d7fc <_dtoa_r+0x87c>
 800d698:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d69c:	9e07      	ldr	r6, [sp, #28]
 800d69e:	9d04      	ldr	r5, [sp, #16]
 800d6a0:	9a04      	ldr	r2, [sp, #16]
 800d6a2:	441a      	add	r2, r3
 800d6a4:	9204      	str	r2, [sp, #16]
 800d6a6:	9a05      	ldr	r2, [sp, #20]
 800d6a8:	2101      	movs	r1, #1
 800d6aa:	441a      	add	r2, r3
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	9205      	str	r2, [sp, #20]
 800d6b0:	f000 ff36 	bl	800e520 <__i2b>
 800d6b4:	4607      	mov	r7, r0
 800d6b6:	2d00      	cmp	r5, #0
 800d6b8:	dd0c      	ble.n	800d6d4 <_dtoa_r+0x754>
 800d6ba:	9b05      	ldr	r3, [sp, #20]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	dd09      	ble.n	800d6d4 <_dtoa_r+0x754>
 800d6c0:	42ab      	cmp	r3, r5
 800d6c2:	9a04      	ldr	r2, [sp, #16]
 800d6c4:	bfa8      	it	ge
 800d6c6:	462b      	movge	r3, r5
 800d6c8:	1ad2      	subs	r2, r2, r3
 800d6ca:	9204      	str	r2, [sp, #16]
 800d6cc:	9a05      	ldr	r2, [sp, #20]
 800d6ce:	1aed      	subs	r5, r5, r3
 800d6d0:	1ad3      	subs	r3, r2, r3
 800d6d2:	9305      	str	r3, [sp, #20]
 800d6d4:	9b07      	ldr	r3, [sp, #28]
 800d6d6:	b31b      	cbz	r3, 800d720 <_dtoa_r+0x7a0>
 800d6d8:	9b08      	ldr	r3, [sp, #32]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f000 80af 	beq.w	800d83e <_dtoa_r+0x8be>
 800d6e0:	2e00      	cmp	r6, #0
 800d6e2:	dd13      	ble.n	800d70c <_dtoa_r+0x78c>
 800d6e4:	4639      	mov	r1, r7
 800d6e6:	4632      	mov	r2, r6
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	f000 ffd9 	bl	800e6a0 <__pow5mult>
 800d6ee:	ee18 2a10 	vmov	r2, s16
 800d6f2:	4601      	mov	r1, r0
 800d6f4:	4607      	mov	r7, r0
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	f000 ff28 	bl	800e54c <__multiply>
 800d6fc:	ee18 1a10 	vmov	r1, s16
 800d700:	4680      	mov	r8, r0
 800d702:	4620      	mov	r0, r4
 800d704:	f000 fe0a 	bl	800e31c <_Bfree>
 800d708:	ee08 8a10 	vmov	s16, r8
 800d70c:	9b07      	ldr	r3, [sp, #28]
 800d70e:	1b9a      	subs	r2, r3, r6
 800d710:	d006      	beq.n	800d720 <_dtoa_r+0x7a0>
 800d712:	ee18 1a10 	vmov	r1, s16
 800d716:	4620      	mov	r0, r4
 800d718:	f000 ffc2 	bl	800e6a0 <__pow5mult>
 800d71c:	ee08 0a10 	vmov	s16, r0
 800d720:	2101      	movs	r1, #1
 800d722:	4620      	mov	r0, r4
 800d724:	f000 fefc 	bl	800e520 <__i2b>
 800d728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	4606      	mov	r6, r0
 800d72e:	f340 8088 	ble.w	800d842 <_dtoa_r+0x8c2>
 800d732:	461a      	mov	r2, r3
 800d734:	4601      	mov	r1, r0
 800d736:	4620      	mov	r0, r4
 800d738:	f000 ffb2 	bl	800e6a0 <__pow5mult>
 800d73c:	9b06      	ldr	r3, [sp, #24]
 800d73e:	2b01      	cmp	r3, #1
 800d740:	4606      	mov	r6, r0
 800d742:	f340 8081 	ble.w	800d848 <_dtoa_r+0x8c8>
 800d746:	f04f 0800 	mov.w	r8, #0
 800d74a:	6933      	ldr	r3, [r6, #16]
 800d74c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d750:	6918      	ldr	r0, [r3, #16]
 800d752:	f000 fe95 	bl	800e480 <__hi0bits>
 800d756:	f1c0 0020 	rsb	r0, r0, #32
 800d75a:	9b05      	ldr	r3, [sp, #20]
 800d75c:	4418      	add	r0, r3
 800d75e:	f010 001f 	ands.w	r0, r0, #31
 800d762:	f000 8092 	beq.w	800d88a <_dtoa_r+0x90a>
 800d766:	f1c0 0320 	rsb	r3, r0, #32
 800d76a:	2b04      	cmp	r3, #4
 800d76c:	f340 808a 	ble.w	800d884 <_dtoa_r+0x904>
 800d770:	f1c0 001c 	rsb	r0, r0, #28
 800d774:	9b04      	ldr	r3, [sp, #16]
 800d776:	4403      	add	r3, r0
 800d778:	9304      	str	r3, [sp, #16]
 800d77a:	9b05      	ldr	r3, [sp, #20]
 800d77c:	4403      	add	r3, r0
 800d77e:	4405      	add	r5, r0
 800d780:	9305      	str	r3, [sp, #20]
 800d782:	9b04      	ldr	r3, [sp, #16]
 800d784:	2b00      	cmp	r3, #0
 800d786:	dd07      	ble.n	800d798 <_dtoa_r+0x818>
 800d788:	ee18 1a10 	vmov	r1, s16
 800d78c:	461a      	mov	r2, r3
 800d78e:	4620      	mov	r0, r4
 800d790:	f000 ffe0 	bl	800e754 <__lshift>
 800d794:	ee08 0a10 	vmov	s16, r0
 800d798:	9b05      	ldr	r3, [sp, #20]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	dd05      	ble.n	800d7aa <_dtoa_r+0x82a>
 800d79e:	4631      	mov	r1, r6
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	f000 ffd6 	bl	800e754 <__lshift>
 800d7a8:	4606      	mov	r6, r0
 800d7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d06e      	beq.n	800d88e <_dtoa_r+0x90e>
 800d7b0:	ee18 0a10 	vmov	r0, s16
 800d7b4:	4631      	mov	r1, r6
 800d7b6:	f001 f83d 	bl	800e834 <__mcmp>
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	da67      	bge.n	800d88e <_dtoa_r+0x90e>
 800d7be:	9b00      	ldr	r3, [sp, #0]
 800d7c0:	3b01      	subs	r3, #1
 800d7c2:	ee18 1a10 	vmov	r1, s16
 800d7c6:	9300      	str	r3, [sp, #0]
 800d7c8:	220a      	movs	r2, #10
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	f000 fdc7 	bl	800e360 <__multadd>
 800d7d2:	9b08      	ldr	r3, [sp, #32]
 800d7d4:	ee08 0a10 	vmov	s16, r0
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	f000 81b1 	beq.w	800db40 <_dtoa_r+0xbc0>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	4639      	mov	r1, r7
 800d7e2:	220a      	movs	r2, #10
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	f000 fdbb 	bl	800e360 <__multadd>
 800d7ea:	9b02      	ldr	r3, [sp, #8]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	4607      	mov	r7, r0
 800d7f0:	f300 808e 	bgt.w	800d910 <_dtoa_r+0x990>
 800d7f4:	9b06      	ldr	r3, [sp, #24]
 800d7f6:	2b02      	cmp	r3, #2
 800d7f8:	dc51      	bgt.n	800d89e <_dtoa_r+0x91e>
 800d7fa:	e089      	b.n	800d910 <_dtoa_r+0x990>
 800d7fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d802:	e74b      	b.n	800d69c <_dtoa_r+0x71c>
 800d804:	9b03      	ldr	r3, [sp, #12]
 800d806:	1e5e      	subs	r6, r3, #1
 800d808:	9b07      	ldr	r3, [sp, #28]
 800d80a:	42b3      	cmp	r3, r6
 800d80c:	bfbf      	itttt	lt
 800d80e:	9b07      	ldrlt	r3, [sp, #28]
 800d810:	9607      	strlt	r6, [sp, #28]
 800d812:	1af2      	sublt	r2, r6, r3
 800d814:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d816:	bfb6      	itet	lt
 800d818:	189b      	addlt	r3, r3, r2
 800d81a:	1b9e      	subge	r6, r3, r6
 800d81c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d81e:	9b03      	ldr	r3, [sp, #12]
 800d820:	bfb8      	it	lt
 800d822:	2600      	movlt	r6, #0
 800d824:	2b00      	cmp	r3, #0
 800d826:	bfb7      	itett	lt
 800d828:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d82c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d830:	1a9d      	sublt	r5, r3, r2
 800d832:	2300      	movlt	r3, #0
 800d834:	e734      	b.n	800d6a0 <_dtoa_r+0x720>
 800d836:	9e07      	ldr	r6, [sp, #28]
 800d838:	9d04      	ldr	r5, [sp, #16]
 800d83a:	9f08      	ldr	r7, [sp, #32]
 800d83c:	e73b      	b.n	800d6b6 <_dtoa_r+0x736>
 800d83e:	9a07      	ldr	r2, [sp, #28]
 800d840:	e767      	b.n	800d712 <_dtoa_r+0x792>
 800d842:	9b06      	ldr	r3, [sp, #24]
 800d844:	2b01      	cmp	r3, #1
 800d846:	dc18      	bgt.n	800d87a <_dtoa_r+0x8fa>
 800d848:	f1ba 0f00 	cmp.w	sl, #0
 800d84c:	d115      	bne.n	800d87a <_dtoa_r+0x8fa>
 800d84e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d852:	b993      	cbnz	r3, 800d87a <_dtoa_r+0x8fa>
 800d854:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d858:	0d1b      	lsrs	r3, r3, #20
 800d85a:	051b      	lsls	r3, r3, #20
 800d85c:	b183      	cbz	r3, 800d880 <_dtoa_r+0x900>
 800d85e:	9b04      	ldr	r3, [sp, #16]
 800d860:	3301      	adds	r3, #1
 800d862:	9304      	str	r3, [sp, #16]
 800d864:	9b05      	ldr	r3, [sp, #20]
 800d866:	3301      	adds	r3, #1
 800d868:	9305      	str	r3, [sp, #20]
 800d86a:	f04f 0801 	mov.w	r8, #1
 800d86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d870:	2b00      	cmp	r3, #0
 800d872:	f47f af6a 	bne.w	800d74a <_dtoa_r+0x7ca>
 800d876:	2001      	movs	r0, #1
 800d878:	e76f      	b.n	800d75a <_dtoa_r+0x7da>
 800d87a:	f04f 0800 	mov.w	r8, #0
 800d87e:	e7f6      	b.n	800d86e <_dtoa_r+0x8ee>
 800d880:	4698      	mov	r8, r3
 800d882:	e7f4      	b.n	800d86e <_dtoa_r+0x8ee>
 800d884:	f43f af7d 	beq.w	800d782 <_dtoa_r+0x802>
 800d888:	4618      	mov	r0, r3
 800d88a:	301c      	adds	r0, #28
 800d88c:	e772      	b.n	800d774 <_dtoa_r+0x7f4>
 800d88e:	9b03      	ldr	r3, [sp, #12]
 800d890:	2b00      	cmp	r3, #0
 800d892:	dc37      	bgt.n	800d904 <_dtoa_r+0x984>
 800d894:	9b06      	ldr	r3, [sp, #24]
 800d896:	2b02      	cmp	r3, #2
 800d898:	dd34      	ble.n	800d904 <_dtoa_r+0x984>
 800d89a:	9b03      	ldr	r3, [sp, #12]
 800d89c:	9302      	str	r3, [sp, #8]
 800d89e:	9b02      	ldr	r3, [sp, #8]
 800d8a0:	b96b      	cbnz	r3, 800d8be <_dtoa_r+0x93e>
 800d8a2:	4631      	mov	r1, r6
 800d8a4:	2205      	movs	r2, #5
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	f000 fd5a 	bl	800e360 <__multadd>
 800d8ac:	4601      	mov	r1, r0
 800d8ae:	4606      	mov	r6, r0
 800d8b0:	ee18 0a10 	vmov	r0, s16
 800d8b4:	f000 ffbe 	bl	800e834 <__mcmp>
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	f73f adbb 	bgt.w	800d434 <_dtoa_r+0x4b4>
 800d8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8c0:	9d01      	ldr	r5, [sp, #4]
 800d8c2:	43db      	mvns	r3, r3
 800d8c4:	9300      	str	r3, [sp, #0]
 800d8c6:	f04f 0800 	mov.w	r8, #0
 800d8ca:	4631      	mov	r1, r6
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	f000 fd25 	bl	800e31c <_Bfree>
 800d8d2:	2f00      	cmp	r7, #0
 800d8d4:	f43f aea4 	beq.w	800d620 <_dtoa_r+0x6a0>
 800d8d8:	f1b8 0f00 	cmp.w	r8, #0
 800d8dc:	d005      	beq.n	800d8ea <_dtoa_r+0x96a>
 800d8de:	45b8      	cmp	r8, r7
 800d8e0:	d003      	beq.n	800d8ea <_dtoa_r+0x96a>
 800d8e2:	4641      	mov	r1, r8
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	f000 fd19 	bl	800e31c <_Bfree>
 800d8ea:	4639      	mov	r1, r7
 800d8ec:	4620      	mov	r0, r4
 800d8ee:	f000 fd15 	bl	800e31c <_Bfree>
 800d8f2:	e695      	b.n	800d620 <_dtoa_r+0x6a0>
 800d8f4:	2600      	movs	r6, #0
 800d8f6:	4637      	mov	r7, r6
 800d8f8:	e7e1      	b.n	800d8be <_dtoa_r+0x93e>
 800d8fa:	9700      	str	r7, [sp, #0]
 800d8fc:	4637      	mov	r7, r6
 800d8fe:	e599      	b.n	800d434 <_dtoa_r+0x4b4>
 800d900:	40240000 	.word	0x40240000
 800d904:	9b08      	ldr	r3, [sp, #32]
 800d906:	2b00      	cmp	r3, #0
 800d908:	f000 80ca 	beq.w	800daa0 <_dtoa_r+0xb20>
 800d90c:	9b03      	ldr	r3, [sp, #12]
 800d90e:	9302      	str	r3, [sp, #8]
 800d910:	2d00      	cmp	r5, #0
 800d912:	dd05      	ble.n	800d920 <_dtoa_r+0x9a0>
 800d914:	4639      	mov	r1, r7
 800d916:	462a      	mov	r2, r5
 800d918:	4620      	mov	r0, r4
 800d91a:	f000 ff1b 	bl	800e754 <__lshift>
 800d91e:	4607      	mov	r7, r0
 800d920:	f1b8 0f00 	cmp.w	r8, #0
 800d924:	d05b      	beq.n	800d9de <_dtoa_r+0xa5e>
 800d926:	6879      	ldr	r1, [r7, #4]
 800d928:	4620      	mov	r0, r4
 800d92a:	f000 fcb7 	bl	800e29c <_Balloc>
 800d92e:	4605      	mov	r5, r0
 800d930:	b928      	cbnz	r0, 800d93e <_dtoa_r+0x9be>
 800d932:	4b87      	ldr	r3, [pc, #540]	; (800db50 <_dtoa_r+0xbd0>)
 800d934:	4602      	mov	r2, r0
 800d936:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d93a:	f7ff bb3b 	b.w	800cfb4 <_dtoa_r+0x34>
 800d93e:	693a      	ldr	r2, [r7, #16]
 800d940:	3202      	adds	r2, #2
 800d942:	0092      	lsls	r2, r2, #2
 800d944:	f107 010c 	add.w	r1, r7, #12
 800d948:	300c      	adds	r0, #12
 800d94a:	f000 fc8d 	bl	800e268 <memcpy>
 800d94e:	2201      	movs	r2, #1
 800d950:	4629      	mov	r1, r5
 800d952:	4620      	mov	r0, r4
 800d954:	f000 fefe 	bl	800e754 <__lshift>
 800d958:	9b01      	ldr	r3, [sp, #4]
 800d95a:	f103 0901 	add.w	r9, r3, #1
 800d95e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d962:	4413      	add	r3, r2
 800d964:	9305      	str	r3, [sp, #20]
 800d966:	f00a 0301 	and.w	r3, sl, #1
 800d96a:	46b8      	mov	r8, r7
 800d96c:	9304      	str	r3, [sp, #16]
 800d96e:	4607      	mov	r7, r0
 800d970:	4631      	mov	r1, r6
 800d972:	ee18 0a10 	vmov	r0, s16
 800d976:	f7ff fa77 	bl	800ce68 <quorem>
 800d97a:	4641      	mov	r1, r8
 800d97c:	9002      	str	r0, [sp, #8]
 800d97e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d982:	ee18 0a10 	vmov	r0, s16
 800d986:	f000 ff55 	bl	800e834 <__mcmp>
 800d98a:	463a      	mov	r2, r7
 800d98c:	9003      	str	r0, [sp, #12]
 800d98e:	4631      	mov	r1, r6
 800d990:	4620      	mov	r0, r4
 800d992:	f000 ff6b 	bl	800e86c <__mdiff>
 800d996:	68c2      	ldr	r2, [r0, #12]
 800d998:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800d99c:	4605      	mov	r5, r0
 800d99e:	bb02      	cbnz	r2, 800d9e2 <_dtoa_r+0xa62>
 800d9a0:	4601      	mov	r1, r0
 800d9a2:	ee18 0a10 	vmov	r0, s16
 800d9a6:	f000 ff45 	bl	800e834 <__mcmp>
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	4629      	mov	r1, r5
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	9207      	str	r2, [sp, #28]
 800d9b2:	f000 fcb3 	bl	800e31c <_Bfree>
 800d9b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d9ba:	ea43 0102 	orr.w	r1, r3, r2
 800d9be:	9b04      	ldr	r3, [sp, #16]
 800d9c0:	430b      	orrs	r3, r1
 800d9c2:	464d      	mov	r5, r9
 800d9c4:	d10f      	bne.n	800d9e6 <_dtoa_r+0xa66>
 800d9c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d9ca:	d02a      	beq.n	800da22 <_dtoa_r+0xaa2>
 800d9cc:	9b03      	ldr	r3, [sp, #12]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	dd02      	ble.n	800d9d8 <_dtoa_r+0xa58>
 800d9d2:	9b02      	ldr	r3, [sp, #8]
 800d9d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d9d8:	f88b a000 	strb.w	sl, [fp]
 800d9dc:	e775      	b.n	800d8ca <_dtoa_r+0x94a>
 800d9de:	4638      	mov	r0, r7
 800d9e0:	e7ba      	b.n	800d958 <_dtoa_r+0x9d8>
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	e7e2      	b.n	800d9ac <_dtoa_r+0xa2c>
 800d9e6:	9b03      	ldr	r3, [sp, #12]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	db04      	blt.n	800d9f6 <_dtoa_r+0xa76>
 800d9ec:	9906      	ldr	r1, [sp, #24]
 800d9ee:	430b      	orrs	r3, r1
 800d9f0:	9904      	ldr	r1, [sp, #16]
 800d9f2:	430b      	orrs	r3, r1
 800d9f4:	d122      	bne.n	800da3c <_dtoa_r+0xabc>
 800d9f6:	2a00      	cmp	r2, #0
 800d9f8:	ddee      	ble.n	800d9d8 <_dtoa_r+0xa58>
 800d9fa:	ee18 1a10 	vmov	r1, s16
 800d9fe:	2201      	movs	r2, #1
 800da00:	4620      	mov	r0, r4
 800da02:	f000 fea7 	bl	800e754 <__lshift>
 800da06:	4631      	mov	r1, r6
 800da08:	ee08 0a10 	vmov	s16, r0
 800da0c:	f000 ff12 	bl	800e834 <__mcmp>
 800da10:	2800      	cmp	r0, #0
 800da12:	dc03      	bgt.n	800da1c <_dtoa_r+0xa9c>
 800da14:	d1e0      	bne.n	800d9d8 <_dtoa_r+0xa58>
 800da16:	f01a 0f01 	tst.w	sl, #1
 800da1a:	d0dd      	beq.n	800d9d8 <_dtoa_r+0xa58>
 800da1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800da20:	d1d7      	bne.n	800d9d2 <_dtoa_r+0xa52>
 800da22:	2339      	movs	r3, #57	; 0x39
 800da24:	f88b 3000 	strb.w	r3, [fp]
 800da28:	462b      	mov	r3, r5
 800da2a:	461d      	mov	r5, r3
 800da2c:	3b01      	subs	r3, #1
 800da2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800da32:	2a39      	cmp	r2, #57	; 0x39
 800da34:	d071      	beq.n	800db1a <_dtoa_r+0xb9a>
 800da36:	3201      	adds	r2, #1
 800da38:	701a      	strb	r2, [r3, #0]
 800da3a:	e746      	b.n	800d8ca <_dtoa_r+0x94a>
 800da3c:	2a00      	cmp	r2, #0
 800da3e:	dd07      	ble.n	800da50 <_dtoa_r+0xad0>
 800da40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800da44:	d0ed      	beq.n	800da22 <_dtoa_r+0xaa2>
 800da46:	f10a 0301 	add.w	r3, sl, #1
 800da4a:	f88b 3000 	strb.w	r3, [fp]
 800da4e:	e73c      	b.n	800d8ca <_dtoa_r+0x94a>
 800da50:	9b05      	ldr	r3, [sp, #20]
 800da52:	f809 ac01 	strb.w	sl, [r9, #-1]
 800da56:	4599      	cmp	r9, r3
 800da58:	d047      	beq.n	800daea <_dtoa_r+0xb6a>
 800da5a:	ee18 1a10 	vmov	r1, s16
 800da5e:	2300      	movs	r3, #0
 800da60:	220a      	movs	r2, #10
 800da62:	4620      	mov	r0, r4
 800da64:	f000 fc7c 	bl	800e360 <__multadd>
 800da68:	45b8      	cmp	r8, r7
 800da6a:	ee08 0a10 	vmov	s16, r0
 800da6e:	f04f 0300 	mov.w	r3, #0
 800da72:	f04f 020a 	mov.w	r2, #10
 800da76:	4641      	mov	r1, r8
 800da78:	4620      	mov	r0, r4
 800da7a:	d106      	bne.n	800da8a <_dtoa_r+0xb0a>
 800da7c:	f000 fc70 	bl	800e360 <__multadd>
 800da80:	4680      	mov	r8, r0
 800da82:	4607      	mov	r7, r0
 800da84:	f109 0901 	add.w	r9, r9, #1
 800da88:	e772      	b.n	800d970 <_dtoa_r+0x9f0>
 800da8a:	f000 fc69 	bl	800e360 <__multadd>
 800da8e:	4639      	mov	r1, r7
 800da90:	4680      	mov	r8, r0
 800da92:	2300      	movs	r3, #0
 800da94:	220a      	movs	r2, #10
 800da96:	4620      	mov	r0, r4
 800da98:	f000 fc62 	bl	800e360 <__multadd>
 800da9c:	4607      	mov	r7, r0
 800da9e:	e7f1      	b.n	800da84 <_dtoa_r+0xb04>
 800daa0:	9b03      	ldr	r3, [sp, #12]
 800daa2:	9302      	str	r3, [sp, #8]
 800daa4:	9d01      	ldr	r5, [sp, #4]
 800daa6:	ee18 0a10 	vmov	r0, s16
 800daaa:	4631      	mov	r1, r6
 800daac:	f7ff f9dc 	bl	800ce68 <quorem>
 800dab0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dab4:	9b01      	ldr	r3, [sp, #4]
 800dab6:	f805 ab01 	strb.w	sl, [r5], #1
 800daba:	1aea      	subs	r2, r5, r3
 800dabc:	9b02      	ldr	r3, [sp, #8]
 800dabe:	4293      	cmp	r3, r2
 800dac0:	dd09      	ble.n	800dad6 <_dtoa_r+0xb56>
 800dac2:	ee18 1a10 	vmov	r1, s16
 800dac6:	2300      	movs	r3, #0
 800dac8:	220a      	movs	r2, #10
 800daca:	4620      	mov	r0, r4
 800dacc:	f000 fc48 	bl	800e360 <__multadd>
 800dad0:	ee08 0a10 	vmov	s16, r0
 800dad4:	e7e7      	b.n	800daa6 <_dtoa_r+0xb26>
 800dad6:	9b02      	ldr	r3, [sp, #8]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	bfc8      	it	gt
 800dadc:	461d      	movgt	r5, r3
 800dade:	9b01      	ldr	r3, [sp, #4]
 800dae0:	bfd8      	it	le
 800dae2:	2501      	movle	r5, #1
 800dae4:	441d      	add	r5, r3
 800dae6:	f04f 0800 	mov.w	r8, #0
 800daea:	ee18 1a10 	vmov	r1, s16
 800daee:	2201      	movs	r2, #1
 800daf0:	4620      	mov	r0, r4
 800daf2:	f000 fe2f 	bl	800e754 <__lshift>
 800daf6:	4631      	mov	r1, r6
 800daf8:	ee08 0a10 	vmov	s16, r0
 800dafc:	f000 fe9a 	bl	800e834 <__mcmp>
 800db00:	2800      	cmp	r0, #0
 800db02:	dc91      	bgt.n	800da28 <_dtoa_r+0xaa8>
 800db04:	d102      	bne.n	800db0c <_dtoa_r+0xb8c>
 800db06:	f01a 0f01 	tst.w	sl, #1
 800db0a:	d18d      	bne.n	800da28 <_dtoa_r+0xaa8>
 800db0c:	462b      	mov	r3, r5
 800db0e:	461d      	mov	r5, r3
 800db10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db14:	2a30      	cmp	r2, #48	; 0x30
 800db16:	d0fa      	beq.n	800db0e <_dtoa_r+0xb8e>
 800db18:	e6d7      	b.n	800d8ca <_dtoa_r+0x94a>
 800db1a:	9a01      	ldr	r2, [sp, #4]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d184      	bne.n	800da2a <_dtoa_r+0xaaa>
 800db20:	9b00      	ldr	r3, [sp, #0]
 800db22:	3301      	adds	r3, #1
 800db24:	9300      	str	r3, [sp, #0]
 800db26:	2331      	movs	r3, #49	; 0x31
 800db28:	7013      	strb	r3, [r2, #0]
 800db2a:	e6ce      	b.n	800d8ca <_dtoa_r+0x94a>
 800db2c:	4b09      	ldr	r3, [pc, #36]	; (800db54 <_dtoa_r+0xbd4>)
 800db2e:	f7ff ba95 	b.w	800d05c <_dtoa_r+0xdc>
 800db32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db34:	2b00      	cmp	r3, #0
 800db36:	f47f aa6e 	bne.w	800d016 <_dtoa_r+0x96>
 800db3a:	4b07      	ldr	r3, [pc, #28]	; (800db58 <_dtoa_r+0xbd8>)
 800db3c:	f7ff ba8e 	b.w	800d05c <_dtoa_r+0xdc>
 800db40:	9b02      	ldr	r3, [sp, #8]
 800db42:	2b00      	cmp	r3, #0
 800db44:	dcae      	bgt.n	800daa4 <_dtoa_r+0xb24>
 800db46:	9b06      	ldr	r3, [sp, #24]
 800db48:	2b02      	cmp	r3, #2
 800db4a:	f73f aea8 	bgt.w	800d89e <_dtoa_r+0x91e>
 800db4e:	e7a9      	b.n	800daa4 <_dtoa_r+0xb24>
 800db50:	080109c0 	.word	0x080109c0
 800db54:	080107c0 	.word	0x080107c0
 800db58:	08010941 	.word	0x08010941

0800db5c <rshift>:
 800db5c:	6903      	ldr	r3, [r0, #16]
 800db5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800db62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db66:	ea4f 1261 	mov.w	r2, r1, asr #5
 800db6a:	f100 0414 	add.w	r4, r0, #20
 800db6e:	dd45      	ble.n	800dbfc <rshift+0xa0>
 800db70:	f011 011f 	ands.w	r1, r1, #31
 800db74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800db78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800db7c:	d10c      	bne.n	800db98 <rshift+0x3c>
 800db7e:	f100 0710 	add.w	r7, r0, #16
 800db82:	4629      	mov	r1, r5
 800db84:	42b1      	cmp	r1, r6
 800db86:	d334      	bcc.n	800dbf2 <rshift+0x96>
 800db88:	1a9b      	subs	r3, r3, r2
 800db8a:	009b      	lsls	r3, r3, #2
 800db8c:	1eea      	subs	r2, r5, #3
 800db8e:	4296      	cmp	r6, r2
 800db90:	bf38      	it	cc
 800db92:	2300      	movcc	r3, #0
 800db94:	4423      	add	r3, r4
 800db96:	e015      	b.n	800dbc4 <rshift+0x68>
 800db98:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800db9c:	f1c1 0820 	rsb	r8, r1, #32
 800dba0:	40cf      	lsrs	r7, r1
 800dba2:	f105 0e04 	add.w	lr, r5, #4
 800dba6:	46a1      	mov	r9, r4
 800dba8:	4576      	cmp	r6, lr
 800dbaa:	46f4      	mov	ip, lr
 800dbac:	d815      	bhi.n	800dbda <rshift+0x7e>
 800dbae:	1a9a      	subs	r2, r3, r2
 800dbb0:	0092      	lsls	r2, r2, #2
 800dbb2:	3a04      	subs	r2, #4
 800dbb4:	3501      	adds	r5, #1
 800dbb6:	42ae      	cmp	r6, r5
 800dbb8:	bf38      	it	cc
 800dbba:	2200      	movcc	r2, #0
 800dbbc:	18a3      	adds	r3, r4, r2
 800dbbe:	50a7      	str	r7, [r4, r2]
 800dbc0:	b107      	cbz	r7, 800dbc4 <rshift+0x68>
 800dbc2:	3304      	adds	r3, #4
 800dbc4:	1b1a      	subs	r2, r3, r4
 800dbc6:	42a3      	cmp	r3, r4
 800dbc8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dbcc:	bf08      	it	eq
 800dbce:	2300      	moveq	r3, #0
 800dbd0:	6102      	str	r2, [r0, #16]
 800dbd2:	bf08      	it	eq
 800dbd4:	6143      	streq	r3, [r0, #20]
 800dbd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbda:	f8dc c000 	ldr.w	ip, [ip]
 800dbde:	fa0c fc08 	lsl.w	ip, ip, r8
 800dbe2:	ea4c 0707 	orr.w	r7, ip, r7
 800dbe6:	f849 7b04 	str.w	r7, [r9], #4
 800dbea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dbee:	40cf      	lsrs	r7, r1
 800dbf0:	e7da      	b.n	800dba8 <rshift+0x4c>
 800dbf2:	f851 cb04 	ldr.w	ip, [r1], #4
 800dbf6:	f847 cf04 	str.w	ip, [r7, #4]!
 800dbfa:	e7c3      	b.n	800db84 <rshift+0x28>
 800dbfc:	4623      	mov	r3, r4
 800dbfe:	e7e1      	b.n	800dbc4 <rshift+0x68>

0800dc00 <__hexdig_fun>:
 800dc00:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dc04:	2b09      	cmp	r3, #9
 800dc06:	d802      	bhi.n	800dc0e <__hexdig_fun+0xe>
 800dc08:	3820      	subs	r0, #32
 800dc0a:	b2c0      	uxtb	r0, r0
 800dc0c:	4770      	bx	lr
 800dc0e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dc12:	2b05      	cmp	r3, #5
 800dc14:	d801      	bhi.n	800dc1a <__hexdig_fun+0x1a>
 800dc16:	3847      	subs	r0, #71	; 0x47
 800dc18:	e7f7      	b.n	800dc0a <__hexdig_fun+0xa>
 800dc1a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dc1e:	2b05      	cmp	r3, #5
 800dc20:	d801      	bhi.n	800dc26 <__hexdig_fun+0x26>
 800dc22:	3827      	subs	r0, #39	; 0x27
 800dc24:	e7f1      	b.n	800dc0a <__hexdig_fun+0xa>
 800dc26:	2000      	movs	r0, #0
 800dc28:	4770      	bx	lr
	...

0800dc2c <__gethex>:
 800dc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc30:	ed2d 8b02 	vpush	{d8}
 800dc34:	b089      	sub	sp, #36	; 0x24
 800dc36:	ee08 0a10 	vmov	s16, r0
 800dc3a:	9304      	str	r3, [sp, #16]
 800dc3c:	4bb4      	ldr	r3, [pc, #720]	; (800df10 <__gethex+0x2e4>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	9301      	str	r3, [sp, #4]
 800dc42:	4618      	mov	r0, r3
 800dc44:	468b      	mov	fp, r1
 800dc46:	4690      	mov	r8, r2
 800dc48:	f7f2 faea 	bl	8000220 <strlen>
 800dc4c:	9b01      	ldr	r3, [sp, #4]
 800dc4e:	f8db 2000 	ldr.w	r2, [fp]
 800dc52:	4403      	add	r3, r0
 800dc54:	4682      	mov	sl, r0
 800dc56:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800dc5a:	9305      	str	r3, [sp, #20]
 800dc5c:	1c93      	adds	r3, r2, #2
 800dc5e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800dc62:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800dc66:	32fe      	adds	r2, #254	; 0xfe
 800dc68:	18d1      	adds	r1, r2, r3
 800dc6a:	461f      	mov	r7, r3
 800dc6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dc70:	9100      	str	r1, [sp, #0]
 800dc72:	2830      	cmp	r0, #48	; 0x30
 800dc74:	d0f8      	beq.n	800dc68 <__gethex+0x3c>
 800dc76:	f7ff ffc3 	bl	800dc00 <__hexdig_fun>
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	2800      	cmp	r0, #0
 800dc7e:	d13a      	bne.n	800dcf6 <__gethex+0xca>
 800dc80:	9901      	ldr	r1, [sp, #4]
 800dc82:	4652      	mov	r2, sl
 800dc84:	4638      	mov	r0, r7
 800dc86:	f001 f943 	bl	800ef10 <strncmp>
 800dc8a:	4605      	mov	r5, r0
 800dc8c:	2800      	cmp	r0, #0
 800dc8e:	d168      	bne.n	800dd62 <__gethex+0x136>
 800dc90:	f817 000a 	ldrb.w	r0, [r7, sl]
 800dc94:	eb07 060a 	add.w	r6, r7, sl
 800dc98:	f7ff ffb2 	bl	800dc00 <__hexdig_fun>
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	d062      	beq.n	800dd66 <__gethex+0x13a>
 800dca0:	4633      	mov	r3, r6
 800dca2:	7818      	ldrb	r0, [r3, #0]
 800dca4:	2830      	cmp	r0, #48	; 0x30
 800dca6:	461f      	mov	r7, r3
 800dca8:	f103 0301 	add.w	r3, r3, #1
 800dcac:	d0f9      	beq.n	800dca2 <__gethex+0x76>
 800dcae:	f7ff ffa7 	bl	800dc00 <__hexdig_fun>
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	fab0 f480 	clz	r4, r0
 800dcb8:	0964      	lsrs	r4, r4, #5
 800dcba:	4635      	mov	r5, r6
 800dcbc:	9300      	str	r3, [sp, #0]
 800dcbe:	463a      	mov	r2, r7
 800dcc0:	4616      	mov	r6, r2
 800dcc2:	3201      	adds	r2, #1
 800dcc4:	7830      	ldrb	r0, [r6, #0]
 800dcc6:	f7ff ff9b 	bl	800dc00 <__hexdig_fun>
 800dcca:	2800      	cmp	r0, #0
 800dccc:	d1f8      	bne.n	800dcc0 <__gethex+0x94>
 800dcce:	9901      	ldr	r1, [sp, #4]
 800dcd0:	4652      	mov	r2, sl
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	f001 f91c 	bl	800ef10 <strncmp>
 800dcd8:	b980      	cbnz	r0, 800dcfc <__gethex+0xd0>
 800dcda:	b94d      	cbnz	r5, 800dcf0 <__gethex+0xc4>
 800dcdc:	eb06 050a 	add.w	r5, r6, sl
 800dce0:	462a      	mov	r2, r5
 800dce2:	4616      	mov	r6, r2
 800dce4:	3201      	adds	r2, #1
 800dce6:	7830      	ldrb	r0, [r6, #0]
 800dce8:	f7ff ff8a 	bl	800dc00 <__hexdig_fun>
 800dcec:	2800      	cmp	r0, #0
 800dcee:	d1f8      	bne.n	800dce2 <__gethex+0xb6>
 800dcf0:	1bad      	subs	r5, r5, r6
 800dcf2:	00ad      	lsls	r5, r5, #2
 800dcf4:	e004      	b.n	800dd00 <__gethex+0xd4>
 800dcf6:	2400      	movs	r4, #0
 800dcf8:	4625      	mov	r5, r4
 800dcfa:	e7e0      	b.n	800dcbe <__gethex+0x92>
 800dcfc:	2d00      	cmp	r5, #0
 800dcfe:	d1f7      	bne.n	800dcf0 <__gethex+0xc4>
 800dd00:	7833      	ldrb	r3, [r6, #0]
 800dd02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dd06:	2b50      	cmp	r3, #80	; 0x50
 800dd08:	d13b      	bne.n	800dd82 <__gethex+0x156>
 800dd0a:	7873      	ldrb	r3, [r6, #1]
 800dd0c:	2b2b      	cmp	r3, #43	; 0x2b
 800dd0e:	d02c      	beq.n	800dd6a <__gethex+0x13e>
 800dd10:	2b2d      	cmp	r3, #45	; 0x2d
 800dd12:	d02e      	beq.n	800dd72 <__gethex+0x146>
 800dd14:	1c71      	adds	r1, r6, #1
 800dd16:	f04f 0900 	mov.w	r9, #0
 800dd1a:	7808      	ldrb	r0, [r1, #0]
 800dd1c:	f7ff ff70 	bl	800dc00 <__hexdig_fun>
 800dd20:	1e43      	subs	r3, r0, #1
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	2b18      	cmp	r3, #24
 800dd26:	d82c      	bhi.n	800dd82 <__gethex+0x156>
 800dd28:	f1a0 0210 	sub.w	r2, r0, #16
 800dd2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dd30:	f7ff ff66 	bl	800dc00 <__hexdig_fun>
 800dd34:	1e43      	subs	r3, r0, #1
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	2b18      	cmp	r3, #24
 800dd3a:	d91d      	bls.n	800dd78 <__gethex+0x14c>
 800dd3c:	f1b9 0f00 	cmp.w	r9, #0
 800dd40:	d000      	beq.n	800dd44 <__gethex+0x118>
 800dd42:	4252      	negs	r2, r2
 800dd44:	4415      	add	r5, r2
 800dd46:	f8cb 1000 	str.w	r1, [fp]
 800dd4a:	b1e4      	cbz	r4, 800dd86 <__gethex+0x15a>
 800dd4c:	9b00      	ldr	r3, [sp, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	bf14      	ite	ne
 800dd52:	2700      	movne	r7, #0
 800dd54:	2706      	moveq	r7, #6
 800dd56:	4638      	mov	r0, r7
 800dd58:	b009      	add	sp, #36	; 0x24
 800dd5a:	ecbd 8b02 	vpop	{d8}
 800dd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd62:	463e      	mov	r6, r7
 800dd64:	4625      	mov	r5, r4
 800dd66:	2401      	movs	r4, #1
 800dd68:	e7ca      	b.n	800dd00 <__gethex+0xd4>
 800dd6a:	f04f 0900 	mov.w	r9, #0
 800dd6e:	1cb1      	adds	r1, r6, #2
 800dd70:	e7d3      	b.n	800dd1a <__gethex+0xee>
 800dd72:	f04f 0901 	mov.w	r9, #1
 800dd76:	e7fa      	b.n	800dd6e <__gethex+0x142>
 800dd78:	230a      	movs	r3, #10
 800dd7a:	fb03 0202 	mla	r2, r3, r2, r0
 800dd7e:	3a10      	subs	r2, #16
 800dd80:	e7d4      	b.n	800dd2c <__gethex+0x100>
 800dd82:	4631      	mov	r1, r6
 800dd84:	e7df      	b.n	800dd46 <__gethex+0x11a>
 800dd86:	1bf3      	subs	r3, r6, r7
 800dd88:	3b01      	subs	r3, #1
 800dd8a:	4621      	mov	r1, r4
 800dd8c:	2b07      	cmp	r3, #7
 800dd8e:	dc0b      	bgt.n	800dda8 <__gethex+0x17c>
 800dd90:	ee18 0a10 	vmov	r0, s16
 800dd94:	f000 fa82 	bl	800e29c <_Balloc>
 800dd98:	4604      	mov	r4, r0
 800dd9a:	b940      	cbnz	r0, 800ddae <__gethex+0x182>
 800dd9c:	4b5d      	ldr	r3, [pc, #372]	; (800df14 <__gethex+0x2e8>)
 800dd9e:	4602      	mov	r2, r0
 800dda0:	21de      	movs	r1, #222	; 0xde
 800dda2:	485d      	ldr	r0, [pc, #372]	; (800df18 <__gethex+0x2ec>)
 800dda4:	f001 f8d6 	bl	800ef54 <__assert_func>
 800dda8:	3101      	adds	r1, #1
 800ddaa:	105b      	asrs	r3, r3, #1
 800ddac:	e7ee      	b.n	800dd8c <__gethex+0x160>
 800ddae:	f100 0914 	add.w	r9, r0, #20
 800ddb2:	f04f 0b00 	mov.w	fp, #0
 800ddb6:	f1ca 0301 	rsb	r3, sl, #1
 800ddba:	f8cd 9008 	str.w	r9, [sp, #8]
 800ddbe:	f8cd b000 	str.w	fp, [sp]
 800ddc2:	9306      	str	r3, [sp, #24]
 800ddc4:	42b7      	cmp	r7, r6
 800ddc6:	d340      	bcc.n	800de4a <__gethex+0x21e>
 800ddc8:	9802      	ldr	r0, [sp, #8]
 800ddca:	9b00      	ldr	r3, [sp, #0]
 800ddcc:	f840 3b04 	str.w	r3, [r0], #4
 800ddd0:	eba0 0009 	sub.w	r0, r0, r9
 800ddd4:	1080      	asrs	r0, r0, #2
 800ddd6:	0146      	lsls	r6, r0, #5
 800ddd8:	6120      	str	r0, [r4, #16]
 800ddda:	4618      	mov	r0, r3
 800dddc:	f000 fb50 	bl	800e480 <__hi0bits>
 800dde0:	1a30      	subs	r0, r6, r0
 800dde2:	f8d8 6000 	ldr.w	r6, [r8]
 800dde6:	42b0      	cmp	r0, r6
 800dde8:	dd63      	ble.n	800deb2 <__gethex+0x286>
 800ddea:	1b87      	subs	r7, r0, r6
 800ddec:	4639      	mov	r1, r7
 800ddee:	4620      	mov	r0, r4
 800ddf0:	f000 fef4 	bl	800ebdc <__any_on>
 800ddf4:	4682      	mov	sl, r0
 800ddf6:	b1a8      	cbz	r0, 800de24 <__gethex+0x1f8>
 800ddf8:	1e7b      	subs	r3, r7, #1
 800ddfa:	1159      	asrs	r1, r3, #5
 800ddfc:	f003 021f 	and.w	r2, r3, #31
 800de00:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800de04:	f04f 0a01 	mov.w	sl, #1
 800de08:	fa0a f202 	lsl.w	r2, sl, r2
 800de0c:	420a      	tst	r2, r1
 800de0e:	d009      	beq.n	800de24 <__gethex+0x1f8>
 800de10:	4553      	cmp	r3, sl
 800de12:	dd05      	ble.n	800de20 <__gethex+0x1f4>
 800de14:	1eb9      	subs	r1, r7, #2
 800de16:	4620      	mov	r0, r4
 800de18:	f000 fee0 	bl	800ebdc <__any_on>
 800de1c:	2800      	cmp	r0, #0
 800de1e:	d145      	bne.n	800deac <__gethex+0x280>
 800de20:	f04f 0a02 	mov.w	sl, #2
 800de24:	4639      	mov	r1, r7
 800de26:	4620      	mov	r0, r4
 800de28:	f7ff fe98 	bl	800db5c <rshift>
 800de2c:	443d      	add	r5, r7
 800de2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de32:	42ab      	cmp	r3, r5
 800de34:	da4c      	bge.n	800ded0 <__gethex+0x2a4>
 800de36:	ee18 0a10 	vmov	r0, s16
 800de3a:	4621      	mov	r1, r4
 800de3c:	f000 fa6e 	bl	800e31c <_Bfree>
 800de40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800de42:	2300      	movs	r3, #0
 800de44:	6013      	str	r3, [r2, #0]
 800de46:	27a3      	movs	r7, #163	; 0xa3
 800de48:	e785      	b.n	800dd56 <__gethex+0x12a>
 800de4a:	1e73      	subs	r3, r6, #1
 800de4c:	9a05      	ldr	r2, [sp, #20]
 800de4e:	9303      	str	r3, [sp, #12]
 800de50:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800de54:	4293      	cmp	r3, r2
 800de56:	d019      	beq.n	800de8c <__gethex+0x260>
 800de58:	f1bb 0f20 	cmp.w	fp, #32
 800de5c:	d107      	bne.n	800de6e <__gethex+0x242>
 800de5e:	9b02      	ldr	r3, [sp, #8]
 800de60:	9a00      	ldr	r2, [sp, #0]
 800de62:	f843 2b04 	str.w	r2, [r3], #4
 800de66:	9302      	str	r3, [sp, #8]
 800de68:	2300      	movs	r3, #0
 800de6a:	9300      	str	r3, [sp, #0]
 800de6c:	469b      	mov	fp, r3
 800de6e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800de72:	f7ff fec5 	bl	800dc00 <__hexdig_fun>
 800de76:	9b00      	ldr	r3, [sp, #0]
 800de78:	f000 000f 	and.w	r0, r0, #15
 800de7c:	fa00 f00b 	lsl.w	r0, r0, fp
 800de80:	4303      	orrs	r3, r0
 800de82:	9300      	str	r3, [sp, #0]
 800de84:	f10b 0b04 	add.w	fp, fp, #4
 800de88:	9b03      	ldr	r3, [sp, #12]
 800de8a:	e00d      	b.n	800dea8 <__gethex+0x27c>
 800de8c:	9b03      	ldr	r3, [sp, #12]
 800de8e:	9a06      	ldr	r2, [sp, #24]
 800de90:	4413      	add	r3, r2
 800de92:	42bb      	cmp	r3, r7
 800de94:	d3e0      	bcc.n	800de58 <__gethex+0x22c>
 800de96:	4618      	mov	r0, r3
 800de98:	9901      	ldr	r1, [sp, #4]
 800de9a:	9307      	str	r3, [sp, #28]
 800de9c:	4652      	mov	r2, sl
 800de9e:	f001 f837 	bl	800ef10 <strncmp>
 800dea2:	9b07      	ldr	r3, [sp, #28]
 800dea4:	2800      	cmp	r0, #0
 800dea6:	d1d7      	bne.n	800de58 <__gethex+0x22c>
 800dea8:	461e      	mov	r6, r3
 800deaa:	e78b      	b.n	800ddc4 <__gethex+0x198>
 800deac:	f04f 0a03 	mov.w	sl, #3
 800deb0:	e7b8      	b.n	800de24 <__gethex+0x1f8>
 800deb2:	da0a      	bge.n	800deca <__gethex+0x29e>
 800deb4:	1a37      	subs	r7, r6, r0
 800deb6:	4621      	mov	r1, r4
 800deb8:	ee18 0a10 	vmov	r0, s16
 800debc:	463a      	mov	r2, r7
 800debe:	f000 fc49 	bl	800e754 <__lshift>
 800dec2:	1bed      	subs	r5, r5, r7
 800dec4:	4604      	mov	r4, r0
 800dec6:	f100 0914 	add.w	r9, r0, #20
 800deca:	f04f 0a00 	mov.w	sl, #0
 800dece:	e7ae      	b.n	800de2e <__gethex+0x202>
 800ded0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ded4:	42a8      	cmp	r0, r5
 800ded6:	dd72      	ble.n	800dfbe <__gethex+0x392>
 800ded8:	1b45      	subs	r5, r0, r5
 800deda:	42ae      	cmp	r6, r5
 800dedc:	dc36      	bgt.n	800df4c <__gethex+0x320>
 800dede:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dee2:	2b02      	cmp	r3, #2
 800dee4:	d02a      	beq.n	800df3c <__gethex+0x310>
 800dee6:	2b03      	cmp	r3, #3
 800dee8:	d02c      	beq.n	800df44 <__gethex+0x318>
 800deea:	2b01      	cmp	r3, #1
 800deec:	d11c      	bne.n	800df28 <__gethex+0x2fc>
 800deee:	42ae      	cmp	r6, r5
 800def0:	d11a      	bne.n	800df28 <__gethex+0x2fc>
 800def2:	2e01      	cmp	r6, #1
 800def4:	d112      	bne.n	800df1c <__gethex+0x2f0>
 800def6:	9a04      	ldr	r2, [sp, #16]
 800def8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800defc:	6013      	str	r3, [r2, #0]
 800defe:	2301      	movs	r3, #1
 800df00:	6123      	str	r3, [r4, #16]
 800df02:	f8c9 3000 	str.w	r3, [r9]
 800df06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df08:	2762      	movs	r7, #98	; 0x62
 800df0a:	601c      	str	r4, [r3, #0]
 800df0c:	e723      	b.n	800dd56 <__gethex+0x12a>
 800df0e:	bf00      	nop
 800df10:	08010a38 	.word	0x08010a38
 800df14:	080109c0 	.word	0x080109c0
 800df18:	080109d1 	.word	0x080109d1
 800df1c:	1e71      	subs	r1, r6, #1
 800df1e:	4620      	mov	r0, r4
 800df20:	f000 fe5c 	bl	800ebdc <__any_on>
 800df24:	2800      	cmp	r0, #0
 800df26:	d1e6      	bne.n	800def6 <__gethex+0x2ca>
 800df28:	ee18 0a10 	vmov	r0, s16
 800df2c:	4621      	mov	r1, r4
 800df2e:	f000 f9f5 	bl	800e31c <_Bfree>
 800df32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800df34:	2300      	movs	r3, #0
 800df36:	6013      	str	r3, [r2, #0]
 800df38:	2750      	movs	r7, #80	; 0x50
 800df3a:	e70c      	b.n	800dd56 <__gethex+0x12a>
 800df3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d1f2      	bne.n	800df28 <__gethex+0x2fc>
 800df42:	e7d8      	b.n	800def6 <__gethex+0x2ca>
 800df44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df46:	2b00      	cmp	r3, #0
 800df48:	d1d5      	bne.n	800def6 <__gethex+0x2ca>
 800df4a:	e7ed      	b.n	800df28 <__gethex+0x2fc>
 800df4c:	1e6f      	subs	r7, r5, #1
 800df4e:	f1ba 0f00 	cmp.w	sl, #0
 800df52:	d131      	bne.n	800dfb8 <__gethex+0x38c>
 800df54:	b127      	cbz	r7, 800df60 <__gethex+0x334>
 800df56:	4639      	mov	r1, r7
 800df58:	4620      	mov	r0, r4
 800df5a:	f000 fe3f 	bl	800ebdc <__any_on>
 800df5e:	4682      	mov	sl, r0
 800df60:	117b      	asrs	r3, r7, #5
 800df62:	2101      	movs	r1, #1
 800df64:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800df68:	f007 071f 	and.w	r7, r7, #31
 800df6c:	fa01 f707 	lsl.w	r7, r1, r7
 800df70:	421f      	tst	r7, r3
 800df72:	4629      	mov	r1, r5
 800df74:	4620      	mov	r0, r4
 800df76:	bf18      	it	ne
 800df78:	f04a 0a02 	orrne.w	sl, sl, #2
 800df7c:	1b76      	subs	r6, r6, r5
 800df7e:	f7ff fded 	bl	800db5c <rshift>
 800df82:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800df86:	2702      	movs	r7, #2
 800df88:	f1ba 0f00 	cmp.w	sl, #0
 800df8c:	d048      	beq.n	800e020 <__gethex+0x3f4>
 800df8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df92:	2b02      	cmp	r3, #2
 800df94:	d015      	beq.n	800dfc2 <__gethex+0x396>
 800df96:	2b03      	cmp	r3, #3
 800df98:	d017      	beq.n	800dfca <__gethex+0x39e>
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d109      	bne.n	800dfb2 <__gethex+0x386>
 800df9e:	f01a 0f02 	tst.w	sl, #2
 800dfa2:	d006      	beq.n	800dfb2 <__gethex+0x386>
 800dfa4:	f8d9 0000 	ldr.w	r0, [r9]
 800dfa8:	ea4a 0a00 	orr.w	sl, sl, r0
 800dfac:	f01a 0f01 	tst.w	sl, #1
 800dfb0:	d10e      	bne.n	800dfd0 <__gethex+0x3a4>
 800dfb2:	f047 0710 	orr.w	r7, r7, #16
 800dfb6:	e033      	b.n	800e020 <__gethex+0x3f4>
 800dfb8:	f04f 0a01 	mov.w	sl, #1
 800dfbc:	e7d0      	b.n	800df60 <__gethex+0x334>
 800dfbe:	2701      	movs	r7, #1
 800dfc0:	e7e2      	b.n	800df88 <__gethex+0x35c>
 800dfc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dfc4:	f1c3 0301 	rsb	r3, r3, #1
 800dfc8:	9315      	str	r3, [sp, #84]	; 0x54
 800dfca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d0f0      	beq.n	800dfb2 <__gethex+0x386>
 800dfd0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dfd4:	f104 0314 	add.w	r3, r4, #20
 800dfd8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dfdc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dfe0:	f04f 0c00 	mov.w	ip, #0
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfea:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800dfee:	d01c      	beq.n	800e02a <__gethex+0x3fe>
 800dff0:	3201      	adds	r2, #1
 800dff2:	6002      	str	r2, [r0, #0]
 800dff4:	2f02      	cmp	r7, #2
 800dff6:	f104 0314 	add.w	r3, r4, #20
 800dffa:	d13f      	bne.n	800e07c <__gethex+0x450>
 800dffc:	f8d8 2000 	ldr.w	r2, [r8]
 800e000:	3a01      	subs	r2, #1
 800e002:	42b2      	cmp	r2, r6
 800e004:	d10a      	bne.n	800e01c <__gethex+0x3f0>
 800e006:	1171      	asrs	r1, r6, #5
 800e008:	2201      	movs	r2, #1
 800e00a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e00e:	f006 061f 	and.w	r6, r6, #31
 800e012:	fa02 f606 	lsl.w	r6, r2, r6
 800e016:	421e      	tst	r6, r3
 800e018:	bf18      	it	ne
 800e01a:	4617      	movne	r7, r2
 800e01c:	f047 0720 	orr.w	r7, r7, #32
 800e020:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e022:	601c      	str	r4, [r3, #0]
 800e024:	9b04      	ldr	r3, [sp, #16]
 800e026:	601d      	str	r5, [r3, #0]
 800e028:	e695      	b.n	800dd56 <__gethex+0x12a>
 800e02a:	4299      	cmp	r1, r3
 800e02c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e030:	d8d8      	bhi.n	800dfe4 <__gethex+0x3b8>
 800e032:	68a3      	ldr	r3, [r4, #8]
 800e034:	459b      	cmp	fp, r3
 800e036:	db19      	blt.n	800e06c <__gethex+0x440>
 800e038:	6861      	ldr	r1, [r4, #4]
 800e03a:	ee18 0a10 	vmov	r0, s16
 800e03e:	3101      	adds	r1, #1
 800e040:	f000 f92c 	bl	800e29c <_Balloc>
 800e044:	4681      	mov	r9, r0
 800e046:	b918      	cbnz	r0, 800e050 <__gethex+0x424>
 800e048:	4b1a      	ldr	r3, [pc, #104]	; (800e0b4 <__gethex+0x488>)
 800e04a:	4602      	mov	r2, r0
 800e04c:	2184      	movs	r1, #132	; 0x84
 800e04e:	e6a8      	b.n	800dda2 <__gethex+0x176>
 800e050:	6922      	ldr	r2, [r4, #16]
 800e052:	3202      	adds	r2, #2
 800e054:	f104 010c 	add.w	r1, r4, #12
 800e058:	0092      	lsls	r2, r2, #2
 800e05a:	300c      	adds	r0, #12
 800e05c:	f000 f904 	bl	800e268 <memcpy>
 800e060:	4621      	mov	r1, r4
 800e062:	ee18 0a10 	vmov	r0, s16
 800e066:	f000 f959 	bl	800e31c <_Bfree>
 800e06a:	464c      	mov	r4, r9
 800e06c:	6923      	ldr	r3, [r4, #16]
 800e06e:	1c5a      	adds	r2, r3, #1
 800e070:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e074:	6122      	str	r2, [r4, #16]
 800e076:	2201      	movs	r2, #1
 800e078:	615a      	str	r2, [r3, #20]
 800e07a:	e7bb      	b.n	800dff4 <__gethex+0x3c8>
 800e07c:	6922      	ldr	r2, [r4, #16]
 800e07e:	455a      	cmp	r2, fp
 800e080:	dd0b      	ble.n	800e09a <__gethex+0x46e>
 800e082:	2101      	movs	r1, #1
 800e084:	4620      	mov	r0, r4
 800e086:	f7ff fd69 	bl	800db5c <rshift>
 800e08a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e08e:	3501      	adds	r5, #1
 800e090:	42ab      	cmp	r3, r5
 800e092:	f6ff aed0 	blt.w	800de36 <__gethex+0x20a>
 800e096:	2701      	movs	r7, #1
 800e098:	e7c0      	b.n	800e01c <__gethex+0x3f0>
 800e09a:	f016 061f 	ands.w	r6, r6, #31
 800e09e:	d0fa      	beq.n	800e096 <__gethex+0x46a>
 800e0a0:	4453      	add	r3, sl
 800e0a2:	f1c6 0620 	rsb	r6, r6, #32
 800e0a6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e0aa:	f000 f9e9 	bl	800e480 <__hi0bits>
 800e0ae:	42b0      	cmp	r0, r6
 800e0b0:	dbe7      	blt.n	800e082 <__gethex+0x456>
 800e0b2:	e7f0      	b.n	800e096 <__gethex+0x46a>
 800e0b4:	080109c0 	.word	0x080109c0

0800e0b8 <L_shift>:
 800e0b8:	f1c2 0208 	rsb	r2, r2, #8
 800e0bc:	0092      	lsls	r2, r2, #2
 800e0be:	b570      	push	{r4, r5, r6, lr}
 800e0c0:	f1c2 0620 	rsb	r6, r2, #32
 800e0c4:	6843      	ldr	r3, [r0, #4]
 800e0c6:	6804      	ldr	r4, [r0, #0]
 800e0c8:	fa03 f506 	lsl.w	r5, r3, r6
 800e0cc:	432c      	orrs	r4, r5
 800e0ce:	40d3      	lsrs	r3, r2
 800e0d0:	6004      	str	r4, [r0, #0]
 800e0d2:	f840 3f04 	str.w	r3, [r0, #4]!
 800e0d6:	4288      	cmp	r0, r1
 800e0d8:	d3f4      	bcc.n	800e0c4 <L_shift+0xc>
 800e0da:	bd70      	pop	{r4, r5, r6, pc}

0800e0dc <__match>:
 800e0dc:	b530      	push	{r4, r5, lr}
 800e0de:	6803      	ldr	r3, [r0, #0]
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0e6:	b914      	cbnz	r4, 800e0ee <__match+0x12>
 800e0e8:	6003      	str	r3, [r0, #0]
 800e0ea:	2001      	movs	r0, #1
 800e0ec:	bd30      	pop	{r4, r5, pc}
 800e0ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e0f6:	2d19      	cmp	r5, #25
 800e0f8:	bf98      	it	ls
 800e0fa:	3220      	addls	r2, #32
 800e0fc:	42a2      	cmp	r2, r4
 800e0fe:	d0f0      	beq.n	800e0e2 <__match+0x6>
 800e100:	2000      	movs	r0, #0
 800e102:	e7f3      	b.n	800e0ec <__match+0x10>

0800e104 <__hexnan>:
 800e104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e108:	680b      	ldr	r3, [r1, #0]
 800e10a:	115e      	asrs	r6, r3, #5
 800e10c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e110:	f013 031f 	ands.w	r3, r3, #31
 800e114:	b087      	sub	sp, #28
 800e116:	bf18      	it	ne
 800e118:	3604      	addne	r6, #4
 800e11a:	2500      	movs	r5, #0
 800e11c:	1f37      	subs	r7, r6, #4
 800e11e:	4690      	mov	r8, r2
 800e120:	6802      	ldr	r2, [r0, #0]
 800e122:	9301      	str	r3, [sp, #4]
 800e124:	4682      	mov	sl, r0
 800e126:	f846 5c04 	str.w	r5, [r6, #-4]
 800e12a:	46b9      	mov	r9, r7
 800e12c:	463c      	mov	r4, r7
 800e12e:	9502      	str	r5, [sp, #8]
 800e130:	46ab      	mov	fp, r5
 800e132:	7851      	ldrb	r1, [r2, #1]
 800e134:	1c53      	adds	r3, r2, #1
 800e136:	9303      	str	r3, [sp, #12]
 800e138:	b341      	cbz	r1, 800e18c <__hexnan+0x88>
 800e13a:	4608      	mov	r0, r1
 800e13c:	9205      	str	r2, [sp, #20]
 800e13e:	9104      	str	r1, [sp, #16]
 800e140:	f7ff fd5e 	bl	800dc00 <__hexdig_fun>
 800e144:	2800      	cmp	r0, #0
 800e146:	d14f      	bne.n	800e1e8 <__hexnan+0xe4>
 800e148:	9904      	ldr	r1, [sp, #16]
 800e14a:	9a05      	ldr	r2, [sp, #20]
 800e14c:	2920      	cmp	r1, #32
 800e14e:	d818      	bhi.n	800e182 <__hexnan+0x7e>
 800e150:	9b02      	ldr	r3, [sp, #8]
 800e152:	459b      	cmp	fp, r3
 800e154:	dd13      	ble.n	800e17e <__hexnan+0x7a>
 800e156:	454c      	cmp	r4, r9
 800e158:	d206      	bcs.n	800e168 <__hexnan+0x64>
 800e15a:	2d07      	cmp	r5, #7
 800e15c:	dc04      	bgt.n	800e168 <__hexnan+0x64>
 800e15e:	462a      	mov	r2, r5
 800e160:	4649      	mov	r1, r9
 800e162:	4620      	mov	r0, r4
 800e164:	f7ff ffa8 	bl	800e0b8 <L_shift>
 800e168:	4544      	cmp	r4, r8
 800e16a:	d950      	bls.n	800e20e <__hexnan+0x10a>
 800e16c:	2300      	movs	r3, #0
 800e16e:	f1a4 0904 	sub.w	r9, r4, #4
 800e172:	f844 3c04 	str.w	r3, [r4, #-4]
 800e176:	f8cd b008 	str.w	fp, [sp, #8]
 800e17a:	464c      	mov	r4, r9
 800e17c:	461d      	mov	r5, r3
 800e17e:	9a03      	ldr	r2, [sp, #12]
 800e180:	e7d7      	b.n	800e132 <__hexnan+0x2e>
 800e182:	2929      	cmp	r1, #41	; 0x29
 800e184:	d156      	bne.n	800e234 <__hexnan+0x130>
 800e186:	3202      	adds	r2, #2
 800e188:	f8ca 2000 	str.w	r2, [sl]
 800e18c:	f1bb 0f00 	cmp.w	fp, #0
 800e190:	d050      	beq.n	800e234 <__hexnan+0x130>
 800e192:	454c      	cmp	r4, r9
 800e194:	d206      	bcs.n	800e1a4 <__hexnan+0xa0>
 800e196:	2d07      	cmp	r5, #7
 800e198:	dc04      	bgt.n	800e1a4 <__hexnan+0xa0>
 800e19a:	462a      	mov	r2, r5
 800e19c:	4649      	mov	r1, r9
 800e19e:	4620      	mov	r0, r4
 800e1a0:	f7ff ff8a 	bl	800e0b8 <L_shift>
 800e1a4:	4544      	cmp	r4, r8
 800e1a6:	d934      	bls.n	800e212 <__hexnan+0x10e>
 800e1a8:	f1a8 0204 	sub.w	r2, r8, #4
 800e1ac:	4623      	mov	r3, r4
 800e1ae:	f853 1b04 	ldr.w	r1, [r3], #4
 800e1b2:	f842 1f04 	str.w	r1, [r2, #4]!
 800e1b6:	429f      	cmp	r7, r3
 800e1b8:	d2f9      	bcs.n	800e1ae <__hexnan+0xaa>
 800e1ba:	1b3b      	subs	r3, r7, r4
 800e1bc:	f023 0303 	bic.w	r3, r3, #3
 800e1c0:	3304      	adds	r3, #4
 800e1c2:	3401      	adds	r4, #1
 800e1c4:	3e03      	subs	r6, #3
 800e1c6:	42b4      	cmp	r4, r6
 800e1c8:	bf88      	it	hi
 800e1ca:	2304      	movhi	r3, #4
 800e1cc:	4443      	add	r3, r8
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f843 2b04 	str.w	r2, [r3], #4
 800e1d4:	429f      	cmp	r7, r3
 800e1d6:	d2fb      	bcs.n	800e1d0 <__hexnan+0xcc>
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	b91b      	cbnz	r3, 800e1e4 <__hexnan+0xe0>
 800e1dc:	4547      	cmp	r7, r8
 800e1de:	d127      	bne.n	800e230 <__hexnan+0x12c>
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	603b      	str	r3, [r7, #0]
 800e1e4:	2005      	movs	r0, #5
 800e1e6:	e026      	b.n	800e236 <__hexnan+0x132>
 800e1e8:	3501      	adds	r5, #1
 800e1ea:	2d08      	cmp	r5, #8
 800e1ec:	f10b 0b01 	add.w	fp, fp, #1
 800e1f0:	dd06      	ble.n	800e200 <__hexnan+0xfc>
 800e1f2:	4544      	cmp	r4, r8
 800e1f4:	d9c3      	bls.n	800e17e <__hexnan+0x7a>
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e1fc:	2501      	movs	r5, #1
 800e1fe:	3c04      	subs	r4, #4
 800e200:	6822      	ldr	r2, [r4, #0]
 800e202:	f000 000f 	and.w	r0, r0, #15
 800e206:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e20a:	6022      	str	r2, [r4, #0]
 800e20c:	e7b7      	b.n	800e17e <__hexnan+0x7a>
 800e20e:	2508      	movs	r5, #8
 800e210:	e7b5      	b.n	800e17e <__hexnan+0x7a>
 800e212:	9b01      	ldr	r3, [sp, #4]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d0df      	beq.n	800e1d8 <__hexnan+0xd4>
 800e218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e21c:	f1c3 0320 	rsb	r3, r3, #32
 800e220:	fa22 f303 	lsr.w	r3, r2, r3
 800e224:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e228:	401a      	ands	r2, r3
 800e22a:	f846 2c04 	str.w	r2, [r6, #-4]
 800e22e:	e7d3      	b.n	800e1d8 <__hexnan+0xd4>
 800e230:	3f04      	subs	r7, #4
 800e232:	e7d1      	b.n	800e1d8 <__hexnan+0xd4>
 800e234:	2004      	movs	r0, #4
 800e236:	b007      	add	sp, #28
 800e238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e23c <_localeconv_r>:
 800e23c:	4800      	ldr	r0, [pc, #0]	; (800e240 <_localeconv_r+0x4>)
 800e23e:	4770      	bx	lr
 800e240:	20000388 	.word	0x20000388

0800e244 <__ascii_mbtowc>:
 800e244:	b082      	sub	sp, #8
 800e246:	b901      	cbnz	r1, 800e24a <__ascii_mbtowc+0x6>
 800e248:	a901      	add	r1, sp, #4
 800e24a:	b142      	cbz	r2, 800e25e <__ascii_mbtowc+0x1a>
 800e24c:	b14b      	cbz	r3, 800e262 <__ascii_mbtowc+0x1e>
 800e24e:	7813      	ldrb	r3, [r2, #0]
 800e250:	600b      	str	r3, [r1, #0]
 800e252:	7812      	ldrb	r2, [r2, #0]
 800e254:	1e10      	subs	r0, r2, #0
 800e256:	bf18      	it	ne
 800e258:	2001      	movne	r0, #1
 800e25a:	b002      	add	sp, #8
 800e25c:	4770      	bx	lr
 800e25e:	4610      	mov	r0, r2
 800e260:	e7fb      	b.n	800e25a <__ascii_mbtowc+0x16>
 800e262:	f06f 0001 	mvn.w	r0, #1
 800e266:	e7f8      	b.n	800e25a <__ascii_mbtowc+0x16>

0800e268 <memcpy>:
 800e268:	440a      	add	r2, r1
 800e26a:	4291      	cmp	r1, r2
 800e26c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e270:	d100      	bne.n	800e274 <memcpy+0xc>
 800e272:	4770      	bx	lr
 800e274:	b510      	push	{r4, lr}
 800e276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e27a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e27e:	4291      	cmp	r1, r2
 800e280:	d1f9      	bne.n	800e276 <memcpy+0xe>
 800e282:	bd10      	pop	{r4, pc}

0800e284 <__malloc_lock>:
 800e284:	4801      	ldr	r0, [pc, #4]	; (800e28c <__malloc_lock+0x8>)
 800e286:	f000 be96 	b.w	800efb6 <__retarget_lock_acquire_recursive>
 800e28a:	bf00      	nop
 800e28c:	200027a0 	.word	0x200027a0

0800e290 <__malloc_unlock>:
 800e290:	4801      	ldr	r0, [pc, #4]	; (800e298 <__malloc_unlock+0x8>)
 800e292:	f000 be91 	b.w	800efb8 <__retarget_lock_release_recursive>
 800e296:	bf00      	nop
 800e298:	200027a0 	.word	0x200027a0

0800e29c <_Balloc>:
 800e29c:	b570      	push	{r4, r5, r6, lr}
 800e29e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e2a0:	4604      	mov	r4, r0
 800e2a2:	460d      	mov	r5, r1
 800e2a4:	b976      	cbnz	r6, 800e2c4 <_Balloc+0x28>
 800e2a6:	2010      	movs	r0, #16
 800e2a8:	f7fc ff90 	bl	800b1cc <malloc>
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	6260      	str	r0, [r4, #36]	; 0x24
 800e2b0:	b920      	cbnz	r0, 800e2bc <_Balloc+0x20>
 800e2b2:	4b18      	ldr	r3, [pc, #96]	; (800e314 <_Balloc+0x78>)
 800e2b4:	4818      	ldr	r0, [pc, #96]	; (800e318 <_Balloc+0x7c>)
 800e2b6:	2166      	movs	r1, #102	; 0x66
 800e2b8:	f000 fe4c 	bl	800ef54 <__assert_func>
 800e2bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2c0:	6006      	str	r6, [r0, #0]
 800e2c2:	60c6      	str	r6, [r0, #12]
 800e2c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e2c6:	68f3      	ldr	r3, [r6, #12]
 800e2c8:	b183      	cbz	r3, 800e2ec <_Balloc+0x50>
 800e2ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2cc:	68db      	ldr	r3, [r3, #12]
 800e2ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e2d2:	b9b8      	cbnz	r0, 800e304 <_Balloc+0x68>
 800e2d4:	2101      	movs	r1, #1
 800e2d6:	fa01 f605 	lsl.w	r6, r1, r5
 800e2da:	1d72      	adds	r2, r6, #5
 800e2dc:	0092      	lsls	r2, r2, #2
 800e2de:	4620      	mov	r0, r4
 800e2e0:	f000 fc9d 	bl	800ec1e <_calloc_r>
 800e2e4:	b160      	cbz	r0, 800e300 <_Balloc+0x64>
 800e2e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e2ea:	e00e      	b.n	800e30a <_Balloc+0x6e>
 800e2ec:	2221      	movs	r2, #33	; 0x21
 800e2ee:	2104      	movs	r1, #4
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	f000 fc94 	bl	800ec1e <_calloc_r>
 800e2f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2f8:	60f0      	str	r0, [r6, #12]
 800e2fa:	68db      	ldr	r3, [r3, #12]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d1e4      	bne.n	800e2ca <_Balloc+0x2e>
 800e300:	2000      	movs	r0, #0
 800e302:	bd70      	pop	{r4, r5, r6, pc}
 800e304:	6802      	ldr	r2, [r0, #0]
 800e306:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e30a:	2300      	movs	r3, #0
 800e30c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e310:	e7f7      	b.n	800e302 <_Balloc+0x66>
 800e312:	bf00      	nop
 800e314:	0801094e 	.word	0x0801094e
 800e318:	08010a4c 	.word	0x08010a4c

0800e31c <_Bfree>:
 800e31c:	b570      	push	{r4, r5, r6, lr}
 800e31e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e320:	4605      	mov	r5, r0
 800e322:	460c      	mov	r4, r1
 800e324:	b976      	cbnz	r6, 800e344 <_Bfree+0x28>
 800e326:	2010      	movs	r0, #16
 800e328:	f7fc ff50 	bl	800b1cc <malloc>
 800e32c:	4602      	mov	r2, r0
 800e32e:	6268      	str	r0, [r5, #36]	; 0x24
 800e330:	b920      	cbnz	r0, 800e33c <_Bfree+0x20>
 800e332:	4b09      	ldr	r3, [pc, #36]	; (800e358 <_Bfree+0x3c>)
 800e334:	4809      	ldr	r0, [pc, #36]	; (800e35c <_Bfree+0x40>)
 800e336:	218a      	movs	r1, #138	; 0x8a
 800e338:	f000 fe0c 	bl	800ef54 <__assert_func>
 800e33c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e340:	6006      	str	r6, [r0, #0]
 800e342:	60c6      	str	r6, [r0, #12]
 800e344:	b13c      	cbz	r4, 800e356 <_Bfree+0x3a>
 800e346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e348:	6862      	ldr	r2, [r4, #4]
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e350:	6021      	str	r1, [r4, #0]
 800e352:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e356:	bd70      	pop	{r4, r5, r6, pc}
 800e358:	0801094e 	.word	0x0801094e
 800e35c:	08010a4c 	.word	0x08010a4c

0800e360 <__multadd>:
 800e360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e364:	690d      	ldr	r5, [r1, #16]
 800e366:	4607      	mov	r7, r0
 800e368:	460c      	mov	r4, r1
 800e36a:	461e      	mov	r6, r3
 800e36c:	f101 0c14 	add.w	ip, r1, #20
 800e370:	2000      	movs	r0, #0
 800e372:	f8dc 3000 	ldr.w	r3, [ip]
 800e376:	b299      	uxth	r1, r3
 800e378:	fb02 6101 	mla	r1, r2, r1, r6
 800e37c:	0c1e      	lsrs	r6, r3, #16
 800e37e:	0c0b      	lsrs	r3, r1, #16
 800e380:	fb02 3306 	mla	r3, r2, r6, r3
 800e384:	b289      	uxth	r1, r1
 800e386:	3001      	adds	r0, #1
 800e388:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e38c:	4285      	cmp	r5, r0
 800e38e:	f84c 1b04 	str.w	r1, [ip], #4
 800e392:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e396:	dcec      	bgt.n	800e372 <__multadd+0x12>
 800e398:	b30e      	cbz	r6, 800e3de <__multadd+0x7e>
 800e39a:	68a3      	ldr	r3, [r4, #8]
 800e39c:	42ab      	cmp	r3, r5
 800e39e:	dc19      	bgt.n	800e3d4 <__multadd+0x74>
 800e3a0:	6861      	ldr	r1, [r4, #4]
 800e3a2:	4638      	mov	r0, r7
 800e3a4:	3101      	adds	r1, #1
 800e3a6:	f7ff ff79 	bl	800e29c <_Balloc>
 800e3aa:	4680      	mov	r8, r0
 800e3ac:	b928      	cbnz	r0, 800e3ba <__multadd+0x5a>
 800e3ae:	4602      	mov	r2, r0
 800e3b0:	4b0c      	ldr	r3, [pc, #48]	; (800e3e4 <__multadd+0x84>)
 800e3b2:	480d      	ldr	r0, [pc, #52]	; (800e3e8 <__multadd+0x88>)
 800e3b4:	21b5      	movs	r1, #181	; 0xb5
 800e3b6:	f000 fdcd 	bl	800ef54 <__assert_func>
 800e3ba:	6922      	ldr	r2, [r4, #16]
 800e3bc:	3202      	adds	r2, #2
 800e3be:	f104 010c 	add.w	r1, r4, #12
 800e3c2:	0092      	lsls	r2, r2, #2
 800e3c4:	300c      	adds	r0, #12
 800e3c6:	f7ff ff4f 	bl	800e268 <memcpy>
 800e3ca:	4621      	mov	r1, r4
 800e3cc:	4638      	mov	r0, r7
 800e3ce:	f7ff ffa5 	bl	800e31c <_Bfree>
 800e3d2:	4644      	mov	r4, r8
 800e3d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e3d8:	3501      	adds	r5, #1
 800e3da:	615e      	str	r6, [r3, #20]
 800e3dc:	6125      	str	r5, [r4, #16]
 800e3de:	4620      	mov	r0, r4
 800e3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3e4:	080109c0 	.word	0x080109c0
 800e3e8:	08010a4c 	.word	0x08010a4c

0800e3ec <__s2b>:
 800e3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3f0:	460c      	mov	r4, r1
 800e3f2:	4615      	mov	r5, r2
 800e3f4:	461f      	mov	r7, r3
 800e3f6:	2209      	movs	r2, #9
 800e3f8:	3308      	adds	r3, #8
 800e3fa:	4606      	mov	r6, r0
 800e3fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800e400:	2100      	movs	r1, #0
 800e402:	2201      	movs	r2, #1
 800e404:	429a      	cmp	r2, r3
 800e406:	db09      	blt.n	800e41c <__s2b+0x30>
 800e408:	4630      	mov	r0, r6
 800e40a:	f7ff ff47 	bl	800e29c <_Balloc>
 800e40e:	b940      	cbnz	r0, 800e422 <__s2b+0x36>
 800e410:	4602      	mov	r2, r0
 800e412:	4b19      	ldr	r3, [pc, #100]	; (800e478 <__s2b+0x8c>)
 800e414:	4819      	ldr	r0, [pc, #100]	; (800e47c <__s2b+0x90>)
 800e416:	21ce      	movs	r1, #206	; 0xce
 800e418:	f000 fd9c 	bl	800ef54 <__assert_func>
 800e41c:	0052      	lsls	r2, r2, #1
 800e41e:	3101      	adds	r1, #1
 800e420:	e7f0      	b.n	800e404 <__s2b+0x18>
 800e422:	9b08      	ldr	r3, [sp, #32]
 800e424:	6143      	str	r3, [r0, #20]
 800e426:	2d09      	cmp	r5, #9
 800e428:	f04f 0301 	mov.w	r3, #1
 800e42c:	6103      	str	r3, [r0, #16]
 800e42e:	dd16      	ble.n	800e45e <__s2b+0x72>
 800e430:	f104 0909 	add.w	r9, r4, #9
 800e434:	46c8      	mov	r8, r9
 800e436:	442c      	add	r4, r5
 800e438:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e43c:	4601      	mov	r1, r0
 800e43e:	3b30      	subs	r3, #48	; 0x30
 800e440:	220a      	movs	r2, #10
 800e442:	4630      	mov	r0, r6
 800e444:	f7ff ff8c 	bl	800e360 <__multadd>
 800e448:	45a0      	cmp	r8, r4
 800e44a:	d1f5      	bne.n	800e438 <__s2b+0x4c>
 800e44c:	f1a5 0408 	sub.w	r4, r5, #8
 800e450:	444c      	add	r4, r9
 800e452:	1b2d      	subs	r5, r5, r4
 800e454:	1963      	adds	r3, r4, r5
 800e456:	42bb      	cmp	r3, r7
 800e458:	db04      	blt.n	800e464 <__s2b+0x78>
 800e45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e45e:	340a      	adds	r4, #10
 800e460:	2509      	movs	r5, #9
 800e462:	e7f6      	b.n	800e452 <__s2b+0x66>
 800e464:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e468:	4601      	mov	r1, r0
 800e46a:	3b30      	subs	r3, #48	; 0x30
 800e46c:	220a      	movs	r2, #10
 800e46e:	4630      	mov	r0, r6
 800e470:	f7ff ff76 	bl	800e360 <__multadd>
 800e474:	e7ee      	b.n	800e454 <__s2b+0x68>
 800e476:	bf00      	nop
 800e478:	080109c0 	.word	0x080109c0
 800e47c:	08010a4c 	.word	0x08010a4c

0800e480 <__hi0bits>:
 800e480:	0c03      	lsrs	r3, r0, #16
 800e482:	041b      	lsls	r3, r3, #16
 800e484:	b9d3      	cbnz	r3, 800e4bc <__hi0bits+0x3c>
 800e486:	0400      	lsls	r0, r0, #16
 800e488:	2310      	movs	r3, #16
 800e48a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e48e:	bf04      	itt	eq
 800e490:	0200      	lsleq	r0, r0, #8
 800e492:	3308      	addeq	r3, #8
 800e494:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e498:	bf04      	itt	eq
 800e49a:	0100      	lsleq	r0, r0, #4
 800e49c:	3304      	addeq	r3, #4
 800e49e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e4a2:	bf04      	itt	eq
 800e4a4:	0080      	lsleq	r0, r0, #2
 800e4a6:	3302      	addeq	r3, #2
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	db05      	blt.n	800e4b8 <__hi0bits+0x38>
 800e4ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e4b0:	f103 0301 	add.w	r3, r3, #1
 800e4b4:	bf08      	it	eq
 800e4b6:	2320      	moveq	r3, #32
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	4770      	bx	lr
 800e4bc:	2300      	movs	r3, #0
 800e4be:	e7e4      	b.n	800e48a <__hi0bits+0xa>

0800e4c0 <__lo0bits>:
 800e4c0:	6803      	ldr	r3, [r0, #0]
 800e4c2:	f013 0207 	ands.w	r2, r3, #7
 800e4c6:	4601      	mov	r1, r0
 800e4c8:	d00b      	beq.n	800e4e2 <__lo0bits+0x22>
 800e4ca:	07da      	lsls	r2, r3, #31
 800e4cc:	d423      	bmi.n	800e516 <__lo0bits+0x56>
 800e4ce:	0798      	lsls	r0, r3, #30
 800e4d0:	bf49      	itett	mi
 800e4d2:	085b      	lsrmi	r3, r3, #1
 800e4d4:	089b      	lsrpl	r3, r3, #2
 800e4d6:	2001      	movmi	r0, #1
 800e4d8:	600b      	strmi	r3, [r1, #0]
 800e4da:	bf5c      	itt	pl
 800e4dc:	600b      	strpl	r3, [r1, #0]
 800e4de:	2002      	movpl	r0, #2
 800e4e0:	4770      	bx	lr
 800e4e2:	b298      	uxth	r0, r3
 800e4e4:	b9a8      	cbnz	r0, 800e512 <__lo0bits+0x52>
 800e4e6:	0c1b      	lsrs	r3, r3, #16
 800e4e8:	2010      	movs	r0, #16
 800e4ea:	b2da      	uxtb	r2, r3
 800e4ec:	b90a      	cbnz	r2, 800e4f2 <__lo0bits+0x32>
 800e4ee:	3008      	adds	r0, #8
 800e4f0:	0a1b      	lsrs	r3, r3, #8
 800e4f2:	071a      	lsls	r2, r3, #28
 800e4f4:	bf04      	itt	eq
 800e4f6:	091b      	lsreq	r3, r3, #4
 800e4f8:	3004      	addeq	r0, #4
 800e4fa:	079a      	lsls	r2, r3, #30
 800e4fc:	bf04      	itt	eq
 800e4fe:	089b      	lsreq	r3, r3, #2
 800e500:	3002      	addeq	r0, #2
 800e502:	07da      	lsls	r2, r3, #31
 800e504:	d403      	bmi.n	800e50e <__lo0bits+0x4e>
 800e506:	085b      	lsrs	r3, r3, #1
 800e508:	f100 0001 	add.w	r0, r0, #1
 800e50c:	d005      	beq.n	800e51a <__lo0bits+0x5a>
 800e50e:	600b      	str	r3, [r1, #0]
 800e510:	4770      	bx	lr
 800e512:	4610      	mov	r0, r2
 800e514:	e7e9      	b.n	800e4ea <__lo0bits+0x2a>
 800e516:	2000      	movs	r0, #0
 800e518:	4770      	bx	lr
 800e51a:	2020      	movs	r0, #32
 800e51c:	4770      	bx	lr
	...

0800e520 <__i2b>:
 800e520:	b510      	push	{r4, lr}
 800e522:	460c      	mov	r4, r1
 800e524:	2101      	movs	r1, #1
 800e526:	f7ff feb9 	bl	800e29c <_Balloc>
 800e52a:	4602      	mov	r2, r0
 800e52c:	b928      	cbnz	r0, 800e53a <__i2b+0x1a>
 800e52e:	4b05      	ldr	r3, [pc, #20]	; (800e544 <__i2b+0x24>)
 800e530:	4805      	ldr	r0, [pc, #20]	; (800e548 <__i2b+0x28>)
 800e532:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e536:	f000 fd0d 	bl	800ef54 <__assert_func>
 800e53a:	2301      	movs	r3, #1
 800e53c:	6144      	str	r4, [r0, #20]
 800e53e:	6103      	str	r3, [r0, #16]
 800e540:	bd10      	pop	{r4, pc}
 800e542:	bf00      	nop
 800e544:	080109c0 	.word	0x080109c0
 800e548:	08010a4c 	.word	0x08010a4c

0800e54c <__multiply>:
 800e54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e550:	4691      	mov	r9, r2
 800e552:	690a      	ldr	r2, [r1, #16]
 800e554:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e558:	429a      	cmp	r2, r3
 800e55a:	bfb8      	it	lt
 800e55c:	460b      	movlt	r3, r1
 800e55e:	460c      	mov	r4, r1
 800e560:	bfbc      	itt	lt
 800e562:	464c      	movlt	r4, r9
 800e564:	4699      	movlt	r9, r3
 800e566:	6927      	ldr	r7, [r4, #16]
 800e568:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e56c:	68a3      	ldr	r3, [r4, #8]
 800e56e:	6861      	ldr	r1, [r4, #4]
 800e570:	eb07 060a 	add.w	r6, r7, sl
 800e574:	42b3      	cmp	r3, r6
 800e576:	b085      	sub	sp, #20
 800e578:	bfb8      	it	lt
 800e57a:	3101      	addlt	r1, #1
 800e57c:	f7ff fe8e 	bl	800e29c <_Balloc>
 800e580:	b930      	cbnz	r0, 800e590 <__multiply+0x44>
 800e582:	4602      	mov	r2, r0
 800e584:	4b44      	ldr	r3, [pc, #272]	; (800e698 <__multiply+0x14c>)
 800e586:	4845      	ldr	r0, [pc, #276]	; (800e69c <__multiply+0x150>)
 800e588:	f240 115d 	movw	r1, #349	; 0x15d
 800e58c:	f000 fce2 	bl	800ef54 <__assert_func>
 800e590:	f100 0514 	add.w	r5, r0, #20
 800e594:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e598:	462b      	mov	r3, r5
 800e59a:	2200      	movs	r2, #0
 800e59c:	4543      	cmp	r3, r8
 800e59e:	d321      	bcc.n	800e5e4 <__multiply+0x98>
 800e5a0:	f104 0314 	add.w	r3, r4, #20
 800e5a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e5a8:	f109 0314 	add.w	r3, r9, #20
 800e5ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e5b0:	9202      	str	r2, [sp, #8]
 800e5b2:	1b3a      	subs	r2, r7, r4
 800e5b4:	3a15      	subs	r2, #21
 800e5b6:	f022 0203 	bic.w	r2, r2, #3
 800e5ba:	3204      	adds	r2, #4
 800e5bc:	f104 0115 	add.w	r1, r4, #21
 800e5c0:	428f      	cmp	r7, r1
 800e5c2:	bf38      	it	cc
 800e5c4:	2204      	movcc	r2, #4
 800e5c6:	9201      	str	r2, [sp, #4]
 800e5c8:	9a02      	ldr	r2, [sp, #8]
 800e5ca:	9303      	str	r3, [sp, #12]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d80c      	bhi.n	800e5ea <__multiply+0x9e>
 800e5d0:	2e00      	cmp	r6, #0
 800e5d2:	dd03      	ble.n	800e5dc <__multiply+0x90>
 800e5d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d05a      	beq.n	800e692 <__multiply+0x146>
 800e5dc:	6106      	str	r6, [r0, #16]
 800e5de:	b005      	add	sp, #20
 800e5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5e4:	f843 2b04 	str.w	r2, [r3], #4
 800e5e8:	e7d8      	b.n	800e59c <__multiply+0x50>
 800e5ea:	f8b3 a000 	ldrh.w	sl, [r3]
 800e5ee:	f1ba 0f00 	cmp.w	sl, #0
 800e5f2:	d024      	beq.n	800e63e <__multiply+0xf2>
 800e5f4:	f104 0e14 	add.w	lr, r4, #20
 800e5f8:	46a9      	mov	r9, r5
 800e5fa:	f04f 0c00 	mov.w	ip, #0
 800e5fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e602:	f8d9 1000 	ldr.w	r1, [r9]
 800e606:	fa1f fb82 	uxth.w	fp, r2
 800e60a:	b289      	uxth	r1, r1
 800e60c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e610:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e614:	f8d9 2000 	ldr.w	r2, [r9]
 800e618:	4461      	add	r1, ip
 800e61a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e61e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e622:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e626:	b289      	uxth	r1, r1
 800e628:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e62c:	4577      	cmp	r7, lr
 800e62e:	f849 1b04 	str.w	r1, [r9], #4
 800e632:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e636:	d8e2      	bhi.n	800e5fe <__multiply+0xb2>
 800e638:	9a01      	ldr	r2, [sp, #4]
 800e63a:	f845 c002 	str.w	ip, [r5, r2]
 800e63e:	9a03      	ldr	r2, [sp, #12]
 800e640:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e644:	3304      	adds	r3, #4
 800e646:	f1b9 0f00 	cmp.w	r9, #0
 800e64a:	d020      	beq.n	800e68e <__multiply+0x142>
 800e64c:	6829      	ldr	r1, [r5, #0]
 800e64e:	f104 0c14 	add.w	ip, r4, #20
 800e652:	46ae      	mov	lr, r5
 800e654:	f04f 0a00 	mov.w	sl, #0
 800e658:	f8bc b000 	ldrh.w	fp, [ip]
 800e65c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e660:	fb09 220b 	mla	r2, r9, fp, r2
 800e664:	4492      	add	sl, r2
 800e666:	b289      	uxth	r1, r1
 800e668:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e66c:	f84e 1b04 	str.w	r1, [lr], #4
 800e670:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e674:	f8be 1000 	ldrh.w	r1, [lr]
 800e678:	0c12      	lsrs	r2, r2, #16
 800e67a:	fb09 1102 	mla	r1, r9, r2, r1
 800e67e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e682:	4567      	cmp	r7, ip
 800e684:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e688:	d8e6      	bhi.n	800e658 <__multiply+0x10c>
 800e68a:	9a01      	ldr	r2, [sp, #4]
 800e68c:	50a9      	str	r1, [r5, r2]
 800e68e:	3504      	adds	r5, #4
 800e690:	e79a      	b.n	800e5c8 <__multiply+0x7c>
 800e692:	3e01      	subs	r6, #1
 800e694:	e79c      	b.n	800e5d0 <__multiply+0x84>
 800e696:	bf00      	nop
 800e698:	080109c0 	.word	0x080109c0
 800e69c:	08010a4c 	.word	0x08010a4c

0800e6a0 <__pow5mult>:
 800e6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6a4:	4615      	mov	r5, r2
 800e6a6:	f012 0203 	ands.w	r2, r2, #3
 800e6aa:	4606      	mov	r6, r0
 800e6ac:	460f      	mov	r7, r1
 800e6ae:	d007      	beq.n	800e6c0 <__pow5mult+0x20>
 800e6b0:	4c25      	ldr	r4, [pc, #148]	; (800e748 <__pow5mult+0xa8>)
 800e6b2:	3a01      	subs	r2, #1
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e6ba:	f7ff fe51 	bl	800e360 <__multadd>
 800e6be:	4607      	mov	r7, r0
 800e6c0:	10ad      	asrs	r5, r5, #2
 800e6c2:	d03d      	beq.n	800e740 <__pow5mult+0xa0>
 800e6c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e6c6:	b97c      	cbnz	r4, 800e6e8 <__pow5mult+0x48>
 800e6c8:	2010      	movs	r0, #16
 800e6ca:	f7fc fd7f 	bl	800b1cc <malloc>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	6270      	str	r0, [r6, #36]	; 0x24
 800e6d2:	b928      	cbnz	r0, 800e6e0 <__pow5mult+0x40>
 800e6d4:	4b1d      	ldr	r3, [pc, #116]	; (800e74c <__pow5mult+0xac>)
 800e6d6:	481e      	ldr	r0, [pc, #120]	; (800e750 <__pow5mult+0xb0>)
 800e6d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e6dc:	f000 fc3a 	bl	800ef54 <__assert_func>
 800e6e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e6e4:	6004      	str	r4, [r0, #0]
 800e6e6:	60c4      	str	r4, [r0, #12]
 800e6e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e6ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e6f0:	b94c      	cbnz	r4, 800e706 <__pow5mult+0x66>
 800e6f2:	f240 2171 	movw	r1, #625	; 0x271
 800e6f6:	4630      	mov	r0, r6
 800e6f8:	f7ff ff12 	bl	800e520 <__i2b>
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800e702:	4604      	mov	r4, r0
 800e704:	6003      	str	r3, [r0, #0]
 800e706:	f04f 0900 	mov.w	r9, #0
 800e70a:	07eb      	lsls	r3, r5, #31
 800e70c:	d50a      	bpl.n	800e724 <__pow5mult+0x84>
 800e70e:	4639      	mov	r1, r7
 800e710:	4622      	mov	r2, r4
 800e712:	4630      	mov	r0, r6
 800e714:	f7ff ff1a 	bl	800e54c <__multiply>
 800e718:	4639      	mov	r1, r7
 800e71a:	4680      	mov	r8, r0
 800e71c:	4630      	mov	r0, r6
 800e71e:	f7ff fdfd 	bl	800e31c <_Bfree>
 800e722:	4647      	mov	r7, r8
 800e724:	106d      	asrs	r5, r5, #1
 800e726:	d00b      	beq.n	800e740 <__pow5mult+0xa0>
 800e728:	6820      	ldr	r0, [r4, #0]
 800e72a:	b938      	cbnz	r0, 800e73c <__pow5mult+0x9c>
 800e72c:	4622      	mov	r2, r4
 800e72e:	4621      	mov	r1, r4
 800e730:	4630      	mov	r0, r6
 800e732:	f7ff ff0b 	bl	800e54c <__multiply>
 800e736:	6020      	str	r0, [r4, #0]
 800e738:	f8c0 9000 	str.w	r9, [r0]
 800e73c:	4604      	mov	r4, r0
 800e73e:	e7e4      	b.n	800e70a <__pow5mult+0x6a>
 800e740:	4638      	mov	r0, r7
 800e742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e746:	bf00      	nop
 800e748:	08010b98 	.word	0x08010b98
 800e74c:	0801094e 	.word	0x0801094e
 800e750:	08010a4c 	.word	0x08010a4c

0800e754 <__lshift>:
 800e754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e758:	460c      	mov	r4, r1
 800e75a:	6849      	ldr	r1, [r1, #4]
 800e75c:	6923      	ldr	r3, [r4, #16]
 800e75e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e762:	68a3      	ldr	r3, [r4, #8]
 800e764:	4607      	mov	r7, r0
 800e766:	4691      	mov	r9, r2
 800e768:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e76c:	f108 0601 	add.w	r6, r8, #1
 800e770:	42b3      	cmp	r3, r6
 800e772:	db0b      	blt.n	800e78c <__lshift+0x38>
 800e774:	4638      	mov	r0, r7
 800e776:	f7ff fd91 	bl	800e29c <_Balloc>
 800e77a:	4605      	mov	r5, r0
 800e77c:	b948      	cbnz	r0, 800e792 <__lshift+0x3e>
 800e77e:	4602      	mov	r2, r0
 800e780:	4b2a      	ldr	r3, [pc, #168]	; (800e82c <__lshift+0xd8>)
 800e782:	482b      	ldr	r0, [pc, #172]	; (800e830 <__lshift+0xdc>)
 800e784:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e788:	f000 fbe4 	bl	800ef54 <__assert_func>
 800e78c:	3101      	adds	r1, #1
 800e78e:	005b      	lsls	r3, r3, #1
 800e790:	e7ee      	b.n	800e770 <__lshift+0x1c>
 800e792:	2300      	movs	r3, #0
 800e794:	f100 0114 	add.w	r1, r0, #20
 800e798:	f100 0210 	add.w	r2, r0, #16
 800e79c:	4618      	mov	r0, r3
 800e79e:	4553      	cmp	r3, sl
 800e7a0:	db37      	blt.n	800e812 <__lshift+0xbe>
 800e7a2:	6920      	ldr	r0, [r4, #16]
 800e7a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e7a8:	f104 0314 	add.w	r3, r4, #20
 800e7ac:	f019 091f 	ands.w	r9, r9, #31
 800e7b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e7b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e7b8:	d02f      	beq.n	800e81a <__lshift+0xc6>
 800e7ba:	f1c9 0e20 	rsb	lr, r9, #32
 800e7be:	468a      	mov	sl, r1
 800e7c0:	f04f 0c00 	mov.w	ip, #0
 800e7c4:	681a      	ldr	r2, [r3, #0]
 800e7c6:	fa02 f209 	lsl.w	r2, r2, r9
 800e7ca:	ea42 020c 	orr.w	r2, r2, ip
 800e7ce:	f84a 2b04 	str.w	r2, [sl], #4
 800e7d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7d6:	4298      	cmp	r0, r3
 800e7d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e7dc:	d8f2      	bhi.n	800e7c4 <__lshift+0x70>
 800e7de:	1b03      	subs	r3, r0, r4
 800e7e0:	3b15      	subs	r3, #21
 800e7e2:	f023 0303 	bic.w	r3, r3, #3
 800e7e6:	3304      	adds	r3, #4
 800e7e8:	f104 0215 	add.w	r2, r4, #21
 800e7ec:	4290      	cmp	r0, r2
 800e7ee:	bf38      	it	cc
 800e7f0:	2304      	movcc	r3, #4
 800e7f2:	f841 c003 	str.w	ip, [r1, r3]
 800e7f6:	f1bc 0f00 	cmp.w	ip, #0
 800e7fa:	d001      	beq.n	800e800 <__lshift+0xac>
 800e7fc:	f108 0602 	add.w	r6, r8, #2
 800e800:	3e01      	subs	r6, #1
 800e802:	4638      	mov	r0, r7
 800e804:	612e      	str	r6, [r5, #16]
 800e806:	4621      	mov	r1, r4
 800e808:	f7ff fd88 	bl	800e31c <_Bfree>
 800e80c:	4628      	mov	r0, r5
 800e80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e812:	f842 0f04 	str.w	r0, [r2, #4]!
 800e816:	3301      	adds	r3, #1
 800e818:	e7c1      	b.n	800e79e <__lshift+0x4a>
 800e81a:	3904      	subs	r1, #4
 800e81c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e820:	f841 2f04 	str.w	r2, [r1, #4]!
 800e824:	4298      	cmp	r0, r3
 800e826:	d8f9      	bhi.n	800e81c <__lshift+0xc8>
 800e828:	e7ea      	b.n	800e800 <__lshift+0xac>
 800e82a:	bf00      	nop
 800e82c:	080109c0 	.word	0x080109c0
 800e830:	08010a4c 	.word	0x08010a4c

0800e834 <__mcmp>:
 800e834:	b530      	push	{r4, r5, lr}
 800e836:	6902      	ldr	r2, [r0, #16]
 800e838:	690c      	ldr	r4, [r1, #16]
 800e83a:	1b12      	subs	r2, r2, r4
 800e83c:	d10e      	bne.n	800e85c <__mcmp+0x28>
 800e83e:	f100 0314 	add.w	r3, r0, #20
 800e842:	3114      	adds	r1, #20
 800e844:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e848:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e84c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e850:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e854:	42a5      	cmp	r5, r4
 800e856:	d003      	beq.n	800e860 <__mcmp+0x2c>
 800e858:	d305      	bcc.n	800e866 <__mcmp+0x32>
 800e85a:	2201      	movs	r2, #1
 800e85c:	4610      	mov	r0, r2
 800e85e:	bd30      	pop	{r4, r5, pc}
 800e860:	4283      	cmp	r3, r0
 800e862:	d3f3      	bcc.n	800e84c <__mcmp+0x18>
 800e864:	e7fa      	b.n	800e85c <__mcmp+0x28>
 800e866:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e86a:	e7f7      	b.n	800e85c <__mcmp+0x28>

0800e86c <__mdiff>:
 800e86c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e870:	460c      	mov	r4, r1
 800e872:	4606      	mov	r6, r0
 800e874:	4611      	mov	r1, r2
 800e876:	4620      	mov	r0, r4
 800e878:	4690      	mov	r8, r2
 800e87a:	f7ff ffdb 	bl	800e834 <__mcmp>
 800e87e:	1e05      	subs	r5, r0, #0
 800e880:	d110      	bne.n	800e8a4 <__mdiff+0x38>
 800e882:	4629      	mov	r1, r5
 800e884:	4630      	mov	r0, r6
 800e886:	f7ff fd09 	bl	800e29c <_Balloc>
 800e88a:	b930      	cbnz	r0, 800e89a <__mdiff+0x2e>
 800e88c:	4b3a      	ldr	r3, [pc, #232]	; (800e978 <__mdiff+0x10c>)
 800e88e:	4602      	mov	r2, r0
 800e890:	f240 2132 	movw	r1, #562	; 0x232
 800e894:	4839      	ldr	r0, [pc, #228]	; (800e97c <__mdiff+0x110>)
 800e896:	f000 fb5d 	bl	800ef54 <__assert_func>
 800e89a:	2301      	movs	r3, #1
 800e89c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e8a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8a4:	bfa4      	itt	ge
 800e8a6:	4643      	movge	r3, r8
 800e8a8:	46a0      	movge	r8, r4
 800e8aa:	4630      	mov	r0, r6
 800e8ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e8b0:	bfa6      	itte	ge
 800e8b2:	461c      	movge	r4, r3
 800e8b4:	2500      	movge	r5, #0
 800e8b6:	2501      	movlt	r5, #1
 800e8b8:	f7ff fcf0 	bl	800e29c <_Balloc>
 800e8bc:	b920      	cbnz	r0, 800e8c8 <__mdiff+0x5c>
 800e8be:	4b2e      	ldr	r3, [pc, #184]	; (800e978 <__mdiff+0x10c>)
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e8c6:	e7e5      	b.n	800e894 <__mdiff+0x28>
 800e8c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e8cc:	6926      	ldr	r6, [r4, #16]
 800e8ce:	60c5      	str	r5, [r0, #12]
 800e8d0:	f104 0914 	add.w	r9, r4, #20
 800e8d4:	f108 0514 	add.w	r5, r8, #20
 800e8d8:	f100 0e14 	add.w	lr, r0, #20
 800e8dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e8e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e8e4:	f108 0210 	add.w	r2, r8, #16
 800e8e8:	46f2      	mov	sl, lr
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800e8f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e8f4:	fa1f f883 	uxth.w	r8, r3
 800e8f8:	fa11 f18b 	uxtah	r1, r1, fp
 800e8fc:	0c1b      	lsrs	r3, r3, #16
 800e8fe:	eba1 0808 	sub.w	r8, r1, r8
 800e902:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e906:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e90a:	fa1f f888 	uxth.w	r8, r8
 800e90e:	1419      	asrs	r1, r3, #16
 800e910:	454e      	cmp	r6, r9
 800e912:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e916:	f84a 3b04 	str.w	r3, [sl], #4
 800e91a:	d8e7      	bhi.n	800e8ec <__mdiff+0x80>
 800e91c:	1b33      	subs	r3, r6, r4
 800e91e:	3b15      	subs	r3, #21
 800e920:	f023 0303 	bic.w	r3, r3, #3
 800e924:	3304      	adds	r3, #4
 800e926:	3415      	adds	r4, #21
 800e928:	42a6      	cmp	r6, r4
 800e92a:	bf38      	it	cc
 800e92c:	2304      	movcc	r3, #4
 800e92e:	441d      	add	r5, r3
 800e930:	4473      	add	r3, lr
 800e932:	469e      	mov	lr, r3
 800e934:	462e      	mov	r6, r5
 800e936:	4566      	cmp	r6, ip
 800e938:	d30e      	bcc.n	800e958 <__mdiff+0xec>
 800e93a:	f10c 0203 	add.w	r2, ip, #3
 800e93e:	1b52      	subs	r2, r2, r5
 800e940:	f022 0203 	bic.w	r2, r2, #3
 800e944:	3d03      	subs	r5, #3
 800e946:	45ac      	cmp	ip, r5
 800e948:	bf38      	it	cc
 800e94a:	2200      	movcc	r2, #0
 800e94c:	441a      	add	r2, r3
 800e94e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e952:	b17b      	cbz	r3, 800e974 <__mdiff+0x108>
 800e954:	6107      	str	r7, [r0, #16]
 800e956:	e7a3      	b.n	800e8a0 <__mdiff+0x34>
 800e958:	f856 8b04 	ldr.w	r8, [r6], #4
 800e95c:	fa11 f288 	uxtah	r2, r1, r8
 800e960:	1414      	asrs	r4, r2, #16
 800e962:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e966:	b292      	uxth	r2, r2
 800e968:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e96c:	f84e 2b04 	str.w	r2, [lr], #4
 800e970:	1421      	asrs	r1, r4, #16
 800e972:	e7e0      	b.n	800e936 <__mdiff+0xca>
 800e974:	3f01      	subs	r7, #1
 800e976:	e7ea      	b.n	800e94e <__mdiff+0xe2>
 800e978:	080109c0 	.word	0x080109c0
 800e97c:	08010a4c 	.word	0x08010a4c

0800e980 <__ulp>:
 800e980:	b082      	sub	sp, #8
 800e982:	ed8d 0b00 	vstr	d0, [sp]
 800e986:	9b01      	ldr	r3, [sp, #4]
 800e988:	4912      	ldr	r1, [pc, #72]	; (800e9d4 <__ulp+0x54>)
 800e98a:	4019      	ands	r1, r3
 800e98c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e990:	2900      	cmp	r1, #0
 800e992:	dd05      	ble.n	800e9a0 <__ulp+0x20>
 800e994:	2200      	movs	r2, #0
 800e996:	460b      	mov	r3, r1
 800e998:	ec43 2b10 	vmov	d0, r2, r3
 800e99c:	b002      	add	sp, #8
 800e99e:	4770      	bx	lr
 800e9a0:	4249      	negs	r1, r1
 800e9a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e9a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e9aa:	f04f 0200 	mov.w	r2, #0
 800e9ae:	f04f 0300 	mov.w	r3, #0
 800e9b2:	da04      	bge.n	800e9be <__ulp+0x3e>
 800e9b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e9b8:	fa41 f300 	asr.w	r3, r1, r0
 800e9bc:	e7ec      	b.n	800e998 <__ulp+0x18>
 800e9be:	f1a0 0114 	sub.w	r1, r0, #20
 800e9c2:	291e      	cmp	r1, #30
 800e9c4:	bfda      	itte	le
 800e9c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e9ca:	fa20 f101 	lsrle.w	r1, r0, r1
 800e9ce:	2101      	movgt	r1, #1
 800e9d0:	460a      	mov	r2, r1
 800e9d2:	e7e1      	b.n	800e998 <__ulp+0x18>
 800e9d4:	7ff00000 	.word	0x7ff00000

0800e9d8 <__b2d>:
 800e9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9da:	6905      	ldr	r5, [r0, #16]
 800e9dc:	f100 0714 	add.w	r7, r0, #20
 800e9e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e9e4:	1f2e      	subs	r6, r5, #4
 800e9e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e9ea:	4620      	mov	r0, r4
 800e9ec:	f7ff fd48 	bl	800e480 <__hi0bits>
 800e9f0:	f1c0 0320 	rsb	r3, r0, #32
 800e9f4:	280a      	cmp	r0, #10
 800e9f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ea74 <__b2d+0x9c>
 800e9fa:	600b      	str	r3, [r1, #0]
 800e9fc:	dc14      	bgt.n	800ea28 <__b2d+0x50>
 800e9fe:	f1c0 0e0b 	rsb	lr, r0, #11
 800ea02:	fa24 f10e 	lsr.w	r1, r4, lr
 800ea06:	42b7      	cmp	r7, r6
 800ea08:	ea41 030c 	orr.w	r3, r1, ip
 800ea0c:	bf34      	ite	cc
 800ea0e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ea12:	2100      	movcs	r1, #0
 800ea14:	3015      	adds	r0, #21
 800ea16:	fa04 f000 	lsl.w	r0, r4, r0
 800ea1a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ea1e:	ea40 0201 	orr.w	r2, r0, r1
 800ea22:	ec43 2b10 	vmov	d0, r2, r3
 800ea26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea28:	42b7      	cmp	r7, r6
 800ea2a:	bf3a      	itte	cc
 800ea2c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ea30:	f1a5 0608 	subcc.w	r6, r5, #8
 800ea34:	2100      	movcs	r1, #0
 800ea36:	380b      	subs	r0, #11
 800ea38:	d017      	beq.n	800ea6a <__b2d+0x92>
 800ea3a:	f1c0 0c20 	rsb	ip, r0, #32
 800ea3e:	fa04 f500 	lsl.w	r5, r4, r0
 800ea42:	42be      	cmp	r6, r7
 800ea44:	fa21 f40c 	lsr.w	r4, r1, ip
 800ea48:	ea45 0504 	orr.w	r5, r5, r4
 800ea4c:	bf8c      	ite	hi
 800ea4e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ea52:	2400      	movls	r4, #0
 800ea54:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ea58:	fa01 f000 	lsl.w	r0, r1, r0
 800ea5c:	fa24 f40c 	lsr.w	r4, r4, ip
 800ea60:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ea64:	ea40 0204 	orr.w	r2, r0, r4
 800ea68:	e7db      	b.n	800ea22 <__b2d+0x4a>
 800ea6a:	ea44 030c 	orr.w	r3, r4, ip
 800ea6e:	460a      	mov	r2, r1
 800ea70:	e7d7      	b.n	800ea22 <__b2d+0x4a>
 800ea72:	bf00      	nop
 800ea74:	3ff00000 	.word	0x3ff00000

0800ea78 <__d2b>:
 800ea78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea7c:	4689      	mov	r9, r1
 800ea7e:	2101      	movs	r1, #1
 800ea80:	ec57 6b10 	vmov	r6, r7, d0
 800ea84:	4690      	mov	r8, r2
 800ea86:	f7ff fc09 	bl	800e29c <_Balloc>
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	b930      	cbnz	r0, 800ea9c <__d2b+0x24>
 800ea8e:	4602      	mov	r2, r0
 800ea90:	4b25      	ldr	r3, [pc, #148]	; (800eb28 <__d2b+0xb0>)
 800ea92:	4826      	ldr	r0, [pc, #152]	; (800eb2c <__d2b+0xb4>)
 800ea94:	f240 310a 	movw	r1, #778	; 0x30a
 800ea98:	f000 fa5c 	bl	800ef54 <__assert_func>
 800ea9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800eaa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eaa4:	bb35      	cbnz	r5, 800eaf4 <__d2b+0x7c>
 800eaa6:	2e00      	cmp	r6, #0
 800eaa8:	9301      	str	r3, [sp, #4]
 800eaaa:	d028      	beq.n	800eafe <__d2b+0x86>
 800eaac:	4668      	mov	r0, sp
 800eaae:	9600      	str	r6, [sp, #0]
 800eab0:	f7ff fd06 	bl	800e4c0 <__lo0bits>
 800eab4:	9900      	ldr	r1, [sp, #0]
 800eab6:	b300      	cbz	r0, 800eafa <__d2b+0x82>
 800eab8:	9a01      	ldr	r2, [sp, #4]
 800eaba:	f1c0 0320 	rsb	r3, r0, #32
 800eabe:	fa02 f303 	lsl.w	r3, r2, r3
 800eac2:	430b      	orrs	r3, r1
 800eac4:	40c2      	lsrs	r2, r0
 800eac6:	6163      	str	r3, [r4, #20]
 800eac8:	9201      	str	r2, [sp, #4]
 800eaca:	9b01      	ldr	r3, [sp, #4]
 800eacc:	61a3      	str	r3, [r4, #24]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	bf14      	ite	ne
 800ead2:	2202      	movne	r2, #2
 800ead4:	2201      	moveq	r2, #1
 800ead6:	6122      	str	r2, [r4, #16]
 800ead8:	b1d5      	cbz	r5, 800eb10 <__d2b+0x98>
 800eada:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eade:	4405      	add	r5, r0
 800eae0:	f8c9 5000 	str.w	r5, [r9]
 800eae4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eae8:	f8c8 0000 	str.w	r0, [r8]
 800eaec:	4620      	mov	r0, r4
 800eaee:	b003      	add	sp, #12
 800eaf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eaf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eaf8:	e7d5      	b.n	800eaa6 <__d2b+0x2e>
 800eafa:	6161      	str	r1, [r4, #20]
 800eafc:	e7e5      	b.n	800eaca <__d2b+0x52>
 800eafe:	a801      	add	r0, sp, #4
 800eb00:	f7ff fcde 	bl	800e4c0 <__lo0bits>
 800eb04:	9b01      	ldr	r3, [sp, #4]
 800eb06:	6163      	str	r3, [r4, #20]
 800eb08:	2201      	movs	r2, #1
 800eb0a:	6122      	str	r2, [r4, #16]
 800eb0c:	3020      	adds	r0, #32
 800eb0e:	e7e3      	b.n	800ead8 <__d2b+0x60>
 800eb10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eb18:	f8c9 0000 	str.w	r0, [r9]
 800eb1c:	6918      	ldr	r0, [r3, #16]
 800eb1e:	f7ff fcaf 	bl	800e480 <__hi0bits>
 800eb22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb26:	e7df      	b.n	800eae8 <__d2b+0x70>
 800eb28:	080109c0 	.word	0x080109c0
 800eb2c:	08010a4c 	.word	0x08010a4c

0800eb30 <__ratio>:
 800eb30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb34:	4688      	mov	r8, r1
 800eb36:	4669      	mov	r1, sp
 800eb38:	4681      	mov	r9, r0
 800eb3a:	f7ff ff4d 	bl	800e9d8 <__b2d>
 800eb3e:	a901      	add	r1, sp, #4
 800eb40:	4640      	mov	r0, r8
 800eb42:	ec55 4b10 	vmov	r4, r5, d0
 800eb46:	f7ff ff47 	bl	800e9d8 <__b2d>
 800eb4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eb4e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800eb52:	eba3 0c02 	sub.w	ip, r3, r2
 800eb56:	e9dd 3200 	ldrd	r3, r2, [sp]
 800eb5a:	1a9b      	subs	r3, r3, r2
 800eb5c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800eb60:	ec51 0b10 	vmov	r0, r1, d0
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	bfd6      	itet	le
 800eb68:	460a      	movle	r2, r1
 800eb6a:	462a      	movgt	r2, r5
 800eb6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eb70:	468b      	mov	fp, r1
 800eb72:	462f      	mov	r7, r5
 800eb74:	bfd4      	ite	le
 800eb76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800eb7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eb7e:	4620      	mov	r0, r4
 800eb80:	ee10 2a10 	vmov	r2, s0
 800eb84:	465b      	mov	r3, fp
 800eb86:	4639      	mov	r1, r7
 800eb88:	f7f1 fe88 	bl	800089c <__aeabi_ddiv>
 800eb8c:	ec41 0b10 	vmov	d0, r0, r1
 800eb90:	b003      	add	sp, #12
 800eb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eb96 <__copybits>:
 800eb96:	3901      	subs	r1, #1
 800eb98:	b570      	push	{r4, r5, r6, lr}
 800eb9a:	1149      	asrs	r1, r1, #5
 800eb9c:	6914      	ldr	r4, [r2, #16]
 800eb9e:	3101      	adds	r1, #1
 800eba0:	f102 0314 	add.w	r3, r2, #20
 800eba4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eba8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ebac:	1f05      	subs	r5, r0, #4
 800ebae:	42a3      	cmp	r3, r4
 800ebb0:	d30c      	bcc.n	800ebcc <__copybits+0x36>
 800ebb2:	1aa3      	subs	r3, r4, r2
 800ebb4:	3b11      	subs	r3, #17
 800ebb6:	f023 0303 	bic.w	r3, r3, #3
 800ebba:	3211      	adds	r2, #17
 800ebbc:	42a2      	cmp	r2, r4
 800ebbe:	bf88      	it	hi
 800ebc0:	2300      	movhi	r3, #0
 800ebc2:	4418      	add	r0, r3
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	4288      	cmp	r0, r1
 800ebc8:	d305      	bcc.n	800ebd6 <__copybits+0x40>
 800ebca:	bd70      	pop	{r4, r5, r6, pc}
 800ebcc:	f853 6b04 	ldr.w	r6, [r3], #4
 800ebd0:	f845 6f04 	str.w	r6, [r5, #4]!
 800ebd4:	e7eb      	b.n	800ebae <__copybits+0x18>
 800ebd6:	f840 3b04 	str.w	r3, [r0], #4
 800ebda:	e7f4      	b.n	800ebc6 <__copybits+0x30>

0800ebdc <__any_on>:
 800ebdc:	f100 0214 	add.w	r2, r0, #20
 800ebe0:	6900      	ldr	r0, [r0, #16]
 800ebe2:	114b      	asrs	r3, r1, #5
 800ebe4:	4298      	cmp	r0, r3
 800ebe6:	b510      	push	{r4, lr}
 800ebe8:	db11      	blt.n	800ec0e <__any_on+0x32>
 800ebea:	dd0a      	ble.n	800ec02 <__any_on+0x26>
 800ebec:	f011 011f 	ands.w	r1, r1, #31
 800ebf0:	d007      	beq.n	800ec02 <__any_on+0x26>
 800ebf2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ebf6:	fa24 f001 	lsr.w	r0, r4, r1
 800ebfa:	fa00 f101 	lsl.w	r1, r0, r1
 800ebfe:	428c      	cmp	r4, r1
 800ec00:	d10b      	bne.n	800ec1a <__any_on+0x3e>
 800ec02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d803      	bhi.n	800ec12 <__any_on+0x36>
 800ec0a:	2000      	movs	r0, #0
 800ec0c:	bd10      	pop	{r4, pc}
 800ec0e:	4603      	mov	r3, r0
 800ec10:	e7f7      	b.n	800ec02 <__any_on+0x26>
 800ec12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ec16:	2900      	cmp	r1, #0
 800ec18:	d0f5      	beq.n	800ec06 <__any_on+0x2a>
 800ec1a:	2001      	movs	r0, #1
 800ec1c:	e7f6      	b.n	800ec0c <__any_on+0x30>

0800ec1e <_calloc_r>:
 800ec1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec20:	fba1 2402 	umull	r2, r4, r1, r2
 800ec24:	b94c      	cbnz	r4, 800ec3a <_calloc_r+0x1c>
 800ec26:	4611      	mov	r1, r2
 800ec28:	9201      	str	r2, [sp, #4]
 800ec2a:	f7fc fb4b 	bl	800b2c4 <_malloc_r>
 800ec2e:	9a01      	ldr	r2, [sp, #4]
 800ec30:	4605      	mov	r5, r0
 800ec32:	b930      	cbnz	r0, 800ec42 <_calloc_r+0x24>
 800ec34:	4628      	mov	r0, r5
 800ec36:	b003      	add	sp, #12
 800ec38:	bd30      	pop	{r4, r5, pc}
 800ec3a:	220c      	movs	r2, #12
 800ec3c:	6002      	str	r2, [r0, #0]
 800ec3e:	2500      	movs	r5, #0
 800ec40:	e7f8      	b.n	800ec34 <_calloc_r+0x16>
 800ec42:	4621      	mov	r1, r4
 800ec44:	f7fc faca 	bl	800b1dc <memset>
 800ec48:	e7f4      	b.n	800ec34 <_calloc_r+0x16>

0800ec4a <__ssputs_r>:
 800ec4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec4e:	688e      	ldr	r6, [r1, #8]
 800ec50:	429e      	cmp	r6, r3
 800ec52:	4682      	mov	sl, r0
 800ec54:	460c      	mov	r4, r1
 800ec56:	4690      	mov	r8, r2
 800ec58:	461f      	mov	r7, r3
 800ec5a:	d838      	bhi.n	800ecce <__ssputs_r+0x84>
 800ec5c:	898a      	ldrh	r2, [r1, #12]
 800ec5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec62:	d032      	beq.n	800ecca <__ssputs_r+0x80>
 800ec64:	6825      	ldr	r5, [r4, #0]
 800ec66:	6909      	ldr	r1, [r1, #16]
 800ec68:	eba5 0901 	sub.w	r9, r5, r1
 800ec6c:	6965      	ldr	r5, [r4, #20]
 800ec6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec76:	3301      	adds	r3, #1
 800ec78:	444b      	add	r3, r9
 800ec7a:	106d      	asrs	r5, r5, #1
 800ec7c:	429d      	cmp	r5, r3
 800ec7e:	bf38      	it	cc
 800ec80:	461d      	movcc	r5, r3
 800ec82:	0553      	lsls	r3, r2, #21
 800ec84:	d531      	bpl.n	800ecea <__ssputs_r+0xa0>
 800ec86:	4629      	mov	r1, r5
 800ec88:	f7fc fb1c 	bl	800b2c4 <_malloc_r>
 800ec8c:	4606      	mov	r6, r0
 800ec8e:	b950      	cbnz	r0, 800eca6 <__ssputs_r+0x5c>
 800ec90:	230c      	movs	r3, #12
 800ec92:	f8ca 3000 	str.w	r3, [sl]
 800ec96:	89a3      	ldrh	r3, [r4, #12]
 800ec98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec9c:	81a3      	strh	r3, [r4, #12]
 800ec9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eca6:	6921      	ldr	r1, [r4, #16]
 800eca8:	464a      	mov	r2, r9
 800ecaa:	f7ff fadd 	bl	800e268 <memcpy>
 800ecae:	89a3      	ldrh	r3, [r4, #12]
 800ecb0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ecb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecb8:	81a3      	strh	r3, [r4, #12]
 800ecba:	6126      	str	r6, [r4, #16]
 800ecbc:	6165      	str	r5, [r4, #20]
 800ecbe:	444e      	add	r6, r9
 800ecc0:	eba5 0509 	sub.w	r5, r5, r9
 800ecc4:	6026      	str	r6, [r4, #0]
 800ecc6:	60a5      	str	r5, [r4, #8]
 800ecc8:	463e      	mov	r6, r7
 800ecca:	42be      	cmp	r6, r7
 800eccc:	d900      	bls.n	800ecd0 <__ssputs_r+0x86>
 800ecce:	463e      	mov	r6, r7
 800ecd0:	6820      	ldr	r0, [r4, #0]
 800ecd2:	4632      	mov	r2, r6
 800ecd4:	4641      	mov	r1, r8
 800ecd6:	f000 f970 	bl	800efba <memmove>
 800ecda:	68a3      	ldr	r3, [r4, #8]
 800ecdc:	1b9b      	subs	r3, r3, r6
 800ecde:	60a3      	str	r3, [r4, #8]
 800ece0:	6823      	ldr	r3, [r4, #0]
 800ece2:	4433      	add	r3, r6
 800ece4:	6023      	str	r3, [r4, #0]
 800ece6:	2000      	movs	r0, #0
 800ece8:	e7db      	b.n	800eca2 <__ssputs_r+0x58>
 800ecea:	462a      	mov	r2, r5
 800ecec:	f000 f97f 	bl	800efee <_realloc_r>
 800ecf0:	4606      	mov	r6, r0
 800ecf2:	2800      	cmp	r0, #0
 800ecf4:	d1e1      	bne.n	800ecba <__ssputs_r+0x70>
 800ecf6:	6921      	ldr	r1, [r4, #16]
 800ecf8:	4650      	mov	r0, sl
 800ecfa:	f7fc fa77 	bl	800b1ec <_free_r>
 800ecfe:	e7c7      	b.n	800ec90 <__ssputs_r+0x46>

0800ed00 <_svfiprintf_r>:
 800ed00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed04:	4698      	mov	r8, r3
 800ed06:	898b      	ldrh	r3, [r1, #12]
 800ed08:	061b      	lsls	r3, r3, #24
 800ed0a:	b09d      	sub	sp, #116	; 0x74
 800ed0c:	4607      	mov	r7, r0
 800ed0e:	460d      	mov	r5, r1
 800ed10:	4614      	mov	r4, r2
 800ed12:	d50e      	bpl.n	800ed32 <_svfiprintf_r+0x32>
 800ed14:	690b      	ldr	r3, [r1, #16]
 800ed16:	b963      	cbnz	r3, 800ed32 <_svfiprintf_r+0x32>
 800ed18:	2140      	movs	r1, #64	; 0x40
 800ed1a:	f7fc fad3 	bl	800b2c4 <_malloc_r>
 800ed1e:	6028      	str	r0, [r5, #0]
 800ed20:	6128      	str	r0, [r5, #16]
 800ed22:	b920      	cbnz	r0, 800ed2e <_svfiprintf_r+0x2e>
 800ed24:	230c      	movs	r3, #12
 800ed26:	603b      	str	r3, [r7, #0]
 800ed28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed2c:	e0d1      	b.n	800eed2 <_svfiprintf_r+0x1d2>
 800ed2e:	2340      	movs	r3, #64	; 0x40
 800ed30:	616b      	str	r3, [r5, #20]
 800ed32:	2300      	movs	r3, #0
 800ed34:	9309      	str	r3, [sp, #36]	; 0x24
 800ed36:	2320      	movs	r3, #32
 800ed38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed40:	2330      	movs	r3, #48	; 0x30
 800ed42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eeec <_svfiprintf_r+0x1ec>
 800ed46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed4a:	f04f 0901 	mov.w	r9, #1
 800ed4e:	4623      	mov	r3, r4
 800ed50:	469a      	mov	sl, r3
 800ed52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed56:	b10a      	cbz	r2, 800ed5c <_svfiprintf_r+0x5c>
 800ed58:	2a25      	cmp	r2, #37	; 0x25
 800ed5a:	d1f9      	bne.n	800ed50 <_svfiprintf_r+0x50>
 800ed5c:	ebba 0b04 	subs.w	fp, sl, r4
 800ed60:	d00b      	beq.n	800ed7a <_svfiprintf_r+0x7a>
 800ed62:	465b      	mov	r3, fp
 800ed64:	4622      	mov	r2, r4
 800ed66:	4629      	mov	r1, r5
 800ed68:	4638      	mov	r0, r7
 800ed6a:	f7ff ff6e 	bl	800ec4a <__ssputs_r>
 800ed6e:	3001      	adds	r0, #1
 800ed70:	f000 80aa 	beq.w	800eec8 <_svfiprintf_r+0x1c8>
 800ed74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed76:	445a      	add	r2, fp
 800ed78:	9209      	str	r2, [sp, #36]	; 0x24
 800ed7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	f000 80a2 	beq.w	800eec8 <_svfiprintf_r+0x1c8>
 800ed84:	2300      	movs	r3, #0
 800ed86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed8e:	f10a 0a01 	add.w	sl, sl, #1
 800ed92:	9304      	str	r3, [sp, #16]
 800ed94:	9307      	str	r3, [sp, #28]
 800ed96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed9a:	931a      	str	r3, [sp, #104]	; 0x68
 800ed9c:	4654      	mov	r4, sl
 800ed9e:	2205      	movs	r2, #5
 800eda0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eda4:	4851      	ldr	r0, [pc, #324]	; (800eeec <_svfiprintf_r+0x1ec>)
 800eda6:	f7f1 fa43 	bl	8000230 <memchr>
 800edaa:	9a04      	ldr	r2, [sp, #16]
 800edac:	b9d8      	cbnz	r0, 800ede6 <_svfiprintf_r+0xe6>
 800edae:	06d0      	lsls	r0, r2, #27
 800edb0:	bf44      	itt	mi
 800edb2:	2320      	movmi	r3, #32
 800edb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edb8:	0711      	lsls	r1, r2, #28
 800edba:	bf44      	itt	mi
 800edbc:	232b      	movmi	r3, #43	; 0x2b
 800edbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edc2:	f89a 3000 	ldrb.w	r3, [sl]
 800edc6:	2b2a      	cmp	r3, #42	; 0x2a
 800edc8:	d015      	beq.n	800edf6 <_svfiprintf_r+0xf6>
 800edca:	9a07      	ldr	r2, [sp, #28]
 800edcc:	4654      	mov	r4, sl
 800edce:	2000      	movs	r0, #0
 800edd0:	f04f 0c0a 	mov.w	ip, #10
 800edd4:	4621      	mov	r1, r4
 800edd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edda:	3b30      	subs	r3, #48	; 0x30
 800eddc:	2b09      	cmp	r3, #9
 800edde:	d94e      	bls.n	800ee7e <_svfiprintf_r+0x17e>
 800ede0:	b1b0      	cbz	r0, 800ee10 <_svfiprintf_r+0x110>
 800ede2:	9207      	str	r2, [sp, #28]
 800ede4:	e014      	b.n	800ee10 <_svfiprintf_r+0x110>
 800ede6:	eba0 0308 	sub.w	r3, r0, r8
 800edea:	fa09 f303 	lsl.w	r3, r9, r3
 800edee:	4313      	orrs	r3, r2
 800edf0:	9304      	str	r3, [sp, #16]
 800edf2:	46a2      	mov	sl, r4
 800edf4:	e7d2      	b.n	800ed9c <_svfiprintf_r+0x9c>
 800edf6:	9b03      	ldr	r3, [sp, #12]
 800edf8:	1d19      	adds	r1, r3, #4
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	9103      	str	r1, [sp, #12]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	bfbb      	ittet	lt
 800ee02:	425b      	neglt	r3, r3
 800ee04:	f042 0202 	orrlt.w	r2, r2, #2
 800ee08:	9307      	strge	r3, [sp, #28]
 800ee0a:	9307      	strlt	r3, [sp, #28]
 800ee0c:	bfb8      	it	lt
 800ee0e:	9204      	strlt	r2, [sp, #16]
 800ee10:	7823      	ldrb	r3, [r4, #0]
 800ee12:	2b2e      	cmp	r3, #46	; 0x2e
 800ee14:	d10c      	bne.n	800ee30 <_svfiprintf_r+0x130>
 800ee16:	7863      	ldrb	r3, [r4, #1]
 800ee18:	2b2a      	cmp	r3, #42	; 0x2a
 800ee1a:	d135      	bne.n	800ee88 <_svfiprintf_r+0x188>
 800ee1c:	9b03      	ldr	r3, [sp, #12]
 800ee1e:	1d1a      	adds	r2, r3, #4
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	9203      	str	r2, [sp, #12]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	bfb8      	it	lt
 800ee28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ee2c:	3402      	adds	r4, #2
 800ee2e:	9305      	str	r3, [sp, #20]
 800ee30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eefc <_svfiprintf_r+0x1fc>
 800ee34:	7821      	ldrb	r1, [r4, #0]
 800ee36:	2203      	movs	r2, #3
 800ee38:	4650      	mov	r0, sl
 800ee3a:	f7f1 f9f9 	bl	8000230 <memchr>
 800ee3e:	b140      	cbz	r0, 800ee52 <_svfiprintf_r+0x152>
 800ee40:	2340      	movs	r3, #64	; 0x40
 800ee42:	eba0 000a 	sub.w	r0, r0, sl
 800ee46:	fa03 f000 	lsl.w	r0, r3, r0
 800ee4a:	9b04      	ldr	r3, [sp, #16]
 800ee4c:	4303      	orrs	r3, r0
 800ee4e:	3401      	adds	r4, #1
 800ee50:	9304      	str	r3, [sp, #16]
 800ee52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee56:	4826      	ldr	r0, [pc, #152]	; (800eef0 <_svfiprintf_r+0x1f0>)
 800ee58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee5c:	2206      	movs	r2, #6
 800ee5e:	f7f1 f9e7 	bl	8000230 <memchr>
 800ee62:	2800      	cmp	r0, #0
 800ee64:	d038      	beq.n	800eed8 <_svfiprintf_r+0x1d8>
 800ee66:	4b23      	ldr	r3, [pc, #140]	; (800eef4 <_svfiprintf_r+0x1f4>)
 800ee68:	bb1b      	cbnz	r3, 800eeb2 <_svfiprintf_r+0x1b2>
 800ee6a:	9b03      	ldr	r3, [sp, #12]
 800ee6c:	3307      	adds	r3, #7
 800ee6e:	f023 0307 	bic.w	r3, r3, #7
 800ee72:	3308      	adds	r3, #8
 800ee74:	9303      	str	r3, [sp, #12]
 800ee76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee78:	4433      	add	r3, r6
 800ee7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ee7c:	e767      	b.n	800ed4e <_svfiprintf_r+0x4e>
 800ee7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee82:	460c      	mov	r4, r1
 800ee84:	2001      	movs	r0, #1
 800ee86:	e7a5      	b.n	800edd4 <_svfiprintf_r+0xd4>
 800ee88:	2300      	movs	r3, #0
 800ee8a:	3401      	adds	r4, #1
 800ee8c:	9305      	str	r3, [sp, #20]
 800ee8e:	4619      	mov	r1, r3
 800ee90:	f04f 0c0a 	mov.w	ip, #10
 800ee94:	4620      	mov	r0, r4
 800ee96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee9a:	3a30      	subs	r2, #48	; 0x30
 800ee9c:	2a09      	cmp	r2, #9
 800ee9e:	d903      	bls.n	800eea8 <_svfiprintf_r+0x1a8>
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d0c5      	beq.n	800ee30 <_svfiprintf_r+0x130>
 800eea4:	9105      	str	r1, [sp, #20]
 800eea6:	e7c3      	b.n	800ee30 <_svfiprintf_r+0x130>
 800eea8:	fb0c 2101 	mla	r1, ip, r1, r2
 800eeac:	4604      	mov	r4, r0
 800eeae:	2301      	movs	r3, #1
 800eeb0:	e7f0      	b.n	800ee94 <_svfiprintf_r+0x194>
 800eeb2:	ab03      	add	r3, sp, #12
 800eeb4:	9300      	str	r3, [sp, #0]
 800eeb6:	462a      	mov	r2, r5
 800eeb8:	4b0f      	ldr	r3, [pc, #60]	; (800eef8 <_svfiprintf_r+0x1f8>)
 800eeba:	a904      	add	r1, sp, #16
 800eebc:	4638      	mov	r0, r7
 800eebe:	f7fc fb15 	bl	800b4ec <_printf_float>
 800eec2:	1c42      	adds	r2, r0, #1
 800eec4:	4606      	mov	r6, r0
 800eec6:	d1d6      	bne.n	800ee76 <_svfiprintf_r+0x176>
 800eec8:	89ab      	ldrh	r3, [r5, #12]
 800eeca:	065b      	lsls	r3, r3, #25
 800eecc:	f53f af2c 	bmi.w	800ed28 <_svfiprintf_r+0x28>
 800eed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eed2:	b01d      	add	sp, #116	; 0x74
 800eed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed8:	ab03      	add	r3, sp, #12
 800eeda:	9300      	str	r3, [sp, #0]
 800eedc:	462a      	mov	r2, r5
 800eede:	4b06      	ldr	r3, [pc, #24]	; (800eef8 <_svfiprintf_r+0x1f8>)
 800eee0:	a904      	add	r1, sp, #16
 800eee2:	4638      	mov	r0, r7
 800eee4:	f7fc fda6 	bl	800ba34 <_printf_i>
 800eee8:	e7eb      	b.n	800eec2 <_svfiprintf_r+0x1c2>
 800eeea:	bf00      	nop
 800eeec:	08010ba4 	.word	0x08010ba4
 800eef0:	08010bae 	.word	0x08010bae
 800eef4:	0800b4ed 	.word	0x0800b4ed
 800eef8:	0800ec4b 	.word	0x0800ec4b
 800eefc:	08010baa 	.word	0x08010baa

0800ef00 <nan>:
 800ef00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ef08 <nan+0x8>
 800ef04:	4770      	bx	lr
 800ef06:	bf00      	nop
 800ef08:	00000000 	.word	0x00000000
 800ef0c:	7ff80000 	.word	0x7ff80000

0800ef10 <strncmp>:
 800ef10:	b510      	push	{r4, lr}
 800ef12:	b17a      	cbz	r2, 800ef34 <strncmp+0x24>
 800ef14:	4603      	mov	r3, r0
 800ef16:	3901      	subs	r1, #1
 800ef18:	1884      	adds	r4, r0, r2
 800ef1a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ef1e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ef22:	4290      	cmp	r0, r2
 800ef24:	d101      	bne.n	800ef2a <strncmp+0x1a>
 800ef26:	42a3      	cmp	r3, r4
 800ef28:	d101      	bne.n	800ef2e <strncmp+0x1e>
 800ef2a:	1a80      	subs	r0, r0, r2
 800ef2c:	bd10      	pop	{r4, pc}
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	d1f3      	bne.n	800ef1a <strncmp+0xa>
 800ef32:	e7fa      	b.n	800ef2a <strncmp+0x1a>
 800ef34:	4610      	mov	r0, r2
 800ef36:	e7f9      	b.n	800ef2c <strncmp+0x1c>

0800ef38 <__ascii_wctomb>:
 800ef38:	b149      	cbz	r1, 800ef4e <__ascii_wctomb+0x16>
 800ef3a:	2aff      	cmp	r2, #255	; 0xff
 800ef3c:	bf85      	ittet	hi
 800ef3e:	238a      	movhi	r3, #138	; 0x8a
 800ef40:	6003      	strhi	r3, [r0, #0]
 800ef42:	700a      	strbls	r2, [r1, #0]
 800ef44:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ef48:	bf98      	it	ls
 800ef4a:	2001      	movls	r0, #1
 800ef4c:	4770      	bx	lr
 800ef4e:	4608      	mov	r0, r1
 800ef50:	4770      	bx	lr
	...

0800ef54 <__assert_func>:
 800ef54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef56:	4614      	mov	r4, r2
 800ef58:	461a      	mov	r2, r3
 800ef5a:	4b09      	ldr	r3, [pc, #36]	; (800ef80 <__assert_func+0x2c>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4605      	mov	r5, r0
 800ef60:	68d8      	ldr	r0, [r3, #12]
 800ef62:	b14c      	cbz	r4, 800ef78 <__assert_func+0x24>
 800ef64:	4b07      	ldr	r3, [pc, #28]	; (800ef84 <__assert_func+0x30>)
 800ef66:	9100      	str	r1, [sp, #0]
 800ef68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef6c:	4906      	ldr	r1, [pc, #24]	; (800ef88 <__assert_func+0x34>)
 800ef6e:	462b      	mov	r3, r5
 800ef70:	f000 f80e 	bl	800ef90 <fiprintf>
 800ef74:	f000 fa84 	bl	800f480 <abort>
 800ef78:	4b04      	ldr	r3, [pc, #16]	; (800ef8c <__assert_func+0x38>)
 800ef7a:	461c      	mov	r4, r3
 800ef7c:	e7f3      	b.n	800ef66 <__assert_func+0x12>
 800ef7e:	bf00      	nop
 800ef80:	20000230 	.word	0x20000230
 800ef84:	08010bb5 	.word	0x08010bb5
 800ef88:	08010bc2 	.word	0x08010bc2
 800ef8c:	08010bf0 	.word	0x08010bf0

0800ef90 <fiprintf>:
 800ef90:	b40e      	push	{r1, r2, r3}
 800ef92:	b503      	push	{r0, r1, lr}
 800ef94:	4601      	mov	r1, r0
 800ef96:	ab03      	add	r3, sp, #12
 800ef98:	4805      	ldr	r0, [pc, #20]	; (800efb0 <fiprintf+0x20>)
 800ef9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef9e:	6800      	ldr	r0, [r0, #0]
 800efa0:	9301      	str	r3, [sp, #4]
 800efa2:	f000 f87d 	bl	800f0a0 <_vfiprintf_r>
 800efa6:	b002      	add	sp, #8
 800efa8:	f85d eb04 	ldr.w	lr, [sp], #4
 800efac:	b003      	add	sp, #12
 800efae:	4770      	bx	lr
 800efb0:	20000230 	.word	0x20000230

0800efb4 <__retarget_lock_init_recursive>:
 800efb4:	4770      	bx	lr

0800efb6 <__retarget_lock_acquire_recursive>:
 800efb6:	4770      	bx	lr

0800efb8 <__retarget_lock_release_recursive>:
 800efb8:	4770      	bx	lr

0800efba <memmove>:
 800efba:	4288      	cmp	r0, r1
 800efbc:	b510      	push	{r4, lr}
 800efbe:	eb01 0402 	add.w	r4, r1, r2
 800efc2:	d902      	bls.n	800efca <memmove+0x10>
 800efc4:	4284      	cmp	r4, r0
 800efc6:	4623      	mov	r3, r4
 800efc8:	d807      	bhi.n	800efda <memmove+0x20>
 800efca:	1e43      	subs	r3, r0, #1
 800efcc:	42a1      	cmp	r1, r4
 800efce:	d008      	beq.n	800efe2 <memmove+0x28>
 800efd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efd4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efd8:	e7f8      	b.n	800efcc <memmove+0x12>
 800efda:	4402      	add	r2, r0
 800efdc:	4601      	mov	r1, r0
 800efde:	428a      	cmp	r2, r1
 800efe0:	d100      	bne.n	800efe4 <memmove+0x2a>
 800efe2:	bd10      	pop	{r4, pc}
 800efe4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efe8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efec:	e7f7      	b.n	800efde <memmove+0x24>

0800efee <_realloc_r>:
 800efee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff2:	4680      	mov	r8, r0
 800eff4:	4614      	mov	r4, r2
 800eff6:	460e      	mov	r6, r1
 800eff8:	b921      	cbnz	r1, 800f004 <_realloc_r+0x16>
 800effa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800effe:	4611      	mov	r1, r2
 800f000:	f7fc b960 	b.w	800b2c4 <_malloc_r>
 800f004:	b92a      	cbnz	r2, 800f012 <_realloc_r+0x24>
 800f006:	f7fc f8f1 	bl	800b1ec <_free_r>
 800f00a:	4625      	mov	r5, r4
 800f00c:	4628      	mov	r0, r5
 800f00e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f012:	f000 fc59 	bl	800f8c8 <_malloc_usable_size_r>
 800f016:	4284      	cmp	r4, r0
 800f018:	4607      	mov	r7, r0
 800f01a:	d802      	bhi.n	800f022 <_realloc_r+0x34>
 800f01c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f020:	d812      	bhi.n	800f048 <_realloc_r+0x5a>
 800f022:	4621      	mov	r1, r4
 800f024:	4640      	mov	r0, r8
 800f026:	f7fc f94d 	bl	800b2c4 <_malloc_r>
 800f02a:	4605      	mov	r5, r0
 800f02c:	2800      	cmp	r0, #0
 800f02e:	d0ed      	beq.n	800f00c <_realloc_r+0x1e>
 800f030:	42bc      	cmp	r4, r7
 800f032:	4622      	mov	r2, r4
 800f034:	4631      	mov	r1, r6
 800f036:	bf28      	it	cs
 800f038:	463a      	movcs	r2, r7
 800f03a:	f7ff f915 	bl	800e268 <memcpy>
 800f03e:	4631      	mov	r1, r6
 800f040:	4640      	mov	r0, r8
 800f042:	f7fc f8d3 	bl	800b1ec <_free_r>
 800f046:	e7e1      	b.n	800f00c <_realloc_r+0x1e>
 800f048:	4635      	mov	r5, r6
 800f04a:	e7df      	b.n	800f00c <_realloc_r+0x1e>

0800f04c <__sfputc_r>:
 800f04c:	6893      	ldr	r3, [r2, #8]
 800f04e:	3b01      	subs	r3, #1
 800f050:	2b00      	cmp	r3, #0
 800f052:	b410      	push	{r4}
 800f054:	6093      	str	r3, [r2, #8]
 800f056:	da08      	bge.n	800f06a <__sfputc_r+0x1e>
 800f058:	6994      	ldr	r4, [r2, #24]
 800f05a:	42a3      	cmp	r3, r4
 800f05c:	db01      	blt.n	800f062 <__sfputc_r+0x16>
 800f05e:	290a      	cmp	r1, #10
 800f060:	d103      	bne.n	800f06a <__sfputc_r+0x1e>
 800f062:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f066:	f000 b94b 	b.w	800f300 <__swbuf_r>
 800f06a:	6813      	ldr	r3, [r2, #0]
 800f06c:	1c58      	adds	r0, r3, #1
 800f06e:	6010      	str	r0, [r2, #0]
 800f070:	7019      	strb	r1, [r3, #0]
 800f072:	4608      	mov	r0, r1
 800f074:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f078:	4770      	bx	lr

0800f07a <__sfputs_r>:
 800f07a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f07c:	4606      	mov	r6, r0
 800f07e:	460f      	mov	r7, r1
 800f080:	4614      	mov	r4, r2
 800f082:	18d5      	adds	r5, r2, r3
 800f084:	42ac      	cmp	r4, r5
 800f086:	d101      	bne.n	800f08c <__sfputs_r+0x12>
 800f088:	2000      	movs	r0, #0
 800f08a:	e007      	b.n	800f09c <__sfputs_r+0x22>
 800f08c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f090:	463a      	mov	r2, r7
 800f092:	4630      	mov	r0, r6
 800f094:	f7ff ffda 	bl	800f04c <__sfputc_r>
 800f098:	1c43      	adds	r3, r0, #1
 800f09a:	d1f3      	bne.n	800f084 <__sfputs_r+0xa>
 800f09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f0a0 <_vfiprintf_r>:
 800f0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0a4:	460d      	mov	r5, r1
 800f0a6:	b09d      	sub	sp, #116	; 0x74
 800f0a8:	4614      	mov	r4, r2
 800f0aa:	4698      	mov	r8, r3
 800f0ac:	4606      	mov	r6, r0
 800f0ae:	b118      	cbz	r0, 800f0b8 <_vfiprintf_r+0x18>
 800f0b0:	6983      	ldr	r3, [r0, #24]
 800f0b2:	b90b      	cbnz	r3, 800f0b8 <_vfiprintf_r+0x18>
 800f0b4:	f000 fb06 	bl	800f6c4 <__sinit>
 800f0b8:	4b89      	ldr	r3, [pc, #548]	; (800f2e0 <_vfiprintf_r+0x240>)
 800f0ba:	429d      	cmp	r5, r3
 800f0bc:	d11b      	bne.n	800f0f6 <_vfiprintf_r+0x56>
 800f0be:	6875      	ldr	r5, [r6, #4]
 800f0c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0c2:	07d9      	lsls	r1, r3, #31
 800f0c4:	d405      	bmi.n	800f0d2 <_vfiprintf_r+0x32>
 800f0c6:	89ab      	ldrh	r3, [r5, #12]
 800f0c8:	059a      	lsls	r2, r3, #22
 800f0ca:	d402      	bmi.n	800f0d2 <_vfiprintf_r+0x32>
 800f0cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0ce:	f7ff ff72 	bl	800efb6 <__retarget_lock_acquire_recursive>
 800f0d2:	89ab      	ldrh	r3, [r5, #12]
 800f0d4:	071b      	lsls	r3, r3, #28
 800f0d6:	d501      	bpl.n	800f0dc <_vfiprintf_r+0x3c>
 800f0d8:	692b      	ldr	r3, [r5, #16]
 800f0da:	b9eb      	cbnz	r3, 800f118 <_vfiprintf_r+0x78>
 800f0dc:	4629      	mov	r1, r5
 800f0de:	4630      	mov	r0, r6
 800f0e0:	f000 f960 	bl	800f3a4 <__swsetup_r>
 800f0e4:	b1c0      	cbz	r0, 800f118 <_vfiprintf_r+0x78>
 800f0e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0e8:	07dc      	lsls	r4, r3, #31
 800f0ea:	d50e      	bpl.n	800f10a <_vfiprintf_r+0x6a>
 800f0ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0f0:	b01d      	add	sp, #116	; 0x74
 800f0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f6:	4b7b      	ldr	r3, [pc, #492]	; (800f2e4 <_vfiprintf_r+0x244>)
 800f0f8:	429d      	cmp	r5, r3
 800f0fa:	d101      	bne.n	800f100 <_vfiprintf_r+0x60>
 800f0fc:	68b5      	ldr	r5, [r6, #8]
 800f0fe:	e7df      	b.n	800f0c0 <_vfiprintf_r+0x20>
 800f100:	4b79      	ldr	r3, [pc, #484]	; (800f2e8 <_vfiprintf_r+0x248>)
 800f102:	429d      	cmp	r5, r3
 800f104:	bf08      	it	eq
 800f106:	68f5      	ldreq	r5, [r6, #12]
 800f108:	e7da      	b.n	800f0c0 <_vfiprintf_r+0x20>
 800f10a:	89ab      	ldrh	r3, [r5, #12]
 800f10c:	0598      	lsls	r0, r3, #22
 800f10e:	d4ed      	bmi.n	800f0ec <_vfiprintf_r+0x4c>
 800f110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f112:	f7ff ff51 	bl	800efb8 <__retarget_lock_release_recursive>
 800f116:	e7e9      	b.n	800f0ec <_vfiprintf_r+0x4c>
 800f118:	2300      	movs	r3, #0
 800f11a:	9309      	str	r3, [sp, #36]	; 0x24
 800f11c:	2320      	movs	r3, #32
 800f11e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f122:	f8cd 800c 	str.w	r8, [sp, #12]
 800f126:	2330      	movs	r3, #48	; 0x30
 800f128:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f2ec <_vfiprintf_r+0x24c>
 800f12c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f130:	f04f 0901 	mov.w	r9, #1
 800f134:	4623      	mov	r3, r4
 800f136:	469a      	mov	sl, r3
 800f138:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f13c:	b10a      	cbz	r2, 800f142 <_vfiprintf_r+0xa2>
 800f13e:	2a25      	cmp	r2, #37	; 0x25
 800f140:	d1f9      	bne.n	800f136 <_vfiprintf_r+0x96>
 800f142:	ebba 0b04 	subs.w	fp, sl, r4
 800f146:	d00b      	beq.n	800f160 <_vfiprintf_r+0xc0>
 800f148:	465b      	mov	r3, fp
 800f14a:	4622      	mov	r2, r4
 800f14c:	4629      	mov	r1, r5
 800f14e:	4630      	mov	r0, r6
 800f150:	f7ff ff93 	bl	800f07a <__sfputs_r>
 800f154:	3001      	adds	r0, #1
 800f156:	f000 80aa 	beq.w	800f2ae <_vfiprintf_r+0x20e>
 800f15a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f15c:	445a      	add	r2, fp
 800f15e:	9209      	str	r2, [sp, #36]	; 0x24
 800f160:	f89a 3000 	ldrb.w	r3, [sl]
 800f164:	2b00      	cmp	r3, #0
 800f166:	f000 80a2 	beq.w	800f2ae <_vfiprintf_r+0x20e>
 800f16a:	2300      	movs	r3, #0
 800f16c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f170:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f174:	f10a 0a01 	add.w	sl, sl, #1
 800f178:	9304      	str	r3, [sp, #16]
 800f17a:	9307      	str	r3, [sp, #28]
 800f17c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f180:	931a      	str	r3, [sp, #104]	; 0x68
 800f182:	4654      	mov	r4, sl
 800f184:	2205      	movs	r2, #5
 800f186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f18a:	4858      	ldr	r0, [pc, #352]	; (800f2ec <_vfiprintf_r+0x24c>)
 800f18c:	f7f1 f850 	bl	8000230 <memchr>
 800f190:	9a04      	ldr	r2, [sp, #16]
 800f192:	b9d8      	cbnz	r0, 800f1cc <_vfiprintf_r+0x12c>
 800f194:	06d1      	lsls	r1, r2, #27
 800f196:	bf44      	itt	mi
 800f198:	2320      	movmi	r3, #32
 800f19a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f19e:	0713      	lsls	r3, r2, #28
 800f1a0:	bf44      	itt	mi
 800f1a2:	232b      	movmi	r3, #43	; 0x2b
 800f1a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1a8:	f89a 3000 	ldrb.w	r3, [sl]
 800f1ac:	2b2a      	cmp	r3, #42	; 0x2a
 800f1ae:	d015      	beq.n	800f1dc <_vfiprintf_r+0x13c>
 800f1b0:	9a07      	ldr	r2, [sp, #28]
 800f1b2:	4654      	mov	r4, sl
 800f1b4:	2000      	movs	r0, #0
 800f1b6:	f04f 0c0a 	mov.w	ip, #10
 800f1ba:	4621      	mov	r1, r4
 800f1bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1c0:	3b30      	subs	r3, #48	; 0x30
 800f1c2:	2b09      	cmp	r3, #9
 800f1c4:	d94e      	bls.n	800f264 <_vfiprintf_r+0x1c4>
 800f1c6:	b1b0      	cbz	r0, 800f1f6 <_vfiprintf_r+0x156>
 800f1c8:	9207      	str	r2, [sp, #28]
 800f1ca:	e014      	b.n	800f1f6 <_vfiprintf_r+0x156>
 800f1cc:	eba0 0308 	sub.w	r3, r0, r8
 800f1d0:	fa09 f303 	lsl.w	r3, r9, r3
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	9304      	str	r3, [sp, #16]
 800f1d8:	46a2      	mov	sl, r4
 800f1da:	e7d2      	b.n	800f182 <_vfiprintf_r+0xe2>
 800f1dc:	9b03      	ldr	r3, [sp, #12]
 800f1de:	1d19      	adds	r1, r3, #4
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	9103      	str	r1, [sp, #12]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	bfbb      	ittet	lt
 800f1e8:	425b      	neglt	r3, r3
 800f1ea:	f042 0202 	orrlt.w	r2, r2, #2
 800f1ee:	9307      	strge	r3, [sp, #28]
 800f1f0:	9307      	strlt	r3, [sp, #28]
 800f1f2:	bfb8      	it	lt
 800f1f4:	9204      	strlt	r2, [sp, #16]
 800f1f6:	7823      	ldrb	r3, [r4, #0]
 800f1f8:	2b2e      	cmp	r3, #46	; 0x2e
 800f1fa:	d10c      	bne.n	800f216 <_vfiprintf_r+0x176>
 800f1fc:	7863      	ldrb	r3, [r4, #1]
 800f1fe:	2b2a      	cmp	r3, #42	; 0x2a
 800f200:	d135      	bne.n	800f26e <_vfiprintf_r+0x1ce>
 800f202:	9b03      	ldr	r3, [sp, #12]
 800f204:	1d1a      	adds	r2, r3, #4
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	9203      	str	r2, [sp, #12]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	bfb8      	it	lt
 800f20e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f212:	3402      	adds	r4, #2
 800f214:	9305      	str	r3, [sp, #20]
 800f216:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f2fc <_vfiprintf_r+0x25c>
 800f21a:	7821      	ldrb	r1, [r4, #0]
 800f21c:	2203      	movs	r2, #3
 800f21e:	4650      	mov	r0, sl
 800f220:	f7f1 f806 	bl	8000230 <memchr>
 800f224:	b140      	cbz	r0, 800f238 <_vfiprintf_r+0x198>
 800f226:	2340      	movs	r3, #64	; 0x40
 800f228:	eba0 000a 	sub.w	r0, r0, sl
 800f22c:	fa03 f000 	lsl.w	r0, r3, r0
 800f230:	9b04      	ldr	r3, [sp, #16]
 800f232:	4303      	orrs	r3, r0
 800f234:	3401      	adds	r4, #1
 800f236:	9304      	str	r3, [sp, #16]
 800f238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f23c:	482c      	ldr	r0, [pc, #176]	; (800f2f0 <_vfiprintf_r+0x250>)
 800f23e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f242:	2206      	movs	r2, #6
 800f244:	f7f0 fff4 	bl	8000230 <memchr>
 800f248:	2800      	cmp	r0, #0
 800f24a:	d03f      	beq.n	800f2cc <_vfiprintf_r+0x22c>
 800f24c:	4b29      	ldr	r3, [pc, #164]	; (800f2f4 <_vfiprintf_r+0x254>)
 800f24e:	bb1b      	cbnz	r3, 800f298 <_vfiprintf_r+0x1f8>
 800f250:	9b03      	ldr	r3, [sp, #12]
 800f252:	3307      	adds	r3, #7
 800f254:	f023 0307 	bic.w	r3, r3, #7
 800f258:	3308      	adds	r3, #8
 800f25a:	9303      	str	r3, [sp, #12]
 800f25c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f25e:	443b      	add	r3, r7
 800f260:	9309      	str	r3, [sp, #36]	; 0x24
 800f262:	e767      	b.n	800f134 <_vfiprintf_r+0x94>
 800f264:	fb0c 3202 	mla	r2, ip, r2, r3
 800f268:	460c      	mov	r4, r1
 800f26a:	2001      	movs	r0, #1
 800f26c:	e7a5      	b.n	800f1ba <_vfiprintf_r+0x11a>
 800f26e:	2300      	movs	r3, #0
 800f270:	3401      	adds	r4, #1
 800f272:	9305      	str	r3, [sp, #20]
 800f274:	4619      	mov	r1, r3
 800f276:	f04f 0c0a 	mov.w	ip, #10
 800f27a:	4620      	mov	r0, r4
 800f27c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f280:	3a30      	subs	r2, #48	; 0x30
 800f282:	2a09      	cmp	r2, #9
 800f284:	d903      	bls.n	800f28e <_vfiprintf_r+0x1ee>
 800f286:	2b00      	cmp	r3, #0
 800f288:	d0c5      	beq.n	800f216 <_vfiprintf_r+0x176>
 800f28a:	9105      	str	r1, [sp, #20]
 800f28c:	e7c3      	b.n	800f216 <_vfiprintf_r+0x176>
 800f28e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f292:	4604      	mov	r4, r0
 800f294:	2301      	movs	r3, #1
 800f296:	e7f0      	b.n	800f27a <_vfiprintf_r+0x1da>
 800f298:	ab03      	add	r3, sp, #12
 800f29a:	9300      	str	r3, [sp, #0]
 800f29c:	462a      	mov	r2, r5
 800f29e:	4b16      	ldr	r3, [pc, #88]	; (800f2f8 <_vfiprintf_r+0x258>)
 800f2a0:	a904      	add	r1, sp, #16
 800f2a2:	4630      	mov	r0, r6
 800f2a4:	f7fc f922 	bl	800b4ec <_printf_float>
 800f2a8:	4607      	mov	r7, r0
 800f2aa:	1c78      	adds	r0, r7, #1
 800f2ac:	d1d6      	bne.n	800f25c <_vfiprintf_r+0x1bc>
 800f2ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2b0:	07d9      	lsls	r1, r3, #31
 800f2b2:	d405      	bmi.n	800f2c0 <_vfiprintf_r+0x220>
 800f2b4:	89ab      	ldrh	r3, [r5, #12]
 800f2b6:	059a      	lsls	r2, r3, #22
 800f2b8:	d402      	bmi.n	800f2c0 <_vfiprintf_r+0x220>
 800f2ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2bc:	f7ff fe7c 	bl	800efb8 <__retarget_lock_release_recursive>
 800f2c0:	89ab      	ldrh	r3, [r5, #12]
 800f2c2:	065b      	lsls	r3, r3, #25
 800f2c4:	f53f af12 	bmi.w	800f0ec <_vfiprintf_r+0x4c>
 800f2c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2ca:	e711      	b.n	800f0f0 <_vfiprintf_r+0x50>
 800f2cc:	ab03      	add	r3, sp, #12
 800f2ce:	9300      	str	r3, [sp, #0]
 800f2d0:	462a      	mov	r2, r5
 800f2d2:	4b09      	ldr	r3, [pc, #36]	; (800f2f8 <_vfiprintf_r+0x258>)
 800f2d4:	a904      	add	r1, sp, #16
 800f2d6:	4630      	mov	r0, r6
 800f2d8:	f7fc fbac 	bl	800ba34 <_printf_i>
 800f2dc:	e7e4      	b.n	800f2a8 <_vfiprintf_r+0x208>
 800f2de:	bf00      	nop
 800f2e0:	08010c14 	.word	0x08010c14
 800f2e4:	08010c34 	.word	0x08010c34
 800f2e8:	08010bf4 	.word	0x08010bf4
 800f2ec:	08010ba4 	.word	0x08010ba4
 800f2f0:	08010bae 	.word	0x08010bae
 800f2f4:	0800b4ed 	.word	0x0800b4ed
 800f2f8:	0800f07b 	.word	0x0800f07b
 800f2fc:	08010baa 	.word	0x08010baa

0800f300 <__swbuf_r>:
 800f300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f302:	460e      	mov	r6, r1
 800f304:	4614      	mov	r4, r2
 800f306:	4605      	mov	r5, r0
 800f308:	b118      	cbz	r0, 800f312 <__swbuf_r+0x12>
 800f30a:	6983      	ldr	r3, [r0, #24]
 800f30c:	b90b      	cbnz	r3, 800f312 <__swbuf_r+0x12>
 800f30e:	f000 f9d9 	bl	800f6c4 <__sinit>
 800f312:	4b21      	ldr	r3, [pc, #132]	; (800f398 <__swbuf_r+0x98>)
 800f314:	429c      	cmp	r4, r3
 800f316:	d12b      	bne.n	800f370 <__swbuf_r+0x70>
 800f318:	686c      	ldr	r4, [r5, #4]
 800f31a:	69a3      	ldr	r3, [r4, #24]
 800f31c:	60a3      	str	r3, [r4, #8]
 800f31e:	89a3      	ldrh	r3, [r4, #12]
 800f320:	071a      	lsls	r2, r3, #28
 800f322:	d52f      	bpl.n	800f384 <__swbuf_r+0x84>
 800f324:	6923      	ldr	r3, [r4, #16]
 800f326:	b36b      	cbz	r3, 800f384 <__swbuf_r+0x84>
 800f328:	6923      	ldr	r3, [r4, #16]
 800f32a:	6820      	ldr	r0, [r4, #0]
 800f32c:	1ac0      	subs	r0, r0, r3
 800f32e:	6963      	ldr	r3, [r4, #20]
 800f330:	b2f6      	uxtb	r6, r6
 800f332:	4283      	cmp	r3, r0
 800f334:	4637      	mov	r7, r6
 800f336:	dc04      	bgt.n	800f342 <__swbuf_r+0x42>
 800f338:	4621      	mov	r1, r4
 800f33a:	4628      	mov	r0, r5
 800f33c:	f000 f92e 	bl	800f59c <_fflush_r>
 800f340:	bb30      	cbnz	r0, 800f390 <__swbuf_r+0x90>
 800f342:	68a3      	ldr	r3, [r4, #8]
 800f344:	3b01      	subs	r3, #1
 800f346:	60a3      	str	r3, [r4, #8]
 800f348:	6823      	ldr	r3, [r4, #0]
 800f34a:	1c5a      	adds	r2, r3, #1
 800f34c:	6022      	str	r2, [r4, #0]
 800f34e:	701e      	strb	r6, [r3, #0]
 800f350:	6963      	ldr	r3, [r4, #20]
 800f352:	3001      	adds	r0, #1
 800f354:	4283      	cmp	r3, r0
 800f356:	d004      	beq.n	800f362 <__swbuf_r+0x62>
 800f358:	89a3      	ldrh	r3, [r4, #12]
 800f35a:	07db      	lsls	r3, r3, #31
 800f35c:	d506      	bpl.n	800f36c <__swbuf_r+0x6c>
 800f35e:	2e0a      	cmp	r6, #10
 800f360:	d104      	bne.n	800f36c <__swbuf_r+0x6c>
 800f362:	4621      	mov	r1, r4
 800f364:	4628      	mov	r0, r5
 800f366:	f000 f919 	bl	800f59c <_fflush_r>
 800f36a:	b988      	cbnz	r0, 800f390 <__swbuf_r+0x90>
 800f36c:	4638      	mov	r0, r7
 800f36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f370:	4b0a      	ldr	r3, [pc, #40]	; (800f39c <__swbuf_r+0x9c>)
 800f372:	429c      	cmp	r4, r3
 800f374:	d101      	bne.n	800f37a <__swbuf_r+0x7a>
 800f376:	68ac      	ldr	r4, [r5, #8]
 800f378:	e7cf      	b.n	800f31a <__swbuf_r+0x1a>
 800f37a:	4b09      	ldr	r3, [pc, #36]	; (800f3a0 <__swbuf_r+0xa0>)
 800f37c:	429c      	cmp	r4, r3
 800f37e:	bf08      	it	eq
 800f380:	68ec      	ldreq	r4, [r5, #12]
 800f382:	e7ca      	b.n	800f31a <__swbuf_r+0x1a>
 800f384:	4621      	mov	r1, r4
 800f386:	4628      	mov	r0, r5
 800f388:	f000 f80c 	bl	800f3a4 <__swsetup_r>
 800f38c:	2800      	cmp	r0, #0
 800f38e:	d0cb      	beq.n	800f328 <__swbuf_r+0x28>
 800f390:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f394:	e7ea      	b.n	800f36c <__swbuf_r+0x6c>
 800f396:	bf00      	nop
 800f398:	08010c14 	.word	0x08010c14
 800f39c:	08010c34 	.word	0x08010c34
 800f3a0:	08010bf4 	.word	0x08010bf4

0800f3a4 <__swsetup_r>:
 800f3a4:	4b32      	ldr	r3, [pc, #200]	; (800f470 <__swsetup_r+0xcc>)
 800f3a6:	b570      	push	{r4, r5, r6, lr}
 800f3a8:	681d      	ldr	r5, [r3, #0]
 800f3aa:	4606      	mov	r6, r0
 800f3ac:	460c      	mov	r4, r1
 800f3ae:	b125      	cbz	r5, 800f3ba <__swsetup_r+0x16>
 800f3b0:	69ab      	ldr	r3, [r5, #24]
 800f3b2:	b913      	cbnz	r3, 800f3ba <__swsetup_r+0x16>
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	f000 f985 	bl	800f6c4 <__sinit>
 800f3ba:	4b2e      	ldr	r3, [pc, #184]	; (800f474 <__swsetup_r+0xd0>)
 800f3bc:	429c      	cmp	r4, r3
 800f3be:	d10f      	bne.n	800f3e0 <__swsetup_r+0x3c>
 800f3c0:	686c      	ldr	r4, [r5, #4]
 800f3c2:	89a3      	ldrh	r3, [r4, #12]
 800f3c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3c8:	0719      	lsls	r1, r3, #28
 800f3ca:	d42c      	bmi.n	800f426 <__swsetup_r+0x82>
 800f3cc:	06dd      	lsls	r5, r3, #27
 800f3ce:	d411      	bmi.n	800f3f4 <__swsetup_r+0x50>
 800f3d0:	2309      	movs	r3, #9
 800f3d2:	6033      	str	r3, [r6, #0]
 800f3d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f3d8:	81a3      	strh	r3, [r4, #12]
 800f3da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3de:	e03e      	b.n	800f45e <__swsetup_r+0xba>
 800f3e0:	4b25      	ldr	r3, [pc, #148]	; (800f478 <__swsetup_r+0xd4>)
 800f3e2:	429c      	cmp	r4, r3
 800f3e4:	d101      	bne.n	800f3ea <__swsetup_r+0x46>
 800f3e6:	68ac      	ldr	r4, [r5, #8]
 800f3e8:	e7eb      	b.n	800f3c2 <__swsetup_r+0x1e>
 800f3ea:	4b24      	ldr	r3, [pc, #144]	; (800f47c <__swsetup_r+0xd8>)
 800f3ec:	429c      	cmp	r4, r3
 800f3ee:	bf08      	it	eq
 800f3f0:	68ec      	ldreq	r4, [r5, #12]
 800f3f2:	e7e6      	b.n	800f3c2 <__swsetup_r+0x1e>
 800f3f4:	0758      	lsls	r0, r3, #29
 800f3f6:	d512      	bpl.n	800f41e <__swsetup_r+0x7a>
 800f3f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3fa:	b141      	cbz	r1, 800f40e <__swsetup_r+0x6a>
 800f3fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f400:	4299      	cmp	r1, r3
 800f402:	d002      	beq.n	800f40a <__swsetup_r+0x66>
 800f404:	4630      	mov	r0, r6
 800f406:	f7fb fef1 	bl	800b1ec <_free_r>
 800f40a:	2300      	movs	r3, #0
 800f40c:	6363      	str	r3, [r4, #52]	; 0x34
 800f40e:	89a3      	ldrh	r3, [r4, #12]
 800f410:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f414:	81a3      	strh	r3, [r4, #12]
 800f416:	2300      	movs	r3, #0
 800f418:	6063      	str	r3, [r4, #4]
 800f41a:	6923      	ldr	r3, [r4, #16]
 800f41c:	6023      	str	r3, [r4, #0]
 800f41e:	89a3      	ldrh	r3, [r4, #12]
 800f420:	f043 0308 	orr.w	r3, r3, #8
 800f424:	81a3      	strh	r3, [r4, #12]
 800f426:	6923      	ldr	r3, [r4, #16]
 800f428:	b94b      	cbnz	r3, 800f43e <__swsetup_r+0x9a>
 800f42a:	89a3      	ldrh	r3, [r4, #12]
 800f42c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f434:	d003      	beq.n	800f43e <__swsetup_r+0x9a>
 800f436:	4621      	mov	r1, r4
 800f438:	4630      	mov	r0, r6
 800f43a:	f000 fa05 	bl	800f848 <__smakebuf_r>
 800f43e:	89a0      	ldrh	r0, [r4, #12]
 800f440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f444:	f010 0301 	ands.w	r3, r0, #1
 800f448:	d00a      	beq.n	800f460 <__swsetup_r+0xbc>
 800f44a:	2300      	movs	r3, #0
 800f44c:	60a3      	str	r3, [r4, #8]
 800f44e:	6963      	ldr	r3, [r4, #20]
 800f450:	425b      	negs	r3, r3
 800f452:	61a3      	str	r3, [r4, #24]
 800f454:	6923      	ldr	r3, [r4, #16]
 800f456:	b943      	cbnz	r3, 800f46a <__swsetup_r+0xc6>
 800f458:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f45c:	d1ba      	bne.n	800f3d4 <__swsetup_r+0x30>
 800f45e:	bd70      	pop	{r4, r5, r6, pc}
 800f460:	0781      	lsls	r1, r0, #30
 800f462:	bf58      	it	pl
 800f464:	6963      	ldrpl	r3, [r4, #20]
 800f466:	60a3      	str	r3, [r4, #8]
 800f468:	e7f4      	b.n	800f454 <__swsetup_r+0xb0>
 800f46a:	2000      	movs	r0, #0
 800f46c:	e7f7      	b.n	800f45e <__swsetup_r+0xba>
 800f46e:	bf00      	nop
 800f470:	20000230 	.word	0x20000230
 800f474:	08010c14 	.word	0x08010c14
 800f478:	08010c34 	.word	0x08010c34
 800f47c:	08010bf4 	.word	0x08010bf4

0800f480 <abort>:
 800f480:	b508      	push	{r3, lr}
 800f482:	2006      	movs	r0, #6
 800f484:	f000 fa50 	bl	800f928 <raise>
 800f488:	2001      	movs	r0, #1
 800f48a:	f7f3 f805 	bl	8002498 <_exit>
	...

0800f490 <__sflush_r>:
 800f490:	898a      	ldrh	r2, [r1, #12]
 800f492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f496:	4605      	mov	r5, r0
 800f498:	0710      	lsls	r0, r2, #28
 800f49a:	460c      	mov	r4, r1
 800f49c:	d458      	bmi.n	800f550 <__sflush_r+0xc0>
 800f49e:	684b      	ldr	r3, [r1, #4]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	dc05      	bgt.n	800f4b0 <__sflush_r+0x20>
 800f4a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	dc02      	bgt.n	800f4b0 <__sflush_r+0x20>
 800f4aa:	2000      	movs	r0, #0
 800f4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4b2:	2e00      	cmp	r6, #0
 800f4b4:	d0f9      	beq.n	800f4aa <__sflush_r+0x1a>
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f4bc:	682f      	ldr	r7, [r5, #0]
 800f4be:	602b      	str	r3, [r5, #0]
 800f4c0:	d032      	beq.n	800f528 <__sflush_r+0x98>
 800f4c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f4c4:	89a3      	ldrh	r3, [r4, #12]
 800f4c6:	075a      	lsls	r2, r3, #29
 800f4c8:	d505      	bpl.n	800f4d6 <__sflush_r+0x46>
 800f4ca:	6863      	ldr	r3, [r4, #4]
 800f4cc:	1ac0      	subs	r0, r0, r3
 800f4ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f4d0:	b10b      	cbz	r3, 800f4d6 <__sflush_r+0x46>
 800f4d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f4d4:	1ac0      	subs	r0, r0, r3
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	4602      	mov	r2, r0
 800f4da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4dc:	6a21      	ldr	r1, [r4, #32]
 800f4de:	4628      	mov	r0, r5
 800f4e0:	47b0      	blx	r6
 800f4e2:	1c43      	adds	r3, r0, #1
 800f4e4:	89a3      	ldrh	r3, [r4, #12]
 800f4e6:	d106      	bne.n	800f4f6 <__sflush_r+0x66>
 800f4e8:	6829      	ldr	r1, [r5, #0]
 800f4ea:	291d      	cmp	r1, #29
 800f4ec:	d82c      	bhi.n	800f548 <__sflush_r+0xb8>
 800f4ee:	4a2a      	ldr	r2, [pc, #168]	; (800f598 <__sflush_r+0x108>)
 800f4f0:	40ca      	lsrs	r2, r1
 800f4f2:	07d6      	lsls	r6, r2, #31
 800f4f4:	d528      	bpl.n	800f548 <__sflush_r+0xb8>
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	6062      	str	r2, [r4, #4]
 800f4fa:	04d9      	lsls	r1, r3, #19
 800f4fc:	6922      	ldr	r2, [r4, #16]
 800f4fe:	6022      	str	r2, [r4, #0]
 800f500:	d504      	bpl.n	800f50c <__sflush_r+0x7c>
 800f502:	1c42      	adds	r2, r0, #1
 800f504:	d101      	bne.n	800f50a <__sflush_r+0x7a>
 800f506:	682b      	ldr	r3, [r5, #0]
 800f508:	b903      	cbnz	r3, 800f50c <__sflush_r+0x7c>
 800f50a:	6560      	str	r0, [r4, #84]	; 0x54
 800f50c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f50e:	602f      	str	r7, [r5, #0]
 800f510:	2900      	cmp	r1, #0
 800f512:	d0ca      	beq.n	800f4aa <__sflush_r+0x1a>
 800f514:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f518:	4299      	cmp	r1, r3
 800f51a:	d002      	beq.n	800f522 <__sflush_r+0x92>
 800f51c:	4628      	mov	r0, r5
 800f51e:	f7fb fe65 	bl	800b1ec <_free_r>
 800f522:	2000      	movs	r0, #0
 800f524:	6360      	str	r0, [r4, #52]	; 0x34
 800f526:	e7c1      	b.n	800f4ac <__sflush_r+0x1c>
 800f528:	6a21      	ldr	r1, [r4, #32]
 800f52a:	2301      	movs	r3, #1
 800f52c:	4628      	mov	r0, r5
 800f52e:	47b0      	blx	r6
 800f530:	1c41      	adds	r1, r0, #1
 800f532:	d1c7      	bne.n	800f4c4 <__sflush_r+0x34>
 800f534:	682b      	ldr	r3, [r5, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d0c4      	beq.n	800f4c4 <__sflush_r+0x34>
 800f53a:	2b1d      	cmp	r3, #29
 800f53c:	d001      	beq.n	800f542 <__sflush_r+0xb2>
 800f53e:	2b16      	cmp	r3, #22
 800f540:	d101      	bne.n	800f546 <__sflush_r+0xb6>
 800f542:	602f      	str	r7, [r5, #0]
 800f544:	e7b1      	b.n	800f4aa <__sflush_r+0x1a>
 800f546:	89a3      	ldrh	r3, [r4, #12]
 800f548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f54c:	81a3      	strh	r3, [r4, #12]
 800f54e:	e7ad      	b.n	800f4ac <__sflush_r+0x1c>
 800f550:	690f      	ldr	r7, [r1, #16]
 800f552:	2f00      	cmp	r7, #0
 800f554:	d0a9      	beq.n	800f4aa <__sflush_r+0x1a>
 800f556:	0793      	lsls	r3, r2, #30
 800f558:	680e      	ldr	r6, [r1, #0]
 800f55a:	bf08      	it	eq
 800f55c:	694b      	ldreq	r3, [r1, #20]
 800f55e:	600f      	str	r7, [r1, #0]
 800f560:	bf18      	it	ne
 800f562:	2300      	movne	r3, #0
 800f564:	eba6 0807 	sub.w	r8, r6, r7
 800f568:	608b      	str	r3, [r1, #8]
 800f56a:	f1b8 0f00 	cmp.w	r8, #0
 800f56e:	dd9c      	ble.n	800f4aa <__sflush_r+0x1a>
 800f570:	6a21      	ldr	r1, [r4, #32]
 800f572:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f574:	4643      	mov	r3, r8
 800f576:	463a      	mov	r2, r7
 800f578:	4628      	mov	r0, r5
 800f57a:	47b0      	blx	r6
 800f57c:	2800      	cmp	r0, #0
 800f57e:	dc06      	bgt.n	800f58e <__sflush_r+0xfe>
 800f580:	89a3      	ldrh	r3, [r4, #12]
 800f582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f586:	81a3      	strh	r3, [r4, #12]
 800f588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f58c:	e78e      	b.n	800f4ac <__sflush_r+0x1c>
 800f58e:	4407      	add	r7, r0
 800f590:	eba8 0800 	sub.w	r8, r8, r0
 800f594:	e7e9      	b.n	800f56a <__sflush_r+0xda>
 800f596:	bf00      	nop
 800f598:	20400001 	.word	0x20400001

0800f59c <_fflush_r>:
 800f59c:	b538      	push	{r3, r4, r5, lr}
 800f59e:	690b      	ldr	r3, [r1, #16]
 800f5a0:	4605      	mov	r5, r0
 800f5a2:	460c      	mov	r4, r1
 800f5a4:	b913      	cbnz	r3, 800f5ac <_fflush_r+0x10>
 800f5a6:	2500      	movs	r5, #0
 800f5a8:	4628      	mov	r0, r5
 800f5aa:	bd38      	pop	{r3, r4, r5, pc}
 800f5ac:	b118      	cbz	r0, 800f5b6 <_fflush_r+0x1a>
 800f5ae:	6983      	ldr	r3, [r0, #24]
 800f5b0:	b90b      	cbnz	r3, 800f5b6 <_fflush_r+0x1a>
 800f5b2:	f000 f887 	bl	800f6c4 <__sinit>
 800f5b6:	4b14      	ldr	r3, [pc, #80]	; (800f608 <_fflush_r+0x6c>)
 800f5b8:	429c      	cmp	r4, r3
 800f5ba:	d11b      	bne.n	800f5f4 <_fflush_r+0x58>
 800f5bc:	686c      	ldr	r4, [r5, #4]
 800f5be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d0ef      	beq.n	800f5a6 <_fflush_r+0xa>
 800f5c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f5c8:	07d0      	lsls	r0, r2, #31
 800f5ca:	d404      	bmi.n	800f5d6 <_fflush_r+0x3a>
 800f5cc:	0599      	lsls	r1, r3, #22
 800f5ce:	d402      	bmi.n	800f5d6 <_fflush_r+0x3a>
 800f5d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5d2:	f7ff fcf0 	bl	800efb6 <__retarget_lock_acquire_recursive>
 800f5d6:	4628      	mov	r0, r5
 800f5d8:	4621      	mov	r1, r4
 800f5da:	f7ff ff59 	bl	800f490 <__sflush_r>
 800f5de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5e0:	07da      	lsls	r2, r3, #31
 800f5e2:	4605      	mov	r5, r0
 800f5e4:	d4e0      	bmi.n	800f5a8 <_fflush_r+0xc>
 800f5e6:	89a3      	ldrh	r3, [r4, #12]
 800f5e8:	059b      	lsls	r3, r3, #22
 800f5ea:	d4dd      	bmi.n	800f5a8 <_fflush_r+0xc>
 800f5ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5ee:	f7ff fce3 	bl	800efb8 <__retarget_lock_release_recursive>
 800f5f2:	e7d9      	b.n	800f5a8 <_fflush_r+0xc>
 800f5f4:	4b05      	ldr	r3, [pc, #20]	; (800f60c <_fflush_r+0x70>)
 800f5f6:	429c      	cmp	r4, r3
 800f5f8:	d101      	bne.n	800f5fe <_fflush_r+0x62>
 800f5fa:	68ac      	ldr	r4, [r5, #8]
 800f5fc:	e7df      	b.n	800f5be <_fflush_r+0x22>
 800f5fe:	4b04      	ldr	r3, [pc, #16]	; (800f610 <_fflush_r+0x74>)
 800f600:	429c      	cmp	r4, r3
 800f602:	bf08      	it	eq
 800f604:	68ec      	ldreq	r4, [r5, #12]
 800f606:	e7da      	b.n	800f5be <_fflush_r+0x22>
 800f608:	08010c14 	.word	0x08010c14
 800f60c:	08010c34 	.word	0x08010c34
 800f610:	08010bf4 	.word	0x08010bf4

0800f614 <std>:
 800f614:	2300      	movs	r3, #0
 800f616:	b510      	push	{r4, lr}
 800f618:	4604      	mov	r4, r0
 800f61a:	e9c0 3300 	strd	r3, r3, [r0]
 800f61e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f622:	6083      	str	r3, [r0, #8]
 800f624:	8181      	strh	r1, [r0, #12]
 800f626:	6643      	str	r3, [r0, #100]	; 0x64
 800f628:	81c2      	strh	r2, [r0, #14]
 800f62a:	6183      	str	r3, [r0, #24]
 800f62c:	4619      	mov	r1, r3
 800f62e:	2208      	movs	r2, #8
 800f630:	305c      	adds	r0, #92	; 0x5c
 800f632:	f7fb fdd3 	bl	800b1dc <memset>
 800f636:	4b05      	ldr	r3, [pc, #20]	; (800f64c <std+0x38>)
 800f638:	6263      	str	r3, [r4, #36]	; 0x24
 800f63a:	4b05      	ldr	r3, [pc, #20]	; (800f650 <std+0x3c>)
 800f63c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f63e:	4b05      	ldr	r3, [pc, #20]	; (800f654 <std+0x40>)
 800f640:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f642:	4b05      	ldr	r3, [pc, #20]	; (800f658 <std+0x44>)
 800f644:	6224      	str	r4, [r4, #32]
 800f646:	6323      	str	r3, [r4, #48]	; 0x30
 800f648:	bd10      	pop	{r4, pc}
 800f64a:	bf00      	nop
 800f64c:	0800f961 	.word	0x0800f961
 800f650:	0800f983 	.word	0x0800f983
 800f654:	0800f9bb 	.word	0x0800f9bb
 800f658:	0800f9df 	.word	0x0800f9df

0800f65c <_cleanup_r>:
 800f65c:	4901      	ldr	r1, [pc, #4]	; (800f664 <_cleanup_r+0x8>)
 800f65e:	f000 b8af 	b.w	800f7c0 <_fwalk_reent>
 800f662:	bf00      	nop
 800f664:	0800f59d 	.word	0x0800f59d

0800f668 <__sfmoreglue>:
 800f668:	b570      	push	{r4, r5, r6, lr}
 800f66a:	2268      	movs	r2, #104	; 0x68
 800f66c:	1e4d      	subs	r5, r1, #1
 800f66e:	4355      	muls	r5, r2
 800f670:	460e      	mov	r6, r1
 800f672:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f676:	f7fb fe25 	bl	800b2c4 <_malloc_r>
 800f67a:	4604      	mov	r4, r0
 800f67c:	b140      	cbz	r0, 800f690 <__sfmoreglue+0x28>
 800f67e:	2100      	movs	r1, #0
 800f680:	e9c0 1600 	strd	r1, r6, [r0]
 800f684:	300c      	adds	r0, #12
 800f686:	60a0      	str	r0, [r4, #8]
 800f688:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f68c:	f7fb fda6 	bl	800b1dc <memset>
 800f690:	4620      	mov	r0, r4
 800f692:	bd70      	pop	{r4, r5, r6, pc}

0800f694 <__sfp_lock_acquire>:
 800f694:	4801      	ldr	r0, [pc, #4]	; (800f69c <__sfp_lock_acquire+0x8>)
 800f696:	f7ff bc8e 	b.w	800efb6 <__retarget_lock_acquire_recursive>
 800f69a:	bf00      	nop
 800f69c:	200027a1 	.word	0x200027a1

0800f6a0 <__sfp_lock_release>:
 800f6a0:	4801      	ldr	r0, [pc, #4]	; (800f6a8 <__sfp_lock_release+0x8>)
 800f6a2:	f7ff bc89 	b.w	800efb8 <__retarget_lock_release_recursive>
 800f6a6:	bf00      	nop
 800f6a8:	200027a1 	.word	0x200027a1

0800f6ac <__sinit_lock_acquire>:
 800f6ac:	4801      	ldr	r0, [pc, #4]	; (800f6b4 <__sinit_lock_acquire+0x8>)
 800f6ae:	f7ff bc82 	b.w	800efb6 <__retarget_lock_acquire_recursive>
 800f6b2:	bf00      	nop
 800f6b4:	200027a2 	.word	0x200027a2

0800f6b8 <__sinit_lock_release>:
 800f6b8:	4801      	ldr	r0, [pc, #4]	; (800f6c0 <__sinit_lock_release+0x8>)
 800f6ba:	f7ff bc7d 	b.w	800efb8 <__retarget_lock_release_recursive>
 800f6be:	bf00      	nop
 800f6c0:	200027a2 	.word	0x200027a2

0800f6c4 <__sinit>:
 800f6c4:	b510      	push	{r4, lr}
 800f6c6:	4604      	mov	r4, r0
 800f6c8:	f7ff fff0 	bl	800f6ac <__sinit_lock_acquire>
 800f6cc:	69a3      	ldr	r3, [r4, #24]
 800f6ce:	b11b      	cbz	r3, 800f6d8 <__sinit+0x14>
 800f6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6d4:	f7ff bff0 	b.w	800f6b8 <__sinit_lock_release>
 800f6d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f6dc:	6523      	str	r3, [r4, #80]	; 0x50
 800f6de:	4b13      	ldr	r3, [pc, #76]	; (800f72c <__sinit+0x68>)
 800f6e0:	4a13      	ldr	r2, [pc, #76]	; (800f730 <__sinit+0x6c>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800f6e6:	42a3      	cmp	r3, r4
 800f6e8:	bf04      	itt	eq
 800f6ea:	2301      	moveq	r3, #1
 800f6ec:	61a3      	streq	r3, [r4, #24]
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	f000 f820 	bl	800f734 <__sfp>
 800f6f4:	6060      	str	r0, [r4, #4]
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	f000 f81c 	bl	800f734 <__sfp>
 800f6fc:	60a0      	str	r0, [r4, #8]
 800f6fe:	4620      	mov	r0, r4
 800f700:	f000 f818 	bl	800f734 <__sfp>
 800f704:	2200      	movs	r2, #0
 800f706:	60e0      	str	r0, [r4, #12]
 800f708:	2104      	movs	r1, #4
 800f70a:	6860      	ldr	r0, [r4, #4]
 800f70c:	f7ff ff82 	bl	800f614 <std>
 800f710:	68a0      	ldr	r0, [r4, #8]
 800f712:	2201      	movs	r2, #1
 800f714:	2109      	movs	r1, #9
 800f716:	f7ff ff7d 	bl	800f614 <std>
 800f71a:	68e0      	ldr	r0, [r4, #12]
 800f71c:	2202      	movs	r2, #2
 800f71e:	2112      	movs	r1, #18
 800f720:	f7ff ff78 	bl	800f614 <std>
 800f724:	2301      	movs	r3, #1
 800f726:	61a3      	str	r3, [r4, #24]
 800f728:	e7d2      	b.n	800f6d0 <__sinit+0xc>
 800f72a:	bf00      	nop
 800f72c:	080107ac 	.word	0x080107ac
 800f730:	0800f65d 	.word	0x0800f65d

0800f734 <__sfp>:
 800f734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f736:	4607      	mov	r7, r0
 800f738:	f7ff ffac 	bl	800f694 <__sfp_lock_acquire>
 800f73c:	4b1e      	ldr	r3, [pc, #120]	; (800f7b8 <__sfp+0x84>)
 800f73e:	681e      	ldr	r6, [r3, #0]
 800f740:	69b3      	ldr	r3, [r6, #24]
 800f742:	b913      	cbnz	r3, 800f74a <__sfp+0x16>
 800f744:	4630      	mov	r0, r6
 800f746:	f7ff ffbd 	bl	800f6c4 <__sinit>
 800f74a:	3648      	adds	r6, #72	; 0x48
 800f74c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f750:	3b01      	subs	r3, #1
 800f752:	d503      	bpl.n	800f75c <__sfp+0x28>
 800f754:	6833      	ldr	r3, [r6, #0]
 800f756:	b30b      	cbz	r3, 800f79c <__sfp+0x68>
 800f758:	6836      	ldr	r6, [r6, #0]
 800f75a:	e7f7      	b.n	800f74c <__sfp+0x18>
 800f75c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f760:	b9d5      	cbnz	r5, 800f798 <__sfp+0x64>
 800f762:	4b16      	ldr	r3, [pc, #88]	; (800f7bc <__sfp+0x88>)
 800f764:	60e3      	str	r3, [r4, #12]
 800f766:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f76a:	6665      	str	r5, [r4, #100]	; 0x64
 800f76c:	f7ff fc22 	bl	800efb4 <__retarget_lock_init_recursive>
 800f770:	f7ff ff96 	bl	800f6a0 <__sfp_lock_release>
 800f774:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f778:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f77c:	6025      	str	r5, [r4, #0]
 800f77e:	61a5      	str	r5, [r4, #24]
 800f780:	2208      	movs	r2, #8
 800f782:	4629      	mov	r1, r5
 800f784:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f788:	f7fb fd28 	bl	800b1dc <memset>
 800f78c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f790:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f794:	4620      	mov	r0, r4
 800f796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f798:	3468      	adds	r4, #104	; 0x68
 800f79a:	e7d9      	b.n	800f750 <__sfp+0x1c>
 800f79c:	2104      	movs	r1, #4
 800f79e:	4638      	mov	r0, r7
 800f7a0:	f7ff ff62 	bl	800f668 <__sfmoreglue>
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	6030      	str	r0, [r6, #0]
 800f7a8:	2800      	cmp	r0, #0
 800f7aa:	d1d5      	bne.n	800f758 <__sfp+0x24>
 800f7ac:	f7ff ff78 	bl	800f6a0 <__sfp_lock_release>
 800f7b0:	230c      	movs	r3, #12
 800f7b2:	603b      	str	r3, [r7, #0]
 800f7b4:	e7ee      	b.n	800f794 <__sfp+0x60>
 800f7b6:	bf00      	nop
 800f7b8:	080107ac 	.word	0x080107ac
 800f7bc:	ffff0001 	.word	0xffff0001

0800f7c0 <_fwalk_reent>:
 800f7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7c4:	4606      	mov	r6, r0
 800f7c6:	4688      	mov	r8, r1
 800f7c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f7cc:	2700      	movs	r7, #0
 800f7ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f7d2:	f1b9 0901 	subs.w	r9, r9, #1
 800f7d6:	d505      	bpl.n	800f7e4 <_fwalk_reent+0x24>
 800f7d8:	6824      	ldr	r4, [r4, #0]
 800f7da:	2c00      	cmp	r4, #0
 800f7dc:	d1f7      	bne.n	800f7ce <_fwalk_reent+0xe>
 800f7de:	4638      	mov	r0, r7
 800f7e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7e4:	89ab      	ldrh	r3, [r5, #12]
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d907      	bls.n	800f7fa <_fwalk_reent+0x3a>
 800f7ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	d003      	beq.n	800f7fa <_fwalk_reent+0x3a>
 800f7f2:	4629      	mov	r1, r5
 800f7f4:	4630      	mov	r0, r6
 800f7f6:	47c0      	blx	r8
 800f7f8:	4307      	orrs	r7, r0
 800f7fa:	3568      	adds	r5, #104	; 0x68
 800f7fc:	e7e9      	b.n	800f7d2 <_fwalk_reent+0x12>

0800f7fe <__swhatbuf_r>:
 800f7fe:	b570      	push	{r4, r5, r6, lr}
 800f800:	460e      	mov	r6, r1
 800f802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f806:	2900      	cmp	r1, #0
 800f808:	b096      	sub	sp, #88	; 0x58
 800f80a:	4614      	mov	r4, r2
 800f80c:	461d      	mov	r5, r3
 800f80e:	da08      	bge.n	800f822 <__swhatbuf_r+0x24>
 800f810:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f814:	2200      	movs	r2, #0
 800f816:	602a      	str	r2, [r5, #0]
 800f818:	061a      	lsls	r2, r3, #24
 800f81a:	d410      	bmi.n	800f83e <__swhatbuf_r+0x40>
 800f81c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f820:	e00e      	b.n	800f840 <__swhatbuf_r+0x42>
 800f822:	466a      	mov	r2, sp
 800f824:	f000 f902 	bl	800fa2c <_fstat_r>
 800f828:	2800      	cmp	r0, #0
 800f82a:	dbf1      	blt.n	800f810 <__swhatbuf_r+0x12>
 800f82c:	9a01      	ldr	r2, [sp, #4]
 800f82e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f832:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f836:	425a      	negs	r2, r3
 800f838:	415a      	adcs	r2, r3
 800f83a:	602a      	str	r2, [r5, #0]
 800f83c:	e7ee      	b.n	800f81c <__swhatbuf_r+0x1e>
 800f83e:	2340      	movs	r3, #64	; 0x40
 800f840:	2000      	movs	r0, #0
 800f842:	6023      	str	r3, [r4, #0]
 800f844:	b016      	add	sp, #88	; 0x58
 800f846:	bd70      	pop	{r4, r5, r6, pc}

0800f848 <__smakebuf_r>:
 800f848:	898b      	ldrh	r3, [r1, #12]
 800f84a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f84c:	079d      	lsls	r5, r3, #30
 800f84e:	4606      	mov	r6, r0
 800f850:	460c      	mov	r4, r1
 800f852:	d507      	bpl.n	800f864 <__smakebuf_r+0x1c>
 800f854:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f858:	6023      	str	r3, [r4, #0]
 800f85a:	6123      	str	r3, [r4, #16]
 800f85c:	2301      	movs	r3, #1
 800f85e:	6163      	str	r3, [r4, #20]
 800f860:	b002      	add	sp, #8
 800f862:	bd70      	pop	{r4, r5, r6, pc}
 800f864:	ab01      	add	r3, sp, #4
 800f866:	466a      	mov	r2, sp
 800f868:	f7ff ffc9 	bl	800f7fe <__swhatbuf_r>
 800f86c:	9900      	ldr	r1, [sp, #0]
 800f86e:	4605      	mov	r5, r0
 800f870:	4630      	mov	r0, r6
 800f872:	f7fb fd27 	bl	800b2c4 <_malloc_r>
 800f876:	b948      	cbnz	r0, 800f88c <__smakebuf_r+0x44>
 800f878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f87c:	059a      	lsls	r2, r3, #22
 800f87e:	d4ef      	bmi.n	800f860 <__smakebuf_r+0x18>
 800f880:	f023 0303 	bic.w	r3, r3, #3
 800f884:	f043 0302 	orr.w	r3, r3, #2
 800f888:	81a3      	strh	r3, [r4, #12]
 800f88a:	e7e3      	b.n	800f854 <__smakebuf_r+0xc>
 800f88c:	4b0d      	ldr	r3, [pc, #52]	; (800f8c4 <__smakebuf_r+0x7c>)
 800f88e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f890:	89a3      	ldrh	r3, [r4, #12]
 800f892:	6020      	str	r0, [r4, #0]
 800f894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f898:	81a3      	strh	r3, [r4, #12]
 800f89a:	9b00      	ldr	r3, [sp, #0]
 800f89c:	6163      	str	r3, [r4, #20]
 800f89e:	9b01      	ldr	r3, [sp, #4]
 800f8a0:	6120      	str	r0, [r4, #16]
 800f8a2:	b15b      	cbz	r3, 800f8bc <__smakebuf_r+0x74>
 800f8a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8a8:	4630      	mov	r0, r6
 800f8aa:	f000 f8d1 	bl	800fa50 <_isatty_r>
 800f8ae:	b128      	cbz	r0, 800f8bc <__smakebuf_r+0x74>
 800f8b0:	89a3      	ldrh	r3, [r4, #12]
 800f8b2:	f023 0303 	bic.w	r3, r3, #3
 800f8b6:	f043 0301 	orr.w	r3, r3, #1
 800f8ba:	81a3      	strh	r3, [r4, #12]
 800f8bc:	89a0      	ldrh	r0, [r4, #12]
 800f8be:	4305      	orrs	r5, r0
 800f8c0:	81a5      	strh	r5, [r4, #12]
 800f8c2:	e7cd      	b.n	800f860 <__smakebuf_r+0x18>
 800f8c4:	0800f65d 	.word	0x0800f65d

0800f8c8 <_malloc_usable_size_r>:
 800f8c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8cc:	1f18      	subs	r0, r3, #4
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	bfbc      	itt	lt
 800f8d2:	580b      	ldrlt	r3, [r1, r0]
 800f8d4:	18c0      	addlt	r0, r0, r3
 800f8d6:	4770      	bx	lr

0800f8d8 <_raise_r>:
 800f8d8:	291f      	cmp	r1, #31
 800f8da:	b538      	push	{r3, r4, r5, lr}
 800f8dc:	4604      	mov	r4, r0
 800f8de:	460d      	mov	r5, r1
 800f8e0:	d904      	bls.n	800f8ec <_raise_r+0x14>
 800f8e2:	2316      	movs	r3, #22
 800f8e4:	6003      	str	r3, [r0, #0]
 800f8e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8ea:	bd38      	pop	{r3, r4, r5, pc}
 800f8ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f8ee:	b112      	cbz	r2, 800f8f6 <_raise_r+0x1e>
 800f8f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f8f4:	b94b      	cbnz	r3, 800f90a <_raise_r+0x32>
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	f000 f830 	bl	800f95c <_getpid_r>
 800f8fc:	462a      	mov	r2, r5
 800f8fe:	4601      	mov	r1, r0
 800f900:	4620      	mov	r0, r4
 800f902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f906:	f000 b817 	b.w	800f938 <_kill_r>
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	d00a      	beq.n	800f924 <_raise_r+0x4c>
 800f90e:	1c59      	adds	r1, r3, #1
 800f910:	d103      	bne.n	800f91a <_raise_r+0x42>
 800f912:	2316      	movs	r3, #22
 800f914:	6003      	str	r3, [r0, #0]
 800f916:	2001      	movs	r0, #1
 800f918:	e7e7      	b.n	800f8ea <_raise_r+0x12>
 800f91a:	2400      	movs	r4, #0
 800f91c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f920:	4628      	mov	r0, r5
 800f922:	4798      	blx	r3
 800f924:	2000      	movs	r0, #0
 800f926:	e7e0      	b.n	800f8ea <_raise_r+0x12>

0800f928 <raise>:
 800f928:	4b02      	ldr	r3, [pc, #8]	; (800f934 <raise+0xc>)
 800f92a:	4601      	mov	r1, r0
 800f92c:	6818      	ldr	r0, [r3, #0]
 800f92e:	f7ff bfd3 	b.w	800f8d8 <_raise_r>
 800f932:	bf00      	nop
 800f934:	20000230 	.word	0x20000230

0800f938 <_kill_r>:
 800f938:	b538      	push	{r3, r4, r5, lr}
 800f93a:	4d07      	ldr	r5, [pc, #28]	; (800f958 <_kill_r+0x20>)
 800f93c:	2300      	movs	r3, #0
 800f93e:	4604      	mov	r4, r0
 800f940:	4608      	mov	r0, r1
 800f942:	4611      	mov	r1, r2
 800f944:	602b      	str	r3, [r5, #0]
 800f946:	f7f2 fd9f 	bl	8002488 <_kill>
 800f94a:	1c43      	adds	r3, r0, #1
 800f94c:	d102      	bne.n	800f954 <_kill_r+0x1c>
 800f94e:	682b      	ldr	r3, [r5, #0]
 800f950:	b103      	cbz	r3, 800f954 <_kill_r+0x1c>
 800f952:	6023      	str	r3, [r4, #0]
 800f954:	bd38      	pop	{r3, r4, r5, pc}
 800f956:	bf00      	nop
 800f958:	2000279c 	.word	0x2000279c

0800f95c <_getpid_r>:
 800f95c:	f7f2 bd92 	b.w	8002484 <_getpid>

0800f960 <__sread>:
 800f960:	b510      	push	{r4, lr}
 800f962:	460c      	mov	r4, r1
 800f964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f968:	f000 f894 	bl	800fa94 <_read_r>
 800f96c:	2800      	cmp	r0, #0
 800f96e:	bfab      	itete	ge
 800f970:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f972:	89a3      	ldrhlt	r3, [r4, #12]
 800f974:	181b      	addge	r3, r3, r0
 800f976:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f97a:	bfac      	ite	ge
 800f97c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f97e:	81a3      	strhlt	r3, [r4, #12]
 800f980:	bd10      	pop	{r4, pc}

0800f982 <__swrite>:
 800f982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f986:	461f      	mov	r7, r3
 800f988:	898b      	ldrh	r3, [r1, #12]
 800f98a:	05db      	lsls	r3, r3, #23
 800f98c:	4605      	mov	r5, r0
 800f98e:	460c      	mov	r4, r1
 800f990:	4616      	mov	r6, r2
 800f992:	d505      	bpl.n	800f9a0 <__swrite+0x1e>
 800f994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f998:	2302      	movs	r3, #2
 800f99a:	2200      	movs	r2, #0
 800f99c:	f000 f868 	bl	800fa70 <_lseek_r>
 800f9a0:	89a3      	ldrh	r3, [r4, #12]
 800f9a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9aa:	81a3      	strh	r3, [r4, #12]
 800f9ac:	4632      	mov	r2, r6
 800f9ae:	463b      	mov	r3, r7
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9b6:	f000 b817 	b.w	800f9e8 <_write_r>

0800f9ba <__sseek>:
 800f9ba:	b510      	push	{r4, lr}
 800f9bc:	460c      	mov	r4, r1
 800f9be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9c2:	f000 f855 	bl	800fa70 <_lseek_r>
 800f9c6:	1c43      	adds	r3, r0, #1
 800f9c8:	89a3      	ldrh	r3, [r4, #12]
 800f9ca:	bf15      	itete	ne
 800f9cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800f9ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f9d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f9d6:	81a3      	strheq	r3, [r4, #12]
 800f9d8:	bf18      	it	ne
 800f9da:	81a3      	strhne	r3, [r4, #12]
 800f9dc:	bd10      	pop	{r4, pc}

0800f9de <__sclose>:
 800f9de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9e2:	f000 b813 	b.w	800fa0c <_close_r>
	...

0800f9e8 <_write_r>:
 800f9e8:	b538      	push	{r3, r4, r5, lr}
 800f9ea:	4d07      	ldr	r5, [pc, #28]	; (800fa08 <_write_r+0x20>)
 800f9ec:	4604      	mov	r4, r0
 800f9ee:	4608      	mov	r0, r1
 800f9f0:	4611      	mov	r1, r2
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	602a      	str	r2, [r5, #0]
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	f7f2 fd64 	bl	80024c4 <_write>
 800f9fc:	1c43      	adds	r3, r0, #1
 800f9fe:	d102      	bne.n	800fa06 <_write_r+0x1e>
 800fa00:	682b      	ldr	r3, [r5, #0]
 800fa02:	b103      	cbz	r3, 800fa06 <_write_r+0x1e>
 800fa04:	6023      	str	r3, [r4, #0]
 800fa06:	bd38      	pop	{r3, r4, r5, pc}
 800fa08:	2000279c 	.word	0x2000279c

0800fa0c <_close_r>:
 800fa0c:	b538      	push	{r3, r4, r5, lr}
 800fa0e:	4d06      	ldr	r5, [pc, #24]	; (800fa28 <_close_r+0x1c>)
 800fa10:	2300      	movs	r3, #0
 800fa12:	4604      	mov	r4, r0
 800fa14:	4608      	mov	r0, r1
 800fa16:	602b      	str	r3, [r5, #0]
 800fa18:	f7f2 fd62 	bl	80024e0 <_close>
 800fa1c:	1c43      	adds	r3, r0, #1
 800fa1e:	d102      	bne.n	800fa26 <_close_r+0x1a>
 800fa20:	682b      	ldr	r3, [r5, #0]
 800fa22:	b103      	cbz	r3, 800fa26 <_close_r+0x1a>
 800fa24:	6023      	str	r3, [r4, #0]
 800fa26:	bd38      	pop	{r3, r4, r5, pc}
 800fa28:	2000279c 	.word	0x2000279c

0800fa2c <_fstat_r>:
 800fa2c:	b538      	push	{r3, r4, r5, lr}
 800fa2e:	4d07      	ldr	r5, [pc, #28]	; (800fa4c <_fstat_r+0x20>)
 800fa30:	2300      	movs	r3, #0
 800fa32:	4604      	mov	r4, r0
 800fa34:	4608      	mov	r0, r1
 800fa36:	4611      	mov	r1, r2
 800fa38:	602b      	str	r3, [r5, #0]
 800fa3a:	f7f2 fd54 	bl	80024e6 <_fstat>
 800fa3e:	1c43      	adds	r3, r0, #1
 800fa40:	d102      	bne.n	800fa48 <_fstat_r+0x1c>
 800fa42:	682b      	ldr	r3, [r5, #0]
 800fa44:	b103      	cbz	r3, 800fa48 <_fstat_r+0x1c>
 800fa46:	6023      	str	r3, [r4, #0]
 800fa48:	bd38      	pop	{r3, r4, r5, pc}
 800fa4a:	bf00      	nop
 800fa4c:	2000279c 	.word	0x2000279c

0800fa50 <_isatty_r>:
 800fa50:	b538      	push	{r3, r4, r5, lr}
 800fa52:	4d06      	ldr	r5, [pc, #24]	; (800fa6c <_isatty_r+0x1c>)
 800fa54:	2300      	movs	r3, #0
 800fa56:	4604      	mov	r4, r0
 800fa58:	4608      	mov	r0, r1
 800fa5a:	602b      	str	r3, [r5, #0]
 800fa5c:	f7f2 fd48 	bl	80024f0 <_isatty>
 800fa60:	1c43      	adds	r3, r0, #1
 800fa62:	d102      	bne.n	800fa6a <_isatty_r+0x1a>
 800fa64:	682b      	ldr	r3, [r5, #0]
 800fa66:	b103      	cbz	r3, 800fa6a <_isatty_r+0x1a>
 800fa68:	6023      	str	r3, [r4, #0]
 800fa6a:	bd38      	pop	{r3, r4, r5, pc}
 800fa6c:	2000279c 	.word	0x2000279c

0800fa70 <_lseek_r>:
 800fa70:	b538      	push	{r3, r4, r5, lr}
 800fa72:	4d07      	ldr	r5, [pc, #28]	; (800fa90 <_lseek_r+0x20>)
 800fa74:	4604      	mov	r4, r0
 800fa76:	4608      	mov	r0, r1
 800fa78:	4611      	mov	r1, r2
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	602a      	str	r2, [r5, #0]
 800fa7e:	461a      	mov	r2, r3
 800fa80:	f7f2 fd38 	bl	80024f4 <_lseek>
 800fa84:	1c43      	adds	r3, r0, #1
 800fa86:	d102      	bne.n	800fa8e <_lseek_r+0x1e>
 800fa88:	682b      	ldr	r3, [r5, #0]
 800fa8a:	b103      	cbz	r3, 800fa8e <_lseek_r+0x1e>
 800fa8c:	6023      	str	r3, [r4, #0]
 800fa8e:	bd38      	pop	{r3, r4, r5, pc}
 800fa90:	2000279c 	.word	0x2000279c

0800fa94 <_read_r>:
 800fa94:	b538      	push	{r3, r4, r5, lr}
 800fa96:	4d07      	ldr	r5, [pc, #28]	; (800fab4 <_read_r+0x20>)
 800fa98:	4604      	mov	r4, r0
 800fa9a:	4608      	mov	r0, r1
 800fa9c:	4611      	mov	r1, r2
 800fa9e:	2200      	movs	r2, #0
 800faa0:	602a      	str	r2, [r5, #0]
 800faa2:	461a      	mov	r2, r3
 800faa4:	f7f2 fcfe 	bl	80024a4 <_read>
 800faa8:	1c43      	adds	r3, r0, #1
 800faaa:	d102      	bne.n	800fab2 <_read_r+0x1e>
 800faac:	682b      	ldr	r3, [r5, #0]
 800faae:	b103      	cbz	r3, 800fab2 <_read_r+0x1e>
 800fab0:	6023      	str	r3, [r4, #0]
 800fab2:	bd38      	pop	{r3, r4, r5, pc}
 800fab4:	2000279c 	.word	0x2000279c

0800fab8 <_init>:
 800fab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faba:	bf00      	nop
 800fabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fabe:	bc08      	pop	{r3}
 800fac0:	469e      	mov	lr, r3
 800fac2:	4770      	bx	lr

0800fac4 <_fini>:
 800fac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fac6:	bf00      	nop
 800fac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800faca:	bc08      	pop	{r3}
 800facc:	469e      	mov	lr, r3
 800face:	4770      	bx	lr
