
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ea8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001338  08015088  08015088  00025088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080163c0  080163c0  000308d4  2**0
                  CONTENTS
  4 .ARM          00000008  080163c0  080163c0  000263c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080163c8  080163c8  000308d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080163c8  080163c8  000263c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080163cc  080163cc  000263cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008d4  20000000  080163d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012170  200008d4  08016ca4  000308d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012a44  08016ca4  00032a44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000308d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005bea6  00000000  00000000  00030904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ae1b  00000000  00000000  0008c7aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000033d0  00000000  00000000  000975c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003f88  00000000  00000000  0009a998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003af30  00000000  00000000  0009e920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005f58c  00000000  00000000  000d9850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014294b  00000000  00000000  00138ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0027b727  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a540  00000000  00000000  0027b778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0003d33e  00000000  00000000  00285cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  002c2ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  002c301c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200008d4 	.word	0x200008d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015070 	.word	0x08015070

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200008d8 	.word	0x200008d8
 800021c:	08015070 	.word	0x08015070

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d0c:	f000 b9aa 	b.w	8001064 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	468e      	mov	lr, r1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d14d      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da2:	428a      	cmp	r2, r1
 8000da4:	4694      	mov	ip, r2
 8000da6:	d969      	bls.n	8000e7c <__udivmoddi4+0xe8>
 8000da8:	fab2 f282 	clz	r2, r2
 8000dac:	b152      	cbz	r2, 8000dc4 <__udivmoddi4+0x30>
 8000dae:	fa01 f302 	lsl.w	r3, r1, r2
 8000db2:	f1c2 0120 	rsb	r1, r2, #32
 8000db6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000dc2:	4094      	lsls	r4, r2
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	0c21      	lsrs	r1, r4, #16
 8000dca:	fbbe f6f8 	udiv	r6, lr, r8
 8000dce:	fa1f f78c 	uxth.w	r7, ip
 8000dd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dda:	fb06 f107 	mul.w	r1, r6, r7
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dea:	f080 811f 	bcs.w	800102c <__udivmoddi4+0x298>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 811c 	bls.w	800102c <__udivmoddi4+0x298>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3310 	mls	r3, r8, r0, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb00 f707 	mul.w	r7, r0, r7
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	d90a      	bls.n	8000e26 <__udivmoddi4+0x92>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e18:	f080 810a 	bcs.w	8001030 <__udivmoddi4+0x29c>
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	f240 8107 	bls.w	8001030 <__udivmoddi4+0x29c>
 8000e22:	4464      	add	r4, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2a:	1be4      	subs	r4, r4, r7
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	b11d      	cbz	r5, 8000e38 <__udivmoddi4+0xa4>
 8000e30:	40d4      	lsrs	r4, r2
 8000e32:	2300      	movs	r3, #0
 8000e34:	e9c5 4300 	strd	r4, r3, [r5]
 8000e38:	4631      	mov	r1, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0xc2>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80ef 	beq.w	8001026 <__udivmoddi4+0x292>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x160>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0xd4>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80f9 	bhi.w	800105a <__udivmoddi4+0x2c6>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	469e      	mov	lr, r3
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0e0      	beq.n	8000e38 <__udivmoddi4+0xa4>
 8000e76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e7a:	e7dd      	b.n	8000e38 <__udivmoddi4+0xa4>
 8000e7c:	b902      	cbnz	r2, 8000e80 <__udivmoddi4+0xec>
 8000e7e:	deff      	udf	#255	; 0xff
 8000e80:	fab2 f282 	clz	r2, r2
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	f040 8092 	bne.w	8000fae <__udivmoddi4+0x21a>
 8000e8a:	eba1 010c 	sub.w	r1, r1, ip
 8000e8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	2601      	movs	r6, #1
 8000e98:	0c20      	lsrs	r0, r4, #16
 8000e9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000ea2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea6:	fb0e f003 	mul.w	r0, lr, r3
 8000eaa:	4288      	cmp	r0, r1
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x12c>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x12a>
 8000eb8:	4288      	cmp	r0, r1
 8000eba:	f200 80cb 	bhi.w	8001054 <__udivmoddi4+0x2c0>
 8000ebe:	4643      	mov	r3, r8
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ecc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ed0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed4:	45a6      	cmp	lr, r4
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x156>
 8000ed8:	eb1c 0404 	adds.w	r4, ip, r4
 8000edc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ee0:	d202      	bcs.n	8000ee8 <__udivmoddi4+0x154>
 8000ee2:	45a6      	cmp	lr, r4
 8000ee4:	f200 80bb 	bhi.w	800105e <__udivmoddi4+0x2ca>
 8000ee8:	4608      	mov	r0, r1
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ef2:	e79c      	b.n	8000e2e <__udivmoddi4+0x9a>
 8000ef4:	f1c6 0720 	rsb	r7, r6, #32
 8000ef8:	40b3      	lsls	r3, r6
 8000efa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f02:	fa20 f407 	lsr.w	r4, r0, r7
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	431c      	orrs	r4, r3
 8000f0c:	40f9      	lsrs	r1, r7
 8000f0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f12:	fa00 f306 	lsl.w	r3, r0, r6
 8000f16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f1a:	0c20      	lsrs	r0, r4, #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fb09 1118 	mls	r1, r9, r8, r1
 8000f24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f28:	fb08 f00e 	mul.w	r0, r8, lr
 8000f2c:	4288      	cmp	r0, r1
 8000f2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f32:	d90b      	bls.n	8000f4c <__udivmoddi4+0x1b8>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f3c:	f080 8088 	bcs.w	8001050 <__udivmoddi4+0x2bc>
 8000f40:	4288      	cmp	r0, r1
 8000f42:	f240 8085 	bls.w	8001050 <__udivmoddi4+0x2bc>
 8000f46:	f1a8 0802 	sub.w	r8, r8, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1a09      	subs	r1, r1, r0
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f54:	fb09 1110 	mls	r1, r9, r0, r1
 8000f58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f60:	458e      	cmp	lr, r1
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x1e2>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f6c:	d26c      	bcs.n	8001048 <__udivmoddi4+0x2b4>
 8000f6e:	458e      	cmp	lr, r1
 8000f70:	d96a      	bls.n	8001048 <__udivmoddi4+0x2b4>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4461      	add	r1, ip
 8000f76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f7e:	eba1 010e 	sub.w	r1, r1, lr
 8000f82:	42a1      	cmp	r1, r4
 8000f84:	46c8      	mov	r8, r9
 8000f86:	46a6      	mov	lr, r4
 8000f88:	d356      	bcc.n	8001038 <__udivmoddi4+0x2a4>
 8000f8a:	d053      	beq.n	8001034 <__udivmoddi4+0x2a0>
 8000f8c:	b15d      	cbz	r5, 8000fa6 <__udivmoddi4+0x212>
 8000f8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f92:	eb61 010e 	sbc.w	r1, r1, lr
 8000f96:	fa01 f707 	lsl.w	r7, r1, r7
 8000f9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f9e:	40f1      	lsrs	r1, r6
 8000fa0:	431f      	orrs	r7, r3
 8000fa2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	4631      	mov	r1, r6
 8000faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fae:	f1c2 0320 	rsb	r3, r2, #32
 8000fb2:	40d8      	lsrs	r0, r3
 8000fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	4301      	orrs	r1, r0
 8000fc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc4:	fa1f fe8c 	uxth.w	lr, ip
 8000fc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fd0:	0c0b      	lsrs	r3, r1, #16
 8000fd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fda:	429e      	cmp	r6, r3
 8000fdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe0:	d908      	bls.n	8000ff4 <__udivmoddi4+0x260>
 8000fe2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fea:	d22f      	bcs.n	800104c <__udivmoddi4+0x2b8>
 8000fec:	429e      	cmp	r6, r3
 8000fee:	d92d      	bls.n	800104c <__udivmoddi4+0x2b8>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1b9b      	subs	r3, r3, r6
 8000ff6:	b289      	uxth	r1, r1
 8000ff8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ffc:	fb07 3316 	mls	r3, r7, r6, r3
 8001000:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001004:	fb06 f30e 	mul.w	r3, r6, lr
 8001008:	428b      	cmp	r3, r1
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0x28a>
 800100c:	eb1c 0101 	adds.w	r1, ip, r1
 8001010:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001014:	d216      	bcs.n	8001044 <__udivmoddi4+0x2b0>
 8001016:	428b      	cmp	r3, r1
 8001018:	d914      	bls.n	8001044 <__udivmoddi4+0x2b0>
 800101a:	3e02      	subs	r6, #2
 800101c:	4461      	add	r1, ip
 800101e:	1ac9      	subs	r1, r1, r3
 8001020:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001024:	e738      	b.n	8000e98 <__udivmoddi4+0x104>
 8001026:	462e      	mov	r6, r5
 8001028:	4628      	mov	r0, r5
 800102a:	e705      	b.n	8000e38 <__udivmoddi4+0xa4>
 800102c:	4606      	mov	r6, r0
 800102e:	e6e3      	b.n	8000df8 <__udivmoddi4+0x64>
 8001030:	4618      	mov	r0, r3
 8001032:	e6f8      	b.n	8000e26 <__udivmoddi4+0x92>
 8001034:	454b      	cmp	r3, r9
 8001036:	d2a9      	bcs.n	8000f8c <__udivmoddi4+0x1f8>
 8001038:	ebb9 0802 	subs.w	r8, r9, r2
 800103c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001040:	3801      	subs	r0, #1
 8001042:	e7a3      	b.n	8000f8c <__udivmoddi4+0x1f8>
 8001044:	4646      	mov	r6, r8
 8001046:	e7ea      	b.n	800101e <__udivmoddi4+0x28a>
 8001048:	4620      	mov	r0, r4
 800104a:	e794      	b.n	8000f76 <__udivmoddi4+0x1e2>
 800104c:	4640      	mov	r0, r8
 800104e:	e7d1      	b.n	8000ff4 <__udivmoddi4+0x260>
 8001050:	46d0      	mov	r8, sl
 8001052:	e77b      	b.n	8000f4c <__udivmoddi4+0x1b8>
 8001054:	3b02      	subs	r3, #2
 8001056:	4461      	add	r1, ip
 8001058:	e732      	b.n	8000ec0 <__udivmoddi4+0x12c>
 800105a:	4630      	mov	r0, r6
 800105c:	e709      	b.n	8000e72 <__udivmoddi4+0xde>
 800105e:	4464      	add	r4, ip
 8001060:	3802      	subs	r0, #2
 8001062:	e742      	b.n	8000eea <__udivmoddi4+0x156>

08001064 <__aeabi_idiv0>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <action_reset>:
 * Each guysko's button action is immediatley reset to zero after being taken into consideration, so that is can be known in the
 * next frame if the action was made once again.
 */

void action_reset(uint8_t action_index) {
	if (action_index == 0) {
 8001068:	b918      	cbnz	r0, 8001072 <action_reset+0xa>
		act_up			=	false;
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <action_reset+0x84>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	4770      	bx	lr
	} else if (action_index == 1) {
 8001072:	2801      	cmp	r0, #1
 8001074:	d012      	beq.n	800109c <action_reset+0x34>
		act_right		=	false;
	} else if (action_index == 2) {
 8001076:	2802      	cmp	r0, #2
 8001078:	d014      	beq.n	80010a4 <action_reset+0x3c>
		act_down		=	false;
	} else if (action_index == 3) {
 800107a:	2803      	cmp	r0, #3
 800107c:	d016      	beq.n	80010ac <action_reset+0x44>
		act_left		=	false;
	} else if (action_index == 4) {
 800107e:	2804      	cmp	r0, #4
 8001080:	d018      	beq.n	80010b4 <action_reset+0x4c>
		ok					=	false;
	} else if (action_index == 5) {
 8001082:	2805      	cmp	r0, #5
 8001084:	d01a      	beq.n	80010bc <action_reset+0x54>
		esc					=	false;
	} else if (action_index == 6) {
 8001086:	2806      	cmp	r0, #6
 8001088:	d01c      	beq.n	80010c4 <action_reset+0x5c>
		move_up			= false;
	} else if (action_index == 7) {
 800108a:	2807      	cmp	r0, #7
 800108c:	d01e      	beq.n	80010cc <action_reset+0x64>
		move_right 	= false;
	} else if (action_index == 8) {
 800108e:	2808      	cmp	r0, #8
 8001090:	d020      	beq.n	80010d4 <action_reset+0x6c>
		move_down		= false;
	} else if (action_index == 9) {
 8001092:	2809      	cmp	r0, #9
 8001094:	d022      	beq.n	80010dc <action_reset+0x74>
		move_left		= false;
	} else if (action_index == 10) {
 8001096:	280a      	cmp	r0, #10
 8001098:	d024      	beq.n	80010e4 <action_reset+0x7c>
		move_enter	= false;
	}
}
 800109a:	4770      	bx	lr
		act_right		=	false;
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <action_reset+0x88>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
 80010a2:	4770      	bx	lr
		act_down		=	false;
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <action_reset+0x8c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	4770      	bx	lr
		act_left		=	false;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <action_reset+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
 80010b2:	4770      	bx	lr
		ok					=	false;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <action_reset+0x94>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	4770      	bx	lr
		esc					=	false;
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <action_reset+0x98>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	4770      	bx	lr
		move_up			= false;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <action_reset+0x9c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	4770      	bx	lr
		move_right 	= false;
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <action_reset+0xa0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	4770      	bx	lr
		move_down		= false;
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <action_reset+0xa4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	4770      	bx	lr
		move_left		= false;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <action_reset+0xa8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	4770      	bx	lr
		move_enter	= false;
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <action_reset+0xac>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
}
 80010ea:	e7d6      	b.n	800109a <action_reset+0x32>
 80010ec:	200008f3 	.word	0x200008f3
 80010f0:	200008f2 	.word	0x200008f2
 80010f4:	200008f0 	.word	0x200008f0
 80010f8:	200008f1 	.word	0x200008f1
 80010fc:	200008fa 	.word	0x200008fa
 8001100:	200008f4 	.word	0x200008f4
 8001104:	200008f9 	.word	0x200008f9
 8001108:	200008f8 	.word	0x200008f8
 800110c:	200008f5 	.word	0x200008f5
 8001110:	200008f7 	.word	0x200008f7
 8001114:	200008f6 	.word	0x200008f6

08001118 <action_set>:
/*
 * This funcion updates joystick input logicaly
 * the other buttons are set to be handled as interrupts
 */
void action_set(coord_t* joystick_raw) {
	if (joystick_raw->x > 2500) {
 8001118:	6803      	ldr	r3, [r0, #0]
 800111a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800111e:	4293      	cmp	r3, r2
 8001120:	dd11      	ble.n	8001146 <action_set+0x2e>
		move_right 	= true;
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <action_set+0x58>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
		move_left		= false;
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <action_set+0x5c>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
	} else if (joystick_raw->x < 1000) {
		move_right 	= false;
		move_left		= true;
	}

	if (joystick_raw->y > 2500) {
 800112e:	6843      	ldr	r3, [r0, #4]
 8001130:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001134:	4293      	cmp	r3, r2
 8001136:	dd10      	ble.n	800115a <action_set+0x42>
		move_up			= true;
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <action_set+0x60>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
		move_down		= false;
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <action_set+0x64>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	4770      	bx	lr
	} else if (joystick_raw->x < 1000) {
 8001146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800114a:	daf0      	bge.n	800112e <action_set+0x16>
		move_right 	= false;
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <action_set+0x58>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
		move_left		= true;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <action_set+0x5c>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	e7e9      	b.n	800112e <action_set+0x16>
	} else if (joystick_raw->y < 1000) {
 800115a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800115e:	da05      	bge.n	800116c <action_set+0x54>
		move_up			= false;
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <action_set+0x60>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
		move_down		= true;
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <action_set+0x64>)
 8001168:	2201      	movs	r2, #1
 800116a:	701a      	strb	r2, [r3, #0]
	}
}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	200008f8 	.word	0x200008f8
 8001174:	200008f7 	.word	0x200008f7
 8001178:	200008f9 	.word	0x200008f9
 800117c:	200008f5 	.word	0x200008f5

08001180 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001180:	b510      	push	{r4, lr}
 8001182:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001184:	2400      	movs	r4, #0
 8001186:	9409      	str	r4, [sp, #36]	; 0x24
 8001188:	940a      	str	r4, [sp, #40]	; 0x28
 800118a:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 800118c:	2220      	movs	r2, #32
 800118e:	4621      	mov	r1, r4
 8001190:	a801      	add	r0, sp, #4
 8001192:	f00f fa5d 	bl	8010650 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001196:	4820      	ldr	r0, [pc, #128]	; (8001218 <MX_ADC1_Init+0x98>)
 8001198:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800119c:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800119e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80011a2:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011a4:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a6:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 80011a8:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011aa:	6144      	str	r4, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ac:	2304      	movs	r3, #4
 80011ae:	6183      	str	r3, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011b0:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011b2:	7744      	strb	r4, [r0, #29]
  hadc1.Init.NbrOfConversion = 1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b8:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011bc:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011be:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011c0:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011c4:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80011c6:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ca:	f005 ffdd 	bl	8007188 <HAL_ADC_Init>
 80011ce:	b9c8      	cbnz	r0, 8001204 <MX_ADC1_Init+0x84>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011d4:	a909      	add	r1, sp, #36	; 0x24
 80011d6:	4810      	ldr	r0, [pc, #64]	; (8001218 <MX_ADC1_Init+0x98>)
 80011d8:	f006 fd08 	bl	8007bec <HAL_ADCEx_MultiModeConfigChannel>
 80011dc:	b9a8      	cbnz	r0, 800120a <MX_ADC1_Init+0x8a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_ADC1_Init+0x9c>)
 80011e0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011e2:	2306      	movs	r3, #6
 80011e4:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011e6:	2300      	movs	r3, #0
 80011e8:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ea:	227f      	movs	r2, #127	; 0x7f
 80011ec:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011ee:	2204      	movs	r2, #4
 80011f0:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 80011f2:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f4:	eb0d 0102 	add.w	r1, sp, r2
 80011f8:	4807      	ldr	r0, [pc, #28]	; (8001218 <MX_ADC1_Init+0x98>)
 80011fa:	f006 f973 	bl	80074e4 <HAL_ADC_ConfigChannel>
 80011fe:	b938      	cbnz	r0, 8001210 <MX_ADC1_Init+0x90>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001200:	b00c      	add	sp, #48	; 0x30
 8001202:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001204:	f000 fece 	bl	8001fa4 <Error_Handler>
 8001208:	e7e2      	b.n	80011d0 <MX_ADC1_Init+0x50>
    Error_Handler();
 800120a:	f000 fecb 	bl	8001fa4 <Error_Handler>
 800120e:	e7e6      	b.n	80011de <MX_ADC1_Init+0x5e>
    Error_Handler();
 8001210:	f000 fec8 	bl	8001fa4 <Error_Handler>
}
 8001214:	e7f4      	b.n	8001200 <MX_ADC1_Init+0x80>
 8001216:	bf00      	nop
 8001218:	20000904 	.word	0x20000904
 800121c:	08600004 	.word	0x08600004

08001220 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001220:	b500      	push	{lr}
 8001222:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001224:	2220      	movs	r2, #32
 8001226:	2100      	movs	r1, #0
 8001228:	4668      	mov	r0, sp
 800122a:	f00f fa11 	bl	8010650 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800122e:	481b      	ldr	r0, [pc, #108]	; (800129c <MX_ADC2_Init+0x7c>)
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <MX_ADC2_Init+0x80>)
 8001232:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001234:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001238:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800123a:	2300      	movs	r3, #0
 800123c:	6083      	str	r3, [r0, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800123e:	60c3      	str	r3, [r0, #12]
  hadc2.Init.GainCompensation = 0;
 8001240:	6103      	str	r3, [r0, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001242:	6143      	str	r3, [r0, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001244:	2204      	movs	r2, #4
 8001246:	6182      	str	r2, [r0, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001248:	7703      	strb	r3, [r0, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800124a:	7743      	strb	r3, [r0, #29]
  hadc2.Init.NbrOfConversion = 1;
 800124c:	2201      	movs	r2, #1
 800124e:	6202      	str	r2, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001250:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001254:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001256:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001258:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800125c:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800125e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001262:	f005 ff91 	bl	8007188 <HAL_ADC_Init>
 8001266:	b990      	cbnz	r0, 800128e <MX_ADC2_Init+0x6e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_ADC2_Init+0x84>)
 800126a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800126c:	2306      	movs	r3, #6
 800126e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001270:	2300      	movs	r3, #0
 8001272:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001274:	227f      	movs	r2, #127	; 0x7f
 8001276:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001278:	2204      	movs	r2, #4
 800127a:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 800127c:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800127e:	4669      	mov	r1, sp
 8001280:	4806      	ldr	r0, [pc, #24]	; (800129c <MX_ADC2_Init+0x7c>)
 8001282:	f006 f92f 	bl	80074e4 <HAL_ADC_ConfigChannel>
 8001286:	b928      	cbnz	r0, 8001294 <MX_ADC2_Init+0x74>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001288:	b009      	add	sp, #36	; 0x24
 800128a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800128e:	f000 fe89 	bl	8001fa4 <Error_Handler>
 8001292:	e7e9      	b.n	8001268 <MX_ADC2_Init+0x48>
    Error_Handler();
 8001294:	f000 fe86 	bl	8001fa4 <Error_Handler>
}
 8001298:	e7f6      	b.n	8001288 <MX_ADC2_Init+0x68>
 800129a:	bf00      	nop
 800129c:	20000970 	.word	0x20000970
 80012a0:	50000100 	.word	0x50000100
 80012a4:	14f00020 	.word	0x14f00020

080012a8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80012a8:	b510      	push	{r4, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012ac:	2400      	movs	r4, #0
 80012ae:	9409      	str	r4, [sp, #36]	; 0x24
 80012b0:	940a      	str	r4, [sp, #40]	; 0x28
 80012b2:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 80012b4:	2220      	movs	r2, #32
 80012b6:	4621      	mov	r1, r4
 80012b8:	a801      	add	r0, sp, #4
 80012ba:	f00f f9c9 	bl	8010650 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80012be:	481f      	ldr	r0, [pc, #124]	; (800133c <MX_ADC3_Init+0x94>)
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <MX_ADC3_Init+0x98>)
 80012c2:	6003      	str	r3, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012c4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80012c8:	6043      	str	r3, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80012ca:	6084      	str	r4, [r0, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012cc:	60c4      	str	r4, [r0, #12]
  hadc3.Init.GainCompensation = 0;
 80012ce:	6104      	str	r4, [r0, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012d0:	6144      	str	r4, [r0, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012d2:	2304      	movs	r3, #4
 80012d4:	6183      	str	r3, [r0, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80012d6:	7704      	strb	r4, [r0, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80012d8:	7744      	strb	r4, [r0, #29]
  hadc3.Init.NbrOfConversion = 1;
 80012da:	2301      	movs	r3, #1
 80012dc:	6203      	str	r3, [r0, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012de:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e2:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012e4:	6304      	str	r4, [r0, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80012e6:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012ea:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80012ec:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012f0:	f005 ff4a 	bl	8007188 <HAL_ADC_Init>
 80012f4:	b9c8      	cbnz	r0, 800132a <MX_ADC3_Init+0x82>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012f6:	2300      	movs	r3, #0
 80012f8:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80012fa:	a909      	add	r1, sp, #36	; 0x24
 80012fc:	480f      	ldr	r0, [pc, #60]	; (800133c <MX_ADC3_Init+0x94>)
 80012fe:	f006 fc75 	bl	8007bec <HAL_ADCEx_MultiModeConfigChannel>
 8001302:	b9a8      	cbnz	r0, 8001330 <MX_ADC3_Init+0x88>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_ADC3_Init+0x9c>)
 8001306:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001308:	2306      	movs	r3, #6
 800130a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800130c:	2300      	movs	r3, #0
 800130e:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001310:	227f      	movs	r2, #127	; 0x7f
 8001312:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001314:	2204      	movs	r2, #4
 8001316:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 8001318:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800131a:	eb0d 0102 	add.w	r1, sp, r2
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <MX_ADC3_Init+0x94>)
 8001320:	f006 f8e0 	bl	80074e4 <HAL_ADC_ConfigChannel>
 8001324:	b938      	cbnz	r0, 8001336 <MX_ADC3_Init+0x8e>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001326:	b00c      	add	sp, #48	; 0x30
 8001328:	bd10      	pop	{r4, pc}
    Error_Handler();
 800132a:	f000 fe3b 	bl	8001fa4 <Error_Handler>
 800132e:	e7e2      	b.n	80012f6 <MX_ADC3_Init+0x4e>
    Error_Handler();
 8001330:	f000 fe38 	bl	8001fa4 <Error_Handler>
 8001334:	e7e6      	b.n	8001304 <MX_ADC3_Init+0x5c>
    Error_Handler();
 8001336:	f000 fe35 	bl	8001fa4 <Error_Handler>
}
 800133a:	e7f4      	b.n	8001326 <MX_ADC3_Init+0x7e>
 800133c:	200009dc 	.word	0x200009dc
 8001340:	50000400 	.word	0x50000400
 8001344:	21800100 	.word	0x21800100

08001348 <MX_ADC4_Init>:
/* ADC4 init function */
// JOYSTICK
void MX_ADC4_Init(void)
{
 8001348:	b500      	push	{lr}
 800134a:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800134c:	2220      	movs	r2, #32
 800134e:	2100      	movs	r1, #0
 8001350:	4668      	mov	r0, sp
 8001352:	f00f f97d 	bl	8010650 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001356:	4822      	ldr	r0, [pc, #136]	; (80013e0 <MX_ADC4_Init+0x98>)
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <MX_ADC4_Init+0x9c>)
 800135a:	6003      	str	r3, [r0, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800135c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001360:	6043      	str	r3, [r0, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001362:	2300      	movs	r3, #0
 8001364:	6083      	str	r3, [r0, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001366:	60c3      	str	r3, [r0, #12]
  hadc4.Init.GainCompensation = 0;
 8001368:	6103      	str	r3, [r0, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800136a:	2201      	movs	r2, #1
 800136c:	6142      	str	r2, [r0, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800136e:	2104      	movs	r1, #4
 8001370:	6181      	str	r1, [r0, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001372:	7703      	strb	r3, [r0, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001374:	7742      	strb	r2, [r0, #29]
  hadc4.Init.NbrOfConversion = 2;
 8001376:	2102      	movs	r1, #2
 8001378:	6201      	str	r1, [r0, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800137a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800137e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001380:	6303      	str	r3, [r0, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001382:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001386:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001388:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800138c:	f005 fefc 	bl	8007188 <HAL_ADC_Init>
 8001390:	b9e0      	cbnz	r0, 80013cc <MX_ADC4_Init+0x84>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <MX_ADC4_Init+0xa0>)
 8001394:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001396:	2306      	movs	r3, #6
 8001398:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800139a:	2307      	movs	r3, #7
 800139c:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800139e:	237f      	movs	r3, #127	; 0x7f
 80013a0:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013a2:	2304      	movs	r3, #4
 80013a4:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80013aa:	4669      	mov	r1, sp
 80013ac:	480c      	ldr	r0, [pc, #48]	; (80013e0 <MX_ADC4_Init+0x98>)
 80013ae:	f006 f899 	bl	80074e4 <HAL_ADC_ConfigChannel>
 80013b2:	b970      	cbnz	r0, 80013d2 <MX_ADC4_Init+0x8a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <MX_ADC4_Init+0xa4>)
 80013b6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013b8:	230c      	movs	r3, #12
 80013ba:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80013bc:	4669      	mov	r1, sp
 80013be:	4808      	ldr	r0, [pc, #32]	; (80013e0 <MX_ADC4_Init+0x98>)
 80013c0:	f006 f890 	bl	80074e4 <HAL_ADC_ConfigChannel>
 80013c4:	b940      	cbnz	r0, 80013d8 <MX_ADC4_Init+0x90>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80013c6:	b009      	add	sp, #36	; 0x24
 80013c8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80013cc:	f000 fdea 	bl	8001fa4 <Error_Handler>
 80013d0:	e7df      	b.n	8001392 <MX_ADC4_Init+0x4a>
    Error_Handler();
 80013d2:	f000 fde7 	bl	8001fa4 <Error_Handler>
 80013d6:	e7ed      	b.n	80013b4 <MX_ADC4_Init+0x6c>
    Error_Handler();
 80013d8:	f000 fde4 	bl	8001fa4 <Error_Handler>
}
 80013dc:	e7f3      	b.n	80013c6 <MX_ADC4_Init+0x7e>
 80013de:	bf00      	nop
 80013e0:	20000a48 	.word	0x20000a48
 80013e4:	50000500 	.word	0x50000500
 80013e8:	10c00010 	.word	0x10c00010
 80013ec:	14f00020 	.word	0x14f00020

080013f0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013f0:	b530      	push	{r4, r5, lr}
 80013f2:	b0a7      	sub	sp, #156	; 0x9c
 80013f4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	2100      	movs	r1, #0
 80013f8:	9121      	str	r1, [sp, #132]	; 0x84
 80013fa:	9122      	str	r1, [sp, #136]	; 0x88
 80013fc:	9123      	str	r1, [sp, #140]	; 0x8c
 80013fe:	9124      	str	r1, [sp, #144]	; 0x90
 8001400:	9125      	str	r1, [sp, #148]	; 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001402:	2254      	movs	r2, #84	; 0x54
 8001404:	a80c      	add	r0, sp, #48	; 0x30
 8001406:	f00f f923 	bl	8010650 <memset>
  if(adcHandle->Instance==ADC1)
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001410:	d00c      	beq.n	800142c <HAL_ADC_MspInit+0x3c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8001412:	4a96      	ldr	r2, [pc, #600]	; (800166c <HAL_ADC_MspInit+0x27c>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d03d      	beq.n	8001494 <HAL_ADC_MspInit+0xa4>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8001418:	4a95      	ldr	r2, [pc, #596]	; (8001670 <HAL_ADC_MspInit+0x280>)
 800141a:	4293      	cmp	r3, r2
 800141c:	f000 80a2 	beq.w	8001564 <HAL_ADC_MspInit+0x174>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC4)
 8001420:	4a94      	ldr	r2, [pc, #592]	; (8001674 <HAL_ADC_MspInit+0x284>)
 8001422:	4293      	cmp	r3, r2
 8001424:	f000 80d2 	beq.w	80015cc <HAL_ADC_MspInit+0x1dc>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8001428:	b027      	add	sp, #156	; 0x9c
 800142a:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800142c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001430:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001432:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001436:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001438:	a80c      	add	r0, sp, #48	; 0x30
 800143a:	f009 fc07 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 800143e:	b9d8      	cbnz	r0, 8001478 <HAL_ADC_MspInit+0x88>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001440:	4a8d      	ldr	r2, [pc, #564]	; (8001678 <HAL_ADC_MspInit+0x288>)
 8001442:	6813      	ldr	r3, [r2, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001448:	2b01      	cmp	r3, #1
 800144a:	d018      	beq.n	800147e <HAL_ADC_MspInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b8b      	ldr	r3, [pc, #556]	; (800167c <HAL_ADC_MspInit+0x28c>)
 800144e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001450:	f042 0201 	orr.w	r2, r2, #1
 8001454:	64da      	str	r2, [r3, #76]	; 0x4c
 8001456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	9302      	str	r3, [sp, #8]
 800145e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AD0_Pin|AD1_Pin|AD2_Pin|AD3_Pin;
 8001460:	230f      	movs	r3, #15
 8001462:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001464:	2303      	movs	r3, #3
 8001466:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146c:	a921      	add	r1, sp, #132	; 0x84
 800146e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001472:	f007 f9d9 	bl	8008828 <HAL_GPIO_Init>
 8001476:	e7d7      	b.n	8001428 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001478:	f000 fd94 	bl	8001fa4 <Error_Handler>
 800147c:	e7e0      	b.n	8001440 <HAL_ADC_MspInit+0x50>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800147e:	4b7f      	ldr	r3, [pc, #508]	; (800167c <HAL_ADC_MspInit+0x28c>)
 8001480:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001482:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001486:	64da      	str	r2, [r3, #76]	; 0x4c
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	9b01      	ldr	r3, [sp, #4]
 8001492:	e7db      	b.n	800144c <HAL_ADC_MspInit+0x5c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001494:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001498:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800149a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800149e:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a0:	a80c      	add	r0, sp, #48	; 0x30
 80014a2:	f009 fbd3 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 80014a6:	2800      	cmp	r0, #0
 80014a8:	d14e      	bne.n	8001548 <HAL_ADC_MspInit+0x158>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80014aa:	4a73      	ldr	r2, [pc, #460]	; (8001678 <HAL_ADC_MspInit+0x288>)
 80014ac:	6813      	ldr	r3, [r2, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d04b      	beq.n	800154e <HAL_ADC_MspInit+0x15e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014b6:	4b71      	ldr	r3, [pc, #452]	; (800167c <HAL_ADC_MspInit+0x28c>)
 80014b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ba:	f042 0220 	orr.w	r2, r2, #32
 80014be:	64da      	str	r2, [r3, #76]	; 0x4c
 80014c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014c2:	f002 0220 	and.w	r2, r2, #32
 80014c6:	9204      	str	r2, [sp, #16]
 80014c8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014cc:	f042 0201 	orr.w	r2, r2, #1
 80014d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80014d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014d4:	f002 0201 	and.w	r2, r2, #1
 80014d8:	9205      	str	r2, [sp, #20]
 80014da:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014de:	f042 0204 	orr.w	r2, r2, #4
 80014e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80014e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014e6:	f002 0204 	and.w	r2, r2, #4
 80014ea:	9206      	str	r2, [sp, #24]
 80014ec:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014f0:	f042 0202 	orr.w	r2, r2, #2
 80014f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80014f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	9307      	str	r3, [sp, #28]
 80014fe:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = AD5_Pin;
 8001500:	2302      	movs	r3, #2
 8001502:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001504:	2503      	movs	r5, #3
 8001506:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2400      	movs	r4, #0
 800150a:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD5_GPIO_Port, &GPIO_InitStruct);
 800150c:	a921      	add	r1, sp, #132	; 0x84
 800150e:	485c      	ldr	r0, [pc, #368]	; (8001680 <HAL_ADC_MspInit+0x290>)
 8001510:	f007 f98a 	bl	8008828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD8_Pin;
 8001514:	2320      	movs	r3, #32
 8001516:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001518:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD8_GPIO_Port, &GPIO_InitStruct);
 800151c:	a921      	add	r1, sp, #132	; 0x84
 800151e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001522:	f007 f981 	bl	8008828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD4_Pin|AD6_Pin;
 8001526:	2330      	movs	r3, #48	; 0x30
 8001528:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152a:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152e:	a921      	add	r1, sp, #132	; 0x84
 8001530:	4854      	ldr	r0, [pc, #336]	; (8001684 <HAL_ADC_MspInit+0x294>)
 8001532:	f007 f979 	bl	8008828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD7_Pin;
 8001536:	2304      	movs	r3, #4
 8001538:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153a:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD7_GPIO_Port, &GPIO_InitStruct);
 800153e:	a921      	add	r1, sp, #132	; 0x84
 8001540:	4851      	ldr	r0, [pc, #324]	; (8001688 <HAL_ADC_MspInit+0x298>)
 8001542:	f007 f971 	bl	8008828 <HAL_GPIO_Init>
 8001546:	e76f      	b.n	8001428 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001548:	f000 fd2c 	bl	8001fa4 <Error_Handler>
 800154c:	e7ad      	b.n	80014aa <HAL_ADC_MspInit+0xba>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800154e:	4b4b      	ldr	r3, [pc, #300]	; (800167c <HAL_ADC_MspInit+0x28c>)
 8001550:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001552:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001556:	64da      	str	r2, [r3, #76]	; 0x4c
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800155e:	9303      	str	r3, [sp, #12]
 8001560:	9b03      	ldr	r3, [sp, #12]
 8001562:	e7a8      	b.n	80014b6 <HAL_ADC_MspInit+0xc6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001568:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800156a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800156e:	931e      	str	r3, [sp, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001570:	a80c      	add	r0, sp, #48	; 0x30
 8001572:	f009 fb6b 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 8001576:	b9d8      	cbnz	r0, 80015b0 <HAL_ADC_MspInit+0x1c0>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001578:	4a44      	ldr	r2, [pc, #272]	; (800168c <HAL_ADC_MspInit+0x29c>)
 800157a:	6813      	ldr	r3, [r2, #0]
 800157c:	3301      	adds	r3, #1
 800157e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001580:	2b01      	cmp	r3, #1
 8001582:	d018      	beq.n	80015b6 <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001584:	4b3d      	ldr	r3, [pc, #244]	; (800167c <HAL_ADC_MspInit+0x28c>)
 8001586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001588:	f042 0208 	orr.w	r2, r2, #8
 800158c:	64da      	str	r2, [r3, #76]	; 0x4c
 800158e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	9309      	str	r3, [sp, #36]	; 0x24
 8001596:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = AD9_Pin|AD10_Pin|AD11_Pin;
 8001598:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800159c:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800159e:	2303      	movs	r3, #3
 80015a0:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a6:	a921      	add	r1, sp, #132	; 0x84
 80015a8:	4839      	ldr	r0, [pc, #228]	; (8001690 <HAL_ADC_MspInit+0x2a0>)
 80015aa:	f007 f93d 	bl	8008828 <HAL_GPIO_Init>
 80015ae:	e73b      	b.n	8001428 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 80015b0:	f000 fcf8 	bl	8001fa4 <Error_Handler>
 80015b4:	e7e0      	b.n	8001578 <HAL_ADC_MspInit+0x188>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80015b6:	4b31      	ldr	r3, [pc, #196]	; (800167c <HAL_ADC_MspInit+0x28c>)
 80015b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015be:	64da      	str	r2, [r3, #76]	; 0x4c
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c6:	9308      	str	r3, [sp, #32]
 80015c8:	9b08      	ldr	r3, [sp, #32]
 80015ca:	e7db      	b.n	8001584 <HAL_ADC_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80015cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d0:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80015d6:	931e      	str	r3, [sp, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d8:	a80c      	add	r0, sp, #48	; 0x30
 80015da:	f009 fb37 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 80015de:	2800      	cmp	r0, #0
 80015e0:	d133      	bne.n	800164a <HAL_ADC_MspInit+0x25a>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80015e2:	4a2a      	ldr	r2, [pc, #168]	; (800168c <HAL_ADC_MspInit+0x29c>)
 80015e4:	6813      	ldr	r3, [r2, #0]
 80015e6:	3301      	adds	r3, #1
 80015e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d030      	beq.n	8001650 <HAL_ADC_MspInit+0x260>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	4b23      	ldr	r3, [pc, #140]	; (800167c <HAL_ADC_MspInit+0x28c>)
 80015f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015f2:	f042 0202 	orr.w	r2, r2, #2
 80015f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8001600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001602:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001606:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001608:	2303      	movs	r3, #3
 800160a:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2500      	movs	r5, #0
 800160e:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001610:	a921      	add	r1, sp, #132	; 0x84
 8001612:	481d      	ldr	r0, [pc, #116]	; (8001688 <HAL_ADC_MspInit+0x298>)
 8001614:	f007 f908 	bl	8008828 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel5;
 8001618:	481e      	ldr	r0, [pc, #120]	; (8001694 <HAL_ADC_MspInit+0x2a4>)
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <HAL_ADC_MspInit+0x2a8>)
 800161c:	6003      	str	r3, [r0, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800161e:	2326      	movs	r3, #38	; 0x26
 8001620:	6043      	str	r3, [r0, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001622:	6085      	str	r5, [r0, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001624:	60c5      	str	r5, [r0, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	6103      	str	r3, [r0, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800162a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800162e:	6143      	str	r3, [r0, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001630:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001634:	6183      	str	r3, [r0, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8001636:	2320      	movs	r3, #32
 8001638:	61c3      	str	r3, [r0, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 800163a:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800163c:	f006 fe0e 	bl	800825c <HAL_DMA_Init>
 8001640:	b988      	cbnz	r0, 8001666 <HAL_ADC_MspInit+0x276>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <HAL_ADC_MspInit+0x2a4>)
 8001644:	6563      	str	r3, [r4, #84]	; 0x54
 8001646:	629c      	str	r4, [r3, #40]	; 0x28
}
 8001648:	e6ee      	b.n	8001428 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 800164a:	f000 fcab 	bl	8001fa4 <Error_Handler>
 800164e:	e7c8      	b.n	80015e2 <HAL_ADC_MspInit+0x1f2>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <HAL_ADC_MspInit+0x28c>)
 8001652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001654:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001658:	64da      	str	r2, [r3, #76]	; 0x4c
 800165a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001660:	930a      	str	r3, [sp, #40]	; 0x28
 8001662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001664:	e7c3      	b.n	80015ee <HAL_ADC_MspInit+0x1fe>
      Error_Handler();
 8001666:	f000 fc9d 	bl	8001fa4 <Error_Handler>
 800166a:	e7ea      	b.n	8001642 <HAL_ADC_MspInit+0x252>
 800166c:	50000100 	.word	0x50000100
 8001670:	50000400 	.word	0x50000400
 8001674:	50000500 	.word	0x50000500
 8001678:	200008fc 	.word	0x200008fc
 800167c:	40021000 	.word	0x40021000
 8001680:	48001400 	.word	0x48001400
 8001684:	48000800 	.word	0x48000800
 8001688:	48000400 	.word	0x48000400
 800168c:	20000900 	.word	0x20000900
 8001690:	48000c00 	.word	0x48000c00
 8001694:	20000ab4 	.word	0x20000ab4
 8001698:	40020058 	.word	0x40020058

0800169c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800169c:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800169e:	4808      	ldr	r0, [pc, #32]	; (80016c0 <MX_CRC_Init+0x24>)
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <MX_CRC_Init+0x28>)
 80016a2:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80016a8:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80016aa:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80016ac:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80016ae:	2301      	movs	r3, #1
 80016b0:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016b2:	f006 fbf1 	bl	8007e98 <HAL_CRC_Init>
 80016b6:	b900      	cbnz	r0, 80016ba <MX_CRC_Init+0x1e>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80016b8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80016ba:	f000 fc73 	bl	8001fa4 <Error_Handler>
}
 80016be:	e7fb      	b.n	80016b8 <MX_CRC_Init+0x1c>
 80016c0:	20000b14 	.word	0x20000b14
 80016c4:	40023000 	.word	0x40023000

080016c8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 80016c8:	6802      	ldr	r2, [r0, #0]
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_CRC_MspInit+0x28>)
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d000      	beq.n	80016d2 <HAL_CRC_MspInit+0xa>
 80016d0:	4770      	bx	lr
{
 80016d2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80016d4:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80016d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016de:	649a      	str	r2, [r3, #72]	; 0x48
 80016e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80016ea:	b002      	add	sp, #8
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40023000 	.word	0x40023000

080016f4 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DAC_HandleTypeDef hdac2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80016f4:	b500      	push	{lr}
 80016f6:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016f8:	2230      	movs	r2, #48	; 0x30
 80016fa:	2100      	movs	r1, #0
 80016fc:	4668      	mov	r0, sp
 80016fe:	f00e ffa7 	bl	8010650 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001702:	4811      	ldr	r0, [pc, #68]	; (8001748 <MX_DAC1_Init+0x54>)
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_DAC1_Init+0x58>)
 8001706:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001708:	f006 fc3d 	bl	8007f86 <HAL_DAC_Init>
 800170c:	b9a8      	cbnz	r0, 800173a <MX_DAC1_Init+0x46>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800170e:	2302      	movs	r3, #2
 8001710:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001712:	2200      	movs	r2, #0
 8001714:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001718:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800171c:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800171e:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001720:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001722:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001724:	2301      	movs	r3, #1
 8001726:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001728:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800172a:	4669      	mov	r1, sp
 800172c:	4806      	ldr	r0, [pc, #24]	; (8001748 <MX_DAC1_Init+0x54>)
 800172e:	f006 fc3d 	bl	8007fac <HAL_DAC_ConfigChannel>
 8001732:	b928      	cbnz	r0, 8001740 <MX_DAC1_Init+0x4c>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001734:	b00d      	add	sp, #52	; 0x34
 8001736:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800173a:	f000 fc33 	bl	8001fa4 <Error_Handler>
 800173e:	e7e6      	b.n	800170e <MX_DAC1_Init+0x1a>
    Error_Handler();
 8001740:	f000 fc30 	bl	8001fa4 <Error_Handler>
}
 8001744:	e7f6      	b.n	8001734 <MX_DAC1_Init+0x40>
 8001746:	bf00      	nop
 8001748:	20000b38 	.word	0x20000b38
 800174c:	50000800 	.word	0x50000800

08001750 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001750:	b500      	push	{lr}
 8001752:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001754:	2230      	movs	r2, #48	; 0x30
 8001756:	2100      	movs	r1, #0
 8001758:	4668      	mov	r0, sp
 800175a:	f00e ff79 	bl	8010650 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 800175e:	4811      	ldr	r0, [pc, #68]	; (80017a4 <MX_DAC2_Init+0x54>)
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_DAC2_Init+0x58>)
 8001762:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001764:	f006 fc0f 	bl	8007f86 <HAL_DAC_Init>
 8001768:	b9a8      	cbnz	r0, 8001796 <MX_DAC2_Init+0x46>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800176a:	2302      	movs	r3, #2
 800176c:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800176e:	2200      	movs	r2, #0
 8001770:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001774:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001778:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800177a:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800177c:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800177e:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001780:	2301      	movs	r3, #1
 8001782:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001784:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001786:	4669      	mov	r1, sp
 8001788:	4806      	ldr	r0, [pc, #24]	; (80017a4 <MX_DAC2_Init+0x54>)
 800178a:	f006 fc0f 	bl	8007fac <HAL_DAC_ConfigChannel>
 800178e:	b928      	cbnz	r0, 800179c <MX_DAC2_Init+0x4c>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001790:	b00d      	add	sp, #52	; 0x34
 8001792:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001796:	f000 fc05 	bl	8001fa4 <Error_Handler>
 800179a:	e7e6      	b.n	800176a <MX_DAC2_Init+0x1a>
    Error_Handler();
 800179c:	f000 fc02 	bl	8001fa4 <Error_Handler>
}
 80017a0:	e7f6      	b.n	8001790 <MX_DAC2_Init+0x40>
 80017a2:	bf00      	nop
 80017a4:	20000b4c 	.word	0x20000b4c
 80017a8:	50000c00 	.word	0x50000c00

080017ac <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80017ac:	b500      	push	{lr}
 80017ae:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	2300      	movs	r3, #0
 80017b2:	9305      	str	r3, [sp, #20]
 80017b4:	9306      	str	r3, [sp, #24]
 80017b6:	9307      	str	r3, [sp, #28]
 80017b8:	9308      	str	r3, [sp, #32]
 80017ba:	9309      	str	r3, [sp, #36]	; 0x24
  if(dacHandle->Instance==DAC1)
 80017bc:	6803      	ldr	r3, [r0, #0]
 80017be:	4a21      	ldr	r2, [pc, #132]	; (8001844 <HAL_DAC_MspInit+0x98>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d005      	beq.n	80017d0 <HAL_DAC_MspInit+0x24>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
  else if(dacHandle->Instance==DAC2)
 80017c4:	4a20      	ldr	r2, [pc, #128]	; (8001848 <HAL_DAC_MspInit+0x9c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d01f      	beq.n	800180a <HAL_DAC_MspInit+0x5e>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80017ca:	b00b      	add	sp, #44	; 0x2c
 80017cc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <HAL_DAC_MspInit+0xa0>)
 80017d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80017da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017dc:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80017e0:	9201      	str	r2, [sp, #4]
 80017e2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	9302      	str	r3, [sp, #8]
 80017f4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DAC1_Pin;
 80017f6:	2310      	movs	r3, #16
 80017f8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fa:	2303      	movs	r3, #3
 80017fc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(DAC1_GPIO_Port, &GPIO_InitStruct);
 80017fe:	a905      	add	r1, sp, #20
 8001800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001804:	f007 f810 	bl	8008828 <HAL_GPIO_Init>
 8001808:	e7df      	b.n	80017ca <HAL_DAC_MspInit+0x1e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_DAC_MspInit+0xa0>)
 800180c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800180e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001812:	64da      	str	r2, [r3, #76]	; 0x4c
 8001814:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001816:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800181a:	9203      	str	r2, [sp, #12]
 800181c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001820:	f042 0201 	orr.w	r2, r2, #1
 8001824:	64da      	str	r2, [r3, #76]	; 0x4c
 8001826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	9304      	str	r3, [sp, #16]
 800182e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = DAC2_Pin;
 8001830:	2340      	movs	r3, #64	; 0x40
 8001832:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001834:	2303      	movs	r3, #3
 8001836:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(DAC2_GPIO_Port, &GPIO_InitStruct);
 8001838:	a905      	add	r1, sp, #20
 800183a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183e:	f006 fff3 	bl	8008828 <HAL_GPIO_Init>
}
 8001842:	e7c2      	b.n	80017ca <HAL_DAC_MspInit+0x1e>
 8001844:	50000800 	.word	0x50000800
 8001848:	50000c00 	.word	0x50000c00
 800184c:	40021000 	.word	0x40021000

08001850 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
void MX_DMA_Init(void)
{
 8001850:	b500      	push	{lr}
 8001852:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001854:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <MX_DMA_Init+0xc4>)
 8001856:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001858:	f042 0204 	orr.w	r2, r2, #4
 800185c:	649a      	str	r2, [r3, #72]	; 0x48
 800185e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001860:	f002 0204 	and.w	r2, r2, #4
 8001864:	9200      	str	r2, [sp, #0]
 8001866:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001868:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800186a:	f042 0201 	orr.w	r2, r2, #1
 800186e:	649a      	str	r2, [r3, #72]	; 0x48
 8001870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	9301      	str	r3, [sp, #4]
 8001878:	9b01      	ldr	r3, [sp, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 800187a:	4827      	ldr	r0, [pc, #156]	; (8001918 <MX_DMA_Init+0xc8>)
 800187c:	4b27      	ldr	r3, [pc, #156]	; (800191c <MX_DMA_Init+0xcc>)
 800187e:	6003      	str	r3, [r0, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_MEM2MEM;
 8001880:	2300      	movs	r3, #0
 8001882:	6043      	str	r3, [r0, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001884:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001888:	6082      	str	r2, [r0, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 800188a:	2240      	movs	r2, #64	; 0x40
 800188c:	60c2      	str	r2, [r0, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_DISABLE;
 800188e:	6103      	str	r3, [r0, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001890:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001894:	6142      	str	r2, [r0, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001896:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800189a:	6182      	str	r2, [r0, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 800189c:	61c3      	str	r3, [r0, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_HIGH;
 800189e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a2:	6203      	str	r3, [r0, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 80018a4:	f006 fcda 	bl	800825c <HAL_DMA_Init>
 80018a8:	bb88      	cbnz	r0, 800190e <MX_DMA_Init+0xbe>
    Error_Handler();
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	4611      	mov	r1, r2
 80018ae:	200b      	movs	r0, #11
 80018b0:	f006 fa98 	bl	8007de4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018b4:	200b      	movs	r0, #11
 80018b6:	f006 facd 	bl	8007e54 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	4611      	mov	r1, r2
 80018be:	200d      	movs	r0, #13
 80018c0:	f006 fa90 	bl	8007de4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80018c4:	200d      	movs	r0, #13
 80018c6:	f006 fac5 	bl	8007e54 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	4611      	mov	r1, r2
 80018ce:	200e      	movs	r0, #14
 80018d0:	f006 fa88 	bl	8007de4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80018d4:	200e      	movs	r0, #14
 80018d6:	f006 fabd 	bl	8007e54 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	4611      	mov	r1, r2
 80018de:	200f      	movs	r0, #15
 80018e0:	f006 fa80 	bl	8007de4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80018e4:	200f      	movs	r0, #15
 80018e6:	f006 fab5 	bl	8007e54 <HAL_NVIC_EnableIRQ>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ea:	490d      	ldr	r1, [pc, #52]	; (8001920 <MX_DMA_Init+0xd0>)
 80018ec:	68cb      	ldr	r3, [r1, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <MX_DMA_Init+0xd4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018fa:	6018      	str	r0, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	68c9      	ldr	r1, [r1, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fe:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001906:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);

}
 8001908:	b003      	add	sp, #12
 800190a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800190e:	f000 fb49 	bl	8001fa4 <Error_Handler>
 8001912:	e7ca      	b.n	80018aa <MX_DMA_Init+0x5a>
 8001914:	40021000 	.word	0x40021000
 8001918:	20000b60 	.word	0x20000b60
 800191c:	40020008 	.word	0x40020008
 8001920:	e000ed00 	.word	0xe000ed00
 8001924:	e000e100 	.word	0xe000e100

08001928 <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8001928:	b508      	push	{r3, lr}
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800192a:	480f      	ldr	r0, [pc, #60]	; (8001968 <MX_FDCAN2_Init+0x40>)
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <MX_FDCAN2_Init+0x44>)
 800192e:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001930:	2300      	movs	r3, #0
 8001932:	6043      	str	r3, [r0, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001934:	6083      	str	r3, [r0, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001936:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001938:	7403      	strb	r3, [r0, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800193a:	7443      	strb	r3, [r0, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800193c:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800193e:	2210      	movs	r2, #16
 8001940:	6142      	str	r2, [r0, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001942:	2201      	movs	r2, #1
 8001944:	6182      	str	r2, [r0, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001946:	2102      	movs	r1, #2
 8001948:	61c1      	str	r1, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800194a:	6201      	str	r1, [r0, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800194c:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800194e:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001950:	62c2      	str	r2, [r0, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001952:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001954:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001956:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001958:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800195a:	f006 fe7b 	bl	8008654 <HAL_FDCAN_Init>
 800195e:	b900      	cbnz	r0, 8001962 <MX_FDCAN2_Init+0x3a>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001960:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001962:	f000 fb1f 	bl	8001fa4 <Error_Handler>
}
 8001966:	e7fb      	b.n	8001960 <MX_FDCAN2_Init+0x38>
 8001968:	20000bc0 	.word	0x20000bc0
 800196c:	40006800 	.word	0x40006800

08001970 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001970:	b510      	push	{r4, lr}
 8001972:	b09c      	sub	sp, #112	; 0x70
 8001974:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001976:	2100      	movs	r1, #0
 8001978:	9117      	str	r1, [sp, #92]	; 0x5c
 800197a:	9118      	str	r1, [sp, #96]	; 0x60
 800197c:	9119      	str	r1, [sp, #100]	; 0x64
 800197e:	911a      	str	r1, [sp, #104]	; 0x68
 8001980:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001982:	2254      	movs	r2, #84	; 0x54
 8001984:	a802      	add	r0, sp, #8
 8001986:	f00e fe63 	bl	8010650 <memset>
  if(fdcanHandle->Instance==FDCAN2)
 800198a:	6822      	ldr	r2, [r4, #0]
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_FDCAN_MspInit+0x84>)
 800198e:	429a      	cmp	r2, r3
 8001990:	d001      	beq.n	8001996 <HAL_FDCAN_MspInit+0x26>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001992:	b01c      	add	sp, #112	; 0x70
 8001994:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199a:	9302      	str	r3, [sp, #8]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800199c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019a0:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a2:	a802      	add	r0, sp, #8
 80019a4:	f009 f952 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 80019a8:	bb08      	cbnz	r0, 80019ee <HAL_FDCAN_MspInit+0x7e>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <HAL_FDCAN_MspInit+0x88>)
 80019ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019ae:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80019b2:	659a      	str	r2, [r3, #88]	; 0x58
 80019b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019b6:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80019ba:	9200      	str	r2, [sp, #0]
 80019bc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019c0:	f042 0202 	orr.w	r2, r2, #2
 80019c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80019c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 80019d0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80019d4:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80019e0:	2309      	movs	r3, #9
 80019e2:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	a917      	add	r1, sp, #92	; 0x5c
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <HAL_FDCAN_MspInit+0x8c>)
 80019e8:	f006 ff1e 	bl	8008828 <HAL_GPIO_Init>
}
 80019ec:	e7d1      	b.n	8001992 <HAL_FDCAN_MspInit+0x22>
      Error_Handler();
 80019ee:	f000 fad9 	bl	8001fa4 <Error_Handler>
 80019f2:	e7da      	b.n	80019aa <HAL_FDCAN_MspInit+0x3a>
 80019f4:	40006800 	.word	0x40006800
 80019f8:	40021000 	.word	0x40021000
 80019fc:	48000400 	.word	0x48000400

08001a00 <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a02:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	2300      	movs	r3, #0
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	9302      	str	r3, [sp, #8]
 8001a0a:	9303      	str	r3, [sp, #12]
 8001a0c:	9304      	str	r3, [sp, #16]
 8001a0e:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <HAL_FMC_MspInit+0x7c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	b10b      	cbz	r3, 8001a1a <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001a16:	b007      	add	sp, #28
 8001a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <HAL_FMC_MspInit+0x7c>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <HAL_FMC_MspInit+0x80>)
 8001a22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a24:	f042 0201 	orr.w	r2, r2, #1
 8001a28:	651a      	str	r2, [r3, #80]	; 0x50
 8001a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001a34:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001a38:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2602      	movs	r6, #2
 8001a3c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2503      	movs	r5, #3
 8001a40:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a42:	240c      	movs	r4, #12
 8001a44:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a46:	a901      	add	r1, sp, #4
 8001a48:	480e      	ldr	r0, [pc, #56]	; (8001a84 <HAL_FMC_MspInit+0x84>)
 8001a4a:	f006 feed 	bl	8008828 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001a4e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001a52:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2700      	movs	r7, #0
 8001a58:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a5c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a5e:	a901      	add	r1, sp, #4
 8001a60:	4809      	ldr	r0, [pc, #36]	; (8001a88 <HAL_FMC_MspInit+0x88>)
 8001a62:	f006 fee1 	bl	8008828 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8001a66:	2320      	movs	r3, #32
 8001a68:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a70:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8001a72:	a901      	add	r1, sp, #4
 8001a74:	4805      	ldr	r0, [pc, #20]	; (8001a8c <HAL_FMC_MspInit+0x8c>)
 8001a76:	f006 fed7 	bl	8008828 <HAL_GPIO_Init>
 8001a7a:	e7cc      	b.n	8001a16 <HAL_FMC_MspInit+0x16>
 8001a7c:	20000c24 	.word	0x20000c24
 8001a80:	40021000 	.word	0x40021000
 8001a84:	48001000 	.word	0x48001000
 8001a88:	48000c00 	.word	0x48000c00
 8001a8c:	48001800 	.word	0x48001800

08001a90 <MX_FMC_Init>:
{
 8001a90:	b510      	push	{r4, lr}
 8001a92:	b088      	sub	sp, #32
  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001a94:	2220      	movs	r2, #32
 8001a96:	2100      	movs	r1, #0
 8001a98:	4668      	mov	r0, sp
 8001a9a:	f00e fdd9 	bl	8010650 <memset>
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001a9e:	4818      	ldr	r0, [pc, #96]	; (8001b00 <MX_FMC_Init+0x70>)
 8001aa0:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001aa4:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001aa6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001aaa:	6043      	str	r3, [r0, #4]
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001aac:	2200      	movs	r2, #0
 8001aae:	6082      	str	r2, [r0, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001ab0:	60c2      	str	r2, [r0, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001ab2:	6102      	str	r2, [r0, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001ab4:	2110      	movs	r1, #16
 8001ab6:	6141      	str	r1, [r0, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001ab8:	6182      	str	r2, [r0, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001aba:	61c2      	str	r2, [r0, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001abc:	6202      	str	r2, [r0, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac2:	6243      	str	r3, [r0, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001ac4:	6282      	str	r2, [r0, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001ac6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001ac8:	6302      	str	r2, [r0, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001aca:	6342      	str	r2, [r0, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001acc:	6382      	str	r2, [r0, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001ace:	63c2      	str	r2, [r0, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8001ad0:	6442      	str	r2, [r0, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001ad2:	6402      	str	r2, [r0, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8001ad4:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
  Timing.AddressSetupTime = 1;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	9300      	str	r3, [sp, #0]
  Timing.AddressHoldTime = 15;
 8001adc:	240f      	movs	r4, #15
 8001ade:	9401      	str	r4, [sp, #4]
  Timing.DataSetupTime = 1;
 8001ae0:	9302      	str	r3, [sp, #8]
  Timing.DataHoldTime = 1;
 8001ae2:	9303      	str	r3, [sp, #12]
  Timing.BusTurnAroundDuration = 1;
 8001ae4:	9304      	str	r3, [sp, #16]
  Timing.CLKDivision = 16;
 8001ae6:	9105      	str	r1, [sp, #20]
  Timing.DataLatency = 17;
 8001ae8:	2311      	movs	r3, #17
 8001aea:	9306      	str	r3, [sp, #24]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001aec:	4669      	mov	r1, sp
 8001aee:	f009 fadd 	bl	800b0ac <HAL_SRAM_Init>
 8001af2:	b908      	cbnz	r0, 8001af8 <MX_FMC_Init+0x68>
}
 8001af4:	b008      	add	sp, #32
 8001af6:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8001af8:	f000 fa54 	bl	8001fa4 <Error_Handler>
}
 8001afc:	e7fa      	b.n	8001af4 <MX_FMC_Init+0x64>
 8001afe:	bf00      	nop
 8001b00:	20000c28 	.word	0x20000c28

08001b04 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001b04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001b06:	f7ff ff7b 	bl	8001a00 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001b0a:	bd08      	pop	{r3, pc}

08001b0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b10:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b12:	2400      	movs	r4, #0
 8001b14:	9407      	str	r4, [sp, #28]
 8001b16:	9408      	str	r4, [sp, #32]
 8001b18:	9409      	str	r4, [sp, #36]	; 0x24
 8001b1a:	940a      	str	r4, [sp, #40]	; 0x28
 8001b1c:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b1e:	4b70      	ldr	r3, [pc, #448]	; (8001ce0 <MX_GPIO_Init+0x1d4>)
 8001b20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b22:	f042 0210 	orr.w	r2, r2, #16
 8001b26:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b2a:	f002 0210 	and.w	r2, r2, #16
 8001b2e:	9200      	str	r2, [sp, #0]
 8001b30:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b34:	f042 0204 	orr.w	r2, r2, #4
 8001b38:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b3c:	f002 0204 	and.w	r2, r2, #4
 8001b40:	9201      	str	r2, [sp, #4]
 8001b42:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b46:	f042 0220 	orr.w	r2, r2, #32
 8001b4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b4e:	f002 0220 	and.w	r2, r2, #32
 8001b52:	9202      	str	r2, [sp, #8]
 8001b54:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b58:	f042 0201 	orr.w	r2, r2, #1
 8001b5c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b60:	f002 0201 	and.w	r2, r2, #1
 8001b64:	9203      	str	r2, [sp, #12]
 8001b66:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b6a:	f042 0202 	orr.w	r2, r2, #2
 8001b6e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b72:	f002 0202 	and.w	r2, r2, #2
 8001b76:	9204      	str	r2, [sp, #16]
 8001b78:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b7c:	f042 0208 	orr.w	r2, r2, #8
 8001b80:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b84:	f002 0208 	and.w	r2, r2, #8
 8001b88:	9205      	str	r2, [sp, #20]
 8001b8a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b92:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9a:	9306      	str	r3, [sp, #24]
 8001b9c:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin|LED3_Pin|LED0_Pin
 8001b9e:	f8df b150 	ldr.w	fp, [pc, #336]	; 8001cf0 <MX_GPIO_Init+0x1e4>
 8001ba2:	4622      	mov	r2, r4
 8001ba4:	f640 013c 	movw	r1, #2108	; 0x83c
 8001ba8:	4658      	mov	r0, fp
 8001baa:	f006 ff27 	bl	80089fc <HAL_GPIO_WritePin>
                          |ARDUINO_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);
 8001bae:	4f4d      	ldr	r7, [pc, #308]	; (8001ce4 <MX_GPIO_Init+0x1d8>)
 8001bb0:	4622      	mov	r2, r4
 8001bb2:	210f      	movs	r1, #15
 8001bb4:	4638      	mov	r0, r7
 8001bb6:	f006 ff21 	bl	80089fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8001bba:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8001cf4 <MX_GPIO_Init+0x1e8>
 8001bbe:	4622      	mov	r2, r4
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	4648      	mov	r0, r9
 8001bc4:	f006 ff1a 	bl	80089fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001bc8:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8001cf8 <MX_GPIO_Init+0x1ec>
 8001bcc:	4622      	mov	r2, r4
 8001bce:	2108      	movs	r1, #8
 8001bd0:	4640      	mov	r0, r8
 8001bd2:	f006 ff13 	bl	80089fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIN_SLP_Pin|LCD_BKLT_Pin, GPIO_PIN_RESET);
 8001bd6:	4622      	mov	r2, r4
 8001bd8:	2160      	movs	r1, #96	; 0x60
 8001bda:	4843      	ldr	r0, [pc, #268]	; (8001ce8 <MX_GPIO_Init+0x1dc>)
 8001bdc:	f006 ff0e 	bl	80089fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001be0:	4e42      	ldr	r6, [pc, #264]	; (8001cec <MX_GPIO_Init+0x1e0>)
 8001be2:	4622      	mov	r2, r4
 8001be4:	2101      	movs	r1, #1
 8001be6:	4630      	mov	r0, r6
 8001be8:	f006 ff08 	bl	80089fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8001bec:	2201      	movs	r2, #1
 8001bee:	2102      	movs	r1, #2
 8001bf0:	4630      	mov	r0, r6
 8001bf2:	f006 ff03 	bl	80089fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = JOY_BTN_Pin|BTN_OK_Pin;
 8001bf6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001bfa:	9307      	str	r3, [sp, #28]
  //beforehand:
//  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bfc:	f44f 1a88 	mov.w	sl, #1114112	; 0x110000
 8001c00:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c04:	2501      	movs	r5, #1
 8001c06:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c08:	a907      	add	r1, sp, #28
 8001c0a:	4638      	mov	r0, r7
 8001c0c:	f006 fe0c 	bl	8008828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_ESC_Pin;
 8001c10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c14:	9307      	str	r3, [sp, #28]
  // before
//  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c16:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c1a:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(BTN_ESC_GPIO_Port, &GPIO_InitStruct);
 8001c1c:	a907      	add	r1, sp, #28
 8001c1e:	4638      	mov	r0, r7
 8001c20:	f006 fe02 	bl	8008828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|ARDUINO_CS_Pin;
 8001c24:	f640 0338 	movw	r3, #2104	; 0x838
 8001c28:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c30:	a907      	add	r1, sp, #28
 8001c32:	4658      	mov	r0, fp
 8001c34:	f006 fdf8 	bl	8008828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
 8001c38:	230f      	movs	r3, #15
 8001c3a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c42:	a907      	add	r1, sp, #28
 8001c44:	4638      	mov	r0, r7
 8001c46:	f006 fdef 	bl	8008828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c52:	2303      	movs	r3, #3
 8001c54:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001c56:	a907      	add	r1, sp, #28
 8001c58:	4658      	mov	r0, fp
 8001c5a:	f006 fde5 	bl	8008828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_DOWN_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 8001c5e:	f240 1343 	movw	r3, #323	; 0x143
 8001c62:	9307      	str	r3, [sp, #28]
//  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c64:	f8cd a020 	str.w	sl, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c68:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c6a:	a907      	add	r1, sp, #28
 8001c6c:	4648      	mov	r0, r9
 8001c6e:	f006 fddb 	bl	8008828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c76:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8001c7c:	a907      	add	r1, sp, #28
 8001c7e:	4648      	mov	r0, r9
 8001c80:	f006 fdd2 	bl	8008828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001c84:	2308      	movs	r3, #8
 8001c86:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c88:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	a907      	add	r1, sp, #28
 8001c90:	4640      	mov	r0, r8
 8001c92:	f006 fdc9 	bl	8008828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_PENIRQ_Pin;
 8001c96:	2340      	movs	r3, #64	; 0x40
 8001c98:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_PENIRQ_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	a907      	add	r1, sp, #28
 8001ca0:	4640      	mov	r0, r8
 8001ca2:	f006 fdc1 	bl	8008828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LIN_SLP_Pin|LCD_BKLT_Pin;
 8001ca6:	2360      	movs	r3, #96	; 0x60
 8001ca8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001caa:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb0:	a907      	add	r1, sp, #28
 8001cb2:	480d      	ldr	r0, [pc, #52]	; (8001ce8 <MX_GPIO_Init+0x1dc>)
 8001cb4:	f006 fdb8 	bl	8008828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001cb8:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cba:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8001cc0:	a907      	add	r1, sp, #28
 8001cc2:	4630      	mov	r0, r6
 8001cc4:	f006 fdb0 	bl	8008828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ccc:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cce:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd0:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8001cd2:	a907      	add	r1, sp, #28
 8001cd4:	4630      	mov	r0, r6
 8001cd6:	f006 fda7 	bl	8008828 <HAL_GPIO_Init>

}
 8001cda:	b00d      	add	sp, #52	; 0x34
 8001cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	48000800 	.word	0x48000800
 8001ce8:	48000400 	.word	0x48000400
 8001cec:	48001000 	.word	0x48001000
 8001cf0:	48001400 	.word	0x48001400
 8001cf4:	48001800 	.word	0x48001800
 8001cf8:	48000c00 	.word	0x48000c00

08001cfc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cfc:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cfe:	4812      	ldr	r0, [pc, #72]	; (8001d48 <MX_I2C1_Init+0x4c>)
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <MX_I2C1_Init+0x50>)
 8001d02:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10902A95;
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <MX_I2C1_Init+0x54>)
 8001d06:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d10:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d12:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d14:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d16:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d18:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d1a:	f006 febd 	bl	8008a98 <HAL_I2C_Init>
 8001d1e:	b950      	cbnz	r0, 8001d36 <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d20:	2100      	movs	r1, #0
 8001d22:	4809      	ldr	r0, [pc, #36]	; (8001d48 <MX_I2C1_Init+0x4c>)
 8001d24:	f007 fa23 	bl	800916e <HAL_I2CEx_ConfigAnalogFilter>
 8001d28:	b940      	cbnz	r0, 8001d3c <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 5) != HAL_OK)
 8001d2a:	2105      	movs	r1, #5
 8001d2c:	4806      	ldr	r0, [pc, #24]	; (8001d48 <MX_I2C1_Init+0x4c>)
 8001d2e:	f007 fa4c 	bl	80091ca <HAL_I2CEx_ConfigDigitalFilter>
 8001d32:	b930      	cbnz	r0, 8001d42 <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d34:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001d36:	f000 f935 	bl	8001fa4 <Error_Handler>
 8001d3a:	e7f1      	b.n	8001d20 <MX_I2C1_Init+0x24>
    Error_Handler();
 8001d3c:	f000 f932 	bl	8001fa4 <Error_Handler>
 8001d40:	e7f3      	b.n	8001d2a <MX_I2C1_Init+0x2e>
    Error_Handler();
 8001d42:	f000 f92f 	bl	8001fa4 <Error_Handler>
}
 8001d46:	e7f5      	b.n	8001d34 <MX_I2C1_Init+0x38>
 8001d48:	20000d40 	.word	0x20000d40
 8001d4c:	40005400 	.word	0x40005400
 8001d50:	10902a95 	.word	0x10902a95

08001d54 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001d54:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d56:	4815      	ldr	r0, [pc, #84]	; (8001dac <MX_I2C2_Init+0x58>)
 8001d58:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <MX_I2C2_Init+0x5c>)
 8001d5a:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x60505F8C;
 8001d5c:	f103 5301 	add.w	r3, r3, #541065216	; 0x20400000
 8001d60:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001d64:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 8001d68:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d6e:	2201      	movs	r2, #1
 8001d70:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d72:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d74:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d76:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d78:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d7a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d7c:	f006 fe8c 	bl	8008a98 <HAL_I2C_Init>
 8001d80:	b950      	cbnz	r0, 8001d98 <MX_I2C2_Init+0x44>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d82:	2100      	movs	r1, #0
 8001d84:	4809      	ldr	r0, [pc, #36]	; (8001dac <MX_I2C2_Init+0x58>)
 8001d86:	f007 f9f2 	bl	800916e <HAL_I2CEx_ConfigAnalogFilter>
 8001d8a:	b940      	cbnz	r0, 8001d9e <MX_I2C2_Init+0x4a>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4807      	ldr	r0, [pc, #28]	; (8001dac <MX_I2C2_Init+0x58>)
 8001d90:	f007 fa1b 	bl	80091ca <HAL_I2CEx_ConfigDigitalFilter>
 8001d94:	b930      	cbnz	r0, 8001da4 <MX_I2C2_Init+0x50>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d96:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001d98:	f000 f904 	bl	8001fa4 <Error_Handler>
 8001d9c:	e7f1      	b.n	8001d82 <MX_I2C2_Init+0x2e>
    Error_Handler();
 8001d9e:	f000 f901 	bl	8001fa4 <Error_Handler>
 8001da2:	e7f3      	b.n	8001d8c <MX_I2C2_Init+0x38>
    Error_Handler();
 8001da4:	f000 f8fe 	bl	8001fa4 <Error_Handler>
}
 8001da8:	e7f5      	b.n	8001d96 <MX_I2C2_Init+0x42>
 8001daa:	bf00      	nop
 8001dac:	20000d8c 	.word	0x20000d8c
 8001db0:	40005800 	.word	0x40005800

08001db4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001db8:	b0a1      	sub	sp, #132	; 0x84
 8001dba:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	911b      	str	r1, [sp, #108]	; 0x6c
 8001dc0:	911c      	str	r1, [sp, #112]	; 0x70
 8001dc2:	911d      	str	r1, [sp, #116]	; 0x74
 8001dc4:	911e      	str	r1, [sp, #120]	; 0x78
 8001dc6:	911f      	str	r1, [sp, #124]	; 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dc8:	2254      	movs	r2, #84	; 0x54
 8001dca:	a806      	add	r0, sp, #24
 8001dcc:	f00e fc40 	bl	8010650 <memset>
  if(i2cHandle->Instance==I2C1)
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	4a5d      	ldr	r2, [pc, #372]	; (8001f48 <HAL_I2C_MspInit+0x194>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d006      	beq.n	8001de6 <HAL_I2C_MspInit+0x32>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 8001dd8:	4a5c      	ldr	r2, [pc, #368]	; (8001f4c <HAL_I2C_MspInit+0x198>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	f000 8086 	beq.w	8001eec <HAL_I2C_MspInit+0x138>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001de0:	b021      	add	sp, #132	; 0x84
 8001de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001de6:	2340      	movs	r3, #64	; 0x40
 8001de8:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dea:	a806      	add	r0, sp, #24
 8001dec:	f008 ff2e 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 8001df0:	2800      	cmp	r0, #0
 8001df2:	d172      	bne.n	8001eda <HAL_I2C_MspInit+0x126>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df4:	4e56      	ldr	r6, [pc, #344]	; (8001f50 <HAL_I2C_MspInit+0x19c>)
 8001df6:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	64f3      	str	r3, [r6, #76]	; 0x4c
 8001dfe:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	9301      	str	r3, [sp, #4]
 8001e06:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e08:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001e0a:	f043 0302 	orr.w	r3, r3, #2
 8001e0e:	64f3      	str	r3, [r6, #76]	; 0x4c
 8001e10:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	9302      	str	r3, [sp, #8]
 8001e18:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e1e:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e20:	f04f 0912 	mov.w	r9, #18
 8001e24:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2500      	movs	r5, #0
 8001e2a:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	951e      	str	r5, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e2e:	f04f 0804 	mov.w	r8, #4
 8001e32:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e36:	a91b      	add	r1, sp, #108	; 0x6c
 8001e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3c:	f006 fcf4 	bl	8008828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e40:	2780      	movs	r7, #128	; 0x80
 8001e42:	971b      	str	r7, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e44:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	951e      	str	r5, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e4c:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e50:	a91b      	add	r1, sp, #108	; 0x6c
 8001e52:	4840      	ldr	r0, [pc, #256]	; (8001f54 <HAL_I2C_MspInit+0x1a0>)
 8001e54:	f006 fce8 	bl	8008828 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e58:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001e5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e5e:	65b3      	str	r3, [r6, #88]	; 0x58
 8001e60:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e66:	9303      	str	r3, [sp, #12]
 8001e68:	9b03      	ldr	r3, [sp, #12]
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8001e6a:	483b      	ldr	r0, [pc, #236]	; (8001f58 <HAL_I2C_MspInit+0x1a4>)
 8001e6c:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <HAL_I2C_MspInit+0x1a8>)
 8001e6e:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001e70:	2310      	movs	r3, #16
 8001e72:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e74:	6085      	str	r5, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e76:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e78:	6107      	str	r7, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e7a:	6145      	str	r5, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e7c:	6185      	str	r5, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001e7e:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e80:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001e82:	f006 f9eb 	bl	800825c <HAL_DMA_Init>
 8001e86:	bb58      	cbnz	r0, 8001ee0 <HAL_I2C_MspInit+0x12c>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001e88:	4b33      	ldr	r3, [pc, #204]	; (8001f58 <HAL_I2C_MspInit+0x1a4>)
 8001e8a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001e8c:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8001e8e:	4834      	ldr	r0, [pc, #208]	; (8001f60 <HAL_I2C_MspInit+0x1ac>)
 8001e90:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <HAL_I2C_MspInit+0x1b0>)
 8001e92:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001e94:	2311      	movs	r3, #17
 8001e96:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e98:	2310      	movs	r3, #16
 8001e9a:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ea0:	2280      	movs	r2, #128	; 0x80
 8001ea2:	6102      	str	r2, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ea4:	6143      	str	r3, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ea6:	6183      	str	r3, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001ea8:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001eaa:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001eac:	f006 f9d6 	bl	800825c <HAL_DMA_Init>
 8001eb0:	b9c8      	cbnz	r0, 8001ee6 <HAL_I2C_MspInit+0x132>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001eb2:	4b2b      	ldr	r3, [pc, #172]	; (8001f60 <HAL_I2C_MspInit+0x1ac>)
 8001eb4:	63a3      	str	r3, [r4, #56]	; 0x38
 8001eb6:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	4611      	mov	r1, r2
 8001ebc:	201f      	movs	r0, #31
 8001ebe:	f005 ff91 	bl	8007de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ec2:	201f      	movs	r0, #31
 8001ec4:	f005 ffc6 	bl	8007e54 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	4611      	mov	r1, r2
 8001ecc:	2020      	movs	r0, #32
 8001ece:	f005 ff89 	bl	8007de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001ed2:	2020      	movs	r0, #32
 8001ed4:	f005 ffbe 	bl	8007e54 <HAL_NVIC_EnableIRQ>
 8001ed8:	e782      	b.n	8001de0 <HAL_I2C_MspInit+0x2c>
      Error_Handler();
 8001eda:	f000 f863 	bl	8001fa4 <Error_Handler>
 8001ede:	e789      	b.n	8001df4 <HAL_I2C_MspInit+0x40>
      Error_Handler();
 8001ee0:	f000 f860 	bl	8001fa4 <Error_Handler>
 8001ee4:	e7d0      	b.n	8001e88 <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 8001ee6:	f000 f85d 	bl	8001fa4 <Error_Handler>
 8001eea:	e7e2      	b.n	8001eb2 <HAL_I2C_MspInit+0xfe>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ef0:	a806      	add	r0, sp, #24
 8001ef2:	f008 feab 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 8001ef6:	bb18      	cbnz	r0, 8001f40 <HAL_I2C_MspInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef8:	4c15      	ldr	r4, [pc, #84]	; (8001f50 <HAL_I2C_MspInit+0x19c>)
 8001efa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001f02:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	9304      	str	r3, [sp, #16]
 8001f0a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f10:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f12:	2312      	movs	r3, #18
 8001f14:	931c      	str	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f16:	2301      	movs	r3, #1
 8001f18:	931d      	str	r3, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	931e      	str	r3, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f1e:	2304      	movs	r3, #4
 8001f20:	931f      	str	r3, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f22:	a91b      	add	r1, sp, #108	; 0x6c
 8001f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f28:	f006 fc7e 	bl	8008828 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f32:	65a3      	str	r3, [r4, #88]	; 0x58
 8001f34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	9305      	str	r3, [sp, #20]
 8001f3c:	9b05      	ldr	r3, [sp, #20]
}
 8001f3e:	e74f      	b.n	8001de0 <HAL_I2C_MspInit+0x2c>
      Error_Handler();
 8001f40:	f000 f830 	bl	8001fa4 <Error_Handler>
 8001f44:	e7d8      	b.n	8001ef8 <HAL_I2C_MspInit+0x144>
 8001f46:	bf00      	nop
 8001f48:	40005400 	.word	0x40005400
 8001f4c:	40005800 	.word	0x40005800
 8001f50:	40021000 	.word	0x40021000
 8001f54:	48000400 	.word	0x48000400
 8001f58:	20000c80 	.word	0x20000c80
 8001f5c:	40020030 	.word	0x40020030
 8001f60:	20000ce0 	.word	0x20000ce0
 8001f64:	40020044 	.word	0x40020044

08001f68 <joystick_init>:
 */
#include "joystick.h"

void joystick_init(joystick_t *joystick)
{
	joystick->raw_min.x = 640;
 8001f68:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001f6c:	6003      	str	r3, [r0, #0]
	joystick->raw_max.x = 3070;
 8001f6e:	f640 33fe 	movw	r3, #3070	; 0xbfe
 8001f72:	6083      	str	r3, [r0, #8]
	joystick->raw_min.y = 733;
 8001f74:	f240 23dd 	movw	r3, #733	; 0x2dd
 8001f78:	6043      	str	r3, [r0, #4]
	joystick->raw_max.y = 3185;
 8001f7a:	f640 4371 	movw	r3, #3185	; 0xc71
 8001f7e:	60c3      	str	r3, [r0, #12]
	joystick->out_max.x = 90;
 8001f80:	235a      	movs	r3, #90	; 0x5a
 8001f82:	6103      	str	r3, [r0, #16]
	joystick->out_max.y = 90;
 8001f84:	6143      	str	r3, [r0, #20]


	joystick->x_k = (float) joystick->out_max.x / (joystick->raw_max.x - joystick->raw_min.x);
 8001f86:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <joystick_init+0x34>)
 8001f88:	6183      	str	r3, [r0, #24]
	joystick->y_k = (float) joystick->out_max.y / (joystick->raw_max.y - joystick->raw_min.y);
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <joystick_init+0x38>)
 8001f8c:	61c3      	str	r3, [r0, #28]
	joystick->n.x = (joystick->raw_max.x+joystick->raw_min.x)/2;
 8001f8e:	f240 733f 	movw	r3, #1855	; 0x73f
 8001f92:	6203      	str	r3, [r0, #32]
	joystick->n.y = (joystick->raw_max.y+joystick->raw_min.y)/2;
 8001f94:	f240 73a7 	movw	r3, #1959	; 0x7a7
 8001f98:	6243      	str	r3, [r0, #36]	; 0x24

}
 8001f9a:	4770      	bx	lr
 8001f9c:	3d17b426 	.word	0x3d17b426
 8001fa0:	3d1657b3 	.word	0x3d1657b3

08001fa4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001fa4:	b082      	sub	sp, #8
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa6:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	volatile int a = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9301      	str	r3, [sp, #4]
	while (1)
	{
		a++;
 8001fac:	9b01      	ldr	r3, [sp, #4]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	9301      	str	r3, [sp, #4]
	while (1)
 8001fb2:	e7fb      	b.n	8001fac <Error_Handler+0x8>

08001fb4 <SystemClock_Config>:
{
 8001fb4:	b500      	push	{lr}
 8001fb6:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fb8:	2238      	movs	r2, #56	; 0x38
 8001fba:	2100      	movs	r1, #0
 8001fbc:	a806      	add	r0, sp, #24
 8001fbe:	f00e fb47 	bl	8010650 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	9001      	str	r0, [sp, #4]
 8001fc6:	9002      	str	r0, [sp, #8]
 8001fc8:	9003      	str	r0, [sp, #12]
 8001fca:	9004      	str	r0, [sp, #16]
 8001fcc:	9005      	str	r0, [sp, #20]
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001fce:	f008 f921 	bl	800a214 <HAL_PWREx_ControlVoltageScaling>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSE;
 8001fd2:	2321      	movs	r3, #33	; 0x21
 8001fd4:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001fd6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001fda:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001fdc:	2201      	movs	r2, #1
 8001fde:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fe4:	2103      	movs	r1, #3
 8001fe6:	910e      	str	r1, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001fe8:	920f      	str	r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 42;
 8001fea:	222a      	movs	r2, #42	; 0x2a
 8001fec:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fee:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8001ff0:	2206      	movs	r2, #6
 8001ff2:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ff4:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff6:	a806      	add	r0, sp, #24
 8001ff8:	f008 fa4a 	bl	800a490 <HAL_RCC_OscConfig>
 8001ffc:	b978      	cbnz	r0, 800201e <SystemClock_Config+0x6a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ffe:	230f      	movs	r3, #15
 8002000:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002002:	2303      	movs	r3, #3
 8002004:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002006:	2300      	movs	r3, #0
 8002008:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800200a:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800200c:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_10) != HAL_OK)
 800200e:	210a      	movs	r1, #10
 8002010:	a801      	add	r0, sp, #4
 8002012:	f008 fcf5 	bl	800aa00 <HAL_RCC_ClockConfig>
 8002016:	b920      	cbnz	r0, 8002022 <SystemClock_Config+0x6e>
}
 8002018:	b015      	add	sp, #84	; 0x54
 800201a:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 800201e:	f7ff ffc1 	bl	8001fa4 <Error_Handler>
		Error_Handler();
 8002022:	f7ff ffbf 	bl	8001fa4 <Error_Handler>
	...

08002028 <main>:
{
 8002028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800202c:	b092      	sub	sp, #72	; 0x48
	coord_t joystick_raw = {0, 0};
 800202e:	2400      	movs	r4, #0
 8002030:	9410      	str	r4, [sp, #64]	; 0x40
 8002032:	9411      	str	r4, [sp, #68]	; 0x44
	coord_t joystick_new = {0, 0};
 8002034:	940e      	str	r4, [sp, #56]	; 0x38
 8002036:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_Init();
 8002038:	f005 f870 	bl	800711c <HAL_Init>
	SystemClock_Config();
 800203c:	f7ff ffba 	bl	8001fb4 <SystemClock_Config>
	MX_GPIO_Init();
 8002040:	f7ff fd64 	bl	8001b0c <MX_GPIO_Init>
	MX_ADC1_Init();
 8002044:	f7ff f89c 	bl	8001180 <MX_ADC1_Init>
	MX_ADC2_Init();
 8002048:	f7ff f8ea 	bl	8001220 <MX_ADC2_Init>
	MX_FMC_Init();
 800204c:	f7ff fd20 	bl	8001a90 <MX_FMC_Init>
	MX_I2C2_Init();
 8002050:	f7ff fe80 	bl	8001d54 <MX_I2C2_Init>
	MX_UART4_Init();
 8002054:	f002 ffea 	bl	800502c <MX_UART4_Init>
	MX_UART5_Init();
 8002058:	f003 f81c 	bl	8005094 <MX_UART5_Init>
	MX_USART1_UART_Init();
 800205c:	f003 f84e 	bl	80050fc <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8002060:	f003 f946 	bl	80052f0 <MX_USART2_UART_Init>
	MX_QUADSPI1_Init();
 8002064:	f001 f8b2 	bl	80031cc <MX_QUADSPI1_Init>
	MX_SPI1_Init();
 8002068:	f002 fb28 	bl	80046bc <MX_SPI1_Init>
	MX_TIM5_Init();
 800206c:	f002 fda0 	bl	8004bb0 <MX_TIM5_Init>
	MX_TIM8_Init();
 8002070:	f002 fe14 	bl	8004c9c <MX_TIM8_Init>
	MX_TIM20_Init();
 8002074:	f002 ff32 	bl	8004edc <MX_TIM20_Init>
	MX_ADC3_Init();
 8002078:	f7ff f916 	bl	80012a8 <MX_ADC3_Init>
	MX_DAC1_Init();
 800207c:	f7ff fb3a 	bl	80016f4 <MX_DAC1_Init>
	MX_DAC2_Init();
 8002080:	f7ff fb66 	bl	8001750 <MX_DAC2_Init>
	MX_FDCAN2_Init();
 8002084:	f7ff fc50 	bl	8001928 <MX_FDCAN2_Init>
	MX_I2C1_Init();
 8002088:	f7ff fe38 	bl	8001cfc <MX_I2C1_Init>
	MX_TIM15_Init();
 800208c:	f002 feae 	bl	8004dec <MX_TIM15_Init>
	MX_USART3_UART_Init();
 8002090:	f003 f962 	bl	8005358 <MX_USART3_UART_Init>
	MX_USB_Device_Init();
 8002094:	f00c fef6 	bl	800ee84 <MX_USB_Device_Init>
	MX_DMA_Init();
 8002098:	f7ff fbda 	bl	8001850 <MX_DMA_Init>
	MX_CRC_Init();
 800209c:	f7ff fafe 	bl	800169c <MX_CRC_Init>
	MX_ADC4_Init(); // bug workaround: https://community.st.com/s/question/0D50X0000BVnBhASQV/bug-report-dma-and-adc-initialization-order-changed-in-stm32f4-hal-v1241-causing-incorrect-adc-operation
 80020a0:	f7ff f952 	bl	8001348 <MX_ADC4_Init>
	for (uint8_t i = 0; i < 3; i++)
 80020a4:	2c02      	cmp	r4, #2
 80020a6:	d81e      	bhi.n	80020e6 <main+0xbe>
		HAL_Delay(100);
 80020a8:	2064      	movs	r0, #100	; 0x64
 80020aa:	f005 f859 	bl	8007160 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, LED0_Pin | LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_SET);
 80020ae:	4e80      	ldr	r6, [pc, #512]	; (80022b0 <main+0x288>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	213c      	movs	r1, #60	; 0x3c
 80020b4:	4630      	mov	r0, r6
 80020b6:	f006 fca1 	bl	80089fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, LED4_Pin | LED5_Pin | LED6_Pin | LED7_Pin, GPIO_PIN_SET);
 80020ba:	4d7e      	ldr	r5, [pc, #504]	; (80022b4 <main+0x28c>)
 80020bc:	2201      	movs	r2, #1
 80020be:	210f      	movs	r1, #15
 80020c0:	4628      	mov	r0, r5
 80020c2:	f006 fc9b 	bl	80089fc <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80020c6:	2064      	movs	r0, #100	; 0x64
 80020c8:	f005 f84a 	bl	8007160 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, LED0_Pin | LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	213c      	movs	r1, #60	; 0x3c
 80020d0:	4630      	mov	r0, r6
 80020d2:	f006 fc93 	bl	80089fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, LED4_Pin | LED5_Pin | LED6_Pin | LED7_Pin, GPIO_PIN_RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	210f      	movs	r1, #15
 80020da:	4628      	mov	r0, r5
 80020dc:	f006 fc8e 	bl	80089fc <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 3; i++)
 80020e0:	3401      	adds	r4, #1
 80020e2:	b2e4      	uxtb	r4, r4
 80020e4:	e7de      	b.n	80020a4 <main+0x7c>
	LCD_Init();
 80020e6:	f00b fba9 	bl	800d83c <LCD_Init>
	LCD_UG_init();
 80020ea:	f00b fd1b 	bl	800db24 <LCD_UG_init>
	UG_DriverRegister(DRIVER_FILL_FRAME, (void *)_HW_FillFrame_);
 80020ee:	4972      	ldr	r1, [pc, #456]	; (80022b8 <main+0x290>)
 80020f0:	2001      	movs	r0, #1
 80020f2:	f00b ffe9 	bl	800e0c8 <UG_DriverRegister>
	joystick_init(&joystick);
 80020f6:	a804      	add	r0, sp, #16
 80020f8:	f7ff ff36 	bl	8001f68 <joystick_init>
	HAL_ADC_Start_DMA(&hadc4, &joystick_raw, 2);
 80020fc:	2202      	movs	r2, #2
 80020fe:	a910      	add	r1, sp, #64	; 0x40
 8002100:	486e      	ldr	r0, [pc, #440]	; (80022bc <main+0x294>)
 8002102:	f005 fcd7 	bl	8007ab4 <HAL_ADC_Start_DMA>
	HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 2);
 8002106:	2202      	movs	r2, #2
 8002108:	2101      	movs	r1, #1
 800210a:	2006      	movs	r0, #6
 800210c:	f005 fe6a 	bl	8007de4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002110:	2006      	movs	r0, #6
 8002112:	f005 fe9f 	bl	8007e54 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 2);
 8002116:	2202      	movs	r2, #2
 8002118:	2101      	movs	r1, #1
 800211a:	2007      	movs	r0, #7
 800211c:	f005 fe62 	bl	8007de4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002120:	2007      	movs	r0, #7
 8002122:	f005 fe97 	bl	8007e54 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 2);
 8002126:	2202      	movs	r2, #2
 8002128:	2101      	movs	r1, #1
 800212a:	200a      	movs	r0, #10
 800212c:	f005 fe5a 	bl	8007de4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002130:	200a      	movs	r0, #10
 8002132:	f005 fe8f 	bl	8007e54 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 2);
 8002136:	2202      	movs	r2, #2
 8002138:	2101      	movs	r1, #1
 800213a:	2017      	movs	r0, #23
 800213c:	f005 fe52 	bl	8007de4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002140:	2017      	movs	r0, #23
 8002142:	f005 fe87 	bl	8007e54 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 8002146:	2202      	movs	r2, #2
 8002148:	2101      	movs	r1, #1
 800214a:	2028      	movs	r0, #40	; 0x28
 800214c:	f005 fe4a 	bl	8007de4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002150:	2028      	movs	r0, #40	; 0x28
 8002152:	f005 fe7f 	bl	8007e54 <HAL_NVIC_EnableIRQ>
	init_world();
 8002156:	f002 fa11 	bl	800457c <init_world>
	__HAL_RCC_TIM2_CLK_ENABLE();
 800215a:	4b59      	ldr	r3, [pc, #356]	; (80022c0 <main+0x298>)
 800215c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	659a      	str	r2, [r3, #88]	; 0x58
 8002164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	9b01      	ldr	r3, [sp, #4]
	htim2.Instance = TIM2;
 800216e:	4c55      	ldr	r4, [pc, #340]	; (80022c4 <main+0x29c>)
 8002170:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002174:	6023      	str	r3, [r4, #0]
	htim2.Init.Prescaler = 10000 - 1;
 8002176:	f242 730f 	movw	r3, #9999	; 0x270f
 800217a:	6063      	str	r3, [r4, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217c:	2300      	movs	r3, #0
 800217e:	60a3      	str	r3, [r4, #8]
	htim2.Init.Period = (16800 / 2) - 1;
 8002180:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002184:	60e2      	str	r2, [r4, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002186:	6123      	str	r3, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	61a3      	str	r3, [r4, #24]
	HAL_TIM_Base_Init(&htim2);
 800218c:	4620      	mov	r0, r4
 800218e:	f009 fa09 	bl	800b5a4 <HAL_TIM_Base_Init>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8002192:	6822      	ldr	r2, [r4, #0]
 8002194:	68d3      	ldr	r3, [r2, #12]
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start(&htim2);
 800219c:	4620      	mov	r0, r4
 800219e:	f009 f949 	bl	800b434 <HAL_TIM_Base_Start>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 2);
 80021a2:	2202      	movs	r2, #2
 80021a4:	2101      	movs	r1, #1
 80021a6:	201c      	movs	r0, #28
 80021a8:	f005 fe1c 	bl	8007de4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021ac:	201c      	movs	r0, #28
 80021ae:	f005 fe51 	bl	8007e54 <HAL_NVIC_EnableIRQ>
	guysko* player = new_guysko();
 80021b2:	f004 fe9d 	bl	8006ef0 <new_guysko>
 80021b6:	4604      	mov	r4, r0
	block_c new_camera_x = camera_x_block;
 80021b8:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80022e8 <main+0x2c0>
 80021bc:	f8b8 5000 	ldrh.w	r5, [r8]
	block_c new_camera_y = camera_y_block;
 80021c0:	4e41      	ldr	r6, [pc, #260]	; (80022c8 <main+0x2a0>)
 80021c2:	8837      	ldrh	r7, [r6, #0]
	player->pos->x = block_to_pixel(camera_x_block);
 80021c4:	4628      	mov	r0, r5
 80021c6:	f003 f9ee 	bl	80055a6 <block_to_pixel>
 80021ca:	6923      	ldr	r3, [r4, #16]
 80021cc:	8018      	strh	r0, [r3, #0]
	player->pos->y = block_to_pixel(camera_y_block);
 80021ce:	8830      	ldrh	r0, [r6, #0]
 80021d0:	f003 f9e9 	bl	80055a6 <block_to_pixel>
 80021d4:	6923      	ldr	r3, [r4, #16]
 80021d6:	8058      	strh	r0, [r3, #2]
	update_camera_center(new_camera_x, new_camera_y);
 80021d8:	4639      	mov	r1, r7
 80021da:	4628      	mov	r0, r5
 80021dc:	f001 f910 	bl	8003400 <update_camera_center>
	old_camera_x = camera_x_block;
 80021e0:	f8b8 2000 	ldrh.w	r2, [r8]
 80021e4:	4b39      	ldr	r3, [pc, #228]	; (80022cc <main+0x2a4>)
 80021e6:	801a      	strh	r2, [r3, #0]
	old_camera_y = camera_y_block;
 80021e8:	8832      	ldrh	r2, [r6, #0]
 80021ea:	4b39      	ldr	r3, [pc, #228]	; (80022d0 <main+0x2a8>)
 80021ec:	801a      	strh	r2, [r3, #0]
	draw_scene(true);
 80021ee:	2001      	movs	r0, #1
 80021f0:	f000 fea0 	bl	8002f34 <draw_scene>
	movable* beings = new_movables();
 80021f4:	f004 f9fa 	bl	80065ec <new_movables>
 80021f8:	4680      	mov	r8, r0
	volatile int count = 6001;
 80021fa:	f241 7371 	movw	r3, #6001	; 0x1771
 80021fe:	9303      	str	r3, [sp, #12]
 8002200:	e120      	b.n	8002444 <main+0x41c>
			UG_FillScreen(C_BLACK);
 8002202:	4610      	mov	r0, r2
 8002204:	f00b fd42 	bl	800dc8c <UG_FillScreen>
			UG_PutString(SCREEN_WIDTH/4, SCREEN_HEIGHT/2, "You died, respawning ");
 8002208:	4a32      	ldr	r2, [pc, #200]	; (80022d4 <main+0x2ac>)
 800220a:	2178      	movs	r1, #120	; 0x78
 800220c:	2050      	movs	r0, #80	; 0x50
 800220e:	f00b ff11 	bl	800e034 <UG_PutString>
			HAL_Delay(500);
 8002212:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002216:	f004 ffa3 	bl	8007160 <HAL_Delay>
			UG_PutString(SCREEN_WIDTH/4, SCREEN_HEIGHT/2, "You died, respawning .");
 800221a:	4a2f      	ldr	r2, [pc, #188]	; (80022d8 <main+0x2b0>)
 800221c:	2178      	movs	r1, #120	; 0x78
 800221e:	2050      	movs	r0, #80	; 0x50
 8002220:	f00b ff08 	bl	800e034 <UG_PutString>
			HAL_Delay(500);
 8002224:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002228:	f004 ff9a 	bl	8007160 <HAL_Delay>
			UG_PutString(SCREEN_WIDTH/4, SCREEN_HEIGHT/2, "You died, respawning ..");
 800222c:	4a2b      	ldr	r2, [pc, #172]	; (80022dc <main+0x2b4>)
 800222e:	2178      	movs	r1, #120	; 0x78
 8002230:	2050      	movs	r0, #80	; 0x50
 8002232:	f00b feff 	bl	800e034 <UG_PutString>
			HAL_Delay(500);
 8002236:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800223a:	f004 ff91 	bl	8007160 <HAL_Delay>
			UG_PutString(SCREEN_WIDTH/4, SCREEN_HEIGHT/2, "You died, respawning ...");
 800223e:	4a28      	ldr	r2, [pc, #160]	; (80022e0 <main+0x2b8>)
 8002240:	2178      	movs	r1, #120	; 0x78
 8002242:	2050      	movs	r0, #80	; 0x50
 8002244:	f00b fef6 	bl	800e034 <UG_PutString>
			HAL_Delay(1000);
 8002248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800224c:	f004 ff88 	bl	8007160 <HAL_Delay>
			player->lp->life_points = GUYSKO_MAX_LP;
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002256:	801a      	strh	r2, [r3, #0]
			camera_x_block = WORLD_WIDTH_BLOCKS / 2;
 8002258:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80022e8 <main+0x2c0>
 800225c:	20c8      	movs	r0, #200	; 0xc8
 800225e:	f8a9 0000 	strh.w	r0, [r9]
			camera_y_block = WORLD_HEIGHT_BLOCKS / 2;
 8002262:	4e19      	ldr	r6, [pc, #100]	; (80022c8 <main+0x2a0>)
 8002264:	2178      	movs	r1, #120	; 0x78
 8002266:	8031      	strh	r1, [r6, #0]
			update_camera_center(camera_x_block, camera_y_block);
 8002268:	f001 f8ca 	bl	8003400 <update_camera_center>
			player->pos->x = camera_x_block;
 800226c:	6923      	ldr	r3, [r4, #16]
 800226e:	f8b9 2000 	ldrh.w	r2, [r9]
 8002272:	801a      	strh	r2, [r3, #0]
			player->pos->y = camera_y_block;
 8002274:	6923      	ldr	r3, [r4, #16]
 8002276:	8832      	ldrh	r2, [r6, #0]
 8002278:	805a      	strh	r2, [r3, #2]
			draw_scene(true);
 800227a:	2001      	movs	r0, #1
 800227c:	f000 fe5a 	bl	8002f34 <draw_scene>
			draw_guysko(player);
 8002280:	4620      	mov	r0, r4
 8002282:	f004 fc8b 	bl	8006b9c <draw_guysko>
 8002286:	e0e6      	b.n	8002456 <main+0x42e>
			draw_scene(true);
 8002288:	2001      	movs	r0, #1
 800228a:	f000 fe53 	bl	8002f34 <draw_scene>
			draw_guysko(player);
 800228e:	4620      	mov	r0, r4
 8002290:	f004 fc84 	bl	8006b9c <draw_guysko>
			action_reset(MOVE_ENTER_INDEX);
 8002294:	200a      	movs	r0, #10
 8002296:	f7fe fee7 	bl	8001068 <action_reset>
 800229a:	e0e7      	b.n	800246c <main+0x444>
			refresh_guysko(player, FPS);
 800229c:	4e11      	ldr	r6, [pc, #68]	; (80022e4 <main+0x2bc>)
 800229e:	7831      	ldrb	r1, [r6, #0]
 80022a0:	4620      	mov	r0, r4
 80022a2:	f004 fdeb 	bl	8006e7c <refresh_guysko>
			refresh_movables(beings, FPS);
 80022a6:	7831      	ldrb	r1, [r6, #0]
 80022a8:	4640      	mov	r0, r8
 80022aa:	f004 f883 	bl	80063b4 <refresh_movables>
 80022ae:	e0ea      	b.n	8002486 <main+0x45e>
 80022b0:	48001400 	.word	0x48001400
 80022b4:	48000800 	.word	0x48000800
 80022b8:	0800db0d 	.word	0x0800db0d
 80022bc:	20000a48 	.word	0x20000a48
 80022c0:	40021000 	.word	0x40021000
 80022c4:	20000ddc 	.word	0x20000ddc
 80022c8:	20010bea 	.word	0x20010bea
 80022cc:	20010bee 	.word	0x20010bee
 80022d0:	20010bf0 	.word	0x20010bf0
 80022d4:	08015088 	.word	0x08015088
 80022d8:	080150a0 	.word	0x080150a0
 80022dc:	080150b8 	.word	0x080150b8
 80022e0:	080150d0 	.word	0x080150d0
 80022e4:	20000000 	.word	0x20000000
 80022e8:	20010be8 	.word	0x20010be8
				set_time("morning");
 80022ec:	48a4      	ldr	r0, [pc, #656]	; (8002580 <main+0x558>)
 80022ee:	f000 fa77 	bl	80027e0 <set_time>
				night = false;
 80022f2:	4ba4      	ldr	r3, [pc, #656]	; (8002584 <main+0x55c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
				draw_scene(true);
 80022f8:	2001      	movs	r0, #1
 80022fa:	f000 fe1b 	bl	8002f34 <draw_scene>
			draw_guysko(player);
 80022fe:	4620      	mov	r0, r4
 8002300:	f004 fc4c 	bl	8006b9c <draw_guysko>
			if (count == 15000) {
 8002304:	9a03      	ldr	r2, [sp, #12]
 8002306:	f643 2398 	movw	r3, #15000	; 0x3a98
 800230a:	429a      	cmp	r2, r3
 800230c:	f000 810f 	beq.w	800252e <main+0x506>
		if (camera_x_block - pixel_to_block(player->pos->x) > pixel_to_block(GUYSKO_WINDOW_SPAN_PIXEL_X)) {
 8002310:	4b9d      	ldr	r3, [pc, #628]	; (8002588 <main+0x560>)
 8002312:	881e      	ldrh	r6, [r3, #0]
 8002314:	6923      	ldr	r3, [r4, #16]
 8002316:	f9b3 0000 	ldrsh.w	r0, [r3]
 800231a:	b280      	uxth	r0, r0
 800231c:	f003 f941 	bl	80055a2 <pixel_to_block>
 8002320:	1a36      	subs	r6, r6, r0
 8002322:	204b      	movs	r0, #75	; 0x4b
 8002324:	f003 f93d 	bl	80055a2 <pixel_to_block>
 8002328:	4286      	cmp	r6, r0
 800232a:	f340 8103 	ble.w	8002534 <main+0x50c>
			new_camera_x = camera_x_block - abs(camera_x_block - pixel_to_block(GUYSKO_WINDOW_SPAN_PIXEL_X) - pixel_to_block(player->pos->x));
 800232e:	4b96      	ldr	r3, [pc, #600]	; (8002588 <main+0x560>)
 8002330:	881d      	ldrh	r5, [r3, #0]
 8002332:	204b      	movs	r0, #75	; 0x4b
 8002334:	f003 f935 	bl	80055a2 <pixel_to_block>
 8002338:	1a2e      	subs	r6, r5, r0
 800233a:	6923      	ldr	r3, [r4, #16]
 800233c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002340:	b280      	uxth	r0, r0
 8002342:	f003 f92e 	bl	80055a2 <pixel_to_block>
 8002346:	1a36      	subs	r6, r6, r0
 8002348:	2e00      	cmp	r6, #0
 800234a:	bfb8      	it	lt
 800234c:	4276      	neglt	r6, r6
 800234e:	b2b6      	uxth	r6, r6
 8002350:	1bad      	subs	r5, r5, r6
 8002352:	b2ad      	uxth	r5, r5
		if (block_to_pixel(camera_y_block) - player->pos->y > GUYSKO_WINDOW_SPAN_PIXEL_Y) {
 8002354:	4b8d      	ldr	r3, [pc, #564]	; (800258c <main+0x564>)
 8002356:	8818      	ldrh	r0, [r3, #0]
 8002358:	f003 f925 	bl	80055a6 <block_to_pixel>
 800235c:	6923      	ldr	r3, [r4, #16]
 800235e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002362:	1ac0      	subs	r0, r0, r3
 8002364:	281e      	cmp	r0, #30
 8002366:	f340 8133 	ble.w	80025d0 <main+0x5a8>
			new_camera_y = pixel_to_block(block_to_pixel(camera_y_block) - abs(block_to_pixel(camera_y_block) - GUYSKO_WINDOW_SPAN_PIXEL_Y - player->pos->y));
 800236a:	4f88      	ldr	r7, [pc, #544]	; (800258c <main+0x564>)
 800236c:	8838      	ldrh	r0, [r7, #0]
 800236e:	f003 f91a 	bl	80055a6 <block_to_pixel>
 8002372:	4606      	mov	r6, r0
 8002374:	8838      	ldrh	r0, [r7, #0]
 8002376:	f003 f916 	bl	80055a6 <block_to_pixel>
 800237a:	f1a0 031e 	sub.w	r3, r0, #30
 800237e:	6922      	ldr	r2, [r4, #16]
 8002380:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8002384:	1a1b      	subs	r3, r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	bfb8      	it	lt
 800238a:	425b      	neglt	r3, r3
 800238c:	1af0      	subs	r0, r6, r3
 800238e:	b280      	uxth	r0, r0
 8002390:	f003 f907 	bl	80055a2 <pixel_to_block>
 8002394:	4607      	mov	r7, r0
		if (building_mode) {
 8002396:	4b7e      	ldr	r3, [pc, #504]	; (8002590 <main+0x568>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	b31b      	cbz	r3, 80023e4 <main+0x3bc>
			new_camera_x = camera_x_block;
 800239c:	4b7a      	ldr	r3, [pc, #488]	; (8002588 <main+0x560>)
 800239e:	881d      	ldrh	r5, [r3, #0]
			new_camera_y = camera_y_block;
 80023a0:	4b7a      	ldr	r3, [pc, #488]	; (800258c <main+0x564>)
 80023a2:	881f      	ldrh	r7, [r3, #0]
			if (act_down) {
 80023a4:	4b7b      	ldr	r3, [pc, #492]	; (8002594 <main+0x56c>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f040 8135 	bne.w	8002618 <main+0x5f0>
			if (act_left) {
 80023ae:	4b7a      	ldr	r3, [pc, #488]	; (8002598 <main+0x570>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f040 8136 	bne.w	8002624 <main+0x5fc>
			if (act_up) {
 80023b8:	4b78      	ldr	r3, [pc, #480]	; (800259c <main+0x574>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f040 8137 	bne.w	8002630 <main+0x608>
			if (act_right) {
 80023c2:	4b77      	ldr	r3, [pc, #476]	; (80025a0 <main+0x578>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f040 8138 	bne.w	800263c <main+0x614>
			if (ok) {
 80023cc:	4b75      	ldr	r3, [pc, #468]	; (80025a4 <main+0x57c>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f040 8139 	bne.w	8002648 <main+0x620>
			if (move_enter) {
 80023d6:	4b74      	ldr	r3, [pc, #464]	; (80025a8 <main+0x580>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f040 8149 	bne.w	8002672 <main+0x64a>
			display_material_name();
 80023e0:	f003 fba8 	bl	8005b34 <display_material_name>
		update_camera_center(new_camera_x, new_camera_y);
 80023e4:	4639      	mov	r1, r7
 80023e6:	4628      	mov	r0, r5
 80023e8:	f001 f80a 	bl	8003400 <update_camera_center>
		if (!building_mode) {
 80023ec:	4b68      	ldr	r3, [pc, #416]	; (8002590 <main+0x568>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	b99b      	cbnz	r3, 800241a <main+0x3f2>
			if (act_down) {
 80023f2:	4b68      	ldr	r3, [pc, #416]	; (8002594 <main+0x56c>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f040 8141 	bne.w	800267e <main+0x656>
			if (act_down) {
 80023fc:	4b65      	ldr	r3, [pc, #404]	; (8002594 <main+0x56c>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	f040 8143 	bne.w	800268c <main+0x664>
			if (act_left) {
 8002406:	4b64      	ldr	r3, [pc, #400]	; (8002598 <main+0x570>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 8145 	bne.w	800269a <main+0x672>
			if (act_right) {
 8002410:	4b63      	ldr	r3, [pc, #396]	; (80025a0 <main+0x578>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	f040 8173 	bne.w	8002700 <main+0x6d8>
		if (ok) {
 800241a:	4b62      	ldr	r3, [pc, #392]	; (80025a4 <main+0x57c>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f040 8175 	bne.w	800270e <main+0x6e6>
		if (esc) {
 8002424:	4b61      	ldr	r3, [pc, #388]	; (80025ac <main+0x584>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	f040 8179 	bne.w	8002720 <main+0x6f8>
		action_set(&joystick_raw);
 800242e:	a810      	add	r0, sp, #64	; 0x40
 8002430:	f7fe fe72 	bl	8001118 <action_set>
		while (!cycle)
 8002434:	4b5e      	ldr	r3, [pc, #376]	; (80025b0 <main+0x588>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 817b 	beq.w	8002734 <main+0x70c>
		count++;
 800243e:	9b03      	ldr	r3, [sp, #12]
 8002440:	3301      	adds	r3, #1
 8002442:	9303      	str	r3, [sp, #12]
		cycle = false;
 8002444:	4b5a      	ldr	r3, [pc, #360]	; (80025b0 <main+0x588>)
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
		if (player->lp->life_points == 0) {
 800244a:	6823      	ldr	r3, [r4, #0]
 800244c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002450:	2b00      	cmp	r3, #0
 8002452:	f43f aed6 	beq.w	8002202 <main+0x1da>
		if (move_enter && !building_mode) {
 8002456:	4b54      	ldr	r3, [pc, #336]	; (80025a8 <main+0x580>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b123      	cbz	r3, 8002466 <main+0x43e>
 800245c:	4b4c      	ldr	r3, [pc, #304]	; (8002590 <main+0x568>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	f43f af11 	beq.w	8002288 <main+0x260>
			draw_scene(false);
 8002466:	2000      	movs	r0, #0
 8002468:	f000 fd64 	bl	8002f34 <draw_scene>
		old_camera_x = camera_x_block;
 800246c:	4b46      	ldr	r3, [pc, #280]	; (8002588 <main+0x560>)
 800246e:	881a      	ldrh	r2, [r3, #0]
 8002470:	4b50      	ldr	r3, [pc, #320]	; (80025b4 <main+0x58c>)
 8002472:	801a      	strh	r2, [r3, #0]
		old_camera_y = camera_y_block;
 8002474:	4b45      	ldr	r3, [pc, #276]	; (800258c <main+0x564>)
 8002476:	881a      	ldrh	r2, [r3, #0]
 8002478:	4b4f      	ldr	r3, [pc, #316]	; (80025b8 <main+0x590>)
 800247a:	801a      	strh	r2, [r3, #0]
		if (!building_mode) {
 800247c:	4b44      	ldr	r3, [pc, #272]	; (8002590 <main+0x568>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	f43f af0b 	beq.w	800229c <main+0x274>
		if (count % 3000 == 0) {
 8002486:	9a03      	ldr	r2, [sp, #12]
 8002488:	494c      	ldr	r1, [pc, #304]	; (80025bc <main+0x594>)
 800248a:	fb81 3102 	smull	r3, r1, r1, r2
 800248e:	17d3      	asrs	r3, r2, #31
 8002490:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
 8002494:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002498:	fb01 2313 	mls	r3, r1, r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	f47f af37 	bne.w	8002310 <main+0x2e8>
			if (count / 3000 == 0) {
 80024a2:	9b03      	ldr	r3, [sp, #12]
 80024a4:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
 80024a8:	f241 726e 	movw	r2, #5998	; 0x176e
 80024ac:	4293      	cmp	r3, r2
 80024ae:	f67f af1d 	bls.w	80022ec <main+0x2c4>
			} else if (count / 3000 == 1) {
 80024b2:	9b03      	ldr	r3, [sp, #12]
 80024b4:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 80024b8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80024bc:	4293      	cmp	r3, r2
 80024be:	d919      	bls.n	80024f4 <main+0x4cc>
			} else if (count / 3000 == 2) {
 80024c0:	9b03      	ldr	r3, [sp, #12]
 80024c2:	f5a3 53bb 	sub.w	r3, r3, #5984	; 0x1760
 80024c6:	3b10      	subs	r3, #16
 80024c8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d91b      	bls.n	8002508 <main+0x4e0>
			} else if (count / 3000 == 3) {
 80024d0:	9b03      	ldr	r3, [sp, #12]
 80024d2:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 80024d6:	3b28      	subs	r3, #40	; 0x28
 80024d8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80024dc:	4293      	cmp	r3, r2
 80024de:	d81d      	bhi.n	800251c <main+0x4f4>
				set_time("evening");
 80024e0:	4837      	ldr	r0, [pc, #220]	; (80025c0 <main+0x598>)
 80024e2:	f000 f97d 	bl	80027e0 <set_time>
				night = false;
 80024e6:	4b27      	ldr	r3, [pc, #156]	; (8002584 <main+0x55c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
				draw_scene(true);
 80024ec:	2001      	movs	r0, #1
 80024ee:	f000 fd21 	bl	8002f34 <draw_scene>
 80024f2:	e704      	b.n	80022fe <main+0x2d6>
				set_time("noon");
 80024f4:	4833      	ldr	r0, [pc, #204]	; (80025c4 <main+0x59c>)
 80024f6:	f000 f973 	bl	80027e0 <set_time>
				night = false;
 80024fa:	4b22      	ldr	r3, [pc, #136]	; (8002584 <main+0x55c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
				draw_scene(true);
 8002500:	2001      	movs	r0, #1
 8002502:	f000 fd17 	bl	8002f34 <draw_scene>
 8002506:	e6fa      	b.n	80022fe <main+0x2d6>
				set_time("afternoon");
 8002508:	482f      	ldr	r0, [pc, #188]	; (80025c8 <main+0x5a0>)
 800250a:	f000 f969 	bl	80027e0 <set_time>
				night = false;
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <main+0x55c>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
				draw_scene(true);
 8002514:	2001      	movs	r0, #1
 8002516:	f000 fd0d 	bl	8002f34 <draw_scene>
 800251a:	e6f0      	b.n	80022fe <main+0x2d6>
				set_time("night");
 800251c:	482b      	ldr	r0, [pc, #172]	; (80025cc <main+0x5a4>)
 800251e:	f000 f95f 	bl	80027e0 <set_time>
				night = true;
 8002522:	2001      	movs	r0, #1
 8002524:	4b17      	ldr	r3, [pc, #92]	; (8002584 <main+0x55c>)
 8002526:	7018      	strb	r0, [r3, #0]
				draw_scene(true);
 8002528:	f000 fd04 	bl	8002f34 <draw_scene>
 800252c:	e6e7      	b.n	80022fe <main+0x2d6>
				count = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	9303      	str	r3, [sp, #12]
 8002532:	e6ed      	b.n	8002310 <main+0x2e8>
		} else if (camera_x_block - pixel_to_block(player->pos->x) < -pixel_to_block(GUYSKO_WINDOW_SPAN_PIXEL_X)) {
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <main+0x560>)
 8002536:	881e      	ldrh	r6, [r3, #0]
 8002538:	6923      	ldr	r3, [r4, #16]
 800253a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800253e:	b280      	uxth	r0, r0
 8002540:	f003 f82f 	bl	80055a2 <pixel_to_block>
 8002544:	1a36      	subs	r6, r6, r0
 8002546:	204b      	movs	r0, #75	; 0x4b
 8002548:	f003 f82b 	bl	80055a2 <pixel_to_block>
 800254c:	4240      	negs	r0, r0
 800254e:	4286      	cmp	r6, r0
 8002550:	f6bf af00 	bge.w	8002354 <main+0x32c>
			new_camera_x = camera_x_block + abs(-camera_x_block - pixel_to_block(GUYSKO_WINDOW_SPAN_PIXEL_X) + pixel_to_block(player->pos->x));
 8002554:	4e0c      	ldr	r6, [pc, #48]	; (8002588 <main+0x560>)
 8002556:	8835      	ldrh	r5, [r6, #0]
 8002558:	426d      	negs	r5, r5
 800255a:	204b      	movs	r0, #75	; 0x4b
 800255c:	f003 f821 	bl	80055a2 <pixel_to_block>
 8002560:	1a2d      	subs	r5, r5, r0
 8002562:	6923      	ldr	r3, [r4, #16]
 8002564:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002568:	b280      	uxth	r0, r0
 800256a:	f003 f81a 	bl	80055a2 <pixel_to_block>
 800256e:	4405      	add	r5, r0
 8002570:	2d00      	cmp	r5, #0
 8002572:	bfb8      	it	lt
 8002574:	426d      	neglt	r5, r5
 8002576:	8833      	ldrh	r3, [r6, #0]
 8002578:	fa13 f585 	uxtah	r5, r3, r5
 800257c:	b2ad      	uxth	r5, r5
 800257e:	e6e9      	b.n	8002354 <main+0x32c>
 8002580:	080150ec 	.word	0x080150ec
 8002584:	20010bec 	.word	0x20010bec
 8002588:	20010be8 	.word	0x20010be8
 800258c:	20010bea 	.word	0x20010bea
 8002590:	20010fd0 	.word	0x20010fd0
 8002594:	200008f0 	.word	0x200008f0
 8002598:	200008f1 	.word	0x200008f1
 800259c:	200008f3 	.word	0x200008f3
 80025a0:	200008f2 	.word	0x200008f2
 80025a4:	200008fa 	.word	0x200008fa
 80025a8:	200008f6 	.word	0x200008f6
 80025ac:	200008f4 	.word	0x200008f4
 80025b0:	20000dd8 	.word	0x20000dd8
 80025b4:	20010bee 	.word	0x20010bee
 80025b8:	20010bf0 	.word	0x20010bf0
 80025bc:	057619f1 	.word	0x057619f1
 80025c0:	08015108 	.word	0x08015108
 80025c4:	080150f4 	.word	0x080150f4
 80025c8:	080150fc 	.word	0x080150fc
 80025cc:	08015110 	.word	0x08015110
		} else if (block_to_pixel(camera_y_block) - player->pos->y < (-1) * GUYSKO_WINDOW_SPAN_PIXEL_Y) {
 80025d0:	4b5a      	ldr	r3, [pc, #360]	; (800273c <main+0x714>)
 80025d2:	8818      	ldrh	r0, [r3, #0]
 80025d4:	f002 ffe7 	bl	80055a6 <block_to_pixel>
 80025d8:	6923      	ldr	r3, [r4, #16]
 80025da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025de:	1ac0      	subs	r0, r0, r3
 80025e0:	f110 0f1e 	cmn.w	r0, #30
 80025e4:	f6bf aed7 	bge.w	8002396 <main+0x36e>
			new_camera_y = pixel_to_block(block_to_pixel(camera_y_block) + abs((-1) * block_to_pixel(camera_y_block) - GUYSKO_WINDOW_SPAN_PIXEL_Y + player->pos->y));
 80025e8:	4f54      	ldr	r7, [pc, #336]	; (800273c <main+0x714>)
 80025ea:	8838      	ldrh	r0, [r7, #0]
 80025ec:	f002 ffdb 	bl	80055a6 <block_to_pixel>
 80025f0:	4606      	mov	r6, r0
 80025f2:	8838      	ldrh	r0, [r7, #0]
 80025f4:	f002 ffd7 	bl	80055a6 <block_to_pixel>
 80025f8:	f06f 031d 	mvn.w	r3, #29
 80025fc:	1a1b      	subs	r3, r3, r0
 80025fe:	6922      	ldr	r2, [r4, #16]
 8002600:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8002604:	4403      	add	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	bfb8      	it	lt
 800260a:	425b      	neglt	r3, r3
 800260c:	18f0      	adds	r0, r6, r3
 800260e:	b280      	uxth	r0, r0
 8002610:	f002 ffc7 	bl	80055a2 <pixel_to_block>
 8002614:	4607      	mov	r7, r0
 8002616:	e6be      	b.n	8002396 <main+0x36e>
				new_camera_y += BUILD_CAMERA_SPEED;
 8002618:	3702      	adds	r7, #2
 800261a:	b2bf      	uxth	r7, r7
				action_reset(ACT_DOWN_INDEX);
 800261c:	2002      	movs	r0, #2
 800261e:	f7fe fd23 	bl	8001068 <action_reset>
 8002622:	e6c4      	b.n	80023ae <main+0x386>
				new_camera_x -= BUILD_CAMERA_SPEED;
 8002624:	3d02      	subs	r5, #2
 8002626:	b2ad      	uxth	r5, r5
				action_reset(ACT_LEFT_INDEX);
 8002628:	2003      	movs	r0, #3
 800262a:	f7fe fd1d 	bl	8001068 <action_reset>
 800262e:	e6c3      	b.n	80023b8 <main+0x390>
				new_camera_y -= BUILD_CAMERA_SPEED;
 8002630:	3f02      	subs	r7, #2
 8002632:	b2bf      	uxth	r7, r7
				action_reset(ACT_UP_INDEX);
 8002634:	2000      	movs	r0, #0
 8002636:	f7fe fd17 	bl	8001068 <action_reset>
 800263a:	e6c2      	b.n	80023c2 <main+0x39a>
				new_camera_x += BUILD_CAMERA_SPEED;
 800263c:	3502      	adds	r5, #2
 800263e:	b2ad      	uxth	r5, r5
				action_reset(ACT_RIGHT_INDEX);
 8002640:	2001      	movs	r0, #1
 8002642:	f7fe fd11 	bl	8001068 <action_reset>
 8002646:	e6c1      	b.n	80023cc <main+0x3a4>
						x: block_to_pixel(new_camera_x),
 8002648:	4628      	mov	r0, r5
 800264a:	f002 ffac 	bl	80055a6 <block_to_pixel>
				pixel_position pos = {
 800264e:	f8ad 0008 	strh.w	r0, [sp, #8]
						y: block_to_pixel(new_camera_y)
 8002652:	4638      	mov	r0, r7
 8002654:	f002 ffa7 	bl	80055a6 <block_to_pixel>
				pixel_position pos = {
 8002658:	f8ad 000a 	strh.w	r0, [sp, #10]
				place_block(&pos, building_material, 0, 0);
 800265c:	2300      	movs	r3, #0
 800265e:	461a      	mov	r2, r3
 8002660:	4937      	ldr	r1, [pc, #220]	; (8002740 <main+0x718>)
 8002662:	7809      	ldrb	r1, [r1, #0]
 8002664:	a802      	add	r0, sp, #8
 8002666:	f003 f9e9 	bl	8005a3c <place_block>
				action_reset(OK_INDEX);
 800266a:	2004      	movs	r0, #4
 800266c:	f7fe fcfc 	bl	8001068 <action_reset>
 8002670:	e6b1      	b.n	80023d6 <main+0x3ae>
				cycle_building_material();
 8002672:	f003 fa33 	bl	8005adc <cycle_building_material>
				action_reset(MOVE_ENTER_INDEX);
 8002676:	200a      	movs	r0, #10
 8002678:	f7fe fcf6 	bl	8001068 <action_reset>
 800267c:	e6b0      	b.n	80023e0 <main+0x3b8>
				dig_down(player->pos);
 800267e:	6920      	ldr	r0, [r4, #16]
 8002680:	f003 f8ee 	bl	8005860 <dig_down>
				action_reset(ACT_DOWN_INDEX);
 8002684:	2002      	movs	r0, #2
 8002686:	f7fe fcef 	bl	8001068 <action_reset>
 800268a:	e6b7      	b.n	80023fc <main+0x3d4>
				dig_down(player->pos);
 800268c:	6920      	ldr	r0, [r4, #16]
 800268e:	f003 f8e7 	bl	8005860 <dig_down>
				action_reset(ACT_DOWN_INDEX);
 8002692:	2002      	movs	r0, #2
 8002694:	f7fe fce8 	bl	8001068 <action_reset>
 8002698:	e6b5      	b.n	8002406 <main+0x3de>
				dig_left(player->pos);
 800269a:	6920      	ldr	r0, [r4, #16]
 800269c:	f003 f92e 	bl	80058fc <dig_left>
				set_position(player->pos, player->pos->x+5, player->pos->y);
 80026a0:	6920      	ldr	r0, [r4, #16]
 80026a2:	8801      	ldrh	r1, [r0, #0]
 80026a4:	3105      	adds	r1, #5
 80026a6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80026aa:	b209      	sxth	r1, r1
 80026ac:	f003 ffef 	bl	800668e <set_position>
				overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(player->pos->x - 12, 0), world_pixel_to_world_pixel_y_no_band_param(player->pos->y, -GUYSKO_IMG_Y - 4),
 80026b0:	6923      	ldr	r3, [r4, #16]
 80026b2:	8818      	ldrh	r0, [r3, #0]
 80026b4:	380c      	subs	r0, #12
 80026b6:	2100      	movs	r1, #0
 80026b8:	b200      	sxth	r0, r0
 80026ba:	f001 ffe5 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 80026be:	4606      	mov	r6, r0
 80026c0:	6923      	ldr	r3, [r4, #16]
 80026c2:	f06f 011b 	mvn.w	r1, #27
 80026c6:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80026ca:	f001 ffea 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 80026ce:	4681      	mov	r9, r0
								world_pixel_to_world_pixel_x_no_band_param(player->pos->x + 4, 0), world_pixel_to_world_pixel_y_no_band_param(player->pos->y, 0));
 80026d0:	6923      	ldr	r3, [r4, #16]
 80026d2:	8818      	ldrh	r0, [r3, #0]
 80026d4:	3004      	adds	r0, #4
				overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(player->pos->x - 12, 0), world_pixel_to_world_pixel_y_no_band_param(player->pos->y, -GUYSKO_IMG_Y - 4),
 80026d6:	2100      	movs	r1, #0
 80026d8:	b200      	sxth	r0, r0
 80026da:	f001 ffd5 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 80026de:	4682      	mov	sl, r0
								world_pixel_to_world_pixel_x_no_band_param(player->pos->x + 4, 0), world_pixel_to_world_pixel_y_no_band_param(player->pos->y, 0));
 80026e0:	6923      	ldr	r3, [r4, #16]
				overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(player->pos->x - 12, 0), world_pixel_to_world_pixel_y_no_band_param(player->pos->y, -GUYSKO_IMG_Y - 4),
 80026e2:	2100      	movs	r1, #0
 80026e4:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80026e8:	f001 ffdb 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4652      	mov	r2, sl
 80026f0:	4649      	mov	r1, r9
 80026f2:	4630      	mov	r0, r6
 80026f4:	f003 fff8 	bl	80066e8 <overdraw_background_rectangle>
				action_reset(ACT_LEFT_INDEX);
 80026f8:	2003      	movs	r0, #3
 80026fa:	f7fe fcb5 	bl	8001068 <action_reset>
 80026fe:	e687      	b.n	8002410 <main+0x3e8>
				dig_right(player->pos);
 8002700:	6920      	ldr	r0, [r4, #16]
 8002702:	f003 f94b 	bl	800599c <dig_right>
				action_reset(ACT_RIGHT_INDEX);
 8002706:	2001      	movs	r0, #1
 8002708:	f7fe fcae 	bl	8001068 <action_reset>
 800270c:	e685      	b.n	800241a <main+0x3f2>
			building_mode = true;
 800270e:	2001      	movs	r0, #1
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <main+0x71c>)
 8002712:	7018      	strb	r0, [r3, #0]
			draw_scene(true);
 8002714:	f000 fc0e 	bl	8002f34 <draw_scene>
			action_reset(OK_INDEX);
 8002718:	2004      	movs	r0, #4
 800271a:	f7fe fca5 	bl	8001068 <action_reset>
 800271e:	e681      	b.n	8002424 <main+0x3fc>
			building_mode = false;
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <main+0x71c>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
			draw_scene(true);
 8002726:	2001      	movs	r0, #1
 8002728:	f000 fc04 	bl	8002f34 <draw_scene>
			action_reset(ESC_INDEX);
 800272c:	2005      	movs	r0, #5
 800272e:	f7fe fc9b 	bl	8001068 <action_reset>
 8002732:	e67c      	b.n	800242e <main+0x406>
			action_set(&joystick_raw);
 8002734:	a810      	add	r0, sp, #64	; 0x40
 8002736:	f7fe fcef 	bl	8001118 <action_set>
 800273a:	e67b      	b.n	8002434 <main+0x40c>
 800273c:	20010bea 	.word	0x20010bea
 8002740:	2000012c 	.word	0x2000012c
 8002744:	20010fd0 	.word	0x20010fd0

08002748 <is_destructible>:
		_fire
};


bool is_destructible(block_t material) {
	for (uint8_t i = 0; i < sizeof(destructible_materials) / sizeof(block_t); i++) {
 8002748:	2300      	movs	r3, #0
 800274a:	2b08      	cmp	r3, #8
 800274c:	d806      	bhi.n	800275c <is_destructible+0x14>
		if (destructible_materials[i] == material) {
 800274e:	4a05      	ldr	r2, [pc, #20]	; (8002764 <is_destructible+0x1c>)
 8002750:	5cd2      	ldrb	r2, [r2, r3]
 8002752:	4282      	cmp	r2, r0
 8002754:	d004      	beq.n	8002760 <is_destructible+0x18>
	for (uint8_t i = 0; i < sizeof(destructible_materials) / sizeof(block_t); i++) {
 8002756:	3301      	adds	r3, #1
 8002758:	b2db      	uxtb	r3, r3
 800275a:	e7f6      	b.n	800274a <is_destructible+0x2>
			return true;
		}
	}
	return false;
 800275c:	2000      	movs	r0, #0
 800275e:	4770      	bx	lr
			return true;
 8002760:	2001      	movs	r0, #1
}
 8002762:	4770      	bx	lr
 8002764:	20000004 	.word	0x20000004

08002768 <is_harmuful>:

bool is_harmuful(block_t material) {
	for (uint8_t i = 0; i < sizeof(harmuful_materials) / sizeof(block_t); i++) {
 8002768:	2300      	movs	r3, #0
 800276a:	2b01      	cmp	r3, #1
 800276c:	d806      	bhi.n	800277c <is_harmuful+0x14>
		if (harmuful_materials[i] == material) {
 800276e:	4a05      	ldr	r2, [pc, #20]	; (8002784 <is_harmuful+0x1c>)
 8002770:	5cd2      	ldrb	r2, [r2, r3]
 8002772:	4282      	cmp	r2, r0
 8002774:	d004      	beq.n	8002780 <is_harmuful+0x18>
	for (uint8_t i = 0; i < sizeof(harmuful_materials) / sizeof(block_t); i++) {
 8002776:	3301      	adds	r3, #1
 8002778:	b2db      	uxtb	r3, r3
 800277a:	e7f6      	b.n	800276a <is_harmuful+0x2>
			return true;
		}
	}
	return false;
 800277c:	2000      	movs	r0, #0
 800277e:	4770      	bx	lr
			return true;
 8002780:	2001      	movs	r0, #1
}
 8002782:	4770      	bx	lr
 8002784:	20000010 	.word	0x20000010

08002788 <is_solid>:

bool is_solid(block_t material) {
	for (uint8_t i = 0; i < sizeof(solid_materials) / sizeof(block_t); i++) {
 8002788:	2300      	movs	r3, #0
 800278a:	2b08      	cmp	r3, #8
 800278c:	d806      	bhi.n	800279c <is_solid+0x14>
		if (solid_materials[i] == material) {
 800278e:	4a05      	ldr	r2, [pc, #20]	; (80027a4 <is_solid+0x1c>)
 8002790:	5cd2      	ldrb	r2, [r2, r3]
 8002792:	4282      	cmp	r2, r0
 8002794:	d004      	beq.n	80027a0 <is_solid+0x18>
	for (uint8_t i = 0; i < sizeof(solid_materials) / sizeof(block_t); i++) {
 8002796:	3301      	adds	r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	e7f6      	b.n	800278a <is_solid+0x2>
			return true;
		}
	}
	return false;
 800279c:	2000      	movs	r0, #0
 800279e:	4770      	bx	lr
			return true;
 80027a0:	2001      	movs	r0, #1
}
 80027a2:	4770      	bx	lr
 80027a4:	20000018 	.word	0x20000018

080027a8 <is_light_source>:


bool is_light_source(uint8_t material) {
	uint8_t full_cell = material << 4 | material;
 80027a8:	ea40 1c00 	orr.w	ip, r0, r0, lsl #4
 80027ac:	fa4f fc8c 	sxtb.w	ip, ip
	for (uint8_t i = 0; i < N_LIGHT_SOURCES; i++) {
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d80c      	bhi.n	80027d0 <is_light_source+0x28>
		if (light_sources[i] == material) {
 80027b6:	4a09      	ldr	r2, [pc, #36]	; (80027dc <is_light_source+0x34>)
 80027b8:	5cd1      	ldrb	r1, [r2, r3]
 80027ba:	4281      	cmp	r1, r0
 80027bc:	d00a      	beq.n	80027d4 <is_light_source+0x2c>
			return true;
		}

		uint8_t full_source = light_sources[i] << 4 | light_sources[i];
 80027be:	b24a      	sxtb	r2, r1
 80027c0:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80027c4:	b252      	sxtb	r2, r2
		if (full_source == full_cell) {
 80027c6:	4594      	cmp	ip, r2
 80027c8:	d006      	beq.n	80027d8 <is_light_source+0x30>
	for (uint8_t i = 0; i < N_LIGHT_SOURCES; i++) {
 80027ca:	3301      	adds	r3, #1
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	e7f0      	b.n	80027b2 <is_light_source+0xa>
			return true;
		}

	}
	return false;
 80027d0:	2000      	movs	r0, #0
 80027d2:	4770      	bx	lr
			return true;
 80027d4:	2001      	movs	r0, #1
 80027d6:	4770      	bx	lr
			return true;
 80027d8:	2001      	movs	r0, #1
}
 80027da:	4770      	bx	lr
 80027dc:	20000014 	.word	0x20000014

080027e0 <set_time>:
uint16_t C_STAR[4] = {0xCDA7, 0xCDA7, 0xCDA7, 0xCDA7};

//#define COLOR_DIRT {C_BROWN, C_BROWN, C_SADDLE_BROWN, C_BROWN}
//#define COLOR_GRASS {C_GREEN, C_GREEN, C_DARK_GREEN, C_GREEN}

void set_time(char* time) {
 80027e0:	b510      	push	{r4, lr}
 80027e2:	4604      	mov	r4, r0
	if (strcmp(time, "morning") == 0) {
 80027e4:	4922      	ldr	r1, [pc, #136]	; (8002870 <set_time+0x90>)
 80027e6:	f7fd fd1b 	bl	8000220 <strcmp>
 80027ea:	4603      	mov	r3, r0
 80027ec:	b1c8      	cbz	r0, 8002822 <set_time+0x42>
		for (int i = 0; i < 4; i++) {
			C_SKY[i] = 0x8E7D;
		}
	} else if (strcmp(time, "noon") == 0) {
 80027ee:	4921      	ldr	r1, [pc, #132]	; (8002874 <set_time+0x94>)
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7fd fd15 	bl	8000220 <strcmp>
 80027f6:	4603      	mov	r3, r0
 80027f8:	b1b0      	cbz	r0, 8002828 <set_time+0x48>
		for (int i = 0; i < 4; i++) {
			C_SKY[i] = 0x347C;
		}
	} else if (strcmp(time, "afternoon") == 0) {
 80027fa:	491f      	ldr	r1, [pc, #124]	; (8002878 <set_time+0x98>)
 80027fc:	4620      	mov	r0, r4
 80027fe:	f7fd fd0f 	bl	8000220 <strcmp>
 8002802:	4603      	mov	r3, r0
 8002804:	b1f8      	cbz	r0, 8002846 <set_time+0x66>
		for (int i = 0; i < 4; i++) {
			C_SKY[i] = 0x23BF;
		}
	} else if (strcmp(time, "evening") == 0) {
 8002806:	491d      	ldr	r1, [pc, #116]	; (800287c <set_time+0x9c>)
 8002808:	4620      	mov	r0, r4
 800280a:	f7fd fd09 	bl	8000220 <strcmp>
 800280e:	4603      	mov	r3, r0
 8002810:	b310      	cbz	r0, 8002858 <set_time+0x78>
		for (int i = 0; i < 4; i++) {
			C_SKY[i] = 0x2B13;
		}
	} else {
		for (int i = 0; i < 4; i++) {
 8002812:	2300      	movs	r3, #0
 8002814:	e029      	b.n	800286a <set_time+0x8a>
			C_SKY[i] = 0x8E7D;
 8002816:	4a1a      	ldr	r2, [pc, #104]	; (8002880 <set_time+0xa0>)
 8002818:	f648 617d 	movw	r1, #36477	; 0x8e7d
 800281c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < 4; i++) {
 8002820:	3301      	adds	r3, #1
 8002822:	2b03      	cmp	r3, #3
 8002824:	ddf7      	ble.n	8002816 <set_time+0x36>
			C_SKY[i] = 0x018C;
		}
	}
}
 8002826:	bd10      	pop	{r4, pc}
		for (int i = 0; i < 4; i++) {
 8002828:	2b03      	cmp	r3, #3
 800282a:	dcfc      	bgt.n	8002826 <set_time+0x46>
			C_SKY[i] = 0x347C;
 800282c:	4a14      	ldr	r2, [pc, #80]	; (8002880 <set_time+0xa0>)
 800282e:	f243 417c 	movw	r1, #13436	; 0x347c
 8002832:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < 4; i++) {
 8002836:	3301      	adds	r3, #1
 8002838:	e7f6      	b.n	8002828 <set_time+0x48>
			C_SKY[i] = 0x23BF;
 800283a:	4a11      	ldr	r2, [pc, #68]	; (8002880 <set_time+0xa0>)
 800283c:	f242 31bf 	movw	r1, #9151	; 0x23bf
 8002840:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < 4; i++) {
 8002844:	3301      	adds	r3, #1
 8002846:	2b03      	cmp	r3, #3
 8002848:	ddf7      	ble.n	800283a <set_time+0x5a>
 800284a:	e7ec      	b.n	8002826 <set_time+0x46>
			C_SKY[i] = 0x2B13;
 800284c:	4a0c      	ldr	r2, [pc, #48]	; (8002880 <set_time+0xa0>)
 800284e:	f642 3113 	movw	r1, #11027	; 0x2b13
 8002852:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < 4; i++) {
 8002856:	3301      	adds	r3, #1
 8002858:	2b03      	cmp	r3, #3
 800285a:	ddf7      	ble.n	800284c <set_time+0x6c>
 800285c:	e7e3      	b.n	8002826 <set_time+0x46>
			C_SKY[i] = 0x018C;
 800285e:	4a08      	ldr	r2, [pc, #32]	; (8002880 <set_time+0xa0>)
 8002860:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002864:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < 4; i++) {
 8002868:	3301      	adds	r3, #1
 800286a:	2b03      	cmp	r3, #3
 800286c:	ddf7      	ble.n	800285e <set_time+0x7e>
 800286e:	e7da      	b.n	8002826 <set_time+0x46>
 8002870:	080150ec 	.word	0x080150ec
 8002874:	080150f4 	.word	0x080150f4
 8002878:	080150fc 	.word	0x080150fc
 800287c:	08015108 	.word	0x08015108
 8002880:	2000006c 	.word	0x2000006c

08002884 <map_name_to_material>:

uint16_t* map_name_to_material (block_t block) {

	//_dirt
	if (block == _dirt) {
 8002884:	2801      	cmp	r0, #1
 8002886:	d01d      	beq.n	80028c4 <map_name_to_material+0x40>
		return C_DIRT;
	}
	//_grass
	else if (block == _grass) {
 8002888:	2802      	cmp	r0, #2
 800288a:	d01d      	beq.n	80028c8 <map_name_to_material+0x44>
		return C_GRASS;
	}
	//_wood
	else if (block == _wood) {
 800288c:	2803      	cmp	r0, #3
 800288e:	d01d      	beq.n	80028cc <map_name_to_material+0x48>
		return C_WOOD;
	}
	//_sky
	else if (block == _sky) {
 8002890:	2804      	cmp	r0, #4
 8002892:	d01d      	beq.n	80028d0 <map_name_to_material+0x4c>
		return C_SKY;
	}
	//_water
	else if (block == _water) {
 8002894:	2805      	cmp	r0, #5
 8002896:	d01d      	beq.n	80028d4 <map_name_to_material+0x50>
		return C_WATER;
	}
	//_sand
	else if (block == _sand) {
 8002898:	2806      	cmp	r0, #6
 800289a:	d01d      	beq.n	80028d8 <map_name_to_material+0x54>
		return C_SAND;
	}
	//_rock
	else if (block == _rock) {
 800289c:	2807      	cmp	r0, #7
 800289e:	d01d      	beq.n	80028dc <map_name_to_material+0x58>
		return C_ROCK;
	}
	//_lava
	else if (block == _lava) {
 80028a0:	2808      	cmp	r0, #8
 80028a2:	d01d      	beq.n	80028e0 <map_name_to_material+0x5c>
		return C_LAVA;
	}
	//_red_wood
	else if (block == _red_wood) {
 80028a4:	2809      	cmp	r0, #9
 80028a6:	d01d      	beq.n	80028e4 <map_name_to_material+0x60>
		return C_RED_WOOD;
	}
	//_gold
	else if (block == _gold) {
 80028a8:	280a      	cmp	r0, #10
 80028aa:	d01d      	beq.n	80028e8 <map_name_to_material+0x64>
		return C_GOLDB;
	}
	//_diamond
	else if (block == _diamond) {
 80028ac:	280b      	cmp	r0, #11
 80028ae:	d01d      	beq.n	80028ec <map_name_to_material+0x68>
		return C_DIAMOND;
	}
	//_dirt_bg
	else if (block == _dirt_bg) {
 80028b0:	280c      	cmp	r0, #12
 80028b2:	d01d      	beq.n	80028f0 <map_name_to_material+0x6c>
		return C_BG_DIRT;
	}
	else if (block == _paint) {
 80028b4:	280f      	cmp	r0, #15
 80028b6:	d01d      	beq.n	80028f4 <map_name_to_material+0x70>
uint16_t* map_name_to_material (block_t block) {
 80028b8:	b082      	sub	sp, #8
		return C_PAINT;
	}
	uint16_t BLANK[4] = {0x0, 0x0, 0x0, 0x0};
 80028ba:	2000      	movs	r0, #0
 80028bc:	9000      	str	r0, [sp, #0]
 80028be:	9001      	str	r0, [sp, #4]
	return BLANK;
}
 80028c0:	b002      	add	sp, #8
 80028c2:	4770      	bx	lr
		return C_DIRT;
 80028c4:	480c      	ldr	r0, [pc, #48]	; (80028f8 <map_name_to_material+0x74>)
 80028c6:	4770      	bx	lr
		return C_GRASS;
 80028c8:	480c      	ldr	r0, [pc, #48]	; (80028fc <map_name_to_material+0x78>)
 80028ca:	4770      	bx	lr
		return C_WOOD;
 80028cc:	480c      	ldr	r0, [pc, #48]	; (8002900 <map_name_to_material+0x7c>)
 80028ce:	4770      	bx	lr
		return C_SKY;
 80028d0:	480c      	ldr	r0, [pc, #48]	; (8002904 <map_name_to_material+0x80>)
 80028d2:	4770      	bx	lr
		return C_WATER;
 80028d4:	480c      	ldr	r0, [pc, #48]	; (8002908 <map_name_to_material+0x84>)
 80028d6:	4770      	bx	lr
		return C_SAND;
 80028d8:	480c      	ldr	r0, [pc, #48]	; (800290c <map_name_to_material+0x88>)
 80028da:	4770      	bx	lr
		return C_ROCK;
 80028dc:	480c      	ldr	r0, [pc, #48]	; (8002910 <map_name_to_material+0x8c>)
 80028de:	4770      	bx	lr
		return C_LAVA;
 80028e0:	480c      	ldr	r0, [pc, #48]	; (8002914 <map_name_to_material+0x90>)
 80028e2:	4770      	bx	lr
		return C_RED_WOOD;
 80028e4:	480c      	ldr	r0, [pc, #48]	; (8002918 <map_name_to_material+0x94>)
 80028e6:	4770      	bx	lr
		return C_GOLDB;
 80028e8:	480c      	ldr	r0, [pc, #48]	; (800291c <map_name_to_material+0x98>)
 80028ea:	4770      	bx	lr
		return C_DIAMOND;
 80028ec:	480c      	ldr	r0, [pc, #48]	; (8002920 <map_name_to_material+0x9c>)
 80028ee:	4770      	bx	lr
		return C_BG_DIRT;
 80028f0:	480c      	ldr	r0, [pc, #48]	; (8002924 <map_name_to_material+0xa0>)
 80028f2:	4770      	bx	lr
		return C_PAINT;
 80028f4:	480c      	ldr	r0, [pc, #48]	; (8002928 <map_name_to_material+0xa4>)
}
 80028f6:	4770      	bx	lr
 80028f8:	2000002c 	.word	0x2000002c
 80028fc:	2000003c 	.word	0x2000003c
 8002900:	20000084 	.word	0x20000084
 8002904:	2000006c 	.word	0x2000006c
 8002908:	2000007c 	.word	0x2000007c
 800290c:	20000064 	.word	0x20000064
 8002910:	2000005c 	.word	0x2000005c
 8002914:	20000044 	.word	0x20000044
 8002918:	20000054 	.word	0x20000054
 800291c:	20000034 	.word	0x20000034
 8002920:	20000024 	.word	0x20000024
 8002924:	20000e28 	.word	0x20000e28
 8002928:	2000004c 	.word	0x2000004c

0800292c <get_material_name>:

char* get_material_name(block_t block) {
	//_dirt
	if (block == _dirt) {
 800292c:	2801      	cmp	r0, #1
 800292e:	d018      	beq.n	8002962 <get_material_name+0x36>
		return "Dirt";
	}
	//_grass
	else if (block == _grass) {
 8002930:	2802      	cmp	r0, #2
 8002932:	d018      	beq.n	8002966 <get_material_name+0x3a>
		return "Grass";
	}
	//_wood
	else if (block == _wood) {
 8002934:	2803      	cmp	r0, #3
 8002936:	d018      	beq.n	800296a <get_material_name+0x3e>
		return "Wood";
	}
	//_sky
	else if (block == _sky) {
 8002938:	2804      	cmp	r0, #4
 800293a:	d018      	beq.n	800296e <get_material_name+0x42>
		return "Sky";
	}
	//_water
	else if (block == _water) {
 800293c:	2805      	cmp	r0, #5
 800293e:	d018      	beq.n	8002972 <get_material_name+0x46>
		return "Water";
	}
	//_sand
	else if (block == _sand) {
 8002940:	2806      	cmp	r0, #6
 8002942:	d018      	beq.n	8002976 <get_material_name+0x4a>
		return "Sand";
	}
	//_rock
	else if (block == _rock) {
 8002944:	2807      	cmp	r0, #7
 8002946:	d018      	beq.n	800297a <get_material_name+0x4e>
		return "Rock";
	}
	//_lava
	else if (block == _lava) {
 8002948:	2808      	cmp	r0, #8
 800294a:	d018      	beq.n	800297e <get_material_name+0x52>
		return "Lava";
	}
	//_red_wood
	else if (block == _red_wood) {
 800294c:	2809      	cmp	r0, #9
 800294e:	d018      	beq.n	8002982 <get_material_name+0x56>
		return "Red wood";
	}
	//_gold
	else if (block == _gold) {
 8002950:	280a      	cmp	r0, #10
 8002952:	d018      	beq.n	8002986 <get_material_name+0x5a>
		return "Gold";
	}
	//_diamond
	else if (block == _diamond) {
 8002954:	280b      	cmp	r0, #11
 8002956:	d018      	beq.n	800298a <get_material_name+0x5e>
		return 	"Diamond";
	}
	//_dirt_bg
	else if (block == _dirt_bg) {
 8002958:	280c      	cmp	r0, #12
 800295a:	d018      	beq.n	800298e <get_material_name+0x62>
		return "Cave";
	}

	else if (block == _paint) {
 800295c:	280f      	cmp	r0, #15
 800295e:	d018      	beq.n	8002992 <get_material_name+0x66>
		return "Paint";
	}
}
 8002960:	4770      	bx	lr
		return "Dirt";
 8002962:	480d      	ldr	r0, [pc, #52]	; (8002998 <get_material_name+0x6c>)
 8002964:	4770      	bx	lr
		return "Grass";
 8002966:	480d      	ldr	r0, [pc, #52]	; (800299c <get_material_name+0x70>)
 8002968:	4770      	bx	lr
		return "Wood";
 800296a:	480d      	ldr	r0, [pc, #52]	; (80029a0 <get_material_name+0x74>)
 800296c:	4770      	bx	lr
		return "Sky";
 800296e:	480d      	ldr	r0, [pc, #52]	; (80029a4 <get_material_name+0x78>)
 8002970:	4770      	bx	lr
		return "Water";
 8002972:	480d      	ldr	r0, [pc, #52]	; (80029a8 <get_material_name+0x7c>)
 8002974:	4770      	bx	lr
		return "Sand";
 8002976:	480d      	ldr	r0, [pc, #52]	; (80029ac <get_material_name+0x80>)
 8002978:	4770      	bx	lr
		return "Rock";
 800297a:	480d      	ldr	r0, [pc, #52]	; (80029b0 <get_material_name+0x84>)
 800297c:	4770      	bx	lr
		return "Lava";
 800297e:	480d      	ldr	r0, [pc, #52]	; (80029b4 <get_material_name+0x88>)
 8002980:	4770      	bx	lr
		return "Red wood";
 8002982:	480d      	ldr	r0, [pc, #52]	; (80029b8 <get_material_name+0x8c>)
 8002984:	4770      	bx	lr
		return "Gold";
 8002986:	480d      	ldr	r0, [pc, #52]	; (80029bc <get_material_name+0x90>)
 8002988:	4770      	bx	lr
		return 	"Diamond";
 800298a:	480d      	ldr	r0, [pc, #52]	; (80029c0 <get_material_name+0x94>)
 800298c:	4770      	bx	lr
		return "Cave";
 800298e:	480d      	ldr	r0, [pc, #52]	; (80029c4 <get_material_name+0x98>)
 8002990:	4770      	bx	lr
		return "Paint";
 8002992:	480d      	ldr	r0, [pc, #52]	; (80029c8 <get_material_name+0x9c>)
}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	08015120 	.word	0x08015120
 800299c:	08015128 	.word	0x08015128
 80029a0:	08015130 	.word	0x08015130
 80029a4:	08015138 	.word	0x08015138
 80029a8:	0801513c 	.word	0x0801513c
 80029ac:	08015144 	.word	0x08015144
 80029b0:	0801514c 	.word	0x0801514c
 80029b4:	08015154 	.word	0x08015154
 80029b8:	0801515c 	.word	0x0801515c
 80029bc:	08015168 	.word	0x08015168
 80029c0:	08015170 	.word	0x08015170
 80029c4:	08015118 	.word	0x08015118
 80029c8:	08015178 	.word	0x08015178
 80029cc:	00000000 	.word	0x00000000

080029d0 <apply_shading>:
#define RGB565_RED 0xF800
#define RGB565_GREEN 0x7E0
#define RGB565_BLUE 0x1F

// Computes colors for some illumination factor
uint16_t* apply_shading(uint16_t colors[4], float illumination) {
 80029d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029d4:	ed2d 8b02 	vpush	{d8}
 80029d8:	b083      	sub	sp, #12
 80029da:	4682      	mov	sl, r0
 80029dc:	eef0 8a40 	vmov.f32	s17, s0

	for (uint8_t i = 0; i < 4; i++) {
 80029e0:	2400      	movs	r4, #0
 80029e2:	e03c      	b.n	8002a5e <apply_shading+0x8e>
		uint16_t r = (colors[i] & RGB565_RED) >> 11;
		uint16_t b = colors[i] & RGB565_BLUE;

		// For dirt, remove less red and green to get a better color
		if (colors[i] == C_DIRT[0]) {
			r = (uint8_t) (r * MIN(1, illumination * 1.3));
 80029e4:	f7fd fdd6 	bl	8000594 <__aeabi_i2d>
 80029e8:	4680      	mov	r8, r0
 80029ea:	4689      	mov	r9, r1
 80029ec:	ee18 0a90 	vmov	r0, s17
 80029f0:	f7fd fde2 	bl	80005b8 <__aeabi_f2d>
 80029f4:	a358      	add	r3, pc, #352	; (adr r3, 8002b58 <apply_shading+0x188>)
 80029f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fa:	f7fd fe35 	bl	8000668 <__aeabi_dmul>
 80029fe:	4606      	mov	r6, r0
 8002a00:	460f      	mov	r7, r1
 8002a02:	2200      	movs	r2, #0
 8002a04:	4b50      	ldr	r3, [pc, #320]	; (8002b48 <apply_shading+0x178>)
 8002a06:	f7fe f8bf 	bl	8000b88 <__aeabi_dcmpgt>
 8002a0a:	b108      	cbz	r0, 8002a10 <apply_shading+0x40>
 8002a0c:	2600      	movs	r6, #0
 8002a0e:	4f4e      	ldr	r7, [pc, #312]	; (8002b48 <apply_shading+0x178>)
 8002a10:	4632      	mov	r2, r6
 8002a12:	463b      	mov	r3, r7
 8002a14:	4640      	mov	r0, r8
 8002a16:	4649      	mov	r1, r9
 8002a18:	f7fd fe26 	bl	8000668 <__aeabi_dmul>
 8002a1c:	f7fe f8fc 	bl	8000c18 <__aeabi_d2uiz>
 8002a20:	fa5f f880 	uxtb.w	r8, r0
			g = (uint8_t) (g * MIN(1, illumination * 1.3));
 8002a24:	4628      	mov	r0, r5
 8002a26:	f7fd fdb5 	bl	8000594 <__aeabi_i2d>
 8002a2a:	4632      	mov	r2, r6
 8002a2c:	463b      	mov	r3, r7
 8002a2e:	f7fd fe1b 	bl	8000668 <__aeabi_dmul>
 8002a32:	f7fe f8f1 	bl	8000c18 <__aeabi_d2uiz>
 8002a36:	b2c3      	uxtb	r3, r0

			b = (uint8_t) (b * illumination);
 8002a38:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8002a3c:	ee28 8a28 	vmul.f32	s16, s16, s17
 8002a40:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002a44:	edcd 7a01 	vstr	s15, [sp, #4]
 8002a48:	f89d 2004 	ldrb.w	r2, [sp, #4]
			g = (uint8_t) (g * illumination);
			b = (uint8_t) (b * illumination);
		}

		// MAKE SURE TO 0 PAD TO GET RGB OF LENGTH 4
		uint16_t rgb = (r << 11) | (g << 5) | (b);
 8002a4c:	015b      	lsls	r3, r3, #5
 8002a4e:	ea43 23c8 	orr.w	r3, r3, r8, lsl #11
 8002a52:	b21b      	sxth	r3, r3
 8002a54:	4313      	orrs	r3, r2

		colors[i] = rgb;
 8002a56:	f82a 300b 	strh.w	r3, [sl, fp]
	for (uint8_t i = 0; i < 4; i++) {
 8002a5a:	3401      	adds	r4, #1
 8002a5c:	b2e4      	uxtb	r4, r4
 8002a5e:	2c03      	cmp	r4, #3
 8002a60:	d86b      	bhi.n	8002b3a <apply_shading+0x16a>
		uint16_t g = (colors[i] & RGB565_GREEN) >> 5;
 8002a62:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 8002a66:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
 8002a6a:	f3c3 1545 	ubfx	r5, r3, #5, #6
		uint16_t r = (colors[i] & RGB565_RED) >> 11;
 8002a6e:	0ad8      	lsrs	r0, r3, #11
		uint16_t b = colors[i] & RGB565_BLUE;
 8002a70:	f003 021f 	and.w	r2, r3, #31
 8002a74:	ee08 2a10 	vmov	s16, r2
		if (colors[i] == C_DIRT[0]) {
 8002a78:	4a34      	ldr	r2, [pc, #208]	; (8002b4c <apply_shading+0x17c>)
 8002a7a:	8812      	ldrh	r2, [r2, #0]
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d0b1      	beq.n	80029e4 <apply_shading+0x14>
		} else if (colors[i] == C_BG_DIRT[0]) {
 8002a80:	4a33      	ldr	r2, [pc, #204]	; (8002b50 <apply_shading+0x180>)
 8002a82:	8812      	ldrh	r2, [r2, #0]
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d022      	beq.n	8002ace <apply_shading+0xfe>
			r = (uint8_t) (r * illumination);
 8002a88:	ee07 0a90 	vmov	s15, r0
 8002a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a90:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8002a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a98:	edcd 7a01 	vstr	s15, [sp, #4]
 8002a9c:	f89d 8004 	ldrb.w	r8, [sp, #4]
			g = (uint8_t) (g * illumination);
 8002aa0:	ee07 5a90 	vmov	s15, r5
 8002aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aa8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8002aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ab0:	edcd 7a01 	vstr	s15, [sp, #4]
 8002ab4:	f89d 3004 	ldrb.w	r3, [sp, #4]
			b = (uint8_t) (b * illumination);
 8002ab8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8002abc:	ee28 8a28 	vmul.f32	s16, s16, s17
 8002ac0:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002ac4:	edcd 7a01 	vstr	s15, [sp, #4]
 8002ac8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002acc:	e7be      	b.n	8002a4c <apply_shading+0x7c>
			r = (uint8_t) (r * MIN(1, illumination * 1.5));
 8002ace:	f7fd fd61 	bl	8000594 <__aeabi_i2d>
 8002ad2:	4680      	mov	r8, r0
 8002ad4:	4689      	mov	r9, r1
 8002ad6:	ee18 0a90 	vmov	r0, s17
 8002ada:	f7fd fd6d 	bl	80005b8 <__aeabi_f2d>
 8002ade:	2200      	movs	r2, #0
 8002ae0:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <apply_shading+0x184>)
 8002ae2:	f7fd fdc1 	bl	8000668 <__aeabi_dmul>
 8002ae6:	4606      	mov	r6, r0
 8002ae8:	460f      	mov	r7, r1
 8002aea:	2200      	movs	r2, #0
 8002aec:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <apply_shading+0x178>)
 8002aee:	f7fe f84b 	bl	8000b88 <__aeabi_dcmpgt>
 8002af2:	b108      	cbz	r0, 8002af8 <apply_shading+0x128>
 8002af4:	2600      	movs	r6, #0
 8002af6:	4f14      	ldr	r7, [pc, #80]	; (8002b48 <apply_shading+0x178>)
 8002af8:	4632      	mov	r2, r6
 8002afa:	463b      	mov	r3, r7
 8002afc:	4640      	mov	r0, r8
 8002afe:	4649      	mov	r1, r9
 8002b00:	f7fd fdb2 	bl	8000668 <__aeabi_dmul>
 8002b04:	f7fe f888 	bl	8000c18 <__aeabi_d2uiz>
 8002b08:	fa5f f880 	uxtb.w	r8, r0
			g = (uint8_t) (g * illumination);
 8002b0c:	ee07 5a90 	vmov	s15, r5
 8002b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b14:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8002b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b1c:	edcd 7a01 	vstr	s15, [sp, #4]
 8002b20:	f89d 3004 	ldrb.w	r3, [sp, #4]
			b = (uint8_t) (b * illumination);
 8002b24:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8002b28:	ee28 8a28 	vmul.f32	s16, s16, s17
 8002b2c:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002b30:	edcd 7a01 	vstr	s15, [sp, #4]
 8002b34:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002b38:	e788      	b.n	8002a4c <apply_shading+0x7c>
	}

	return colors;
}
 8002b3a:	4650      	mov	r0, sl
 8002b3c:	b003      	add	sp, #12
 8002b3e:	ecbd 8b02 	vpop	{d8}
 8002b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b46:	bf00      	nop
 8002b48:	3ff00000 	.word	0x3ff00000
 8002b4c:	2000002c 	.word	0x2000002c
 8002b50:	20000e28 	.word	0x20000e28
 8002b54:	3ff80000 	.word	0x3ff80000
 8002b58:	cccccccd 	.word	0xcccccccd
 8002b5c:	3ff4cccc 	.word	0x3ff4cccc

08002b60 <create_block>:

/* Creates block with given coordinates and width */
block* create_block(uint16_t x, uint16_t y, uint16_t colors[4], uint8_t type, float illumination) {
 8002b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b64:	ed2d 8b02 	vpush	{d8}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	4680      	mov	r8, r0
 8002b6c:	460f      	mov	r7, r1
 8002b6e:	4615      	mov	r5, r2
 8002b70:	461e      	mov	r6, r3
 8002b72:	eeb0 8a40 	vmov.f32	s16, s0
	block *block = (struct _block*) malloc(sizeof(struct _block));
 8002b76:	200e      	movs	r0, #14
 8002b78:	f00d fd5a 	bl	8010630 <malloc>
 8002b7c:	4604      	mov	r4, r0
	block->pos.x = x;
 8002b7e:	f8a0 8000 	strh.w	r8, [r0]
	block->pos.y = y;
 8002b82:	8047      	strh	r7, [r0, #2]
	block->type = type;
 8002b84:	7306      	strb	r6, [r0, #12]

	uint16_t copy[4];
	for (uint8_t i = 0; i < 4; i++) {
 8002b86:	2300      	movs	r3, #0
 8002b88:	e008      	b.n	8002b9c <create_block+0x3c>
		copy[i] = colors[i];
 8002b8a:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
 8002b8e:	aa02      	add	r2, sp, #8
 8002b90:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8002b94:	f821 0c08 	strh.w	r0, [r1, #-8]
	for (uint8_t i = 0; i < 4; i++) {
 8002b98:	3301      	adds	r3, #1
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d9f4      	bls.n	8002b8a <create_block+0x2a>
	}

	// Get appropriate colors

	uint16_t *new_colors = apply_shading(copy, illumination);
 8002ba0:	eeb0 0a48 	vmov.f32	s0, s16
 8002ba4:	4668      	mov	r0, sp
 8002ba6:	f7ff ff13 	bl	80029d0 <apply_shading>
	for (uint8_t i = 0; i < 4; i++) {
 8002baa:	2300      	movs	r3, #0
 8002bac:	e006      	b.n	8002bbc <create_block+0x5c>
		block->colors[i] = new_colors[i];
 8002bae:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8002bb2:	eb04 0243 	add.w	r2, r4, r3, lsl #1
 8002bb6:	8091      	strh	r1, [r2, #4]
	for (uint8_t i = 0; i < 4; i++) {
 8002bb8:	3301      	adds	r3, #1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d9f6      	bls.n	8002bae <create_block+0x4e>
	}

	return block;
}
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	b002      	add	sp, #8
 8002bc4:	ecbd 8b02 	vpop	{d8}
 8002bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002bcc <create_destroyable>:

// Create wrapper for block - destroyables
destroyable* create_destroyable(uint16_t x, uint16_t y, uint16_t colors[4], uint8_t type, float illumination) {
 8002bcc:	b510      	push	{r4, lr}
	block *block = create_block(x, y, colors, type, illumination);
 8002bce:	f7ff ffc7 	bl	8002b60 <create_block>
 8002bd2:	4604      	mov	r4, r0

	destroyable *destroyable = (struct _destroyable*) malloc(
 8002bd4:	2004      	movs	r0, #4
 8002bd6:	f00d fd2b 	bl	8010630 <malloc>
			sizeof(struct _destroyable));
	destroyable->block = block;
 8002bda:	6004      	str	r4, [r0, #0]
	return destroyable;
}
 8002bdc:	bd10      	pop	{r4, pc}

08002bde <create_bg_material>:

bg_material* create_bg_material(uint16_t x, uint16_t y, uint16_t colors[4], uint8_t type, float illumination) {
 8002bde:	b510      	push	{r4, lr}
	block *block = create_block(x, y, colors, type, illumination);
 8002be0:	f7ff ffbe 	bl	8002b60 <create_block>
 8002be4:	4604      	mov	r4, r0

	bg_material *bg_material = (struct _bg_material*) malloc(
 8002be6:	2004      	movs	r0, #4
 8002be8:	f00d fd22 	bl	8010630 <malloc>
			sizeof(struct _bg_material));
	bg_material->block = block;
 8002bec:	6004      	str	r4, [r0, #0]
	return bg_material;
}
 8002bee:	bd10      	pop	{r4, pc}

08002bf0 <draw_block>:

/* Draws a block with its colors, attempt to draw chunks as big as possible */
void draw_block(block *block) {
 8002bf0:	b530      	push	{r4, r5, lr}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	4604      	mov	r4, r0
//	_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x, block->pos.y, block->colors[0]);
	if (block->colors[0] == block->colors[1] && block->colors[1] == block->colors[2] && block->colors[2] == block->colors[3]) {
 8002bf6:	8885      	ldrh	r5, [r0, #4]
 8002bf8:	88c3      	ldrh	r3, [r0, #6]
 8002bfa:	429d      	cmp	r5, r3
 8002bfc:	d029      	beq.n	8002c52 <draw_block+0x62>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x, block->pos.y, block->colors[0]);
	} else if (block->colors[0] == block->colors[1]) {	// Top part
 8002bfe:	429d      	cmp	r5, r3
 8002c00:	d035      	beq.n	8002c6e <draw_block+0x7e>
			_HW_FillFrame_(block->pos.x - 4, block->pos.y - 2, block->pos.x - 2,
					block->pos.y, block->colors[2]);
			_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
					block->pos.y, block->colors[3]);
		}
	} else if (block->colors[0] == block->colors[2]) {	// Left part
 8002c02:	8923      	ldrh	r3, [r4, #8]
 8002c04:	429d      	cmp	r5, r3
 8002c06:	d057      	beq.n	8002cb8 <draw_block+0xc8>
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
				block->pos.y - 2, block->colors[1]);
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
				block->pos.y, block->colors[3]);
	} else {
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x - 2,
 8002c08:	8820      	ldrh	r0, [r4, #0]
 8002c0a:	8861      	ldrh	r1, [r4, #2]
 8002c0c:	9500      	str	r5, [sp, #0]
 8002c0e:	1e8b      	subs	r3, r1, #2
 8002c10:	1e82      	subs	r2, r0, #2
 8002c12:	3904      	subs	r1, #4
 8002c14:	3804      	subs	r0, #4
 8002c16:	f00a ff79 	bl	800db0c <_HW_FillFrame_>
				block->pos.y - 2, block->colors[0]);
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 8002c1a:	8822      	ldrh	r2, [r4, #0]
 8002c1c:	8861      	ldrh	r1, [r4, #2]
				block->pos.y - 2, block->colors[1]);
 8002c1e:	88e3      	ldrh	r3, [r4, #6]
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	1e8b      	subs	r3, r1, #2
 8002c24:	3904      	subs	r1, #4
 8002c26:	1e90      	subs	r0, r2, #2
 8002c28:	f00a ff70 	bl	800db0c <_HW_FillFrame_>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 2, block->pos.x - 2,
 8002c2c:	8820      	ldrh	r0, [r4, #0]
 8002c2e:	8863      	ldrh	r3, [r4, #2]
				block->pos.y, block->colors[2]);
 8002c30:	8922      	ldrh	r2, [r4, #8]
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 2, block->pos.x - 2,
 8002c32:	9200      	str	r2, [sp, #0]
 8002c34:	1e82      	subs	r2, r0, #2
 8002c36:	1e99      	subs	r1, r3, #2
 8002c38:	3804      	subs	r0, #4
 8002c3a:	f00a ff67 	bl	800db0c <_HW_FillFrame_>
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 8002c3e:	8822      	ldrh	r2, [r4, #0]
 8002c40:	8863      	ldrh	r3, [r4, #2]
				block->pos.y, block->colors[3]);
 8002c42:	8961      	ldrh	r1, [r4, #10]
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 8002c44:	9100      	str	r1, [sp, #0]
 8002c46:	1e99      	subs	r1, r3, #2
 8002c48:	1e90      	subs	r0, r2, #2
 8002c4a:	f00a ff5f 	bl	800db0c <_HW_FillFrame_>
	}

}
 8002c4e:	b003      	add	sp, #12
 8002c50:	bd30      	pop	{r4, r5, pc}
	if (block->colors[0] == block->colors[1] && block->colors[1] == block->colors[2] && block->colors[2] == block->colors[3]) {
 8002c52:	8902      	ldrh	r2, [r0, #8]
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d1d2      	bne.n	8002bfe <draw_block+0xe>
 8002c58:	8941      	ldrh	r1, [r0, #10]
 8002c5a:	428a      	cmp	r2, r1
 8002c5c:	d1cf      	bne.n	8002bfe <draw_block+0xe>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x, block->pos.y, block->colors[0]);
 8002c5e:	8802      	ldrh	r2, [r0, #0]
 8002c60:	8843      	ldrh	r3, [r0, #2]
 8002c62:	9500      	str	r5, [sp, #0]
 8002c64:	1f19      	subs	r1, r3, #4
 8002c66:	1f10      	subs	r0, r2, #4
 8002c68:	f00a ff50 	bl	800db0c <_HW_FillFrame_>
	if (block->colors[0] == block->colors[1] && block->colors[1] == block->colors[2] && block->colors[2] == block->colors[3]) {
 8002c6c:	e7ef      	b.n	8002c4e <draw_block+0x5e>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x,
 8002c6e:	8822      	ldrh	r2, [r4, #0]
 8002c70:	8861      	ldrh	r1, [r4, #2]
 8002c72:	9500      	str	r5, [sp, #0]
 8002c74:	1e8b      	subs	r3, r1, #2
 8002c76:	3904      	subs	r1, #4
 8002c78:	1f10      	subs	r0, r2, #4
 8002c7a:	f00a ff47 	bl	800db0c <_HW_FillFrame_>
		if (block->colors[2] == block->colors[3]) {		// Bottom part
 8002c7e:	8925      	ldrh	r5, [r4, #8]
 8002c80:	8963      	ldrh	r3, [r4, #10]
 8002c82:	429d      	cmp	r5, r3
 8002c84:	d010      	beq.n	8002ca8 <draw_block+0xb8>
			_HW_FillFrame_(block->pos.x - 4, block->pos.y - 2, block->pos.x - 2,
 8002c86:	8820      	ldrh	r0, [r4, #0]
 8002c88:	8863      	ldrh	r3, [r4, #2]
 8002c8a:	9500      	str	r5, [sp, #0]
 8002c8c:	1e82      	subs	r2, r0, #2
 8002c8e:	1e99      	subs	r1, r3, #2
 8002c90:	3804      	subs	r0, #4
 8002c92:	f00a ff3b 	bl	800db0c <_HW_FillFrame_>
			_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 8002c96:	8822      	ldrh	r2, [r4, #0]
 8002c98:	8863      	ldrh	r3, [r4, #2]
					block->pos.y, block->colors[3]);
 8002c9a:	8961      	ldrh	r1, [r4, #10]
			_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 8002c9c:	9100      	str	r1, [sp, #0]
 8002c9e:	1e99      	subs	r1, r3, #2
 8002ca0:	1e90      	subs	r0, r2, #2
 8002ca2:	f00a ff33 	bl	800db0c <_HW_FillFrame_>
 8002ca6:	e7d2      	b.n	8002c4e <draw_block+0x5e>
			_HW_FillFrame_(block->pos.x - 4, block->pos.y - 2, block->pos.x,
 8002ca8:	8822      	ldrh	r2, [r4, #0]
 8002caa:	8863      	ldrh	r3, [r4, #2]
 8002cac:	9500      	str	r5, [sp, #0]
 8002cae:	1e99      	subs	r1, r3, #2
 8002cb0:	1f10      	subs	r0, r2, #4
 8002cb2:	f00a ff2b 	bl	800db0c <_HW_FillFrame_>
 8002cb6:	e7ca      	b.n	8002c4e <draw_block+0x5e>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x - 2,
 8002cb8:	8820      	ldrh	r0, [r4, #0]
 8002cba:	8863      	ldrh	r3, [r4, #2]
 8002cbc:	9500      	str	r5, [sp, #0]
 8002cbe:	1e82      	subs	r2, r0, #2
 8002cc0:	1f19      	subs	r1, r3, #4
 8002cc2:	3804      	subs	r0, #4
 8002cc4:	f00a ff22 	bl	800db0c <_HW_FillFrame_>
		if (block->colors[1] == block->colors[3]) {		// Right part
 8002cc8:	88e3      	ldrh	r3, [r4, #6]
 8002cca:	8962      	ldrh	r2, [r4, #10]
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d011      	beq.n	8002cf4 <draw_block+0x104>
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 8002cd0:	8822      	ldrh	r2, [r4, #0]
 8002cd2:	8861      	ldrh	r1, [r4, #2]
				block->pos.y - 2, block->colors[1]);
 8002cd4:	88e3      	ldrh	r3, [r4, #6]
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	1e8b      	subs	r3, r1, #2
 8002cda:	3904      	subs	r1, #4
 8002cdc:	1e90      	subs	r0, r2, #2
 8002cde:	f00a ff15 	bl	800db0c <_HW_FillFrame_>
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 8002ce2:	8822      	ldrh	r2, [r4, #0]
 8002ce4:	8863      	ldrh	r3, [r4, #2]
				block->pos.y, block->colors[3]);
 8002ce6:	8961      	ldrh	r1, [r4, #10]
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 8002ce8:	9100      	str	r1, [sp, #0]
 8002cea:	1e99      	subs	r1, r3, #2
 8002cec:	1e90      	subs	r0, r2, #2
 8002cee:	f00a ff0d 	bl	800db0c <_HW_FillFrame_>
 8002cf2:	e7ac      	b.n	8002c4e <draw_block+0x5e>
			_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 8002cf4:	8822      	ldrh	r2, [r4, #0]
 8002cf6:	8861      	ldrh	r1, [r4, #2]
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	1e8b      	subs	r3, r1, #2
 8002cfc:	3904      	subs	r1, #4
 8002cfe:	1e90      	subs	r0, r2, #2
 8002d00:	f00a ff04 	bl	800db0c <_HW_FillFrame_>
 8002d04:	e7e4      	b.n	8002cd0 <draw_block+0xe0>

08002d06 <free_block>:
	free_block(mat->block);
	free(mat);
}

/* Frees the memory of a block pointer */
void free_block(block *block) {
 8002d06:	b508      	push	{r3, lr}
	free(block);
 8002d08:	f00d fc9a 	bl	8010640 <free>
}
 8002d0c:	bd08      	pop	{r3, pc}

08002d0e <free_destroyable>:
void free_destroyable(destroyable *destroyable) {
 8002d0e:	b510      	push	{r4, lr}
 8002d10:	4604      	mov	r4, r0
	free_block(destroyable->block);
 8002d12:	6800      	ldr	r0, [r0, #0]
 8002d14:	f7ff fff7 	bl	8002d06 <free_block>
	free(destroyable);
 8002d18:	4620      	mov	r0, r4
 8002d1a:	f00d fc91 	bl	8010640 <free>
}
 8002d1e:	bd10      	pop	{r4, pc}

08002d20 <free_bg_material>:
void free_bg_material(bg_material *mat) {
 8002d20:	b510      	push	{r4, lr}
 8002d22:	4604      	mov	r4, r0
	free_block(mat->block);
 8002d24:	6800      	ldr	r0, [r0, #0]
 8002d26:	f7ff ffee 	bl	8002d06 <free_block>
	free(mat);
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f00d fc88 	bl	8010640 <free>
}
 8002d30:	bd10      	pop	{r4, pc}
	...

08002d34 <render_block>:
	if (material == _empty) {
 8002d34:	2800      	cmp	r0, #0
 8002d36:	f000 80e0 	beq.w	8002efa <render_block+0x1c6>
void render_block(block_t material, pixel_c pixel_pos_x, pixel_c pixel_pos_y, float illumination, block_c ground_height, block_c current_height) {
 8002d3a:	b538      	push	{r3, r4, r5, lr}
 8002d3c:	ed2d 8b02 	vpush	{d8}
 8002d40:	460d      	mov	r5, r1
 8002d42:	4614      	mov	r4, r2
 8002d44:	eeb0 8a40 	vmov.f32	s16, s0
 8002d48:	4603      	mov	r3, r0
	if (material == (block_t) _dirt) {
 8002d4a:	2801      	cmp	r0, #1
 8002d4c:	d024      	beq.n	8002d98 <render_block+0x64>
	} else if (material == (block_t) _grass) {
 8002d4e:	2802      	cmp	r0, #2
 8002d50:	d031      	beq.n	8002db6 <render_block+0x82>
	} else if (material == (block_t) _lava) {
 8002d52:	2808      	cmp	r0, #8
 8002d54:	d03c      	beq.n	8002dd0 <render_block+0x9c>
	} else if (material == (block_t) _wood) {
 8002d56:	2803      	cmp	r0, #3
 8002d58:	d047      	beq.n	8002dea <render_block+0xb6>
	} else if (material == (block_t) _red_wood) {
 8002d5a:	2809      	cmp	r0, #9
 8002d5c:	d052      	beq.n	8002e04 <render_block+0xd0>
	} else if (material == (block_t) _sand) {
 8002d5e:	2806      	cmp	r0, #6
 8002d60:	d05d      	beq.n	8002e1e <render_block+0xea>
	} else if (material == (block_t) _rock) {
 8002d62:	2807      	cmp	r0, #7
 8002d64:	d068      	beq.n	8002e38 <render_block+0x104>
	} else if (material == (block_t) _dirt_bg) {
 8002d66:	280c      	cmp	r0, #12
 8002d68:	d073      	beq.n	8002e52 <render_block+0x11e>
	} else if (material == (block_t) _gold) {
 8002d6a:	280a      	cmp	r0, #10
 8002d6c:	d07e      	beq.n	8002e6c <render_block+0x138>
	}  else if (material == (block_t) _diamond) {
 8002d6e:	280b      	cmp	r0, #11
 8002d70:	f000 8089 	beq.w	8002e86 <render_block+0x152>
	} else if (material == (block_t) _sky) {
 8002d74:	2804      	cmp	r0, #4
 8002d76:	f000 8093 	beq.w	8002ea0 <render_block+0x16c>
	} else if (material == (block_t) _paint) {
 8002d7a:	280f      	cmp	r0, #15
 8002d7c:	d118      	bne.n	8002db0 <render_block+0x7c>
		bg_material *paint = create_bg_material(pixel_pos_x, pixel_pos_y, C_PAINT, _paint, illumination);
 8002d7e:	4a5f      	ldr	r2, [pc, #380]	; (8002efc <render_block+0x1c8>)
 8002d80:	4621      	mov	r1, r4
 8002d82:	4628      	mov	r0, r5
 8002d84:	f7ff ff2b 	bl	8002bde <create_bg_material>
 8002d88:	4604      	mov	r4, r0
		draw_block(paint->block);
 8002d8a:	6800      	ldr	r0, [r0, #0]
 8002d8c:	f7ff ff30 	bl	8002bf0 <draw_block>
		free_bg_material(paint);
 8002d90:	4620      	mov	r0, r4
 8002d92:	f7ff ffc5 	bl	8002d20 <free_bg_material>
 8002d96:	e00b      	b.n	8002db0 <render_block+0x7c>
		destroyable *dirt = create_destroyable(pixel_pos_x, pixel_pos_y, C_DIRT, _dirt, illumination);
 8002d98:	4a59      	ldr	r2, [pc, #356]	; (8002f00 <render_block+0x1cc>)
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	f7ff ff15 	bl	8002bcc <create_destroyable>
 8002da2:	4604      	mov	r4, r0
		draw_block(dirt->block);
 8002da4:	6800      	ldr	r0, [r0, #0]
 8002da6:	f7ff ff23 	bl	8002bf0 <draw_block>
		free_destroyable(dirt);
 8002daa:	4620      	mov	r0, r4
 8002dac:	f7ff ffaf 	bl	8002d0e <free_destroyable>
}
 8002db0:	ecbd 8b02 	vpop	{d8}
 8002db4:	bd38      	pop	{r3, r4, r5, pc}
		destroyable *grass = create_destroyable(pixel_pos_x, pixel_pos_y, C_GRASS, _grass, illumination);
 8002db6:	4a53      	ldr	r2, [pc, #332]	; (8002f04 <render_block+0x1d0>)
 8002db8:	4621      	mov	r1, r4
 8002dba:	4628      	mov	r0, r5
 8002dbc:	f7ff ff06 	bl	8002bcc <create_destroyable>
 8002dc0:	4604      	mov	r4, r0
		draw_block(grass->block);
 8002dc2:	6800      	ldr	r0, [r0, #0]
 8002dc4:	f7ff ff14 	bl	8002bf0 <draw_block>
		free_destroyable(grass);
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f7ff ffa0 	bl	8002d0e <free_destroyable>
 8002dce:	e7ef      	b.n	8002db0 <render_block+0x7c>
		destroyable *lava = create_destroyable(pixel_pos_x, pixel_pos_y, C_LAVA, _lava, illumination);
 8002dd0:	4a4d      	ldr	r2, [pc, #308]	; (8002f08 <render_block+0x1d4>)
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	4628      	mov	r0, r5
 8002dd6:	f7ff fef9 	bl	8002bcc <create_destroyable>
 8002dda:	4604      	mov	r4, r0
		draw_block(lava->block);
 8002ddc:	6800      	ldr	r0, [r0, #0]
 8002dde:	f7ff ff07 	bl	8002bf0 <draw_block>
		free_destroyable(lava);
 8002de2:	4620      	mov	r0, r4
 8002de4:	f7ff ff93 	bl	8002d0e <free_destroyable>
 8002de8:	e7e2      	b.n	8002db0 <render_block+0x7c>
		destroyable *wood = create_destroyable(pixel_pos_x, pixel_pos_y, C_WOOD, _wood, illumination);
 8002dea:	4a48      	ldr	r2, [pc, #288]	; (8002f0c <render_block+0x1d8>)
 8002dec:	4621      	mov	r1, r4
 8002dee:	4628      	mov	r0, r5
 8002df0:	f7ff feec 	bl	8002bcc <create_destroyable>
 8002df4:	4604      	mov	r4, r0
		draw_block(wood->block);
 8002df6:	6800      	ldr	r0, [r0, #0]
 8002df8:	f7ff fefa 	bl	8002bf0 <draw_block>
		free_destroyable(wood);
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	f7ff ff86 	bl	8002d0e <free_destroyable>
 8002e02:	e7d5      	b.n	8002db0 <render_block+0x7c>
		destroyable *wood = create_destroyable(pixel_pos_x, pixel_pos_y, C_RED_WOOD, _red_wood, illumination);
 8002e04:	4a42      	ldr	r2, [pc, #264]	; (8002f10 <render_block+0x1dc>)
 8002e06:	4621      	mov	r1, r4
 8002e08:	4628      	mov	r0, r5
 8002e0a:	f7ff fedf 	bl	8002bcc <create_destroyable>
 8002e0e:	4604      	mov	r4, r0
		draw_block(wood->block);
 8002e10:	6800      	ldr	r0, [r0, #0]
 8002e12:	f7ff feed 	bl	8002bf0 <draw_block>
		free_destroyable(wood);
 8002e16:	4620      	mov	r0, r4
 8002e18:	f7ff ff79 	bl	8002d0e <free_destroyable>
 8002e1c:	e7c8      	b.n	8002db0 <render_block+0x7c>
		destroyable *sand = create_destroyable(pixel_pos_x, pixel_pos_y, C_SAND, _sand, illumination);
 8002e1e:	4a3d      	ldr	r2, [pc, #244]	; (8002f14 <render_block+0x1e0>)
 8002e20:	4621      	mov	r1, r4
 8002e22:	4628      	mov	r0, r5
 8002e24:	f7ff fed2 	bl	8002bcc <create_destroyable>
 8002e28:	4604      	mov	r4, r0
		draw_block(sand->block);
 8002e2a:	6800      	ldr	r0, [r0, #0]
 8002e2c:	f7ff fee0 	bl	8002bf0 <draw_block>
		free_destroyable(sand);
 8002e30:	4620      	mov	r0, r4
 8002e32:	f7ff ff6c 	bl	8002d0e <free_destroyable>
 8002e36:	e7bb      	b.n	8002db0 <render_block+0x7c>
		destroyable *rock = create_destroyable(pixel_pos_x, pixel_pos_y, C_ROCK, _rock, illumination);
 8002e38:	4a37      	ldr	r2, [pc, #220]	; (8002f18 <render_block+0x1e4>)
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	4628      	mov	r0, r5
 8002e3e:	f7ff fec5 	bl	8002bcc <create_destroyable>
 8002e42:	4604      	mov	r4, r0
		draw_block(rock->block);
 8002e44:	6800      	ldr	r0, [r0, #0]
 8002e46:	f7ff fed3 	bl	8002bf0 <draw_block>
		free_destroyable(rock);
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f7ff ff5f 	bl	8002d0e <free_destroyable>
 8002e50:	e7ae      	b.n	8002db0 <render_block+0x7c>
		bg_material *dirt = create_bg_material(pixel_pos_x, pixel_pos_y, C_BG_DIRT, _dirt_bg, illumination);
 8002e52:	4a32      	ldr	r2, [pc, #200]	; (8002f1c <render_block+0x1e8>)
 8002e54:	4621      	mov	r1, r4
 8002e56:	4628      	mov	r0, r5
 8002e58:	f7ff fec1 	bl	8002bde <create_bg_material>
 8002e5c:	4604      	mov	r4, r0
		draw_block(dirt->block);
 8002e5e:	6800      	ldr	r0, [r0, #0]
 8002e60:	f7ff fec6 	bl	8002bf0 <draw_block>
		free_bg_material(dirt);
 8002e64:	4620      	mov	r0, r4
 8002e66:	f7ff ff5b 	bl	8002d20 <free_bg_material>
 8002e6a:	e7a1      	b.n	8002db0 <render_block+0x7c>
		bg_material *gold = create_bg_material(pixel_pos_x, pixel_pos_y, C_GOLDB, _gold, illumination);
 8002e6c:	4a2c      	ldr	r2, [pc, #176]	; (8002f20 <render_block+0x1ec>)
 8002e6e:	4621      	mov	r1, r4
 8002e70:	4628      	mov	r0, r5
 8002e72:	f7ff feb4 	bl	8002bde <create_bg_material>
 8002e76:	4604      	mov	r4, r0
		draw_block(gold->block);
 8002e78:	6800      	ldr	r0, [r0, #0]
 8002e7a:	f7ff feb9 	bl	8002bf0 <draw_block>
		free_bg_material(gold);
 8002e7e:	4620      	mov	r0, r4
 8002e80:	f7ff ff4e 	bl	8002d20 <free_bg_material>
 8002e84:	e794      	b.n	8002db0 <render_block+0x7c>
		bg_material *diamond = create_bg_material(pixel_pos_x, pixel_pos_y, C_DIAMOND, _diamond, illumination);
 8002e86:	4a27      	ldr	r2, [pc, #156]	; (8002f24 <render_block+0x1f0>)
 8002e88:	4621      	mov	r1, r4
 8002e8a:	4628      	mov	r0, r5
 8002e8c:	f7ff fea7 	bl	8002bde <create_bg_material>
 8002e90:	4604      	mov	r4, r0
		draw_block(diamond->block);
 8002e92:	6800      	ldr	r0, [r0, #0]
 8002e94:	f7ff feac 	bl	8002bf0 <draw_block>
		free_bg_material(diamond);
 8002e98:	4620      	mov	r0, r4
 8002e9a:	f7ff ff41 	bl	8002d20 <free_bg_material>
 8002e9e:	e787      	b.n	8002db0 <render_block+0x7c>
		if (is_night() && rand() % 100 < p_star) {
 8002ea0:	f000 fb12 	bl	80034c8 <is_night>
 8002ea4:	b978      	cbnz	r0, 8002ec6 <render_block+0x192>
		uint16_t* color = C_SKY;
 8002ea6:	4a20      	ldr	r2, [pc, #128]	; (8002f28 <render_block+0x1f4>)
		bg_material *sky = create_bg_material(pixel_pos_x, pixel_pos_y, color, _sky, illumination);
 8002ea8:	eeb0 0a48 	vmov.f32	s0, s16
 8002eac:	2304      	movs	r3, #4
 8002eae:	4621      	mov	r1, r4
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	f7ff fe94 	bl	8002bde <create_bg_material>
 8002eb6:	4604      	mov	r4, r0
		draw_block(sky->block);
 8002eb8:	6800      	ldr	r0, [r0, #0]
 8002eba:	f7ff fe99 	bl	8002bf0 <draw_block>
		free_bg_material(sky);
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f7ff ff2e 	bl	8002d20 <free_bg_material>
 8002ec4:	e774      	b.n	8002db0 <render_block+0x7c>
		if (is_night() && rand() % 100 < p_star) {
 8002ec6:	f00e fb53 	bl	8011570 <rand>
 8002eca:	4a18      	ldr	r2, [pc, #96]	; (8002f2c <render_block+0x1f8>)
 8002ecc:	fb82 3200 	smull	r3, r2, r2, r0
 8002ed0:	17c3      	asrs	r3, r0, #31
 8002ed2:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8002ed6:	2264      	movs	r2, #100	; 0x64
 8002ed8:	fb02 0313 	mls	r3, r2, r3, r0
 8002edc:	ee07 3a90 	vmov	s15, r3
 8002ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ee4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef0:	d401      	bmi.n	8002ef6 <render_block+0x1c2>
		uint16_t* color = C_SKY;
 8002ef2:	4a0d      	ldr	r2, [pc, #52]	; (8002f28 <render_block+0x1f4>)
 8002ef4:	e7d8      	b.n	8002ea8 <render_block+0x174>
			color = C_STAR;
 8002ef6:	4a0e      	ldr	r2, [pc, #56]	; (8002f30 <render_block+0x1fc>)
 8002ef8:	e7d6      	b.n	8002ea8 <render_block+0x174>
 8002efa:	4770      	bx	lr
 8002efc:	2000004c 	.word	0x2000004c
 8002f00:	2000002c 	.word	0x2000002c
 8002f04:	2000003c 	.word	0x2000003c
 8002f08:	20000044 	.word	0x20000044
 8002f0c:	20000084 	.word	0x20000084
 8002f10:	20000054 	.word	0x20000054
 8002f14:	20000064 	.word	0x20000064
 8002f18:	2000005c 	.word	0x2000005c
 8002f1c:	20000e28 	.word	0x20000e28
 8002f20:	20000034 	.word	0x20000034
 8002f24:	20000024 	.word	0x20000024
 8002f28:	2000006c 	.word	0x2000006c
 8002f2c:	51eb851f 	.word	0x51eb851f
 8002f30:	20000074 	.word	0x20000074

08002f34 <draw_scene>:
void draw_scene(bool init) {
 8002f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f38:	ed2d 8b02 	vpush	{d8}
 8002f3c:	b08d      	sub	sp, #52	; 0x34
 8002f3e:	9003      	str	r0, [sp, #12]
	get_scene();
 8002f40:	f000 f9dc 	bl	80032fc <get_scene>
	srand(time(NULL));
 8002f44:	2000      	movs	r0, #0
 8002f46:	f00f fa33 	bl	80123b0 <time>
 8002f4a:	f00e fae3 	bl	8011514 <srand>
	if (building_mode) {
 8002f4e:	4b95      	ldr	r3, [pc, #596]	; (80031a4 <draw_scene+0x270>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	bb3b      	cbnz	r3, 8002fa4 <draw_scene+0x70>
	float illumination = 1;
 8002f54:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	int8_t move_horizontal = old_camera_x - camera_x_block; // + -> left, - -> right
 8002f58:	4b93      	ldr	r3, [pc, #588]	; (80031a8 <draw_scene+0x274>)
 8002f5a:	881a      	ldrh	r2, [r3, #0]
 8002f5c:	b2d7      	uxtb	r7, r2
 8002f5e:	4b93      	ldr	r3, [pc, #588]	; (80031ac <draw_scene+0x278>)
 8002f60:	8818      	ldrh	r0, [r3, #0]
 8002f62:	b2c6      	uxtb	r6, r0
	int8_t move_vertical = old_camera_y - camera_y_block; // + -> up, - -> down
 8002f64:	4b92      	ldr	r3, [pc, #584]	; (80031b0 <draw_scene+0x27c>)
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	b2dd      	uxtb	r5, r3
 8002f6a:	4992      	ldr	r1, [pc, #584]	; (80031b4 <draw_scene+0x280>)
 8002f6c:	8809      	ldrh	r1, [r1, #0]
 8002f6e:	fa5f fc81 	uxtb.w	ip, r1
	if (!init && move_horizontal == 0 && move_vertical == 0) {
 8002f72:	9c03      	ldr	r4, [sp, #12]
 8002f74:	b90c      	cbnz	r4, 8002f7a <draw_scene+0x46>
 8002f76:	42b7      	cmp	r7, r6
 8002f78:	d017      	beq.n	8002faa <draw_scene+0x76>
	block_c world_block_x0 = camera_x_block - SCENE_BLOCKS_X / 2;
 8002f7a:	3828      	subs	r0, #40	; 0x28
 8002f7c:	fa1f fb80 	uxth.w	fp, r0
	block_c world_block_y0 = camera_y_block - SCENE_BLOCKS_Y / 2;
 8002f80:	391e      	subs	r1, #30
 8002f82:	b289      	uxth	r1, r1
 8002f84:	9104      	str	r1, [sp, #16]
	block_c old_world_block_x0 = old_camera_x - SCENE_BLOCKS_X / 2;
 8002f86:	3a28      	subs	r2, #40	; 0x28
 8002f88:	b292      	uxth	r2, r2
 8002f8a:	9208      	str	r2, [sp, #32]
	block_c old_world_block_y0 = old_camera_y - SCENE_BLOCKS_Y / 2;
 8002f8c:	3b1e      	subs	r3, #30
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	9309      	str	r3, [sp, #36]	; 0x24
	for (cell_c i = 0; i < SCENE_CELLS_X; i++) {
 8002f92:	f04f 0a00 	mov.w	sl, #0
	pixel_c pos_x2 = 8;
 8002f96:	2308      	movs	r3, #8
 8002f98:	930b      	str	r3, [sp, #44]	; 0x2c
	pixel_c pos_x1 = 4;
 8002f9a:	2304      	movs	r3, #4
 8002f9c:	930a      	str	r3, [sp, #40]	; 0x28
 8002f9e:	46d0      	mov	r8, sl
 8002fa0:	46da      	mov	sl, fp
	for (cell_c i = 0; i < SCENE_CELLS_X; i++) {
 8002fa2:	e0f6      	b.n	8003192 <draw_scene+0x25e>
		illumination = .7;
 8002fa4:	ed9f 8a84 	vldr	s16, [pc, #528]	; 80031b8 <draw_scene+0x284>
 8002fa8:	e7d6      	b.n	8002f58 <draw_scene+0x24>
	if (!init && move_horizontal == 0 && move_vertical == 0) {
 8002faa:	4565      	cmp	r5, ip
 8002fac:	d1e5      	bne.n	8002f7a <draw_scene+0x46>
}
 8002fae:	b00d      	add	sp, #52	; 0x34
 8002fb0:	ecbd 8b02 	vpop	{d8}
 8002fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					} else if (lower(old_world_cell) == lower(current_scene_cell)) {
 8002fb8:	4638      	mov	r0, r7
 8002fba:	f002 faef 	bl	800559c <lower>
 8002fbe:	4607      	mov	r7, r0
 8002fc0:	4630      	mov	r0, r6
 8002fc2:	f002 faeb 	bl	800559c <lower>
 8002fc6:	4287      	cmp	r7, r0
 8002fc8:	d060      	beq.n	800308c <draw_scene+0x158>
			bool skip_left = false, skip_right = false;
 8002fca:	9b03      	ldr	r3, [sp, #12]
 8002fcc:	461f      	mov	r7, r3
 8002fce:	9302      	str	r3, [sp, #8]
 8002fd0:	e001      	b.n	8002fd6 <draw_scene+0xa2>
 8002fd2:	2700      	movs	r7, #0
 8002fd4:	9702      	str	r7, [sp, #8]
			block_t left_block = upper(current_scene_cell);
 8002fd6:	4630      	mov	r0, r6
 8002fd8:	f002 fade 	bl	8005598 <upper>
 8002fdc:	9006      	str	r0, [sp, #24]
			block_t right_block = lower(current_scene_cell);
 8002fde:	4630      	mov	r0, r6
 8002fe0:	f002 fadc 	bl	800559c <lower>
 8002fe4:	9007      	str	r0, [sp, #28]
			block_c ground_height = LVL1_HMAP[world_cell_x];
 8002fe6:	4b75      	ldr	r3, [pc, #468]	; (80031bc <draw_scene+0x288>)
 8002fe8:	f833 a015 	ldrh.w	sl, [r3, r5, lsl #1]
			pixel_c pos_y = block_to_pixel(j) + 1;
 8002fec:	4648      	mov	r0, r9
 8002fee:	f002 fada 	bl	80055a6 <block_to_pixel>
 8002ff2:	4605      	mov	r5, r0
 8002ff4:	1c46      	adds	r6, r0, #1
 8002ff6:	b2b6      	uxth	r6, r6
			if (building_mode && (world_block_x0 + cell_x_to_block_left(i) == camera_x_block + 2 || world_block_x0 + cell_x_to_block_right(i) == camera_x_block + 2) && world_block_y0 + j == camera_y_block + 1) {
 8002ff8:	4b6a      	ldr	r3, [pc, #424]	; (80031a4 <draw_scene+0x270>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d149      	bne.n	8003094 <draw_scene+0x160>
			if (!skip_left) {
 8003000:	9b02      	ldr	r3, [sp, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 80a4 	beq.w	8003150 <draw_scene+0x21c>
			if (!skip_right) {
 8003008:	2f00      	cmp	r7, #0
 800300a:	f000 80ab 	beq.w	8003164 <draw_scene+0x230>
		for (cell_c j = 0; j < SCENE_CELLS_Y; j++) {
 800300e:	f109 0901 	add.w	r9, r9, #1
 8003012:	fa1f f989 	uxth.w	r9, r9
 8003016:	f1b9 0f3b 	cmp.w	r9, #59	; 0x3b
 800301a:	f200 80ad 	bhi.w	8003178 <draw_scene+0x244>
			cell_c world_cell_x = block_to_cell_x(world_block_x0) + i;
 800301e:	4658      	mov	r0, fp
 8003020:	f002 face 	bl	80055c0 <block_to_cell_x>
 8003024:	eb00 0508 	add.w	r5, r0, r8
 8003028:	b2ad      	uxth	r5, r5
			cell_c world_cell_y = block_to_cell_y(world_block_y0) + j;
 800302a:	9804      	ldr	r0, [sp, #16]
 800302c:	f002 faca 	bl	80055c4 <block_to_cell_y>
 8003030:	eb00 0409 	add.w	r4, r0, r9
 8003034:	b2a4      	uxth	r4, r4
			cell_c old_world_cell_x = block_to_cell_x(old_world_block_x0) + i;
 8003036:	9808      	ldr	r0, [sp, #32]
 8003038:	f002 fac2 	bl	80055c0 <block_to_cell_x>
 800303c:	eb00 0708 	add.w	r7, r0, r8
 8003040:	b2bf      	uxth	r7, r7
			cell_c old_world_cell_y = block_to_cell_y(old_world_block_y0) + j;
 8003042:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003044:	f002 fabe 	bl	80055c4 <block_to_cell_y>
 8003048:	4448      	add	r0, r9
 800304a:	b280      	uxth	r0, r0
			cell_t current_scene_cell = SCENE[scene_cell_y][scene_cell_x];
 800304c:	f8cd 9014 	str.w	r9, [sp, #20]
 8003050:	eb09 0389 	add.w	r3, r9, r9, lsl #2
 8003054:	4a5a      	ldr	r2, [pc, #360]	; (80031c0 <draw_scene+0x28c>)
 8003056:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800305a:	f813 6008 	ldrb.w	r6, [r3, r8]
			cell_t old_world_cell = WORLD[old_world_cell_y][old_world_cell_x];
 800305e:	4b59      	ldr	r3, [pc, #356]	; (80031c4 <draw_scene+0x290>)
 8003060:	22c8      	movs	r2, #200	; 0xc8
 8003062:	fb02 3000 	mla	r0, r2, r0, r3
 8003066:	5dc7      	ldrb	r7, [r0, r7]
			if (!init) {
 8003068:	9b03      	ldr	r3, [sp, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1b1      	bne.n	8002fd2 <draw_scene+0x9e>
				if (old_world_cell == current_scene_cell) {
 800306e:	42be      	cmp	r6, r7
 8003070:	d0cd      	beq.n	800300e <draw_scene+0xda>
					if (upper(old_world_cell) == upper(current_scene_cell)) {
 8003072:	4638      	mov	r0, r7
 8003074:	f002 fa90 	bl	8005598 <upper>
 8003078:	4682      	mov	sl, r0
 800307a:	4630      	mov	r0, r6
 800307c:	f002 fa8c 	bl	8005598 <upper>
 8003080:	4582      	cmp	sl, r0
 8003082:	d199      	bne.n	8002fb8 <draw_scene+0x84>
			bool skip_left = false, skip_right = false;
 8003084:	9f03      	ldr	r7, [sp, #12]
						skip_left = true;
 8003086:	2301      	movs	r3, #1
 8003088:	9302      	str	r3, [sp, #8]
 800308a:	e7a4      	b.n	8002fd6 <draw_scene+0xa2>
			bool skip_left = false, skip_right = false;
 800308c:	9b03      	ldr	r3, [sp, #12]
 800308e:	9302      	str	r3, [sp, #8]
						skip_right = true;
 8003090:	2701      	movs	r7, #1
 8003092:	e7a0      	b.n	8002fd6 <draw_scene+0xa2>
			if (building_mode && (world_block_x0 + cell_x_to_block_left(i) == camera_x_block + 2 || world_block_x0 + cell_x_to_block_right(i) == camera_x_block + 2) && world_block_y0 + j == camera_y_block + 1) {
 8003094:	4640      	mov	r0, r8
 8003096:	f002 fa8b 	bl	80055b0 <cell_x_to_block_left>
 800309a:	4458      	add	r0, fp
 800309c:	4b43      	ldr	r3, [pc, #268]	; (80031ac <draw_scene+0x278>)
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	3302      	adds	r3, #2
 80030a2:	4298      	cmp	r0, r3
 80030a4:	d149      	bne.n	800313a <draw_scene+0x206>
 80030a6:	9b05      	ldr	r3, [sp, #20]
 80030a8:	9a04      	ldr	r2, [sp, #16]
 80030aa:	4413      	add	r3, r2
 80030ac:	4a41      	ldr	r2, [pc, #260]	; (80031b4 <draw_scene+0x280>)
 80030ae:	8812      	ldrh	r2, [r2, #0]
 80030b0:	3201      	adds	r2, #1
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d1a4      	bne.n	8003000 <draw_scene+0xcc>
				destroyable *dirt = create_destroyable(pos_x1, pos_y, map_name_to_material(building_material), building_material, 1);
 80030b6:	4c44      	ldr	r4, [pc, #272]	; (80031c8 <draw_scene+0x294>)
 80030b8:	7820      	ldrb	r0, [r4, #0]
 80030ba:	f7ff fbe3 	bl	8002884 <map_name_to_material>
 80030be:	4602      	mov	r2, r0
 80030c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80030c4:	7823      	ldrb	r3, [r4, #0]
 80030c6:	4631      	mov	r1, r6
 80030c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80030ca:	4638      	mov	r0, r7
 80030cc:	f7ff fd7e 	bl	8002bcc <create_destroyable>
				draw_block(dirt->block);
 80030d0:	6800      	ldr	r0, [r0, #0]
 80030d2:	f7ff fd8d 	bl	8002bf0 <draw_block>
				dirt = create_destroyable(pos_x2, pos_y, map_name_to_material(building_material), building_material, 1);
 80030d6:	7820      	ldrb	r0, [r4, #0]
 80030d8:	f7ff fbd4 	bl	8002884 <map_name_to_material>
 80030dc:	4602      	mov	r2, r0
 80030de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80030e2:	7823      	ldrb	r3, [r4, #0]
 80030e4:	4631      	mov	r1, r6
 80030e6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80030e8:	4630      	mov	r0, r6
 80030ea:	f7ff fd6f 	bl	8002bcc <create_destroyable>
				draw_block(dirt->block);
 80030ee:	6800      	ldr	r0, [r0, #0]
 80030f0:	f7ff fd7e 	bl	8002bf0 <draw_block>
				dirt = create_destroyable(pos_x1, pos_y-BLOCK_WIDTH, map_name_to_material(building_material), building_material, 1);
 80030f4:	3d03      	subs	r5, #3
 80030f6:	b2ad      	uxth	r5, r5
 80030f8:	7820      	ldrb	r0, [r4, #0]
 80030fa:	f7ff fbc3 	bl	8002884 <map_name_to_material>
 80030fe:	4602      	mov	r2, r0
 8003100:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003104:	7823      	ldrb	r3, [r4, #0]
 8003106:	4629      	mov	r1, r5
 8003108:	4638      	mov	r0, r7
 800310a:	f7ff fd5f 	bl	8002bcc <create_destroyable>
				draw_block(dirt->block);
 800310e:	6800      	ldr	r0, [r0, #0]
 8003110:	f7ff fd6e 	bl	8002bf0 <draw_block>
				dirt = create_destroyable(pos_x2, pos_y-BLOCK_WIDTH, map_name_to_material(building_material), building_material, 1);
 8003114:	7820      	ldrb	r0, [r4, #0]
 8003116:	f7ff fbb5 	bl	8002884 <map_name_to_material>
 800311a:	4602      	mov	r2, r0
 800311c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003120:	7823      	ldrb	r3, [r4, #0]
 8003122:	4629      	mov	r1, r5
 8003124:	4630      	mov	r0, r6
 8003126:	f7ff fd51 	bl	8002bcc <create_destroyable>
 800312a:	4604      	mov	r4, r0
				draw_block(dirt->block);
 800312c:	6800      	ldr	r0, [r0, #0]
 800312e:	f7ff fd5f 	bl	8002bf0 <draw_block>
				free_destroyable(dirt);
 8003132:	4620      	mov	r0, r4
 8003134:	f7ff fdeb 	bl	8002d0e <free_destroyable>
				continue;
 8003138:	e769      	b.n	800300e <draw_scene+0xda>
			if (building_mode && (world_block_x0 + cell_x_to_block_left(i) == camera_x_block + 2 || world_block_x0 + cell_x_to_block_right(i) == camera_x_block + 2) && world_block_y0 + j == camera_y_block + 1) {
 800313a:	4640      	mov	r0, r8
 800313c:	f002 fa3b 	bl	80055b6 <cell_x_to_block_right>
 8003140:	4458      	add	r0, fp
 8003142:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <draw_scene+0x278>)
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	3302      	adds	r3, #2
 8003148:	4298      	cmp	r0, r3
 800314a:	f47f af59 	bne.w	8003000 <draw_scene+0xcc>
 800314e:	e7aa      	b.n	80030a6 <draw_scene+0x172>
				render_block(left_block, pos_x1, pos_y, illumination, ground_height, current_height);
 8003150:	9400      	str	r4, [sp, #0]
 8003152:	4653      	mov	r3, sl
 8003154:	eeb0 0a48 	vmov.f32	s0, s16
 8003158:	4632      	mov	r2, r6
 800315a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800315c:	9806      	ldr	r0, [sp, #24]
 800315e:	f7ff fde9 	bl	8002d34 <render_block>
 8003162:	e751      	b.n	8003008 <draw_scene+0xd4>
				render_block(right_block, pos_x2, pos_y, illumination, ground_height, current_height);
 8003164:	9400      	str	r4, [sp, #0]
 8003166:	4653      	mov	r3, sl
 8003168:	eeb0 0a48 	vmov.f32	s0, s16
 800316c:	4632      	mov	r2, r6
 800316e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003170:	9807      	ldr	r0, [sp, #28]
 8003172:	f7ff fddf 	bl	8002d34 <render_block>
 8003176:	e74a      	b.n	800300e <draw_scene+0xda>
		pos_x1 += 8;
 8003178:	46da      	mov	sl, fp
 800317a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800317c:	3308      	adds	r3, #8
 800317e:	b29b      	uxth	r3, r3
 8003180:	930a      	str	r3, [sp, #40]	; 0x28
		pos_x2 += 8;
 8003182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003184:	3308      	adds	r3, #8
 8003186:	b29b      	uxth	r3, r3
 8003188:	930b      	str	r3, [sp, #44]	; 0x2c
	for (cell_c i = 0; i < SCENE_CELLS_X; i++) {
 800318a:	f108 0301 	add.w	r3, r8, #1
 800318e:	fa1f f883 	uxth.w	r8, r3
 8003192:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
 8003196:	f63f af0a 	bhi.w	8002fae <draw_scene+0x7a>
		for (cell_c j = 0; j < SCENE_CELLS_Y; j++) {
 800319a:	f04f 0900 	mov.w	r9, #0
 800319e:	46d3      	mov	fp, sl
 80031a0:	e739      	b.n	8003016 <draw_scene+0xe2>
 80031a2:	bf00      	nop
 80031a4:	20010fd0 	.word	0x20010fd0
 80031a8:	20010bee 	.word	0x20010bee
 80031ac:	20010be8 	.word	0x20010be8
 80031b0:	20010bf0 	.word	0x20010bf0
 80031b4:	20010bea 	.word	0x20010bea
 80031b8:	3f333333 	.word	0x3f333333
 80031bc:	200043e8 	.word	0x200043e8
 80031c0:	20004708 	.word	0x20004708
 80031c4:	20005068 	.word	0x20005068
 80031c8:	2000012c 	.word	0x2000012c

080031cc <MX_QUADSPI1_Init>:

QSPI_HandleTypeDef hqspi1;

/* QUADSPI1 init function */
void MX_QUADSPI1_Init(void)
{
 80031cc:	b508      	push	{r3, lr}
  /* USER CODE END QUADSPI1_Init 0 */

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  hqspi1.Instance = QUADSPI;
 80031ce:	480a      	ldr	r0, [pc, #40]	; (80031f8 <MX_QUADSPI1_Init+0x2c>)
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <MX_QUADSPI1_Init+0x30>)
 80031d2:	6003      	str	r3, [r0, #0]
  hqspi1.Init.ClockPrescaler = 255;
 80031d4:	23ff      	movs	r3, #255	; 0xff
 80031d6:	6043      	str	r3, [r0, #4]
  hqspi1.Init.FifoThreshold = 1;
 80031d8:	2201      	movs	r2, #1
 80031da:	6082      	str	r2, [r0, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80031dc:	2300      	movs	r3, #0
 80031de:	60c3      	str	r3, [r0, #12]
  hqspi1.Init.FlashSize = 1;
 80031e0:	6102      	str	r2, [r0, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80031e2:	6143      	str	r3, [r0, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80031e4:	6183      	str	r3, [r0, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_1;
 80031e6:	61c3      	str	r3, [r0, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80031e8:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 80031ea:	f007 f8cd 	bl	800a388 <HAL_QSPI_Init>
 80031ee:	b900      	cbnz	r0, 80031f2 <MX_QUADSPI1_Init+0x26>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 80031f0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80031f2:	f7fe fed7 	bl	8001fa4 <Error_Handler>
}
 80031f6:	e7fb      	b.n	80031f0 <MX_QUADSPI1_Init+0x24>
 80031f8:	20000e30 	.word	0x20000e30
 80031fc:	a0001000 	.word	0xa0001000

08003200 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	b09e      	sub	sp, #120	; 0x78
 8003204:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003206:	2100      	movs	r1, #0
 8003208:	9119      	str	r1, [sp, #100]	; 0x64
 800320a:	911a      	str	r1, [sp, #104]	; 0x68
 800320c:	911b      	str	r1, [sp, #108]	; 0x6c
 800320e:	911c      	str	r1, [sp, #112]	; 0x70
 8003210:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003212:	2254      	movs	r2, #84	; 0x54
 8003214:	a804      	add	r0, sp, #16
 8003216:	f00d fa1b 	bl	8010650 <memset>
  if(qspiHandle->Instance==QUADSPI)
 800321a:	6822      	ldr	r2, [r4, #0]
 800321c:	4b2c      	ldr	r3, [pc, #176]	; (80032d0 <HAL_QSPI_MspInit+0xd0>)
 800321e:	429a      	cmp	r2, r3
 8003220:	d001      	beq.n	8003226 <HAL_QSPI_MspInit+0x26>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8003222:	b01e      	add	sp, #120	; 0x78
 8003224:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8003226:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800322a:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800322c:	a804      	add	r0, sp, #16
 800322e:	f007 fd0d 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 8003232:	2800      	cmp	r0, #0
 8003234:	d148      	bne.n	80032c8 <HAL_QSPI_MspInit+0xc8>
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003236:	4b27      	ldr	r3, [pc, #156]	; (80032d4 <HAL_QSPI_MspInit+0xd4>)
 8003238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800323a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800323e:	651a      	str	r2, [r3, #80]	; 0x50
 8003240:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003242:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003246:	9200      	str	r2, [sp, #0]
 8003248:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800324c:	f042 0201 	orr.w	r2, r2, #1
 8003250:	64da      	str	r2, [r3, #76]	; 0x4c
 8003252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003254:	f002 0201 	and.w	r2, r2, #1
 8003258:	9201      	str	r2, [sp, #4]
 800325a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800325c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800325e:	f042 0202 	orr.w	r2, r2, #2
 8003262:	64da      	str	r2, [r3, #76]	; 0x4c
 8003264:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003266:	f002 0202 	and.w	r2, r2, #2
 800326a:	9202      	str	r2, [sp, #8]
 800326c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800326e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003270:	f042 0220 	orr.w	r2, r2, #32
 8003274:	64da      	str	r2, [r3, #76]	; 0x4c
 8003276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	9303      	str	r3, [sp, #12]
 800327e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = QSPI_IO2_Pin;
 8003280:	2380      	movs	r3, #128	; 0x80
 8003282:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003284:	2602      	movs	r6, #2
 8003286:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003288:	2400      	movs	r4, #0
 800328a:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328c:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800328e:	250a      	movs	r5, #10
 8003290:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(QSPI_IO2_GPIO_Port, &GPIO_InitStruct);
 8003292:	a919      	add	r1, sp, #100	; 0x64
 8003294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003298:	f005 fac6 	bl	8008828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_IO1_Pin|QSPI_IO0_Pin|QSPI_CLK_Pin|QSPI_NCS_Pin;
 800329c:	f640 4303 	movw	r3, #3075	; 0xc03
 80032a0:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a2:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a4:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a6:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80032a8:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032aa:	a919      	add	r1, sp, #100	; 0x64
 80032ac:	480a      	ldr	r0, [pc, #40]	; (80032d8 <HAL_QSPI_MspInit+0xd8>)
 80032ae:	f005 fabb 	bl	8008828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_IO3_Pin;
 80032b2:	2340      	movs	r3, #64	; 0x40
 80032b4:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b6:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b8:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ba:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80032bc:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(QSPI_IO3_GPIO_Port, &GPIO_InitStruct);
 80032be:	a919      	add	r1, sp, #100	; 0x64
 80032c0:	4806      	ldr	r0, [pc, #24]	; (80032dc <HAL_QSPI_MspInit+0xdc>)
 80032c2:	f005 fab1 	bl	8008828 <HAL_GPIO_Init>
}
 80032c6:	e7ac      	b.n	8003222 <HAL_QSPI_MspInit+0x22>
      Error_Handler();
 80032c8:	f7fe fe6c 	bl	8001fa4 <Error_Handler>
 80032cc:	e7b3      	b.n	8003236 <HAL_QSPI_MspInit+0x36>
 80032ce:	bf00      	nop
 80032d0:	a0001000 	.word	0xa0001000
 80032d4:	40021000 	.word	0x40021000
 80032d8:	48000400 	.word	0x48000400
 80032dc:	48001400 	.word	0x48001400

080032e0 <rand_range>:


#include "rand_range.h"
#include "time.h"

int rand_range(int least, int max) {
 80032e0:	b538      	push	{r3, r4, r5, lr}
 80032e2:	4605      	mov	r5, r0
 80032e4:	460c      	mov	r4, r1

	int random_number = ((rand() % (max - least + 1)) + least);
 80032e6:	f00e f943 	bl	8011570 <rand>
 80032ea:	1b61      	subs	r1, r4, r5
 80032ec:	3101      	adds	r1, #1
 80032ee:	fb90 f3f1 	sdiv	r3, r0, r1
 80032f2:	fb01 0013 	mls	r0, r1, r3, r0
	return random_number;
}
 80032f6:	4428      	add	r0, r5
 80032f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080032fc <get_scene>:
		}
	}
}

// DO NOT UNDER ANY CIRCUMSTANCE TOUCH BELOW CODE!
void get_scene() {
 80032fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// width / 4 because each cell represents 2 blocks
	block_c block_offset_width = (SCENE_WIDTH_BLOCKS / 2);
	block_c block_offset_height = (SCENE_HEIGHT_BLOCKS / 2);

	cell_c offset_w = block_to_cell_x(block_offset_width);
 8003300:	2028      	movs	r0, #40	; 0x28
 8003302:	f002 f95d 	bl	80055c0 <block_to_cell_x>
 8003306:	4605      	mov	r5, r0
	cell_c offset_h = block_to_cell_y(block_offset_height);
 8003308:	201e      	movs	r0, #30
 800330a:	f002 f95b 	bl	80055c4 <block_to_cell_y>
 800330e:	4607      	mov	r7, r0

	// Check if within bounds
	cell_c left = MAX(0, (int16_t) block_to_cell_x(camera_x_block) - offset_w);
 8003310:	4b37      	ldr	r3, [pc, #220]	; (80033f0 <get_scene+0xf4>)
 8003312:	8818      	ldrh	r0, [r3, #0]
 8003314:	f002 f954 	bl	80055c0 <block_to_cell_x>
 8003318:	b203      	sxth	r3, r0
 800331a:	1b5b      	subs	r3, r3, r5
 800331c:	2b00      	cmp	r3, #0
 800331e:	da30      	bge.n	8003382 <get_scene+0x86>
 8003320:	2600      	movs	r6, #0
	cell_c top = MAX(0, (int16_t) block_to_cell_y(camera_y_block) - offset_h);
 8003322:	4b34      	ldr	r3, [pc, #208]	; (80033f4 <get_scene+0xf8>)
 8003324:	8818      	ldrh	r0, [r3, #0]
 8003326:	f002 f94d 	bl	80055c4 <block_to_cell_y>
 800332a:	b203      	sxth	r3, r0
 800332c:	1bdb      	subs	r3, r3, r7
 800332e:	2b00      	cmp	r3, #0
 8003330:	da2e      	bge.n	8003390 <get_scene+0x94>
 8003332:	2400      	movs	r4, #0
	cell_c right = MIN(block_to_cell_x(camera_x_block) + offset_w, block_to_cell_x(WORLD_WIDTH_BLOCKS));
 8003334:	4b2e      	ldr	r3, [pc, #184]	; (80033f0 <get_scene+0xf4>)
 8003336:	8818      	ldrh	r0, [r3, #0]
 8003338:	f002 f942 	bl	80055c0 <block_to_cell_x>
 800333c:	eb05 0800 	add.w	r8, r5, r0
 8003340:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003344:	f002 f93c 	bl	80055c0 <block_to_cell_x>
 8003348:	4580      	cmp	r8, r0
 800334a:	da28      	bge.n	800339e <get_scene+0xa2>
 800334c:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <get_scene+0xf4>)
 800334e:	8818      	ldrh	r0, [r3, #0]
 8003350:	f002 f936 	bl	80055c0 <block_to_cell_x>
 8003354:	4405      	add	r5, r0
 8003356:	b2ad      	uxth	r5, r5
	cell_c bottom = MIN(block_to_cell_y(camera_y_block) + offset_h, block_to_cell_y(WORLD_HEIGHT_BLOCKS));
 8003358:	4b26      	ldr	r3, [pc, #152]	; (80033f4 <get_scene+0xf8>)
 800335a:	8818      	ldrh	r0, [r3, #0]
 800335c:	f002 f932 	bl	80055c4 <block_to_cell_y>
 8003360:	eb07 0800 	add.w	r8, r7, r0
 8003364:	20f0      	movs	r0, #240	; 0xf0
 8003366:	f002 f92d 	bl	80055c4 <block_to_cell_y>
 800336a:	4580      	cmp	r8, r0
 800336c:	da1d      	bge.n	80033aa <get_scene+0xae>
 800336e:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <get_scene+0xf8>)
 8003370:	8818      	ldrh	r0, [r3, #0]
 8003372:	f002 f927 	bl	80055c4 <block_to_cell_y>
 8003376:	4407      	add	r7, r0
 8003378:	fa1f fe87 	uxth.w	lr, r7


	cell_c x = 0;
	cell_c y = 0;
 800337c:	f04f 0c00 	mov.w	ip, #0
	for (cell_c j = top; j <= bottom; j++) {
 8003380:	e02f      	b.n	80033e2 <get_scene+0xe6>
	cell_c left = MAX(0, (int16_t) block_to_cell_x(camera_x_block) - offset_w);
 8003382:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <get_scene+0xf4>)
 8003384:	8818      	ldrh	r0, [r3, #0]
 8003386:	f002 f91b 	bl	80055c0 <block_to_cell_x>
 800338a:	1b46      	subs	r6, r0, r5
 800338c:	b2b6      	uxth	r6, r6
 800338e:	e7c8      	b.n	8003322 <get_scene+0x26>
	cell_c top = MAX(0, (int16_t) block_to_cell_y(camera_y_block) - offset_h);
 8003390:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <get_scene+0xf8>)
 8003392:	8818      	ldrh	r0, [r3, #0]
 8003394:	f002 f916 	bl	80055c4 <block_to_cell_y>
 8003398:	1bc4      	subs	r4, r0, r7
 800339a:	b2a4      	uxth	r4, r4
 800339c:	e7ca      	b.n	8003334 <get_scene+0x38>
	cell_c right = MIN(block_to_cell_x(camera_x_block) + offset_w, block_to_cell_x(WORLD_WIDTH_BLOCKS));
 800339e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80033a2:	f002 f90d 	bl	80055c0 <block_to_cell_x>
 80033a6:	4605      	mov	r5, r0
 80033a8:	e7d6      	b.n	8003358 <get_scene+0x5c>
	cell_c bottom = MIN(block_to_cell_y(camera_y_block) + offset_h, block_to_cell_y(WORLD_HEIGHT_BLOCKS));
 80033aa:	20f0      	movs	r0, #240	; 0xf0
 80033ac:	f002 f90a 	bl	80055c4 <block_to_cell_y>
 80033b0:	4686      	mov	lr, r0
 80033b2:	e7e3      	b.n	800337c <get_scene+0x80>
		for (cell_c i = left; i <= right; i++) {
			SCENE[y][x] = WORLD[j][i];
 80033b4:	4910      	ldr	r1, [pc, #64]	; (80033f8 <get_scene+0xfc>)
 80033b6:	20c8      	movs	r0, #200	; 0xc8
 80033b8:	fb00 1104 	mla	r1, r0, r4, r1
 80033bc:	5ccf      	ldrb	r7, [r1, r3]
 80033be:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 80033c2:	480e      	ldr	r0, [pc, #56]	; (80033fc <get_scene+0x100>)
 80033c4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80033c8:	548f      	strb	r7, [r1, r2]
			x++;
 80033ca:	3201      	adds	r2, #1
 80033cc:	b292      	uxth	r2, r2
		for (cell_c i = left; i <= right; i++) {
 80033ce:	3301      	adds	r3, #1
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	42ab      	cmp	r3, r5
 80033d4:	d9ee      	bls.n	80033b4 <get_scene+0xb8>
		}
		x = 0;
		y++;
 80033d6:	f10c 0c01 	add.w	ip, ip, #1
 80033da:	fa1f fc8c 	uxth.w	ip, ip
	for (cell_c j = top; j <= bottom; j++) {
 80033de:	3401      	adds	r4, #1
 80033e0:	b2a4      	uxth	r4, r4
 80033e2:	4574      	cmp	r4, lr
 80033e4:	d802      	bhi.n	80033ec <get_scene+0xf0>
		for (cell_c i = left; i <= right; i++) {
 80033e6:	4633      	mov	r3, r6
 80033e8:	2200      	movs	r2, #0
 80033ea:	e7f2      	b.n	80033d2 <get_scene+0xd6>
	}
}
 80033ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033f0:	20010be8 	.word	0x20010be8
 80033f4:	20010bea 	.word	0x20010bea
 80033f8:	20005068 	.word	0x20005068
 80033fc:	20004708 	.word	0x20004708

08003400 <update_camera_center>:

// x,y in blocks
void update_camera_center(uint16_t x, uint16_t y) {

	// Check if we are at least half a screen from a border
	if (x >= WORLD_WIDTH_BLOCKS - (SCENE_WIDTH_BLOCKS / 2 + 1)) {
 8003400:	f5b0 7fb3 	cmp.w	r0, #358	; 0x166
 8003404:	d803      	bhi.n	800340e <update_camera_center+0xe>
		x = WORLD_WIDTH_BLOCKS - SCENE_WIDTH_BLOCKS / 2 + 1;
	} else if (x < SCENE_WIDTH_BLOCKS / 2) {
 8003406:	2827      	cmp	r0, #39	; 0x27
 8003408:	d803      	bhi.n	8003412 <update_camera_center+0x12>
		x = SCENE_WIDTH_BLOCKS / 2 + 1;
 800340a:	2029      	movs	r0, #41	; 0x29
 800340c:	e001      	b.n	8003412 <update_camera_center+0x12>
		x = WORLD_WIDTH_BLOCKS - SCENE_WIDTH_BLOCKS / 2 + 1;
 800340e:	f240 1069 	movw	r0, #361	; 0x169
	}

	if (y >= WORLD_HEIGHT_BLOCKS - (SCENE_HEIGHT_BLOCKS / 2 + 1)) {
 8003412:	29d0      	cmp	r1, #208	; 0xd0
 8003414:	d803      	bhi.n	800341e <update_camera_center+0x1e>
		y = WORLD_HEIGHT_BLOCKS - (SCENE_HEIGHT_BLOCKS / 2 + 1);
	} else if (y < (SCENE_HEIGHT_BLOCKS / 2 + 1)) {
 8003416:	291e      	cmp	r1, #30
 8003418:	d802      	bhi.n	8003420 <update_camera_center+0x20>
		y = (SCENE_HEIGHT_BLOCKS / 2 + 1);
 800341a:	211f      	movs	r1, #31
 800341c:	e000      	b.n	8003420 <update_camera_center+0x20>
		y = WORLD_HEIGHT_BLOCKS - (SCENE_HEIGHT_BLOCKS / 2 + 1);
 800341e:	21d1      	movs	r1, #209	; 0xd1
	}

	camera_x_block = x;
 8003420:	4b02      	ldr	r3, [pc, #8]	; (800342c <update_camera_center+0x2c>)
 8003422:	8018      	strh	r0, [r3, #0]
	camera_y_block = y;
 8003424:	4b02      	ldr	r3, [pc, #8]	; (8003430 <update_camera_center+0x30>)
 8003426:	8019      	strh	r1, [r3, #0]
}
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20010be8 	.word	0x20010be8
 8003430:	20010bea 	.word	0x20010bea

08003434 <init_light_map>:
		}
	}
}


void init_light_map() {
 8003434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	// Coefficient between world and light width, !HEIGHT IS THE SAME!
	uint8_t light_to_world_coefficient = WORLD_WIDTH_CELLS / LIGHT_MAP_WIDTH;

	for (uint16_t i = 0; i < LIGHT_MAP_WIDTH; i++) {
 8003438:	f04f 0800 	mov.w	r8, #0
 800343c:	e039      	b.n	80034b2 <init_light_map+0x7e>

			uint16_t x_coor = i * light_to_world_coefficient;
			uint16_t y_coor = j;

			// Check 4 world cells, equivalent to 8 blocks
			for (uint16_t k = 0; k < light_to_world_coefficient; k++) {
 800343e:	3401      	adds	r4, #1
 8003440:	b2a4      	uxth	r4, r4
 8003442:	2c03      	cmp	r4, #3
 8003444:	d821      	bhi.n	800348a <init_light_map+0x56>
				uint16_t world_x = x_coor + k;
 8003446:	19e3      	adds	r3, r4, r7
 8003448:	b29b      	uxth	r3, r3
				uint16_t world_y = y_coor;

				uint8_t cell = WORLD[world_y][world_x];
 800344a:	4a1d      	ldr	r2, [pc, #116]	; (80034c0 <init_light_map+0x8c>)
 800344c:	21c8      	movs	r1, #200	; 0xc8
 800344e:	fb01 2205 	mla	r2, r1, r5, r2
 8003452:	5cd0      	ldrb	r0, [r2, r3]

				uint8_t l_cell = (cell & 0xF0) >> 4;
				uint8_t r_cell = cell & 0x0F;
 8003454:	f000 090f 	and.w	r9, r0, #15

				if (is_light_source(l_cell)) {
 8003458:	0900      	lsrs	r0, r0, #4
 800345a:	f7ff f9a5 	bl	80027a8 <is_light_source>
 800345e:	b130      	cbz	r0, 800346e <init_light_map+0x3a>
					lighting_byte |= 1 << (8 - (2 * k));
 8003460:	f1c4 0304 	rsb	r3, r4, #4
 8003464:	005a      	lsls	r2, r3, #1
 8003466:	2301      	movs	r3, #1
 8003468:	4093      	lsls	r3, r2
 800346a:	431e      	orrs	r6, r3
 800346c:	b2f6      	uxtb	r6, r6
				}

				if (is_light_source(r_cell)) {
 800346e:	4648      	mov	r0, r9
 8003470:	f7ff f99a 	bl	80027a8 <is_light_source>
 8003474:	2800      	cmp	r0, #0
 8003476:	d0e2      	beq.n	800343e <init_light_map+0xa>
					lighting_byte |= 1 << (8 - (2 * k) - 1);
 8003478:	f1c4 0304 	rsb	r3, r4, #4
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	1e5a      	subs	r2, r3, #1
 8003480:	2301      	movs	r3, #1
 8003482:	4093      	lsls	r3, r2
 8003484:	431e      	orrs	r6, r3
 8003486:	b2f6      	uxtb	r6, r6
 8003488:	e7d9      	b.n	800343e <init_light_map+0xa>
				}
			}
		LIGHT_MAP[j][i] = lighting_byte;
 800348a:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <init_light_map+0x90>)
 800348c:	2232      	movs	r2, #50	; 0x32
 800348e:	fb02 3305 	mla	r3, r2, r5, r3
 8003492:	f803 6008 	strb.w	r6, [r3, r8]
		for (uint16_t j = 0; j < LIGHT_MAP_HEIGHT; j++) {
 8003496:	3501      	adds	r5, #1
 8003498:	b2ad      	uxth	r5, r5
 800349a:	2def      	cmp	r5, #239	; 0xef
 800349c:	d805      	bhi.n	80034aa <init_light_map+0x76>
			uint16_t x_coor = i * light_to_world_coefficient;
 800349e:	ea4f 0788 	mov.w	r7, r8, lsl #2
 80034a2:	b2bf      	uxth	r7, r7
			for (uint16_t k = 0; k < light_to_world_coefficient; k++) {
 80034a4:	2400      	movs	r4, #0
			uint8_t lighting_byte = 0;
 80034a6:	4626      	mov	r6, r4
			for (uint16_t k = 0; k < light_to_world_coefficient; k++) {
 80034a8:	e7cb      	b.n	8003442 <init_light_map+0xe>
	for (uint16_t i = 0; i < LIGHT_MAP_WIDTH; i++) {
 80034aa:	f108 0801 	add.w	r8, r8, #1
 80034ae:	fa1f f888 	uxth.w	r8, r8
 80034b2:	f1b8 0f31 	cmp.w	r8, #49	; 0x31
 80034b6:	d801      	bhi.n	80034bc <init_light_map+0x88>
		for (uint16_t j = 0; j < LIGHT_MAP_HEIGHT; j++) {
 80034b8:	2500      	movs	r5, #0
 80034ba:	e7ee      	b.n	800349a <init_light_map+0x66>
		}
	}
}
 80034bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034c0:	20005068 	.word	0x20005068
 80034c4:	20001508 	.word	0x20001508

080034c8 <is_night>:
bool night = false;
bool is_night() {
	return night;
}
 80034c8:	4b01      	ldr	r3, [pc, #4]	; (80034d0 <is_night+0x8>)
 80034ca:	7818      	ldrb	r0, [r3, #0]
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20010bec 	.word	0x20010bec
 80034d4:	00000000 	.word	0x00000000

080034d8 <euclidean_dist>:

float manhattan_dist(int8_t x, int8_t y) {
	return abs(x) + abs(y);
}

float euclidean_dist(int8_t x, int8_t y) {
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	ed2d 8b02 	vpush	{d8}
 80034de:	460e      	mov	r6, r1
	return sqrt(pow(x,2) + pow(y,2));
 80034e0:	ed9f 8b15 	vldr	d8, [pc, #84]	; 8003538 <euclidean_dist+0x60>
 80034e4:	f7fd f856 	bl	8000594 <__aeabi_i2d>
 80034e8:	eeb0 1a48 	vmov.f32	s2, s16
 80034ec:	eef0 1a68 	vmov.f32	s3, s17
 80034f0:	ec41 0b10 	vmov	d0, r0, r1
 80034f4:	f00b ffa8 	bl	800f448 <pow>
 80034f8:	ec55 4b10 	vmov	r4, r5, d0
 80034fc:	4630      	mov	r0, r6
 80034fe:	f7fd f849 	bl	8000594 <__aeabi_i2d>
 8003502:	eeb0 1a48 	vmov.f32	s2, s16
 8003506:	eef0 1a68 	vmov.f32	s3, s17
 800350a:	ec41 0b10 	vmov	d0, r0, r1
 800350e:	f00b ff9b 	bl	800f448 <pow>
 8003512:	ec53 2b10 	vmov	r2, r3, d0
 8003516:	4620      	mov	r0, r4
 8003518:	4629      	mov	r1, r5
 800351a:	f7fc feef 	bl	80002fc <__adddf3>
 800351e:	ec41 0b10 	vmov	d0, r0, r1
 8003522:	f00c f801 	bl	800f528 <sqrt>
 8003526:	ec51 0b10 	vmov	r0, r1, d0
 800352a:	f7fd fb95 	bl	8000c58 <__aeabi_d2f>
}
 800352e:	ee00 0a10 	vmov	s0, r0
 8003532:	ecbd 8b02 	vpop	{d8}
 8003536:	bd70      	pop	{r4, r5, r6, pc}
 8003538:	00000000 	.word	0x00000000
 800353c:	40000000 	.word	0x40000000

08003540 <precompute_euclidean>:

void precompute_euclidean() {
 8003540:	b538      	push	{r3, r4, r5, lr}
	for (uint8_t i = 0; i <= LIGHT_RADIUS; i++) {
 8003542:	2500      	movs	r5, #0
 8003544:	e00f      	b.n	8003566 <precompute_euclidean+0x26>
		for (uint8_t j = i; j <= LIGHT_RADIUS; j++) {
			float dist = euclidean_dist(i, j);
 8003546:	b261      	sxtb	r1, r4
 8003548:	b268      	sxtb	r0, r5
 800354a:	f7ff ffc5 	bl	80034d8 <euclidean_dist>
			EUCLIDEAN_DISTANCES[i+j] = dist;
 800354e:	192a      	adds	r2, r5, r4
 8003550:	4b07      	ldr	r3, [pc, #28]	; (8003570 <precompute_euclidean+0x30>)
 8003552:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003556:	ed83 0a00 	vstr	s0, [r3]
		for (uint8_t j = i; j <= LIGHT_RADIUS; j++) {
 800355a:	3401      	adds	r4, #1
 800355c:	b2e4      	uxtb	r4, r4
 800355e:	2c10      	cmp	r4, #16
 8003560:	d9f1      	bls.n	8003546 <precompute_euclidean+0x6>
	for (uint8_t i = 0; i <= LIGHT_RADIUS; i++) {
 8003562:	3501      	adds	r5, #1
 8003564:	b2ed      	uxtb	r5, r5
 8003566:	2d10      	cmp	r5, #16
 8003568:	d801      	bhi.n	800356e <precompute_euclidean+0x2e>
		for (uint8_t j = i; j <= LIGHT_RADIUS; j++) {
 800356a:	462c      	mov	r4, r5
 800356c:	e7f7      	b.n	800355e <precompute_euclidean+0x1e>
		}
	}
}
 800356e:	bd38      	pop	{r3, r4, r5, pc}
 8003570:	20000e80 	.word	0x20000e80

08003574 <get_euclidean>:

float get_euclidean(uint8_t manhattan_dist) {
	return EUCLIDEAN_DISTANCES[manhattan_dist];
 8003574:	4b02      	ldr	r3, [pc, #8]	; (8003580 <get_euclidean+0xc>)
 8003576:	eb03 0380 	add.w	r3, r3, r0, lsl #2
}
 800357a:	ed93 0a00 	vldr	s0, [r3]
 800357e:	4770      	bx	lr
 8003580:	20000e80 	.word	0x20000e80
 8003584:	00000000 	.word	0x00000000

08003588 <light_intensity>:
float get_light_intensity(uint8_t manhattan_dist) {
	float value = LIGHT_INTENSITIES[manhattan_dist];
	return value;
}

float light_intensity(float dist) {
 8003588:	b508      	push	{r3, lr}
 800358a:	ed2d 8b02 	vpush	{d8}
	if (dist < 4) {
 800358e:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8003592:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359a:	d41e      	bmi.n	80035da <light_intensity+0x52>
		return MIN(1, pow(LIGHT_DEGRADATION_RATE, dist));
	} else if (dist < 6) {
 800359c:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 80035a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80035a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a8:	d54b      	bpl.n	8003642 <light_intensity+0xba>
		return MIN(1, pow(LIGHT_DEGRADATION_RATE-.1, dist));
 80035aa:	ee10 0a10 	vmov	r0, s0
 80035ae:	f7fd f803 	bl	80005b8 <__aeabi_f2d>
 80035b2:	ec41 0b18 	vmov	d8, r0, r1
 80035b6:	ec41 0b11 	vmov	d1, r0, r1
 80035ba:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8003690 <light_intensity+0x108>
 80035be:	f00b ff43 	bl	800f448 <pow>
 80035c2:	ec51 0b10 	vmov	r0, r1, d0
 80035c6:	2200      	movs	r2, #0
 80035c8:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <light_intensity+0x120>)
 80035ca:	f7fd fadd 	bl	8000b88 <__aeabi_dcmpgt>
 80035ce:	b348      	cbz	r0, 8003624 <light_intensity+0x9c>
 80035d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	} else {
		return MIN(1, pow(LIGHT_DEGRADATION_RATE-.2, dist));
	}
}
 80035d4:	ecbd 8b02 	vpop	{d8}
 80035d8:	bd08      	pop	{r3, pc}
		return MIN(1, pow(LIGHT_DEGRADATION_RATE, dist));
 80035da:	ee10 0a10 	vmov	r0, s0
 80035de:	f7fc ffeb 	bl	80005b8 <__aeabi_f2d>
 80035e2:	ec41 0b18 	vmov	d8, r0, r1
 80035e6:	ec41 0b11 	vmov	d1, r0, r1
 80035ea:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 8003698 <light_intensity+0x110>
 80035ee:	f00b ff2b 	bl	800f448 <pow>
 80035f2:	ec51 0b10 	vmov	r0, r1, d0
 80035f6:	2200      	movs	r2, #0
 80035f8:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <light_intensity+0x120>)
 80035fa:	f7fd fac5 	bl	8000b88 <__aeabi_dcmpgt>
 80035fe:	b110      	cbz	r0, 8003606 <light_intensity+0x7e>
 8003600:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003604:	e7e6      	b.n	80035d4 <light_intensity+0x4c>
 8003606:	eeb0 1a48 	vmov.f32	s2, s16
 800360a:	eef0 1a68 	vmov.f32	s3, s17
 800360e:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8003698 <light_intensity+0x110>
 8003612:	f00b ff19 	bl	800f448 <pow>
 8003616:	ec51 0b10 	vmov	r0, r1, d0
 800361a:	f7fd fb1d 	bl	8000c58 <__aeabi_d2f>
 800361e:	ee00 0a10 	vmov	s0, r0
 8003622:	e7d7      	b.n	80035d4 <light_intensity+0x4c>
		return MIN(1, pow(LIGHT_DEGRADATION_RATE-.1, dist));
 8003624:	eeb0 1a48 	vmov.f32	s2, s16
 8003628:	eef0 1a68 	vmov.f32	s3, s17
 800362c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8003690 <light_intensity+0x108>
 8003630:	f00b ff0a 	bl	800f448 <pow>
 8003634:	ec51 0b10 	vmov	r0, r1, d0
 8003638:	f7fd fb0e 	bl	8000c58 <__aeabi_d2f>
 800363c:	ee00 0a10 	vmov	s0, r0
 8003640:	e7c8      	b.n	80035d4 <light_intensity+0x4c>
		return MIN(1, pow(LIGHT_DEGRADATION_RATE-.2, dist));
 8003642:	ee10 0a10 	vmov	r0, s0
 8003646:	f7fc ffb7 	bl	80005b8 <__aeabi_f2d>
 800364a:	ec41 0b18 	vmov	d8, r0, r1
 800364e:	ec41 0b11 	vmov	d1, r0, r1
 8003652:	ed9f 0b13 	vldr	d0, [pc, #76]	; 80036a0 <light_intensity+0x118>
 8003656:	f00b fef7 	bl	800f448 <pow>
 800365a:	ec51 0b10 	vmov	r0, r1, d0
 800365e:	2200      	movs	r2, #0
 8003660:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <light_intensity+0x120>)
 8003662:	f7fd fa91 	bl	8000b88 <__aeabi_dcmpgt>
 8003666:	b110      	cbz	r0, 800366e <light_intensity+0xe6>
 8003668:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800366c:	e7b2      	b.n	80035d4 <light_intensity+0x4c>
 800366e:	eeb0 1a48 	vmov.f32	s2, s16
 8003672:	eef0 1a68 	vmov.f32	s3, s17
 8003676:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 80036a0 <light_intensity+0x118>
 800367a:	f00b fee5 	bl	800f448 <pow>
 800367e:	ec51 0b10 	vmov	r0, r1, d0
 8003682:	f7fd fae9 	bl	8000c58 <__aeabi_d2f>
 8003686:	ee00 0a10 	vmov	s0, r0
 800368a:	e7a3      	b.n	80035d4 <light_intensity+0x4c>
 800368c:	f3af 8000 	nop.w
 8003690:	33333333 	.word	0x33333333
 8003694:	3feb3333 	.word	0x3feb3333
 8003698:	66666666 	.word	0x66666666
 800369c:	3fee6666 	.word	0x3fee6666
 80036a0:	00000000 	.word	0x00000000
 80036a4:	3fe80000 	.word	0x3fe80000
 80036a8:	3ff00000 	.word	0x3ff00000
 80036ac:	00000000 	.word	0x00000000

080036b0 <precompute_light_intensity>:
void precompute_light_intensity() {
 80036b0:	b510      	push	{r4, lr}
 80036b2:	ed2d 8b02 	vpush	{d8}
	for (uint8_t i = 0; i < n_values; i++) {
 80036b6:	2400      	movs	r4, #0
 80036b8:	e00b      	b.n	80036d2 <precompute_light_intensity+0x22>
		if (euclidean > 0.01) {
 80036ba:	ee18 0a10 	vmov	r0, s16
 80036be:	f7fc ff7b 	bl	80005b8 <__aeabi_f2d>
 80036c2:	a314      	add	r3, pc, #80	; (adr r3, 8003714 <precompute_light_intensity+0x64>)
 80036c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c8:	f7fd fa5e 	bl	8000b88 <__aeabi_dcmpgt>
 80036cc:	b990      	cbnz	r0, 80036f4 <precompute_light_intensity+0x44>
	for (uint8_t i = 0; i < n_values; i++) {
 80036ce:	3401      	adds	r4, #1
 80036d0:	b2e4      	uxtb	r4, r4
 80036d2:	2c1f      	cmp	r4, #31
 80036d4:	d818      	bhi.n	8003708 <precompute_light_intensity+0x58>
		float euclidean = get_euclidean(i);
 80036d6:	4620      	mov	r0, r4
 80036d8:	f7ff ff4c 	bl	8003574 <get_euclidean>
 80036dc:	eeb0 8a40 	vmov.f32	s16, s0
		euclidean = MAX(1, euclidean);
 80036e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80036e4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80036e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ec:	d5e5      	bpl.n	80036ba <precompute_light_intensity+0xa>
 80036ee:	eeb0 8a67 	vmov.f32	s16, s15
 80036f2:	e7e2      	b.n	80036ba <precompute_light_intensity+0xa>
			LIGHT_INTENSITIES[i] = light_intensity(euclidean);
 80036f4:	eeb0 0a48 	vmov.f32	s0, s16
 80036f8:	f7ff ff46 	bl	8003588 <light_intensity>
 80036fc:	4b04      	ldr	r3, [pc, #16]	; (8003710 <precompute_light_intensity+0x60>)
 80036fe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003702:	ed83 0a00 	vstr	s0, [r3]
 8003706:	e7e2      	b.n	80036ce <precompute_light_intensity+0x1e>
}
 8003708:	ecbd 8b02 	vpop	{d8}
 800370c:	bd10      	pop	{r4, pc}
 800370e:	bf00      	nop
 8003710:	20001448 	.word	0x20001448
 8003714:	47ae147b 	.word	0x47ae147b
 8003718:	3f847ae1 	.word	0x3f847ae1

0800371c <assign_block_material>:


block_t assign_block_material(block_c x, block_c y) {
 800371c:	b538      	push	{r3, r4, r5, lr}
 800371e:	460c      	mov	r4, r1
	float probability_rock = 0.01;
	block_t block;

	// right block
	if (y > LVL1_HMAP[x]) { // Ground
 8003720:	4b13      	ldr	r3, [pc, #76]	; (8003770 <assign_block_material+0x54>)
 8003722:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8003726:	428b      	cmp	r3, r1
 8003728:	d303      	bcc.n	8003732 <assign_block_material+0x16>
			block = _rock;
		} else {
			block = _dirt;
		}

	} else if (y == LVL1_HMAP[x]) {
 800372a:	428b      	cmp	r3, r1
 800372c:	d01a      	beq.n	8003764 <assign_block_material+0x48>
		block = _grass;
	} else {
		block = _sky;
 800372e:	2004      	movs	r0, #4
	}

	return block;
}
 8003730:	bd38      	pop	{r3, r4, r5, pc}
 8003732:	4605      	mov	r5, r0
		float random = (float) rand() / (float) (RAND_MAX);
 8003734:	f00d ff1c 	bl	8011570 <rand>
 8003738:	ee07 0a90 	vmov	s15, r0
 800373c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003740:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003774 <assign_block_material+0x58>
 8003744:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (random < probability_rock && abs(LVL1_HMAP[x]) < y) {
 8003748:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003778 <assign_block_material+0x5c>
 800374c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003754:	d508      	bpl.n	8003768 <assign_block_material+0x4c>
 8003756:	4b06      	ldr	r3, [pc, #24]	; (8003770 <assign_block_material+0x54>)
 8003758:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800375c:	42a3      	cmp	r3, r4
 800375e:	d305      	bcc.n	800376c <assign_block_material+0x50>
			block = _dirt;
 8003760:	2001      	movs	r0, #1
 8003762:	e7e5      	b.n	8003730 <assign_block_material+0x14>
		block = _grass;
 8003764:	2002      	movs	r0, #2
 8003766:	e7e3      	b.n	8003730 <assign_block_material+0x14>
			block = _dirt;
 8003768:	2001      	movs	r0, #1
 800376a:	e7e1      	b.n	8003730 <assign_block_material+0x14>
			block = _rock;
 800376c:	2007      	movs	r0, #7
 800376e:	e7df      	b.n	8003730 <assign_block_material+0x14>
 8003770:	200043e8 	.word	0x200043e8
 8003774:	30000000 	.word	0x30000000
 8003778:	3c23d70a 	.word	0x3c23d70a

0800377c <build_cell>:
	}
}

// first parameter is left block, second right
cell_t build_cell(block_t mat1, block_t mat2) {
	return (mat1 << 4) | mat2;
 800377c:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
}
 8003780:	b2c0      	uxtb	r0, r0
 8003782:	4770      	bx	lr

08003784 <world_zero_fill>:
void world_zero_fill() {
 8003784:	b538      	push	{r3, r4, r5, lr}
	for (cell_c y = 0; y < WORLD_HEIGHT_CELLS; y++) {
 8003786:	2500      	movs	r5, #0
 8003788:	e00e      	b.n	80037a8 <world_zero_fill+0x24>
			WORLD[y][x] = build_cell(_empty, _empty);
 800378a:	2100      	movs	r1, #0
 800378c:	4608      	mov	r0, r1
 800378e:	f7ff fff5 	bl	800377c <build_cell>
 8003792:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <world_zero_fill+0x30>)
 8003794:	22c8      	movs	r2, #200	; 0xc8
 8003796:	fb02 3305 	mla	r3, r2, r5, r3
 800379a:	5518      	strb	r0, [r3, r4]
		for (cell_c x = 0; x < WORLD_WIDTH_CELLS; x++) {
 800379c:	3401      	adds	r4, #1
 800379e:	b2a4      	uxth	r4, r4
 80037a0:	2cc7      	cmp	r4, #199	; 0xc7
 80037a2:	d9f2      	bls.n	800378a <world_zero_fill+0x6>
	for (cell_c y = 0; y < WORLD_HEIGHT_CELLS; y++) {
 80037a4:	3501      	adds	r5, #1
 80037a6:	b2ad      	uxth	r5, r5
 80037a8:	2def      	cmp	r5, #239	; 0xef
 80037aa:	d801      	bhi.n	80037b0 <world_zero_fill+0x2c>
		for (cell_c x = 0; x < WORLD_WIDTH_CELLS; x++) {
 80037ac:	2400      	movs	r4, #0
 80037ae:	e7f7      	b.n	80037a0 <world_zero_fill+0x1c>
}
 80037b0:	bd38      	pop	{r3, r4, r5, pc}
 80037b2:	bf00      	nop
 80037b4:	20005068 	.word	0x20005068

080037b8 <draw_blob>:
	free(CAVE_MAP);

}

// Draws blob, make sure value includes value for both blocks
void draw_blob(cell_c x, cell_c y, uint16_t radius, cell_t value) {
 80037b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037bc:	4605      	mov	r5, r0
 80037be:	460c      	mov	r4, r1
 80037c0:	4611      	mov	r1, r2
 80037c2:	461f      	mov	r7, r3
	for (int8_t i = -radius; i <= radius; i++) {
 80037c4:	f1c2 0800 	rsb	r8, r2, #0
 80037c8:	fa4f f888 	sxtb.w	r8, r8
 80037cc:	4646      	mov	r6, r8
 80037ce:	e01a      	b.n	8003806 <draw_blob+0x4e>
		for (int8_t j = -radius; j <= radius; j++) {
 80037d0:	f10c 0c01 	add.w	ip, ip, #1
 80037d4:	fa4f fc8c 	sxtb.w	ip, ip
 80037d8:	458c      	cmp	ip, r1
 80037da:	dc12      	bgt.n	8003802 <draw_blob+0x4a>
			if (y+i > LVL1_HMAP[x+j] + 5) {
 80037dc:	1823      	adds	r3, r4, r0
 80037de:	eb05 020c 	add.w	r2, r5, ip
 80037e2:	f8df e030 	ldr.w	lr, [pc, #48]	; 8003814 <draw_blob+0x5c>
 80037e6:	f83e e012 	ldrh.w	lr, [lr, r2, lsl #1]
 80037ea:	f10e 0e05 	add.w	lr, lr, #5
 80037ee:	4573      	cmp	r3, lr
 80037f0:	ddee      	ble.n	80037d0 <draw_blob+0x18>
				WORLD[y+i][x+j] = value;
 80037f2:	f8df e024 	ldr.w	lr, [pc, #36]	; 8003818 <draw_blob+0x60>
 80037f6:	f04f 09c8 	mov.w	r9, #200	; 0xc8
 80037fa:	fb09 e303 	mla	r3, r9, r3, lr
 80037fe:	549f      	strb	r7, [r3, r2]
 8003800:	e7e6      	b.n	80037d0 <draw_blob+0x18>
	for (int8_t i = -radius; i <= radius; i++) {
 8003802:	3601      	adds	r6, #1
 8003804:	b276      	sxtb	r6, r6
 8003806:	4630      	mov	r0, r6
 8003808:	428e      	cmp	r6, r1
 800380a:	dc01      	bgt.n	8003810 <draw_blob+0x58>
		for (int8_t j = -radius; j <= radius; j++) {
 800380c:	46c4      	mov	ip, r8
 800380e:	e7e3      	b.n	80037d8 <draw_blob+0x20>
			}
		}
	}
}
 8003810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003814:	200043e8 	.word	0x200043e8
 8003818:	20005068 	.word	0x20005068

0800381c <draw_circle>:

void draw_circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t cave_value) {
 800381c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800381e:	4604      	mov	r4, r0
 8003820:	4608      	mov	r0, r1
 8003822:	4611      	mov	r1, r2
 8003824:	461e      	mov	r6, r3
	uint16_t width = WORLD_WIDTH_BLOCKS / (2 * CAVE_SAMPLES_PER_CELL);
	uint16_t height = WORLD_HEIGHT_BLOCKS / CAVE_SAMPLES_PER_CELL;

	for (int8_t xx = -radius; xx < radius; xx++) {
 8003826:	4255      	negs	r5, r2
 8003828:	b26d      	sxtb	r5, r5
 800382a:	462a      	mov	r2, r5
 800382c:	e01f      	b.n	800386e <draw_circle+0x52>
		for (int8_t yy = -radius; yy < radius; yy++) {
 800382e:	f10c 0c01 	add.w	ip, ip, #1
 8003832:	fa4f fc8c 	sxtb.w	ip, ip
 8003836:	458c      	cmp	ip, r1
 8003838:	da17      	bge.n	800386a <draw_circle+0x4e>

			int16_t pos_x = (int16_t) x + xx;
 800383a:	eb04 0e02 	add.w	lr, r4, r2
 800383e:	fa0f fe8e 	sxth.w	lr, lr
			int16_t pos_y = (int16_t) y + yy;
 8003842:	eb00 030c 	add.w	r3, r0, ip
 8003846:	b21b      	sxth	r3, r3

			if (pos_x > 0 && pos_x < width && pos_y > 0 && pos_y < height) {
 8003848:	f1be 0f00 	cmp.w	lr, #0
 800384c:	ddef      	ble.n	800382e <draw_circle+0x12>
 800384e:	f1be 0f63 	cmp.w	lr, #99	; 0x63
 8003852:	dcec      	bgt.n	800382e <draw_circle+0x12>
 8003854:	2b00      	cmp	r3, #0
 8003856:	ddea      	ble.n	800382e <draw_circle+0x12>
 8003858:	2b77      	cmp	r3, #119	; 0x77
 800385a:	dce8      	bgt.n	800382e <draw_circle+0x12>
				CAVE_MAP[pos_y][pos_x] = cave_value;
 800385c:	4f06      	ldr	r7, [pc, #24]	; (8003878 <draw_circle+0x5c>)
 800385e:	683f      	ldr	r7, [r7, #0]
 8003860:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8003864:	f803 600e 	strb.w	r6, [r3, lr]
 8003868:	e7e1      	b.n	800382e <draw_circle+0x12>
	for (int8_t xx = -radius; xx < radius; xx++) {
 800386a:	3201      	adds	r2, #1
 800386c:	b252      	sxtb	r2, r2
 800386e:	428a      	cmp	r2, r1
 8003870:	da01      	bge.n	8003876 <draw_circle+0x5a>
		for (int8_t yy = -radius; yy < radius; yy++) {
 8003872:	46ac      	mov	ip, r5
 8003874:	e7df      	b.n	8003836 <draw_circle+0x1a>
			}

		}
	}
}
 8003876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003878:	20000e7c 	.word	0x20000e7c

0800387c <generate_caves>:
void generate_caves() {
 800387c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	CAVE_MAP = (uint8_t**) malloc((WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL) * sizeof(uint8_t*));
 8003880:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003884:	f00c fed4 	bl	8010630 <malloc>
 8003888:	4ba9      	ldr	r3, [pc, #676]	; (8003b30 <generate_caves+0x2b4>)
 800388a:	6018      	str	r0, [r3, #0]
	for (uint16_t j = 0; j < WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL; j++) {
 800388c:	2400      	movs	r4, #0
 800388e:	2c77      	cmp	r4, #119	; 0x77
 8003890:	d809      	bhi.n	80038a6 <generate_caves+0x2a>
		CAVE_MAP[j] = (uint8_t*) malloc((WORLD_WIDTH_BLOCKS/(2*CAVE_SAMPLES_PER_CELL)) * sizeof(uint8_t));
 8003892:	4ba7      	ldr	r3, [pc, #668]	; (8003b30 <generate_caves+0x2b4>)
 8003894:	681d      	ldr	r5, [r3, #0]
 8003896:	2064      	movs	r0, #100	; 0x64
 8003898:	f00c feca 	bl	8010630 <malloc>
 800389c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (uint16_t j = 0; j < WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL; j++) {
 80038a0:	3401      	adds	r4, #1
 80038a2:	b2a4      	uxth	r4, r4
 80038a4:	e7f3      	b.n	800388e <generate_caves+0x12>
	for (uint16_t x = 0; x < map_width; x++) {
 80038a6:	2500      	movs	r5, #0
 80038a8:	e01f      	b.n	80038ea <generate_caves+0x6e>
		for (uint16_t y = 0; y < map_height; y++) {	// Caves start 5 blocks under ground
 80038aa:	3401      	adds	r4, #1
 80038ac:	b2a4      	uxth	r4, r4
 80038ae:	2c77      	cmp	r4, #119	; 0x77
 80038b0:	d819      	bhi.n	80038e6 <generate_caves+0x6a>
			CAVE_MAP[y][x] = dirt_value;
 80038b2:	4b9f      	ldr	r3, [pc, #636]	; (8003b30 <generate_caves+0x2b4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80038ba:	2211      	movs	r2, #17
 80038bc:	555a      	strb	r2, [r3, r5]
			if (rand() % 100 < CAVE_THRESH) {
 80038be:	f00d fe57 	bl	8011570 <rand>
 80038c2:	4a9c      	ldr	r2, [pc, #624]	; (8003b34 <generate_caves+0x2b8>)
 80038c4:	fb82 3200 	smull	r3, r2, r2, r0
 80038c8:	17c3      	asrs	r3, r0, #31
 80038ca:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 80038ce:	2264      	movs	r2, #100	; 0x64
 80038d0:	fb02 0313 	mls	r3, r2, r3, r0
 80038d4:	2b0b      	cmp	r3, #11
 80038d6:	dce8      	bgt.n	80038aa <generate_caves+0x2e>
				CAVE_MAP[y][x] = cave_value;
 80038d8:	4b95      	ldr	r3, [pc, #596]	; (8003b30 <generate_caves+0x2b4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80038e0:	22cc      	movs	r2, #204	; 0xcc
 80038e2:	555a      	strb	r2, [r3, r5]
 80038e4:	e7e1      	b.n	80038aa <generate_caves+0x2e>
	for (uint16_t x = 0; x < map_width; x++) {
 80038e6:	3501      	adds	r5, #1
 80038e8:	b2ad      	uxth	r5, r5
 80038ea:	2d63      	cmp	r5, #99	; 0x63
 80038ec:	d801      	bhi.n	80038f2 <generate_caves+0x76>
		for (uint16_t y = 0; y < map_height; y++) {	// Caves start 5 blocks under ground
 80038ee:	2400      	movs	r4, #0
 80038f0:	e7dd      	b.n	80038ae <generate_caves+0x32>
	for (uint8_t iter = 0; iter < CAVE_ITER; iter++) {
 80038f2:	2600      	movs	r6, #0
 80038f4:	e0ee      	b.n	8003ad4 <generate_caves+0x258>
				uint8_t neighbor_cave_count = 0;
 80038f6:	2300      	movs	r3, #0
				if (i > 0 && CAVE_MAP[i-1][j] == cave_value) {
 80038f8:	b14c      	cbz	r4, 800390e <generate_caves+0x92>
 80038fa:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 80038fe:	3a01      	subs	r2, #1
 8003900:	498b      	ldr	r1, [pc, #556]	; (8003b30 <generate_caves+0x2b4>)
 8003902:	6809      	ldr	r1, [r1, #0]
 8003904:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003908:	5d52      	ldrb	r2, [r2, r5]
 800390a:	2acc      	cmp	r2, #204	; 0xcc
 800390c:	d07f      	beq.n	8003a0e <generate_caves+0x192>
				if (i > 0 && j < map_height-1 && CAVE_MAP[i-1][j+1] == cave_value) {
 800390e:	b164      	cbz	r4, 800392a <generate_caves+0xae>
 8003910:	2d76      	cmp	r5, #118	; 0x76
 8003912:	d80a      	bhi.n	800392a <generate_caves+0xae>
 8003914:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 8003918:	3a01      	subs	r2, #1
 800391a:	4985      	ldr	r1, [pc, #532]	; (8003b30 <generate_caves+0x2b4>)
 800391c:	6809      	ldr	r1, [r1, #0]
 800391e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003922:	442a      	add	r2, r5
 8003924:	7852      	ldrb	r2, [r2, #1]
 8003926:	2acc      	cmp	r2, #204	; 0xcc
 8003928:	d074      	beq.n	8003a14 <generate_caves+0x198>
				if (j > 0 && CAVE_MAP[i][j-1] == cave_value) {
 800392a:	b145      	cbz	r5, 800393e <generate_caves+0xc2>
 800392c:	4a80      	ldr	r2, [pc, #512]	; (8003b30 <generate_caves+0x2b4>)
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8003934:	442a      	add	r2, r5
 8003936:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800393a:	2acc      	cmp	r2, #204	; 0xcc
 800393c:	d06d      	beq.n	8003a1a <generate_caves+0x19e>
				if (j < map_height-1 && CAVE_MAP[i][j+1] == cave_value) {
 800393e:	2d76      	cmp	r5, #118	; 0x76
 8003940:	d807      	bhi.n	8003952 <generate_caves+0xd6>
 8003942:	4a7b      	ldr	r2, [pc, #492]	; (8003b30 <generate_caves+0x2b4>)
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800394a:	442a      	add	r2, r5
 800394c:	7852      	ldrb	r2, [r2, #1]
 800394e:	2acc      	cmp	r2, #204	; 0xcc
 8003950:	d066      	beq.n	8003a20 <generate_caves+0x1a4>
				if (i < map_width-1 && j > 0 && CAVE_MAP[i+1][j-1] == cave_value) {
 8003952:	2c62      	cmp	r4, #98	; 0x62
 8003954:	d80a      	bhi.n	800396c <generate_caves+0xf0>
 8003956:	b14d      	cbz	r5, 800396c <generate_caves+0xf0>
 8003958:	1c62      	adds	r2, r4, #1
 800395a:	4975      	ldr	r1, [pc, #468]	; (8003b30 <generate_caves+0x2b4>)
 800395c:	6809      	ldr	r1, [r1, #0]
 800395e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003962:	442a      	add	r2, r5
 8003964:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8003968:	2acc      	cmp	r2, #204	; 0xcc
 800396a:	d05c      	beq.n	8003a26 <generate_caves+0x1aa>
				if (i < map_width-1 && CAVE_MAP[i+1][j] == cave_value) {
 800396c:	2c62      	cmp	r4, #98	; 0x62
 800396e:	d807      	bhi.n	8003980 <generate_caves+0x104>
 8003970:	1c62      	adds	r2, r4, #1
 8003972:	496f      	ldr	r1, [pc, #444]	; (8003b30 <generate_caves+0x2b4>)
 8003974:	6809      	ldr	r1, [r1, #0]
 8003976:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800397a:	5d52      	ldrb	r2, [r2, r5]
 800397c:	2acc      	cmp	r2, #204	; 0xcc
 800397e:	d055      	beq.n	8003a2c <generate_caves+0x1b0>
				if (i < map_width-1 && j < map_height-1 && CAVE_MAP[i+1][j+1] == cave_value) {
 8003980:	2c62      	cmp	r4, #98	; 0x62
 8003982:	d80a      	bhi.n	800399a <generate_caves+0x11e>
 8003984:	2d76      	cmp	r5, #118	; 0x76
 8003986:	d808      	bhi.n	800399a <generate_caves+0x11e>
 8003988:	1c62      	adds	r2, r4, #1
 800398a:	4969      	ldr	r1, [pc, #420]	; (8003b30 <generate_caves+0x2b4>)
 800398c:	6809      	ldr	r1, [r1, #0]
 800398e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003992:	442a      	add	r2, r5
 8003994:	7852      	ldrb	r2, [r2, #1]
 8003996:	2acc      	cmp	r2, #204	; 0xcc
 8003998:	d04b      	beq.n	8003a32 <generate_caves+0x1b6>
				if (CAVE_MAP[i][j] == dirt_value) {
 800399a:	00a7      	lsls	r7, r4, #2
 800399c:	4a64      	ldr	r2, [pc, #400]	; (8003b30 <generate_caves+0x2b4>)
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80039a4:	46a8      	mov	r8, r5
 80039a6:	1951      	adds	r1, r2, r5
 80039a8:	5d52      	ldrb	r2, [r2, r5]
 80039aa:	2a11      	cmp	r2, #17
 80039ac:	d044      	beq.n	8003a38 <generate_caves+0x1bc>
					if (neighbor_cave_count < CAVE_DEATH_THRESH || (neighbor_cave_count > 6 && rand() % 100 < 40)) {
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d967      	bls.n	8003a82 <generate_caves+0x206>
 80039b2:	2b06      	cmp	r3, #6
 80039b4:	d858      	bhi.n	8003a68 <generate_caves+0x1ec>
					CAVE_MAP[i][j] = cave_value;
 80039b6:	4b5e      	ldr	r3, [pc, #376]	; (8003b30 <generate_caves+0x2b4>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	59db      	ldr	r3, [r3, r7]
 80039bc:	22cc      	movs	r2, #204	; 0xcc
 80039be:	f803 2008 	strb.w	r2, [r3, r8]
					if (rand() % 100 < blob_probability) {
 80039c2:	f00d fdd5 	bl	8011570 <rand>
 80039c6:	4a5b      	ldr	r2, [pc, #364]	; (8003b34 <generate_caves+0x2b8>)
 80039c8:	fb82 3200 	smull	r3, r2, r2, r0
 80039cc:	17c3      	asrs	r3, r0, #31
 80039ce:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 80039d2:	2264      	movs	r2, #100	; 0x64
 80039d4:	fb02 0313 	mls	r3, r2, r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	db6c      	blt.n	8003ab6 <generate_caves+0x23a>
			for (uint16_t i = 0; i < map_height; i++) {
 80039dc:	3401      	adds	r4, #1
 80039de:	b2a4      	uxth	r4, r4
 80039e0:	2c77      	cmp	r4, #119	; 0x77
 80039e2:	d86f      	bhi.n	8003ac4 <generate_caves+0x248>
				if (i > 0 && j > 0 && CAVE_MAP[i-1][j-1] == cave_value) {
 80039e4:	2c00      	cmp	r4, #0
 80039e6:	d086      	beq.n	80038f6 <generate_caves+0x7a>
 80039e8:	b16d      	cbz	r5, 8003a06 <generate_caves+0x18a>
 80039ea:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80039ee:	3b01      	subs	r3, #1
 80039f0:	4a4f      	ldr	r2, [pc, #316]	; (8003b30 <generate_caves+0x2b4>)
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f8:	442b      	add	r3, r5
 80039fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80039fe:	2bcc      	cmp	r3, #204	; 0xcc
 8003a00:	d003      	beq.n	8003a0a <generate_caves+0x18e>
				uint8_t neighbor_cave_count = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e778      	b.n	80038f8 <generate_caves+0x7c>
 8003a06:	2300      	movs	r3, #0
 8003a08:	e776      	b.n	80038f8 <generate_caves+0x7c>
					neighbor_cave_count++;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e774      	b.n	80038f8 <generate_caves+0x7c>
					neighbor_cave_count++;
 8003a0e:	3301      	adds	r3, #1
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	e77c      	b.n	800390e <generate_caves+0x92>
					neighbor_cave_count++;
 8003a14:	3301      	adds	r3, #1
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	e787      	b.n	800392a <generate_caves+0xae>
					neighbor_cave_count++;
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	e78e      	b.n	800393e <generate_caves+0xc2>
					neighbor_cave_count++;
 8003a20:	3301      	adds	r3, #1
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	e795      	b.n	8003952 <generate_caves+0xd6>
					neighbor_cave_count++;
 8003a26:	3301      	adds	r3, #1
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	e79f      	b.n	800396c <generate_caves+0xf0>
					neighbor_cave_count++;
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	e7a6      	b.n	8003980 <generate_caves+0x104>
					neighbor_cave_count++;
 8003a32:	3301      	adds	r3, #1
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	e7b0      	b.n	800399a <generate_caves+0x11e>
					if (neighbor_cave_count > CAVE_BIRTH_THRESH) {
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d9cf      	bls.n	80039dc <generate_caves+0x160>
						CAVE_MAP[i][j] = cave_value;
 8003a3c:	23cc      	movs	r3, #204	; 0xcc
 8003a3e:	700b      	strb	r3, [r1, #0]
						if (rand() % 100 < blob_probability) {
 8003a40:	f00d fd96 	bl	8011570 <rand>
 8003a44:	4a3b      	ldr	r2, [pc, #236]	; (8003b34 <generate_caves+0x2b8>)
 8003a46:	fb82 3200 	smull	r3, r2, r2, r0
 8003a4a:	17c3      	asrs	r3, r0, #31
 8003a4c:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8003a50:	2264      	movs	r2, #100	; 0x64
 8003a52:	fb02 0313 	mls	r3, r2, r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	dac0      	bge.n	80039dc <generate_caves+0x160>
							draw_circle(i, j, radius, cave_value);
 8003a5a:	23cc      	movs	r3, #204	; 0xcc
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	4629      	mov	r1, r5
 8003a60:	4620      	mov	r0, r4
 8003a62:	f7ff fedb 	bl	800381c <draw_circle>
 8003a66:	e7b9      	b.n	80039dc <generate_caves+0x160>
					if (neighbor_cave_count < CAVE_DEATH_THRESH || (neighbor_cave_count > 6 && rand() % 100 < 40)) {
 8003a68:	f00d fd82 	bl	8011570 <rand>
 8003a6c:	4a31      	ldr	r2, [pc, #196]	; (8003b34 <generate_caves+0x2b8>)
 8003a6e:	fb82 3200 	smull	r3, r2, r2, r0
 8003a72:	17c3      	asrs	r3, r0, #31
 8003a74:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8003a78:	2264      	movs	r2, #100	; 0x64
 8003a7a:	fb02 0313 	mls	r3, r2, r3, r0
 8003a7e:	2b27      	cmp	r3, #39	; 0x27
 8003a80:	dc99      	bgt.n	80039b6 <generate_caves+0x13a>
						CAVE_MAP[i][j] = dirt_value;
 8003a82:	4b2b      	ldr	r3, [pc, #172]	; (8003b30 <generate_caves+0x2b4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	59db      	ldr	r3, [r3, r7]
 8003a88:	2211      	movs	r2, #17
 8003a8a:	f803 2008 	strb.w	r2, [r3, r8]
						if (rand() % 100 < blob_probability) {
 8003a8e:	f00d fd6f 	bl	8011570 <rand>
 8003a92:	4a28      	ldr	r2, [pc, #160]	; (8003b34 <generate_caves+0x2b8>)
 8003a94:	fb82 3200 	smull	r3, r2, r2, r0
 8003a98:	17c3      	asrs	r3, r0, #31
 8003a9a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8003a9e:	2264      	movs	r2, #100	; 0x64
 8003aa0:	fb02 0313 	mls	r3, r2, r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	da86      	bge.n	80039b6 <generate_caves+0x13a>
							draw_circle(i, j, radius, dirt_value);
 8003aa8:	2311      	movs	r3, #17
 8003aaa:	2203      	movs	r2, #3
 8003aac:	4629      	mov	r1, r5
 8003aae:	4620      	mov	r0, r4
 8003ab0:	f7ff feb4 	bl	800381c <draw_circle>
 8003ab4:	e77f      	b.n	80039b6 <generate_caves+0x13a>
						draw_circle(i, j, radius, cave_value);
 8003ab6:	23cc      	movs	r3, #204	; 0xcc
 8003ab8:	2203      	movs	r2, #3
 8003aba:	4629      	mov	r1, r5
 8003abc:	4620      	mov	r0, r4
 8003abe:	f7ff fead 	bl	800381c <draw_circle>
 8003ac2:	e78b      	b.n	80039dc <generate_caves+0x160>
		for (uint16_t j = 0; j < map_width; j++) {
 8003ac4:	3501      	adds	r5, #1
 8003ac6:	b2ad      	uxth	r5, r5
 8003ac8:	2d63      	cmp	r5, #99	; 0x63
 8003aca:	d801      	bhi.n	8003ad0 <generate_caves+0x254>
			for (uint16_t i = 0; i < map_height; i++) {
 8003acc:	2400      	movs	r4, #0
 8003ace:	e787      	b.n	80039e0 <generate_caves+0x164>
	for (uint8_t iter = 0; iter < CAVE_ITER; iter++) {
 8003ad0:	3601      	adds	r6, #1
 8003ad2:	b2f6      	uxtb	r6, r6
 8003ad4:	2e09      	cmp	r6, #9
 8003ad6:	d801      	bhi.n	8003adc <generate_caves+0x260>
		for (uint16_t j = 0; j < map_width; j++) {
 8003ad8:	2500      	movs	r5, #0
 8003ada:	e7f5      	b.n	8003ac8 <generate_caves+0x24c>
	for (uint16_t x = 0; x < map_width; x += 1) {
 8003adc:	2700      	movs	r7, #0
 8003ade:	e047      	b.n	8003b70 <generate_caves+0x2f4>
				for (int8_t cy = 0; cy < CAVE_SAMPLES_PER_CELL; cy++) {
 8003ae0:	3401      	adds	r4, #1
 8003ae2:	b264      	sxtb	r4, r4
 8003ae4:	2c01      	cmp	r4, #1
 8003ae6:	dc2d      	bgt.n	8003b44 <generate_caves+0x2c8>
					uint8_t depth = rand() % 6 + 7;
 8003ae8:	f00d fd42 	bl	8011570 <rand>
 8003aec:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <generate_caves+0x2bc>)
 8003aee:	fb83 2300 	smull	r2, r3, r3, r0
 8003af2:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8003af6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003afa:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	3307      	adds	r3, #7
					uint16_t y_coor = y * CAVE_SAMPLES_PER_CELL + cy;
 8003b02:	0071      	lsls	r1, r6, #1
 8003b04:	b289      	uxth	r1, r1
 8003b06:	fa11 f184 	uxtah	r1, r1, r4
 8003b0a:	b289      	uxth	r1, r1
					uint16_t x_coor = x * CAVE_SAMPLES_PER_CELL + cx;
 8003b0c:	007a      	lsls	r2, r7, #1
 8003b0e:	b292      	uxth	r2, r2
 8003b10:	442a      	add	r2, r5
 8003b12:	b292      	uxth	r2, r2
					if (y_coor > LVL1_HMAP[x_coor] + depth) {
 8003b14:	4809      	ldr	r0, [pc, #36]	; (8003b3c <generate_caves+0x2c0>)
 8003b16:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 8003b1a:	fa50 f383 	uxtab	r3, r0, r3
 8003b1e:	4299      	cmp	r1, r3
 8003b20:	ddde      	ble.n	8003ae0 <generate_caves+0x264>
						WORLD[y_coor][x_coor] = value;
 8003b22:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <generate_caves+0x2c4>)
 8003b24:	20c8      	movs	r0, #200	; 0xc8
 8003b26:	fb00 3101 	mla	r1, r0, r1, r3
 8003b2a:	f801 8002 	strb.w	r8, [r1, r2]
 8003b2e:	e7d7      	b.n	8003ae0 <generate_caves+0x264>
 8003b30:	20000e7c 	.word	0x20000e7c
 8003b34:	51eb851f 	.word	0x51eb851f
 8003b38:	2aaaaaab 	.word	0x2aaaaaab
 8003b3c:	200043e8 	.word	0x200043e8
 8003b40:	20005068 	.word	0x20005068
			for (uint8_t cx = 0; cx < CAVE_SAMPLES_PER_CELL; cx++) {
 8003b44:	3501      	adds	r5, #1
 8003b46:	b2ed      	uxtb	r5, r5
 8003b48:	2d01      	cmp	r5, #1
 8003b4a:	d801      	bhi.n	8003b50 <generate_caves+0x2d4>
				for (int8_t cy = 0; cy < CAVE_SAMPLES_PER_CELL; cy++) {
 8003b4c:	2400      	movs	r4, #0
 8003b4e:	e7c9      	b.n	8003ae4 <generate_caves+0x268>
		for (uint16_t y = 0; y < map_height; y += 1) {
 8003b50:	3601      	adds	r6, #1
 8003b52:	b2b6      	uxth	r6, r6
 8003b54:	2e77      	cmp	r6, #119	; 0x77
 8003b56:	d809      	bhi.n	8003b6c <generate_caves+0x2f0>
			uint8_t value = CAVE_MAP[map_height - y][x];
 8003b58:	f1c6 0378 	rsb	r3, r6, #120	; 0x78
 8003b5c:	4a0f      	ldr	r2, [pc, #60]	; (8003b9c <generate_caves+0x320>)
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b64:	f813 8007 	ldrb.w	r8, [r3, r7]
			for (uint8_t cx = 0; cx < CAVE_SAMPLES_PER_CELL; cx++) {
 8003b68:	2500      	movs	r5, #0
 8003b6a:	e7ed      	b.n	8003b48 <generate_caves+0x2cc>
	for (uint16_t x = 0; x < map_width; x += 1) {
 8003b6c:	3701      	adds	r7, #1
 8003b6e:	b2bf      	uxth	r7, r7
 8003b70:	2f63      	cmp	r7, #99	; 0x63
 8003b72:	d801      	bhi.n	8003b78 <generate_caves+0x2fc>
		for (uint16_t y = 0; y < map_height; y += 1) {
 8003b74:	2600      	movs	r6, #0
 8003b76:	e7ed      	b.n	8003b54 <generate_caves+0x2d8>
	for (uint16_t j = 0; j < WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL; j++) {
 8003b78:	2400      	movs	r4, #0
 8003b7a:	2c77      	cmp	r4, #119	; 0x77
 8003b7c:	d808      	bhi.n	8003b90 <generate_caves+0x314>
		free(CAVE_MAP[j]);
 8003b7e:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <generate_caves+0x320>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003b86:	f00c fd5b 	bl	8010640 <free>
	for (uint16_t j = 0; j < WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL; j++) {
 8003b8a:	3401      	adds	r4, #1
 8003b8c:	b2a4      	uxth	r4, r4
 8003b8e:	e7f4      	b.n	8003b7a <generate_caves+0x2fe>
	free(CAVE_MAP);
 8003b90:	4b02      	ldr	r3, [pc, #8]	; (8003b9c <generate_caves+0x320>)
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	f00c fd54 	bl	8010640 <free>
}
 8003b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b9c:	20000e7c 	.word	0x20000e7c

08003ba0 <gauss_kernel>:
//	filter_level(WORLD_WIDTH_BLOCKS, KERNEL_WIDTH, LEVEL_SMOOTHING_FACTOR, true);

}

// Returns gauss kernel of width width and given sigma
float* gauss_kernel(uint8_t width, uint8_t sigma) {
 8003ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba4:	ed2d 8b02 	vpush	{d8}
 8003ba8:	4605      	mov	r5, r0
 8003baa:	4688      	mov	r8, r1
	float* filter = (float*) malloc(width * sizeof(float));
 8003bac:	0080      	lsls	r0, r0, #2
 8003bae:	f00c fd3f 	bl	8010630 <malloc>
 8003bb2:	4681      	mov	r9, r0

    float sum = 0.0;

    // Compute the filter values
    for (int i = 0; i < width; i++) {
 8003bb4:	2400      	movs	r4, #0
    float sum = 0.0;
 8003bb6:	ed9f 8a26 	vldr	s16, [pc, #152]	; 8003c50 <gauss_kernel+0xb0>
    for (int i = 0; i < width; i++) {
 8003bba:	e02e      	b.n	8003c1a <gauss_kernel+0x7a>
        int x = i - (width - 1) / 2;
 8003bbc:	1e6b      	subs	r3, r5, #1
 8003bbe:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8003bc2:	eba4 0063 	sub.w	r0, r4, r3, asr #1
        filter[i] = exp(-x * x / (2 * sigma * sigma)) / (sqrt(2 * M_PI) * sigma);
 8003bc6:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 8003bca:	fb00 f303 	mul.w	r3, r0, r3
 8003bce:	fb08 f008 	mul.w	r0, r8, r8
 8003bd2:	0040      	lsls	r0, r0, #1
 8003bd4:	fb93 f0f0 	sdiv	r0, r3, r0
 8003bd8:	f7fc fcdc 	bl	8000594 <__aeabi_i2d>
 8003bdc:	ec41 0b10 	vmov	d0, r0, r1
 8003be0:	f00b fbea 	bl	800f3b8 <exp>
 8003be4:	ec57 6b10 	vmov	r6, r7, d0
 8003be8:	4640      	mov	r0, r8
 8003bea:	f7fc fcd3 	bl	8000594 <__aeabi_i2d>
 8003bee:	a316      	add	r3, pc, #88	; (adr r3, 8003c48 <gauss_kernel+0xa8>)
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	f7fc fd38 	bl	8000668 <__aeabi_dmul>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	eb09 0a84 	add.w	sl, r9, r4, lsl #2
 8003c00:	4630      	mov	r0, r6
 8003c02:	4639      	mov	r1, r7
 8003c04:	f7fc fe5a 	bl	80008bc <__aeabi_ddiv>
 8003c08:	f7fd f826 	bl	8000c58 <__aeabi_d2f>
 8003c0c:	ee07 0a90 	vmov	s15, r0
 8003c10:	f8ca 0000 	str.w	r0, [sl]
        sum += filter[i];
 8003c14:	ee38 8a27 	vadd.f32	s16, s16, s15
    for (int i = 0; i < width; i++) {
 8003c18:	3401      	adds	r4, #1
 8003c1a:	42a5      	cmp	r5, r4
 8003c1c:	dcce      	bgt.n	8003bbc <gauss_kernel+0x1c>
    }

    // Normalize the filter values
    for (int i = 0; i < width; i++) {
 8003c1e:	2300      	movs	r3, #0
 8003c20:	e008      	b.n	8003c34 <gauss_kernel+0x94>
        filter[i] /= sum;
 8003c22:	eb09 0283 	add.w	r2, r9, r3, lsl #2
 8003c26:	ed92 7a00 	vldr	s14, [r2]
 8003c2a:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8003c2e:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < width; i++) {
 8003c32:	3301      	adds	r3, #1
 8003c34:	429d      	cmp	r5, r3
 8003c36:	dcf4      	bgt.n	8003c22 <gauss_kernel+0x82>
    }

    return filter;
}
 8003c38:	4648      	mov	r0, r9
 8003c3a:	ecbd 8b02 	vpop	{d8}
 8003c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c42:	bf00      	nop
 8003c44:	f3af 8000 	nop.w
 8003c48:	1ff62705 	.word	0x1ff62705
 8003c4c:	40040d93 	.word	0x40040d93
 8003c50:	00000000 	.word	0x00000000

08003c54 <erosion>:
	}


}

void erosion(uint8_t SE[SE_SIZE_EROSION][SE_SIZE_EROSION], uint16_t map_width, uint16_t map_height, uint8_t foreground) {
 8003c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	4686      	mov	lr, r0
 8003c5e:	460d      	mov	r5, r1
 8003c60:	4691      	mov	r9, r2
 8003c62:	469c      	mov	ip, r3
	uint8_t se_size = SE_SIZE_EROSION;

	uint8_t temp[map_height][map_width];
 8003c64:	fb01 f302 	mul.w	r3, r1, r2
 8003c68:	3307      	adds	r3, #7
 8003c6a:	f023 0307 	bic.w	r3, r3, #7
 8003c6e:	ebad 0d03 	sub.w	sp, sp, r3
 8003c72:	f8c7 d000 	str.w	sp, [r7]

	for (uint16_t i = 0; i < map_width; i++) {
 8003c76:	2600      	movs	r6, #0
 8003c78:	e036      	b.n	8003ce8 <erosion+0x94>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
			uint8_t min_value = foreground;
			for (uint16_t k = 0; k < se_size; k++) {
				for (uint16_t l = 0; l < se_size; l++) {
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d81c      	bhi.n	8003cbc <erosion+0x68>
					if (SE[k][l] == foreground) {
 8003c82:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003c86:	4471      	add	r1, lr
 8003c88:	5cc9      	ldrb	r1, [r1, r3]
 8003c8a:	4561      	cmp	r1, ip
 8003c8c:	d1f5      	bne.n	8003c7a <erosion+0x26>
						uint16_t x = i - k + se_size / 2;
 8003c8e:	1ab1      	subs	r1, r6, r2
 8003c90:	b289      	uxth	r1, r1
 8003c92:	3102      	adds	r1, #2
 8003c94:	b289      	uxth	r1, r1
						uint16_t y = j - l + se_size / 2;
 8003c96:	1ae0      	subs	r0, r4, r3
 8003c98:	b280      	uxth	r0, r0
 8003c9a:	3002      	adds	r0, #2
 8003c9c:	b280      	uxth	r0, r0
						if (x >= 0 && x < map_width && y >= 0 && y < map_height) {
 8003c9e:	428d      	cmp	r5, r1
 8003ca0:	d9eb      	bls.n	8003c7a <erosion+0x26>
 8003ca2:	4581      	cmp	r9, r0
 8003ca4:	d9e9      	bls.n	8003c7a <erosion+0x26>
							min_value = min_value < WORLD[y][x] ? min_value : WORLD[y][x];
 8003ca6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8003d38 <erosion+0xe4>
 8003caa:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
 8003cae:	fb0b 8000 	mla	r0, fp, r0, r8
 8003cb2:	5c41      	ldrb	r1, [r0, r1]
 8003cb4:	458a      	cmp	sl, r1
 8003cb6:	bf28      	it	cs
 8003cb8:	468a      	movcs	sl, r1
 8003cba:	e7de      	b.n	8003c7a <erosion+0x26>
			for (uint16_t k = 0; k < se_size; k++) {
 8003cbc:	3201      	adds	r2, #1
 8003cbe:	b292      	uxth	r2, r2
 8003cc0:	2a04      	cmp	r2, #4
 8003cc2:	d801      	bhi.n	8003cc8 <erosion+0x74>
				for (uint16_t l = 0; l < se_size; l++) {
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e7da      	b.n	8003c7e <erosion+0x2a>
						}
					}
				}
			}

			temp[j][i] = min_value;
 8003cc8:	fb05 f304 	mul.w	r3, r5, r4
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	440a      	add	r2, r1
 8003cd2:	f802 a003 	strb.w	sl, [r2, r3]
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 8003cd6:	3401      	adds	r4, #1
 8003cd8:	b2a4      	uxth	r4, r4
 8003cda:	454c      	cmp	r4, r9
 8003cdc:	d202      	bcs.n	8003ce4 <erosion+0x90>
			uint8_t min_value = foreground;
 8003cde:	46e2      	mov	sl, ip
			for (uint16_t k = 0; k < se_size; k++) {
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	e7ed      	b.n	8003cc0 <erosion+0x6c>
	for (uint16_t i = 0; i < map_width; i++) {
 8003ce4:	3601      	adds	r6, #1
 8003ce6:	b2b6      	uxth	r6, r6
 8003ce8:	42ae      	cmp	r6, r5
 8003cea:	d204      	bcs.n	8003cf6 <erosion+0xa2>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 8003cec:	607e      	str	r6, [r7, #4]
 8003cee:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <erosion+0xe0>)
 8003cf0:	f833 4016 	ldrh.w	r4, [r3, r6, lsl #1]
 8003cf4:	e7f1      	b.n	8003cda <erosion+0x86>
		}
	}

	for (uint16_t i = 0; i < map_width; i++) {
 8003cf6:	2600      	movs	r6, #0
 8003cf8:	f8d7 c000 	ldr.w	ip, [r7]
 8003cfc:	e00f      	b.n	8003d1e <erosion+0xca>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
			WORLD[j][i] = temp[j][i];
 8003cfe:	fb05 f203 	mul.w	r2, r5, r3
 8003d02:	eb0c 0001 	add.w	r0, ip, r1
 8003d06:	5c80      	ldrb	r0, [r0, r2]
 8003d08:	4a0b      	ldr	r2, [pc, #44]	; (8003d38 <erosion+0xe4>)
 8003d0a:	24c8      	movs	r4, #200	; 0xc8
 8003d0c:	fb04 2203 	mla	r2, r4, r3, r2
 8003d10:	5450      	strb	r0, [r2, r1]
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 8003d12:	3301      	adds	r3, #1
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	454b      	cmp	r3, r9
 8003d18:	d3f1      	bcc.n	8003cfe <erosion+0xaa>
	for (uint16_t i = 0; i < map_width; i++) {
 8003d1a:	3601      	adds	r6, #1
 8003d1c:	b2b6      	uxth	r6, r6
 8003d1e:	42ae      	cmp	r6, r5
 8003d20:	d204      	bcs.n	8003d2c <erosion+0xd8>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 8003d22:	4631      	mov	r1, r6
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <erosion+0xe0>)
 8003d26:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8003d2a:	e7f4      	b.n	8003d16 <erosion+0xc2>
		}
	}
}
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d34:	200043e8 	.word	0x200043e8
 8003d38:	20005068 	.word	0x20005068

08003d3c <dilation>:

void dilation(uint8_t SE[SE_SIZE_DILATION][SE_SIZE_DILATION], uint16_t map_width, uint16_t map_height, uint8_t dirt, uint8_t foreground) {
 8003d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d40:	b085      	sub	sp, #20
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	4604      	mov	r4, r0
 8003d46:	460e      	mov	r6, r1
 8003d48:	4692      	mov	sl, r2
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	f897 5038 	ldrb.w	r5, [r7, #56]	; 0x38

	uint8_t se_size = SE_SIZE_DILATION;

	uint8_t temp[map_height][map_width];
 8003d50:	fb01 f302 	mul.w	r3, r1, r2
 8003d54:	3307      	adds	r3, #7
 8003d56:	f023 0307 	bic.w	r3, r3, #7
 8003d5a:	ebad 0d03 	sub.w	sp, sp, r3
 8003d5e:	46eb      	mov	fp, sp

	uint8_t depth = rand() % 5 + 5;
 8003d60:	f00d fc06 	bl	8011570 <rand>
 8003d64:	4942      	ldr	r1, [pc, #264]	; (8003e70 <dilation+0x134>)
 8003d66:	fb81 3100 	smull	r3, r1, r1, r0
 8003d6a:	17c3      	asrs	r3, r0, #31
 8003d6c:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 8003d70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d74:	1ac3      	subs	r3, r0, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	3305      	adds	r3, #5
 8003d7a:	b2db      	uxtb	r3, r3

	for (uint16_t i = 0; i < map_width; i++) {
 8003d7c:	f04f 0e00 	mov.w	lr, #0
 8003d80:	f8c7 b004 	str.w	fp, [r7, #4]
 8003d84:	469b      	mov	fp, r3
 8003d86:	e048      	b.n	8003e1a <dilation+0xde>
		for (uint16_t j = LVL1_HMAP[i] + depth; j < map_height; j++) {
			uint8_t max_value = dirt;
			for (uint16_t k = 0; k < se_size; k++) {
				for (uint16_t l = 0; l < se_size; l++) {
 8003d88:	3301      	adds	r3, #1
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d825      	bhi.n	8003ddc <dilation+0xa0>
					if (SE[k][l] == foreground) {
 8003d90:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8003d94:	4421      	add	r1, r4
 8003d96:	5cc9      	ldrb	r1, [r1, r3]
 8003d98:	42a9      	cmp	r1, r5
 8003d9a:	d1f5      	bne.n	8003d88 <dilation+0x4c>
						uint16_t x = i - k + se_size / 2;
 8003d9c:	ebae 0102 	sub.w	r1, lr, r2
 8003da0:	b289      	uxth	r1, r1
 8003da2:	3101      	adds	r1, #1
 8003da4:	fa1f f881 	uxth.w	r8, r1
						uint16_t y = j - l + se_size / 2;
 8003da8:	ebac 0103 	sub.w	r1, ip, r3
 8003dac:	b289      	uxth	r1, r1
 8003dae:	3101      	adds	r1, #1
 8003db0:	b289      	uxth	r1, r1
						if (x >= 0 && x < map_width && y > GROUND_SKY_RATIO + depth && y < map_height) {
 8003db2:	4546      	cmp	r6, r8
 8003db4:	d9e8      	bls.n	8003d88 <dilation+0x4c>
 8003db6:	f10b 0050 	add.w	r0, fp, #80	; 0x50
 8003dba:	4281      	cmp	r1, r0
 8003dbc:	dde4      	ble.n	8003d88 <dilation+0x4c>
 8003dbe:	458a      	cmp	sl, r1
 8003dc0:	d9e2      	bls.n	8003d88 <dilation+0x4c>
							max_value = max_value > WORLD[y][x] ? max_value : WORLD[y][x];
 8003dc2:	482c      	ldr	r0, [pc, #176]	; (8003e74 <dilation+0x138>)
 8003dc4:	f04f 09c8 	mov.w	r9, #200	; 0xc8
 8003dc8:	fb09 0101 	mla	r1, r9, r1, r0
 8003dcc:	f811 1008 	ldrb.w	r1, [r1, r8]
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	4288      	cmp	r0, r1
 8003dd4:	bf38      	it	cc
 8003dd6:	4608      	movcc	r0, r1
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	e7d5      	b.n	8003d88 <dilation+0x4c>
			for (uint16_t k = 0; k < se_size; k++) {
 8003ddc:	f8d7 900c 	ldr.w	r9, [r7, #12]
 8003de0:	3201      	adds	r2, #1
 8003de2:	b292      	uxth	r2, r2
 8003de4:	2a02      	cmp	r2, #2
 8003de6:	d803      	bhi.n	8003df0 <dilation+0xb4>
				for (uint16_t l = 0; l < se_size; l++) {
 8003de8:	2300      	movs	r3, #0
 8003dea:	f8c7 900c 	str.w	r9, [r7, #12]
 8003dee:	e7cd      	b.n	8003d8c <dilation+0x50>
						}
					}
				}
			}

			temp[j][i] = max_value;
 8003df0:	fb06 f30c 	mul.w	r3, r6, ip
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	440a      	add	r2, r1
 8003dfa:	f802 9003 	strb.w	r9, [r2, r3]
		for (uint16_t j = LVL1_HMAP[i] + depth; j < map_height; j++) {
 8003dfe:	f10c 0c01 	add.w	ip, ip, #1
 8003e02:	fa1f fc8c 	uxth.w	ip, ip
 8003e06:	45d4      	cmp	ip, sl
 8003e08:	d203      	bcs.n	8003e12 <dilation+0xd6>
			uint8_t max_value = dirt;
 8003e0a:	f8d7 9000 	ldr.w	r9, [r7]
			for (uint16_t k = 0; k < se_size; k++) {
 8003e0e:	2200      	movs	r2, #0
 8003e10:	e7e8      	b.n	8003de4 <dilation+0xa8>
	for (uint16_t i = 0; i < map_width; i++) {
 8003e12:	f10e 0e01 	add.w	lr, lr, #1
 8003e16:	fa1f fe8e 	uxth.w	lr, lr
 8003e1a:	45b6      	cmp	lr, r6
 8003e1c:	d208      	bcs.n	8003e30 <dilation+0xf4>
		for (uint16_t j = LVL1_HMAP[i] + depth; j < map_height; j++) {
 8003e1e:	f8c7 e008 	str.w	lr, [r7, #8]
 8003e22:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <dilation+0x13c>)
 8003e24:	f833 c01e 	ldrh.w	ip, [r3, lr, lsl #1]
 8003e28:	44dc      	add	ip, fp
 8003e2a:	fa1f fc8c 	uxth.w	ip, ip
 8003e2e:	e7ea      	b.n	8003e06 <dilation+0xca>
		}
	}

	for (uint16_t i = 0; i < map_width; i++) {
 8003e30:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8003e34:	2500      	movs	r5, #0
 8003e36:	e00f      	b.n	8003e58 <dilation+0x11c>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
			WORLD[j][i] = temp[j][i];
 8003e38:	fb06 f203 	mul.w	r2, r6, r3
 8003e3c:	eb0b 0001 	add.w	r0, fp, r1
 8003e40:	5c80      	ldrb	r0, [r0, r2]
 8003e42:	4a0c      	ldr	r2, [pc, #48]	; (8003e74 <dilation+0x138>)
 8003e44:	24c8      	movs	r4, #200	; 0xc8
 8003e46:	fb04 2203 	mla	r2, r4, r3, r2
 8003e4a:	5450      	strb	r0, [r2, r1]
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	4553      	cmp	r3, sl
 8003e52:	d3f1      	bcc.n	8003e38 <dilation+0xfc>
	for (uint16_t i = 0; i < map_width; i++) {
 8003e54:	3501      	adds	r5, #1
 8003e56:	b2ad      	uxth	r5, r5
 8003e58:	42b5      	cmp	r5, r6
 8003e5a:	d204      	bcs.n	8003e66 <dilation+0x12a>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <dilation+0x13c>)
 8003e60:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8003e64:	e7f4      	b.n	8003e50 <dilation+0x114>
		}
	}
}
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e6e:	bf00      	nop
 8003e70:	66666667 	.word	0x66666667
 8003e74:	20005068 	.word	0x20005068
 8003e78:	200043e8 	.word	0x200043e8

08003e7c <shape_caves_with_morphological_operations>:
void shape_caves_with_morphological_operations(uint8_t dirt, uint8_t foreground) {
 8003e7c:	b530      	push	{r4, r5, lr}
 8003e7e:	b08d      	sub	sp, #52	; 0x34
 8003e80:	4605      	mov	r5, r0
 8003e82:	460c      	mov	r4, r1
	for (uint8_t i = 0; i < SE_SIZE_EROSION; i++) {
 8003e84:	f04f 0e00 	mov.w	lr, #0
 8003e88:	e015      	b.n	8003eb6 <shape_caves_with_morphological_operations+0x3a>
			if ((i < SE_SIZE_EROSION/3 || i > 2*SE_SIZE_EROSION/3) && (j < SE_SIZE_EROSION/3 || j > 2*SE_SIZE_EROSION/3)) {
 8003e8a:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d815      	bhi.n	8003ec0 <shape_caves_with_morphological_operations+0x44>
				EROSION_SE[i][j] = foreground;
 8003e94:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
 8003e98:	f10c 0330 	add.w	r3, ip, #48	; 0x30
 8003e9c:	eb0d 0c03 	add.w	ip, sp, r3
 8003ea0:	4494      	add	ip, r2
 8003ea2:	f80c 4c1c 	strb.w	r4, [ip, #-28]
		for (uint8_t j = 0; j < SE_SIZE_EROSION; j++) {
 8003ea6:	3201      	adds	r2, #1
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	2a04      	cmp	r2, #4
 8003eac:	d9ed      	bls.n	8003e8a <shape_caves_with_morphological_operations+0xe>
	for (uint8_t i = 0; i < SE_SIZE_EROSION; i++) {
 8003eae:	f10e 0e01 	add.w	lr, lr, #1
 8003eb2:	fa5f fe8e 	uxtb.w	lr, lr
 8003eb6:	f1be 0f04 	cmp.w	lr, #4
 8003eba:	d80d      	bhi.n	8003ed8 <shape_caves_with_morphological_operations+0x5c>
		for (uint8_t j = 0; j < SE_SIZE_EROSION; j++) {
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	e7f4      	b.n	8003eaa <shape_caves_with_morphological_operations+0x2e>
			if ((i < SE_SIZE_EROSION/3 || i > 2*SE_SIZE_EROSION/3) && (j < SE_SIZE_EROSION/3 || j > 2*SE_SIZE_EROSION/3)) {
 8003ec0:	1e53      	subs	r3, r2, #1
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d9e5      	bls.n	8003e94 <shape_caves_with_morphological_operations+0x18>
				EROSION_SE[i][j] = dirt;
 8003ec8:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 8003ecc:	3330      	adds	r3, #48	; 0x30
 8003ece:	446b      	add	r3, sp
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f803 5c1c 	strb.w	r5, [r3, #-28]
 8003ed6:	e7e6      	b.n	8003ea6 <shape_caves_with_morphological_operations+0x2a>
	for (uint8_t i = 0; i < SE_SIZE_DILATION; i++) {
 8003ed8:	2100      	movs	r1, #0
 8003eda:	e010      	b.n	8003efe <shape_caves_with_morphological_operations+0x82>
			if ((i < SE_SIZE_DILATION/3 || i > 2*SE_SIZE_DILATION/3) && (j < SE_SIZE_DILATION/3 || j > 2*SE_SIZE_DILATION/3)) {
 8003edc:	1e4a      	subs	r2, r1, #1
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	2a01      	cmp	r2, #1
 8003ee2:	d810      	bhi.n	8003f06 <shape_caves_with_morphological_operations+0x8a>
				DILATION_SE[i][j] = foreground;
 8003ee4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003ee8:	3230      	adds	r2, #48	; 0x30
 8003eea:	446a      	add	r2, sp
 8003eec:	441a      	add	r2, r3
 8003eee:	f802 4c28 	strb.w	r4, [r2, #-40]
		for (uint8_t j = 0; j < SE_SIZE_DILATION; j++) {
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d9f0      	bls.n	8003edc <shape_caves_with_morphological_operations+0x60>
	for (uint8_t i = 0; i < SE_SIZE_DILATION; i++) {
 8003efa:	3101      	adds	r1, #1
 8003efc:	b2c9      	uxtb	r1, r1
 8003efe:	2902      	cmp	r1, #2
 8003f00:	d80d      	bhi.n	8003f1e <shape_caves_with_morphological_operations+0xa2>
		for (uint8_t j = 0; j < SE_SIZE_DILATION; j++) {
 8003f02:	2300      	movs	r3, #0
 8003f04:	e7f7      	b.n	8003ef6 <shape_caves_with_morphological_operations+0x7a>
			if ((i < SE_SIZE_DILATION/3 || i > 2*SE_SIZE_DILATION/3) && (j < SE_SIZE_DILATION/3 || j > 2*SE_SIZE_DILATION/3)) {
 8003f06:	1e5a      	subs	r2, r3, #1
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	2a01      	cmp	r2, #1
 8003f0c:	d9ea      	bls.n	8003ee4 <shape_caves_with_morphological_operations+0x68>
				DILATION_SE[i][j] = dirt;
 8003f0e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003f12:	3230      	adds	r2, #48	; 0x30
 8003f14:	446a      	add	r2, sp
 8003f16:	441a      	add	r2, r3
 8003f18:	f802 5c28 	strb.w	r5, [r2, #-40]
 8003f1c:	e7e9      	b.n	8003ef2 <shape_caves_with_morphological_operations+0x76>
	if (foreground == cave) {
 8003f1e:	2ccc      	cmp	r4, #204	; 0xcc
 8003f20:	d01d      	beq.n	8003f5e <shape_caves_with_morphological_operations+0xe2>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003f22:	9400      	str	r4, [sp, #0]
 8003f24:	462b      	mov	r3, r5
 8003f26:	22f0      	movs	r2, #240	; 0xf0
 8003f28:	21c8      	movs	r1, #200	; 0xc8
 8003f2a:	a802      	add	r0, sp, #8
 8003f2c:	f7ff ff06 	bl	8003d3c <dilation>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003f30:	9400      	str	r4, [sp, #0]
 8003f32:	462b      	mov	r3, r5
 8003f34:	22f0      	movs	r2, #240	; 0xf0
 8003f36:	21c8      	movs	r1, #200	; 0xc8
 8003f38:	a802      	add	r0, sp, #8
 8003f3a:	f7ff feff 	bl	8003d3c <dilation>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003f3e:	9400      	str	r4, [sp, #0]
 8003f40:	462b      	mov	r3, r5
 8003f42:	22f0      	movs	r2, #240	; 0xf0
 8003f44:	21c8      	movs	r1, #200	; 0xc8
 8003f46:	a802      	add	r0, sp, #8
 8003f48:	f7ff fef8 	bl	8003d3c <dilation>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003f4c:	9400      	str	r4, [sp, #0]
 8003f4e:	462b      	mov	r3, r5
 8003f50:	22f0      	movs	r2, #240	; 0xf0
 8003f52:	21c8      	movs	r1, #200	; 0xc8
 8003f54:	a802      	add	r0, sp, #8
 8003f56:	f7ff fef1 	bl	8003d3c <dilation>
}
 8003f5a:	b00d      	add	sp, #52	; 0x34
 8003f5c:	bd30      	pop	{r4, r5, pc}
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003f5e:	9400      	str	r4, [sp, #0]
 8003f60:	462b      	mov	r3, r5
 8003f62:	22f0      	movs	r2, #240	; 0xf0
 8003f64:	21c8      	movs	r1, #200	; 0xc8
 8003f66:	a802      	add	r0, sp, #8
 8003f68:	f7ff fee8 	bl	8003d3c <dilation>
		erosion(EROSION_SE, width, height, foreground);
 8003f6c:	4623      	mov	r3, r4
 8003f6e:	22f0      	movs	r2, #240	; 0xf0
 8003f70:	21c8      	movs	r1, #200	; 0xc8
 8003f72:	a805      	add	r0, sp, #20
 8003f74:	f7ff fe6e 	bl	8003c54 <erosion>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003f78:	9400      	str	r4, [sp, #0]
 8003f7a:	462b      	mov	r3, r5
 8003f7c:	22f0      	movs	r2, #240	; 0xf0
 8003f7e:	21c8      	movs	r1, #200	; 0xc8
 8003f80:	a802      	add	r0, sp, #8
 8003f82:	f7ff fedb 	bl	8003d3c <dilation>
		erosion(EROSION_SE, width, height, foreground);
 8003f86:	4623      	mov	r3, r4
 8003f88:	22f0      	movs	r2, #240	; 0xf0
 8003f8a:	21c8      	movs	r1, #200	; 0xc8
 8003f8c:	a805      	add	r0, sp, #20
 8003f8e:	f7ff fe61 	bl	8003c54 <erosion>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003f92:	9400      	str	r4, [sp, #0]
 8003f94:	462b      	mov	r3, r5
 8003f96:	22f0      	movs	r2, #240	; 0xf0
 8003f98:	21c8      	movs	r1, #200	; 0xc8
 8003f9a:	a802      	add	r0, sp, #8
 8003f9c:	f7ff fece 	bl	8003d3c <dilation>
		erosion(EROSION_SE, width, height, foreground);
 8003fa0:	4623      	mov	r3, r4
 8003fa2:	22f0      	movs	r2, #240	; 0xf0
 8003fa4:	21c8      	movs	r1, #200	; 0xc8
 8003fa6:	a805      	add	r0, sp, #20
 8003fa8:	f7ff fe54 	bl	8003c54 <erosion>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003fac:	9400      	str	r4, [sp, #0]
 8003fae:	462b      	mov	r3, r5
 8003fb0:	22f0      	movs	r2, #240	; 0xf0
 8003fb2:	21c8      	movs	r1, #200	; 0xc8
 8003fb4:	a802      	add	r0, sp, #8
 8003fb6:	f7ff fec1 	bl	8003d3c <dilation>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003fba:	9400      	str	r4, [sp, #0]
 8003fbc:	462b      	mov	r3, r5
 8003fbe:	22f0      	movs	r2, #240	; 0xf0
 8003fc0:	21c8      	movs	r1, #200	; 0xc8
 8003fc2:	a802      	add	r0, sp, #8
 8003fc4:	f7ff feba 	bl	8003d3c <dilation>
 8003fc8:	e7c7      	b.n	8003f5a <shape_caves_with_morphological_operations+0xde>
	...

08003fcc <place_lava>:
void place_lava() {
 8003fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	srand(time(NULL));
 8003fce:	2000      	movs	r0, #0
 8003fd0:	f00e f9ee 	bl	80123b0 <time>
 8003fd4:	f00d fa9e 	bl	8011514 <srand>
	uint8_t lava_blob_radius = rand() % 3;
 8003fd8:	f00d faca 	bl	8011570 <rand>
 8003fdc:	4f1f      	ldr	r7, [pc, #124]	; (800405c <place_lava+0x90>)
 8003fde:	fb87 2700 	smull	r2, r7, r7, r0
 8003fe2:	eba7 77e0 	sub.w	r7, r7, r0, asr #31
 8003fe6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8003fea:	1bc7      	subs	r7, r0, r7
 8003fec:	b2ff      	uxtb	r7, r7
	for (cell_c i = 0; i < WORLD_WIDTH_CELLS; i++) {
 8003fee:	2500      	movs	r5, #0
 8003ff0:	e026      	b.n	8004040 <place_lava+0x74>
				draw_blob(i, j, lava_blob_radius, lava_block);
 8003ff2:	2388      	movs	r3, #136	; 0x88
 8003ff4:	463a      	mov	r2, r7
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	f7ff fbdd 	bl	80037b8 <draw_blob>
 8003ffe:	e014      	b.n	800402a <place_lava+0x5e>
		for (uint16_t j = starting_depth; j < WORLD_HEIGHT_CELLS; j++) {
 8004000:	3401      	adds	r4, #1
 8004002:	b2a4      	uxth	r4, r4
 8004004:	2cef      	cmp	r4, #239	; 0xef
 8004006:	d819      	bhi.n	800403c <place_lava+0x70>
			if ((float) rand() / (float) (RAND_MAX / 100) < chance_of_lava) { // && WORLD[j][i] & 0xF0 != _dirt_bg) {
 8004008:	f00d fab2 	bl	8011570 <rand>
 800400c:	ee07 0a90 	vmov	s15, r0
 8004010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004014:	eddf 6a12 	vldr	s13, [pc, #72]	; 8004060 <place_lava+0x94>
 8004018:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800401c:	eddf 7a11 	vldr	s15, [pc, #68]	; 8004064 <place_lava+0x98>
 8004020:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004028:	d4e3      	bmi.n	8003ff2 <place_lava+0x26>
			if (j >= WORLD_HEIGHT_CELLS - 2) {
 800402a:	2ced      	cmp	r4, #237	; 0xed
 800402c:	d9e8      	bls.n	8004000 <place_lava+0x34>
				WORLD[j][i] = lava_block;
 800402e:	4b0e      	ldr	r3, [pc, #56]	; (8004068 <place_lava+0x9c>)
 8004030:	22c8      	movs	r2, #200	; 0xc8
 8004032:	fb02 3304 	mla	r3, r2, r4, r3
 8004036:	2288      	movs	r2, #136	; 0x88
 8004038:	559a      	strb	r2, [r3, r6]
 800403a:	e7e1      	b.n	8004000 <place_lava+0x34>
	for (cell_c i = 0; i < WORLD_WIDTH_CELLS; i++) {
 800403c:	3501      	adds	r5, #1
 800403e:	b2ad      	uxth	r5, r5
 8004040:	2dc7      	cmp	r5, #199	; 0xc7
 8004042:	d806      	bhi.n	8004052 <place_lava+0x86>
		cell_c starting_depth = LVL1_HMAP[2*i] + 10;
 8004044:	462e      	mov	r6, r5
 8004046:	4b09      	ldr	r3, [pc, #36]	; (800406c <place_lava+0xa0>)
 8004048:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800404c:	340a      	adds	r4, #10
 800404e:	b2a4      	uxth	r4, r4
		for (uint16_t j = starting_depth; j < WORLD_HEIGHT_CELLS; j++) {
 8004050:	e7d8      	b.n	8004004 <place_lava+0x38>
	shape_caves_with_morphological_operations(dirt_block, lava_block);
 8004052:	2188      	movs	r1, #136	; 0x88
 8004054:	2011      	movs	r0, #17
 8004056:	f7ff ff11 	bl	8003e7c <shape_caves_with_morphological_operations>
}
 800405a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800405c:	55555556 	.word	0x55555556
 8004060:	4ba3d70a 	.word	0x4ba3d70a
 8004064:	3dcccccd 	.word	0x3dcccccd
 8004068:	20005068 	.word	0x20005068
 800406c:	200043e8 	.word	0x200043e8

08004070 <filter_level>:

void filter_level(uint16_t array_size, uint8_t kernel_width, uint8_t sigma, bool only_sharp_edges) {
 8004070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004074:	ed2d 8b04 	vpush	{d8-d9}
 8004078:	b083      	sub	sp, #12
 800407a:	4607      	mov	r7, r0
 800407c:	460c      	mov	r4, r1
 800407e:	4615      	mov	r5, r2
 8004080:	4699      	mov	r9, r3
	int8_t* result = malloc(array_size);
 8004082:	f00c fad5 	bl	8010630 <malloc>
 8004086:	4683      	mov	fp, r0

	float* filter = gauss_kernel(kernel_width, sigma);
 8004088:	4629      	mov	r1, r5
 800408a:	4620      	mov	r0, r4
 800408c:	f7ff fd88 	bl	8003ba0 <gauss_kernel>
 8004090:	4682      	mov	sl, r0


	for (uint16_t i = 0; i < array_size; i++) {
 8004092:	2500      	movs	r5, #0
 8004094:	e03f      	b.n	8004116 <filter_level+0xa6>
		float sum = 0.0;

		float std = 0.0;
		float mean = 0.0;

		for (int j = 0; j < kernel_width; j++) {
 8004096:	3101      	adds	r1, #1
 8004098:	428c      	cmp	r4, r1
 800409a:	dd1a      	ble.n	80040d2 <filter_level+0x62>
			int k = i + j - (kernel_width - 1) / 2;
 800409c:	186b      	adds	r3, r5, r1
 800409e:	1e62      	subs	r2, r4, #1
 80040a0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
			if (k >= 0 && k < array_size) {
 80040a4:	ebb3 0362 	subs.w	r3, r3, r2, asr #1
 80040a8:	d4f5      	bmi.n	8004096 <filter_level+0x26>
 80040aa:	429f      	cmp	r7, r3
 80040ac:	ddf3      	ble.n	8004096 <filter_level+0x26>
				sum += LVL1_HMAP[k] * filter[j];
 80040ae:	4a54      	ldr	r2, [pc, #336]	; (8004200 <filter_level+0x190>)
 80040b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040b4:	ee07 3a90 	vmov	s15, r3
 80040b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040bc:	eb0a 0381 	add.w	r3, sl, r1, lsl #2
 80040c0:	ed93 7a00 	vldr	s14, [r3]
 80040c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040c8:	ee38 8a07 	vadd.f32	s16, s16, s14
				mean += LVL1_HMAP[k];
 80040cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80040d0:	e7e1      	b.n	8004096 <filter_level+0x26>
			}
		}

		// Calculate standard deviation
		if (only_sharp_edges) {
 80040d2:	f1b9 0f00 	cmp.w	r9, #0
 80040d6:	d126      	bne.n	8004126 <filter_level+0xb6>
		float std = 0.0;
 80040d8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8004204 <filter_level+0x194>
			}
			std /= (kernel_width - 1);
			std = sqrt(std);
		}

		if ((only_sharp_edges && std > TERRAIN_STD_THRESH) || !only_sharp_edges) {
 80040dc:	f1b9 0f00 	cmp.w	r9, #0
 80040e0:	d006      	beq.n	80040f0 <filter_level+0x80>
 80040e2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80040e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ee:	dc02      	bgt.n	80040f6 <filter_level+0x86>
 80040f0:	f1b9 0f00 	cmp.w	r9, #0
 80040f4:	d161      	bne.n	80041ba <filter_level+0x14a>
			result[i] = (int8_t) round(sum);
 80040f6:	ee18 0a10 	vmov	r0, s16
 80040fa:	f7fc fa5d 	bl	80005b8 <__aeabi_f2d>
 80040fe:	ec41 0b10 	vmov	d0, r0, r1
 8004102:	f00b f913 	bl	800f32c <round>
 8004106:	ec51 0b10 	vmov	r0, r1, d0
 800410a:	f7fc fd5d 	bl	8000bc8 <__aeabi_d2iz>
 800410e:	f80b 0005 	strb.w	r0, [fp, r5]
	for (uint16_t i = 0; i < array_size; i++) {
 8004112:	3501      	adds	r5, #1
 8004114:	b2ad      	uxth	r5, r5
 8004116:	42bd      	cmp	r5, r7
 8004118:	d255      	bcs.n	80041c6 <filter_level+0x156>
		for (int j = 0; j < kernel_width; j++) {
 800411a:	2100      	movs	r1, #0
		float mean = 0.0;
 800411c:	eddf 6a39 	vldr	s13, [pc, #228]	; 8004204 <filter_level+0x194>
		float sum = 0.0;
 8004120:	eeb0 8a66 	vmov.f32	s16, s13
 8004124:	e7b8      	b.n	8004098 <filter_level+0x28>
			mean = mean / (kernel_width-1);
 8004126:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
 800412a:	ee07 8a90 	vmov	s15, r8
 800412e:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8004132:	eec6 9a89 	vdiv.f32	s19, s13, s18
			for (int j = 0; j < kernel_width; j++) {
 8004136:	2600      	movs	r6, #0
		float std = 0.0;
 8004138:	eddf 8a32 	vldr	s17, [pc, #200]	; 8004204 <filter_level+0x194>
			for (int j = 0; j < kernel_width; j++) {
 800413c:	e000      	b.n	8004140 <filter_level+0xd0>
 800413e:	3601      	adds	r6, #1
 8004140:	42b4      	cmp	r4, r6
 8004142:	dd29      	ble.n	8004198 <filter_level+0x128>
				int k = i + j - (kernel_width - 1) / 2;
 8004144:	19ab      	adds	r3, r5, r6
 8004146:	eb08 72d8 	add.w	r2, r8, r8, lsr #31
				if (k >= 0 && k < array_size) {
 800414a:	ebb3 0362 	subs.w	r3, r3, r2, asr #1
 800414e:	d4f6      	bmi.n	800413e <filter_level+0xce>
 8004150:	429f      	cmp	r7, r3
 8004152:	ddf4      	ble.n	800413e <filter_level+0xce>
					std += pow(LVL1_HMAP[k] - mean, 2);
 8004154:	4a2a      	ldr	r2, [pc, #168]	; (8004200 <filter_level+0x190>)
 8004156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800415a:	ee07 3a90 	vmov	s15, r3
 800415e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004162:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8004166:	ee17 0a90 	vmov	r0, s15
 800416a:	f7fc fa25 	bl	80005b8 <__aeabi_f2d>
 800416e:	ed9f 1b22 	vldr	d1, [pc, #136]	; 80041f8 <filter_level+0x188>
 8004172:	ec41 0b10 	vmov	d0, r0, r1
 8004176:	f00b f967 	bl	800f448 <pow>
 800417a:	ed8d 0b00 	vstr	d0, [sp]
 800417e:	ee18 0a90 	vmov	r0, s17
 8004182:	f7fc fa19 	bl	80005b8 <__aeabi_f2d>
 8004186:	e9dd 2300 	ldrd	r2, r3, [sp]
 800418a:	f7fc f8b7 	bl	80002fc <__adddf3>
 800418e:	f7fc fd63 	bl	8000c58 <__aeabi_d2f>
 8004192:	ee08 0a90 	vmov	s17, r0
 8004196:	e7d2      	b.n	800413e <filter_level+0xce>
			std = sqrt(std);
 8004198:	eec8 7a89 	vdiv.f32	s15, s17, s18
 800419c:	ee17 0a90 	vmov	r0, s15
 80041a0:	f7fc fa0a 	bl	80005b8 <__aeabi_f2d>
 80041a4:	ec41 0b10 	vmov	d0, r0, r1
 80041a8:	f00b f9be 	bl	800f528 <sqrt>
 80041ac:	ec51 0b10 	vmov	r0, r1, d0
 80041b0:	f7fc fd52 	bl	8000c58 <__aeabi_d2f>
 80041b4:	ee07 0a90 	vmov	s15, r0
 80041b8:	e790      	b.n	80040dc <filter_level+0x6c>
		} else {
			result[i] = LVL1_HMAP[i];
 80041ba:	4b11      	ldr	r3, [pc, #68]	; (8004200 <filter_level+0x190>)
 80041bc:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80041c0:	f80b 3005 	strb.w	r3, [fp, r5]
 80041c4:	e7a5      	b.n	8004112 <filter_level+0xa2>
		}
	}

	// Write back
	for (uint16_t i = 0; i < array_size; i++) {
 80041c6:	2300      	movs	r3, #0
 80041c8:	e006      	b.n	80041d8 <filter_level+0x168>
		LVL1_HMAP[i] = result[i];
 80041ca:	f91b 1003 	ldrsb.w	r1, [fp, r3]
 80041ce:	4a0c      	ldr	r2, [pc, #48]	; (8004200 <filter_level+0x190>)
 80041d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint16_t i = 0; i < array_size; i++) {
 80041d4:	3301      	adds	r3, #1
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	42bb      	cmp	r3, r7
 80041da:	d3f6      	bcc.n	80041ca <filter_level+0x15a>
	}

	free(filter);
 80041dc:	4650      	mov	r0, sl
 80041de:	f00c fa2f 	bl	8010640 <free>
	free(result);
 80041e2:	4658      	mov	r0, fp
 80041e4:	f00c fa2c 	bl	8010640 <free>
}
 80041e8:	b003      	add	sp, #12
 80041ea:	ecbd 8b04 	vpop	{d8-d9}
 80041ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f2:	bf00      	nop
 80041f4:	f3af 8000 	nop.w
 80041f8:	00000000 	.word	0x00000000
 80041fc:	40000000 	.word	0x40000000
 8004200:	200043e8 	.word	0x200043e8
 8004204:	00000000 	.word	0x00000000

08004208 <generate_height_map>:
void generate_height_map(uint8_t random_lower, uint8_t random_upper, float roughness) {
 8004208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420c:	ed2d 8b02 	vpush	{d8}
 8004210:	b085      	sub	sp, #20
 8004212:	4681      	mov	r9, r0
 8004214:	9101      	str	r1, [sp, #4]
 8004216:	eeb0 8a40 	vmov.f32	s16, s0
	srand(time(NULL));
 800421a:	2000      	movs	r0, #0
 800421c:	f00e f8c8 	bl	80123b0 <time>
 8004220:	f00d f978 	bl	8011514 <srand>
	HEIGHT_MAP[0][0] = 0;			// Elevated on edge
 8004224:	4b92      	ldr	r3, [pc, #584]	; (8004470 <generate_height_map+0x268>)
 8004226:	2200      	movs	r2, #0
 8004228:	801a      	strh	r2, [r3, #0]
	HEIGHT_MAP[0][map_size-1] = 0;
 800422a:	f8a3 2320 	strh.w	r2, [r3, #800]	; 0x320
	HEIGHT_MAP[map_size-1][0] = 0;	// Elevated on edge
 800422e:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8004232:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
	HEIGHT_MAP[map_size-1][map_size-1] = 0;
 8004236:	f8a3 2460 	strh.w	r2, [r3, #1120]	; 0x460
	uint8_t step = map_size - 1;
 800423a:	f04f 0b90 	mov.w	fp, #144	; 0x90
	while (step > 1) {
 800423e:	e0da      	b.n	80043f6 <generate_height_map+0x1ee>
				uint8_t sum = 	HEIGHT_MAP[y-half_step][x-half_step] +
 8004240:	ebaa 0306 	sub.w	r3, sl, r6
 8004244:	1baa      	subs	r2, r5, r6
 8004246:	4f8a      	ldr	r7, [pc, #552]	; (8004470 <generate_height_map+0x268>)
 8004248:	f04f 081a 	mov.w	r8, #26
 800424c:	fb08 f303 	mul.w	r3, r8, r3
 8004250:	1899      	adds	r1, r3, r2
 8004252:	f937 4011 	ldrsh.w	r4, [r7, r1, lsl #1]
								HEIGHT_MAP[y-half_step][x+half_step] +
 8004256:	1971      	adds	r1, r6, r5
 8004258:	440b      	add	r3, r1
 800425a:	f937 3013 	ldrsh.w	r3, [r7, r3, lsl #1]
				uint8_t sum = 	HEIGHT_MAP[y-half_step][x-half_step] +
 800425e:	441c      	add	r4, r3
								HEIGHT_MAP[y+half_step][x-half_step] +
 8004260:	eb06 030a 	add.w	r3, r6, sl
 8004264:	fb08 f303 	mul.w	r3, r8, r3
 8004268:	441a      	add	r2, r3
 800426a:	f937 2012 	ldrsh.w	r2, [r7, r2, lsl #1]
								HEIGHT_MAP[y-half_step][x+half_step] +
 800426e:	fa52 f484 	uxtab	r4, r2, r4
								HEIGHT_MAP[y+half_step][x+half_step];
 8004272:	440b      	add	r3, r1
 8004274:	f937 3013 	ldrsh.w	r3, [r7, r3, lsl #1]
								HEIGHT_MAP[y+half_step][x-half_step] +
 8004278:	b2db      	uxtb	r3, r3
				uint8_t sum = 	HEIGHT_MAP[y-half_step][x-half_step] +
 800427a:	fa53 f484 	uxtab	r4, r3, r4
 800427e:	b2e4      	uxtb	r4, r4
				uint8_t random_n = random_lower + (uint8_t) ( (int) rand() % (random_upper - random_lower + 1));
 8004280:	f00d f976 	bl	8011570 <rand>
 8004284:	9b01      	ldr	r3, [sp, #4]
 8004286:	eba3 0309 	sub.w	r3, r3, r9
 800428a:	3301      	adds	r3, #1
 800428c:	fb90 f2f3 	sdiv	r2, r0, r3
 8004290:	fb03 0012 	mls	r0, r3, r2, r0
 8004294:	fa59 f080 	uxtab	r0, r9, r0
 8004298:	b2c0      	uxtb	r0, r0
				uint8_t average = (uint8_t) round(sum / 4);
 800429a:	08a4      	lsrs	r4, r4, #2
				HEIGHT_MAP[y][x] = average + random_n * roughness;
 800429c:	ee07 0a90 	vmov	s15, r0
 80042a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042a4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80042a8:	ee07 4a10 	vmov	s14, r4
 80042ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80042b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042b4:	fb08 580a 	mla	r8, r8, sl, r5
 80042b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042bc:	ee17 3a90 	vmov	r3, s15
 80042c0:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
			for (uint16_t x = step / 2; x < map_size- 1; x += step) {
 80042c4:	445d      	add	r5, fp
 80042c6:	b2ad      	uxth	r5, r5
 80042c8:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
 80042cc:	d3b8      	bcc.n	8004240 <generate_height_map+0x38>
		for (uint16_t y = step / 2; y < map_size - 1; y += step) {
 80042ce:	9b02      	ldr	r3, [sp, #8]
 80042d0:	445b      	add	r3, fp
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	9302      	str	r3, [sp, #8]
 80042d6:	9b02      	ldr	r3, [sp, #8]
 80042d8:	469a      	mov	sl, r3
 80042da:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80042de:	d201      	bcs.n	80042e4 <generate_height_map+0xdc>
			for (uint16_t x = step / 2; x < map_size- 1; x += step) {
 80042e0:	9d03      	ldr	r5, [sp, #12]
 80042e2:	e7f1      	b.n	80042c8 <generate_height_map+0xc0>
		for (uint16_t y = 0; y < map_size; y += step/2) {
 80042e4:	f04f 0a00 	mov.w	sl, #0
 80042e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80042ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80042f0:	e067      	b.n	80043c2 <generate_height_map+0x1ba>
				uint8_t count = 0;
 80042f2:	2300      	movs	r3, #0
				uint8_t sum = 0;
 80042f4:	461a      	mov	r2, r3
 80042f6:	e034      	b.n	8004362 <generate_height_map+0x15a>
				uint8_t average = sum / count;
 80042f8:	fbb2 f5f3 	udiv	r5, r2, r3
				uint8_t random_n = random_lower + (uint8_t) ((int) rand() % (random_upper - random_lower + 1)) * roughness;
 80042fc:	f00d f938 	bl	8011570 <rand>
 8004300:	9b01      	ldr	r3, [sp, #4]
 8004302:	9902      	ldr	r1, [sp, #8]
 8004304:	1a5b      	subs	r3, r3, r1
 8004306:	3301      	adds	r3, #1
 8004308:	fb90 f2f3 	sdiv	r2, r0, r3
 800430c:	fb03 0012 	mls	r0, r3, r2, r0
 8004310:	b2c0      	uxtb	r0, r0
 8004312:	ee07 0a90 	vmov	s15, r0
 8004316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800431a:	ee67 7a88 	vmul.f32	s15, s15, s16
 800431e:	ee07 1a10 	vmov	s14, r1
 8004322:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800432a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800432e:	ee17 3a90 	vmov	r3, s15
				HEIGHT_MAP[y][x] = average + random_n;
 8004332:	fa55 f583 	uxtab	r5, r5, r3
 8004336:	231a      	movs	r3, #26
 8004338:	fb03 7708 	mla	r7, r3, r8, r7
 800433c:	4b4c      	ldr	r3, [pc, #304]	; (8004470 <generate_height_map+0x268>)
 800433e:	f823 5017 	strh.w	r5, [r3, r7, lsl #1]
			for (uint16_t x = x0; x < map_size; x += step) {
 8004342:	445c      	add	r4, fp
 8004344:	b2a4      	uxth	r4, r4
 8004346:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 800434a:	d837      	bhi.n	80043bc <generate_height_map+0x1b4>
				if (x >= half_step ) {
 800434c:	454c      	cmp	r4, r9
 800434e:	d3d0      	bcc.n	80042f2 <generate_height_map+0xea>
					sum += HEIGHT_MAP[y][x-half_step];
 8004350:	1ba3      	subs	r3, r4, r6
 8004352:	221a      	movs	r2, #26
 8004354:	fb02 3308 	mla	r3, r2, r8, r3
 8004358:	4a45      	ldr	r2, [pc, #276]	; (8004470 <generate_height_map+0x268>)
 800435a:	f932 5013 	ldrsh.w	r5, [r2, r3, lsl #1]
 800435e:	b2ea      	uxtb	r2, r5
					count++;
 8004360:	2301      	movs	r3, #1
				if (x < map_size - half_step ) {
 8004362:	4627      	mov	r7, r4
 8004364:	f5c6 71c8 	rsb	r1, r6, #400	; 0x190
 8004368:	3101      	adds	r1, #1
 800436a:	428c      	cmp	r4, r1
 800436c:	da0a      	bge.n	8004384 <generate_height_map+0x17c>
					sum += HEIGHT_MAP[y][x+half_step];
 800436e:	1930      	adds	r0, r6, r4
 8004370:	251a      	movs	r5, #26
 8004372:	fb05 0008 	mla	r0, r5, r8, r0
 8004376:	4d3e      	ldr	r5, [pc, #248]	; (8004470 <generate_height_map+0x268>)
 8004378:	f935 5010 	ldrsh.w	r5, [r5, r0, lsl #1]
 800437c:	4415      	add	r5, r2
 800437e:	b2ea      	uxtb	r2, r5
					count++;
 8004380:	1c5d      	adds	r5, r3, #1
 8004382:	b2eb      	uxtb	r3, r5
				if (y >= half_step ) {
 8004384:	45ca      	cmp	sl, r9
 8004386:	d30b      	bcc.n	80043a0 <generate_height_map+0x198>
					sum += HEIGHT_MAP[y-half_step][x];
 8004388:	eba8 0006 	sub.w	r0, r8, r6
 800438c:	251a      	movs	r5, #26
 800438e:	fb05 7000 	mla	r0, r5, r0, r7
 8004392:	4d37      	ldr	r5, [pc, #220]	; (8004470 <generate_height_map+0x268>)
 8004394:	f935 5010 	ldrsh.w	r5, [r5, r0, lsl #1]
 8004398:	4415      	add	r5, r2
 800439a:	b2ea      	uxtb	r2, r5
					count++;
 800439c:	1c5d      	adds	r5, r3, #1
 800439e:	b2eb      	uxtb	r3, r5
				if (y < map_size - half_step ) {
 80043a0:	4588      	cmp	r8, r1
 80043a2:	daa9      	bge.n	80042f8 <generate_height_map+0xf0>
					sum += HEIGHT_MAP[y+half_step][x];
 80043a4:	211a      	movs	r1, #26
 80043a6:	9803      	ldr	r0, [sp, #12]
 80043a8:	fb01 7100 	mla	r1, r1, r0, r7
 80043ac:	4830      	ldr	r0, [pc, #192]	; (8004470 <generate_height_map+0x268>)
 80043ae:	f930 5011 	ldrsh.w	r5, [r0, r1, lsl #1]
 80043b2:	4415      	add	r5, r2
 80043b4:	b2ea      	uxtb	r2, r5
					count++;
 80043b6:	1c5d      	adds	r5, r3, #1
 80043b8:	b2eb      	uxtb	r3, r5
 80043ba:	e79d      	b.n	80042f8 <generate_height_map+0xf0>
		for (uint16_t y = 0; y < map_size; y += step/2) {
 80043bc:	44ca      	add	sl, r9
 80043be:	fa1f fa8a 	uxth.w	sl, sl
 80043c2:	f5ba 7fc8 	cmp.w	sl, #400	; 0x190
 80043c6:	d809      	bhi.n	80043dc <generate_height_map+0x1d4>
			uint16_t x0 = (y + step/2) % step;		// CHECK IF OK
 80043c8:	46d0      	mov	r8, sl
 80043ca:	eb0a 0306 	add.w	r3, sl, r6
 80043ce:	9303      	str	r3, [sp, #12]
 80043d0:	fb93 f4fb 	sdiv	r4, r3, fp
 80043d4:	fb0b 3414 	mls	r4, fp, r4, r3
 80043d8:	b2a4      	uxth	r4, r4
			for (uint16_t x = x0; x < map_size; x += step) {
 80043da:	e7b4      	b.n	8004346 <generate_height_map+0x13e>
		if (abs(random_lower) > 1 && abs(random_upper) > 1) {
 80043dc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80043e0:	f1b9 0f01 	cmp.w	r9, #1
 80043e4:	d906      	bls.n	80043f4 <generate_height_map+0x1ec>
 80043e6:	9b01      	ldr	r3, [sp, #4]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d903      	bls.n	80043f4 <generate_height_map+0x1ec>
			random_lower /= 2;
 80043ec:	ea4f 0959 	mov.w	r9, r9, lsr #1
			random_upper /= 2;
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	9301      	str	r3, [sp, #4]
		for (uint16_t y = 0; y < map_size; y += step/2) {
 80043f4:	46b3      	mov	fp, r6
	while (step > 1) {
 80043f6:	f1bb 0f01 	cmp.w	fp, #1
 80043fa:	d904      	bls.n	8004406 <generate_height_map+0x1fe>
		for (uint16_t y = step / 2; y < map_size - 1; y += step) {
 80043fc:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8004400:	9603      	str	r6, [sp, #12]
 8004402:	9602      	str	r6, [sp, #8]
 8004404:	e767      	b.n	80042d6 <generate_height_map+0xce>
	for (uint16_t i = 0; i < WORLD_WIDTH_BLOCKS; i+=HMAP_SAMPLES_PER_CELL) {
 8004406:	2400      	movs	r4, #0
 8004408:	e00b      	b.n	8004422 <generate_height_map+0x21a>
		uint8_t val = HEIGHT_MAP[WORLD_WIDTH_BLOCKS/HMAP_SAMPLES_PER_CELL][i/HMAP_SAMPLES_PER_CELL] / HMAP_SAMPLES_PER_CELL + GROUND_SKY_RATIO;
 800440a:	330f      	adds	r3, #15
 800440c:	e014      	b.n	8004438 <generate_height_map+0x230>
			LVL1_HMAP[i+j] = val;
 800440e:	18e1      	adds	r1, r4, r3
 8004410:	4a18      	ldr	r2, [pc, #96]	; (8004474 <generate_height_map+0x26c>)
 8004412:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
		for (uint8_t j = 0; j < HMAP_SAMPLES_PER_CELL; j++) {
 8004416:	3301      	adds	r3, #1
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b0f      	cmp	r3, #15
 800441c:	d9f7      	bls.n	800440e <generate_height_map+0x206>
	for (uint16_t i = 0; i < WORLD_WIDTH_BLOCKS; i+=HMAP_SAMPLES_PER_CELL) {
 800441e:	3410      	adds	r4, #16
 8004420:	b2a4      	uxth	r4, r4
 8004422:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 8004426:	d20d      	bcs.n	8004444 <generate_height_map+0x23c>
		uint8_t val = HEIGHT_MAP[WORLD_WIDTH_BLOCKS/HMAP_SAMPLES_PER_CELL][i/HMAP_SAMPLES_PER_CELL] / HMAP_SAMPLES_PER_CELL + GROUND_SKY_RATIO;
 8004428:	0923      	lsrs	r3, r4, #4
 800442a:	f203 238a 	addw	r3, r3, #650	; 0x28a
 800442e:	4a10      	ldr	r2, [pc, #64]	; (8004470 <generate_height_map+0x268>)
 8004430:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004434:	2b00      	cmp	r3, #0
 8004436:	dbe8      	blt.n	800440a <generate_height_map+0x202>
 8004438:	f3c3 1007 	ubfx	r0, r3, #4, #8
 800443c:	3050      	adds	r0, #80	; 0x50
 800443e:	b2c0      	uxtb	r0, r0
		for (uint8_t j = 0; j < HMAP_SAMPLES_PER_CELL; j++) {
 8004440:	2300      	movs	r3, #0
 8004442:	e7ea      	b.n	800441a <generate_height_map+0x212>
	LVL1_HMAP[0] += 5;
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <generate_height_map+0x26c>)
 8004446:	881a      	ldrh	r2, [r3, #0]
 8004448:	3205      	adds	r2, #5
 800444a:	801a      	strh	r2, [r3, #0]
	LVL1_HMAP[WORLD_WIDTH_BLOCKS] += 5;
 800444c:	f8b3 2320 	ldrh.w	r2, [r3, #800]	; 0x320
 8004450:	3205      	adds	r2, #5
 8004452:	f8a3 2320 	strh.w	r2, [r3, #800]	; 0x320
	filter_level(WORLD_WIDTH_BLOCKS, KERNEL_WIDTH, LEVEL_SMOOTHING_FACTOR, false);
 8004456:	2300      	movs	r3, #0
 8004458:	220c      	movs	r2, #12
 800445a:	2120      	movs	r1, #32
 800445c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004460:	f7ff fe06 	bl	8004070 <filter_level>
}
 8004464:	b005      	add	sp, #20
 8004466:	ecbd 8b02 	vpop	{d8}
 800446a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800446e:	bf00      	nop
 8004470:	20000f00 	.word	0x20000f00
 8004474:	200043e8 	.word	0x200043e8

08004478 <random_int>:

uint8_t random_int(uint8_t min, uint8_t max) {
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	4605      	mov	r5, r0
 800447c:	460c      	mov	r4, r1
    return (uint8_t) rand() % (max - min + 1) + min;
 800447e:	f00d f877 	bl	8011570 <rand>
 8004482:	1b61      	subs	r1, r4, r5
 8004484:	3101      	adds	r1, #1
 8004486:	b2c0      	uxtb	r0, r0
 8004488:	fb90 f3f1 	sdiv	r3, r0, r1
 800448c:	fb01 0013 	mls	r0, r1, r3, r0
 8004490:	4428      	add	r0, r5
}
 8004492:	b2c0      	uxtb	r0, r0
 8004494:	bd38      	pop	{r3, r4, r5, pc}
	...

08004498 <init_stage_0>:
void init_stage_0() {
 8004498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	srand(time(NULL));
 800449c:	2000      	movs	r0, #0
 800449e:	f00d ff87 	bl	80123b0 <time>
 80044a2:	f00d f837 	bl	8011514 <srand>
	for (block_c i = 0; i < WORLD_HEIGHT_BLOCKS; i++) {
 80044a6:	2500      	movs	r5, #0
 80044a8:	e058      	b.n	800455c <init_stage_0+0xc4>
			if ((WORLD[i][j/2] == cave || WORLD[i][j/2] == lava) && i > LVL1_HMAP[j]) {
 80044aa:	4b31      	ldr	r3, [pc, #196]	; (8004570 <init_stage_0+0xd8>)
 80044ac:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80044b0:	42ab      	cmp	r3, r5
 80044b2:	d22c      	bcs.n	800450e <init_stage_0+0x76>
 80044b4:	e019      	b.n	80044ea <init_stage_0+0x52>
					int random_radius = random_int(1, 4);
 80044b6:	2104      	movs	r1, #4
 80044b8:	2001      	movs	r0, #1
 80044ba:	f7ff ffdd 	bl	8004478 <random_int>
 80044be:	4682      	mov	sl, r0
					draw_blob(j/2, i, random_radius, build_cell(_rock, _rock));
 80044c0:	2107      	movs	r1, #7
 80044c2:	4608      	mov	r0, r1
 80044c4:	f7ff f95a 	bl	800377c <build_cell>
 80044c8:	4603      	mov	r3, r0
 80044ca:	fa1f f28a 	uxth.w	r2, sl
 80044ce:	4629      	mov	r1, r5
 80044d0:	4640      	mov	r0, r8
 80044d2:	f7ff f971 	bl	80037b8 <draw_blob>
			WORLD[i][j/2] = build_cell(l_block, r_block);
 80044d6:	4639      	mov	r1, r7
 80044d8:	4630      	mov	r0, r6
 80044da:	f7ff f94f 	bl	800377c <build_cell>
 80044de:	4b25      	ldr	r3, [pc, #148]	; (8004574 <init_stage_0+0xdc>)
 80044e0:	22c8      	movs	r2, #200	; 0xc8
 80044e2:	fb02 3309 	mla	r3, r2, r9, r3
 80044e6:	f803 0008 	strb.w	r0, [r3, r8]
		for (block_c j = 0; j < WORLD_WIDTH_BLOCKS; j+=2) {
 80044ea:	3402      	adds	r4, #2
 80044ec:	b2a4      	uxth	r4, r4
 80044ee:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 80044f2:	d231      	bcs.n	8004558 <init_stage_0+0xc0>
			if ((WORLD[i][j/2] == cave || WORLD[i][j/2] == lava) && i > LVL1_HMAP[j]) {
 80044f4:	46a9      	mov	r9, r5
 80044f6:	ea4f 0854 	mov.w	r8, r4, lsr #1
 80044fa:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <init_stage_0+0xdc>)
 80044fc:	22c8      	movs	r2, #200	; 0xc8
 80044fe:	fb02 3305 	mla	r3, r2, r5, r3
 8004502:	f813 3008 	ldrb.w	r3, [r3, r8]
 8004506:	2bcc      	cmp	r3, #204	; 0xcc
 8004508:	d0cf      	beq.n	80044aa <init_stage_0+0x12>
 800450a:	2b88      	cmp	r3, #136	; 0x88
 800450c:	d0cd      	beq.n	80044aa <init_stage_0+0x12>
			l_block = assign_block_material(j, i);
 800450e:	4629      	mov	r1, r5
 8004510:	4620      	mov	r0, r4
 8004512:	f7ff f903 	bl	800371c <assign_block_material>
 8004516:	4606      	mov	r6, r0
			r_block = assign_block_material(j+1, i);
 8004518:	1c60      	adds	r0, r4, #1
 800451a:	4629      	mov	r1, r5
 800451c:	b280      	uxth	r0, r0
 800451e:	f7ff f8fd 	bl	800371c <assign_block_material>
 8004522:	4607      	mov	r7, r0
			float random = (float) rand() / (float) (RAND_MAX);
 8004524:	f00d f824 	bl	8011570 <rand>
 8004528:	ee07 0a90 	vmov	s15, r0
 800452c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			if (random < 0.1) {
 8004530:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004578 <init_stage_0+0xe0>
 8004534:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004538:	ee17 0a90 	vmov	r0, s15
 800453c:	f7fc f83c 	bl	80005b8 <__aeabi_f2d>
 8004540:	a309      	add	r3, pc, #36	; (adr r3, 8004568 <init_stage_0+0xd0>)
 8004542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004546:	f7fc fb01 	bl	8000b4c <__aeabi_dcmplt>
 800454a:	2800      	cmp	r0, #0
 800454c:	d0c3      	beq.n	80044d6 <init_stage_0+0x3e>
				if (l_block == _rock || r_block == _rock) {
 800454e:	2e07      	cmp	r6, #7
 8004550:	d0b1      	beq.n	80044b6 <init_stage_0+0x1e>
 8004552:	2f07      	cmp	r7, #7
 8004554:	d1bf      	bne.n	80044d6 <init_stage_0+0x3e>
 8004556:	e7ae      	b.n	80044b6 <init_stage_0+0x1e>
	for (block_c i = 0; i < WORLD_HEIGHT_BLOCKS; i++) {
 8004558:	3501      	adds	r5, #1
 800455a:	b2ad      	uxth	r5, r5
 800455c:	2def      	cmp	r5, #239	; 0xef
 800455e:	d801      	bhi.n	8004564 <init_stage_0+0xcc>
		for (block_c j = 0; j < WORLD_WIDTH_BLOCKS; j+=2) {
 8004560:	2400      	movs	r4, #0
 8004562:	e7c4      	b.n	80044ee <init_stage_0+0x56>
}
 8004564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004568:	9999999a 	.word	0x9999999a
 800456c:	3fb99999 	.word	0x3fb99999
 8004570:	200043e8 	.word	0x200043e8
 8004574:	20005068 	.word	0x20005068
 8004578:	30000000 	.word	0x30000000

0800457c <init_world>:
void init_world() {
 800457c:	b508      	push	{r3, lr}
	world_zero_fill();
 800457e:	f7ff f901 	bl	8003784 <world_zero_fill>
	generate_height_map(-3, 3, 5);
 8004582:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8004586:	2103      	movs	r1, #3
 8004588:	20fd      	movs	r0, #253	; 0xfd
 800458a:	f7ff fe3d 	bl	8004208 <generate_height_map>
	generate_caves();
 800458e:	f7ff f975 	bl	800387c <generate_caves>
	shape_caves_with_morphological_operations(dirt, cave);
 8004592:	21cc      	movs	r1, #204	; 0xcc
 8004594:	2011      	movs	r0, #17
 8004596:	f7ff fc71 	bl	8003e7c <shape_caves_with_morphological_operations>
	place_lava();
 800459a:	f7ff fd17 	bl	8003fcc <place_lava>
	precompute_euclidean();
 800459e:	f7fe ffcf 	bl	8003540 <precompute_euclidean>
	precompute_light_intensity();
 80045a2:	f7ff f885 	bl	80036b0 <precompute_light_intensity>
	init_stage_0();
 80045a6:	f7ff ff77 	bl	8004498 <init_stage_0>
	init_light_map();
 80045aa:	f7fe ff43 	bl	8003434 <init_light_map>
	uint16_t zero_height = LVL1_HMAP[WORLD_WIDTH_BLOCKS/2];
 80045ae:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <init_world+0x44>)
 80045b0:	f8b3 1190 	ldrh.w	r1, [r3, #400]	; 0x190
	update_camera_center((uint16_t) floor(WORLD_WIDTH_BLOCKS/3), zero_height - SKY_GROUND_OFFSET);	// zero level height should be at 1/3 of the screen
 80045b4:	390f      	subs	r1, #15
 80045b6:	b289      	uxth	r1, r1
 80045b8:	2085      	movs	r0, #133	; 0x85
 80045ba:	f7fe ff21 	bl	8003400 <update_camera_center>
}
 80045be:	bd08      	pop	{r3, pc}
 80045c0:	200043e8 	.word	0x200043e8

080045c4 <get_block_with_pixels_from_WORLD>:



// x and y are postion of pixels on world
// function used for movables to get what is around them
block_t get_block_with_pixels_from_WORLD(pixel_c x, pixel_c y) {
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	4603      	mov	r3, r0
 80045c8:	4608      	mov	r0, r1
	// Same as x % 2 but for pixel coordinates
	x -= BLOCK_WIDTH;
 80045ca:	3b04      	subs	r3, #4
 80045cc:	b29d      	uxth	r5, r3
	if (x % 8 >= 4) {
 80045ce:	f013 0f04 	tst.w	r3, #4
 80045d2:	d10d      	bne.n	80045f0 <get_block_with_pixels_from_WORLD+0x2c>
		return lower(WORLD[pixel_to_cell_y(y)][pixel_to_cell_x(x)]);
	}

	return upper(WORLD[pixel_to_cell_y(y)][pixel_to_cell_x(x)]);
 80045d4:	f000 fffd 	bl	80055d2 <pixel_to_cell_y>
 80045d8:	4604      	mov	r4, r0
 80045da:	4628      	mov	r0, r5
 80045dc:	f000 fff3 	bl	80055c6 <pixel_to_cell_x>
 80045e0:	4b0a      	ldr	r3, [pc, #40]	; (800460c <get_block_with_pixels_from_WORLD+0x48>)
 80045e2:	22c8      	movs	r2, #200	; 0xc8
 80045e4:	fb02 3304 	mla	r3, r2, r4, r3
 80045e8:	5c18      	ldrb	r0, [r3, r0]
 80045ea:	f000 ffd5 	bl	8005598 <upper>
}
 80045ee:	bd38      	pop	{r3, r4, r5, pc}
		return lower(WORLD[pixel_to_cell_y(y)][pixel_to_cell_x(x)]);
 80045f0:	f000 ffef 	bl	80055d2 <pixel_to_cell_y>
 80045f4:	4604      	mov	r4, r0
 80045f6:	4628      	mov	r0, r5
 80045f8:	f000 ffe5 	bl	80055c6 <pixel_to_cell_x>
 80045fc:	4b03      	ldr	r3, [pc, #12]	; (800460c <get_block_with_pixels_from_WORLD+0x48>)
 80045fe:	22c8      	movs	r2, #200	; 0xc8
 8004600:	fb02 3304 	mla	r3, r2, r4, r3
 8004604:	5c18      	ldrb	r0, [r3, r0]
 8004606:	f000 ffc9 	bl	800559c <lower>
 800460a:	e7f0      	b.n	80045ee <get_block_with_pixels_from_WORLD+0x2a>
 800460c:	20005068 	.word	0x20005068

08004610 <world_pixel_to_scene_pixel_x_band>:
 * returns the pixel that is represented in WORLD position to
 * position that is represented in SCENE position
 * for x axis and down under y axis
 *
 */
posx_pixel world_pixel_to_scene_pixel_x_band (posx_pixel pos_x) {
 8004610:	b510      	push	{r4, lr}
 8004612:	4604      	mov	r4, r0
	posx_pixel mapped_pos = pos_x - block_to_pixel(camera_x_block) + block_to_pixel(SCENE_WIDTH_BLOCKS) / 2;
 8004614:	4b06      	ldr	r3, [pc, #24]	; (8004630 <world_pixel_to_scene_pixel_x_band+0x20>)
 8004616:	8818      	ldrh	r0, [r3, #0]
 8004618:	f000 ffc5 	bl	80055a6 <block_to_pixel>
 800461c:	1a24      	subs	r4, r4, r0
 800461e:	b2a4      	uxth	r4, r4
 8004620:	2050      	movs	r0, #80	; 0x50
 8004622:	f000 ffc0 	bl	80055a6 <block_to_pixel>
 8004626:	eb04 0050 	add.w	r0, r4, r0, lsr #1

	return mapped_pos;
}
 800462a:	b200      	sxth	r0, r0
 800462c:	bd10      	pop	{r4, pc}
 800462e:	bf00      	nop
 8004630:	20010be8 	.word	0x20010be8

08004634 <world_pixel_to_scene_pixel_y_band>:
posy_pixel world_pixel_to_scene_pixel_y_band (posy_pixel pos_y) {
 8004634:	b510      	push	{r4, lr}
 8004636:	4604      	mov	r4, r0
	posx_pixel mapped_pos = pos_y - block_to_pixel(camera_y_block) + block_to_pixel(SCENE_HEIGHT_BLOCKS) / 2;
 8004638:	4b06      	ldr	r3, [pc, #24]	; (8004654 <world_pixel_to_scene_pixel_y_band+0x20>)
 800463a:	8818      	ldrh	r0, [r3, #0]
 800463c:	f000 ffb3 	bl	80055a6 <block_to_pixel>
 8004640:	1a24      	subs	r4, r4, r0
 8004642:	b2a4      	uxth	r4, r4
 8004644:	203c      	movs	r0, #60	; 0x3c
 8004646:	f000 ffae 	bl	80055a6 <block_to_pixel>
 800464a:	eb04 0050 	add.w	r0, r4, r0, lsr #1

	return mapped_pos;
}
 800464e:	b200      	sxth	r0, r0
 8004650:	bd10      	pop	{r4, pc}
 8004652:	bf00      	nop
 8004654:	20010bea 	.word	0x20010bea

08004658 <world_pixel_to_scene_pixel_x_no_band>:

posx_pixel world_pixel_to_scene_pixel_x_no_band (posx_pixel pos_x) {
 8004658:	b508      	push	{r3, lr}
	posx_pixel mapped_pos = world_pixel_to_scene_pixel_x_band(pos_x);
 800465a:	f7ff ffd9 	bl	8004610 <world_pixel_to_scene_pixel_x_band>

	if (mapped_pos < 0) mapped_pos = 0;
 800465e:	2800      	cmp	r0, #0
 8004660:	db05      	blt.n	800466e <world_pixel_to_scene_pixel_x_no_band+0x16>
	if (mapped_pos >= SCENE_WIDTH_PIXELS) mapped_pos = SCENE_WIDTH_PIXELS - 1;
 8004662:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
 8004666:	db03      	blt.n	8004670 <world_pixel_to_scene_pixel_x_no_band+0x18>
 8004668:	f240 103f 	movw	r0, #319	; 0x13f
 800466c:	e000      	b.n	8004670 <world_pixel_to_scene_pixel_x_no_band+0x18>
	if (mapped_pos < 0) mapped_pos = 0;
 800466e:	2000      	movs	r0, #0

	return mapped_pos;
}
 8004670:	bd08      	pop	{r3, pc}

08004672 <world_pixel_to_scene_pixel_y_no_band>:
posy_pixel world_pixel_to_scene_pixel_y_no_band (posy_pixel pos_y) {
 8004672:	b508      	push	{r3, lr}
	posy_pixel mapped_pos = world_pixel_to_scene_pixel_y_band(pos_y);
 8004674:	f7ff ffde 	bl	8004634 <world_pixel_to_scene_pixel_y_band>

	if (mapped_pos < 0) mapped_pos = 0;
 8004678:	2800      	cmp	r0, #0
 800467a:	db03      	blt.n	8004684 <world_pixel_to_scene_pixel_y_no_band+0x12>
	if (mapped_pos >= SCENE_HEIGHT_PIXELS) mapped_pos = SCENE_HEIGHT_PIXELS - 1;
 800467c:	28ef      	cmp	r0, #239	; 0xef
 800467e:	dd02      	ble.n	8004686 <world_pixel_to_scene_pixel_y_no_band+0x14>
 8004680:	20ef      	movs	r0, #239	; 0xef
 8004682:	e000      	b.n	8004686 <world_pixel_to_scene_pixel_y_no_band+0x14>
	if (mapped_pos < 0) mapped_pos = 0;
 8004684:	2000      	movs	r0, #0
	return mapped_pos;
}
 8004686:	bd08      	pop	{r3, pc}

08004688 <world_pixel_to_world_pixel_x_no_band_param>:
	if (mapped_pos >= SCENE_HEIGHT_BLOCKS * BLOCK_WIDTH) mapped_pos = SCENE_HEIGHT_BLOCKS * BLOCK_WIDTH - 1;
	return mapped_pos;
}

posx_pixel world_pixel_to_world_pixel_x_no_band_param (posx_pixel pos_x, posx_pixel x_diff) {
	posx_pixel mapped_pos = pos_x + x_diff;
 8004688:	4408      	add	r0, r1
 800468a:	b200      	sxth	r0, r0

	if (mapped_pos < 0) mapped_pos = 0;
 800468c:	2800      	cmp	r0, #0
 800468e:	db03      	blt.n	8004698 <world_pixel_to_world_pixel_x_no_band_param+0x10>
	if (mapped_pos >= WORLD_WIDTH_PIXELS) mapped_pos = WORLD_WIDTH_PIXELS - 1;
 8004690:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 8004694:	da02      	bge.n	800469c <world_pixel_to_world_pixel_x_no_band_param+0x14>
	return mapped_pos;

}
 8004696:	4770      	bx	lr
	if (mapped_pos < 0) mapped_pos = 0;
 8004698:	2000      	movs	r0, #0
 800469a:	4770      	bx	lr
	if (mapped_pos >= WORLD_WIDTH_PIXELS) mapped_pos = WORLD_WIDTH_PIXELS - 1;
 800469c:	f240 603f 	movw	r0, #1599	; 0x63f
 80046a0:	e7f9      	b.n	8004696 <world_pixel_to_world_pixel_x_no_band_param+0xe>

080046a2 <world_pixel_to_world_pixel_y_no_band_param>:

posy_pixel world_pixel_to_world_pixel_y_no_band_param (posy_pixel pos_y, posy_pixel y_diff) {
	posx_pixel mapped_pos = pos_y + y_diff;
 80046a2:	4408      	add	r0, r1
 80046a4:	b200      	sxth	r0, r0

	if (mapped_pos < 0) mapped_pos = 0;
 80046a6:	2800      	cmp	r0, #0
 80046a8:	db03      	blt.n	80046b2 <world_pixel_to_world_pixel_y_no_band_param+0x10>
	if (mapped_pos >= WORLD_HEIGHT_PIXELS) mapped_pos = WORLD_HEIGHT_PIXELS - 1;
 80046aa:	f5b0 7f70 	cmp.w	r0, #960	; 0x3c0
 80046ae:	da02      	bge.n	80046b6 <world_pixel_to_world_pixel_y_no_band_param+0x14>
	return mapped_pos;
}
 80046b0:	4770      	bx	lr
	if (mapped_pos < 0) mapped_pos = 0;
 80046b2:	2000      	movs	r0, #0
 80046b4:	4770      	bx	lr
	if (mapped_pos >= WORLD_HEIGHT_PIXELS) mapped_pos = WORLD_HEIGHT_PIXELS - 1;
 80046b6:	f240 30bf 	movw	r0, #959	; 0x3bf
 80046ba:	e7f9      	b.n	80046b0 <world_pixel_to_world_pixel_y_no_band_param+0xe>

080046bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80046bc:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80046be:	4810      	ldr	r0, [pc, #64]	; (8004700 <MX_SPI1_Init+0x44>)
 80046c0:	4b10      	ldr	r3, [pc, #64]	; (8004704 <MX_SPI1_Init+0x48>)
 80046c2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80046c4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80046c8:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80046ca:	2300      	movs	r3, #0
 80046cc:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80046ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80046d2:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80046d4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80046d6:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80046d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046dc:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80046de:	2228      	movs	r2, #40	; 0x28
 80046e0:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80046e2:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80046e4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046e6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80046e8:	2207      	movs	r2, #7
 80046ea:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80046ec:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80046ee:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80046f0:	f006 fc68 	bl	800afc4 <HAL_SPI_Init>
 80046f4:	b900      	cbnz	r0, 80046f8 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80046f6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80046f8:	f7fd fc54 	bl	8001fa4 <Error_Handler>
}
 80046fc:	e7fb      	b.n	80046f6 <MX_SPI1_Init+0x3a>
 80046fe:	bf00      	nop
 8004700:	20010bf4 	.word	0x20010bf4
 8004704:	40013000 	.word	0x40013000

08004708 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004708:	b500      	push	{lr}
 800470a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800470c:	2300      	movs	r3, #0
 800470e:	9303      	str	r3, [sp, #12]
 8004710:	9304      	str	r3, [sp, #16]
 8004712:	9305      	str	r3, [sp, #20]
 8004714:	9306      	str	r3, [sp, #24]
 8004716:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8004718:	6802      	ldr	r2, [r0, #0]
 800471a:	4b12      	ldr	r3, [pc, #72]	; (8004764 <HAL_SPI_MspInit+0x5c>)
 800471c:	429a      	cmp	r2, r3
 800471e:	d002      	beq.n	8004726 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004720:	b009      	add	sp, #36	; 0x24
 8004722:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004726:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800472a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800472c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004730:	661a      	str	r2, [r3, #96]	; 0x60
 8004732:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004734:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004738:	9201      	str	r2, [sp, #4]
 800473a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800473c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800473e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004742:	64da      	str	r2, [r3, #76]	; 0x4c
 8004744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474a:	9302      	str	r3, [sp, #8]
 800474c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800474e:	231c      	movs	r3, #28
 8004750:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004752:	2302      	movs	r3, #2
 8004754:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004756:	2305      	movs	r3, #5
 8004758:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800475a:	a903      	add	r1, sp, #12
 800475c:	4802      	ldr	r0, [pc, #8]	; (8004768 <HAL_SPI_MspInit+0x60>)
 800475e:	f004 f863 	bl	8008828 <HAL_GPIO_Init>
}
 8004762:	e7dd      	b.n	8004720 <HAL_SPI_MspInit+0x18>
 8004764:	40013000 	.word	0x40013000
 8004768:	48001800 	.word	0x48001800

0800476c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800476c:	b500      	push	{lr}
 800476e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_MspInit+0x34>)
 8004772:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	661a      	str	r2, [r3, #96]	; 0x60
 800477a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800477c:	f002 0201 	and.w	r2, r2, #1
 8004780:	9200      	str	r2, [sp, #0]
 8004782:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004784:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004786:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800478a:	659a      	str	r2, [r3, #88]	; 0x58
 800478c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004792:	9301      	str	r3, [sp, #4]
 8004794:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004796:	f005 fdc3 	bl	800a320 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800479a:	b003      	add	sp, #12
 800479c:	f85d fb04 	ldr.w	pc, [sp], #4
 80047a0:	40021000 	.word	0x40021000

080047a4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047a4:	e7fe      	b.n	80047a4 <NMI_Handler>

080047a6 <HardFault_Handler>:
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047a6:	e7fe      	b.n	80047a6 <HardFault_Handler>

080047a8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047a8:	e7fe      	b.n	80047a8 <MemManage_Handler>

080047aa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047aa:	e7fe      	b.n	80047aa <BusFault_Handler>

080047ac <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047ac:	e7fe      	b.n	80047ac <UsageFault_Handler>

080047ae <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047ae:	4770      	bx	lr

080047b0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047b0:	4770      	bx	lr

080047b2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047b2:	4770      	bx	lr

080047b4 <SysTick_Handler>:
volatile	uint8_t	milliseconds 	= 0;
extern bool cycle;
extern uint8_t FPS;

void SysTick_Handler(void)
{
 80047b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047b6:	f002 fcc1 	bl	800713c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  	// Here the frame rate of TERRSKO is set to values of 10 to 100 FPS
    if (milliseconds >= FPS) {
 80047ba:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <SysTick_Handler+0x2c>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	4a08      	ldr	r2, [pc, #32]	; (80047e4 <SysTick_Handler+0x30>)
 80047c2:	7812      	ldrb	r2, [r2, #0]
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d305      	bcc.n	80047d4 <SysTick_Handler+0x20>
    	milliseconds = 0;
 80047c8:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <SysTick_Handler+0x2c>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	701a      	strb	r2, [r3, #0]
    	cycle = true;
 80047ce:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <SysTick_Handler+0x34>)
 80047d0:	2201      	movs	r2, #1
 80047d2:	701a      	strb	r2, [r3, #0]
    }
    milliseconds++;
 80047d4:	4a02      	ldr	r2, [pc, #8]	; (80047e0 <SysTick_Handler+0x2c>)
 80047d6:	7813      	ldrb	r3, [r2, #0]
 80047d8:	3301      	adds	r3, #1
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	7013      	strb	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80047de:	bd08      	pop	{r3, pc}
 80047e0:	20010c58 	.word	0x20010c58
 80047e4:	20000000 	.word	0x20000000
 80047e8:	20000dd8 	.word	0x20000dd8

080047ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80047ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 80047ee:	4802      	ldr	r0, [pc, #8]	; (80047f8 <DMA1_Channel1_IRQHandler+0xc>)
 80047f0:	f003 fe85 	bl	80084fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80047f4:	bd08      	pop	{r3, pc}
 80047f6:	bf00      	nop
 80047f8:	20000b60 	.word	0x20000b60

080047fc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80047fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80047fe:	4802      	ldr	r0, [pc, #8]	; (8004808 <DMA1_Channel3_IRQHandler+0xc>)
 8004800:	f003 fe7d 	bl	80084fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004804:	bd08      	pop	{r3, pc}
 8004806:	bf00      	nop
 8004808:	20000c80 	.word	0x20000c80

0800480c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800480c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800480e:	4802      	ldr	r0, [pc, #8]	; (8004818 <DMA1_Channel4_IRQHandler+0xc>)
 8004810:	f003 fe75 	bl	80084fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004814:	bd08      	pop	{r3, pc}
 8004816:	bf00      	nop
 8004818:	20000ce0 	.word	0x20000ce0

0800481c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800481c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 800481e:	4802      	ldr	r0, [pc, #8]	; (8004828 <DMA1_Channel5_IRQHandler+0xc>)
 8004820:	f003 fe6d 	bl	80084fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004824:	bd08      	pop	{r3, pc}
 8004826:	bf00      	nop
 8004828:	20000ab4 	.word	0x20000ab4

0800482c <DMA1_Channel6_IRQHandler>:
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800482c:	4770      	bx	lr

0800482e <DMA1_Channel7_IRQHandler>:
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800482e:	4770      	bx	lr

08004830 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8004830:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004832:	4802      	ldr	r0, [pc, #8]	; (800483c <USB_LP_IRQHandler+0xc>)
 8004834:	f005 faab 	bl	8009d8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004838:	bd08      	pop	{r3, pc}
 800483a:	bf00      	nop
 800483c:	20012520 	.word	0x20012520

08004840 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8004840:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004842:	4802      	ldr	r0, [pc, #8]	; (800484c <I2C1_EV_IRQHandler+0xc>)
 8004844:	f004 f986 	bl	8008b54 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004848:	bd08      	pop	{r3, pc}
 800484a:	bf00      	nop
 800484c:	20000d40 	.word	0x20000d40

08004850 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004850:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004852:	4802      	ldr	r0, [pc, #8]	; (800485c <I2C1_ER_IRQHandler+0xc>)
 8004854:	f004 fc49 	bl	80090ea <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004858:	bd08      	pop	{r3, pc}
 800485a:	bf00      	nop
 800485c:	20000d40 	.word	0x20000d40

08004860 <TIM2_IRQHandler>:

/*	TIM2 IS READY FOR ACTIVITY IN FREQUENCY: 1HZ */

extern TIM_HandleTypeDef htim2;
void TIM2_IRQHandler () {
	if (__HAL_TIM_GET_FLAG(&htim2, TIM_IT_UPDATE)) {
 8004860:	4b06      	ldr	r3, [pc, #24]	; (800487c <TIM2_IRQHandler+0x1c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	f012 0f01 	tst.w	r2, #1
 800486a:	d005      	beq.n	8004878 <TIM2_IRQHandler+0x18>
		__HAL_TIM_CLEAR_FLAG(&htim2, TIM_IT_UPDATE);
 800486c:	f06f 0201 	mvn.w	r2, #1
 8004870:	611a      	str	r2, [r3, #16]
		in_lava = true;
 8004872:	4b03      	ldr	r3, [pc, #12]	; (8004880 <TIM2_IRQHandler+0x20>)
 8004874:	2201      	movs	r2, #1
 8004876:	701a      	strb	r2, [r3, #0]
	}
}
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	20000ddc 	.word	0x20000ddc
 8004880:	20010fd1 	.word	0x20010fd1

08004884 <EXTI0_IRQHandler>:
/*	TIM2 IS READY FOR ACTIVITY IN FREQUENCY: 1HZ */

void EXTI0_IRQHandler() {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0)) {
 8004884:	4b05      	ldr	r3, [pc, #20]	; (800489c <EXTI0_IRQHandler+0x18>)
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	f013 0f01 	tst.w	r3, #1
 800488c:	d002      	beq.n	8004894 <EXTI0_IRQHandler+0x10>
			act_up = true;
 800488e:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <EXTI0_IRQHandler+0x1c>)
 8004890:	2201      	movs	r2, #1
 8004892:	701a      	strb	r2, [r3, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8004894:	4b01      	ldr	r3, [pc, #4]	; (800489c <EXTI0_IRQHandler+0x18>)
 8004896:	2201      	movs	r2, #1
 8004898:	615a      	str	r2, [r3, #20]
}
 800489a:	4770      	bx	lr
 800489c:	40010400 	.word	0x40010400
 80048a0:	200008f3 	.word	0x200008f3

080048a4 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler() {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1)) {
 80048a4:	4b05      	ldr	r3, [pc, #20]	; (80048bc <EXTI1_IRQHandler+0x18>)
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	f013 0f02 	tst.w	r3, #2
 80048ac:	d002      	beq.n	80048b4 <EXTI1_IRQHandler+0x10>
		act_down = true;
 80048ae:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <EXTI1_IRQHandler+0x1c>)
 80048b0:	2201      	movs	r2, #1
 80048b2:	701a      	strb	r2, [r3, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 80048b4:	4b01      	ldr	r3, [pc, #4]	; (80048bc <EXTI1_IRQHandler+0x18>)
 80048b6:	2202      	movs	r2, #2
 80048b8:	615a      	str	r2, [r3, #20]
}
 80048ba:	4770      	bx	lr
 80048bc:	40010400 	.word	0x40010400
 80048c0:	200008f0 	.word	0x200008f0

080048c4 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler() {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6)) {
 80048c4:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <EXTI9_5_IRQHandler+0x30>)
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80048cc:	d002      	beq.n	80048d4 <EXTI9_5_IRQHandler+0x10>
		act_left = true;
 80048ce:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <EXTI9_5_IRQHandler+0x34>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	701a      	strb	r2, [r3, #0]
	}
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8)) {
 80048d4:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <EXTI9_5_IRQHandler+0x30>)
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80048dc:	d002      	beq.n	80048e4 <EXTI9_5_IRQHandler+0x20>
		act_right = true;
 80048de:	4b07      	ldr	r3, [pc, #28]	; (80048fc <EXTI9_5_IRQHandler+0x38>)
 80048e0:	2201      	movs	r2, #1
 80048e2:	701a      	strb	r2, [r3, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 80048e4:	4b03      	ldr	r3, [pc, #12]	; (80048f4 <EXTI9_5_IRQHandler+0x30>)
 80048e6:	2240      	movs	r2, #64	; 0x40
 80048e8:	615a      	str	r2, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 80048ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048ee:	615a      	str	r2, [r3, #20]
}
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40010400 	.word	0x40010400
 80048f8:	200008f1 	.word	0x200008f1
 80048fc:	200008f2 	.word	0x200008f2

08004900 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler() {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13)) {
 8004900:	4b11      	ldr	r3, [pc, #68]	; (8004948 <EXTI15_10_IRQHandler+0x48>)
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004908:	d002      	beq.n	8004910 <EXTI15_10_IRQHandler+0x10>
		move_enter = true;
 800490a:	4b10      	ldr	r3, [pc, #64]	; (800494c <EXTI15_10_IRQHandler+0x4c>)
 800490c:	2201      	movs	r2, #1
 800490e:	701a      	strb	r2, [r3, #0]
	}
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14)) {
 8004910:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <EXTI15_10_IRQHandler+0x48>)
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004918:	d002      	beq.n	8004920 <EXTI15_10_IRQHandler+0x20>
		 esc = true;
 800491a:	4b0d      	ldr	r3, [pc, #52]	; (8004950 <EXTI15_10_IRQHandler+0x50>)
 800491c:	2201      	movs	r2, #1
 800491e:	701a      	strb	r2, [r3, #0]
	}
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_15)) {
 8004920:	4b09      	ldr	r3, [pc, #36]	; (8004948 <EXTI15_10_IRQHandler+0x48>)
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004928:	d002      	beq.n	8004930 <EXTI15_10_IRQHandler+0x30>
		 ok = true;
 800492a:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <EXTI15_10_IRQHandler+0x54>)
 800492c:	2201      	movs	r2, #1
 800492e:	701a      	strb	r2, [r3, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <EXTI15_10_IRQHandler+0x48>)
 8004932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004936:	615a      	str	r2, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8004938:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800493c:	615a      	str	r2, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_15);
 800493e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004942:	615a      	str	r2, [r3, #20]
}
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40010400 	.word	0x40010400
 800494c:	200008f6 	.word	0x200008f6
 8004950:	200008f4 	.word	0x200008f4
 8004954:	200008fa 	.word	0x200008fa

08004958 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004958:	2001      	movs	r0, #1
 800495a:	4770      	bx	lr

0800495c <_kill>:

int _kill(int pid, int sig)
{
 800495c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800495e:	f00b fe3d 	bl	80105dc <__errno>
 8004962:	2316      	movs	r3, #22
 8004964:	6003      	str	r3, [r0, #0]
	return -1;
}
 8004966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800496a:	bd08      	pop	{r3, pc}

0800496c <_exit>:

void _exit (int status)
{
 800496c:	b508      	push	{r3, lr}
	_kill(status, -1);
 800496e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004972:	f7ff fff3 	bl	800495c <_kill>
	while (1) {}		/* Make sure we hang here */
 8004976:	e7fe      	b.n	8004976 <_exit+0xa>

08004978 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	460c      	mov	r4, r1
 800497c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800497e:	2500      	movs	r5, #0
 8004980:	e006      	b.n	8004990 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8004982:	f3af 8000 	nop.w
 8004986:	4621      	mov	r1, r4
 8004988:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800498c:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800498e:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004990:	42b5      	cmp	r5, r6
 8004992:	dbf6      	blt.n	8004982 <_read+0xa>
	}

return len;
}
 8004994:	4630      	mov	r0, r6
 8004996:	bd70      	pop	{r4, r5, r6, pc}

08004998 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004998:	b570      	push	{r4, r5, r6, lr}
 800499a:	460c      	mov	r4, r1
 800499c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800499e:	2500      	movs	r5, #0
 80049a0:	e004      	b.n	80049ac <_write+0x14>
	{
		__io_putchar(*ptr++);
 80049a2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80049a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049aa:	3501      	adds	r5, #1
 80049ac:	42b5      	cmp	r5, r6
 80049ae:	dbf8      	blt.n	80049a2 <_write+0xa>
	}
	return len;
}
 80049b0:	4630      	mov	r0, r6
 80049b2:	bd70      	pop	{r4, r5, r6, pc}

080049b4 <_close>:

int _close(int file)
{
	return -1;
}
 80049b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049b8:	4770      	bx	lr

080049ba <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80049ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049be:	604b      	str	r3, [r1, #4]
	return 0;
}
 80049c0:	2000      	movs	r0, #0
 80049c2:	4770      	bx	lr

080049c4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80049c4:	2001      	movs	r0, #1
 80049c6:	4770      	bx	lr

080049c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80049c8:	2000      	movs	r0, #0
 80049ca:	4770      	bx	lr

080049cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049cc:	b510      	push	{r4, lr}
 80049ce:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049d0:	4a0c      	ldr	r2, [pc, #48]	; (8004a04 <_sbrk+0x38>)
 80049d2:	490d      	ldr	r1, [pc, #52]	; (8004a08 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049d4:	480d      	ldr	r0, [pc, #52]	; (8004a0c <_sbrk+0x40>)
 80049d6:	6800      	ldr	r0, [r0, #0]
 80049d8:	b140      	cbz	r0, 80049ec <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049da:	480c      	ldr	r0, [pc, #48]	; (8004a0c <_sbrk+0x40>)
 80049dc:	6800      	ldr	r0, [r0, #0]
 80049de:	4403      	add	r3, r0
 80049e0:	1a52      	subs	r2, r2, r1
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d806      	bhi.n	80049f4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80049e6:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <_sbrk+0x40>)
 80049e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80049ea:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80049ec:	4807      	ldr	r0, [pc, #28]	; (8004a0c <_sbrk+0x40>)
 80049ee:	4c08      	ldr	r4, [pc, #32]	; (8004a10 <_sbrk+0x44>)
 80049f0:	6004      	str	r4, [r0, #0]
 80049f2:	e7f2      	b.n	80049da <_sbrk+0xe>
    errno = ENOMEM;
 80049f4:	f00b fdf2 	bl	80105dc <__errno>
 80049f8:	230c      	movs	r3, #12
 80049fa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80049fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a00:	e7f3      	b.n	80049ea <_sbrk+0x1e>
 8004a02:	bf00      	nop
 8004a04:	20020000 	.word	0x20020000
 8004a08:	00000400 	.word	0x00000400
 8004a0c:	20010c5c 	.word	0x20010c5c
 8004a10:	20012a48 	.word	0x20012a48

08004a14 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004a14:	4a03      	ldr	r2, [pc, #12]	; (8004a24 <SystemInit+0x10>)
 8004a16:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a1a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a22:	4770      	bx	lr
 8004a24:	e000ed00 	.word	0xe000ed00

08004a28 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim20);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004a28:	b084      	sub	sp, #16

  if(tim_baseHandle->Instance==TIM5)
 8004a2a:	6803      	ldr	r3, [r0, #0]
 8004a2c:	4a1c      	ldr	r2, [pc, #112]	; (8004aa0 <HAL_TIM_Base_MspInit+0x78>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 8004a32:	4a1c      	ldr	r2, [pc, #112]	; (8004aa4 <HAL_TIM_Base_MspInit+0x7c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d01c      	beq.n	8004a72 <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM15)
 8004a38:	4a1b      	ldr	r2, [pc, #108]	; (8004aa8 <HAL_TIM_Base_MspInit+0x80>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d024      	beq.n	8004a88 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM20)
 8004a3e:	4a1b      	ldr	r2, [pc, #108]	; (8004aac <HAL_TIM_Base_MspInit+0x84>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d114      	bne.n	8004a6e <HAL_TIM_Base_MspInit+0x46>
  {
  /* USER CODE BEGIN TIM20_MspInit 0 */

  /* USER CODE END TIM20_MspInit 0 */
    /* TIM20 clock enable */
    __HAL_RCC_TIM20_CLK_ENABLE();
 8004a44:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <HAL_TIM_Base_MspInit+0x88>)
 8004a46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a48:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004a4c:	661a      	str	r2, [r3, #96]	; 0x60
 8004a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a54:	9303      	str	r3, [sp, #12]
 8004a56:	9b03      	ldr	r3, [sp, #12]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8004a58:	e009      	b.n	8004a6e <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004a5a:	4b15      	ldr	r3, [pc, #84]	; (8004ab0 <HAL_TIM_Base_MspInit+0x88>)
 8004a5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a5e:	f042 0208 	orr.w	r2, r2, #8
 8004a62:	659a      	str	r2, [r3, #88]	; 0x58
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	9b00      	ldr	r3, [sp, #0]
}
 8004a6e:	b004      	add	sp, #16
 8004a70:	4770      	bx	lr
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004a72:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <HAL_TIM_Base_MspInit+0x88>)
 8004a74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a7a:	661a      	str	r2, [r3, #96]	; 0x60
 8004a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a82:	9301      	str	r3, [sp, #4]
 8004a84:	9b01      	ldr	r3, [sp, #4]
 8004a86:	e7f2      	b.n	8004a6e <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004a88:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <HAL_TIM_Base_MspInit+0x88>)
 8004a8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a8c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004a90:	661a      	str	r2, [r3, #96]	; 0x60
 8004a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a98:	9302      	str	r3, [sp, #8]
 8004a9a:	9b02      	ldr	r3, [sp, #8]
 8004a9c:	e7e7      	b.n	8004a6e <HAL_TIM_Base_MspInit+0x46>
 8004a9e:	bf00      	nop
 8004aa0:	40000c00 	.word	0x40000c00
 8004aa4:	40013400 	.word	0x40013400
 8004aa8:	40014000 	.word	0x40014000
 8004aac:	40015000 	.word	0x40015000
 8004ab0:	40021000 	.word	0x40021000

08004ab4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004ab4:	b500      	push	{lr}
 8004ab6:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab8:	2300      	movs	r3, #0
 8004aba:	9305      	str	r3, [sp, #20]
 8004abc:	9306      	str	r3, [sp, #24]
 8004abe:	9307      	str	r3, [sp, #28]
 8004ac0:	9308      	str	r3, [sp, #32]
 8004ac2:	9309      	str	r3, [sp, #36]	; 0x24
  if(timHandle->Instance==TIM5)
 8004ac4:	6803      	ldr	r3, [r0, #0]
 8004ac6:	4a33      	ldr	r2, [pc, #204]	; (8004b94 <HAL_TIM_MspPostInit+0xe0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00b      	beq.n	8004ae4 <HAL_TIM_MspPostInit+0x30>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 8004acc:	4a32      	ldr	r2, [pc, #200]	; (8004b98 <HAL_TIM_MspPostInit+0xe4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d01e      	beq.n	8004b10 <HAL_TIM_MspPostInit+0x5c>

  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM15)
 8004ad2:	4a32      	ldr	r2, [pc, #200]	; (8004b9c <HAL_TIM_MspPostInit+0xe8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d031      	beq.n	8004b3c <HAL_TIM_MspPostInit+0x88>

  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM20)
 8004ad8:	4a31      	ldr	r2, [pc, #196]	; (8004ba0 <HAL_TIM_MspPostInit+0xec>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d044      	beq.n	8004b68 <HAL_TIM_MspPostInit+0xb4>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8004ade:	b00b      	add	sp, #44	; 0x2c
 8004ae0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ae4:	4b2f      	ldr	r3, [pc, #188]	; (8004ba4 <HAL_TIM_MspPostInit+0xf0>)
 8004ae6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ae8:	f042 0220 	orr.w	r2, r2, #32
 8004aec:	64da      	str	r2, [r3, #76]	; 0x4c
 8004aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	9301      	str	r3, [sp, #4]
 8004af6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM2_Pin|PWM3_Pin|PWM4_Pin;
 8004af8:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004afc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afe:	2302      	movs	r3, #2
 8004b00:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 8004b02:	2306      	movs	r3, #6
 8004b04:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004b06:	a905      	add	r1, sp, #20
 8004b08:	4827      	ldr	r0, [pc, #156]	; (8004ba8 <HAL_TIM_MspPostInit+0xf4>)
 8004b0a:	f003 fe8d 	bl	8008828 <HAL_GPIO_Init>
 8004b0e:	e7e6      	b.n	8004ade <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b10:	4b24      	ldr	r3, [pc, #144]	; (8004ba4 <HAL_TIM_MspPostInit+0xf0>)
 8004b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b14:	f042 0204 	orr.w	r2, r2, #4
 8004b18:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	9302      	str	r3, [sp, #8]
 8004b22:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM10_Pin|PWM11_Pin|PWM12_Pin|PWM13_Pin;
 8004b24:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004b28:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004b2e:	2304      	movs	r3, #4
 8004b30:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b32:	a905      	add	r1, sp, #20
 8004b34:	481d      	ldr	r0, [pc, #116]	; (8004bac <HAL_TIM_MspPostInit+0xf8>)
 8004b36:	f003 fe77 	bl	8008828 <HAL_GPIO_Init>
 8004b3a:	e7d0      	b.n	8004ade <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b3c:	4b19      	ldr	r3, [pc, #100]	; (8004ba4 <HAL_TIM_MspPostInit+0xf0>)
 8004b3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b40:	f042 0220 	orr.w	r2, r2, #32
 8004b44:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	9303      	str	r3, [sp, #12]
 8004b4e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = PWM5_Pin;
 8004b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b54:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b56:	2302      	movs	r3, #2
 8004b58:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(PWM5_GPIO_Port, &GPIO_InitStruct);
 8004b5e:	a905      	add	r1, sp, #20
 8004b60:	4811      	ldr	r0, [pc, #68]	; (8004ba8 <HAL_TIM_MspPostInit+0xf4>)
 8004b62:	f003 fe61 	bl	8008828 <HAL_GPIO_Init>
 8004b66:	e7ba      	b.n	8004ade <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b68:	4b0e      	ldr	r3, [pc, #56]	; (8004ba4 <HAL_TIM_MspPostInit+0xf0>)
 8004b6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b6c:	f042 0220 	orr.w	r2, r2, #32
 8004b70:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b74:	f003 0320 	and.w	r3, r3, #32
 8004b78:	9304      	str	r3, [sp, #16]
 8004b7a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = PWM6_Pin|PWM7_Pin|PWM8_Pin|PWM9_Pin;
 8004b7c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004b80:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b82:	2302      	movs	r3, #2
 8004b84:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 8004b86:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004b88:	a905      	add	r1, sp, #20
 8004b8a:	4807      	ldr	r0, [pc, #28]	; (8004ba8 <HAL_TIM_MspPostInit+0xf4>)
 8004b8c:	f003 fe4c 	bl	8008828 <HAL_GPIO_Init>
}
 8004b90:	e7a5      	b.n	8004ade <HAL_TIM_MspPostInit+0x2a>
 8004b92:	bf00      	nop
 8004b94:	40000c00 	.word	0x40000c00
 8004b98:	40013400 	.word	0x40013400
 8004b9c:	40014000 	.word	0x40014000
 8004ba0:	40015000 	.word	0x40015000
 8004ba4:	40021000 	.word	0x40021000
 8004ba8:	48001400 	.word	0x48001400
 8004bac:	48000800 	.word	0x48000800

08004bb0 <MX_TIM5_Init>:
{
 8004bb0:	b500      	push	{lr}
 8004bb2:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	930a      	str	r3, [sp, #40]	; 0x28
 8004bb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bba:	930c      	str	r3, [sp, #48]	; 0x30
 8004bbc:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bbe:	9307      	str	r3, [sp, #28]
 8004bc0:	9308      	str	r3, [sp, #32]
 8004bc2:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	9301      	str	r3, [sp, #4]
 8004bc8:	9302      	str	r3, [sp, #8]
 8004bca:	9303      	str	r3, [sp, #12]
 8004bcc:	9304      	str	r3, [sp, #16]
 8004bce:	9305      	str	r3, [sp, #20]
 8004bd0:	9306      	str	r3, [sp, #24]
  htim5.Instance = TIM5;
 8004bd2:	4830      	ldr	r0, [pc, #192]	; (8004c94 <MX_TIM5_Init+0xe4>)
 8004bd4:	4a30      	ldr	r2, [pc, #192]	; (8004c98 <MX_TIM5_Init+0xe8>)
 8004bd6:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 10;
 8004bd8:	220a      	movs	r2, #10
 8004bda:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bdc:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 10000;
 8004bde:	f242 7210 	movw	r2, #10000	; 0x2710
 8004be2:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004be4:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004be6:	2380      	movs	r3, #128	; 0x80
 8004be8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004bea:	f006 fcdb 	bl	800b5a4 <HAL_TIM_Base_Init>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d13a      	bne.n	8004c68 <MX_TIM5_Init+0xb8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bf6:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004bf8:	a90a      	add	r1, sp, #40	; 0x28
 8004bfa:	4826      	ldr	r0, [pc, #152]	; (8004c94 <MX_TIM5_Init+0xe4>)
 8004bfc:	f006 fe2a 	bl	800b854 <HAL_TIM_ConfigClockSource>
 8004c00:	2800      	cmp	r0, #0
 8004c02:	d134      	bne.n	8004c6e <MX_TIM5_Init+0xbe>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8004c04:	4823      	ldr	r0, [pc, #140]	; (8004c94 <MX_TIM5_Init+0xe4>)
 8004c06:	f006 fcfd 	bl	800b604 <HAL_TIM_PWM_Init>
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d132      	bne.n	8004c74 <MX_TIM5_Init+0xc4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c12:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004c14:	a907      	add	r1, sp, #28
 8004c16:	481f      	ldr	r0, [pc, #124]	; (8004c94 <MX_TIM5_Init+0xe4>)
 8004c18:	f006 fec6 	bl	800b9a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004c1c:	bb68      	cbnz	r0, 8004c7a <MX_TIM5_Init+0xca>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c1e:	2360      	movs	r3, #96	; 0x60
 8004c20:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 200;
 8004c22:	23c8      	movs	r3, #200	; 0xc8
 8004c24:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c26:	2300      	movs	r3, #0
 8004c28:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c2a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c2c:	2204      	movs	r2, #4
 8004c2e:	4669      	mov	r1, sp
 8004c30:	4818      	ldr	r0, [pc, #96]	; (8004c94 <MX_TIM5_Init+0xe4>)
 8004c32:	f006 fd65 	bl	800b700 <HAL_TIM_PWM_ConfigChannel>
 8004c36:	bb18      	cbnz	r0, 8004c80 <MX_TIM5_Init+0xd0>
  sConfigOC.Pulse = 400;
 8004c38:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004c3c:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c3e:	2208      	movs	r2, #8
 8004c40:	4669      	mov	r1, sp
 8004c42:	4814      	ldr	r0, [pc, #80]	; (8004c94 <MX_TIM5_Init+0xe4>)
 8004c44:	f006 fd5c 	bl	800b700 <HAL_TIM_PWM_ConfigChannel>
 8004c48:	b9e8      	cbnz	r0, 8004c86 <MX_TIM5_Init+0xd6>
  sConfigOC.Pulse = 600;
 8004c4a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8004c4e:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c50:	220c      	movs	r2, #12
 8004c52:	4669      	mov	r1, sp
 8004c54:	480f      	ldr	r0, [pc, #60]	; (8004c94 <MX_TIM5_Init+0xe4>)
 8004c56:	f006 fd53 	bl	800b700 <HAL_TIM_PWM_ConfigChannel>
 8004c5a:	b9b8      	cbnz	r0, 8004c8c <MX_TIM5_Init+0xdc>
  HAL_TIM_MspPostInit(&htim5);
 8004c5c:	480d      	ldr	r0, [pc, #52]	; (8004c94 <MX_TIM5_Init+0xe4>)
 8004c5e:	f7ff ff29 	bl	8004ab4 <HAL_TIM_MspPostInit>
}
 8004c62:	b00f      	add	sp, #60	; 0x3c
 8004c64:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004c68:	f7fd f99c 	bl	8001fa4 <Error_Handler>
 8004c6c:	e7c1      	b.n	8004bf2 <MX_TIM5_Init+0x42>
    Error_Handler();
 8004c6e:	f7fd f999 	bl	8001fa4 <Error_Handler>
 8004c72:	e7c7      	b.n	8004c04 <MX_TIM5_Init+0x54>
    Error_Handler();
 8004c74:	f7fd f996 	bl	8001fa4 <Error_Handler>
 8004c78:	e7c9      	b.n	8004c0e <MX_TIM5_Init+0x5e>
    Error_Handler();
 8004c7a:	f7fd f993 	bl	8001fa4 <Error_Handler>
 8004c7e:	e7ce      	b.n	8004c1e <MX_TIM5_Init+0x6e>
    Error_Handler();
 8004c80:	f7fd f990 	bl	8001fa4 <Error_Handler>
 8004c84:	e7d8      	b.n	8004c38 <MX_TIM5_Init+0x88>
    Error_Handler();
 8004c86:	f7fd f98d 	bl	8001fa4 <Error_Handler>
 8004c8a:	e7de      	b.n	8004c4a <MX_TIM5_Init+0x9a>
    Error_Handler();
 8004c8c:	f7fd f98a 	bl	8001fa4 <Error_Handler>
 8004c90:	e7e4      	b.n	8004c5c <MX_TIM5_Init+0xac>
 8004c92:	bf00      	nop
 8004c94:	20010cf8 	.word	0x20010cf8
 8004c98:	40000c00 	.word	0x40000c00

08004c9c <MX_TIM8_Init>:
{
 8004c9c:	b510      	push	{r4, lr}
 8004c9e:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ca0:	2400      	movs	r4, #0
 8004ca2:	9418      	str	r4, [sp, #96]	; 0x60
 8004ca4:	9419      	str	r4, [sp, #100]	; 0x64
 8004ca6:	941a      	str	r4, [sp, #104]	; 0x68
 8004ca8:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004caa:	9415      	str	r4, [sp, #84]	; 0x54
 8004cac:	9416      	str	r4, [sp, #88]	; 0x58
 8004cae:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004cb0:	940e      	str	r4, [sp, #56]	; 0x38
 8004cb2:	940f      	str	r4, [sp, #60]	; 0x3c
 8004cb4:	9410      	str	r4, [sp, #64]	; 0x40
 8004cb6:	9411      	str	r4, [sp, #68]	; 0x44
 8004cb8:	9412      	str	r4, [sp, #72]	; 0x48
 8004cba:	9413      	str	r4, [sp, #76]	; 0x4c
 8004cbc:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004cbe:	2234      	movs	r2, #52	; 0x34
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	a801      	add	r0, sp, #4
 8004cc4:	f00b fcc4 	bl	8010650 <memset>
  htim8.Instance = TIM8;
 8004cc8:	4846      	ldr	r0, [pc, #280]	; (8004de4 <MX_TIM8_Init+0x148>)
 8004cca:	4b47      	ldr	r3, [pc, #284]	; (8004de8 <MX_TIM8_Init+0x14c>)
 8004ccc:	6003      	str	r3, [r0, #0]
  htim8.Init.Prescaler = 0;
 8004cce:	6044      	str	r4, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cd0:	6084      	str	r4, [r0, #8]
  htim8.Init.Period = 65535;
 8004cd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004cd6:	60c3      	str	r3, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cd8:	6104      	str	r4, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 8004cda:	6144      	str	r4, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cdc:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004cde:	f006 fc61 	bl	800b5a4 <HAL_TIM_Base_Init>
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	d162      	bne.n	8004dac <MX_TIM8_Init+0x110>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cea:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004cec:	a918      	add	r1, sp, #96	; 0x60
 8004cee:	483d      	ldr	r0, [pc, #244]	; (8004de4 <MX_TIM8_Init+0x148>)
 8004cf0:	f006 fdb0 	bl	800b854 <HAL_TIM_ConfigClockSource>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d15c      	bne.n	8004db2 <MX_TIM8_Init+0x116>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004cf8:	483a      	ldr	r0, [pc, #232]	; (8004de4 <MX_TIM8_Init+0x148>)
 8004cfa:	f006 fc83 	bl	800b604 <HAL_TIM_PWM_Init>
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d15a      	bne.n	8004db8 <MX_TIM8_Init+0x11c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d02:	2300      	movs	r3, #0
 8004d04:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004d06:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d08:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004d0a:	a915      	add	r1, sp, #84	; 0x54
 8004d0c:	4835      	ldr	r0, [pc, #212]	; (8004de4 <MX_TIM8_Init+0x148>)
 8004d0e:	f006 fe4b 	bl	800b9a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004d12:	2800      	cmp	r0, #0
 8004d14:	d153      	bne.n	8004dbe <MX_TIM8_Init+0x122>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d16:	2360      	movs	r3, #96	; 0x60
 8004d18:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 1000;
 8004d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d1e:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d20:	2200      	movs	r2, #0
 8004d22:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d24:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d26:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d28:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d2a:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d2c:	a90e      	add	r1, sp, #56	; 0x38
 8004d2e:	482d      	ldr	r0, [pc, #180]	; (8004de4 <MX_TIM8_Init+0x148>)
 8004d30:	f006 fce6 	bl	800b700 <HAL_TIM_PWM_ConfigChannel>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	d145      	bne.n	8004dc4 <MX_TIM8_Init+0x128>
  sConfigOC.Pulse = 2000;
 8004d38:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004d3c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004d3e:	2204      	movs	r2, #4
 8004d40:	a90e      	add	r1, sp, #56	; 0x38
 8004d42:	4828      	ldr	r0, [pc, #160]	; (8004de4 <MX_TIM8_Init+0x148>)
 8004d44:	f006 fcdc 	bl	800b700 <HAL_TIM_PWM_ConfigChannel>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d13e      	bne.n	8004dca <MX_TIM8_Init+0x12e>
  sConfigOC.Pulse = 4000;
 8004d4c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8004d50:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004d52:	2208      	movs	r2, #8
 8004d54:	a90e      	add	r1, sp, #56	; 0x38
 8004d56:	4823      	ldr	r0, [pc, #140]	; (8004de4 <MX_TIM8_Init+0x148>)
 8004d58:	f006 fcd2 	bl	800b700 <HAL_TIM_PWM_ConfigChannel>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d137      	bne.n	8004dd0 <MX_TIM8_Init+0x134>
  sConfigOC.Pulse = 8000;
 8004d60:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8004d64:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004d66:	220c      	movs	r2, #12
 8004d68:	a90e      	add	r1, sp, #56	; 0x38
 8004d6a:	481e      	ldr	r0, [pc, #120]	; (8004de4 <MX_TIM8_Init+0x148>)
 8004d6c:	f006 fcc8 	bl	800b700 <HAL_TIM_PWM_ConfigChannel>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d130      	bne.n	8004dd6 <MX_TIM8_Init+0x13a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004d74:	2300      	movs	r3, #0
 8004d76:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004d78:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004d7a:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004d7c:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004d7e:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004d80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d84:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004d86:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004d88:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004d8a:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004d8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d90:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004d92:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004d94:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004d96:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004d98:	a901      	add	r1, sp, #4
 8004d9a:	4812      	ldr	r0, [pc, #72]	; (8004de4 <MX_TIM8_Init+0x148>)
 8004d9c:	f006 fe5a 	bl	800ba54 <HAL_TIMEx_ConfigBreakDeadTime>
 8004da0:	b9e0      	cbnz	r0, 8004ddc <MX_TIM8_Init+0x140>
  HAL_TIM_MspPostInit(&htim8);
 8004da2:	4810      	ldr	r0, [pc, #64]	; (8004de4 <MX_TIM8_Init+0x148>)
 8004da4:	f7ff fe86 	bl	8004ab4 <HAL_TIM_MspPostInit>
}
 8004da8:	b01c      	add	sp, #112	; 0x70
 8004daa:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004dac:	f7fd f8fa 	bl	8001fa4 <Error_Handler>
 8004db0:	e799      	b.n	8004ce6 <MX_TIM8_Init+0x4a>
    Error_Handler();
 8004db2:	f7fd f8f7 	bl	8001fa4 <Error_Handler>
 8004db6:	e79f      	b.n	8004cf8 <MX_TIM8_Init+0x5c>
    Error_Handler();
 8004db8:	f7fd f8f4 	bl	8001fa4 <Error_Handler>
 8004dbc:	e7a1      	b.n	8004d02 <MX_TIM8_Init+0x66>
    Error_Handler();
 8004dbe:	f7fd f8f1 	bl	8001fa4 <Error_Handler>
 8004dc2:	e7a8      	b.n	8004d16 <MX_TIM8_Init+0x7a>
    Error_Handler();
 8004dc4:	f7fd f8ee 	bl	8001fa4 <Error_Handler>
 8004dc8:	e7b6      	b.n	8004d38 <MX_TIM8_Init+0x9c>
    Error_Handler();
 8004dca:	f7fd f8eb 	bl	8001fa4 <Error_Handler>
 8004dce:	e7bd      	b.n	8004d4c <MX_TIM8_Init+0xb0>
    Error_Handler();
 8004dd0:	f7fd f8e8 	bl	8001fa4 <Error_Handler>
 8004dd4:	e7c4      	b.n	8004d60 <MX_TIM8_Init+0xc4>
    Error_Handler();
 8004dd6:	f7fd f8e5 	bl	8001fa4 <Error_Handler>
 8004dda:	e7cb      	b.n	8004d74 <MX_TIM8_Init+0xd8>
    Error_Handler();
 8004ddc:	f7fd f8e2 	bl	8001fa4 <Error_Handler>
 8004de0:	e7df      	b.n	8004da2 <MX_TIM8_Init+0x106>
 8004de2:	bf00      	nop
 8004de4:	20010d44 	.word	0x20010d44
 8004de8:	40013400 	.word	0x40013400

08004dec <MX_TIM15_Init>:
{
 8004dec:	b510      	push	{r4, lr}
 8004dee:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004df0:	2400      	movs	r4, #0
 8004df2:	9418      	str	r4, [sp, #96]	; 0x60
 8004df4:	9419      	str	r4, [sp, #100]	; 0x64
 8004df6:	941a      	str	r4, [sp, #104]	; 0x68
 8004df8:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dfa:	9415      	str	r4, [sp, #84]	; 0x54
 8004dfc:	9416      	str	r4, [sp, #88]	; 0x58
 8004dfe:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e00:	940e      	str	r4, [sp, #56]	; 0x38
 8004e02:	940f      	str	r4, [sp, #60]	; 0x3c
 8004e04:	9410      	str	r4, [sp, #64]	; 0x40
 8004e06:	9411      	str	r4, [sp, #68]	; 0x44
 8004e08:	9412      	str	r4, [sp, #72]	; 0x48
 8004e0a:	9413      	str	r4, [sp, #76]	; 0x4c
 8004e0c:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004e0e:	2234      	movs	r2, #52	; 0x34
 8004e10:	4621      	mov	r1, r4
 8004e12:	a801      	add	r0, sp, #4
 8004e14:	f00b fc1c 	bl	8010650 <memset>
  htim15.Instance = TIM15;
 8004e18:	482e      	ldr	r0, [pc, #184]	; (8004ed4 <MX_TIM15_Init+0xe8>)
 8004e1a:	4b2f      	ldr	r3, [pc, #188]	; (8004ed8 <MX_TIM15_Init+0xec>)
 8004e1c:	6003      	str	r3, [r0, #0]
  htim15.Init.Prescaler = 0;
 8004e1e:	6044      	str	r4, [r0, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e20:	6084      	str	r4, [r0, #8]
  htim15.Init.Period = 32768;
 8004e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e26:	60c3      	str	r3, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e28:	6104      	str	r4, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 8004e2a:	6144      	str	r4, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e2c:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004e2e:	f006 fbb9 	bl	800b5a4 <HAL_TIM_Base_Init>
 8004e32:	2800      	cmp	r0, #0
 8004e34:	d13c      	bne.n	8004eb0 <MX_TIM15_Init+0xc4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e3a:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004e3c:	a918      	add	r1, sp, #96	; 0x60
 8004e3e:	4825      	ldr	r0, [pc, #148]	; (8004ed4 <MX_TIM15_Init+0xe8>)
 8004e40:	f006 fd08 	bl	800b854 <HAL_TIM_ConfigClockSource>
 8004e44:	2800      	cmp	r0, #0
 8004e46:	d136      	bne.n	8004eb6 <MX_TIM15_Init+0xca>
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004e48:	4822      	ldr	r0, [pc, #136]	; (8004ed4 <MX_TIM15_Init+0xe8>)
 8004e4a:	f006 fbdb 	bl	800b604 <HAL_TIM_PWM_Init>
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	d134      	bne.n	8004ebc <MX_TIM15_Init+0xd0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e52:	2300      	movs	r3, #0
 8004e54:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e56:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004e58:	a915      	add	r1, sp, #84	; 0x54
 8004e5a:	481e      	ldr	r0, [pc, #120]	; (8004ed4 <MX_TIM15_Init+0xe8>)
 8004e5c:	f006 fda4 	bl	800b9a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004e60:	2800      	cmp	r0, #0
 8004e62:	d12e      	bne.n	8004ec2 <MX_TIM15_Init+0xd6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e64:	2360      	movs	r3, #96	; 0x60
 8004e66:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 16000;
 8004e68:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8004e6c:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004e72:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e74:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004e76:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004e78:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004e7a:	2204      	movs	r2, #4
 8004e7c:	a90e      	add	r1, sp, #56	; 0x38
 8004e7e:	4815      	ldr	r0, [pc, #84]	; (8004ed4 <MX_TIM15_Init+0xe8>)
 8004e80:	f006 fc3e 	bl	800b700 <HAL_TIM_PWM_ConfigChannel>
 8004e84:	bb00      	cbnz	r0, 8004ec8 <MX_TIM15_Init+0xdc>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004e86:	2300      	movs	r3, #0
 8004e88:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004e8a:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004e8c:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004e8e:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004e90:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e96:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004e98:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004e9a:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004e9c:	a901      	add	r1, sp, #4
 8004e9e:	480d      	ldr	r0, [pc, #52]	; (8004ed4 <MX_TIM15_Init+0xe8>)
 8004ea0:	f006 fdd8 	bl	800ba54 <HAL_TIMEx_ConfigBreakDeadTime>
 8004ea4:	b998      	cbnz	r0, 8004ece <MX_TIM15_Init+0xe2>
  HAL_TIM_MspPostInit(&htim15);
 8004ea6:	480b      	ldr	r0, [pc, #44]	; (8004ed4 <MX_TIM15_Init+0xe8>)
 8004ea8:	f7ff fe04 	bl	8004ab4 <HAL_TIM_MspPostInit>
}
 8004eac:	b01c      	add	sp, #112	; 0x70
 8004eae:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004eb0:	f7fd f878 	bl	8001fa4 <Error_Handler>
 8004eb4:	e7bf      	b.n	8004e36 <MX_TIM15_Init+0x4a>
    Error_Handler();
 8004eb6:	f7fd f875 	bl	8001fa4 <Error_Handler>
 8004eba:	e7c5      	b.n	8004e48 <MX_TIM15_Init+0x5c>
    Error_Handler();
 8004ebc:	f7fd f872 	bl	8001fa4 <Error_Handler>
 8004ec0:	e7c7      	b.n	8004e52 <MX_TIM15_Init+0x66>
    Error_Handler();
 8004ec2:	f7fd f86f 	bl	8001fa4 <Error_Handler>
 8004ec6:	e7cd      	b.n	8004e64 <MX_TIM15_Init+0x78>
    Error_Handler();
 8004ec8:	f7fd f86c 	bl	8001fa4 <Error_Handler>
 8004ecc:	e7db      	b.n	8004e86 <MX_TIM15_Init+0x9a>
    Error_Handler();
 8004ece:	f7fd f869 	bl	8001fa4 <Error_Handler>
 8004ed2:	e7e8      	b.n	8004ea6 <MX_TIM15_Init+0xba>
 8004ed4:	20010c60 	.word	0x20010c60
 8004ed8:	40014000 	.word	0x40014000

08004edc <MX_TIM20_Init>:
{
 8004edc:	b510      	push	{r4, lr}
 8004ede:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ee0:	2400      	movs	r4, #0
 8004ee2:	9418      	str	r4, [sp, #96]	; 0x60
 8004ee4:	9419      	str	r4, [sp, #100]	; 0x64
 8004ee6:	941a      	str	r4, [sp, #104]	; 0x68
 8004ee8:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004eea:	9415      	str	r4, [sp, #84]	; 0x54
 8004eec:	9416      	str	r4, [sp, #88]	; 0x58
 8004eee:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ef0:	940e      	str	r4, [sp, #56]	; 0x38
 8004ef2:	940f      	str	r4, [sp, #60]	; 0x3c
 8004ef4:	9410      	str	r4, [sp, #64]	; 0x40
 8004ef6:	9411      	str	r4, [sp, #68]	; 0x44
 8004ef8:	9412      	str	r4, [sp, #72]	; 0x48
 8004efa:	9413      	str	r4, [sp, #76]	; 0x4c
 8004efc:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004efe:	2234      	movs	r2, #52	; 0x34
 8004f00:	4621      	mov	r1, r4
 8004f02:	a801      	add	r0, sp, #4
 8004f04:	f00b fba4 	bl	8010650 <memset>
  htim20.Instance = TIM20;
 8004f08:	4846      	ldr	r0, [pc, #280]	; (8005024 <MX_TIM20_Init+0x148>)
 8004f0a:	4b47      	ldr	r3, [pc, #284]	; (8005028 <MX_TIM20_Init+0x14c>)
 8004f0c:	6003      	str	r3, [r0, #0]
  htim20.Init.Prescaler = 0;
 8004f0e:	6044      	str	r4, [r0, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f10:	6084      	str	r4, [r0, #8]
  htim20.Init.Period = 16000;
 8004f12:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8004f16:	60c3      	str	r3, [r0, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f18:	6104      	str	r4, [r0, #16]
  htim20.Init.RepetitionCounter = 0;
 8004f1a:	6144      	str	r4, [r0, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f1c:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8004f1e:	f006 fb41 	bl	800b5a4 <HAL_TIM_Base_Init>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	d162      	bne.n	8004fec <MX_TIM20_Init+0x110>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f2a:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8004f2c:	a918      	add	r1, sp, #96	; 0x60
 8004f2e:	483d      	ldr	r0, [pc, #244]	; (8005024 <MX_TIM20_Init+0x148>)
 8004f30:	f006 fc90 	bl	800b854 <HAL_TIM_ConfigClockSource>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d15c      	bne.n	8004ff2 <MX_TIM20_Init+0x116>
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8004f38:	483a      	ldr	r0, [pc, #232]	; (8005024 <MX_TIM20_Init+0x148>)
 8004f3a:	f006 fb63 	bl	800b604 <HAL_TIM_PWM_Init>
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	d15a      	bne.n	8004ff8 <MX_TIM20_Init+0x11c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f42:	2300      	movs	r3, #0
 8004f44:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004f46:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f48:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8004f4a:	a915      	add	r1, sp, #84	; 0x54
 8004f4c:	4835      	ldr	r0, [pc, #212]	; (8005024 <MX_TIM20_Init+0x148>)
 8004f4e:	f006 fd2b 	bl	800b9a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d153      	bne.n	8004ffe <MX_TIM20_Init+0x122>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f56:	2360      	movs	r3, #96	; 0x60
 8004f58:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 8000;
 8004f5a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8004f5e:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f60:	2200      	movs	r2, #0
 8004f62:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004f64:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f66:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004f68:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004f6a:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f6c:	a90e      	add	r1, sp, #56	; 0x38
 8004f6e:	482d      	ldr	r0, [pc, #180]	; (8005024 <MX_TIM20_Init+0x148>)
 8004f70:	f006 fbc6 	bl	800b700 <HAL_TIM_PWM_ConfigChannel>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d145      	bne.n	8005004 <MX_TIM20_Init+0x128>
  sConfigOC.Pulse = 10000;
 8004f78:	f242 7310 	movw	r3, #10000	; 0x2710
 8004f7c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004f7e:	2204      	movs	r2, #4
 8004f80:	a90e      	add	r1, sp, #56	; 0x38
 8004f82:	4828      	ldr	r0, [pc, #160]	; (8005024 <MX_TIM20_Init+0x148>)
 8004f84:	f006 fbbc 	bl	800b700 <HAL_TIM_PWM_ConfigChannel>
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	d13e      	bne.n	800500a <MX_TIM20_Init+0x12e>
  sConfigOC.Pulse = 12000;
 8004f8c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8004f90:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004f92:	2208      	movs	r2, #8
 8004f94:	a90e      	add	r1, sp, #56	; 0x38
 8004f96:	4823      	ldr	r0, [pc, #140]	; (8005024 <MX_TIM20_Init+0x148>)
 8004f98:	f006 fbb2 	bl	800b700 <HAL_TIM_PWM_ConfigChannel>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d137      	bne.n	8005010 <MX_TIM20_Init+0x134>
  sConfigOC.Pulse = 15000;
 8004fa0:	f643 2398 	movw	r3, #15000	; 0x3a98
 8004fa4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004fa6:	220c      	movs	r2, #12
 8004fa8:	a90e      	add	r1, sp, #56	; 0x38
 8004faa:	481e      	ldr	r0, [pc, #120]	; (8005024 <MX_TIM20_Init+0x148>)
 8004fac:	f006 fba8 	bl	800b700 <HAL_TIM_PWM_ConfigChannel>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	d130      	bne.n	8005016 <MX_TIM20_Init+0x13a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004fb8:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004fba:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004fbc:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004fbe:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004fc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fc4:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004fc6:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004fc8:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004fca:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004fcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fd0:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004fd2:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004fd4:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004fd6:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8004fd8:	a901      	add	r1, sp, #4
 8004fda:	4812      	ldr	r0, [pc, #72]	; (8005024 <MX_TIM20_Init+0x148>)
 8004fdc:	f006 fd3a 	bl	800ba54 <HAL_TIMEx_ConfigBreakDeadTime>
 8004fe0:	b9e0      	cbnz	r0, 800501c <MX_TIM20_Init+0x140>
  HAL_TIM_MspPostInit(&htim20);
 8004fe2:	4810      	ldr	r0, [pc, #64]	; (8005024 <MX_TIM20_Init+0x148>)
 8004fe4:	f7ff fd66 	bl	8004ab4 <HAL_TIM_MspPostInit>
}
 8004fe8:	b01c      	add	sp, #112	; 0x70
 8004fea:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004fec:	f7fc ffda 	bl	8001fa4 <Error_Handler>
 8004ff0:	e799      	b.n	8004f26 <MX_TIM20_Init+0x4a>
    Error_Handler();
 8004ff2:	f7fc ffd7 	bl	8001fa4 <Error_Handler>
 8004ff6:	e79f      	b.n	8004f38 <MX_TIM20_Init+0x5c>
    Error_Handler();
 8004ff8:	f7fc ffd4 	bl	8001fa4 <Error_Handler>
 8004ffc:	e7a1      	b.n	8004f42 <MX_TIM20_Init+0x66>
    Error_Handler();
 8004ffe:	f7fc ffd1 	bl	8001fa4 <Error_Handler>
 8005002:	e7a8      	b.n	8004f56 <MX_TIM20_Init+0x7a>
    Error_Handler();
 8005004:	f7fc ffce 	bl	8001fa4 <Error_Handler>
 8005008:	e7b6      	b.n	8004f78 <MX_TIM20_Init+0x9c>
    Error_Handler();
 800500a:	f7fc ffcb 	bl	8001fa4 <Error_Handler>
 800500e:	e7bd      	b.n	8004f8c <MX_TIM20_Init+0xb0>
    Error_Handler();
 8005010:	f7fc ffc8 	bl	8001fa4 <Error_Handler>
 8005014:	e7c4      	b.n	8004fa0 <MX_TIM20_Init+0xc4>
    Error_Handler();
 8005016:	f7fc ffc5 	bl	8001fa4 <Error_Handler>
 800501a:	e7cb      	b.n	8004fb4 <MX_TIM20_Init+0xd8>
    Error_Handler();
 800501c:	f7fc ffc2 	bl	8001fa4 <Error_Handler>
 8005020:	e7df      	b.n	8004fe2 <MX_TIM20_Init+0x106>
 8005022:	bf00      	nop
 8005024:	20010cac 	.word	0x20010cac
 8005028:	40015000 	.word	0x40015000

0800502c <MX_UART4_Init>:
UART_HandleTypeDef huart3;


/* UART4 init function */
void MX_UART4_Init(void)
{
 800502c:	b508      	push	{r3, lr}
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800502e:	4817      	ldr	r0, [pc, #92]	; (800508c <MX_UART4_Init+0x60>)
 8005030:	4b17      	ldr	r3, [pc, #92]	; (8005090 <MX_UART4_Init+0x64>)
 8005032:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8005034:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005038:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800503a:	2300      	movs	r3, #0
 800503c:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800503e:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005040:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005042:	220c      	movs	r2, #12
 8005044:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005046:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005048:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800504a:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800504c:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800504e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005050:	f007 f83b 	bl	800c0ca <HAL_UART_Init>
 8005054:	b970      	cbnz	r0, 8005074 <MX_UART4_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005056:	2100      	movs	r1, #0
 8005058:	480c      	ldr	r0, [pc, #48]	; (800508c <MX_UART4_Init+0x60>)
 800505a:	f007 f8ae 	bl	800c1ba <HAL_UARTEx_SetTxFifoThreshold>
 800505e:	b960      	cbnz	r0, 800507a <MX_UART4_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005060:	2100      	movs	r1, #0
 8005062:	480a      	ldr	r0, [pc, #40]	; (800508c <MX_UART4_Init+0x60>)
 8005064:	f007 f8ce 	bl	800c204 <HAL_UARTEx_SetRxFifoThreshold>
 8005068:	b950      	cbnz	r0, 8005080 <MX_UART4_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800506a:	4808      	ldr	r0, [pc, #32]	; (800508c <MX_UART4_Init+0x60>)
 800506c:	f007 f886 	bl	800c17c <HAL_UARTEx_DisableFifoMode>
 8005070:	b948      	cbnz	r0, 8005086 <MX_UART4_Init+0x5a>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005072:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005074:	f7fc ff96 	bl	8001fa4 <Error_Handler>
 8005078:	e7ed      	b.n	8005056 <MX_UART4_Init+0x2a>
    Error_Handler();
 800507a:	f7fc ff93 	bl	8001fa4 <Error_Handler>
 800507e:	e7ef      	b.n	8005060 <MX_UART4_Init+0x34>
    Error_Handler();
 8005080:	f7fc ff90 	bl	8001fa4 <Error_Handler>
 8005084:	e7f1      	b.n	800506a <MX_UART4_Init+0x3e>
    Error_Handler();
 8005086:	f7fc ff8d 	bl	8001fa4 <Error_Handler>
}
 800508a:	e7f2      	b.n	8005072 <MX_UART4_Init+0x46>
 800508c:	20010eb0 	.word	0x20010eb0
 8005090:	40004c00 	.word	0x40004c00

08005094 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8005094:	b508      	push	{r3, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005096:	4817      	ldr	r0, [pc, #92]	; (80050f4 <MX_UART5_Init+0x60>)
 8005098:	4b17      	ldr	r3, [pc, #92]	; (80050f8 <MX_UART5_Init+0x64>)
 800509a:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 800509c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80050a0:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80050a2:	2300      	movs	r3, #0
 80050a4:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80050a6:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80050a8:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80050aa:	220c      	movs	r2, #12
 80050ac:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050ae:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80050b0:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050b2:	6203      	str	r3, [r0, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80050b4:	6243      	str	r3, [r0, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80050b6:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80050b8:	f007 f807 	bl	800c0ca <HAL_UART_Init>
 80050bc:	b970      	cbnz	r0, 80050dc <MX_UART5_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050be:	2100      	movs	r1, #0
 80050c0:	480c      	ldr	r0, [pc, #48]	; (80050f4 <MX_UART5_Init+0x60>)
 80050c2:	f007 f87a 	bl	800c1ba <HAL_UARTEx_SetTxFifoThreshold>
 80050c6:	b960      	cbnz	r0, 80050e2 <MX_UART5_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050c8:	2100      	movs	r1, #0
 80050ca:	480a      	ldr	r0, [pc, #40]	; (80050f4 <MX_UART5_Init+0x60>)
 80050cc:	f007 f89a 	bl	800c204 <HAL_UARTEx_SetRxFifoThreshold>
 80050d0:	b950      	cbnz	r0, 80050e8 <MX_UART5_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80050d2:	4808      	ldr	r0, [pc, #32]	; (80050f4 <MX_UART5_Init+0x60>)
 80050d4:	f007 f852 	bl	800c17c <HAL_UARTEx_DisableFifoMode>
 80050d8:	b948      	cbnz	r0, 80050ee <MX_UART5_Init+0x5a>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80050da:	bd08      	pop	{r3, pc}
    Error_Handler();
 80050dc:	f7fc ff62 	bl	8001fa4 <Error_Handler>
 80050e0:	e7ed      	b.n	80050be <MX_UART5_Init+0x2a>
    Error_Handler();
 80050e2:	f7fc ff5f 	bl	8001fa4 <Error_Handler>
 80050e6:	e7ef      	b.n	80050c8 <MX_UART5_Init+0x34>
    Error_Handler();
 80050e8:	f7fc ff5c 	bl	8001fa4 <Error_Handler>
 80050ec:	e7f1      	b.n	80050d2 <MX_UART5_Init+0x3e>
    Error_Handler();
 80050ee:	f7fc ff59 	bl	8001fa4 <Error_Handler>
}
 80050f2:	e7f2      	b.n	80050da <MX_UART5_Init+0x46>
 80050f4:	20010f40 	.word	0x20010f40
 80050f8:	40005000 	.word	0x40005000

080050fc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80050fc:	b570      	push	{r4, r5, r6, lr}
 80050fe:	b0a6      	sub	sp, #152	; 0x98

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005100:	2220      	movs	r2, #32
 8005102:	2100      	movs	r1, #0
 8005104:	a81e      	add	r0, sp, #120	; 0x78
 8005106:	f00b faa3 	bl	8010650 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800510a:	2100      	movs	r1, #0
 800510c:	9118      	str	r1, [sp, #96]	; 0x60
 800510e:	9119      	str	r1, [sp, #100]	; 0x64
 8005110:	911a      	str	r1, [sp, #104]	; 0x68
 8005112:	911b      	str	r1, [sp, #108]	; 0x6c
 8005114:	911c      	str	r1, [sp, #112]	; 0x70
 8005116:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005118:	2254      	movs	r2, #84	; 0x54
 800511a:	a803      	add	r0, sp, #12
 800511c:	f00b fa98 	bl	8010650 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005120:	2301      	movs	r3, #1
 8005122:	9303      	str	r3, [sp, #12]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005124:	a803      	add	r0, sp, #12
 8005126:	f005 fd91 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 800512a:	2800      	cmp	r0, #0
 800512c:	f040 80d2 	bne.w	80052d4 <MX_USART1_UART_Init+0x1d8>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005130:	4b6a      	ldr	r3, [pc, #424]	; (80052dc <MX_USART1_UART_Init+0x1e0>)
 8005132:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005134:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005138:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800513a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800513c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005140:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8005142:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005144:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800514c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800514e:	f002 0201 	and.w	r2, r2, #1
 8005152:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8005154:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800515c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800515e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005164:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8005166:	9b00      	ldr	r3, [sp, #0]
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOG);
  /**USART1 GPIO Configuration
  PA10   ------> USART1_RX
  PG9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8005168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800516c:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800516e:	2602      	movs	r6, #2
 8005170:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005172:	2400      	movs	r4, #0
 8005174:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005176:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005178:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800517a:	2507      	movs	r5, #7
 800517c:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800517e:	a918      	add	r1, sp, #96	; 0x60
 8005180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005184:	f007 f92c 	bl	800c3e0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8005188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800518c:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800518e:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005190:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005192:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005194:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8005196:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005198:	a918      	add	r1, sp, #96	; 0x60
 800519a:	4851      	ldr	r0, [pc, #324]	; (80052e0 <MX_USART1_UART_Init+0x1e4>)
 800519c:	f007 f920 	bl	800c3e0 <LL_GPIO_Init>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 80051a0:	4b50      	ldr	r3, [pc, #320]	; (80052e4 <MX_USART1_UART_Init+0x1e8>)
 80051a2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 80051a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80051aa:	f042 0218 	orr.w	r2, r2, #24
 80051ae:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80051b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80051b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051b8:	f022 0210 	bic.w	r2, r2, #16
 80051bc:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 80051be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80051c0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80051c4:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 80051c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80051c8:	f022 0220 	bic.w	r2, r2, #32
 80051cc:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 80051ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80051d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051d4:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 80051d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80051d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051dc:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 80051de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80051e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051e4:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 80051e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80051e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051ec:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 80051ee:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 80051f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80051f6:	f042 0219 	orr.w	r2, r2, #25
 80051fa:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80051fe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005202:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005206:	f022 0210 	bic.w	r2, r2, #16
 800520a:	f042 0210 	orr.w	r2, r2, #16
 800520e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8005212:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005216:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800521a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 800521e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005222:	f022 0220 	bic.w	r2, r2, #32
 8005226:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 800522a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800522e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005232:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8005236:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800523a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800523e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8005242:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005246:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800524a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 800524e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005252:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005256:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 800525a:	941e      	str	r4, [sp, #120]	; 0x78
  USART_InitStruct.BaudRate = 115200;
 800525c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005260:	931f      	str	r3, [sp, #124]	; 0x7c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005262:	9420      	str	r4, [sp, #128]	; 0x80
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005264:	9421      	str	r4, [sp, #132]	; 0x84
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005266:	9422      	str	r4, [sp, #136]	; 0x88
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005268:	230c      	movs	r3, #12
 800526a:	9323      	str	r3, [sp, #140]	; 0x8c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800526c:	9424      	str	r4, [sp, #144]	; 0x90
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800526e:	9425      	str	r4, [sp, #148]	; 0x94
  LL_USART_Init(USART1, &USART_InitStruct);
 8005270:	a91e      	add	r1, sp, #120	; 0x78
 8005272:	481d      	ldr	r0, [pc, #116]	; (80052e8 <MX_USART1_UART_Init+0x1ec>)
 8005274:	f007 faca 	bl	800c80c <LL_USART_Init>
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8005278:	4b1c      	ldr	r3, [pc, #112]	; (80052ec <MX_USART1_UART_Init+0x1f0>)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	e853 2f00 	ldrex	r2, [r3]
 800527e:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	e843 2100 	strex	r1, r2, [r3]
 8005286:	2900      	cmp	r1, #0
 8005288:	d1f6      	bne.n	8005278 <MX_USART1_UART_Init+0x17c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528a:	e853 2f00 	ldrex	r2, [r3]
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800528e:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	e843 2100 	strex	r1, r2, [r3]
 8005296:	2900      	cmp	r1, #0
 8005298:	d1f7      	bne.n	800528a <MX_USART1_UART_Init+0x18e>
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 800529a:	4b13      	ldr	r3, [pc, #76]	; (80052e8 <MX_USART1_UART_Init+0x1ec>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80052a2:	601a      	str	r2, [r3, #0]
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052aa:	605a      	str	r2, [r3, #4]

  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052b2:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80052bc:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <MX_USART1_UART_Init+0x1ec>)
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80052c4:	d0fa      	beq.n	80052bc <MX_USART1_UART_Init+0x1c0>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80052c6:	4b08      	ldr	r3, [pc, #32]	; (80052e8 <MX_USART1_UART_Init+0x1ec>)
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80052ce:	d0f5      	beq.n	80052bc <MX_USART1_UART_Init+0x1c0>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80052d0:	b026      	add	sp, #152	; 0x98
 80052d2:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 80052d4:	f7fc fe66 	bl	8001fa4 <Error_Handler>
 80052d8:	e72a      	b.n	8005130 <MX_USART1_UART_Init+0x34>
 80052da:	bf00      	nop
 80052dc:	40021000 	.word	0x40021000
 80052e0:	48001800 	.word	0x48001800
 80052e4:	40020000 	.word	0x40020000
 80052e8:	40013800 	.word	0x40013800
 80052ec:	40013808 	.word	0x40013808

080052f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80052f0:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80052f2:	4817      	ldr	r0, [pc, #92]	; (8005350 <MX_USART2_UART_Init+0x60>)
 80052f4:	4b17      	ldr	r3, [pc, #92]	; (8005354 <MX_USART2_UART_Init+0x64>)
 80052f6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80052f8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80052fc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80052fe:	2300      	movs	r3, #0
 8005300:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005302:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005304:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005306:	220c      	movs	r2, #12
 8005308:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800530a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800530c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800530e:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005310:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005312:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005314:	f006 fed9 	bl	800c0ca <HAL_UART_Init>
 8005318:	b970      	cbnz	r0, 8005338 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800531a:	2100      	movs	r1, #0
 800531c:	480c      	ldr	r0, [pc, #48]	; (8005350 <MX_USART2_UART_Init+0x60>)
 800531e:	f006 ff4c 	bl	800c1ba <HAL_UARTEx_SetTxFifoThreshold>
 8005322:	b960      	cbnz	r0, 800533e <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005324:	2100      	movs	r1, #0
 8005326:	480a      	ldr	r0, [pc, #40]	; (8005350 <MX_USART2_UART_Init+0x60>)
 8005328:	f006 ff6c 	bl	800c204 <HAL_UARTEx_SetRxFifoThreshold>
 800532c:	b950      	cbnz	r0, 8005344 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800532e:	4808      	ldr	r0, [pc, #32]	; (8005350 <MX_USART2_UART_Init+0x60>)
 8005330:	f006 ff24 	bl	800c17c <HAL_UARTEx_DisableFifoMode>
 8005334:	b948      	cbnz	r0, 800534a <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005336:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005338:	f7fc fe34 	bl	8001fa4 <Error_Handler>
 800533c:	e7ed      	b.n	800531a <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 800533e:	f7fc fe31 	bl	8001fa4 <Error_Handler>
 8005342:	e7ef      	b.n	8005324 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8005344:	f7fc fe2e 	bl	8001fa4 <Error_Handler>
 8005348:	e7f1      	b.n	800532e <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 800534a:	f7fc fe2b 	bl	8001fa4 <Error_Handler>
}
 800534e:	e7f2      	b.n	8005336 <MX_USART2_UART_Init+0x46>
 8005350:	20010d90 	.word	0x20010d90
 8005354:	40004400 	.word	0x40004400

08005358 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005358:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800535a:	4817      	ldr	r0, [pc, #92]	; (80053b8 <MX_USART3_UART_Init+0x60>)
 800535c:	4b17      	ldr	r3, [pc, #92]	; (80053bc <MX_USART3_UART_Init+0x64>)
 800535e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8005360:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005364:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005366:	2300      	movs	r3, #0
 8005368:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800536a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800536c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800536e:	220c      	movs	r2, #12
 8005370:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005372:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005374:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005376:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005378:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800537a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800537c:	f006 fea5 	bl	800c0ca <HAL_UART_Init>
 8005380:	b970      	cbnz	r0, 80053a0 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005382:	2100      	movs	r1, #0
 8005384:	480c      	ldr	r0, [pc, #48]	; (80053b8 <MX_USART3_UART_Init+0x60>)
 8005386:	f006 ff18 	bl	800c1ba <HAL_UARTEx_SetTxFifoThreshold>
 800538a:	b960      	cbnz	r0, 80053a6 <MX_USART3_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800538c:	2100      	movs	r1, #0
 800538e:	480a      	ldr	r0, [pc, #40]	; (80053b8 <MX_USART3_UART_Init+0x60>)
 8005390:	f006 ff38 	bl	800c204 <HAL_UARTEx_SetRxFifoThreshold>
 8005394:	b950      	cbnz	r0, 80053ac <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005396:	4808      	ldr	r0, [pc, #32]	; (80053b8 <MX_USART3_UART_Init+0x60>)
 8005398:	f006 fef0 	bl	800c17c <HAL_UARTEx_DisableFifoMode>
 800539c:	b948      	cbnz	r0, 80053b2 <MX_USART3_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800539e:	bd08      	pop	{r3, pc}
    Error_Handler();
 80053a0:	f7fc fe00 	bl	8001fa4 <Error_Handler>
 80053a4:	e7ed      	b.n	8005382 <MX_USART3_UART_Init+0x2a>
    Error_Handler();
 80053a6:	f7fc fdfd 	bl	8001fa4 <Error_Handler>
 80053aa:	e7ef      	b.n	800538c <MX_USART3_UART_Init+0x34>
    Error_Handler();
 80053ac:	f7fc fdfa 	bl	8001fa4 <Error_Handler>
 80053b0:	e7f1      	b.n	8005396 <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 80053b2:	f7fc fdf7 	bl	8001fa4 <Error_Handler>
}
 80053b6:	e7f2      	b.n	800539e <MX_USART3_UART_Init+0x46>
 80053b8:	20010e20 	.word	0x20010e20
 80053bc:	40004800 	.word	0x40004800

080053c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	b0a4      	sub	sp, #144	; 0x90
 80053c4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053c6:	2100      	movs	r1, #0
 80053c8:	911f      	str	r1, [sp, #124]	; 0x7c
 80053ca:	9120      	str	r1, [sp, #128]	; 0x80
 80053cc:	9121      	str	r1, [sp, #132]	; 0x84
 80053ce:	9122      	str	r1, [sp, #136]	; 0x88
 80053d0:	9123      	str	r1, [sp, #140]	; 0x8c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80053d2:	2254      	movs	r2, #84	; 0x54
 80053d4:	a80a      	add	r0, sp, #40	; 0x28
 80053d6:	f00b f93b 	bl	8010650 <memset>
  if(uartHandle->Instance==UART4)
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	4a66      	ldr	r2, [pc, #408]	; (8005578 <HAL_UART_MspInit+0x1b8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00b      	beq.n	80053fa <HAL_UART_MspInit+0x3a>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART5)
 80053e2:	4a66      	ldr	r2, [pc, #408]	; (800557c <HAL_UART_MspInit+0x1bc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d033      	beq.n	8005450 <HAL_UART_MspInit+0x90>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 80053e8:	4a65      	ldr	r2, [pc, #404]	; (8005580 <HAL_UART_MspInit+0x1c0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d06f      	beq.n	80054ce <HAL_UART_MspInit+0x10e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 80053ee:	4a65      	ldr	r2, [pc, #404]	; (8005584 <HAL_UART_MspInit+0x1c4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	f000 8096 	beq.w	8005522 <HAL_UART_MspInit+0x162>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80053f6:	b024      	add	sp, #144	; 0x90
 80053f8:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80053fa:	2308      	movs	r3, #8
 80053fc:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80053fe:	a80a      	add	r0, sp, #40	; 0x28
 8005400:	f005 fc24 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 8005404:	bb08      	cbnz	r0, 800544a <HAL_UART_MspInit+0x8a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8005406:	4b60      	ldr	r3, [pc, #384]	; (8005588 <HAL_UART_MspInit+0x1c8>)
 8005408:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800540a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800540e:	659a      	str	r2, [r3, #88]	; 0x58
 8005410:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005412:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8005416:	9201      	str	r2, [sp, #4]
 8005418:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800541a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800541c:	f042 0204 	orr.w	r2, r2, #4
 8005420:	64da      	str	r2, [r3, #76]	; 0x4c
 8005422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	9302      	str	r3, [sp, #8]
 800542a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800542c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005430:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005432:	2302      	movs	r3, #2
 8005434:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005436:	2300      	movs	r3, #0
 8005438:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800543a:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800543c:	2305      	movs	r3, #5
 800543e:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005440:	a91f      	add	r1, sp, #124	; 0x7c
 8005442:	4852      	ldr	r0, [pc, #328]	; (800558c <HAL_UART_MspInit+0x1cc>)
 8005444:	f003 f9f0 	bl	8008828 <HAL_GPIO_Init>
 8005448:	e7d5      	b.n	80053f6 <HAL_UART_MspInit+0x36>
      Error_Handler();
 800544a:	f7fc fdab 	bl	8001fa4 <Error_Handler>
 800544e:	e7da      	b.n	8005406 <HAL_UART_MspInit+0x46>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8005450:	2310      	movs	r3, #16
 8005452:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005454:	a80a      	add	r0, sp, #40	; 0x28
 8005456:	f005 fbf9 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 800545a:	2800      	cmp	r0, #0
 800545c:	d134      	bne.n	80054c8 <HAL_UART_MspInit+0x108>
    __HAL_RCC_UART5_CLK_ENABLE();
 800545e:	4b4a      	ldr	r3, [pc, #296]	; (8005588 <HAL_UART_MspInit+0x1c8>)
 8005460:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005462:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005466:	659a      	str	r2, [r3, #88]	; 0x58
 8005468:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800546a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800546e:	9203      	str	r2, [sp, #12]
 8005470:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005474:	f042 0204 	orr.w	r2, r2, #4
 8005478:	64da      	str	r2, [r3, #76]	; 0x4c
 800547a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800547c:	f002 0204 	and.w	r2, r2, #4
 8005480:	9204      	str	r2, [sp, #16]
 8005482:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005484:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005486:	f042 0208 	orr.w	r2, r2, #8
 800548a:	64da      	str	r2, [r3, #76]	; 0x4c
 800548c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	9305      	str	r3, [sp, #20]
 8005494:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = LIN_TX_Pin;
 8005496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800549a:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800549c:	2602      	movs	r6, #2
 800549e:	9620      	str	r6, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a0:	2400      	movs	r4, #0
 80054a2:	9421      	str	r4, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054a4:	9422      	str	r4, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80054a6:	2505      	movs	r5, #5
 80054a8:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(LIN_TX_GPIO_Port, &GPIO_InitStruct);
 80054aa:	a91f      	add	r1, sp, #124	; 0x7c
 80054ac:	4837      	ldr	r0, [pc, #220]	; (800558c <HAL_UART_MspInit+0x1cc>)
 80054ae:	f003 f9bb 	bl	8008828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIN_RX_Pin;
 80054b2:	2304      	movs	r3, #4
 80054b4:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b6:	9620      	str	r6, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b8:	9421      	str	r4, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ba:	9422      	str	r4, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80054bc:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(LIN_RX_GPIO_Port, &GPIO_InitStruct);
 80054be:	a91f      	add	r1, sp, #124	; 0x7c
 80054c0:	4833      	ldr	r0, [pc, #204]	; (8005590 <HAL_UART_MspInit+0x1d0>)
 80054c2:	f003 f9b1 	bl	8008828 <HAL_GPIO_Init>
 80054c6:	e796      	b.n	80053f6 <HAL_UART_MspInit+0x36>
      Error_Handler();
 80054c8:	f7fc fd6c 	bl	8001fa4 <Error_Handler>
 80054cc:	e7c7      	b.n	800545e <HAL_UART_MspInit+0x9e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80054ce:	2302      	movs	r3, #2
 80054d0:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054d2:	a80a      	add	r0, sp, #40	; 0x28
 80054d4:	f005 fbba 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 80054d8:	bb00      	cbnz	r0, 800551c <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80054da:	4b2b      	ldr	r3, [pc, #172]	; (8005588 <HAL_UART_MspInit+0x1c8>)
 80054dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80054de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80054e2:	659a      	str	r2, [r3, #88]	; 0x58
 80054e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80054e6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80054ea:	9206      	str	r2, [sp, #24]
 80054ec:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054f0:	f042 0202 	orr.w	r2, r2, #2
 80054f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80054f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	9307      	str	r3, [sp, #28]
 80054fe:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8005500:	2318      	movs	r3, #24
 8005502:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005504:	2302      	movs	r3, #2
 8005506:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005508:	2300      	movs	r3, #0
 800550a:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800550c:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800550e:	2307      	movs	r3, #7
 8005510:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005512:	a91f      	add	r1, sp, #124	; 0x7c
 8005514:	481f      	ldr	r0, [pc, #124]	; (8005594 <HAL_UART_MspInit+0x1d4>)
 8005516:	f003 f987 	bl	8008828 <HAL_GPIO_Init>
 800551a:	e76c      	b.n	80053f6 <HAL_UART_MspInit+0x36>
      Error_Handler();
 800551c:	f7fc fd42 	bl	8001fa4 <Error_Handler>
 8005520:	e7db      	b.n	80054da <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005522:	2304      	movs	r3, #4
 8005524:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005526:	a80a      	add	r0, sp, #40	; 0x28
 8005528:	f005 fb90 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 800552c:	bb08      	cbnz	r0, 8005572 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800552e:	4b16      	ldr	r3, [pc, #88]	; (8005588 <HAL_UART_MspInit+0x1c8>)
 8005530:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005532:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005536:	659a      	str	r2, [r3, #88]	; 0x58
 8005538:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800553a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800553e:	9208      	str	r2, [sp, #32]
 8005540:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005544:	f042 0202 	orr.w	r2, r2, #2
 8005548:	64da      	str	r2, [r3, #76]	; 0x4c
 800554a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	9309      	str	r3, [sp, #36]	; 0x24
 8005552:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005554:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005558:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800555a:	2302      	movs	r3, #2
 800555c:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800555e:	2300      	movs	r3, #0
 8005560:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005562:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005564:	2307      	movs	r3, #7
 8005566:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005568:	a91f      	add	r1, sp, #124	; 0x7c
 800556a:	480a      	ldr	r0, [pc, #40]	; (8005594 <HAL_UART_MspInit+0x1d4>)
 800556c:	f003 f95c 	bl	8008828 <HAL_GPIO_Init>
}
 8005570:	e741      	b.n	80053f6 <HAL_UART_MspInit+0x36>
      Error_Handler();
 8005572:	f7fc fd17 	bl	8001fa4 <Error_Handler>
 8005576:	e7da      	b.n	800552e <HAL_UART_MspInit+0x16e>
 8005578:	40004c00 	.word	0x40004c00
 800557c:	40005000 	.word	0x40005000
 8005580:	40004400 	.word	0x40004400
 8005584:	40004800 	.word	0x40004800
 8005588:	40021000 	.word	0x40021000
 800558c:	48000800 	.word	0x48000800
 8005590:	48000c00 	.word	0x48000c00
 8005594:	48000400 	.word	0x48000400

08005598 <upper>:
/* Returns upper 4 bits of cell_t
 * 		@param block_t block
 * **/
block_t upper(block_t block) {
	return (block & 0xF0) >> 4;
}
 8005598:	0900      	lsrs	r0, r0, #4
 800559a:	4770      	bx	lr

0800559c <lower>:

/* Returns lower 4 bits of cell_t */
block_t lower(block_t block) {
	return block & 0x0F;
}
 800559c:	f000 000f 	and.w	r0, r0, #15
 80055a0:	4770      	bx	lr

080055a2 <pixel_to_block>:
 */


block_c pixel_to_block(pixel_c pixel_coord) {
	return pixel_coord / BLOCK_WIDTH;
}
 80055a2:	0880      	lsrs	r0, r0, #2
 80055a4:	4770      	bx	lr

080055a6 <block_to_pixel>:

pixel_c block_to_pixel(block_c block_coord) {
	return BLOCK_WIDTH + block_coord * BLOCK_WIDTH - 1;
 80055a6:	3001      	adds	r0, #1
 80055a8:	0080      	lsls	r0, r0, #2
 80055aa:	3801      	subs	r0, #1
}
 80055ac:	b280      	uxth	r0, r0
 80055ae:	4770      	bx	lr

080055b0 <cell_x_to_block_left>:

// cell represents the
block_c cell_x_to_block_left(cell_c cell_coord) {
	return 2 * cell_coord;
 80055b0:	0040      	lsls	r0, r0, #1
 80055b2:	b280      	uxth	r0, r0
}
 80055b4:	4770      	bx	lr

080055b6 <cell_x_to_block_right>:

block_c cell_x_to_block_right(cell_c cell_coord) {
	return 2 * cell_coord + 1;
 80055b6:	0040      	lsls	r0, r0, #1
 80055b8:	3001      	adds	r0, #1
}
 80055ba:	b280      	uxth	r0, r0
 80055bc:	4770      	bx	lr

080055be <cell_y_to_block>:

block_c cell_y_to_block(cell_c cell_coord) {
	return cell_coord;
}
 80055be:	4770      	bx	lr

080055c0 <block_to_cell_x>:

cell_c block_to_cell_x(block_c block_coord) {
	return block_coord / 2;
}
 80055c0:	0840      	lsrs	r0, r0, #1
 80055c2:	4770      	bx	lr

080055c4 <block_to_cell_y>:

cell_c block_to_cell_y(block_c block_coord) {
	return block_coord;
}
 80055c4:	4770      	bx	lr

080055c6 <pixel_to_cell_x>:

cell_c pixel_to_cell_x(pixel_c pixel_coord) {
 80055c6:	b508      	push	{r3, lr}
	return block_to_cell_x(
 80055c8:	f7ff ffeb 	bl	80055a2 <pixel_to_block>
 80055cc:	f7ff fff8 	bl	80055c0 <block_to_cell_x>
			pixel_to_block(pixel_coord));
}
 80055d0:	bd08      	pop	{r3, pc}

080055d2 <pixel_to_cell_y>:

cell_c pixel_to_cell_y(pixel_c pixel_coord) {
 80055d2:	b508      	push	{r3, lr}
	return pixel_to_block(pixel_coord);
 80055d4:	f7ff ffe5 	bl	80055a2 <pixel_to_block>
}
 80055d8:	bd08      	pop	{r3, pc}

080055da <new_cow>:
	34, 34, 0, 0, 34, 34, 0, 34, 34, 82, 0, 34,
	34, 34, 34, 34, 34, 34, 0, 34, 34, 34, 0, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34
};

	cow* new_cow (life_points* lp, velocity* vel, pixel_position* pos, move* mov) {
 80055da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055de:	4681      	mov	r9, r0
 80055e0:	4688      	mov	r8, r1
 80055e2:	4617      	mov	r7, r2
 80055e4:	461e      	mov	r6, r3
		cow* krava = (cow*)malloc(sizeof(cow));
 80055e6:	201c      	movs	r0, #28
 80055e8:	f00b f822 	bl	8010630 <malloc>
 80055ec:	4604      	mov	r4, r0

		krava->state = 0;
 80055ee:	2500      	movs	r5, #0
 80055f0:	7105      	strb	r5, [r0, #4]
		krava->lp		= (life_points*)malloc(sizeof(life_points));
 80055f2:	2002      	movs	r0, #2
 80055f4:	f00b f81c 	bl	8010630 <malloc>
 80055f8:	6020      	str	r0, [r4, #0]
		krava->lp		= lp;
 80055fa:	f8c4 9000 	str.w	r9, [r4]
		krava->vel	= (velocity*)malloc(sizeof(velocity));
 80055fe:	2004      	movs	r0, #4
 8005600:	f00b f816 	bl	8010630 <malloc>
 8005604:	60a0      	str	r0, [r4, #8]
		krava->vel	= vel;
 8005606:	f8c4 8008 	str.w	r8, [r4, #8]
		krava->pos	= (pixel_position*)malloc(sizeof(pixel_position));
 800560a:	2004      	movs	r0, #4
 800560c:	f00b f810 	bl	8010630 <malloc>
 8005610:	60e0      	str	r0, [r4, #12]
		krava->pos  = pos;
 8005612:	60e7      	str	r7, [r4, #12]
		krava->mov 	= (move*) malloc(sizeof(pixel_position));
 8005614:	2004      	movs	r0, #4
 8005616:	f00b f80b 	bl	8010630 <malloc>
 800561a:	6120      	str	r0, [r4, #16]
		krava->mov 	= mov;
 800561c:	6126      	str	r6, [r4, #16]

		krava->next = (cow*)malloc(sizeof(cow));
 800561e:	201c      	movs	r0, #28
 8005620:	f00b f806 	bl	8010630 <malloc>
 8005624:	6160      	str	r0, [r4, #20]
		krava->next = NULL;
 8005626:	6165      	str	r5, [r4, #20]
		krava->prev = (cow*)malloc(sizeof(cow));
 8005628:	201c      	movs	r0, #28
 800562a:	f00b f801 	bl	8010630 <malloc>
 800562e:	61a0      	str	r0, [r4, #24]
		krava->prev = NULL;
 8005630:	61a5      	str	r5, [r4, #24]

		return krava;
	}
 8005632:	4620      	mov	r0, r4
 8005634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005638 <get_colliding_block_down>:
 * 2. For each block in range [movable_width]:
 * 			-> check collision
 * 			-> return true/false
 * **/

block_pos get_colliding_block_down(pixel_position* pos) {
 8005638:	b510      	push	{r4, lr}
 800563a:	b082      	sub	sp, #8
	// Move a pixel in direction, map to block
	pixel_c cx = pos->x;
 800563c:	f9b0 3000 	ldrsh.w	r3, [r0]
	pixel_c cy = pos->y;
 8005640:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8005644:	b2a4      	uxth	r4, r4

	// Move down
	cy += 1;
 8005646:	3401      	adds	r4, #1
 8005648:	b2a4      	uxth	r4, r4

	block_pos result_block_c = {
			x: pixel_to_block(cx),
 800564a:	b298      	uxth	r0, r3
 800564c:	f7ff ffa9 	bl	80055a2 <pixel_to_block>
	block_pos result_block_c = {
 8005650:	f8ad 0000 	strh.w	r0, [sp]
			y: pixel_to_block(cy)
 8005654:	4620      	mov	r0, r4
 8005656:	f7ff ffa4 	bl	80055a2 <pixel_to_block>
	block_pos result_block_c = {
 800565a:	f8ad 0002 	strh.w	r0, [sp, #2]
	};

	return result_block_c;
 800565e:	9b00      	ldr	r3, [sp, #0]
 8005660:	9301      	str	r3, [sp, #4]
 8005662:	2000      	movs	r0, #0
 8005664:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005668:	f363 000f 	bfi	r0, r3, #0, #16
 800566c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005670:	f363 401f 	bfi	r0, r3, #16, #16
}
 8005674:	b002      	add	sp, #8
 8005676:	bd10      	pop	{r4, pc}

08005678 <get_colliding_block_up>:

block_pos get_colliding_block_up(pixel_position* pos, pixel_c movable_height) {
 8005678:	b530      	push	{r4, r5, lr}
 800567a:	b083      	sub	sp, #12
	// Move a pixel in direction, map to block
	pixel_c cx = pos->x;
 800567c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8005680:	b2ad      	uxth	r5, r5
	pixel_c cy = world_pixel_to_world_pixel_y_no_band_param(pos->y, -(movable_height + 2));
 8005682:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
 8005686:	31fe      	adds	r1, #254	; 0xfe
 8005688:	b209      	sxth	r1, r1
 800568a:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800568e:	f7ff f808 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8005692:	b284      	uxth	r4, r0

	block_pos result_block_c = {
			x: pixel_to_block(cx),
 8005694:	4628      	mov	r0, r5
 8005696:	f7ff ff84 	bl	80055a2 <pixel_to_block>
	block_pos result_block_c = {
 800569a:	f8ad 0000 	strh.w	r0, [sp]
			y: pixel_to_block(cy)
 800569e:	4620      	mov	r0, r4
 80056a0:	f7ff ff7f 	bl	80055a2 <pixel_to_block>
	block_pos result_block_c = {
 80056a4:	f8ad 0002 	strh.w	r0, [sp, #2]
	};

	return result_block_c;
 80056a8:	9b00      	ldr	r3, [sp, #0]
 80056aa:	9301      	str	r3, [sp, #4]
 80056ac:	2000      	movs	r0, #0
 80056ae:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80056b2:	f363 000f 	bfi	r0, r3, #0, #16
 80056b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80056ba:	f363 401f 	bfi	r0, r3, #16, #16
}
 80056be:	b003      	add	sp, #12
 80056c0:	bd30      	pop	{r4, r5, pc}

080056c2 <get_colliding_block_left>:

block_pos get_colliding_block_left(pixel_position* pos, pixel_c movable_width) {
 80056c2:	b510      	push	{r4, lr}
 80056c4:	b082      	sub	sp, #8
 80056c6:	4604      	mov	r4, r0
	// Move a pixel in direction, map to block
	pixel_c cx = world_pixel_to_world_pixel_x_no_band_param(pos->x,  (-1) * (4 * BLOCK_WIDTH));//(4 * BLOCK_WIDTH));
 80056c8:	f06f 010f 	mvn.w	r1, #15
 80056cc:	f9b0 0000 	ldrsh.w	r0, [r0]
 80056d0:	f7fe ffda 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
	pixel_c cy = pos->y - 1;
 80056d4:	8864      	ldrh	r4, [r4, #2]
 80056d6:	3c01      	subs	r4, #1
 80056d8:	b2a4      	uxth	r4, r4
//	pixel_c collison_point = world_pixel_to_scene_pixel_x_band(cx);
//	pixel_c c_y = world_pixel_to_scene_pixel_y_band(cy);
//	UG_DrawPixel(collison_point, c_y, C_RED);

	block_pos result_block_c = {
			x: pixel_to_block(cx),
 80056da:	b280      	uxth	r0, r0
 80056dc:	f7ff ff61 	bl	80055a2 <pixel_to_block>
	block_pos result_block_c = {
 80056e0:	f8ad 0000 	strh.w	r0, [sp]
			y: pixel_to_block(cy)
 80056e4:	4620      	mov	r0, r4
 80056e6:	f7ff ff5c 	bl	80055a2 <pixel_to_block>
	block_pos result_block_c = {
 80056ea:	f8ad 0002 	strh.w	r0, [sp, #2]
	};

	return result_block_c;
 80056ee:	9b00      	ldr	r3, [sp, #0]
 80056f0:	9301      	str	r3, [sp, #4]
 80056f2:	2000      	movs	r0, #0
 80056f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80056f8:	f363 000f 	bfi	r0, r3, #0, #16
 80056fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005700:	f363 401f 	bfi	r0, r3, #16, #16
}
 8005704:	b002      	add	sp, #8
 8005706:	bd10      	pop	{r4, pc}

08005708 <get_colliding_block_right>:

block_pos get_colliding_block_right(pixel_position* pos) {
 8005708:	b510      	push	{r4, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	4604      	mov	r4, r0
	// Move a pixel in direction, map to block
	pixel_c cx = world_pixel_to_world_pixel_x_no_band_param(pos->x, 1);
 800570e:	2101      	movs	r1, #1
 8005710:	f9b0 0000 	ldrsh.w	r0, [r0]
 8005714:	f7fe ffb8 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
	pixel_c cy = pos->y;
 8005718:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 800571c:	b2a4      	uxth	r4, r4

	block_pos result_block_c = {
			x: pixel_to_block(cx),
 800571e:	b280      	uxth	r0, r0
 8005720:	f7ff ff3f 	bl	80055a2 <pixel_to_block>
	block_pos result_block_c = {
 8005724:	f8ad 0000 	strh.w	r0, [sp]
			y: pixel_to_block(cy)
 8005728:	4620      	mov	r0, r4
 800572a:	f7ff ff3a 	bl	80055a2 <pixel_to_block>
	block_pos result_block_c = {
 800572e:	f8ad 0002 	strh.w	r0, [sp, #2]
	};

	return result_block_c;
 8005732:	9b00      	ldr	r3, [sp, #0]
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	2000      	movs	r0, #0
 8005738:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800573c:	f363 000f 	bfi	r0, r3, #0, #16
 8005740:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005744:	f363 401f 	bfi	r0, r3, #16, #16
}
 8005748:	b002      	add	sp, #8
 800574a:	bd10      	pop	{r4, pc}

0800574c <collision>:


bool collision(uint8_t property, uint8_t direction, pixel_position* pos, uint8_t movable_width, uint8_t movable_height) {
 800574c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005750:	b082      	sub	sp, #8
 8005752:	4607      	mov	r7, r0
 8005754:	4688      	mov	r8, r1
 8005756:	4615      	mov	r5, r2
	// Iterate over blocks and check collision
		block_pos block_position;

		// Convert movable width from pixels to blocks
		movable_width = pixel_to_block(movable_width);
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff ff22 	bl	80055a2 <pixel_to_block>
 800575e:	4604      	mov	r4, r0
 8005760:	b2c6      	uxtb	r6, r0
		movable_height = pixel_to_block(movable_height);
 8005762:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 8005766:	f7ff ff1c 	bl	80055a2 <pixel_to_block>
 800576a:	fa5f f980 	uxtb.w	r9, r0

		uint8_t offset = 2;

		switch (direction) {
 800576e:	f1b8 0f03 	cmp.w	r8, #3
 8005772:	d81d      	bhi.n	80057b0 <collision+0x64>
 8005774:	e8df f008 	tbb	[pc, r8]
 8005778:	16100b02 	.word	0x16100b02
			case _up:
				block_position = get_colliding_block_up(pos, movable_height);
 800577c:	b2c1      	uxtb	r1, r0
 800577e:	4628      	mov	r0, r5
 8005780:	f7ff ff7a 	bl	8005678 <get_colliding_block_up>
 8005784:	9001      	str	r0, [sp, #4]
				offset = movable_width/2;
 8005786:	ea4f 0956 	mov.w	r9, r6, lsr #1
				offset = movable_height;
				break;
		}


		for (int i = 0; i < offset; i++) {
 800578a:	2400      	movs	r4, #0
 800578c:	e029      	b.n	80057e2 <collision+0x96>
				block_position = get_colliding_block_right(pos);
 800578e:	4628      	mov	r0, r5
 8005790:	f7ff ffba 	bl	8005708 <get_colliding_block_right>
 8005794:	9001      	str	r0, [sp, #4]
				break;
 8005796:	e7f8      	b.n	800578a <collision+0x3e>
				block_position = get_colliding_block_down(pos);
 8005798:	4628      	mov	r0, r5
 800579a:	f7ff ff4d 	bl	8005638 <get_colliding_block_down>
 800579e:	9001      	str	r0, [sp, #4]
				offset = movable_width;
 80057a0:	46b1      	mov	r9, r6
				break;
 80057a2:	e7f2      	b.n	800578a <collision+0x3e>
				block_position = get_colliding_block_left(pos, movable_width);
 80057a4:	b2e1      	uxtb	r1, r4
 80057a6:	4628      	mov	r0, r5
 80057a8:	f7ff ff8b 	bl	80056c2 <get_colliding_block_left>
 80057ac:	9001      	str	r0, [sp, #4]
				break;
 80057ae:	e7ec      	b.n	800578a <collision+0x3e>
		switch (direction) {
 80057b0:	f04f 0902 	mov.w	r9, #2
 80057b4:	e7e9      	b.n	800578a <collision+0x3e>
			block_t material;

			if (i % 2 == 0) {
				material = lower(cell);
			} else {
				material = upper(cell);
 80057b6:	f7ff feef 	bl	8005598 <upper>
 80057ba:	e029      	b.n	8005810 <collision+0xc4>
			}

			switch (property) {
				case _destructible:
					if (is_destructible(material)) {
 80057bc:	f7fc ffc4 	bl	8002748 <is_destructible>
 80057c0:	4603      	mov	r3, r0
 80057c2:	b358      	cbz	r0, 800581c <collision+0xd0>
 80057c4:	e045      	b.n	8005852 <collision+0x106>
						return true;
					}
					break;

				case _solid:
					if (is_solid(material)) {
 80057c6:	f7fc ffdf 	bl	8002788 <is_solid>
 80057ca:	4603      	mov	r3, r0
 80057cc:	b330      	cbz	r0, 800581c <collision+0xd0>
 80057ce:	e040      	b.n	8005852 <collision+0x106>
						return true;
					}
					break;

				case _harmful:
					if (is_harmuful(material)) {
 80057d0:	f7fc ffca 	bl	8002768 <is_harmuful>
 80057d4:	4603      	mov	r3, r0
 80057d6:	b308      	cbz	r0, 800581c <collision+0xd0>
 80057d8:	e03b      	b.n	8005852 <collision+0x106>
					break;
			}

			switch (direction) {
				case _up:
					block_position.x -= 1;
 80057da:	3e01      	subs	r6, #1
 80057dc:	f8ad 6004 	strh.w	r6, [sp, #4]
		for (int i = 0; i < offset; i++) {
 80057e0:	3401      	adds	r4, #1
 80057e2:	45a1      	cmp	r9, r4
 80057e4:	dd34      	ble.n	8005850 <collision+0x104>
			cell_t cell = WORLD[block_to_cell_y(block_position.y)][block_to_cell_x(block_position.x)];
 80057e6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80057ea:	4628      	mov	r0, r5
 80057ec:	f7ff feea 	bl	80055c4 <block_to_cell_y>
 80057f0:	4682      	mov	sl, r0
 80057f2:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 80057f6:	4630      	mov	r0, r6
 80057f8:	f7ff fee2 	bl	80055c0 <block_to_cell_x>
 80057fc:	4b17      	ldr	r3, [pc, #92]	; (800585c <collision+0x110>)
 80057fe:	22c8      	movs	r2, #200	; 0xc8
 8005800:	fb02 330a 	mla	r3, r2, sl, r3
 8005804:	5c18      	ldrb	r0, [r3, r0]
			if (i % 2 == 0) {
 8005806:	f014 0f01 	tst.w	r4, #1
 800580a:	d1d4      	bne.n	80057b6 <collision+0x6a>
				material = lower(cell);
 800580c:	f7ff fec6 	bl	800559c <lower>
			switch (property) {
 8005810:	2f01      	cmp	r7, #1
 8005812:	d0dd      	beq.n	80057d0 <collision+0x84>
 8005814:	2f02      	cmp	r7, #2
 8005816:	d0d6      	beq.n	80057c6 <collision+0x7a>
 8005818:	2f00      	cmp	r7, #0
 800581a:	d0cf      	beq.n	80057bc <collision+0x70>
			switch (direction) {
 800581c:	f1b8 0f03 	cmp.w	r8, #3
 8005820:	d8de      	bhi.n	80057e0 <collision+0x94>
 8005822:	a301      	add	r3, pc, #4	; (adr r3, 8005828 <collision+0xdc>)
 8005824:	f853 f028 	ldr.w	pc, [r3, r8, lsl #2]
 8005828:	080057db 	.word	0x080057db
 800582c:	08005839 	.word	0x08005839
 8005830:	08005841 	.word	0x08005841
 8005834:	08005849 	.word	0x08005849
					break;
				case _right:
					block_position.y -= 1;
 8005838:	3d01      	subs	r5, #1
 800583a:	f8ad 5006 	strh.w	r5, [sp, #6]
					break;
 800583e:	e7cf      	b.n	80057e0 <collision+0x94>
				case _down:
					block_position.x -= 1;
 8005840:	3e01      	subs	r6, #1
 8005842:	f8ad 6004 	strh.w	r6, [sp, #4]
					break;
 8005846:	e7cb      	b.n	80057e0 <collision+0x94>
				case _left:
					block_position.y -= 1;
 8005848:	3d01      	subs	r5, #1
 800584a:	f8ad 5006 	strh.w	r5, [sp, #6]
					break;
 800584e:	e7c7      	b.n	80057e0 <collision+0x94>
			}
		}

		return false;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	b002      	add	sp, #8
 8005856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800585a:	bf00      	nop
 800585c:	20005068 	.word	0x20005068

08005860 <dig_down>:
#include "utils.h"
#include "material_classes.h"
#include "ugui.h"


void dig_down(pixel_position* pos) {
 8005860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	// Move 1 pixel down first
	pixel_c y = pos->y + 1;
 8005864:	8845      	ldrh	r5, [r0, #2]
 8005866:	3501      	adds	r5, #1
 8005868:	b2ad      	uxth	r5, r5

	cell_c wx = pixel_to_cell_x(pos->x);
 800586a:	f9b0 0000 	ldrsh.w	r0, [r0]
 800586e:	b280      	uxth	r0, r0
 8005870:	f7ff fea9 	bl	80055c6 <pixel_to_cell_x>
 8005874:	4604      	mov	r4, r0
	cell_c wy = pixel_to_cell_y(y);
 8005876:	4628      	mov	r0, r5
 8005878:	f7ff feab 	bl	80055d2 <pixel_to_cell_y>
 800587c:	4606      	mov	r6, r0

	uint8_t hole_size = (GUYSKO_IMG_X / BLOCK_WIDTH) / 2;

	for (int i = 0; i < hole_size; i++) {
 800587e:	f04f 0800 	mov.w	r8, #0
 8005882:	e010      	b.n	80058a6 <dig_down+0x46>
		// Determine background
		block_t background = _dirt_bg;
		if (wy < LVL1_HMAP[wx]) {
			background = _sky;
 8005884:	f04f 0a04 	mov.w	sl, #4
 8005888:	e018      	b.n	80058bc <dig_down+0x5c>
		}
		if (is_destructible(block_right)) {
			block_right = background;
		}

		WORLD[wy][wx] = build_cell(block_left, block_right);
 800588a:	4651      	mov	r1, sl
 800588c:	4628      	mov	r0, r5
 800588e:	f7fd ff75 	bl	800377c <build_cell>
 8005892:	4b18      	ldr	r3, [pc, #96]	; (80058f4 <dig_down+0x94>)
 8005894:	22c8      	movs	r2, #200	; 0xc8
 8005896:	fb02 3306 	mla	r3, r2, r6, r3
 800589a:	f803 0009 	strb.w	r0, [r3, r9]
		wx--;
 800589e:	3c01      	subs	r4, #1
 80058a0:	b2a4      	uxth	r4, r4
	for (int i = 0; i < hole_size; i++) {
 80058a2:	f108 0801 	add.w	r8, r8, #1
 80058a6:	f1b8 0f01 	cmp.w	r8, #1
 80058aa:	dc21      	bgt.n	80058f0 <dig_down+0x90>
		if (wy < LVL1_HMAP[wx]) {
 80058ac:	46a1      	mov	r9, r4
 80058ae:	4b12      	ldr	r3, [pc, #72]	; (80058f8 <dig_down+0x98>)
 80058b0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80058b4:	42b3      	cmp	r3, r6
 80058b6:	d8e5      	bhi.n	8005884 <dig_down+0x24>
		block_t background = _dirt_bg;
 80058b8:	f04f 0a0c 	mov.w	sl, #12
		cell_t cell = WORLD[wy][wx];
 80058bc:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <dig_down+0x94>)
 80058be:	22c8      	movs	r2, #200	; 0xc8
 80058c0:	fb02 3306 	mla	r3, r2, r6, r3
 80058c4:	f813 7009 	ldrb.w	r7, [r3, r9]
		block_t block_left = upper(cell), block_right = lower(cell);
 80058c8:	4638      	mov	r0, r7
 80058ca:	f7ff fe65 	bl	8005598 <upper>
 80058ce:	4605      	mov	r5, r0
 80058d0:	4638      	mov	r0, r7
 80058d2:	f7ff fe63 	bl	800559c <lower>
 80058d6:	4607      	mov	r7, r0
		if (is_destructible(block_left)) {
 80058d8:	4628      	mov	r0, r5
 80058da:	f7fc ff35 	bl	8002748 <is_destructible>
 80058de:	b100      	cbz	r0, 80058e2 <dig_down+0x82>
			block_left = background;
 80058e0:	4655      	mov	r5, sl
		if (is_destructible(block_right)) {
 80058e2:	4638      	mov	r0, r7
 80058e4:	f7fc ff30 	bl	8002748 <is_destructible>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	d1ce      	bne.n	800588a <dig_down+0x2a>
		block_t block_left = upper(cell), block_right = lower(cell);
 80058ec:	46ba      	mov	sl, r7
 80058ee:	e7cc      	b.n	800588a <dig_down+0x2a>

	}

}
 80058f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f4:	20005068 	.word	0x20005068
 80058f8:	200043e8 	.word	0x200043e8

080058fc <dig_left>:

void dig_left(pixel_position* pos) {
 80058fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005900:	4604      	mov	r4, r0

	// Move 1 + guysko width left first
	pixel_c x = world_pixel_to_world_pixel_x_no_band_param(pos->x, -(GUYSKO_IMG_X + BLOCK_WIDTH));
 8005902:	f06f 0113 	mvn.w	r1, #19
 8005906:	f9b0 0000 	ldrsh.w	r0, [r0]
 800590a:	f7fe febd 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
	pixel_c y = pos->y;
 800590e:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 8005912:	b2a4      	uxth	r4, r4

	cell_c wx = pixel_to_cell_x(x);
 8005914:	b280      	uxth	r0, r0
 8005916:	f7ff fe56 	bl	80055c6 <pixel_to_cell_x>
 800591a:	4607      	mov	r7, r0
	cell_c wy = pixel_to_cell_y(y);
 800591c:	4620      	mov	r0, r4
 800591e:	f7ff fe58 	bl	80055d2 <pixel_to_cell_y>
 8005922:	4604      	mov	r4, r0

	uint8_t hole_size = (GUYSKO_IMG_Y / BLOCK_WIDTH) + 1;

	for (int i = 0; i < hole_size; i++) {
 8005924:	f04f 0800 	mov.w	r8, #0
 8005928:	e00f      	b.n	800594a <dig_left+0x4e>
		// Determine background
		block_t background = _dirt_bg;
		if (wy < LVL1_HMAP[wx]) {
			background = _sky;
 800592a:	f04f 0a04 	mov.w	sl, #4
 800592e:	e016      	b.n	800595e <dig_left+0x62>
		}
		if (is_destructible(block_left)) {
			block_left = background;
		}

		WORLD[wy][wx] = build_cell(block_left, block_right);
 8005930:	4629      	mov	r1, r5
 8005932:	4650      	mov	r0, sl
 8005934:	f7fd ff22 	bl	800377c <build_cell>
 8005938:	4b16      	ldr	r3, [pc, #88]	; (8005994 <dig_left+0x98>)
 800593a:	22c8      	movs	r2, #200	; 0xc8
 800593c:	fb02 3309 	mla	r3, r2, r9, r3
 8005940:	55d8      	strb	r0, [r3, r7]
		wy--;
 8005942:	3c01      	subs	r4, #1
 8005944:	b2a4      	uxth	r4, r4
	for (int i = 0; i < hole_size; i++) {
 8005946:	f108 0801 	add.w	r8, r8, #1
 800594a:	f1b8 0f06 	cmp.w	r8, #6
 800594e:	dc1f      	bgt.n	8005990 <dig_left+0x94>
		if (wy < LVL1_HMAP[wx]) {
 8005950:	4b11      	ldr	r3, [pc, #68]	; (8005998 <dig_left+0x9c>)
 8005952:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 8005956:	42a3      	cmp	r3, r4
 8005958:	d8e7      	bhi.n	800592a <dig_left+0x2e>
		block_t background = _dirt_bg;
 800595a:	f04f 0a0c 	mov.w	sl, #12
		cell_t cell = WORLD[wy][wx];
 800595e:	46a1      	mov	r9, r4
 8005960:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <dig_left+0x98>)
 8005962:	22c8      	movs	r2, #200	; 0xc8
 8005964:	fb02 3304 	mla	r3, r2, r4, r3
 8005968:	5ddd      	ldrb	r5, [r3, r7]
		block_t block_left = upper(cell), block_right = lower(cell);
 800596a:	4628      	mov	r0, r5
 800596c:	f7ff fe14 	bl	8005598 <upper>
 8005970:	4606      	mov	r6, r0
 8005972:	4628      	mov	r0, r5
 8005974:	f7ff fe12 	bl	800559c <lower>
 8005978:	4605      	mov	r5, r0
		if (is_destructible(block_right)) {
 800597a:	f7fc fee5 	bl	8002748 <is_destructible>
 800597e:	b100      	cbz	r0, 8005982 <dig_left+0x86>
			block_right = background;
 8005980:	4655      	mov	r5, sl
		if (is_destructible(block_left)) {
 8005982:	4630      	mov	r0, r6
 8005984:	f7fc fee0 	bl	8002748 <is_destructible>
 8005988:	2800      	cmp	r0, #0
 800598a:	d1d1      	bne.n	8005930 <dig_left+0x34>
		block_t block_left = upper(cell), block_right = lower(cell);
 800598c:	46b2      	mov	sl, r6
 800598e:	e7cf      	b.n	8005930 <dig_left+0x34>

	}

}
 8005990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005994:	20005068 	.word	0x20005068
 8005998:	200043e8 	.word	0x200043e8

0800599c <dig_right>:
	}

}


void dig_right(pixel_position* pos) {
 800599c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059a0:	4604      	mov	r4, r0

	// Move 1 px to the right
	pixel_c x = world_pixel_to_world_pixel_x_no_band_param(pos->x, 1);
 80059a2:	2101      	movs	r1, #1
 80059a4:	f9b0 0000 	ldrsh.w	r0, [r0]
 80059a8:	f7fe fe6e 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
	pixel_c y = pos->y;
 80059ac:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 80059b0:	b2a4      	uxth	r4, r4

	cell_c wx = pixel_to_cell_x(x);
 80059b2:	b280      	uxth	r0, r0
 80059b4:	f7ff fe07 	bl	80055c6 <pixel_to_cell_x>
 80059b8:	4607      	mov	r7, r0
	cell_c wy = pixel_to_cell_y(y);
 80059ba:	4620      	mov	r0, r4
 80059bc:	f7ff fe09 	bl	80055d2 <pixel_to_cell_y>
 80059c0:	4604      	mov	r4, r0

	uint8_t hole_size = (GUYSKO_IMG_Y / BLOCK_WIDTH) + 1;

	for (int i = 0; i < hole_size; i++) {
 80059c2:	f04f 0800 	mov.w	r8, #0
 80059c6:	e00f      	b.n	80059e8 <dig_right+0x4c>
		// Determine background
		block_t background = _dirt_bg;
		if (wy < LVL1_HMAP[wx]) {
			background = _sky;
 80059c8:	f04f 0a04 	mov.w	sl, #4
 80059cc:	e016      	b.n	80059fc <dig_right+0x60>
		}
		if (is_destructible(block_left)) {
			block_left = background;
		}

		WORLD[wy][wx] = build_cell(block_left, block_right);
 80059ce:	4629      	mov	r1, r5
 80059d0:	4650      	mov	r0, sl
 80059d2:	f7fd fed3 	bl	800377c <build_cell>
 80059d6:	4b17      	ldr	r3, [pc, #92]	; (8005a34 <dig_right+0x98>)
 80059d8:	22c8      	movs	r2, #200	; 0xc8
 80059da:	fb02 3309 	mla	r3, r2, r9, r3
 80059de:	55d8      	strb	r0, [r3, r7]
		wy--;
 80059e0:	3c01      	subs	r4, #1
 80059e2:	b2a4      	uxth	r4, r4
	for (int i = 0; i < hole_size; i++) {
 80059e4:	f108 0801 	add.w	r8, r8, #1
 80059e8:	f1b8 0f06 	cmp.w	r8, #6
 80059ec:	dc1f      	bgt.n	8005a2e <dig_right+0x92>
		if (wy < LVL1_HMAP[wx]) {
 80059ee:	4b12      	ldr	r3, [pc, #72]	; (8005a38 <dig_right+0x9c>)
 80059f0:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 80059f4:	42a3      	cmp	r3, r4
 80059f6:	d8e7      	bhi.n	80059c8 <dig_right+0x2c>
		block_t background = _dirt_bg;
 80059f8:	f04f 0a0c 	mov.w	sl, #12
		cell_t cell = WORLD[wy][wx];
 80059fc:	46a1      	mov	r9, r4
 80059fe:	4b0d      	ldr	r3, [pc, #52]	; (8005a34 <dig_right+0x98>)
 8005a00:	22c8      	movs	r2, #200	; 0xc8
 8005a02:	fb02 3304 	mla	r3, r2, r4, r3
 8005a06:	5ddd      	ldrb	r5, [r3, r7]
		block_t block_left = upper(cell), block_right = lower(cell);
 8005a08:	4628      	mov	r0, r5
 8005a0a:	f7ff fdc5 	bl	8005598 <upper>
 8005a0e:	4606      	mov	r6, r0
 8005a10:	4628      	mov	r0, r5
 8005a12:	f7ff fdc3 	bl	800559c <lower>
 8005a16:	4605      	mov	r5, r0
		if (is_destructible(block_right)) {
 8005a18:	f7fc fe96 	bl	8002748 <is_destructible>
 8005a1c:	b100      	cbz	r0, 8005a20 <dig_right+0x84>
			block_right = background;
 8005a1e:	4655      	mov	r5, sl
		if (is_destructible(block_left)) {
 8005a20:	4630      	mov	r0, r6
 8005a22:	f7fc fe91 	bl	8002748 <is_destructible>
 8005a26:	2800      	cmp	r0, #0
 8005a28:	d1d1      	bne.n	80059ce <dig_right+0x32>
		block_t block_left = upper(cell), block_right = lower(cell);
 8005a2a:	46b2      	mov	sl, r6
 8005a2c:	e7cf      	b.n	80059ce <dig_right+0x32>

	}

}
 8005a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a32:	bf00      	nop
 8005a34:	20005068 	.word	0x20005068
 8005a38:	200043e8 	.word	0x200043e8

08005a3c <place_block>:

void place_block(pixel_position* pos, block_t material, block_c offset_x, block_c offset_y) {
 8005a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a40:	b083      	sub	sp, #12
 8005a42:	4604      	mov	r4, r0
 8005a44:	4688      	mov	r8, r1
 8005a46:	4693      	mov	fp, r2
 8005a48:	9301      	str	r3, [sp, #4]
	// Use buttons to determine position, use OK button to place
	// Get position, place material in world, when clicking a button remove it and move it one up/down/left/right
	pixel_c x = world_pixel_to_world_pixel_x_no_band_param(pos->x, 1);	// start one block right to the player
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8005a50:	f7fe fe1a 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8005a54:	fa1f fa80 	uxth.w	sl, r0
	pixel_c y = pos->y;
 8005a58:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 8005a5c:	b2a4      	uxth	r4, r4

	// Place material in 2 vertically stacked cells
	for (int i = 0; i < 2; i++) {
 8005a5e:	2700      	movs	r7, #0
 8005a60:	e030      	b.n	8005ac4 <place_block+0x88>

		cell_c wx = pixel_to_cell_x(x + block_to_pixel(offset_x));
 8005a62:	4658      	mov	r0, fp
 8005a64:	f7ff fd9f 	bl	80055a6 <block_to_pixel>
 8005a68:	4450      	add	r0, sl
 8005a6a:	b280      	uxth	r0, r0
 8005a6c:	f7ff fdab 	bl	80055c6 <pixel_to_cell_x>
 8005a70:	4605      	mov	r5, r0
		cell_c wy = pixel_to_cell_y(y + block_to_pixel(offset_y));
 8005a72:	9801      	ldr	r0, [sp, #4]
 8005a74:	f7ff fd97 	bl	80055a6 <block_to_pixel>
 8005a78:	4420      	add	r0, r4
 8005a7a:	b280      	uxth	r0, r0
 8005a7c:	f7ff fda9 	bl	80055d2 <pixel_to_cell_y>
 8005a80:	4606      	mov	r6, r0

		camera_x_block = cell_x_to_block_left(wx);
 8005a82:	4628      	mov	r0, r5
 8005a84:	f7ff fd94 	bl	80055b0 <cell_x_to_block_left>
 8005a88:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8005ad8 <place_block+0x9c>
 8005a8c:	f8a9 0000 	strh.w	r0, [r9]
		camera_y_block = cell_y_to_block(wy);
 8005a90:	4630      	mov	r0, r6
 8005a92:	f7ff fd94 	bl	80055be <cell_y_to_block>
 8005a96:	4601      	mov	r1, r0
 8005a98:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <place_block+0x94>)
 8005a9a:	8018      	strh	r0, [r3, #0]
		update_camera_center(camera_x_block, camera_y_block);
 8005a9c:	f8b9 0000 	ldrh.w	r0, [r9]
 8005aa0:	f7fd fcae 	bl	8003400 <update_camera_center>

		WORLD[wy][wx] = build_cell(material, material);
 8005aa4:	4641      	mov	r1, r8
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	f7fd fe68 	bl	800377c <build_cell>
 8005aac:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <place_block+0x98>)
 8005aae:	22c8      	movs	r2, #200	; 0xc8
 8005ab0:	fb02 3606 	mla	r6, r2, r6, r3
 8005ab4:	5570      	strb	r0, [r6, r5]


		y = world_pixel_to_world_pixel_y_no_band_param(y, -BLOCK_WIDTH);
 8005ab6:	f06f 0103 	mvn.w	r1, #3
 8005aba:	b220      	sxth	r0, r4
 8005abc:	f7fe fdf1 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8005ac0:	b284      	uxth	r4, r0
	for (int i = 0; i < 2; i++) {
 8005ac2:	3701      	adds	r7, #1
 8005ac4:	2f01      	cmp	r7, #1
 8005ac6:	ddcc      	ble.n	8005a62 <place_block+0x26>

	}
}
 8005ac8:	b003      	add	sp, #12
 8005aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ace:	bf00      	nop
 8005ad0:	20010bea 	.word	0x20010bea
 8005ad4:	20005068 	.word	0x20005068
 8005ad8:	20010be8 	.word	0x20010be8

08005adc <cycle_building_material>:

void cycle_building_material() {
	// Take next item from the "destructibles"
	for (int i = 0; i < sizeof(solid_materials); i++) {
 8005adc:	2300      	movs	r3, #0
 8005ade:	2b08      	cmp	r3, #8
 8005ae0:	d814      	bhi.n	8005b0c <cycle_building_material+0x30>
		if (solid_materials[i] == building_material) {
 8005ae2:	4a0b      	ldr	r2, [pc, #44]	; (8005b10 <cycle_building_material+0x34>)
 8005ae4:	5cd1      	ldrb	r1, [r2, r3]
 8005ae6:	4a0b      	ldr	r2, [pc, #44]	; (8005b14 <cycle_building_material+0x38>)
 8005ae8:	7812      	ldrb	r2, [r2, #0]
 8005aea:	4291      	cmp	r1, r2
 8005aec:	d001      	beq.n	8005af2 <cycle_building_material+0x16>
	for (int i = 0; i < sizeof(solid_materials); i++) {
 8005aee:	3301      	adds	r3, #1
 8005af0:	e7f5      	b.n	8005ade <cycle_building_material+0x2>
			if (i == sizeof(solid_materials) - 1) {
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d005      	beq.n	8005b02 <cycle_building_material+0x26>
				building_material = solid_materials[0];
			} else {
				building_material = solid_materials[i+1];
 8005af6:	3301      	adds	r3, #1
 8005af8:	4a05      	ldr	r2, [pc, #20]	; (8005b10 <cycle_building_material+0x34>)
 8005afa:	5cd2      	ldrb	r2, [r2, r3]
 8005afc:	4b05      	ldr	r3, [pc, #20]	; (8005b14 <cycle_building_material+0x38>)
 8005afe:	701a      	strb	r2, [r3, #0]
			}
			return;
 8005b00:	4770      	bx	lr
				building_material = solid_materials[0];
 8005b02:	4b03      	ldr	r3, [pc, #12]	; (8005b10 <cycle_building_material+0x34>)
 8005b04:	781a      	ldrb	r2, [r3, #0]
 8005b06:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <cycle_building_material+0x38>)
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	4770      	bx	lr
		}
	}
}
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	20000018 	.word	0x20000018
 8005b14:	2000012c 	.word	0x2000012c

08005b18 <overwrite_old_string>:

void overwrite_old_string(pixel_c start_x, pixel_c start_y) {
 8005b18:	b500      	push	{lr}
 8005b1a:	b083      	sub	sp, #12
	_HW_FillFrame_(start_x, start_y, start_x + 100, start_y + 15, C_BLACK);
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	f101 030f 	add.w	r3, r1, #15
 8005b24:	f100 0264 	add.w	r2, r0, #100	; 0x64
 8005b28:	f007 fff0 	bl	800db0c <_HW_FillFrame_>
}
 8005b2c:	b003      	add	sp, #12
 8005b2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005b34 <display_material_name>:


void display_material_name() {
 8005b34:	b510      	push	{r4, lr}
	char* mat = get_material_name(building_material);
 8005b36:	4b07      	ldr	r3, [pc, #28]	; (8005b54 <display_material_name+0x20>)
 8005b38:	7818      	ldrb	r0, [r3, #0]
 8005b3a:	f7fc fef7 	bl	800292c <get_material_name>
 8005b3e:	4604      	mov	r4, r0

	overwrite_old_string(235, 20);
 8005b40:	2114      	movs	r1, #20
 8005b42:	20eb      	movs	r0, #235	; 0xeb
 8005b44:	f7ff ffe8 	bl	8005b18 <overwrite_old_string>
	UG_PutString(240, 20, mat);
 8005b48:	4622      	mov	r2, r4
 8005b4a:	2114      	movs	r1, #20
 8005b4c:	20f0      	movs	r0, #240	; 0xf0
 8005b4e:	f008 fa71 	bl	800e034 <UG_PutString>
}
 8005b52:	bd10      	pop	{r4, pc}
 8005b54:	2000012c 	.word	0x2000012c

08005b58 <get_life_points>:
/*
 * Getter function to get life points of movable
 */
HP get_life_points(life_points* lp) {
	return lp->life_points;
}
 8005b58:	f9b0 0000 	ldrsh.w	r0, [r0]
 8005b5c:	4770      	bx	lr

08005b5e <camouflage_movable>:
 * vel, move, position
 */

#include "movable.h"

void camouflage_movable (pixel_position* pos, uint16_t prev_movable_x, uint16_t prev_movable_y, Npcs species) {
 8005b5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b62:	b087      	sub	sp, #28
 8005b64:	9102      	str	r1, [sp, #8]
 8005b66:	9203      	str	r2, [sp, #12]

	int size_x = 0;
	int size_y = 0;

	switch (species) {
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d803      	bhi.n	8005b74 <camouflage_movable+0x16>
 8005b6c:	e8df f003 	tbb	[pc, r3]
 8005b70:	0b08050e 	.word	0x0b08050e
 8005b74:	2400      	movs	r4, #0
 8005b76:	4623      	mov	r3, r4
 8005b78:	e00a      	b.n	8005b90 <camouflage_movable+0x32>
			size_x = COW_IMG_X;
			size_y = COW_IMG_Y;
			break;
		case _fashionist:
			size_x = FASHIONIST_IMG_X;
			size_y = FASHIONIST_IMG_Y;
 8005b7a:	2418      	movs	r4, #24
			size_x = FASHIONIST_IMG_X;
 8005b7c:	2310      	movs	r3, #16
			break;
 8005b7e:	e007      	b.n	8005b90 <camouflage_movable+0x32>
		case _miner:
			size_x = MINER_IMG_Y;
			size_y = MINER_IMG_Y;
 8005b80:	2414      	movs	r4, #20
			size_x = MINER_IMG_Y;
 8005b82:	4623      	mov	r3, r4
			break;
 8005b84:	e004      	b.n	8005b90 <camouflage_movable+0x32>
		case _merchant:
			size_x = MERCHANT_IMG_X;
			size_y = MERCHANT_IMG_Y;
 8005b86:	241c      	movs	r4, #28
			size_x = MERCHANT_IMG_X;
 8005b88:	2310      	movs	r3, #16
			break;
 8005b8a:	e001      	b.n	8005b90 <camouflage_movable+0x32>
			size_y = COW_IMG_Y;
 8005b8c:	240c      	movs	r4, #12
			size_x = COW_IMG_X;
 8005b8e:	2318      	movs	r3, #24
	}

	pixel_c movable_x0 = prev_movable_x;
	pixel_c movable_y0 = prev_movable_y;
	pixel_c movable_x1 = pos->x;
 8005b90:	f9b0 2000 	ldrsh.w	r2, [r0]
 8005b94:	9201      	str	r2, [sp, #4]
 8005b96:	f8bd b004 	ldrh.w	fp, [sp, #4]
	pixel_c movable_y1 = pos->y;
 8005b9a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8005b9e:	fa1f f986 	uxth.w	r9, r6

	// calculate the starting points of guysko image starting point
	// IN SCENE IN PIXELS on previous and current frame
	int prev_draw_startPoint_x = world_pixel_to_scene_pixel_x_band(movable_x0 - size_x);
 8005ba2:	fa1f fa83 	uxth.w	sl, r3
 8005ba6:	9902      	ldr	r1, [sp, #8]
 8005ba8:	1ac8      	subs	r0, r1, r3
 8005baa:	b200      	sxth	r0, r0
 8005bac:	f7fe fd30 	bl	8004610 <world_pixel_to_scene_pixel_x_band>
 8005bb0:	4680      	mov	r8, r0
	int prev_draw_startPoint_y = world_pixel_to_scene_pixel_y_band(movable_y0 - size_y);
 8005bb2:	b2a5      	uxth	r5, r4
 8005bb4:	9b03      	ldr	r3, [sp, #12]
 8005bb6:	1b18      	subs	r0, r3, r4
 8005bb8:	b200      	sxth	r0, r0
 8005bba:	f7fe fd3b 	bl	8004634 <world_pixel_to_scene_pixel_y_band>
 8005bbe:	4607      	mov	r7, r0
	int draw_startPoint_x = world_pixel_to_scene_pixel_x_band(movable_x1 - size_x);
 8005bc0:	ebab 030a 	sub.w	r3, fp, sl
 8005bc4:	b298      	uxth	r0, r3
 8005bc6:	9005      	str	r0, [sp, #20]
 8005bc8:	b21b      	sxth	r3, r3
 8005bca:	9304      	str	r3, [sp, #16]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fe fd1f 	bl	8004610 <world_pixel_to_scene_pixel_x_band>
 8005bd2:	4604      	mov	r4, r0
	int draw_startPoint_y = world_pixel_to_scene_pixel_y_band(movable_y1 - size_y);
 8005bd4:	eba9 0005 	sub.w	r0, r9, r5
 8005bd8:	b200      	sxth	r0, r0
 8005bda:	f7fe fd2b 	bl	8004634 <world_pixel_to_scene_pixel_y_band>

	// calculate the difference the guysko has made since the previous frame (his previous drawing)
	// the difference is in pixels but on screen! Meaning it only checks for the difference it made on
	// screen, not his global moving in WORLD!
	short x_diff = draw_startPoint_x - prev_draw_startPoint_x;
 8005bde:	eba4 0408 	sub.w	r4, r4, r8
 8005be2:	b224      	sxth	r4, r4
	short y_diff = draw_startPoint_y - prev_draw_startPoint_y;
 8005be4:	1bc7      	subs	r7, r0, r7
 8005be6:	b23f      	sxth	r7, r7

	// calculate the starting points of guysko image starting point
	// IN WORLD IN PIXELS on previous and current frame
	// make four calls based on which direction the guysko moved in:
	uint8_t padding = 8;
	if (x_diff > 0) {		// right
 8005be8:	2c00      	cmp	r4, #0
 8005bea:	dc0a      	bgt.n	8005c02 <camouflage_movable+0xa4>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(movable_x0, -size_x - padding), world_pixel_to_world_pixel_y_no_band_param(movable_y0, -size_y),
				world_pixel_to_world_pixel_x_no_band_param(movable_x1, -size_x),world_pixel_to_world_pixel_y_no_band_param (movable_y1, 0));

		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(movable_x1, 0), world_pixel_to_world_pixel_y_no_band_param(movable_y1, -size_y),
						world_pixel_to_world_pixel_x_no_band_param(movable_x1 + 4, 0),world_pixel_to_world_pixel_y_no_band_param (movable_y1, 0));
	} else if (x_diff < 0) {	// left
 8005bec:	2c00      	cmp	r4, #0
 8005bee:	db49      	blt.n	8005c84 <camouflage_movable+0x126>

		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(movable_x1 - size_x, 0), world_pixel_to_world_pixel_y_no_band_param(movable_y1, -size_y),
								world_pixel_to_world_pixel_x_no_band_param(movable_x1 - size_x - 4, 0),world_pixel_to_world_pixel_y_no_band_param (movable_y1, 0));
	}

	if (y_diff > 0) {	// down
 8005bf0:	2f00      	cmp	r7, #0
 8005bf2:	f300 8082 	bgt.w	8005cfa <camouflage_movable+0x19c>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(movable_x0, -size_x), world_pixel_to_world_pixel_y_no_band_param(movable_y0, -size_y - padding),
				world_pixel_to_world_pixel_x_no_band_param(movable_x1, 0), world_pixel_to_world_pixel_y_no_band_param(movable_y1, (-1) * size_y));
	} else if (y_diff < 0) {	// up
 8005bf6:	2f00      	cmp	r7, #0
 8005bf8:	f2c0 80a1 	blt.w	8005d3e <camouflage_movable+0x1e0>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(movable_x1 - size_x, 0), world_pixel_to_world_pixel_y_no_band_param(movable_y1, -size_y-5),
				world_pixel_to_world_pixel_x_no_band_param(movable_x1, 0), world_pixel_to_world_pixel_y_no_band_param(movable_y1, -size_y));

	}

}
 8005bfc:	b007      	add	sp, #28
 8005bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(movable_x0, -size_x - padding), world_pixel_to_world_pixel_y_no_band_param(movable_y0, -size_y),
 8005c02:	f1ca 0800 	rsb	r8, sl, #0
 8005c06:	fa1f f888 	uxth.w	r8, r8
 8005c0a:	f5ca 417f 	rsb	r1, sl, #65280	; 0xff00
 8005c0e:	31f8      	adds	r1, #248	; 0xf8
 8005c10:	b209      	sxth	r1, r1
 8005c12:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8005c16:	f7fe fd37 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8005c1a:	9005      	str	r0, [sp, #20]
 8005c1c:	426c      	negs	r4, r5
 8005c1e:	b224      	sxth	r4, r4
 8005c20:	4621      	mov	r1, r4
 8005c22:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8005c26:	f7fe fd3c 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8005c2a:	4681      	mov	r9, r0
				world_pixel_to_world_pixel_x_no_band_param(movable_x1, -size_x),world_pixel_to_world_pixel_y_no_band_param (movable_y1, 0));
 8005c2c:	fa0f f188 	sxth.w	r1, r8
 8005c30:	9801      	ldr	r0, [sp, #4]
 8005c32:	f7fe fd29 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8005c36:	4680      	mov	r8, r0
 8005c38:	2100      	movs	r1, #0
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f7fe fd31 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8005c40:	4603      	mov	r3, r0
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(movable_x0, -size_x - padding), world_pixel_to_world_pixel_y_no_band_param(movable_y0, -size_y),
 8005c42:	4642      	mov	r2, r8
 8005c44:	4649      	mov	r1, r9
 8005c46:	9805      	ldr	r0, [sp, #20]
 8005c48:	f000 fd4e 	bl	80066e8 <overdraw_background_rectangle>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(movable_x1, 0), world_pixel_to_world_pixel_y_no_band_param(movable_y1, -size_y),
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	9801      	ldr	r0, [sp, #4]
 8005c50:	f7fe fd1a 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8005c54:	4680      	mov	r8, r0
 8005c56:	4621      	mov	r1, r4
 8005c58:	4630      	mov	r0, r6
 8005c5a:	f7fe fd22 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8005c5e:	4604      	mov	r4, r0
						world_pixel_to_world_pixel_x_no_band_param(movable_x1 + 4, 0),world_pixel_to_world_pixel_y_no_band_param (movable_y1, 0));
 8005c60:	f10b 0004 	add.w	r0, fp, #4
 8005c64:	2100      	movs	r1, #0
 8005c66:	b200      	sxth	r0, r0
 8005c68:	f7fe fd0e 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8005c6c:	4681      	mov	r9, r0
 8005c6e:	2100      	movs	r1, #0
 8005c70:	4630      	mov	r0, r6
 8005c72:	f7fe fd16 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8005c76:	4603      	mov	r3, r0
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(movable_x1, 0), world_pixel_to_world_pixel_y_no_band_param(movable_y1, -size_y),
 8005c78:	464a      	mov	r2, r9
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	4640      	mov	r0, r8
 8005c7e:	f000 fd33 	bl	80066e8 <overdraw_background_rectangle>
 8005c82:	e7b5      	b.n	8005bf0 <camouflage_movable+0x92>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(movable_x0, padding), world_pixel_to_world_pixel_y_no_band_param(movable_y0, -size_y),
 8005c84:	2108      	movs	r1, #8
 8005c86:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8005c8a:	f7fe fcfd 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8005c8e:	4683      	mov	fp, r0
 8005c90:	f1c5 0800 	rsb	r8, r5, #0
 8005c94:	fa0f f888 	sxth.w	r8, r8
 8005c98:	4641      	mov	r1, r8
 8005c9a:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8005c9e:	f7fe fd00 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8005ca2:	4681      	mov	r9, r0
				world_pixel_to_world_pixel_x_no_band_param(movable_x1, 0), world_pixel_to_world_pixel_y_no_band_param(movable_y1, 0));
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	9801      	ldr	r0, [sp, #4]
 8005ca8:	f7fe fcee 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8005cac:	4604      	mov	r4, r0
 8005cae:	2100      	movs	r1, #0
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	f7fe fcf6 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8005cb6:	4603      	mov	r3, r0
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(movable_x0, padding), world_pixel_to_world_pixel_y_no_band_param(movable_y0, -size_y),
 8005cb8:	4622      	mov	r2, r4
 8005cba:	4649      	mov	r1, r9
 8005cbc:	4658      	mov	r0, fp
 8005cbe:	f000 fd13 	bl	80066e8 <overdraw_background_rectangle>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(movable_x1 - size_x, 0), world_pixel_to_world_pixel_y_no_band_param(movable_y1, -size_y),
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	9804      	ldr	r0, [sp, #16]
 8005cc6:	f7fe fcdf 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8005cca:	4604      	mov	r4, r0
 8005ccc:	4641      	mov	r1, r8
 8005cce:	4630      	mov	r0, r6
 8005cd0:	f7fe fce7 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8005cd4:	4680      	mov	r8, r0
								world_pixel_to_world_pixel_x_no_band_param(movable_x1 - size_x - 4, 0),world_pixel_to_world_pixel_y_no_band_param (movable_y1, 0));
 8005cd6:	9b05      	ldr	r3, [sp, #20]
 8005cd8:	1f18      	subs	r0, r3, #4
 8005cda:	2100      	movs	r1, #0
 8005cdc:	b200      	sxth	r0, r0
 8005cde:	f7fe fcd3 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8005ce2:	4681      	mov	r9, r0
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	f7fe fcdb 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8005cec:	4603      	mov	r3, r0
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(movable_x1 - size_x, 0), world_pixel_to_world_pixel_y_no_band_param(movable_y1, -size_y),
 8005cee:	464a      	mov	r2, r9
 8005cf0:	4641      	mov	r1, r8
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f000 fcf8 	bl	80066e8 <overdraw_background_rectangle>
 8005cf8:	e77a      	b.n	8005bf0 <camouflage_movable+0x92>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(movable_x0, -size_x), world_pixel_to_world_pixel_y_no_band_param(movable_y0, -size_y - padding),
 8005cfa:	f1ca 0100 	rsb	r1, sl, #0
 8005cfe:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8005d02:	f7fe fcc1 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8005d06:	4604      	mov	r4, r0
 8005d08:	426f      	negs	r7, r5
 8005d0a:	b2bf      	uxth	r7, r7
 8005d0c:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 8005d10:	31f8      	adds	r1, #248	; 0xf8
 8005d12:	b209      	sxth	r1, r1
 8005d14:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8005d18:	f7fe fcc3 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8005d1c:	4605      	mov	r5, r0
				world_pixel_to_world_pixel_x_no_band_param(movable_x1, 0), world_pixel_to_world_pixel_y_no_band_param(movable_y1, (-1) * size_y));
 8005d1e:	2100      	movs	r1, #0
 8005d20:	9801      	ldr	r0, [sp, #4]
 8005d22:	f7fe fcb1 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8005d26:	4680      	mov	r8, r0
 8005d28:	b239      	sxth	r1, r7
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	f7fe fcb9 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8005d30:	4603      	mov	r3, r0
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(movable_x0, -size_x), world_pixel_to_world_pixel_y_no_band_param(movable_y0, -size_y - padding),
 8005d32:	4642      	mov	r2, r8
 8005d34:	4629      	mov	r1, r5
 8005d36:	4620      	mov	r0, r4
 8005d38:	f000 fcd6 	bl	80066e8 <overdraw_background_rectangle>
 8005d3c:	e75e      	b.n	8005bfc <camouflage_movable+0x9e>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(movable_x0, -size_x), world_pixel_to_world_pixel_y_no_band_param(movable_y0, padding),
 8005d3e:	f1ca 0100 	rsb	r1, sl, #0
 8005d42:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8005d46:	f7fe fc9f 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	2108      	movs	r1, #8
 8005d4e:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8005d52:	f7fe fca6 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8005d56:	4607      	mov	r7, r0
				world_pixel_to_world_pixel_x_no_band_param(movable_x1, 0), world_pixel_to_world_pixel_y_no_band_param(movable_y1, 0));
 8005d58:	2100      	movs	r1, #0
 8005d5a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005d5e:	4648      	mov	r0, r9
 8005d60:	f7fe fc92 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8005d64:	4680      	mov	r8, r0
 8005d66:	2100      	movs	r1, #0
 8005d68:	4630      	mov	r0, r6
 8005d6a:	f7fe fc9a 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8005d6e:	4603      	mov	r3, r0
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(movable_x0, -size_x), world_pixel_to_world_pixel_y_no_band_param(movable_y0, padding),
 8005d70:	4642      	mov	r2, r8
 8005d72:	4639      	mov	r1, r7
 8005d74:	4620      	mov	r0, r4
 8005d76:	f000 fcb7 	bl	80066e8 <overdraw_background_rectangle>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(movable_x1 - size_x, 0), world_pixel_to_world_pixel_y_no_band_param(movable_y1, -size_y-5),
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	9804      	ldr	r0, [sp, #16]
 8005d7e:	f7fe fc83 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8005d82:	4604      	mov	r4, r0
 8005d84:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 8005d88:	31fb      	adds	r1, #251	; 0xfb
 8005d8a:	b209      	sxth	r1, r1
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	f7fe fc88 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8005d92:	4607      	mov	r7, r0
				world_pixel_to_world_pixel_x_no_band_param(movable_x1, 0), world_pixel_to_world_pixel_y_no_band_param(movable_y1, -size_y));
 8005d94:	2100      	movs	r1, #0
 8005d96:	4648      	mov	r0, r9
 8005d98:	f7fe fc76 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8005d9c:	4680      	mov	r8, r0
 8005d9e:	4269      	negs	r1, r5
 8005da0:	4630      	mov	r0, r6
 8005da2:	f7fe fc7e 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8005da6:	4603      	mov	r3, r0
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(movable_x1 - size_x, 0), world_pixel_to_world_pixel_y_no_band_param(movable_y1, -size_y-5),
 8005da8:	4642      	mov	r2, r8
 8005daa:	4639      	mov	r1, r7
 8005dac:	4620      	mov	r0, r4
 8005dae:	f000 fc9b 	bl	80066e8 <overdraw_background_rectangle>
}
 8005db2:	e723      	b.n	8005bfc <camouflage_movable+0x9e>

08005db4 <draw_movable>:

void draw_movable(uint8_t* pic, uint16_t* pic_colors, pixel_position* pos, Npcs species) {
 8005db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db8:	b085      	sub	sp, #20
 8005dba:	9000      	str	r0, [sp, #0]
 8005dbc:	4688      	mov	r8, r1
 8005dbe:	4614      	mov	r4, r2
 8005dc0:	461f      	mov	r7, r3


	int up_border = block_to_pixel(camera_y_block) - SCENE_HEIGHT_PIXELS / 2;
 8005dc2:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8005ed4 <draw_movable+0x120>
 8005dc6:	f8b9 0000 	ldrh.w	r0, [r9]
 8005dca:	f7ff fbec 	bl	80055a6 <block_to_pixel>
 8005dce:	f1a0 0678 	sub.w	r6, r0, #120	; 0x78
	int right_border = block_to_pixel(camera_x_block) + SCENE_WIDTH_PIXELS / 2;
 8005dd2:	f8df a104 	ldr.w	sl, [pc, #260]	; 8005ed8 <draw_movable+0x124>
 8005dd6:	f8ba 0000 	ldrh.w	r0, [sl]
 8005dda:	f7ff fbe4 	bl	80055a6 <block_to_pixel>
 8005dde:	f100 05a0 	add.w	r5, r0, #160	; 0xa0
	int bottom_border = block_to_pixel(camera_y_block) + SCENE_HEIGHT_PIXELS / 2;
 8005de2:	f8b9 0000 	ldrh.w	r0, [r9]
 8005de6:	f7ff fbde 	bl	80055a6 <block_to_pixel>
 8005dea:	f100 0978 	add.w	r9, r0, #120	; 0x78
	int left_border = block_to_pixel(camera_x_block) - SCENE_WIDTH_PIXELS / 2;
 8005dee:	f8ba 0000 	ldrh.w	r0, [sl]
 8005df2:	f7ff fbd8 	bl	80055a6 <block_to_pixel>

	posx_pixel x_pos = pos->x;
 8005df6:	f9b4 3000 	ldrsh.w	r3, [r4]
	posy_pixel y_pos = pos->y;
 8005dfa:	f9b4 4002 	ldrsh.w	r4, [r4, #2]

	// if postion is not in scene - do not mind drawing it
	if (!(x_pos < right_border && x_pos > left_border)) {
 8005dfe:	42ab      	cmp	r3, r5
 8005e00:	da65      	bge.n	8005ece <draw_movable+0x11a>
 8005e02:	38a0      	subs	r0, #160	; 0xa0
 8005e04:	4283      	cmp	r3, r0
 8005e06:	dd62      	ble.n	8005ece <draw_movable+0x11a>
		return;
	}
	if (!(y_pos > up_border && y_pos < bottom_border )) {
 8005e08:	42b4      	cmp	r4, r6
 8005e0a:	dd60      	ble.n	8005ece <draw_movable+0x11a>
 8005e0c:	454c      	cmp	r4, r9
 8005e0e:	da5e      	bge.n	8005ece <draw_movable+0x11a>
	}

	int size_x = 0;
	int size_y = 0;

	switch (species) {
 8005e10:	2f03      	cmp	r7, #3
 8005e12:	d803      	bhi.n	8005e1c <draw_movable+0x68>
 8005e14:	e8df f007 	tbb	[pc, r7]
 8005e18:	0c090510 	.word	0x0c090510
 8005e1c:	2500      	movs	r5, #0
 8005e1e:	46ab      	mov	fp, r5
 8005e20:	e00d      	b.n	8005e3e <draw_movable+0x8a>
			size_x = COW_IMG_X;
			size_y = COW_IMG_Y;
			break;
		case _fashionist:
			size_x = FASHIONIST_IMG_X;
			size_y = FASHIONIST_IMG_Y;
 8005e22:	2518      	movs	r5, #24
			size_x = FASHIONIST_IMG_X;
 8005e24:	f04f 0b10 	mov.w	fp, #16
			break;
 8005e28:	e009      	b.n	8005e3e <draw_movable+0x8a>
		case _miner:
			size_x = MINER_IMG_X;
			size_y = MINER_IMG_Y;
 8005e2a:	2514      	movs	r5, #20
			size_x = MINER_IMG_X;
 8005e2c:	46ab      	mov	fp, r5
			break;
 8005e2e:	e006      	b.n	8005e3e <draw_movable+0x8a>
		case _merchant:
			size_x = MERCHANT_IMG_X;
			size_y = MERCHANT_IMG_Y;
 8005e30:	251c      	movs	r5, #28
			size_x = MERCHANT_IMG_X;
 8005e32:	f04f 0b10 	mov.w	fp, #16
			break;
 8005e36:	e002      	b.n	8005e3e <draw_movable+0x8a>
			size_y = COW_IMG_Y;
 8005e38:	250c      	movs	r5, #12
			size_x = COW_IMG_X;
 8005e3a:	f04f 0b18 	mov.w	fp, #24
	}
	int size = size_x * size_y;
 8005e3e:	fb05 f20b 	mul.w	r2, r5, fp
 8005e42:	9201      	str	r2, [sp, #4]

	int index = 0;
	uint16_t draw_startPoint_x 	= world_pixel_to_scene_pixel_x_band(x_pos - size_x);
 8005e44:	eba3 000b 	sub.w	r0, r3, fp
 8005e48:	b200      	sxth	r0, r0
 8005e4a:	f7fe fbe1 	bl	8004610 <world_pixel_to_scene_pixel_x_band>
 8005e4e:	b283      	uxth	r3, r0
 8005e50:	9302      	str	r3, [sp, #8]
	uint16_t draw_startPoint_y 	= world_pixel_to_scene_pixel_y_band(y_pos - size_y);
 8005e52:	1b60      	subs	r0, r4, r5
 8005e54:	b200      	sxth	r0, r0
 8005e56:	f7fe fbed 	bl	8004634 <world_pixel_to_scene_pixel_y_band>
 8005e5a:	b283      	uxth	r3, r0
 8005e5c:	9303      	str	r3, [sp, #12]
	uint8_t offset_x;
	uint8_t offset_y;
	int frst_nibble;
	int scnd_nibble;

	for (int i = 0; i < size / 2; i += 1) {
 8005e5e:	2600      	movs	r6, #0
	int index = 0;
 8005e60:	46b1      	mov	r9, r6
	for (int i = 0; i < size / 2; i += 1) {
 8005e62:	e00a      	b.n	8005e7a <draw_movable+0xc6>
		offset_x = index % (size_x / 2);
		offset_y = index / (size_x / 2);
		index++;
		frst_nibble = (pic[i] & 0b11110000) >> 4;
		scnd_nibble = (pic[i] & 0b00001111) >> 0;
		if (pic_colors[frst_nibble] != 0) UG_DrawPixel(draw_startPoint_x + 2 * offset_x, draw_startPoint_y + offset_y, pic_colors[frst_nibble]);
 8005e64:	9b02      	ldr	r3, [sp, #8]
 8005e66:	eb03 0044 	add.w	r0, r3, r4, lsl #1
 8005e6a:	9b03      	ldr	r3, [sp, #12]
 8005e6c:	1959      	adds	r1, r3, r5
 8005e6e:	b209      	sxth	r1, r1
 8005e70:	b200      	sxth	r0, r0
 8005e72:	f007 ff1f 	bl	800dcb4 <UG_DrawPixel>
 8005e76:	e018      	b.n	8005eaa <draw_movable+0xf6>
	for (int i = 0; i < size / 2; i += 1) {
 8005e78:	3601      	adds	r6, #1
 8005e7a:	9b01      	ldr	r3, [sp, #4]
 8005e7c:	ebb6 0f63 	cmp.w	r6, r3, asr #1
 8005e80:	da25      	bge.n	8005ece <draw_movable+0x11a>
		offset_x = index % (size_x / 2);
 8005e82:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8005e86:	fb99 f5f4 	sdiv	r5, r9, r4
 8005e8a:	fb04 9415 	mls	r4, r4, r5, r9
 8005e8e:	b2e4      	uxtb	r4, r4
		offset_y = index / (size_x / 2);
 8005e90:	b2ed      	uxtb	r5, r5
		index++;
 8005e92:	f109 0901 	add.w	r9, r9, #1
		frst_nibble = (pic[i] & 0b11110000) >> 4;
 8005e96:	9b00      	ldr	r3, [sp, #0]
 8005e98:	5d9f      	ldrb	r7, [r3, r6]
 8005e9a:	ea4f 1a17 	mov.w	sl, r7, lsr #4
		scnd_nibble = (pic[i] & 0b00001111) >> 0;
 8005e9e:	f007 070f 	and.w	r7, r7, #15
		if (pic_colors[frst_nibble] != 0) UG_DrawPixel(draw_startPoint_x + 2 * offset_x, draw_startPoint_y + offset_y, pic_colors[frst_nibble]);
 8005ea2:	f838 201a 	ldrh.w	r2, [r8, sl, lsl #1]
 8005ea6:	2a00      	cmp	r2, #0
 8005ea8:	d1dc      	bne.n	8005e64 <draw_movable+0xb0>
		if (pic_colors[frst_nibble] != 0) UG_DrawPixel(draw_startPoint_x + 2 * offset_x + 1, draw_startPoint_y + offset_y, pic_colors[scnd_nibble]);
 8005eaa:	f838 301a 	ldrh.w	r3, [r8, sl, lsl #1]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0e2      	beq.n	8005e78 <draw_movable+0xc4>
 8005eb2:	9b02      	ldr	r3, [sp, #8]
 8005eb4:	eb03 0044 	add.w	r0, r3, r4, lsl #1
 8005eb8:	b280      	uxth	r0, r0
 8005eba:	3001      	adds	r0, #1
 8005ebc:	9b03      	ldr	r3, [sp, #12]
 8005ebe:	1959      	adds	r1, r3, r5
 8005ec0:	f838 2017 	ldrh.w	r2, [r8, r7, lsl #1]
 8005ec4:	b209      	sxth	r1, r1
 8005ec6:	b200      	sxth	r0, r0
 8005ec8:	f007 fef4 	bl	800dcb4 <UG_DrawPixel>
 8005ecc:	e7d4      	b.n	8005e78 <draw_movable+0xc4>
	}

}
 8005ece:	b005      	add	sp, #20
 8005ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed4:	20010bea 	.word	0x20010bea
 8005ed8:	20010be8 	.word	0x20010be8

08005edc <insert_cow>:
 * Insert cow to linked list of movables
 */
void insert_cow (movable* beings, cow* movable_cow) {
	cow* new_cow = (cow*) malloc(sizeof(cow));
	new_cow = movable_cow;
	new_cow->prev = beings->tail_cow->prev;
 8005edc:	6843      	ldr	r3, [r0, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	618b      	str	r3, [r1, #24]
	new_cow->next = beings->tail_cow;
 8005ee2:	6843      	ldr	r3, [r0, #4]
 8005ee4:	614b      	str	r3, [r1, #20]

	cow* penultimate_cow = beings->tail_cow;
	penultimate_cow = penultimate_cow->prev;
 8005ee6:	699b      	ldr	r3, [r3, #24]
	penultimate_cow->next = new_cow;
 8005ee8:	6159      	str	r1, [r3, #20]
	beings->tail_cow->prev = new_cow;
 8005eea:	6843      	ldr	r3, [r0, #4]
 8005eec:	6199      	str	r1, [r3, #24]
}
 8005eee:	4770      	bx	lr

08005ef0 <insert_fashionist>:
void insert_fashionist (movable* beings, fashionist* fash) {
	fashionist* new_fashionist = (fashionist*) malloc(sizeof(fashionist));
	new_fashionist = fash;
	new_fashionist->prev = beings->tail_fashionist->prev;
 8005ef0:	68c3      	ldr	r3, [r0, #12]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	618b      	str	r3, [r1, #24]
	new_fashionist->next = beings->tail_fashionist;
 8005ef6:	68c3      	ldr	r3, [r0, #12]
 8005ef8:	614b      	str	r3, [r1, #20]

	fashionist* penultimate_fashionist = beings->tail_fashionist;
	penultimate_fashionist = penultimate_fashionist->prev;
 8005efa:	699b      	ldr	r3, [r3, #24]
	penultimate_fashionist->next = new_fashionist;
 8005efc:	6159      	str	r1, [r3, #20]
	beings->tail_fashionist->prev = new_fashionist;
 8005efe:	68c3      	ldr	r3, [r0, #12]
 8005f00:	6199      	str	r1, [r3, #24]
}
 8005f02:	4770      	bx	lr

08005f04 <insert_miner>:
void insert_miner (movable* beings, miner* min) {
	miner* new_miner = (miner*) malloc(sizeof(miner));
	new_miner = min;
	new_miner->prev = beings->tail_miner->prev;
 8005f04:	6943      	ldr	r3, [r0, #20]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	618b      	str	r3, [r1, #24]
	new_miner->next = beings->tail_miner;
 8005f0a:	6943      	ldr	r3, [r0, #20]
 8005f0c:	614b      	str	r3, [r1, #20]

	miner* penultimate_miner = beings->tail_miner;
	penultimate_miner = penultimate_miner->prev;
 8005f0e:	699b      	ldr	r3, [r3, #24]
	penultimate_miner->next = new_miner;
 8005f10:	6159      	str	r1, [r3, #20]
	beings->tail_miner->prev = new_miner;
 8005f12:	6943      	ldr	r3, [r0, #20]
 8005f14:	6199      	str	r1, [r3, #24]
}
 8005f16:	4770      	bx	lr

08005f18 <insert_merchant>:
void insert_merchant (movable* beings, merchant* merch) {
	merchant* new_merchant = (merchant*) malloc(sizeof(merchant));
	new_merchant = merch;
	new_merchant->prev = beings->tail_merchant->prev;
 8005f18:	69c3      	ldr	r3, [r0, #28]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	618b      	str	r3, [r1, #24]
	new_merchant->next = beings->tail_merchant;
 8005f1e:	69c3      	ldr	r3, [r0, #28]
 8005f20:	614b      	str	r3, [r1, #20]

	merchant* penultimate_merchant = beings->tail_merchant;
	penultimate_merchant = penultimate_merchant->prev;
 8005f22:	699b      	ldr	r3, [r3, #24]
	penultimate_merchant->next = new_merchant;
 8005f24:	6159      	str	r1, [r3, #20]
	beings->tail_merchant->prev = new_merchant;
 8005f26:	69c3      	ldr	r3, [r0, #28]
 8005f28:	6199      	str	r1, [r3, #24]
}
 8005f2a:	4770      	bx	lr

08005f2c <insert_movables>:
 * according to their spawn probabilty and current capacity
 * of beings
 */
void insert_movables(movable* beings) {
	// cows
	if (beings->beings_quantity < MAX_MOVABLE_CAPACTIY) {
 8005f2c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d900      	bls.n	8005f36 <insert_movables+0xa>
 8005f34:	4770      	bx	lr
void insert_movables(movable* beings) {
 8005f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3a:	4604      	mov	r4, r0

		life_points *lp = (life_points*) malloc(sizeof(life_points));
 8005f3c:	2002      	movs	r0, #2
 8005f3e:	f00a fb77 	bl	8010630 <malloc>
 8005f42:	4680      	mov	r8, r0
		pixel_position* pos = (pixel_position*) malloc(sizeof(pixel_position));
 8005f44:	2004      	movs	r0, #4
 8005f46:	f00a fb73 	bl	8010630 <malloc>
 8005f4a:	4607      	mov	r7, r0
		velocity *vel = (velocity*) malloc(sizeof(velocity));
 8005f4c:	2004      	movs	r0, #4
 8005f4e:	f00a fb6f 	bl	8010630 <malloc>
 8005f52:	4606      	mov	r6, r0
		move* mov = (move*) malloc(sizeof(move));
 8005f54:	200c      	movs	r0, #12
 8005f56:	f00a fb6b 	bl	8010630 <malloc>
 8005f5a:	4605      	mov	r5, r0

		pos->x = rand_range(0, WORLD_WIDTH_PIXELS);
 8005f5c:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8005f60:	2000      	movs	r0, #0
 8005f62:	f7fd f9bd 	bl	80032e0 <rand_range>
 8005f66:	8038      	strh	r0, [r7, #0]
		pos->y = 50;
 8005f68:	2332      	movs	r3, #50	; 0x32
 8005f6a:	807b      	strh	r3, [r7, #2]
		vel->y = 0;
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	8070      	strh	r0, [r6, #2]
		vel->x = 0;
 8005f70:	8030      	strh	r0, [r6, #0]
		mov->x = 0;
 8005f72:	8028      	strh	r0, [r5, #0]
		mov->y = 0;
 8005f74:	8068      	strh	r0, [r5, #2]
		mov->x_remainder = 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	606b      	str	r3, [r5, #4]
		mov->y_remainder = 0;
 8005f7a:	60ab      	str	r3, [r5, #8]

		srand(time(NULL));
 8005f7c:	f00c fa18 	bl	80123b0 <time>
 8005f80:	f00b fac8 	bl	8011514 <srand>
		int random_npc = rand() % MOVABLE_DIFFERENT_SPECIES;
 8005f84:	f00b faf4 	bl	8011570 <rand>
 8005f88:	4243      	negs	r3, r0
 8005f8a:	f000 0c03 	and.w	ip, r0, #3
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	bf58      	it	pl
 8005f94:	f1c3 0c00 	rsbpl	ip, r3, #0

		switch (random_npc) {
 8005f98:	f1bc 0f03 	cmp.w	ip, #3
 8005f9c:	d810      	bhi.n	8005fc0 <insert_movables+0x94>
 8005f9e:	e8df f00c 	tbb	[pc, ip]
 8005fa2:	1602      	.short	0x1602
 8005fa4:	3224      	.short	0x3224
			case _cow:
				lp->life_points = COW_MAX_LP;
 8005fa6:	2364      	movs	r3, #100	; 0x64
 8005fa8:	f8a8 3000 	strh.w	r3, [r8]
				cow* generated_cow = (cow*) malloc(sizeof(cow));
				generated_cow =	new_cow(lp, vel, pos, mov);
 8005fac:	462b      	mov	r3, r5
 8005fae:	463a      	mov	r2, r7
 8005fb0:	4631      	mov	r1, r6
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	f7ff fb11 	bl	80055da <new_cow>
 8005fb8:	4601      	mov	r1, r0
				insert_cow(beings, generated_cow);
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f7ff ff8e 	bl	8005edc <insert_cow>
				merchant* generated_merchant = (merchant*) malloc(sizeof(merchant));
				generated_merchant =	new_merchant(lp, vel, pos, mov);
				insert_merchant(beings, generated_merchant);
				break;
		}
				beings->beings_quantity++;
 8005fc0:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	f884 3020 	strb.w	r3, [r4, #32]
	}
}
 8005fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				lp->life_points = FASHIONIST_MAX_LP;
 8005fce:	2364      	movs	r3, #100	; 0x64
 8005fd0:	f8a8 3000 	strh.w	r3, [r8]
				generated_fashionist =	new_fashionist(lp, vel, pos, mov);
 8005fd4:	462b      	mov	r3, r5
 8005fd6:	463a      	mov	r2, r7
 8005fd8:	4631      	mov	r1, r6
 8005fda:	4640      	mov	r0, r8
 8005fdc:	f000 ffbf 	bl	8006f5e <new_fashionist>
 8005fe0:	4601      	mov	r1, r0
				insert_fashionist(beings, generated_fashionist);
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f7ff ff84 	bl	8005ef0 <insert_fashionist>
				break;
 8005fe8:	e7ea      	b.n	8005fc0 <insert_movables+0x94>
				lp->life_points = MINER_MAX_LP;
 8005fea:	2364      	movs	r3, #100	; 0x64
 8005fec:	f8a8 3000 	strh.w	r3, [r8]
				generated_miner =	new_miner(lp, vel, pos, mov);
 8005ff0:	462b      	mov	r3, r5
 8005ff2:	463a      	mov	r2, r7
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	f001 f80f 	bl	800701a <new_miner>
 8005ffc:	4601      	mov	r1, r0
				insert_miner(beings, generated_miner);
 8005ffe:	4620      	mov	r0, r4
 8006000:	f7ff ff80 	bl	8005f04 <insert_miner>
				break;
 8006004:	e7dc      	b.n	8005fc0 <insert_movables+0x94>
				lp->life_points = MERCHANT_MAX_LP;
 8006006:	2364      	movs	r3, #100	; 0x64
 8006008:	f8a8 3000 	strh.w	r3, [r8]
				generated_merchant =	new_merchant(lp, vel, pos, mov);
 800600c:	462b      	mov	r3, r5
 800600e:	463a      	mov	r2, r7
 8006010:	4631      	mov	r1, r6
 8006012:	4640      	mov	r0, r8
 8006014:	f000 ffd2 	bl	8006fbc <new_merchant>
 8006018:	4601      	mov	r1, r0
				insert_merchant(beings, generated_merchant);
 800601a:	4620      	mov	r0, r4
 800601c:	f7ff ff7c 	bl	8005f18 <insert_merchant>
				break;
 8006020:	e7ce      	b.n	8005fc0 <insert_movables+0x94>

08006022 <update_movables_position>:


void update_movables_position(pixel_position* pos, move* mov) {
 8006022:	b538      	push	{r3, r4, r5, lr}
 8006024:	4604      	mov	r4, r0
 8006026:	460d      	mov	r5, r1
	update_position_x(pos, pos->x, mov->x);
 8006028:	f9b1 2000 	ldrsh.w	r2, [r1]
 800602c:	f9b0 1000 	ldrsh.w	r1, [r0]
 8006030:	f000 fb30 	bl	8006694 <update_position_x>
	update_position_y(pos, pos->y, (-1) * mov->y);
 8006034:	886a      	ldrh	r2, [r5, #2]
 8006036:	4252      	negs	r2, r2
 8006038:	b212      	sxth	r2, r2
 800603a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800603e:	4620      	mov	r0, r4
 8006040:	f000 fb41 	bl	80066c6 <update_position_y>
}
 8006044:	bd38      	pop	{r3, r4, r5, pc}
	...

08006048 <update_movables_move>:

void update_movables_move(move* mov, velocity* vel, uint8_t FPS){
 8006048:	b510      	push	{r4, lr}
	float mov_x = ((float) 1 / ((float) (1000 / FPS) / (float) vel->x)) + mov->x_remainder;
 800604a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 800604e:	fb9c fcf2 	sdiv	ip, ip, r2
 8006052:	ee07 ca90 	vmov	s15, ip
 8006056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800605a:	f9b1 2000 	ldrsh.w	r2, [r1]
 800605e:	ee07 2a10 	vmov	s14, r2
 8006062:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006066:	eec7 5a87 	vdiv.f32	s11, s15, s14
 800606a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800606e:	eec6 6a25 	vdiv.f32	s13, s12, s11
 8006072:	ed90 7a01 	vldr	s14, [r0, #4]
 8006076:	ee76 6a87 	vadd.f32	s13, s13, s14
	float mov_y = ((float) 1 / ((float) (1000 / FPS) / (float) vel->y)) + mov->y_remainder;
 800607a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800607e:	ee07 2a10 	vmov	s14, r2
 8006082:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006086:	eec7 5a87 	vdiv.f32	s11, s15, s14
 800608a:	ee86 7a25 	vdiv.f32	s14, s12, s11
 800608e:	edd0 7a02 	vldr	s15, [r0, #8]
 8006092:	ee37 7a27 	vadd.f32	s14, s14, s15

	short pix_move_x = (short) mov_x % 100;
 8006096:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800609a:	ee17 2a90 	vmov	r2, s15
 800609e:	b211      	sxth	r1, r2
 80060a0:	4c16      	ldr	r4, [pc, #88]	; (80060fc <update_movables_move+0xb4>)
 80060a2:	fb84 c201 	smull	ip, r2, r4, r1
 80060a6:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 80060aa:	ebcc 1c62 	rsb	ip, ip, r2, asr #5
 80060ae:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80060b2:	fb0e 111c 	mls	r1, lr, ip, r1
 80060b6:	b209      	sxth	r1, r1
	short pix_move_y = (short) mov_y % 100;
 80060b8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80060bc:	ee17 2a90 	vmov	r2, s15
 80060c0:	b212      	sxth	r2, r2
 80060c2:	fb84 c402 	smull	ip, r4, r4, r2
 80060c6:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 80060ca:	ebcc 1464 	rsb	r4, ip, r4, asr #5
 80060ce:	fb0e 2214 	mls	r2, lr, r4, r2
 80060d2:	b212      	sxth	r2, r2

	mov->x_remainder = mov_x - (float) pix_move_x;
 80060d4:	ee07 1a90 	vmov	s15, r1
 80060d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80060e0:	edc0 6a01 	vstr	s13, [r0, #4]
	mov->y_remainder = mov_y - (float) pix_move_y;
 80060e4:	ee07 2a90 	vmov	s15, r2
 80060e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060f0:	ed80 7a02 	vstr	s14, [r0, #8]

	set_move(mov, pix_move_x, pix_move_y);
 80060f4:	f000 fac8 	bl	8006688 <set_move>
}
 80060f8:	bd10      	pop	{r4, pc}
 80060fa:	bf00      	nop
 80060fc:	51eb851f 	.word	0x51eb851f

08006100 <update_movables_velocity>:

void update_movables_velocity(velocity* vel, pixel_position* pos, uint8_t species){
 8006100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006104:	b089      	sub	sp, #36	; 0x24
 8006106:	4604      	mov	r4, r0
 8006108:	460d      	mov	r5, r1
	short max_up_vel = 0;
	short max_right_vel = 0;
	short max_down_vel = 0;
	short max_left_vel = 0;

	switch (species) {
 800610a:	2a03      	cmp	r2, #3
 800610c:	d803      	bhi.n	8006116 <update_movables_velocity+0x16>
 800610e:	e8df f002 	tbb	[pc, r2]
 8006112:	0c3b      	.short	0x0c3b
 8006114:	2c1c      	.short	0x2c1c
 8006116:	2300      	movs	r3, #0
 8006118:	461f      	mov	r7, r3
 800611a:	9306      	str	r3, [sp, #24]
 800611c:	469a      	mov	sl, r3
 800611e:	9305      	str	r3, [sp, #20]
 8006120:	9304      	str	r3, [sp, #16]
 8006122:	9307      	str	r3, [sp, #28]
 8006124:	469b      	mov	fp, r3
 8006126:	461e      	mov	r6, r3
 8006128:	e03d      	b.n	80061a6 <update_movables_velocity+0xa6>
			img_size_y = FASHIONIST_IMG_Y;

			max_up_vel = FASHIONIST_MAX_UP_VELOCITY;
			max_right_vel = FASHIONIST_MAX_RIGHT_VELOCITY;
			max_down_vel = FASHIONIST_MAX_DOWN_VELOCITY;
			max_left_vel = FASHIONIST_MAX_LEFT_VELOCITY;
 800612a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800612e:	9306      	str	r3, [sp, #24]
			max_down_vel = FASHIONIST_MAX_DOWN_VELOCITY;
 8006130:	f8df a27c 	ldr.w	sl, [pc, #636]	; 80063b0 <update_movables_velocity+0x2b0>
			max_right_vel = FASHIONIST_MAX_RIGHT_VELOCITY;
 8006134:	2364      	movs	r3, #100	; 0x64
 8006136:	9305      	str	r3, [sp, #20]
			max_up_vel = FASHIONIST_MAX_UP_VELOCITY;
 8006138:	23c8      	movs	r3, #200	; 0xc8
 800613a:	9304      	str	r3, [sp, #16]

			walk_vel_inc = FASHIONIST_WALK_VEL_INC;
			jump_vel_inc = FASHIONIST_JUMP_ACCELERATION;
 800613c:	2396      	movs	r3, #150	; 0x96
 800613e:	9307      	str	r3, [sp, #28]
			walk_vel_inc = FASHIONIST_WALK_VEL_INC;
 8006140:	f04f 0b0a 	mov.w	fp, #10
			img_size_y = FASHIONIST_IMG_Y;
 8006144:	2618      	movs	r6, #24
			img_size_x = FASHIONIST_IMG_X;
 8006146:	2710      	movs	r7, #16
			break;
 8006148:	e02d      	b.n	80061a6 <update_movables_velocity+0xa6>
			img_size_y = MINER_IMG_Y;

			max_up_vel = MINER_MAX_UP_VELOCITY;
			max_right_vel = MINER_MAX_RIGHT_VELOCITY;
			max_down_vel = MINER_MAX_DOWN_VELOCITY;
			max_left_vel = MINER_MAX_LEFT_VELOCITY;
 800614a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800614e:	9306      	str	r3, [sp, #24]
			max_down_vel = MINER_MAX_DOWN_VELOCITY;
 8006150:	f8df a25c 	ldr.w	sl, [pc, #604]	; 80063b0 <update_movables_velocity+0x2b0>
			max_right_vel = MINER_MAX_RIGHT_VELOCITY;
 8006154:	2364      	movs	r3, #100	; 0x64
 8006156:	9305      	str	r3, [sp, #20]
			max_up_vel = MINER_MAX_UP_VELOCITY;
 8006158:	23c8      	movs	r3, #200	; 0xc8
 800615a:	9304      	str	r3, [sp, #16]

			walk_vel_inc = MINER_WALK_VEL_INC;
			jump_vel_inc = MINER_JUMP_ACCELERATION;
 800615c:	2332      	movs	r3, #50	; 0x32
 800615e:	9307      	str	r3, [sp, #28]
			walk_vel_inc = MINER_WALK_VEL_INC;
 8006160:	f04f 0b05 	mov.w	fp, #5
			img_size_y = MINER_IMG_Y;
 8006164:	2614      	movs	r6, #20
			img_size_x = MINER_IMG_X;
 8006166:	4637      	mov	r7, r6
			break;
 8006168:	e01d      	b.n	80061a6 <update_movables_velocity+0xa6>
			img_size_y = MERCHANT_IMG_Y;

			max_up_vel = MERCHANT_MAX_UP_VELOCITY;
			max_right_vel = MERCHANT_MAX_RIGHT_VELOCITY;
			max_down_vel = MERCHANT_MAX_DOWN_VELOCITY;
			max_left_vel = MERCHANT_MAX_LEFT_VELOCITY;
 800616a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800616e:	9306      	str	r3, [sp, #24]
			max_down_vel = MERCHANT_MAX_DOWN_VELOCITY;
 8006170:	f8df a23c 	ldr.w	sl, [pc, #572]	; 80063b0 <update_movables_velocity+0x2b0>
			max_right_vel = MERCHANT_MAX_RIGHT_VELOCITY;
 8006174:	2364      	movs	r3, #100	; 0x64
 8006176:	9305      	str	r3, [sp, #20]
			max_up_vel = MERCHANT_MAX_UP_VELOCITY;
 8006178:	23c8      	movs	r3, #200	; 0xc8
 800617a:	9304      	str	r3, [sp, #16]

			walk_vel_inc = MERCHANT_WALK_VEL_INC;
			jump_vel_inc = MERCHANT_JUMP_ACCELERATION;
 800617c:	2314      	movs	r3, #20
 800617e:	9307      	str	r3, [sp, #28]
			walk_vel_inc = MERCHANT_WALK_VEL_INC;
 8006180:	469b      	mov	fp, r3
			img_size_y = MERCHANT_IMG_Y;
 8006182:	261c      	movs	r6, #28
			img_size_x = MERCHANT_IMG_X;
 8006184:	2710      	movs	r7, #16
			break;
 8006186:	e00e      	b.n	80061a6 <update_movables_velocity+0xa6>
			max_left_vel = COW_MAX_LEFT_VELOCITY;
 8006188:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800618c:	9306      	str	r3, [sp, #24]
			max_down_vel = COW_MAX_DOWN_VELOCITY;
 800618e:	f8df a220 	ldr.w	sl, [pc, #544]	; 80063b0 <update_movables_velocity+0x2b0>
			max_right_vel = COW_MAX_RIGHT_VELOCITY;
 8006192:	2364      	movs	r3, #100	; 0x64
 8006194:	9305      	str	r3, [sp, #20]
			max_up_vel = COW_MAX_UP_VELOCITY;
 8006196:	23c8      	movs	r3, #200	; 0xc8
 8006198:	9304      	str	r3, [sp, #16]
			jump_vel_inc = COW_JUMP_ACCELERATION;
 800619a:	2332      	movs	r3, #50	; 0x32
 800619c:	9307      	str	r3, [sp, #28]
			walk_vel_inc = COW_WALK_VEL_INC;
 800619e:	f04f 0b0a 	mov.w	fp, #10
			img_size_y = COW_IMG_Y;
 80061a2:	260c      	movs	r6, #12
			img_size_x = COW_IMG_X;
 80061a4:	2718      	movs	r7, #24
	}

	bool collision_up = collision(_solid, _up, pos, img_size_x, img_size_y);
 80061a6:	b2ff      	uxtb	r7, r7
 80061a8:	b2f6      	uxtb	r6, r6
 80061aa:	9600      	str	r6, [sp, #0]
 80061ac:	463b      	mov	r3, r7
 80061ae:	462a      	mov	r2, r5
 80061b0:	2100      	movs	r1, #0
 80061b2:	2002      	movs	r0, #2
 80061b4:	f7ff faca 	bl	800574c <collision>
 80061b8:	4680      	mov	r8, r0
	bool collision_right = collision(_solid, _right, pos, img_size_x, img_size_y);
 80061ba:	9600      	str	r6, [sp, #0]
 80061bc:	463b      	mov	r3, r7
 80061be:	462a      	mov	r2, r5
 80061c0:	2101      	movs	r1, #1
 80061c2:	2002      	movs	r0, #2
 80061c4:	f7ff fac2 	bl	800574c <collision>
 80061c8:	9003      	str	r0, [sp, #12]
	bool collision_down = collision(_solid, _down, pos, img_size_x, img_size_y);
 80061ca:	9600      	str	r6, [sp, #0]
 80061cc:	463b      	mov	r3, r7
 80061ce:	462a      	mov	r2, r5
 80061d0:	2102      	movs	r1, #2
 80061d2:	4608      	mov	r0, r1
 80061d4:	f7ff faba 	bl	800574c <collision>
 80061d8:	4681      	mov	r9, r0
	bool collision_left = collision(_solid, _left, pos, img_size_x, img_size_y);
 80061da:	9600      	str	r6, [sp, #0]
 80061dc:	463b      	mov	r3, r7
 80061de:	462a      	mov	r2, r5
 80061e0:	2103      	movs	r1, #3
 80061e2:	2002      	movs	r0, #2
 80061e4:	f7ff fab2 	bl	800574c <collision>
 80061e8:	4606      	mov	r6, r0
	bool rand_up = false;
	bool rand_right = false;
	bool rand_left = false;
	bool rand_down = false;

	srand(time(NULL));
 80061ea:	2000      	movs	r0, #0
 80061ec:	f00c f8e0 	bl	80123b0 <time>
 80061f0:	f00b f990 	bl	8011514 <srand>
	if (rand() % 100 > 50) {
 80061f4:	f00b f9bc 	bl	8011570 <rand>
 80061f8:	4a6c      	ldr	r2, [pc, #432]	; (80063ac <update_movables_velocity+0x2ac>)
 80061fa:	fb82 3200 	smull	r3, r2, r2, r0
 80061fe:	17c3      	asrs	r3, r0, #31
 8006200:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8006204:	2264      	movs	r2, #100	; 0x64
 8006206:	fb02 0313 	mls	r3, r2, r3, r0
 800620a:	2b32      	cmp	r3, #50	; 0x32
 800620c:	dc4e      	bgt.n	80062ac <update_movables_velocity+0x1ac>
	bool rand_up = false;
 800620e:	2700      	movs	r7, #0
		rand_up = true;
	} else {

	}
	srand(time(NULL));
 8006210:	2000      	movs	r0, #0
 8006212:	f00c f8cd 	bl	80123b0 <time>
 8006216:	f00b f97d 	bl	8011514 <srand>
	if (rand() % 100 > 50) {
 800621a:	f00b f9a9 	bl	8011570 <rand>
 800621e:	4a63      	ldr	r2, [pc, #396]	; (80063ac <update_movables_velocity+0x2ac>)
 8006220:	fb82 3200 	smull	r3, r2, r2, r0
 8006224:	17c3      	asrs	r3, r0, #31
 8006226:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800622a:	2264      	movs	r2, #100	; 0x64
 800622c:	fb02 0313 	mls	r3, r2, r3, r0
 8006230:	2b32      	cmp	r3, #50	; 0x32
 8006232:	dd5a      	ble.n	80062ea <update_movables_velocity+0x1ea>
	}

	/* ----------------------------------------------- HORIZONTAL ----------------------------------------------- */
	if (rand_right) {
//		player->orientation = true;
			if (vel->x < 0) {
 8006234:	f9b4 1000 	ldrsh.w	r1, [r4]
 8006238:	2900      	cmp	r1, #0
 800623a:	db39      	blt.n	80062b0 <update_movables_velocity+0x1b0>
				set_velocity(vel, 0 + walk_vel_inc, vel->y);		// Walk right
			} else {
				set_velocity(vel, vel->x + walk_vel_inc, vel->y);
 800623c:	fa1b f181 	uxtah	r1, fp, r1
 8006240:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8006244:	b209      	sxth	r1, r1
 8006246:	4620      	mov	r0, r4
 8006248:	f000 faad 	bl	80067a6 <set_velocity>
			}
			// Single step collision
			if (collision_right && collision_down && !collision_up) { // && pixel_to_block(player->pos->y) <= LVL1_HMAP[pixel_to_block(player->pos->x)]) {
 800624c:	9b03      	ldr	r3, [sp, #12]
 800624e:	b12b      	cbz	r3, 800625c <update_movables_velocity+0x15c>
 8006250:	f1b9 0f00 	cmp.w	r9, #0
 8006254:	d002      	beq.n	800625c <update_movables_velocity+0x15c>
 8006256:	f1b8 0f00 	cmp.w	r8, #0
 800625a:	d030      	beq.n	80062be <update_movables_velocity+0x1be>
				update_position_y(pos, pos->y, -BLOCK_WIDTH);
			}

			// MAX VELOCITY IN X DIRECTION
			if (vel->x > max_right_vel) {
 800625c:	f9b4 3000 	ldrsh.w	r3, [r4]
 8006260:	9a05      	ldr	r2, [sp, #20]
 8006262:	4293      	cmp	r3, r2
 8006264:	dc33      	bgt.n	80062ce <update_movables_velocity+0x1ce>
				set_velocity(vel, max_right_vel, vel->y);
			}
			// Stop if collision
			if (collision_right) {
 8006266:	9b03      	ldr	r3, [sp, #12]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d137      	bne.n	80062dc <update_movables_velocity+0x1dc>

	/* -----------------------------------------------            ----------------------------------------------- */


	/* ----------------------------------------------- VERTICAL ----------------------------------------------- */
		set_velocity(vel, vel->x, vel->y + GRAVITY);
 800626c:	8862      	ldrh	r2, [r4, #2]
 800626e:	3a05      	subs	r2, #5
 8006270:	b212      	sxth	r2, r2
 8006272:	f9b4 1000 	ldrsh.w	r1, [r4]
 8006276:	4620      	mov	r0, r4
 8006278:	f000 fa95 	bl	80067a6 <set_velocity>

		if (collision_down) {
 800627c:	f1b9 0f00 	cmp.w	r9, #0
 8006280:	d072      	beq.n	8006368 <update_movables_velocity+0x268>
			// jump
			if (rand_up) {
 8006282:	2f00      	cmp	r7, #0
 8006284:	d06a      	beq.n	800635c <update_movables_velocity+0x25c>
				set_velocity(vel, vel->x, vel->y + jump_vel_inc);
 8006286:	8862      	ldrh	r2, [r4, #2]
 8006288:	9b07      	ldr	r3, [sp, #28]
 800628a:	441a      	add	r2, r3
 800628c:	b212      	sxth	r2, r2
 800628e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8006292:	4620      	mov	r0, r4
 8006294:	f000 fa87 	bl	80067a6 <set_velocity>
				if (collision_up) {
 8006298:	f1b8 0f00 	cmp.w	r8, #0
 800629c:	d064      	beq.n	8006368 <update_movables_velocity+0x268>
					set_velocity(vel, vel->x, 0);
 800629e:	2200      	movs	r2, #0
 80062a0:	f9b4 1000 	ldrsh.w	r1, [r4]
 80062a4:	4620      	mov	r0, r4
 80062a6:	f000 fa7e 	bl	80067a6 <set_velocity>
 80062aa:	e05d      	b.n	8006368 <update_movables_velocity+0x268>
		rand_up = true;
 80062ac:	2701      	movs	r7, #1
 80062ae:	e7af      	b.n	8006210 <update_movables_velocity+0x110>
				set_velocity(vel, 0 + walk_vel_inc, vel->y);		// Walk right
 80062b0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80062b4:	4659      	mov	r1, fp
 80062b6:	4620      	mov	r0, r4
 80062b8:	f000 fa75 	bl	80067a6 <set_velocity>
 80062bc:	e7c6      	b.n	800624c <update_movables_velocity+0x14c>
				update_position_y(pos, pos->y, -BLOCK_WIDTH);
 80062be:	f06f 0203 	mvn.w	r2, #3
 80062c2:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80062c6:	4628      	mov	r0, r5
 80062c8:	f000 f9fd 	bl	80066c6 <update_position_y>
 80062cc:	e7c6      	b.n	800625c <update_movables_velocity+0x15c>
				set_velocity(vel, max_right_vel, vel->y);
 80062ce:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80062d2:	9905      	ldr	r1, [sp, #20]
 80062d4:	4620      	mov	r0, r4
 80062d6:	f000 fa66 	bl	80067a6 <set_velocity>
 80062da:	e7c4      	b.n	8006266 <update_movables_velocity+0x166>
				set_velocity(vel, 0, vel->y);
 80062dc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80062e0:	2100      	movs	r1, #0
 80062e2:	4620      	mov	r0, r4
 80062e4:	f000 fa5f 	bl	80067a6 <set_velocity>
 80062e8:	e7c0      	b.n	800626c <update_movables_velocity+0x16c>
			if (vel->x > 0) {
 80062ea:	f9b4 1000 	ldrsh.w	r1, [r4]
 80062ee:	2900      	cmp	r1, #0
 80062f0:	dd1b      	ble.n	800632a <update_movables_velocity+0x22a>
				set_velocity(vel, 0 - walk_vel_inc, vel->y);
 80062f2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80062f6:	f1cb 0100 	rsb	r1, fp, #0
 80062fa:	4620      	mov	r0, r4
 80062fc:	f000 fa53 	bl	80067a6 <set_velocity>
			if (collision_left && collision_down && !collision_up) {// && pixel_to_block(player->pos->y) <= LVL1_HMAP[pixel_to_block(player->pos->x)]) {
 8006300:	b12e      	cbz	r6, 800630e <update_movables_velocity+0x20e>
 8006302:	f1b9 0f00 	cmp.w	r9, #0
 8006306:	d002      	beq.n	800630e <update_movables_velocity+0x20e>
 8006308:	f1b8 0f00 	cmp.w	r8, #0
 800630c:	d017      	beq.n	800633e <update_movables_velocity+0x23e>
			if (vel->x < max_left_vel) {
 800630e:	f9b4 3000 	ldrsh.w	r3, [r4]
 8006312:	9a06      	ldr	r2, [sp, #24]
 8006314:	4293      	cmp	r3, r2
 8006316:	db1a      	blt.n	800634e <update_movables_velocity+0x24e>
			if (collision_left) {
 8006318:	2e00      	cmp	r6, #0
 800631a:	d0a7      	beq.n	800626c <update_movables_velocity+0x16c>
				set_velocity(vel, 0, vel->y);
 800631c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8006320:	2100      	movs	r1, #0
 8006322:	4620      	mov	r0, r4
 8006324:	f000 fa3f 	bl	80067a6 <set_velocity>
 8006328:	e7a0      	b.n	800626c <update_movables_velocity+0x16c>
				set_velocity(vel, vel->x - walk_vel_inc, vel->y);
 800632a:	b289      	uxth	r1, r1
 800632c:	eba1 010b 	sub.w	r1, r1, fp
 8006330:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8006334:	b209      	sxth	r1, r1
 8006336:	4620      	mov	r0, r4
 8006338:	f000 fa35 	bl	80067a6 <set_velocity>
 800633c:	e7e0      	b.n	8006300 <update_movables_velocity+0x200>
				update_position_y(pos, pos->y, -BLOCK_WIDTH);
 800633e:	f06f 0203 	mvn.w	r2, #3
 8006342:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8006346:	4628      	mov	r0, r5
 8006348:	f000 f9bd 	bl	80066c6 <update_position_y>
 800634c:	e7df      	b.n	800630e <update_movables_velocity+0x20e>
				set_velocity(vel, max_left_vel, vel->y);
 800634e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8006352:	9906      	ldr	r1, [sp, #24]
 8006354:	4620      	mov	r0, r4
 8006356:	f000 fa26 	bl	80067a6 <set_velocity>
 800635a:	e7dd      	b.n	8006318 <update_movables_velocity+0x218>
				}
			} else {
				set_velocity(vel, vel->x, 0);
 800635c:	2200      	movs	r2, #0
 800635e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8006362:	4620      	mov	r0, r4
 8006364:	f000 fa1f 	bl	80067a6 <set_velocity>
			}
		}

		// Check for collision upwards regardless of the ground
		if (collision_up) {
 8006368:	f1b8 0f00 	cmp.w	r8, #0
 800636c:	d109      	bne.n	8006382 <update_movables_velocity+0x282>
			set_velocity(vel, vel->x, 0);
		}

		// MAX VELOCITY IN Y DIRECTION
		if (vel->y < max_down_vel) {
 800636e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8006372:	4553      	cmp	r3, sl
 8006374:	db0c      	blt.n	8006390 <update_movables_velocity+0x290>
			set_velocity(vel, vel->x, max_down_vel);
		} else if (vel->y > max_up_vel) {
 8006376:	9a04      	ldr	r2, [sp, #16]
 8006378:	4293      	cmp	r3, r2
 800637a:	dc10      	bgt.n	800639e <update_movables_velocity+0x29e>
			set_velocity(vel, vel->x, max_down_vel);
		}

		/* -----------------------------------------------          ----------------------------------------------- */
}
 800637c:	b009      	add	sp, #36	; 0x24
 800637e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			set_velocity(vel, vel->x, 0);
 8006382:	2200      	movs	r2, #0
 8006384:	f9b4 1000 	ldrsh.w	r1, [r4]
 8006388:	4620      	mov	r0, r4
 800638a:	f000 fa0c 	bl	80067a6 <set_velocity>
 800638e:	e7ee      	b.n	800636e <update_movables_velocity+0x26e>
			set_velocity(vel, vel->x, max_down_vel);
 8006390:	4652      	mov	r2, sl
 8006392:	f9b4 1000 	ldrsh.w	r1, [r4]
 8006396:	4620      	mov	r0, r4
 8006398:	f000 fa05 	bl	80067a6 <set_velocity>
 800639c:	e7ee      	b.n	800637c <update_movables_velocity+0x27c>
			set_velocity(vel, vel->x, max_down_vel);
 800639e:	4652      	mov	r2, sl
 80063a0:	f9b4 1000 	ldrsh.w	r1, [r4]
 80063a4:	4620      	mov	r0, r4
 80063a6:	f000 f9fe 	bl	80067a6 <set_velocity>
}
 80063aa:	e7e7      	b.n	800637c <update_movables_velocity+0x27c>
 80063ac:	51eb851f 	.word	0x51eb851f
 80063b0:	fffffe0c 	.word	0xfffffe0c

080063b4 <refresh_movables>:

void refresh_movables(movable* beings, uint8_t FPS) {
 80063b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b8:	b085      	sub	sp, #20
 80063ba:	4680      	mov	r8, r0
 80063bc:	468b      	mov	fp, r1
	insert_movables(beings);
 80063be:	f7ff fdb5 	bl	8005f2c <insert_movables>

	/* -------------------------------- travers through COWS -------------------------------- */
	cow* travers_cow = (cow*) malloc(sizeof(cow));
	travers_cow = beings->header_cow->next;
 80063c2:	f8d8 3000 	ldr.w	r3, [r8]
 80063c6:	695f      	ldr	r7, [r3, #20]

	fashionist* travers_fashionist = (fashionist*) malloc(sizeof(fashionist));
	travers_fashionist = beings->header_fashionist->next;
 80063c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80063cc:	695e      	ldr	r6, [r3, #20]

	miner* travers_miner = (miner*) malloc(sizeof(miner));
	travers_miner = beings->header_miner->next;
 80063ce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80063d2:	695d      	ldr	r5, [r3, #20]

	merchant* travers_merchant = (merchant*) malloc(sizeof(merchant));
	travers_merchant = beings->header_merchant->next;
 80063d4:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80063d8:	695c      	ldr	r4, [r3, #20]

	bool cows_finished = false;
	bool fash_finished = false;
	bool miner_finished = false;
	bool merchant_finished = false;
 80063da:	2300      	movs	r3, #0
 80063dc:	9303      	str	r3, [sp, #12]
	bool miner_finished = false;
 80063de:	9302      	str	r3, [sp, #8]
	bool fash_finished = false;
 80063e0:	9301      	str	r3, [sp, #4]
	bool cows_finished = false;
 80063e2:	9300      	str	r3, [sp, #0]

	while(1) {

		if (travers_cow != beings->tail_cow && travers_cow != NULL) {
 80063e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80063e8:	42bb      	cmp	r3, r7
 80063ea:	f000 80d6 	beq.w	800659a <refresh_movables+0x1e6>
 80063ee:	2f00      	cmp	r7, #0
 80063f0:	f000 80d6 	beq.w	80065a0 <refresh_movables+0x1ec>
			uint16_t prev_cow_x = travers_cow->pos->x;
 80063f4:	68f9      	ldr	r1, [r7, #12]
 80063f6:	f9b1 9000 	ldrsh.w	r9, [r1]
 80063fa:	fa1f f989 	uxth.w	r9, r9
			uint16_t prev_cow_y = travers_cow->pos->y;
 80063fe:	f9b1 a002 	ldrsh.w	sl, [r1, #2]
 8006402:	fa1f fa8a 	uxth.w	sl, sl
			update_movables_velocity(travers_cow->vel, travers_cow->pos, _cow);
 8006406:	2200      	movs	r2, #0
 8006408:	68b8      	ldr	r0, [r7, #8]
 800640a:	f7ff fe79 	bl	8006100 <update_movables_velocity>
			update_movables_move(travers_cow->mov, travers_cow->vel, FPS);
 800640e:	465a      	mov	r2, fp
 8006410:	68b9      	ldr	r1, [r7, #8]
 8006412:	6938      	ldr	r0, [r7, #16]
 8006414:	f7ff fe18 	bl	8006048 <update_movables_move>
			update_movables_position(travers_cow->pos, travers_cow->mov);
 8006418:	6939      	ldr	r1, [r7, #16]
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f7ff fe01 	bl	8006022 <update_movables_position>
			if (!(prev_cow_x == travers_cow->pos->x && prev_cow_y == travers_cow->pos->y)) {
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006426:	4599      	cmp	r9, r3
 8006428:	d103      	bne.n	8006432 <refresh_movables+0x7e>
 800642a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800642e:	459a      	cmp	sl, r3
 8006430:	d00a      	beq.n	8006448 <refresh_movables+0x94>
				draw_movable(cow_r_0, cow_colors_0, travers_cow->pos, _cow);
 8006432:	2300      	movs	r3, #0
 8006434:	4965      	ldr	r1, [pc, #404]	; (80065cc <refresh_movables+0x218>)
 8006436:	4866      	ldr	r0, [pc, #408]	; (80065d0 <refresh_movables+0x21c>)
 8006438:	f7ff fcbc 	bl	8005db4 <draw_movable>
				camouflage_movable(travers_cow->pos, prev_cow_x, prev_cow_y, _cow);
 800643c:	2300      	movs	r3, #0
 800643e:	4652      	mov	r2, sl
 8006440:	4649      	mov	r1, r9
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7ff fb8b 	bl	8005b5e <camouflage_movable>
			}
			travers_cow = travers_cow->next;
 8006448:	697f      	ldr	r7, [r7, #20]
		} else {
			cows_finished = true;
		}

		if (travers_fashionist != beings->tail_fashionist && travers_fashionist != NULL) {
 800644a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800644e:	42b3      	cmp	r3, r6
 8006450:	f000 80a9 	beq.w	80065a6 <refresh_movables+0x1f2>
 8006454:	2e00      	cmp	r6, #0
 8006456:	f000 80a9 	beq.w	80065ac <refresh_movables+0x1f8>
			uint16_t prev_fashionist_x = travers_fashionist->pos->x;
 800645a:	6931      	ldr	r1, [r6, #16]
 800645c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8006460:	fa1f f989 	uxth.w	r9, r9
			uint16_t prev_fashionist_y = travers_fashionist->pos->y;
 8006464:	f9b1 a002 	ldrsh.w	sl, [r1, #2]
 8006468:	fa1f fa8a 	uxth.w	sl, sl
			update_movables_velocity(travers_fashionist->vel, travers_fashionist->pos, _fashionist);
 800646c:	2201      	movs	r2, #1
 800646e:	68b0      	ldr	r0, [r6, #8]
 8006470:	f7ff fe46 	bl	8006100 <update_movables_velocity>
			update_movables_move(travers_fashionist->mov, travers_fashionist->vel, FPS);
 8006474:	465a      	mov	r2, fp
 8006476:	68b1      	ldr	r1, [r6, #8]
 8006478:	68f0      	ldr	r0, [r6, #12]
 800647a:	f7ff fde5 	bl	8006048 <update_movables_move>
			update_movables_position(travers_fashionist->pos, travers_fashionist->mov);
 800647e:	68f1      	ldr	r1, [r6, #12]
 8006480:	6930      	ldr	r0, [r6, #16]
 8006482:	f7ff fdce 	bl	8006022 <update_movables_position>
			if (!(prev_fashionist_x == travers_fashionist->pos->x && prev_fashionist_y == travers_fashionist->pos->y)) {
 8006486:	6932      	ldr	r2, [r6, #16]
 8006488:	f9b2 3000 	ldrsh.w	r3, [r2]
 800648c:	4599      	cmp	r9, r3
 800648e:	d103      	bne.n	8006498 <refresh_movables+0xe4>
 8006490:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8006494:	459a      	cmp	sl, r3
 8006496:	d00a      	beq.n	80064ae <refresh_movables+0xfa>
				draw_movable(fashionist_r_0, fashionist_colors_0, travers_fashionist->pos, _fashionist);
 8006498:	2301      	movs	r3, #1
 800649a:	494e      	ldr	r1, [pc, #312]	; (80065d4 <refresh_movables+0x220>)
 800649c:	484e      	ldr	r0, [pc, #312]	; (80065d8 <refresh_movables+0x224>)
 800649e:	f7ff fc89 	bl	8005db4 <draw_movable>
				camouflage_movable(travers_fashionist->pos, prev_fashionist_x, prev_fashionist_y, _fashionist);
 80064a2:	2301      	movs	r3, #1
 80064a4:	4652      	mov	r2, sl
 80064a6:	4649      	mov	r1, r9
 80064a8:	6930      	ldr	r0, [r6, #16]
 80064aa:	f7ff fb58 	bl	8005b5e <camouflage_movable>
			}
			travers_fashionist = travers_fashionist->next;
 80064ae:	6976      	ldr	r6, [r6, #20]
		} else {
			fash_finished = true;
		}

		if (travers_miner != beings->tail_miner && travers_miner != NULL) {
 80064b0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80064b4:	42ab      	cmp	r3, r5
 80064b6:	d07c      	beq.n	80065b2 <refresh_movables+0x1fe>
 80064b8:	2d00      	cmp	r5, #0
 80064ba:	d07d      	beq.n	80065b8 <refresh_movables+0x204>
			uint16_t prev_miner_x = travers_miner->pos->x;
 80064bc:	6929      	ldr	r1, [r5, #16]
 80064be:	f9b1 9000 	ldrsh.w	r9, [r1]
 80064c2:	fa1f f989 	uxth.w	r9, r9
			uint16_t prev_miner_y = travers_miner->pos->y;
 80064c6:	f9b1 a002 	ldrsh.w	sl, [r1, #2]
 80064ca:	fa1f fa8a 	uxth.w	sl, sl
			update_movables_velocity(travers_miner->vel, travers_miner->pos, _miner);
 80064ce:	2202      	movs	r2, #2
 80064d0:	68a8      	ldr	r0, [r5, #8]
 80064d2:	f7ff fe15 	bl	8006100 <update_movables_velocity>
			update_movables_move(travers_miner->mov, travers_miner->vel, FPS);
 80064d6:	465a      	mov	r2, fp
 80064d8:	68a9      	ldr	r1, [r5, #8]
 80064da:	68e8      	ldr	r0, [r5, #12]
 80064dc:	f7ff fdb4 	bl	8006048 <update_movables_move>
			update_movables_position(travers_miner->pos, travers_miner->mov);
 80064e0:	68e9      	ldr	r1, [r5, #12]
 80064e2:	6928      	ldr	r0, [r5, #16]
 80064e4:	f7ff fd9d 	bl	8006022 <update_movables_position>
			if (!(prev_miner_x == travers_miner->pos->x && prev_miner_y == travers_miner->pos->y)) {
 80064e8:	692a      	ldr	r2, [r5, #16]
 80064ea:	f9b2 3000 	ldrsh.w	r3, [r2]
 80064ee:	4599      	cmp	r9, r3
 80064f0:	d103      	bne.n	80064fa <refresh_movables+0x146>
 80064f2:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80064f6:	459a      	cmp	sl, r3
 80064f8:	d00a      	beq.n	8006510 <refresh_movables+0x15c>
				draw_movable(miner_r_0, miner_colors_0, travers_miner->pos, _miner);
 80064fa:	2302      	movs	r3, #2
 80064fc:	4937      	ldr	r1, [pc, #220]	; (80065dc <refresh_movables+0x228>)
 80064fe:	4838      	ldr	r0, [pc, #224]	; (80065e0 <refresh_movables+0x22c>)
 8006500:	f7ff fc58 	bl	8005db4 <draw_movable>
				camouflage_movable(travers_miner->pos, prev_miner_x, prev_miner_y, _miner);
 8006504:	2302      	movs	r3, #2
 8006506:	4652      	mov	r2, sl
 8006508:	4649      	mov	r1, r9
 800650a:	6928      	ldr	r0, [r5, #16]
 800650c:	f7ff fb27 	bl	8005b5e <camouflage_movable>
			}
			travers_miner = travers_miner->next;
 8006510:	696d      	ldr	r5, [r5, #20]
		} else {
			 miner_finished = true;
		}

		if (travers_merchant != beings->tail_merchant && travers_merchant != NULL) {
 8006512:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006516:	42a3      	cmp	r3, r4
 8006518:	d051      	beq.n	80065be <refresh_movables+0x20a>
 800651a:	2c00      	cmp	r4, #0
 800651c:	d052      	beq.n	80065c4 <refresh_movables+0x210>
			uint16_t prev_merchant_x = travers_merchant->pos->x;
 800651e:	6921      	ldr	r1, [r4, #16]
 8006520:	f9b1 9000 	ldrsh.w	r9, [r1]
 8006524:	fa1f f989 	uxth.w	r9, r9
			uint16_t prev_merchant_y = travers_merchant->pos->y;
 8006528:	f9b1 a002 	ldrsh.w	sl, [r1, #2]
 800652c:	fa1f fa8a 	uxth.w	sl, sl
			update_movables_velocity(travers_merchant->vel, travers_merchant->pos, _merchant);
 8006530:	2203      	movs	r2, #3
 8006532:	68a0      	ldr	r0, [r4, #8]
 8006534:	f7ff fde4 	bl	8006100 <update_movables_velocity>
			update_movables_move(travers_merchant->mov, travers_merchant->vel, FPS);
 8006538:	465a      	mov	r2, fp
 800653a:	68a1      	ldr	r1, [r4, #8]
 800653c:	68e0      	ldr	r0, [r4, #12]
 800653e:	f7ff fd83 	bl	8006048 <update_movables_move>
			update_movables_position(travers_merchant->pos, travers_merchant->mov);
 8006542:	68e1      	ldr	r1, [r4, #12]
 8006544:	6920      	ldr	r0, [r4, #16]
 8006546:	f7ff fd6c 	bl	8006022 <update_movables_position>
			if (!(prev_merchant_x == travers_merchant->pos->x && prev_merchant_y == travers_merchant->pos->y)) {
 800654a:	6922      	ldr	r2, [r4, #16]
 800654c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006550:	4599      	cmp	r9, r3
 8006552:	d103      	bne.n	800655c <refresh_movables+0x1a8>
 8006554:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8006558:	459a      	cmp	sl, r3
 800655a:	d00a      	beq.n	8006572 <refresh_movables+0x1be>
				draw_movable(merchant_r_0, merchant_colors_0, travers_merchant->pos, _merchant);
 800655c:	2303      	movs	r3, #3
 800655e:	4921      	ldr	r1, [pc, #132]	; (80065e4 <refresh_movables+0x230>)
 8006560:	4821      	ldr	r0, [pc, #132]	; (80065e8 <refresh_movables+0x234>)
 8006562:	f7ff fc27 	bl	8005db4 <draw_movable>
				camouflage_movable(travers_merchant->pos, prev_merchant_x, prev_merchant_y, _merchant);
 8006566:	2303      	movs	r3, #3
 8006568:	4652      	mov	r2, sl
 800656a:	4649      	mov	r1, r9
 800656c:	6920      	ldr	r0, [r4, #16]
 800656e:	f7ff faf6 	bl	8005b5e <camouflage_movable>
			}
			travers_merchant = travers_merchant->next;
 8006572:	6964      	ldr	r4, [r4, #20]
		} else {
			merchant_finished = true;
		}

		if (cows_finished && fash_finished && miner_finished && merchant_finished) break;
 8006574:	9b00      	ldr	r3, [sp, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	f43f af34 	beq.w	80063e4 <refresh_movables+0x30>
 800657c:	9b01      	ldr	r3, [sp, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	f43f af30 	beq.w	80063e4 <refresh_movables+0x30>
 8006584:	9b02      	ldr	r3, [sp, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	f43f af2c 	beq.w	80063e4 <refresh_movables+0x30>
 800658c:	9b03      	ldr	r3, [sp, #12]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f43f af28 	beq.w	80063e4 <refresh_movables+0x30>
	}
}
 8006594:	b005      	add	sp, #20
 8006596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cows_finished = true;
 800659a:	2301      	movs	r3, #1
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	e754      	b.n	800644a <refresh_movables+0x96>
 80065a0:	2301      	movs	r3, #1
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	e751      	b.n	800644a <refresh_movables+0x96>
			fash_finished = true;
 80065a6:	2301      	movs	r3, #1
 80065a8:	9301      	str	r3, [sp, #4]
 80065aa:	e781      	b.n	80064b0 <refresh_movables+0xfc>
 80065ac:	2301      	movs	r3, #1
 80065ae:	9301      	str	r3, [sp, #4]
 80065b0:	e77e      	b.n	80064b0 <refresh_movables+0xfc>
			 miner_finished = true;
 80065b2:	2301      	movs	r3, #1
 80065b4:	9302      	str	r3, [sp, #8]
 80065b6:	e7ac      	b.n	8006512 <refresh_movables+0x15e>
 80065b8:	2301      	movs	r3, #1
 80065ba:	9302      	str	r3, [sp, #8]
 80065bc:	e7a9      	b.n	8006512 <refresh_movables+0x15e>
			merchant_finished = true;
 80065be:	2301      	movs	r3, #1
 80065c0:	9303      	str	r3, [sp, #12]
 80065c2:	e7d7      	b.n	8006574 <refresh_movables+0x1c0>
 80065c4:	2301      	movs	r3, #1
 80065c6:	9303      	str	r3, [sp, #12]
 80065c8:	e7d4      	b.n	8006574 <refresh_movables+0x1c0>
 80065ca:	bf00      	nop
 80065cc:	20000090 	.word	0x20000090
 80065d0:	2000009c 	.word	0x2000009c
 80065d4:	200002d8 	.word	0x200002d8
 80065d8:	200002f8 	.word	0x200002f8
 80065dc:	20000498 	.word	0x20000498
 80065e0:	200004b8 	.word	0x200004b8
 80065e4:	200003b8 	.word	0x200003b8
 80065e8:	200003d8 	.word	0x200003d8

080065ec <new_movables>:
/*
 * Initiate linked list with movables. Every species has their own linked list
 */
movable* new_movables() {
 80065ec:	b570      	push	{r4, r5, r6, lr}
	movable* beings = (movable*)malloc(sizeof(movable));
 80065ee:	2024      	movs	r0, #36	; 0x24
 80065f0:	f00a f81e 	bl	8010630 <malloc>
 80065f4:	4604      	mov	r4, r0

	beings->header_cow  = (cow*)malloc(sizeof(cow));
 80065f6:	201c      	movs	r0, #28
 80065f8:	f00a f81a 	bl	8010630 <malloc>
 80065fc:	4605      	mov	r5, r0
 80065fe:	6020      	str	r0, [r4, #0]
	beings->tail_cow	 	= (cow*)malloc(sizeof(cow));
 8006600:	201c      	movs	r0, #28
 8006602:	f00a f815 	bl	8010630 <malloc>
 8006606:	6060      	str	r0, [r4, #4]

	beings->header_cow->next = beings->tail_cow;
 8006608:	6168      	str	r0, [r5, #20]
	beings->header_cow->prev = NULL;
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	2500      	movs	r5, #0
 800660e:	619d      	str	r5, [r3, #24]
	beings->tail_cow->next 	= NULL;
 8006610:	6863      	ldr	r3, [r4, #4]
 8006612:	615d      	str	r5, [r3, #20]
	beings->tail_cow->prev 	= beings->header_cow;
 8006614:	6863      	ldr	r3, [r4, #4]
 8006616:	6822      	ldr	r2, [r4, #0]
 8006618:	619a      	str	r2, [r3, #24]

	beings->header_fashionist  = (fashionist*)malloc(sizeof(fashionist));
 800661a:	201c      	movs	r0, #28
 800661c:	f00a f808 	bl	8010630 <malloc>
 8006620:	4606      	mov	r6, r0
 8006622:	60a0      	str	r0, [r4, #8]
	beings->tail_fashionist	 	= (fashionist*)malloc(sizeof(fashionist));
 8006624:	201c      	movs	r0, #28
 8006626:	f00a f803 	bl	8010630 <malloc>
 800662a:	60e0      	str	r0, [r4, #12]

	beings->header_fashionist->next = beings->tail_fashionist;
 800662c:	6170      	str	r0, [r6, #20]
	beings->header_fashionist->prev = NULL;
 800662e:	68a3      	ldr	r3, [r4, #8]
 8006630:	619d      	str	r5, [r3, #24]
	beings->tail_fashionist->next 	= NULL;
 8006632:	68e3      	ldr	r3, [r4, #12]
 8006634:	615d      	str	r5, [r3, #20]
	beings->tail_fashionist->prev 	= beings->header_fashionist;
 8006636:	68e3      	ldr	r3, [r4, #12]
 8006638:	68a2      	ldr	r2, [r4, #8]
 800663a:	619a      	str	r2, [r3, #24]

	beings->header_miner  = (miner*)malloc(sizeof(miner));
 800663c:	201c      	movs	r0, #28
 800663e:	f009 fff7 	bl	8010630 <malloc>
 8006642:	4606      	mov	r6, r0
 8006644:	6120      	str	r0, [r4, #16]
	beings->tail_miner	 	= (miner*)malloc(sizeof(miner));
 8006646:	201c      	movs	r0, #28
 8006648:	f009 fff2 	bl	8010630 <malloc>
 800664c:	6160      	str	r0, [r4, #20]

	beings->header_miner->next = beings->tail_miner;
 800664e:	6170      	str	r0, [r6, #20]
	beings->header_miner->prev = NULL;
 8006650:	6923      	ldr	r3, [r4, #16]
 8006652:	619d      	str	r5, [r3, #24]
	beings->tail_miner->next 	= NULL;
 8006654:	6963      	ldr	r3, [r4, #20]
 8006656:	615d      	str	r5, [r3, #20]
	beings->tail_miner->prev 	= beings->header_miner;
 8006658:	6963      	ldr	r3, [r4, #20]
 800665a:	6922      	ldr	r2, [r4, #16]
 800665c:	619a      	str	r2, [r3, #24]

	beings->header_merchant  = (merchant*)malloc(sizeof(merchant));
 800665e:	201c      	movs	r0, #28
 8006660:	f009 ffe6 	bl	8010630 <malloc>
 8006664:	4606      	mov	r6, r0
 8006666:	61a0      	str	r0, [r4, #24]
	beings->tail_merchant	 	= (merchant*)malloc(sizeof(merchant));
 8006668:	201c      	movs	r0, #28
 800666a:	f009 ffe1 	bl	8010630 <malloc>
 800666e:	61e0      	str	r0, [r4, #28]

	beings->header_merchant->next = beings->tail_merchant;
 8006670:	6170      	str	r0, [r6, #20]
	beings->header_merchant->prev = NULL;
 8006672:	69a3      	ldr	r3, [r4, #24]
 8006674:	619d      	str	r5, [r3, #24]
	beings->tail_merchant->next 	= NULL;
 8006676:	69e3      	ldr	r3, [r4, #28]
 8006678:	615d      	str	r5, [r3, #20]
	beings->tail_merchant->prev 	= beings->header_merchant;
 800667a:	69e3      	ldr	r3, [r4, #28]
 800667c:	69a2      	ldr	r2, [r4, #24]
 800667e:	619a      	str	r2, [r3, #24]

	beings->beings_quantity = 0;
 8006680:	f884 5020 	strb.w	r5, [r4, #32]

	return beings;
}
 8006684:	4620      	mov	r0, r4
 8006686:	bd70      	pop	{r4, r5, r6, pc}

08006688 <set_move>:

/*
 * set move of the moveable to x and y (distance in pixels the moveable will make in one frame)
 */
void set_move (move* mov, short x, short y) {
	mov->x = x;
 8006688:	8001      	strh	r1, [r0, #0]
	mov->y = y;
 800668a:	8042      	strh	r2, [r0, #2]
}
 800668c:	4770      	bx	lr

0800668e <set_position>:

/* update postion of struct position: !!! it is different from coord, since it is used for
 * movables. The values represent the position in pixels.
 */
void set_position (pixel_position* pos, posx_pixel x, posy_pixel y) {
	pos->x = x;
 800668e:	8001      	strh	r1, [r0, #0]
	pos->y = y;
 8006690:	8042      	strh	r2, [r0, #2]
}
 8006692:	4770      	bx	lr

08006694 <update_position_x>:
void update_position_x (pixel_position* pos, posx_pixel x, posx_pixel x_diff) {
 8006694:	b508      	push	{r3, lr}
	posx_pixel final_x = x + x_diff;
 8006696:	4411      	add	r1, r2
 8006698:	b28b      	uxth	r3, r1
 800669a:	b209      	sxth	r1, r1
	if (final_x < 0) {
 800669c:	2900      	cmp	r1, #0
 800669e:	db06      	blt.n	80066ae <update_position_x+0x1a>
	} else if (final_x > WORLD_WIDTH_PIXELS) {
 80066a0:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 80066a4:	dd0a      	ble.n	80066bc <update_position_x+0x28>
		final_x = final_x - WORLD_WIDTH_PIXELS;
 80066a6:	f5a3 61c8 	sub.w	r1, r3, #1600	; 0x640
 80066aa:	b209      	sxth	r1, r1
 80066ac:	e006      	b.n	80066bc <update_position_x+0x28>
		final_x = WORLD_WIDTH_PIXELS - abs(final_x);
 80066ae:	2900      	cmp	r1, #0
 80066b0:	bfb8      	it	lt
 80066b2:	4249      	neglt	r1, r1
 80066b4:	b289      	uxth	r1, r1
 80066b6:	f5c1 61c8 	rsb	r1, r1, #1600	; 0x640
 80066ba:	b209      	sxth	r1, r1
	set_position(pos, final_x, pos->y);
 80066bc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80066c0:	f7ff ffe5 	bl	800668e <set_position>
}
 80066c4:	bd08      	pop	{r3, pc}

080066c6 <update_position_y>:
void update_position_y (pixel_position* pos, posy_pixel y, posy_pixel y_diff) {
 80066c6:	b508      	push	{r3, lr}
	posy_pixel final_y = y + y_diff;
 80066c8:	440a      	add	r2, r1
 80066ca:	b212      	sxth	r2, r2
	if (final_y < 0) {
 80066cc:	2a00      	cmp	r2, #0
 80066ce:	db05      	blt.n	80066dc <update_position_y+0x16>
	} else if (final_y > WORLD_HEIGHT_PIXELS) {
 80066d0:	f5b2 7f70 	cmp.w	r2, #960	; 0x3c0
 80066d4:	dd03      	ble.n	80066de <update_position_y+0x18>
		final_y = WORLD_HEIGHT_PIXELS - 1;
 80066d6:	f240 32bf 	movw	r2, #959	; 0x3bf
 80066da:	e000      	b.n	80066de <update_position_y+0x18>
		final_y = 0 + GUYSKO_IMG_Y;
 80066dc:	2218      	movs	r2, #24
	set_position(pos, pos->x, final_y);
 80066de:	f9b0 1000 	ldrsh.w	r1, [r0]
 80066e2:	f7ff ffd4 	bl	800668e <set_position>
}
 80066e6:	bd08      	pop	{r3, pc}

080066e8 <overdraw_background_rectangle>:
	* the parameters the function gets are given in: GLOBAL (WORLD) PIXELS
	* optimization idea: go iterate through columns and "fillFrame" for the largest
	* possible area, so that the time consuming function "UG_DRAW" is used as least
	* as possible times
*/
void overdraw_background_rectangle (posx_pixel x1, posx_pixel y1, posy_pixel x2, posy_pixel y2) {
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	b083      	sub	sp, #12
 80066ee:	4604      	mov	r4, r0

	pixel_c a = MIN(x1, x2);
 80066f0:	4610      	mov	r0, r2
 80066f2:	42a2      	cmp	r2, r4
 80066f4:	bfa8      	it	ge
 80066f6:	4620      	movge	r0, r4
 80066f8:	fa1f fa80 	uxth.w	sl, r0
	pixel_c	b = MAX(x1, x2);
 80066fc:	42a2      	cmp	r2, r4
 80066fe:	bfb8      	it	lt
 8006700:	4622      	movlt	r2, r4
 8006702:	4616      	mov	r6, r2
	pixel_c c = MIN(y1, y2);
 8006704:	461d      	mov	r5, r3
 8006706:	428b      	cmp	r3, r1
 8006708:	bfa8      	it	ge
 800670a:	460d      	movge	r5, r1
 800670c:	fa1f f985 	uxth.w	r9, r5
	pixel_c d = MAX(y1, y2);
 8006710:	428b      	cmp	r3, r1
 8006712:	bfb8      	it	lt
 8006714:	460b      	movlt	r3, r1
 8006716:	461c      	mov	r4, r3

	// transform the pixels in position world to pixels in scene
	posx_pixel left = world_pixel_to_scene_pixel_x_no_band(a);
 8006718:	f7fd ff9e 	bl	8004658 <world_pixel_to_scene_pixel_x_no_band>
 800671c:	9001      	str	r0, [sp, #4]
	posx_pixel right = world_pixel_to_scene_pixel_x_no_band(b);
 800671e:	4630      	mov	r0, r6
 8006720:	f7fd ff9a 	bl	8004658 <world_pixel_to_scene_pixel_x_no_band>
 8006724:	4680      	mov	r8, r0
	posy_pixel top = world_pixel_to_scene_pixel_y_no_band(c);
 8006726:	4628      	mov	r0, r5
 8006728:	f7fd ffa3 	bl	8004672 <world_pixel_to_scene_pixel_y_no_band>
 800672c:	4606      	mov	r6, r0
	posy_pixel bottom = world_pixel_to_scene_pixel_y_no_band(d);
 800672e:	4620      	mov	r0, r4
 8006730:	f7fd ff9f 	bl	8004672 <world_pixel_to_scene_pixel_y_no_band>
 8006734:	4683      	mov	fp, r0

	uint8_t index_i = 0;
 8006736:	2700      	movs	r7, #0
	// iterate through columns
	for (posx_pixel i = top; i <= bottom; i++) {
 8006738:	e018      	b.n	800676c <overdraw_background_rectangle+0x84>
		// iterate through rows
		uint8_t index_j = 0;
		for (posy_pixel j = left; j <= right; j++) {
			int x = a + index_j;
 800673a:	eb0a 0005 	add.w	r0, sl, r5
			int y = c + index_i;
 800673e:	eb09 0107 	add.w	r1, r9, r7

			block_t block = get_block_with_pixels_from_WORLD(x, y);
 8006742:	b289      	uxth	r1, r1
 8006744:	b280      	uxth	r0, r0
 8006746:	f7fd ff3d 	bl	80045c4 <get_block_with_pixels_from_WORLD>
			uint16_t* material_xy = map_name_to_material(block);
 800674a:	f7fc f89b 	bl	8002884 <map_name_to_material>
 			UG_DrawPixel(j, i, material_xy[0]);
 800674e:	8802      	ldrh	r2, [r0, #0]
 8006750:	4631      	mov	r1, r6
 8006752:	4620      	mov	r0, r4
 8006754:	f007 faae 	bl	800dcb4 <UG_DrawPixel>
 			index_j++;
 8006758:	3501      	adds	r5, #1
 800675a:	b2ed      	uxtb	r5, r5
		for (posy_pixel j = left; j <= right; j++) {
 800675c:	3401      	adds	r4, #1
 800675e:	b224      	sxth	r4, r4
 8006760:	4544      	cmp	r4, r8
 8006762:	ddea      	ble.n	800673a <overdraw_background_rectangle+0x52>
		}
		index_i++;
 8006764:	3701      	adds	r7, #1
 8006766:	b2ff      	uxtb	r7, r7
	for (posx_pixel i = top; i <= bottom; i++) {
 8006768:	3601      	adds	r6, #1
 800676a:	b236      	sxth	r6, r6
 800676c:	455e      	cmp	r6, fp
 800676e:	dc02      	bgt.n	8006776 <overdraw_background_rectangle+0x8e>
		for (posy_pixel j = left; j <= right; j++) {
 8006770:	9c01      	ldr	r4, [sp, #4]
		uint8_t index_j = 0;
 8006772:	2500      	movs	r5, #0
 8006774:	e7f4      	b.n	8006760 <overdraw_background_rectangle+0x78>
	}
}
 8006776:	b003      	add	sp, #12
 8006778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800677c <overdraw_background_pixel>:

void overdraw_background_pixel(posx_pixel x1, posx_pixel y1) {
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	460d      	mov	r5, r1

	// transform the pixels in position world to pixels in scene
	posx_pixel overdraw_x = world_pixel_to_scene_pixel_y_no_band(x1);
 8006780:	f7fd ff77 	bl	8004672 <world_pixel_to_scene_pixel_y_no_band>
 8006784:	4604      	mov	r4, r0
	posx_pixel overdraw_y = world_pixel_to_scene_pixel_y_no_band(y1);
 8006786:	4628      	mov	r0, r5
 8006788:	f7fd ff73 	bl	8004672 <world_pixel_to_scene_pixel_y_no_band>
 800678c:	4605      	mov	r5, r0

	block_t block = get_block_with_pixels_from_WORLD(overdraw_x, overdraw_y);
 800678e:	b281      	uxth	r1, r0
 8006790:	b2a0      	uxth	r0, r4
 8006792:	f7fd ff17 	bl	80045c4 <get_block_with_pixels_from_WORLD>
	uint16_t* material_xy = map_name_to_material(block);
 8006796:	f7fc f875 	bl	8002884 <map_name_to_material>
	UG_DrawPixel(overdraw_x, overdraw_y, material_xy[0]);
 800679a:	8802      	ldrh	r2, [r0, #0]
 800679c:	4629      	mov	r1, r5
 800679e:	4620      	mov	r0, r4
 80067a0:	f007 fa88 	bl	800dcb4 <UG_DrawPixel>
}
 80067a4:	bd38      	pop	{r3, r4, r5, pc}

080067a6 <set_velocity>:
#include "velocity.h"


// update velocity of struct vel
void set_velocity(velocity* vel, short x, short y) {
	vel->x = x;
 80067a6:	8001      	strh	r1, [r0, #0]
	vel->y = y;
 80067a8:	8042      	strh	r2, [r0, #2]
}
 80067aa:	4770      	bx	lr

080067ac <display_guysko_hp>:
bool in_lava = false;

bool building_mode = false;
block_t building_material = _dirt;

void display_guysko_hp (guysko* player) {
 80067ac:	b500      	push	{lr}
 80067ae:	ed2d 8b02 	vpush	{d8}
 80067b2:	b083      	sub	sp, #12
	float hp_percentage = (float) get_life_points(player->lp) / (float) GUYSKO_MAX_LP;
 80067b4:	6800      	ldr	r0, [r0, #0]
 80067b6:	f7ff f9cf 	bl	8005b58 <get_life_points>
 80067ba:	ee07 0a90 	vmov	s15, r0
 80067be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067c2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006818 <display_guysko_hp+0x6c>
 80067c6:	ee87 8a87 	vdiv.f32	s16, s15, s14
	float hp_line_length = hp_percentage * GUYSKO_HP_BAR_PIXEL_X;
 80067ca:	eddf 7a14 	vldr	s15, [pc, #80]	; 800681c <display_guysko_hp+0x70>
 80067ce:	ee28 8a27 	vmul.f32	s16, s16, s15

	// TODO: change to _HW_FillFrame_
	UG_FillFrame(1, 1, 2 + GUYSKO_HP_BAR_PIXEL_X + 1, 2 + GUYSKO_HP_BAR_PIXEL_Y + 1, C_BLACK);
 80067d2:	2300      	movs	r3, #0
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	230b      	movs	r3, #11
 80067d8:	2235      	movs	r2, #53	; 0x35
 80067da:	2101      	movs	r1, #1
 80067dc:	4608      	mov	r0, r1
 80067de:	f007 fa1d 	bl	800dc1c <UG_FillFrame>
	UG_FillFrame(2, 2, 2 + hp_line_length - 1, 2 + GUYSKO_HP_BAR_PIXEL_Y, C_RED);
 80067e2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80067e6:	ee38 8a27 	vadd.f32	s16, s16, s15
 80067ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80067ee:	ee38 8a67 	vsub.f32	s16, s16, s15
 80067f2:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 80067f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	230a      	movs	r3, #10
 80067fe:	ee18 2a10 	vmov	r2, s16
 8006802:	b212      	sxth	r2, r2
 8006804:	2102      	movs	r1, #2
 8006806:	4608      	mov	r0, r1
 8006808:	f007 fa08 	bl	800dc1c <UG_FillFrame>
}
 800680c:	b003      	add	sp, #12
 800680e:	ecbd 8b02 	vpop	{d8}
 8006812:	f85d fb04 	ldr.w	pc, [sp], #4
 8006816:	bf00      	nop
 8006818:	447a0000 	.word	0x447a0000
 800681c:	42480000 	.word	0x42480000

08006820 <update_guysko_hp>:

void update_guysko_hp (guysko* player, short y_diff) {
//	set_life_points(player->lp, get_life_points(player->lp) + y_diff);
	player->lp->life_points -= y_diff;
 8006820:	6802      	ldr	r2, [r0, #0]
 8006822:	8813      	ldrh	r3, [r2, #0]
 8006824:	1a5b      	subs	r3, r3, r1
 8006826:	8013      	strh	r3, [r2, #0]
}
 8006828:	4770      	bx	lr

0800682a <update_guysko_position>:
/*
 * Simpy calculated the movement guysko makes based on his move. But when he goes outside of range of world in
 * x axis, he is teleported on the opposite side of the world. This does not apply for the y axis, where he
 * can be stuck at the botton of the world and of course won't fall down againg from sky.
 */
void update_guysko_position (guysko* player) {
 800682a:	b510      	push	{r4, lr}
 800682c:	4604      	mov	r4, r0
	update_position_x(player->pos, player->pos->x, player->mov->x);
 800682e:	6900      	ldr	r0, [r0, #16]
 8006830:	68e3      	ldr	r3, [r4, #12]
 8006832:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006836:	f9b0 1000 	ldrsh.w	r1, [r0]
 800683a:	f7ff ff2b 	bl	8006694 <update_position_x>
	update_position_y(player->pos, player->pos->y, (-1) * player->mov->y);
 800683e:	6920      	ldr	r0, [r4, #16]
 8006840:	68e3      	ldr	r3, [r4, #12]
 8006842:	885a      	ldrh	r2, [r3, #2]
 8006844:	4252      	negs	r2, r2
 8006846:	b212      	sxth	r2, r2
 8006848:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800684c:	f7ff ff3b 	bl	80066c6 <update_position_y>
}
 8006850:	bd10      	pop	{r4, pc}
	...

08006854 <update_guysko_move>:
/*
 * Because it is posible at slow speed and high FPS for guysko to move less than one pixel in difference of
 * one frame, the traveled distance that was not displayed in previos frame is at this frame taken into calculation
 * with respect to value in "player->mov->x_remainder".
 */
void update_guysko_move (guysko* player, int FPS) {
 8006854:	b510      	push	{r4, lr}
	float mov_x = ((float) 1 / ((float) (1000 / FPS) / (float) player->vel->x)) + player->mov->x_remainder;
 8006856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800685a:	fb93 f3f1 	sdiv	r3, r3, r1
 800685e:	ee07 3a90 	vmov	s15, r3
 8006862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006866:	6883      	ldr	r3, [r0, #8]
 8006868:	f9b3 2000 	ldrsh.w	r2, [r3]
 800686c:	ee07 2a10 	vmov	s14, r2
 8006870:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006874:	eec7 5a87 	vdiv.f32	s11, s15, s14
 8006878:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800687c:	eec6 6a25 	vdiv.f32	s13, s12, s11
 8006880:	68c4      	ldr	r4, [r0, #12]
 8006882:	ed94 7a01 	vldr	s14, [r4, #4]
 8006886:	ee76 6a87 	vadd.f32	s13, s13, s14
	float mov_y = ((float) 1 / ((float) (1000 / FPS) / (float) player->vel->y)) + player->mov->y_remainder;
 800688a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800688e:	ee07 3a10 	vmov	s14, r3
 8006892:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006896:	eec7 5a87 	vdiv.f32	s11, s15, s14
 800689a:	ee86 7a25 	vdiv.f32	s14, s12, s11
 800689e:	edd4 7a02 	vldr	s15, [r4, #8]
 80068a2:	ee37 7a27 	vadd.f32	s14, s14, s15

	short pix_move_x = (short) mov_x % 100;
 80068a6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80068aa:	ee17 3a90 	vmov	r3, s15
 80068ae:	b219      	sxth	r1, r3
 80068b0:	4b17      	ldr	r3, [pc, #92]	; (8006910 <update_guysko_move+0xbc>)
 80068b2:	fb83 c201 	smull	ip, r2, r3, r1
 80068b6:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 80068ba:	ebcc 1c62 	rsb	ip, ip, r2, asr #5
 80068be:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80068c2:	fb0e 111c 	mls	r1, lr, ip, r1
 80068c6:	b209      	sxth	r1, r1
	short pix_move_y = (short) mov_y % 100;
 80068c8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80068cc:	ee17 2a90 	vmov	r2, s15
 80068d0:	b212      	sxth	r2, r2
 80068d2:	fb83 c302 	smull	ip, r3, r3, r2
 80068d6:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 80068da:	ebcc 1363 	rsb	r3, ip, r3, asr #5
 80068de:	fb0e 2213 	mls	r2, lr, r3, r2
 80068e2:	b212      	sxth	r2, r2

	player->mov->x_remainder = mov_x - (float) pix_move_x;
 80068e4:	ee07 1a90 	vmov	s15, r1
 80068e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80068f0:	edc4 6a01 	vstr	s13, [r4, #4]
	player->mov->y_remainder = mov_y - (float) pix_move_y;
 80068f4:	ee07 2a90 	vmov	s15, r2
 80068f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068fc:	68c3      	ldr	r3, [r0, #12]
 80068fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006902:	ed83 7a02 	vstr	s14, [r3, #8]

	set_move(player->mov, pix_move_x, pix_move_y);
 8006906:	68c0      	ldr	r0, [r0, #12]
 8006908:	f7ff febe 	bl	8006688 <set_move>
}
 800690c:	bd10      	pop	{r4, pc}
 800690e:	bf00      	nop
 8006910:	51eb851f 	.word	0x51eb851f

08006914 <update_guysko_velocity>:

/*
 * Guysko's velocity is calculated based on force of gravity and his jump acceleration. When calculating
 * velocity of each direction, button input is taken into consideration.
 */
void update_guysko_velocity(guysko* player) {
 8006914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006918:	b083      	sub	sp, #12
 800691a:	4604      	mov	r4, r0

	// TODO: preverba ali se je zaletel v solid levo desno gor, dol?
	// TODO: update movement based on that

	short old_free_fall_speed = player->vel->y;
 800691c:	6883      	ldr	r3, [r0, #8]
 800691e:	f9b3 8002 	ldrsh.w	r8, [r3, #2]

	bool collision_up = collision(_solid, _up, player->pos, GUYSKO_IMG_X, GUYSKO_IMG_Y);
 8006922:	2518      	movs	r5, #24
 8006924:	9500      	str	r5, [sp, #0]
 8006926:	2310      	movs	r3, #16
 8006928:	6902      	ldr	r2, [r0, #16]
 800692a:	2100      	movs	r1, #0
 800692c:	2002      	movs	r0, #2
 800692e:	f7fe ff0d 	bl	800574c <collision>
 8006932:	4606      	mov	r6, r0
	bool collision_right = collision(_solid, _right, player->pos, GUYSKO_IMG_X, GUYSKO_IMG_Y);
 8006934:	9500      	str	r5, [sp, #0]
 8006936:	2310      	movs	r3, #16
 8006938:	6922      	ldr	r2, [r4, #16]
 800693a:	2101      	movs	r1, #1
 800693c:	2002      	movs	r0, #2
 800693e:	f7fe ff05 	bl	800574c <collision>
 8006942:	4681      	mov	r9, r0
	bool collision_down = collision(_solid, _down, player->pos, GUYSKO_IMG_X, GUYSKO_IMG_Y);
 8006944:	9500      	str	r5, [sp, #0]
 8006946:	2310      	movs	r3, #16
 8006948:	6922      	ldr	r2, [r4, #16]
 800694a:	2102      	movs	r1, #2
 800694c:	4608      	mov	r0, r1
 800694e:	f7fe fefd 	bl	800574c <collision>
 8006952:	4607      	mov	r7, r0
	bool collision_left = collision(_solid, _left, player->pos, GUYSKO_IMG_X, GUYSKO_IMG_Y);
 8006954:	9500      	str	r5, [sp, #0]
 8006956:	2310      	movs	r3, #16
 8006958:	6922      	ldr	r2, [r4, #16]
 800695a:	2103      	movs	r1, #3
 800695c:	2002      	movs	r0, #2
 800695e:	f7fe fef5 	bl	800574c <collision>
//	}
//
//	if (collision_right) {
//		_HW_FillFrame_(50, 20, 60, 30, C_PURPLE);
//	}
	if (move_right) {
 8006962:	4b89      	ldr	r3, [pc, #548]	; (8006b88 <update_guysko_velocity+0x274>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d05c      	beq.n	8006a24 <update_guysko_velocity+0x110>
		player->orientation = true;
 800696a:	2301      	movs	r3, #1
 800696c:	75a3      	strb	r3, [r4, #22]
		if (player->vel->x < 0) {
 800696e:	68a0      	ldr	r0, [r4, #8]
 8006970:	f9b0 1000 	ldrsh.w	r1, [r0]
 8006974:	2900      	cmp	r1, #0
 8006976:	db3a      	blt.n	80069ee <update_guysko_velocity+0xda>
			set_velocity(player->vel, 0 + GUYSKO_WALK_VEL_INC, player->vel->y);		// Walk right
		} else {
			set_velocity(player->vel, player->vel->x + GUYSKO_WALK_VEL_INC, player->vel->y);
 8006978:	b289      	uxth	r1, r1
 800697a:	310a      	adds	r1, #10
 800697c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8006980:	b209      	sxth	r1, r1
 8006982:	f7ff ff10 	bl	80067a6 <set_velocity>
		}
		// Single step collision
		if (collision_right && collision_down && !collision_up) { // && pixel_to_block(player->pos->y) <= LVL1_HMAP[pixel_to_block(player->pos->x)]) {
 8006986:	f1b9 0f00 	cmp.w	r9, #0
 800698a:	d002      	beq.n	8006992 <update_guysko_velocity+0x7e>
 800698c:	b10f      	cbz	r7, 8006992 <update_guysko_velocity+0x7e>
 800698e:	2e00      	cmp	r6, #0
 8006990:	d033      	beq.n	80069fa <update_guysko_velocity+0xe6>
			update_position_y(player->pos, player->pos->y, -BLOCK_WIDTH);
		}

		// MAX VELOCITY IN X DIRECTION
		if (player->vel->x > GUYSKO_MAX_RIGHT_VELOCITY) {
 8006992:	68a0      	ldr	r0, [r4, #8]
 8006994:	f9b0 3000 	ldrsh.w	r3, [r0]
 8006998:	2bc8      	cmp	r3, #200	; 0xc8
 800699a:	dc36      	bgt.n	8006a0a <update_guysko_velocity+0xf6>
			set_velocity(player->vel, GUYSKO_MAX_RIGHT_VELOCITY, player->vel->y);
		}

		action_reset(MOVE_RIGHT_INDEX);
 800699c:	2007      	movs	r0, #7
 800699e:	f7fa fb63 	bl	8001068 <action_reset>

		// Stop if collision
		if (collision_right) {
 80069a2:	f1b9 0f00 	cmp.w	r9, #0
 80069a6:	d136      	bne.n	8006a16 <update_guysko_velocity+0x102>
		// Stand still
		set_velocity(player->vel, 0, player->vel->y);
	}

	// y axis - gravity
	set_velocity(player->vel, player->vel->x, player->vel->y + GRAVITY);
 80069a8:	68a0      	ldr	r0, [r4, #8]
 80069aa:	8842      	ldrh	r2, [r0, #2]
 80069ac:	3a05      	subs	r2, #5
 80069ae:	b212      	sxth	r2, r2
 80069b0:	f9b0 1000 	ldrsh.w	r1, [r0]
 80069b4:	f7ff fef7 	bl	80067a6 <set_velocity>


	if (collision_down) {
 80069b8:	2f00      	cmp	r7, #0
 80069ba:	f000 8081 	beq.w	8006ac0 <update_guysko_velocity+0x1ac>
		// jump
		if (move_up) {
 80069be:	4b73      	ldr	r3, [pc, #460]	; (8006b8c <update_guysko_velocity+0x278>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d073      	beq.n	8006aae <update_guysko_velocity+0x19a>
			set_velocity(player->vel, player->vel->x, player->vel->y + GUYSKO_JUMP_ACCELERATION);
 80069c6:	68a0      	ldr	r0, [r4, #8]
 80069c8:	8842      	ldrh	r2, [r0, #2]
 80069ca:	3296      	adds	r2, #150	; 0x96
 80069cc:	b212      	sxth	r2, r2
 80069ce:	f9b0 1000 	ldrsh.w	r1, [r0]
 80069d2:	f7ff fee8 	bl	80067a6 <set_velocity>
			action_reset(MOVE_UP_INDEX);
 80069d6:	2006      	movs	r0, #6
 80069d8:	f7fa fb46 	bl	8001068 <action_reset>
			if (collision_up) {
 80069dc:	2e00      	cmp	r6, #0
 80069de:	d06c      	beq.n	8006aba <update_guysko_velocity+0x1a6>
				set_velocity(player->vel, player->vel->x, 0);
 80069e0:	68a0      	ldr	r0, [r4, #8]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f9b0 1000 	ldrsh.w	r1, [r0]
 80069e8:	f7ff fedd 	bl	80067a6 <set_velocity>
 80069ec:	e065      	b.n	8006aba <update_guysko_velocity+0x1a6>
			set_velocity(player->vel, 0 + GUYSKO_WALK_VEL_INC, player->vel->y);		// Walk right
 80069ee:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80069f2:	210a      	movs	r1, #10
 80069f4:	f7ff fed7 	bl	80067a6 <set_velocity>
 80069f8:	e7c5      	b.n	8006986 <update_guysko_velocity+0x72>
			update_position_y(player->pos, player->pos->y, -BLOCK_WIDTH);
 80069fa:	6920      	ldr	r0, [r4, #16]
 80069fc:	f06f 0203 	mvn.w	r2, #3
 8006a00:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8006a04:	f7ff fe5f 	bl	80066c6 <update_position_y>
 8006a08:	e7c3      	b.n	8006992 <update_guysko_velocity+0x7e>
			set_velocity(player->vel, GUYSKO_MAX_RIGHT_VELOCITY, player->vel->y);
 8006a0a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8006a0e:	21c8      	movs	r1, #200	; 0xc8
 8006a10:	f7ff fec9 	bl	80067a6 <set_velocity>
 8006a14:	e7c2      	b.n	800699c <update_guysko_velocity+0x88>
			set_velocity(player->vel, 0, player->vel->y);
 8006a16:	68a0      	ldr	r0, [r4, #8]
 8006a18:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	f7ff fec2 	bl	80067a6 <set_velocity>
 8006a22:	e7c1      	b.n	80069a8 <update_guysko_velocity+0x94>
 8006a24:	4605      	mov	r5, r0
	} else if (move_left) {
 8006a26:	4b5a      	ldr	r3, [pc, #360]	; (8006b90 <update_guysko_velocity+0x27c>)
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d038      	beq.n	8006aa0 <update_guysko_velocity+0x18c>
		player->orientation = false;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	75a3      	strb	r3, [r4, #22]
		if (player->vel->x > 0) {
 8006a32:	68a0      	ldr	r0, [r4, #8]
 8006a34:	f9b0 1000 	ldrsh.w	r1, [r0]
 8006a38:	4299      	cmp	r1, r3
 8006a3a:	dd1a      	ble.n	8006a72 <update_guysko_velocity+0x15e>
			set_velocity(player->vel, 0 - GUYSKO_WALK_VEL_INC, player->vel->y);
 8006a3c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8006a40:	f06f 0109 	mvn.w	r1, #9
 8006a44:	f7ff feaf 	bl	80067a6 <set_velocity>
		if (collision_left && collision_down && !collision_up) {// && pixel_to_block(player->pos->y) <= LVL1_HMAP[pixel_to_block(player->pos->x)]) {
 8006a48:	b10d      	cbz	r5, 8006a4e <update_guysko_velocity+0x13a>
 8006a4a:	b107      	cbz	r7, 8006a4e <update_guysko_velocity+0x13a>
 8006a4c:	b1ce      	cbz	r6, 8006a82 <update_guysko_velocity+0x16e>
		if (player->vel->x < GUYSKO_MAX_LEFT_VELOCITY) {
 8006a4e:	68a0      	ldr	r0, [r4, #8]
 8006a50:	f9b0 3000 	ldrsh.w	r3, [r0]
 8006a54:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8006a58:	db1b      	blt.n	8006a92 <update_guysko_velocity+0x17e>
		action_reset(MOVE_LEFT_INDEX);
 8006a5a:	2009      	movs	r0, #9
 8006a5c:	f7fa fb04 	bl	8001068 <action_reset>
		if (collision_left) {
 8006a60:	2d00      	cmp	r5, #0
 8006a62:	d0a1      	beq.n	80069a8 <update_guysko_velocity+0x94>
			set_velocity(player->vel, 0, player->vel->y);
 8006a64:	68a0      	ldr	r0, [r4, #8]
 8006a66:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	f7ff fe9b 	bl	80067a6 <set_velocity>
 8006a70:	e79a      	b.n	80069a8 <update_guysko_velocity+0x94>
			set_velocity(player->vel, player->vel->x - GUYSKO_WALK_VEL_INC, player->vel->y);
 8006a72:	b289      	uxth	r1, r1
 8006a74:	390a      	subs	r1, #10
 8006a76:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8006a7a:	b209      	sxth	r1, r1
 8006a7c:	f7ff fe93 	bl	80067a6 <set_velocity>
 8006a80:	e7e2      	b.n	8006a48 <update_guysko_velocity+0x134>
			update_position_y(player->pos, player->pos->y, -BLOCK_WIDTH);
 8006a82:	6920      	ldr	r0, [r4, #16]
 8006a84:	f06f 0203 	mvn.w	r2, #3
 8006a88:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8006a8c:	f7ff fe1b 	bl	80066c6 <update_position_y>
 8006a90:	e7dd      	b.n	8006a4e <update_guysko_velocity+0x13a>
			set_velocity(player->vel, GUYSKO_MAX_LEFT_VELOCITY, player->vel->y);
 8006a92:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8006a96:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8006a9a:	f7ff fe84 	bl	80067a6 <set_velocity>
 8006a9e:	e7dc      	b.n	8006a5a <update_guysko_velocity+0x146>
		set_velocity(player->vel, 0, player->vel->y);
 8006aa0:	68a0      	ldr	r0, [r4, #8]
 8006aa2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	f7ff fe7d 	bl	80067a6 <set_velocity>
 8006aac:	e77c      	b.n	80069a8 <update_guysko_velocity+0x94>
			}
		} else {
			set_velocity(player->vel, player->vel->x, 0);
 8006aae:	68a0      	ldr	r0, [r4, #8]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f9b0 1000 	ldrsh.w	r1, [r0]
 8006ab6:	f7ff fe76 	bl	80067a6 <set_velocity>
		}
		if (old_free_fall_speed < - 400) {
 8006aba:	f518 7fc8 	cmn.w	r8, #400	; 0x190
 8006abe:	db1b      	blt.n	8006af8 <update_guysko_velocity+0x1e4>
			in_lava = false;
			update_guysko_hp(player, FALL_DAMAGE);
		}
	}
	// Check for collision upwards regardless of the ground
	if (collision_up) {
 8006ac0:	bb16      	cbnz	r6, 8006b08 <update_guysko_velocity+0x1f4>
		set_velocity(player->vel, player->vel->x, 0);
	}

	// MAX VELOCITY IN Y DIRECTION
	if (player->vel->y < GUYSKO_MAX_DOWN_VELOCITY) {
 8006ac2:	68a0      	ldr	r0, [r4, #8]
 8006ac4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8006ac8:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8006acc:	db23      	blt.n	8006b16 <update_guysko_velocity+0x202>
		set_velocity(player->vel, player->vel->x, GUYSKO_MAX_DOWN_VELOCITY);
	} else if (player->vel->y > GUYSKO_MAX_UP_VELOCITY) {
 8006ace:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006ad2:	dc26      	bgt.n	8006b22 <update_guysko_velocity+0x20e>
		set_velocity(player->vel, player->vel->x, GUYSKO_MAX_UP_VELOCITY);
	}

	bool collision_lava = collision(_harmful, _down, player->pos, GUYSKO_IMG_X, GUYSKO_IMG_Y) ||
 8006ad4:	2318      	movs	r3, #24
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	2310      	movs	r3, #16
 8006ada:	6922      	ldr	r2, [r4, #16]
 8006adc:	2102      	movs	r1, #2
 8006ade:	2001      	movs	r0, #1
 8006ae0:	f7fe fe34 	bl	800574c <collision>
			collision(_harmful, _left, player->pos, GUYSKO_IMG_X, GUYSKO_IMG_Y) ||
			collision(_harmful, _up, player->pos, GUYSKO_IMG_X, GUYSKO_IMG_Y) ||
 8006ae4:	b320      	cbz	r0, 8006b30 <update_guysko_velocity+0x21c>
 8006ae6:	2301      	movs	r3, #1
			collision(_harmful, _right, player->pos, GUYSKO_IMG_X, GUYSKO_IMG_Y);
	if (collision_lava && in_lava) {
 8006ae8:	b11b      	cbz	r3, 8006af2 <update_guysko_velocity+0x1de>
 8006aea:	4b2a      	ldr	r3, [pc, #168]	; (8006b94 <update_guysko_velocity+0x280>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d141      	bne.n	8006b76 <update_guysko_velocity+0x262>
		//		update_position_y(player->pos, player->pos->y, -5*BLOCK_WIDTH);
//		player->vel->y = 200;
	}

	return;
}
 8006af2:	b003      	add	sp, #12
 8006af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			in_lava = false;
 8006af8:	4b26      	ldr	r3, [pc, #152]	; (8006b94 <update_guysko_velocity+0x280>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	701a      	strb	r2, [r3, #0]
			update_guysko_hp(player, FALL_DAMAGE);
 8006afe:	21c8      	movs	r1, #200	; 0xc8
 8006b00:	4620      	mov	r0, r4
 8006b02:	f7ff fe8d 	bl	8006820 <update_guysko_hp>
 8006b06:	e7db      	b.n	8006ac0 <update_guysko_velocity+0x1ac>
		set_velocity(player->vel, player->vel->x, 0);
 8006b08:	68a0      	ldr	r0, [r4, #8]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f9b0 1000 	ldrsh.w	r1, [r0]
 8006b10:	f7ff fe49 	bl	80067a6 <set_velocity>
 8006b14:	e7d5      	b.n	8006ac2 <update_guysko_velocity+0x1ae>
		set_velocity(player->vel, player->vel->x, GUYSKO_MAX_DOWN_VELOCITY);
 8006b16:	4a20      	ldr	r2, [pc, #128]	; (8006b98 <update_guysko_velocity+0x284>)
 8006b18:	f9b0 1000 	ldrsh.w	r1, [r0]
 8006b1c:	f7ff fe43 	bl	80067a6 <set_velocity>
 8006b20:	e7d8      	b.n	8006ad4 <update_guysko_velocity+0x1c0>
		set_velocity(player->vel, player->vel->x, GUYSKO_MAX_UP_VELOCITY);
 8006b22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006b26:	f9b0 1000 	ldrsh.w	r1, [r0]
 8006b2a:	f7ff fe3c 	bl	80067a6 <set_velocity>
 8006b2e:	e7d1      	b.n	8006ad4 <update_guysko_velocity+0x1c0>
			collision(_harmful, _left, player->pos, GUYSKO_IMG_X, GUYSKO_IMG_Y) ||
 8006b30:	2318      	movs	r3, #24
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	2310      	movs	r3, #16
 8006b36:	6922      	ldr	r2, [r4, #16]
 8006b38:	2103      	movs	r1, #3
 8006b3a:	2001      	movs	r0, #1
 8006b3c:	f7fe fe06 	bl	800574c <collision>
	bool collision_lava = collision(_harmful, _down, player->pos, GUYSKO_IMG_X, GUYSKO_IMG_Y) ||
 8006b40:	b108      	cbz	r0, 8006b46 <update_guysko_velocity+0x232>
			collision(_harmful, _up, player->pos, GUYSKO_IMG_X, GUYSKO_IMG_Y) ||
 8006b42:	2301      	movs	r3, #1
 8006b44:	e7d0      	b.n	8006ae8 <update_guysko_velocity+0x1d4>
 8006b46:	2318      	movs	r3, #24
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	2310      	movs	r3, #16
 8006b4c:	6922      	ldr	r2, [r4, #16]
 8006b4e:	2100      	movs	r1, #0
 8006b50:	2001      	movs	r0, #1
 8006b52:	f7fe fdfb 	bl	800574c <collision>
			collision(_harmful, _left, player->pos, GUYSKO_IMG_X, GUYSKO_IMG_Y) ||
 8006b56:	b108      	cbz	r0, 8006b5c <update_guysko_velocity+0x248>
			collision(_harmful, _up, player->pos, GUYSKO_IMG_X, GUYSKO_IMG_Y) ||
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e7c5      	b.n	8006ae8 <update_guysko_velocity+0x1d4>
			collision(_harmful, _right, player->pos, GUYSKO_IMG_X, GUYSKO_IMG_Y);
 8006b5c:	2318      	movs	r3, #24
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	2310      	movs	r3, #16
 8006b62:	6922      	ldr	r2, [r4, #16]
 8006b64:	2101      	movs	r1, #1
 8006b66:	4608      	mov	r0, r1
 8006b68:	f7fe fdf0 	bl	800574c <collision>
			collision(_harmful, _up, player->pos, GUYSKO_IMG_X, GUYSKO_IMG_Y) ||
 8006b6c:	b908      	cbnz	r0, 8006b72 <update_guysko_velocity+0x25e>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e7ba      	b.n	8006ae8 <update_guysko_velocity+0x1d4>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e7b8      	b.n	8006ae8 <update_guysko_velocity+0x1d4>
		update_guysko_hp(player, LAVA_DAMAGE);
 8006b76:	2164      	movs	r1, #100	; 0x64
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f7ff fe51 	bl	8006820 <update_guysko_hp>
		in_lava = false;
 8006b7e:	4b05      	ldr	r3, [pc, #20]	; (8006b94 <update_guysko_velocity+0x280>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	701a      	strb	r2, [r3, #0]
	return;
 8006b84:	e7b5      	b.n	8006af2 <update_guysko_velocity+0x1de>
 8006b86:	bf00      	nop
 8006b88:	200008f8 	.word	0x200008f8
 8006b8c:	200008f9 	.word	0x200008f9
 8006b90:	200008f7 	.word	0x200008f7
 8006b94:	20010fd1 	.word	0x20010fd1
 8006b98:	fffffe0c 	.word	0xfffffe0c

08006b9c <draw_guysko>:
 * corner of guysko's image. The postion of guysko cannot be taken as the postion of guysko on screen,
 * because the screen is only a small part of world. So the starting drawing postion is calculated based on
 * guysko's postion and difference between the START of the left and top corner of the screen and left and
 * top corner of the world.
 */
void draw_guysko (guysko* player) {
 8006b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba0:	b085      	sub	sp, #20
 8006ba2:	4604      	mov	r4, r0
	int index = 0;
	posx_pixel draw_startPoint_x = world_pixel_to_scene_pixel_x_band(player->pos->x - GUYSKO_IMG_X);
 8006ba4:	6903      	ldr	r3, [r0, #16]
 8006ba6:	8818      	ldrh	r0, [r3, #0]
 8006ba8:	3810      	subs	r0, #16
 8006baa:	b200      	sxth	r0, r0
 8006bac:	f7fd fd30 	bl	8004610 <world_pixel_to_scene_pixel_x_band>
 8006bb0:	9002      	str	r0, [sp, #8]
	posy_pixel draw_startPoint_y = world_pixel_to_scene_pixel_y_band(player->pos->y - GUYSKO_IMG_Y);
 8006bb2:	6923      	ldr	r3, [r4, #16]
 8006bb4:	8858      	ldrh	r0, [r3, #2]
 8006bb6:	3818      	subs	r0, #24
 8006bb8:	b200      	sxth	r0, r0
 8006bba:	f7fd fd3b 	bl	8004634 <world_pixel_to_scene_pixel_y_band>
 8006bbe:	9003      	str	r0, [sp, #12]
	// TODO: if guysko is on the edge of world, do not draw the whole guysko!

	uint8_t* picture_pointer;
	uint16_t* pallete_pointer;
	if (player->orientation){
 8006bc0:	7da3      	ldrb	r3, [r4, #22]
 8006bc2:	b133      	cbz	r3, 8006bd2 <draw_guysko+0x36>
		picture_pointer = guysko_r_0;
		pallete_pointer = GUYSKO_R_0;
 8006bc4:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8006c74 <draw_guysko+0xd8>
		picture_pointer = guysko_r_0;
 8006bc8:	4f28      	ldr	r7, [pc, #160]	; (8006c6c <draw_guysko+0xd0>)
	} else {
		picture_pointer = guysko_l_0;
		pallete_pointer = GUYSKO_L_0;
	}

	for (int i = 0; i < GUYSKO_IMG_SIZE / 2; i += 1) {
 8006bca:	f04f 0800 	mov.w	r8, #0
	int index = 0;
 8006bce:	4644      	mov	r4, r8
	for (int i = 0; i < GUYSKO_IMG_SIZE / 2; i += 1) {
 8006bd0:	e012      	b.n	8006bf8 <draw_guysko+0x5c>
		pallete_pointer = GUYSKO_L_0;
 8006bd2:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8006c78 <draw_guysko+0xdc>
		picture_pointer = guysko_l_0;
 8006bd6:	4f26      	ldr	r7, [pc, #152]	; (8006c70 <draw_guysko+0xd4>)
 8006bd8:	e7f7      	b.n	8006bca <draw_guysko+0x2e>
		uint8_t offset_x = index % (GUYSKO_IMG_X / 2);
		uint8_t offset_y = index / (GUYSKO_IMG_X / 2);
 8006bda:	1de6      	adds	r6, r4, #7
 8006bdc:	e01a      	b.n	8006c14 <draw_guysko+0x78>
		if (frst_nibble != 0) {
			UG_DrawPixel(draw_on_screen_x, draw_on_screen_y, pallete_pointer[frst_nibble]);
		} else if (false) {
				// drug object uzadi
		} else {
			overdraw_background_pixel(draw_on_screen_x, draw_on_screen_y);
 8006bde:	4601      	mov	r1, r0
 8006be0:	9801      	ldr	r0, [sp, #4]
 8006be2:	f7ff fdcb 	bl	800677c <overdraw_background_pixel>
 8006be6:	e033      	b.n	8006c50 <draw_guysko+0xb4>
		if (scnd_nibble != 0) {
			UG_DrawPixel(draw_on_screen_x + 1, draw_on_screen_y, pallete_pointer[scnd_nibble]);
		} else if (false) {
			// drug object uzadi
		} else {
			overdraw_background_pixel(draw_on_screen_x + 1, draw_on_screen_y);
 8006be8:	f109 0001 	add.w	r0, r9, #1
 8006bec:	4631      	mov	r1, r6
 8006bee:	b200      	sxth	r0, r0
 8006bf0:	f7ff fdc4 	bl	800677c <overdraw_background_pixel>
	for (int i = 0; i < GUYSKO_IMG_SIZE / 2; i += 1) {
 8006bf4:	f108 0801 	add.w	r8, r8, #1
 8006bf8:	f1b8 0fbf 	cmp.w	r8, #191	; 0xbf
 8006bfc:	dc33      	bgt.n	8006c66 <draw_guysko+0xca>
		uint8_t offset_x = index % (GUYSKO_IMG_X / 2);
 8006bfe:	4263      	negs	r3, r4
 8006c00:	f004 0107 	and.w	r1, r4, #7
 8006c04:	f003 0307 	and.w	r3, r3, #7
 8006c08:	bf58      	it	pl
 8006c0a:	4259      	negpl	r1, r3
 8006c0c:	b2c9      	uxtb	r1, r1
		uint8_t offset_y = index / (GUYSKO_IMG_X / 2);
 8006c0e:	4626      	mov	r6, r4
 8006c10:	2c00      	cmp	r4, #0
 8006c12:	dbe2      	blt.n	8006bda <draw_guysko+0x3e>
 8006c14:	f3c6 06c7 	ubfx	r6, r6, #3, #8
		index++;
 8006c18:	3401      	adds	r4, #1
		int frst_nibble =	(picture_pointer[i] & 0b11110000) >> 4;
 8006c1a:	f817 5008 	ldrb.w	r5, [r7, r8]
 8006c1e:	ea4f 1a15 	mov.w	sl, r5, lsr #4
		int scnd_nibble =	(picture_pointer[i] & 0b00001111) >> 0;
 8006c22:	f005 050f 	and.w	r5, r5, #15
		pixel_c draw_on_screen_x = world_pixel_to_world_pixel_x_no_band_param(draw_startPoint_x, 2 * offset_x);
 8006c26:	0049      	lsls	r1, r1, #1
 8006c28:	9802      	ldr	r0, [sp, #8]
 8006c2a:	f7fd fd2d 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8006c2e:	9001      	str	r0, [sp, #4]
 8006c30:	f8bd 9004 	ldrh.w	r9, [sp, #4]
		pixel_c draw_on_screen_y = world_pixel_to_world_pixel_y_no_band_param(draw_startPoint_y, offset_y);
 8006c34:	4631      	mov	r1, r6
 8006c36:	9803      	ldr	r0, [sp, #12]
 8006c38:	f7fd fd33 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8006c3c:	4606      	mov	r6, r0
		if (frst_nibble != 0) {
 8006c3e:	f1ba 0f00 	cmp.w	sl, #0
 8006c42:	d0cc      	beq.n	8006bde <draw_guysko+0x42>
			UG_DrawPixel(draw_on_screen_x, draw_on_screen_y, pallete_pointer[frst_nibble]);
 8006c44:	f83b 201a 	ldrh.w	r2, [fp, sl, lsl #1]
 8006c48:	4601      	mov	r1, r0
 8006c4a:	9801      	ldr	r0, [sp, #4]
 8006c4c:	f007 f832 	bl	800dcb4 <UG_DrawPixel>
		if (scnd_nibble != 0) {
 8006c50:	2d00      	cmp	r5, #0
 8006c52:	d0c9      	beq.n	8006be8 <draw_guysko+0x4c>
			UG_DrawPixel(draw_on_screen_x + 1, draw_on_screen_y, pallete_pointer[scnd_nibble]);
 8006c54:	f109 0001 	add.w	r0, r9, #1
 8006c58:	f83b 2015 	ldrh.w	r2, [fp, r5, lsl #1]
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	b200      	sxth	r0, r0
 8006c60:	f007 f828 	bl	800dcb4 <UG_DrawPixel>
 8006c64:	e7c6      	b.n	8006bf4 <draw_guysko+0x58>
		}
	}
}
 8006c66:	b005      	add	sp, #20
 8006c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6c:	20000218 	.word	0x20000218
 8006c70:	20000158 	.word	0x20000158
 8006c74:	20000144 	.word	0x20000144
 8006c78:	20000130 	.word	0x20000130

08006c7c <camouflage>:

/*
 * TODO: fix
 */
void camouflage (guysko* player, uint16_t prev_guysko_x, uint16_t prev_guysko_y) {
 8006c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c80:	b083      	sub	sp, #12
 8006c82:	4605      	mov	r5, r0
 8006c84:	460f      	mov	r7, r1
 8006c86:	4616      	mov	r6, r2

	pixel_c guysko_x0 = prev_guysko_x;
	pixel_c guysko_y0 = prev_guysko_y;
	pixel_c guysko_x1 = player->pos->x;
 8006c88:	6903      	ldr	r3, [r0, #16]
 8006c8a:	f9b3 9000 	ldrsh.w	r9, [r3]
 8006c8e:	fa1f fb89 	uxth.w	fp, r9
	pixel_c guysko_y1 = player->pos->y;
 8006c92:	f9b3 a002 	ldrsh.w	sl, [r3, #2]

	// calculate the starting points of guysko image starting point
	// IN SCENE IN PIXELS on previous and current frame
//	int prev_draw_startPoint_x = prev_guysko_x - GUYSKO_IMG_X - (camera_x_block * BLOCK_WIDTH - (SCENE_WIDTH_BLOCKS / 2) * BLOCK_WIDTH);
	int prev_draw_startPoint_x = world_pixel_to_scene_pixel_x_band(prev_guysko_x - GUYSKO_IMG_X);
 8006c96:	f1a1 0010 	sub.w	r0, r1, #16
 8006c9a:	b200      	sxth	r0, r0
 8006c9c:	f7fd fcb8 	bl	8004610 <world_pixel_to_scene_pixel_x_band>
 8006ca0:	4680      	mov	r8, r0
//	int prev_draw_startPoint_y = prev_guysko_y - GUYSKO_IMG_Y - (camera_y_block * BLOCK_WIDTH - (SCENE_HEIGHT_BLOCKS / 2) * BLOCK_WIDTH);
	int prev_draw_startPoint_y = world_pixel_to_scene_pixel_y_band(prev_guysko_y - GUYSKO_IMG_Y);
 8006ca2:	f1a6 0018 	sub.w	r0, r6, #24
 8006ca6:	b200      	sxth	r0, r0
 8006ca8:	f7fd fcc4 	bl	8004634 <world_pixel_to_scene_pixel_y_band>
 8006cac:	9001      	str	r0, [sp, #4]
//	int draw_startPoint_x = player->pos->x - GUYSKO_IMG_X - (camera_x_block * BLOCK_WIDTH - (SCENE_WIDTH_BLOCKS / 2)* BLOCK_WIDTH);
	int draw_startPoint_x = world_pixel_to_scene_pixel_x_band(player->pos->x - GUYSKO_IMG_X);
 8006cae:	692b      	ldr	r3, [r5, #16]
 8006cb0:	8818      	ldrh	r0, [r3, #0]
 8006cb2:	3810      	subs	r0, #16
 8006cb4:	b200      	sxth	r0, r0
 8006cb6:	f7fd fcab 	bl	8004610 <world_pixel_to_scene_pixel_x_band>
 8006cba:	4604      	mov	r4, r0
//	int draw_startPoint_y = player->pos->y - GUYSKO_IMG_Y - (camera_y_block * BLOCK_WIDTH - (SCENE_HEIGHT_BLOCKS / 2)* BLOCK_WIDTH);
	int draw_startPoint_y = world_pixel_to_scene_pixel_y_band(player->pos->y - GUYSKO_IMG_Y);
 8006cbc:	692b      	ldr	r3, [r5, #16]
 8006cbe:	8858      	ldrh	r0, [r3, #2]
 8006cc0:	3818      	subs	r0, #24
 8006cc2:	b200      	sxth	r0, r0
 8006cc4:	f7fd fcb6 	bl	8004634 <world_pixel_to_scene_pixel_y_band>
	// calculate the difference the guysko has made since the previous frame (his previous drawing)
	// the difference is in pixels but on screen! Meaning it only checks for the difference it made on
	// screen, not his global moving in WORLD!
	short x_diff = draw_startPoint_x - prev_draw_startPoint_x;
 8006cc8:	eba4 0408 	sub.w	r4, r4, r8
 8006ccc:	b224      	sxth	r4, r4
	short y_diff = draw_startPoint_y - prev_draw_startPoint_y;
 8006cce:	9b01      	ldr	r3, [sp, #4]
 8006cd0:	1ac5      	subs	r5, r0, r3
 8006cd2:	b22d      	sxth	r5, r5

	// calculate the starting points of guysko image starting point
	// IN WORLD IN PIXELS on previous and current frame
	// make four calls based on which direction the guysko moved in:
	uint8_t padding = 8;
	if (x_diff > 0) {		// right
 8006cd4:	2c00      	cmp	r4, #0
 8006cd6:	dc09      	bgt.n	8006cec <camouflage+0x70>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x0, -GUYSKO_IMG_X - padding), world_pixel_to_world_pixel_y_no_band_param(guysko_y0, -GUYSKO_IMG_Y),
				world_pixel_to_world_pixel_x_no_band_param(guysko_x1, -GUYSKO_IMG_X),world_pixel_to_world_pixel_y_no_band_param (guysko_y1, 0));

		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x1, 0), world_pixel_to_world_pixel_y_no_band_param(guysko_y1, -GUYSKO_IMG_Y),
						world_pixel_to_world_pixel_x_no_band_param(guysko_x1 + 4, 0),world_pixel_to_world_pixel_y_no_band_param (guysko_y1, 0));
	} else if (x_diff < 0) {	// left
 8006cd8:	2c00      	cmp	r4, #0
 8006cda:	db40      	blt.n	8006d5e <camouflage+0xe2>

		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x1 - GUYSKO_IMG_X, 0), world_pixel_to_world_pixel_y_no_band_param(guysko_y1, -GUYSKO_IMG_Y),
								world_pixel_to_world_pixel_x_no_band_param(guysko_x1 - GUYSKO_IMG_X - 4, 0),world_pixel_to_world_pixel_y_no_band_param (guysko_y1, 0));
	}

	if (y_diff > 0) {	// down
 8006cdc:	2d00      	cmp	r5, #0
 8006cde:	dc77      	bgt.n	8006dd0 <camouflage+0x154>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x0, -GUYSKO_IMG_X), world_pixel_to_world_pixel_y_no_band_param(guysko_y0, -GUYSKO_IMG_Y - padding),
				world_pixel_to_world_pixel_x_no_band_param(guysko_x1, 0), world_pixel_to_world_pixel_y_no_band_param(guysko_y1, (-1) * GUYSKO_IMG_Y));
	} else if (y_diff < 0) {	// up
 8006ce0:	2d00      	cmp	r5, #0
 8006ce2:	f2c0 8092 	blt.w	8006e0a <camouflage+0x18e>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x1 - GUYSKO_IMG_X, 0), world_pixel_to_world_pixel_y_no_band_param(guysko_y1, -GUYSKO_IMG_Y-5),
				world_pixel_to_world_pixel_x_no_band_param(guysko_x1, 0), world_pixel_to_world_pixel_y_no_band_param(guysko_y1, -GUYSKO_IMG_Y));

	}

}
 8006ce6:	b003      	add	sp, #12
 8006ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x0, -GUYSKO_IMG_X - padding), world_pixel_to_world_pixel_y_no_band_param(guysko_y0, -GUYSKO_IMG_Y),
 8006cec:	f06f 0117 	mvn.w	r1, #23
 8006cf0:	b238      	sxth	r0, r7
 8006cf2:	f7fd fcc9 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	f06f 0117 	mvn.w	r1, #23
 8006cfc:	b230      	sxth	r0, r6
 8006cfe:	f7fd fcd0 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8006d02:	4680      	mov	r8, r0
 8006d04:	f06f 010f 	mvn.w	r1, #15
 8006d08:	4648      	mov	r0, r9
 8006d0a:	f7fd fcbd 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8006d0e:	9001      	str	r0, [sp, #4]
 8006d10:	2100      	movs	r1, #0
 8006d12:	4650      	mov	r0, sl
 8006d14:	f7fd fcc5 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	9a01      	ldr	r2, [sp, #4]
 8006d1c:	4641      	mov	r1, r8
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f7ff fce2 	bl	80066e8 <overdraw_background_rectangle>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x1, 0), world_pixel_to_world_pixel_y_no_band_param(guysko_y1, -GUYSKO_IMG_Y),
 8006d24:	2100      	movs	r1, #0
 8006d26:	4648      	mov	r0, r9
 8006d28:	f7fd fcae 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	f06f 0117 	mvn.w	r1, #23
 8006d32:	4650      	mov	r0, sl
 8006d34:	f7fd fcb5 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8006d38:	4680      	mov	r8, r0
						world_pixel_to_world_pixel_x_no_band_param(guysko_x1 + 4, 0),world_pixel_to_world_pixel_y_no_band_param (guysko_y1, 0));
 8006d3a:	f10b 0004 	add.w	r0, fp, #4
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x1, 0), world_pixel_to_world_pixel_y_no_band_param(guysko_y1, -GUYSKO_IMG_Y),
 8006d3e:	2100      	movs	r1, #0
 8006d40:	b200      	sxth	r0, r0
 8006d42:	f7fd fca1 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8006d46:	9001      	str	r0, [sp, #4]
 8006d48:	2100      	movs	r1, #0
 8006d4a:	4650      	mov	r0, sl
 8006d4c:	f7fd fca9 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8006d50:	4603      	mov	r3, r0
 8006d52:	9a01      	ldr	r2, [sp, #4]
 8006d54:	4641      	mov	r1, r8
 8006d56:	4620      	mov	r0, r4
 8006d58:	f7ff fcc6 	bl	80066e8 <overdraw_background_rectangle>
 8006d5c:	e7be      	b.n	8006cdc <camouflage+0x60>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x0, padding), world_pixel_to_world_pixel_y_no_band_param(guysko_y0, -GUYSKO_IMG_Y),
 8006d5e:	2108      	movs	r1, #8
 8006d60:	b238      	sxth	r0, r7
 8006d62:	f7fd fc91 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8006d66:	4604      	mov	r4, r0
 8006d68:	f06f 0117 	mvn.w	r1, #23
 8006d6c:	b230      	sxth	r0, r6
 8006d6e:	f7fd fc98 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8006d72:	4680      	mov	r8, r0
 8006d74:	2100      	movs	r1, #0
 8006d76:	4648      	mov	r0, r9
 8006d78:	f7fd fc86 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8006d7c:	9001      	str	r0, [sp, #4]
 8006d7e:	2100      	movs	r1, #0
 8006d80:	4650      	mov	r0, sl
 8006d82:	f7fd fc8e 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8006d86:	4603      	mov	r3, r0
 8006d88:	9a01      	ldr	r2, [sp, #4]
 8006d8a:	4641      	mov	r1, r8
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f7ff fcab 	bl	80066e8 <overdraw_background_rectangle>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x1 - GUYSKO_IMG_X, 0), world_pixel_to_world_pixel_y_no_band_param(guysko_y1, -GUYSKO_IMG_Y),
 8006d92:	f1ab 0010 	sub.w	r0, fp, #16
 8006d96:	2100      	movs	r1, #0
 8006d98:	b200      	sxth	r0, r0
 8006d9a:	f7fd fc75 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8006d9e:	4604      	mov	r4, r0
 8006da0:	f06f 0117 	mvn.w	r1, #23
 8006da4:	4650      	mov	r0, sl
 8006da6:	f7fd fc7c 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8006daa:	4680      	mov	r8, r0
								world_pixel_to_world_pixel_x_no_band_param(guysko_x1 - GUYSKO_IMG_X - 4, 0),world_pixel_to_world_pixel_y_no_band_param (guysko_y1, 0));
 8006dac:	f1ab 0014 	sub.w	r0, fp, #20
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x1 - GUYSKO_IMG_X, 0), world_pixel_to_world_pixel_y_no_band_param(guysko_y1, -GUYSKO_IMG_Y),
 8006db0:	2100      	movs	r1, #0
 8006db2:	b200      	sxth	r0, r0
 8006db4:	f7fd fc68 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8006db8:	9001      	str	r0, [sp, #4]
 8006dba:	2100      	movs	r1, #0
 8006dbc:	4650      	mov	r0, sl
 8006dbe:	f7fd fc70 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	9a01      	ldr	r2, [sp, #4]
 8006dc6:	4641      	mov	r1, r8
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f7ff fc8d 	bl	80066e8 <overdraw_background_rectangle>
 8006dce:	e785      	b.n	8006cdc <camouflage+0x60>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x0, -GUYSKO_IMG_X), world_pixel_to_world_pixel_y_no_band_param(guysko_y0, -GUYSKO_IMG_Y - padding),
 8006dd0:	f06f 010f 	mvn.w	r1, #15
 8006dd4:	b238      	sxth	r0, r7
 8006dd6:	f7fd fc57 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8006dda:	4604      	mov	r4, r0
 8006ddc:	f06f 011f 	mvn.w	r1, #31
 8006de0:	b230      	sxth	r0, r6
 8006de2:	f7fd fc5e 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8006de6:	4605      	mov	r5, r0
 8006de8:	2100      	movs	r1, #0
 8006dea:	4648      	mov	r0, r9
 8006dec:	f7fd fc4c 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8006df0:	4606      	mov	r6, r0
 8006df2:	f06f 0117 	mvn.w	r1, #23
 8006df6:	4650      	mov	r0, sl
 8006df8:	f7fd fc53 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	4632      	mov	r2, r6
 8006e00:	4629      	mov	r1, r5
 8006e02:	4620      	mov	r0, r4
 8006e04:	f7ff fc70 	bl	80066e8 <overdraw_background_rectangle>
 8006e08:	e76d      	b.n	8006ce6 <camouflage+0x6a>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x0, -GUYSKO_IMG_X), world_pixel_to_world_pixel_y_no_band_param(guysko_y0, padding),
 8006e0a:	f06f 010f 	mvn.w	r1, #15
 8006e0e:	b238      	sxth	r0, r7
 8006e10:	f7fd fc3a 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8006e14:	4604      	mov	r4, r0
 8006e16:	2108      	movs	r1, #8
 8006e18:	b230      	sxth	r0, r6
 8006e1a:	f7fd fc42 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8006e1e:	4605      	mov	r5, r0
 8006e20:	2100      	movs	r1, #0
 8006e22:	4648      	mov	r0, r9
 8006e24:	f7fd fc30 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8006e28:	4606      	mov	r6, r0
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	4650      	mov	r0, sl
 8006e2e:	f7fd fc38 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8006e32:	4603      	mov	r3, r0
 8006e34:	4632      	mov	r2, r6
 8006e36:	4629      	mov	r1, r5
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f7ff fc55 	bl	80066e8 <overdraw_background_rectangle>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x1 - GUYSKO_IMG_X, 0), world_pixel_to_world_pixel_y_no_band_param(guysko_y1, -GUYSKO_IMG_Y-5),
 8006e3e:	f1ab 0010 	sub.w	r0, fp, #16
 8006e42:	2100      	movs	r1, #0
 8006e44:	b200      	sxth	r0, r0
 8006e46:	f7fd fc1f 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	f06f 011c 	mvn.w	r1, #28
 8006e50:	4650      	mov	r0, sl
 8006e52:	f7fd fc26 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8006e56:	4605      	mov	r5, r0
 8006e58:	2100      	movs	r1, #0
 8006e5a:	4648      	mov	r0, r9
 8006e5c:	f7fd fc14 	bl	8004688 <world_pixel_to_world_pixel_x_no_band_param>
 8006e60:	4606      	mov	r6, r0
 8006e62:	f06f 0117 	mvn.w	r1, #23
 8006e66:	4650      	mov	r0, sl
 8006e68:	f7fd fc1b 	bl	80046a2 <world_pixel_to_world_pixel_y_no_band_param>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	4632      	mov	r2, r6
 8006e70:	4629      	mov	r1, r5
 8006e72:	4620      	mov	r0, r4
 8006e74:	f7ff fc38 	bl	80066e8 <overdraw_background_rectangle>
}
 8006e78:	e735      	b.n	8006ce6 <camouflage+0x6a>
	...

08006e7c <refresh_guysko>:

/*
 * calls functions that update guysko properties
 */
void refresh_guysko(guysko* player, int FPS) {
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	4604      	mov	r4, r0
 8006e80:	460d      	mov	r5, r1
	int old_guysko_hp = get_life_points(player->lp);
 8006e82:	6800      	ldr	r0, [r0, #0]
 8006e84:	f7fe fe68 	bl	8005b58 <get_life_points>
 8006e88:	4607      	mov	r7, r0
	update_guysko_velocity(player);
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f7ff fd42 	bl	8006914 <update_guysko_velocity>
	update_guysko_move(player, FPS);
 8006e90:	4629      	mov	r1, r5
 8006e92:	4620      	mov	r0, r4
 8006e94:	f7ff fcde 	bl	8006854 <update_guysko_move>
	uint16_t prev_guysko_x = player->pos->x;
 8006e98:	6923      	ldr	r3, [r4, #16]
 8006e9a:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e9e:	b2ad      	uxth	r5, r5
	uint16_t prev_guysko_y = player->pos->y;
 8006ea0:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8006ea4:	b2b6      	uxth	r6, r6
	update_guysko_position(player);
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f7ff fcbf 	bl	800682a <update_guysko_position>

	// do the following two if and only if at least on one of the x and y
	// components of guysko position is different
	if (!(prev_guysko_x == player->pos->x && prev_guysko_y == player->pos->y)) {
 8006eac:	6923      	ldr	r3, [r4, #16]
 8006eae:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006eb2:	4295      	cmp	r5, r2
 8006eb4:	d103      	bne.n	8006ebe <refresh_guysko+0x42>
 8006eb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006eba:	429e      	cmp	r6, r3
 8006ebc:	d007      	beq.n	8006ece <refresh_guysko+0x52>
		// NOT WORKING, TODO: fix black lines
		camouflage (player, prev_guysko_x, prev_guysko_y);
 8006ebe:	4632      	mov	r2, r6
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f7ff feda 	bl	8006c7c <camouflage>
		draw_guysko(player);
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f7ff fe67 	bl	8006b9c <draw_guysko>
	}

//	if (old_guysko_hp != get_life_points(player->lp)) {
////		display_guysko_hp(player);
//	}
		display_guysko_hp(player);
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f7ff fc6c 	bl	80067ac <display_guysko_hp>
		if (esc || old_guysko_hp != get_life_points(player->lp)) {
 8006ed4:	4b05      	ldr	r3, [pc, #20]	; (8006eec <refresh_guysko+0x70>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	b923      	cbnz	r3, 8006ee4 <refresh_guysko+0x68>
 8006eda:	6820      	ldr	r0, [r4, #0]
 8006edc:	f7fe fe3c 	bl	8005b58 <get_life_points>
 8006ee0:	4287      	cmp	r7, r0
 8006ee2:	d002      	beq.n	8006eea <refresh_guysko+0x6e>
			action_reset(ESC_INDEX);
 8006ee4:	2005      	movs	r0, #5
 8006ee6:	f7fa f8bf 	bl	8001068 <action_reset>
		}
}
 8006eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eec:	200008f4 	.word	0x200008f4

08006ef0 <new_guysko>:
 * @param acceleration	guysko's acceleration
 * @param velocity 			guysko's velocity
 * @param move					difference of position guysko will make inbetween frame
 * @param position 			guysko's new position
 */
guysko* new_guysko() {
 8006ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	guysko* player = malloc(sizeof(guysko));
 8006ef4:	2018      	movs	r0, #24
 8006ef6:	f009 fb9b 	bl	8010630 <malloc>
 8006efa:	4604      	mov	r4, r0

	velocity *guysko_vel = malloc(sizeof(velocity));
 8006efc:	2004      	movs	r0, #4
 8006efe:	f009 fb97 	bl	8010630 <malloc>
 8006f02:	4607      	mov	r7, r0
	guysko_vel->x = 0;
 8006f04:	f04f 0800 	mov.w	r8, #0
 8006f08:	f8a0 8000 	strh.w	r8, [r0]
	guysko_vel->y = 0;
 8006f0c:	f8a0 8002 	strh.w	r8, [r0, #2]

	move *guysko_mov = malloc(sizeof(move));
 8006f10:	200c      	movs	r0, #12
 8006f12:	f009 fb8d 	bl	8010630 <malloc>
 8006f16:	4605      	mov	r5, r0
	guysko_mov->x = 0;
 8006f18:	f8a0 8000 	strh.w	r8, [r0]
	guysko_mov->y = 0;
 8006f1c:	f8a0 8002 	strh.w	r8, [r0, #2]
	guysko_mov->x_remainder = 0;
 8006f20:	2300      	movs	r3, #0
 8006f22:	6043      	str	r3, [r0, #4]
	guysko_mov->y_remainder = 0;
 8006f24:	6083      	str	r3, [r0, #8]

	pixel_position *guysko_pos = malloc(sizeof(pixel_position));
 8006f26:	2004      	movs	r0, #4
 8006f28:	f009 fb82 	bl	8010630 <malloc>
 8006f2c:	4606      	mov	r6, r0
	guysko_pos->x = GUYSKO_SPAWN_X;
 8006f2e:	2364      	movs	r3, #100	; 0x64
 8006f30:	8003      	strh	r3, [r0, #0]
	guysko_pos->y = GUYSKO_SPAWN_Y;
 8006f32:	230a      	movs	r3, #10
 8006f34:	8043      	strh	r3, [r0, #2]

	life_points *lp = malloc(sizeof(life_points));
 8006f36:	2002      	movs	r0, #2
 8006f38:	f009 fb7a 	bl	8010630 <malloc>
	lp->life_points = GUYSKO_MAX_LP;
 8006f3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f40:	8003      	strh	r3, [r0, #0]

	player->state 					= 0;
 8006f42:	f884 8004 	strb.w	r8, [r4, #4]
	player->vel							= guysko_vel;
 8006f46:	60a7      	str	r7, [r4, #8]
	player->mov 						= guysko_mov;
 8006f48:	60e5      	str	r5, [r4, #12]
	player->pos		 					= guysko_pos;
 8006f4a:	6126      	str	r6, [r4, #16]
	player->lp 							= lp;
 8006f4c:	6020      	str	r0, [r4, #0]
//	player->lp = malloc(sizeof(life_points));
//	player->lp->life_points = GUYSKO_MAX_LP;
	player->standing_bits		= 0b1111111111111111;
 8006f4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f52:	82a3      	strh	r3, [r4, #20]

	player->orientation = true;
 8006f54:	2301      	movs	r3, #1
 8006f56:	75a3      	strb	r3, [r4, #22]

	return player;
}
 8006f58:	4620      	mov	r0, r4
 8006f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006f5e <new_fashionist>:
		0, 0, 204, 234, 202, 202, 160, 0,
		0, 0, 204, 153, 153, 169, 160, 0,
		0, 0, 204, 170, 170, 170, 160, 0
};

fashionist* new_fashionist(life_points* lp, velocity* vel, pixel_position* pos, move* mov) {
 8006f5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f62:	4681      	mov	r9, r0
 8006f64:	4688      	mov	r8, r1
 8006f66:	4617      	mov	r7, r2
 8006f68:	461e      	mov	r6, r3
	fashionist* fash = (fashionist*)malloc(sizeof(fashionist));
 8006f6a:	201c      	movs	r0, #28
 8006f6c:	f009 fb60 	bl	8010630 <malloc>
 8006f70:	4604      	mov	r4, r0

	fash->state = 0;
 8006f72:	2500      	movs	r5, #0
 8006f74:	7105      	strb	r5, [r0, #4]
	fash->lp		= (life_points*)malloc(sizeof(life_points));
 8006f76:	2002      	movs	r0, #2
 8006f78:	f009 fb5a 	bl	8010630 <malloc>
 8006f7c:	6020      	str	r0, [r4, #0]
	fash->lp		= lp;
 8006f7e:	f8c4 9000 	str.w	r9, [r4]
	fash->vel	= (velocity*)malloc(sizeof(velocity));
 8006f82:	2004      	movs	r0, #4
 8006f84:	f009 fb54 	bl	8010630 <malloc>
 8006f88:	60a0      	str	r0, [r4, #8]
	fash->vel	= vel;
 8006f8a:	f8c4 8008 	str.w	r8, [r4, #8]
	fash->pos	= (pixel_position*)malloc(sizeof(pixel_position));
 8006f8e:	2004      	movs	r0, #4
 8006f90:	f009 fb4e 	bl	8010630 <malloc>
 8006f94:	6120      	str	r0, [r4, #16]
	fash->pos  = pos;
 8006f96:	6127      	str	r7, [r4, #16]
	fash->mov 	= (move*) malloc(sizeof(pixel_position));
 8006f98:	2004      	movs	r0, #4
 8006f9a:	f009 fb49 	bl	8010630 <malloc>
 8006f9e:	60e0      	str	r0, [r4, #12]
	fash->mov 	= mov;
 8006fa0:	60e6      	str	r6, [r4, #12]

	fash->next = (fashionist*)malloc(sizeof(fashionist));
 8006fa2:	201c      	movs	r0, #28
 8006fa4:	f009 fb44 	bl	8010630 <malloc>
 8006fa8:	6160      	str	r0, [r4, #20]
	fash->next = NULL;
 8006faa:	6165      	str	r5, [r4, #20]
	fash->prev = (fashionist*)malloc(sizeof(fashionist));
 8006fac:	201c      	movs	r0, #28
 8006fae:	f009 fb3f 	bl	8010630 <malloc>
 8006fb2:	61a0      	str	r0, [r4, #24]
	fash->prev = NULL;
 8006fb4:	61a5      	str	r5, [r4, #24]

	return fash;
}
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006fbc <new_merchant>:
		0, 183, 123, 190, 190, 176, 0, 0,
		0, 11, 187, 190, 235, 235, 0, 0,
		0, 0, 0, 187, 187, 187, 0, 0
};

merchant* new_merchant(life_points* lp, velocity* vel, pixel_position* pos, move* mov) {
 8006fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc0:	4681      	mov	r9, r0
 8006fc2:	4688      	mov	r8, r1
 8006fc4:	4617      	mov	r7, r2
 8006fc6:	461e      	mov	r6, r3
	merchant* mer = (merchant*)malloc(sizeof(merchant));
 8006fc8:	201c      	movs	r0, #28
 8006fca:	f009 fb31 	bl	8010630 <malloc>
 8006fce:	4604      	mov	r4, r0

		mer->state = 0;
 8006fd0:	2500      	movs	r5, #0
 8006fd2:	7105      	strb	r5, [r0, #4]
		mer->lp		= (life_points*)malloc(sizeof(life_points));
 8006fd4:	2002      	movs	r0, #2
 8006fd6:	f009 fb2b 	bl	8010630 <malloc>
 8006fda:	6020      	str	r0, [r4, #0]
		mer->lp		= lp;
 8006fdc:	f8c4 9000 	str.w	r9, [r4]
		mer->vel	= (velocity*)malloc(sizeof(velocity));
 8006fe0:	2004      	movs	r0, #4
 8006fe2:	f009 fb25 	bl	8010630 <malloc>
 8006fe6:	60a0      	str	r0, [r4, #8]
		mer->vel	= vel;
 8006fe8:	f8c4 8008 	str.w	r8, [r4, #8]
		mer->pos	= (pixel_position*)malloc(sizeof(pixel_position));
 8006fec:	2004      	movs	r0, #4
 8006fee:	f009 fb1f 	bl	8010630 <malloc>
 8006ff2:	6120      	str	r0, [r4, #16]
		mer->pos  = pos;
 8006ff4:	6127      	str	r7, [r4, #16]
		mer->mov 	= (move*) malloc(sizeof(pixel_position));
 8006ff6:	2004      	movs	r0, #4
 8006ff8:	f009 fb1a 	bl	8010630 <malloc>
 8006ffc:	60e0      	str	r0, [r4, #12]
		mer->mov 	= mov;
 8006ffe:	60e6      	str	r6, [r4, #12]

		mer->next = (merchant*)malloc(sizeof(merchant));
 8007000:	201c      	movs	r0, #28
 8007002:	f009 fb15 	bl	8010630 <malloc>
 8007006:	6160      	str	r0, [r4, #20]
		mer->next = NULL;
 8007008:	6165      	str	r5, [r4, #20]
		mer->prev = (merchant*)malloc(sizeof(merchant));
 800700a:	201c      	movs	r0, #28
 800700c:	f009 fb10 	bl	8010630 <malloc>
 8007010:	61a0      	str	r0, [r4, #24]
		mer->prev = NULL;
 8007012:	61a5      	str	r5, [r4, #24]

		return mer;
	}
 8007014:	4620      	mov	r0, r4
 8007016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800701a <new_miner>:
		0, 0, 0, 0, 19, 52, 49, 65, 0, 0,
		0, 0, 0, 0, 20, 52, 68, 19, 16, 0,
		0, 0, 0, 0, 17, 17, 17, 17, 16, 0
};

miner* new_miner(life_points* lp, velocity* vel, pixel_position* pos, move* mov) {
 800701a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800701e:	4681      	mov	r9, r0
 8007020:	4688      	mov	r8, r1
 8007022:	4617      	mov	r7, r2
 8007024:	461e      	mov	r6, r3
	miner* min = (miner*)malloc(sizeof(miner));
 8007026:	201c      	movs	r0, #28
 8007028:	f009 fb02 	bl	8010630 <malloc>
 800702c:	4604      	mov	r4, r0

		min->state = 0;
 800702e:	2500      	movs	r5, #0
 8007030:	7105      	strb	r5, [r0, #4]
		min->lp		= (life_points*)malloc(sizeof(life_points));
 8007032:	2002      	movs	r0, #2
 8007034:	f009 fafc 	bl	8010630 <malloc>
 8007038:	6020      	str	r0, [r4, #0]
		min->lp		= lp;
 800703a:	f8c4 9000 	str.w	r9, [r4]
		min->vel	= (velocity*)malloc(sizeof(velocity));
 800703e:	2004      	movs	r0, #4
 8007040:	f009 faf6 	bl	8010630 <malloc>
 8007044:	60a0      	str	r0, [r4, #8]
		min->vel	= vel;
 8007046:	f8c4 8008 	str.w	r8, [r4, #8]
		min->pos	= (pixel_position*)malloc(sizeof(pixel_position));
 800704a:	2004      	movs	r0, #4
 800704c:	f009 faf0 	bl	8010630 <malloc>
 8007050:	6120      	str	r0, [r4, #16]
		min->pos  = pos;
 8007052:	6127      	str	r7, [r4, #16]
		min->mov 	= (move*) malloc(sizeof(pixel_position));
 8007054:	2004      	movs	r0, #4
 8007056:	f009 faeb 	bl	8010630 <malloc>
 800705a:	60e0      	str	r0, [r4, #12]
		min->mov 	= mov;
 800705c:	60e6      	str	r6, [r4, #12]

		min->next = (miner*)malloc(sizeof(miner));
 800705e:	201c      	movs	r0, #28
 8007060:	f009 fae6 	bl	8010630 <malloc>
 8007064:	6160      	str	r0, [r4, #20]
		min->next = NULL;
 8007066:	6165      	str	r5, [r4, #20]
		min->prev = (miner*)malloc(sizeof(miner));
 8007068:	201c      	movs	r0, #28
 800706a:	f009 fae1 	bl	8010630 <malloc>
 800706e:	61a0      	str	r0, [r4, #24]
		min->prev = NULL;
 8007070:	61a5      	str	r5, [r4, #24]

		return min;
}
 8007072:	4620      	mov	r0, r4
 8007074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007078 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   r0, =_estack
 8007078:	480d      	ldr	r0, [pc, #52]	; (80070b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800707a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800707c:	480d      	ldr	r0, [pc, #52]	; (80070b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800707e:	490e      	ldr	r1, [pc, #56]	; (80070b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007080:	4a0e      	ldr	r2, [pc, #56]	; (80070bc <LoopForever+0xe>)
  movs r3, #0
 8007082:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8007084:	e002      	b.n	800708c <LoopCopyDataInit>

08007086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800708a:	3304      	adds	r3, #4

0800708c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800708c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800708e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007090:	d3f9      	bcc.n	8007086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007092:	4a0b      	ldr	r2, [pc, #44]	; (80070c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007094:	4c0b      	ldr	r4, [pc, #44]	; (80070c4 <LoopForever+0x16>)
  movs r3, #0
 8007096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007098:	e001      	b.n	800709e <LoopFillZerobss>

0800709a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800709a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800709c:	3204      	adds	r2, #4

0800709e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800709e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80070a0:	d3fb      	bcc.n	800709a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80070a2:	f7fd fcb7 	bl	8004a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80070a6:	f009 fa9f 	bl	80105e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80070aa:	f7fa ffbd 	bl	8002028 <main>

080070ae <LoopForever>:

LoopForever:
    b LoopForever
 80070ae:	e7fe      	b.n	80070ae <LoopForever>
	  ldr   r0, =_estack
 80070b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80070b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80070b8:	200008d4 	.word	0x200008d4
  ldr r2, =_sidata
 80070bc:	080163d0 	.word	0x080163d0
  ldr r2, =_sbss
 80070c0:	200008d4 	.word	0x200008d4
  ldr r4, =_ebss
 80070c4:	20012a44 	.word	0x20012a44

080070c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80070c8:	e7fe      	b.n	80070c8 <ADC1_2_IRQHandler>
	...

080070cc <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80070cc:	4b10      	ldr	r3, [pc, #64]	; (8007110 <HAL_InitTick+0x44>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	b90b      	cbnz	r3, 80070d6 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80070d2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80070d4:	4770      	bx	lr
{
 80070d6:	b510      	push	{r4, lr}
 80070d8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80070da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80070de:	fbb0 f3f3 	udiv	r3, r0, r3
 80070e2:	4a0c      	ldr	r2, [pc, #48]	; (8007114 <HAL_InitTick+0x48>)
 80070e4:	6810      	ldr	r0, [r2, #0]
 80070e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80070ea:	f000 fec1 	bl	8007e70 <HAL_SYSTICK_Config>
 80070ee:	b968      	cbnz	r0, 800710c <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80070f0:	2c0f      	cmp	r4, #15
 80070f2:	d901      	bls.n	80070f8 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80070f4:	2001      	movs	r0, #1
 80070f6:	e00a      	b.n	800710e <HAL_InitTick+0x42>
				HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80070f8:	2200      	movs	r2, #0
 80070fa:	4621      	mov	r1, r4
 80070fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007100:	f000 fe70 	bl	8007de4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007104:	4b04      	ldr	r3, [pc, #16]	; (8007118 <HAL_InitTick+0x4c>)
 8007106:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8007108:	2000      	movs	r0, #0
 800710a:	e000      	b.n	800710e <HAL_InitTick+0x42>
      status = HAL_ERROR;
 800710c:	2001      	movs	r0, #1
}
 800710e:	bd10      	pop	{r4, pc}
 8007110:	20000580 	.word	0x20000580
 8007114:	2000008c 	.word	0x2000008c
 8007118:	20000584 	.word	0x20000584

0800711c <HAL_Init>:
{
 800711c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800711e:	2003      	movs	r0, #3
 8007120:	f000 fe4e 	bl	8007dc0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007124:	2000      	movs	r0, #0
 8007126:	f7ff ffd1 	bl	80070cc <HAL_InitTick>
 800712a:	b110      	cbz	r0, 8007132 <HAL_Init+0x16>
    status = HAL_ERROR;
 800712c:	2401      	movs	r4, #1
}
 800712e:	4620      	mov	r0, r4
 8007130:	bd10      	pop	{r4, pc}
 8007132:	4604      	mov	r4, r0
    HAL_MspInit();
 8007134:	f7fd fb1a 	bl	800476c <HAL_MspInit>
 8007138:	e7f9      	b.n	800712e <HAL_Init+0x12>
	...

0800713c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800713c:	4a03      	ldr	r2, [pc, #12]	; (800714c <HAL_IncTick+0x10>)
 800713e:	6813      	ldr	r3, [r2, #0]
 8007140:	4903      	ldr	r1, [pc, #12]	; (8007150 <HAL_IncTick+0x14>)
 8007142:	6809      	ldr	r1, [r1, #0]
 8007144:	440b      	add	r3, r1
 8007146:	6013      	str	r3, [r2, #0]
}
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	20010fd4 	.word	0x20010fd4
 8007150:	20000580 	.word	0x20000580

08007154 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007154:	4b01      	ldr	r3, [pc, #4]	; (800715c <HAL_GetTick+0x8>)
 8007156:	6818      	ldr	r0, [r3, #0]
}
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	20010fd4 	.word	0x20010fd4

08007160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007164:	f7ff fff6 	bl	8007154 <HAL_GetTick>
 8007168:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800716a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800716e:	d002      	beq.n	8007176 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8007170:	4b04      	ldr	r3, [pc, #16]	; (8007184 <HAL_Delay+0x24>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007176:	f7ff ffed 	bl	8007154 <HAL_GetTick>
 800717a:	1b40      	subs	r0, r0, r5
 800717c:	42a0      	cmp	r0, r4
 800717e:	d3fa      	bcc.n	8007176 <HAL_Delay+0x16>
  {
  }
}
 8007180:	bd38      	pop	{r3, r4, r5, pc}
 8007182:	bf00      	nop
 8007184:	20000580 	.word	0x20000580

08007188 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007188:	b530      	push	{r4, r5, lr}
 800718a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800718c:	2300      	movs	r3, #0
 800718e:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007190:	2800      	cmp	r0, #0
 8007192:	f000 8138 	beq.w	8007406 <HAL_ADC_Init+0x27e>
 8007196:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007198:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800719a:	b313      	cbz	r3, 80071e2 <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800719c:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 80071a4:	d005      	beq.n	80071b2 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 80071ac:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80071b0:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80071b2:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80071b4:	6893      	ldr	r3, [r2, #8]
 80071b6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80071ba:	d11f      	bne.n	80071fc <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 80071bc:	6893      	ldr	r3, [r2, #8]
 80071be:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80071c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80071c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ca:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80071cc:	4b8f      	ldr	r3, [pc, #572]	; (800740c <HAL_ADC_Init+0x284>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	099b      	lsrs	r3, r3, #6
 80071d2:	4a8f      	ldr	r2, [pc, #572]	; (8007410 <HAL_ADC_Init+0x288>)
 80071d4:	fba2 2303 	umull	r2, r3, r2, r3
 80071d8:	099b      	lsrs	r3, r3, #6
 80071da:	3301      	adds	r3, #1
 80071dc:	005b      	lsls	r3, r3, #1
 80071de:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80071e0:	e009      	b.n	80071f6 <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 80071e2:	f7fa f905 	bl	80013f0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80071e6:	2300      	movs	r3, #0
 80071e8:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80071ea:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80071ee:	e7d5      	b.n	800719c <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80071f0:	9b01      	ldr	r3, [sp, #4]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80071f6:	9b01      	ldr	r3, [sp, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1f9      	bne.n	80071f0 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80071fc:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80071fe:	6893      	ldr	r3, [r2, #8]
 8007200:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007204:	d13d      	bne.n	8007282 <HAL_ADC_Init+0xfa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007206:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007208:	f043 0310 	orr.w	r3, r3, #16
 800720c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800720e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007210:	f043 0301 	orr.w	r3, r3, #1
 8007214:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8007216:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007218:	6893      	ldr	r3, [r2, #8]
 800721a:	f013 0304 	ands.w	r3, r3, #4
 800721e:	d000      	beq.n	8007222 <HAL_ADC_Init+0x9a>
 8007220:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007222:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007224:	f011 0f10 	tst.w	r1, #16
 8007228:	f040 80e6 	bne.w	80073f8 <HAL_ADC_Init+0x270>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800722c:	2b00      	cmp	r3, #0
 800722e:	f040 80e3 	bne.w	80073f8 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007232:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007234:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007238:	f043 0302 	orr.w	r3, r3, #2
 800723c:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800723e:	6893      	ldr	r3, [r2, #8]
 8007240:	f013 0f01 	tst.w	r3, #1
 8007244:	d13e      	bne.n	80072c4 <HAL_ADC_Init+0x13c>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007246:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800724a:	d01c      	beq.n	8007286 <HAL_ADC_Init+0xfe>
 800724c:	4b71      	ldr	r3, [pc, #452]	; (8007414 <HAL_ADC_Init+0x28c>)
 800724e:	429a      	cmp	r2, r3
 8007250:	d019      	beq.n	8007286 <HAL_ADC_Init+0xfe>
 8007252:	4b71      	ldr	r3, [pc, #452]	; (8007418 <HAL_ADC_Init+0x290>)
 8007254:	6899      	ldr	r1, [r3, #8]
 8007256:	f011 0101 	ands.w	r1, r1, #1
 800725a:	d000      	beq.n	800725e <HAL_ADC_Init+0xd6>
 800725c:	2101      	movs	r1, #1
 800725e:	4b6f      	ldr	r3, [pc, #444]	; (800741c <HAL_ADC_Init+0x294>)
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f013 0301 	ands.w	r3, r3, #1
 8007266:	d000      	beq.n	800726a <HAL_ADC_Init+0xe2>
 8007268:	2301      	movs	r3, #1
 800726a:	430b      	orrs	r3, r1
 800726c:	496c      	ldr	r1, [pc, #432]	; (8007420 <HAL_ADC_Init+0x298>)
 800726e:	6889      	ldr	r1, [r1, #8]
 8007270:	f011 0101 	ands.w	r1, r1, #1
 8007274:	d000      	beq.n	8007278 <HAL_ADC_Init+0xf0>
 8007276:	2101      	movs	r1, #1
 8007278:	430b      	orrs	r3, r1
 800727a:	bf0c      	ite	eq
 800727c:	2301      	moveq	r3, #1
 800727e:	2300      	movne	r3, #0
 8007280:	e012      	b.n	80072a8 <HAL_ADC_Init+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007282:	2000      	movs	r0, #0
 8007284:	e7c8      	b.n	8007218 <HAL_ADC_Init+0x90>
 8007286:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f013 0301 	ands.w	r3, r3, #1
 8007290:	d000      	beq.n	8007294 <HAL_ADC_Init+0x10c>
 8007292:	2301      	movs	r3, #1
 8007294:	495f      	ldr	r1, [pc, #380]	; (8007414 <HAL_ADC_Init+0x28c>)
 8007296:	6889      	ldr	r1, [r1, #8]
 8007298:	f011 0101 	ands.w	r1, r1, #1
 800729c:	d000      	beq.n	80072a0 <HAL_ADC_Init+0x118>
 800729e:	2101      	movs	r1, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80072a0:	430b      	orrs	r3, r1
 80072a2:	bf0c      	ite	eq
 80072a4:	2301      	moveq	r3, #1
 80072a6:	2300      	movne	r3, #0
 80072a8:	b163      	cbz	r3, 80072c4 <HAL_ADC_Init+0x13c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80072aa:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80072ae:	d072      	beq.n	8007396 <HAL_ADC_Init+0x20e>
 80072b0:	4b58      	ldr	r3, [pc, #352]	; (8007414 <HAL_ADC_Init+0x28c>)
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d06d      	beq.n	8007392 <HAL_ADC_Init+0x20a>
 80072b6:	495b      	ldr	r1, [pc, #364]	; (8007424 <HAL_ADC_Init+0x29c>)
 80072b8:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80072ba:	688a      	ldr	r2, [r1, #8]
 80072bc:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80072c0:	4313      	orrs	r3, r2
 80072c2:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80072c4:	7f62      	ldrb	r2, [r4, #29]
                hadc->Init.Overrun                                                     |
 80072c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80072c8:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 80072cc:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 80072ce:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 80072d0:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 80072d2:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80072d4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80072d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80072dc:	2a01      	cmp	r2, #1
 80072de:	d05c      	beq.n	800739a <HAL_ADC_Init+0x212>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80072e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80072e2:	b122      	cbz	r2, 80072ee <HAL_ADC_Init+0x166>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80072e4:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80072e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80072ea:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80072ec:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80072ee:	6821      	ldr	r1, [r4, #0]
 80072f0:	68cd      	ldr	r5, [r1, #12]
 80072f2:	4a4d      	ldr	r2, [pc, #308]	; (8007428 <HAL_ADC_Init+0x2a0>)
 80072f4:	402a      	ands	r2, r5
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60cb      	str	r3, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80072fa:	6822      	ldr	r2, [r4, #0]
 80072fc:	6913      	ldr	r3, [r2, #16]
 80072fe:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8007302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007304:	430b      	orrs	r3, r1
 8007306:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007308:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800730a:	688b      	ldr	r3, [r1, #8]
 800730c:	f013 0304 	ands.w	r3, r3, #4
 8007310:	d000      	beq.n	8007314 <HAL_ADC_Init+0x18c>
 8007312:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007314:	688a      	ldr	r2, [r1, #8]
 8007316:	f012 0208 	ands.w	r2, r2, #8
 800731a:	d000      	beq.n	800731e <HAL_ADC_Init+0x196>
 800731c:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800731e:	bb4b      	cbnz	r3, 8007374 <HAL_ADC_Init+0x1ec>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007320:	bb42      	cbnz	r2, 8007374 <HAL_ADC_Init+0x1ec>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007322:	7f22      	ldrb	r2, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007324:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8007328:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800732a:	ea43 3282 	orr.w	r2, r3, r2, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800732e:	68cb      	ldr	r3, [r1, #12]
 8007330:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007334:	f023 0302 	bic.w	r3, r3, #2
 8007338:	4313      	orrs	r3, r2
 800733a:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800733c:	6923      	ldr	r3, [r4, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d030      	beq.n	80073a4 <HAL_ADC_Init+0x21c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007342:	6822      	ldr	r2, [r4, #0]
 8007344:	6913      	ldr	r3, [r2, #16]
 8007346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800734a:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800734c:	6822      	ldr	r2, [r4, #0]
 800734e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8007352:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007356:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800735a:	6921      	ldr	r1, [r4, #16]
 800735c:	430b      	orrs	r3, r1
 800735e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8007362:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007366:	2b01      	cmp	r3, #1
 8007368:	d02b      	beq.n	80073c2 <HAL_ADC_Init+0x23a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800736a:	6822      	ldr	r2, [r4, #0]
 800736c:	6913      	ldr	r3, [r2, #16]
 800736e:	f023 0301 	bic.w	r3, r3, #1
 8007372:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007374:	6963      	ldr	r3, [r4, #20]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d035      	beq.n	80073e6 <HAL_ADC_Init+0x25e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800737a:	6822      	ldr	r2, [r4, #0]
 800737c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800737e:	f023 030f 	bic.w	r3, r3, #15
 8007382:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007384:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007386:	f023 0303 	bic.w	r3, r3, #3
 800738a:	f043 0301 	orr.w	r3, r3, #1
 800738e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8007390:	e037      	b.n	8007402 <HAL_ADC_Init+0x27a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007392:	4926      	ldr	r1, [pc, #152]	; (800742c <HAL_ADC_Init+0x2a4>)
 8007394:	e790      	b.n	80072b8 <HAL_ADC_Init+0x130>
 8007396:	4925      	ldr	r1, [pc, #148]	; (800742c <HAL_ADC_Init+0x2a4>)
 8007398:	e78e      	b.n	80072b8 <HAL_ADC_Init+0x130>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800739a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800739c:	3a01      	subs	r2, #1
 800739e:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80073a2:	e79d      	b.n	80072e0 <HAL_ADC_Init+0x158>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80073a4:	6822      	ldr	r2, [r4, #0]
 80073a6:	6913      	ldr	r3, [r2, #16]
 80073a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ac:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80073ae:	6822      	ldr	r2, [r4, #0]
 80073b0:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80073b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80073b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80073bc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80073c0:	e7cf      	b.n	8007362 <HAL_ADC_Init+0x1da>
        MODIFY_REG(hadc->Instance->CFGR2,
 80073c2:	6821      	ldr	r1, [r4, #0]
 80073c4:	690b      	ldr	r3, [r1, #16]
 80073c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80073ca:	f023 0304 	bic.w	r3, r3, #4
 80073ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80073d0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80073d2:	432a      	orrs	r2, r5
 80073d4:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80073d6:	432a      	orrs	r2, r5
 80073d8:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80073da:	432a      	orrs	r2, r5
 80073dc:	4313      	orrs	r3, r2
 80073de:	f043 0301 	orr.w	r3, r3, #1
 80073e2:	610b      	str	r3, [r1, #16]
 80073e4:	e7c6      	b.n	8007374 <HAL_ADC_Init+0x1ec>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80073e6:	6821      	ldr	r1, [r4, #0]
 80073e8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80073ea:	f023 030f 	bic.w	r3, r3, #15
 80073ee:	6a22      	ldr	r2, [r4, #32]
 80073f0:	3a01      	subs	r2, #1
 80073f2:	4313      	orrs	r3, r2
 80073f4:	630b      	str	r3, [r1, #48]	; 0x30
 80073f6:	e7c5      	b.n	8007384 <HAL_ADC_Init+0x1fc>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073f8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80073fa:	f043 0310 	orr.w	r3, r3, #16
 80073fe:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007400:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8007402:	b003      	add	sp, #12
 8007404:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8007406:	2001      	movs	r0, #1
 8007408:	e7fb      	b.n	8007402 <HAL_ADC_Init+0x27a>
 800740a:	bf00      	nop
 800740c:	2000008c 	.word	0x2000008c
 8007410:	053e2d63 	.word	0x053e2d63
 8007414:	50000100 	.word	0x50000100
 8007418:	50000400 	.word	0x50000400
 800741c:	50000500 	.word	0x50000500
 8007420:	50000600 	.word	0x50000600
 8007424:	50000700 	.word	0x50000700
 8007428:	fff04007 	.word	0xfff04007
 800742c:	50000300 	.word	0x50000300

08007430 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007430:	4770      	bx	lr

08007432 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007432:	4770      	bx	lr

08007434 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007434:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007436:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007438:	f7ff fffb 	bl	8007432 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800743c:	bd08      	pop	{r3, pc}

0800743e <HAL_ADC_ErrorCallback>:
}
 800743e:	4770      	bx	lr

08007440 <ADC_DMAConvCplt>:
{
 8007440:	b508      	push	{r3, lr}
 8007442:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007444:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007446:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8007448:	f012 0f50 	tst.w	r2, #80	; 0x50
 800744c:	d130      	bne.n	80074b0 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800744e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8007450:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007454:	65c3      	str	r3, [r0, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007456:	6803      	ldr	r3, [r0, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	f012 0f08 	tst.w	r2, #8
 800745e:	d014      	beq.n	800748a <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8007466:	d120      	bne.n	80074aa <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800746e:	d11c      	bne.n	80074aa <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007470:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8007472:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007476:	65c3      	str	r3, [r0, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007478:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800747a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800747e:	d114      	bne.n	80074aa <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007480:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8007482:	f043 0301 	orr.w	r3, r3, #1
 8007486:	65c3      	str	r3, [r0, #92]	; 0x5c
 8007488:	e00f      	b.n	80074aa <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f013 0f02 	tst.w	r3, #2
 8007490:	d10b      	bne.n	80074aa <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007492:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8007494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007498:	65c3      	str	r3, [r0, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800749a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800749c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80074a0:	d103      	bne.n	80074aa <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074a2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80074a4:	f043 0301 	orr.w	r3, r3, #1
 80074a8:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 80074aa:	f7ff ffc1 	bl	8007430 <HAL_ADC_ConvCpltCallback>
}
 80074ae:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80074b0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80074b2:	f012 0f10 	tst.w	r2, #16
 80074b6:	d104      	bne.n	80074c2 <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80074b8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80074ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80074bc:	4618      	mov	r0, r3
 80074be:	4790      	blx	r2
}
 80074c0:	e7f5      	b.n	80074ae <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 80074c2:	f7ff ffbc 	bl	800743e <HAL_ADC_ErrorCallback>
 80074c6:	e7f2      	b.n	80074ae <ADC_DMAConvCplt+0x6e>

080074c8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80074c8:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074ca:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80074cc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80074ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074d2:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80074d4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80074d6:	f043 0304 	orr.w	r3, r3, #4
 80074da:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80074dc:	f7ff ffaf 	bl	800743e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80074e0:	bd08      	pop	{r3, pc}
	...

080074e4 <HAL_ADC_ConfigChannel>:
{
 80074e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074e6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80074e8:	2200      	movs	r2, #0
 80074ea:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80074ec:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 80074f0:	2a01      	cmp	r2, #1
 80074f2:	f000 8284 	beq.w	80079fe <HAL_ADC_ConfigChannel+0x51a>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2201      	movs	r2, #1
 80074fa:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80074fe:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007500:	68a8      	ldr	r0, [r5, #8]
 8007502:	f010 0f04 	tst.w	r0, #4
 8007506:	d009      	beq.n	800751c <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007508:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800750a:	f042 0220 	orr.w	r2, r2, #32
 800750e:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8007510:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8007512:	2200      	movs	r2, #0
 8007514:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8007518:	b003      	add	sp, #12
 800751a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800751c:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800751e:	3530      	adds	r5, #48	; 0x30
 8007520:	0a22      	lsrs	r2, r4, #8
 8007522:	0092      	lsls	r2, r2, #2
 8007524:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8007528:	58a8      	ldr	r0, [r5, r2]
 800752a:	f004 0e1f 	and.w	lr, r4, #31
 800752e:	241f      	movs	r4, #31
 8007530:	fa04 f40e 	lsl.w	r4, r4, lr
 8007534:	ea20 0004 	bic.w	r0, r0, r4
 8007538:	680c      	ldr	r4, [r1, #0]
 800753a:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 800753e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007542:	ea40 000c 	orr.w	r0, r0, ip
 8007546:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007548:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800754a:	6882      	ldr	r2, [r0, #8]
 800754c:	f012 0204 	ands.w	r2, r2, #4
 8007550:	d000      	beq.n	8007554 <HAL_ADC_ConfigChannel+0x70>
 8007552:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007554:	6884      	ldr	r4, [r0, #8]
 8007556:	f014 0408 	ands.w	r4, r4, #8
 800755a:	d000      	beq.n	800755e <HAL_ADC_ConfigChannel+0x7a>
 800755c:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800755e:	2a00      	cmp	r2, #0
 8007560:	d150      	bne.n	8007604 <HAL_ADC_ConfigChannel+0x120>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007562:	2c00      	cmp	r4, #0
 8007564:	d14e      	bne.n	8007604 <HAL_ADC_ConfigChannel+0x120>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007566:	688f      	ldr	r7, [r1, #8]
 8007568:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 800756c:	f000 8086 	beq.w	800767c <HAL_ADC_ConfigChannel+0x198>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007570:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007572:	3014      	adds	r0, #20
 8007574:	0e72      	lsrs	r2, r6, #25
 8007576:	0092      	lsls	r2, r2, #2
 8007578:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 800757c:	5885      	ldr	r5, [r0, r2]
 800757e:	f3c6 5e04 	ubfx	lr, r6, #20, #5
 8007582:	f04f 0c07 	mov.w	ip, #7
 8007586:	fa0c fc0e 	lsl.w	ip, ip, lr
 800758a:	ea25 0c0c 	bic.w	ip, r5, ip
 800758e:	fa07 f50e 	lsl.w	r5, r7, lr
 8007592:	ea4c 0505 	orr.w	r5, ip, r5
 8007596:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007598:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800759a:	6942      	ldr	r2, [r0, #20]
 800759c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80075a0:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80075a2:	694d      	ldr	r5, [r1, #20]
 80075a4:	6818      	ldr	r0, [r3, #0]
 80075a6:	68c2      	ldr	r2, [r0, #12]
 80075a8:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80075ac:	0052      	lsls	r2, r2, #1
 80075ae:	fa05 f202 	lsl.w	r2, r5, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80075b2:	690e      	ldr	r6, [r1, #16]
 80075b4:	2e04      	cmp	r6, #4
 80075b6:	d079      	beq.n	80076ac <HAL_ADC_ConfigChannel+0x1c8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80075b8:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 80075ba:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80075be:	4dae      	ldr	r5, [pc, #696]	; (8007878 <HAL_ADC_ConfigChannel+0x394>)
 80075c0:	403d      	ands	r5, r7
 80075c2:	680f      	ldr	r7, [r1, #0]
 80075c4:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 80075c8:	433a      	orrs	r2, r7
 80075ca:	4315      	orrs	r5, r2
 80075cc:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80075d0:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	690e      	ldr	r6, [r1, #16]
 80075d8:	6988      	ldr	r0, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80075da:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 80075dc:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 80075e0:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 80075e4:	4328      	orrs	r0, r5
 80075e6:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	690d      	ldr	r5, [r1, #16]
 80075ee:	7f08      	ldrb	r0, [r1, #28]
 80075f0:	2801      	cmp	r0, #1
 80075f2:	d058      	beq.n	80076a6 <HAL_ADC_ConfigChannel+0x1c2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80075f4:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 80075f6:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80075fa:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 80075fe:	4304      	orrs	r4, r0
 8007600:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007604:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007606:	6890      	ldr	r0, [r2, #8]
 8007608:	f010 0f01 	tst.w	r0, #1
 800760c:	d112      	bne.n	8007634 <HAL_ADC_ConfigChannel+0x150>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800760e:	6808      	ldr	r0, [r1, #0]
 8007610:	68cd      	ldr	r5, [r1, #12]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8007612:	4c9a      	ldr	r4, [pc, #616]	; (800787c <HAL_ADC_ConfigChannel+0x398>)
 8007614:	42a5      	cmp	r5, r4
 8007616:	f000 80b1 	beq.w	800777c <HAL_ADC_ConfigChannel+0x298>
    CLEAR_BIT(ADCx->DIFSEL,
 800761a:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 800761e:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8007622:	ea24 0000 	bic.w	r0, r4, r0
 8007626:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800762a:	68c8      	ldr	r0, [r1, #12]
 800762c:	4a93      	ldr	r2, [pc, #588]	; (800787c <HAL_ADC_ConfigChannel+0x398>)
 800762e:	4290      	cmp	r0, r2
 8007630:	f000 80ac 	beq.w	800778c <HAL_ADC_ConfigChannel+0x2a8>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007634:	680a      	ldr	r2, [r1, #0]
 8007636:	4992      	ldr	r1, [pc, #584]	; (8007880 <HAL_ADC_ConfigChannel+0x39c>)
 8007638:	420a      	tst	r2, r1
 800763a:	f000 81da 	beq.w	80079f2 <HAL_ADC_ConfigChannel+0x50e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800763e:	6819      	ldr	r1, [r3, #0]
 8007640:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8007644:	f000 8173 	beq.w	800792e <HAL_ADC_ConfigChannel+0x44a>
 8007648:	488e      	ldr	r0, [pc, #568]	; (8007884 <HAL_ADC_ConfigChannel+0x3a0>)
 800764a:	4281      	cmp	r1, r0
 800764c:	f000 816c 	beq.w	8007928 <HAL_ADC_ConfigChannel+0x444>
 8007650:	488d      	ldr	r0, [pc, #564]	; (8007888 <HAL_ADC_ConfigChannel+0x3a4>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8007652:	6880      	ldr	r0, [r0, #8]
 8007654:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007658:	4d8c      	ldr	r5, [pc, #560]	; (800788c <HAL_ADC_ConfigChannel+0x3a8>)
 800765a:	42aa      	cmp	r2, r5
 800765c:	f000 8169 	beq.w	8007932 <HAL_ADC_ConfigChannel+0x44e>
 8007660:	4d8b      	ldr	r5, [pc, #556]	; (8007890 <HAL_ADC_ConfigChannel+0x3ac>)
 8007662:	42aa      	cmp	r2, r5
 8007664:	f000 8165 	beq.w	8007932 <HAL_ADC_ConfigChannel+0x44e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007668:	4d8a      	ldr	r5, [pc, #552]	; (8007894 <HAL_ADC_ConfigChannel+0x3b0>)
 800766a:	42aa      	cmp	r2, r5
 800766c:	f000 8194 	beq.w	8007998 <HAL_ADC_ConfigChannel+0x4b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007670:	4d89      	ldr	r5, [pc, #548]	; (8007898 <HAL_ADC_ConfigChannel+0x3b4>)
 8007672:	42aa      	cmp	r2, r5
 8007674:	f000 81a8 	beq.w	80079c8 <HAL_ADC_ConfigChannel+0x4e4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007678:	2000      	movs	r0, #0
 800767a:	e74a      	b.n	8007512 <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800767c:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800767e:	3014      	adds	r0, #20
 8007680:	0e6a      	lsrs	r2, r5, #25
 8007682:	0092      	lsls	r2, r2, #2
 8007684:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8007688:	5886      	ldr	r6, [r0, r2]
 800768a:	f3c5 5504 	ubfx	r5, r5, #20, #5
 800768e:	2707      	movs	r7, #7
 8007690:	fa07 f505 	lsl.w	r5, r7, r5
 8007694:	ea26 0505 	bic.w	r5, r6, r5
 8007698:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800769a:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800769c:	6942      	ldr	r2, [r0, #20]
 800769e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80076a2:	6142      	str	r2, [r0, #20]
}
 80076a4:	e77d      	b.n	80075a2 <HAL_ADC_ConfigChannel+0xbe>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80076a6:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80076aa:	e7a3      	b.n	80075f4 <HAL_ADC_ConfigChannel+0x110>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80076ac:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80076ae:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80076b0:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80076b4:	680a      	ldr	r2, [r1, #0]
 80076b6:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80076ba:	bb85      	cbnz	r5, 800771e <HAL_ADC_ConfigChannel+0x23a>
 80076bc:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80076c0:	4294      	cmp	r4, r2
 80076c2:	d034      	beq.n	800772e <HAL_ADC_ConfigChannel+0x24a>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80076c4:	681c      	ldr	r4, [r3, #0]
 80076c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076c8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80076ca:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80076ce:	680a      	ldr	r2, [r1, #0]
 80076d0:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80076d4:	bb85      	cbnz	r5, 8007738 <HAL_ADC_ConfigChannel+0x254>
 80076d6:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80076da:	4290      	cmp	r0, r2
 80076dc:	d034      	beq.n	8007748 <HAL_ADC_ConfigChannel+0x264>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80076de:	681c      	ldr	r4, [r3, #0]
 80076e0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80076e2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80076e4:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80076e8:	680a      	ldr	r2, [r1, #0]
 80076ea:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80076ee:	bb85      	cbnz	r5, 8007752 <HAL_ADC_ConfigChannel+0x26e>
 80076f0:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80076f4:	4290      	cmp	r0, r2
 80076f6:	d034      	beq.n	8007762 <HAL_ADC_ConfigChannel+0x27e>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80076f8:	681c      	ldr	r4, [r3, #0]
 80076fa:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80076fc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80076fe:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007702:	680a      	ldr	r2, [r1, #0]
 8007704:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8007708:	bb85      	cbnz	r5, 800776c <HAL_ADC_ConfigChannel+0x288>
 800770a:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800770e:	4290      	cmp	r0, r2
 8007710:	f47f af78 	bne.w	8007604 <HAL_ADC_ConfigChannel+0x120>
  MODIFY_REG(*preg,
 8007714:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007716:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800771a:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 800771c:	e772      	b.n	8007604 <HAL_ADC_ConfigChannel+0x120>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800771e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8007722:	b112      	cbz	r2, 800772a <HAL_ADC_ConfigChannel+0x246>
  return __builtin_clz(value);
 8007724:	fab2 f282 	clz	r2, r2
 8007728:	e7ca      	b.n	80076c0 <HAL_ADC_ConfigChannel+0x1dc>
    return 32U;
 800772a:	2220      	movs	r2, #32
 800772c:	e7c8      	b.n	80076c0 <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(*preg,
 800772e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8007730:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007734:	6602      	str	r2, [r0, #96]	; 0x60
}
 8007736:	e7c5      	b.n	80076c4 <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007738:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800773c:	b112      	cbz	r2, 8007744 <HAL_ADC_ConfigChannel+0x260>
  return __builtin_clz(value);
 800773e:	fab2 f282 	clz	r2, r2
 8007742:	e7ca      	b.n	80076da <HAL_ADC_ConfigChannel+0x1f6>
    return 32U;
 8007744:	2220      	movs	r2, #32
 8007746:	e7c8      	b.n	80076da <HAL_ADC_ConfigChannel+0x1f6>
  MODIFY_REG(*preg,
 8007748:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800774a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800774e:	6662      	str	r2, [r4, #100]	; 0x64
}
 8007750:	e7c5      	b.n	80076de <HAL_ADC_ConfigChannel+0x1fa>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007752:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8007756:	b112      	cbz	r2, 800775e <HAL_ADC_ConfigChannel+0x27a>
  return __builtin_clz(value);
 8007758:	fab2 f282 	clz	r2, r2
 800775c:	e7ca      	b.n	80076f4 <HAL_ADC_ConfigChannel+0x210>
    return 32U;
 800775e:	2220      	movs	r2, #32
 8007760:	e7c8      	b.n	80076f4 <HAL_ADC_ConfigChannel+0x210>
  MODIFY_REG(*preg,
 8007762:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8007764:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007768:	66a2      	str	r2, [r4, #104]	; 0x68
}
 800776a:	e7c5      	b.n	80076f8 <HAL_ADC_ConfigChannel+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800776c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8007770:	b112      	cbz	r2, 8007778 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8007772:	fab2 f282 	clz	r2, r2
 8007776:	e7ca      	b.n	800770e <HAL_ADC_ConfigChannel+0x22a>
    return 32U;
 8007778:	2220      	movs	r2, #32
 800777a:	e7c8      	b.n	800770e <HAL_ADC_ConfigChannel+0x22a>
    SET_BIT(ADCx->DIFSEL,
 800777c:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8007780:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8007784:	4320      	orrs	r0, r4
 8007786:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 800778a:	e74e      	b.n	800762a <HAL_ADC_ConfigChannel+0x146>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800778c:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800778e:	680a      	ldr	r2, [r1, #0]
 8007790:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8007794:	2d00      	cmp	r5, #0
 8007796:	d138      	bne.n	800780a <HAL_ADC_ConfigChannel+0x326>
 8007798:	0e90      	lsrs	r0, r2, #26
 800779a:	3001      	adds	r0, #1
 800779c:	f000 001f 	and.w	r0, r0, #31
 80077a0:	2809      	cmp	r0, #9
 80077a2:	bf8c      	ite	hi
 80077a4:	2000      	movhi	r0, #0
 80077a6:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80077a8:	2800      	cmp	r0, #0
 80077aa:	d077      	beq.n	800789c <HAL_ADC_ConfigChannel+0x3b8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80077ac:	2d00      	cmp	r5, #0
 80077ae:	d13b      	bne.n	8007828 <HAL_ADC_ConfigChannel+0x344>
 80077b0:	0e90      	lsrs	r0, r2, #26
 80077b2:	3001      	adds	r0, #1
 80077b4:	0680      	lsls	r0, r0, #26
 80077b6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80077ba:	2d00      	cmp	r5, #0
 80077bc:	d140      	bne.n	8007840 <HAL_ADC_ConfigChannel+0x35c>
 80077be:	0e96      	lsrs	r6, r2, #26
 80077c0:	3601      	adds	r6, #1
 80077c2:	f006 071f 	and.w	r7, r6, #31
 80077c6:	2601      	movs	r6, #1
 80077c8:	40be      	lsls	r6, r7
 80077ca:	4330      	orrs	r0, r6
 80077cc:	2d00      	cmp	r5, #0
 80077ce:	d145      	bne.n	800785c <HAL_ADC_ConfigChannel+0x378>
 80077d0:	0e92      	lsrs	r2, r2, #26
 80077d2:	3201      	adds	r2, #1
 80077d4:	f002 021f 	and.w	r2, r2, #31
 80077d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80077dc:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80077de:	4302      	orrs	r2, r0
 80077e0:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80077e2:	f104 0614 	add.w	r6, r4, #20
 80077e6:	0e55      	lsrs	r5, r2, #25
 80077e8:	00ad      	lsls	r5, r5, #2
 80077ea:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 80077ee:	5974      	ldr	r4, [r6, r5]
 80077f0:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80077f4:	f04f 0c07 	mov.w	ip, #7
 80077f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80077fc:	ea24 0c0c 	bic.w	ip, r4, ip
 8007800:	4090      	lsls	r0, r2
 8007802:	ea4c 0000 	orr.w	r0, ip, r0
 8007806:	5170      	str	r0, [r6, r5]
}
 8007808:	e714      	b.n	8007634 <HAL_ADC_ConfigChannel+0x150>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800780a:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800780e:	b148      	cbz	r0, 8007824 <HAL_ADC_ConfigChannel+0x340>
  return __builtin_clz(value);
 8007810:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007814:	3001      	adds	r0, #1
 8007816:	f000 001f 	and.w	r0, r0, #31
 800781a:	2809      	cmp	r0, #9
 800781c:	bf8c      	ite	hi
 800781e:	2000      	movhi	r0, #0
 8007820:	2001      	movls	r0, #1
 8007822:	e7c1      	b.n	80077a8 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8007824:	2020      	movs	r0, #32
 8007826:	e7f5      	b.n	8007814 <HAL_ADC_ConfigChannel+0x330>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007828:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800782c:	b130      	cbz	r0, 800783c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800782e:	fab0 f080 	clz	r0, r0
 8007832:	3001      	adds	r0, #1
 8007834:	0680      	lsls	r0, r0, #26
 8007836:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800783a:	e7be      	b.n	80077ba <HAL_ADC_ConfigChannel+0x2d6>
    return 32U;
 800783c:	2020      	movs	r0, #32
 800783e:	e7f8      	b.n	8007832 <HAL_ADC_ConfigChannel+0x34e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007840:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8007844:	b146      	cbz	r6, 8007858 <HAL_ADC_ConfigChannel+0x374>
  return __builtin_clz(value);
 8007846:	fab6 f686 	clz	r6, r6
 800784a:	3601      	adds	r6, #1
 800784c:	f006 061f 	and.w	r6, r6, #31
 8007850:	2701      	movs	r7, #1
 8007852:	fa07 f606 	lsl.w	r6, r7, r6
 8007856:	e7b8      	b.n	80077ca <HAL_ADC_ConfigChannel+0x2e6>
    return 32U;
 8007858:	2620      	movs	r6, #32
 800785a:	e7f6      	b.n	800784a <HAL_ADC_ConfigChannel+0x366>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800785c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8007860:	b142      	cbz	r2, 8007874 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8007862:	fab2 f282 	clz	r2, r2
 8007866:	3201      	adds	r2, #1
 8007868:	f002 021f 	and.w	r2, r2, #31
 800786c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007870:	0512      	lsls	r2, r2, #20
 8007872:	e7b4      	b.n	80077de <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8007874:	2220      	movs	r2, #32
 8007876:	e7f6      	b.n	8007866 <HAL_ADC_ConfigChannel+0x382>
 8007878:	03fff000 	.word	0x03fff000
 800787c:	407f0000 	.word	0x407f0000
 8007880:	80080000 	.word	0x80080000
 8007884:	50000100 	.word	0x50000100
 8007888:	50000700 	.word	0x50000700
 800788c:	c3210000 	.word	0xc3210000
 8007890:	90c00010 	.word	0x90c00010
 8007894:	c7520000 	.word	0xc7520000
 8007898:	cb840000 	.word	0xcb840000
 800789c:	b9cd      	cbnz	r5, 80078d2 <HAL_ADC_ConfigChannel+0x3ee>
 800789e:	0e90      	lsrs	r0, r2, #26
 80078a0:	3001      	adds	r0, #1
 80078a2:	0680      	lsls	r0, r0, #26
 80078a4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80078a8:	b9fd      	cbnz	r5, 80078ea <HAL_ADC_ConfigChannel+0x406>
 80078aa:	0e96      	lsrs	r6, r2, #26
 80078ac:	3601      	adds	r6, #1
 80078ae:	f006 071f 	and.w	r7, r6, #31
 80078b2:	2601      	movs	r6, #1
 80078b4:	40be      	lsls	r6, r7
 80078b6:	4330      	orrs	r0, r6
 80078b8:	bb2d      	cbnz	r5, 8007906 <HAL_ADC_ConfigChannel+0x422>
 80078ba:	0e92      	lsrs	r2, r2, #26
 80078bc:	3201      	adds	r2, #1
 80078be:	f002 021f 	and.w	r2, r2, #31
 80078c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80078c6:	3a1e      	subs	r2, #30
 80078c8:	0512      	lsls	r2, r2, #20
 80078ca:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80078ce:	4302      	orrs	r2, r0
 80078d0:	e786      	b.n	80077e0 <HAL_ADC_ConfigChannel+0x2fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078d2:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80078d6:	b130      	cbz	r0, 80078e6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80078d8:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80078dc:	3001      	adds	r0, #1
 80078de:	0680      	lsls	r0, r0, #26
 80078e0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80078e4:	e7e0      	b.n	80078a8 <HAL_ADC_ConfigChannel+0x3c4>
    return 32U;
 80078e6:	2020      	movs	r0, #32
 80078e8:	e7f8      	b.n	80078dc <HAL_ADC_ConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078ea:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80078ee:	b146      	cbz	r6, 8007902 <HAL_ADC_ConfigChannel+0x41e>
  return __builtin_clz(value);
 80078f0:	fab6 f686 	clz	r6, r6
 80078f4:	3601      	adds	r6, #1
 80078f6:	f006 061f 	and.w	r6, r6, #31
 80078fa:	2701      	movs	r7, #1
 80078fc:	fa07 f606 	lsl.w	r6, r7, r6
 8007900:	e7d9      	b.n	80078b6 <HAL_ADC_ConfigChannel+0x3d2>
    return 32U;
 8007902:	2620      	movs	r6, #32
 8007904:	e7f6      	b.n	80078f4 <HAL_ADC_ConfigChannel+0x410>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007906:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800790a:	b15a      	cbz	r2, 8007924 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 800790c:	fab2 f282 	clz	r2, r2
 8007910:	3201      	adds	r2, #1
 8007912:	f002 021f 	and.w	r2, r2, #31
 8007916:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800791a:	3a1e      	subs	r2, #30
 800791c:	0512      	lsls	r2, r2, #20
 800791e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8007922:	e7d4      	b.n	80078ce <HAL_ADC_ConfigChannel+0x3ea>
    return 32U;
 8007924:	2220      	movs	r2, #32
 8007926:	e7f3      	b.n	8007910 <HAL_ADC_ConfigChannel+0x42c>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007928:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800792c:	e691      	b.n	8007652 <HAL_ADC_ConfigChannel+0x16e>
 800792e:	4835      	ldr	r0, [pc, #212]	; (8007a04 <HAL_ADC_ConfigChannel+0x520>)
 8007930:	e68f      	b.n	8007652 <HAL_ADC_ConfigChannel+0x16e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007932:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8007936:	f47f ae97 	bne.w	8007668 <HAL_ADC_ConfigChannel+0x184>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800793a:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800793e:	d004      	beq.n	800794a <HAL_ADC_ConfigChannel+0x466>
 8007940:	4a31      	ldr	r2, [pc, #196]	; (8007a08 <HAL_ADC_ConfigChannel+0x524>)
 8007942:	4291      	cmp	r1, r2
 8007944:	d001      	beq.n	800794a <HAL_ADC_ConfigChannel+0x466>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007946:	2000      	movs	r0, #0
 8007948:	e5e3      	b.n	8007512 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800794a:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800794e:	d019      	beq.n	8007984 <HAL_ADC_ConfigChannel+0x4a0>
 8007950:	4a2e      	ldr	r2, [pc, #184]	; (8007a0c <HAL_ADC_ConfigChannel+0x528>)
 8007952:	4291      	cmp	r1, r2
 8007954:	d014      	beq.n	8007980 <HAL_ADC_ConfigChannel+0x49c>
 8007956:	492e      	ldr	r1, [pc, #184]	; (8007a10 <HAL_ADC_ConfigChannel+0x52c>)
 8007958:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800795c:	688a      	ldr	r2, [r1, #8]
 800795e:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8007962:	4314      	orrs	r4, r2
 8007964:	608c      	str	r4, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007966:	4a2b      	ldr	r2, [pc, #172]	; (8007a14 <HAL_ADC_ConfigChannel+0x530>)
 8007968:	6812      	ldr	r2, [r2, #0]
 800796a:	0992      	lsrs	r2, r2, #6
 800796c:	492a      	ldr	r1, [pc, #168]	; (8007a18 <HAL_ADC_ConfigChannel+0x534>)
 800796e:	fba1 1202 	umull	r1, r2, r1, r2
 8007972:	0992      	lsrs	r2, r2, #6
 8007974:	3201      	adds	r2, #1
 8007976:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800797a:	0092      	lsls	r2, r2, #2
 800797c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800797e:	e006      	b.n	800798e <HAL_ADC_ConfigChannel+0x4aa>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007980:	4920      	ldr	r1, [pc, #128]	; (8007a04 <HAL_ADC_ConfigChannel+0x520>)
 8007982:	e7e9      	b.n	8007958 <HAL_ADC_ConfigChannel+0x474>
 8007984:	491f      	ldr	r1, [pc, #124]	; (8007a04 <HAL_ADC_ConfigChannel+0x520>)
 8007986:	e7e7      	b.n	8007958 <HAL_ADC_ConfigChannel+0x474>
            wait_loop_index--;
 8007988:	9a01      	ldr	r2, [sp, #4]
 800798a:	3a01      	subs	r2, #1
 800798c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800798e:	9a01      	ldr	r2, [sp, #4]
 8007990:	2a00      	cmp	r2, #0
 8007992:	d1f9      	bne.n	8007988 <HAL_ADC_ConfigChannel+0x4a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007994:	2000      	movs	r0, #0
 8007996:	e5bc      	b.n	8007512 <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007998:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 800799c:	f47f ae68 	bne.w	8007670 <HAL_ADC_ConfigChannel+0x18c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80079a0:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80079a4:	d00e      	beq.n	80079c4 <HAL_ADC_ConfigChannel+0x4e0>
 80079a6:	4a19      	ldr	r2, [pc, #100]	; (8007a0c <HAL_ADC_ConfigChannel+0x528>)
 80079a8:	4291      	cmp	r1, r2
 80079aa:	d009      	beq.n	80079c0 <HAL_ADC_ConfigChannel+0x4dc>
 80079ac:	4918      	ldr	r1, [pc, #96]	; (8007a10 <HAL_ADC_ConfigChannel+0x52c>)
 80079ae:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 80079b2:	688a      	ldr	r2, [r1, #8]
 80079b4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80079b8:	4314      	orrs	r4, r2
 80079ba:	608c      	str	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80079bc:	2000      	movs	r0, #0
}
 80079be:	e5a8      	b.n	8007512 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80079c0:	4910      	ldr	r1, [pc, #64]	; (8007a04 <HAL_ADC_ConfigChannel+0x520>)
 80079c2:	e7f4      	b.n	80079ae <HAL_ADC_ConfigChannel+0x4ca>
 80079c4:	490f      	ldr	r1, [pc, #60]	; (8007a04 <HAL_ADC_ConfigChannel+0x520>)
 80079c6:	e7f2      	b.n	80079ae <HAL_ADC_ConfigChannel+0x4ca>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80079c8:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80079cc:	d113      	bne.n	80079f6 <HAL_ADC_ConfigChannel+0x512>
        if (ADC_VREFINT_INSTANCE(hadc))
 80079ce:	4a0f      	ldr	r2, [pc, #60]	; (8007a0c <HAL_ADC_ConfigChannel+0x528>)
 80079d0:	4291      	cmp	r1, r2
 80079d2:	d012      	beq.n	80079fa <HAL_ADC_ConfigChannel+0x516>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80079d4:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80079d8:	d009      	beq.n	80079ee <HAL_ADC_ConfigChannel+0x50a>
 80079da:	480d      	ldr	r0, [pc, #52]	; (8007a10 <HAL_ADC_ConfigChannel+0x52c>)
 80079dc:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80079e0:	6881      	ldr	r1, [r0, #8]
 80079e2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80079e6:	430a      	orrs	r2, r1
 80079e8:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80079ea:	2000      	movs	r0, #0
}
 80079ec:	e591      	b.n	8007512 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80079ee:	4805      	ldr	r0, [pc, #20]	; (8007a04 <HAL_ADC_ConfigChannel+0x520>)
 80079f0:	e7f4      	b.n	80079dc <HAL_ADC_ConfigChannel+0x4f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80079f2:	2000      	movs	r0, #0
 80079f4:	e58d      	b.n	8007512 <HAL_ADC_ConfigChannel+0x2e>
 80079f6:	2000      	movs	r0, #0
 80079f8:	e58b      	b.n	8007512 <HAL_ADC_ConfigChannel+0x2e>
 80079fa:	2000      	movs	r0, #0
 80079fc:	e589      	b.n	8007512 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 80079fe:	2002      	movs	r0, #2
 8007a00:	e58a      	b.n	8007518 <HAL_ADC_ConfigChannel+0x34>
 8007a02:	bf00      	nop
 8007a04:	50000300 	.word	0x50000300
 8007a08:	50000600 	.word	0x50000600
 8007a0c:	50000100 	.word	0x50000100
 8007a10:	50000700 	.word	0x50000700
 8007a14:	2000008c 	.word	0x2000008c
 8007a18:	053e2d63 	.word	0x053e2d63

08007a1c <ADC_Enable>:
{
 8007a1c:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007a1e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007a20:	689a      	ldr	r2, [r3, #8]
 8007a22:	f012 0f01 	tst.w	r2, #1
 8007a26:	d140      	bne.n	8007aaa <ADC_Enable+0x8e>
 8007a28:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007a2a:	6899      	ldr	r1, [r3, #8]
 8007a2c:	4a20      	ldr	r2, [pc, #128]	; (8007ab0 <ADC_Enable+0x94>)
 8007a2e:	4211      	tst	r1, r2
 8007a30:	d009      	beq.n	8007a46 <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a32:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8007a34:	f043 0310 	orr.w	r3, r3, #16
 8007a38:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a3a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8007a3c:	f043 0301 	orr.w	r3, r3, #1
 8007a40:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 8007a42:	2001      	movs	r0, #1
 8007a44:	e032      	b.n	8007aac <ADC_Enable+0x90>
  MODIFY_REG(ADCx->CR,
 8007a46:	689a      	ldr	r2, [r3, #8]
 8007a48:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007a4c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8007a50:	f042 0201 	orr.w	r2, r2, #1
 8007a54:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8007a56:	f7ff fb7d 	bl	8007154 <HAL_GetTick>
 8007a5a:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	f012 0f01 	tst.w	r2, #1
 8007a64:	d11f      	bne.n	8007aa6 <ADC_Enable+0x8a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	f012 0f01 	tst.w	r2, #1
 8007a6c:	d107      	bne.n	8007a7e <ADC_Enable+0x62>
  MODIFY_REG(ADCx->CR,
 8007a6e:	689a      	ldr	r2, [r3, #8]
 8007a70:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007a74:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8007a78:	f042 0201 	orr.w	r2, r2, #1
 8007a7c:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007a7e:	f7ff fb69 	bl	8007154 <HAL_GetTick>
 8007a82:	1b43      	subs	r3, r0, r5
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d9e9      	bls.n	8007a5c <ADC_Enable+0x40>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f013 0f01 	tst.w	r3, #1
 8007a90:	d1e4      	bne.n	8007a5c <ADC_Enable+0x40>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a92:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007a94:	f043 0310 	orr.w	r3, r3, #16
 8007a98:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a9a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007a9c:	f043 0301 	orr.w	r3, r3, #1
 8007aa0:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8007aa2:	2001      	movs	r0, #1
 8007aa4:	e002      	b.n	8007aac <ADC_Enable+0x90>
  return HAL_OK;
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	e000      	b.n	8007aac <ADC_Enable+0x90>
 8007aaa:	2000      	movs	r0, #0
}
 8007aac:	bd38      	pop	{r3, r4, r5, pc}
 8007aae:	bf00      	nop
 8007ab0:	8000003f 	.word	0x8000003f

08007ab4 <HAL_ADC_Start_DMA>:
{
 8007ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab8:	4604      	mov	r4, r0
 8007aba:	460f      	mov	r7, r1
 8007abc:	4690      	mov	r8, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007abe:	6800      	ldr	r0, [r0, #0]
 8007ac0:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8007ac4:	d021      	beq.n	8007b0a <HAL_ADC_Start_DMA+0x56>
 8007ac6:	4b42      	ldr	r3, [pc, #264]	; (8007bd0 <HAL_ADC_Start_DMA+0x11c>)
 8007ac8:	4298      	cmp	r0, r3
 8007aca:	d01b      	beq.n	8007b04 <HAL_ADC_Start_DMA+0x50>
 8007acc:	4b41      	ldr	r3, [pc, #260]	; (8007bd4 <HAL_ADC_Start_DMA+0x120>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007ace:	689e      	ldr	r6, [r3, #8]
 8007ad0:	f006 061f 	and.w	r6, r6, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007ad4:	6885      	ldr	r5, [r0, #8]
 8007ad6:	f015 0f04 	tst.w	r5, #4
 8007ada:	d174      	bne.n	8007bc6 <HAL_ADC_Start_DMA+0x112>
    __HAL_LOCK(hadc);
 8007adc:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d073      	beq.n	8007bcc <HAL_ADC_Start_DMA+0x118>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8007aea:	4b3b      	ldr	r3, [pc, #236]	; (8007bd8 <HAL_ADC_Start_DMA+0x124>)
 8007aec:	4298      	cmp	r0, r3
 8007aee:	d00e      	beq.n	8007b0e <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007af0:	b16e      	cbz	r6, 8007b0e <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007af2:	2e05      	cmp	r6, #5
 8007af4:	d00b      	beq.n	8007b0e <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007af6:	2e09      	cmp	r6, #9
 8007af8:	d009      	beq.n	8007b0e <HAL_ADC_Start_DMA+0x5a>
      __HAL_UNLOCK(hadc);
 8007afa:	2300      	movs	r3, #0
 8007afc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8007b00:	2001      	movs	r0, #1
 8007b02:	e061      	b.n	8007bc8 <HAL_ADC_Start_DMA+0x114>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007b04:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007b08:	e7e1      	b.n	8007ace <HAL_ADC_Start_DMA+0x1a>
 8007b0a:	4b34      	ldr	r3, [pc, #208]	; (8007bdc <HAL_ADC_Start_DMA+0x128>)
 8007b0c:	e7df      	b.n	8007ace <HAL_ADC_Start_DMA+0x1a>
      tmp_hal_status = ADC_Enable(hadc);
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f7ff ff84 	bl	8007a1c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d152      	bne.n	8007bbe <HAL_ADC_Start_DMA+0x10a>
        ADC_STATE_CLR_SET(hadc->State,
 8007b18:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007b1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007b1e:	f023 0301 	bic.w	r3, r3, #1
 8007b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b26:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	4a29      	ldr	r2, [pc, #164]	; (8007bd0 <HAL_ADC_Start_DMA+0x11c>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d040      	beq.n	8007bb2 <HAL_ADC_Start_DMA+0xfe>
 8007b30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d039      	beq.n	8007bac <HAL_ADC_Start_DMA+0xf8>
 8007b38:	461a      	mov	r2, r3
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d000      	beq.n	8007b40 <HAL_ADC_Start_DMA+0x8c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007b3e:	b91e      	cbnz	r6, 8007b48 <HAL_ADC_Start_DMA+0x94>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007b40:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007b42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b46:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007b48:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007b4a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8007b4e:	d033      	beq.n	8007bb8 <HAL_ADC_Start_DMA+0x104>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007b50:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007b52:	f023 0306 	bic.w	r3, r3, #6
 8007b56:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007b58:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007b5a:	4a21      	ldr	r2, [pc, #132]	; (8007be0 <HAL_ADC_Start_DMA+0x12c>)
 8007b5c:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007b5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007b60:	4a20      	ldr	r2, [pc, #128]	; (8007be4 <HAL_ADC_Start_DMA+0x130>)
 8007b62:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007b64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007b66:	4a20      	ldr	r2, [pc, #128]	; (8007be8 <HAL_ADC_Start_DMA+0x134>)
 8007b68:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	221c      	movs	r2, #28
 8007b6e:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8007b70:	2300      	movs	r3, #0
 8007b72:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007b76:	6822      	ldr	r2, [r4, #0]
 8007b78:	6853      	ldr	r3, [r2, #4]
 8007b7a:	f043 0310 	orr.w	r3, r3, #16
 8007b7e:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007b80:	6822      	ldr	r2, [r4, #0]
 8007b82:	68d3      	ldr	r3, [r2, #12]
 8007b84:	f043 0301 	orr.w	r3, r3, #1
 8007b88:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007b8a:	6821      	ldr	r1, [r4, #0]
 8007b8c:	4643      	mov	r3, r8
 8007b8e:	463a      	mov	r2, r7
 8007b90:	3140      	adds	r1, #64	; 0x40
 8007b92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b94:	f000 fc2a 	bl	80083ec <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007b98:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8007b9a:	6893      	ldr	r3, [r2, #8]
 8007b9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ba0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007ba4:	f043 0304 	orr.w	r3, r3, #4
 8007ba8:	6093      	str	r3, [r2, #8]
}
 8007baa:	e00d      	b.n	8007bc8 <HAL_ADC_Start_DMA+0x114>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007bac:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007bb0:	e7c3      	b.n	8007b3a <HAL_ADC_Start_DMA+0x86>
 8007bb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007bb6:	e7c0      	b.n	8007b3a <HAL_ADC_Start_DMA+0x86>
          ADC_CLEAR_ERRORCODE(hadc);
 8007bb8:	2300      	movs	r3, #0
 8007bba:	6623      	str	r3, [r4, #96]	; 0x60
 8007bbc:	e7cc      	b.n	8007b58 <HAL_ADC_Start_DMA+0xa4>
        __HAL_UNLOCK(hadc);
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8007bc4:	e000      	b.n	8007bc8 <HAL_ADC_Start_DMA+0x114>
    tmp_hal_status = HAL_BUSY;
 8007bc6:	2002      	movs	r0, #2
}
 8007bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 8007bcc:	2002      	movs	r0, #2
 8007bce:	e7fb      	b.n	8007bc8 <HAL_ADC_Start_DMA+0x114>
 8007bd0:	50000100 	.word	0x50000100
 8007bd4:	50000700 	.word	0x50000700
 8007bd8:	50000600 	.word	0x50000600
 8007bdc:	50000300 	.word	0x50000300
 8007be0:	08007441 	.word	0x08007441
 8007be4:	08007435 	.word	0x08007435
 8007be8:	080074c9 	.word	0x080074c9

08007bec <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007bec:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8007bf0:	2a01      	cmp	r2, #1
 8007bf2:	f000 80d6 	beq.w	8007da2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
{
 8007bf6:	b410      	push	{r4}
 8007bf8:	b09d      	sub	sp, #116	; 0x74
 8007bfa:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8007c02:	2200      	movs	r2, #0
 8007c04:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8007c06:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007c08:	6800      	ldr	r0, [r0, #0]
 8007c0a:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8007c0e:	d047      	beq.n	8007ca0 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8007c10:	4a65      	ldr	r2, [pc, #404]	; (8007da8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8007c12:	4290      	cmp	r0, r2
 8007c14:	d047      	beq.n	8007ca6 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8007c16:	2200      	movs	r2, #0
 8007c18:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8007c1a:	9a01      	ldr	r2, [sp, #4]
 8007c1c:	2a00      	cmp	r2, #0
 8007c1e:	d046      	beq.n	8007cae <HAL_ADCEx_MultiModeConfigChannel+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007c20:	6892      	ldr	r2, [r2, #8]
 8007c22:	f012 0204 	ands.w	r2, r2, #4
 8007c26:	d000      	beq.n	8007c2a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007c28:	2201      	movs	r2, #1
 8007c2a:	6884      	ldr	r4, [r0, #8]
 8007c2c:	f014 0f04 	tst.w	r4, #4
 8007c30:	f040 80a7 	bne.w	8007d82 <HAL_ADCEx_MultiModeConfigChannel+0x196>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007c34:	2a00      	cmp	r2, #0
 8007c36:	f040 80a4 	bne.w	8007d82 <HAL_ADCEx_MultiModeConfigChannel+0x196>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007c3a:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8007c3e:	d042      	beq.n	8007cc6 <HAL_ADCEx_MultiModeConfigChannel+0xda>
 8007c40:	4a5a      	ldr	r2, [pc, #360]	; (8007dac <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007c42:	4290      	cmp	r0, r2
 8007c44:	d03c      	beq.n	8007cc0 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8007c46:	4a5a      	ldr	r2, [pc, #360]	; (8007db0 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007c48:	6808      	ldr	r0, [r1, #0]
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	d05c      	beq.n	8007d08 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007c4e:	6890      	ldr	r0, [r2, #8]
 8007c50:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8007c54:	684c      	ldr	r4, [r1, #4]
 8007c56:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8007c5a:	ea44 344c 	orr.w	r4, r4, ip, lsl #13
 8007c5e:	4320      	orrs	r0, r4
 8007c60:	6090      	str	r0, [r2, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007c62:	6818      	ldr	r0, [r3, #0]
 8007c64:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8007c68:	d02f      	beq.n	8007cca <HAL_ADCEx_MultiModeConfigChannel+0xde>
 8007c6a:	4c50      	ldr	r4, [pc, #320]	; (8007dac <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007c6c:	42a0      	cmp	r0, r4
 8007c6e:	d02c      	beq.n	8007cca <HAL_ADCEx_MultiModeConfigChannel+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007c70:	484d      	ldr	r0, [pc, #308]	; (8007da8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8007c72:	6884      	ldr	r4, [r0, #8]
 8007c74:	f014 0401 	ands.w	r4, r4, #1
 8007c78:	d000      	beq.n	8007c7c <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8007c7a:	2401      	movs	r4, #1
 8007c7c:	484d      	ldr	r0, [pc, #308]	; (8007db4 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8007c7e:	6880      	ldr	r0, [r0, #8]
 8007c80:	f010 0001 	ands.w	r0, r0, #1
 8007c84:	d000      	beq.n	8007c88 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8007c86:	2001      	movs	r0, #1
 8007c88:	4320      	orrs	r0, r4
 8007c8a:	4c4b      	ldr	r4, [pc, #300]	; (8007db8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8007c8c:	68a4      	ldr	r4, [r4, #8]
 8007c8e:	f014 0401 	ands.w	r4, r4, #1
 8007c92:	d000      	beq.n	8007c96 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8007c94:	2401      	movs	r4, #1
 8007c96:	4320      	orrs	r0, r4
 8007c98:	bf0c      	ite	eq
 8007c9a:	2001      	moveq	r0, #1
 8007c9c:	2000      	movne	r0, #0
 8007c9e:	e025      	b.n	8007cec <HAL_ADCEx_MultiModeConfigChannel+0x100>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007ca0:	4a42      	ldr	r2, [pc, #264]	; (8007dac <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007ca2:	9201      	str	r2, [sp, #4]
 8007ca4:	e7b9      	b.n	8007c1a <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8007ca6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8007caa:	9201      	str	r2, [sp, #4]
 8007cac:	e7b5      	b.n	8007c1a <HAL_ADCEx_MultiModeConfigChannel+0x2e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007cae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007cb0:	f042 0220 	orr.w	r2, r2, #32
 8007cb4:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 8007cbc:	2001      	movs	r0, #1
 8007cbe:	e068      	b.n	8007d92 <HAL_ADCEx_MultiModeConfigChannel+0x1a6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007cc0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8007cc4:	e7c0      	b.n	8007c48 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8007cc6:	4a3d      	ldr	r2, [pc, #244]	; (8007dbc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8007cc8:	e7be      	b.n	8007c48 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8007cca:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007cce:	6880      	ldr	r0, [r0, #8]
 8007cd0:	f010 0001 	ands.w	r0, r0, #1
 8007cd4:	d000      	beq.n	8007cd8 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8007cd6:	2001      	movs	r0, #1
 8007cd8:	4c34      	ldr	r4, [pc, #208]	; (8007dac <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007cda:	68a4      	ldr	r4, [r4, #8]
 8007cdc:	f014 0401 	ands.w	r4, r4, #1
 8007ce0:	d000      	beq.n	8007ce4 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8007ce2:	2401      	movs	r4, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007ce4:	4320      	orrs	r0, r4
 8007ce6:	bf0c      	ite	eq
 8007ce8:	2001      	moveq	r0, #1
 8007cea:	2000      	movne	r0, #0
 8007cec:	2800      	cmp	r0, #0
 8007cee:	d054      	beq.n	8007d9a <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007cf0:	6890      	ldr	r0, [r2, #8]
 8007cf2:	f420 6071 	bic.w	r0, r0, #3856	; 0xf10
 8007cf6:	f020 000f 	bic.w	r0, r0, #15
 8007cfa:	680c      	ldr	r4, [r1, #0]
 8007cfc:	6889      	ldr	r1, [r1, #8]
 8007cfe:	4321      	orrs	r1, r4
 8007d00:	4308      	orrs	r0, r1
 8007d02:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d04:	2000      	movs	r0, #0
 8007d06:	e041      	b.n	8007d8c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007d08:	6891      	ldr	r1, [r2, #8]
 8007d0a:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8007d0e:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007d10:	6819      	ldr	r1, [r3, #0]
 8007d12:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8007d16:	d01a      	beq.n	8007d4e <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8007d18:	4824      	ldr	r0, [pc, #144]	; (8007dac <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007d1a:	4281      	cmp	r1, r0
 8007d1c:	d017      	beq.n	8007d4e <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8007d1e:	4922      	ldr	r1, [pc, #136]	; (8007da8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8007d20:	6888      	ldr	r0, [r1, #8]
 8007d22:	f010 0001 	ands.w	r0, r0, #1
 8007d26:	d000      	beq.n	8007d2a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8007d28:	2001      	movs	r0, #1
 8007d2a:	4922      	ldr	r1, [pc, #136]	; (8007db4 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8007d2c:	6889      	ldr	r1, [r1, #8]
 8007d2e:	f011 0101 	ands.w	r1, r1, #1
 8007d32:	d000      	beq.n	8007d36 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8007d34:	2101      	movs	r1, #1
 8007d36:	4301      	orrs	r1, r0
 8007d38:	481f      	ldr	r0, [pc, #124]	; (8007db8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8007d3a:	6880      	ldr	r0, [r0, #8]
 8007d3c:	f010 0001 	ands.w	r0, r0, #1
 8007d40:	d000      	beq.n	8007d44 <HAL_ADCEx_MultiModeConfigChannel+0x158>
 8007d42:	2001      	movs	r0, #1
 8007d44:	4301      	orrs	r1, r0
 8007d46:	bf0c      	ite	eq
 8007d48:	2101      	moveq	r1, #1
 8007d4a:	2100      	movne	r1, #0
 8007d4c:	e010      	b.n	8007d70 <HAL_ADCEx_MultiModeConfigChannel+0x184>
 8007d4e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8007d52:	6889      	ldr	r1, [r1, #8]
 8007d54:	f011 0101 	ands.w	r1, r1, #1
 8007d58:	d000      	beq.n	8007d5c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	4813      	ldr	r0, [pc, #76]	; (8007dac <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007d5e:	6880      	ldr	r0, [r0, #8]
 8007d60:	f010 0001 	ands.w	r0, r0, #1
 8007d64:	d000      	beq.n	8007d68 <HAL_ADCEx_MultiModeConfigChannel+0x17c>
 8007d66:	2001      	movs	r0, #1
 8007d68:	4301      	orrs	r1, r0
 8007d6a:	bf0c      	ite	eq
 8007d6c:	2101      	moveq	r1, #1
 8007d6e:	2100      	movne	r1, #0
 8007d70:	b1a9      	cbz	r1, 8007d9e <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007d72:	6891      	ldr	r1, [r2, #8]
 8007d74:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8007d78:	f021 010f 	bic.w	r1, r1, #15
 8007d7c:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d7e:	2000      	movs	r0, #0
 8007d80:	e004      	b.n	8007d8c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007d82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d84:	f042 0220 	orr.w	r2, r2, #32
 8007d88:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007d8a:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8007d92:	b01d      	add	sp, #116	; 0x74
 8007d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d98:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	e7f6      	b.n	8007d8c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
 8007d9e:	2000      	movs	r0, #0
 8007da0:	e7f4      	b.n	8007d8c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  __HAL_LOCK(hadc);
 8007da2:	2002      	movs	r0, #2
}
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	50000400 	.word	0x50000400
 8007dac:	50000100 	.word	0x50000100
 8007db0:	50000700 	.word	0x50000700
 8007db4:	50000500 	.word	0x50000500
 8007db8:	50000600 	.word	0x50000600
 8007dbc:	50000300 	.word	0x50000300

08007dc0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007dc0:	4a07      	ldr	r2, [pc, #28]	; (8007de0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8007dc2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007dc4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007dc8:	041b      	lsls	r3, r3, #16
 8007dca:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007dcc:	0200      	lsls	r0, r0, #8
 8007dce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007dd2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8007dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8007ddc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007dde:	4770      	bx	lr
 8007de0:	e000ed00 	.word	0xe000ed00

08007de4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007de4:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007de6:	4b19      	ldr	r3, [pc, #100]	; (8007e4c <HAL_NVIC_SetPriority+0x68>)
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007dee:	f1c3 0c07 	rsb	ip, r3, #7
 8007df2:	f1bc 0f04 	cmp.w	ip, #4
 8007df6:	bf28      	it	cs
 8007df8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007dfc:	f103 0e04 	add.w	lr, r3, #4
 8007e00:	f1be 0f06 	cmp.w	lr, #6
 8007e04:	d918      	bls.n	8007e38 <HAL_NVIC_SetPriority+0x54>
 8007e06:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e08:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8007e0c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8007e10:	ea21 010c 	bic.w	r1, r1, ip
 8007e14:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007e16:	fa0e f303 	lsl.w	r3, lr, r3
 8007e1a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e1e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8007e20:	2800      	cmp	r0, #0
 8007e22:	db0b      	blt.n	8007e3c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e24:	0109      	lsls	r1, r1, #4
 8007e26:	b2c9      	uxtb	r1, r1
 8007e28:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8007e2c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8007e30:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007e34:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e38:	2300      	movs	r3, #0
 8007e3a:	e7e5      	b.n	8007e08 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e3c:	f000 000f 	and.w	r0, r0, #15
 8007e40:	0109      	lsls	r1, r1, #4
 8007e42:	b2c9      	uxtb	r1, r1
 8007e44:	4b02      	ldr	r3, [pc, #8]	; (8007e50 <HAL_NVIC_SetPriority+0x6c>)
 8007e46:	5419      	strb	r1, [r3, r0]
 8007e48:	e7f4      	b.n	8007e34 <HAL_NVIC_SetPriority+0x50>
 8007e4a:	bf00      	nop
 8007e4c:	e000ed00 	.word	0xe000ed00
 8007e50:	e000ed14 	.word	0xe000ed14

08007e54 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007e54:	2800      	cmp	r0, #0
 8007e56:	db07      	blt.n	8007e68 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e58:	f000 021f 	and.w	r2, r0, #31
 8007e5c:	0940      	lsrs	r0, r0, #5
 8007e5e:	2301      	movs	r3, #1
 8007e60:	4093      	lsls	r3, r2
 8007e62:	4a02      	ldr	r2, [pc, #8]	; (8007e6c <HAL_NVIC_EnableIRQ+0x18>)
 8007e64:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	e000e100 	.word	0xe000e100

08007e70 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007e70:	3801      	subs	r0, #1
 8007e72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007e76:	d20b      	bcs.n	8007e90 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007e78:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e7c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e7e:	4a05      	ldr	r2, [pc, #20]	; (8007e94 <HAL_SYSTICK_Config+0x24>)
 8007e80:	21f0      	movs	r1, #240	; 0xf0
 8007e82:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007e86:	2000      	movs	r0, #0
 8007e88:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007e8a:	2207      	movs	r2, #7
 8007e8c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007e8e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8007e90:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8007e92:	4770      	bx	lr
 8007e94:	e000ed00 	.word	0xe000ed00

08007e98 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d038      	beq.n	8007f0e <HAL_CRC_Init+0x76>
{
 8007e9c:	b510      	push	{r4, lr}
 8007e9e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007ea0:	7f43      	ldrb	r3, [r0, #29]
 8007ea2:	b31b      	cbz	r3, 8007eec <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007ea8:	7923      	ldrb	r3, [r4, #4]
 8007eaa:	bb1b      	cbnz	r3, 8007ef4 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	4a19      	ldr	r2, [pc, #100]	; (8007f14 <HAL_CRC_Init+0x7c>)
 8007eb0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007eb2:	6822      	ldr	r2, [r4, #0]
 8007eb4:	6893      	ldr	r3, [r2, #8]
 8007eb6:	f023 0318 	bic.w	r3, r3, #24
 8007eba:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007ebc:	7963      	ldrb	r3, [r4, #5]
 8007ebe:	bb13      	cbnz	r3, 8007f06 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007ec0:	6823      	ldr	r3, [r4, #0]
 8007ec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ec6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007ec8:	6822      	ldr	r2, [r4, #0]
 8007eca:	6893      	ldr	r3, [r2, #8]
 8007ecc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007ed0:	6961      	ldr	r1, [r4, #20]
 8007ed2:	430b      	orrs	r3, r1
 8007ed4:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007ed6:	6822      	ldr	r2, [r4, #0]
 8007ed8:	6893      	ldr	r3, [r2, #8]
 8007eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ede:	69a1      	ldr	r1, [r4, #24]
 8007ee0:	430b      	orrs	r3, r1
 8007ee2:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8007ee8:	2000      	movs	r0, #0
}
 8007eea:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8007eec:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8007eee:	f7f9 fbeb 	bl	80016c8 <HAL_CRC_MspInit>
 8007ef2:	e7d7      	b.n	8007ea4 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007ef4:	68e2      	ldr	r2, [r4, #12]
 8007ef6:	68a1      	ldr	r1, [r4, #8]
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f000 f80d 	bl	8007f18 <HAL_CRCEx_Polynomial_Set>
 8007efe:	2800      	cmp	r0, #0
 8007f00:	d0dc      	beq.n	8007ebc <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8007f02:	2001      	movs	r0, #1
 8007f04:	e7f1      	b.n	8007eea <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	6922      	ldr	r2, [r4, #16]
 8007f0a:	611a      	str	r2, [r3, #16]
 8007f0c:	e7dc      	b.n	8007ec8 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8007f0e:	2001      	movs	r0, #1
}
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	04c11db7 	.word	0x04c11db7

08007f18 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007f18:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007f1a:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007f1c:	461c      	mov	r4, r3
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	b134      	cbz	r4, 8007f30 <HAL_CRCEx_Polynomial_Set+0x18>
 8007f22:	f003 0c1f 	and.w	ip, r3, #31
 8007f26:	fa21 fc0c 	lsr.w	ip, r1, ip
 8007f2a:	f01c 0f01 	tst.w	ip, #1
 8007f2e:	d0f5      	beq.n	8007f1c <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8007f30:	2a18      	cmp	r2, #24
 8007f32:	d822      	bhi.n	8007f7a <HAL_CRCEx_Polynomial_Set+0x62>
 8007f34:	e8df f002 	tbb	[pc, r2]
 8007f38:	2121210f 	.word	0x2121210f
 8007f3c:	21212121 	.word	0x21212121
 8007f40:	2121211d 	.word	0x2121211d
 8007f44:	21212121 	.word	0x21212121
 8007f48:	21212119 	.word	0x21212119
 8007f4c:	21212121 	.word	0x21212121
 8007f50:	0d          	.byte	0x0d
 8007f51:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8007f52:	2b06      	cmp	r3, #6
 8007f54:	d815      	bhi.n	8007f82 <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007f56:	6803      	ldr	r3, [r0, #0]
 8007f58:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007f5a:	6801      	ldr	r1, [r0, #0]
 8007f5c:	688b      	ldr	r3, [r1, #8]
 8007f5e:	f023 0318 	bic.w	r3, r3, #24
 8007f62:	431a      	orrs	r2, r3
 8007f64:	608a      	str	r2, [r1, #8]
 8007f66:	2000      	movs	r0, #0
 8007f68:	e008      	b.n	8007f7c <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 8007f6a:	2b07      	cmp	r3, #7
 8007f6c:	d9f3      	bls.n	8007f56 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8007f6e:	2001      	movs	r0, #1
 8007f70:	e004      	b.n	8007f7c <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 8007f72:	2b0f      	cmp	r3, #15
 8007f74:	d9ef      	bls.n	8007f56 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8007f76:	2001      	movs	r0, #1
 8007f78:	e000      	b.n	8007f7c <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 8007f7a:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 8007f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f80:	4770      	bx	lr
        status =   HAL_ERROR;
 8007f82:	2001      	movs	r0, #1
 8007f84:	e7fa      	b.n	8007f7c <HAL_CRCEx_Polynomial_Set+0x64>

08007f86 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8007f86:	b170      	cbz	r0, 8007fa6 <HAL_DAC_Init+0x20>
{
 8007f88:	b510      	push	{r4, lr}
 8007f8a:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007f8c:	7903      	ldrb	r3, [r0, #4]
 8007f8e:	b133      	cbz	r3, 8007f9e <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007f90:	2302      	movs	r3, #2
 8007f92:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007f94:	2000      	movs	r0, #0
 8007f96:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8007f9c:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8007f9e:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8007fa0:	f7f9 fc04 	bl	80017ac <HAL_DAC_MspInit>
 8007fa4:	e7f4      	b.n	8007f90 <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8007fa6:	2001      	movs	r0, #1
}
 8007fa8:	4770      	bx	lr
	...

08007fac <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007fac:	7943      	ldrb	r3, [r0, #5]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	f000 80f4 	beq.w	800819c <HAL_DAC_ConfigChannel+0x1f0>
{
 8007fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb8:	4604      	mov	r4, r0
 8007fba:	460e      	mov	r6, r1
 8007fbc:	4615      	mov	r5, r2
  __HAL_LOCK(hdac);
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007fc6:	688b      	ldr	r3, [r1, #8]
 8007fc8:	2b04      	cmp	r3, #4
 8007fca:	d017      	beq.n	8007ffc <HAL_DAC_ConfigChannel+0x50>
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007fcc:	69f3      	ldr	r3, [r6, #28]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d05e      	beq.n	8008090 <HAL_DAC_ConfigChannel+0xe4>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007fd6:	f005 0510 	and.w	r5, r5, #16
 8007fda:	2307      	movs	r3, #7
 8007fdc:	40ab      	lsls	r3, r5
 8007fde:	ea27 0703 	bic.w	r7, r7, r3
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007fe2:	69b3      	ldr	r3, [r6, #24]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d060      	beq.n	80080aa <HAL_DAC_ConfigChannel+0xfe>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	f000 80bd 	beq.w	8008168 <HAL_DAC_ConfigChannel+0x1bc>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007fee:	6973      	ldr	r3, [r6, #20]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f040 80bc 	bne.w	800816e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007ff6:	f04f 0801 	mov.w	r8, #1
 8007ffa:	e058      	b.n	80080ae <HAL_DAC_ConfigChannel+0x102>
    tickstart = HAL_GetTick();
 8007ffc:	f7ff f8aa 	bl	8007154 <HAL_GetTick>
 8008000:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8008002:	b17d      	cbz	r5, 8008024 <HAL_DAC_ConfigChannel+0x78>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008008:	2b00      	cmp	r3, #0
 800800a:	da3a      	bge.n	8008082 <HAL_DAC_ConfigChannel+0xd6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800800c:	f7ff f8a2 	bl	8007154 <HAL_GetTick>
 8008010:	1bc0      	subs	r0, r0, r7
 8008012:	2801      	cmp	r0, #1
 8008014:	d9f6      	bls.n	8008004 <HAL_DAC_ConfigChannel+0x58>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008016:	6923      	ldr	r3, [r4, #16]
 8008018:	f043 0308 	orr.w	r3, r3, #8
 800801c:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800801e:	2003      	movs	r0, #3
 8008020:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8008022:	e09f      	b.n	8008164 <HAL_DAC_ConfigChannel+0x1b8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008024:	6823      	ldr	r3, [r4, #0]
 8008026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008028:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800802c:	d00b      	beq.n	8008046 <HAL_DAC_ConfigChannel+0x9a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800802e:	f7ff f891 	bl	8007154 <HAL_GetTick>
 8008032:	1bc0      	subs	r0, r0, r7
 8008034:	2801      	cmp	r0, #1
 8008036:	d9f5      	bls.n	8008024 <HAL_DAC_ConfigChannel+0x78>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008038:	6923      	ldr	r3, [r4, #16]
 800803a:	f043 0308 	orr.w	r3, r3, #8
 800803e:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008040:	2003      	movs	r0, #3
 8008042:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8008044:	e08e      	b.n	8008164 <HAL_DAC_ConfigChannel+0x1b8>
      HAL_Delay(1);
 8008046:	2001      	movs	r0, #1
 8008048:	f7ff f88a 	bl	8007160 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800804c:	6823      	ldr	r3, [r4, #0]
 800804e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008050:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008052:	6820      	ldr	r0, [r4, #0]
 8008054:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8008056:	f005 0110 	and.w	r1, r5, #16
 800805a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800805e:	408b      	lsls	r3, r1
 8008060:	ea22 0203 	bic.w	r2, r2, r3
 8008064:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8008066:	408b      	lsls	r3, r1
 8008068:	431a      	orrs	r2, r3
 800806a:	6482      	str	r2, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800806c:	6820      	ldr	r0, [r4, #0]
 800806e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008070:	22ff      	movs	r2, #255	; 0xff
 8008072:	408a      	lsls	r2, r1
 8008074:	ea23 0302 	bic.w	r3, r3, r2
 8008078:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800807a:	408a      	lsls	r2, r1
 800807c:	4313      	orrs	r3, r2
 800807e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008080:	e7a4      	b.n	8007fcc <HAL_DAC_ConfigChannel+0x20>
      HAL_Delay(1U);
 8008082:	2001      	movs	r0, #1
 8008084:	f7ff f86c 	bl	8007160 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008088:	6823      	ldr	r3, [r4, #0]
 800808a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800808c:	645a      	str	r2, [r3, #68]	; 0x44
 800808e:	e7e0      	b.n	8008052 <HAL_DAC_ConfigChannel+0xa6>
    tmpreg1 = hdac->Instance->CCR;
 8008090:	6821      	ldr	r1, [r4, #0]
 8008092:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008094:	f005 0010 	and.w	r0, r5, #16
 8008098:	231f      	movs	r3, #31
 800809a:	4083      	lsls	r3, r0
 800809c:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80080a0:	6a33      	ldr	r3, [r6, #32]
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80080a2:	4083      	lsls	r3, r0
 80080a4:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 80080a6:	638b      	str	r3, [r1, #56]	; 0x38
 80080a8:	e793      	b.n	8007fd2 <HAL_DAC_ConfigChannel+0x26>
    connectOnChip = 0x00000000UL;
 80080aa:	f04f 0800 	mov.w	r8, #0
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80080ae:	68b3      	ldr	r3, [r6, #8]
 80080b0:	6972      	ldr	r2, [r6, #20]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	ea43 0308 	orr.w	r3, r3, r8
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80080b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080bc:	40aa      	lsls	r2, r5
 80080be:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80080c2:	7932      	ldrb	r2, [r6, #4]
 80080c4:	2a01      	cmp	r2, #1
 80080c6:	d055      	beq.n	8008174 <HAL_DAC_ConfigChannel+0x1c8>
 80080c8:	f04f 0800 	mov.w	r8, #0
 80080cc:	ea48 0303 	orr.w	r3, r8, r3
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80080d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080d4:	40aa      	lsls	r2, r5
 80080d6:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80080da:	7972      	ldrb	r2, [r6, #5]
 80080dc:	2a01      	cmp	r2, #1
 80080de:	d04c      	beq.n	800817a <HAL_DAC_ConfigChannel+0x1ce>
 80080e0:	f04f 0800 	mov.w	r8, #0
 80080e4:	ea48 0803 	orr.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80080e8:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80080ec:	6833      	ldr	r3, [r6, #0]
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d046      	beq.n	8008180 <HAL_DAC_ConfigChannel+0x1d4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80080f2:	431f      	orrs	r7, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80080f4:	fa08 f805 	lsl.w	r8, r8, r5
 80080f8:	ea48 0707 	orr.w	r7, r8, r7
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8008100:	6821      	ldr	r1, [r4, #0]
 8008102:	680b      	ldr	r3, [r1, #0]
 8008104:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008108:	40aa      	lsls	r2, r5
 800810a:	ea23 0302 	bic.w	r3, r3, r2
 800810e:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008110:	6821      	ldr	r1, [r4, #0]
 8008112:	680b      	ldr	r3, [r1, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008114:	f640 72fe 	movw	r2, #4094	; 0xffe
 8008118:	40aa      	lsls	r2, r5
 800811a:	ea23 0202 	bic.w	r2, r3, r2
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800811e:	68f3      	ldr	r3, [r6, #12]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008120:	40ab      	lsls	r3, r5
 8008122:	4313      	orrs	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008124:	600b      	str	r3, [r1, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008126:	6821      	ldr	r1, [r4, #0]
 8008128:	680b      	ldr	r3, [r1, #0]
 800812a:	22c0      	movs	r2, #192	; 0xc0
 800812c:	40aa      	lsls	r2, r5
 800812e:	ea23 0302 	bic.w	r3, r3, r2
 8008132:	600b      	str	r3, [r1, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8008134:	68f2      	ldr	r2, [r6, #12]
 8008136:	f3c2 0383 	ubfx	r3, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800813a:	6932      	ldr	r2, [r6, #16]
 800813c:	0892      	lsrs	r2, r2, #2
 800813e:	0212      	lsls	r2, r2, #8
 8008140:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8008144:	431a      	orrs	r2, r3
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8008146:	6820      	ldr	r0, [r4, #0]
 8008148:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800814a:	f640 710f 	movw	r1, #3855	; 0xf0f
 800814e:	40a9      	lsls	r1, r5
 8008150:	ea23 0301 	bic.w	r3, r3, r1
 8008154:	fa02 f505 	lsl.w	r5, r2, r5
 8008158:	431d      	orrs	r5, r3
 800815a:	6605      	str	r5, [r0, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800815c:	2301      	movs	r3, #1
 800815e:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008160:	2000      	movs	r0, #0
 8008162:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8008164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8008168:	f04f 0801 	mov.w	r8, #1
 800816c:	e79f      	b.n	80080ae <HAL_DAC_ConfigChannel+0x102>
      connectOnChip = 0x00000000UL;
 800816e:	f04f 0800 	mov.w	r8, #0
 8008172:	e79c      	b.n	80080ae <HAL_DAC_ConfigChannel+0x102>
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8008174:	f44f 7880 	mov.w	r8, #256	; 0x100
 8008178:	e7a8      	b.n	80080cc <HAL_DAC_ConfigChannel+0x120>
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800817a:	f44f 7800 	mov.w	r8, #512	; 0x200
 800817e:	e7b1      	b.n	80080e4 <HAL_DAC_ConfigChannel+0x138>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8008180:	f002 fd3a 	bl	800abf8 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8008184:	4b06      	ldr	r3, [pc, #24]	; (80081a0 <HAL_DAC_ConfigChannel+0x1f4>)
 8008186:	4298      	cmp	r0, r3
 8008188:	d902      	bls.n	8008190 <HAL_DAC_ConfigChannel+0x1e4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800818a:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800818e:	e7b1      	b.n	80080f4 <HAL_DAC_ConfigChannel+0x148>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8008190:	4b04      	ldr	r3, [pc, #16]	; (80081a4 <HAL_DAC_ConfigChannel+0x1f8>)
 8008192:	4298      	cmp	r0, r3
 8008194:	d9ae      	bls.n	80080f4 <HAL_DAC_ConfigChannel+0x148>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8008196:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800819a:	e7ab      	b.n	80080f4 <HAL_DAC_ConfigChannel+0x148>
  __HAL_LOCK(hdac);
 800819c:	2002      	movs	r0, #2
}
 800819e:	4770      	bx	lr
 80081a0:	09896800 	.word	0x09896800
 80081a4:	04c4b400 	.word	0x04c4b400

080081a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081a8:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80081aa:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80081ac:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80081ae:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80081b0:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80081b2:	b114      	cbz	r4, 80081ba <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80081b4:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80081b6:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80081b8:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80081ba:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80081bc:	f004 0c1f 	and.w	ip, r4, #31
 80081c0:	2401      	movs	r4, #1
 80081c2:	fa04 f40c 	lsl.w	r4, r4, ip
 80081c6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80081c8:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80081ca:	6804      	ldr	r4, [r0, #0]
 80081cc:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081ce:	6883      	ldr	r3, [r0, #8]
 80081d0:	2b10      	cmp	r3, #16
 80081d2:	d005      	beq.n	80081e0 <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80081d4:	6803      	ldr	r3, [r0, #0]
 80081d6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80081d8:	6803      	ldr	r3, [r0, #0]
 80081da:	60da      	str	r2, [r3, #12]
  }
}
 80081dc:	bc30      	pop	{r4, r5}
 80081de:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80081e0:	6803      	ldr	r3, [r0, #0]
 80081e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80081e4:	6803      	ldr	r3, [r0, #0]
 80081e6:	60d9      	str	r1, [r3, #12]
 80081e8:	e7f8      	b.n	80081dc <DMA_SetConfig+0x34>
	...

080081ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80081ec:	6803      	ldr	r3, [r0, #0]
 80081ee:	4a0c      	ldr	r2, [pc, #48]	; (8008220 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d813      	bhi.n	800821c <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80081f4:	490b      	ldr	r1, [pc, #44]	; (8008224 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	3b08      	subs	r3, #8
 80081fa:	4a0b      	ldr	r2, [pc, #44]	; (8008228 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 80081fc:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008200:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008202:	f022 0203 	bic.w	r2, r2, #3
 8008206:	440a      	add	r2, r1
 8008208:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800820a:	4a08      	ldr	r2, [pc, #32]	; (800822c <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 800820c:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800820e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8008212:	2201      	movs	r2, #1
 8008214:	fa02 f303 	lsl.w	r3, r2, r3
 8008218:	6503      	str	r3, [r0, #80]	; 0x50
}
 800821a:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800821c:	4904      	ldr	r1, [pc, #16]	; (8008230 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 800821e:	e7ea      	b.n	80081f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 8008220:	40020407 	.word	0x40020407
 8008224:	40020800 	.word	0x40020800
 8008228:	cccccccd 	.word	0xcccccccd
 800822c:	40020880 	.word	0x40020880
 8008230:	40020820 	.word	0x40020820

08008234 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008234:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008236:	4a07      	ldr	r2, [pc, #28]	; (8008254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8008238:	441a      	add	r2, r3
 800823a:	0092      	lsls	r2, r2, #2
 800823c:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800823e:	4a06      	ldr	r2, [pc, #24]	; (8008258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8008240:	6582      	str	r2, [r0, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008242:	3b01      	subs	r3, #1
 8008244:	f003 031f 	and.w	r3, r3, #31
 8008248:	2201      	movs	r2, #1
 800824a:	fa02 f303 	lsl.w	r3, r2, r3
 800824e:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	1000823f 	.word	0x1000823f
 8008258:	40020940 	.word	0x40020940

0800825c <HAL_DMA_Init>:
  if (hdma == NULL)
 800825c:	2800      	cmp	r0, #0
 800825e:	d05b      	beq.n	8008318 <HAL_DMA_Init+0xbc>
{
 8008260:	b510      	push	{r4, lr}
 8008262:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008264:	6801      	ldr	r1, [r0, #0]
 8008266:	4b2d      	ldr	r3, [pc, #180]	; (800831c <HAL_DMA_Init+0xc0>)
 8008268:	4299      	cmp	r1, r3
 800826a:	d83d      	bhi.n	80082e8 <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800826c:	4b2c      	ldr	r3, [pc, #176]	; (8008320 <HAL_DMA_Init+0xc4>)
 800826e:	440b      	add	r3, r1
 8008270:	4a2c      	ldr	r2, [pc, #176]	; (8008324 <HAL_DMA_Init+0xc8>)
 8008272:	fba2 2303 	umull	r2, r3, r2, r3
 8008276:	091b      	lsrs	r3, r3, #4
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800827c:	4b2a      	ldr	r3, [pc, #168]	; (8008328 <HAL_DMA_Init+0xcc>)
 800827e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8008280:	2302      	movs	r3, #2
 8008282:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8008286:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008288:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800828c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8008290:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008292:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8008294:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008296:	6920      	ldr	r0, [r4, #16]
 8008298:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800829a:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800829c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800829e:	69a0      	ldr	r0, [r4, #24]
 80082a0:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80082a2:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082a4:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80082a6:	6a20      	ldr	r0, [r4, #32]
 80082a8:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80082aa:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 80082ac:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80082ae:	4620      	mov	r0, r4
 80082b0:	f7ff ff9c 	bl	80081ec <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80082b4:	68a3      	ldr	r3, [r4, #8]
 80082b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082ba:	d020      	beq.n	80082fe <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80082bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80082be:	7922      	ldrb	r2, [r4, #4]
 80082c0:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80082c4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80082c6:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80082c8:	6863      	ldr	r3, [r4, #4]
 80082ca:	3b01      	subs	r3, #1
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	d919      	bls.n	8008304 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80082d4:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80082d6:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082d8:	2000      	movs	r0, #0
 80082da:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80082dc:	2301      	movs	r3, #1
 80082de:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 80082e2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80082e6:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80082e8:	4b10      	ldr	r3, [pc, #64]	; (800832c <HAL_DMA_Init+0xd0>)
 80082ea:	440b      	add	r3, r1
 80082ec:	4a0d      	ldr	r2, [pc, #52]	; (8008324 <HAL_DMA_Init+0xc8>)
 80082ee:	fba2 2303 	umull	r2, r3, r2, r3
 80082f2:	091b      	lsrs	r3, r3, #4
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80082f8:	4b0d      	ldr	r3, [pc, #52]	; (8008330 <HAL_DMA_Init+0xd4>)
 80082fa:	6403      	str	r3, [r0, #64]	; 0x40
 80082fc:	e7c0      	b.n	8008280 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80082fe:	2300      	movs	r3, #0
 8008300:	6063      	str	r3, [r4, #4]
 8008302:	e7db      	b.n	80082bc <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008304:	4620      	mov	r0, r4
 8008306:	f7ff ff95 	bl	8008234 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800830a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800830c:	2200      	movs	r2, #0
 800830e:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008310:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008312:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008314:	605a      	str	r2, [r3, #4]
 8008316:	e7df      	b.n	80082d8 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8008318:	2001      	movs	r0, #1
}
 800831a:	4770      	bx	lr
 800831c:	40020407 	.word	0x40020407
 8008320:	bffdfff8 	.word	0xbffdfff8
 8008324:	cccccccd 	.word	0xcccccccd
 8008328:	40020000 	.word	0x40020000
 800832c:	bffdfbf8 	.word	0xbffdfbf8
 8008330:	40020400 	.word	0x40020400

08008334 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8008334:	2800      	cmp	r0, #0
 8008336:	d04b      	beq.n	80083d0 <HAL_DMA_DeInit+0x9c>
{
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800833c:	6802      	ldr	r2, [r0, #0]
 800833e:	6813      	ldr	r3, [r2, #0]
 8008340:	f023 0301 	bic.w	r3, r3, #1
 8008344:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008346:	6802      	ldr	r2, [r0, #0]
 8008348:	4b22      	ldr	r3, [pc, #136]	; (80083d4 <HAL_DMA_DeInit+0xa0>)
 800834a:	429a      	cmp	r2, r3
 800834c:	d82c      	bhi.n	80083a8 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800834e:	4b22      	ldr	r3, [pc, #136]	; (80083d8 <HAL_DMA_DeInit+0xa4>)
 8008350:	4413      	add	r3, r2
 8008352:	4922      	ldr	r1, [pc, #136]	; (80083dc <HAL_DMA_DeInit+0xa8>)
 8008354:	fba1 1303 	umull	r1, r3, r1, r3
 8008358:	091b      	lsrs	r3, r3, #4
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800835e:	4b20      	ldr	r3, [pc, #128]	; (80083e0 <HAL_DMA_DeInit+0xac>)
 8008360:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR  = 0;
 8008362:	2500      	movs	r5, #0
 8008364:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008366:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008368:	f003 021f 	and.w	r2, r3, #31
 800836c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800836e:	2301      	movs	r3, #1
 8008370:	4093      	lsls	r3, r2
 8008372:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008374:	4620      	mov	r0, r4
 8008376:	f7ff ff39 	bl	80081ec <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0;
 800837a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800837c:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800837e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008380:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008382:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008384:	6863      	ldr	r3, [r4, #4]
 8008386:	3b01      	subs	r3, #1
 8008388:	2b03      	cmp	r3, #3
 800838a:	d918      	bls.n	80083be <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 800838c:	2000      	movs	r0, #0
 800838e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8008390:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8008392:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8008394:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8008396:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8008398:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800839a:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800839c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800839e:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80083a2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80083a6:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80083a8:	4b0e      	ldr	r3, [pc, #56]	; (80083e4 <HAL_DMA_DeInit+0xb0>)
 80083aa:	4413      	add	r3, r2
 80083ac:	490b      	ldr	r1, [pc, #44]	; (80083dc <HAL_DMA_DeInit+0xa8>)
 80083ae:	fba1 1303 	umull	r1, r3, r1, r3
 80083b2:	091b      	lsrs	r3, r3, #4
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80083b8:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <HAL_DMA_DeInit+0xb4>)
 80083ba:	6403      	str	r3, [r0, #64]	; 0x40
 80083bc:	e7d1      	b.n	8008362 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80083be:	4620      	mov	r0, r4
 80083c0:	f7ff ff38 	bl	8008234 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80083c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80083c6:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80083c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083ca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80083cc:	605a      	str	r2, [r3, #4]
 80083ce:	e7dd      	b.n	800838c <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 80083d0:	2001      	movs	r0, #1
}
 80083d2:	4770      	bx	lr
 80083d4:	40020407 	.word	0x40020407
 80083d8:	bffdfff8 	.word	0xbffdfff8
 80083dc:	cccccccd 	.word	0xcccccccd
 80083e0:	40020000 	.word	0x40020000
 80083e4:	bffdfbf8 	.word	0xbffdfbf8
 80083e8:	40020400 	.word	0x40020400

080083ec <HAL_DMA_Start_IT>:
{
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80083f0:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80083f4:	2801      	cmp	r0, #1
 80083f6:	d041      	beq.n	800847c <HAL_DMA_Start_IT+0x90>
 80083f8:	2001      	movs	r0, #1
 80083fa:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80083fe:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8008402:	b2c0      	uxtb	r0, r0
 8008404:	2801      	cmp	r0, #1
 8008406:	d004      	beq.n	8008412 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8008408:	2300      	movs	r3, #0
 800840a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 800840e:	2002      	movs	r0, #2
}
 8008410:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8008412:	2002      	movs	r0, #2
 8008414:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008418:	2000      	movs	r0, #0
 800841a:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800841c:	6825      	ldr	r5, [r4, #0]
 800841e:	6828      	ldr	r0, [r5, #0]
 8008420:	f020 0001 	bic.w	r0, r0, #1
 8008424:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008426:	4620      	mov	r0, r4
 8008428:	f7ff febe 	bl	80081a8 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800842c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800842e:	b1d3      	cbz	r3, 8008466 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008430:	6822      	ldr	r2, [r4, #0]
 8008432:	6813      	ldr	r3, [r2, #0]
 8008434:	f043 030e 	orr.w	r3, r3, #14
 8008438:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800843a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8008442:	d003      	beq.n	800844c <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800844a:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800844c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800844e:	b11b      	cbz	r3, 8008458 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008456:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8008458:	6822      	ldr	r2, [r4, #0]
 800845a:	6813      	ldr	r3, [r2, #0]
 800845c:	f043 0301 	orr.w	r3, r3, #1
 8008460:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008462:	2000      	movs	r0, #0
 8008464:	e7d4      	b.n	8008410 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008466:	6822      	ldr	r2, [r4, #0]
 8008468:	6813      	ldr	r3, [r2, #0]
 800846a:	f023 0304 	bic.w	r3, r3, #4
 800846e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008470:	6822      	ldr	r2, [r4, #0]
 8008472:	6813      	ldr	r3, [r2, #0]
 8008474:	f043 030a 	orr.w	r3, r3, #10
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	e7de      	b.n	800843a <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 800847c:	2002      	movs	r0, #2
 800847e:	e7c7      	b.n	8008410 <HAL_DMA_Start_IT+0x24>

08008480 <HAL_DMA_Abort_IT>:
{
 8008480:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008482:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b02      	cmp	r3, #2
 800848a:	d009      	beq.n	80084a0 <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800848c:	2304      	movs	r3, #4
 800848e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8008490:	2301      	movs	r3, #1
 8008492:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8008496:	2200      	movs	r2, #0
 8008498:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    status = HAL_ERROR;
 800849c:	4618      	mov	r0, r3
}
 800849e:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084a0:	6802      	ldr	r2, [r0, #0]
 80084a2:	6813      	ldr	r3, [r2, #0]
 80084a4:	f023 030e 	bic.w	r3, r3, #14
 80084a8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80084aa:	6802      	ldr	r2, [r0, #0]
 80084ac:	6813      	ldr	r3, [r2, #0]
 80084ae:	f023 0301 	bic.w	r3, r3, #1
 80084b2:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80084b4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80084b6:	6813      	ldr	r3, [r2, #0]
 80084b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084bc:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80084be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80084c0:	f003 021f 	and.w	r2, r3, #31
 80084c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80084c6:	2301      	movs	r3, #1
 80084c8:	4093      	lsls	r3, r2
 80084ca:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084cc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80084ce:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80084d0:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80084d2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80084d4:	b133      	cbz	r3, 80084e4 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084dc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084de:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80084e0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80084e2:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80084e4:	2301      	movs	r3, #1
 80084e6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80084ea:	2300      	movs	r3, #0
 80084ec:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80084f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80084f2:	b113      	cbz	r3, 80084fa <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 80084f4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80084f6:	2000      	movs	r0, #0
 80084f8:	e7d1      	b.n	800849e <HAL_DMA_Abort_IT+0x1e>
 80084fa:	2000      	movs	r0, #0
 80084fc:	e7cf      	b.n	800849e <HAL_DMA_Abort_IT+0x1e>

080084fe <HAL_DMA_IRQHandler>:
{
 80084fe:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008500:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008502:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8008504:	6804      	ldr	r4, [r0, #0]
 8008506:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008508:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800850a:	f003 031f 	and.w	r3, r3, #31
 800850e:	2204      	movs	r2, #4
 8008510:	409a      	lsls	r2, r3
 8008512:	420a      	tst	r2, r1
 8008514:	d015      	beq.n	8008542 <HAL_DMA_IRQHandler+0x44>
 8008516:	f015 0f04 	tst.w	r5, #4
 800851a:	d012      	beq.n	8008542 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	f013 0f20 	tst.w	r3, #32
 8008522:	d103      	bne.n	800852c <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008524:	6823      	ldr	r3, [r4, #0]
 8008526:	f023 0304 	bic.w	r3, r3, #4
 800852a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800852c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800852e:	f003 021f 	and.w	r2, r3, #31
 8008532:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008534:	2304      	movs	r3, #4
 8008536:	4093      	lsls	r3, r2
 8008538:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800853a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800853c:	b103      	cbz	r3, 8008540 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 800853e:	4798      	blx	r3
}
 8008540:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008542:	2202      	movs	r2, #2
 8008544:	409a      	lsls	r2, r3
 8008546:	420a      	tst	r2, r1
 8008548:	d01c      	beq.n	8008584 <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 800854a:	f015 0f02 	tst.w	r5, #2
 800854e:	d019      	beq.n	8008584 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	f013 0f20 	tst.w	r3, #32
 8008556:	d106      	bne.n	8008566 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008558:	6823      	ldr	r3, [r4, #0]
 800855a:	f023 030a 	bic.w	r3, r3, #10
 800855e:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8008560:	2301      	movs	r3, #1
 8008562:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8008566:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008568:	f003 021f 	and.w	r2, r3, #31
 800856c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800856e:	2302      	movs	r3, #2
 8008570:	4093      	lsls	r3, r2
 8008572:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8008574:	2300      	movs	r3, #0
 8008576:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800857a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800857c:	2b00      	cmp	r3, #0
 800857e:	d0df      	beq.n	8008540 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8008580:	4798      	blx	r3
 8008582:	e7dd      	b.n	8008540 <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8008584:	2208      	movs	r2, #8
 8008586:	fa02 f303 	lsl.w	r3, r2, r3
 800858a:	420b      	tst	r3, r1
 800858c:	d0d8      	beq.n	8008540 <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 800858e:	f015 0f08 	tst.w	r5, #8
 8008592:	d0d5      	beq.n	8008540 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	f023 030e 	bic.w	r3, r3, #14
 800859a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800859c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800859e:	f003 031f 	and.w	r3, r3, #31
 80085a2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80085a4:	2201      	movs	r2, #1
 80085a6:	fa02 f303 	lsl.w	r3, r2, r3
 80085aa:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80085ac:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80085ae:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80085b2:	2300      	movs	r3, #0
 80085b4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80085b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d0c0      	beq.n	8008540 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80085be:	4798      	blx	r3
  return;
 80085c0:	e7be      	b.n	8008540 <HAL_DMA_IRQHandler+0x42>

080085c2 <HAL_DMA_GetState>:
  return hdma->State;
 80085c2:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 80085c6:	4770      	bx	lr

080085c8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80085c8:	b410      	push	{r4}
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80085ca:	6802      	ldr	r2, [r0, #0]
 80085cc:	4b1d      	ldr	r3, [pc, #116]	; (8008644 <FDCAN_CalcultateRamBlockAddresses+0x7c>)
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d028      	beq.n	8008624 <FDCAN_CalcultateRamBlockAddresses+0x5c>
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80085d2:	491d      	ldr	r1, [pc, #116]	; (8008648 <FDCAN_CalcultateRamBlockAddresses+0x80>)
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80085d4:	4b1d      	ldr	r3, [pc, #116]	; (800864c <FDCAN_CalcultateRamBlockAddresses+0x84>)
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d026      	beq.n	8008628 <FDCAN_CalcultateRamBlockAddresses+0x60>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80085da:	6401      	str	r1, [r0, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80085dc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80085e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80085e4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80085e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80085ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80085ee:	f101 0370 	add.w	r3, r1, #112	; 0x70
 80085f2:	6443      	str	r3, [r0, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80085f4:	6802      	ldr	r2, [r0, #0]
 80085f6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80085fa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80085fe:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008600:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8008604:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8008608:	f101 03b0 	add.w	r3, r1, #176	; 0xb0
 800860c:	6483      	str	r3, [r0, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800860e:	f501 73c4 	add.w	r3, r1, #392	; 0x188
 8008612:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8008614:	f501 7318 	add.w	r3, r1, #608	; 0x260
 8008618:	6503      	str	r3, [r0, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800861a:	f501 731e 	add.w	r3, r1, #632	; 0x278
 800861e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008620:	460b      	mov	r3, r1
 8008622:	e007      	b.n	8008634 <FDCAN_CalcultateRamBlockAddresses+0x6c>
    SramCanInstanceBase += SRAMCAN_SIZE;
 8008624:	490a      	ldr	r1, [pc, #40]	; (8008650 <FDCAN_CalcultateRamBlockAddresses+0x88>)
 8008626:	e7d5      	b.n	80085d4 <FDCAN_CalcultateRamBlockAddresses+0xc>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8008628:	f501 61d4 	add.w	r1, r1, #1696	; 0x6a0
 800862c:	e7d5      	b.n	80085da <FDCAN_CalcultateRamBlockAddresses+0x12>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800862e:	2200      	movs	r2, #0
 8008630:	f843 2b04 	str.w	r2, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008634:	f501 7254 	add.w	r2, r1, #848	; 0x350
 8008638:	429a      	cmp	r2, r3
 800863a:	d8f8      	bhi.n	800862e <FDCAN_CalcultateRamBlockAddresses+0x66>
  }
}
 800863c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	40006800 	.word	0x40006800
 8008648:	4000a400 	.word	0x4000a400
 800864c:	40006c00 	.word	0x40006c00
 8008650:	4000a750 	.word	0x4000a750

08008654 <HAL_FDCAN_Init>:
  if (hfdcan == NULL)
 8008654:	2800      	cmp	r0, #0
 8008656:	f000 80e3 	beq.w	8008820 <HAL_FDCAN_Init+0x1cc>
{
 800865a:	b538      	push	{r3, r4, r5, lr}
 800865c:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800865e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8008662:	b1d3      	cbz	r3, 800869a <HAL_FDCAN_Init+0x46>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008664:	6822      	ldr	r2, [r4, #0]
 8008666:	6993      	ldr	r3, [r2, #24]
 8008668:	f023 0310 	bic.w	r3, r3, #16
 800866c:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 800866e:	f7fe fd71 	bl	8007154 <HAL_GetTick>
 8008672:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	699a      	ldr	r2, [r3, #24]
 8008678:	f012 0f08 	tst.w	r2, #8
 800867c:	d012      	beq.n	80086a4 <HAL_FDCAN_Init+0x50>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800867e:	f7fe fd69 	bl	8007154 <HAL_GetTick>
 8008682:	1b40      	subs	r0, r0, r5
 8008684:	280a      	cmp	r0, #10
 8008686:	d9f5      	bls.n	8008674 <HAL_FDCAN_Init+0x20>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008688:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800868a:	f043 0301 	orr.w	r3, r3, #1
 800868e:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008690:	2303      	movs	r3, #3
 8008692:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8008696:	2001      	movs	r0, #1
}
 8008698:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 800869a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 800869e:	f7f9 f967 	bl	8001970 <HAL_FDCAN_MspInit>
 80086a2:	e7df      	b.n	8008664 <HAL_FDCAN_Init+0x10>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80086a4:	699a      	ldr	r2, [r3, #24]
 80086a6:	f042 0201 	orr.w	r2, r2, #1
 80086aa:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 80086ac:	f7fe fd52 	bl	8007154 <HAL_GetTick>
 80086b0:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80086b2:	6823      	ldr	r3, [r4, #0]
 80086b4:	699a      	ldr	r2, [r3, #24]
 80086b6:	f012 0f01 	tst.w	r2, #1
 80086ba:	d10d      	bne.n	80086d8 <HAL_FDCAN_Init+0x84>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80086bc:	f7fe fd4a 	bl	8007154 <HAL_GetTick>
 80086c0:	1b40      	subs	r0, r0, r5
 80086c2:	280a      	cmp	r0, #10
 80086c4:	d9f5      	bls.n	80086b2 <HAL_FDCAN_Init+0x5e>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80086c6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80086c8:	f043 0301 	orr.w	r3, r3, #1
 80086cc:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80086ce:	2303      	movs	r3, #3
 80086d0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80086d4:	2001      	movs	r0, #1
 80086d6:	e7df      	b.n	8008698 <HAL_FDCAN_Init+0x44>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80086d8:	699a      	ldr	r2, [r3, #24]
 80086da:	f042 0202 	orr.w	r2, r2, #2
 80086de:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 80086e0:	6822      	ldr	r2, [r4, #0]
 80086e2:	4b50      	ldr	r3, [pc, #320]	; (8008824 <HAL_FDCAN_Init+0x1d0>)
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d042      	beq.n	800876e <HAL_FDCAN_Init+0x11a>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80086e8:	7c23      	ldrb	r3, [r4, #16]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d045      	beq.n	800877a <HAL_FDCAN_Init+0x126>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80086ee:	6822      	ldr	r2, [r4, #0]
 80086f0:	6993      	ldr	r3, [r2, #24]
 80086f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086f6:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 80086f8:	7c63      	ldrb	r3, [r4, #17]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d043      	beq.n	8008786 <HAL_FDCAN_Init+0x132>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80086fe:	6822      	ldr	r2, [r4, #0]
 8008700:	6993      	ldr	r3, [r2, #24]
 8008702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008706:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008708:	7ca3      	ldrb	r3, [r4, #18]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d041      	beq.n	8008792 <HAL_FDCAN_Init+0x13e>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800870e:	6822      	ldr	r2, [r4, #0]
 8008710:	6993      	ldr	r3, [r2, #24]
 8008712:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008716:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008718:	6822      	ldr	r2, [r4, #0]
 800871a:	6993      	ldr	r3, [r2, #24]
 800871c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008720:	68a1      	ldr	r1, [r4, #8]
 8008722:	430b      	orrs	r3, r1
 8008724:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008726:	6822      	ldr	r2, [r4, #0]
 8008728:	6993      	ldr	r3, [r2, #24]
 800872a:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 800872e:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008730:	6822      	ldr	r2, [r4, #0]
 8008732:	6913      	ldr	r3, [r2, #16]
 8008734:	f023 0310 	bic.w	r3, r3, #16
 8008738:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800873a:	68e3      	ldr	r3, [r4, #12]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d02e      	beq.n	800879e <HAL_FDCAN_Init+0x14a>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008740:	2b00      	cmp	r3, #0
 8008742:	d031      	beq.n	80087a8 <HAL_FDCAN_Init+0x154>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008744:	2b02      	cmp	r3, #2
 8008746:	d054      	beq.n	80087f2 <HAL_FDCAN_Init+0x19e>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008748:	6822      	ldr	r2, [r4, #0]
 800874a:	6993      	ldr	r3, [r2, #24]
 800874c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008750:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008752:	6822      	ldr	r2, [r4, #0]
 8008754:	6913      	ldr	r3, [r2, #16]
 8008756:	f043 0310 	orr.w	r3, r3, #16
 800875a:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800875c:	68e3      	ldr	r3, [r4, #12]
 800875e:	2b03      	cmp	r3, #3
 8008760:	d122      	bne.n	80087a8 <HAL_FDCAN_Init+0x154>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008762:	6822      	ldr	r2, [r4, #0]
 8008764:	6993      	ldr	r3, [r2, #24]
 8008766:	f043 0320 	orr.w	r3, r3, #32
 800876a:	6193      	str	r3, [r2, #24]
 800876c:	e01c      	b.n	80087a8 <HAL_FDCAN_Init+0x154>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800876e:	6862      	ldr	r2, [r4, #4]
 8008770:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008774:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8008778:	e7b6      	b.n	80086e8 <HAL_FDCAN_Init+0x94>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800877a:	6822      	ldr	r2, [r4, #0]
 800877c:	6993      	ldr	r3, [r2, #24]
 800877e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008782:	6193      	str	r3, [r2, #24]
 8008784:	e7b8      	b.n	80086f8 <HAL_FDCAN_Init+0xa4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008786:	6822      	ldr	r2, [r4, #0]
 8008788:	6993      	ldr	r3, [r2, #24]
 800878a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800878e:	6193      	str	r3, [r2, #24]
 8008790:	e7ba      	b.n	8008708 <HAL_FDCAN_Init+0xb4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008792:	6822      	ldr	r2, [r4, #0]
 8008794:	6993      	ldr	r3, [r2, #24]
 8008796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800879a:	6193      	str	r3, [r2, #24]
 800879c:	e7bc      	b.n	8008718 <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800879e:	6822      	ldr	r2, [r4, #0]
 80087a0:	6993      	ldr	r3, [r2, #24]
 80087a2:	f043 0304 	orr.w	r3, r3, #4
 80087a6:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80087a8:	69a3      	ldr	r3, [r4, #24]
 80087aa:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80087ac:	69e3      	ldr	r3, [r4, #28]
 80087ae:	3b01      	subs	r3, #1
 80087b0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80087b2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80087b6:	6a22      	ldr	r2, [r4, #32]
 80087b8:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80087ba:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80087bc:	6962      	ldr	r2, [r4, #20]
 80087be:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80087c0:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80087c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80087c6:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80087c8:	68a3      	ldr	r3, [r4, #8]
 80087ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087ce:	d016      	beq.n	80087fe <HAL_FDCAN_Init+0x1aa>
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80087d0:	6822      	ldr	r2, [r4, #0]
 80087d2:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80087d6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80087d8:	430b      	orrs	r3, r1
 80087da:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80087de:	4620      	mov	r0, r4
 80087e0:	f7ff fef2 	bl	80085c8 <FDCAN_CalcultateRamBlockAddresses>
  hfdcan->LatestTxFifoQRequest = 0U;
 80087e4:	2000      	movs	r0, #0
 80087e6:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80087e8:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80087ea:	2301      	movs	r3, #1
 80087ec:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return HAL_OK;
 80087f0:	e752      	b.n	8008698 <HAL_FDCAN_Init+0x44>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80087f2:	6822      	ldr	r2, [r4, #0]
 80087f4:	6993      	ldr	r3, [r2, #24]
 80087f6:	f043 0320 	orr.w	r3, r3, #32
 80087fa:	6193      	str	r3, [r2, #24]
 80087fc:	e7d4      	b.n	80087a8 <HAL_FDCAN_Init+0x154>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80087fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008800:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008802:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008804:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008806:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800880a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800880c:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800880e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008812:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008814:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008816:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008818:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800881c:	60cb      	str	r3, [r1, #12]
 800881e:	e7d7      	b.n	80087d0 <HAL_FDCAN_Init+0x17c>
    return HAL_ERROR;
 8008820:	2001      	movs	r0, #1
}
 8008822:	4770      	bx	lr
 8008824:	40006400 	.word	0x40006400

08008828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800882a:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 800882c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800882e:	e062      	b.n	80088f6 <HAL_GPIO_Init+0xce>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008830:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008832:	005e      	lsls	r6, r3, #1
 8008834:	2403      	movs	r4, #3
 8008836:	40b4      	lsls	r4, r6
 8008838:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800883c:	68cc      	ldr	r4, [r1, #12]
 800883e:	40b4      	lsls	r4, r6
 8008840:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8008842:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008844:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008846:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800884a:	684c      	ldr	r4, [r1, #4]
 800884c:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8008850:	409c      	lsls	r4, r3
 8008852:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8008856:	6044      	str	r4, [r0, #4]
 8008858:	e05e      	b.n	8008918 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800885a:	08dd      	lsrs	r5, r3, #3
 800885c:	3508      	adds	r5, #8
 800885e:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008862:	f003 0407 	and.w	r4, r3, #7
 8008866:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800886a:	240f      	movs	r4, #15
 800886c:	fa04 f40c 	lsl.w	r4, r4, ip
 8008870:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008874:	690c      	ldr	r4, [r1, #16]
 8008876:	fa04 f40c 	lsl.w	r4, r4, ip
 800887a:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 800887e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8008882:	e060      	b.n	8008946 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008884:	2405      	movs	r4, #5
 8008886:	e000      	b.n	800888a <HAL_GPIO_Init+0x62>
 8008888:	2400      	movs	r4, #0
 800888a:	fa04 f40e 	lsl.w	r4, r4, lr
 800888e:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008890:	f10c 0c02 	add.w	ip, ip, #2
 8008894:	4d55      	ldr	r5, [pc, #340]	; (80089ec <HAL_GPIO_Init+0x1c4>)
 8008896:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800889a:	4c55      	ldr	r4, [pc, #340]	; (80089f0 <HAL_GPIO_Init+0x1c8>)
 800889c:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800889e:	43d4      	mvns	r4, r2
 80088a0:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80088a4:	684f      	ldr	r7, [r1, #4]
 80088a6:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80088aa:	d001      	beq.n	80088b0 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80088ac:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80088b0:	4d4f      	ldr	r5, [pc, #316]	; (80089f0 <HAL_GPIO_Init+0x1c8>)
 80088b2:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 80088b4:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80088b6:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80088ba:	684f      	ldr	r7, [r1, #4]
 80088bc:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 80088c0:	d001      	beq.n	80088c6 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 80088c2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80088c6:	4d4a      	ldr	r5, [pc, #296]	; (80089f0 <HAL_GPIO_Init+0x1c8>)
 80088c8:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 80088ca:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80088cc:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80088d0:	684f      	ldr	r7, [r1, #4]
 80088d2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80088d6:	d001      	beq.n	80088dc <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 80088d8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80088dc:	4d44      	ldr	r5, [pc, #272]	; (80089f0 <HAL_GPIO_Init+0x1c8>)
 80088de:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80088e0:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80088e2:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80088e4:	684e      	ldr	r6, [r1, #4]
 80088e6:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80088ea:	d001      	beq.n	80088f0 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 80088ec:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 80088f0:	4a3f      	ldr	r2, [pc, #252]	; (80089f0 <HAL_GPIO_Init+0x1c8>)
 80088f2:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 80088f4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80088f6:	680a      	ldr	r2, [r1, #0]
 80088f8:	fa32 f403 	lsrs.w	r4, r2, r3
 80088fc:	d074      	beq.n	80089e8 <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80088fe:	f04f 0c01 	mov.w	ip, #1
 8008902:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8008906:	ea1c 0202 	ands.w	r2, ip, r2
 800890a:	d0f3      	beq.n	80088f4 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800890c:	684c      	ldr	r4, [r1, #4]
 800890e:	f004 0403 	and.w	r4, r4, #3
 8008912:	3c01      	subs	r4, #1
 8008914:	2c01      	cmp	r4, #1
 8008916:	d98b      	bls.n	8008830 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008918:	684c      	ldr	r4, [r1, #4]
 800891a:	f004 0403 	and.w	r4, r4, #3
 800891e:	2c03      	cmp	r4, #3
 8008920:	d00c      	beq.n	800893c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8008922:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008924:	005d      	lsls	r5, r3, #1
 8008926:	f04f 0c03 	mov.w	ip, #3
 800892a:	fa0c fc05 	lsl.w	ip, ip, r5
 800892e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008932:	688c      	ldr	r4, [r1, #8]
 8008934:	40ac      	lsls	r4, r5
 8008936:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800893a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800893c:	684c      	ldr	r4, [r1, #4]
 800893e:	f004 0403 	and.w	r4, r4, #3
 8008942:	2c02      	cmp	r4, #2
 8008944:	d089      	beq.n	800885a <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8008946:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008948:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800894c:	f04f 0c03 	mov.w	ip, #3
 8008950:	fa0c fc0e 	lsl.w	ip, ip, lr
 8008954:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008958:	684c      	ldr	r4, [r1, #4]
 800895a:	f004 0403 	and.w	r4, r4, #3
 800895e:	fa04 f40e 	lsl.w	r4, r4, lr
 8008962:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8008966:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008968:	684c      	ldr	r4, [r1, #4]
 800896a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800896e:	d0c1      	beq.n	80088f4 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008970:	4c20      	ldr	r4, [pc, #128]	; (80089f4 <HAL_GPIO_Init+0x1cc>)
 8008972:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8008974:	f045 0501 	orr.w	r5, r5, #1
 8008978:	6625      	str	r5, [r4, #96]	; 0x60
 800897a:	6e24      	ldr	r4, [r4, #96]	; 0x60
 800897c:	f004 0401 	and.w	r4, r4, #1
 8008980:	9401      	str	r4, [sp, #4]
 8008982:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8008984:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8008988:	f10c 0502 	add.w	r5, ip, #2
 800898c:	4c17      	ldr	r4, [pc, #92]	; (80089ec <HAL_GPIO_Init+0x1c4>)
 800898e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008992:	f003 0403 	and.w	r4, r3, #3
 8008996:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800899a:	240f      	movs	r4, #15
 800899c:	fa04 f40e 	lsl.w	r4, r4, lr
 80089a0:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80089a4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80089a8:	f43f af6e 	beq.w	8008888 <HAL_GPIO_Init+0x60>
 80089ac:	4c12      	ldr	r4, [pc, #72]	; (80089f8 <HAL_GPIO_Init+0x1d0>)
 80089ae:	42a0      	cmp	r0, r4
 80089b0:	d012      	beq.n	80089d8 <HAL_GPIO_Init+0x1b0>
 80089b2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80089b6:	42a0      	cmp	r0, r4
 80089b8:	d010      	beq.n	80089dc <HAL_GPIO_Init+0x1b4>
 80089ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80089be:	42a0      	cmp	r0, r4
 80089c0:	d00e      	beq.n	80089e0 <HAL_GPIO_Init+0x1b8>
 80089c2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80089c6:	42a0      	cmp	r0, r4
 80089c8:	d00c      	beq.n	80089e4 <HAL_GPIO_Init+0x1bc>
 80089ca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80089ce:	42a0      	cmp	r0, r4
 80089d0:	f43f af58 	beq.w	8008884 <HAL_GPIO_Init+0x5c>
 80089d4:	2406      	movs	r4, #6
 80089d6:	e758      	b.n	800888a <HAL_GPIO_Init+0x62>
 80089d8:	2401      	movs	r4, #1
 80089da:	e756      	b.n	800888a <HAL_GPIO_Init+0x62>
 80089dc:	2402      	movs	r4, #2
 80089de:	e754      	b.n	800888a <HAL_GPIO_Init+0x62>
 80089e0:	2403      	movs	r4, #3
 80089e2:	e752      	b.n	800888a <HAL_GPIO_Init+0x62>
 80089e4:	2404      	movs	r4, #4
 80089e6:	e750      	b.n	800888a <HAL_GPIO_Init+0x62>
  }
}
 80089e8:	b003      	add	sp, #12
 80089ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ec:	40010000 	.word	0x40010000
 80089f0:	40010400 	.word	0x40010400
 80089f4:	40021000 	.word	0x40021000
 80089f8:	48000400 	.word	0x48000400

080089fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80089fc:	b10a      	cbz	r2, 8008a02 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80089fe:	6181      	str	r1, [r0, #24]
 8008a00:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008a02:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8008a04:	4770      	bx	lr

08008a06 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008a06:	6803      	ldr	r3, [r0, #0]
 8008a08:	699a      	ldr	r2, [r3, #24]
 8008a0a:	f012 0f02 	tst.w	r2, #2
 8008a0e:	d001      	beq.n	8008a14 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008a10:	2200      	movs	r2, #0
 8008a12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a14:	6803      	ldr	r3, [r0, #0]
 8008a16:	699a      	ldr	r2, [r3, #24]
 8008a18:	f012 0f01 	tst.w	r2, #1
 8008a1c:	d103      	bne.n	8008a26 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008a1e:	699a      	ldr	r2, [r3, #24]
 8008a20:	f042 0201 	orr.w	r2, r2, #1
 8008a24:	619a      	str	r2, [r3, #24]
  }
}
 8008a26:	4770      	bx	lr

08008a28 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008a28:	f011 0f01 	tst.w	r1, #1
 8008a2c:	d009      	beq.n	8008a42 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008a2e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008a32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008a36:	2b28      	cmp	r3, #40	; 0x28
 8008a38:	d001      	beq.n	8008a3e <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008a3a:	23f2      	movs	r3, #242	; 0xf2
 8008a3c:	e002      	b.n	8008a44 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008a3e:	2342      	movs	r3, #66	; 0x42
 8008a40:	e000      	b.n	8008a44 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8008a42:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008a44:	f011 0f02 	tst.w	r1, #2
 8008a48:	d009      	beq.n	8008a5e <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008a4a:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008a4e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8008a52:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8008a56:	2a28      	cmp	r2, #40	; 0x28
 8008a58:	d010      	beq.n	8008a7c <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008a5a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008a5e:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8008a62:	d10d      	bne.n	8008a80 <I2C_Disable_IRQ+0x58>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008a64:	2910      	cmp	r1, #16
 8008a66:	d00e      	beq.n	8008a86 <I2C_Disable_IRQ+0x5e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008a68:	2920      	cmp	r1, #32
 8008a6a:	d00f      	beq.n	8008a8c <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008a6c:	2940      	cmp	r1, #64	; 0x40
 8008a6e:	d010      	beq.n	8008a92 <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008a70:	6801      	ldr	r1, [r0, #0]
 8008a72:	680a      	ldr	r2, [r1, #0]
 8008a74:	ea22 0303 	bic.w	r3, r2, r3
 8008a78:	600b      	str	r3, [r1, #0]
}
 8008a7a:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008a7c:	4663      	mov	r3, ip
 8008a7e:	e7ee      	b.n	8008a5e <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008a80:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008a84:	e7ee      	b.n	8008a64 <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008a86:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008a8a:	e7ed      	b.n	8008a68 <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 8008a8c:	f043 0320 	orr.w	r3, r3, #32
 8008a90:	e7ec      	b.n	8008a6c <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 8008a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a96:	e7eb      	b.n	8008a70 <I2C_Disable_IRQ+0x48>

08008a98 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d059      	beq.n	8008b50 <HAL_I2C_Init+0xb8>
{
 8008a9c:	b510      	push	{r4, lr}
 8008a9e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008aa0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d043      	beq.n	8008b30 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008aa8:	2324      	movs	r3, #36	; 0x24
 8008aaa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8008aae:	6822      	ldr	r2, [r4, #0]
 8008ab0:	6813      	ldr	r3, [r2, #0]
 8008ab2:	f023 0301 	bic.w	r3, r3, #1
 8008ab6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008ab8:	6863      	ldr	r3, [r4, #4]
 8008aba:	6822      	ldr	r2, [r4, #0]
 8008abc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8008ac0:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008ac2:	6822      	ldr	r2, [r4, #0]
 8008ac4:	6893      	ldr	r3, [r2, #8]
 8008ac6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008aca:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008acc:	68e3      	ldr	r3, [r4, #12]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d033      	beq.n	8008b3a <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008ad2:	68a3      	ldr	r3, [r4, #8]
 8008ad4:	6822      	ldr	r2, [r4, #0]
 8008ad6:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8008ada:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008adc:	68e3      	ldr	r3, [r4, #12]
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d031      	beq.n	8008b46 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008ae2:	6822      	ldr	r2, [r4, #0]
 8008ae4:	6853      	ldr	r3, [r2, #4]
 8008ae6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aee:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008af0:	6822      	ldr	r2, [r4, #0]
 8008af2:	68d3      	ldr	r3, [r2, #12]
 8008af4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008af8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008afa:	6923      	ldr	r3, [r4, #16]
 8008afc:	6962      	ldr	r2, [r4, #20]
 8008afe:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008b00:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008b02:	6822      	ldr	r2, [r4, #0]
 8008b04:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008b08:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008b0a:	69e3      	ldr	r3, [r4, #28]
 8008b0c:	6a21      	ldr	r1, [r4, #32]
 8008b0e:	6822      	ldr	r2, [r4, #0]
 8008b10:	430b      	orrs	r3, r1
 8008b12:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8008b14:	6822      	ldr	r2, [r4, #0]
 8008b16:	6813      	ldr	r3, [r2, #0]
 8008b18:	f043 0301 	orr.w	r3, r3, #1
 8008b1c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b1e:	2000      	movs	r0, #0
 8008b20:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008b22:	2320      	movs	r3, #32
 8008b24:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b28:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b2a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8008b2e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8008b30:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8008b34:	f7f9 f93e 	bl	8001db4 <HAL_I2C_MspInit>
 8008b38:	e7b6      	b.n	8008aa8 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008b3a:	68a3      	ldr	r3, [r4, #8]
 8008b3c:	6822      	ldr	r2, [r4, #0]
 8008b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b42:	6093      	str	r3, [r2, #8]
 8008b44:	e7ca      	b.n	8008adc <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008b46:	6823      	ldr	r3, [r4, #0]
 8008b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b4c:	605a      	str	r2, [r3, #4]
 8008b4e:	e7c8      	b.n	8008ae2 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8008b50:	2001      	movs	r0, #1
}
 8008b52:	4770      	bx	lr

08008b54 <HAL_I2C_EV_IRQHandler>:
{
 8008b54:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008b56:	6803      	ldr	r3, [r0, #0]
 8008b58:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008b5a:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8008b5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008b5e:	b103      	cbz	r3, 8008b62 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8008b60:	4798      	blx	r3
}
 8008b62:	bd08      	pop	{r3, pc}

08008b64 <HAL_I2C_SlaveTxCpltCallback>:
}
 8008b64:	4770      	bx	lr

08008b66 <HAL_I2C_SlaveRxCpltCallback>:
}
 8008b66:	4770      	bx	lr

08008b68 <I2C_ITSlaveSeqCplt>:
{
 8008b68:	b510      	push	{r4, lr}
 8008b6a:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008b6c:	6803      	ldr	r3, [r0, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b70:	2100      	movs	r1, #0
 8008b72:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008b76:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8008b7a:	d00e      	beq.n	8008b9a <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008b82:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008b84:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b29      	cmp	r3, #41	; 0x29
 8008b8c:	d00d      	beq.n	8008baa <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008b8e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	2b2a      	cmp	r3, #42	; 0x2a
 8008b96:	d018      	beq.n	8008bca <I2C_ITSlaveSeqCplt+0x62>
}
 8008b98:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008b9a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8008b9e:	d0f1      	beq.n	8008b84 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ba6:	601a      	str	r2, [r3, #0]
 8008ba8:	e7ec      	b.n	8008b84 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008baa:	2328      	movs	r3, #40	; 0x28
 8008bac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008bb0:	2321      	movs	r3, #33	; 0x21
 8008bb2:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f7ff ff36 	bl	8008a28 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f7ff ffce 	bl	8008b64 <HAL_I2C_SlaveTxCpltCallback>
 8008bc8:	e7e6      	b.n	8008b98 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008bca:	2328      	movs	r3, #40	; 0x28
 8008bcc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008bd0:	2322      	movs	r3, #34	; 0x22
 8008bd2:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008bd4:	2102      	movs	r1, #2
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f7ff ff26 	bl	8008a28 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008bdc:	2300      	movs	r3, #0
 8008bde:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008be2:	4620      	mov	r0, r4
 8008be4:	f7ff ffbf 	bl	8008b66 <HAL_I2C_SlaveRxCpltCallback>
}
 8008be8:	e7d6      	b.n	8008b98 <I2C_ITSlaveSeqCplt+0x30>

08008bea <HAL_I2C_AddrCallback>:
}
 8008bea:	4770      	bx	lr

08008bec <I2C_ITAddrCplt>:
{
 8008bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bee:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008bf0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008bf4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008bf8:	2b28      	cmp	r3, #40	; 0x28
 8008bfa:	d006      	beq.n	8008c0a <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008bfc:	6803      	ldr	r3, [r0, #0]
 8008bfe:	2208      	movs	r2, #8
 8008c00:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008c02:	2300      	movs	r3, #0
 8008c04:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8008c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8008c0a:	6803      	ldr	r3, [r0, #0]
 8008c0c:	699e      	ldr	r6, [r3, #24]
 8008c0e:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008c12:	699a      	ldr	r2, [r3, #24]
 8008c14:	0c12      	lsrs	r2, r2, #16
 8008c16:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008c1a:	689a      	ldr	r2, [r3, #8]
 8008c1c:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008c20:	68df      	ldr	r7, [r3, #12]
 8008c22:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008c26:	68c1      	ldr	r1, [r0, #12]
 8008c28:	2902      	cmp	r1, #2
 8008c2a:	d122      	bne.n	8008c72 <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008c2c:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8008c30:	f015 0f06 	tst.w	r5, #6
 8008c34:	d110      	bne.n	8008c58 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8008c36:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008c38:	3101      	adds	r1, #1
 8008c3a:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008c3c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008c3e:	2902      	cmp	r1, #2
 8008c40:	d1e2      	bne.n	8008c08 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8008c42:	2100      	movs	r1, #0
 8008c44:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008c46:	2008      	movs	r0, #8
 8008c48:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8008c4a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008c4e:	4631      	mov	r1, r6
 8008c50:	4620      	mov	r0, r4
 8008c52:	f7ff ffca 	bl	8008bea <HAL_I2C_AddrCallback>
 8008c56:	e7d7      	b.n	8008c08 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008c58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008c5c:	f7ff fee4 	bl	8008a28 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008c60:	2300      	movs	r3, #0
 8008c62:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008c66:	463a      	mov	r2, r7
 8008c68:	4631      	mov	r1, r6
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f7ff ffbd 	bl	8008bea <HAL_I2C_AddrCallback>
 8008c70:	e7ca      	b.n	8008c08 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008c72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008c76:	f7ff fed7 	bl	8008a28 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008c80:	462a      	mov	r2, r5
 8008c82:	4631      	mov	r1, r6
 8008c84:	4620      	mov	r0, r4
 8008c86:	f7ff ffb0 	bl	8008bea <HAL_I2C_AddrCallback>
 8008c8a:	e7bd      	b.n	8008c08 <I2C_ITAddrCplt+0x1c>

08008c8c <HAL_I2C_ListenCpltCallback>:
}
 8008c8c:	4770      	bx	lr
	...

08008c90 <I2C_ITListenCplt>:
{
 8008c90:	b510      	push	{r4, lr}
 8008c92:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c94:	4b17      	ldr	r3, [pc, #92]	; (8008cf4 <I2C_ITListenCplt+0x64>)
 8008c96:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008c9c:	2220      	movs	r2, #32
 8008c9e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ca2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008ca6:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008ca8:	f011 0f04 	tst.w	r1, #4
 8008cac:	d013      	beq.n	8008cd6 <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008cae:	6803      	ldr	r3, [r0, #0]
 8008cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008cb4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008cb6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008cb8:	3301      	adds	r3, #1
 8008cba:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8008cbc:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8008cbe:	b153      	cbz	r3, 8008cd6 <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8008cc4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008cce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008cd0:	f043 0304 	orr.w	r3, r3, #4
 8008cd4:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008cd6:	f248 0103 	movw	r1, #32771	; 0x8003
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f7ff fea4 	bl	8008a28 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ce0:	6823      	ldr	r3, [r4, #0]
 8008ce2:	2210      	movs	r2, #16
 8008ce4:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8008cec:	4620      	mov	r0, r4
 8008cee:	f7ff ffcd 	bl	8008c8c <HAL_I2C_ListenCpltCallback>
}
 8008cf2:	bd10      	pop	{r4, pc}
 8008cf4:	ffff0000 	.word	0xffff0000

08008cf8 <HAL_I2C_ErrorCallback>:
}
 8008cf8:	4770      	bx	lr

08008cfa <HAL_I2C_AbortCpltCallback>:
}
 8008cfa:	4770      	bx	lr

08008cfc <I2C_TreatErrorCallback>:
{
 8008cfc:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008cfe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	2b60      	cmp	r3, #96	; 0x60
 8008d06:	d006      	beq.n	8008d16 <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008d0c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008d10:	f7ff fff2 	bl	8008cf8 <HAL_I2C_ErrorCallback>
}
 8008d14:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8008d16:	2320      	movs	r3, #32
 8008d18:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008d20:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8008d24:	f7ff ffe9 	bl	8008cfa <HAL_I2C_AbortCpltCallback>
 8008d28:	e7f4      	b.n	8008d14 <I2C_TreatErrorCallback+0x18>
	...

08008d2c <I2C_ITError>:
{
 8008d2c:	b510      	push	{r4, lr}
 8008d2e:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008d30:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008d34:	2000      	movs	r0, #0
 8008d36:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008d3a:	4a3b      	ldr	r2, [pc, #236]	; (8008e28 <I2C_ITError+0xfc>)
 8008d3c:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008d3e:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8008d40:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008d42:	430a      	orrs	r2, r1
 8008d44:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008d46:	3b28      	subs	r3, #40	; 0x28
 8008d48:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d819      	bhi.n	8008d82 <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008d4e:	2103      	movs	r1, #3
 8008d50:	4620      	mov	r0, r4
 8008d52:	f7ff fe69 	bl	8008a28 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008d56:	2328      	movs	r3, #40	; 0x28
 8008d58:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008d5c:	4b33      	ldr	r3, [pc, #204]	; (8008e2c <I2C_ITError+0x100>)
 8008d5e:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8008d60:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008d62:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008d64:	b11a      	cbz	r2, 8008d6e <I2C_ITError+0x42>
 8008d66:	2b11      	cmp	r3, #17
 8008d68:	d01b      	beq.n	8008da2 <I2C_ITError+0x76>
 8008d6a:	2b21      	cmp	r3, #33	; 0x21
 8008d6c:	d019      	beq.n	8008da2 <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008d6e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008d70:	b11a      	cbz	r2, 8008d7a <I2C_ITError+0x4e>
 8008d72:	2b12      	cmp	r3, #18
 8008d74:	d036      	beq.n	8008de4 <I2C_ITError+0xb8>
 8008d76:	2b22      	cmp	r3, #34	; 0x22
 8008d78:	d034      	beq.n	8008de4 <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f7ff ffbe 	bl	8008cfc <I2C_TreatErrorCallback>
}
 8008d80:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008d82:	f248 0103 	movw	r1, #32771	; 0x8003
 8008d86:	4620      	mov	r0, r4
 8008d88:	f7ff fe4e 	bl	8008a28 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008d8c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b60      	cmp	r3, #96	; 0x60
 8008d94:	d002      	beq.n	8008d9c <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 8008d96:	2320      	movs	r3, #32
 8008d98:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	6363      	str	r3, [r4, #52]	; 0x34
 8008da0:	e7de      	b.n	8008d60 <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8008daa:	d003      	beq.n	8008db4 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008db2:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008db4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008db6:	f7ff fc04 	bl	80085c2 <HAL_DMA_GetState>
 8008dba:	2801      	cmp	r0, #1
 8008dbc:	d00e      	beq.n	8008ddc <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008dbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008dc0:	4a1b      	ldr	r2, [pc, #108]	; (8008e30 <I2C_ITError+0x104>)
 8008dc2:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008dca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008dcc:	f7ff fb58 	bl	8008480 <HAL_DMA_Abort_IT>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d0d5      	beq.n	8008d80 <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008dd4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008dd6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008dd8:	4798      	blx	r3
 8008dda:	e7d1      	b.n	8008d80 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8008ddc:	4620      	mov	r0, r4
 8008dde:	f7ff ff8d 	bl	8008cfc <I2C_TreatErrorCallback>
 8008de2:	e7cd      	b.n	8008d80 <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8008dec:	d003      	beq.n	8008df6 <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008df4:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008df6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008df8:	f7ff fbe3 	bl	80085c2 <HAL_DMA_GetState>
 8008dfc:	2801      	cmp	r0, #1
 8008dfe:	d00e      	beq.n	8008e1e <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008e00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008e02:	4a0b      	ldr	r2, [pc, #44]	; (8008e30 <I2C_ITError+0x104>)
 8008e04:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8008e06:	2300      	movs	r3, #0
 8008e08:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008e0c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008e0e:	f7ff fb37 	bl	8008480 <HAL_DMA_Abort_IT>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	d0b4      	beq.n	8008d80 <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008e16:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008e18:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008e1a:	4798      	blx	r3
 8008e1c:	e7b0      	b.n	8008d80 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f7ff ff6c 	bl	8008cfc <I2C_TreatErrorCallback>
 8008e24:	e7ac      	b.n	8008d80 <I2C_ITError+0x54>
 8008e26:	bf00      	nop
 8008e28:	ffff0000 	.word	0xffff0000
 8008e2c:	08008f9d 	.word	0x08008f9d
 8008e30:	08009155 	.word	0x08009155

08008e34 <I2C_ITSlaveCplt>:
{
 8008e34:	b570      	push	{r4, r5, r6, lr}
 8008e36:	4604      	mov	r4, r0
 8008e38:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008e3a:	6802      	ldr	r2, [r0, #0]
 8008e3c:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008e3e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008e42:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e44:	2120      	movs	r1, #32
 8008e46:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008e48:	2b21      	cmp	r3, #33	; 0x21
 8008e4a:	d00d      	beq.n	8008e68 <I2C_ITSlaveCplt+0x34>
 8008e4c:	2b29      	cmp	r3, #41	; 0x29
 8008e4e:	d00b      	beq.n	8008e68 <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008e50:	2b22      	cmp	r3, #34	; 0x22
 8008e52:	d001      	beq.n	8008e58 <I2C_ITSlaveCplt+0x24>
 8008e54:	2b2a      	cmp	r3, #42	; 0x2a
 8008e56:	d10e      	bne.n	8008e76 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008e58:	f248 0102 	movw	r1, #32770	; 0x8002
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f7ff fde3 	bl	8008a28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008e62:	2322      	movs	r3, #34	; 0x22
 8008e64:	6323      	str	r3, [r4, #48]	; 0x30
 8008e66:	e006      	b.n	8008e76 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008e68:	f248 0101 	movw	r1, #32769	; 0x8001
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f7ff fddb 	bl	8008a28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e72:	2321      	movs	r3, #33	; 0x21
 8008e74:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008e76:	6822      	ldr	r2, [r4, #0]
 8008e78:	6853      	ldr	r3, [r2, #4]
 8008e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e7e:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8008e80:	6822      	ldr	r2, [r4, #0]
 8008e82:	6853      	ldr	r3, [r2, #4]
 8008e84:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8008e88:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8008e8c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8008e90:	f023 0301 	bic.w	r3, r3, #1
 8008e94:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8008e96:	4620      	mov	r0, r4
 8008e98:	f7ff fdb5 	bl	8008a06 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008e9c:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8008ea0:	d040      	beq.n	8008f24 <I2C_ITSlaveCplt+0xf0>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008ea2:	6822      	ldr	r2, [r4, #0]
 8008ea4:	6813      	ldr	r3, [r2, #0]
 8008ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008eaa:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8008eac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008eae:	b11b      	cbz	r3, 8008eb8 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008eb8:	f015 0f04 	tst.w	r5, #4
 8008ebc:	d011      	beq.n	8008ee2 <I2C_ITSlaveCplt+0xae>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008ebe:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008ec2:	6823      	ldr	r3, [r4, #0]
 8008ec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ec8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ecc:	3301      	adds	r3, #1
 8008ece:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8008ed0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008ed2:	b133      	cbz	r3, 8008ee2 <I2C_ITSlaveCplt+0xae>
      hi2c->XferSize--;
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8008ed8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	3b01      	subs	r3, #1
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8008ee2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	b11b      	cbz	r3, 8008ef0 <I2C_ITSlaveCplt+0xbc>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008ee8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008eea:	f043 0304 	orr.w	r3, r3, #4
 8008eee:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008ef6:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008ef8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008efa:	bb1b      	cbnz	r3, 8008f44 <I2C_ITSlaveCplt+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008efc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008efe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f02:	d12d      	bne.n	8008f60 <I2C_ITSlaveCplt+0x12c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008f04:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	2b22      	cmp	r3, #34	; 0x22
 8008f0c:	d038      	beq.n	8008f80 <I2C_ITSlaveCplt+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 8008f0e:	2320      	movs	r3, #32
 8008f10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f14:	2300      	movs	r3, #0
 8008f16:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008f18:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f7ff fe21 	bl	8008b64 <HAL_I2C_SlaveTxCpltCallback>
}
 8008f22:	e02c      	b.n	8008f7e <I2C_ITSlaveCplt+0x14a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008f24:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8008f28:	d0c6      	beq.n	8008eb8 <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008f2a:	6822      	ldr	r2, [r4, #0]
 8008f2c:	6813      	ldr	r3, [r2, #0]
 8008f2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f32:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8008f34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d0be      	beq.n	8008eb8 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008f42:	e7b9      	b.n	8008eb8 <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008f44:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008f46:	4620      	mov	r0, r4
 8008f48:	f7ff fef0 	bl	8008d2c <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008f4c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b28      	cmp	r3, #40	; 0x28
 8008f54:	d113      	bne.n	8008f7e <I2C_ITSlaveCplt+0x14a>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008f56:	4629      	mov	r1, r5
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f7ff fe99 	bl	8008c90 <I2C_ITListenCplt>
 8008f5e:	e00e      	b.n	8008f7e <I2C_ITSlaveCplt+0x14a>
    I2C_ITSlaveSeqCplt(hi2c);
 8008f60:	4620      	mov	r0, r4
 8008f62:	f7ff fe01 	bl	8008b68 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f66:	4b0c      	ldr	r3, [pc, #48]	; (8008f98 <I2C_ITSlaveCplt+0x164>)
 8008f68:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008f6a:	2320      	movs	r3, #32
 8008f6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f70:	2300      	movs	r3, #0
 8008f72:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008f74:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f7ff fe87 	bl	8008c8c <HAL_I2C_ListenCpltCallback>
}
 8008f7e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8008f80:	2320      	movs	r3, #32
 8008f82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f86:	2300      	movs	r3, #0
 8008f88:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008f8a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f7ff fde9 	bl	8008b66 <HAL_I2C_SlaveRxCpltCallback>
 8008f94:	e7f3      	b.n	8008f7e <I2C_ITSlaveCplt+0x14a>
 8008f96:	bf00      	nop
 8008f98:	ffff0000 	.word	0xffff0000

08008f9c <I2C_Slave_ISR_IT>:
{
 8008f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8008f9e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8008fa0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	f000 809e 	beq.w	80090e6 <I2C_Slave_ISR_IT+0x14a>
 8008faa:	4604      	mov	r4, r0
 8008fac:	460d      	mov	r5, r1
 8008fae:	4616      	mov	r6, r2
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008fb6:	f011 0f20 	tst.w	r1, #32
 8008fba:	d002      	beq.n	8008fc2 <I2C_Slave_ISR_IT+0x26>
 8008fbc:	f012 0f20 	tst.w	r2, #32
 8008fc0:	d119      	bne.n	8008ff6 <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008fc2:	f015 0f10 	tst.w	r5, #16
 8008fc6:	d03e      	beq.n	8009046 <I2C_Slave_ISR_IT+0xaa>
 8008fc8:	f016 0f10 	tst.w	r6, #16
 8008fcc:	d03b      	beq.n	8009046 <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 8008fce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	bb43      	cbnz	r3, 8009026 <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008fd4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	2b28      	cmp	r3, #40	; 0x28
 8008fdc:	d00e      	beq.n	8008ffc <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008fde:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b29      	cmp	r3, #41	; 0x29
 8008fe6:	d011      	beq.n	800900c <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fe8:	6823      	ldr	r3, [r4, #0]
 8008fea:	2210      	movs	r2, #16
 8008fec:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8008fee:	2000      	movs	r0, #0
 8008ff0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8008ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008ff6:	f7ff ff1d 	bl	8008e34 <I2C_ITSlaveCplt>
 8008ffa:	e7e2      	b.n	8008fc2 <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008ffc:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8009000:	d1ed      	bne.n	8008fde <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009002:	4629      	mov	r1, r5
 8009004:	4620      	mov	r0, r4
 8009006:	f7ff fe43 	bl	8008c90 <I2C_ITListenCplt>
 800900a:	e7f0      	b.n	8008fee <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800900c:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8009010:	d0ea      	beq.n	8008fe8 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009012:	6823      	ldr	r3, [r4, #0]
 8009014:	2210      	movs	r2, #16
 8009016:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8009018:	4620      	mov	r0, r4
 800901a:	f7ff fcf4 	bl	8008a06 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 800901e:	4620      	mov	r0, r4
 8009020:	f7ff fda2 	bl	8008b68 <I2C_ITSlaveSeqCplt>
 8009024:	e7e3      	b.n	8008fee <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	2210      	movs	r2, #16
 800902a:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800902c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800902e:	f043 0304 	orr.w	r3, r3, #4
 8009032:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009034:	b117      	cbz	r7, 800903c <I2C_Slave_ISR_IT+0xa0>
 8009036:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 800903a:	d1d8      	bne.n	8008fee <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800903c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800903e:	4620      	mov	r0, r4
 8009040:	f7ff fe74 	bl	8008d2c <I2C_ITError>
 8009044:	e7d3      	b.n	8008fee <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009046:	f015 0f04 	tst.w	r5, #4
 800904a:	d01f      	beq.n	800908c <I2C_Slave_ISR_IT+0xf0>
 800904c:	f016 0f04 	tst.w	r6, #4
 8009050:	d01c      	beq.n	800908c <I2C_Slave_ISR_IT+0xf0>
    if (hi2c->XferCount > 0U)
 8009052:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009054:	b29b      	uxth	r3, r3
 8009056:	b173      	cbz	r3, 8009076 <I2C_Slave_ISR_IT+0xda>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800905c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800905e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009060:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009062:	3301      	adds	r3, #1
 8009064:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8009066:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009068:	3b01      	subs	r3, #1
 800906a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800906c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800906e:	b29b      	uxth	r3, r3
 8009070:	3b01      	subs	r3, #1
 8009072:	b29b      	uxth	r3, r3
 8009074:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8009076:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009078:	b29b      	uxth	r3, r3
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1b7      	bne.n	8008fee <I2C_Slave_ISR_IT+0x52>
 800907e:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8009082:	d0b4      	beq.n	8008fee <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8009084:	4620      	mov	r0, r4
 8009086:	f7ff fd6f 	bl	8008b68 <I2C_ITSlaveSeqCplt>
 800908a:	e7b0      	b.n	8008fee <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800908c:	f015 0f08 	tst.w	r5, #8
 8009090:	d002      	beq.n	8009098 <I2C_Slave_ISR_IT+0xfc>
 8009092:	f016 0f08 	tst.w	r6, #8
 8009096:	d118      	bne.n	80090ca <I2C_Slave_ISR_IT+0x12e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009098:	f015 0f02 	tst.w	r5, #2
 800909c:	d0a7      	beq.n	8008fee <I2C_Slave_ISR_IT+0x52>
 800909e:	f016 0f02 	tst.w	r6, #2
 80090a2:	d0a4      	beq.n	8008fee <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 80090a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	b1a3      	cbz	r3, 80090d4 <I2C_Slave_ISR_IT+0x138>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80090aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80090ac:	6823      	ldr	r3, [r4, #0]
 80090ae:	7812      	ldrb	r2, [r2, #0]
 80090b0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80090b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090b4:	3301      	adds	r3, #1
 80090b6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80090b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	3b01      	subs	r3, #1
 80090be:	b29b      	uxth	r3, r3
 80090c0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80090c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80090c4:	3b01      	subs	r3, #1
 80090c6:	8523      	strh	r3, [r4, #40]	; 0x28
 80090c8:	e791      	b.n	8008fee <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80090ca:	4629      	mov	r1, r5
 80090cc:	4620      	mov	r0, r4
 80090ce:	f7ff fd8d 	bl	8008bec <I2C_ITAddrCplt>
 80090d2:	e78c      	b.n	8008fee <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80090d4:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 80090d8:	d001      	beq.n	80090de <I2C_Slave_ISR_IT+0x142>
 80090da:	2f00      	cmp	r7, #0
 80090dc:	d187      	bne.n	8008fee <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 80090de:	4620      	mov	r0, r4
 80090e0:	f7ff fd42 	bl	8008b68 <I2C_ITSlaveSeqCplt>
 80090e4:	e783      	b.n	8008fee <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 80090e6:	2002      	movs	r0, #2
 80090e8:	e784      	b.n	8008ff4 <I2C_Slave_ISR_IT+0x58>

080090ea <HAL_I2C_ER_IRQHandler>:
{
 80090ea:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80090ec:	6802      	ldr	r2, [r0, #0]
 80090ee:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80090f0:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80090f2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80090f6:	d009      	beq.n	800910c <HAL_I2C_ER_IRQHandler+0x22>
 80090f8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80090fc:	d006      	beq.n	800910c <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80090fe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8009100:	f044 0401 	orr.w	r4, r4, #1
 8009104:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009106:	f44f 7480 	mov.w	r4, #256	; 0x100
 800910a:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800910c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8009110:	d00a      	beq.n	8009128 <HAL_I2C_ER_IRQHandler+0x3e>
 8009112:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009116:	d007      	beq.n	8009128 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8009118:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800911a:	f042 0208 	orr.w	r2, r2, #8
 800911e:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009120:	6802      	ldr	r2, [r0, #0]
 8009122:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009126:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009128:	f413 7f00 	tst.w	r3, #512	; 0x200
 800912c:	d00a      	beq.n	8009144 <HAL_I2C_ER_IRQHandler+0x5a>
 800912e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009132:	d007      	beq.n	8009144 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8009134:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009136:	f043 0302 	orr.w	r3, r3, #2
 800913a:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800913c:	6803      	ldr	r3, [r0, #0]
 800913e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009142:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8009144:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8009146:	f011 0f0b 	tst.w	r1, #11
 800914a:	d100      	bne.n	800914e <HAL_I2C_ER_IRQHandler+0x64>
}
 800914c:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 800914e:	f7ff fded 	bl	8008d2c <I2C_ITError>
}
 8009152:	e7fb      	b.n	800914c <HAL_I2C_ER_IRQHandler+0x62>

08009154 <I2C_DMAAbort>:
{
 8009154:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009156:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 8009158:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800915a:	b10b      	cbz	r3, 8009160 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 800915c:	2200      	movs	r2, #0
 800915e:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 8009160:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009162:	b10b      	cbz	r3, 8009168 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009164:	2200      	movs	r2, #0
 8009166:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 8009168:	f7ff fdc8 	bl	8008cfc <I2C_TreatErrorCallback>
}
 800916c:	bd08      	pop	{r3, pc}

0800916e <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800916e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b20      	cmp	r3, #32
 8009176:	d124      	bne.n	80091c2 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009178:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800917c:	2b01      	cmp	r3, #1
 800917e:	d022      	beq.n	80091c6 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8009180:	2301      	movs	r3, #1
 8009182:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009186:	2324      	movs	r3, #36	; 0x24
 8009188:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800918c:	6802      	ldr	r2, [r0, #0]
 800918e:	6813      	ldr	r3, [r2, #0]
 8009190:	f023 0301 	bic.w	r3, r3, #1
 8009194:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009196:	6802      	ldr	r2, [r0, #0]
 8009198:	6813      	ldr	r3, [r2, #0]
 800919a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800919e:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80091a0:	6802      	ldr	r2, [r0, #0]
 80091a2:	6813      	ldr	r3, [r2, #0]
 80091a4:	4319      	orrs	r1, r3
 80091a6:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80091a8:	6802      	ldr	r2, [r0, #0]
 80091aa:	6813      	ldr	r3, [r2, #0]
 80091ac:	f043 0301 	orr.w	r3, r3, #1
 80091b0:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091b2:	2320      	movs	r3, #32
 80091b4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091b8:	2300      	movs	r3, #0
 80091ba:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80091be:	4618      	mov	r0, r3
 80091c0:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80091c2:	2002      	movs	r0, #2
 80091c4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80091c6:	2002      	movs	r0, #2
  }
}
 80091c8:	4770      	bx	lr

080091ca <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091ca:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b20      	cmp	r3, #32
 80091d2:	d122      	bne.n	800921a <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d020      	beq.n	800921e <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80091dc:	2301      	movs	r3, #1
 80091de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091e2:	2324      	movs	r3, #36	; 0x24
 80091e4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091e8:	6802      	ldr	r2, [r0, #0]
 80091ea:	6813      	ldr	r3, [r2, #0]
 80091ec:	f023 0301 	bic.w	r3, r3, #1
 80091f0:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80091f2:	6802      	ldr	r2, [r0, #0]
 80091f4:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80091f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80091fa:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80091fe:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009200:	6802      	ldr	r2, [r0, #0]
 8009202:	6813      	ldr	r3, [r2, #0]
 8009204:	f043 0301 	orr.w	r3, r3, #1
 8009208:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800920a:	2320      	movs	r3, #32
 800920c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009210:	2300      	movs	r3, #0
 8009212:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8009216:	4618      	mov	r0, r3
 8009218:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800921a:	2002      	movs	r0, #2
 800921c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800921e:	2002      	movs	r0, #2
  }
}
 8009220:	4770      	bx	lr

08009222 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009222:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009224:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8009228:	d043      	beq.n	80092b2 <HAL_PCD_EP_DB_Receive+0x90>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800922a:	6804      	ldr	r4, [r0, #0]
 800922c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8009230:	f891 c000 	ldrb.w	ip, [r1]
 8009234:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 8009238:	fa1e f383 	uxtah	r3, lr, r3
 800923c:	4423      	add	r3, r4
 800923e:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 8009242:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8009246:	698b      	ldr	r3, [r1, #24]
 8009248:	42a3      	cmp	r3, r4
 800924a:	d328      	bcc.n	800929e <HAL_PCD_EP_DB_Receive+0x7c>
    {
      ep->xfer_len -= count;
 800924c:	1b1b      	subs	r3, r3, r4
 800924e:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8009250:	698b      	ldr	r3, [r1, #24]
 8009252:	b97b      	cbnz	r3, 8009274 <HAL_PCD_EP_DB_Receive+0x52>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009254:	6805      	ldr	r5, [r0, #0]
 8009256:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 800925a:	b29b      	uxth	r3, r3
 800925c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009264:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800926c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009270:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009274:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009278:	d00e      	beq.n	8009298 <HAL_PCD_EP_DB_Receive+0x76>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800927a:	6802      	ldr	r2, [r0, #0]
 800927c:	780d      	ldrb	r5, [r1, #0]
 800927e:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8009282:	b29b      	uxth	r3, r3
 8009284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800928c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009290:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009294:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 8009298:	b924      	cbnz	r4, 80092a4 <HAL_PCD_EP_DB_Receive+0x82>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 800929a:	4620      	mov	r0, r4
 800929c:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 800929e:	2300      	movs	r3, #0
 80092a0:	618b      	str	r3, [r1, #24]
 80092a2:	e7d5      	b.n	8009250 <HAL_PCD_EP_DB_Receive+0x2e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80092a4:	4623      	mov	r3, r4
 80092a6:	890a      	ldrh	r2, [r1, #8]
 80092a8:	6949      	ldr	r1, [r1, #20]
 80092aa:	6800      	ldr	r0, [r0, #0]
 80092ac:	f004 fa65 	bl	800d77a <USB_ReadPMA>
 80092b0:	e7f3      	b.n	800929a <HAL_PCD_EP_DB_Receive+0x78>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80092b2:	6804      	ldr	r4, [r0, #0]
 80092b4:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80092b8:	f891 c000 	ldrb.w	ip, [r1]
 80092bc:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 80092c0:	fa1e f383 	uxtah	r3, lr, r3
 80092c4:	4423      	add	r3, r4
 80092c6:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	; 0x406
 80092ca:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 80092ce:	698b      	ldr	r3, [r1, #24]
 80092d0:	42a3      	cmp	r3, r4
 80092d2:	d32f      	bcc.n	8009334 <HAL_PCD_EP_DB_Receive+0x112>
      ep->xfer_len -= count;
 80092d4:	1b1b      	subs	r3, r3, r4
 80092d6:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 80092d8:	698b      	ldr	r3, [r1, #24]
 80092da:	b97b      	cbnz	r3, 80092fc <HAL_PCD_EP_DB_Receive+0xda>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80092dc:	6805      	ldr	r5, [r0, #0]
 80092de:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80092f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092f8:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80092fc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009300:	d10f      	bne.n	8009322 <HAL_PCD_EP_DB_Receive+0x100>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009302:	6802      	ldr	r2, [r0, #0]
 8009304:	f891 c000 	ldrb.w	ip, [r1]
 8009308:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 800930c:	b29b      	uxth	r3, r3
 800930e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800931a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800931e:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 8009322:	2c00      	cmp	r4, #0
 8009324:	d0b9      	beq.n	800929a <HAL_PCD_EP_DB_Receive+0x78>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009326:	4623      	mov	r3, r4
 8009328:	894a      	ldrh	r2, [r1, #10]
 800932a:	6949      	ldr	r1, [r1, #20]
 800932c:	6800      	ldr	r0, [r0, #0]
 800932e:	f004 fa24 	bl	800d77a <USB_ReadPMA>
 8009332:	e7b2      	b.n	800929a <HAL_PCD_EP_DB_Receive+0x78>
      ep->xfer_len = 0U;
 8009334:	2300      	movs	r3, #0
 8009336:	618b      	str	r3, [r1, #24]
 8009338:	e7ce      	b.n	80092d8 <HAL_PCD_EP_DB_Receive+0xb6>

0800933a <HAL_PCD_Init>:
  if (hpcd == NULL)
 800933a:	2800      	cmp	r0, #0
 800933c:	d06d      	beq.n	800941a <HAL_PCD_Init+0xe0>
{
 800933e:	b530      	push	{r4, r5, lr}
 8009340:	b087      	sub	sp, #28
 8009342:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009344:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8009348:	b13b      	cbz	r3, 800935a <HAL_PCD_Init+0x20>
  hpcd->State = HAL_PCD_STATE_BUSY;
 800934a:	2303      	movs	r3, #3
 800934c:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8009350:	6820      	ldr	r0, [r4, #0]
 8009352:	f003 faf0 	bl	800c936 <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009356:	2300      	movs	r3, #0
 8009358:	e01f      	b.n	800939a <HAL_PCD_Init+0x60>
    hpcd->Lock = HAL_UNLOCKED;
 800935a:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 800935e:	f005 fe8b 	bl	800f078 <HAL_PCD_MspInit>
 8009362:	e7f2      	b.n	800934a <HAL_PCD_Init+0x10>
    hpcd->IN_ep[i].is_in = 1U;
 8009364:	1c5a      	adds	r2, r3, #1
 8009366:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800936a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800936e:	2001      	movs	r0, #1
 8009370:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 8009372:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8009376:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800937a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800937e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8009382:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009384:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8009388:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 800938c:	2000      	movs	r0, #0
 800938e:	f88c 0003 	strb.w	r0, [ip, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009392:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009394:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8009396:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009398:	b2d3      	uxtb	r3, r2
 800939a:	6860      	ldr	r0, [r4, #4]
 800939c:	4283      	cmp	r3, r0
 800939e:	d3e1      	bcc.n	8009364 <HAL_PCD_Init+0x2a>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093a0:	2300      	movs	r3, #0
 80093a2:	e016      	b.n	80093d2 <HAL_PCD_Init+0x98>
    hpcd->OUT_ep[i].is_in = 0U;
 80093a4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80093a8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80093ac:	2100      	movs	r1, #0
 80093ae:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80093b2:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80093b6:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80093ba:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80093be:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80093c2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80093c6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80093ca:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093ce:	3301      	adds	r3, #1
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	4298      	cmp	r0, r3
 80093d4:	d8e6      	bhi.n	80093a4 <HAL_PCD_Init+0x6a>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80093d6:	46a4      	mov	ip, r4
 80093d8:	f85c 5b10 	ldr.w	r5, [ip], #16
 80093dc:	46ee      	mov	lr, sp
 80093de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80093e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80093e6:	f8dc 3000 	ldr.w	r3, [ip]
 80093ea:	f8ce 3000 	str.w	r3, [lr]
 80093ee:	1d23      	adds	r3, r4, #4
 80093f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093f2:	4628      	mov	r0, r5
 80093f4:	f003 faa9 	bl	800c94a <USB_DevInit>
  hpcd->USB_Address = 0U;
 80093f8:	2300      	movs	r3, #0
 80093fa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80093fe:	2301      	movs	r3, #1
 8009400:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 8009404:	69e3      	ldr	r3, [r4, #28]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d002      	beq.n	8009410 <HAL_PCD_Init+0xd6>
  return HAL_OK;
 800940a:	2000      	movs	r0, #0
}
 800940c:	b007      	add	sp, #28
 800940e:	bd30      	pop	{r4, r5, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009410:	4620      	mov	r0, r4
 8009412:	f000 fee8 	bl	800a1e6 <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 8009416:	2000      	movs	r0, #0
 8009418:	e7f8      	b.n	800940c <HAL_PCD_Init+0xd2>
    return HAL_ERROR;
 800941a:	2001      	movs	r0, #1
}
 800941c:	4770      	bx	lr

0800941e <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 800941e:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8009422:	2b01      	cmp	r3, #1
 8009424:	d00e      	beq.n	8009444 <HAL_PCD_Start+0x26>
{
 8009426:	b510      	push	{r4, lr}
 8009428:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800942a:	2301      	movs	r3, #1
 800942c:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8009430:	6800      	ldr	r0, [r0, #0]
 8009432:	f003 fa77 	bl	800c924 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009436:	6820      	ldr	r0, [r4, #0]
 8009438:	f003 fdcc 	bl	800cfd4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800943c:	2000      	movs	r0, #0
 800943e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8009442:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8009444:	2002      	movs	r0, #2
}
 8009446:	4770      	bx	lr

08009448 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009448:	b570      	push	{r4, r5, r6, lr}
 800944a:	4605      	mov	r5, r0
 800944c:	460c      	mov	r4, r1
 800944e:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009450:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009454:	f000 8109 	beq.w	800966a <HAL_PCD_EP_DB_Transmit+0x222>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009458:	6802      	ldr	r2, [r0, #0]
 800945a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800945e:	7809      	ldrb	r1, [r1, #0]
 8009460:	00c8      	lsls	r0, r1, #3
 8009462:	fa10 f383 	uxtah	r3, r0, r3
 8009466:	4413      	add	r3, r2
 8009468:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800946c:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 8009470:	69a3      	ldr	r3, [r4, #24]
 8009472:	4293      	cmp	r3, r2
 8009474:	d951      	bls.n	800951a <HAL_PCD_EP_DB_Transmit+0xd2>
    {
      ep->xfer_len -= TxPctSize;
 8009476:	1a9b      	subs	r3, r3, r2
 8009478:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800947a:	69a3      	ldr	r3, [r4, #24]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d168      	bne.n	8009552 <HAL_PCD_EP_DB_Transmit+0x10a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009480:	7863      	ldrb	r3, [r4, #1]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d14c      	bne.n	8009520 <HAL_PCD_EP_DB_Transmit+0xd8>
 8009486:	682a      	ldr	r2, [r5, #0]
 8009488:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800948c:	fa12 f383 	uxtah	r3, r2, r3
 8009490:	4403      	add	r3, r0
 8009492:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8009496:	b292      	uxth	r2, r2
 8009498:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800949c:	b292      	uxth	r2, r2
 800949e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80094a2:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80094a6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80094aa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80094ae:	b292      	uxth	r2, r2
 80094b0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80094b4:	6829      	ldr	r1, [r5, #0]
 80094b6:	7862      	ldrb	r2, [r4, #1]
 80094b8:	2a00      	cmp	r2, #0
 80094ba:	d13d      	bne.n	8009538 <HAL_PCD_EP_DB_Transmit+0xf0>
 80094bc:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80094c0:	fa11 f383 	uxtah	r3, r1, r3
 80094c4:	7822      	ldrb	r2, [r4, #0]
 80094c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094ca:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80094ce:	b292      	uxth	r2, r2
 80094d0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80094d4:	b292      	uxth	r2, r2
 80094d6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80094da:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80094de:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80094e2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80094e6:	b292      	uxth	r2, r2
 80094e8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80094ec:	7821      	ldrb	r1, [r4, #0]
 80094ee:	4628      	mov	r0, r5
 80094f0:	f005 fe06 	bl	800f100 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80094f4:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80094f8:	d040      	beq.n	800957c <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80094fa:	682a      	ldr	r2, [r5, #0]
 80094fc:	7821      	ldrb	r1, [r4, #0]
 80094fe:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009502:	b29b      	uxth	r3, r3
 8009504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800950c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009514:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8009518:	e030      	b.n	800957c <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 800951a:	2300      	movs	r3, #0
 800951c:	61a3      	str	r3, [r4, #24]
 800951e:	e7ac      	b.n	800947a <HAL_PCD_EP_DB_Transmit+0x32>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009520:	2b01      	cmp	r3, #1
 8009522:	d1c7      	bne.n	80094b4 <HAL_PCD_EP_DB_Transmit+0x6c>
 8009524:	682a      	ldr	r2, [r5, #0]
 8009526:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800952a:	fa12 f383 	uxtah	r3, r2, r3
 800952e:	4403      	add	r3, r0
 8009530:	2200      	movs	r2, #0
 8009532:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009536:	e7bd      	b.n	80094b4 <HAL_PCD_EP_DB_Transmit+0x6c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009538:	2a01      	cmp	r2, #1
 800953a:	d1d7      	bne.n	80094ec <HAL_PCD_EP_DB_Transmit+0xa4>
 800953c:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8009540:	fa11 f383 	uxtah	r3, r1, r3
 8009544:	7821      	ldrb	r1, [r4, #0]
 8009546:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800954a:	2200      	movs	r2, #0
 800954c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009550:	e7cc      	b.n	80094ec <HAL_PCD_EP_DB_Transmit+0xa4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009552:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8009556:	d00d      	beq.n	8009574 <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009558:	6828      	ldr	r0, [r5, #0]
 800955a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800955e:	b29b      	uxth	r3, r3
 8009560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009568:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800956c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009570:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009574:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009578:	2b01      	cmp	r3, #1
 800957a:	d012      	beq.n	80095a2 <HAL_PCD_EP_DB_Transmit+0x15a>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800957c:	682a      	ldr	r2, [r5, #0]
 800957e:	7821      	ldrb	r1, [r4, #0]
 8009580:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009584:	b29b      	uxth	r3, r3
 8009586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800958a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800958e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8009592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800959a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 800959e:	2000      	movs	r0, #0
 80095a0:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 80095a2:	6963      	ldr	r3, [r4, #20]
 80095a4:	4413      	add	r3, r2
 80095a6:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 80095a8:	69e3      	ldr	r3, [r4, #28]
 80095aa:	4413      	add	r3, r2
 80095ac:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 80095ae:	6a21      	ldr	r1, [r4, #32]
 80095b0:	6923      	ldr	r3, [r4, #16]
 80095b2:	4299      	cmp	r1, r3
 80095b4:	d31b      	bcc.n	80095ee <HAL_PCD_EP_DB_Transmit+0x1a6>
          ep->xfer_len_db -= len;
 80095b6:	1ac9      	subs	r1, r1, r3
 80095b8:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80095ba:	7862      	ldrb	r2, [r4, #1]
 80095bc:	2a00      	cmp	r2, #0
 80095be:	d13f      	bne.n	8009640 <HAL_PCD_EP_DB_Transmit+0x1f8>
 80095c0:	6829      	ldr	r1, [r5, #0]
 80095c2:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80095c6:	fa11 f282 	uxtah	r2, r1, r2
 80095ca:	7821      	ldrb	r1, [r4, #0]
 80095cc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80095d0:	2b3e      	cmp	r3, #62	; 0x3e
 80095d2:	d918      	bls.n	8009606 <HAL_PCD_EP_DB_Transmit+0x1be>
 80095d4:	0959      	lsrs	r1, r3, #5
 80095d6:	f013 0f1f 	tst.w	r3, #31
 80095da:	d100      	bne.n	80095de <HAL_PCD_EP_DB_Transmit+0x196>
 80095dc:	3901      	subs	r1, #1
 80095de:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80095e2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80095e6:	b289      	uxth	r1, r1
 80095e8:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80095ec:	e02a      	b.n	8009644 <HAL_PCD_EP_DB_Transmit+0x1fc>
        else if (ep->xfer_len_db == 0U)
 80095ee:	b921      	cbnz	r1, 80095fa <HAL_PCD_EP_DB_Transmit+0x1b2>
          ep->xfer_fill_db = 0U;
 80095f0:	2300      	movs	r3, #0
 80095f2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 80095f6:	4613      	mov	r3, r2
 80095f8:	e7df      	b.n	80095ba <HAL_PCD_EP_DB_Transmit+0x172>
          ep->xfer_fill_db = 0U;
 80095fa:	2300      	movs	r3, #0
 80095fc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8009600:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8009602:	460b      	mov	r3, r1
 8009604:	e7d9      	b.n	80095ba <HAL_PCD_EP_DB_Transmit+0x172>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009606:	b98b      	cbnz	r3, 800962c <HAL_PCD_EP_DB_Transmit+0x1e4>
 8009608:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 800960c:	b289      	uxth	r1, r1
 800960e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8009612:	b289      	uxth	r1, r1
 8009614:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8009618:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 800961c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8009620:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8009624:	b289      	uxth	r1, r1
 8009626:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800962a:	e00b      	b.n	8009644 <HAL_PCD_EP_DB_Transmit+0x1fc>
 800962c:	0859      	lsrs	r1, r3, #1
 800962e:	f013 0f01 	tst.w	r3, #1
 8009632:	d000      	beq.n	8009636 <HAL_PCD_EP_DB_Transmit+0x1ee>
 8009634:	3101      	adds	r1, #1
 8009636:	0289      	lsls	r1, r1, #10
 8009638:	b289      	uxth	r1, r1
 800963a:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800963e:	e001      	b.n	8009644 <HAL_PCD_EP_DB_Transmit+0x1fc>
 8009640:	2a01      	cmp	r2, #1
 8009642:	d006      	beq.n	8009652 <HAL_PCD_EP_DB_Transmit+0x20a>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009644:	b29b      	uxth	r3, r3
 8009646:	8922      	ldrh	r2, [r4, #8]
 8009648:	6961      	ldr	r1, [r4, #20]
 800964a:	6828      	ldr	r0, [r5, #0]
 800964c:	f003 fcd1 	bl	800cff2 <USB_WritePMA>
 8009650:	e794      	b.n	800957c <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009652:	6829      	ldr	r1, [r5, #0]
 8009654:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8009658:	fa11 f282 	uxtah	r2, r1, r2
 800965c:	7821      	ldrb	r1, [r4, #0]
 800965e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009662:	b299      	uxth	r1, r3
 8009664:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8009668:	e7ec      	b.n	8009644 <HAL_PCD_EP_DB_Transmit+0x1fc>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800966a:	6802      	ldr	r2, [r0, #0]
 800966c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8009670:	7809      	ldrb	r1, [r1, #0]
 8009672:	00c8      	lsls	r0, r1, #3
 8009674:	fa10 f383 	uxtah	r3, r0, r3
 8009678:	4413      	add	r3, r2
 800967a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800967e:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8009682:	69a3      	ldr	r3, [r4, #24]
 8009684:	4293      	cmp	r3, r2
 8009686:	d352      	bcc.n	800972e <HAL_PCD_EP_DB_Transmit+0x2e6>
      ep->xfer_len -= TxPctSize;
 8009688:	1a9b      	subs	r3, r3, r2
 800968a:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 800968c:	69a3      	ldr	r3, [r4, #24]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d169      	bne.n	8009766 <HAL_PCD_EP_DB_Transmit+0x31e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009692:	7863      	ldrb	r3, [r4, #1]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d14d      	bne.n	8009734 <HAL_PCD_EP_DB_Transmit+0x2ec>
 8009698:	682a      	ldr	r2, [r5, #0]
 800969a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800969e:	fa12 f383 	uxtah	r3, r2, r3
 80096a2:	4418      	add	r0, r3
 80096a4:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 80096b4:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 80096b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80096c6:	6829      	ldr	r1, [r5, #0]
 80096c8:	7862      	ldrb	r2, [r4, #1]
 80096ca:	2a00      	cmp	r2, #0
 80096cc:	d13e      	bne.n	800974c <HAL_PCD_EP_DB_Transmit+0x304>
 80096ce:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80096d2:	fa11 f383 	uxtah	r3, r1, r3
 80096d6:	7822      	ldrb	r2, [r4, #0]
 80096d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096dc:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80096e0:	b292      	uxth	r2, r2
 80096e2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80096e6:	b292      	uxth	r2, r2
 80096e8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80096ec:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80096f0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80096f4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80096f8:	b292      	uxth	r2, r2
 80096fa:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80096fe:	7821      	ldrb	r1, [r4, #0]
 8009700:	4628      	mov	r0, r5
 8009702:	f005 fcfd 	bl	800f100 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009706:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800970a:	f47f af37 	bne.w	800957c <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800970e:	682a      	ldr	r2, [r5, #0]
 8009710:	7821      	ldrb	r1, [r4, #0]
 8009712:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009716:	b29b      	uxth	r3, r3
 8009718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800971c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009728:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800972c:	e726      	b.n	800957c <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 800972e:	2300      	movs	r3, #0
 8009730:	61a3      	str	r3, [r4, #24]
 8009732:	e7ab      	b.n	800968c <HAL_PCD_EP_DB_Transmit+0x244>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009734:	2b01      	cmp	r3, #1
 8009736:	d1c6      	bne.n	80096c6 <HAL_PCD_EP_DB_Transmit+0x27e>
 8009738:	682a      	ldr	r2, [r5, #0]
 800973a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800973e:	fa12 f383 	uxtah	r3, r2, r3
 8009742:	4418      	add	r0, r3
 8009744:	2300      	movs	r3, #0
 8009746:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 800974a:	e7bc      	b.n	80096c6 <HAL_PCD_EP_DB_Transmit+0x27e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800974c:	2a01      	cmp	r2, #1
 800974e:	d1d6      	bne.n	80096fe <HAL_PCD_EP_DB_Transmit+0x2b6>
 8009750:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8009754:	fa11 f383 	uxtah	r3, r1, r3
 8009758:	7821      	ldrb	r1, [r4, #0]
 800975a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800975e:	2200      	movs	r2, #0
 8009760:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009764:	e7cb      	b.n	80096fe <HAL_PCD_EP_DB_Transmit+0x2b6>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009766:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800976a:	d10d      	bne.n	8009788 <HAL_PCD_EP_DB_Transmit+0x340>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800976c:	6828      	ldr	r0, [r5, #0]
 800976e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8009772:	b29b      	uxth	r3, r3
 8009774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800977c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009784:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8009788:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800978c:	2b01      	cmp	r3, #1
 800978e:	f47f aef5 	bne.w	800957c <HAL_PCD_EP_DB_Transmit+0x134>
        ep->xfer_buff += TxPctSize;
 8009792:	6963      	ldr	r3, [r4, #20]
 8009794:	4413      	add	r3, r2
 8009796:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8009798:	69e3      	ldr	r3, [r4, #28]
 800979a:	4413      	add	r3, r2
 800979c:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 800979e:	6a21      	ldr	r1, [r4, #32]
 80097a0:	6923      	ldr	r3, [r4, #16]
 80097a2:	4299      	cmp	r1, r3
 80097a4:	d31b      	bcc.n	80097de <HAL_PCD_EP_DB_Transmit+0x396>
          ep->xfer_len_db -= len;
 80097a6:	1ac9      	subs	r1, r1, r3
 80097a8:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80097aa:	6829      	ldr	r1, [r5, #0]
 80097ac:	7862      	ldrb	r2, [r4, #1]
 80097ae:	2a00      	cmp	r2, #0
 80097b0:	d13e      	bne.n	8009830 <HAL_PCD_EP_DB_Transmit+0x3e8>
 80097b2:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80097b6:	fa11 f282 	uxtah	r2, r1, r2
 80097ba:	7821      	ldrb	r1, [r4, #0]
 80097bc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80097c0:	2b3e      	cmp	r3, #62	; 0x3e
 80097c2:	d918      	bls.n	80097f6 <HAL_PCD_EP_DB_Transmit+0x3ae>
 80097c4:	0959      	lsrs	r1, r3, #5
 80097c6:	f013 0f1f 	tst.w	r3, #31
 80097ca:	d100      	bne.n	80097ce <HAL_PCD_EP_DB_Transmit+0x386>
 80097cc:	3901      	subs	r1, #1
 80097ce:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80097d2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80097d6:	b289      	uxth	r1, r1
 80097d8:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 80097dc:	e02a      	b.n	8009834 <HAL_PCD_EP_DB_Transmit+0x3ec>
        else if (ep->xfer_len_db == 0U)
 80097de:	b921      	cbnz	r1, 80097ea <HAL_PCD_EP_DB_Transmit+0x3a2>
          ep->xfer_fill_db = 0U;
 80097e0:	2300      	movs	r3, #0
 80097e2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 80097e6:	4613      	mov	r3, r2
 80097e8:	e7df      	b.n	80097aa <HAL_PCD_EP_DB_Transmit+0x362>
          ep->xfer_len_db = 0U;
 80097ea:	2300      	movs	r3, #0
 80097ec:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 80097ee:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 80097f2:	460b      	mov	r3, r1
 80097f4:	e7d9      	b.n	80097aa <HAL_PCD_EP_DB_Transmit+0x362>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80097f6:	b98b      	cbnz	r3, 800981c <HAL_PCD_EP_DB_Transmit+0x3d4>
 80097f8:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 80097fc:	b289      	uxth	r1, r1
 80097fe:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8009802:	b289      	uxth	r1, r1
 8009804:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8009808:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 800980c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8009810:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8009814:	b289      	uxth	r1, r1
 8009816:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 800981a:	e00b      	b.n	8009834 <HAL_PCD_EP_DB_Transmit+0x3ec>
 800981c:	0859      	lsrs	r1, r3, #1
 800981e:	f013 0f01 	tst.w	r3, #1
 8009822:	d000      	beq.n	8009826 <HAL_PCD_EP_DB_Transmit+0x3de>
 8009824:	3101      	adds	r1, #1
 8009826:	0289      	lsls	r1, r1, #10
 8009828:	b289      	uxth	r1, r1
 800982a:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 800982e:	e001      	b.n	8009834 <HAL_PCD_EP_DB_Transmit+0x3ec>
 8009830:	2a01      	cmp	r2, #1
 8009832:	d006      	beq.n	8009842 <HAL_PCD_EP_DB_Transmit+0x3fa>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009834:	b29b      	uxth	r3, r3
 8009836:	8962      	ldrh	r2, [r4, #10]
 8009838:	6961      	ldr	r1, [r4, #20]
 800983a:	6828      	ldr	r0, [r5, #0]
 800983c:	f003 fbd9 	bl	800cff2 <USB_WritePMA>
 8009840:	e69c      	b.n	800957c <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009842:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8009846:	fa11 f282 	uxtah	r2, r1, r2
 800984a:	7821      	ldrb	r1, [r4, #0]
 800984c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009850:	b299      	uxth	r1, r3
 8009852:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8009856:	e7ed      	b.n	8009834 <HAL_PCD_EP_DB_Transmit+0x3ec>

08009858 <PCD_EP_ISR_Handler>:
{
 8009858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800985c:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800985e:	e0ca      	b.n	80099f6 <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009860:	8803      	ldrh	r3, [r0, #0]
 8009862:	b29b      	uxth	r3, r3
 8009864:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800986c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009874:	b29b      	uxth	r3, r3
 8009876:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009878:	6829      	ldr	r1, [r5, #0]
 800987a:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 800987e:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8009882:	00d2      	lsls	r2, r2, #3
 8009884:	fa12 f383 	uxtah	r3, r2, r3
 8009888:	440b      	add	r3, r1
 800988a:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800988e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009892:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8009894:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8009896:	4413      	add	r3, r2
 8009898:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800989a:	2100      	movs	r1, #0
 800989c:	4628      	mov	r0, r5
 800989e:	f005 fc2f 	bl	800f100 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80098a2:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f000 80a5 	beq.w	80099f6 <PCD_EP_ISR_Handler+0x19e>
 80098ac:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f040 80a1 	bne.w	80099f6 <PCD_EP_ISR_Handler+0x19e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80098b4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80098b8:	682a      	ldr	r2, [r5, #0]
 80098ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098be:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80098c2:	2300      	movs	r3, #0
 80098c4:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 80098c8:	e095      	b.n	80099f6 <PCD_EP_ISR_Handler+0x19e>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80098ca:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80098ce:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 80098d2:	00d2      	lsls	r2, r2, #3
 80098d4:	fa12 f383 	uxtah	r3, r2, r3
 80098d8:	4403      	add	r3, r0
 80098da:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80098de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098e2:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80098e6:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 80098ea:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 80098ee:	f003 ff44 	bl	800d77a <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80098f2:	682a      	ldr	r2, [r5, #0]
 80098f4:	8813      	ldrh	r3, [r2, #0]
 80098f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098fa:	051b      	lsls	r3, r3, #20
 80098fc:	0d1b      	lsrs	r3, r3, #20
 80098fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009902:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8009904:	4628      	mov	r0, r5
 8009906:	f005 fbe7 	bl	800f0d8 <HAL_PCD_SetupStageCallback>
 800990a:	e074      	b.n	80099f6 <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800990c:	b989      	cbnz	r1, 8009932 <PCD_EP_ISR_Handler+0xda>
 800990e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009912:	b292      	uxth	r2, r2
 8009914:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009918:	b292      	uxth	r2, r2
 800991a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800991e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009922:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009926:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800992a:	b292      	uxth	r2, r2
 800992c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009930:	e0bf      	b.n	8009ab2 <PCD_EP_ISR_Handler+0x25a>
 8009932:	084a      	lsrs	r2, r1, #1
 8009934:	f011 0f01 	tst.w	r1, #1
 8009938:	d000      	beq.n	800993c <PCD_EP_ISR_Handler+0xe4>
 800993a:	3201      	adds	r2, #1
 800993c:	0292      	lsls	r2, r2, #10
 800993e:	b292      	uxth	r2, r2
 8009940:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009944:	e0b5      	b.n	8009ab2 <PCD_EP_ISR_Handler+0x25a>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009946:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800994a:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800994c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8009950:	f040 80be 	bne.w	8009ad0 <PCD_EP_ISR_Handler+0x278>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009954:	f016 0f80 	tst.w	r6, #128	; 0x80
 8009958:	d04d      	beq.n	80099f6 <PCD_EP_ISR_Handler+0x19e>
        ep = &hpcd->IN_ep[epindex];
 800995a:	1c62      	adds	r2, r4, #1
 800995c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8009960:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009964:	6828      	ldr	r0, [r5, #0]
 8009966:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800996a:	b29b      	uxth	r3, r3
 800996c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800997c:	b29b      	uxth	r3, r3
 800997e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->type != EP_TYPE_BULK)
 8009982:	78cb      	ldrb	r3, [r1, #3]
 8009984:	2b02      	cmp	r3, #2
 8009986:	f000 81a7 	beq.w	8009cd8 <PCD_EP_ISR_Handler+0x480>
          ep->xfer_len = 0U;
 800998a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800998e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8009992:	2200      	movs	r2, #0
 8009994:	641a      	str	r2, [r3, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8009996:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800999a:	b323      	cbz	r3, 80099e6 <PCD_EP_ISR_Handler+0x18e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800999c:	f016 0f40 	tst.w	r6, #64	; 0x40
 80099a0:	f000 8163 	beq.w	8009c6a <PCD_EP_ISR_Handler+0x412>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80099a4:	784b      	ldrb	r3, [r1, #1]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f040 814c 	bne.w	8009c44 <PCD_EP_ISR_Handler+0x3ec>
 80099ac:	682a      	ldr	r2, [r5, #0]
 80099ae:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80099b2:	fa12 f383 	uxtah	r3, r2, r3
 80099b6:	1c62      	adds	r2, r4, #1
 80099b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80099bc:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 80099c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099c4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80099c8:	b292      	uxth	r2, r2
 80099ca:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80099ce:	b292      	uxth	r2, r2
 80099d0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80099d4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80099d8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80099dc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80099e0:	b292      	uxth	r2, r2
 80099e2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80099e6:	3401      	adds	r4, #1
 80099e8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80099ec:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 80099f0:	4628      	mov	r0, r5
 80099f2:	f005 fb85 	bl	800f100 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80099f6:	6828      	ldr	r0, [r5, #0]
 80099f8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80099fc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8009a00:	f000 81ae 	beq.w	8009d60 <PCD_EP_ISR_Handler+0x508>
    wIstr = hpcd->Instance->ISTR;
 8009a04:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8009a08:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8009a0a:	f014 040f 	ands.w	r4, r4, #15
 8009a0e:	d19a      	bne.n	8009946 <PCD_EP_ISR_Handler+0xee>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009a10:	f013 0f10 	tst.w	r3, #16
 8009a14:	f43f af24 	beq.w	8009860 <PCD_EP_ISR_Handler+0x8>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009a18:	8803      	ldrh	r3, [r0, #0]
 8009a1a:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009a1c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8009a20:	f47f af53 	bne.w	80098ca <PCD_EP_ISR_Handler+0x72>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009a24:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8009a28:	d0e5      	beq.n	80099f6 <PCD_EP_ISR_Handler+0x19e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009a2a:	8803      	ldrh	r3, [r0, #0]
 8009a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a30:	051b      	lsls	r3, r3, #20
 8009a32:	0d1b      	lsrs	r3, r3, #20
 8009a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a38:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009a3a:	6828      	ldr	r0, [r5, #0]
 8009a3c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009a40:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8009a44:	00d2      	lsls	r2, r2, #3
 8009a46:	fa12 f383 	uxtah	r3, r2, r3
 8009a4a:	4403      	add	r3, r0
 8009a4c:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8009a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a54:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009a58:	b18b      	cbz	r3, 8009a7e <PCD_EP_ISR_Handler+0x226>
 8009a5a:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 8009a5e:	b171      	cbz	r1, 8009a7e <PCD_EP_ISR_Handler+0x226>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009a60:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8009a64:	f003 fe89 	bl	800d77a <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8009a68:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 8009a6c:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 8009a70:	4413      	add	r3, r2
 8009a72:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009a76:	2100      	movs	r1, #0
 8009a78:	4628      	mov	r0, r5
 8009a7a:	f005 fb35 	bl	800f0e8 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8009a7e:	682b      	ldr	r3, [r5, #0]
 8009a80:	881a      	ldrh	r2, [r3, #0]
 8009a82:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8009a86:	d1b6      	bne.n	80099f6 <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009a88:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8009a8c:	fa13 f382 	uxtah	r3, r3, r2
 8009a90:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 8009a94:	293e      	cmp	r1, #62	; 0x3e
 8009a96:	f67f af39 	bls.w	800990c <PCD_EP_ISR_Handler+0xb4>
 8009a9a:	094a      	lsrs	r2, r1, #5
 8009a9c:	f011 0f1f 	tst.w	r1, #31
 8009aa0:	d100      	bne.n	8009aa4 <PCD_EP_ISR_Handler+0x24c>
 8009aa2:	3a01      	subs	r2, #1
 8009aa4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8009aa8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009aac:	b292      	uxth	r2, r2
 8009aae:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009ab2:	682a      	ldr	r2, [r5, #0]
 8009ab4:	8813      	ldrh	r3, [r2, #0]
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ac0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009acc:	8013      	strh	r3, [r2, #0]
 8009ace:	e792      	b.n	80099f6 <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009ad0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8009ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ad8:	051b      	lsls	r3, r3, #20
 8009ada:	0d1b      	lsrs	r3, r3, #20
 8009adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ae0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8009ae4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8009ae8:	00c9      	lsls	r1, r1, #3
 8009aea:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8009aee:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 8009af2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8009af6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8009afa:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d140      	bne.n	8009b84 <PCD_EP_ISR_Handler+0x32c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009b02:	6828      	ldr	r0, [r5, #0]
 8009b04:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009b08:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009b0c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8009b10:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8009b14:	00d2      	lsls	r2, r2, #3
 8009b16:	fa12 f383 	uxtah	r3, r2, r3
 8009b1a:	4403      	add	r3, r0
 8009b1c:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8009b20:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8009b24:	bb17      	cbnz	r7, 8009b6c <PCD_EP_ISR_Handler+0x314>
        ep->xfer_count += count;
 8009b26:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8009b2a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8009b2e:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8009b32:	443a      	add	r2, r7
 8009b34:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8009b38:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8009b3c:	443a      	add	r2, r7
 8009b3e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009b42:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8009b46:	b13b      	cbz	r3, 8009b58 <PCD_EP_ISR_Handler+0x300>
 8009b48:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8009b4c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8009b50:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8009b54:	429f      	cmp	r7, r3
 8009b56:	d270      	bcs.n	8009c3a <PCD_EP_ISR_Handler+0x3e2>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009b58:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8009b5c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8009b60:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8009b64:	4628      	mov	r0, r5
 8009b66:	f005 fabf 	bl	800f0e8 <HAL_PCD_DataOutStageCallback>
 8009b6a:	e6f3      	b.n	8009954 <PCD_EP_ISR_Handler+0xfc>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009b6c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8009b70:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8009b74:	463b      	mov	r3, r7
 8009b76:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8009b7a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009b7e:	f003 fdfc 	bl	800d77a <USB_ReadPMA>
 8009b82:	e7d0      	b.n	8009b26 <PCD_EP_ISR_Handler+0x2ce>
          if (ep->type == EP_TYPE_BULK)
 8009b84:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8009b88:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8009b8c:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d033      	beq.n	8009bfc <PCD_EP_ISR_Handler+0x3a4>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009b94:	6829      	ldr	r1, [r5, #0]
 8009b96:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009b9a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8009b9e:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8009ba2:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009bb8:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009bbc:	6828      	ldr	r0, [r5, #0]
 8009bbe:	f892 3168 	ldrb.w	r3, [r2, #360]	; 0x168
 8009bc2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009bc6:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8009bca:	d01e      	beq.n	8009c0a <PCD_EP_ISR_Handler+0x3b2>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009bcc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009bd0:	00db      	lsls	r3, r3, #3
 8009bd2:	fa13 f382 	uxtah	r3, r3, r2
 8009bd6:	4403      	add	r3, r0
 8009bd8:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	; 0x402
 8009bdc:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8009be0:	2f00      	cmp	r7, #0
 8009be2:	d0a0      	beq.n	8009b26 <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009be4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8009be8:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8009bec:	463b      	mov	r3, r7
 8009bee:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8009bf2:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009bf6:	f003 fdc0 	bl	800d77a <USB_ReadPMA>
 8009bfa:	e794      	b.n	8009b26 <PCD_EP_ISR_Handler+0x2ce>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8009bfc:	4632      	mov	r2, r6
 8009bfe:	4641      	mov	r1, r8
 8009c00:	4628      	mov	r0, r5
 8009c02:	f7ff fb0e 	bl	8009222 <HAL_PCD_EP_DB_Receive>
 8009c06:	4607      	mov	r7, r0
 8009c08:	e78d      	b.n	8009b26 <PCD_EP_ISR_Handler+0x2ce>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009c0a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009c0e:	00db      	lsls	r3, r3, #3
 8009c10:	fa13 f382 	uxtah	r3, r3, r2
 8009c14:	4403      	add	r3, r0
 8009c16:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8009c1a:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8009c1e:	2f00      	cmp	r7, #0
 8009c20:	d081      	beq.n	8009b26 <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009c22:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8009c26:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8009c2a:	463b      	mov	r3, r7
 8009c2c:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8009c30:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009c34:	f003 fda1 	bl	800d77a <USB_ReadPMA>
 8009c38:	e775      	b.n	8009b26 <PCD_EP_ISR_Handler+0x2ce>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8009c3a:	4641      	mov	r1, r8
 8009c3c:	6828      	ldr	r0, [r5, #0]
 8009c3e:	f003 f9ec 	bl	800d01a <USB_EPStartXfer>
 8009c42:	e687      	b.n	8009954 <PCD_EP_ISR_Handler+0xfc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	f47f aece 	bne.w	80099e6 <PCD_EP_ISR_Handler+0x18e>
 8009c4a:	682a      	ldr	r2, [r5, #0]
 8009c4c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8009c50:	fa12 f383 	uxtah	r3, r2, r3
 8009c54:	1c62      	adds	r2, r4, #1
 8009c56:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009c5a:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8009c5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c62:	2200      	movs	r2, #0
 8009c64:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009c68:	e6bd      	b.n	80099e6 <PCD_EP_ISR_Handler+0x18e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009c6a:	6829      	ldr	r1, [r5, #0]
 8009c6c:	1c63      	adds	r3, r4, #1
 8009c6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009c72:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8009c76:	785a      	ldrb	r2, [r3, #1]
 8009c78:	b9e2      	cbnz	r2, 8009cb4 <PCD_EP_ISR_Handler+0x45c>
 8009c7a:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8009c7e:	fa11 f383 	uxtah	r3, r1, r3
 8009c82:	1c62      	adds	r2, r4, #1
 8009c84:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009c88:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8009c8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c90:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009c94:	b292      	uxth	r2, r2
 8009c96:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009c9a:	b292      	uxth	r2, r2
 8009c9c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009ca0:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009ca4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009ca8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009cac:	b292      	uxth	r2, r2
 8009cae:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009cb2:	e698      	b.n	80099e6 <PCD_EP_ISR_Handler+0x18e>
 8009cb4:	2a01      	cmp	r2, #1
 8009cb6:	f47f ae96 	bne.w	80099e6 <PCD_EP_ISR_Handler+0x18e>
 8009cba:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8009cbe:	fa11 f383 	uxtah	r3, r1, r3
 8009cc2:	1c62      	adds	r2, r4, #1
 8009cc4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009cc8:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8009ccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009cd6:	e686      	b.n	80099e6 <PCD_EP_ISR_Handler+0x18e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8009cd8:	f416 7f80 	tst.w	r6, #256	; 0x100
 8009cdc:	d13b      	bne.n	8009d56 <PCD_EP_ISR_Handler+0x4fe>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009cde:	6828      	ldr	r0, [r5, #0]
 8009ce0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009ce4:	1c62      	adds	r2, r4, #1
 8009ce6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009cea:	f815 6032 	ldrb.w	r6, [r5, r2, lsl #3]
 8009cee:	00f2      	lsls	r2, r6, #3
 8009cf0:	fa12 f383 	uxtah	r3, r2, r3
 8009cf4:	4403      	add	r3, r0
 8009cf6:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8009cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 8009cfe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009d02:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8009d06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d910      	bls.n	8009d2e <PCD_EP_ISR_Handler+0x4d6>
              ep->xfer_len -= TxPctSize;
 8009d0c:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 8009d10:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 8009d14:	1ad2      	subs	r2, r2, r3
 8009d16:	643a      	str	r2, [r7, #64]	; 0x40
            if (ep->xfer_len == 0U)
 8009d18:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009d1c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8009d20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009d22:	b95a      	cbnz	r2, 8009d3c <PCD_EP_ISR_Handler+0x4e4>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009d24:	4631      	mov	r1, r6
 8009d26:	4628      	mov	r0, r5
 8009d28:	f005 f9ea 	bl	800f100 <HAL_PCD_DataInStageCallback>
 8009d2c:	e663      	b.n	80099f6 <PCD_EP_ISR_Handler+0x19e>
              ep->xfer_len = 0U;
 8009d2e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009d32:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8009d36:	2700      	movs	r7, #0
 8009d38:	6417      	str	r7, [r2, #64]	; 0x40
 8009d3a:	e7ed      	b.n	8009d18 <PCD_EP_ISR_Handler+0x4c0>
              ep->xfer_buff += TxPctSize;
 8009d3c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009d40:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8009d44:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8009d46:	441e      	add	r6, r3
 8009d48:	63d6      	str	r6, [r2, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8009d4a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8009d4c:	4423      	add	r3, r4
 8009d4e:	6453      	str	r3, [r2, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009d50:	f003 f963 	bl	800d01a <USB_EPStartXfer>
 8009d54:	e64f      	b.n	80099f6 <PCD_EP_ISR_Handler+0x19e>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8009d56:	4632      	mov	r2, r6
 8009d58:	4628      	mov	r0, r5
 8009d5a:	f7ff fb75 	bl	8009448 <HAL_PCD_EP_DB_Transmit>
 8009d5e:	e64a      	b.n	80099f6 <PCD_EP_ISR_Handler+0x19e>
}
 8009d60:	2000      	movs	r0, #0
 8009d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009d66 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8009d66:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d00d      	beq.n	8009d8a <HAL_PCD_SetAddress+0x24>
{
 8009d6e:	b510      	push	{r4, lr}
 8009d70:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8009d72:	2301      	movs	r3, #1
 8009d74:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8009d78:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009d7c:	6800      	ldr	r0, [r0, #0]
 8009d7e:	f003 f923 	bl	800cfc8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009d82:	2000      	movs	r0, #0
 8009d84:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8009d88:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8009d8a:	2002      	movs	r0, #2
}
 8009d8c:	4770      	bx	lr

08009d8e <HAL_PCD_IRQHandler>:
{
 8009d8e:	b510      	push	{r4, lr}
 8009d90:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009d92:	6800      	ldr	r0, [r0, #0]
 8009d94:	f003 f929 	bl	800cfea <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8009d98:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8009d9c:	d123      	bne.n	8009de6 <HAL_PCD_IRQHandler+0x58>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8009d9e:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8009da2:	d124      	bne.n	8009dee <HAL_PCD_IRQHandler+0x60>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009da4:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8009da8:	d132      	bne.n	8009e10 <HAL_PCD_IRQHandler+0x82>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009daa:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8009dae:	d139      	bne.n	8009e24 <HAL_PCD_IRQHandler+0x96>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009db0:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8009db4:	d140      	bne.n	8009e38 <HAL_PCD_IRQHandler+0xaa>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8009db6:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8009dba:	d167      	bne.n	8009e8c <HAL_PCD_IRQHandler+0xfe>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8009dbc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009dc0:	f040 8081 	bne.w	8009ec6 <HAL_PCD_IRQHandler+0x138>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8009dc4:	f410 7f00 	tst.w	r0, #512	; 0x200
 8009dc8:	f040 80ad 	bne.w	8009f26 <HAL_PCD_IRQHandler+0x198>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8009dcc:	f410 7f80 	tst.w	r0, #256	; 0x100
 8009dd0:	d027      	beq.n	8009e22 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8009dd2:	6822      	ldr	r2, [r4, #0]
 8009dd4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8009de4:	e01d      	b.n	8009e22 <HAL_PCD_IRQHandler+0x94>
    (void)PCD_EP_ISR_Handler(hpcd);
 8009de6:	4620      	mov	r0, r4
 8009de8:	f7ff fd36 	bl	8009858 <PCD_EP_ISR_Handler>
    return;
 8009dec:	e019      	b.n	8009e22 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009dee:	6822      	ldr	r2, [r4, #0]
 8009df0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8009e00:	4620      	mov	r0, r4
 8009e02:	f005 f98e 	bl	800f122 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009e06:	2100      	movs	r1, #0
 8009e08:	4620      	mov	r0, r4
 8009e0a:	f7ff ffac 	bl	8009d66 <HAL_PCD_SetAddress>
    return;
 8009e0e:	e008      	b.n	8009e22 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009e10:	6822      	ldr	r2, [r4, #0]
 8009e12:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8009e22:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009e24:	6822      	ldr	r2, [r4, #0]
 8009e26:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8009e36:	e7f4      	b.n	8009e22 <HAL_PCD_IRQHandler+0x94>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009e38:	6822      	ldr	r2, [r4, #0]
 8009e3a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	f023 0304 	bic.w	r3, r3, #4
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009e4a:	6822      	ldr	r2, [r4, #0]
 8009e4c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	f023 0308 	bic.w	r3, r3, #8
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8009e5c:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d00c      	beq.n	8009e7e <HAL_PCD_IRQHandler+0xf0>
    HAL_PCD_ResumeCallback(hpcd);
 8009e64:	4620      	mov	r0, r4
 8009e66:	f005 f97f 	bl	800f168 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009e6a:	6822      	ldr	r2, [r4, #0]
 8009e6c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8009e7c:	e7d1      	b.n	8009e22 <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 8009e7e:	2100      	movs	r1, #0
 8009e80:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009e84:	4620      	mov	r0, r4
 8009e86:	f005 fa27 	bl	800f2d8 <HAL_PCDEx_LPM_Callback>
 8009e8a:	e7eb      	b.n	8009e64 <HAL_PCD_IRQHandler+0xd6>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009e8c:	6822      	ldr	r2, [r4, #0]
 8009e8e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	f043 0308 	orr.w	r3, r3, #8
 8009e98:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009e9c:	6822      	ldr	r2, [r4, #0]
 8009e9e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009eae:	6822      	ldr	r2, [r4, #0]
 8009eb0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	f043 0304 	orr.w	r3, r3, #4
 8009eba:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	f005 f942 	bl	800f148 <HAL_PCD_SuspendCallback>
    return;
 8009ec4:	e7ad      	b.n	8009e22 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8009ec6:	6822      	ldr	r2, [r4, #0]
 8009ec8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8009ed8:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8009edc:	b9fb      	cbnz	r3, 8009f1e <HAL_PCD_IRQHandler+0x190>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009ede:	6822      	ldr	r2, [r4, #0]
 8009ee0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	f043 0304 	orr.w	r3, r3, #4
 8009eea:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009eee:	6822      	ldr	r2, [r4, #0]
 8009ef0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	f043 0308 	orr.w	r3, r3, #8
 8009efa:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8009efe:	2101      	movs	r1, #1
 8009f00:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009f0a:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8009f0e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8009f12:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009f16:	4620      	mov	r0, r4
 8009f18:	f005 f9de 	bl	800f2d8 <HAL_PCDEx_LPM_Callback>
 8009f1c:	e781      	b.n	8009e22 <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_SuspendCallback(hpcd);
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f005 f912 	bl	800f148 <HAL_PCD_SuspendCallback>
    return;
 8009f24:	e77d      	b.n	8009e22 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009f26:	6822      	ldr	r2, [r4, #0]
 8009f28:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f005 f8ec 	bl	800f116 <HAL_PCD_SOFCallback>
    return;
 8009f3e:	e770      	b.n	8009e22 <HAL_PCD_IRQHandler+0x94>

08009f40 <HAL_PCD_EP_Open>:
{
 8009f40:	b510      	push	{r4, lr}
 8009f42:	4604      	mov	r4, r0
 8009f44:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8009f46:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009f4a:	d12a      	bne.n	8009fa2 <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f4c:	f001 0007 	and.w	r0, r1, #7
 8009f50:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8009f54:	00c9      	lsls	r1, r1, #3
 8009f56:	f501 7eb4 	add.w	lr, r1, #360	; 0x168
 8009f5a:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 8009f5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009f62:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8009f66:	f04f 0e00 	mov.w	lr, #0
 8009f6a:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f6e:	f00c 0c07 	and.w	ip, ip, #7
 8009f72:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 8009f76:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8009f78:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8009f7a:	784a      	ldrb	r2, [r1, #1]
 8009f7c:	b10a      	cbz	r2, 8009f82 <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8009f7e:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	d019      	beq.n	8009fba <HAL_PCD_EP_Open+0x7a>
  __HAL_LOCK(hpcd);
 8009f86:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d018      	beq.n	8009fc0 <HAL_PCD_EP_Open+0x80>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009f94:	6820      	ldr	r0, [r4, #0]
 8009f96:	f002 fce9 	bl	800c96c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8009fa0:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009fa2:	f001 0007 	and.w	r0, r1, #7
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8009fac:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 8009fb0:	f04f 0e01 	mov.w	lr, #1
 8009fb4:	f881 e001 	strb.w	lr, [r1, #1]
 8009fb8:	e7d9      	b.n	8009f6e <HAL_PCD_EP_Open+0x2e>
    ep->data_pid_start = 0U;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	710b      	strb	r3, [r1, #4]
 8009fbe:	e7e2      	b.n	8009f86 <HAL_PCD_EP_Open+0x46>
  __HAL_LOCK(hpcd);
 8009fc0:	2002      	movs	r0, #2
 8009fc2:	e7ed      	b.n	8009fa0 <HAL_PCD_EP_Open+0x60>

08009fc4 <HAL_PCD_EP_Close>:
{
 8009fc4:	b510      	push	{r4, lr}
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8009fca:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009fce:	d11f      	bne.n	800a010 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009fd0:	f001 0207 	and.w	r2, r1, #7
 8009fd4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8009fd8:	00c9      	lsls	r1, r1, #3
 8009fda:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8009fde:	4401      	add	r1, r0
    ep->is_in = 0U;
 8009fe0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009fe4:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8009fe8:	2000      	movs	r0, #0
 8009fea:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009fee:	f003 0307 	and.w	r3, r3, #7
 8009ff2:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8009ff4:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d013      	beq.n	800a024 <HAL_PCD_EP_Close+0x60>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a002:	6820      	ldr	r0, [r4, #0]
 800a004:	f002 fe7f 	bl	800cd06 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a008:	2000      	movs	r0, #0
 800a00a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800a00e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a010:	f001 0207 	and.w	r2, r1, #7
 800a014:	3201      	adds	r2, #1
 800a016:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800a01a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800a01e:	2001      	movs	r0, #1
 800a020:	7048      	strb	r0, [r1, #1]
 800a022:	e7e4      	b.n	8009fee <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 800a024:	2002      	movs	r0, #2
 800a026:	e7f2      	b.n	800a00e <HAL_PCD_EP_Close+0x4a>

0800a028 <HAL_PCD_EP_Receive>:
{
 800a028:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a02a:	f001 0407 	and.w	r4, r1, #7
 800a02e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800a032:	00c9      	lsls	r1, r1, #3
 800a034:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800a038:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 800a03a:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 800a03e:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800a042:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 800a046:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 800a04a:	2300      	movs	r3, #0
 800a04c:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
  ep->is_in = 0U;
 800a050:	f88c 3169 	strb.w	r3, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800a054:	f88c 4168 	strb.w	r4, [ip, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a058:	b924      	cbnz	r4, 800a064 <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800a05a:	6800      	ldr	r0, [r0, #0]
 800a05c:	f002 ffdd 	bl	800d01a <USB_EPStartXfer>
}
 800a060:	2000      	movs	r0, #0
 800a062:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a064:	6800      	ldr	r0, [r0, #0]
 800a066:	f002 ffd8 	bl	800d01a <USB_EPStartXfer>
 800a06a:	e7f9      	b.n	800a060 <HAL_PCD_EP_Receive+0x38>

0800a06c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a06c:	f001 0107 	and.w	r1, r1, #7
 800a070:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a074:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 800a078:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 800a07c:	4770      	bx	lr

0800a07e <HAL_PCD_EP_Transmit>:
{
 800a07e:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a080:	f001 0407 	and.w	r4, r1, #7
 800a084:	f104 0c01 	add.w	ip, r4, #1
 800a088:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 800a08c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 800a090:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
 800a094:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 800a098:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
  ep->xfer_len = len;
 800a09c:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
  ep->xfer_len_db = len;
 800a0a6:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
  ep->xfer_count = 0U;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44
  ep->is_in = 1U;
 800a0b0:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a0b2:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800a0b6:	f800 403c 	strb.w	r4, [r0, ip, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a0ba:	b924      	cbnz	r4, 800a0c6 <HAL_PCD_EP_Transmit+0x48>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800a0bc:	6800      	ldr	r0, [r0, #0]
 800a0be:	f002 ffac 	bl	800d01a <USB_EPStartXfer>
}
 800a0c2:	2000      	movs	r0, #0
 800a0c4:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a0c6:	6800      	ldr	r0, [r0, #0]
 800a0c8:	f002 ffa7 	bl	800d01a <USB_EPStartXfer>
 800a0cc:	e7f9      	b.n	800a0c2 <HAL_PCD_EP_Transmit+0x44>

0800a0ce <HAL_PCD_EP_SetStall>:
{
 800a0ce:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a0d0:	f001 0207 	and.w	r2, r1, #7
 800a0d4:	6841      	ldr	r1, [r0, #4]
 800a0d6:	428a      	cmp	r2, r1
 800a0d8:	d82a      	bhi.n	800a130 <HAL_PCD_EP_SetStall+0x62>
{
 800a0da:	b510      	push	{r4, lr}
 800a0dc:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800a0de:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a0e2:	d11d      	bne.n	800a120 <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 800a0e4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800a0e8:	00c9      	lsls	r1, r1, #3
 800a0ea:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800a0ee:	4401      	add	r1, r0
    ep->is_in = 0U;
 800a0f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a0f4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 800a0fe:	2301      	movs	r3, #1
 800a100:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a102:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800a104:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d013      	beq.n	800a134 <HAL_PCD_EP_SetStall+0x66>
 800a10c:	2301      	movs	r3, #1
 800a10e:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a112:	6820      	ldr	r0, [r4, #0]
 800a114:	f002 fee2 	bl	800cedc <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800a118:	2000      	movs	r0, #0
 800a11a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800a11e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a120:	1c53      	adds	r3, r2, #1
 800a122:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800a126:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800a12a:	2001      	movs	r0, #1
 800a12c:	7048      	strb	r0, [r1, #1]
 800a12e:	e7e6      	b.n	800a0fe <HAL_PCD_EP_SetStall+0x30>
    return HAL_ERROR;
 800a130:	2001      	movs	r0, #1
}
 800a132:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 800a134:	2002      	movs	r0, #2
 800a136:	e7f2      	b.n	800a11e <HAL_PCD_EP_SetStall+0x50>

0800a138 <HAL_PCD_EP_ClrStall>:
{
 800a138:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a13a:	f001 010f 	and.w	r1, r1, #15
 800a13e:	6842      	ldr	r2, [r0, #4]
 800a140:	4291      	cmp	r1, r2
 800a142:	d830      	bhi.n	800a1a6 <HAL_PCD_EP_ClrStall+0x6e>
{
 800a144:	b510      	push	{r4, lr}
 800a146:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800a148:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a14c:	d121      	bne.n	800a192 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a14e:	f003 0207 	and.w	r2, r3, #7
 800a152:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800a156:	00c9      	lsls	r1, r1, #3
 800a158:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800a15c:	4401      	add	r1, r0
    ep->is_in = 0U;
 800a15e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a162:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800a166:	2000      	movs	r0, #0
 800a168:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 800a16c:	2200      	movs	r2, #0
 800a16e:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a170:	f003 0307 	and.w	r3, r3, #7
 800a174:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800a176:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d015      	beq.n	800a1aa <HAL_PCD_EP_ClrStall+0x72>
 800a17e:	2301      	movs	r3, #1
 800a180:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a184:	6820      	ldr	r0, [r4, #0]
 800a186:	f002 fece 	bl	800cf26 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a18a:	2000      	movs	r0, #0
 800a18c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800a190:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a192:	f003 0207 	and.w	r2, r3, #7
 800a196:	3201      	adds	r2, #1
 800a198:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800a19c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800a1a0:	2001      	movs	r0, #1
 800a1a2:	7048      	strb	r0, [r1, #1]
 800a1a4:	e7e2      	b.n	800a16c <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 800a1a6:	2001      	movs	r0, #1
}
 800a1a8:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 800a1aa:	2002      	movs	r0, #2
 800a1ac:	e7f0      	b.n	800a190 <HAL_PCD_EP_ClrStall+0x58>

0800a1ae <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a1ae:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a1b2:	d00b      	beq.n	800a1cc <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1b4:	f001 0107 	and.w	r1, r1, #7
 800a1b8:	3101      	adds	r1, #1
 800a1ba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a1be:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a1c2:	b952      	cbnz	r2, 800a1da <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a1c4:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a1c6:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 800a1cc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a1d0:	00c9      	lsls	r1, r1, #3
 800a1d2:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800a1d6:	4401      	add	r1, r0
 800a1d8:	e7f3      	b.n	800a1c2 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 800a1da:	2201      	movs	r2, #1
 800a1dc:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a1de:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a1e0:	0c1b      	lsrs	r3, r3, #16
 800a1e2:	814b      	strh	r3, [r1, #10]
 800a1e4:	e7f0      	b.n	800a1c8 <HAL_PCDEx_PMAConfig+0x1a>

0800a1e6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a1e6:	4603      	mov	r3, r0

  USB_TypeDef *USBx = hpcd->Instance;
 800a1e8:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 800a1ea:	2101      	movs	r1, #1
 800a1ec:	f8c0 12e8 	str.w	r1, [r0, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	f883 02e0 	strb.w	r0, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a1f6:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	430b      	orrs	r3, r1
 800a1fe:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a202:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800a206:	b29b      	uxth	r3, r3
 800a208:	f043 0302 	orr.w	r3, r3, #2
 800a20c:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800a210:	4770      	bx	lr
	...

0800a214 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a214:	2800      	cmp	r0, #0
 800a216:	d136      	bne.n	800a286 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a218:	4b3e      	ldr	r3, [pc, #248]	; (800a314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a224:	d008      	beq.n	800a238 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a226:	4a3b      	ldr	r2, [pc, #236]	; (800a314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a228:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800a22c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a230:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a234:	2000      	movs	r0, #0
 800a236:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a238:	4a36      	ldr	r2, [pc, #216]	; (800a314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a23a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800a23e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a242:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a246:	6813      	ldr	r3, [r2, #0]
 800a248:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a24c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a250:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a252:	4b31      	ldr	r3, [pc, #196]	; (800a318 <HAL_PWREx_ControlVoltageScaling+0x104>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2232      	movs	r2, #50	; 0x32
 800a258:	fb02 f303 	mul.w	r3, r2, r3
 800a25c:	4a2f      	ldr	r2, [pc, #188]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x108>)
 800a25e:	fba2 2303 	umull	r2, r3, r2, r3
 800a262:	0c9b      	lsrs	r3, r3, #18
 800a264:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a266:	e000      	b.n	800a26a <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 800a268:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a26a:	4a2a      	ldr	r2, [pc, #168]	; (800a314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a26c:	6952      	ldr	r2, [r2, #20]
 800a26e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800a272:	d001      	beq.n	800a278 <HAL_PWREx_ControlVoltageScaling+0x64>
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1f7      	bne.n	800a268 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a278:	4b26      	ldr	r3, [pc, #152]	; (800a314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a280:	d144      	bne.n	800a30c <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 800a282:	2000      	movs	r0, #0
 800a284:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a286:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a28a:	d008      	beq.n	800a29e <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a28c:	4a21      	ldr	r2, [pc, #132]	; (800a314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a28e:	6813      	ldr	r3, [r2, #0]
 800a290:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a294:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a298:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800a29a:	2000      	movs	r0, #0
 800a29c:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a29e:	4b1d      	ldr	r3, [pc, #116]	; (800a314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a2a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2aa:	d008      	beq.n	800a2be <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a2ac:	4a19      	ldr	r2, [pc, #100]	; (800a314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a2ae:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800a2b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a2be:	4a15      	ldr	r2, [pc, #84]	; (800a314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a2c0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800a2c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a2cc:	6813      	ldr	r3, [r2, #0]
 800a2ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a2d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2d6:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a2d8:	4b0f      	ldr	r3, [pc, #60]	; (800a318 <HAL_PWREx_ControlVoltageScaling+0x104>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2232      	movs	r2, #50	; 0x32
 800a2de:	fb02 f303 	mul.w	r3, r2, r3
 800a2e2:	4a0e      	ldr	r2, [pc, #56]	; (800a31c <HAL_PWREx_ControlVoltageScaling+0x108>)
 800a2e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e8:	0c9b      	lsrs	r3, r3, #18
 800a2ea:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a2ec:	e000      	b.n	800a2f0 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 800a2ee:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a2f0:	4a08      	ldr	r2, [pc, #32]	; (800a314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a2f2:	6952      	ldr	r2, [r2, #20]
 800a2f4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800a2f8:	d001      	beq.n	800a2fe <HAL_PWREx_ControlVoltageScaling+0xea>
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1f7      	bne.n	800a2ee <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a2fe:	4b05      	ldr	r3, [pc, #20]	; (800a314 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a306:	d103      	bne.n	800a310 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 800a308:	2000      	movs	r0, #0
 800a30a:	4770      	bx	lr
        return HAL_TIMEOUT;
 800a30c:	2003      	movs	r0, #3
 800a30e:	4770      	bx	lr
        return HAL_TIMEOUT;
 800a310:	2003      	movs	r0, #3
}
 800a312:	4770      	bx	lr
 800a314:	40007000 	.word	0x40007000
 800a318:	2000008c 	.word	0x2000008c
 800a31c:	431bde83 	.word	0x431bde83

0800a320 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800a320:	4a02      	ldr	r2, [pc, #8]	; (800a32c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800a322:	6893      	ldr	r3, [r2, #8]
 800a324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a328:	6093      	str	r3, [r2, #8]
}
 800a32a:	4770      	bx	lr
 800a32c:	40007000 	.word	0x40007000

0800a330 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a334:	4605      	mov	r5, r0
 800a336:	460f      	mov	r7, r1
 800a338:	4616      	mov	r6, r2
 800a33a:	4699      	mov	r9, r3
 800a33c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a340:	682c      	ldr	r4, [r5, #0]
 800a342:	68a4      	ldr	r4, [r4, #8]
 800a344:	423c      	tst	r4, r7
 800a346:	bf14      	ite	ne
 800a348:	f04f 0c01 	movne.w	ip, #1
 800a34c:	f04f 0c00 	moveq.w	ip, #0
 800a350:	45b4      	cmp	ip, r6
 800a352:	d014      	beq.n	800a37e <QSPI_WaitFlagStateUntilTimeout+0x4e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a354:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a358:	d0f2      	beq.n	800a340 <QSPI_WaitFlagStateUntilTimeout+0x10>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a35a:	f7fc fefb 	bl	8007154 <HAL_GetTick>
 800a35e:	eba0 0009 	sub.w	r0, r0, r9
 800a362:	4540      	cmp	r0, r8
 800a364:	d802      	bhi.n	800a36c <QSPI_WaitFlagStateUntilTimeout+0x3c>
 800a366:	f1b8 0f00 	cmp.w	r8, #0
 800a36a:	d1e9      	bne.n	800a340 <QSPI_WaitFlagStateUntilTimeout+0x10>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a36c:	2304      	movs	r3, #4
 800a36e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a372:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800a374:	f043 0301 	orr.w	r3, r3, #1
 800a378:	646b      	str	r3, [r5, #68]	; 0x44

        return HAL_ERROR;
 800a37a:	2001      	movs	r0, #1
 800a37c:	e000      	b.n	800a380 <QSPI_WaitFlagStateUntilTimeout+0x50>
      }
    }
  }
  return HAL_OK;
 800a37e:	2000      	movs	r0, #0
}
 800a380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a384 <HAL_QSPI_SetTimeout>:
  hqspi->Timeout = Timeout;
 800a384:	6481      	str	r1, [r0, #72]	; 0x48
}
 800a386:	4770      	bx	lr

0800a388 <HAL_QSPI_Init>:
{
 800a388:	b570      	push	{r4, r5, r6, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a38e:	f7fc fee1 	bl	8007154 <HAL_GetTick>
  if(hqspi == NULL)
 800a392:	2c00      	cmp	r4, #0
 800a394:	d04c      	beq.n	800a430 <HAL_QSPI_Init+0xa8>
 800a396:	4606      	mov	r6, r0
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a398:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d03c      	beq.n	800a41a <HAL_QSPI_Init+0x92>
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a3a0:	6825      	ldr	r5, [r4, #0]
 800a3a2:	682a      	ldr	r2, [r5, #0]
 800a3a4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800a3a8:	68a1      	ldr	r1, [r4, #8]
 800a3aa:	3901      	subs	r1, #1
 800a3ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a3b0:	602a      	str	r2, [r5, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a3b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	4633      	mov	r3, r6
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	2120      	movs	r1, #32
 800a3bc:	4620      	mov	r0, r4
 800a3be:	f7ff ffb7 	bl	800a330 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800a3c2:	bb28      	cbnz	r0, 800a410 <HAL_QSPI_Init+0x88>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a3c4:	6821      	ldr	r1, [r4, #0]
 800a3c6:	680b      	ldr	r3, [r1, #0]
 800a3c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a3cc:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800a3d0:	6865      	ldr	r5, [r4, #4]
 800a3d2:	68e2      	ldr	r2, [r4, #12]
 800a3d4:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 800a3d8:	69e5      	ldr	r5, [r4, #28]
 800a3da:	432a      	orrs	r2, r5
 800a3dc:	6a25      	ldr	r5, [r4, #32]
 800a3de:	432a      	orrs	r2, r5
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	600b      	str	r3, [r1, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a3e4:	6821      	ldr	r1, [r4, #0]
 800a3e6:	684a      	ldr	r2, [r1, #4]
 800a3e8:	4b12      	ldr	r3, [pc, #72]	; (800a434 <HAL_QSPI_Init+0xac>)
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	6925      	ldr	r5, [r4, #16]
 800a3ee:	6962      	ldr	r2, [r4, #20]
 800a3f0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800a3f4:	69a5      	ldr	r5, [r4, #24]
 800a3f6:	432a      	orrs	r2, r5
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	604b      	str	r3, [r1, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800a3fc:	6822      	ldr	r2, [r4, #0]
 800a3fe:	6813      	ldr	r3, [r2, #0]
 800a400:	f043 0301 	orr.w	r3, r3, #1
 800a404:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a406:	2300      	movs	r3, #0
 800a408:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800a40a:	2301      	movs	r3, #1
 800a40c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800a410:	2300      	movs	r3, #0
 800a412:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800a416:	b002      	add	sp, #8
 800a418:	bd70      	pop	{r4, r5, r6, pc}
    hqspi->Lock = HAL_UNLOCKED;
 800a41a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 800a41e:	4620      	mov	r0, r4
 800a420:	f7f8 feee 	bl	8003200 <HAL_QSPI_MspInit>
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a424:	f241 3188 	movw	r1, #5000	; 0x1388
 800a428:	4620      	mov	r0, r4
 800a42a:	f7ff ffab 	bl	800a384 <HAL_QSPI_SetTimeout>
 800a42e:	e7b7      	b.n	800a3a0 <HAL_QSPI_Init+0x18>
    return HAL_ERROR;
 800a430:	2001      	movs	r0, #1
 800a432:	e7f0      	b.n	800a416 <HAL_QSPI_Init+0x8e>
 800a434:	ffe0f8fe 	.word	0xffe0f8fe

0800a438 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a438:	4b12      	ldr	r3, [pc, #72]	; (800a484 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 800a43a:	68da      	ldr	r2, [r3, #12]
 800a43c:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a440:	68d8      	ldr	r0, [r3, #12]
 800a442:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800a446:	1c43      	adds	r3, r0, #1

  switch (pllsource)
 800a448:	2a03      	cmp	r2, #3
 800a44a:	d011      	beq.n	800a470 <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a44c:	480e      	ldr	r0, [pc, #56]	; (800a488 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 800a44e:	fbb0 f0f3 	udiv	r0, r0, r3
 800a452:	4b0c      	ldr	r3, [pc, #48]	; (800a484 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800a45a:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a45e:	4b09      	ldr	r3, [pc, #36]	; (800a484 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800a466:	3301      	adds	r3, #1
 800a468:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 800a46a:	fbb0 f0f3 	udiv	r0, r0, r3
 800a46e:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a470:	4806      	ldr	r0, [pc, #24]	; (800a48c <RCC_GetSysClockFreqFromPLLSource+0x54>)
 800a472:	fbb0 f0f3 	udiv	r0, r0, r3
 800a476:	4b03      	ldr	r3, [pc, #12]	; (800a484 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800a47e:	fb03 f000 	mul.w	r0, r3, r0
    break;
 800a482:	e7ec      	b.n	800a45e <RCC_GetSysClockFreqFromPLLSource+0x26>
 800a484:	40021000 	.word	0x40021000
 800a488:	00f42400 	.word	0x00f42400
 800a48c:	007a1200 	.word	0x007a1200

0800a490 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800a490:	2800      	cmp	r0, #0
 800a492:	f000 8254 	beq.w	800a93e <HAL_RCC_OscConfig+0x4ae>
{
 800a496:	b570      	push	{r4, r5, r6, lr}
 800a498:	b082      	sub	sp, #8
 800a49a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a49c:	6803      	ldr	r3, [r0, #0]
 800a49e:	f013 0f01 	tst.w	r3, #1
 800a4a2:	d037      	beq.n	800a514 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4a4:	4aa4      	ldr	r2, [pc, #656]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a4a6:	6893      	ldr	r3, [r2, #8]
 800a4a8:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a4ac:	68d2      	ldr	r2, [r2, #12]
 800a4ae:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a4b2:	2b0c      	cmp	r3, #12
 800a4b4:	d023      	beq.n	800a4fe <HAL_RCC_OscConfig+0x6e>
 800a4b6:	2b08      	cmp	r3, #8
 800a4b8:	d023      	beq.n	800a502 <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a4ba:	6863      	ldr	r3, [r4, #4]
 800a4bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4c0:	d04e      	beq.n	800a560 <HAL_RCC_OscConfig+0xd0>
 800a4c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a4c6:	d051      	beq.n	800a56c <HAL_RCC_OscConfig+0xdc>
 800a4c8:	4b9b      	ldr	r3, [pc, #620]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a4d0:	601a      	str	r2, [r3, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a4d8:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a4da:	6863      	ldr	r3, [r4, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d052      	beq.n	800a586 <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 800a4e0:	f7fc fe38 	bl	8007154 <HAL_GetTick>
 800a4e4:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a4e6:	4b94      	ldr	r3, [pc, #592]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a4ee:	d111      	bne.n	800a514 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4f0:	f7fc fe30 	bl	8007154 <HAL_GetTick>
 800a4f4:	1b40      	subs	r0, r0, r5
 800a4f6:	2864      	cmp	r0, #100	; 0x64
 800a4f8:	d9f5      	bls.n	800a4e6 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 800a4fa:	2003      	movs	r0, #3
 800a4fc:	e228      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a4fe:	2a03      	cmp	r2, #3
 800a500:	d1d9      	bne.n	800a4b6 <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a502:	4b8d      	ldr	r3, [pc, #564]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a50a:	d003      	beq.n	800a514 <HAL_RCC_OscConfig+0x84>
 800a50c:	6863      	ldr	r3, [r4, #4]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f000 8217 	beq.w	800a942 <HAL_RCC_OscConfig+0x4b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	f013 0f02 	tst.w	r3, #2
 800a51a:	d05d      	beq.n	800a5d8 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a51c:	4a86      	ldr	r2, [pc, #536]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a51e:	6893      	ldr	r3, [r2, #8]
 800a520:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a524:	68d2      	ldr	r2, [r2, #12]
 800a526:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a52a:	2b0c      	cmp	r3, #12
 800a52c:	d03a      	beq.n	800a5a4 <HAL_RCC_OscConfig+0x114>
 800a52e:	2b04      	cmp	r3, #4
 800a530:	d03a      	beq.n	800a5a8 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a532:	68e3      	ldr	r3, [r4, #12]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d075      	beq.n	800a624 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 800a538:	4a7f      	ldr	r2, [pc, #508]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a53a:	6813      	ldr	r3, [r2, #0]
 800a53c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a540:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a542:	f7fc fe07 	bl	8007154 <HAL_GetTick>
 800a546:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a548:	4b7b      	ldr	r3, [pc, #492]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a550:	d15f      	bne.n	800a612 <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a552:	f7fc fdff 	bl	8007154 <HAL_GetTick>
 800a556:	1b40      	subs	r0, r0, r5
 800a558:	2802      	cmp	r0, #2
 800a55a:	d9f5      	bls.n	800a548 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 800a55c:	2003      	movs	r0, #3
 800a55e:	e1f7      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a560:	4a75      	ldr	r2, [pc, #468]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a562:	6813      	ldr	r3, [r2, #0]
 800a564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a568:	6013      	str	r3, [r2, #0]
 800a56a:	e7b6      	b.n	800a4da <HAL_RCC_OscConfig+0x4a>
 800a56c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a570:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a57a:	601a      	str	r2, [r3, #0]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a582:	601a      	str	r2, [r3, #0]
 800a584:	e7a9      	b.n	800a4da <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 800a586:	f7fc fde5 	bl	8007154 <HAL_GetTick>
 800a58a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a58c:	4b6a      	ldr	r3, [pc, #424]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a594:	d0be      	beq.n	800a514 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a596:	f7fc fddd 	bl	8007154 <HAL_GetTick>
 800a59a:	1b40      	subs	r0, r0, r5
 800a59c:	2864      	cmp	r0, #100	; 0x64
 800a59e:	d9f5      	bls.n	800a58c <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 800a5a0:	2003      	movs	r0, #3
 800a5a2:	e1d5      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a5a4:	2a02      	cmp	r2, #2
 800a5a6:	d1c2      	bne.n	800a52e <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5a8:	4b63      	ldr	r3, [pc, #396]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a5b0:	d003      	beq.n	800a5ba <HAL_RCC_OscConfig+0x12a>
 800a5b2:	68e3      	ldr	r3, [r4, #12]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f000 81c6 	beq.w	800a946 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5ba:	4a5f      	ldr	r2, [pc, #380]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a5bc:	6853      	ldr	r3, [r2, #4]
 800a5be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a5c2:	6921      	ldr	r1, [r4, #16]
 800a5c4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a5c8:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a5ca:	4b5c      	ldr	r3, [pc, #368]	; (800a73c <HAL_RCC_OscConfig+0x2ac>)
 800a5cc:	6818      	ldr	r0, [r3, #0]
 800a5ce:	f7fc fd7d 	bl	80070cc <HAL_InitTick>
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	f040 81b9 	bne.w	800a94a <HAL_RCC_OscConfig+0x4ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a5d8:	6823      	ldr	r3, [r4, #0]
 800a5da:	f013 0f08 	tst.w	r3, #8
 800a5de:	d04c      	beq.n	800a67a <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a5e0:	6963      	ldr	r3, [r4, #20]
 800a5e2:	b39b      	cbz	r3, 800a64c <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 800a5e4:	4a54      	ldr	r2, [pc, #336]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a5e6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800a5ea:	f043 0301 	orr.w	r3, r3, #1
 800a5ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800a5f2:	f7fc fdaf 	bl	8007154 <HAL_GetTick>
 800a5f6:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a5f8:	4b4f      	ldr	r3, [pc, #316]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a5fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5fe:	f013 0f02 	tst.w	r3, #2
 800a602:	d13a      	bne.n	800a67a <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a604:	f7fc fda6 	bl	8007154 <HAL_GetTick>
 800a608:	1b40      	subs	r0, r0, r5
 800a60a:	2802      	cmp	r0, #2
 800a60c:	d9f4      	bls.n	800a5f8 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 800a60e:	2003      	movs	r0, #3
 800a610:	e19e      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a612:	4a49      	ldr	r2, [pc, #292]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a614:	6853      	ldr	r3, [r2, #4]
 800a616:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a61a:	6921      	ldr	r1, [r4, #16]
 800a61c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a620:	6053      	str	r3, [r2, #4]
 800a622:	e7d9      	b.n	800a5d8 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 800a624:	4a44      	ldr	r2, [pc, #272]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a626:	6813      	ldr	r3, [r2, #0]
 800a628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a62c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a62e:	f7fc fd91 	bl	8007154 <HAL_GetTick>
 800a632:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a634:	4b40      	ldr	r3, [pc, #256]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a63c:	d0cc      	beq.n	800a5d8 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a63e:	f7fc fd89 	bl	8007154 <HAL_GetTick>
 800a642:	1b40      	subs	r0, r0, r5
 800a644:	2802      	cmp	r0, #2
 800a646:	d9f5      	bls.n	800a634 <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 800a648:	2003      	movs	r0, #3
 800a64a:	e181      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_LSI_DISABLE();
 800a64c:	4a3a      	ldr	r2, [pc, #232]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a64e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800a652:	f023 0301 	bic.w	r3, r3, #1
 800a656:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800a65a:	f7fc fd7b 	bl	8007154 <HAL_GetTick>
 800a65e:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a660:	4b35      	ldr	r3, [pc, #212]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a666:	f013 0f02 	tst.w	r3, #2
 800a66a:	d006      	beq.n	800a67a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a66c:	f7fc fd72 	bl	8007154 <HAL_GetTick>
 800a670:	1b40      	subs	r0, r0, r5
 800a672:	2802      	cmp	r0, #2
 800a674:	d9f4      	bls.n	800a660 <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 800a676:	2003      	movs	r0, #3
 800a678:	e16a      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	f013 0f04 	tst.w	r3, #4
 800a680:	f000 8081 	beq.w	800a786 <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a684:	4b2c      	ldr	r3, [pc, #176]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a688:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800a68c:	d136      	bne.n	800a6fc <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a68e:	4b2a      	ldr	r3, [pc, #168]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a690:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a692:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a696:	659a      	str	r2, [r3, #88]	; 0x58
 800a698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a69a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a69e:	9301      	str	r3, [sp, #4]
 800a6a0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a6a2:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a6a4:	4b26      	ldr	r3, [pc, #152]	; (800a740 <HAL_RCC_OscConfig+0x2b0>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a6ac:	d028      	beq.n	800a700 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a6ae:	68a3      	ldr	r3, [r4, #8]
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d039      	beq.n	800a728 <HAL_RCC_OscConfig+0x298>
 800a6b4:	2b05      	cmp	r3, #5
 800a6b6:	d045      	beq.n	800a744 <HAL_RCC_OscConfig+0x2b4>
 800a6b8:	4b1f      	ldr	r3, [pc, #124]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a6ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a6be:	f022 0201 	bic.w	r2, r2, #1
 800a6c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800a6c6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a6ca:	f022 0204 	bic.w	r2, r2, #4
 800a6ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a6d2:	68a3      	ldr	r3, [r4, #8]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d043      	beq.n	800a760 <HAL_RCC_OscConfig+0x2d0>
      tickstart = HAL_GetTick();
 800a6d8:	f7fc fd3c 	bl	8007154 <HAL_GetTick>
 800a6dc:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6de:	4b16      	ldr	r3, [pc, #88]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a6e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6e4:	f013 0f02 	tst.w	r3, #2
 800a6e8:	d14c      	bne.n	800a784 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6ea:	f7fc fd33 	bl	8007154 <HAL_GetTick>
 800a6ee:	1b80      	subs	r0, r0, r6
 800a6f0:	f241 3388 	movw	r3, #5000	; 0x1388
 800a6f4:	4298      	cmp	r0, r3
 800a6f6:	d9f2      	bls.n	800a6de <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 800a6f8:	2003      	movs	r0, #3
 800a6fa:	e129      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
    FlagStatus       pwrclkchanged = RESET;
 800a6fc:	2500      	movs	r5, #0
 800a6fe:	e7d1      	b.n	800a6a4 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a700:	4a0f      	ldr	r2, [pc, #60]	; (800a740 <HAL_RCC_OscConfig+0x2b0>)
 800a702:	6813      	ldr	r3, [r2, #0]
 800a704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a708:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800a70a:	f7fc fd23 	bl	8007154 <HAL_GetTick>
 800a70e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a710:	4b0b      	ldr	r3, [pc, #44]	; (800a740 <HAL_RCC_OscConfig+0x2b0>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a718:	d1c9      	bne.n	800a6ae <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a71a:	f7fc fd1b 	bl	8007154 <HAL_GetTick>
 800a71e:	1b80      	subs	r0, r0, r6
 800a720:	2802      	cmp	r0, #2
 800a722:	d9f5      	bls.n	800a710 <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 800a724:	2003      	movs	r0, #3
 800a726:	e113      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a728:	4a03      	ldr	r2, [pc, #12]	; (800a738 <HAL_RCC_OscConfig+0x2a8>)
 800a72a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800a72e:	f043 0301 	orr.w	r3, r3, #1
 800a732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a736:	e7cc      	b.n	800a6d2 <HAL_RCC_OscConfig+0x242>
 800a738:	40021000 	.word	0x40021000
 800a73c:	20000584 	.word	0x20000584
 800a740:	40007000 	.word	0x40007000
 800a744:	4b8a      	ldr	r3, [pc, #552]	; (800a970 <HAL_RCC_OscConfig+0x4e0>)
 800a746:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a74a:	f042 0204 	orr.w	r2, r2, #4
 800a74e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800a752:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a756:	f042 0201 	orr.w	r2, r2, #1
 800a75a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800a75e:	e7b8      	b.n	800a6d2 <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 800a760:	f7fc fcf8 	bl	8007154 <HAL_GetTick>
 800a764:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a766:	4b82      	ldr	r3, [pc, #520]	; (800a970 <HAL_RCC_OscConfig+0x4e0>)
 800a768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a76c:	f013 0f02 	tst.w	r3, #2
 800a770:	d008      	beq.n	800a784 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a772:	f7fc fcef 	bl	8007154 <HAL_GetTick>
 800a776:	1b80      	subs	r0, r0, r6
 800a778:	f241 3388 	movw	r3, #5000	; 0x1388
 800a77c:	4298      	cmp	r0, r3
 800a77e:	d9f2      	bls.n	800a766 <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 800a780:	2003      	movs	r0, #3
 800a782:	e0e5      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
    if (pwrclkchanged == SET)
 800a784:	b9e5      	cbnz	r5, 800a7c0 <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a786:	6823      	ldr	r3, [r4, #0]
 800a788:	f013 0f20 	tst.w	r3, #32
 800a78c:	d035      	beq.n	800a7fa <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a78e:	69a3      	ldr	r3, [r4, #24]
 800a790:	b1e3      	cbz	r3, 800a7cc <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 800a792:	4a77      	ldr	r2, [pc, #476]	; (800a970 <HAL_RCC_OscConfig+0x4e0>)
 800a794:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800a798:	f043 0301 	orr.w	r3, r3, #1
 800a79c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800a7a0:	f7fc fcd8 	bl	8007154 <HAL_GetTick>
 800a7a4:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a7a6:	4b72      	ldr	r3, [pc, #456]	; (800a970 <HAL_RCC_OscConfig+0x4e0>)
 800a7a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a7ac:	f013 0f02 	tst.w	r3, #2
 800a7b0:	d123      	bne.n	800a7fa <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a7b2:	f7fc fccf 	bl	8007154 <HAL_GetTick>
 800a7b6:	1b40      	subs	r0, r0, r5
 800a7b8:	2802      	cmp	r0, #2
 800a7ba:	d9f4      	bls.n	800a7a6 <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 800a7bc:	2003      	movs	r0, #3
 800a7be:	e0c7      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a7c0:	4a6b      	ldr	r2, [pc, #428]	; (800a970 <HAL_RCC_OscConfig+0x4e0>)
 800a7c2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a7c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7c8:	6593      	str	r3, [r2, #88]	; 0x58
 800a7ca:	e7dc      	b.n	800a786 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 800a7cc:	4a68      	ldr	r2, [pc, #416]	; (800a970 <HAL_RCC_OscConfig+0x4e0>)
 800a7ce:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800a7d2:	f023 0301 	bic.w	r3, r3, #1
 800a7d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800a7da:	f7fc fcbb 	bl	8007154 <HAL_GetTick>
 800a7de:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a7e0:	4b63      	ldr	r3, [pc, #396]	; (800a970 <HAL_RCC_OscConfig+0x4e0>)
 800a7e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a7e6:	f013 0f02 	tst.w	r3, #2
 800a7ea:	d006      	beq.n	800a7fa <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a7ec:	f7fc fcb2 	bl	8007154 <HAL_GetTick>
 800a7f0:	1b40      	subs	r0, r0, r5
 800a7f2:	2802      	cmp	r0, #2
 800a7f4:	d9f4      	bls.n	800a7e0 <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 800a7f6:	2003      	movs	r0, #3
 800a7f8:	e0aa      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a7fa:	69e3      	ldr	r3, [r4, #28]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f000 80a6 	beq.w	800a94e <HAL_RCC_OscConfig+0x4be>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a802:	4a5b      	ldr	r2, [pc, #364]	; (800a970 <HAL_RCC_OscConfig+0x4e0>)
 800a804:	6892      	ldr	r2, [r2, #8]
 800a806:	f002 020c 	and.w	r2, r2, #12
 800a80a:	2a0c      	cmp	r2, #12
 800a80c:	d069      	beq.n	800a8e2 <HAL_RCC_OscConfig+0x452>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a80e:	2b02      	cmp	r3, #2
 800a810:	d01d      	beq.n	800a84e <HAL_RCC_OscConfig+0x3be>
        __HAL_RCC_PLL_DISABLE();
 800a812:	4b57      	ldr	r3, [pc, #348]	; (800a970 <HAL_RCC_OscConfig+0x4e0>)
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a81a:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a81c:	68da      	ldr	r2, [r3, #12]
 800a81e:	f022 0203 	bic.w	r2, r2, #3
 800a822:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a824:	68da      	ldr	r2, [r3, #12]
 800a826:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 800a82a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a82e:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 800a830:	f7fc fc90 	bl	8007154 <HAL_GetTick>
 800a834:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a836:	4b4e      	ldr	r3, [pc, #312]	; (800a970 <HAL_RCC_OscConfig+0x4e0>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a83e:	d04e      	beq.n	800a8de <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a840:	f7fc fc88 	bl	8007154 <HAL_GetTick>
 800a844:	1b00      	subs	r0, r0, r4
 800a846:	2802      	cmp	r0, #2
 800a848:	d9f5      	bls.n	800a836 <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 800a84a:	2003      	movs	r0, #3
 800a84c:	e080      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_DISABLE();
 800a84e:	4a48      	ldr	r2, [pc, #288]	; (800a970 <HAL_RCC_OscConfig+0x4e0>)
 800a850:	6813      	ldr	r3, [r2, #0]
 800a852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a856:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a858:	f7fc fc7c 	bl	8007154 <HAL_GetTick>
 800a85c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a85e:	4b44      	ldr	r3, [pc, #272]	; (800a970 <HAL_RCC_OscConfig+0x4e0>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a866:	d006      	beq.n	800a876 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a868:	f7fc fc74 	bl	8007154 <HAL_GetTick>
 800a86c:	1b40      	subs	r0, r0, r5
 800a86e:	2802      	cmp	r0, #2
 800a870:	d9f5      	bls.n	800a85e <HAL_RCC_OscConfig+0x3ce>
            return HAL_TIMEOUT;
 800a872:	2003      	movs	r0, #3
 800a874:	e06c      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a876:	4a3e      	ldr	r2, [pc, #248]	; (800a970 <HAL_RCC_OscConfig+0x4e0>)
 800a878:	68d3      	ldr	r3, [r2, #12]
 800a87a:	493e      	ldr	r1, [pc, #248]	; (800a974 <HAL_RCC_OscConfig+0x4e4>)
 800a87c:	4019      	ands	r1, r3
 800a87e:	6a23      	ldr	r3, [r4, #32]
 800a880:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a882:	3801      	subs	r0, #1
 800a884:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800a888:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800a88a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800a88e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a890:	0840      	lsrs	r0, r0, #1
 800a892:	3801      	subs	r0, #1
 800a894:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 800a898:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a89a:	0840      	lsrs	r0, r0, #1
 800a89c:	3801      	subs	r0, #1
 800a89e:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800a8a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a8a4:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 800a8a8:	430b      	orrs	r3, r1
 800a8aa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 800a8ac:	6813      	ldr	r3, [r2, #0]
 800a8ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a8b2:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a8b4:	68d3      	ldr	r3, [r2, #12]
 800a8b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a8ba:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800a8bc:	f7fc fc4a 	bl	8007154 <HAL_GetTick>
 800a8c0:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8c2:	4b2b      	ldr	r3, [pc, #172]	; (800a970 <HAL_RCC_OscConfig+0x4e0>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a8ca:	d106      	bne.n	800a8da <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8cc:	f7fc fc42 	bl	8007154 <HAL_GetTick>
 800a8d0:	1b00      	subs	r0, r0, r4
 800a8d2:	2802      	cmp	r0, #2
 800a8d4:	d9f5      	bls.n	800a8c2 <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 800a8d6:	2003      	movs	r0, #3
 800a8d8:	e03a      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 800a8da:	2000      	movs	r0, #0
 800a8dc:	e038      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
 800a8de:	2000      	movs	r0, #0
 800a8e0:	e036      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d036      	beq.n	800a954 <HAL_RCC_OscConfig+0x4c4>
      temp_pllckcfg = RCC->PLLCFGR;
 800a8e6:	4b22      	ldr	r3, [pc, #136]	; (800a970 <HAL_RCC_OscConfig+0x4e0>)
 800a8e8:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8ea:	f003 0103 	and.w	r1, r3, #3
 800a8ee:	6a22      	ldr	r2, [r4, #32]
 800a8f0:	4291      	cmp	r1, r2
 800a8f2:	d131      	bne.n	800a958 <HAL_RCC_OscConfig+0x4c8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a8f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a8f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a8fa:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8fc:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800a900:	d12c      	bne.n	800a95c <HAL_RCC_OscConfig+0x4cc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a902:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a906:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a908:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800a90c:	d128      	bne.n	800a960 <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a90e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a912:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a914:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800a918:	d124      	bne.n	800a964 <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a91a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800a91e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a920:	0852      	lsrs	r2, r2, #1
 800a922:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a924:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800a928:	d11e      	bne.n	800a968 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a92a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800a92e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a930:	0852      	lsrs	r2, r2, #1
 800a932:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a934:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800a938:	d118      	bne.n	800a96c <HAL_RCC_OscConfig+0x4dc>
  return HAL_OK;
 800a93a:	2000      	movs	r0, #0
 800a93c:	e008      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
    return HAL_ERROR;
 800a93e:	2001      	movs	r0, #1
}
 800a940:	4770      	bx	lr
        return HAL_ERROR;
 800a942:	2001      	movs	r0, #1
 800a944:	e004      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 800a946:	2001      	movs	r0, #1
 800a948:	e002      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
          return HAL_ERROR;
 800a94a:	2001      	movs	r0, #1
 800a94c:	e000      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 800a94e:	2000      	movs	r0, #0
}
 800a950:	b002      	add	sp, #8
 800a952:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800a954:	2001      	movs	r0, #1
 800a956:	e7fb      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 800a958:	2001      	movs	r0, #1
 800a95a:	e7f9      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
 800a95c:	2001      	movs	r0, #1
 800a95e:	e7f7      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
 800a960:	2001      	movs	r0, #1
 800a962:	e7f5      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
 800a964:	2001      	movs	r0, #1
 800a966:	e7f3      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
 800a968:	2001      	movs	r0, #1
 800a96a:	e7f1      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
 800a96c:	2001      	movs	r0, #1
 800a96e:	e7ef      	b.n	800a950 <HAL_RCC_OscConfig+0x4c0>
 800a970:	40021000 	.word	0x40021000
 800a974:	019f800c 	.word	0x019f800c

0800a978 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a978:	4b1e      	ldr	r3, [pc, #120]	; (800a9f4 <HAL_RCC_GetSysClockFreq+0x7c>)
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	f003 030c 	and.w	r3, r3, #12
 800a980:	2b04      	cmp	r3, #4
 800a982:	d033      	beq.n	800a9ec <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a984:	4b1b      	ldr	r3, [pc, #108]	; (800a9f4 <HAL_RCC_GetSysClockFreq+0x7c>)
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	f003 030c 	and.w	r3, r3, #12
 800a98c:	2b08      	cmp	r3, #8
 800a98e:	d02f      	beq.n	800a9f0 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a990:	4b18      	ldr	r3, [pc, #96]	; (800a9f4 <HAL_RCC_GetSysClockFreq+0x7c>)
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	f003 030c 	and.w	r3, r3, #12
 800a998:	2b0c      	cmp	r3, #12
 800a99a:	d001      	beq.n	800a9a0 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 800a99c:	2000      	movs	r0, #0
}
 800a99e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a9a0:	4b14      	ldr	r3, [pc, #80]	; (800a9f4 <HAL_RCC_GetSysClockFreq+0x7c>)
 800a9a2:	68da      	ldr	r2, [r3, #12]
 800a9a4:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a9a8:	68d8      	ldr	r0, [r3, #12]
 800a9aa:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800a9ae:	1c43      	adds	r3, r0, #1
    switch (pllsource)
 800a9b0:	2a03      	cmp	r2, #3
 800a9b2:	d011      	beq.n	800a9d8 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a9b4:	4810      	ldr	r0, [pc, #64]	; (800a9f8 <HAL_RCC_GetSysClockFreq+0x80>)
 800a9b6:	fbb0 f0f3 	udiv	r0, r0, r3
 800a9ba:	4b0e      	ldr	r3, [pc, #56]	; (800a9f4 <HAL_RCC_GetSysClockFreq+0x7c>)
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800a9c2:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a9c6:	4b0b      	ldr	r3, [pc, #44]	; (800a9f4 <HAL_RCC_GetSysClockFreq+0x7c>)
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800a9d2:	fbb0 f0f3 	udiv	r0, r0, r3
 800a9d6:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a9d8:	4808      	ldr	r0, [pc, #32]	; (800a9fc <HAL_RCC_GetSysClockFreq+0x84>)
 800a9da:	fbb0 f0f3 	udiv	r0, r0, r3
 800a9de:	4b05      	ldr	r3, [pc, #20]	; (800a9f4 <HAL_RCC_GetSysClockFreq+0x7c>)
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800a9e6:	fb03 f000 	mul.w	r0, r3, r0
      break;
 800a9ea:	e7ec      	b.n	800a9c6 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 800a9ec:	4802      	ldr	r0, [pc, #8]	; (800a9f8 <HAL_RCC_GetSysClockFreq+0x80>)
 800a9ee:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800a9f0:	4802      	ldr	r0, [pc, #8]	; (800a9fc <HAL_RCC_GetSysClockFreq+0x84>)
 800a9f2:	4770      	bx	lr
 800a9f4:	40021000 	.word	0x40021000
 800a9f8:	00f42400 	.word	0x00f42400
 800a9fc:	007a1200 	.word	0x007a1200

0800aa00 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800aa00:	2800      	cmp	r0, #0
 800aa02:	f000 80e6 	beq.w	800abd2 <HAL_RCC_ClockConfig+0x1d2>
{
 800aa06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa08:	460c      	mov	r4, r1
 800aa0a:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa0c:	4b74      	ldr	r3, [pc, #464]	; (800abe0 <HAL_RCC_ClockConfig+0x1e0>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f003 030f 	and.w	r3, r3, #15
 800aa14:	428b      	cmp	r3, r1
 800aa16:	d20b      	bcs.n	800aa30 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa18:	4a71      	ldr	r2, [pc, #452]	; (800abe0 <HAL_RCC_ClockConfig+0x1e0>)
 800aa1a:	6813      	ldr	r3, [r2, #0]
 800aa1c:	f023 030f 	bic.w	r3, r3, #15
 800aa20:	430b      	orrs	r3, r1
 800aa22:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa24:	6813      	ldr	r3, [r2, #0]
 800aa26:	f003 030f 	and.w	r3, r3, #15
 800aa2a:	428b      	cmp	r3, r1
 800aa2c:	f040 80d3 	bne.w	800abd6 <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa30:	682e      	ldr	r6, [r5, #0]
 800aa32:	f016 0601 	ands.w	r6, r6, #1
 800aa36:	d05f      	beq.n	800aaf8 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa38:	686b      	ldr	r3, [r5, #4]
 800aa3a:	2b03      	cmp	r3, #3
 800aa3c:	d02f      	beq.n	800aa9e <HAL_RCC_ClockConfig+0x9e>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa3e:	2b02      	cmp	r3, #2
 800aa40:	d04d      	beq.n	800aade <HAL_RCC_ClockConfig+0xde>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aa42:	4b68      	ldr	r3, [pc, #416]	; (800abe4 <HAL_RCC_ClockConfig+0x1e4>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800aa4a:	f000 80c6 	beq.w	800abda <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 800aa4e:	f7ff ff93 	bl	800a978 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800aa52:	4b65      	ldr	r3, [pc, #404]	; (800abe8 <HAL_RCC_ClockConfig+0x1e8>)
 800aa54:	4298      	cmp	r0, r3
 800aa56:	d94d      	bls.n	800aaf4 <HAL_RCC_ClockConfig+0xf4>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800aa58:	4a62      	ldr	r2, [pc, #392]	; (800abe4 <HAL_RCC_ClockConfig+0x1e4>)
 800aa5a:	6893      	ldr	r3, [r2, #8]
 800aa5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800aa66:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aa68:	4a5e      	ldr	r2, [pc, #376]	; (800abe4 <HAL_RCC_ClockConfig+0x1e4>)
 800aa6a:	6893      	ldr	r3, [r2, #8]
 800aa6c:	f023 0303 	bic.w	r3, r3, #3
 800aa70:	6869      	ldr	r1, [r5, #4]
 800aa72:	430b      	orrs	r3, r1
 800aa74:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800aa76:	f7fc fb6d 	bl	8007154 <HAL_GetTick>
 800aa7a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa7c:	4b59      	ldr	r3, [pc, #356]	; (800abe4 <HAL_RCC_ClockConfig+0x1e4>)
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	f003 030c 	and.w	r3, r3, #12
 800aa84:	686a      	ldr	r2, [r5, #4]
 800aa86:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800aa8a:	d035      	beq.n	800aaf8 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa8c:	f7fc fb62 	bl	8007154 <HAL_GetTick>
 800aa90:	1bc0      	subs	r0, r0, r7
 800aa92:	f241 3388 	movw	r3, #5000	; 0x1388
 800aa96:	4298      	cmp	r0, r3
 800aa98:	d9f0      	bls.n	800aa7c <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 800aa9a:	2003      	movs	r0, #3
 800aa9c:	e078      	b.n	800ab90 <HAL_RCC_ClockConfig+0x190>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aa9e:	4b51      	ldr	r3, [pc, #324]	; (800abe4 <HAL_RCC_ClockConfig+0x1e4>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800aaa6:	d101      	bne.n	800aaac <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 800aaa8:	2001      	movs	r0, #1
 800aaaa:	e071      	b.n	800ab90 <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800aaac:	f7ff fcc4 	bl	800a438 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 800aab0:	4b4d      	ldr	r3, [pc, #308]	; (800abe8 <HAL_RCC_ClockConfig+0x1e8>)
 800aab2:	4298      	cmp	r0, r3
 800aab4:	d91a      	bls.n	800aaec <HAL_RCC_ClockConfig+0xec>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800aab6:	4b4b      	ldr	r3, [pc, #300]	; (800abe4 <HAL_RCC_ClockConfig+0x1e4>)
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800aabe:	d005      	beq.n	800aacc <HAL_RCC_ClockConfig+0xcc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800aac0:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800aac2:	f016 0602 	ands.w	r6, r6, #2
 800aac6:	d0cf      	beq.n	800aa68 <HAL_RCC_ClockConfig+0x68>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800aac8:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800aaca:	b98b      	cbnz	r3, 800aaf0 <HAL_RCC_ClockConfig+0xf0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800aacc:	4a45      	ldr	r2, [pc, #276]	; (800abe4 <HAL_RCC_ClockConfig+0x1e4>)
 800aace:	6893      	ldr	r3, [r2, #8]
 800aad0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800aada:	2680      	movs	r6, #128	; 0x80
 800aadc:	e7c4      	b.n	800aa68 <HAL_RCC_ClockConfig+0x68>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aade:	4b41      	ldr	r3, [pc, #260]	; (800abe4 <HAL_RCC_ClockConfig+0x1e4>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800aae6:	d1b2      	bne.n	800aa4e <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 800aae8:	2001      	movs	r0, #1
 800aaea:	e051      	b.n	800ab90 <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800aaec:	2600      	movs	r6, #0
 800aaee:	e7bb      	b.n	800aa68 <HAL_RCC_ClockConfig+0x68>
 800aaf0:	2600      	movs	r6, #0
 800aaf2:	e7b9      	b.n	800aa68 <HAL_RCC_ClockConfig+0x68>
 800aaf4:	2600      	movs	r6, #0
 800aaf6:	e7b7      	b.n	800aa68 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aaf8:	682b      	ldr	r3, [r5, #0]
 800aafa:	f013 0f02 	tst.w	r3, #2
 800aafe:	d048      	beq.n	800ab92 <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab00:	f013 0f04 	tst.w	r3, #4
 800ab04:	d004      	beq.n	800ab10 <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ab06:	4a37      	ldr	r2, [pc, #220]	; (800abe4 <HAL_RCC_ClockConfig+0x1e4>)
 800ab08:	6893      	ldr	r3, [r2, #8]
 800ab0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ab0e:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab10:	682b      	ldr	r3, [r5, #0]
 800ab12:	f013 0f08 	tst.w	r3, #8
 800ab16:	d006      	beq.n	800ab26 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800ab18:	4a32      	ldr	r2, [pc, #200]	; (800abe4 <HAL_RCC_ClockConfig+0x1e4>)
 800ab1a:	6893      	ldr	r3, [r2, #8]
 800ab1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ab20:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ab24:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab26:	4a2f      	ldr	r2, [pc, #188]	; (800abe4 <HAL_RCC_ClockConfig+0x1e4>)
 800ab28:	6893      	ldr	r3, [r2, #8]
 800ab2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab2e:	68a9      	ldr	r1, [r5, #8]
 800ab30:	430b      	orrs	r3, r1
 800ab32:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ab34:	4b2a      	ldr	r3, [pc, #168]	; (800abe0 <HAL_RCC_ClockConfig+0x1e0>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 030f 	and.w	r3, r3, #15
 800ab3c:	42a3      	cmp	r3, r4
 800ab3e:	d830      	bhi.n	800aba2 <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab40:	682b      	ldr	r3, [r5, #0]
 800ab42:	f013 0f04 	tst.w	r3, #4
 800ab46:	d006      	beq.n	800ab56 <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ab48:	4a26      	ldr	r2, [pc, #152]	; (800abe4 <HAL_RCC_ClockConfig+0x1e4>)
 800ab4a:	6893      	ldr	r3, [r2, #8]
 800ab4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800ab50:	68e9      	ldr	r1, [r5, #12]
 800ab52:	430b      	orrs	r3, r1
 800ab54:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab56:	682b      	ldr	r3, [r5, #0]
 800ab58:	f013 0f08 	tst.w	r3, #8
 800ab5c:	d007      	beq.n	800ab6e <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ab5e:	4a21      	ldr	r2, [pc, #132]	; (800abe4 <HAL_RCC_ClockConfig+0x1e4>)
 800ab60:	6893      	ldr	r3, [r2, #8]
 800ab62:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800ab66:	6929      	ldr	r1, [r5, #16]
 800ab68:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800ab6c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ab6e:	f7ff ff03 	bl	800a978 <HAL_RCC_GetSysClockFreq>
 800ab72:	4b1c      	ldr	r3, [pc, #112]	; (800abe4 <HAL_RCC_ClockConfig+0x1e4>)
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ab7a:	4a1c      	ldr	r2, [pc, #112]	; (800abec <HAL_RCC_ClockConfig+0x1ec>)
 800ab7c:	5cd3      	ldrb	r3, [r2, r3]
 800ab7e:	f003 031f 	and.w	r3, r3, #31
 800ab82:	40d8      	lsrs	r0, r3
 800ab84:	4b1a      	ldr	r3, [pc, #104]	; (800abf0 <HAL_RCC_ClockConfig+0x1f0>)
 800ab86:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800ab88:	4b1a      	ldr	r3, [pc, #104]	; (800abf4 <HAL_RCC_ClockConfig+0x1f4>)
 800ab8a:	6818      	ldr	r0, [r3, #0]
 800ab8c:	f7fc fa9e 	bl	80070cc <HAL_InitTick>
}
 800ab90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 800ab92:	2e80      	cmp	r6, #128	; 0x80
 800ab94:	d1ce      	bne.n	800ab34 <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ab96:	4a13      	ldr	r2, [pc, #76]	; (800abe4 <HAL_RCC_ClockConfig+0x1e4>)
 800ab98:	6893      	ldr	r3, [r2, #8]
 800ab9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab9e:	6093      	str	r3, [r2, #8]
 800aba0:	e7c8      	b.n	800ab34 <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aba2:	4a0f      	ldr	r2, [pc, #60]	; (800abe0 <HAL_RCC_ClockConfig+0x1e0>)
 800aba4:	6813      	ldr	r3, [r2, #0]
 800aba6:	f023 030f 	bic.w	r3, r3, #15
 800abaa:	4323      	orrs	r3, r4
 800abac:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800abae:	f7fc fad1 	bl	8007154 <HAL_GetTick>
 800abb2:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800abb4:	4b0a      	ldr	r3, [pc, #40]	; (800abe0 <HAL_RCC_ClockConfig+0x1e0>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 030f 	and.w	r3, r3, #15
 800abbc:	42a3      	cmp	r3, r4
 800abbe:	d0bf      	beq.n	800ab40 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800abc0:	f7fc fac8 	bl	8007154 <HAL_GetTick>
 800abc4:	1b80      	subs	r0, r0, r6
 800abc6:	f241 3388 	movw	r3, #5000	; 0x1388
 800abca:	4298      	cmp	r0, r3
 800abcc:	d9f2      	bls.n	800abb4 <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 800abce:	2003      	movs	r0, #3
 800abd0:	e7de      	b.n	800ab90 <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 800abd2:	2001      	movs	r0, #1
}
 800abd4:	4770      	bx	lr
      return HAL_ERROR;
 800abd6:	2001      	movs	r0, #1
 800abd8:	e7da      	b.n	800ab90 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 800abda:	2001      	movs	r0, #1
 800abdc:	e7d8      	b.n	800ab90 <HAL_RCC_ClockConfig+0x190>
 800abde:	bf00      	nop
 800abe0:	40022000 	.word	0x40022000
 800abe4:	40021000 	.word	0x40021000
 800abe8:	04c4b400 	.word	0x04c4b400
 800abec:	08015180 	.word	0x08015180
 800abf0:	2000008c 	.word	0x2000008c
 800abf4:	20000584 	.word	0x20000584

0800abf8 <HAL_RCC_GetHCLKFreq>:
}
 800abf8:	4b01      	ldr	r3, [pc, #4]	; (800ac00 <HAL_RCC_GetHCLKFreq+0x8>)
 800abfa:	6818      	ldr	r0, [r3, #0]
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	2000008c 	.word	0x2000008c

0800ac04 <HAL_RCC_GetPCLK1Freq>:
{
 800ac04:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ac06:	f7ff fff7 	bl	800abf8 <HAL_RCC_GetHCLKFreq>
 800ac0a:	4b05      	ldr	r3, [pc, #20]	; (800ac20 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800ac12:	4a04      	ldr	r2, [pc, #16]	; (800ac24 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ac14:	5cd3      	ldrb	r3, [r2, r3]
 800ac16:	f003 031f 	and.w	r3, r3, #31
}
 800ac1a:	40d8      	lsrs	r0, r3
 800ac1c:	bd08      	pop	{r3, pc}
 800ac1e:	bf00      	nop
 800ac20:	40021000 	.word	0x40021000
 800ac24:	08015190 	.word	0x08015190

0800ac28 <HAL_RCC_GetPCLK2Freq>:
{
 800ac28:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ac2a:	f7ff ffe5 	bl	800abf8 <HAL_RCC_GetHCLKFreq>
 800ac2e:	4b05      	ldr	r3, [pc, #20]	; (800ac44 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800ac36:	4a04      	ldr	r2, [pc, #16]	; (800ac48 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ac38:	5cd3      	ldrb	r3, [r2, r3]
 800ac3a:	f003 031f 	and.w	r3, r3, #31
}
 800ac3e:	40d8      	lsrs	r0, r3
 800ac40:	bd08      	pop	{r3, pc}
 800ac42:	bf00      	nop
 800ac44:	40021000 	.word	0x40021000
 800ac48:	08015190 	.word	0x08015190

0800ac4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ac52:	6803      	ldr	r3, [r0, #0]
 800ac54:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800ac58:	d06e      	beq.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0xec>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac5a:	4b35      	ldr	r3, [pc, #212]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800ac5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac5e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800ac62:	d11e      	bne.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac64:	4b32      	ldr	r3, [pc, #200]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800ac66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ac68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ac6c:	659a      	str	r2, [r3, #88]	; 0x58
 800ac6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac74:	9301      	str	r3, [sp, #4]
 800ac76:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800ac78:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac7a:	4a2e      	ldr	r2, [pc, #184]	; (800ad34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ac7c:	6813      	ldr	r3, [r2, #0]
 800ac7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ac84:	f7fc fa66 	bl	8007154 <HAL_GetTick>
 800ac88:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac8a:	4b2a      	ldr	r3, [pc, #168]	; (800ad34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f413 7f80 	tst.w	r3, #256	; 0x100
 800ac92:	d108      	bne.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac94:	f7fc fa5e 	bl	8007154 <HAL_GetTick>
 800ac98:	1b40      	subs	r0, r0, r5
 800ac9a:	2802      	cmp	r0, #2
 800ac9c:	d9f5      	bls.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 800ac9e:	2503      	movs	r5, #3
 800aca0:	e002      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 800aca2:	2600      	movs	r6, #0
 800aca4:	e7e9      	b.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aca6:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 800aca8:	bb45      	cbnz	r5, 800acfc <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800acaa:	4b21      	ldr	r3, [pc, #132]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800acac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800acb0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800acb4:	d015      	beq.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x96>
 800acb6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800acb8:	429a      	cmp	r2, r3
 800acba:	d012      	beq.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800acbc:	4a1c      	ldr	r2, [pc, #112]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800acbe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800acc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800acc6:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800acca:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800acce:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800acd2:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800acd6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800acda:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800acde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ace2:	f013 0f01 	tst.w	r3, #1
 800ace6:	d110      	bne.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 800ace8:	b945      	cbnz	r5, 800acfc <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800acea:	4a11      	ldr	r2, [pc, #68]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800acec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800acf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acf4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800acf6:	430b      	orrs	r3, r1
 800acf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800acfc:	b1ee      	cbz	r6, 800ad3a <HAL_RCCEx_PeriphCLKConfig+0xee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800acfe:	4a0c      	ldr	r2, [pc, #48]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800ad00:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ad02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad06:	6593      	str	r3, [r2, #88]	; 0x58
 800ad08:	e017      	b.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 800ad0a:	f7fc fa23 	bl	8007154 <HAL_GetTick>
 800ad0e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ad10:	4b07      	ldr	r3, [pc, #28]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800ad12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad16:	f013 0f02 	tst.w	r3, #2
 800ad1a:	d1e5      	bne.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad1c:	f7fc fa1a 	bl	8007154 <HAL_GetTick>
 800ad20:	1bc0      	subs	r0, r0, r7
 800ad22:	f241 3388 	movw	r3, #5000	; 0x1388
 800ad26:	4298      	cmp	r0, r3
 800ad28:	d9f2      	bls.n	800ad10 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 800ad2a:	2503      	movs	r5, #3
 800ad2c:	e7dc      	b.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800ad2e:	bf00      	nop
 800ad30:	40021000 	.word	0x40021000
 800ad34:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ad38:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ad3a:	6823      	ldr	r3, [r4, #0]
 800ad3c:	f013 0f01 	tst.w	r3, #1
 800ad40:	d008      	beq.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ad42:	4a9f      	ldr	r2, [pc, #636]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ad44:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800ad48:	f023 0303 	bic.w	r3, r3, #3
 800ad4c:	6861      	ldr	r1, [r4, #4]
 800ad4e:	430b      	orrs	r3, r1
 800ad50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ad54:	6823      	ldr	r3, [r4, #0]
 800ad56:	f013 0f02 	tst.w	r3, #2
 800ad5a:	d008      	beq.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ad5c:	4a98      	ldr	r2, [pc, #608]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ad5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800ad62:	f023 030c 	bic.w	r3, r3, #12
 800ad66:	68a1      	ldr	r1, [r4, #8]
 800ad68:	430b      	orrs	r3, r1
 800ad6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ad6e:	6823      	ldr	r3, [r4, #0]
 800ad70:	f013 0f04 	tst.w	r3, #4
 800ad74:	d008      	beq.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ad76:	4a92      	ldr	r2, [pc, #584]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ad78:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800ad7c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ad80:	68e1      	ldr	r1, [r4, #12]
 800ad82:	430b      	orrs	r3, r1
 800ad84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ad88:	6823      	ldr	r3, [r4, #0]
 800ad8a:	f013 0f08 	tst.w	r3, #8
 800ad8e:	d008      	beq.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ad90:	4a8b      	ldr	r2, [pc, #556]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ad92:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800ad96:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ad9a:	6921      	ldr	r1, [r4, #16]
 800ad9c:	430b      	orrs	r3, r1
 800ad9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	f013 0f10 	tst.w	r3, #16
 800ada8:	d008      	beq.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800adaa:	4a85      	ldr	r2, [pc, #532]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800adac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800adb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adb4:	6961      	ldr	r1, [r4, #20]
 800adb6:	430b      	orrs	r3, r1
 800adb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800adbc:	6823      	ldr	r3, [r4, #0]
 800adbe:	f013 0f20 	tst.w	r3, #32
 800adc2:	d008      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800adc4:	4a7e      	ldr	r2, [pc, #504]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800adc6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800adca:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800adce:	69a1      	ldr	r1, [r4, #24]
 800add0:	430b      	orrs	r3, r1
 800add2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800add6:	6823      	ldr	r3, [r4, #0]
 800add8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800addc:	d008      	beq.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800adde:	4a78      	ldr	r2, [pc, #480]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ade0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800ade4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ade8:	69e1      	ldr	r1, [r4, #28]
 800adea:	430b      	orrs	r3, r1
 800adec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800adf0:	6823      	ldr	r3, [r4, #0]
 800adf2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800adf6:	d008      	beq.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800adf8:	4a71      	ldr	r2, [pc, #452]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800adfa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800adfe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800ae02:	6a21      	ldr	r1, [r4, #32]
 800ae04:	430b      	orrs	r3, r1
 800ae06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ae0a:	6823      	ldr	r3, [r4, #0]
 800ae0c:	f413 7f80 	tst.w	r3, #256	; 0x100
 800ae10:	d008      	beq.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ae12:	4a6b      	ldr	r2, [pc, #428]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ae14:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800ae18:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800ae1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ae1e:	430b      	orrs	r3, r1
 800ae20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800ae2a:	d008      	beq.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ae2c:	4a64      	ldr	r2, [pc, #400]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ae2e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800ae32:	f023 0303 	bic.w	r3, r3, #3
 800ae36:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ae38:	430b      	orrs	r3, r1
 800ae3a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	f413 7f00 	tst.w	r3, #512	; 0x200
 800ae44:	d008      	beq.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ae46:	4a5e      	ldr	r2, [pc, #376]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ae48:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800ae4c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800ae50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ae52:	430b      	orrs	r3, r1
 800ae54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800ae5e:	d00c      	beq.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ae60:	4a57      	ldr	r2, [pc, #348]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ae62:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800ae66:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ae6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ae6c:	430b      	orrs	r3, r1
 800ae6e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800ae72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ae74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae78:	d079      	beq.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800ae7a:	6823      	ldr	r3, [r4, #0]
 800ae7c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800ae80:	d00c      	beq.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ae82:	4a4f      	ldr	r2, [pc, #316]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ae84:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800ae88:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800ae8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae8e:	430b      	orrs	r3, r1
 800ae90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800ae94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae9a:	d06d      	beq.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ae9c:	6823      	ldr	r3, [r4, #0]
 800ae9e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800aea2:	d00c      	beq.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aea4:	4a46      	ldr	r2, [pc, #280]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800aea6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800aeaa:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800aeae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aeb0:	430b      	orrs	r3, r1
 800aeb2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800aeb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aeb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aebc:	d061      	beq.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x336>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800aec4:	d00c      	beq.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aec6:	4a3e      	ldr	r2, [pc, #248]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800aec8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800aecc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800aed0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800aed2:	430b      	orrs	r3, r1
 800aed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800aed8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aeda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aede:	d055      	beq.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x340>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800aee0:	6823      	ldr	r3, [r4, #0]
 800aee2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800aee6:	d00c      	beq.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aee8:	4a35      	ldr	r2, [pc, #212]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800aeea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800aeee:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800aef2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800aef4:	430b      	orrs	r3, r1
 800aef6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800aefa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aefc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af00:	d049      	beq.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800af02:	6823      	ldr	r3, [r4, #0]
 800af04:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800af08:	d00c      	beq.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800af0a:	4a2d      	ldr	r2, [pc, #180]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800af0c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800af10:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800af14:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800af16:	430b      	orrs	r3, r1
 800af18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800af1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800af1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af22:	d03d      	beq.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x354>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800af24:	6823      	ldr	r3, [r4, #0]
 800af26:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800af2a:	d00c      	beq.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800af2c:	4a24      	ldr	r2, [pc, #144]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800af2e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800af32:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800af36:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800af38:	430b      	orrs	r3, r1
 800af3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800af3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800af40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af44:	d031      	beq.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0x35e>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800af46:	6823      	ldr	r3, [r4, #0]
 800af48:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800af4c:	d00c      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800af4e:	4a1c      	ldr	r2, [pc, #112]	; (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800af50:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800af54:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800af58:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800af5a:	430b      	orrs	r3, r1
 800af5c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800af60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800af62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af66:	d025      	beq.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
  }

#endif /* QUADSPI */

  return status;
}
 800af68:	4628      	mov	r0, r5
 800af6a:	b003      	add	sp, #12
 800af6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800af6e:	68d3      	ldr	r3, [r2, #12]
 800af70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af74:	60d3      	str	r3, [r2, #12]
 800af76:	e780      	b.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800af78:	68d3      	ldr	r3, [r2, #12]
 800af7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af7e:	60d3      	str	r3, [r2, #12]
 800af80:	e78c      	b.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800af82:	68d3      	ldr	r3, [r2, #12]
 800af84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af88:	60d3      	str	r3, [r2, #12]
 800af8a:	e798      	b.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800af8c:	68d3      	ldr	r3, [r2, #12]
 800af8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af92:	60d3      	str	r3, [r2, #12]
 800af94:	e7a4      	b.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800af96:	68d3      	ldr	r3, [r2, #12]
 800af98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af9c:	60d3      	str	r3, [r2, #12]
 800af9e:	e7b0      	b.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800afa0:	68d3      	ldr	r3, [r2, #12]
 800afa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afa6:	60d3      	str	r3, [r2, #12]
 800afa8:	e7bc      	b.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800afaa:	68d3      	ldr	r3, [r2, #12]
 800afac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afb0:	60d3      	str	r3, [r2, #12]
 800afb2:	e7c8      	b.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800afb4:	68d3      	ldr	r3, [r2, #12]
 800afb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800afba:	60d3      	str	r3, [r2, #12]
 800afbc:	e7d4      	b.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800afbe:	bf00      	nop
 800afc0:	40021000 	.word	0x40021000

0800afc4 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d06f      	beq.n	800b0a8 <HAL_SPI_Init+0xe4>
{
 800afc8:	b510      	push	{r4, lr}
 800afca:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800afcc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800afce:	b933      	cbnz	r3, 800afde <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800afd0:	6843      	ldr	r3, [r0, #4]
 800afd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afd6:	d005      	beq.n	800afe4 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800afd8:	2300      	movs	r3, #0
 800afda:	61c3      	str	r3, [r0, #28]
 800afdc:	e002      	b.n	800afe4 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800afde:	2300      	movs	r3, #0
 800afe0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800afe2:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800afe4:	2300      	movs	r3, #0
 800afe6:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800afe8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800afec:	2b00      	cmp	r3, #0
 800afee:	d052      	beq.n	800b096 <HAL_SPI_Init+0xd2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aff0:	2302      	movs	r3, #2
 800aff2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aff6:	6822      	ldr	r2, [r4, #0]
 800aff8:	6813      	ldr	r3, [r2, #0]
 800affa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800affe:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b000:	68e3      	ldr	r3, [r4, #12]
 800b002:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b006:	d94c      	bls.n	800b0a2 <HAL_SPI_Init+0xde>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b008:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b00a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b00e:	d004      	beq.n	800b01a <HAL_SPI_Init+0x56>
 800b010:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b014:	d001      	beq.n	800b01a <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b016:	2300      	movs	r3, #0
 800b018:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b01a:	6863      	ldr	r3, [r4, #4]
 800b01c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800b020:	68a1      	ldr	r1, [r4, #8]
 800b022:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800b026:	430b      	orrs	r3, r1
 800b028:	6921      	ldr	r1, [r4, #16]
 800b02a:	f001 0102 	and.w	r1, r1, #2
 800b02e:	430b      	orrs	r3, r1
 800b030:	6961      	ldr	r1, [r4, #20]
 800b032:	f001 0101 	and.w	r1, r1, #1
 800b036:	430b      	orrs	r3, r1
 800b038:	69a1      	ldr	r1, [r4, #24]
 800b03a:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800b03e:	430b      	orrs	r3, r1
 800b040:	69e1      	ldr	r1, [r4, #28]
 800b042:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800b046:	430b      	orrs	r3, r1
 800b048:	6a21      	ldr	r1, [r4, #32]
 800b04a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800b04e:	430b      	orrs	r3, r1
 800b050:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b052:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800b056:	6820      	ldr	r0, [r4, #0]
 800b058:	430b      	orrs	r3, r1
 800b05a:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b05c:	8b63      	ldrh	r3, [r4, #26]
 800b05e:	f003 0304 	and.w	r3, r3, #4
 800b062:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b064:	f001 0110 	and.w	r1, r1, #16
 800b068:	430b      	orrs	r3, r1
 800b06a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b06c:	f001 0108 	and.w	r1, r1, #8
 800b070:	430b      	orrs	r3, r1
 800b072:	68e1      	ldr	r1, [r4, #12]
 800b074:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800b078:	430b      	orrs	r3, r1
 800b07a:	6821      	ldr	r1, [r4, #0]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b080:	6822      	ldr	r2, [r4, #0]
 800b082:	69d3      	ldr	r3, [r2, #28]
 800b084:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b088:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b08a:	2000      	movs	r0, #0
 800b08c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b08e:	2301      	movs	r3, #1
 800b090:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 800b094:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800b096:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800b09a:	4620      	mov	r0, r4
 800b09c:	f7f9 fb34 	bl	8004708 <HAL_SPI_MspInit>
 800b0a0:	e7a6      	b.n	800aff0 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b0a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b0a6:	e7b0      	b.n	800b00a <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 800b0a8:	2001      	movs	r0, #1
}
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800b0ac:	b340      	cbz	r0, 800b100 <HAL_SRAM_Init+0x54>
{
 800b0ae:	b570      	push	{r4, r5, r6, lr}
 800b0b0:	460e      	mov	r6, r1
 800b0b2:	4615      	mov	r5, r2
 800b0b4:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800b0b6:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800b0ba:	b1e3      	cbz	r3, 800b0f6 <HAL_SRAM_Init+0x4a>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800b0bc:	4621      	mov	r1, r4
 800b0be:	f851 0b08 	ldr.w	r0, [r1], #8
 800b0c2:	f001 f8c5 	bl	800c250 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800b0c6:	68a2      	ldr	r2, [r4, #8]
 800b0c8:	4631      	mov	r1, r6
 800b0ca:	6820      	ldr	r0, [r4, #0]
 800b0cc:	f001 f930 	bl	800c330 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800b0d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b0d2:	68a2      	ldr	r2, [r4, #8]
 800b0d4:	4629      	mov	r1, r5
 800b0d6:	6860      	ldr	r0, [r4, #4]
 800b0d8:	f001 f95d 	bl	800c396 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800b0dc:	6822      	ldr	r2, [r4, #0]
 800b0de:	68a1      	ldr	r1, [r4, #8]
 800b0e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0e4:	f043 0301 	orr.w	r3, r3, #1
 800b0e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 800b0f2:	2000      	movs	r0, #0
}
 800b0f4:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 800b0f6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SRAM_MspInit(hsram);
 800b0fa:	f7f6 fd03 	bl	8001b04 <HAL_SRAM_MspInit>
 800b0fe:	e7dd      	b.n	800b0bc <HAL_SRAM_Init+0x10>
    return HAL_ERROR;
 800b100:	2001      	movs	r0, #1
}
 800b102:	4770      	bx	lr

0800b104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b104:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b106:	6a03      	ldr	r3, [r0, #32]
 800b108:	f023 0301 	bic.w	r3, r3, #1
 800b10c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b10e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b110:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b112:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b114:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b118:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b11c:	680c      	ldr	r4, [r1, #0]
 800b11e:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b120:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b124:	688c      	ldr	r4, [r1, #8]
 800b126:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b128:	4c21      	ldr	r4, [pc, #132]	; (800b1b0 <TIM_OC1_SetConfig+0xac>)
 800b12a:	42a0      	cmp	r0, r4
 800b12c:	d013      	beq.n	800b156 <TIM_OC1_SetConfig+0x52>
 800b12e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800b132:	42a0      	cmp	r0, r4
 800b134:	d00f      	beq.n	800b156 <TIM_OC1_SetConfig+0x52>
 800b136:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800b13a:	42a0      	cmp	r0, r4
 800b13c:	d00b      	beq.n	800b156 <TIM_OC1_SetConfig+0x52>
 800b13e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b142:	42a0      	cmp	r0, r4
 800b144:	d007      	beq.n	800b156 <TIM_OC1_SetConfig+0x52>
 800b146:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b14a:	42a0      	cmp	r0, r4
 800b14c:	d003      	beq.n	800b156 <TIM_OC1_SetConfig+0x52>
 800b14e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800b152:	42a0      	cmp	r0, r4
 800b154:	d105      	bne.n	800b162 <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b156:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b15a:	68cc      	ldr	r4, [r1, #12]
 800b15c:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b15e:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b162:	4c13      	ldr	r4, [pc, #76]	; (800b1b0 <TIM_OC1_SetConfig+0xac>)
 800b164:	42a0      	cmp	r0, r4
 800b166:	d013      	beq.n	800b190 <TIM_OC1_SetConfig+0x8c>
 800b168:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800b16c:	42a0      	cmp	r0, r4
 800b16e:	d00f      	beq.n	800b190 <TIM_OC1_SetConfig+0x8c>
 800b170:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800b174:	42a0      	cmp	r0, r4
 800b176:	d00b      	beq.n	800b190 <TIM_OC1_SetConfig+0x8c>
 800b178:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b17c:	42a0      	cmp	r0, r4
 800b17e:	d007      	beq.n	800b190 <TIM_OC1_SetConfig+0x8c>
 800b180:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b184:	42a0      	cmp	r0, r4
 800b186:	d003      	beq.n	800b190 <TIM_OC1_SetConfig+0x8c>
 800b188:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800b18c:	42a0      	cmp	r0, r4
 800b18e:	d107      	bne.n	800b1a0 <TIM_OC1_SetConfig+0x9c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b190:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b194:	694c      	ldr	r4, [r1, #20]
 800b196:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b19a:	698d      	ldr	r5, [r1, #24]
 800b19c:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1a0:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1a2:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b1a4:	684a      	ldr	r2, [r1, #4]
 800b1a6:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1a8:	6203      	str	r3, [r0, #32]
}
 800b1aa:	bc30      	pop	{r4, r5}
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	40012c00 	.word	0x40012c00

0800b1b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1b4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b1b6:	6a03      	ldr	r3, [r0, #32]
 800b1b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1bc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1be:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1c0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1c2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b1c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b1c8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1cc:	680d      	ldr	r5, [r1, #0]
 800b1ce:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b1d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b1d4:	688d      	ldr	r5, [r1, #8]
 800b1d6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b1da:	4d1c      	ldr	r5, [pc, #112]	; (800b24c <TIM_OC3_SetConfig+0x98>)
 800b1dc:	42a8      	cmp	r0, r5
 800b1de:	d007      	beq.n	800b1f0 <TIM_OC3_SetConfig+0x3c>
 800b1e0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b1e4:	42a8      	cmp	r0, r5
 800b1e6:	d003      	beq.n	800b1f0 <TIM_OC3_SetConfig+0x3c>
 800b1e8:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800b1ec:	42a8      	cmp	r0, r5
 800b1ee:	d106      	bne.n	800b1fe <TIM_OC3_SetConfig+0x4a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b1f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b1f4:	68cd      	ldr	r5, [r1, #12]
 800b1f6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b1fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1fe:	4d13      	ldr	r5, [pc, #76]	; (800b24c <TIM_OC3_SetConfig+0x98>)
 800b200:	42a8      	cmp	r0, r5
 800b202:	d013      	beq.n	800b22c <TIM_OC3_SetConfig+0x78>
 800b204:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b208:	42a8      	cmp	r0, r5
 800b20a:	d00f      	beq.n	800b22c <TIM_OC3_SetConfig+0x78>
 800b20c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800b210:	42a8      	cmp	r0, r5
 800b212:	d00b      	beq.n	800b22c <TIM_OC3_SetConfig+0x78>
 800b214:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b218:	42a8      	cmp	r0, r5
 800b21a:	d007      	beq.n	800b22c <TIM_OC3_SetConfig+0x78>
 800b21c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b220:	42a8      	cmp	r0, r5
 800b222:	d003      	beq.n	800b22c <TIM_OC3_SetConfig+0x78>
 800b224:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b228:	42a8      	cmp	r0, r5
 800b22a:	d107      	bne.n	800b23c <TIM_OC3_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b22c:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b230:	694c      	ldr	r4, [r1, #20]
 800b232:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b236:	698c      	ldr	r4, [r1, #24]
 800b238:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b23c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b23e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b240:	684a      	ldr	r2, [r1, #4]
 800b242:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b244:	6203      	str	r3, [r0, #32]
}
 800b246:	bc30      	pop	{r4, r5}
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	40012c00 	.word	0x40012c00

0800b250 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b250:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b252:	6a03      	ldr	r3, [r0, #32]
 800b254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b258:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b25a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b25c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b25e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b260:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800b264:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b268:	680d      	ldr	r5, [r1, #0]
 800b26a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b26e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b272:	688d      	ldr	r5, [r1, #8]
 800b274:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b278:	4d1b      	ldr	r5, [pc, #108]	; (800b2e8 <TIM_OC4_SetConfig+0x98>)
 800b27a:	42a8      	cmp	r0, r5
 800b27c:	d007      	beq.n	800b28e <TIM_OC4_SetConfig+0x3e>
 800b27e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b282:	42a8      	cmp	r0, r5
 800b284:	d003      	beq.n	800b28e <TIM_OC4_SetConfig+0x3e>
 800b286:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800b28a:	42a8      	cmp	r0, r5
 800b28c:	d106      	bne.n	800b29c <TIM_OC4_SetConfig+0x4c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b28e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b292:	68cd      	ldr	r5, [r1, #12]
 800b294:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b298:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b29c:	4d12      	ldr	r5, [pc, #72]	; (800b2e8 <TIM_OC4_SetConfig+0x98>)
 800b29e:	42a8      	cmp	r0, r5
 800b2a0:	d013      	beq.n	800b2ca <TIM_OC4_SetConfig+0x7a>
 800b2a2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b2a6:	42a8      	cmp	r0, r5
 800b2a8:	d00f      	beq.n	800b2ca <TIM_OC4_SetConfig+0x7a>
 800b2aa:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800b2ae:	42a8      	cmp	r0, r5
 800b2b0:	d00b      	beq.n	800b2ca <TIM_OC4_SetConfig+0x7a>
 800b2b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b2b6:	42a8      	cmp	r0, r5
 800b2b8:	d007      	beq.n	800b2ca <TIM_OC4_SetConfig+0x7a>
 800b2ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b2be:	42a8      	cmp	r0, r5
 800b2c0:	d003      	beq.n	800b2ca <TIM_OC4_SetConfig+0x7a>
 800b2c2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b2c6:	42a8      	cmp	r0, r5
 800b2c8:	d107      	bne.n	800b2da <TIM_OC4_SetConfig+0x8a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b2ca:	f424 4c40 	bic.w	ip, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b2ce:	694c      	ldr	r4, [r1, #20]
 800b2d0:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b2d4:	698c      	ldr	r4, [r1, #24]
 800b2d6:	ea4c 1484 	orr.w	r4, ip, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2da:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2dc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b2de:	684a      	ldr	r2, [r1, #4]
 800b2e0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2e2:	6203      	str	r3, [r0, #32]
}
 800b2e4:	bc30      	pop	{r4, r5}
 800b2e6:	4770      	bx	lr
 800b2e8:	40012c00 	.word	0x40012c00

0800b2ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b2ec:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b2ee:	6a03      	ldr	r3, [r0, #32]
 800b2f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2f4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2f6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2f8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b2fa:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b2fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b300:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b304:	680d      	ldr	r5, [r1, #0]
 800b306:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b308:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b30c:	688d      	ldr	r5, [r1, #8]
 800b30e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b312:	4d11      	ldr	r5, [pc, #68]	; (800b358 <TIM_OC5_SetConfig+0x6c>)
 800b314:	42a8      	cmp	r0, r5
 800b316:	d013      	beq.n	800b340 <TIM_OC5_SetConfig+0x54>
 800b318:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b31c:	42a8      	cmp	r0, r5
 800b31e:	d00f      	beq.n	800b340 <TIM_OC5_SetConfig+0x54>
 800b320:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800b324:	42a8      	cmp	r0, r5
 800b326:	d00b      	beq.n	800b340 <TIM_OC5_SetConfig+0x54>
 800b328:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b32c:	42a8      	cmp	r0, r5
 800b32e:	d007      	beq.n	800b340 <TIM_OC5_SetConfig+0x54>
 800b330:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b334:	42a8      	cmp	r0, r5
 800b336:	d003      	beq.n	800b340 <TIM_OC5_SetConfig+0x54>
 800b338:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b33c:	42a8      	cmp	r0, r5
 800b33e:	d104      	bne.n	800b34a <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b340:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b344:	694d      	ldr	r5, [r1, #20]
 800b346:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b34a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b34c:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b34e:	684a      	ldr	r2, [r1, #4]
 800b350:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b352:	6203      	str	r3, [r0, #32]
}
 800b354:	bc30      	pop	{r4, r5}
 800b356:	4770      	bx	lr
 800b358:	40012c00 	.word	0x40012c00

0800b35c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b35c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b35e:	6a03      	ldr	r3, [r0, #32]
 800b360:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b364:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b366:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b368:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b36a:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b36c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800b370:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b374:	680d      	ldr	r5, [r1, #0]
 800b376:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b37a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b37e:	688d      	ldr	r5, [r1, #8]
 800b380:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b384:	4d11      	ldr	r5, [pc, #68]	; (800b3cc <TIM_OC6_SetConfig+0x70>)
 800b386:	42a8      	cmp	r0, r5
 800b388:	d013      	beq.n	800b3b2 <TIM_OC6_SetConfig+0x56>
 800b38a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b38e:	42a8      	cmp	r0, r5
 800b390:	d00f      	beq.n	800b3b2 <TIM_OC6_SetConfig+0x56>
 800b392:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800b396:	42a8      	cmp	r0, r5
 800b398:	d00b      	beq.n	800b3b2 <TIM_OC6_SetConfig+0x56>
 800b39a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b39e:	42a8      	cmp	r0, r5
 800b3a0:	d007      	beq.n	800b3b2 <TIM_OC6_SetConfig+0x56>
 800b3a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b3a6:	42a8      	cmp	r0, r5
 800b3a8:	d003      	beq.n	800b3b2 <TIM_OC6_SetConfig+0x56>
 800b3aa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b3ae:	42a8      	cmp	r0, r5
 800b3b0:	d104      	bne.n	800b3bc <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b3b2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b3b6:	694d      	ldr	r5, [r1, #20]
 800b3b8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3bc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b3be:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b3c0:	684a      	ldr	r2, [r1, #4]
 800b3c2:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3c4:	6203      	str	r3, [r0, #32]
}
 800b3c6:	bc30      	pop	{r4, r5}
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	40012c00 	.word	0x40012c00

0800b3d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3d0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b3d2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3d4:	6a04      	ldr	r4, [r0, #32]
 800b3d6:	f024 0401 	bic.w	r4, r4, #1
 800b3da:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3dc:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b3de:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b3e2:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b3e6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800b3ea:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b3ec:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800b3ee:	6203      	str	r3, [r0, #32]
}
 800b3f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3f4:	4770      	bx	lr

0800b3f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3f6:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3f8:	6a04      	ldr	r4, [r0, #32]
 800b3fa:	f024 0410 	bic.w	r4, r4, #16
 800b3fe:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b400:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800b402:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b404:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b408:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b40c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800b410:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b414:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800b416:	6203      	str	r3, [r0, #32]
}
 800b418:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b41c:	4770      	bx	lr

0800b41e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b41e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b420:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b428:	430b      	orrs	r3, r1
 800b42a:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b42e:	6083      	str	r3, [r0, #8]
}
 800b430:	4770      	bx	lr
	...

0800b434 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800b434:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d135      	bne.n	800b4aa <HAL_TIM_Base_Start+0x76>
  htim->State = HAL_TIM_STATE_BUSY;
 800b43e:	2302      	movs	r3, #2
 800b440:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b444:	6803      	ldr	r3, [r0, #0]
 800b446:	4a1c      	ldr	r2, [pc, #112]	; (800b4b8 <HAL_TIM_Base_Start+0x84>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d020      	beq.n	800b48e <HAL_TIM_Base_Start+0x5a>
 800b44c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b450:	d01d      	beq.n	800b48e <HAL_TIM_Base_Start+0x5a>
 800b452:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b456:	4293      	cmp	r3, r2
 800b458:	d019      	beq.n	800b48e <HAL_TIM_Base_Start+0x5a>
 800b45a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b45e:	4293      	cmp	r3, r2
 800b460:	d015      	beq.n	800b48e <HAL_TIM_Base_Start+0x5a>
 800b462:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b466:	4293      	cmp	r3, r2
 800b468:	d011      	beq.n	800b48e <HAL_TIM_Base_Start+0x5a>
 800b46a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800b46e:	4293      	cmp	r3, r2
 800b470:	d00d      	beq.n	800b48e <HAL_TIM_Base_Start+0x5a>
 800b472:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800b476:	4293      	cmp	r3, r2
 800b478:	d009      	beq.n	800b48e <HAL_TIM_Base_Start+0x5a>
 800b47a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b47e:	4293      	cmp	r3, r2
 800b480:	d005      	beq.n	800b48e <HAL_TIM_Base_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	f042 0201 	orr.w	r2, r2, #1
 800b488:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b48a:	2000      	movs	r0, #0
 800b48c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b48e:	6899      	ldr	r1, [r3, #8]
 800b490:	4a0a      	ldr	r2, [pc, #40]	; (800b4bc <HAL_TIM_Base_Start+0x88>)
 800b492:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b494:	2a06      	cmp	r2, #6
 800b496:	d00a      	beq.n	800b4ae <HAL_TIM_Base_Start+0x7a>
 800b498:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b49c:	d009      	beq.n	800b4b2 <HAL_TIM_Base_Start+0x7e>
      __HAL_TIM_ENABLE(htim);
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	f042 0201 	orr.w	r2, r2, #1
 800b4a4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b4a6:	2000      	movs	r0, #0
 800b4a8:	4770      	bx	lr
    return HAL_ERROR;
 800b4aa:	2001      	movs	r0, #1
 800b4ac:	4770      	bx	lr
  return HAL_OK;
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	4770      	bx	lr
 800b4b2:	2000      	movs	r0, #0
}
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	40012c00 	.word	0x40012c00
 800b4bc:	00010007 	.word	0x00010007

0800b4c0 <HAL_TIM_PWM_MspInit>:
}
 800b4c0:	4770      	bx	lr
	...

0800b4c4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800b4c4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b4c6:	4a36      	ldr	r2, [pc, #216]	; (800b5a0 <TIM_Base_SetConfig+0xdc>)
 800b4c8:	4290      	cmp	r0, r2
 800b4ca:	d016      	beq.n	800b4fa <TIM_Base_SetConfig+0x36>
 800b4cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b4d0:	d013      	beq.n	800b4fa <TIM_Base_SetConfig+0x36>
 800b4d2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b4d6:	4290      	cmp	r0, r2
 800b4d8:	d00f      	beq.n	800b4fa <TIM_Base_SetConfig+0x36>
 800b4da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b4de:	4290      	cmp	r0, r2
 800b4e0:	d00b      	beq.n	800b4fa <TIM_Base_SetConfig+0x36>
 800b4e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b4e6:	4290      	cmp	r0, r2
 800b4e8:	d007      	beq.n	800b4fa <TIM_Base_SetConfig+0x36>
 800b4ea:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800b4ee:	4290      	cmp	r0, r2
 800b4f0:	d003      	beq.n	800b4fa <TIM_Base_SetConfig+0x36>
 800b4f2:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800b4f6:	4290      	cmp	r0, r2
 800b4f8:	d103      	bne.n	800b502 <TIM_Base_SetConfig+0x3e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b4fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b4fe:	684a      	ldr	r2, [r1, #4]
 800b500:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b502:	4a27      	ldr	r2, [pc, #156]	; (800b5a0 <TIM_Base_SetConfig+0xdc>)
 800b504:	4290      	cmp	r0, r2
 800b506:	d022      	beq.n	800b54e <TIM_Base_SetConfig+0x8a>
 800b508:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b50c:	d01f      	beq.n	800b54e <TIM_Base_SetConfig+0x8a>
 800b50e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b512:	4290      	cmp	r0, r2
 800b514:	d01b      	beq.n	800b54e <TIM_Base_SetConfig+0x8a>
 800b516:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b51a:	4290      	cmp	r0, r2
 800b51c:	d017      	beq.n	800b54e <TIM_Base_SetConfig+0x8a>
 800b51e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b522:	4290      	cmp	r0, r2
 800b524:	d013      	beq.n	800b54e <TIM_Base_SetConfig+0x8a>
 800b526:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800b52a:	4290      	cmp	r0, r2
 800b52c:	d00f      	beq.n	800b54e <TIM_Base_SetConfig+0x8a>
 800b52e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800b532:	4290      	cmp	r0, r2
 800b534:	d00b      	beq.n	800b54e <TIM_Base_SetConfig+0x8a>
 800b536:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b53a:	4290      	cmp	r0, r2
 800b53c:	d007      	beq.n	800b54e <TIM_Base_SetConfig+0x8a>
 800b53e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b542:	4290      	cmp	r0, r2
 800b544:	d003      	beq.n	800b54e <TIM_Base_SetConfig+0x8a>
 800b546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b54a:	4290      	cmp	r0, r2
 800b54c:	d103      	bne.n	800b556 <TIM_Base_SetConfig+0x92>
    tmpcr1 &= ~TIM_CR1_CKD;
 800b54e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b552:	68ca      	ldr	r2, [r1, #12]
 800b554:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b55a:	694a      	ldr	r2, [r1, #20]
 800b55c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800b55e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b560:	688b      	ldr	r3, [r1, #8]
 800b562:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b564:	680b      	ldr	r3, [r1, #0]
 800b566:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b568:	4b0d      	ldr	r3, [pc, #52]	; (800b5a0 <TIM_Base_SetConfig+0xdc>)
 800b56a:	4298      	cmp	r0, r3
 800b56c:	d013      	beq.n	800b596 <TIM_Base_SetConfig+0xd2>
 800b56e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b572:	4298      	cmp	r0, r3
 800b574:	d00f      	beq.n	800b596 <TIM_Base_SetConfig+0xd2>
 800b576:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800b57a:	4298      	cmp	r0, r3
 800b57c:	d00b      	beq.n	800b596 <TIM_Base_SetConfig+0xd2>
 800b57e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b582:	4298      	cmp	r0, r3
 800b584:	d007      	beq.n	800b596 <TIM_Base_SetConfig+0xd2>
 800b586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b58a:	4298      	cmp	r0, r3
 800b58c:	d003      	beq.n	800b596 <TIM_Base_SetConfig+0xd2>
 800b58e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b592:	4298      	cmp	r0, r3
 800b594:	d101      	bne.n	800b59a <TIM_Base_SetConfig+0xd6>
    TIMx->RCR = Structure->RepetitionCounter;
 800b596:	690b      	ldr	r3, [r1, #16]
 800b598:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800b59a:	2301      	movs	r3, #1
 800b59c:	6143      	str	r3, [r0, #20]
}
 800b59e:	4770      	bx	lr
 800b5a0:	40012c00 	.word	0x40012c00

0800b5a4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800b5a4:	b360      	cbz	r0, 800b600 <HAL_TIM_Base_Init+0x5c>
{
 800b5a6:	b510      	push	{r4, lr}
 800b5a8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800b5aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b5ae:	b313      	cbz	r3, 800b5f6 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800b5b0:	2302      	movs	r3, #2
 800b5b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	f851 0b04 	ldr.w	r0, [r1], #4
 800b5bc:	f7ff ff82 	bl	800b4c4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5c6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800b5ca:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b5ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b5d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800b5d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b5e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5e6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800b5ea:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800b5ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800b5f2:	2000      	movs	r0, #0
}
 800b5f4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800b5f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800b5fa:	f7f9 fa15 	bl	8004a28 <HAL_TIM_Base_MspInit>
 800b5fe:	e7d7      	b.n	800b5b0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800b600:	2001      	movs	r0, #1
}
 800b602:	4770      	bx	lr

0800b604 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800b604:	b360      	cbz	r0, 800b660 <HAL_TIM_PWM_Init+0x5c>
{
 800b606:	b510      	push	{r4, lr}
 800b608:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800b60a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b60e:	b313      	cbz	r3, 800b656 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800b610:	2302      	movs	r3, #2
 800b612:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b616:	4621      	mov	r1, r4
 800b618:	f851 0b04 	ldr.w	r0, [r1], #4
 800b61c:	f7ff ff52 	bl	800b4c4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b620:	2301      	movs	r3, #1
 800b622:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b626:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800b62a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b62e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b632:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800b636:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b63a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b63e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b642:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b646:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800b64a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800b64e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800b652:	2000      	movs	r0, #0
}
 800b654:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800b656:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800b65a:	f7ff ff31 	bl	800b4c0 <HAL_TIM_PWM_MspInit>
 800b65e:	e7d7      	b.n	800b610 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800b660:	2001      	movs	r0, #1
}
 800b662:	4770      	bx	lr

0800b664 <TIM_OC2_SetConfig>:
{
 800b664:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b666:	6a03      	ldr	r3, [r0, #32]
 800b668:	f023 0310 	bic.w	r3, r3, #16
 800b66c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800b66e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800b670:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800b672:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b674:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800b678:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b67c:	680d      	ldr	r5, [r1, #0]
 800b67e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800b682:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b686:	688d      	ldr	r5, [r1, #8]
 800b688:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b68c:	4d1b      	ldr	r5, [pc, #108]	; (800b6fc <TIM_OC2_SetConfig+0x98>)
 800b68e:	42a8      	cmp	r0, r5
 800b690:	d007      	beq.n	800b6a2 <TIM_OC2_SetConfig+0x3e>
 800b692:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b696:	42a8      	cmp	r0, r5
 800b698:	d003      	beq.n	800b6a2 <TIM_OC2_SetConfig+0x3e>
 800b69a:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800b69e:	42a8      	cmp	r0, r5
 800b6a0:	d106      	bne.n	800b6b0 <TIM_OC2_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC2NP;
 800b6a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b6a6:	68cd      	ldr	r5, [r1, #12]
 800b6a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800b6ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6b0:	4d12      	ldr	r5, [pc, #72]	; (800b6fc <TIM_OC2_SetConfig+0x98>)
 800b6b2:	42a8      	cmp	r0, r5
 800b6b4:	d013      	beq.n	800b6de <TIM_OC2_SetConfig+0x7a>
 800b6b6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b6ba:	42a8      	cmp	r0, r5
 800b6bc:	d00f      	beq.n	800b6de <TIM_OC2_SetConfig+0x7a>
 800b6be:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800b6c2:	42a8      	cmp	r0, r5
 800b6c4:	d00b      	beq.n	800b6de <TIM_OC2_SetConfig+0x7a>
 800b6c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b6ca:	42a8      	cmp	r0, r5
 800b6cc:	d007      	beq.n	800b6de <TIM_OC2_SetConfig+0x7a>
 800b6ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b6d2:	42a8      	cmp	r0, r5
 800b6d4:	d003      	beq.n	800b6de <TIM_OC2_SetConfig+0x7a>
 800b6d6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b6da:	42a8      	cmp	r0, r5
 800b6dc:	d107      	bne.n	800b6ee <TIM_OC2_SetConfig+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b6de:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b6e2:	694c      	ldr	r4, [r1, #20]
 800b6e4:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b6e8:	698c      	ldr	r4, [r1, #24]
 800b6ea:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800b6ee:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800b6f0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800b6f2:	684a      	ldr	r2, [r1, #4]
 800b6f4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800b6f6:	6203      	str	r3, [r0, #32]
}
 800b6f8:	bc30      	pop	{r4, r5}
 800b6fa:	4770      	bx	lr
 800b6fc:	40012c00 	.word	0x40012c00

0800b700 <HAL_TIM_PWM_ConfigChannel>:
{
 800b700:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800b702:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b706:	2b01      	cmp	r3, #1
 800b708:	f000 8095 	beq.w	800b836 <HAL_TIM_PWM_ConfigChannel+0x136>
 800b70c:	4604      	mov	r4, r0
 800b70e:	460d      	mov	r5, r1
 800b710:	2301      	movs	r3, #1
 800b712:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800b716:	2a14      	cmp	r2, #20
 800b718:	f200 8088 	bhi.w	800b82c <HAL_TIM_PWM_ConfigChannel+0x12c>
 800b71c:	e8df f002 	tbb	[pc, r2]
 800b720:	8686860b 	.word	0x8686860b
 800b724:	8686861f 	.word	0x8686861f
 800b728:	86868634 	.word	0x86868634
 800b72c:	86868648 	.word	0x86868648
 800b730:	8686865d 	.word	0x8686865d
 800b734:	71          	.byte	0x71
 800b735:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b736:	6800      	ldr	r0, [r0, #0]
 800b738:	f7ff fce4 	bl	800b104 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b73c:	6822      	ldr	r2, [r4, #0]
 800b73e:	6993      	ldr	r3, [r2, #24]
 800b740:	f043 0308 	orr.w	r3, r3, #8
 800b744:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b746:	6822      	ldr	r2, [r4, #0]
 800b748:	6993      	ldr	r3, [r2, #24]
 800b74a:	f023 0304 	bic.w	r3, r3, #4
 800b74e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b750:	6822      	ldr	r2, [r4, #0]
 800b752:	6993      	ldr	r3, [r2, #24]
 800b754:	6929      	ldr	r1, [r5, #16]
 800b756:	430b      	orrs	r3, r1
 800b758:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800b75a:	2000      	movs	r0, #0
      break;
 800b75c:	e067      	b.n	800b82e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b75e:	6800      	ldr	r0, [r0, #0]
 800b760:	f7ff ff80 	bl	800b664 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b764:	6822      	ldr	r2, [r4, #0]
 800b766:	6993      	ldr	r3, [r2, #24]
 800b768:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b76c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b76e:	6822      	ldr	r2, [r4, #0]
 800b770:	6993      	ldr	r3, [r2, #24]
 800b772:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b776:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b778:	6822      	ldr	r2, [r4, #0]
 800b77a:	6993      	ldr	r3, [r2, #24]
 800b77c:	6929      	ldr	r1, [r5, #16]
 800b77e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b782:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800b784:	2000      	movs	r0, #0
      break;
 800b786:	e052      	b.n	800b82e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b788:	6800      	ldr	r0, [r0, #0]
 800b78a:	f7ff fd13 	bl	800b1b4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b78e:	6822      	ldr	r2, [r4, #0]
 800b790:	69d3      	ldr	r3, [r2, #28]
 800b792:	f043 0308 	orr.w	r3, r3, #8
 800b796:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b798:	6822      	ldr	r2, [r4, #0]
 800b79a:	69d3      	ldr	r3, [r2, #28]
 800b79c:	f023 0304 	bic.w	r3, r3, #4
 800b7a0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b7a2:	6822      	ldr	r2, [r4, #0]
 800b7a4:	69d3      	ldr	r3, [r2, #28]
 800b7a6:	6929      	ldr	r1, [r5, #16]
 800b7a8:	430b      	orrs	r3, r1
 800b7aa:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800b7ac:	2000      	movs	r0, #0
      break;
 800b7ae:	e03e      	b.n	800b82e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b7b0:	6800      	ldr	r0, [r0, #0]
 800b7b2:	f7ff fd4d 	bl	800b250 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b7b6:	6822      	ldr	r2, [r4, #0]
 800b7b8:	69d3      	ldr	r3, [r2, #28]
 800b7ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b7be:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b7c0:	6822      	ldr	r2, [r4, #0]
 800b7c2:	69d3      	ldr	r3, [r2, #28]
 800b7c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b7c8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b7ca:	6822      	ldr	r2, [r4, #0]
 800b7cc:	69d3      	ldr	r3, [r2, #28]
 800b7ce:	6929      	ldr	r1, [r5, #16]
 800b7d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b7d4:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800b7d6:	2000      	movs	r0, #0
      break;
 800b7d8:	e029      	b.n	800b82e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b7da:	6800      	ldr	r0, [r0, #0]
 800b7dc:	f7ff fd86 	bl	800b2ec <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b7e0:	6822      	ldr	r2, [r4, #0]
 800b7e2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b7e4:	f043 0308 	orr.w	r3, r3, #8
 800b7e8:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b7ea:	6822      	ldr	r2, [r4, #0]
 800b7ec:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b7ee:	f023 0304 	bic.w	r3, r3, #4
 800b7f2:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b7f4:	6822      	ldr	r2, [r4, #0]
 800b7f6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b7f8:	6929      	ldr	r1, [r5, #16]
 800b7fa:	430b      	orrs	r3, r1
 800b7fc:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 800b7fe:	2000      	movs	r0, #0
      break;
 800b800:	e015      	b.n	800b82e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b802:	6800      	ldr	r0, [r0, #0]
 800b804:	f7ff fdaa 	bl	800b35c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b808:	6822      	ldr	r2, [r4, #0]
 800b80a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b80c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b810:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b812:	6822      	ldr	r2, [r4, #0]
 800b814:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b816:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b81a:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b81c:	6822      	ldr	r2, [r4, #0]
 800b81e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b820:	6929      	ldr	r1, [r5, #16]
 800b822:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b826:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 800b828:	2000      	movs	r0, #0
      break;
 800b82a:	e000      	b.n	800b82e <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 800b82c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800b82e:	2300      	movs	r3, #0
 800b830:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800b834:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800b836:	2002      	movs	r0, #2
 800b838:	e7fc      	b.n	800b834 <HAL_TIM_PWM_ConfigChannel+0x134>

0800b83a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b83a:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b83c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b83e:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b842:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800b846:	430a      	orrs	r2, r1
 800b848:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b84c:	6082      	str	r2, [r0, #8]
}
 800b84e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800b854:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b858:	2b01      	cmp	r3, #1
 800b85a:	f000 809b 	beq.w	800b994 <HAL_TIM_ConfigClockSource+0x140>
{
 800b85e:	b510      	push	{r4, lr}
 800b860:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800b862:	2301      	movs	r3, #1
 800b864:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800b868:	2302      	movs	r3, #2
 800b86a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800b86e:	6802      	ldr	r2, [r0, #0]
 800b870:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b872:	4b49      	ldr	r3, [pc, #292]	; (800b998 <HAL_TIM_ConfigClockSource+0x144>)
 800b874:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800b876:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800b878:	680b      	ldr	r3, [r1, #0]
 800b87a:	2b70      	cmp	r3, #112	; 0x70
 800b87c:	d061      	beq.n	800b942 <HAL_TIM_ConfigClockSource+0xee>
 800b87e:	d831      	bhi.n	800b8e4 <HAL_TIM_ConfigClockSource+0x90>
 800b880:	2b50      	cmp	r3, #80	; 0x50
 800b882:	d078      	beq.n	800b976 <HAL_TIM_ConfigClockSource+0x122>
 800b884:	d90c      	bls.n	800b8a0 <HAL_TIM_ConfigClockSource+0x4c>
 800b886:	2b60      	cmp	r3, #96	; 0x60
 800b888:	d12a      	bne.n	800b8e0 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b88a:	68ca      	ldr	r2, [r1, #12]
 800b88c:	6849      	ldr	r1, [r1, #4]
 800b88e:	6820      	ldr	r0, [r4, #0]
 800b890:	f7ff fdb1 	bl	800b3f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b894:	2160      	movs	r1, #96	; 0x60
 800b896:	6820      	ldr	r0, [r4, #0]
 800b898:	f7ff fdc1 	bl	800b41e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800b89c:	2000      	movs	r0, #0
      break;
 800b89e:	e038      	b.n	800b912 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800b8a0:	2b40      	cmp	r3, #64	; 0x40
 800b8a2:	d10a      	bne.n	800b8ba <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8a4:	68ca      	ldr	r2, [r1, #12]
 800b8a6:	6849      	ldr	r1, [r1, #4]
 800b8a8:	6820      	ldr	r0, [r4, #0]
 800b8aa:	f7ff fd91 	bl	800b3d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b8ae:	2140      	movs	r1, #64	; 0x40
 800b8b0:	6820      	ldr	r0, [r4, #0]
 800b8b2:	f7ff fdb4 	bl	800b41e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800b8b6:	2000      	movs	r0, #0
      break;
 800b8b8:	e02b      	b.n	800b912 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800b8ba:	d867      	bhi.n	800b98c <HAL_TIM_ConfigClockSource+0x138>
 800b8bc:	2b20      	cmp	r3, #32
 800b8be:	d007      	beq.n	800b8d0 <HAL_TIM_ConfigClockSource+0x7c>
 800b8c0:	d903      	bls.n	800b8ca <HAL_TIM_ConfigClockSource+0x76>
 800b8c2:	2b30      	cmp	r3, #48	; 0x30
 800b8c4:	d004      	beq.n	800b8d0 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800b8c6:	2001      	movs	r0, #1
 800b8c8:	e023      	b.n	800b912 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800b8ca:	b10b      	cbz	r3, 800b8d0 <HAL_TIM_ConfigClockSource+0x7c>
 800b8cc:	2b10      	cmp	r3, #16
 800b8ce:	d105      	bne.n	800b8dc <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	6820      	ldr	r0, [r4, #0]
 800b8d4:	f7ff fda3 	bl	800b41e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800b8d8:	2000      	movs	r0, #0
      break;
 800b8da:	e01a      	b.n	800b912 <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 800b8dc:	2001      	movs	r0, #1
 800b8de:	e018      	b.n	800b912 <HAL_TIM_ConfigClockSource+0xbe>
 800b8e0:	2001      	movs	r0, #1
 800b8e2:	e016      	b.n	800b912 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800b8e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8e8:	d038      	beq.n	800b95c <HAL_TIM_ConfigClockSource+0x108>
 800b8ea:	d90e      	bls.n	800b90a <HAL_TIM_ConfigClockSource+0xb6>
 800b8ec:	4a2b      	ldr	r2, [pc, #172]	; (800b99c <HAL_TIM_ConfigClockSource+0x148>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d0ee      	beq.n	800b8d0 <HAL_TIM_ConfigClockSource+0x7c>
 800b8f2:	d915      	bls.n	800b920 <HAL_TIM_ConfigClockSource+0xcc>
 800b8f4:	4a2a      	ldr	r2, [pc, #168]	; (800b9a0 <HAL_TIM_ConfigClockSource+0x14c>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d0ea      	beq.n	800b8d0 <HAL_TIM_ConfigClockSource+0x7c>
 800b8fa:	3210      	adds	r2, #16
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d0e7      	beq.n	800b8d0 <HAL_TIM_ConfigClockSource+0x7c>
 800b900:	3a20      	subs	r2, #32
 800b902:	4293      	cmp	r3, r2
 800b904:	d0e4      	beq.n	800b8d0 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800b906:	2001      	movs	r0, #1
 800b908:	e003      	b.n	800b912 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800b90a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b90e:	d13f      	bne.n	800b990 <HAL_TIM_ConfigClockSource+0x13c>
 800b910:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800b912:	2301      	movs	r3, #1
 800b914:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b918:	2300      	movs	r3, #0
 800b91a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800b91e:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800b920:	3a20      	subs	r2, #32
 800b922:	4293      	cmp	r3, r2
 800b924:	d0d4      	beq.n	800b8d0 <HAL_TIM_ConfigClockSource+0x7c>
 800b926:	d904      	bls.n	800b932 <HAL_TIM_ConfigClockSource+0xde>
 800b928:	4a1e      	ldr	r2, [pc, #120]	; (800b9a4 <HAL_TIM_ConfigClockSource+0x150>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d0d0      	beq.n	800b8d0 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800b92e:	2001      	movs	r0, #1
 800b930:	e7ef      	b.n	800b912 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800b932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b936:	d0cb      	beq.n	800b8d0 <HAL_TIM_ConfigClockSource+0x7c>
 800b938:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b93c:	d0c8      	beq.n	800b8d0 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800b93e:	2001      	movs	r0, #1
 800b940:	e7e7      	b.n	800b912 <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 800b942:	68cb      	ldr	r3, [r1, #12]
 800b944:	684a      	ldr	r2, [r1, #4]
 800b946:	6889      	ldr	r1, [r1, #8]
 800b948:	6820      	ldr	r0, [r4, #0]
 800b94a:	f7ff ff76 	bl	800b83a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b94e:	6822      	ldr	r2, [r4, #0]
 800b950:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b952:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800b956:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b958:	2000      	movs	r0, #0
      break;
 800b95a:	e7da      	b.n	800b912 <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 800b95c:	68cb      	ldr	r3, [r1, #12]
 800b95e:	684a      	ldr	r2, [r1, #4]
 800b960:	6889      	ldr	r1, [r1, #8]
 800b962:	6820      	ldr	r0, [r4, #0]
 800b964:	f7ff ff69 	bl	800b83a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b968:	6822      	ldr	r2, [r4, #0]
 800b96a:	6893      	ldr	r3, [r2, #8]
 800b96c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b970:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b972:	2000      	movs	r0, #0
      break;
 800b974:	e7cd      	b.n	800b912 <HAL_TIM_ConfigClockSource+0xbe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b976:	68ca      	ldr	r2, [r1, #12]
 800b978:	6849      	ldr	r1, [r1, #4]
 800b97a:	6820      	ldr	r0, [r4, #0]
 800b97c:	f7ff fd28 	bl	800b3d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b980:	2150      	movs	r1, #80	; 0x50
 800b982:	6820      	ldr	r0, [r4, #0]
 800b984:	f7ff fd4b 	bl	800b41e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800b988:	2000      	movs	r0, #0
      break;
 800b98a:	e7c2      	b.n	800b912 <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 800b98c:	2001      	movs	r0, #1
 800b98e:	e7c0      	b.n	800b912 <HAL_TIM_ConfigClockSource+0xbe>
 800b990:	2001      	movs	r0, #1
 800b992:	e7be      	b.n	800b912 <HAL_TIM_ConfigClockSource+0xbe>
  __HAL_LOCK(htim);
 800b994:	2002      	movs	r0, #2
}
 800b996:	4770      	bx	lr
 800b998:	ffce0088 	.word	0xffce0088
 800b99c:	00100040 	.word	0x00100040
 800b9a0:	00100060 	.word	0x00100060
 800b9a4:	00100030 	.word	0x00100030

0800b9a8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d04c      	beq.n	800ba4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
{
 800b9b0:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9be:	6802      	ldr	r2, [r0, #0]
 800b9c0:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9c2:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b9c4:	4d22      	ldr	r5, [pc, #136]	; (800ba50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800b9c6:	42aa      	cmp	r2, r5
 800b9c8:	d007      	beq.n	800b9da <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800b9ca:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b9ce:	42aa      	cmp	r2, r5
 800b9d0:	d003      	beq.n	800b9da <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800b9d2:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800b9d6:	42aa      	cmp	r2, r5
 800b9d8:	d103      	bne.n	800b9e2 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b9da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b9de:	684d      	ldr	r5, [r1, #4]
 800b9e0:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9e2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b9e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b9ea:	680d      	ldr	r5, [r1, #0]
 800b9ec:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b9ee:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9f0:	6803      	ldr	r3, [r0, #0]
 800b9f2:	4a17      	ldr	r2, [pc, #92]	; (800ba50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d01a      	beq.n	800ba2e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800b9f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9fc:	d017      	beq.n	800ba2e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800b9fe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d013      	beq.n	800ba2e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800ba06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d00f      	beq.n	800ba2e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800ba0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d00b      	beq.n	800ba2e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800ba16:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d007      	beq.n	800ba2e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800ba1e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d003      	beq.n	800ba2e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800ba26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d104      	bne.n	800ba38 <HAL_TIMEx_MasterConfigSynchronization+0x90>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba2e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba32:	688a      	ldr	r2, [r1, #8]
 800ba34:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba36:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba3e:	2300      	movs	r3, #0
 800ba40:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800ba44:	4618      	mov	r0, r3
}
 800ba46:	bc30      	pop	{r4, r5}
 800ba48:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ba4a:	2002      	movs	r0, #2
}
 800ba4c:	4770      	bx	lr
 800ba4e:	bf00      	nop
 800ba50:	40012c00 	.word	0x40012c00

0800ba54 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d060      	beq.n	800bb1e <HAL_TIMEx_ConfigBreakDeadTime+0xca>
{
 800ba5c:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800ba5e:	2301      	movs	r3, #1
 800ba60:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ba64:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ba66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba6a:	688a      	ldr	r2, [r1, #8]
 800ba6c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ba6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba72:	684a      	ldr	r2, [r1, #4]
 800ba74:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ba76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba7a:	680a      	ldr	r2, [r1, #0]
 800ba7c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ba7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba82:	690a      	ldr	r2, [r1, #16]
 800ba84:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ba86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba8a:	694a      	ldr	r2, [r1, #20]
 800ba8c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ba8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba92:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800ba94:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ba96:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800ba9a:	698a      	ldr	r2, [r1, #24]
 800ba9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800baa0:	6802      	ldr	r2, [r0, #0]
 800baa2:	4c20      	ldr	r4, [pc, #128]	; (800bb24 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 800baa4:	42a2      	cmp	r2, r4
 800baa6:	d007      	beq.n	800bab8 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800baa8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800baac:	42a2      	cmp	r2, r4
 800baae:	d003      	beq.n	800bab8 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800bab0:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800bab4:	42a2      	cmp	r2, r4
 800bab6:	d103      	bne.n	800bac0 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800babc:	69cc      	ldr	r4, [r1, #28]
 800babe:	4323      	orrs	r3, r4
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bac0:	4c18      	ldr	r4, [pc, #96]	; (800bb24 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 800bac2:	42a2      	cmp	r2, r4
 800bac4:	d007      	beq.n	800bad6 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800bac6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800baca:	42a2      	cmp	r2, r4
 800bacc:	d003      	beq.n	800bad6 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800bace:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800bad2:	42a2      	cmp	r2, r4
 800bad4:	d11b      	bne.n	800bb0e <HAL_TIMEx_ConfigBreakDeadTime+0xba>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bad6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bada:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800badc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bae0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bae4:	6a0c      	ldr	r4, [r1, #32]
 800bae6:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bae8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800baec:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800baee:	4323      	orrs	r3, r4

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800baf0:	4c0c      	ldr	r4, [pc, #48]	; (800bb24 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 800baf2:	42a2      	cmp	r2, r4
 800baf4:	d007      	beq.n	800bb06 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800baf6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800bafa:	42a2      	cmp	r2, r4
 800bafc:	d003      	beq.n	800bb06 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800bafe:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800bb02:	42a2      	cmp	r2, r4
 800bb04:	d103      	bne.n	800bb0e <HAL_TIMEx_ConfigBreakDeadTime+0xba>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bb06:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bb0a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800bb0c:	430b      	orrs	r3, r1
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bb0e:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bb10:	2300      	movs	r3, #0
 800bb12:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800bb16:	4618      	mov	r0, r3
}
 800bb18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb1c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800bb1e:	2002      	movs	r0, #2
}
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	40012c00 	.word	0x40012c00

0800bb28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb28:	b570      	push	{r4, r5, r6, lr}
 800bb2a:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb2c:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb2e:	6883      	ldr	r3, [r0, #8]
 800bb30:	6902      	ldr	r2, [r0, #16]
 800bb32:	4313      	orrs	r3, r2
 800bb34:	6942      	ldr	r2, [r0, #20]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	69c2      	ldr	r2, [r0, #28]
 800bb3a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb3c:	6808      	ldr	r0, [r1, #0]
 800bb3e:	4a96      	ldr	r2, [pc, #600]	; (800bd98 <UART_SetConfig+0x270>)
 800bb40:	4002      	ands	r2, r0
 800bb42:	4313      	orrs	r3, r2
 800bb44:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb46:	6822      	ldr	r2, [r4, #0]
 800bb48:	6853      	ldr	r3, [r2, #4]
 800bb4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800bb4e:	68e1      	ldr	r1, [r4, #12]
 800bb50:	430b      	orrs	r3, r1
 800bb52:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bb54:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bb56:	6822      	ldr	r2, [r4, #0]
 800bb58:	4b90      	ldr	r3, [pc, #576]	; (800bd9c <UART_SetConfig+0x274>)
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d001      	beq.n	800bb62 <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bb5e:	6a23      	ldr	r3, [r4, #32]
 800bb60:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bb62:	6893      	ldr	r3, [r2, #8]
 800bb64:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800bb68:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800bb6c:	430b      	orrs	r3, r1
 800bb6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bb70:	6822      	ldr	r2, [r4, #0]
 800bb72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800bb74:	f023 030f 	bic.w	r3, r3, #15
 800bb78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bb7a:	430b      	orrs	r3, r1
 800bb7c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bb7e:	6823      	ldr	r3, [r4, #0]
 800bb80:	4a87      	ldr	r2, [pc, #540]	; (800bda0 <UART_SetConfig+0x278>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d010      	beq.n	800bba8 <UART_SetConfig+0x80>
 800bb86:	4a87      	ldr	r2, [pc, #540]	; (800bda4 <UART_SetConfig+0x27c>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d021      	beq.n	800bbd0 <UART_SetConfig+0xa8>
 800bb8c:	4a86      	ldr	r2, [pc, #536]	; (800bda8 <UART_SetConfig+0x280>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d037      	beq.n	800bc02 <UART_SetConfig+0xda>
 800bb92:	4a86      	ldr	r2, [pc, #536]	; (800bdac <UART_SetConfig+0x284>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d05c      	beq.n	800bc52 <UART_SetConfig+0x12a>
 800bb98:	4a85      	ldr	r2, [pc, #532]	; (800bdb0 <UART_SetConfig+0x288>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d06b      	beq.n	800bc76 <UART_SetConfig+0x14e>
 800bb9e:	4a7f      	ldr	r2, [pc, #508]	; (800bd9c <UART_SetConfig+0x274>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d07d      	beq.n	800bca0 <UART_SetConfig+0x178>
 800bba4:	2210      	movs	r2, #16
 800bba6:	e03a      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bba8:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 800bbac:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800bbb0:	f002 0203 	and.w	r2, r2, #3
 800bbb4:	2a03      	cmp	r2, #3
 800bbb6:	d809      	bhi.n	800bbcc <UART_SetConfig+0xa4>
 800bbb8:	e8df f002 	tbb	[pc, r2]
 800bbbc:	06870402 	.word	0x06870402
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	e02c      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bbc4:	2204      	movs	r2, #4
 800bbc6:	e02a      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bbc8:	2208      	movs	r2, #8
 800bbca:	e028      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bbcc:	2210      	movs	r2, #16
 800bbce:	e026      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bbd0:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 800bbd4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800bbd8:	f002 020c 	and.w	r2, r2, #12
 800bbdc:	2a0c      	cmp	r2, #12
 800bbde:	d80e      	bhi.n	800bbfe <UART_SetConfig+0xd6>
 800bbe0:	e8df f002 	tbb	[pc, r2]
 800bbe4:	0d0d0d07 	.word	0x0d0d0d07
 800bbe8:	0d0d0d09 	.word	0x0d0d0d09
 800bbec:	0d0d0d75 	.word	0x0d0d0d75
 800bbf0:	0b          	.byte	0x0b
 800bbf1:	00          	.byte	0x00
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	e013      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bbf6:	2204      	movs	r2, #4
 800bbf8:	e011      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bbfa:	2208      	movs	r2, #8
 800bbfc:	e00f      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bbfe:	2210      	movs	r2, #16
 800bc00:	e00d      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bc02:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 800bc06:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800bc0a:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800bc0e:	2a20      	cmp	r2, #32
 800bc10:	d05f      	beq.n	800bcd2 <UART_SetConfig+0x1aa>
 800bc12:	d81a      	bhi.n	800bc4a <UART_SetConfig+0x122>
 800bc14:	2a00      	cmp	r2, #0
 800bc16:	d05e      	beq.n	800bcd6 <UART_SetConfig+0x1ae>
 800bc18:	2a10      	cmp	r2, #16
 800bc1a:	d15e      	bne.n	800bcda <UART_SetConfig+0x1b2>
 800bc1c:	2204      	movs	r2, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bc1e:	495f      	ldr	r1, [pc, #380]	; (800bd9c <UART_SetConfig+0x274>)
 800bc20:	428b      	cmp	r3, r1
 800bc22:	d076      	beq.n	800bd12 <UART_SetConfig+0x1ea>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc24:	69e0      	ldr	r0, [r4, #28]
 800bc26:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800bc2a:	f000 80c9 	beq.w	800bdc0 <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bc2e:	2a08      	cmp	r2, #8
 800bc30:	f200 8134 	bhi.w	800be9c <UART_SetConfig+0x374>
 800bc34:	e8df f012 	tbh	[pc, r2, lsl #1]
 800bc38:	011900f7 	.word	0x011900f7
 800bc3c:	013200f5 	.word	0x013200f5
 800bc40:	0132011c 	.word	0x0132011c
 800bc44:	01320132 	.word	0x01320132
 800bc48:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc4a:	2a30      	cmp	r2, #48	; 0x30
 800bc4c:	d147      	bne.n	800bcde <UART_SetConfig+0x1b6>
 800bc4e:	2208      	movs	r2, #8
 800bc50:	e7e5      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bc52:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 800bc56:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800bc5a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800bc5e:	2a80      	cmp	r2, #128	; 0x80
 800bc60:	d03f      	beq.n	800bce2 <UART_SetConfig+0x1ba>
 800bc62:	d804      	bhi.n	800bc6e <UART_SetConfig+0x146>
 800bc64:	b3fa      	cbz	r2, 800bce6 <UART_SetConfig+0x1be>
 800bc66:	2a40      	cmp	r2, #64	; 0x40
 800bc68:	d13f      	bne.n	800bcea <UART_SetConfig+0x1c2>
 800bc6a:	2204      	movs	r2, #4
 800bc6c:	e7d7      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bc6e:	2ac0      	cmp	r2, #192	; 0xc0
 800bc70:	d13d      	bne.n	800bcee <UART_SetConfig+0x1c6>
 800bc72:	2208      	movs	r2, #8
 800bc74:	e7d3      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bc76:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800bc7a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800bc7e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800bc82:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800bc86:	d034      	beq.n	800bcf2 <UART_SetConfig+0x1ca>
 800bc88:	d805      	bhi.n	800bc96 <UART_SetConfig+0x16e>
 800bc8a:	b3a2      	cbz	r2, 800bcf6 <UART_SetConfig+0x1ce>
 800bc8c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800bc90:	d133      	bne.n	800bcfa <UART_SetConfig+0x1d2>
 800bc92:	2204      	movs	r2, #4
 800bc94:	e7c3      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bc96:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800bc9a:	d130      	bne.n	800bcfe <UART_SetConfig+0x1d6>
 800bc9c:	2208      	movs	r2, #8
 800bc9e:	e7be      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bca0:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 800bca4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800bca8:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800bcac:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800bcb0:	d027      	beq.n	800bd02 <UART_SetConfig+0x1da>
 800bcb2:	d805      	bhi.n	800bcc0 <UART_SetConfig+0x198>
 800bcb4:	b33a      	cbz	r2, 800bd06 <UART_SetConfig+0x1de>
 800bcb6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800bcba:	d126      	bne.n	800bd0a <UART_SetConfig+0x1e2>
 800bcbc:	2204      	movs	r2, #4
 800bcbe:	e7ae      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bcc0:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800bcc4:	d123      	bne.n	800bd0e <UART_SetConfig+0x1e6>
 800bcc6:	2208      	movs	r2, #8
 800bcc8:	e7a9      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bcca:	2202      	movs	r2, #2
 800bccc:	e7a7      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bcce:	2202      	movs	r2, #2
 800bcd0:	e7a5      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bcd2:	2202      	movs	r2, #2
 800bcd4:	e7a3      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	e7a1      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bcda:	2210      	movs	r2, #16
 800bcdc:	e79f      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bcde:	2210      	movs	r2, #16
 800bce0:	e79d      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bce2:	2202      	movs	r2, #2
 800bce4:	e79b      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bce6:	2200      	movs	r2, #0
 800bce8:	e799      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bcea:	2210      	movs	r2, #16
 800bcec:	e797      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bcee:	2210      	movs	r2, #16
 800bcf0:	e795      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bcf2:	2202      	movs	r2, #2
 800bcf4:	e793      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	e791      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bcfa:	2210      	movs	r2, #16
 800bcfc:	e78f      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bcfe:	2210      	movs	r2, #16
 800bd00:	e78d      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bd02:	2202      	movs	r2, #2
 800bd04:	e78b      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bd06:	2200      	movs	r2, #0
 800bd08:	e789      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bd0a:	2210      	movs	r2, #16
 800bd0c:	e787      	b.n	800bc1e <UART_SetConfig+0xf6>
 800bd0e:	2210      	movs	r2, #16
 800bd10:	e785      	b.n	800bc1e <UART_SetConfig+0xf6>
    switch (clocksource)
 800bd12:	2a08      	cmp	r2, #8
 800bd14:	f200 80b2 	bhi.w	800be7c <UART_SetConfig+0x354>
 800bd18:	e8df f002 	tbb	[pc, r2]
 800bd1c:	b03bb008 	.word	0xb03bb008
 800bd20:	b0b0b038 	.word	0xb0b0b038
 800bd24:	05          	.byte	0x05
 800bd25:	00          	.byte	0x00
 800bd26:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bd2a:	e004      	b.n	800bd36 <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd2c:	f7fe ff6a 	bl	800ac04 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800bd30:	2800      	cmp	r0, #0
 800bd32:	f000 80a5 	beq.w	800be80 <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bd36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bd38:	4b1e      	ldr	r3, [pc, #120]	; (800bdb4 <UART_SetConfig+0x28c>)
 800bd3a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800bd3e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd42:	6865      	ldr	r5, [r4, #4]
 800bd44:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800bd48:	4299      	cmp	r1, r3
 800bd4a:	f200 809b 	bhi.w	800be84 <UART_SetConfig+0x35c>
 800bd4e:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800bd52:	f200 8099 	bhi.w	800be88 <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd56:	2600      	movs	r6, #0
 800bd58:	4633      	mov	r3, r6
 800bd5a:	4631      	mov	r1, r6
 800bd5c:	f7f4 ffcc 	bl	8000cf8 <__aeabi_uldivmod>
 800bd60:	0209      	lsls	r1, r1, #8
 800bd62:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800bd66:	0200      	lsls	r0, r0, #8
 800bd68:	086b      	lsrs	r3, r5, #1
 800bd6a:	18c0      	adds	r0, r0, r3
 800bd6c:	462a      	mov	r2, r5
 800bd6e:	4633      	mov	r3, r6
 800bd70:	f141 0100 	adc.w	r1, r1, #0
 800bd74:	f7f4 ffc0 	bl	8000cf8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bd78:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800bd7c:	4b0e      	ldr	r3, [pc, #56]	; (800bdb8 <UART_SetConfig+0x290>)
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	f200 8084 	bhi.w	800be8c <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 800bd84:	6823      	ldr	r3, [r4, #0]
 800bd86:	60d8      	str	r0, [r3, #12]
 800bd88:	4630      	mov	r0, r6
 800bd8a:	e065      	b.n	800be58 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 800bd8c:	f7fe fdf4 	bl	800a978 <HAL_RCC_GetSysClockFreq>
        break;
 800bd90:	e7ce      	b.n	800bd30 <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 800bd92:	480a      	ldr	r0, [pc, #40]	; (800bdbc <UART_SetConfig+0x294>)
 800bd94:	e7cf      	b.n	800bd36 <UART_SetConfig+0x20e>
 800bd96:	bf00      	nop
 800bd98:	cfff69f3 	.word	0xcfff69f3
 800bd9c:	40008000 	.word	0x40008000
 800bda0:	40013800 	.word	0x40013800
 800bda4:	40004400 	.word	0x40004400
 800bda8:	40004800 	.word	0x40004800
 800bdac:	40004c00 	.word	0x40004c00
 800bdb0:	40005000 	.word	0x40005000
 800bdb4:	08015198 	.word	0x08015198
 800bdb8:	000ffcff 	.word	0x000ffcff
 800bdbc:	00f42400 	.word	0x00f42400
    switch (clocksource)
 800bdc0:	2a08      	cmp	r2, #8
 800bdc2:	d865      	bhi.n	800be90 <UART_SetConfig+0x368>
 800bdc4:	e8df f002 	tbb	[pc, r2]
 800bdc8:	64052707 	.word	0x64052707
 800bdcc:	6464642a 	.word	0x6464642a
 800bdd0:	0b          	.byte	0x0b
 800bdd1:	00          	.byte	0x00
 800bdd2:	4835      	ldr	r0, [pc, #212]	; (800bea8 <UART_SetConfig+0x380>)
 800bdd4:	e003      	b.n	800bdde <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800bdd6:	f7fe ff15 	bl	800ac04 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800bdda:	2800      	cmp	r0, #0
 800bddc:	d05a      	beq.n	800be94 <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdde:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bde0:	4b32      	ldr	r3, [pc, #200]	; (800beac <UART_SetConfig+0x384>)
 800bde2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800bde6:	fbb0 f0f3 	udiv	r0, r0, r3
 800bdea:	6862      	ldr	r2, [r4, #4]
 800bdec:	0853      	lsrs	r3, r2, #1
 800bdee:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800bdf2:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdf6:	f1a0 0210 	sub.w	r2, r0, #16
 800bdfa:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d84a      	bhi.n	800be98 <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be02:	b283      	uxth	r3, r0
 800be04:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800be08:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800be0c:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 800be0e:	6823      	ldr	r3, [r4, #0]
 800be10:	60d8      	str	r0, [r3, #12]
 800be12:	2000      	movs	r0, #0
 800be14:	e020      	b.n	800be58 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 800be16:	f7fe ff07 	bl	800ac28 <HAL_RCC_GetPCLK2Freq>
        break;
 800be1a:	e7de      	b.n	800bdda <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 800be1c:	f7fe fdac 	bl	800a978 <HAL_RCC_GetSysClockFreq>
        break;
 800be20:	e7db      	b.n	800bdda <UART_SetConfig+0x2b2>
    switch (clocksource)
 800be22:	4821      	ldr	r0, [pc, #132]	; (800bea8 <UART_SetConfig+0x380>)
 800be24:	e003      	b.n	800be2e <UART_SetConfig+0x306>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be26:	f7fe feed 	bl	800ac04 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d038      	beq.n	800bea0 <UART_SetConfig+0x378>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800be30:	4b1e      	ldr	r3, [pc, #120]	; (800beac <UART_SetConfig+0x384>)
 800be32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800be36:	fbb0 f0f3 	udiv	r0, r0, r3
 800be3a:	6863      	ldr	r3, [r4, #4]
 800be3c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800be40:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be44:	f1a0 0210 	sub.w	r2, r0, #16
 800be48:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d829      	bhi.n	800bea4 <UART_SetConfig+0x37c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be50:	6823      	ldr	r3, [r4, #0]
 800be52:	b280      	uxth	r0, r0
 800be54:	60d8      	str	r0, [r3, #12]
 800be56:	2000      	movs	r0, #0
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be58:	2301      	movs	r3, #1
 800be5a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800be5e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be62:	2300      	movs	r3, #0
 800be64:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800be66:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 800be68:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800be6a:	f7fe fedd 	bl	800ac28 <HAL_RCC_GetPCLK2Freq>
        break;
 800be6e:	e7dc      	b.n	800be2a <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 800be70:	f7fe fd82 	bl	800a978 <HAL_RCC_GetSysClockFreq>
        break;
 800be74:	e7d9      	b.n	800be2a <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 800be76:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800be7a:	e7d8      	b.n	800be2e <UART_SetConfig+0x306>
    switch (clocksource)
 800be7c:	2001      	movs	r0, #1
 800be7e:	e7eb      	b.n	800be58 <UART_SetConfig+0x330>
 800be80:	2000      	movs	r0, #0
 800be82:	e7e9      	b.n	800be58 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800be84:	2001      	movs	r0, #1
 800be86:	e7e7      	b.n	800be58 <UART_SetConfig+0x330>
 800be88:	2001      	movs	r0, #1
 800be8a:	e7e5      	b.n	800be58 <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 800be8c:	2001      	movs	r0, #1
 800be8e:	e7e3      	b.n	800be58 <UART_SetConfig+0x330>
    switch (clocksource)
 800be90:	2001      	movs	r0, #1
 800be92:	e7e1      	b.n	800be58 <UART_SetConfig+0x330>
 800be94:	2000      	movs	r0, #0
 800be96:	e7df      	b.n	800be58 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800be98:	2001      	movs	r0, #1
 800be9a:	e7dd      	b.n	800be58 <UART_SetConfig+0x330>
    switch (clocksource)
 800be9c:	2001      	movs	r0, #1
 800be9e:	e7db      	b.n	800be58 <UART_SetConfig+0x330>
 800bea0:	2000      	movs	r0, #0
 800bea2:	e7d9      	b.n	800be58 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800bea4:	2001      	movs	r0, #1
 800bea6:	e7d7      	b.n	800be58 <UART_SetConfig+0x330>
 800bea8:	00f42400 	.word	0x00f42400
 800beac:	08015198 	.word	0x08015198

0800beb0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800beb0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800beb2:	f013 0f01 	tst.w	r3, #1
 800beb6:	d006      	beq.n	800bec6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800beb8:	6802      	ldr	r2, [r0, #0]
 800beba:	6853      	ldr	r3, [r2, #4]
 800bebc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bec0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800bec2:	430b      	orrs	r3, r1
 800bec4:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bec6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bec8:	f013 0f02 	tst.w	r3, #2
 800becc:	d006      	beq.n	800bedc <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bece:	6802      	ldr	r2, [r0, #0]
 800bed0:	6853      	ldr	r3, [r2, #4]
 800bed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bed6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800bed8:	430b      	orrs	r3, r1
 800beda:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bedc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bede:	f013 0f04 	tst.w	r3, #4
 800bee2:	d006      	beq.n	800bef2 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bee4:	6802      	ldr	r2, [r0, #0]
 800bee6:	6853      	ldr	r3, [r2, #4]
 800bee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800beec:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800beee:	430b      	orrs	r3, r1
 800bef0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bef2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bef4:	f013 0f08 	tst.w	r3, #8
 800bef8:	d006      	beq.n	800bf08 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800befa:	6802      	ldr	r2, [r0, #0]
 800befc:	6853      	ldr	r3, [r2, #4]
 800befe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bf02:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800bf04:	430b      	orrs	r3, r1
 800bf06:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf08:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bf0a:	f013 0f10 	tst.w	r3, #16
 800bf0e:	d006      	beq.n	800bf1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf10:	6802      	ldr	r2, [r0, #0]
 800bf12:	6893      	ldr	r3, [r2, #8]
 800bf14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf18:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800bf1a:	430b      	orrs	r3, r1
 800bf1c:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bf20:	f013 0f20 	tst.w	r3, #32
 800bf24:	d006      	beq.n	800bf34 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf26:	6802      	ldr	r2, [r0, #0]
 800bf28:	6893      	ldr	r3, [r2, #8]
 800bf2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bf2e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800bf30:	430b      	orrs	r3, r1
 800bf32:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf34:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bf36:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bf3a:	d00a      	beq.n	800bf52 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf3c:	6802      	ldr	r2, [r0, #0]
 800bf3e:	6853      	ldr	r3, [r2, #4]
 800bf40:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bf44:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800bf46:	430b      	orrs	r3, r1
 800bf48:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf4a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800bf4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf50:	d00b      	beq.n	800bf6a <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf52:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bf54:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bf58:	d006      	beq.n	800bf68 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf5a:	6802      	ldr	r2, [r0, #0]
 800bf5c:	6853      	ldr	r3, [r2, #4]
 800bf5e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800bf62:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800bf64:	430b      	orrs	r3, r1
 800bf66:	6053      	str	r3, [r2, #4]
  }
}
 800bf68:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf6a:	6802      	ldr	r2, [r0, #0]
 800bf6c:	6853      	ldr	r3, [r2, #4]
 800bf6e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800bf72:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800bf74:	430b      	orrs	r3, r1
 800bf76:	6053      	str	r3, [r2, #4]
 800bf78:	e7eb      	b.n	800bf52 <UART_AdvFeatureConfig+0xa2>

0800bf7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf7e:	4605      	mov	r5, r0
 800bf80:	460f      	mov	r7, r1
 800bf82:	4616      	mov	r6, r2
 800bf84:	4699      	mov	r9, r3
 800bf86:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf8a:	682c      	ldr	r4, [r5, #0]
 800bf8c:	69e4      	ldr	r4, [r4, #28]
 800bf8e:	ea37 0304 	bics.w	r3, r7, r4
 800bf92:	bf0c      	ite	eq
 800bf94:	f04f 0c01 	moveq.w	ip, #1
 800bf98:	f04f 0c00 	movne.w	ip, #0
 800bf9c:	45b4      	cmp	ip, r6
 800bf9e:	d157      	bne.n	800c050 <UART_WaitOnFlagUntilTimeout+0xd6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfa0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800bfa4:	d0f1      	beq.n	800bf8a <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfa6:	f7fb f8d5 	bl	8007154 <HAL_GetTick>
 800bfaa:	eba0 0009 	sub.w	r0, r0, r9
 800bfae:	4540      	cmp	r0, r8
 800bfb0:	d82f      	bhi.n	800c012 <UART_WaitOnFlagUntilTimeout+0x98>
 800bfb2:	f1b8 0f00 	cmp.w	r8, #0
 800bfb6:	d02c      	beq.n	800c012 <UART_WaitOnFlagUntilTimeout+0x98>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bfb8:	682b      	ldr	r3, [r5, #0]
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	f012 0f04 	tst.w	r2, #4
 800bfc0:	d0e3      	beq.n	800bf8a <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bfc2:	69da      	ldr	r2, [r3, #28]
 800bfc4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800bfc8:	d0df      	beq.n	800bf8a <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bfce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bfd0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd2:	e852 3f00 	ldrex	r3, [r2]
 800bfd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfda:	e842 3100 	strex	r1, r3, [r2]
 800bfde:	2900      	cmp	r1, #0
 800bfe0:	d1f6      	bne.n	800bfd0 <UART_WaitOnFlagUntilTimeout+0x56>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfe2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe4:	f102 0308 	add.w	r3, r2, #8
 800bfe8:	e853 3f00 	ldrex	r3, [r3]
 800bfec:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff0:	3208      	adds	r2, #8
 800bff2:	e842 3100 	strex	r1, r3, [r2]
 800bff6:	2900      	cmp	r1, #0
 800bff8:	d1f3      	bne.n	800bfe2 <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 800bffa:	2320      	movs	r3, #32
 800bffc:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c000:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c004:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c008:	2300      	movs	r3, #0
 800c00a:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80

          return HAL_TIMEOUT;
 800c00e:	2003      	movs	r0, #3
 800c010:	e01f      	b.n	800c052 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c012:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c014:	e852 3f00 	ldrex	r3, [r2]
 800c018:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01c:	e842 3100 	strex	r1, r3, [r2]
 800c020:	2900      	cmp	r1, #0
 800c022:	d1f6      	bne.n	800c012 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c024:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c026:	f102 0308 	add.w	r3, r2, #8
 800c02a:	e853 3f00 	ldrex	r3, [r3]
 800c02e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c032:	3208      	adds	r2, #8
 800c034:	e842 3100 	strex	r1, r3, [r2]
 800c038:	2900      	cmp	r1, #0
 800c03a:	d1f3      	bne.n	800c024 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 800c03c:	2320      	movs	r3, #32
 800c03e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c042:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800c046:	2300      	movs	r3, #0
 800c048:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 800c04c:	2003      	movs	r0, #3
 800c04e:	e000      	b.n	800c052 <UART_WaitOnFlagUntilTimeout+0xd8>
        }
      }
    }
  }
  return HAL_OK;
 800c050:	2000      	movs	r0, #0
}
 800c052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c056 <UART_CheckIdleState>:
{
 800c056:	b530      	push	{r4, r5, lr}
 800c058:	b083      	sub	sp, #12
 800c05a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c05c:	2300      	movs	r3, #0
 800c05e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800c062:	f7fb f877 	bl	8007154 <HAL_GetTick>
 800c066:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c068:	6822      	ldr	r2, [r4, #0]
 800c06a:	6812      	ldr	r2, [r2, #0]
 800c06c:	f012 0f08 	tst.w	r2, #8
 800c070:	d10f      	bne.n	800c092 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c072:	6823      	ldr	r3, [r4, #0]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f013 0f04 	tst.w	r3, #4
 800c07a:	d118      	bne.n	800c0ae <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800c07c:	2320      	movs	r3, #32
 800c07e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c082:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c086:	2000      	movs	r0, #0
 800c088:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800c08a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800c08e:	b003      	add	sp, #12
 800c090:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c092:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	4603      	mov	r3, r0
 800c09a:	2200      	movs	r2, #0
 800c09c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	f7ff ff6a 	bl	800bf7a <UART_WaitOnFlagUntilTimeout>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d0e3      	beq.n	800c072 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800c0aa:	2003      	movs	r0, #3
 800c0ac:	e7ef      	b.n	800c08e <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c0b2:	9300      	str	r3, [sp, #0]
 800c0b4:	462b      	mov	r3, r5
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c0bc:	4620      	mov	r0, r4
 800c0be:	f7ff ff5c 	bl	800bf7a <UART_WaitOnFlagUntilTimeout>
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	d0da      	beq.n	800c07c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800c0c6:	2003      	movs	r0, #3
 800c0c8:	e7e1      	b.n	800c08e <UART_CheckIdleState+0x38>

0800c0ca <HAL_UART_Init>:
  if (huart == NULL)
 800c0ca:	b378      	cbz	r0, 800c12c <HAL_UART_Init+0x62>
{
 800c0cc:	b510      	push	{r4, lr}
 800c0ce:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800c0d0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800c0d4:	b30b      	cbz	r3, 800c11a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800c0d6:	2324      	movs	r3, #36	; 0x24
 800c0d8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800c0dc:	6822      	ldr	r2, [r4, #0]
 800c0de:	6813      	ldr	r3, [r2, #0]
 800c0e0:	f023 0301 	bic.w	r3, r3, #1
 800c0e4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	f7ff fd1e 	bl	800bb28 <UART_SetConfig>
 800c0ec:	2801      	cmp	r0, #1
 800c0ee:	d013      	beq.n	800c118 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c0f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c0f2:	b9bb      	cbnz	r3, 800c124 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0f4:	6822      	ldr	r2, [r4, #0]
 800c0f6:	6853      	ldr	r3, [r2, #4]
 800c0f8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800c0fc:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c0fe:	6822      	ldr	r2, [r4, #0]
 800c100:	6893      	ldr	r3, [r2, #8]
 800c102:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800c106:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800c108:	6822      	ldr	r2, [r4, #0]
 800c10a:	6813      	ldr	r3, [r2, #0]
 800c10c:	f043 0301 	orr.w	r3, r3, #1
 800c110:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800c112:	4620      	mov	r0, r4
 800c114:	f7ff ff9f 	bl	800c056 <UART_CheckIdleState>
}
 800c118:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800c11a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800c11e:	f7f9 f94f 	bl	80053c0 <HAL_UART_MspInit>
 800c122:	e7d8      	b.n	800c0d6 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800c124:	4620      	mov	r0, r4
 800c126:	f7ff fec3 	bl	800beb0 <UART_AdvFeatureConfig>
 800c12a:	e7e3      	b.n	800c0f4 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800c12c:	2001      	movs	r0, #1
}
 800c12e:	4770      	bx	lr

0800c130 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c130:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800c132:	b92b      	cbnz	r3, 800c140 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800c134:	2301      	movs	r3, #1
 800c136:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c13a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800c13e:	4770      	bx	lr
{
 800c140:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c142:	6803      	ldr	r3, [r0, #0]
 800c144:	689a      	ldr	r2, [r3, #8]
 800c146:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c14a:	6899      	ldr	r1, [r3, #8]
 800c14c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c14e:	4d09      	ldr	r5, [pc, #36]	; (800c174 <UARTEx_SetNbDataToProcess+0x44>)
 800c150:	5c6b      	ldrb	r3, [r5, r1]
 800c152:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c154:	4c08      	ldr	r4, [pc, #32]	; (800c178 <UARTEx_SetNbDataToProcess+0x48>)
 800c156:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c158:	fb93 f3f1 	sdiv	r3, r3, r1
 800c15c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c160:	5cab      	ldrb	r3, [r5, r2]
 800c162:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c164:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c166:	fb93 f3f2 	sdiv	r3, r3, r2
 800c16a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800c16e:	bc30      	pop	{r4, r5}
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	080151b8 	.word	0x080151b8
 800c178:	080151b0 	.word	0x080151b0

0800c17c <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800c17c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800c180:	2b01      	cmp	r3, #1
 800c182:	d018      	beq.n	800c1b6 <HAL_UARTEx_DisableFifoMode+0x3a>
 800c184:	2301      	movs	r3, #1
 800c186:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800c18a:	2324      	movs	r3, #36	; 0x24
 800c18c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c190:	6803      	ldr	r3, [r0, #0]
 800c192:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800c194:	6819      	ldr	r1, [r3, #0]
 800c196:	f021 0101 	bic.w	r1, r1, #1
 800c19a:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c19c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1a4:	6801      	ldr	r1, [r0, #0]
 800c1a6:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c1a8:	2220      	movs	r2, #32
 800c1aa:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800c1ae:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	4770      	bx	lr
  __HAL_LOCK(huart);
 800c1b6:	2002      	movs	r0, #2
}
 800c1b8:	4770      	bx	lr

0800c1ba <HAL_UARTEx_SetTxFifoThreshold>:
{
 800c1ba:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800c1bc:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d01d      	beq.n	800c200 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800c1c4:	4604      	mov	r4, r0
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800c1cc:	2324      	movs	r3, #36	; 0x24
 800c1ce:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1d2:	6803      	ldr	r3, [r0, #0]
 800c1d4:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	f022 0201 	bic.w	r2, r2, #1
 800c1dc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c1de:	6802      	ldr	r2, [r0, #0]
 800c1e0:	6893      	ldr	r3, [r2, #8]
 800c1e2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800c1e6:	4319      	orrs	r1, r3
 800c1e8:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c1ea:	f7ff ffa1 	bl	800c130 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1ee:	6823      	ldr	r3, [r4, #0]
 800c1f0:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c1f2:	2320      	movs	r3, #32
 800c1f4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800c1f8:	2000      	movs	r0, #0
 800c1fa:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800c1fe:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800c200:	2002      	movs	r0, #2
 800c202:	e7fc      	b.n	800c1fe <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800c204 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800c204:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800c206:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	d01d      	beq.n	800c24a <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800c20e:	4604      	mov	r4, r0
 800c210:	2301      	movs	r3, #1
 800c212:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800c216:	2324      	movs	r3, #36	; 0x24
 800c218:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c21c:	6803      	ldr	r3, [r0, #0]
 800c21e:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	f022 0201 	bic.w	r2, r2, #1
 800c226:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c228:	6802      	ldr	r2, [r0, #0]
 800c22a:	6893      	ldr	r3, [r2, #8]
 800c22c:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800c230:	4319      	orrs	r1, r3
 800c232:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c234:	f7ff ff7c 	bl	800c130 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c238:	6823      	ldr	r3, [r4, #0]
 800c23a:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c23c:	2320      	movs	r3, #32
 800c23e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800c242:	2000      	movs	r0, #0
 800c244:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800c248:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800c24a:	2002      	movs	r0, #2
 800c24c:	e7fc      	b.n	800c248 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

0800c250 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800c250:	b430      	push	{r4, r5}
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800c252:	680a      	ldr	r2, [r1, #0]
 800c254:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800c258:	f023 0301 	bic.w	r3, r3, #1
 800c25c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800c260:	688b      	ldr	r3, [r1, #8]
 800c262:	2b08      	cmp	r3, #8
 800c264:	d036      	beq.n	800c2d4 <FMC_NORSRAM_Init+0x84>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800c266:	2400      	movs	r4, #0
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800c268:	684a      	ldr	r2, [r1, #4]
  btcr_reg = (flashaccess                   | \
 800c26a:	4322      	orrs	r2, r4
              Init->DataAddressMux          | \
 800c26c:	4313      	orrs	r3, r2
              Init->MemoryType              | \
              Init->MemoryDataWidth         | \
 800c26e:	68ca      	ldr	r2, [r1, #12]
              Init->MemoryType              | \
 800c270:	4313      	orrs	r3, r2
              Init->BurstAccessMode         | \
 800c272:	690a      	ldr	r2, [r1, #16]
              Init->MemoryDataWidth         | \
 800c274:	4313      	orrs	r3, r2
              Init->WaitSignalPolarity      | \
 800c276:	694a      	ldr	r2, [r1, #20]
              Init->BurstAccessMode         | \
 800c278:	4313      	orrs	r3, r2
              Init->WaitSignalActive        | \
 800c27a:	698a      	ldr	r2, [r1, #24]
              Init->WaitSignalPolarity      | \
 800c27c:	4313      	orrs	r3, r2
              Init->WriteOperation          | \
 800c27e:	69ca      	ldr	r2, [r1, #28]
              Init->WaitSignalActive        | \
 800c280:	4313      	orrs	r3, r2
              Init->WaitSignal              | \
 800c282:	6a0a      	ldr	r2, [r1, #32]
              Init->WriteOperation          | \
 800c284:	4313      	orrs	r3, r2
              Init->ExtendedMode            | \
 800c286:	6a4a      	ldr	r2, [r1, #36]	; 0x24
              Init->WaitSignal              | \
 800c288:	4313      	orrs	r3, r2
              Init->AsynchronousWait        | \
 800c28a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
              Init->ExtendedMode            | \
 800c28c:	4313      	orrs	r3, r2
              Init->WriteBurst);
 800c28e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800c290:	4313      	orrs	r3, r2

  btcr_reg |= Init->ContinuousClock;
 800c292:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800c294:	4313      	orrs	r3, r2
  btcr_reg |= Init->WriteFifo;
 800c296:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800c298:	431a      	orrs	r2, r3
  btcr_reg |= Init->NBLSetupTime;
 800c29a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800c29c:	431a      	orrs	r2, r3
  btcr_reg |= Init->PageSize;
 800c29e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800c2a0:	431a      	orrs	r2, r3
  mask |= FMC_BCR1_CCLKEN;
  mask |= FMC_BCR1_WFDIS;
  mask |= FMC_BCRx_NBLSET;
  mask |= FMC_BCRx_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800c2a2:	680c      	ldr	r4, [r1, #0]
 800c2a4:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800c2a8:	4b20      	ldr	r3, [pc, #128]	; (800c32c <FMC_NORSRAM_Init+0xdc>)
 800c2aa:	402b      	ands	r3, r5
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	f840 3024 	str.w	r3, [r0, r4, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800c2b2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800c2b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2b8:	d00e      	beq.n	800c2d8 <FMC_NORSRAM_Init+0x88>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800c2ba:	680b      	ldr	r3, [r1, #0]
 800c2bc:	b11b      	cbz	r3, 800c2c6 <FMC_NORSRAM_Init+0x76>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800c2be:	6803      	ldr	r3, [r0, #0]
 800c2c0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	6003      	str	r3, [r0, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800c2c6:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d00d      	beq.n	800c2ea <FMC_NORSRAM_Init+0x9a>
        break;
    }
  }

  return HAL_OK;
}
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	bc30      	pop	{r4, r5}
 800c2d2:	4770      	bx	lr
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800c2d4:	2440      	movs	r4, #64	; 0x40
 800c2d6:	e7c7      	b.n	800c268 <FMC_NORSRAM_Init+0x18>
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800c2d8:	680a      	ldr	r2, [r1, #0]
 800c2da:	2a00      	cmp	r2, #0
 800c2dc:	d0ed      	beq.n	800c2ba <FMC_NORSRAM_Init+0x6a>
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800c2de:	6802      	ldr	r2, [r0, #0]
 800c2e0:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	6003      	str	r3, [r0, #0]
 800c2e8:	e7e7      	b.n	800c2ba <FMC_NORSRAM_Init+0x6a>
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800c2ea:	6a03      	ldr	r3, [r0, #32]
 800c2ec:	0c1b      	lsrs	r3, r3, #16
 800c2ee:	041b      	lsls	r3, r3, #16
 800c2f0:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	6203      	str	r3, [r0, #32]
    switch (Init->NSBank)
 800c2f6:	680b      	ldr	r3, [r1, #0]
 800c2f8:	2b02      	cmp	r3, #2
 800c2fa:	d00c      	beq.n	800c316 <FMC_NORSRAM_Init+0xc6>
 800c2fc:	2b04      	cmp	r3, #4
 800c2fe:	d00f      	beq.n	800c320 <FMC_NORSRAM_Init+0xd0>
 800c300:	b123      	cbz	r3, 800c30c <FMC_NORSRAM_Init+0xbc>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800c302:	6a03      	ldr	r3, [r0, #32]
 800c304:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c308:	6203      	str	r3, [r0, #32]
        break;
 800c30a:	e7e0      	b.n	800c2ce <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800c30c:	6a03      	ldr	r3, [r0, #32]
 800c30e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c312:	6203      	str	r3, [r0, #32]
        break;
 800c314:	e7db      	b.n	800c2ce <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800c316:	6a03      	ldr	r3, [r0, #32]
 800c318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c31c:	6203      	str	r3, [r0, #32]
        break;
 800c31e:	e7d6      	b.n	800c2ce <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800c320:	6a03      	ldr	r3, [r0, #32]
 800c322:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c326:	6203      	str	r3, [r0, #32]
        break;
 800c328:	e7d1      	b.n	800c2ce <FMC_NORSRAM_Init+0x7e>
 800c32a:	bf00      	nop
 800c32c:	ff000480 	.word	0xff000480

0800c330 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c330:	b410      	push	{r4}
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800c332:	3201      	adds	r2, #1
 800c334:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800c338:	680b      	ldr	r3, [r1, #0]
 800c33a:	684c      	ldr	r4, [r1, #4]
 800c33c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800c340:	688c      	ldr	r4, [r1, #8]
 800c342:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800c346:	68cc      	ldr	r4, [r1, #12]
 800c348:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 800c34c:	690c      	ldr	r4, [r1, #16]
 800c34e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c352:	694c      	ldr	r4, [r1, #20]
 800c354:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800c358:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 800c35c:	698c      	ldr	r4, [r1, #24]
 800c35e:	f1a4 0c02 	sub.w	ip, r4, #2
 800c362:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 800c366:	69cc      	ldr	r4, [r1, #28]
 800c368:	4323      	orrs	r3, r4
 800c36a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800c36e:	6803      	ldr	r3, [r0, #0]
 800c370:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c374:	d00b      	beq.n	800c38e <FMC_NORSRAM_Timing_Init+0x5e>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800c376:	6843      	ldr	r3, [r0, #4]
 800c378:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800c37c:	694a      	ldr	r2, [r1, #20]
 800c37e:	3a01      	subs	r2, #1
 800c380:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800c384:	6843      	ldr	r3, [r0, #4]
 800c386:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c38a:	4313      	orrs	r3, r2
 800c38c:	6043      	str	r3, [r0, #4]
  }

  return HAL_OK;
}
 800c38e:	2000      	movs	r0, #0
 800c390:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c394:	4770      	bx	lr

0800c396 <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800c396:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c39a:	d005      	beq.n	800c3a8 <FMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800c39c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800c3a0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800c3a4:	2000      	movs	r0, #0
 800c3a6:	4770      	bx	lr
{
 800c3a8:	b410      	push	{r4}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800c3aa:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800c3ae:	f003 6c7f 	and.w	ip, r3, #267386880	; 0xff00000
 800c3b2:	680b      	ldr	r3, [r1, #0]
 800c3b4:	684c      	ldr	r4, [r1, #4]
 800c3b6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800c3ba:	688c      	ldr	r4, [r1, #8]
 800c3bc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800c3c0:	68cc      	ldr	r4, [r1, #12]
 800c3c2:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 800c3c6:	69cc      	ldr	r4, [r1, #28]
 800c3c8:	4323      	orrs	r3, r4
 800c3ca:	6909      	ldr	r1, [r1, #16]
 800c3cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c3d0:	ea4c 0303 	orr.w	r3, ip, r3
 800c3d4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 800c3d8:	2000      	movs	r0, #0
 800c3da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c3e0:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800c3e2:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c3e4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800c3e8:	b112      	cbz	r2, 800c3f0 <LL_GPIO_Init+0x10>
  return __builtin_clz(value);
 800c3ea:	fab2 f282 	clz	r2, r2
 800c3ee:	e04e      	b.n	800c48e <LL_GPIO_Init+0xae>
    return 32U;
 800c3f0:	2220      	movs	r2, #32

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800c3f2:	e04c      	b.n	800c48e <LL_GPIO_Init+0xae>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c3f4:	688e      	ldr	r6, [r1, #8]
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800c3f6:	6885      	ldr	r5, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c3f8:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800c3fc:	b1e4      	cbz	r4, 800c438 <LL_GPIO_Init+0x58>
  return __builtin_clz(value);
 800c3fe:	fab4 f484 	clz	r4, r4
 800c402:	0064      	lsls	r4, r4, #1
 800c404:	f04f 0c03 	mov.w	ip, #3
 800c408:	fa0c f404 	lsl.w	r4, ip, r4
 800c40c:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c410:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800c414:	b194      	cbz	r4, 800c43c <LL_GPIO_Init+0x5c>
  return __builtin_clz(value);
 800c416:	fab4 f484 	clz	r4, r4
 800c41a:	0064      	lsls	r4, r4, #1
 800c41c:	fa06 f404 	lsl.w	r4, r6, r4
 800c420:	432c      	orrs	r4, r5
 800c422:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800c424:	680d      	ldr	r5, [r1, #0]
 800c426:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c428:	6844      	ldr	r4, [r0, #4]
 800c42a:	ea24 0405 	bic.w	r4, r4, r5
 800c42e:	fb06 f505 	mul.w	r5, r6, r5
 800c432:	432c      	orrs	r4, r5
 800c434:	6044      	str	r4, [r0, #4]
}
 800c436:	e039      	b.n	800c4ac <LL_GPIO_Init+0xcc>
    return 32U;
 800c438:	2420      	movs	r4, #32
 800c43a:	e7e2      	b.n	800c402 <LL_GPIO_Init+0x22>
 800c43c:	2420      	movs	r4, #32
 800c43e:	e7ec      	b.n	800c41a <LL_GPIO_Init+0x3a>
 800c440:	2420      	movs	r4, #32
 800c442:	e03b      	b.n	800c4bc <LL_GPIO_Init+0xdc>
 800c444:	2420      	movs	r4, #32
 800c446:	e046      	b.n	800c4d6 <LL_GPIO_Init+0xf6>
 800c448:	2420      	movs	r4, #32
 800c44a:	e056      	b.n	800c4fa <LL_GPIO_Init+0x11a>
 800c44c:	2420      	movs	r4, #32
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800c44e:	00a4      	lsls	r4, r4, #2
 800c450:	fa06 f404 	lsl.w	r4, r6, r4
 800c454:	432c      	orrs	r4, r5
 800c456:	6204      	str	r4, [r0, #32]
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c458:	684e      	ldr	r6, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800c45a:	6805      	ldr	r5, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c45c:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800c460:	2c00      	cmp	r4, #0
 800c462:	d075      	beq.n	800c550 <LL_GPIO_Init+0x170>
  return __builtin_clz(value);
 800c464:	fab4 f484 	clz	r4, r4
 800c468:	0064      	lsls	r4, r4, #1
 800c46a:	f04f 0c03 	mov.w	ip, #3
 800c46e:	fa0c f404 	lsl.w	r4, ip, r4
 800c472:	ea25 0404 	bic.w	r4, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c476:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d06a      	beq.n	800c554 <LL_GPIO_Init+0x174>
  return __builtin_clz(value);
 800c47e:	fab3 f383 	clz	r3, r3
 800c482:	005b      	lsls	r3, r3, #1
 800c484:	fa06 f303 	lsl.w	r3, r6, r3
 800c488:	4323      	orrs	r3, r4
 800c48a:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 800c48c:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800c48e:	680b      	ldr	r3, [r1, #0]
 800c490:	fa33 f402 	lsrs.w	r4, r3, r2
 800c494:	d060      	beq.n	800c558 <LL_GPIO_Init+0x178>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800c496:	f04f 0c01 	mov.w	ip, #1
 800c49a:	fa0c fc02 	lsl.w	ip, ip, r2
    if (currentpin != 0x00u)
 800c49e:	ea1c 0303 	ands.w	r3, ip, r3
 800c4a2:	d0f3      	beq.n	800c48c <LL_GPIO_Init+0xac>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c4a4:	684c      	ldr	r4, [r1, #4]
 800c4a6:	3c01      	subs	r4, #1
 800c4a8:	2c01      	cmp	r4, #1
 800c4aa:	d9a3      	bls.n	800c3f4 <LL_GPIO_Init+0x14>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c4ac:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800c4ae:	68c5      	ldr	r5, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c4b0:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800c4b4:	2c00      	cmp	r4, #0
 800c4b6:	d0c3      	beq.n	800c440 <LL_GPIO_Init+0x60>
  return __builtin_clz(value);
 800c4b8:	fab4 f484 	clz	r4, r4
 800c4bc:	0064      	lsls	r4, r4, #1
 800c4be:	f04f 0c03 	mov.w	ip, #3
 800c4c2:	fa0c f404 	lsl.w	r4, ip, r4
 800c4c6:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c4ca:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800c4ce:	2c00      	cmp	r4, #0
 800c4d0:	d0b8      	beq.n	800c444 <LL_GPIO_Init+0x64>
  return __builtin_clz(value);
 800c4d2:	fab4 f484 	clz	r4, r4
 800c4d6:	0064      	lsls	r4, r4, #1
 800c4d8:	fa06 f404 	lsl.w	r4, r6, r4
 800c4dc:	432c      	orrs	r4, r5
 800c4de:	60c4      	str	r4, [r0, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c4e0:	684c      	ldr	r4, [r1, #4]
 800c4e2:	2c02      	cmp	r4, #2
 800c4e4:	d1b8      	bne.n	800c458 <LL_GPIO_Init+0x78>
        if (currentpin < LL_GPIO_PIN_8)
 800c4e6:	2bff      	cmp	r3, #255	; 0xff
 800c4e8:	d814      	bhi.n	800c514 <LL_GPIO_Init+0x134>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c4ea:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800c4ec:	6a05      	ldr	r5, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c4ee:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800c4f2:	2c00      	cmp	r4, #0
 800c4f4:	d0a8      	beq.n	800c448 <LL_GPIO_Init+0x68>
  return __builtin_clz(value);
 800c4f6:	fab4 f484 	clz	r4, r4
 800c4fa:	00a4      	lsls	r4, r4, #2
 800c4fc:	270f      	movs	r7, #15
 800c4fe:	fa07 f404 	lsl.w	r4, r7, r4
 800c502:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c506:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800c50a:	2c00      	cmp	r4, #0
 800c50c:	d09e      	beq.n	800c44c <LL_GPIO_Init+0x6c>
  return __builtin_clz(value);
 800c50e:	fab4 f484 	clz	r4, r4
 800c512:	e79c      	b.n	800c44e <LL_GPIO_Init+0x6e>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c514:	694f      	ldr	r7, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800c516:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c518:	0a1c      	lsrs	r4, r3, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c51a:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800c51e:	b19d      	cbz	r5, 800c548 <LL_GPIO_Init+0x168>
  return __builtin_clz(value);
 800c520:	fab5 f585 	clz	r5, r5
 800c524:	00ad      	lsls	r5, r5, #2
 800c526:	f04f 0c0f 	mov.w	ip, #15
 800c52a:	fa0c f505 	lsl.w	r5, ip, r5
 800c52e:	ea26 0505 	bic.w	r5, r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c532:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 800c536:	b14c      	cbz	r4, 800c54c <LL_GPIO_Init+0x16c>
  return __builtin_clz(value);
 800c538:	fab4 f484 	clz	r4, r4
 800c53c:	00a4      	lsls	r4, r4, #2
 800c53e:	fa07 f404 	lsl.w	r4, r7, r4
 800c542:	432c      	orrs	r4, r5
 800c544:	6244      	str	r4, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800c546:	e787      	b.n	800c458 <LL_GPIO_Init+0x78>
    return 32U;
 800c548:	2520      	movs	r5, #32
 800c54a:	e7eb      	b.n	800c524 <LL_GPIO_Init+0x144>
 800c54c:	2420      	movs	r4, #32
 800c54e:	e7f5      	b.n	800c53c <LL_GPIO_Init+0x15c>
 800c550:	2420      	movs	r4, #32
 800c552:	e789      	b.n	800c468 <LL_GPIO_Init+0x88>
 800c554:	2320      	movs	r3, #32
 800c556:	e794      	b.n	800c482 <LL_GPIO_Init+0xa2>
  }
  return (SUCCESS);
}
 800c558:	2000      	movs	r0, #0
 800c55a:	bcf0      	pop	{r4, r5, r6, r7}
 800c55c:	4770      	bx	lr
	...

0800c560 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c560:	4b04      	ldr	r3, [pc, #16]	; (800c574 <RCC_GetHCLKClockFreq+0x14>)
 800c562:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800c564:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c568:	4a03      	ldr	r2, [pc, #12]	; (800c578 <RCC_GetHCLKClockFreq+0x18>)
 800c56a:	5cd3      	ldrb	r3, [r2, r3]
 800c56c:	f003 031f 	and.w	r3, r3, #31
}
 800c570:	40d8      	lsrs	r0, r3
 800c572:	4770      	bx	lr
 800c574:	40021000 	.word	0x40021000
 800c578:	08015180 	.word	0x08015180

0800c57c <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800c57c:	4b04      	ldr	r3, [pc, #16]	; (800c590 <RCC_GetPCLK1ClockFreq+0x14>)
 800c57e:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800c580:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800c584:	4a03      	ldr	r2, [pc, #12]	; (800c594 <RCC_GetPCLK1ClockFreq+0x18>)
 800c586:	5cd3      	ldrb	r3, [r2, r3]
 800c588:	f003 031f 	and.w	r3, r3, #31
}
 800c58c:	40d8      	lsrs	r0, r3
 800c58e:	4770      	bx	lr
 800c590:	40021000 	.word	0x40021000
 800c594:	08015190 	.word	0x08015190

0800c598 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800c598:	4b04      	ldr	r3, [pc, #16]	; (800c5ac <RCC_GetPCLK2ClockFreq+0x14>)
 800c59a:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800c59c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800c5a0:	4a03      	ldr	r2, [pc, #12]	; (800c5b0 <RCC_GetPCLK2ClockFreq+0x18>)
 800c5a2:	5cd3      	ldrb	r3, [r2, r3]
 800c5a4:	f003 031f 	and.w	r3, r3, #31
}
 800c5a8:	40d8      	lsrs	r0, r3
 800c5aa:	4770      	bx	lr
 800c5ac:	40021000 	.word	0x40021000
 800c5b0:	08015190 	.word	0x08015190

0800c5b4 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c5b4:	4b0e      	ldr	r3, [pc, #56]	; (800c5f0 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 800c5bc:	2b03      	cmp	r3, #3
 800c5be:	d014      	beq.n	800c5ea <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800c5c0:	480c      	ldr	r0, [pc, #48]	; (800c5f4 <RCC_PLL_GetFreqDomain_SYS+0x40>)
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c5c2:	4a0b      	ldr	r2, [pc, #44]	; (800c5f0 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 800c5c4:	68d3      	ldr	r3, [r2, #12]
 800c5c6:	f3c3 2306 	ubfx	r3, r3, #8, #7

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800c5ca:	fb03 f000 	mul.w	r0, r3, r0
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c5ce:	68d3      	ldr	r3, [r2, #12]
 800c5d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c5da:	68d3      	ldr	r3, [r2, #12]
 800c5dc:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	005b      	lsls	r3, r3, #1
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800c5e4:	fbb0 f0f3 	udiv	r0, r0, r3
 800c5e8:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 800c5ea:	4803      	ldr	r0, [pc, #12]	; (800c5f8 <RCC_PLL_GetFreqDomain_SYS+0x44>)
 800c5ec:	e7e9      	b.n	800c5c2 <RCC_PLL_GetFreqDomain_SYS+0xe>
 800c5ee:	bf00      	nop
 800c5f0:	40021000 	.word	0x40021000
 800c5f4:	00f42400 	.word	0x00f42400
 800c5f8:	007a1200 	.word	0x007a1200

0800c5fc <RCC_GetSystemClockFreq>:
{
 800c5fc:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c5fe:	4b07      	ldr	r3, [pc, #28]	; (800c61c <RCC_GetSystemClockFreq+0x20>)
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 800c606:	2b08      	cmp	r3, #8
 800c608:	d004      	beq.n	800c614 <RCC_GetSystemClockFreq+0x18>
 800c60a:	2b0c      	cmp	r3, #12
 800c60c:	d104      	bne.n	800c618 <RCC_GetSystemClockFreq+0x1c>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800c60e:	f7ff ffd1 	bl	800c5b4 <RCC_PLL_GetFreqDomain_SYS>
      break;
 800c612:	e002      	b.n	800c61a <RCC_GetSystemClockFreq+0x1e>
      frequency = HSE_VALUE;
 800c614:	4802      	ldr	r0, [pc, #8]	; (800c620 <RCC_GetSystemClockFreq+0x24>)
 800c616:	e000      	b.n	800c61a <RCC_GetSystemClockFreq+0x1e>
  switch (LL_RCC_GetSysClkSource())
 800c618:	4802      	ldr	r0, [pc, #8]	; (800c624 <RCC_GetSystemClockFreq+0x28>)
}
 800c61a:	bd08      	pop	{r3, pc}
 800c61c:	40021000 	.word	0x40021000
 800c620:	007a1200 	.word	0x007a1200
 800c624:	00f42400 	.word	0x00f42400

0800c628 <LL_RCC_GetUSARTClockFreq>:
{
 800c628:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800c62a:	2803      	cmp	r0, #3
 800c62c:	d005      	beq.n	800c63a <LL_RCC_GetUSARTClockFreq+0x12>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800c62e:	280c      	cmp	r0, #12
 800c630:	d02c      	beq.n	800c68c <LL_RCC_GetUSARTClockFreq+0x64>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800c632:	2830      	cmp	r0, #48	; 0x30
 800c634:	d053      	beq.n	800c6de <LL_RCC_GetUSARTClockFreq+0xb6>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800c636:	2000      	movs	r0, #0
}
 800c638:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800c63a:	4b3d      	ldr	r3, [pc, #244]	; (800c730 <LL_RCC_GetUSARTClockFreq+0x108>)
 800c63c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c640:	4003      	ands	r3, r0
 800c642:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c646:	4b3b      	ldr	r3, [pc, #236]	; (800c734 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800c648:	4298      	cmp	r0, r3
 800c64a:	d00f      	beq.n	800c66c <LL_RCC_GetUSARTClockFreq+0x44>
 800c64c:	f1b0 1f03 	cmp.w	r0, #196611	; 0x30003
 800c650:	d013      	beq.n	800c67a <LL_RCC_GetUSARTClockFreq+0x52>
 800c652:	3b01      	subs	r3, #1
 800c654:	4298      	cmp	r0, r3
 800c656:	d006      	beq.n	800c666 <LL_RCC_GetUSARTClockFreq+0x3e>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c658:	f7ff ffd0 	bl	800c5fc <RCC_GetSystemClockFreq>
 800c65c:	f7ff ff80 	bl	800c560 <RCC_GetHCLKClockFreq>
 800c660:	f7ff ff9a 	bl	800c598 <RCC_GetPCLK2ClockFreq>
        break;
 800c664:	e7e8      	b.n	800c638 <LL_RCC_GetUSARTClockFreq+0x10>
        usart_frequency = RCC_GetSystemClockFreq();
 800c666:	f7ff ffc9 	bl	800c5fc <RCC_GetSystemClockFreq>
        break;
 800c66a:	e7e5      	b.n	800c638 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c66c:	4b30      	ldr	r3, [pc, #192]	; (800c730 <LL_RCC_GetUSARTClockFreq+0x108>)
 800c66e:	6818      	ldr	r0, [r3, #0]
 800c670:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800c674:	d0e0      	beq.n	800c638 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = HSI_VALUE;
 800c676:	4830      	ldr	r0, [pc, #192]	; (800c738 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c678:	e7de      	b.n	800c638 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c67a:	4b2d      	ldr	r3, [pc, #180]	; (800c730 <LL_RCC_GetUSARTClockFreq+0x108>)
 800c67c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800c680:	f010 0002 	ands.w	r0, r0, #2
 800c684:	d0d8      	beq.n	800c638 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = LSE_VALUE;
 800c686:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c68a:	e7d5      	b.n	800c638 <LL_RCC_GetUSARTClockFreq+0x10>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800c68c:	4b28      	ldr	r3, [pc, #160]	; (800c730 <LL_RCC_GetUSARTClockFreq+0x108>)
 800c68e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c692:	4003      	ands	r3, r0
 800c694:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c698:	4b28      	ldr	r3, [pc, #160]	; (800c73c <LL_RCC_GetUSARTClockFreq+0x114>)
 800c69a:	4298      	cmp	r0, r3
 800c69c:	d00f      	beq.n	800c6be <LL_RCC_GetUSARTClockFreq+0x96>
 800c69e:	f1b0 1f0c 	cmp.w	r0, #786444	; 0xc000c
 800c6a2:	d013      	beq.n	800c6cc <LL_RCC_GetUSARTClockFreq+0xa4>
 800c6a4:	3b04      	subs	r3, #4
 800c6a6:	4298      	cmp	r0, r3
 800c6a8:	d006      	beq.n	800c6b8 <LL_RCC_GetUSARTClockFreq+0x90>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c6aa:	f7ff ffa7 	bl	800c5fc <RCC_GetSystemClockFreq>
 800c6ae:	f7ff ff57 	bl	800c560 <RCC_GetHCLKClockFreq>
 800c6b2:	f7ff ff63 	bl	800c57c <RCC_GetPCLK1ClockFreq>
        break;
 800c6b6:	e7bf      	b.n	800c638 <LL_RCC_GetUSARTClockFreq+0x10>
        usart_frequency = RCC_GetSystemClockFreq();
 800c6b8:	f7ff ffa0 	bl	800c5fc <RCC_GetSystemClockFreq>
        break;
 800c6bc:	e7bc      	b.n	800c638 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c6be:	4b1c      	ldr	r3, [pc, #112]	; (800c730 <LL_RCC_GetUSARTClockFreq+0x108>)
 800c6c0:	6818      	ldr	r0, [r3, #0]
 800c6c2:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800c6c6:	d0b7      	beq.n	800c638 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = HSI_VALUE;
 800c6c8:	481b      	ldr	r0, [pc, #108]	; (800c738 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c6ca:	e7b5      	b.n	800c638 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c6cc:	4b18      	ldr	r3, [pc, #96]	; (800c730 <LL_RCC_GetUSARTClockFreq+0x108>)
 800c6ce:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800c6d2:	f010 0002 	ands.w	r0, r0, #2
 800c6d6:	d0af      	beq.n	800c638 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = LSE_VALUE;
 800c6d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c6dc:	e7ac      	b.n	800c638 <LL_RCC_GetUSARTClockFreq+0x10>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800c6de:	4b14      	ldr	r3, [pc, #80]	; (800c730 <LL_RCC_GetUSARTClockFreq+0x108>)
 800c6e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6e4:	4003      	ands	r3, r0
 800c6e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c6ea:	4b15      	ldr	r3, [pc, #84]	; (800c740 <LL_RCC_GetUSARTClockFreq+0x118>)
 800c6ec:	4298      	cmp	r0, r3
 800c6ee:	d00f      	beq.n	800c710 <LL_RCC_GetUSARTClockFreq+0xe8>
 800c6f0:	f1b0 1f30 	cmp.w	r0, #3145776	; 0x300030
 800c6f4:	d013      	beq.n	800c71e <LL_RCC_GetUSARTClockFreq+0xf6>
 800c6f6:	3b10      	subs	r3, #16
 800c6f8:	4298      	cmp	r0, r3
 800c6fa:	d006      	beq.n	800c70a <LL_RCC_GetUSARTClockFreq+0xe2>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c6fc:	f7ff ff7e 	bl	800c5fc <RCC_GetSystemClockFreq>
 800c700:	f7ff ff2e 	bl	800c560 <RCC_GetHCLKClockFreq>
 800c704:	f7ff ff3a 	bl	800c57c <RCC_GetPCLK1ClockFreq>
          break;
 800c708:	e796      	b.n	800c638 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = RCC_GetSystemClockFreq();
 800c70a:	f7ff ff77 	bl	800c5fc <RCC_GetSystemClockFreq>
          break;
 800c70e:	e793      	b.n	800c638 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c710:	4b07      	ldr	r3, [pc, #28]	; (800c730 <LL_RCC_GetUSARTClockFreq+0x108>)
 800c712:	6818      	ldr	r0, [r3, #0]
 800c714:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800c718:	d08e      	beq.n	800c638 <LL_RCC_GetUSARTClockFreq+0x10>
            usart_frequency = HSI_VALUE;
 800c71a:	4807      	ldr	r0, [pc, #28]	; (800c738 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c71c:	e78c      	b.n	800c638 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c71e:	4b04      	ldr	r3, [pc, #16]	; (800c730 <LL_RCC_GetUSARTClockFreq+0x108>)
 800c720:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800c724:	f010 0002 	ands.w	r0, r0, #2
 800c728:	d086      	beq.n	800c638 <LL_RCC_GetUSARTClockFreq+0x10>
            usart_frequency = LSE_VALUE;
 800c72a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return usart_frequency;
 800c72e:	e783      	b.n	800c638 <LL_RCC_GetUSARTClockFreq+0x10>
 800c730:	40021000 	.word	0x40021000
 800c734:	00030002 	.word	0x00030002
 800c738:	00f42400 	.word	0x00f42400
 800c73c:	000c0008 	.word	0x000c0008
 800c740:	00300020 	.word	0x00300020

0800c744 <LL_RCC_GetUARTClockFreq>:
{
 800c744:	b510      	push	{r4, lr}
 800c746:	4604      	mov	r4, r0
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800c748:	28c0      	cmp	r0, #192	; 0xc0
 800c74a:	d004      	beq.n	800c756 <LL_RCC_GetUARTClockFreq+0x12>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800c74c:	2000      	movs	r0, #0
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800c74e:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 800c752:	d029      	beq.n	800c7a8 <LL_RCC_GetUARTClockFreq+0x64>
}
 800c754:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800c756:	4b29      	ldr	r3, [pc, #164]	; (800c7fc <LL_RCC_GetUARTClockFreq+0xb8>)
 800c758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c75c:	4003      	ands	r3, r0
 800c75e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800c762:	4a27      	ldr	r2, [pc, #156]	; (800c800 <LL_RCC_GetUARTClockFreq+0xbc>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d00f      	beq.n	800c788 <LL_RCC_GetUARTClockFreq+0x44>
 800c768:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800c76c:	d013      	beq.n	800c796 <LL_RCC_GetUARTClockFreq+0x52>
 800c76e:	3a40      	subs	r2, #64	; 0x40
 800c770:	4293      	cmp	r3, r2
 800c772:	d006      	beq.n	800c782 <LL_RCC_GetUARTClockFreq+0x3e>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c774:	f7ff ff42 	bl	800c5fc <RCC_GetSystemClockFreq>
 800c778:	f7ff fef2 	bl	800c560 <RCC_GetHCLKClockFreq>
 800c77c:	f7ff fefe 	bl	800c57c <RCC_GetPCLK1ClockFreq>
        break;
 800c780:	e7e5      	b.n	800c74e <LL_RCC_GetUARTClockFreq+0xa>
        uart_frequency = RCC_GetSystemClockFreq();
 800c782:	f7ff ff3b 	bl	800c5fc <RCC_GetSystemClockFreq>
        break;
 800c786:	e7e2      	b.n	800c74e <LL_RCC_GetUARTClockFreq+0xa>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c788:	4b1c      	ldr	r3, [pc, #112]	; (800c7fc <LL_RCC_GetUARTClockFreq+0xb8>)
 800c78a:	6818      	ldr	r0, [r3, #0]
 800c78c:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800c790:	d0dd      	beq.n	800c74e <LL_RCC_GetUARTClockFreq+0xa>
          uart_frequency = HSI_VALUE;
 800c792:	481c      	ldr	r0, [pc, #112]	; (800c804 <LL_RCC_GetUARTClockFreq+0xc0>)
 800c794:	e7db      	b.n	800c74e <LL_RCC_GetUARTClockFreq+0xa>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c796:	4b19      	ldr	r3, [pc, #100]	; (800c7fc <LL_RCC_GetUARTClockFreq+0xb8>)
 800c798:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800c79c:	f010 0002 	ands.w	r0, r0, #2
 800c7a0:	d0d5      	beq.n	800c74e <LL_RCC_GetUARTClockFreq+0xa>
          uart_frequency = LSE_VALUE;
 800c7a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c7a6:	e7d2      	b.n	800c74e <LL_RCC_GetUARTClockFreq+0xa>
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800c7a8:	4b14      	ldr	r3, [pc, #80]	; (800c7fc <LL_RCC_GetUARTClockFreq+0xb8>)
 800c7aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7ae:	4023      	ands	r3, r4
 800c7b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800c7b4:	4b14      	ldr	r3, [pc, #80]	; (800c808 <LL_RCC_GetUARTClockFreq+0xc4>)
 800c7b6:	429c      	cmp	r4, r3
 800c7b8:	d010      	beq.n	800c7dc <LL_RCC_GetUARTClockFreq+0x98>
 800c7ba:	f1b4 2f03 	cmp.w	r4, #50332416	; 0x3000300
 800c7be:	d014      	beq.n	800c7ea <LL_RCC_GetUARTClockFreq+0xa6>
 800c7c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c7c4:	429c      	cmp	r4, r3
 800c7c6:	d006      	beq.n	800c7d6 <LL_RCC_GetUARTClockFreq+0x92>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c7c8:	f7ff ff18 	bl	800c5fc <RCC_GetSystemClockFreq>
 800c7cc:	f7ff fec8 	bl	800c560 <RCC_GetHCLKClockFreq>
 800c7d0:	f7ff fed4 	bl	800c57c <RCC_GetPCLK1ClockFreq>
        break;
 800c7d4:	e7be      	b.n	800c754 <LL_RCC_GetUARTClockFreq+0x10>
        uart_frequency = RCC_GetSystemClockFreq();
 800c7d6:	f7ff ff11 	bl	800c5fc <RCC_GetSystemClockFreq>
        break;
 800c7da:	e7bb      	b.n	800c754 <LL_RCC_GetUARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c7dc:	4b07      	ldr	r3, [pc, #28]	; (800c7fc <LL_RCC_GetUARTClockFreq+0xb8>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800c7e4:	d0b6      	beq.n	800c754 <LL_RCC_GetUARTClockFreq+0x10>
          uart_frequency = HSI_VALUE;
 800c7e6:	4807      	ldr	r0, [pc, #28]	; (800c804 <LL_RCC_GetUARTClockFreq+0xc0>)
 800c7e8:	e7b4      	b.n	800c754 <LL_RCC_GetUARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c7ea:	4b04      	ldr	r3, [pc, #16]	; (800c7fc <LL_RCC_GetUARTClockFreq+0xb8>)
 800c7ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7f0:	f013 0f02 	tst.w	r3, #2
 800c7f4:	d0ae      	beq.n	800c754 <LL_RCC_GetUARTClockFreq+0x10>
          uart_frequency = LSE_VALUE;
 800c7f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return uart_frequency;
 800c7fa:	e7ab      	b.n	800c754 <LL_RCC_GetUARTClockFreq+0x10>
 800c7fc:	40021000 	.word	0x40021000
 800c800:	00c00080 	.word	0x00c00080
 800c804:	00f42400 	.word	0x00f42400
 800c808:	03000200 	.word	0x03000200

0800c80c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800c80c:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800c80e:	6803      	ldr	r3, [r0, #0]
 800c810:	f013 0f01 	tst.w	r3, #1
 800c814:	d175      	bne.n	800c902 <LL_USART_Init+0xf6>
 800c816:	4604      	mov	r4, r0
 800c818:	460d      	mov	r5, r1
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800c81a:	6803      	ldr	r3, [r0, #0]
 800c81c:	4a3a      	ldr	r2, [pc, #232]	; (800c908 <LL_USART_Init+0xfc>)
 800c81e:	401a      	ands	r2, r3
 800c820:	688b      	ldr	r3, [r1, #8]
 800c822:	6909      	ldr	r1, [r1, #16]
 800c824:	430b      	orrs	r3, r1
 800c826:	6969      	ldr	r1, [r5, #20]
 800c828:	430b      	orrs	r3, r1
 800c82a:	69e9      	ldr	r1, [r5, #28]
 800c82c:	430b      	orrs	r3, r1
 800c82e:	4313      	orrs	r3, r2
 800c830:	6003      	str	r3, [r0, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800c832:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c834:	6842      	ldr	r2, [r0, #4]
 800c836:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800c83a:	4313      	orrs	r3, r2
 800c83c:	6043      	str	r3, [r0, #4]
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800c83e:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c840:	6882      	ldr	r2, [r0, #8]
 800c842:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c846:	4313      	orrs	r3, r2
 800c848:	6083      	str	r3, [r0, #8]

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800c84a:	4b30      	ldr	r3, [pc, #192]	; (800c90c <LL_USART_Init+0x100>)
 800c84c:	4298      	cmp	r0, r3
 800c84e:	d013      	beq.n	800c878 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 800c850:	4b2f      	ldr	r3, [pc, #188]	; (800c910 <LL_USART_Init+0x104>)
 800c852:	4298      	cmp	r0, r3
 800c854:	d019      	beq.n	800c88a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
    }
    else if (USARTx == USART3)
 800c856:	4b2f      	ldr	r3, [pc, #188]	; (800c914 <LL_USART_Init+0x108>)
 800c858:	4298      	cmp	r0, r3
 800c85a:	d01a      	beq.n	800c892 <LL_USART_Init+0x86>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
    }
#if defined(UART4)
    else if (USARTx == UART4)
 800c85c:	4b2e      	ldr	r3, [pc, #184]	; (800c918 <LL_USART_Init+0x10c>)
 800c85e:	4298      	cmp	r0, r3
 800c860:	d01b      	beq.n	800c89a <LL_USART_Init+0x8e>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800c862:	4b2e      	ldr	r3, [pc, #184]	; (800c91c <LL_USART_Init+0x110>)
 800c864:	4298      	cmp	r0, r3
 800c866:	d01c      	beq.n	800c8a2 <LL_USART_Init+0x96>
  ErrorStatus status = ERROR;
 800c868:	2001      	movs	r0, #1
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800c86a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c86c:	f022 020f 	bic.w	r2, r2, #15
 800c870:	882b      	ldrh	r3, [r5, #0]
 800c872:	4313      	orrs	r3, r2
 800c874:	62e3      	str	r3, [r4, #44]	; 0x2c
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 800c876:	bd38      	pop	{r3, r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800c878:	2003      	movs	r0, #3
 800c87a:	f7ff fed5 	bl	800c628 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c87e:	2800      	cmp	r0, #0
 800c880:	d03d      	beq.n	800c8fe <LL_USART_Init+0xf2>
        && (USART_InitStruct->BaudRate != 0U))
 800c882:	686a      	ldr	r2, [r5, #4]
 800c884:	b992      	cbnz	r2, 800c8ac <LL_USART_Init+0xa0>
  ErrorStatus status = ERROR;
 800c886:	2001      	movs	r0, #1
 800c888:	e7ef      	b.n	800c86a <LL_USART_Init+0x5e>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800c88a:	200c      	movs	r0, #12
 800c88c:	f7ff fecc 	bl	800c628 <LL_RCC_GetUSARTClockFreq>
 800c890:	e7f5      	b.n	800c87e <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800c892:	2030      	movs	r0, #48	; 0x30
 800c894:	f7ff fec8 	bl	800c628 <LL_RCC_GetUSARTClockFreq>
 800c898:	e7f1      	b.n	800c87e <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800c89a:	20c0      	movs	r0, #192	; 0xc0
 800c89c:	f7ff ff52 	bl	800c744 <LL_RCC_GetUARTClockFreq>
 800c8a0:	e7ed      	b.n	800c87e <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800c8a2:	f44f 7040 	mov.w	r0, #768	; 0x300
 800c8a6:	f7ff ff4d 	bl	800c744 <LL_RCC_GetUARTClockFreq>
 800c8aa:	e7e8      	b.n	800c87e <LL_USART_Init+0x72>
      LL_USART_SetBaudRate(USARTx,
 800c8ac:	682b      	ldr	r3, [r5, #0]
 800c8ae:	69e9      	ldr	r1, [r5, #28]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800c8b0:	2b0b      	cmp	r3, #11
 800c8b2:	d80f      	bhi.n	800c8d4 <LL_USART_Init+0xc8>
  else if (BaudRate == 0U)
 800c8b4:	b172      	cbz	r2, 800c8d4 <LL_USART_Init+0xc8>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800c8b6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c8ba:	d00d      	beq.n	800c8d8 <LL_USART_Init+0xcc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	4918      	ldr	r1, [pc, #96]	; (800c920 <LL_USART_Init+0x114>)
 800c8c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c8c4:	fbb0 f3f3 	udiv	r3, r0, r3
 800c8c8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800c8cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 800c8d4:	2000      	movs	r0, #0
}
 800c8d6:	e7c8      	b.n	800c86a <LL_USART_Init+0x5e>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	4911      	ldr	r1, [pc, #68]	; (800c920 <LL_USART_Init+0x114>)
 800c8dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c8e0:	fbb0 f0f3 	udiv	r0, r0, r3
 800c8e4:	0853      	lsrs	r3, r2, #1
 800c8e6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800c8ea:	fbb0 f3f2 	udiv	r3, r0, r2
    brrtemp = usartdiv & 0xFFF0U;
 800c8ee:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800c8f2:	401a      	ands	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c8f4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800c8f8:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 800c8fa:	60e3      	str	r3, [r4, #12]
 800c8fc:	e7ea      	b.n	800c8d4 <LL_USART_Init+0xc8>
  ErrorStatus status = ERROR;
 800c8fe:	2001      	movs	r0, #1
 800c900:	e7b3      	b.n	800c86a <LL_USART_Init+0x5e>
 800c902:	2001      	movs	r0, #1
 800c904:	e7b7      	b.n	800c876 <LL_USART_Init+0x6a>
 800c906:	bf00      	nop
 800c908:	efff69f3 	.word	0xefff69f3
 800c90c:	40013800 	.word	0x40013800
 800c910:	40004400 	.word	0x40004400
 800c914:	40004800 	.word	0x40004800
 800c918:	40004c00 	.word	0x40004c00
 800c91c:	40005000 	.word	0x40005000
 800c920:	080151c0 	.word	0x080151c0

0800c924 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c924:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c926:	2000      	movs	r0, #0
 800c928:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c92c:	f64b 7280 	movw	r2, #49024	; 0xbf80
 800c930:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 800c934:	4770      	bx	lr

0800c936 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c936:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800c93a:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 800c93e:	045b      	lsls	r3, r3, #17
 800c940:	0c5b      	lsrs	r3, r3, #17
 800c942:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800c946:	2000      	movs	r0, #0
 800c948:	4770      	bx	lr

0800c94a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c94a:	b084      	sub	sp, #16
 800c94c:	4684      	mov	ip, r0
 800c94e:	a801      	add	r0, sp, #4
 800c950:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c954:	2301      	movs	r3, #1
 800c956:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c95a:	2000      	movs	r0, #0
 800c95c:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c960:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c964:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 800c968:	b004      	add	sp, #16
 800c96a:	4770      	bx	lr

0800c96c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c96c:	b510      	push	{r4, lr}
 800c96e:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c970:	780a      	ldrb	r2, [r1, #0]
 800c972:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
 800c976:	fa1f fc8c 	uxth.w	ip, ip
 800c97a:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 800c97e:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800c982:	fa1f fc8c 	uxth.w	ip, ip

  /* initialize Endpoint */
  switch (ep->type)
 800c986:	78c8      	ldrb	r0, [r1, #3]
 800c988:	2803      	cmp	r0, #3
 800c98a:	d862      	bhi.n	800ca52 <USB_ActivateEndpoint+0xe6>
 800c98c:	e8df f000 	tbb	[pc, r0]
 800c990:	59025d56 	.word	0x59025d56
 800c994:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c996:	f248 0e80 	movw	lr, #32896	; 0x8080
 800c99a:	ea4c 0c0e 	orr.w	ip, ip, lr
 800c99e:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c9a2:	f891 c000 	ldrb.w	ip, [r1]
 800c9a6:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800c9aa:	b212      	sxth	r2, r2
 800c9ac:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800c9b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800c9b4:	ea4c 0202 	orr.w	r2, ip, r2
 800c9b8:	b292      	uxth	r2, r2
 800c9ba:	ea42 020e 	orr.w	r2, r2, lr
 800c9be:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 800c9c2:	7b0a      	ldrb	r2, [r1, #12]
 800c9c4:	2a00      	cmp	r2, #0
 800c9c6:	f040 80c2 	bne.w	800cb4e <USB_ActivateEndpoint+0x1e2>
  {
    if (ep->is_in != 0U)
 800c9ca:	784a      	ldrb	r2, [r1, #1]
 800c9cc:	2a00      	cmp	r2, #0
 800c9ce:	d051      	beq.n	800ca74 <USB_ActivateEndpoint+0x108>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c9d0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800c9d4:	fa13 f282 	uxtah	r2, r3, r2
 800c9d8:	780c      	ldrb	r4, [r1, #0]
 800c9da:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c9de:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 800c9e2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c9e6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800c9ea:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c9ee:	780c      	ldrb	r4, [r1, #0]
 800c9f0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800c9f4:	f012 0f40 	tst.w	r2, #64	; 0x40
 800c9f8:	d00c      	beq.n	800ca14 <USB_ActivateEndpoint+0xa8>
 800c9fa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800c9fe:	b292      	uxth	r2, r2
 800ca00:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ca04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ca08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca0c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800ca10:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800ca14:	78ca      	ldrb	r2, [r1, #3]
 800ca16:	2a01      	cmp	r2, #1
 800ca18:	d01d      	beq.n	800ca56 <USB_ActivateEndpoint+0xea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ca1a:	7809      	ldrb	r1, [r1, #0]
 800ca1c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800ca20:	b292      	uxth	r2, r2
 800ca22:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ca26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca2a:	f082 0220 	eor.w	r2, r2, #32
 800ca2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ca36:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800ca3a:	e066      	b.n	800cb0a <USB_ActivateEndpoint+0x19e>
      wEpRegVal |= USB_EP_CONTROL;
 800ca3c:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
      break;
 800ca40:	e7a9      	b.n	800c996 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_INTERRUPT;
 800ca42:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800ca46:	2000      	movs	r0, #0
      break;
 800ca48:	e7a5      	b.n	800c996 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ca4a:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 800ca4e:	2000      	movs	r0, #0
      break;
 800ca50:	e7a1      	b.n	800c996 <USB_ActivateEndpoint+0x2a>
      ret = HAL_ERROR;
 800ca52:	2001      	movs	r0, #1
 800ca54:	e79f      	b.n	800c996 <USB_ActivateEndpoint+0x2a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ca56:	7809      	ldrb	r1, [r1, #0]
 800ca58:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800ca5c:	b292      	uxth	r2, r2
 800ca5e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ca62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ca6e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800ca72:	e04a      	b.n	800cb0a <USB_ActivateEndpoint+0x19e>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ca74:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800ca78:	fa13 f282 	uxtah	r2, r3, r2
 800ca7c:	780c      	ldrb	r4, [r1, #0]
 800ca7e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ca82:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 800ca86:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ca8a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800ca8e:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ca92:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800ca96:	fa13 f282 	uxtah	r2, r3, r2
 800ca9a:	780c      	ldrb	r4, [r1, #0]
 800ca9c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800caa0:	690c      	ldr	r4, [r1, #16]
 800caa2:	2c3e      	cmp	r4, #62	; 0x3e
 800caa4:	d932      	bls.n	800cb0c <USB_ActivateEndpoint+0x1a0>
 800caa6:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 800caaa:	f014 0f1f 	tst.w	r4, #31
 800caae:	d101      	bne.n	800cab4 <USB_ActivateEndpoint+0x148>
 800cab0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800cab4:	ea6f 6ccc 	mvn.w	ip, ip, lsl #27
 800cab8:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 800cabc:	fa1f fc8c 	uxth.w	ip, ip
 800cac0:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cac4:	780c      	ldrb	r4, [r1, #0]
 800cac6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800caca:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800cace:	d00c      	beq.n	800caea <USB_ActivateEndpoint+0x17e>
 800cad0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800cad4:	b292      	uxth	r2, r2
 800cad6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800cada:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800cade:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800cae2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cae6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800caea:	7809      	ldrb	r1, [r1, #0]
 800caec:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800caf0:	b292      	uxth	r2, r2
 800caf2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800caf6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800cafa:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800cafe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cb06:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 800cb0a:	bd10      	pop	{r4, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800cb0c:	b98c      	cbnz	r4, 800cb32 <USB_ActivateEndpoint+0x1c6>
 800cb0e:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 800cb12:	b2a4      	uxth	r4, r4
 800cb14:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800cb18:	b2a4      	uxth	r4, r4
 800cb1a:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 800cb1e:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 800cb22:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800cb26:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800cb2a:	b2a4      	uxth	r4, r4
 800cb2c:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 800cb30:	e7c8      	b.n	800cac4 <USB_ActivateEndpoint+0x158>
 800cb32:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 800cb36:	f014 0f01 	tst.w	r4, #1
 800cb3a:	d001      	beq.n	800cb40 <USB_ActivateEndpoint+0x1d4>
 800cb3c:	f10c 0c01 	add.w	ip, ip, #1
 800cb40:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 800cb44:	fa1f fc8c 	uxth.w	ip, ip
 800cb48:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
 800cb4c:	e7ba      	b.n	800cac4 <USB_ActivateEndpoint+0x158>
    if (ep->type == EP_TYPE_BULK)
 800cb4e:	78ca      	ldrb	r2, [r1, #3]
 800cb50:	2a02      	cmp	r2, #2
 800cb52:	d072      	beq.n	800cc3a <USB_ActivateEndpoint+0x2ce>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800cb54:	780c      	ldrb	r4, [r1, #0]
 800cb56:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800cb5a:	b292      	uxth	r2, r2
 800cb5c:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800cb60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800cb64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cb6c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800cb70:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800cb74:	fa13 f282 	uxtah	r2, r3, r2
 800cb78:	f891 c000 	ldrb.w	ip, [r1]
 800cb7c:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 800cb80:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800cb84:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800cb88:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800cb8c:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
 800cb90:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800cb94:	fa13 f282 	uxtah	r2, r3, r2
 800cb98:	f891 c000 	ldrb.w	ip, [r1]
 800cb9c:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 800cba0:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 800cba4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800cba8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800cbac:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404
    if (ep->is_in == 0U)
 800cbb0:	784a      	ldrb	r2, [r1, #1]
 800cbb2:	2a00      	cmp	r2, #0
 800cbb4:	d150      	bne.n	800cc58 <USB_ActivateEndpoint+0x2ec>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cbb6:	780c      	ldrb	r4, [r1, #0]
 800cbb8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800cbbc:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800cbc0:	d00c      	beq.n	800cbdc <USB_ActivateEndpoint+0x270>
 800cbc2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800cbc6:	b292      	uxth	r2, r2
 800cbc8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800cbcc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800cbd0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800cbd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cbd8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cbdc:	780c      	ldrb	r4, [r1, #0]
 800cbde:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800cbe2:	f012 0f40 	tst.w	r2, #64	; 0x40
 800cbe6:	d00c      	beq.n	800cc02 <USB_ActivateEndpoint+0x296>
 800cbe8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800cbec:	b292      	uxth	r2, r2
 800cbee:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800cbf2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800cbf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cbfa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800cbfe:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cc02:	f891 c000 	ldrb.w	ip, [r1]
 800cc06:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800cc0a:	b292      	uxth	r2, r2
 800cc0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cc10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800cc14:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800cc18:	f248 0480 	movw	r4, #32896	; 0x8080
 800cc1c:	4322      	orrs	r2, r4
 800cc1e:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cc22:	7809      	ldrb	r1, [r1, #0]
 800cc24:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800cc28:	b292      	uxth	r2, r2
 800cc2a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800cc2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc32:	4322      	orrs	r2, r4
 800cc34:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800cc38:	e767      	b.n	800cb0a <USB_ActivateEndpoint+0x19e>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cc3a:	780c      	ldrb	r4, [r1, #0]
 800cc3c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800cc40:	b292      	uxth	r2, r2
 800cc42:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800cc46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800cc4a:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800cc4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cc52:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800cc56:	e78b      	b.n	800cb70 <USB_ActivateEndpoint+0x204>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cc58:	780c      	ldrb	r4, [r1, #0]
 800cc5a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800cc5e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800cc62:	d00c      	beq.n	800cc7e <USB_ActivateEndpoint+0x312>
 800cc64:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800cc68:	b292      	uxth	r2, r2
 800cc6a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800cc6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800cc72:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800cc76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cc7a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cc7e:	780c      	ldrb	r4, [r1, #0]
 800cc80:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800cc84:	f012 0f40 	tst.w	r2, #64	; 0x40
 800cc88:	d00c      	beq.n	800cca4 <USB_ActivateEndpoint+0x338>
 800cc8a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800cc8e:	b292      	uxth	r2, r2
 800cc90:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800cc94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800cc98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc9c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800cca0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800cca4:	78ca      	ldrb	r2, [r1, #3]
 800cca6:	2a01      	cmp	r2, #1
 800cca8:	d01e      	beq.n	800cce8 <USB_ActivateEndpoint+0x37c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ccaa:	780c      	ldrb	r4, [r1, #0]
 800ccac:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800ccb0:	b292      	uxth	r2, r2
 800ccb2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ccb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccba:	f082 0220 	eor.w	r2, r2, #32
 800ccbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ccc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ccc6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ccca:	7809      	ldrb	r1, [r1, #0]
 800cccc:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800ccd0:	b292      	uxth	r2, r2
 800ccd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ccd6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ccda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ccde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cce2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800cce6:	e710      	b.n	800cb0a <USB_ActivateEndpoint+0x19e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cce8:	780c      	ldrb	r4, [r1, #0]
 800ccea:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800ccee:	b292      	uxth	r2, r2
 800ccf0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ccf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ccfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cd00:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800cd04:	e7e1      	b.n	800ccca <USB_ActivateEndpoint+0x35e>

0800cd06 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800cd06:	7b0b      	ldrb	r3, [r1, #12]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d146      	bne.n	800cd9a <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 800cd0c:	784b      	ldrb	r3, [r1, #1]
 800cd0e:	b313      	cbz	r3, 800cd56 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cd10:	780a      	ldrb	r2, [r1, #0]
 800cd12:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cd16:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cd1a:	d00c      	beq.n	800cd36 <USB_DeactivateEndpoint+0x30>
 800cd1c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cd32:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cd36:	780a      	ldrb	r2, [r1, #0]
 800cd38:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd4e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800cd52:	2000      	movs	r0, #0
 800cd54:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cd56:	780a      	ldrb	r2, [r1, #0]
 800cd58:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cd5c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800cd60:	d00c      	beq.n	800cd7c <USB_DeactivateEndpoint+0x76>
 800cd62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cd66:	b29b      	uxth	r3, r3
 800cd68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cd74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd78:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cd7c:	780a      	ldrb	r2, [r1, #0]
 800cd7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cd82:	b29b      	uxth	r3, r3
 800cd84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd94:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800cd98:	e7db      	b.n	800cd52 <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 800cd9a:	784b      	ldrb	r3, [r1, #1]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d14e      	bne.n	800ce3e <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cda0:	780a      	ldrb	r2, [r1, #0]
 800cda2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cda6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800cdaa:	d00c      	beq.n	800cdc6 <USB_DeactivateEndpoint+0xc0>
 800cdac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cdb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cdbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdc2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cdc6:	780a      	ldrb	r2, [r1, #0]
 800cdc8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cdcc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cdd0:	d00c      	beq.n	800cdec <USB_DeactivateEndpoint+0xe6>
 800cdd2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cde0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cde4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cde8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800cdec:	780a      	ldrb	r2, [r1, #0]
 800cdee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cdf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ce04:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ce08:	780b      	ldrb	r3, [r1, #0]
 800ce0a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800ce0e:	b292      	uxth	r2, r2
 800ce10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ce14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ce18:	f248 0c80 	movw	ip, #32896	; 0x8080
 800ce1c:	ea42 020c 	orr.w	r2, r2, ip
 800ce20:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ce24:	780a      	ldrb	r2, [r1, #0]
 800ce26:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce34:	ea43 030c 	orr.w	r3, r3, ip
 800ce38:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800ce3c:	e789      	b.n	800cd52 <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ce3e:	780a      	ldrb	r2, [r1, #0]
 800ce40:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ce44:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800ce48:	d00c      	beq.n	800ce64 <USB_DeactivateEndpoint+0x15e>
 800ce4a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ce5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce60:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ce64:	780a      	ldrb	r2, [r1, #0]
 800ce66:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ce6a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ce6e:	d00c      	beq.n	800ce8a <USB_DeactivateEndpoint+0x184>
 800ce70:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ce86:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800ce8a:	780a      	ldrb	r2, [r1, #0]
 800ce8c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ce9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cea2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cea6:	780b      	ldrb	r3, [r1, #0]
 800cea8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800ceac:	b292      	uxth	r2, r2
 800ceae:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ceb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ceb6:	f248 0c80 	movw	ip, #32896	; 0x8080
 800ceba:	ea42 020c 	orr.w	r2, r2, ip
 800cebe:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cec2:	780a      	ldrb	r2, [r1, #0]
 800cec4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ced2:	ea43 030c 	orr.w	r3, r3, ip
 800ced6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800ceda:	e73a      	b.n	800cd52 <USB_DeactivateEndpoint+0x4c>

0800cedc <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800cedc:	784b      	ldrb	r3, [r1, #1]
 800cede:	b18b      	cbz	r3, 800cf04 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cee0:	780a      	ldrb	r2, [r1, #0]
 800cee2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cee6:	b29b      	uxth	r3, r3
 800cee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ceec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cef0:	f083 0310 	eor.w	r3, r3, #16
 800cef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cefc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 800cf00:	2000      	movs	r0, #0
 800cf02:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800cf04:	780a      	ldrb	r2, [r1, #0]
 800cf06:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cf18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf20:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800cf24:	e7ec      	b.n	800cf00 <USB_EPSetStall+0x24>

0800cf26 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800cf26:	7b0b      	ldrb	r3, [r1, #12]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d14b      	bne.n	800cfc4 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 800cf2c:	784b      	ldrb	r3, [r1, #1]
 800cf2e:	b333      	cbz	r3, 800cf7e <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cf30:	780a      	ldrb	r2, [r1, #0]
 800cf32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cf36:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cf3a:	d00c      	beq.n	800cf56 <USB_EPClearStall+0x30>
 800cf3c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cf52:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800cf56:	78cb      	ldrb	r3, [r1, #3]
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d033      	beq.n	800cfc4 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cf5c:	780a      	ldrb	r2, [r1, #0]
 800cf5e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf6c:	f083 0320 	eor.w	r3, r3, #32
 800cf70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf78:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800cf7c:	e022      	b.n	800cfc4 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cf7e:	780a      	ldrb	r2, [r1, #0]
 800cf80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cf84:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800cf88:	d00c      	beq.n	800cfa4 <USB_EPClearStall+0x7e>
 800cf8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cf9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfa0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cfa4:	780a      	ldrb	r2, [r1, #0]
 800cfa6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cfb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfb4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800cfb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfc0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	4770      	bx	lr

0800cfc8 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800cfc8:	b911      	cbnz	r1, 800cfd0 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cfca:	2380      	movs	r3, #128	; 0x80
 800cfcc:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800cfd0:	2000      	movs	r0, #0
 800cfd2:	4770      	bx	lr

0800cfd4 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cfd4:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 800cfd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 800cfe6:	2000      	movs	r0, #0
 800cfe8:	4770      	bx	lr

0800cfea <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800cfea:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800cfee:	b280      	uxth	r0, r0
 800cff0:	4770      	bx	lr

0800cff2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cff2:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800cff4:	1c5c      	adds	r4, r3, #1
 800cff6:	0864      	lsrs	r4, r4, #1
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cff8:	4402      	add	r2, r0
 800cffa:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800cffe:	e007      	b.n	800d010 <USB_WritePMA+0x1e>
  {
    temp1 = *pBuf;
 800d000:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800d002:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 800d004:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800d008:	f822 3b02 	strh.w	r3, [r2], #2

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d00c:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800d00e:	3c01      	subs	r4, #1
 800d010:	2c00      	cmp	r4, #0
 800d012:	d1f5      	bne.n	800d000 <USB_WritePMA+0xe>
  }
}
 800d014:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <USB_EPStartXfer>:
{
 800d01a:	b570      	push	{r4, r5, r6, lr}
 800d01c:	4605      	mov	r5, r0
 800d01e:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800d020:	784a      	ldrb	r2, [r1, #1]
 800d022:	2a01      	cmp	r2, #1
 800d024:	d032      	beq.n	800d08c <USB_EPStartXfer+0x72>
    if (ep->doublebuffer == 0U)
 800d026:	7b0b      	ldrb	r3, [r1, #12]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f040 8283 	bne.w	800d534 <USB_EPStartXfer+0x51a>
      if (ep->xfer_len > ep->maxpacket)
 800d02e:	698b      	ldr	r3, [r1, #24]
 800d030:	690a      	ldr	r2, [r1, #16]
 800d032:	4293      	cmp	r3, r2
 800d034:	f240 825d 	bls.w	800d4f2 <USB_EPStartXfer+0x4d8>
        ep->xfer_len -= len;
 800d038:	1a9b      	subs	r3, r3, r2
 800d03a:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d03c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800d040:	fa15 f383 	uxtah	r3, r5, r3
 800d044:	7821      	ldrb	r1, [r4, #0]
 800d046:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800d04a:	2a3e      	cmp	r2, #62	; 0x3e
 800d04c:	f240 8255 	bls.w	800d4fa <USB_EPStartXfer+0x4e0>
 800d050:	0951      	lsrs	r1, r2, #5
 800d052:	f012 0f1f 	tst.w	r2, #31
 800d056:	d100      	bne.n	800d05a <USB_EPStartXfer+0x40>
 800d058:	3901      	subs	r1, #1
 800d05a:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800d05e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800d062:	b289      	uxth	r1, r1
 800d064:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d068:	7822      	ldrb	r2, [r4, #0]
 800d06a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800d06e:	b29b      	uxth	r3, r3
 800d070:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d078:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800d07c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d084:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800d088:	2000      	movs	r0, #0
}
 800d08a:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 800d08c:	698e      	ldr	r6, [r1, #24]
 800d08e:	6909      	ldr	r1, [r1, #16]
 800d090:	428e      	cmp	r6, r1
 800d092:	d900      	bls.n	800d096 <USB_EPStartXfer+0x7c>
      len = ep->maxpacket;
 800d094:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 800d096:	7b23      	ldrb	r3, [r4, #12]
 800d098:	b32b      	cbz	r3, 800d0e6 <USB_EPStartXfer+0xcc>
      if (ep->type == EP_TYPE_BULK)
 800d09a:	78e3      	ldrb	r3, [r4, #3]
 800d09c:	2b02      	cmp	r3, #2
 800d09e:	d044      	beq.n	800d12a <USB_EPStartXfer+0x110>
        ep->xfer_len_db -= len;
 800d0a0:	6a23      	ldr	r3, [r4, #32]
 800d0a2:	1b9b      	subs	r3, r3, r6
 800d0a4:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d0a6:	7823      	ldrb	r3, [r4, #0]
 800d0a8:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
 800d0ac:	f011 0f40 	tst.w	r1, #64	; 0x40
 800d0b0:	f000 81dc 	beq.w	800d46c <USB_EPStartXfer+0x452>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d0b4:	2a00      	cmp	r2, #0
 800d0b6:	f040 81c9 	bne.w	800d44c <USB_EPStartXfer+0x432>
 800d0ba:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800d0be:	fa15 f282 	uxtah	r2, r5, r2
 800d0c2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d0c6:	2e3e      	cmp	r6, #62	; 0x3e
 800d0c8:	f240 81a3 	bls.w	800d412 <USB_EPStartXfer+0x3f8>
 800d0cc:	0972      	lsrs	r2, r6, #5
 800d0ce:	f016 0f1f 	tst.w	r6, #31
 800d0d2:	d100      	bne.n	800d0d6 <USB_EPStartXfer+0xbc>
 800d0d4:	3a01      	subs	r2, #1
 800d0d6:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800d0da:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d0de:	b292      	uxth	r2, r2
 800d0e0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d0e4:	e1bb      	b.n	800d45e <USB_EPStartXfer+0x444>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d0e6:	b2b6      	uxth	r6, r6
 800d0e8:	4633      	mov	r3, r6
 800d0ea:	88e2      	ldrh	r2, [r4, #6]
 800d0ec:	6961      	ldr	r1, [r4, #20]
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	f7ff ff7f 	bl	800cff2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d0f4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800d0f8:	fa15 f383 	uxtah	r3, r5, r3
 800d0fc:	7822      	ldrb	r2, [r4, #0]
 800d0fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d102:	f8a3 6402 	strh.w	r6, [r3, #1026]	; 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d106:	7822      	ldrb	r2, [r4, #0]
 800d108:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d116:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800d11a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d11e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d122:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800d126:	2000      	movs	r0, #0
 800d128:	e7af      	b.n	800d08a <USB_EPStartXfer+0x70>
        if (ep->xfer_len_db > ep->maxpacket)
 800d12a:	6a23      	ldr	r3, [r4, #32]
 800d12c:	4299      	cmp	r1, r3
 800d12e:	f080 8152 	bcs.w	800d3d6 <USB_EPStartXfer+0x3bc>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d132:	7822      	ldrb	r2, [r4, #0]
 800d134:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800d138:	b29b      	uxth	r3, r3
 800d13a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d13e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d142:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800d146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d14a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 800d14e:	6a23      	ldr	r3, [r4, #32]
 800d150:	1b9b      	subs	r3, r3, r6
 800d152:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d154:	7823      	ldrb	r3, [r4, #0]
 800d156:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 800d15a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800d15e:	f000 809d 	beq.w	800d29c <USB_EPStartXfer+0x282>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d162:	7862      	ldrb	r2, [r4, #1]
 800d164:	bb8a      	cbnz	r2, 800d1ca <USB_EPStartXfer+0x1b0>
 800d166:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800d16a:	fa15 f282 	uxtah	r2, r5, r2
 800d16e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d172:	2e3e      	cmp	r6, #62	; 0x3e
 800d174:	d90c      	bls.n	800d190 <USB_EPStartXfer+0x176>
 800d176:	0972      	lsrs	r2, r6, #5
 800d178:	f016 0f1f 	tst.w	r6, #31
 800d17c:	d100      	bne.n	800d180 <USB_EPStartXfer+0x166>
 800d17e:	3a01      	subs	r2, #1
 800d180:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800d184:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d188:	b292      	uxth	r2, r2
 800d18a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d18e:	e01e      	b.n	800d1ce <USB_EPStartXfer+0x1b4>
 800d190:	b98e      	cbnz	r6, 800d1b6 <USB_EPStartXfer+0x19c>
 800d192:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800d196:	b292      	uxth	r2, r2
 800d198:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d19c:	b292      	uxth	r2, r2
 800d19e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d1a2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800d1a6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800d1aa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d1ae:	b292      	uxth	r2, r2
 800d1b0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d1b4:	e00b      	b.n	800d1ce <USB_EPStartXfer+0x1b4>
 800d1b6:	0872      	lsrs	r2, r6, #1
 800d1b8:	f016 0f01 	tst.w	r6, #1
 800d1bc:	d000      	beq.n	800d1c0 <USB_EPStartXfer+0x1a6>
 800d1be:	3201      	adds	r2, #1
 800d1c0:	0292      	lsls	r2, r2, #10
 800d1c2:	b292      	uxth	r2, r2
 800d1c4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d1c8:	e001      	b.n	800d1ce <USB_EPStartXfer+0x1b4>
 800d1ca:	2a01      	cmp	r2, #1
 800d1cc:	d027      	beq.n	800d21e <USB_EPStartXfer+0x204>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d1ce:	b2b3      	uxth	r3, r6
 800d1d0:	8962      	ldrh	r2, [r4, #10]
 800d1d2:	6961      	ldr	r1, [r4, #20]
 800d1d4:	4628      	mov	r0, r5
 800d1d6:	f7ff ff0c 	bl	800cff2 <USB_WritePMA>
            ep->xfer_buff += len;
 800d1da:	6963      	ldr	r3, [r4, #20]
 800d1dc:	4433      	add	r3, r6
 800d1de:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800d1e0:	6a23      	ldr	r3, [r4, #32]
 800d1e2:	6922      	ldr	r2, [r4, #16]
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d924      	bls.n	800d232 <USB_EPStartXfer+0x218>
              ep->xfer_len_db -= len;
 800d1e8:	1b9b      	subs	r3, r3, r6
 800d1ea:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d1ec:	7863      	ldrb	r3, [r4, #1]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d140      	bne.n	800d274 <USB_EPStartXfer+0x25a>
 800d1f2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800d1f6:	fa15 f383 	uxtah	r3, r5, r3
 800d1fa:	7822      	ldrb	r2, [r4, #0]
 800d1fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d200:	2e3e      	cmp	r6, #62	; 0x3e
 800d202:	d91a      	bls.n	800d23a <USB_EPStartXfer+0x220>
 800d204:	0972      	lsrs	r2, r6, #5
 800d206:	f016 0f1f 	tst.w	r6, #31
 800d20a:	d100      	bne.n	800d20e <USB_EPStartXfer+0x1f4>
 800d20c:	3a01      	subs	r2, #1
 800d20e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800d212:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d216:	b292      	uxth	r2, r2
 800d218:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800d21c:	e02c      	b.n	800d278 <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d21e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800d222:	fa15 f282 	uxtah	r2, r5, r2
 800d226:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d22a:	b2b2      	uxth	r2, r6
 800d22c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d230:	e7cd      	b.n	800d1ce <USB_EPStartXfer+0x1b4>
              ep->xfer_len_db = 0U;
 800d232:	2200      	movs	r2, #0
 800d234:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 800d236:	461e      	mov	r6, r3
 800d238:	e7d8      	b.n	800d1ec <USB_EPStartXfer+0x1d2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d23a:	b98e      	cbnz	r6, 800d260 <USB_EPStartXfer+0x246>
 800d23c:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800d240:	b292      	uxth	r2, r2
 800d242:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d246:	b292      	uxth	r2, r2
 800d248:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800d24c:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800d250:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800d254:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d258:	b292      	uxth	r2, r2
 800d25a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800d25e:	e00b      	b.n	800d278 <USB_EPStartXfer+0x25e>
 800d260:	0872      	lsrs	r2, r6, #1
 800d262:	f016 0f01 	tst.w	r6, #1
 800d266:	d000      	beq.n	800d26a <USB_EPStartXfer+0x250>
 800d268:	3201      	adds	r2, #1
 800d26a:	0292      	lsls	r2, r2, #10
 800d26c:	b292      	uxth	r2, r2
 800d26e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800d272:	e001      	b.n	800d278 <USB_EPStartXfer+0x25e>
 800d274:	2b01      	cmp	r3, #1
 800d276:	d006      	beq.n	800d286 <USB_EPStartXfer+0x26c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d278:	b2b3      	uxth	r3, r6
 800d27a:	8922      	ldrh	r2, [r4, #8]
 800d27c:	6961      	ldr	r1, [r4, #20]
 800d27e:	4628      	mov	r0, r5
 800d280:	f7ff feb7 	bl	800cff2 <USB_WritePMA>
 800d284:	e73f      	b.n	800d106 <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d286:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800d28a:	fa15 f383 	uxtah	r3, r5, r3
 800d28e:	7822      	ldrb	r2, [r4, #0]
 800d290:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d294:	b2b2      	uxth	r2, r6
 800d296:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800d29a:	e7ed      	b.n	800d278 <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d29c:	7862      	ldrb	r2, [r4, #1]
 800d29e:	bb8a      	cbnz	r2, 800d304 <USB_EPStartXfer+0x2ea>
 800d2a0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800d2a4:	fa15 f282 	uxtah	r2, r5, r2
 800d2a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d2ac:	2e3e      	cmp	r6, #62	; 0x3e
 800d2ae:	d90c      	bls.n	800d2ca <USB_EPStartXfer+0x2b0>
 800d2b0:	0972      	lsrs	r2, r6, #5
 800d2b2:	f016 0f1f 	tst.w	r6, #31
 800d2b6:	d100      	bne.n	800d2ba <USB_EPStartXfer+0x2a0>
 800d2b8:	3a01      	subs	r2, #1
 800d2ba:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800d2be:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d2c2:	b292      	uxth	r2, r2
 800d2c4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800d2c8:	e01e      	b.n	800d308 <USB_EPStartXfer+0x2ee>
 800d2ca:	b98e      	cbnz	r6, 800d2f0 <USB_EPStartXfer+0x2d6>
 800d2cc:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800d2d0:	b292      	uxth	r2, r2
 800d2d2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d2d6:	b292      	uxth	r2, r2
 800d2d8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800d2dc:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800d2e0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800d2e4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d2e8:	b292      	uxth	r2, r2
 800d2ea:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800d2ee:	e00b      	b.n	800d308 <USB_EPStartXfer+0x2ee>
 800d2f0:	0872      	lsrs	r2, r6, #1
 800d2f2:	f016 0f01 	tst.w	r6, #1
 800d2f6:	d000      	beq.n	800d2fa <USB_EPStartXfer+0x2e0>
 800d2f8:	3201      	adds	r2, #1
 800d2fa:	0292      	lsls	r2, r2, #10
 800d2fc:	b292      	uxth	r2, r2
 800d2fe:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800d302:	e001      	b.n	800d308 <USB_EPStartXfer+0x2ee>
 800d304:	2a01      	cmp	r2, #1
 800d306:	d027      	beq.n	800d358 <USB_EPStartXfer+0x33e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d308:	b2b3      	uxth	r3, r6
 800d30a:	8922      	ldrh	r2, [r4, #8]
 800d30c:	6961      	ldr	r1, [r4, #20]
 800d30e:	4628      	mov	r0, r5
 800d310:	f7ff fe6f 	bl	800cff2 <USB_WritePMA>
            ep->xfer_buff += len;
 800d314:	6963      	ldr	r3, [r4, #20]
 800d316:	4433      	add	r3, r6
 800d318:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800d31a:	6a23      	ldr	r3, [r4, #32]
 800d31c:	6922      	ldr	r2, [r4, #16]
 800d31e:	4293      	cmp	r3, r2
 800d320:	d924      	bls.n	800d36c <USB_EPStartXfer+0x352>
              ep->xfer_len_db -= len;
 800d322:	1b9b      	subs	r3, r3, r6
 800d324:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d326:	7863      	ldrb	r3, [r4, #1]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d140      	bne.n	800d3ae <USB_EPStartXfer+0x394>
 800d32c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800d330:	fa15 f383 	uxtah	r3, r5, r3
 800d334:	7822      	ldrb	r2, [r4, #0]
 800d336:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d33a:	2e3e      	cmp	r6, #62	; 0x3e
 800d33c:	d91a      	bls.n	800d374 <USB_EPStartXfer+0x35a>
 800d33e:	0972      	lsrs	r2, r6, #5
 800d340:	f016 0f1f 	tst.w	r6, #31
 800d344:	d100      	bne.n	800d348 <USB_EPStartXfer+0x32e>
 800d346:	3a01      	subs	r2, #1
 800d348:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800d34c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d350:	b292      	uxth	r2, r2
 800d352:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d356:	e02c      	b.n	800d3b2 <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d358:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800d35c:	fa15 f282 	uxtah	r2, r5, r2
 800d360:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d364:	b2b2      	uxth	r2, r6
 800d366:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800d36a:	e7cd      	b.n	800d308 <USB_EPStartXfer+0x2ee>
              ep->xfer_len_db = 0U;
 800d36c:	2200      	movs	r2, #0
 800d36e:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 800d370:	461e      	mov	r6, r3
 800d372:	e7d8      	b.n	800d326 <USB_EPStartXfer+0x30c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d374:	b98e      	cbnz	r6, 800d39a <USB_EPStartXfer+0x380>
 800d376:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800d37a:	b292      	uxth	r2, r2
 800d37c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d380:	b292      	uxth	r2, r2
 800d382:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d386:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800d38a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800d38e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d392:	b292      	uxth	r2, r2
 800d394:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d398:	e00b      	b.n	800d3b2 <USB_EPStartXfer+0x398>
 800d39a:	0872      	lsrs	r2, r6, #1
 800d39c:	f016 0f01 	tst.w	r6, #1
 800d3a0:	d000      	beq.n	800d3a4 <USB_EPStartXfer+0x38a>
 800d3a2:	3201      	adds	r2, #1
 800d3a4:	0292      	lsls	r2, r2, #10
 800d3a6:	b292      	uxth	r2, r2
 800d3a8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d3ac:	e001      	b.n	800d3b2 <USB_EPStartXfer+0x398>
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d006      	beq.n	800d3c0 <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d3b2:	b2b3      	uxth	r3, r6
 800d3b4:	8962      	ldrh	r2, [r4, #10]
 800d3b6:	6961      	ldr	r1, [r4, #20]
 800d3b8:	4628      	mov	r0, r5
 800d3ba:	f7ff fe1a 	bl	800cff2 <USB_WritePMA>
 800d3be:	e6a2      	b.n	800d106 <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d3c0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800d3c4:	fa15 f383 	uxtah	r3, r5, r3
 800d3c8:	7822      	ldrb	r2, [r4, #0]
 800d3ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3ce:	b2b2      	uxth	r2, r6
 800d3d0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d3d4:	e7ed      	b.n	800d3b2 <USB_EPStartXfer+0x398>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d3d6:	7821      	ldrb	r1, [r4, #0]
 800d3d8:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 800d3dc:	b292      	uxth	r2, r2
 800d3de:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800d3e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d3e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d3ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d3ee:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d3f2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800d3f6:	fa15 f282 	uxtah	r2, r5, r2
 800d3fa:	7821      	ldrb	r1, [r4, #0]
 800d3fc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d400:	b29b      	uxth	r3, r3
 800d402:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d406:	8922      	ldrh	r2, [r4, #8]
 800d408:	6961      	ldr	r1, [r4, #20]
 800d40a:	4628      	mov	r0, r5
 800d40c:	f7ff fdf1 	bl	800cff2 <USB_WritePMA>
 800d410:	e679      	b.n	800d106 <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d412:	b98e      	cbnz	r6, 800d438 <USB_EPStartXfer+0x41e>
 800d414:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800d418:	b292      	uxth	r2, r2
 800d41a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d41e:	b292      	uxth	r2, r2
 800d420:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d424:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800d428:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800d42c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d430:	b292      	uxth	r2, r2
 800d432:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d436:	e012      	b.n	800d45e <USB_EPStartXfer+0x444>
 800d438:	0872      	lsrs	r2, r6, #1
 800d43a:	f016 0f01 	tst.w	r6, #1
 800d43e:	d000      	beq.n	800d442 <USB_EPStartXfer+0x428>
 800d440:	3201      	adds	r2, #1
 800d442:	0292      	lsls	r2, r2, #10
 800d444:	b292      	uxth	r2, r2
 800d446:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d44a:	e008      	b.n	800d45e <USB_EPStartXfer+0x444>
 800d44c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800d450:	fa15 f282 	uxtah	r2, r5, r2
 800d454:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d458:	b2b2      	uxth	r2, r6
 800d45a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d45e:	b2b3      	uxth	r3, r6
 800d460:	8962      	ldrh	r2, [r4, #10]
 800d462:	6961      	ldr	r1, [r4, #20]
 800d464:	4628      	mov	r0, r5
 800d466:	f7ff fdc4 	bl	800cff2 <USB_WritePMA>
 800d46a:	e64c      	b.n	800d106 <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d46c:	bb8a      	cbnz	r2, 800d4d2 <USB_EPStartXfer+0x4b8>
 800d46e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800d472:	fa15 f282 	uxtah	r2, r5, r2
 800d476:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d47a:	2e3e      	cmp	r6, #62	; 0x3e
 800d47c:	d90c      	bls.n	800d498 <USB_EPStartXfer+0x47e>
 800d47e:	0972      	lsrs	r2, r6, #5
 800d480:	f016 0f1f 	tst.w	r6, #31
 800d484:	d100      	bne.n	800d488 <USB_EPStartXfer+0x46e>
 800d486:	3a01      	subs	r2, #1
 800d488:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800d48c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d490:	b292      	uxth	r2, r2
 800d492:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800d496:	e025      	b.n	800d4e4 <USB_EPStartXfer+0x4ca>
 800d498:	b98e      	cbnz	r6, 800d4be <USB_EPStartXfer+0x4a4>
 800d49a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800d49e:	b292      	uxth	r2, r2
 800d4a0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d4a4:	b292      	uxth	r2, r2
 800d4a6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800d4aa:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800d4ae:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800d4b2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d4b6:	b292      	uxth	r2, r2
 800d4b8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800d4bc:	e012      	b.n	800d4e4 <USB_EPStartXfer+0x4ca>
 800d4be:	0872      	lsrs	r2, r6, #1
 800d4c0:	f016 0f01 	tst.w	r6, #1
 800d4c4:	d000      	beq.n	800d4c8 <USB_EPStartXfer+0x4ae>
 800d4c6:	3201      	adds	r2, #1
 800d4c8:	0292      	lsls	r2, r2, #10
 800d4ca:	b292      	uxth	r2, r2
 800d4cc:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800d4d0:	e008      	b.n	800d4e4 <USB_EPStartXfer+0x4ca>
 800d4d2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800d4d6:	fa15 f282 	uxtah	r2, r5, r2
 800d4da:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d4de:	b2b2      	uxth	r2, r6
 800d4e0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d4e4:	b2b3      	uxth	r3, r6
 800d4e6:	8922      	ldrh	r2, [r4, #8]
 800d4e8:	6961      	ldr	r1, [r4, #20]
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	f7ff fd81 	bl	800cff2 <USB_WritePMA>
 800d4f0:	e609      	b.n	800d106 <USB_EPStartXfer+0xec>
        ep->xfer_len = 0U;
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	e5a0      	b.n	800d03c <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d4fa:	b98a      	cbnz	r2, 800d520 <USB_EPStartXfer+0x506>
 800d4fc:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800d500:	b292      	uxth	r2, r2
 800d502:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d506:	b292      	uxth	r2, r2
 800d508:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d50c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800d510:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800d514:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d518:	b292      	uxth	r2, r2
 800d51a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d51e:	e5a3      	b.n	800d068 <USB_EPStartXfer+0x4e>
 800d520:	0851      	lsrs	r1, r2, #1
 800d522:	f012 0f01 	tst.w	r2, #1
 800d526:	d000      	beq.n	800d52a <USB_EPStartXfer+0x510>
 800d528:	3101      	adds	r1, #1
 800d52a:	0289      	lsls	r1, r1, #10
 800d52c:	b289      	uxth	r1, r1
 800d52e:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 800d532:	e599      	b.n	800d068 <USB_EPStartXfer+0x4e>
      if (ep->type == EP_TYPE_BULK)
 800d534:	78cb      	ldrb	r3, [r1, #3]
 800d536:	2b02      	cmp	r3, #2
 800d538:	d03b      	beq.n	800d5b2 <USB_EPStartXfer+0x598>
      else if (ep->type == EP_TYPE_ISOC)
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	f040 811b 	bne.w	800d776 <USB_EPStartXfer+0x75c>
        if (ep->xfer_len > ep->maxpacket)
 800d540:	6989      	ldr	r1, [r1, #24]
 800d542:	6923      	ldr	r3, [r4, #16]
 800d544:	4299      	cmp	r1, r3
 800d546:	f240 80ca 	bls.w	800d6de <USB_EPStartXfer+0x6c4>
          ep->xfer_len -= len;
 800d54a:	1ac9      	subs	r1, r1, r3
 800d54c:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d54e:	b9aa      	cbnz	r2, 800d57c <USB_EPStartXfer+0x562>
 800d550:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800d554:	fa15 f282 	uxtah	r2, r5, r2
 800d558:	7821      	ldrb	r1, [r4, #0]
 800d55a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d55e:	2b3e      	cmp	r3, #62	; 0x3e
 800d560:	f240 80c1 	bls.w	800d6e6 <USB_EPStartXfer+0x6cc>
 800d564:	0959      	lsrs	r1, r3, #5
 800d566:	f013 0f1f 	tst.w	r3, #31
 800d56a:	d100      	bne.n	800d56e <USB_EPStartXfer+0x554>
 800d56c:	3901      	subs	r1, #1
 800d56e:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800d572:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800d576:	b289      	uxth	r1, r1
 800d578:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800d57c:	7862      	ldrb	r2, [r4, #1]
 800d57e:	2a00      	cmp	r2, #0
 800d580:	f040 80eb 	bne.w	800d75a <USB_EPStartXfer+0x740>
 800d584:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800d588:	fa15 f282 	uxtah	r2, r5, r2
 800d58c:	7821      	ldrb	r1, [r4, #0]
 800d58e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d592:	2b3e      	cmp	r3, #62	; 0x3e
 800d594:	f240 80c4 	bls.w	800d720 <USB_EPStartXfer+0x706>
 800d598:	0959      	lsrs	r1, r3, #5
 800d59a:	f013 0f1f 	tst.w	r3, #31
 800d59e:	d100      	bne.n	800d5a2 <USB_EPStartXfer+0x588>
 800d5a0:	3901      	subs	r1, #1
 800d5a2:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 800d5a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800d5b0:	e55a      	b.n	800d068 <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d5b2:	b9aa      	cbnz	r2, 800d5e0 <USB_EPStartXfer+0x5c6>
 800d5b4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800d5b8:	fa10 f383 	uxtah	r3, r0, r3
 800d5bc:	780a      	ldrb	r2, [r1, #0]
 800d5be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5c2:	6909      	ldr	r1, [r1, #16]
 800d5c4:	293e      	cmp	r1, #62	; 0x3e
 800d5c6:	d925      	bls.n	800d614 <USB_EPStartXfer+0x5fa>
 800d5c8:	094a      	lsrs	r2, r1, #5
 800d5ca:	f011 0f1f 	tst.w	r1, #31
 800d5ce:	d100      	bne.n	800d5d2 <USB_EPStartXfer+0x5b8>
 800d5d0:	3a01      	subs	r2, #1
 800d5d2:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800d5d6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d5da:	b292      	uxth	r2, r2
 800d5dc:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800d5e0:	7863      	ldrb	r3, [r4, #1]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d150      	bne.n	800d688 <USB_EPStartXfer+0x66e>
 800d5e6:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800d5ea:	fa15 f383 	uxtah	r3, r5, r3
 800d5ee:	7822      	ldrb	r2, [r4, #0]
 800d5f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5f4:	6921      	ldr	r1, [r4, #16]
 800d5f6:	293e      	cmp	r1, #62	; 0x3e
 800d5f8:	d929      	bls.n	800d64e <USB_EPStartXfer+0x634>
 800d5fa:	094a      	lsrs	r2, r1, #5
 800d5fc:	f011 0f1f 	tst.w	r1, #31
 800d600:	d100      	bne.n	800d604 <USB_EPStartXfer+0x5ea>
 800d602:	3a01      	subs	r2, #1
 800d604:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800d608:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d60c:	b292      	uxth	r2, r2
 800d60e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d612:	e03b      	b.n	800d68c <USB_EPStartXfer+0x672>
 800d614:	b989      	cbnz	r1, 800d63a <USB_EPStartXfer+0x620>
 800d616:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800d61a:	b292      	uxth	r2, r2
 800d61c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d620:	b292      	uxth	r2, r2
 800d622:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800d626:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800d62a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800d62e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d632:	b292      	uxth	r2, r2
 800d634:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800d638:	e7d2      	b.n	800d5e0 <USB_EPStartXfer+0x5c6>
 800d63a:	084a      	lsrs	r2, r1, #1
 800d63c:	f011 0f01 	tst.w	r1, #1
 800d640:	d000      	beq.n	800d644 <USB_EPStartXfer+0x62a>
 800d642:	3201      	adds	r2, #1
 800d644:	0292      	lsls	r2, r2, #10
 800d646:	b292      	uxth	r2, r2
 800d648:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800d64c:	e7c8      	b.n	800d5e0 <USB_EPStartXfer+0x5c6>
 800d64e:	b989      	cbnz	r1, 800d674 <USB_EPStartXfer+0x65a>
 800d650:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800d654:	b292      	uxth	r2, r2
 800d656:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d65a:	b292      	uxth	r2, r2
 800d65c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d660:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800d664:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800d668:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d66c:	b292      	uxth	r2, r2
 800d66e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d672:	e00b      	b.n	800d68c <USB_EPStartXfer+0x672>
 800d674:	084a      	lsrs	r2, r1, #1
 800d676:	f011 0f01 	tst.w	r1, #1
 800d67a:	d000      	beq.n	800d67e <USB_EPStartXfer+0x664>
 800d67c:	3201      	adds	r2, #1
 800d67e:	0292      	lsls	r2, r2, #10
 800d680:	b292      	uxth	r2, r2
 800d682:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d686:	e001      	b.n	800d68c <USB_EPStartXfer+0x672>
 800d688:	2b01      	cmp	r3, #1
 800d68a:	d01d      	beq.n	800d6c8 <USB_EPStartXfer+0x6ae>
        if (ep->xfer_count != 0U)
 800d68c:	69e3      	ldr	r3, [r4, #28]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	f43f acea 	beq.w	800d068 <USB_EPStartXfer+0x4e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d694:	7822      	ldrb	r2, [r4, #0]
 800d696:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d69a:	f244 0340 	movw	r3, #16448	; 0x4040
 800d69e:	ea03 0001 	and.w	r0, r3, r1
 800d6a2:	438b      	bics	r3, r1
 800d6a4:	d002      	beq.n	800d6ac <USB_EPStartXfer+0x692>
 800d6a6:	2800      	cmp	r0, #0
 800d6a8:	f47f acde 	bne.w	800d068 <USB_EPStartXfer+0x4e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d6ac:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d6be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d6c2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800d6c6:	e4cf      	b.n	800d068 <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d6c8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800d6cc:	fa15 f383 	uxtah	r3, r5, r3
 800d6d0:	7822      	ldrb	r2, [r4, #0]
 800d6d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6d6:	8a22      	ldrh	r2, [r4, #16]
 800d6d8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800d6dc:	e7d6      	b.n	800d68c <USB_EPStartXfer+0x672>
          ep->xfer_len = 0U;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 800d6e2:	460b      	mov	r3, r1
 800d6e4:	e733      	b.n	800d54e <USB_EPStartXfer+0x534>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d6e6:	b98b      	cbnz	r3, 800d70c <USB_EPStartXfer+0x6f2>
 800d6e8:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 800d6ec:	b289      	uxth	r1, r1
 800d6ee:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800d6f2:	b289      	uxth	r1, r1
 800d6f4:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800d6f8:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 800d6fc:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800d700:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800d704:	b289      	uxth	r1, r1
 800d706:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800d70a:	e737      	b.n	800d57c <USB_EPStartXfer+0x562>
 800d70c:	0859      	lsrs	r1, r3, #1
 800d70e:	f013 0f01 	tst.w	r3, #1
 800d712:	d000      	beq.n	800d716 <USB_EPStartXfer+0x6fc>
 800d714:	3101      	adds	r1, #1
 800d716:	0289      	lsls	r1, r1, #10
 800d718:	b289      	uxth	r1, r1
 800d71a:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800d71e:	e72d      	b.n	800d57c <USB_EPStartXfer+0x562>
 800d720:	b98b      	cbnz	r3, 800d746 <USB_EPStartXfer+0x72c>
 800d722:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 800d726:	b29b      	uxth	r3, r3
 800d728:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d72c:	b29b      	uxth	r3, r3
 800d72e:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800d732:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 800d736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d73a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d73e:	b29b      	uxth	r3, r3
 800d740:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800d744:	e490      	b.n	800d068 <USB_EPStartXfer+0x4e>
 800d746:	0859      	lsrs	r1, r3, #1
 800d748:	f013 0f01 	tst.w	r3, #1
 800d74c:	d000      	beq.n	800d750 <USB_EPStartXfer+0x736>
 800d74e:	3101      	adds	r1, #1
 800d750:	028b      	lsls	r3, r1, #10
 800d752:	b29b      	uxth	r3, r3
 800d754:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800d758:	e486      	b.n	800d068 <USB_EPStartXfer+0x4e>
 800d75a:	2a01      	cmp	r2, #1
 800d75c:	f47f ac84 	bne.w	800d068 <USB_EPStartXfer+0x4e>
 800d760:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800d764:	fa15 f282 	uxtah	r2, r5, r2
 800d768:	7821      	ldrb	r1, [r4, #0]
 800d76a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d76e:	b29b      	uxth	r3, r3
 800d770:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800d774:	e478      	b.n	800d068 <USB_EPStartXfer+0x4e>
        return HAL_ERROR;
 800d776:	2001      	movs	r0, #1
 800d778:	e487      	b.n	800d08a <USB_EPStartXfer+0x70>

0800d77a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d77a:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d77c:	085c      	lsrs	r4, r3, #1
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d77e:	4410      	add	r0, r2
 800d780:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800d784:	e007      	b.n	800d796 <USB_ReadPMA+0x1c>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800d786:	f830 2b02 	ldrh.w	r2, [r0], #2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d78a:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800d78c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800d790:	704a      	strb	r2, [r1, #1]
    pBuf++;
 800d792:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800d794:	3c01      	subs	r4, #1
 800d796:	2c00      	cmp	r4, #0
 800d798:	d1f5      	bne.n	800d786 <USB_ReadPMA+0xc>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d79a:	f013 0f01 	tst.w	r3, #1
 800d79e:	d001      	beq.n	800d7a4 <USB_ReadPMA+0x2a>
  {
    temp = *pdwVal;
 800d7a0:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d7a2:	700b      	strb	r3, [r1, #0]
  }
}
 800d7a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7a8:	4770      	bx	lr
	...

0800d7ac <LCD_IO_Init>:
/*!
 * @brief Nizkonivojska inicializacija zaslona
 * @internal
 */
static void LCD_IO_Init()
{
 800d7ac:	b538      	push	{r3, r4, r5, lr}
	LCD_RST_LOW();
 800d7ae:	4c05      	ldr	r4, [pc, #20]	; (800d7c4 <LCD_IO_Init+0x18>)
 800d7b0:	2508      	movs	r5, #8
 800d7b2:	62a5      	str	r5, [r4, #40]	; 0x28
	HAL_Delay(120);
 800d7b4:	2078      	movs	r0, #120	; 0x78
 800d7b6:	f7f9 fcd3 	bl	8007160 <HAL_Delay>
	LCD_RST_HIGH();
 800d7ba:	61a5      	str	r5, [r4, #24]
	HAL_Delay(120);
 800d7bc:	2078      	movs	r0, #120	; 0x78
 800d7be:	f7f9 fccf 	bl	8007160 <HAL_Delay>
}
 800d7c2:	bd38      	pop	{r3, r4, r5, pc}
 800d7c4:	48000c00 	.word	0x48000c00

0800d7c8 <LCD_SetBacklight>:
 * @param state logična vrednost
 */

void LCD_SetBacklight(uint8_t state)
{
	if (state == 1)
 800d7c8:	2801      	cmp	r0, #1
 800d7ca:	d003      	beq.n	800d7d4 <LCD_SetBacklight+0xc>
		LCD_BCKL_ON();
	else
		LCD_BCKL_OFF();
 800d7cc:	4b03      	ldr	r3, [pc, #12]	; (800d7dc <LCD_SetBacklight+0x14>)
 800d7ce:	2240      	movs	r2, #64	; 0x40
 800d7d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 800d7d2:	4770      	bx	lr
		LCD_BCKL_ON();
 800d7d4:	4b01      	ldr	r3, [pc, #4]	; (800d7dc <LCD_SetBacklight+0x14>)
 800d7d6:	2240      	movs	r2, #64	; 0x40
 800d7d8:	619a      	str	r2, [r3, #24]
 800d7da:	4770      	bx	lr
 800d7dc:	48000400 	.word	0x48000400

0800d7e0 <LCD_FillRect>:
 *
 * Funkcija izbere želeno območje, potem pa tolikokrat pošlje izbrano barvo,
 * kolikor slikovnih točk je potrebnih.
 */
void LCD_FillRect(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint16_t c)
{
 800d7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7e4:	4607      	mov	r7, r0
 800d7e6:	4688      	mov	r8, r1
 800d7e8:	4615      	mov	r5, r2
 800d7ea:	461e      	mov	r6, r3
	uint32_t max_count   = ILI9341_GetParam(LCD_AREA);     /* Št. vseh pikslov     */
 800d7ec:	2002      	movs	r0, #2
 800d7ee:	f000 f967 	bl	800dac0 <ILI9341_GetParam>
 800d7f2:	4604      	mov	r4, r0
	uint32_t pixel_count = w*h;  /* Dejansko št. pikslov */
 800d7f4:	fb06 f305 	mul.w	r3, r6, r5

	if(pixel_count > max_count)
 800d7f8:	4298      	cmp	r0, r3
 800d7fa:	d300      	bcc.n	800d7fe <LCD_FillRect+0x1e>
	uint32_t pixel_count = w*h;  /* Dejansko št. pikslov */
 800d7fc:	461c      	mov	r4, r3
		pixel_count = max_count;

	// Izbor koordinat piksla
	ILI9341_SetDisplayWindow(x, y, w, h);
 800d7fe:	4633      	mov	r3, r6
 800d800:	462a      	mov	r2, r5
 800d802:	4641      	mov	r1, r8
 800d804:	4638      	mov	r0, r7
 800d806:	f000 f87d 	bl	800d904 <ILI9341_SetDisplayWindow>

#ifdef ILI9341_USEDMA
	ILI9341_SendRepeatedDataDMA(c, pixel_count);
 800d80a:	4621      	mov	r1, r4
 800d80c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800d810:	f000 f910 	bl	800da34 <ILI9341_SendRepeatedDataDMA>
#else
	ILI9341_SendRepeatedData(c, pixel_count);
#endif

}
 800d814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d818 <LCD_ClearScreen>:

/*!
 * @brief Počisti zaslon (prebarvaj s črno barvo)
 */
void LCD_ClearScreen()
{
 800d818:	b510      	push	{r4, lr}
 800d81a:	b082      	sub	sp, #8
    LCD_FillRect(0, 0, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT), 0);
 800d81c:	2000      	movs	r0, #0
 800d81e:	f000 f94f 	bl	800dac0 <ILI9341_GetParam>
 800d822:	4604      	mov	r4, r0
 800d824:	2001      	movs	r0, #1
 800d826:	f000 f94b 	bl	800dac0 <ILI9341_GetParam>
 800d82a:	4603      	mov	r3, r0
 800d82c:	2000      	movs	r0, #0
 800d82e:	9000      	str	r0, [sp, #0]
 800d830:	4622      	mov	r2, r4
 800d832:	4601      	mov	r1, r0
 800d834:	f7ff ffd4 	bl	800d7e0 <LCD_FillRect>
}
 800d838:	b002      	add	sp, #8
 800d83a:	bd10      	pop	{r4, pc}

0800d83c <LCD_Init>:
{
 800d83c:	b508      	push	{r3, lr}
	LCD_IO_Init();
 800d83e:	f7ff ffb5 	bl	800d7ac <LCD_IO_Init>
	ILI9341_Init(ILI9341_COLORSPACE_RBG565, ILI9341_MISKO_ROTATE_0);
 800d842:	2103      	movs	r1, #3
 800d844:	2055      	movs	r0, #85	; 0x55
 800d846:	f000 f8ab 	bl	800d9a0 <ILI9341_Init>
	ILI9341_DisplayOn();
 800d84a:	f000 f92d 	bl	800daa8 <ILI9341_DisplayOn>
	LCD_ClearScreen();
 800d84e:	f7ff ffe3 	bl	800d818 <LCD_ClearScreen>
	ILI9341_WaitTransfer();
 800d852:	f000 f815 	bl	800d880 <ILI9341_WaitTransfer>
	LCD_SetBacklight(1);
 800d856:	2001      	movs	r0, #1
 800d858:	f7ff ffb6 	bl	800d7c8 <LCD_SetBacklight>
}
 800d85c:	bd08      	pop	{r3, pc}
	...

0800d860 <ILI9341_SendData>:
 */
void ILI9341_SendData(LCD_IO_Data_t *data, uint32_t length)
{
	uint8_t increment = LCD_IO_DATA_WRITE_CYCLES;

	for (uint32_t i = 0; i < (length/increment); i += increment)
 800d860:	2300      	movs	r3, #0
 800d862:	e007      	b.n	800d874 <ILI9341_SendData+0x14>
		FMC_BANK1_WriteData(data[i]);
 800d864:	f830 c013 	ldrh.w	ip, [r0, r3, lsl #1]
	*(LCD_IO_Data_t *)(FMC_BANK1_MEM) = data;
 800d868:	4a04      	ldr	r2, [pc, #16]	; (800d87c <ILI9341_SendData+0x1c>)
 800d86a:	f8a2 c000 	strh.w	ip, [r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d86e:	f3bf 8f4f 	dsb	sy
	for (uint32_t i = 0; i < (length/increment); i += increment)
 800d872:	3301      	adds	r3, #1
 800d874:	428b      	cmp	r3, r1
 800d876:	d3f5      	bcc.n	800d864 <ILI9341_SendData+0x4>
}
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop
 800d87c:	60010000 	.word	0x60010000

0800d880 <ILI9341_WaitTransfer>:
#endif
}

//! @brief Počakaj na prenos podatka FSMC->Ili9341.
void ILI9341_WaitTransfer()
{
 800d880:	b508      	push	{r3, lr}
#ifdef ILI9341_USEDMA
	while (HAL_DMA_GetState(&hLCDDMA) != HAL_DMA_STATE_READY);
 800d882:	4803      	ldr	r0, [pc, #12]	; (800d890 <ILI9341_WaitTransfer+0x10>)
 800d884:	f7fa fe9d 	bl	80085c2 <HAL_DMA_GetState>
 800d888:	2801      	cmp	r0, #1
 800d88a:	d1fa      	bne.n	800d882 <ILI9341_WaitTransfer+0x2>
#endif
}
 800d88c:	bd08      	pop	{r3, pc}
 800d88e:	bf00      	nop
 800d890:	20000b60 	.word	0x20000b60

0800d894 <ILI9341_SetAddress>:
{
 800d894:	b510      	push	{r4, lr}
 800d896:	4604      	mov	r4, r0
	ILI9341_WaitTransfer();
 800d898:	f7ff fff2 	bl	800d880 <ILI9341_WaitTransfer>
	FMC_BANK1_SetAddress(*address);
 800d89c:	8822      	ldrh	r2, [r4, #0]
	*(LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 800d89e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800d8a2:	801a      	strh	r2, [r3, #0]
 800d8a4:	f3bf 8f4f 	dsb	sy
}
 800d8a8:	bd10      	pop	{r4, pc}
	...

0800d8ac <ILI9341_SetOrientation>:
{
 800d8ac:	b510      	push	{r4, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	4604      	mov	r4, r0
	ILI9341_Data_t command   = ILI9341_MAC; /* Memory Access Control */
 800d8b2:	2336      	movs	r3, #54	; 0x36
 800d8b4:	f8ad 3006 	strh.w	r3, [sp, #6]
	ILI9341_Data_t parameter = (ILI9341_Data_t)orientations[orientation];
 800d8b8:	4b10      	ldr	r3, [pc, #64]	; (800d8fc <ILI9341_SetOrientation+0x50>)
 800d8ba:	f833 3020 	ldrh.w	r3, [r3, r0, lsl #2]
 800d8be:	f8ad 3004 	strh.w	r3, [sp, #4]
	ILI9341_SetAddress(&command);
 800d8c2:	f10d 0006 	add.w	r0, sp, #6
 800d8c6:	f7ff ffe5 	bl	800d894 <ILI9341_SetAddress>
	ILI9341_SendData(&parameter, 1);
 800d8ca:	2101      	movs	r1, #1
 800d8cc:	a801      	add	r0, sp, #4
 800d8ce:	f7ff ffc7 	bl	800d860 <ILI9341_SendData>
	switch (orientation) {
 800d8d2:	b144      	cbz	r4, 800d8e6 <ILI9341_SetOrientation+0x3a>
 800d8d4:	2c03      	cmp	r4, #3
 800d8d6:	d006      	beq.n	800d8e6 <ILI9341_SetOrientation+0x3a>
		LCD.width  = ILI9341_WIDTH;
 800d8d8:	4b09      	ldr	r3, [pc, #36]	; (800d900 <ILI9341_SetOrientation+0x54>)
 800d8da:	22f0      	movs	r2, #240	; 0xf0
 800d8dc:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_HEIGHT;
 800d8de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800d8e2:	605a      	str	r2, [r3, #4]
		break;
 800d8e4:	e005      	b.n	800d8f2 <ILI9341_SetOrientation+0x46>
		LCD.width  = ILI9341_HEIGHT;
 800d8e6:	4b06      	ldr	r3, [pc, #24]	; (800d900 <ILI9341_SetOrientation+0x54>)
 800d8e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800d8ec:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_WIDTH;
 800d8ee:	22f0      	movs	r2, #240	; 0xf0
 800d8f0:	605a      	str	r2, [r3, #4]
	LCD.orientation = orientation;
 800d8f2:	4b03      	ldr	r3, [pc, #12]	; (800d900 <ILI9341_SetOrientation+0x54>)
 800d8f4:	609c      	str	r4, [r3, #8]
}
 800d8f6:	b002      	add	sp, #8
 800d8f8:	bd10      	pop	{r4, pc}
 800d8fa:	bf00      	nop
 800d8fc:	080151f0 	.word	0x080151f0
 800d900:	20010fd8 	.word	0x20010fd8

0800d904 <ILI9341_SetDisplayWindow>:
{
 800d904:	b530      	push	{r4, r5, lr}
 800d906:	b085      	sub	sp, #20
 800d908:	460c      	mov	r4, r1
 800d90a:	461d      	mov	r5, r3
	command = ILI9341_CASET;
 800d90c:	232a      	movs	r3, #42	; 0x2a
 800d90e:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = (ILI9341_Data_t)(Xpos >> 8U);
 800d912:	f3c0 230f 	ubfx	r3, r0, #8, #16
 800d916:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter[1] = (ILI9341_Data_t)(Xpos & 0xFFU);
 800d91a:	b2c3      	uxtb	r3, r0
 800d91c:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter[2] = (ILI9341_Data_t)((Xpos + Width - 1U) >> 8U);
 800d920:	1883      	adds	r3, r0, r2
 800d922:	3b01      	subs	r3, #1
 800d924:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800d928:	f8ad 3008 	strh.w	r3, [sp, #8]
	parameter[3] = (ILI9341_Data_t)((Xpos + Width - 1U) & 0xFFU);
 800d92c:	fa12 f080 	uxtah	r0, r2, r0
 800d930:	b280      	uxth	r0, r0
 800d932:	3801      	subs	r0, #1
 800d934:	b2c0      	uxtb	r0, r0
 800d936:	f8ad 000a 	strh.w	r0, [sp, #10]
	ILI9341_SetAddress(&command);
 800d93a:	f10d 000e 	add.w	r0, sp, #14
 800d93e:	f7ff ffa9 	bl	800d894 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 800d942:	2104      	movs	r1, #4
 800d944:	eb0d 0001 	add.w	r0, sp, r1
 800d948:	f7ff ff8a 	bl	800d860 <ILI9341_SendData>
	command = ILI9341_RASET;
 800d94c:	232b      	movs	r3, #43	; 0x2b
 800d94e:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter [0] = (ILI9341_Data_t)(Ypos >> 8U);
 800d952:	f3c4 230f 	ubfx	r3, r4, #8, #16
 800d956:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter [1] = (ILI9341_Data_t)(Ypos & 0xFFU);
 800d95a:	b2e3      	uxtb	r3, r4
 800d95c:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter [2] = (ILI9341_Data_t)((Ypos + Height - 1U) >> 8U);
 800d960:	1962      	adds	r2, r4, r5
 800d962:	3a01      	subs	r2, #1
 800d964:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800d968:	f8ad 2008 	strh.w	r2, [sp, #8]
	parameter [3] = (ILI9341_Data_t)((Ypos + Height - 1U) & 0xFFU);
 800d96c:	fa15 f484 	uxtah	r4, r5, r4
 800d970:	b2a4      	uxth	r4, r4
 800d972:	3c01      	subs	r4, #1
 800d974:	b2e4      	uxtb	r4, r4
 800d976:	f8ad 400a 	strh.w	r4, [sp, #10]
	ILI9341_SetAddress(&command);
 800d97a:	f10d 000e 	add.w	r0, sp, #14
 800d97e:	f7ff ff89 	bl	800d894 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 800d982:	2104      	movs	r1, #4
 800d984:	eb0d 0001 	add.w	r0, sp, r1
 800d988:	f7ff ff6a 	bl	800d860 <ILI9341_SendData>
	command = ILI9341_GRAM;
 800d98c:	232c      	movs	r3, #44	; 0x2c
 800d98e:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 800d992:	f10d 000e 	add.w	r0, sp, #14
 800d996:	f7ff ff7d 	bl	800d894 <ILI9341_SetAddress>
}
 800d99a:	b005      	add	sp, #20
 800d99c:	bd30      	pop	{r4, r5, pc}
	...

0800d9a0 <ILI9341_Init>:
{
 800d9a0:	b510      	push	{r4, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	4604      	mov	r4, r0
	ILI9341_SetOrientation(orientation);
 800d9a6:	4608      	mov	r0, r1
 800d9a8:	f7ff ff80 	bl	800d8ac <ILI9341_SetOrientation>
	ILI9341_SetDisplayWindow(0U, 0U, LCD.width, LCD.height);
 800d9ac:	4a20      	ldr	r2, [pc, #128]	; (800da30 <ILI9341_Init+0x90>)
 800d9ae:	6853      	ldr	r3, [r2, #4]
 800d9b0:	6812      	ldr	r2, [r2, #0]
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	4608      	mov	r0, r1
 800d9b6:	f7ff ffa5 	bl	800d904 <ILI9341_SetDisplayWindow>
	command = ILI9341_SLEEP_OUT;
 800d9ba:	2311      	movs	r3, #17
 800d9bc:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 800d9c0:	f10d 000e 	add.w	r0, sp, #14
 800d9c4:	f7ff ff66 	bl	800d894 <ILI9341_SetAddress>
	HAL_Delay(200);
 800d9c8:	20c8      	movs	r0, #200	; 0xc8
 800d9ca:	f7f9 fbc9 	bl	8007160 <HAL_Delay>
	command = ILI9341_NORMAL_MODE_ON;
 800d9ce:	2313      	movs	r3, #19
 800d9d0:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 800d9d4:	f10d 000e 	add.w	r0, sp, #14
 800d9d8:	f7ff ff5c 	bl	800d894 <ILI9341_SetAddress>
	HAL_Delay(100);
 800d9dc:	2064      	movs	r0, #100	; 0x64
 800d9de:	f7f9 fbbf 	bl	8007160 <HAL_Delay>
	command = ILI9341_PIXEL_FORMAT;
 800d9e2:	233a      	movs	r3, #58	; 0x3a
 800d9e4:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = color_space;
 800d9e8:	f8ad 4004 	strh.w	r4, [sp, #4]
	ILI9341_SetAddress(&command);
 800d9ec:	f10d 000e 	add.w	r0, sp, #14
 800d9f0:	f7ff ff50 	bl	800d894 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 1);
 800d9f4:	2101      	movs	r1, #1
 800d9f6:	a801      	add	r0, sp, #4
 800d9f8:	f7ff ff32 	bl	800d860 <ILI9341_SendData>
	HAL_Delay(100);
 800d9fc:	2064      	movs	r0, #100	; 0x64
 800d9fe:	f7f9 fbaf 	bl	8007160 <HAL_Delay>
	command = ILI9341_INTERFACE;
 800da02:	23f6      	movs	r3, #246	; 0xf6
 800da04:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = 0x49;
 800da08:	2349      	movs	r3, #73	; 0x49
 800da0a:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter[1] = 0;
 800da0e:	2300      	movs	r3, #0
 800da10:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter[2] = 0x20;
 800da14:	2320      	movs	r3, #32
 800da16:	f8ad 3008 	strh.w	r3, [sp, #8]
	ILI9341_SetAddress(&command);
 800da1a:	f10d 000e 	add.w	r0, sp, #14
 800da1e:	f7ff ff39 	bl	800d894 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 3);
 800da22:	2103      	movs	r1, #3
 800da24:	a801      	add	r0, sp, #4
 800da26:	f7ff ff1b 	bl	800d860 <ILI9341_SendData>
}
 800da2a:	b004      	add	sp, #16
 800da2c:	bd10      	pop	{r4, pc}
 800da2e:	bf00      	nop
 800da30:	20010fd8 	.word	0x20010fd8

0800da34 <ILI9341_SendRepeatedDataDMA>:
{
 800da34:	b530      	push	{r4, r5, lr}
 800da36:	b083      	sub	sp, #12
 800da38:	460c      	mov	r4, r1
 800da3a:	f8ad 0006 	strh.w	r0, [sp, #6]
	switch (hLCDDMA.Init.PeriphDataAlignment)
 800da3e:	4b18      	ldr	r3, [pc, #96]	; (800daa0 <ILI9341_SendRepeatedDataDMA+0x6c>)
 800da40:	695b      	ldr	r3, [r3, #20]
 800da42:	b17b      	cbz	r3, 800da64 <ILI9341_SendRepeatedDataDMA+0x30>
 800da44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da48:	d100      	bne.n	800da4c <ILI9341_SendRepeatedDataDMA+0x18>
			len = (num_copies / (2*LCD_IO_DATA_WRITE_CYCLES));
 800da4a:	084c      	lsrs	r4, r1, #1
	ILI9341_WaitTransfer();
 800da4c:	f7ff ff18 	bl	800d880 <ILI9341_WaitTransfer>
	HAL_DMA_DeInit(&hLCDDMA);
 800da50:	4d13      	ldr	r5, [pc, #76]	; (800daa0 <ILI9341_SendRepeatedDataDMA+0x6c>)
 800da52:	4628      	mov	r0, r5
 800da54:	f7fa fc6e 	bl	8008334 <HAL_DMA_DeInit>
	hLCDDMA.Init.PeriphInc = DMA_PINC_DISABLE;	// dont increment source address
 800da58:	2300      	movs	r3, #0
 800da5a:	60eb      	str	r3, [r5, #12]
	HAL_DMA_Init(&hLCDDMA);
 800da5c:	4628      	mov	r0, r5
 800da5e:	f7fa fbfd 	bl	800825c <HAL_DMA_Init>
 800da62:	e00e      	b.n	800da82 <ILI9341_SendRepeatedDataDMA+0x4e>
			len = 2*num_copies/LCD_IO_DATA_WRITE_CYCLES;
 800da64:	004c      	lsls	r4, r1, #1
			break;
 800da66:	e7f1      	b.n	800da4c <ILI9341_SendRepeatedDataDMA+0x18>
			len -= 65535;
 800da68:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
 800da6c:	3cff      	subs	r4, #255	; 0xff
			transfer = 65535;
 800da6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t) &data, (uint32_t)FMC_BANK1_MEM, transfer) != HAL_OK) return 1;
 800da72:	4a0c      	ldr	r2, [pc, #48]	; (800daa4 <ILI9341_SendRepeatedDataDMA+0x70>)
 800da74:	f10d 0106 	add.w	r1, sp, #6
 800da78:	4809      	ldr	r0, [pc, #36]	; (800daa0 <ILI9341_SendRepeatedDataDMA+0x6c>)
 800da7a:	f7fa fcb7 	bl	80083ec <HAL_DMA_Start_IT>
 800da7e:	b960      	cbnz	r0, 800da9a <ILI9341_SendRepeatedDataDMA+0x66>
	while (len);
 800da80:	b134      	cbz	r4, 800da90 <ILI9341_SendRepeatedDataDMA+0x5c>
		ILI9341_WaitTransfer();
 800da82:	f7ff fefd 	bl	800d880 <ILI9341_WaitTransfer>
		if (len > 65535)
 800da86:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800da8a:	d2ed      	bcs.n	800da68 <ILI9341_SendRepeatedDataDMA+0x34>
		if (transfer == 0) return 1;
 800da8c:	b914      	cbnz	r4, 800da94 <ILI9341_SendRepeatedDataDMA+0x60>
 800da8e:	2001      	movs	r0, #1
}
 800da90:	b003      	add	sp, #12
 800da92:	bd30      	pop	{r4, r5, pc}
			transfer = len;
 800da94:	4623      	mov	r3, r4
			len = 0;
 800da96:	2400      	movs	r4, #0
 800da98:	e7eb      	b.n	800da72 <ILI9341_SendRepeatedDataDMA+0x3e>
		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t) &data, (uint32_t)FMC_BANK1_MEM, transfer) != HAL_OK) return 1;
 800da9a:	2001      	movs	r0, #1
 800da9c:	e7f8      	b.n	800da90 <ILI9341_SendRepeatedDataDMA+0x5c>
 800da9e:	bf00      	nop
 800daa0:	20000b60 	.word	0x20000b60
 800daa4:	60010000 	.word	0x60010000

0800daa8 <ILI9341_DisplayOn>:

//! @brief Strojno omogoči zaslon
void ILI9341_DisplayOn()
{
 800daa8:	b500      	push	{lr}
 800daaa:	b083      	sub	sp, #12
	ILI9341_Data_t command = ILI9341_DISPLAY_ON;
 800daac:	2329      	movs	r3, #41	; 0x29
 800daae:	f8ad 3006 	strh.w	r3, [sp, #6]
	ILI9341_SetAddress(&command);
 800dab2:	f10d 0006 	add.w	r0, sp, #6
 800dab6:	f7ff feed 	bl	800d894 <ILI9341_SetAddress>
}
 800daba:	b003      	add	sp, #12
 800dabc:	f85d fb04 	ldr.w	pc, [sp], #4

0800dac0 <ILI9341_GetParam>:
 */
uint32_t ILI9341_GetParam(LCD_Param_t param)
{
	uint32_t value = 0;

	switch (param) {
 800dac0:	2803      	cmp	r0, #3
 800dac2:	d803      	bhi.n	800dacc <ILI9341_GetParam+0xc>
 800dac4:	e8df f000 	tbb	[pc, r0]
 800dac8:	0a0d0704 	.word	0x0a0d0704
 800dacc:	2000      	movs	r0, #0
 800dace:	4770      	bx	lr
	case LCD_WIDTH:
		value = LCD.width;
 800dad0:	4b05      	ldr	r3, [pc, #20]	; (800dae8 <ILI9341_GetParam+0x28>)
 800dad2:	6818      	ldr	r0, [r3, #0]
		break;
 800dad4:	4770      	bx	lr
	case LCD_HEIGHT:
		value = LCD.height;
 800dad6:	4b04      	ldr	r3, [pc, #16]	; (800dae8 <ILI9341_GetParam+0x28>)
 800dad8:	6858      	ldr	r0, [r3, #4]
		break;
 800dada:	4770      	bx	lr
	case LCD_AREA:
		value = ILI9341_AREA;
		break;
	case LCD_ORIENTATION:
		value = LCD.orientation;
 800dadc:	4b02      	ldr	r3, [pc, #8]	; (800dae8 <ILI9341_GetParam+0x28>)
 800dade:	6898      	ldr	r0, [r3, #8]
		break;
 800dae0:	4770      	bx	lr
		value = ILI9341_AREA;
 800dae2:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
	default:
		break;
	}

	return value;
}
 800dae6:	4770      	bx	lr
 800dae8:	20010fd8 	.word	0x20010fd8

0800daec <UserPixelSetFunction>:


#include "lcd_ugui.h"

void UserPixelSetFunction(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 800daec:	b500      	push	{lr}
 800daee:	b083      	sub	sp, #12
 800daf0:	f8ad 2006 	strh.w	r2, [sp, #6]
	ILI9341_SetDisplayWindow(x, y, 1, 1);
 800daf4:	2301      	movs	r3, #1
 800daf6:	461a      	mov	r2, r3
 800daf8:	f7ff ff04 	bl	800d904 <ILI9341_SetDisplayWindow>
	ILI9341_SendData((LCD_IO_Data_t *)&c, 1);
 800dafc:	2101      	movs	r1, #1
 800dafe:	f10d 0006 	add.w	r0, sp, #6
 800db02:	f7ff fead 	bl	800d860 <ILI9341_SendData>
}
 800db06:	b003      	add	sp, #12
 800db08:	f85d fb04 	ldr.w	pc, [sp], #4

0800db0c <_HW_FillFrame_>:

UG_RESULT _HW_FillFrame_(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 800db0c:	b510      	push	{r4, lr}
 800db0e:	b082      	sub	sp, #8
	LCD_FillRect(x1, y1, x2-x1, y2-y1, c);
 800db10:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800db14:	9400      	str	r4, [sp, #0]
 800db16:	1a5b      	subs	r3, r3, r1
 800db18:	1a12      	subs	r2, r2, r0
 800db1a:	f7ff fe61 	bl	800d7e0 <LCD_FillRect>
	return UG_RESULT_OK;
}
 800db1e:	2000      	movs	r0, #0
 800db20:	b002      	add	sp, #8
 800db22:	bd10      	pop	{r4, pc}

0800db24 <LCD_UG_init>:


UG_GUI gui;

UG_S16 LCD_UG_init(void)
{
 800db24:	b510      	push	{r4, lr}
	UG_Init(&gui, UserPixelSetFunction, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT));
 800db26:	2000      	movs	r0, #0
 800db28:	f7ff ffca 	bl	800dac0 <ILI9341_GetParam>
 800db2c:	4604      	mov	r4, r0
 800db2e:	2001      	movs	r0, #1
 800db30:	f7ff ffc6 	bl	800dac0 <ILI9341_GetParam>
 800db34:	b203      	sxth	r3, r0
 800db36:	b222      	sxth	r2, r4
 800db38:	490b      	ldr	r1, [pc, #44]	; (800db68 <LCD_UG_init+0x44>)
 800db3a:	480c      	ldr	r0, [pc, #48]	; (800db6c <LCD_UG_init+0x48>)
 800db3c:	f000 f81c 	bl	800db78 <UG_Init>
	UG_DriverRegister(DRIVER_FILL_FRAME, (void *)_HW_FillFrame_);
 800db40:	490b      	ldr	r1, [pc, #44]	; (800db70 <LCD_UG_init+0x4c>)
 800db42:	2001      	movs	r0, #1
 800db44:	f000 fac0 	bl	800e0c8 <UG_DriverRegister>
	UG_DriverEnable(DRIVER_FILL_FRAME);
 800db48:	2001      	movs	r0, #1
 800db4a:	f000 facb 	bl	800e0e4 <UG_DriverEnable>

	UG_FontSelect(&FONT_8X12);
 800db4e:	4809      	ldr	r0, [pc, #36]	; (800db74 <LCD_UG_init+0x50>)
 800db50:	f000 f852 	bl	800dbf8 <UG_FontSelect>
	UG_SetForecolor(C_WHITE);
 800db54:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800db58:	f000 f8b4 	bl	800dcc4 <UG_SetForecolor>
	UG_SetBackcolor(C_BLACK);
 800db5c:	2000      	movs	r0, #0
 800db5e:	f000 f8b9 	bl	800dcd4 <UG_SetBackcolor>
	return 0;
}
 800db62:	2000      	movs	r0, #0
 800db64:	bd10      	pop	{r4, pc}
 800db66:	bf00      	nop
 800db68:	0800daed 	.word	0x0800daed
 800db6c:	20010fe4 	.word	0x20010fe4
 800db70:	0800db0d 	.word	0x0800db0d
 800db74:	08015200 	.word	0x08015200

0800db78 <UG_Init>:

UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 800db78:	6001      	str	r1, [r0, #0]
   g->x_dim = x;
 800db7a:	8082      	strh	r2, [r0, #4]
   g->y_dim = y;
 800db7c:	80c3      	strh	r3, [r0, #6]
   g->console.x_start = 4;
 800db7e:	2104      	movs	r1, #4
 800db80:	8401      	strh	r1, [r0, #32]
   g->console.y_start = 4;
 800db82:	8441      	strh	r1, [r0, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 800db84:	b292      	uxth	r2, r2
 800db86:	3a04      	subs	r2, #4
 800db88:	b292      	uxth	r2, r2
 800db8a:	3a01      	subs	r2, #1
 800db8c:	b212      	sxth	r2, r2
 800db8e:	8482      	strh	r2, [r0, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 800db90:	b29b      	uxth	r3, r3
 800db92:	3b04      	subs	r3, #4
 800db94:	b29b      	uxth	r3, r3
 800db96:	3b01      	subs	r3, #1
 800db98:	b21b      	sxth	r3, r3
 800db9a:	84c3      	strh	r3, [r0, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 800db9c:	8382      	strh	r2, [r0, #28]
   g->console.y_pos = g->console.y_end;
 800db9e:	83c3      	strh	r3, [r0, #30]
   g->char_h_space = 1;
 800dba0:	2301      	movs	r3, #1
 800dba2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   g->char_v_space = 1;
 800dba6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
   g->font.p = NULL;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	62c3      	str	r3, [r0, #44]	; 0x2c
   g->font.char_height = 0;
 800dbae:	8683      	strh	r3, [r0, #52]	; 0x34
   g->font.char_width = 0;
 800dbb0:	8643      	strh	r3, [r0, #50]	; 0x32
   g->font.start_char = 0;
 800dbb2:	86c3      	strh	r3, [r0, #54]	; 0x36
   g->font.end_char = 0;
 800dbb4:	8703      	strh	r3, [r0, #56]	; 0x38
   g->font.widths = NULL;
 800dbb6:	63c3      	str	r3, [r0, #60]	; 0x3c
   #ifdef USE_COLOR_RGB888
   g->desktop_color = 0x5E8BEf;
   #endif
   #ifdef USE_COLOR_RGB565
   g->desktop_color = 0x5C5D;
 800dbb8:	f645 425d 	movw	r2, #23645	; 0x5c5d
 800dbbc:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
   #endif
   g->fore_color = C_WHITE;
 800dbc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dbc4:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
   g->back_color = C_BLACK;
 800dbc8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
   g->next_window = NULL;
 800dbcc:	6103      	str	r3, [r0, #16]
   g->active_window = NULL;
 800dbce:	6143      	str	r3, [r0, #20]
   g->last_window = NULL;
 800dbd0:	6183      	str	r3, [r0, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800dbd2:	e008      	b.n	800dbe6 <UG_Init+0x6e>
   {
      g->driver[i].driver = NULL;
 800dbd4:	f103 0209 	add.w	r2, r3, #9
 800dbd8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800dbdc:	2100      	movs	r1, #0
 800dbde:	6051      	str	r1, [r2, #4]
      g->driver[i].state = 0;
 800dbe0:	7211      	strb	r1, [r2, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	2b02      	cmp	r3, #2
 800dbe8:	d9f4      	bls.n	800dbd4 <UG_Init+0x5c>
   }

   gui = g;
 800dbea:	4b02      	ldr	r3, [pc, #8]	; (800dbf4 <UG_Init+0x7c>)
 800dbec:	6018      	str	r0, [r3, #0]
   return 1;
}
 800dbee:	2001      	movs	r0, #1
 800dbf0:	4770      	bx	lr
 800dbf2:	bf00      	nop
 800dbf4:	20011048 	.word	0x20011048

0800dbf8 <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 800dbf8:	b500      	push	{lr}
   gui->font = *font;
 800dbfa:	4b07      	ldr	r3, [pc, #28]	; (800dc18 <UG_FontSelect+0x20>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f103 0c2c 	add.w	ip, r3, #44	; 0x2c
 800dc02:	4686      	mov	lr, r0
 800dc04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dc08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dc0c:	f8de 3000 	ldr.w	r3, [lr]
 800dc10:	f8cc 3000 	str.w	r3, [ip]
}
 800dc14:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc18:	20011048 	.word	0x20011048

0800dc1c <UG_FillFrame>:
{
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
}

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800dc1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc20:	b083      	sub	sp, #12
 800dc22:	4606      	mov	r6, r0
 800dc24:	4688      	mov	r8, r1
 800dc26:	4691      	mov	r9, r2
 800dc28:	461d      	mov	r5, r3
 800dc2a:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
   UG_S16 n,m;

   if ( x2 < x1 )
 800dc2e:	4282      	cmp	r2, r0
 800dc30:	db01      	blt.n	800dc36 <UG_FillFrame+0x1a>
 800dc32:	4681      	mov	r9, r0
 800dc34:	4616      	mov	r6, r2
   {
      n = x2;
      x2 = x1;
      x1 = n;
   }
   if ( y2 < y1 )
 800dc36:	4545      	cmp	r5, r8
 800dc38:	db02      	blt.n	800dc40 <UG_FillFrame+0x24>
 800dc3a:	462b      	mov	r3, r5
 800dc3c:	4645      	mov	r5, r8
 800dc3e:	4698      	mov	r8, r3
      y2 = y1;
      y1 = n;
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800dc40:	4b11      	ldr	r3, [pc, #68]	; (800dc88 <UG_FillFrame+0x6c>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800dc48:	f012 0f02 	tst.w	r2, #2
 800dc4c:	d017      	beq.n	800dc7e <UG_FillFrame+0x62>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800dc4e:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 800dc50:	9700      	str	r7, [sp, #0]
 800dc52:	4643      	mov	r3, r8
 800dc54:	4632      	mov	r2, r6
 800dc56:	4629      	mov	r1, r5
 800dc58:	4648      	mov	r0, r9
 800dc5a:	47a0      	blx	r4
 800dc5c:	b978      	cbnz	r0, 800dc7e <UG_FillFrame+0x62>
      for( n=x1; n<=x2; n++ )
      {
         gui->pset(n,m,c);
      }
   }
}
 800dc5e:	b003      	add	sp, #12
 800dc60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
         gui->pset(n,m,c);
 800dc64:	4b08      	ldr	r3, [pc, #32]	; (800dc88 <UG_FillFrame+0x6c>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	463a      	mov	r2, r7
 800dc6c:	4629      	mov	r1, r5
 800dc6e:	4620      	mov	r0, r4
 800dc70:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800dc72:	3401      	adds	r4, #1
 800dc74:	b224      	sxth	r4, r4
 800dc76:	42a6      	cmp	r6, r4
 800dc78:	daf4      	bge.n	800dc64 <UG_FillFrame+0x48>
   for( m=y1; m<=y2; m++ )
 800dc7a:	3501      	adds	r5, #1
 800dc7c:	b22d      	sxth	r5, r5
 800dc7e:	45a8      	cmp	r8, r5
 800dc80:	dbed      	blt.n	800dc5e <UG_FillFrame+0x42>
      for( n=x1; n<=x2; n++ )
 800dc82:	464c      	mov	r4, r9
 800dc84:	e7f7      	b.n	800dc76 <UG_FillFrame+0x5a>
 800dc86:	bf00      	nop
 800dc88:	20011048 	.word	0x20011048

0800dc8c <UG_FillScreen>:
{
 800dc8c:	b500      	push	{lr}
 800dc8e:	b083      	sub	sp, #12
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
 800dc90:	4b07      	ldr	r3, [pc, #28]	; (800dcb0 <UG_FillScreen+0x24>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	889a      	ldrh	r2, [r3, #4]
 800dc96:	3a01      	subs	r2, #1
 800dc98:	88db      	ldrh	r3, [r3, #6]
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	9000      	str	r0, [sp, #0]
 800dc9e:	b21b      	sxth	r3, r3
 800dca0:	b212      	sxth	r2, r2
 800dca2:	2100      	movs	r1, #0
 800dca4:	4608      	mov	r0, r1
 800dca6:	f7ff ffb9 	bl	800dc1c <UG_FillFrame>
}
 800dcaa:	b003      	add	sp, #12
 800dcac:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcb0:	20011048 	.word	0x20011048

0800dcb4 <UG_DrawPixel>:
   UG_DrawArc(x1+r, y2-r, r, 0x30, c);
   UG_DrawArc(x2-r, y2-r, r, 0xC0, c);
}

void UG_DrawPixel( UG_S16 x0, UG_S16 y0, UG_COLOR c )
{
 800dcb4:	b508      	push	{r3, lr}
   gui->pset(x0,y0,c);
 800dcb6:	4b02      	ldr	r3, [pc, #8]	; (800dcc0 <UG_DrawPixel+0xc>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4798      	blx	r3
}
 800dcbe:	bd08      	pop	{r3, pc}
 800dcc0:	20011048 	.word	0x20011048

0800dcc4 <UG_SetForecolor>:
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
   gui->fore_color = c;
 800dcc4:	4b02      	ldr	r3, [pc, #8]	; (800dcd0 <UG_SetForecolor+0xc>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
}
 800dccc:	4770      	bx	lr
 800dcce:	bf00      	nop
 800dcd0:	20011048 	.word	0x20011048

0800dcd4 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
   gui->back_color = c;
 800dcd4:	4b02      	ldr	r3, [pc, #8]	; (800dce0 <UG_SetBackcolor+0xc>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
}
 800dcdc:	4770      	bx	lr
 800dcde:	bf00      	nop
 800dce0:	20011048 	.word	0x20011048

0800dce4 <_UG_PutChar>:

/* -------------------------------------------------------------------------------- */
/* -- INTERNAL FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */
void _UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc, const UG_FONT* font)
{
 800dce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce8:	b087      	sub	sp, #28
 800dcea:	4604      	mov	r4, r0
 800dcec:	9104      	str	r1, [sp, #16]
 800dcee:	4611      	mov	r1, r2
 800dcf0:	469b      	mov	fp, r3
 800dcf2:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 800dcf6:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
   UG_COLOR color;
   void(*push_pixel)(UG_COLOR);

   bt = (UG_U8)chr;

   switch ( bt )
 800dcfa:	28fc      	cmp	r0, #252	; 0xfc
 800dcfc:	d824      	bhi.n	800dd48 <_UG_PutChar+0x64>
 800dcfe:	28d6      	cmp	r0, #214	; 0xd6
 800dd00:	d319      	bcc.n	800dd36 <_UG_PutChar+0x52>
 800dd02:	f1a0 03d6 	sub.w	r3, r0, #214	; 0xd6
 800dd06:	2b26      	cmp	r3, #38	; 0x26
 800dd08:	d81e      	bhi.n	800dd48 <_UG_PutChar+0x64>
 800dd0a:	e8df f003 	tbb	[pc, r3]
 800dd0e:	1d64      	.short	0x1d64
 800dd10:	1d1d1d1d 	.word	0x1d1d1d1d
 800dd14:	1d1d1d68 	.word	0x1d1d1d68
 800dd18:	1d1d1d1d 	.word	0x1d1d1d1d
 800dd1c:	1d1d1d6a 	.word	0x1d1d1d6a
 800dd20:	1d1d1d1d 	.word	0x1d1d1d1d
 800dd24:	1d1d1d1d 	.word	0x1d1d1d1d
 800dd28:	1d1d1d1d 	.word	0x1d1d1d1d
 800dd2c:	1d6e1d1d 	.word	0x1d6e1d1d
 800dd30:	1d1d1d1d 	.word	0x1d1d1d1d
 800dd34:	66          	.byte	0x66
 800dd35:	00          	.byte	0x00
 800dd36:	28b5      	cmp	r0, #181	; 0xb5
 800dd38:	d055      	beq.n	800dde6 <_UG_PutChar+0x102>
 800dd3a:	28c4      	cmp	r0, #196	; 0xc4
 800dd3c:	d101      	bne.n	800dd42 <_UG_PutChar+0x5e>
      case 0xF6: bt = 0x94; break; // �
      case 0xD6: bt = 0x99; break; // �
      case 0xFC: bt = 0x81; break; // �
      case 0xDC: bt = 0x9A; break; // �
      case 0xE4: bt = 0x84; break; // �
      case 0xC4: bt = 0x8E; break; // �
 800dd3e:	248e      	movs	r4, #142	; 0x8e
 800dd40:	e002      	b.n	800dd48 <_UG_PutChar+0x64>
   switch ( bt )
 800dd42:	28b0      	cmp	r0, #176	; 0xb0
 800dd44:	d100      	bne.n	800dd48 <_UG_PutChar+0x64>
      case 0xB5: bt = 0xE6; break; // �
      case 0xB0: bt = 0xF8; break; // �
 800dd46:	24f8      	movs	r4, #248	; 0xf8
   }

   if (bt < font->start_char || bt > font->end_char) return;
 800dd48:	b2a2      	uxth	r2, r4
 800dd4a:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d37b      	bcc.n	800de4a <_UG_PutChar+0x166>
 800dd52:	f8b9 000c 	ldrh.w	r0, [r9, #12]
 800dd56:	4282      	cmp	r2, r0
 800dd58:	d877      	bhi.n	800de4a <_UG_PutChar+0x166>
   
   yo = y;
 800dd5a:	b28a      	uxth	r2, r1
 800dd5c:	9200      	str	r2, [sp, #0]
   bn = font->char_width;
 800dd5e:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
 800dd62:	b290      	uxth	r0, r2
 800dd64:	9003      	str	r0, [sp, #12]
   if ( !bn ) return;
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d06f      	beq.n	800de4a <_UG_PutChar+0x166>
   bn >>= 3;
 800dd6a:	08c5      	lsrs	r5, r0, #3
 800dd6c:	9501      	str	r5, [sp, #4]
   if ( font->char_width % 8 ) bn++;
 800dd6e:	f010 0f07 	tst.w	r0, #7
 800dd72:	d001      	beq.n	800dd78 <_UG_PutChar+0x94>
 800dd74:	3501      	adds	r5, #1
 800dd76:	9501      	str	r5, [sp, #4]
   actual_char_width = (font->widths ? font->widths[bt - font->start_char] : font->char_width);
 800dd78:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dd7c:	b110      	cbz	r0, 800dd84 <_UG_PutChar+0xa0>
 800dd7e:	1ae5      	subs	r5, r4, r3
 800dd80:	5d40      	ldrb	r0, [r0, r5]
 800dd82:	9003      	str	r0, [sp, #12]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED )
 800dd84:	48a2      	ldr	r0, [pc, #648]	; (800e010 <_UG_PutChar+0x32c>)
 800dd86:	6800      	ldr	r0, [r0, #0]
 800dd88:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
 800dd8c:	f015 0f02 	tst.w	r5, #2
 800dd90:	f000 809f 	beq.w	800ded2 <_UG_PutChar+0x1ee>
   {
	   //(void(*)(UG_COLOR))
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 800dd94:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800dd96:	9b03      	ldr	r3, [sp, #12]
 800dd98:	9804      	ldr	r0, [sp, #16]
 800dd9a:	181a      	adds	r2, r3, r0
 800dd9c:	b292      	uxth	r2, r2
 800dd9e:	3a01      	subs	r2, #1
 800dda0:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800dda4:	9e00      	ldr	r6, [sp, #0]
 800dda6:	4433      	add	r3, r6
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	3b01      	subs	r3, #1
 800ddac:	b21b      	sxth	r3, r3
 800ddae:	b212      	sxth	r2, r2
 800ddb0:	47a8      	blx	r5
 800ddb2:	4607      	mov	r7, r0
	   
      if (font->font_type == FONT_TYPE_1BPP)
 800ddb4:	f899 3004 	ldrb.w	r3, [r9, #4]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d144      	bne.n	800de46 <_UG_PutChar+0x162>
	  {
	      index = (bt - font->start_char)* font->char_height * bn;
 800ddbc:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800ddc0:	1ae3      	subs	r3, r4, r3
 800ddc2:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 800ddc6:	fb02 f303 	mul.w	r3, r2, r3
 800ddca:	9a01      	ldr	r2, [sp, #4]
 800ddcc:	fb02 f303 	mul.w	r3, r2, r3
		  for( j=0;j<font->char_height;j++ )
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	9202      	str	r2, [sp, #8]
 800ddd4:	e02e      	b.n	800de34 <_UG_PutChar+0x150>
      case 0xD6: bt = 0x99; break; // �
 800ddd6:	2499      	movs	r4, #153	; 0x99
 800ddd8:	e7b6      	b.n	800dd48 <_UG_PutChar+0x64>
      case 0xFC: bt = 0x81; break; // �
 800ddda:	2481      	movs	r4, #129	; 0x81
 800dddc:	e7b4      	b.n	800dd48 <_UG_PutChar+0x64>
      case 0xDC: bt = 0x9A; break; // �
 800ddde:	249a      	movs	r4, #154	; 0x9a
 800dde0:	e7b2      	b.n	800dd48 <_UG_PutChar+0x64>
      case 0xE4: bt = 0x84; break; // �
 800dde2:	2484      	movs	r4, #132	; 0x84
 800dde4:	e7b0      	b.n	800dd48 <_UG_PutChar+0x64>
      case 0xB5: bt = 0xE6; break; // �
 800dde6:	24e6      	movs	r4, #230	; 0xe6
 800dde8:	e7ae      	b.n	800dd48 <_UG_PutChar+0x64>
      case 0xF6: bt = 0x94; break; // �
 800ddea:	2494      	movs	r4, #148	; 0x94
 800ddec:	e7ac      	b.n	800dd48 <_UG_PutChar+0x64>
				   {
					  push_pixel(fc);
				   }
				   else
				   {
					  push_pixel(bc);
 800ddee:	4640      	mov	r0, r8
 800ddf0:	47b8      	blx	r7
				   }
				   b >>= 1;
 800ddf2:	0876      	lsrs	r6, r6, #1
				   c--;
 800ddf4:	3d01      	subs	r5, #1
 800ddf6:	b2ad      	uxth	r5, r5
				for( k=0;(k<8) && c;k++ )
 800ddf8:	3401      	adds	r4, #1
 800ddfa:	b2a4      	uxth	r4, r4
 800ddfc:	2c07      	cmp	r4, #7
 800ddfe:	d806      	bhi.n	800de0e <_UG_PutChar+0x12a>
 800de00:	b12d      	cbz	r5, 800de0e <_UG_PutChar+0x12a>
				   if( b & 0x01 )
 800de02:	f016 0f01 	tst.w	r6, #1
 800de06:	d0f2      	beq.n	800ddee <_UG_PutChar+0x10a>
					  push_pixel(fc);
 800de08:	4658      	mov	r0, fp
 800de0a:	47b8      	blx	r7
 800de0c:	e7f1      	b.n	800ddf2 <_UG_PutChar+0x10e>
			 for( i=0;i<bn;i++ )
 800de0e:	f10a 0a01 	add.w	sl, sl, #1
 800de12:	fa1f fa8a 	uxth.w	sl, sl
				b = font->p[index++];
 800de16:	9b00      	ldr	r3, [sp, #0]
			 for( i=0;i<bn;i++ )
 800de18:	9a01      	ldr	r2, [sp, #4]
 800de1a:	4592      	cmp	sl, r2
 800de1c:	d206      	bcs.n	800de2c <_UG_PutChar+0x148>
				b = font->p[index++];
 800de1e:	f8d9 2000 	ldr.w	r2, [r9]
 800de22:	1c59      	adds	r1, r3, #1
 800de24:	9100      	str	r1, [sp, #0]
 800de26:	5cd6      	ldrb	r6, [r2, r3]
				for( k=0;(k<8) && c;k++ )
 800de28:	2400      	movs	r4, #0
 800de2a:	e7e7      	b.n	800ddfc <_UG_PutChar+0x118>
		  for( j=0;j<font->char_height;j++ )
 800de2c:	9a02      	ldr	r2, [sp, #8]
 800de2e:	3201      	adds	r2, #1
 800de30:	b292      	uxth	r2, r2
 800de32:	9202      	str	r2, [sp, #8]
 800de34:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 800de38:	9902      	ldr	r1, [sp, #8]
 800de3a:	4291      	cmp	r1, r2
 800de3c:	da05      	bge.n	800de4a <_UG_PutChar+0x166>
			 c=actual_char_width;
 800de3e:	9d03      	ldr	r5, [sp, #12]
			 for( i=0;i<bn;i++ )
 800de40:	f04f 0a00 	mov.w	sl, #0
 800de44:	e7e8      	b.n	800de18 <_UG_PutChar+0x134>
				}
			 }
	 	 }
	  }
	  else if (font->font_type == FONT_TYPE_8BPP)
 800de46:	2b01      	cmp	r3, #1
 800de48:	d002      	beq.n	800de50 <_UG_PutChar+0x16c>
            index += font->char_width - actual_char_width;
            yo++;
         }
      }
   }
}
 800de4a:	b007      	add	sp, #28
 800de4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		   index = (bt - font->start_char)* font->char_height * font->char_width;
 800de50:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800de54:	1ae3      	subs	r3, r4, r3
 800de56:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 800de5a:	fb02 f303 	mul.w	r3, r2, r3
 800de5e:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
 800de62:	fb02 f303 	mul.w	r3, r2, r3
		   for( j=0;j<font->char_height;j++ )
 800de66:	2600      	movs	r6, #0
 800de68:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800de6c:	e02b      	b.n	800dec6 <_UG_PutChar+0x1e2>
				 b = font->p[index++];
 800de6e:	f8d9 2000 	ldr.w	r2, [r9]
 800de72:	1c5d      	adds	r5, r3, #1
 800de74:	f812 c003 	ldrb.w	ip, [r2, r3]
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 800de78:	fa5f f28b 	uxtb.w	r2, fp
 800de7c:	fa5f f188 	uxtb.w	r1, r8
 800de80:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 800de84:	fb03 f101 	mul.w	r1, r3, r1
 800de88:	fb0c 1202 	mla	r2, ip, r2, r1
 800de8c:	f3c2 2207 	ubfx	r2, r2, #8, #8
				         ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     // Green
 800de90:	f40b 407f 	and.w	r0, fp, #65280	; 0xff00
 800de94:	f408 417f 	and.w	r1, r8, #65280	; 0xff00
 800de98:	fb01 f303 	mul.w	r3, r1, r3
 800de9c:	fb00 300c 	mla	r0, r0, ip, r3
 800dea0:	1200      	asrs	r0, r0, #8
 800dea2:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800dea6:	b200      	sxth	r0, r0
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 800dea8:	4310      	orrs	r0, r2
				 push_pixel(color);
 800deaa:	b280      	uxth	r0, r0
 800deac:	47b8      	blx	r7
			  for( i=0;i<actual_char_width;i++ )
 800deae:	3401      	adds	r4, #1
 800deb0:	b2a4      	uxth	r4, r4
				 b = font->p[index++];
 800deb2:	462b      	mov	r3, r5
			  for( i=0;i<actual_char_width;i++ )
 800deb4:	4554      	cmp	r4, sl
 800deb6:	d3da      	bcc.n	800de6e <_UG_PutChar+0x18a>
			  index += font->char_width - actual_char_width;
 800deb8:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
 800debc:	eba2 020a 	sub.w	r2, r2, sl
 800dec0:	4413      	add	r3, r2
		   for( j=0;j<font->char_height;j++ )
 800dec2:	3601      	adds	r6, #1
 800dec4:	b2b6      	uxth	r6, r6
 800dec6:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 800deca:	4296      	cmp	r6, r2
 800decc:	dabd      	bge.n	800de4a <_UG_PutChar+0x166>
			  for( i=0;i<actual_char_width;i++ )
 800dece:	2400      	movs	r4, #0
 800ded0:	e7f0      	b.n	800deb4 <_UG_PutChar+0x1d0>
	   if (font->font_type == FONT_TYPE_1BPP)
 800ded2:	f899 1004 	ldrb.w	r1, [r9, #4]
 800ded6:	2900      	cmp	r1, #0
 800ded8:	d14b      	bne.n	800df72 <_UG_PutChar+0x28e>
         index = (bt - font->start_char)* font->char_height * bn;
 800deda:	1ae3      	subs	r3, r4, r3
 800dedc:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 800dee0:	fb02 f303 	mul.w	r3, r2, r3
 800dee4:	9a01      	ldr	r2, [sp, #4]
 800dee6:	fb02 f303 	mul.w	r3, r2, r3
         for( j=0;j<font->char_height;j++ )
 800deea:	2200      	movs	r2, #0
 800deec:	9205      	str	r2, [sp, #20]
 800deee:	e034      	b.n	800df5a <_UG_PutChar+0x276>
                  gui->pset(xo,yo,bc);
 800def0:	4b47      	ldr	r3, [pc, #284]	; (800e010 <_UG_PutChar+0x32c>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4642      	mov	r2, r8
 800def8:	f9bd 1000 	ldrsh.w	r1, [sp]
 800defc:	b230      	sxth	r0, r6
 800defe:	4798      	blx	r3
               b >>= 1;
 800df00:	087f      	lsrs	r7, r7, #1
               xo++;
 800df02:	3601      	adds	r6, #1
 800df04:	b2b6      	uxth	r6, r6
               c--;
 800df06:	3d01      	subs	r5, #1
 800df08:	b2ad      	uxth	r5, r5
             for( k=0;(k<8) && c;k++ )
 800df0a:	3401      	adds	r4, #1
 800df0c:	b2a4      	uxth	r4, r4
 800df0e:	2c07      	cmp	r4, #7
 800df10:	d80c      	bhi.n	800df2c <_UG_PutChar+0x248>
 800df12:	b15d      	cbz	r5, 800df2c <_UG_PutChar+0x248>
               if( b & 0x01 )
 800df14:	f017 0f01 	tst.w	r7, #1
 800df18:	d0ea      	beq.n	800def0 <_UG_PutChar+0x20c>
                  gui->pset(xo,yo,fc);
 800df1a:	4b3d      	ldr	r3, [pc, #244]	; (800e010 <_UG_PutChar+0x32c>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	465a      	mov	r2, fp
 800df22:	f9bd 1000 	ldrsh.w	r1, [sp]
 800df26:	b230      	sxth	r0, r6
 800df28:	4798      	blx	r3
 800df2a:	e7e9      	b.n	800df00 <_UG_PutChar+0x21c>
           for( i=0;i<bn;i++ )
 800df2c:	f10a 0a01 	add.w	sl, sl, #1
 800df30:	fa1f fa8a 	uxth.w	sl, sl
             b = font->p[index++];
 800df34:	9b02      	ldr	r3, [sp, #8]
           for( i=0;i<bn;i++ )
 800df36:	9a01      	ldr	r2, [sp, #4]
 800df38:	4592      	cmp	sl, r2
 800df3a:	d206      	bcs.n	800df4a <_UG_PutChar+0x266>
             b = font->p[index++];
 800df3c:	f8d9 2000 	ldr.w	r2, [r9]
 800df40:	1c59      	adds	r1, r3, #1
 800df42:	9102      	str	r1, [sp, #8]
 800df44:	5cd7      	ldrb	r7, [r2, r3]
             for( k=0;(k<8) && c;k++ )
 800df46:	2400      	movs	r4, #0
 800df48:	e7e1      	b.n	800df0e <_UG_PutChar+0x22a>
           yo++;
 800df4a:	9a00      	ldr	r2, [sp, #0]
 800df4c:	3201      	adds	r2, #1
 800df4e:	b292      	uxth	r2, r2
 800df50:	9200      	str	r2, [sp, #0]
         for( j=0;j<font->char_height;j++ )
 800df52:	9a05      	ldr	r2, [sp, #20]
 800df54:	3201      	adds	r2, #1
 800df56:	b292      	uxth	r2, r2
 800df58:	9205      	str	r2, [sp, #20]
 800df5a:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 800df5e:	9905      	ldr	r1, [sp, #20]
 800df60:	4291      	cmp	r1, r2
 800df62:	f6bf af72 	bge.w	800de4a <_UG_PutChar+0x166>
           xo = x;
 800df66:	f8bd 6010 	ldrh.w	r6, [sp, #16]
           c=actual_char_width;
 800df6a:	9d03      	ldr	r5, [sp, #12]
           for( i=0;i<bn;i++ )
 800df6c:	f04f 0a00 	mov.w	sl, #0
 800df70:	e7e1      	b.n	800df36 <_UG_PutChar+0x252>
      else if (font->font_type == FONT_TYPE_8BPP)
 800df72:	2901      	cmp	r1, #1
 800df74:	f47f af69 	bne.w	800de4a <_UG_PutChar+0x166>
         index = (bt - font->start_char)* font->char_height * font->char_width;
 800df78:	1ae3      	subs	r3, r4, r3
 800df7a:	f9b9 1008 	ldrsh.w	r1, [r9, #8]
 800df7e:	fb01 f303 	mul.w	r3, r1, r3
 800df82:	fb02 f303 	mul.w	r3, r2, r3
         for( j=0;j<font->char_height;j++ )
 800df86:	2700      	movs	r7, #0
 800df88:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800df8c:	e037      	b.n	800dffe <_UG_PutChar+0x31a>
               b = font->p[index++];
 800df8e:	f8d9 2000 	ldr.w	r2, [r9]
 800df92:	1c5e      	adds	r6, r3, #1
 800df94:	f812 c003 	ldrb.w	ip, [r2, r3]
               color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 800df98:	fa5f f18b 	uxtb.w	r1, fp
 800df9c:	fa5f f088 	uxtb.w	r0, r8
 800dfa0:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 800dfa4:	fb03 f000 	mul.w	r0, r3, r0
 800dfa8:	fb0c 0101 	mla	r1, ip, r1, r0
 800dfac:	f3c1 2107 	ubfx	r1, r1, #8, #8
                       ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     // Green
 800dfb0:	f40b 427f 	and.w	r2, fp, #65280	; 0xff00
 800dfb4:	f408 407f 	and.w	r0, r8, #65280	; 0xff00
 800dfb8:	fb00 f303 	mul.w	r3, r0, r3
 800dfbc:	fb02 320c 	mla	r2, r2, ip, r3
 800dfc0:	1212      	asrs	r2, r2, #8
 800dfc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800dfc6:	b212      	sxth	r2, r2
               color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 800dfc8:	430a      	orrs	r2, r1
               gui->pset(xo,yo,color);
 800dfca:	4b11      	ldr	r3, [pc, #68]	; (800e010 <_UG_PutChar+0x32c>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	b292      	uxth	r2, r2
 800dfd2:	f9bd 1000 	ldrsh.w	r1, [sp]
 800dfd6:	b228      	sxth	r0, r5
 800dfd8:	4798      	blx	r3
               xo++;
 800dfda:	3501      	adds	r5, #1
 800dfdc:	b2ad      	uxth	r5, r5
            for( i=0;i<actual_char_width;i++ )
 800dfde:	3401      	adds	r4, #1
 800dfe0:	b2a4      	uxth	r4, r4
               b = font->p[index++];
 800dfe2:	4633      	mov	r3, r6
            for( i=0;i<actual_char_width;i++ )
 800dfe4:	4554      	cmp	r4, sl
 800dfe6:	d3d2      	bcc.n	800df8e <_UG_PutChar+0x2aa>
            index += font->char_width - actual_char_width;
 800dfe8:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
 800dfec:	eba2 020a 	sub.w	r2, r2, sl
 800dff0:	4413      	add	r3, r2
            yo++;
 800dff2:	9a00      	ldr	r2, [sp, #0]
 800dff4:	3201      	adds	r2, #1
 800dff6:	b292      	uxth	r2, r2
 800dff8:	9200      	str	r2, [sp, #0]
         for( j=0;j<font->char_height;j++ )
 800dffa:	3701      	adds	r7, #1
 800dffc:	b2bf      	uxth	r7, r7
 800dffe:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 800e002:	4297      	cmp	r7, r2
 800e004:	f6bf af21 	bge.w	800de4a <_UG_PutChar+0x166>
            xo = x;
 800e008:	f8bd 5010 	ldrh.w	r5, [sp, #16]
            for( i=0;i<actual_char_width;i++ )
 800e00c:	2400      	movs	r4, #0
 800e00e:	e7e9      	b.n	800dfe4 <_UG_PutChar+0x300>
 800e010:	20011048 	.word	0x20011048

0800e014 <UG_PutChar>:
{
 800e014:	b510      	push	{r4, lr}
 800e016:	b082      	sub	sp, #8
	_UG_PutChar(chr,x,y,fc,bc,&gui->font);
 800e018:	4c05      	ldr	r4, [pc, #20]	; (800e030 <UG_PutChar+0x1c>)
 800e01a:	6824      	ldr	r4, [r4, #0]
 800e01c:	342c      	adds	r4, #44	; 0x2c
 800e01e:	9401      	str	r4, [sp, #4]
 800e020:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800e024:	9400      	str	r4, [sp, #0]
 800e026:	f7ff fe5d 	bl	800dce4 <_UG_PutChar>
}
 800e02a:	b002      	add	sp, #8
 800e02c:	bd10      	pop	{r4, pc}
 800e02e:	bf00      	nop
 800e030:	20011048 	.word	0x20011048

0800e034 <UG_PutString>:
{
 800e034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e038:	b083      	sub	sp, #12
 800e03a:	4680      	mov	r8, r0
 800e03c:	460f      	mov	r7, r1
 800e03e:	4615      	mov	r5, r2
   xp=x;
 800e040:	4606      	mov	r6, r0
   while ( *str != 0 )
 800e042:	e018      	b.n	800e076 <UG_PutString+0x42>
         xp = gui->x_dim;
 800e044:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
         continue;
 800e048:	e015      	b.n	800e076 <UG_PutString+0x42>
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 800e04a:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 800e04e:	fa5f f983 	uxtb.w	r9, r3
 800e052:	e024      	b.n	800e09e <UG_PutString+0x6a>
      UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 800e054:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800e058:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
 800e05c:	9200      	str	r2, [sp, #0]
 800e05e:	463a      	mov	r2, r7
 800e060:	4631      	mov	r1, r6
 800e062:	f7ff ffd7 	bl	800e014 <UG_PutChar>
      xp += cw + gui->char_h_space;
 800e066:	4b17      	ldr	r3, [pc, #92]	; (800e0c4 <UG_PutString+0x90>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 800e06e:	444b      	add	r3, r9
 800e070:	fa16 f683 	uxtah	r6, r6, r3
 800e074:	b236      	sxth	r6, r6
   while ( *str != 0 )
 800e076:	7828      	ldrb	r0, [r5, #0]
 800e078:	b308      	cbz	r0, 800e0be <UG_PutString+0x8a>
      chr = *str++;
 800e07a:	3501      	adds	r5, #1
	  if (chr < gui->font.start_char || chr > gui->font.end_char) continue;
 800e07c:	b282      	uxth	r2, r0
 800e07e:	4b11      	ldr	r3, [pc, #68]	; (800e0c4 <UG_PutString+0x90>)
 800e080:	681c      	ldr	r4, [r3, #0]
 800e082:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800e084:	429a      	cmp	r2, r3
 800e086:	d3f6      	bcc.n	800e076 <UG_PutString+0x42>
 800e088:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 800e08a:	428a      	cmp	r2, r1
 800e08c:	d8f3      	bhi.n	800e076 <UG_PutString+0x42>
      if ( chr == '\n' )
 800e08e:	280a      	cmp	r0, #10
 800e090:	d0d8      	beq.n	800e044 <UG_PutString+0x10>
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 800e092:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e094:	2a00      	cmp	r2, #0
 800e096:	d0d8      	beq.n	800e04a <UG_PutString+0x16>
 800e098:	1ac3      	subs	r3, r0, r3
 800e09a:	f812 9003 	ldrb.w	r9, [r2, r3]
      if ( xp + cw > gui->x_dim - 1 )
 800e09e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800e0a2:	eb06 0309 	add.w	r3, r6, r9
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	dcd4      	bgt.n	800e054 <UG_PutString+0x20>
         yp += gui->font.char_height+gui->char_v_space;
 800e0aa:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800e0ac:	f994 1041 	ldrsb.w	r1, [r4, #65]	; 0x41
 800e0b0:	fa13 f181 	uxtah	r1, r3, r1
 800e0b4:	fa17 f781 	uxtah	r7, r7, r1
 800e0b8:	b23f      	sxth	r7, r7
         xp = x;
 800e0ba:	4646      	mov	r6, r8
 800e0bc:	e7ca      	b.n	800e054 <UG_PutString+0x20>
}
 800e0be:	b003      	add	sp, #12
 800e0c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0c4:	20011048 	.word	0x20011048

0800e0c8 <UG_DriverRegister>:
/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
 800e0c8:	2802      	cmp	r0, #2
 800e0ca:	d807      	bhi.n	800e0dc <UG_DriverRegister+0x14>

   gui->driver[type].driver = driver;
 800e0cc:	4b04      	ldr	r3, [pc, #16]	; (800e0e0 <UG_DriverRegister+0x18>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	3009      	adds	r0, #9
 800e0d2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800e0d6:	6041      	str	r1, [r0, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 800e0d8:	2303      	movs	r3, #3
 800e0da:	7203      	strb	r3, [r0, #8]
}
 800e0dc:	4770      	bx	lr
 800e0de:	bf00      	nop
 800e0e0:	20011048 	.word	0x20011048

0800e0e4 <UG_DriverEnable>:

void UG_DriverEnable( UG_U8 type )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
 800e0e4:	2802      	cmp	r0, #2
 800e0e6:	d80f      	bhi.n	800e108 <UG_DriverEnable+0x24>
   if ( gui->driver[type].state & DRIVER_REGISTERED )
 800e0e8:	4b08      	ldr	r3, [pc, #32]	; (800e10c <UG_DriverEnable+0x28>)
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	f100 0309 	add.w	r3, r0, #9
 800e0f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e0f4:	7a1b      	ldrb	r3, [r3, #8]
 800e0f6:	f013 0f01 	tst.w	r3, #1
 800e0fa:	d005      	beq.n	800e108 <UG_DriverEnable+0x24>
   {
      gui->driver[type].state |= DRIVER_ENABLED;
 800e0fc:	3009      	adds	r0, #9
 800e0fe:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800e102:	f043 0302 	orr.w	r3, r3, #2
 800e106:	7203      	strb	r3, [r0, #8]
   }
}
 800e108:	4770      	bx	lr
 800e10a:	bf00      	nop
 800e10c:	20011048 	.word	0x20011048

0800e110 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e110:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e112:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800e116:	b184      	cbz	r4, 800e13a <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e118:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800e11c:	b17b      	cbz	r3, 800e13e <USBD_CDC_EP0_RxReady+0x2e>
 800e11e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800e122:	28ff      	cmp	r0, #255	; 0xff
 800e124:	d00d      	beq.n	800e142 <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e126:	689b      	ldr	r3, [r3, #8]
 800e128:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800e12c:	4621      	mov	r1, r4
 800e12e:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800e130:	23ff      	movs	r3, #255	; 0xff
 800e132:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e136:	2000      	movs	r0, #0
}
 800e138:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800e13a:	2003      	movs	r0, #3
 800e13c:	e7fc      	b.n	800e138 <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 800e13e:	2000      	movs	r0, #0
 800e140:	e7fa      	b.n	800e138 <USBD_CDC_EP0_RxReady+0x28>
 800e142:	2000      	movs	r0, #0
 800e144:	e7f8      	b.n	800e138 <USBD_CDC_EP0_RxReady+0x28>
	...

0800e148 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e148:	2343      	movs	r3, #67	; 0x43
 800e14a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800e14c:	4800      	ldr	r0, [pc, #0]	; (800e150 <USBD_CDC_GetFSCfgDesc+0x8>)
 800e14e:	4770      	bx	lr
 800e150:	200005c0 	.word	0x200005c0

0800e154 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e154:	2343      	movs	r3, #67	; 0x43
 800e156:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800e158:	4800      	ldr	r0, [pc, #0]	; (800e15c <USBD_CDC_GetHSCfgDesc+0x8>)
 800e15a:	4770      	bx	lr
 800e15c:	20000604 	.word	0x20000604

0800e160 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e160:	2343      	movs	r3, #67	; 0x43
 800e162:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800e164:	4800      	ldr	r0, [pc, #0]	; (800e168 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800e166:	4770      	bx	lr
 800e168:	20000654 	.word	0x20000654

0800e16c <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e16c:	230a      	movs	r3, #10
 800e16e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800e170:	4800      	ldr	r0, [pc, #0]	; (800e174 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800e172:	4770      	bx	lr
 800e174:	20000648 	.word	0x20000648

0800e178 <USBD_CDC_DataOut>:
{
 800e178:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e17a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800e17e:	b175      	cbz	r5, 800e19e <USBD_CDC_DataOut+0x26>
 800e180:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e182:	f001 f8a3 	bl	800f2cc <USBD_LL_GetRxDataSize>
 800e186:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e18a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800e194:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800e198:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800e19a:	2000      	movs	r0, #0
}
 800e19c:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800e19e:	2003      	movs	r0, #3
 800e1a0:	e7fc      	b.n	800e19c <USBD_CDC_DataOut+0x24>

0800e1a2 <USBD_CDC_DataIn>:
{
 800e1a2:	b510      	push	{r4, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e1a4:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 800e1a8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800e1ac:	b353      	cbz	r3, 800e204 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e1ae:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800e1b2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e1b6:	6992      	ldr	r2, [r2, #24]
 800e1b8:	b14a      	cbz	r2, 800e1ce <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e1ba:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800e1be:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 800e1c2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800e1c4:	fbb2 fcf4 	udiv	ip, r2, r4
 800e1c8:	fb04 221c 	mls	r2, r4, ip, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e1cc:	b172      	cbz	r2, 800e1ec <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e1d4:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800e1d8:	6914      	ldr	r4, [r2, #16]
 800e1da:	b1ac      	cbz	r4, 800e208 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e1dc:	460a      	mov	r2, r1
 800e1de:	f503 7104 	add.w	r1, r3, #528	; 0x210
 800e1e2:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800e1e6:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 800e1e8:	2000      	movs	r0, #0
}
 800e1ea:	bd10      	pop	{r4, pc}
    pdev->ep_in[epnum].total_length = 0U;
 800e1ec:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800e1f0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e1f4:	2400      	movs	r4, #0
 800e1f6:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e1f8:	4623      	mov	r3, r4
 800e1fa:	4622      	mov	r2, r4
 800e1fc:	f001 f856 	bl	800f2ac <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800e200:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e202:	e7f2      	b.n	800e1ea <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 800e204:	2003      	movs	r0, #3
 800e206:	e7f0      	b.n	800e1ea <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 800e208:	2000      	movs	r0, #0
 800e20a:	e7ee      	b.n	800e1ea <USBD_CDC_DataIn+0x48>

0800e20c <USBD_CDC_Setup>:
{
 800e20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e20e:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e210:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800e214:	2300      	movs	r3, #0
 800e216:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800e21a:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 800e21e:	2e00      	cmp	r6, #0
 800e220:	d06c      	beq.n	800e2fc <USBD_CDC_Setup+0xf0>
 800e222:	4607      	mov	r7, r0
 800e224:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e226:	780b      	ldrb	r3, [r1, #0]
 800e228:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800e22c:	d02a      	beq.n	800e284 <USBD_CDC_Setup+0x78>
 800e22e:	2d20      	cmp	r5, #32
 800e230:	d15e      	bne.n	800e2f0 <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 800e232:	88ca      	ldrh	r2, [r1, #6]
 800e234:	b1f2      	cbz	r2, 800e274 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 800e236:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e23a:	d00f      	beq.n	800e25c <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e23c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800e240:	689b      	ldr	r3, [r3, #8]
 800e242:	4631      	mov	r1, r6
 800e244:	7860      	ldrb	r0, [r4, #1]
 800e246:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e248:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e24a:	2a07      	cmp	r2, #7
 800e24c:	bf28      	it	cs
 800e24e:	2207      	movcs	r2, #7
 800e250:	4631      	mov	r1, r6
 800e252:	4638      	mov	r0, r7
 800e254:	f000 fdd4 	bl	800ee00 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800e258:	2500      	movs	r5, #0
 800e25a:	e04c      	b.n	800e2f6 <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 800e25c:	784b      	ldrb	r3, [r1, #1]
 800e25e:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e262:	798b      	ldrb	r3, [r1, #6]
 800e264:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e268:	88ca      	ldrh	r2, [r1, #6]
 800e26a:	4631      	mov	r1, r6
 800e26c:	f000 fddd 	bl	800ee2a <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800e270:	2500      	movs	r5, #0
 800e272:	e040      	b.n	800e2f6 <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e274:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800e278:	689b      	ldr	r3, [r3, #8]
 800e27a:	2200      	movs	r2, #0
 800e27c:	7848      	ldrb	r0, [r1, #1]
 800e27e:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 800e280:	2500      	movs	r5, #0
 800e282:	e038      	b.n	800e2f6 <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 800e284:	784e      	ldrb	r6, [r1, #1]
 800e286:	2e0b      	cmp	r6, #11
 800e288:	d82e      	bhi.n	800e2e8 <USBD_CDC_Setup+0xdc>
 800e28a:	e8df f006 	tbb	[pc, r6]
 800e28e:	3406      	.short	0x3406
 800e290:	2d2d2d2d 	.word	0x2d2d2d2d
 800e294:	2d2d2d2d 	.word	0x2d2d2d2d
 800e298:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e29a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	2b03      	cmp	r3, #3
 800e2a2:	d003      	beq.n	800e2ac <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 800e2a4:	f000 fa72 	bl	800e78c <USBD_CtlError>
            ret = USBD_FAIL;
 800e2a8:	2503      	movs	r5, #3
 800e2aa:	e024      	b.n	800e2f6 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e2ac:	2202      	movs	r2, #2
 800e2ae:	a901      	add	r1, sp, #4
 800e2b0:	f000 fda6 	bl	800ee00 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800e2b4:	4635      	mov	r5, r6
 800e2b6:	e01e      	b.n	800e2f6 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2b8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e2bc:	b2db      	uxtb	r3, r3
 800e2be:	2b03      	cmp	r3, #3
 800e2c0:	d003      	beq.n	800e2ca <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 800e2c2:	f000 fa63 	bl	800e78c <USBD_CtlError>
            ret = USBD_FAIL;
 800e2c6:	2503      	movs	r5, #3
 800e2c8:	e015      	b.n	800e2f6 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	f10d 0107 	add.w	r1, sp, #7
 800e2d0:	f000 fd96 	bl	800ee00 <USBD_CtlSendData>
 800e2d4:	e00f      	b.n	800e2f6 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e2d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	2b03      	cmp	r3, #3
 800e2de:	d00a      	beq.n	800e2f6 <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 800e2e0:	f000 fa54 	bl	800e78c <USBD_CtlError>
            ret = USBD_FAIL;
 800e2e4:	2503      	movs	r5, #3
 800e2e6:	e006      	b.n	800e2f6 <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 800e2e8:	f000 fa50 	bl	800e78c <USBD_CtlError>
          ret = USBD_FAIL;
 800e2ec:	2503      	movs	r5, #3
          break;
 800e2ee:	e002      	b.n	800e2f6 <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 800e2f0:	f000 fa4c 	bl	800e78c <USBD_CtlError>
      ret = USBD_FAIL;
 800e2f4:	2503      	movs	r5, #3
}
 800e2f6:	4628      	mov	r0, r5
 800e2f8:	b003      	add	sp, #12
 800e2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800e2fc:	2503      	movs	r5, #3
 800e2fe:	e7fa      	b.n	800e2f6 <USBD_CDC_Setup+0xea>

0800e300 <USBD_CDC_DeInit>:
{
 800e300:	b538      	push	{r3, r4, r5, lr}
 800e302:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e304:	2181      	movs	r1, #129	; 0x81
 800e306:	f000 ff9a 	bl	800f23e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e30a:	2500      	movs	r5, #0
 800e30c:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e30e:	2101      	movs	r1, #1
 800e310:	4620      	mov	r0, r4
 800e312:	f000 ff94 	bl	800f23e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e316:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e31a:	2182      	movs	r1, #130	; 0x82
 800e31c:	4620      	mov	r0, r4
 800e31e:	f000 ff8e 	bl	800f23e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e322:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e326:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 800e32a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800e32e:	b14b      	cbz	r3, 800e344 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e330:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e338:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800e33c:	f000 fff4 	bl	800f328 <USBD_static_free>
    pdev->pClassData = NULL;
 800e340:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800e344:	2000      	movs	r0, #0
 800e346:	bd38      	pop	{r3, r4, r5, pc}

0800e348 <USBD_CDC_Init>:
{
 800e348:	b570      	push	{r4, r5, r6, lr}
 800e34a:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e34c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e350:	f000 ffe6 	bl	800f320 <USBD_static_malloc>
  if (hcdc == NULL)
 800e354:	b3b8      	cbz	r0, 800e3c6 <USBD_CDC_Init+0x7e>
 800e356:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 800e358:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e35c:	7c23      	ldrb	r3, [r4, #16]
 800e35e:	bbbb      	cbnz	r3, 800e3d0 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e360:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e364:	2202      	movs	r2, #2
 800e366:	2181      	movs	r1, #129	; 0x81
 800e368:	4620      	mov	r0, r4
 800e36a:	f000 ff5d 	bl	800f228 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e36e:	2501      	movs	r5, #1
 800e370:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e372:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e376:	2202      	movs	r2, #2
 800e378:	4629      	mov	r1, r5
 800e37a:	4620      	mov	r0, r4
 800e37c:	f000 ff54 	bl	800f228 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e380:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e384:	2310      	movs	r3, #16
 800e386:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e38a:	2308      	movs	r3, #8
 800e38c:	2203      	movs	r2, #3
 800e38e:	2182      	movs	r1, #130	; 0x82
 800e390:	4620      	mov	r0, r4
 800e392:	f000 ff49 	bl	800f228 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e396:	2301      	movs	r3, #1
 800e398:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e39c:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	4798      	blx	r3
  hcdc->TxState = 0U;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800e3aa:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3ae:	7c25      	ldrb	r5, [r4, #16]
 800e3b0:	bb15      	cbnz	r5, 800e3f8 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e3b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3b6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800e3ba:	2101      	movs	r1, #1
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f000 ff7d 	bl	800f2bc <USBD_LL_PrepareReceive>
}
 800e3c2:	4628      	mov	r0, r5
 800e3c4:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e3cc:	2502      	movs	r5, #2
 800e3ce:	e7f8      	b.n	800e3c2 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e3d0:	2340      	movs	r3, #64	; 0x40
 800e3d2:	2202      	movs	r2, #2
 800e3d4:	2181      	movs	r1, #129	; 0x81
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	f000 ff26 	bl	800f228 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e3dc:	2501      	movs	r5, #1
 800e3de:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e3e0:	2340      	movs	r3, #64	; 0x40
 800e3e2:	2202      	movs	r2, #2
 800e3e4:	4629      	mov	r1, r5
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	f000 ff1e 	bl	800f228 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e3ec:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e3f0:	2310      	movs	r3, #16
 800e3f2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800e3f6:	e7c8      	b.n	800e38a <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e3f8:	2340      	movs	r3, #64	; 0x40
 800e3fa:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800e3fe:	2101      	movs	r1, #1
 800e400:	4620      	mov	r0, r4
 800e402:	f000 ff5b 	bl	800f2bc <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800e406:	2500      	movs	r5, #0
 800e408:	e7db      	b.n	800e3c2 <USBD_CDC_Init+0x7a>

0800e40a <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800e40a:	b119      	cbz	r1, 800e414 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800e40c:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e410:	2000      	movs	r0, #0
 800e412:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800e414:	2003      	movs	r0, #3
}
 800e416:	4770      	bx	lr

0800e418 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e418:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800e41c:	b12b      	cbz	r3, 800e42a <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800e41e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e422:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e426:	2000      	movs	r0, #0
 800e428:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800e42a:	2003      	movs	r0, #3
}
 800e42c:	4770      	bx	lr

0800e42e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e42e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800e432:	b11b      	cbz	r3, 800e43c <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800e434:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e438:	2000      	movs	r0, #0
 800e43a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800e43c:	2003      	movs	r0, #3
}
 800e43e:	4770      	bx	lr

0800e440 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e440:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e442:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800e446:	b192      	cbz	r2, 800e46e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e448:	7c04      	ldrb	r4, [r0, #16]
 800e44a:	b944      	cbnz	r4, 800e45e <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e44c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e450:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800e454:	2101      	movs	r1, #1
 800e456:	f000 ff31 	bl	800f2bc <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 800e45a:	4620      	mov	r0, r4
 800e45c:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e45e:	2340      	movs	r3, #64	; 0x40
 800e460:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800e464:	2101      	movs	r1, #1
 800e466:	f000 ff29 	bl	800f2bc <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800e46a:	2400      	movs	r4, #0
 800e46c:	e7f5      	b.n	800e45a <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 800e46e:	2403      	movs	r4, #3
 800e470:	e7f3      	b.n	800e45a <USBD_CDC_ReceivePacket+0x1a>

0800e472 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e472:	b198      	cbz	r0, 800e49c <USBD_Init+0x2a>
{
 800e474:	b508      	push	{r3, lr}
 800e476:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e478:	2000      	movs	r0, #0
 800e47a:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e47e:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e482:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e486:	b109      	cbz	r1, 800e48c <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800e488:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e48c:	2101      	movs	r1, #1
 800e48e:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 800e492:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e494:	4618      	mov	r0, r3
 800e496:	f000 fe7b 	bl	800f190 <USBD_LL_Init>

  return ret;
}
 800e49a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800e49c:	2003      	movs	r0, #3
}
 800e49e:	4770      	bx	lr

0800e4a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e4a0:	b510      	push	{r4, lr}
 800e4a2:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800e4aa:	b161      	cbz	r1, 800e4c6 <USBD_RegisterClass+0x26>
 800e4ac:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e4ae:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e4b2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800e4b4:	b14b      	cbz	r3, 800e4ca <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e4b6:	f10d 0006 	add.w	r0, sp, #6
 800e4ba:	4798      	blx	r3
 800e4bc:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e4c0:	2000      	movs	r0, #0
}
 800e4c2:	b002      	add	sp, #8
 800e4c4:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800e4c6:	2003      	movs	r0, #3
 800e4c8:	e7fb      	b.n	800e4c2 <USBD_RegisterClass+0x22>
  return USBD_OK;
 800e4ca:	2000      	movs	r0, #0
 800e4cc:	e7f9      	b.n	800e4c2 <USBD_RegisterClass+0x22>

0800e4ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e4ce:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e4d0:	f000 fea2 	bl	800f218 <USBD_LL_Start>
}
 800e4d4:	bd08      	pop	{r3, pc}

0800e4d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4d6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800e4d8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e4dc:	b113      	cbz	r3, 800e4e4 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4798      	blx	r3
  }

  return ret;
}
 800e4e2:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e4e4:	2003      	movs	r0, #3
 800e4e6:	e7fc      	b.n	800e4e2 <USBD_SetClassConfig+0xc>

0800e4e8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4e8:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e4ea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e4ee:	b10b      	cbz	r3, 800e4f4 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	4798      	blx	r3
  }

  return USBD_OK;
}
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	bd08      	pop	{r3, pc}

0800e4f8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e4f8:	b538      	push	{r3, r4, r5, lr}
 800e4fa:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e4fc:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800e500:	4628      	mov	r0, r5
 800e502:	f000 f92f 	bl	800e764 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e506:	2301      	movs	r3, #1
 800e508:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e50c:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800e510:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e514:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800e518:	f001 031f 	and.w	r3, r1, #31
 800e51c:	2b01      	cmp	r3, #1
 800e51e:	d00d      	beq.n	800e53c <USBD_LL_SetupStage+0x44>
 800e520:	2b02      	cmp	r3, #2
 800e522:	d010      	beq.n	800e546 <USBD_LL_SetupStage+0x4e>
 800e524:	b12b      	cbz	r3, 800e532 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e526:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800e52a:	4620      	mov	r0, r4
 800e52c:	f000 fe8f 	bl	800f24e <USBD_LL_StallEP>
      break;
 800e530:	e003      	b.n	800e53a <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e532:	4629      	mov	r1, r5
 800e534:	4620      	mov	r0, r4
 800e536:	f000 fae4 	bl	800eb02 <USBD_StdDevReq>
  }

  return ret;
}
 800e53a:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e53c:	4629      	mov	r1, r5
 800e53e:	4620      	mov	r0, r4
 800e540:	f000 fb17 	bl	800eb72 <USBD_StdItfReq>
      break;
 800e544:	e7f9      	b.n	800e53a <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e546:	4629      	mov	r1, r5
 800e548:	4620      	mov	r0, r4
 800e54a:	f000 fb46 	bl	800ebda <USBD_StdEPReq>
      break;
 800e54e:	e7f4      	b.n	800e53a <USBD_LL_SetupStage+0x42>

0800e550 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e550:	b538      	push	{r3, r4, r5, lr}
 800e552:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e554:	460d      	mov	r5, r1
 800e556:	bb41      	cbnz	r1, 800e5aa <USBD_LL_DataOutStage+0x5a>
 800e558:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e55a:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800e55e:	2a03      	cmp	r2, #3
 800e560:	d001      	beq.n	800e566 <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 800e562:	4608      	mov	r0, r1
}
 800e564:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800e566:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 800e56a:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800e56e:	4291      	cmp	r1, r2
 800e570:	d809      	bhi.n	800e586 <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e572:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e576:	b2db      	uxtb	r3, r3
 800e578:	2b03      	cmp	r3, #3
 800e57a:	d00f      	beq.n	800e59c <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 800e57c:	4620      	mov	r0, r4
 800e57e:	f000 fc6b 	bl	800ee58 <USBD_CtlSendStatus>
  return USBD_OK;
 800e582:	4628      	mov	r0, r5
 800e584:	e7ee      	b.n	800e564 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800e586:	1a89      	subs	r1, r1, r2
 800e588:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e58c:	428a      	cmp	r2, r1
 800e58e:	bf28      	it	cs
 800e590:	460a      	movcs	r2, r1
 800e592:	4619      	mov	r1, r3
 800e594:	f000 fc58 	bl	800ee48 <USBD_CtlContinueRx>
  return USBD_OK;
 800e598:	4628      	mov	r0, r5
 800e59a:	e7e3      	b.n	800e564 <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 800e59c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e5a0:	691b      	ldr	r3, [r3, #16]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d0ea      	beq.n	800e57c <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 800e5a6:	4798      	blx	r3
 800e5a8:	e7e8      	b.n	800e57c <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5aa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	2b03      	cmp	r3, #3
 800e5b2:	d001      	beq.n	800e5b8 <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 800e5b4:	2000      	movs	r0, #0
 800e5b6:	e7d5      	b.n	800e564 <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 800e5b8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e5bc:	699b      	ldr	r3, [r3, #24]
 800e5be:	b10b      	cbz	r3, 800e5c4 <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e5c0:	4798      	blx	r3
        if (ret != USBD_OK)
 800e5c2:	e7cf      	b.n	800e564 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 800e5c4:	2000      	movs	r0, #0
 800e5c6:	e7cd      	b.n	800e564 <USBD_LL_DataOutStage+0x14>

0800e5c8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e5c8:	b538      	push	{r3, r4, r5, lr}
 800e5ca:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e5cc:	460d      	mov	r5, r1
 800e5ce:	2900      	cmp	r1, #0
 800e5d0:	d14a      	bne.n	800e668 <USBD_LL_DataInStage+0xa0>
 800e5d2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e5d4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800e5d8:	2a02      	cmp	r2, #2
 800e5da:	d005      	beq.n	800e5e8 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e5dc:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d03c      	beq.n	800e65e <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 800e5e4:	4628      	mov	r0, r5
}
 800e5e6:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800e5e8:	69c2      	ldr	r2, [r0, #28]
 800e5ea:	6a01      	ldr	r1, [r0, #32]
 800e5ec:	428a      	cmp	r2, r1
 800e5ee:	d80e      	bhi.n	800e60e <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 800e5f0:	428a      	cmp	r2, r1
 800e5f2:	d018      	beq.n	800e626 <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5f4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800e5f8:	b2db      	uxtb	r3, r3
 800e5fa:	2b03      	cmp	r3, #3
 800e5fc:	d027      	beq.n	800e64e <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5fe:	2180      	movs	r1, #128	; 0x80
 800e600:	4620      	mov	r0, r4
 800e602:	f000 fe24 	bl	800f24e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e606:	4620      	mov	r0, r4
 800e608:	f000 fc31 	bl	800ee6e <USBD_CtlReceiveStatus>
 800e60c:	e7e6      	b.n	800e5dc <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800e60e:	1a52      	subs	r2, r2, r1
 800e610:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e612:	4619      	mov	r1, r3
 800e614:	f000 fc01 	bl	800ee1a <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e618:	2300      	movs	r3, #0
 800e61a:	461a      	mov	r2, r3
 800e61c:	4619      	mov	r1, r3
 800e61e:	4620      	mov	r0, r4
 800e620:	f000 fe4c 	bl	800f2bc <USBD_LL_PrepareReceive>
 800e624:	e7da      	b.n	800e5dc <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800e626:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800e628:	4299      	cmp	r1, r3
 800e62a:	d8e3      	bhi.n	800e5f4 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 800e62c:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e630:	4293      	cmp	r3, r2
 800e632:	d2df      	bcs.n	800e5f4 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e634:	2200      	movs	r2, #0
 800e636:	4611      	mov	r1, r2
 800e638:	f000 fbef 	bl	800ee1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e63c:	2100      	movs	r1, #0
 800e63e:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e642:	460b      	mov	r3, r1
 800e644:	460a      	mov	r2, r1
 800e646:	4620      	mov	r0, r4
 800e648:	f000 fe38 	bl	800f2bc <USBD_LL_PrepareReceive>
 800e64c:	e7c6      	b.n	800e5dc <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 800e64e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e652:	68db      	ldr	r3, [r3, #12]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d0d2      	beq.n	800e5fe <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 800e658:	4620      	mov	r0, r4
 800e65a:	4798      	blx	r3
 800e65c:	e7cf      	b.n	800e5fe <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 800e65e:	2300      	movs	r3, #0
 800e660:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 800e664:	4628      	mov	r0, r5
 800e666:	e7be      	b.n	800e5e6 <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e668:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	2b03      	cmp	r3, #3
 800e670:	d001      	beq.n	800e676 <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 800e672:	2000      	movs	r0, #0
 800e674:	e7b7      	b.n	800e5e6 <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 800e676:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e67a:	695b      	ldr	r3, [r3, #20]
 800e67c:	b10b      	cbz	r3, 800e682 <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e67e:	4798      	blx	r3
        if (ret != USBD_OK)
 800e680:	e7b1      	b.n	800e5e6 <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 800e682:	2000      	movs	r0, #0
 800e684:	e7af      	b.n	800e5e6 <USBD_LL_DataInStage+0x1e>

0800e686 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e686:	2301      	movs	r3, #1
 800e688:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e68c:	2300      	movs	r3, #0
 800e68e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800e692:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800e694:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e698:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e69c:	b1f3      	cbz	r3, 800e6dc <USBD_LL_Reset+0x56>
{
 800e69e:	b570      	push	{r4, r5, r6, lr}
 800e6a0:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800e6a2:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800e6a6:	b11a      	cbz	r2, 800e6b0 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 800e6a8:	685b      	ldr	r3, [r3, #4]
 800e6aa:	b10b      	cbz	r3, 800e6b0 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e6ac:	2100      	movs	r1, #0
 800e6ae:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e6b0:	2340      	movs	r3, #64	; 0x40
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	f000 fdb6 	bl	800f228 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e6bc:	2601      	movs	r6, #1
 800e6be:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e6c2:	2540      	movs	r5, #64	; 0x40
 800e6c4:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e6c8:	462b      	mov	r3, r5
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	2180      	movs	r1, #128	; 0x80
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	f000 fdaa 	bl	800f228 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e6d4:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e6d6:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800e6d8:	2000      	movs	r0, #0
}
 800e6da:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800e6dc:	2003      	movs	r0, #3
}
 800e6de:	4770      	bx	lr

0800e6e0 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800e6e0:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800e6e2:	2000      	movs	r0, #0
 800e6e4:	4770      	bx	lr

0800e6e6 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800e6e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e6ea:	b2db      	uxtb	r3, r3
 800e6ec:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e6f0:	2304      	movs	r3, #4
 800e6f2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800e6f6:	2000      	movs	r0, #0
 800e6f8:	4770      	bx	lr

0800e6fa <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e6fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e6fe:	b2db      	uxtb	r3, r3
 800e700:	2b04      	cmp	r3, #4
 800e702:	d001      	beq.n	800e708 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800e704:	2000      	movs	r0, #0
 800e706:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800e708:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800e712:	e7f7      	b.n	800e704 <USBD_LL_Resume+0xa>

0800e714 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800e714:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800e718:	b162      	cbz	r2, 800e734 <USBD_LL_SOF+0x20>
{
 800e71a:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e71c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e720:	b2db      	uxtb	r3, r3
 800e722:	2b03      	cmp	r3, #3
 800e724:	d001      	beq.n	800e72a <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800e726:	2000      	movs	r0, #0
}
 800e728:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800e72a:	69d3      	ldr	r3, [r2, #28]
 800e72c:	b123      	cbz	r3, 800e738 <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 800e72e:	4798      	blx	r3
  return USBD_OK;
 800e730:	2000      	movs	r0, #0
 800e732:	e7f9      	b.n	800e728 <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 800e734:	2003      	movs	r0, #3
}
 800e736:	4770      	bx	lr
  return USBD_OK;
 800e738:	2000      	movs	r0, #0
 800e73a:	e7f5      	b.n	800e728 <USBD_LL_SOF+0x14>

0800e73c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e73c:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800e73e:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800e740:	e002      	b.n	800e748 <USBD_GetLen+0xc>
  {
    len++;
 800e742:	3001      	adds	r0, #1
 800e744:	b2c0      	uxtb	r0, r0
    pbuff++;
 800e746:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800e748:	781a      	ldrb	r2, [r3, #0]
 800e74a:	2a00      	cmp	r2, #0
 800e74c:	d1f9      	bne.n	800e742 <USBD_GetLen+0x6>
  }

  return len;
}
 800e74e:	4770      	bx	lr

0800e750 <USBD_SetFeature>:
{
 800e750:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e752:	884b      	ldrh	r3, [r1, #2]
 800e754:	2b01      	cmp	r3, #1
 800e756:	d000      	beq.n	800e75a <USBD_SetFeature+0xa>
}
 800e758:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800e75a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e75e:	f000 fb7b 	bl	800ee58 <USBD_CtlSendStatus>
}
 800e762:	e7f9      	b.n	800e758 <USBD_SetFeature+0x8>

0800e764 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800e764:	780b      	ldrb	r3, [r1, #0]
 800e766:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800e768:	784b      	ldrb	r3, [r1, #1]
 800e76a:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800e76c:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800e76e:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e770:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800e774:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800e776:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800e778:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e77a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800e77e:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800e780:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800e782:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e784:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800e788:	80c3      	strh	r3, [r0, #6]
}
 800e78a:	4770      	bx	lr

0800e78c <USBD_CtlError>:
{
 800e78c:	b510      	push	{r4, lr}
 800e78e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e790:	2180      	movs	r1, #128	; 0x80
 800e792:	f000 fd5c 	bl	800f24e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e796:	2100      	movs	r1, #0
 800e798:	4620      	mov	r0, r4
 800e79a:	f000 fd58 	bl	800f24e <USBD_LL_StallEP>
}
 800e79e:	bd10      	pop	{r4, pc}

0800e7a0 <USBD_GetDescriptor>:
{
 800e7a0:	b530      	push	{r4, r5, lr}
 800e7a2:	b083      	sub	sp, #12
 800e7a4:	4604      	mov	r4, r0
 800e7a6:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800e7ae:	884a      	ldrh	r2, [r1, #2]
 800e7b0:	0a13      	lsrs	r3, r2, #8
 800e7b2:	3b01      	subs	r3, #1
 800e7b4:	2b0e      	cmp	r3, #14
 800e7b6:	f200 80bc 	bhi.w	800e932 <USBD_GetDescriptor+0x192>
 800e7ba:	e8df f003 	tbb	[pc, r3]
 800e7be:	3015      	.short	0x3015
 800e7c0:	9ebaba44 	.word	0x9ebaba44
 800e7c4:	bababaab 	.word	0xbababaab
 800e7c8:	babababa 	.word	0xbabababa
 800e7cc:	08          	.byte	0x08
 800e7cd:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e7ce:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e7d2:	69db      	ldr	r3, [r3, #28]
 800e7d4:	b123      	cbz	r3, 800e7e0 <USBD_GetDescriptor+0x40>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e7d6:	f10d 0106 	add.w	r1, sp, #6
 800e7da:	7c00      	ldrb	r0, [r0, #16]
 800e7dc:	4798      	blx	r3
  if (err != 0U)
 800e7de:	e00a      	b.n	800e7f6 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800e7e0:	4629      	mov	r1, r5
 800e7e2:	f7ff ffd3 	bl	800e78c <USBD_CtlError>
  if (err != 0U)
 800e7e6:	e018      	b.n	800e81a <USBD_GetDescriptor+0x7a>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e7e8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f10d 0106 	add.w	r1, sp, #6
 800e7f2:	7c00      	ldrb	r0, [r0, #16]
 800e7f4:	4798      	blx	r3
  if (req->wLength != 0U)
 800e7f6:	88ea      	ldrh	r2, [r5, #6]
 800e7f8:	2a00      	cmp	r2, #0
 800e7fa:	f000 80a3 	beq.w	800e944 <USBD_GetDescriptor+0x1a4>
    if (len != 0U)
 800e7fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e802:	2b00      	cmp	r3, #0
 800e804:	f000 8099 	beq.w	800e93a <USBD_GetDescriptor+0x19a>
      len = MIN(len, req->wLength);
 800e808:	429a      	cmp	r2, r3
 800e80a:	bf28      	it	cs
 800e80c:	461a      	movcs	r2, r3
 800e80e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e812:	4601      	mov	r1, r0
 800e814:	4620      	mov	r0, r4
 800e816:	f000 faf3 	bl	800ee00 <USBD_CtlSendData>
}
 800e81a:	b003      	add	sp, #12
 800e81c:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e81e:	7c03      	ldrb	r3, [r0, #16]
 800e820:	b943      	cbnz	r3, 800e834 <USBD_GetDescriptor+0x94>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e822:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e828:	f10d 0006 	add.w	r0, sp, #6
 800e82c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e82e:	2302      	movs	r3, #2
 800e830:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800e832:	e7e0      	b.n	800e7f6 <USBD_GetDescriptor+0x56>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e834:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e83a:	f10d 0006 	add.w	r0, sp, #6
 800e83e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e840:	2302      	movs	r3, #2
 800e842:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800e844:	e7d7      	b.n	800e7f6 <USBD_GetDescriptor+0x56>
      switch ((uint8_t)(req->wValue))
 800e846:	b2d2      	uxtb	r2, r2
 800e848:	2a05      	cmp	r2, #5
 800e84a:	d852      	bhi.n	800e8f2 <USBD_GetDescriptor+0x152>
 800e84c:	e8df f002 	tbb	[pc, r2]
 800e850:	2a1d1003 	.word	0x2a1d1003
 800e854:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e856:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e85a:	685b      	ldr	r3, [r3, #4]
 800e85c:	b123      	cbz	r3, 800e868 <USBD_GetDescriptor+0xc8>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e85e:	f10d 0106 	add.w	r1, sp, #6
 800e862:	7c00      	ldrb	r0, [r0, #16]
 800e864:	4798      	blx	r3
  if (err != 0U)
 800e866:	e7c6      	b.n	800e7f6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800e868:	4629      	mov	r1, r5
 800e86a:	f7ff ff8f 	bl	800e78c <USBD_CtlError>
  if (err != 0U)
 800e86e:	e7d4      	b.n	800e81a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e870:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e874:	689b      	ldr	r3, [r3, #8]
 800e876:	b123      	cbz	r3, 800e882 <USBD_GetDescriptor+0xe2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e878:	f10d 0106 	add.w	r1, sp, #6
 800e87c:	7c00      	ldrb	r0, [r0, #16]
 800e87e:	4798      	blx	r3
  if (err != 0U)
 800e880:	e7b9      	b.n	800e7f6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800e882:	4629      	mov	r1, r5
 800e884:	f7ff ff82 	bl	800e78c <USBD_CtlError>
  if (err != 0U)
 800e888:	e7c7      	b.n	800e81a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e88a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e88e:	68db      	ldr	r3, [r3, #12]
 800e890:	b123      	cbz	r3, 800e89c <USBD_GetDescriptor+0xfc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e892:	f10d 0106 	add.w	r1, sp, #6
 800e896:	7c00      	ldrb	r0, [r0, #16]
 800e898:	4798      	blx	r3
  if (err != 0U)
 800e89a:	e7ac      	b.n	800e7f6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800e89c:	4629      	mov	r1, r5
 800e89e:	f7ff ff75 	bl	800e78c <USBD_CtlError>
  if (err != 0U)
 800e8a2:	e7ba      	b.n	800e81a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e8a4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e8a8:	691b      	ldr	r3, [r3, #16]
 800e8aa:	b123      	cbz	r3, 800e8b6 <USBD_GetDescriptor+0x116>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e8ac:	f10d 0106 	add.w	r1, sp, #6
 800e8b0:	7c00      	ldrb	r0, [r0, #16]
 800e8b2:	4798      	blx	r3
  if (err != 0U)
 800e8b4:	e79f      	b.n	800e7f6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800e8b6:	4629      	mov	r1, r5
 800e8b8:	f7ff ff68 	bl	800e78c <USBD_CtlError>
  if (err != 0U)
 800e8bc:	e7ad      	b.n	800e81a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e8be:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e8c2:	695b      	ldr	r3, [r3, #20]
 800e8c4:	b123      	cbz	r3, 800e8d0 <USBD_GetDescriptor+0x130>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e8c6:	f10d 0106 	add.w	r1, sp, #6
 800e8ca:	7c00      	ldrb	r0, [r0, #16]
 800e8cc:	4798      	blx	r3
  if (err != 0U)
 800e8ce:	e792      	b.n	800e7f6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800e8d0:	4629      	mov	r1, r5
 800e8d2:	f7ff ff5b 	bl	800e78c <USBD_CtlError>
  if (err != 0U)
 800e8d6:	e7a0      	b.n	800e81a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e8d8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e8dc:	699b      	ldr	r3, [r3, #24]
 800e8de:	b123      	cbz	r3, 800e8ea <USBD_GetDescriptor+0x14a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e8e0:	f10d 0106 	add.w	r1, sp, #6
 800e8e4:	7c00      	ldrb	r0, [r0, #16]
 800e8e6:	4798      	blx	r3
  if (err != 0U)
 800e8e8:	e785      	b.n	800e7f6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800e8ea:	4629      	mov	r1, r5
 800e8ec:	f7ff ff4e 	bl	800e78c <USBD_CtlError>
  if (err != 0U)
 800e8f0:	e793      	b.n	800e81a <USBD_GetDescriptor+0x7a>
          USBD_CtlError(pdev, req);
 800e8f2:	4629      	mov	r1, r5
 800e8f4:	f7ff ff4a 	bl	800e78c <USBD_CtlError>
  if (err != 0U)
 800e8f8:	e78f      	b.n	800e81a <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e8fa:	7c03      	ldrb	r3, [r0, #16]
 800e8fc:	b933      	cbnz	r3, 800e90c <USBD_GetDescriptor+0x16c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e8fe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e904:	f10d 0006 	add.w	r0, sp, #6
 800e908:	4798      	blx	r3
  if (err != 0U)
 800e90a:	e774      	b.n	800e7f6 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800e90c:	4629      	mov	r1, r5
 800e90e:	f7ff ff3d 	bl	800e78c <USBD_CtlError>
  if (err != 0U)
 800e912:	e782      	b.n	800e81a <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e914:	7c03      	ldrb	r3, [r0, #16]
 800e916:	b943      	cbnz	r3, 800e92a <USBD_GetDescriptor+0x18a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e918:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e91e:	f10d 0006 	add.w	r0, sp, #6
 800e922:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e924:	2307      	movs	r3, #7
 800e926:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800e928:	e765      	b.n	800e7f6 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800e92a:	4629      	mov	r1, r5
 800e92c:	f7ff ff2e 	bl	800e78c <USBD_CtlError>
  if (err != 0U)
 800e930:	e773      	b.n	800e81a <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 800e932:	4629      	mov	r1, r5
 800e934:	f7ff ff2a 	bl	800e78c <USBD_CtlError>
    return;
 800e938:	e76f      	b.n	800e81a <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 800e93a:	4629      	mov	r1, r5
 800e93c:	4620      	mov	r0, r4
 800e93e:	f7ff ff25 	bl	800e78c <USBD_CtlError>
 800e942:	e76a      	b.n	800e81a <USBD_GetDescriptor+0x7a>
    (void)USBD_CtlSendStatus(pdev);
 800e944:	4620      	mov	r0, r4
 800e946:	f000 fa87 	bl	800ee58 <USBD_CtlSendStatus>
 800e94a:	e766      	b.n	800e81a <USBD_GetDescriptor+0x7a>

0800e94c <USBD_SetAddress>:
{
 800e94c:	b538      	push	{r3, r4, r5, lr}
 800e94e:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e950:	888b      	ldrh	r3, [r1, #4]
 800e952:	b9fb      	cbnz	r3, 800e994 <USBD_SetAddress+0x48>
 800e954:	88cb      	ldrh	r3, [r1, #6]
 800e956:	b9eb      	cbnz	r3, 800e994 <USBD_SetAddress+0x48>
 800e958:	884b      	ldrh	r3, [r1, #2]
 800e95a:	2b7f      	cmp	r3, #127	; 0x7f
 800e95c:	d81a      	bhi.n	800e994 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e95e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e962:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e966:	b2db      	uxtb	r3, r3
 800e968:	2b03      	cmp	r3, #3
 800e96a:	d00c      	beq.n	800e986 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 800e96c:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e970:	4629      	mov	r1, r5
 800e972:	f000 fc93 	bl	800f29c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e976:	4620      	mov	r0, r4
 800e978:	f000 fa6e 	bl	800ee58 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800e97c:	b135      	cbz	r5, 800e98c <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e97e:	2302      	movs	r3, #2
 800e980:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800e984:	e009      	b.n	800e99a <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 800e986:	f7ff ff01 	bl	800e78c <USBD_CtlError>
 800e98a:	e006      	b.n	800e99a <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e98c:	2301      	movs	r3, #1
 800e98e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800e992:	e002      	b.n	800e99a <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 800e994:	4620      	mov	r0, r4
 800e996:	f7ff fef9 	bl	800e78c <USBD_CtlError>
}
 800e99a:	bd38      	pop	{r3, r4, r5, pc}

0800e99c <USBD_SetConfig>:
{
 800e99c:	b570      	push	{r4, r5, r6, lr}
 800e99e:	4604      	mov	r4, r0
 800e9a0:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800e9a2:	788d      	ldrb	r5, [r1, #2]
 800e9a4:	4b2e      	ldr	r3, [pc, #184]	; (800ea60 <USBD_SetConfig+0xc4>)
 800e9a6:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e9a8:	2d01      	cmp	r5, #1
 800e9aa:	d810      	bhi.n	800e9ce <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800e9ac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	2b02      	cmp	r3, #2
 800e9b4:	d00f      	beq.n	800e9d6 <USBD_SetConfig+0x3a>
 800e9b6:	2b03      	cmp	r3, #3
 800e9b8:	d023      	beq.n	800ea02 <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 800e9ba:	f7ff fee7 	bl	800e78c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e9be:	4b28      	ldr	r3, [pc, #160]	; (800ea60 <USBD_SetConfig+0xc4>)
 800e9c0:	7819      	ldrb	r1, [r3, #0]
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	f7ff fd90 	bl	800e4e8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e9c8:	2503      	movs	r5, #3
}
 800e9ca:	4628      	mov	r0, r5
 800e9cc:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800e9ce:	f7ff fedd 	bl	800e78c <USBD_CtlError>
    return USBD_FAIL;
 800e9d2:	2503      	movs	r5, #3
 800e9d4:	e7f9      	b.n	800e9ca <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800e9d6:	b18d      	cbz	r5, 800e9fc <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 800e9d8:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e9da:	4629      	mov	r1, r5
 800e9dc:	f7ff fd7b 	bl	800e4d6 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800e9e0:	4605      	mov	r5, r0
 800e9e2:	b120      	cbz	r0, 800e9ee <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 800e9e4:	4631      	mov	r1, r6
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	f7ff fed0 	bl	800e78c <USBD_CtlError>
 800e9ec:	e7ed      	b.n	800e9ca <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f000 fa32 	bl	800ee58 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e9f4:	2303      	movs	r3, #3
 800e9f6:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800e9fa:	e7e6      	b.n	800e9ca <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800e9fc:	f000 fa2c 	bl	800ee58 <USBD_CtlSendStatus>
 800ea00:	e7e3      	b.n	800e9ca <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800ea02:	b1cd      	cbz	r5, 800ea38 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 800ea04:	6841      	ldr	r1, [r0, #4]
 800ea06:	428d      	cmp	r5, r1
 800ea08:	d025      	beq.n	800ea56 <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ea0a:	b2c9      	uxtb	r1, r1
 800ea0c:	f7ff fd6c 	bl	800e4e8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ea10:	4b13      	ldr	r3, [pc, #76]	; (800ea60 <USBD_SetConfig+0xc4>)
 800ea12:	7819      	ldrb	r1, [r3, #0]
 800ea14:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ea16:	4620      	mov	r0, r4
 800ea18:	f7ff fd5d 	bl	800e4d6 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800ea1c:	4605      	mov	r5, r0
 800ea1e:	b1b0      	cbz	r0, 800ea4e <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 800ea20:	4631      	mov	r1, r6
 800ea22:	4620      	mov	r0, r4
 800ea24:	f7ff feb2 	bl	800e78c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ea28:	7921      	ldrb	r1, [r4, #4]
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	f7ff fd5c 	bl	800e4e8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea30:	2302      	movs	r3, #2
 800ea32:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800ea36:	e7c8      	b.n	800e9ca <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea38:	2302      	movs	r3, #2
 800ea3a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ea3e:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ea40:	4629      	mov	r1, r5
 800ea42:	f7ff fd51 	bl	800e4e8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ea46:	4620      	mov	r0, r4
 800ea48:	f000 fa06 	bl	800ee58 <USBD_CtlSendStatus>
 800ea4c:	e7bd      	b.n	800e9ca <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800ea4e:	4620      	mov	r0, r4
 800ea50:	f000 fa02 	bl	800ee58 <USBD_CtlSendStatus>
 800ea54:	e7b9      	b.n	800e9ca <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800ea56:	f000 f9ff 	bl	800ee58 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800ea5a:	2500      	movs	r5, #0
 800ea5c:	e7b5      	b.n	800e9ca <USBD_SetConfig+0x2e>
 800ea5e:	bf00      	nop
 800ea60:	2001104c 	.word	0x2001104c

0800ea64 <USBD_GetConfig>:
{
 800ea64:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800ea66:	88cb      	ldrh	r3, [r1, #6]
 800ea68:	2b01      	cmp	r3, #1
 800ea6a:	d10b      	bne.n	800ea84 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800ea6c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	2b02      	cmp	r3, #2
 800ea74:	d909      	bls.n	800ea8a <USBD_GetConfig+0x26>
 800ea76:	2b03      	cmp	r3, #3
 800ea78:	d109      	bne.n	800ea8e <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	1d01      	adds	r1, r0, #4
 800ea7e:	f000 f9bf 	bl	800ee00 <USBD_CtlSendData>
        break;
 800ea82:	e001      	b.n	800ea88 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800ea84:	f7ff fe82 	bl	800e78c <USBD_CtlError>
}
 800ea88:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800ea8a:	b25b      	sxtb	r3, r3
 800ea8c:	b913      	cbnz	r3, 800ea94 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 800ea8e:	f7ff fe7d 	bl	800e78c <USBD_CtlError>
}
 800ea92:	e7f9      	b.n	800ea88 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 800ea94:	4601      	mov	r1, r0
 800ea96:	2300      	movs	r3, #0
 800ea98:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	f000 f9af 	bl	800ee00 <USBD_CtlSendData>
        break;
 800eaa2:	e7f1      	b.n	800ea88 <USBD_GetConfig+0x24>

0800eaa4 <USBD_GetStatus>:
{
 800eaa4:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800eaa6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800eaaa:	3b01      	subs	r3, #1
 800eaac:	2b02      	cmp	r3, #2
 800eaae:	d812      	bhi.n	800ead6 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800eab0:	88cb      	ldrh	r3, [r1, #6]
 800eab2:	2b02      	cmp	r3, #2
 800eab4:	d10c      	bne.n	800ead0 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800eab6:	2301      	movs	r3, #1
 800eab8:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800eaba:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800eabe:	b10b      	cbz	r3, 800eac4 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800eac0:	2303      	movs	r3, #3
 800eac2:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800eac4:	2202      	movs	r2, #2
 800eac6:	f100 010c 	add.w	r1, r0, #12
 800eaca:	f000 f999 	bl	800ee00 <USBD_CtlSendData>
}
 800eace:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800ead0:	f7ff fe5c 	bl	800e78c <USBD_CtlError>
        break;
 800ead4:	e7fb      	b.n	800eace <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800ead6:	f7ff fe59 	bl	800e78c <USBD_CtlError>
}
 800eada:	e7f8      	b.n	800eace <USBD_GetStatus+0x2a>

0800eadc <USBD_ClrFeature>:
{
 800eadc:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800eade:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800eae2:	3b01      	subs	r3, #1
 800eae4:	2b02      	cmp	r3, #2
 800eae6:	d809      	bhi.n	800eafc <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eae8:	884b      	ldrh	r3, [r1, #2]
 800eaea:	2b01      	cmp	r3, #1
 800eaec:	d000      	beq.n	800eaf0 <USBD_ClrFeature+0x14>
}
 800eaee:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800eaf6:	f000 f9af 	bl	800ee58 <USBD_CtlSendStatus>
 800eafa:	e7f8      	b.n	800eaee <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800eafc:	f7ff fe46 	bl	800e78c <USBD_CtlError>
}
 800eb00:	e7f5      	b.n	800eaee <USBD_ClrFeature+0x12>

0800eb02 <USBD_StdDevReq>:
{
 800eb02:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb04:	780c      	ldrb	r4, [r1, #0]
 800eb06:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800eb0a:	2c20      	cmp	r4, #32
 800eb0c:	d006      	beq.n	800eb1c <USBD_StdDevReq+0x1a>
 800eb0e:	2c40      	cmp	r4, #64	; 0x40
 800eb10:	d004      	beq.n	800eb1c <USBD_StdDevReq+0x1a>
 800eb12:	b154      	cbz	r4, 800eb2a <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 800eb14:	f7ff fe3a 	bl	800e78c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800eb18:	2400      	movs	r4, #0
      break;
 800eb1a:	e004      	b.n	800eb26 <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eb1c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800eb20:	689b      	ldr	r3, [r3, #8]
 800eb22:	4798      	blx	r3
 800eb24:	4604      	mov	r4, r0
}
 800eb26:	4620      	mov	r0, r4
 800eb28:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800eb2a:	784d      	ldrb	r5, [r1, #1]
 800eb2c:	2d09      	cmp	r5, #9
 800eb2e:	d81d      	bhi.n	800eb6c <USBD_StdDevReq+0x6a>
 800eb30:	e8df f005 	tbb	[pc, r5]
 800eb34:	161c1912 	.word	0x161c1912
 800eb38:	1c05081c 	.word	0x1c05081c
 800eb3c:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800eb3e:	f7ff fe2f 	bl	800e7a0 <USBD_GetDescriptor>
          break;
 800eb42:	e7f0      	b.n	800eb26 <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 800eb44:	f7ff ff02 	bl	800e94c <USBD_SetAddress>
          break;
 800eb48:	e7ed      	b.n	800eb26 <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 800eb4a:	f7ff ff27 	bl	800e99c <USBD_SetConfig>
 800eb4e:	4604      	mov	r4, r0
          break;
 800eb50:	e7e9      	b.n	800eb26 <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 800eb52:	f7ff ff87 	bl	800ea64 <USBD_GetConfig>
          break;
 800eb56:	e7e6      	b.n	800eb26 <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 800eb58:	f7ff ffa4 	bl	800eaa4 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800eb5c:	462c      	mov	r4, r5
          break;
 800eb5e:	e7e2      	b.n	800eb26 <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 800eb60:	f7ff fdf6 	bl	800e750 <USBD_SetFeature>
          break;
 800eb64:	e7df      	b.n	800eb26 <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 800eb66:	f7ff ffb9 	bl	800eadc <USBD_ClrFeature>
          break;
 800eb6a:	e7dc      	b.n	800eb26 <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 800eb6c:	f7ff fe0e 	bl	800e78c <USBD_CtlError>
          break;
 800eb70:	e7d9      	b.n	800eb26 <USBD_StdDevReq+0x24>

0800eb72 <USBD_StdItfReq>:
{
 800eb72:	b570      	push	{r4, r5, r6, lr}
 800eb74:	4605      	mov	r5, r0
 800eb76:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb78:	780b      	ldrb	r3, [r1, #0]
 800eb7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb7e:	2b20      	cmp	r3, #32
 800eb80:	d007      	beq.n	800eb92 <USBD_StdItfReq+0x20>
 800eb82:	2b40      	cmp	r3, #64	; 0x40
 800eb84:	d005      	beq.n	800eb92 <USBD_StdItfReq+0x20>
 800eb86:	b123      	cbz	r3, 800eb92 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800eb88:	f7ff fe00 	bl	800e78c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800eb8c:	2600      	movs	r6, #0
}
 800eb8e:	4630      	mov	r0, r6
 800eb90:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800eb92:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800eb96:	3b01      	subs	r3, #1
 800eb98:	2b02      	cmp	r3, #2
 800eb9a:	d818      	bhi.n	800ebce <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eb9c:	7923      	ldrb	r3, [r4, #4]
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	d80f      	bhi.n	800ebc2 <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eba2:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800eba6:	689b      	ldr	r3, [r3, #8]
 800eba8:	4621      	mov	r1, r4
 800ebaa:	4628      	mov	r0, r5
 800ebac:	4798      	blx	r3
 800ebae:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ebb0:	88e3      	ldrh	r3, [r4, #6]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d1eb      	bne.n	800eb8e <USBD_StdItfReq+0x1c>
 800ebb6:	2800      	cmp	r0, #0
 800ebb8:	d1e9      	bne.n	800eb8e <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800ebba:	4628      	mov	r0, r5
 800ebbc:	f000 f94c 	bl	800ee58 <USBD_CtlSendStatus>
 800ebc0:	e7e5      	b.n	800eb8e <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 800ebc2:	4621      	mov	r1, r4
 800ebc4:	4628      	mov	r0, r5
 800ebc6:	f7ff fde1 	bl	800e78c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ebca:	2600      	movs	r6, #0
 800ebcc:	e7df      	b.n	800eb8e <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 800ebce:	4621      	mov	r1, r4
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	f7ff fddb 	bl	800e78c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ebd6:	2600      	movs	r6, #0
          break;
 800ebd8:	e7d9      	b.n	800eb8e <USBD_StdItfReq+0x1c>

0800ebda <USBD_StdEPReq>:
{
 800ebda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebdc:	4606      	mov	r6, r0
 800ebde:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800ebe0:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ebe2:	780c      	ldrb	r4, [r1, #0]
 800ebe4:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800ebe8:	2c20      	cmp	r4, #32
 800ebea:	d008      	beq.n	800ebfe <USBD_StdEPReq+0x24>
 800ebec:	b2d9      	uxtb	r1, r3
 800ebee:	2c40      	cmp	r4, #64	; 0x40
 800ebf0:	d005      	beq.n	800ebfe <USBD_StdEPReq+0x24>
 800ebf2:	b16c      	cbz	r4, 800ec10 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 800ebf4:	4629      	mov	r1, r5
 800ebf6:	f7ff fdc9 	bl	800e78c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ebfa:	2400      	movs	r4, #0
      break;
 800ebfc:	e006      	b.n	800ec0c <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ebfe:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	4629      	mov	r1, r5
 800ec06:	4630      	mov	r0, r6
 800ec08:	4798      	blx	r3
 800ec0a:	4604      	mov	r4, r0
}
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 800ec10:	786f      	ldrb	r7, [r5, #1]
 800ec12:	2f01      	cmp	r7, #1
 800ec14:	d02f      	beq.n	800ec76 <USBD_StdEPReq+0x9c>
 800ec16:	2f03      	cmp	r7, #3
 800ec18:	d005      	beq.n	800ec26 <USBD_StdEPReq+0x4c>
 800ec1a:	2f00      	cmp	r7, #0
 800ec1c:	d059      	beq.n	800ecd2 <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 800ec1e:	4629      	mov	r1, r5
 800ec20:	f7ff fdb4 	bl	800e78c <USBD_CtlError>
          break;
 800ec24:	e7f2      	b.n	800ec0c <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800ec26:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	2b02      	cmp	r3, #2
 800ec2e:	d005      	beq.n	800ec3c <USBD_StdEPReq+0x62>
 800ec30:	2b03      	cmp	r3, #3
 800ec32:	d012      	beq.n	800ec5a <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 800ec34:	4629      	mov	r1, r5
 800ec36:	f7ff fda9 	bl	800e78c <USBD_CtlError>
              break;
 800ec3a:	e7e7      	b.n	800ec0c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec3c:	b109      	cbz	r1, 800ec42 <USBD_StdEPReq+0x68>
 800ec3e:	2980      	cmp	r1, #128	; 0x80
 800ec40:	d104      	bne.n	800ec4c <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 800ec42:	4629      	mov	r1, r5
 800ec44:	4630      	mov	r0, r6
 800ec46:	f7ff fda1 	bl	800e78c <USBD_CtlError>
 800ec4a:	e7df      	b.n	800ec0c <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec4c:	f000 faff 	bl	800f24e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec50:	2180      	movs	r1, #128	; 0x80
 800ec52:	4630      	mov	r0, r6
 800ec54:	f000 fafb 	bl	800f24e <USBD_LL_StallEP>
 800ec58:	e7d8      	b.n	800ec0c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ec5a:	886b      	ldrh	r3, [r5, #2]
 800ec5c:	b923      	cbnz	r3, 800ec68 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ec5e:	b119      	cbz	r1, 800ec68 <USBD_StdEPReq+0x8e>
 800ec60:	2980      	cmp	r1, #128	; 0x80
 800ec62:	d001      	beq.n	800ec68 <USBD_StdEPReq+0x8e>
 800ec64:	88eb      	ldrh	r3, [r5, #6]
 800ec66:	b11b      	cbz	r3, 800ec70 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 800ec68:	4630      	mov	r0, r6
 800ec6a:	f000 f8f5 	bl	800ee58 <USBD_CtlSendStatus>
              break;
 800ec6e:	e7cd      	b.n	800ec0c <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec70:	f000 faed 	bl	800f24e <USBD_LL_StallEP>
 800ec74:	e7f8      	b.n	800ec68 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 800ec76:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ec7a:	b2db      	uxtb	r3, r3
 800ec7c:	2b02      	cmp	r3, #2
 800ec7e:	d005      	beq.n	800ec8c <USBD_StdEPReq+0xb2>
 800ec80:	2b03      	cmp	r3, #3
 800ec82:	d012      	beq.n	800ecaa <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 800ec84:	4629      	mov	r1, r5
 800ec86:	f7ff fd81 	bl	800e78c <USBD_CtlError>
              break;
 800ec8a:	e7bf      	b.n	800ec0c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec8c:	b109      	cbz	r1, 800ec92 <USBD_StdEPReq+0xb8>
 800ec8e:	2980      	cmp	r1, #128	; 0x80
 800ec90:	d104      	bne.n	800ec9c <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 800ec92:	4629      	mov	r1, r5
 800ec94:	4630      	mov	r0, r6
 800ec96:	f7ff fd79 	bl	800e78c <USBD_CtlError>
 800ec9a:	e7b7      	b.n	800ec0c <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec9c:	f000 fad7 	bl	800f24e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800eca0:	2180      	movs	r1, #128	; 0x80
 800eca2:	4630      	mov	r0, r6
 800eca4:	f000 fad3 	bl	800f24e <USBD_LL_StallEP>
 800eca8:	e7b0      	b.n	800ec0c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ecaa:	886b      	ldrh	r3, [r5, #2]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d1ad      	bne.n	800ec0c <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 800ecb0:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800ecb4:	d10a      	bne.n	800eccc <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 800ecb6:	4630      	mov	r0, r6
 800ecb8:	f000 f8ce 	bl	800ee58 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ecbc:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800ecc0:	689b      	ldr	r3, [r3, #8]
 800ecc2:	4629      	mov	r1, r5
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	4798      	blx	r3
 800ecc8:	4604      	mov	r4, r0
 800ecca:	e79f      	b.n	800ec0c <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800eccc:	f000 fac7 	bl	800f25e <USBD_LL_ClearStallEP>
 800ecd0:	e7f1      	b.n	800ecb6 <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 800ecd2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800ecd6:	b2d2      	uxtb	r2, r2
 800ecd8:	2a02      	cmp	r2, #2
 800ecda:	d006      	beq.n	800ecea <USBD_StdEPReq+0x110>
 800ecdc:	2a03      	cmp	r2, #3
 800ecde:	d029      	beq.n	800ed34 <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 800ece0:	4629      	mov	r1, r5
 800ece2:	f7ff fd53 	bl	800e78c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ece6:	463c      	mov	r4, r7
              break;
 800ece8:	e790      	b.n	800ec0c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ecea:	b109      	cbz	r1, 800ecf0 <USBD_StdEPReq+0x116>
 800ecec:	2980      	cmp	r1, #128	; 0x80
 800ecee:	d113      	bne.n	800ed18 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ecf0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ecf4:	d115      	bne.n	800ed22 <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ecf6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ecfa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ecfe:	0089      	lsls	r1, r1, #2
 800ed00:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800ed04:	4431      	add	r1, r6
 800ed06:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ed0c:	2202      	movs	r2, #2
 800ed0e:	4630      	mov	r0, r6
 800ed10:	f000 f876 	bl	800ee00 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800ed14:	463c      	mov	r4, r7
              break;
 800ed16:	e779      	b.n	800ec0c <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 800ed18:	4629      	mov	r1, r5
 800ed1a:	f7ff fd37 	bl	800e78c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ed1e:	463c      	mov	r4, r7
                break;
 800ed20:	e774      	b.n	800ec0c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed22:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800ed26:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ed2a:	0089      	lsls	r1, r1, #2
 800ed2c:	3110      	adds	r1, #16
 800ed2e:	4431      	add	r1, r6
 800ed30:	3104      	adds	r1, #4
 800ed32:	e7e9      	b.n	800ed08 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 800ed34:	b25b      	sxtb	r3, r3
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	db1f      	blt.n	800ed7a <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ed3a:	f001 020f 	and.w	r2, r1, #15
 800ed3e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800ed42:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ed46:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800ed4a:	b322      	cbz	r2, 800ed96 <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	db27      	blt.n	800eda0 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ed50:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ed58:	009c      	lsls	r4, r3, #2
 800ed5a:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 800ed5e:	4434      	add	r4, r6
 800ed60:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ed62:	b109      	cbz	r1, 800ed68 <USBD_StdEPReq+0x18e>
 800ed64:	2980      	cmp	r1, #128	; 0x80
 800ed66:	d124      	bne.n	800edb2 <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ed6c:	2202      	movs	r2, #2
 800ed6e:	4621      	mov	r1, r4
 800ed70:	4630      	mov	r0, r6
 800ed72:	f000 f845 	bl	800ee00 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800ed76:	463c      	mov	r4, r7
              break;
 800ed78:	e748      	b.n	800ec0c <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ed7a:	f001 020f 	and.w	r2, r1, #15
 800ed7e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800ed82:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ed86:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800ed88:	2a00      	cmp	r2, #0
 800ed8a:	d1df      	bne.n	800ed4c <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 800ed8c:	4629      	mov	r1, r5
 800ed8e:	f7ff fcfd 	bl	800e78c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ed92:	463c      	mov	r4, r7
                  break;
 800ed94:	e73a      	b.n	800ec0c <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 800ed96:	4629      	mov	r1, r5
 800ed98:	f7ff fcf8 	bl	800e78c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ed9c:	463c      	mov	r4, r7
                  break;
 800ed9e:	e735      	b.n	800ec0c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eda0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800eda4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800eda8:	009c      	lsls	r4, r3, #2
 800edaa:	3410      	adds	r4, #16
 800edac:	4434      	add	r4, r6
 800edae:	3404      	adds	r4, #4
 800edb0:	e7d7      	b.n	800ed62 <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800edb2:	4630      	mov	r0, r6
 800edb4:	f000 fa5b 	bl	800f26e <USBD_LL_IsStallEP>
 800edb8:	b110      	cbz	r0, 800edc0 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 800edba:	2301      	movs	r3, #1
 800edbc:	6023      	str	r3, [r4, #0]
 800edbe:	e7d5      	b.n	800ed6c <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 800edc0:	2300      	movs	r3, #0
 800edc2:	6023      	str	r3, [r4, #0]
 800edc4:	e7d2      	b.n	800ed6c <USBD_StdEPReq+0x192>

0800edc6 <USBD_GetString>:
  if (desc == NULL)
 800edc6:	b1d0      	cbz	r0, 800edfe <USBD_GetString+0x38>
{
 800edc8:	b570      	push	{r4, r5, r6, lr}
 800edca:	460d      	mov	r5, r1
 800edcc:	4616      	mov	r6, r2
 800edce:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800edd0:	f7ff fcb4 	bl	800e73c <USBD_GetLen>
 800edd4:	1c43      	adds	r3, r0, #1
 800edd6:	005b      	lsls	r3, r3, #1
 800edd8:	b29b      	uxth	r3, r3
 800edda:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800eddc:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800edde:	2303      	movs	r3, #3
 800ede0:	706b      	strb	r3, [r5, #1]
  idx++;
 800ede2:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800ede4:	e007      	b.n	800edf6 <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 800ede6:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800ede8:	3401      	adds	r4, #1
    idx++;
 800edea:	1c5a      	adds	r2, r3, #1
 800edec:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800edee:	2100      	movs	r1, #0
 800edf0:	54a9      	strb	r1, [r5, r2]
    idx++;
 800edf2:	3302      	adds	r3, #2
 800edf4:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800edf6:	7822      	ldrb	r2, [r4, #0]
 800edf8:	2a00      	cmp	r2, #0
 800edfa:	d1f4      	bne.n	800ede6 <USBD_GetString+0x20>
}
 800edfc:	bd70      	pop	{r4, r5, r6, pc}
 800edfe:	4770      	bx	lr

0800ee00 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ee00:	b508      	push	{r3, lr}
 800ee02:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ee04:	2202      	movs	r2, #2
 800ee06:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ee0a:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ee0c:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ee0e:	460a      	mov	r2, r1
 800ee10:	2100      	movs	r1, #0
 800ee12:	f000 fa4b 	bl	800f2ac <USBD_LL_Transmit>

  return USBD_OK;
}
 800ee16:	2000      	movs	r0, #0
 800ee18:	bd08      	pop	{r3, pc}

0800ee1a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ee1a:	b508      	push	{r3, lr}
 800ee1c:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ee1e:	460a      	mov	r2, r1
 800ee20:	2100      	movs	r1, #0
 800ee22:	f000 fa43 	bl	800f2ac <USBD_LL_Transmit>

  return USBD_OK;
}
 800ee26:	2000      	movs	r0, #0
 800ee28:	bd08      	pop	{r3, pc}

0800ee2a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ee2a:	b508      	push	{r3, lr}
 800ee2c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ee2e:	2203      	movs	r2, #3
 800ee30:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ee34:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ee38:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ee3c:	460a      	mov	r2, r1
 800ee3e:	2100      	movs	r1, #0
 800ee40:	f000 fa3c 	bl	800f2bc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ee44:	2000      	movs	r0, #0
 800ee46:	bd08      	pop	{r3, pc}

0800ee48 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ee48:	b508      	push	{r3, lr}
 800ee4a:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ee4c:	460a      	mov	r2, r1
 800ee4e:	2100      	movs	r1, #0
 800ee50:	f000 fa34 	bl	800f2bc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ee54:	2000      	movs	r0, #0
 800ee56:	bd08      	pop	{r3, pc}

0800ee58 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ee58:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ee5a:	2204      	movs	r2, #4
 800ee5c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ee60:	2300      	movs	r3, #0
 800ee62:	461a      	mov	r2, r3
 800ee64:	4619      	mov	r1, r3
 800ee66:	f000 fa21 	bl	800f2ac <USBD_LL_Transmit>

  return USBD_OK;
}
 800ee6a:	2000      	movs	r0, #0
 800ee6c:	bd08      	pop	{r3, pc}

0800ee6e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ee6e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ee70:	2205      	movs	r2, #5
 800ee72:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee76:	2300      	movs	r3, #0
 800ee78:	461a      	mov	r2, r3
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	f000 fa1e 	bl	800f2bc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ee80:	2000      	movs	r0, #0
 800ee82:	bd08      	pop	{r3, pc}

0800ee84 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ee84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ee86:	2200      	movs	r2, #0
 800ee88:	490f      	ldr	r1, [pc, #60]	; (800eec8 <MX_USB_Device_Init+0x44>)
 800ee8a:	4810      	ldr	r0, [pc, #64]	; (800eecc <MX_USB_Device_Init+0x48>)
 800ee8c:	f7ff faf1 	bl	800e472 <USBD_Init>
 800ee90:	b970      	cbnz	r0, 800eeb0 <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800ee92:	490f      	ldr	r1, [pc, #60]	; (800eed0 <MX_USB_Device_Init+0x4c>)
 800ee94:	480d      	ldr	r0, [pc, #52]	; (800eecc <MX_USB_Device_Init+0x48>)
 800ee96:	f7ff fb03 	bl	800e4a0 <USBD_RegisterClass>
 800ee9a:	b960      	cbnz	r0, 800eeb6 <MX_USB_Device_Init+0x32>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800ee9c:	490d      	ldr	r1, [pc, #52]	; (800eed4 <MX_USB_Device_Init+0x50>)
 800ee9e:	480b      	ldr	r0, [pc, #44]	; (800eecc <MX_USB_Device_Init+0x48>)
 800eea0:	f7ff fab3 	bl	800e40a <USBD_CDC_RegisterInterface>
 800eea4:	b950      	cbnz	r0, 800eebc <MX_USB_Device_Init+0x38>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800eea6:	4809      	ldr	r0, [pc, #36]	; (800eecc <MX_USB_Device_Init+0x48>)
 800eea8:	f7ff fb11 	bl	800e4ce <USBD_Start>
 800eeac:	b948      	cbnz	r0, 800eec2 <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800eeae:	bd08      	pop	{r3, pc}
    Error_Handler();
 800eeb0:	f7f3 f878 	bl	8001fa4 <Error_Handler>
 800eeb4:	e7ed      	b.n	800ee92 <MX_USB_Device_Init+0xe>
    Error_Handler();
 800eeb6:	f7f3 f875 	bl	8001fa4 <Error_Handler>
 800eeba:	e7ef      	b.n	800ee9c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800eebc:	f7f3 f872 	bl	8001fa4 <Error_Handler>
 800eec0:	e7f1      	b.n	800eea6 <MX_USB_Device_Init+0x22>
    Error_Handler();
 800eec2:	f7f3 f86f 	bl	8001fa4 <Error_Handler>
}
 800eec6:	e7f2      	b.n	800eeae <MX_USB_Device_Init+0x2a>
 800eec8:	200006ac 	.word	0x200006ac
 800eecc:	20011050 	.word	0x20011050
 800eed0:	20000588 	.word	0x20000588
 800eed4:	20000698 	.word	0x20000698

0800eed8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800eed8:	2000      	movs	r0, #0
 800eeda:	4770      	bx	lr

0800eedc <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800eedc:	2000      	movs	r0, #0
 800eede:	4770      	bx	lr

0800eee0 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800eee0:	2000      	movs	r0, #0
 800eee2:	4770      	bx	lr

0800eee4 <CDC_Receive_FS>:
{
 800eee4:	b510      	push	{r4, lr}
 800eee6:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800eee8:	4c04      	ldr	r4, [pc, #16]	; (800eefc <CDC_Receive_FS+0x18>)
 800eeea:	4620      	mov	r0, r4
 800eeec:	f7ff fa9f 	bl	800e42e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800eef0:	4620      	mov	r0, r4
 800eef2:	f7ff faa5 	bl	800e440 <USBD_CDC_ReceivePacket>
}
 800eef6:	2000      	movs	r0, #0
 800eef8:	bd10      	pop	{r4, pc}
 800eefa:	bf00      	nop
 800eefc:	20011050 	.word	0x20011050

0800ef00 <CDC_Init_FS>:
{
 800ef00:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ef02:	4c06      	ldr	r4, [pc, #24]	; (800ef1c <CDC_Init_FS+0x1c>)
 800ef04:	2200      	movs	r2, #0
 800ef06:	4906      	ldr	r1, [pc, #24]	; (800ef20 <CDC_Init_FS+0x20>)
 800ef08:	4620      	mov	r0, r4
 800ef0a:	f7ff fa85 	bl	800e418 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ef0e:	4905      	ldr	r1, [pc, #20]	; (800ef24 <CDC_Init_FS+0x24>)
 800ef10:	4620      	mov	r0, r4
 800ef12:	f7ff fa8c 	bl	800e42e <USBD_CDC_SetRxBuffer>
}
 800ef16:	2000      	movs	r0, #0
 800ef18:	bd10      	pop	{r4, pc}
 800ef1a:	bf00      	nop
 800ef1c:	20011050 	.word	0x20011050
 800ef20:	20011b20 	.word	0x20011b20
 800ef24:	20011320 	.word	0x20011320

0800ef28 <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ef28:	2312      	movs	r3, #18
 800ef2a:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 800ef2c:	4800      	ldr	r0, [pc, #0]	; (800ef30 <USBD_CDC_DeviceDescriptor+0x8>)
 800ef2e:	4770      	bx	lr
 800ef30:	200006cc 	.word	0x200006cc

0800ef34 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ef34:	2304      	movs	r3, #4
 800ef36:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800ef38:	4800      	ldr	r0, [pc, #0]	; (800ef3c <USBD_CDC_LangIDStrDescriptor+0x8>)
 800ef3a:	4770      	bx	lr
 800ef3c:	200006e0 	.word	0x200006e0

0800ef40 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800ef40:	2300      	movs	r3, #0
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d21e      	bcs.n	800ef84 <IntToUnicode+0x44>
{
 800ef46:	b500      	push	{lr}
 800ef48:	e010      	b.n	800ef6c <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ef4a:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 800ef4e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 800ef52:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800ef54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800ef58:	f10c 0c01 	add.w	ip, ip, #1
 800ef5c:	f04f 0e00 	mov.w	lr, #0
 800ef60:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 800ef64:	3301      	adds	r3, #1
 800ef66:	b2db      	uxtb	r3, r3
 800ef68:	4293      	cmp	r3, r2
 800ef6a:	d209      	bcs.n	800ef80 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 800ef6c:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 800ef70:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 800ef74:	d2e9      	bcs.n	800ef4a <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800ef76:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800ef7a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800ef7e:	e7e8      	b.n	800ef52 <IntToUnicode+0x12>
  }
}
 800ef80:	f85d fb04 	ldr.w	pc, [sp], #4
 800ef84:	4770      	bx	lr
	...

0800ef88 <Get_SerialNum>:
{
 800ef88:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ef8a:	4b0b      	ldr	r3, [pc, #44]	; (800efb8 <Get_SerialNum+0x30>)
 800ef8c:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ef90:	f8d3 4594 	ldr.w	r4, [r3, #1428]	; 0x594
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ef94:	f8d3 3598 	ldr.w	r3, [r3, #1432]	; 0x598
  if (deviceserial0 != 0)
 800ef98:	18c0      	adds	r0, r0, r3
 800ef9a:	d100      	bne.n	800ef9e <Get_SerialNum+0x16>
}
 800ef9c:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ef9e:	4d07      	ldr	r5, [pc, #28]	; (800efbc <Get_SerialNum+0x34>)
 800efa0:	2208      	movs	r2, #8
 800efa2:	1ca9      	adds	r1, r5, #2
 800efa4:	f7ff ffcc 	bl	800ef40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800efa8:	2204      	movs	r2, #4
 800efaa:	f105 0112 	add.w	r1, r5, #18
 800efae:	4620      	mov	r0, r4
 800efb0:	f7ff ffc6 	bl	800ef40 <IntToUnicode>
}
 800efb4:	e7f2      	b.n	800ef9c <Get_SerialNum+0x14>
 800efb6:	bf00      	nop
 800efb8:	1fff7000 	.word	0x1fff7000
 800efbc:	200006e4 	.word	0x200006e4

0800efc0 <USBD_CDC_SerialStrDescriptor>:
{
 800efc0:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800efc2:	231a      	movs	r3, #26
 800efc4:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800efc6:	f7ff ffdf 	bl	800ef88 <Get_SerialNum>
}
 800efca:	4801      	ldr	r0, [pc, #4]	; (800efd0 <USBD_CDC_SerialStrDescriptor+0x10>)
 800efcc:	bd08      	pop	{r3, pc}
 800efce:	bf00      	nop
 800efd0:	200006e4 	.word	0x200006e4

0800efd4 <USBD_CDC_ProductStrDescriptor>:
{
 800efd4:	b508      	push	{r3, lr}
 800efd6:	460a      	mov	r2, r1
  if(speed == 0)
 800efd8:	b928      	cbnz	r0, 800efe6 <USBD_CDC_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800efda:	4905      	ldr	r1, [pc, #20]	; (800eff0 <USBD_CDC_ProductStrDescriptor+0x1c>)
 800efdc:	4805      	ldr	r0, [pc, #20]	; (800eff4 <USBD_CDC_ProductStrDescriptor+0x20>)
 800efde:	f7ff fef2 	bl	800edc6 <USBD_GetString>
}
 800efe2:	4803      	ldr	r0, [pc, #12]	; (800eff0 <USBD_CDC_ProductStrDescriptor+0x1c>)
 800efe4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800efe6:	4902      	ldr	r1, [pc, #8]	; (800eff0 <USBD_CDC_ProductStrDescriptor+0x1c>)
 800efe8:	4802      	ldr	r0, [pc, #8]	; (800eff4 <USBD_CDC_ProductStrDescriptor+0x20>)
 800efea:	f7ff feec 	bl	800edc6 <USBD_GetString>
 800efee:	e7f8      	b.n	800efe2 <USBD_CDC_ProductStrDescriptor+0xe>
 800eff0:	20012320 	.word	0x20012320
 800eff4:	08015e14 	.word	0x08015e14

0800eff8 <USBD_CDC_ManufacturerStrDescriptor>:
{
 800eff8:	b510      	push	{r4, lr}
 800effa:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800effc:	4c03      	ldr	r4, [pc, #12]	; (800f00c <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 800effe:	4621      	mov	r1, r4
 800f000:	4803      	ldr	r0, [pc, #12]	; (800f010 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 800f002:	f7ff fee0 	bl	800edc6 <USBD_GetString>
}
 800f006:	4620      	mov	r0, r4
 800f008:	bd10      	pop	{r4, pc}
 800f00a:	bf00      	nop
 800f00c:	20012320 	.word	0x20012320
 800f010:	08015e2c 	.word	0x08015e2c

0800f014 <USBD_CDC_ConfigStrDescriptor>:
{
 800f014:	b508      	push	{r3, lr}
 800f016:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800f018:	b928      	cbnz	r0, 800f026 <USBD_CDC_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f01a:	4905      	ldr	r1, [pc, #20]	; (800f030 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800f01c:	4805      	ldr	r0, [pc, #20]	; (800f034 <USBD_CDC_ConfigStrDescriptor+0x20>)
 800f01e:	f7ff fed2 	bl	800edc6 <USBD_GetString>
}
 800f022:	4803      	ldr	r0, [pc, #12]	; (800f030 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800f024:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f026:	4902      	ldr	r1, [pc, #8]	; (800f030 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800f028:	4802      	ldr	r0, [pc, #8]	; (800f034 <USBD_CDC_ConfigStrDescriptor+0x20>)
 800f02a:	f7ff fecc 	bl	800edc6 <USBD_GetString>
 800f02e:	e7f8      	b.n	800f022 <USBD_CDC_ConfigStrDescriptor+0xe>
 800f030:	20012320 	.word	0x20012320
 800f034:	08015e40 	.word	0x08015e40

0800f038 <USBD_CDC_InterfaceStrDescriptor>:
{
 800f038:	b508      	push	{r3, lr}
 800f03a:	460a      	mov	r2, r1
  if(speed == 0)
 800f03c:	b928      	cbnz	r0, 800f04a <USBD_CDC_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f03e:	4905      	ldr	r1, [pc, #20]	; (800f054 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800f040:	4805      	ldr	r0, [pc, #20]	; (800f058 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 800f042:	f7ff fec0 	bl	800edc6 <USBD_GetString>
}
 800f046:	4803      	ldr	r0, [pc, #12]	; (800f054 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800f048:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f04a:	4902      	ldr	r1, [pc, #8]	; (800f054 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800f04c:	4802      	ldr	r0, [pc, #8]	; (800f058 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 800f04e:	f7ff feba 	bl	800edc6 <USBD_GetString>
 800f052:	e7f8      	b.n	800f046 <USBD_CDC_InterfaceStrDescriptor+0xe>
 800f054:	20012320 	.word	0x20012320
 800f058:	08015e4c 	.word	0x08015e4c

0800f05c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800f05c:	2803      	cmp	r0, #3
 800f05e:	d805      	bhi.n	800f06c <USBD_Get_USB_Status+0x10>
 800f060:	e8df f000 	tbb	[pc, r0]
 800f064:	05020405 	.word	0x05020405
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f068:	2001      	movs	r0, #1
    break;
 800f06a:	4770      	bx	lr
      usb_status = USBD_FAIL;
 800f06c:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800f06e:	4770      	bx	lr

0800f070 <SystemClockConfig_Resume>:
{
 800f070:	b508      	push	{r3, lr}
  SystemClock_Config();
 800f072:	f7f2 ff9f 	bl	8001fb4 <SystemClock_Config>
}
 800f076:	bd08      	pop	{r3, pc}

0800f078 <HAL_PCD_MspInit>:
{
 800f078:	b510      	push	{r4, lr}
 800f07a:	b096      	sub	sp, #88	; 0x58
 800f07c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f07e:	2254      	movs	r2, #84	; 0x54
 800f080:	2100      	movs	r1, #0
 800f082:	a801      	add	r0, sp, #4
 800f084:	f001 fae4 	bl	8010650 <memset>
  if(pcdHandle->Instance==USB)
 800f088:	6822      	ldr	r2, [r4, #0]
 800f08a:	4b11      	ldr	r3, [pc, #68]	; (800f0d0 <HAL_PCD_MspInit+0x58>)
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d001      	beq.n	800f094 <HAL_PCD_MspInit+0x1c>
}
 800f090:	b016      	add	sp, #88	; 0x58
 800f092:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f094:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f098:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f09a:	a801      	add	r0, sp, #4
 800f09c:	f7fb fdd6 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 800f0a0:	b990      	cbnz	r0, 800f0c8 <HAL_PCD_MspInit+0x50>
    __HAL_RCC_USB_CLK_ENABLE();
 800f0a2:	4b0c      	ldr	r3, [pc, #48]	; (800f0d4 <HAL_PCD_MspInit+0x5c>)
 800f0a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f0a6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800f0aa:	659a      	str	r2, [r3, #88]	; 0x58
 800f0ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0b2:	9300      	str	r3, [sp, #0]
 800f0b4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	4611      	mov	r1, r2
 800f0ba:	2014      	movs	r0, #20
 800f0bc:	f7f8 fe92 	bl	8007de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800f0c0:	2014      	movs	r0, #20
 800f0c2:	f7f8 fec7 	bl	8007e54 <HAL_NVIC_EnableIRQ>
}
 800f0c6:	e7e3      	b.n	800f090 <HAL_PCD_MspInit+0x18>
      Error_Handler();
 800f0c8:	f7f2 ff6c 	bl	8001fa4 <Error_Handler>
 800f0cc:	e7e9      	b.n	800f0a2 <HAL_PCD_MspInit+0x2a>
 800f0ce:	bf00      	nop
 800f0d0:	40005c00 	.word	0x40005c00
 800f0d4:	40021000 	.word	0x40021000

0800f0d8 <HAL_PCD_SetupStageCallback>:
{
 800f0d8:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f0da:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800f0de:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800f0e2:	f7ff fa09 	bl	800e4f8 <USBD_LL_SetupStage>
}
 800f0e6:	bd08      	pop	{r3, pc}

0800f0e8 <HAL_PCD_DataOutStageCallback>:
{
 800f0e8:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f0ea:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800f0ee:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800f0f2:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800f0f6:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800f0fa:	f7ff fa29 	bl	800e550 <USBD_LL_DataOutStage>
}
 800f0fe:	bd08      	pop	{r3, pc}

0800f100 <HAL_PCD_DataInStageCallback>:
{
 800f100:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f102:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800f106:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800f10a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f10c:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800f110:	f7ff fa5a 	bl	800e5c8 <USBD_LL_DataInStage>
}
 800f114:	bd08      	pop	{r3, pc}

0800f116 <HAL_PCD_SOFCallback>:
{
 800f116:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f118:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800f11c:	f7ff fafa 	bl	800e714 <USBD_LL_SOF>
}
 800f120:	bd08      	pop	{r3, pc}

0800f122 <HAL_PCD_ResetCallback>:
{
 800f122:	b510      	push	{r4, lr}
 800f124:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f126:	6883      	ldr	r3, [r0, #8]
 800f128:	2b02      	cmp	r3, #2
 800f12a:	d109      	bne.n	800f140 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f12c:	2101      	movs	r1, #1
 800f12e:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800f132:	f7ff fad5 	bl	800e6e0 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f136:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800f13a:	f7ff faa4 	bl	800e686 <USBD_LL_Reset>
}
 800f13e:	bd10      	pop	{r4, pc}
    Error_Handler();
 800f140:	f7f2 ff30 	bl	8001fa4 <Error_Handler>
 800f144:	e7f2      	b.n	800f12c <HAL_PCD_ResetCallback+0xa>
	...

0800f148 <HAL_PCD_SuspendCallback>:
{
 800f148:	b510      	push	{r4, lr}
 800f14a:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f14c:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800f150:	f7ff fac9 	bl	800e6e6 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800f154:	69a3      	ldr	r3, [r4, #24]
 800f156:	b123      	cbz	r3, 800f162 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f158:	4a02      	ldr	r2, [pc, #8]	; (800f164 <HAL_PCD_SuspendCallback+0x1c>)
 800f15a:	6913      	ldr	r3, [r2, #16]
 800f15c:	f043 0306 	orr.w	r3, r3, #6
 800f160:	6113      	str	r3, [r2, #16]
}
 800f162:	bd10      	pop	{r4, pc}
 800f164:	e000ed00 	.word	0xe000ed00

0800f168 <HAL_PCD_ResumeCallback>:
{
 800f168:	b510      	push	{r4, lr}
 800f16a:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800f16c:	6983      	ldr	r3, [r0, #24]
 800f16e:	b923      	cbnz	r3, 800f17a <HAL_PCD_ResumeCallback+0x12>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f170:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800f174:	f7ff fac1 	bl	800e6fa <USBD_LL_Resume>
}
 800f178:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f17a:	4a04      	ldr	r2, [pc, #16]	; (800f18c <HAL_PCD_ResumeCallback+0x24>)
 800f17c:	6913      	ldr	r3, [r2, #16]
 800f17e:	f023 0306 	bic.w	r3, r3, #6
 800f182:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f184:	f7ff ff74 	bl	800f070 <SystemClockConfig_Resume>
 800f188:	e7f2      	b.n	800f170 <HAL_PCD_ResumeCallback+0x8>
 800f18a:	bf00      	nop
 800f18c:	e000ed00 	.word	0xe000ed00

0800f190 <USBD_LL_Init>:
{
 800f190:	b510      	push	{r4, lr}
 800f192:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800f194:	481e      	ldr	r0, [pc, #120]	; (800f210 <USBD_LL_Init+0x80>)
 800f196:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800f19a:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Instance = USB;
 800f19e:	4b1d      	ldr	r3, [pc, #116]	; (800f214 <USBD_LL_Init+0x84>)
 800f1a0:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800f1a2:	2308      	movs	r3, #8
 800f1a4:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800f1a6:	2302      	movs	r3, #2
 800f1a8:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f1aa:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800f1b0:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800f1b2:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800f1b4:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800f1b6:	f7fa f8c0 	bl	800933a <HAL_PCD_Init>
 800f1ba:	bb30      	cbnz	r0, 800f20a <USBD_LL_Init+0x7a>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800f1bc:	2318      	movs	r3, #24
 800f1be:	2200      	movs	r2, #0
 800f1c0:	4611      	mov	r1, r2
 800f1c2:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800f1c6:	f7fa fff2 	bl	800a1ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f1ca:	2358      	movs	r3, #88	; 0x58
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	2180      	movs	r1, #128	; 0x80
 800f1d0:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800f1d4:	f7fa ffeb 	bl	800a1ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f1d8:	23c0      	movs	r3, #192	; 0xc0
 800f1da:	2200      	movs	r2, #0
 800f1dc:	2181      	movs	r1, #129	; 0x81
 800f1de:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800f1e2:	f7fa ffe4 	bl	800a1ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f1e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	2101      	movs	r1, #1
 800f1ee:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800f1f2:	f7fa ffdc 	bl	800a1ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f1f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	2182      	movs	r1, #130	; 0x82
 800f1fe:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800f202:	f7fa ffd4 	bl	800a1ae <HAL_PCDEx_PMAConfig>
}
 800f206:	2000      	movs	r0, #0
 800f208:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800f20a:	f7f2 fecb 	bl	8001fa4 <Error_Handler>
 800f20e:	e7d5      	b.n	800f1bc <USBD_LL_Init+0x2c>
 800f210:	20012520 	.word	0x20012520
 800f214:	40005c00 	.word	0x40005c00

0800f218 <USBD_LL_Start>:
{
 800f218:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800f21a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800f21e:	f7fa f8fe 	bl	800941e <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800f222:	f7ff ff1b 	bl	800f05c <USBD_Get_USB_Status>
}
 800f226:	bd08      	pop	{r3, pc}

0800f228 <USBD_LL_OpenEP>:
{
 800f228:	b508      	push	{r3, lr}
 800f22a:	4694      	mov	ip, r2
 800f22c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f22e:	4663      	mov	r3, ip
 800f230:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800f234:	f7fa fe84 	bl	8009f40 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800f238:	f7ff ff10 	bl	800f05c <USBD_Get_USB_Status>
}
 800f23c:	bd08      	pop	{r3, pc}

0800f23e <USBD_LL_CloseEP>:
{
 800f23e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f240:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800f244:	f7fa febe 	bl	8009fc4 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800f248:	f7ff ff08 	bl	800f05c <USBD_Get_USB_Status>
}
 800f24c:	bd08      	pop	{r3, pc}

0800f24e <USBD_LL_StallEP>:
{
 800f24e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f250:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800f254:	f7fa ff3b 	bl	800a0ce <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800f258:	f7ff ff00 	bl	800f05c <USBD_Get_USB_Status>
}
 800f25c:	bd08      	pop	{r3, pc}

0800f25e <USBD_LL_ClearStallEP>:
{
 800f25e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f260:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800f264:	f7fa ff68 	bl	800a138 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800f268:	f7ff fef8 	bl	800f05c <USBD_Get_USB_Status>
}
 800f26c:	bd08      	pop	{r3, pc}

0800f26e <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f26e:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800f272:	f011 0f80 	tst.w	r1, #128	; 0x80
 800f276:	d108      	bne.n	800f28a <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f278:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800f27c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f280:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f284:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800f288:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f28a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800f28e:	3101      	adds	r1, #1
 800f290:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f294:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f298:	7888      	ldrb	r0, [r1, #2]
 800f29a:	4770      	bx	lr

0800f29c <USBD_LL_SetUSBAddress>:
{
 800f29c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f29e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800f2a2:	f7fa fd60 	bl	8009d66 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2a6:	f7ff fed9 	bl	800f05c <USBD_Get_USB_Status>
}
 800f2aa:	bd08      	pop	{r3, pc}

0800f2ac <USBD_LL_Transmit>:
{
 800f2ac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f2ae:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800f2b2:	f7fa fee4 	bl	800a07e <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2b6:	f7ff fed1 	bl	800f05c <USBD_Get_USB_Status>
}
 800f2ba:	bd08      	pop	{r3, pc}

0800f2bc <USBD_LL_PrepareReceive>:
{
 800f2bc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f2be:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800f2c2:	f7fa feb1 	bl	800a028 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2c6:	f7ff fec9 	bl	800f05c <USBD_Get_USB_Status>
}
 800f2ca:	bd08      	pop	{r3, pc}

0800f2cc <USBD_LL_GetRxDataSize>:
{
 800f2cc:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f2ce:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800f2d2:	f7fa fecb 	bl	800a06c <HAL_PCD_EP_GetRxCount>
}
 800f2d6:	bd08      	pop	{r3, pc}

0800f2d8 <HAL_PCDEx_LPM_Callback>:
{
 800f2d8:	b510      	push	{r4, lr}
 800f2da:	4604      	mov	r4, r0
  switch (msg)
 800f2dc:	b111      	cbz	r1, 800f2e4 <HAL_PCDEx_LPM_Callback+0xc>
 800f2de:	2901      	cmp	r1, #1
 800f2e0:	d00f      	beq.n	800f302 <HAL_PCDEx_LPM_Callback+0x2a>
}
 800f2e2:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 800f2e4:	6983      	ldr	r3, [r0, #24]
 800f2e6:	b923      	cbnz	r3, 800f2f2 <HAL_PCDEx_LPM_Callback+0x1a>
    USBD_LL_Resume(hpcd->pData);
 800f2e8:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800f2ec:	f7ff fa05 	bl	800e6fa <USBD_LL_Resume>
    break;
 800f2f0:	e7f7      	b.n	800f2e2 <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 800f2f2:	f7ff febd 	bl	800f070 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f2f6:	4a09      	ldr	r2, [pc, #36]	; (800f31c <HAL_PCDEx_LPM_Callback+0x44>)
 800f2f8:	6913      	ldr	r3, [r2, #16]
 800f2fa:	f023 0306 	bic.w	r3, r3, #6
 800f2fe:	6113      	str	r3, [r2, #16]
 800f300:	e7f2      	b.n	800f2e8 <HAL_PCDEx_LPM_Callback+0x10>
    USBD_LL_Suspend(hpcd->pData);
 800f302:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800f306:	f7ff f9ee 	bl	800e6e6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f30a:	69a3      	ldr	r3, [r4, #24]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d0e8      	beq.n	800f2e2 <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f310:	4a02      	ldr	r2, [pc, #8]	; (800f31c <HAL_PCDEx_LPM_Callback+0x44>)
 800f312:	6913      	ldr	r3, [r2, #16]
 800f314:	f043 0306 	orr.w	r3, r3, #6
 800f318:	6113      	str	r3, [r2, #16]
}
 800f31a:	e7e2      	b.n	800f2e2 <HAL_PCDEx_LPM_Callback+0xa>
 800f31c:	e000ed00 	.word	0xe000ed00

0800f320 <USBD_static_malloc>:
}
 800f320:	4800      	ldr	r0, [pc, #0]	; (800f324 <USBD_static_malloc+0x4>)
 800f322:	4770      	bx	lr
 800f324:	20012814 	.word	0x20012814

0800f328 <USBD_static_free>:
}
 800f328:	4770      	bx	lr
	...

0800f32c <round>:
 800f32c:	ec51 0b10 	vmov	r0, r1, d0
 800f330:	b570      	push	{r4, r5, r6, lr}
 800f332:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800f336:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800f33a:	2c13      	cmp	r4, #19
 800f33c:	ee10 2a10 	vmov	r2, s0
 800f340:	460b      	mov	r3, r1
 800f342:	dc19      	bgt.n	800f378 <round+0x4c>
 800f344:	2c00      	cmp	r4, #0
 800f346:	da09      	bge.n	800f35c <round+0x30>
 800f348:	3401      	adds	r4, #1
 800f34a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800f34e:	d103      	bne.n	800f358 <round+0x2c>
 800f350:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f354:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f358:	2200      	movs	r2, #0
 800f35a:	e028      	b.n	800f3ae <round+0x82>
 800f35c:	4d15      	ldr	r5, [pc, #84]	; (800f3b4 <round+0x88>)
 800f35e:	4125      	asrs	r5, r4
 800f360:	ea01 0605 	and.w	r6, r1, r5
 800f364:	4332      	orrs	r2, r6
 800f366:	d00e      	beq.n	800f386 <round+0x5a>
 800f368:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f36c:	fa42 f404 	asr.w	r4, r2, r4
 800f370:	4423      	add	r3, r4
 800f372:	ea23 0305 	bic.w	r3, r3, r5
 800f376:	e7ef      	b.n	800f358 <round+0x2c>
 800f378:	2c33      	cmp	r4, #51	; 0x33
 800f37a:	dd07      	ble.n	800f38c <round+0x60>
 800f37c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800f380:	d101      	bne.n	800f386 <round+0x5a>
 800f382:	f7f0 ffbb 	bl	80002fc <__adddf3>
 800f386:	ec41 0b10 	vmov	d0, r0, r1
 800f38a:	bd70      	pop	{r4, r5, r6, pc}
 800f38c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800f390:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f394:	40f5      	lsrs	r5, r6
 800f396:	4228      	tst	r0, r5
 800f398:	d0f5      	beq.n	800f386 <round+0x5a>
 800f39a:	2101      	movs	r1, #1
 800f39c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800f3a0:	fa01 f404 	lsl.w	r4, r1, r4
 800f3a4:	1912      	adds	r2, r2, r4
 800f3a6:	bf28      	it	cs
 800f3a8:	185b      	addcs	r3, r3, r1
 800f3aa:	ea22 0205 	bic.w	r2, r2, r5
 800f3ae:	4619      	mov	r1, r3
 800f3b0:	4610      	mov	r0, r2
 800f3b2:	e7e8      	b.n	800f386 <round+0x5a>
 800f3b4:	000fffff 	.word	0x000fffff

0800f3b8 <exp>:
 800f3b8:	b538      	push	{r3, r4, r5, lr}
 800f3ba:	ed2d 8b02 	vpush	{d8}
 800f3be:	ec55 4b10 	vmov	r4, r5, d0
 800f3c2:	f000 f8dd 	bl	800f580 <__ieee754_exp>
 800f3c6:	eeb0 8a40 	vmov.f32	s16, s0
 800f3ca:	eef0 8a60 	vmov.f32	s17, s1
 800f3ce:	ec45 4b10 	vmov	d0, r4, r5
 800f3d2:	f001 f872 	bl	80104ba <finite>
 800f3d6:	b168      	cbz	r0, 800f3f4 <exp+0x3c>
 800f3d8:	a317      	add	r3, pc, #92	; (adr r3, 800f438 <exp+0x80>)
 800f3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3de:	4620      	mov	r0, r4
 800f3e0:	4629      	mov	r1, r5
 800f3e2:	f7f1 fbd1 	bl	8000b88 <__aeabi_dcmpgt>
 800f3e6:	b160      	cbz	r0, 800f402 <exp+0x4a>
 800f3e8:	f001 f8f8 	bl	80105dc <__errno>
 800f3ec:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800f428 <exp+0x70>
 800f3f0:	2322      	movs	r3, #34	; 0x22
 800f3f2:	6003      	str	r3, [r0, #0]
 800f3f4:	eeb0 0a48 	vmov.f32	s0, s16
 800f3f8:	eef0 0a68 	vmov.f32	s1, s17
 800f3fc:	ecbd 8b02 	vpop	{d8}
 800f400:	bd38      	pop	{r3, r4, r5, pc}
 800f402:	a30f      	add	r3, pc, #60	; (adr r3, 800f440 <exp+0x88>)
 800f404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f408:	4620      	mov	r0, r4
 800f40a:	4629      	mov	r1, r5
 800f40c:	f7f1 fb9e 	bl	8000b4c <__aeabi_dcmplt>
 800f410:	2800      	cmp	r0, #0
 800f412:	d0ef      	beq.n	800f3f4 <exp+0x3c>
 800f414:	f001 f8e2 	bl	80105dc <__errno>
 800f418:	2322      	movs	r3, #34	; 0x22
 800f41a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800f430 <exp+0x78>
 800f41e:	6003      	str	r3, [r0, #0]
 800f420:	e7e8      	b.n	800f3f4 <exp+0x3c>
 800f422:	bf00      	nop
 800f424:	f3af 8000 	nop.w
 800f428:	00000000 	.word	0x00000000
 800f42c:	7ff00000 	.word	0x7ff00000
	...
 800f438:	fefa39ef 	.word	0xfefa39ef
 800f43c:	40862e42 	.word	0x40862e42
 800f440:	d52d3051 	.word	0xd52d3051
 800f444:	c0874910 	.word	0xc0874910

0800f448 <pow>:
 800f448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f44a:	ed2d 8b02 	vpush	{d8}
 800f44e:	eeb0 8a40 	vmov.f32	s16, s0
 800f452:	eef0 8a60 	vmov.f32	s17, s1
 800f456:	ec55 4b11 	vmov	r4, r5, d1
 800f45a:	f000 fa15 	bl	800f888 <__ieee754_pow>
 800f45e:	4622      	mov	r2, r4
 800f460:	462b      	mov	r3, r5
 800f462:	4620      	mov	r0, r4
 800f464:	4629      	mov	r1, r5
 800f466:	ec57 6b10 	vmov	r6, r7, d0
 800f46a:	f7f1 fb97 	bl	8000b9c <__aeabi_dcmpun>
 800f46e:	2800      	cmp	r0, #0
 800f470:	d13b      	bne.n	800f4ea <pow+0xa2>
 800f472:	ec51 0b18 	vmov	r0, r1, d8
 800f476:	2200      	movs	r2, #0
 800f478:	2300      	movs	r3, #0
 800f47a:	f7f1 fb5d 	bl	8000b38 <__aeabi_dcmpeq>
 800f47e:	b1b8      	cbz	r0, 800f4b0 <pow+0x68>
 800f480:	2200      	movs	r2, #0
 800f482:	2300      	movs	r3, #0
 800f484:	4620      	mov	r0, r4
 800f486:	4629      	mov	r1, r5
 800f488:	f7f1 fb56 	bl	8000b38 <__aeabi_dcmpeq>
 800f48c:	2800      	cmp	r0, #0
 800f48e:	d146      	bne.n	800f51e <pow+0xd6>
 800f490:	ec45 4b10 	vmov	d0, r4, r5
 800f494:	f001 f811 	bl	80104ba <finite>
 800f498:	b338      	cbz	r0, 800f4ea <pow+0xa2>
 800f49a:	2200      	movs	r2, #0
 800f49c:	2300      	movs	r3, #0
 800f49e:	4620      	mov	r0, r4
 800f4a0:	4629      	mov	r1, r5
 800f4a2:	f7f1 fb53 	bl	8000b4c <__aeabi_dcmplt>
 800f4a6:	b300      	cbz	r0, 800f4ea <pow+0xa2>
 800f4a8:	f001 f898 	bl	80105dc <__errno>
 800f4ac:	2322      	movs	r3, #34	; 0x22
 800f4ae:	e01b      	b.n	800f4e8 <pow+0xa0>
 800f4b0:	ec47 6b10 	vmov	d0, r6, r7
 800f4b4:	f001 f801 	bl	80104ba <finite>
 800f4b8:	b9e0      	cbnz	r0, 800f4f4 <pow+0xac>
 800f4ba:	eeb0 0a48 	vmov.f32	s0, s16
 800f4be:	eef0 0a68 	vmov.f32	s1, s17
 800f4c2:	f000 fffa 	bl	80104ba <finite>
 800f4c6:	b1a8      	cbz	r0, 800f4f4 <pow+0xac>
 800f4c8:	ec45 4b10 	vmov	d0, r4, r5
 800f4cc:	f000 fff5 	bl	80104ba <finite>
 800f4d0:	b180      	cbz	r0, 800f4f4 <pow+0xac>
 800f4d2:	4632      	mov	r2, r6
 800f4d4:	463b      	mov	r3, r7
 800f4d6:	4630      	mov	r0, r6
 800f4d8:	4639      	mov	r1, r7
 800f4da:	f7f1 fb5f 	bl	8000b9c <__aeabi_dcmpun>
 800f4de:	2800      	cmp	r0, #0
 800f4e0:	d0e2      	beq.n	800f4a8 <pow+0x60>
 800f4e2:	f001 f87b 	bl	80105dc <__errno>
 800f4e6:	2321      	movs	r3, #33	; 0x21
 800f4e8:	6003      	str	r3, [r0, #0]
 800f4ea:	ecbd 8b02 	vpop	{d8}
 800f4ee:	ec47 6b10 	vmov	d0, r6, r7
 800f4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	4630      	mov	r0, r6
 800f4fa:	4639      	mov	r1, r7
 800f4fc:	f7f1 fb1c 	bl	8000b38 <__aeabi_dcmpeq>
 800f500:	2800      	cmp	r0, #0
 800f502:	d0f2      	beq.n	800f4ea <pow+0xa2>
 800f504:	eeb0 0a48 	vmov.f32	s0, s16
 800f508:	eef0 0a68 	vmov.f32	s1, s17
 800f50c:	f000 ffd5 	bl	80104ba <finite>
 800f510:	2800      	cmp	r0, #0
 800f512:	d0ea      	beq.n	800f4ea <pow+0xa2>
 800f514:	ec45 4b10 	vmov	d0, r4, r5
 800f518:	f000 ffcf 	bl	80104ba <finite>
 800f51c:	e7c3      	b.n	800f4a6 <pow+0x5e>
 800f51e:	4f01      	ldr	r7, [pc, #4]	; (800f524 <pow+0xdc>)
 800f520:	2600      	movs	r6, #0
 800f522:	e7e2      	b.n	800f4ea <pow+0xa2>
 800f524:	3ff00000 	.word	0x3ff00000

0800f528 <sqrt>:
 800f528:	b538      	push	{r3, r4, r5, lr}
 800f52a:	ed2d 8b02 	vpush	{d8}
 800f52e:	ec55 4b10 	vmov	r4, r5, d0
 800f532:	f000 fed7 	bl	80102e4 <__ieee754_sqrt>
 800f536:	4622      	mov	r2, r4
 800f538:	462b      	mov	r3, r5
 800f53a:	4620      	mov	r0, r4
 800f53c:	4629      	mov	r1, r5
 800f53e:	eeb0 8a40 	vmov.f32	s16, s0
 800f542:	eef0 8a60 	vmov.f32	s17, s1
 800f546:	f7f1 fb29 	bl	8000b9c <__aeabi_dcmpun>
 800f54a:	b990      	cbnz	r0, 800f572 <sqrt+0x4a>
 800f54c:	2200      	movs	r2, #0
 800f54e:	2300      	movs	r3, #0
 800f550:	4620      	mov	r0, r4
 800f552:	4629      	mov	r1, r5
 800f554:	f7f1 fafa 	bl	8000b4c <__aeabi_dcmplt>
 800f558:	b158      	cbz	r0, 800f572 <sqrt+0x4a>
 800f55a:	f001 f83f 	bl	80105dc <__errno>
 800f55e:	2321      	movs	r3, #33	; 0x21
 800f560:	6003      	str	r3, [r0, #0]
 800f562:	2200      	movs	r2, #0
 800f564:	2300      	movs	r3, #0
 800f566:	4610      	mov	r0, r2
 800f568:	4619      	mov	r1, r3
 800f56a:	f7f1 f9a7 	bl	80008bc <__aeabi_ddiv>
 800f56e:	ec41 0b18 	vmov	d8, r0, r1
 800f572:	eeb0 0a48 	vmov.f32	s0, s16
 800f576:	eef0 0a68 	vmov.f32	s1, s17
 800f57a:	ecbd 8b02 	vpop	{d8}
 800f57e:	bd38      	pop	{r3, r4, r5, pc}

0800f580 <__ieee754_exp>:
 800f580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f584:	ec55 4b10 	vmov	r4, r5, d0
 800f588:	49b5      	ldr	r1, [pc, #724]	; (800f860 <__ieee754_exp+0x2e0>)
 800f58a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f58e:	428b      	cmp	r3, r1
 800f590:	ed2d 8b04 	vpush	{d8-d9}
 800f594:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800f598:	d93d      	bls.n	800f616 <__ieee754_exp+0x96>
 800f59a:	49b2      	ldr	r1, [pc, #712]	; (800f864 <__ieee754_exp+0x2e4>)
 800f59c:	428b      	cmp	r3, r1
 800f59e:	d918      	bls.n	800f5d2 <__ieee754_exp+0x52>
 800f5a0:	ee10 3a10 	vmov	r3, s0
 800f5a4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800f5a8:	4313      	orrs	r3, r2
 800f5aa:	d009      	beq.n	800f5c0 <__ieee754_exp+0x40>
 800f5ac:	ee10 2a10 	vmov	r2, s0
 800f5b0:	462b      	mov	r3, r5
 800f5b2:	4620      	mov	r0, r4
 800f5b4:	4629      	mov	r1, r5
 800f5b6:	f7f0 fea1 	bl	80002fc <__adddf3>
 800f5ba:	4604      	mov	r4, r0
 800f5bc:	460d      	mov	r5, r1
 800f5be:	e002      	b.n	800f5c6 <__ieee754_exp+0x46>
 800f5c0:	b10e      	cbz	r6, 800f5c6 <__ieee754_exp+0x46>
 800f5c2:	2400      	movs	r4, #0
 800f5c4:	2500      	movs	r5, #0
 800f5c6:	ecbd 8b04 	vpop	{d8-d9}
 800f5ca:	ec45 4b10 	vmov	d0, r4, r5
 800f5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5d2:	a38d      	add	r3, pc, #564	; (adr r3, 800f808 <__ieee754_exp+0x288>)
 800f5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d8:	ee10 0a10 	vmov	r0, s0
 800f5dc:	4629      	mov	r1, r5
 800f5de:	f7f1 fad3 	bl	8000b88 <__aeabi_dcmpgt>
 800f5e2:	4607      	mov	r7, r0
 800f5e4:	b130      	cbz	r0, 800f5f4 <__ieee754_exp+0x74>
 800f5e6:	ecbd 8b04 	vpop	{d8-d9}
 800f5ea:	2000      	movs	r0, #0
 800f5ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5f0:	f000 bf51 	b.w	8010496 <__math_oflow>
 800f5f4:	a386      	add	r3, pc, #536	; (adr r3, 800f810 <__ieee754_exp+0x290>)
 800f5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fa:	4620      	mov	r0, r4
 800f5fc:	4629      	mov	r1, r5
 800f5fe:	f7f1 faa5 	bl	8000b4c <__aeabi_dcmplt>
 800f602:	2800      	cmp	r0, #0
 800f604:	f000 808b 	beq.w	800f71e <__ieee754_exp+0x19e>
 800f608:	ecbd 8b04 	vpop	{d8-d9}
 800f60c:	4638      	mov	r0, r7
 800f60e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f612:	f000 bf37 	b.w	8010484 <__math_uflow>
 800f616:	4a94      	ldr	r2, [pc, #592]	; (800f868 <__ieee754_exp+0x2e8>)
 800f618:	4293      	cmp	r3, r2
 800f61a:	f240 80ac 	bls.w	800f776 <__ieee754_exp+0x1f6>
 800f61e:	4a93      	ldr	r2, [pc, #588]	; (800f86c <__ieee754_exp+0x2ec>)
 800f620:	4293      	cmp	r3, r2
 800f622:	d87c      	bhi.n	800f71e <__ieee754_exp+0x19e>
 800f624:	4b92      	ldr	r3, [pc, #584]	; (800f870 <__ieee754_exp+0x2f0>)
 800f626:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f62e:	ee10 0a10 	vmov	r0, s0
 800f632:	4629      	mov	r1, r5
 800f634:	f7f0 fe60 	bl	80002f8 <__aeabi_dsub>
 800f638:	4b8e      	ldr	r3, [pc, #568]	; (800f874 <__ieee754_exp+0x2f4>)
 800f63a:	00f7      	lsls	r7, r6, #3
 800f63c:	443b      	add	r3, r7
 800f63e:	ed93 7b00 	vldr	d7, [r3]
 800f642:	f1c6 0a01 	rsb	sl, r6, #1
 800f646:	4680      	mov	r8, r0
 800f648:	4689      	mov	r9, r1
 800f64a:	ebaa 0a06 	sub.w	sl, sl, r6
 800f64e:	eeb0 8a47 	vmov.f32	s16, s14
 800f652:	eef0 8a67 	vmov.f32	s17, s15
 800f656:	ec53 2b18 	vmov	r2, r3, d8
 800f65a:	4640      	mov	r0, r8
 800f65c:	4649      	mov	r1, r9
 800f65e:	f7f0 fe4b 	bl	80002f8 <__aeabi_dsub>
 800f662:	4604      	mov	r4, r0
 800f664:	460d      	mov	r5, r1
 800f666:	4622      	mov	r2, r4
 800f668:	462b      	mov	r3, r5
 800f66a:	4620      	mov	r0, r4
 800f66c:	4629      	mov	r1, r5
 800f66e:	f7f0 fffb 	bl	8000668 <__aeabi_dmul>
 800f672:	a369      	add	r3, pc, #420	; (adr r3, 800f818 <__ieee754_exp+0x298>)
 800f674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f678:	4606      	mov	r6, r0
 800f67a:	460f      	mov	r7, r1
 800f67c:	f7f0 fff4 	bl	8000668 <__aeabi_dmul>
 800f680:	a367      	add	r3, pc, #412	; (adr r3, 800f820 <__ieee754_exp+0x2a0>)
 800f682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f686:	f7f0 fe37 	bl	80002f8 <__aeabi_dsub>
 800f68a:	4632      	mov	r2, r6
 800f68c:	463b      	mov	r3, r7
 800f68e:	f7f0 ffeb 	bl	8000668 <__aeabi_dmul>
 800f692:	a365      	add	r3, pc, #404	; (adr r3, 800f828 <__ieee754_exp+0x2a8>)
 800f694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f698:	f7f0 fe30 	bl	80002fc <__adddf3>
 800f69c:	4632      	mov	r2, r6
 800f69e:	463b      	mov	r3, r7
 800f6a0:	f7f0 ffe2 	bl	8000668 <__aeabi_dmul>
 800f6a4:	a362      	add	r3, pc, #392	; (adr r3, 800f830 <__ieee754_exp+0x2b0>)
 800f6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6aa:	f7f0 fe25 	bl	80002f8 <__aeabi_dsub>
 800f6ae:	4632      	mov	r2, r6
 800f6b0:	463b      	mov	r3, r7
 800f6b2:	f7f0 ffd9 	bl	8000668 <__aeabi_dmul>
 800f6b6:	a360      	add	r3, pc, #384	; (adr r3, 800f838 <__ieee754_exp+0x2b8>)
 800f6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6bc:	f7f0 fe1e 	bl	80002fc <__adddf3>
 800f6c0:	4632      	mov	r2, r6
 800f6c2:	463b      	mov	r3, r7
 800f6c4:	f7f0 ffd0 	bl	8000668 <__aeabi_dmul>
 800f6c8:	4602      	mov	r2, r0
 800f6ca:	460b      	mov	r3, r1
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	4629      	mov	r1, r5
 800f6d0:	f7f0 fe12 	bl	80002f8 <__aeabi_dsub>
 800f6d4:	4602      	mov	r2, r0
 800f6d6:	460b      	mov	r3, r1
 800f6d8:	4606      	mov	r6, r0
 800f6da:	460f      	mov	r7, r1
 800f6dc:	4620      	mov	r0, r4
 800f6de:	4629      	mov	r1, r5
 800f6e0:	f7f0 ffc2 	bl	8000668 <__aeabi_dmul>
 800f6e4:	ec41 0b19 	vmov	d9, r0, r1
 800f6e8:	f1ba 0f00 	cmp.w	sl, #0
 800f6ec:	d15d      	bne.n	800f7aa <__ieee754_exp+0x22a>
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f6f4:	4630      	mov	r0, r6
 800f6f6:	4639      	mov	r1, r7
 800f6f8:	f7f0 fdfe 	bl	80002f8 <__aeabi_dsub>
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	460b      	mov	r3, r1
 800f700:	ec51 0b19 	vmov	r0, r1, d9
 800f704:	f7f1 f8da 	bl	80008bc <__aeabi_ddiv>
 800f708:	4622      	mov	r2, r4
 800f70a:	462b      	mov	r3, r5
 800f70c:	f7f0 fdf4 	bl	80002f8 <__aeabi_dsub>
 800f710:	4602      	mov	r2, r0
 800f712:	460b      	mov	r3, r1
 800f714:	2000      	movs	r0, #0
 800f716:	4958      	ldr	r1, [pc, #352]	; (800f878 <__ieee754_exp+0x2f8>)
 800f718:	f7f0 fdee 	bl	80002f8 <__aeabi_dsub>
 800f71c:	e74d      	b.n	800f5ba <__ieee754_exp+0x3a>
 800f71e:	4857      	ldr	r0, [pc, #348]	; (800f87c <__ieee754_exp+0x2fc>)
 800f720:	a347      	add	r3, pc, #284	; (adr r3, 800f840 <__ieee754_exp+0x2c0>)
 800f722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f726:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800f72a:	4629      	mov	r1, r5
 800f72c:	4620      	mov	r0, r4
 800f72e:	f7f0 ff9b 	bl	8000668 <__aeabi_dmul>
 800f732:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f736:	f7f0 fde1 	bl	80002fc <__adddf3>
 800f73a:	f7f1 fa45 	bl	8000bc8 <__aeabi_d2iz>
 800f73e:	4682      	mov	sl, r0
 800f740:	f7f0 ff28 	bl	8000594 <__aeabi_i2d>
 800f744:	a340      	add	r3, pc, #256	; (adr r3, 800f848 <__ieee754_exp+0x2c8>)
 800f746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74a:	4606      	mov	r6, r0
 800f74c:	460f      	mov	r7, r1
 800f74e:	f7f0 ff8b 	bl	8000668 <__aeabi_dmul>
 800f752:	4602      	mov	r2, r0
 800f754:	460b      	mov	r3, r1
 800f756:	4620      	mov	r0, r4
 800f758:	4629      	mov	r1, r5
 800f75a:	f7f0 fdcd 	bl	80002f8 <__aeabi_dsub>
 800f75e:	a33c      	add	r3, pc, #240	; (adr r3, 800f850 <__ieee754_exp+0x2d0>)
 800f760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f764:	4680      	mov	r8, r0
 800f766:	4689      	mov	r9, r1
 800f768:	4630      	mov	r0, r6
 800f76a:	4639      	mov	r1, r7
 800f76c:	f7f0 ff7c 	bl	8000668 <__aeabi_dmul>
 800f770:	ec41 0b18 	vmov	d8, r0, r1
 800f774:	e76f      	b.n	800f656 <__ieee754_exp+0xd6>
 800f776:	4a42      	ldr	r2, [pc, #264]	; (800f880 <__ieee754_exp+0x300>)
 800f778:	4293      	cmp	r3, r2
 800f77a:	d811      	bhi.n	800f7a0 <__ieee754_exp+0x220>
 800f77c:	a336      	add	r3, pc, #216	; (adr r3, 800f858 <__ieee754_exp+0x2d8>)
 800f77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f782:	ee10 0a10 	vmov	r0, s0
 800f786:	4629      	mov	r1, r5
 800f788:	f7f0 fdb8 	bl	80002fc <__adddf3>
 800f78c:	4b3a      	ldr	r3, [pc, #232]	; (800f878 <__ieee754_exp+0x2f8>)
 800f78e:	2200      	movs	r2, #0
 800f790:	f7f1 f9fa 	bl	8000b88 <__aeabi_dcmpgt>
 800f794:	b138      	cbz	r0, 800f7a6 <__ieee754_exp+0x226>
 800f796:	4b38      	ldr	r3, [pc, #224]	; (800f878 <__ieee754_exp+0x2f8>)
 800f798:	2200      	movs	r2, #0
 800f79a:	4620      	mov	r0, r4
 800f79c:	4629      	mov	r1, r5
 800f79e:	e70a      	b.n	800f5b6 <__ieee754_exp+0x36>
 800f7a0:	f04f 0a00 	mov.w	sl, #0
 800f7a4:	e75f      	b.n	800f666 <__ieee754_exp+0xe6>
 800f7a6:	4682      	mov	sl, r0
 800f7a8:	e75d      	b.n	800f666 <__ieee754_exp+0xe6>
 800f7aa:	4632      	mov	r2, r6
 800f7ac:	463b      	mov	r3, r7
 800f7ae:	2000      	movs	r0, #0
 800f7b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800f7b4:	f7f0 fda0 	bl	80002f8 <__aeabi_dsub>
 800f7b8:	4602      	mov	r2, r0
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	ec51 0b19 	vmov	r0, r1, d9
 800f7c0:	f7f1 f87c 	bl	80008bc <__aeabi_ddiv>
 800f7c4:	4602      	mov	r2, r0
 800f7c6:	460b      	mov	r3, r1
 800f7c8:	ec51 0b18 	vmov	r0, r1, d8
 800f7cc:	f7f0 fd94 	bl	80002f8 <__aeabi_dsub>
 800f7d0:	4642      	mov	r2, r8
 800f7d2:	464b      	mov	r3, r9
 800f7d4:	f7f0 fd90 	bl	80002f8 <__aeabi_dsub>
 800f7d8:	4602      	mov	r2, r0
 800f7da:	460b      	mov	r3, r1
 800f7dc:	2000      	movs	r0, #0
 800f7de:	4926      	ldr	r1, [pc, #152]	; (800f878 <__ieee754_exp+0x2f8>)
 800f7e0:	f7f0 fd8a 	bl	80002f8 <__aeabi_dsub>
 800f7e4:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800f7e8:	4592      	cmp	sl, r2
 800f7ea:	db02      	blt.n	800f7f2 <__ieee754_exp+0x272>
 800f7ec:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800f7f0:	e6e3      	b.n	800f5ba <__ieee754_exp+0x3a>
 800f7f2:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800f7f6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800f800:	f7f0 ff32 	bl	8000668 <__aeabi_dmul>
 800f804:	e6d9      	b.n	800f5ba <__ieee754_exp+0x3a>
 800f806:	bf00      	nop
 800f808:	fefa39ef 	.word	0xfefa39ef
 800f80c:	40862e42 	.word	0x40862e42
 800f810:	d52d3051 	.word	0xd52d3051
 800f814:	c0874910 	.word	0xc0874910
 800f818:	72bea4d0 	.word	0x72bea4d0
 800f81c:	3e663769 	.word	0x3e663769
 800f820:	c5d26bf1 	.word	0xc5d26bf1
 800f824:	3ebbbd41 	.word	0x3ebbbd41
 800f828:	af25de2c 	.word	0xaf25de2c
 800f82c:	3f11566a 	.word	0x3f11566a
 800f830:	16bebd93 	.word	0x16bebd93
 800f834:	3f66c16c 	.word	0x3f66c16c
 800f838:	5555553e 	.word	0x5555553e
 800f83c:	3fc55555 	.word	0x3fc55555
 800f840:	652b82fe 	.word	0x652b82fe
 800f844:	3ff71547 	.word	0x3ff71547
 800f848:	fee00000 	.word	0xfee00000
 800f84c:	3fe62e42 	.word	0x3fe62e42
 800f850:	35793c76 	.word	0x35793c76
 800f854:	3dea39ef 	.word	0x3dea39ef
 800f858:	8800759c 	.word	0x8800759c
 800f85c:	7e37e43c 	.word	0x7e37e43c
 800f860:	40862e41 	.word	0x40862e41
 800f864:	7fefffff 	.word	0x7fefffff
 800f868:	3fd62e42 	.word	0x3fd62e42
 800f86c:	3ff0a2b1 	.word	0x3ff0a2b1
 800f870:	08015e70 	.word	0x08015e70
 800f874:	08015e80 	.word	0x08015e80
 800f878:	3ff00000 	.word	0x3ff00000
 800f87c:	08015e60 	.word	0x08015e60
 800f880:	3defffff 	.word	0x3defffff
 800f884:	00000000 	.word	0x00000000

0800f888 <__ieee754_pow>:
 800f888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f88c:	ed2d 8b06 	vpush	{d8-d10}
 800f890:	b089      	sub	sp, #36	; 0x24
 800f892:	ed8d 1b00 	vstr	d1, [sp]
 800f896:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f89a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f89e:	ea58 0102 	orrs.w	r1, r8, r2
 800f8a2:	ec57 6b10 	vmov	r6, r7, d0
 800f8a6:	d115      	bne.n	800f8d4 <__ieee754_pow+0x4c>
 800f8a8:	19b3      	adds	r3, r6, r6
 800f8aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f8ae:	4152      	adcs	r2, r2
 800f8b0:	4299      	cmp	r1, r3
 800f8b2:	4b89      	ldr	r3, [pc, #548]	; (800fad8 <__ieee754_pow+0x250>)
 800f8b4:	4193      	sbcs	r3, r2
 800f8b6:	f080 84d2 	bcs.w	801025e <__ieee754_pow+0x9d6>
 800f8ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8be:	4630      	mov	r0, r6
 800f8c0:	4639      	mov	r1, r7
 800f8c2:	f7f0 fd1b 	bl	80002fc <__adddf3>
 800f8c6:	ec41 0b10 	vmov	d0, r0, r1
 800f8ca:	b009      	add	sp, #36	; 0x24
 800f8cc:	ecbd 8b06 	vpop	{d8-d10}
 800f8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8d4:	4b81      	ldr	r3, [pc, #516]	; (800fadc <__ieee754_pow+0x254>)
 800f8d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f8da:	429c      	cmp	r4, r3
 800f8dc:	ee10 aa10 	vmov	sl, s0
 800f8e0:	463d      	mov	r5, r7
 800f8e2:	dc06      	bgt.n	800f8f2 <__ieee754_pow+0x6a>
 800f8e4:	d101      	bne.n	800f8ea <__ieee754_pow+0x62>
 800f8e6:	2e00      	cmp	r6, #0
 800f8e8:	d1e7      	bne.n	800f8ba <__ieee754_pow+0x32>
 800f8ea:	4598      	cmp	r8, r3
 800f8ec:	dc01      	bgt.n	800f8f2 <__ieee754_pow+0x6a>
 800f8ee:	d10f      	bne.n	800f910 <__ieee754_pow+0x88>
 800f8f0:	b172      	cbz	r2, 800f910 <__ieee754_pow+0x88>
 800f8f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f8f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f8fa:	ea55 050a 	orrs.w	r5, r5, sl
 800f8fe:	d1dc      	bne.n	800f8ba <__ieee754_pow+0x32>
 800f900:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f904:	18db      	adds	r3, r3, r3
 800f906:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f90a:	4152      	adcs	r2, r2
 800f90c:	429d      	cmp	r5, r3
 800f90e:	e7d0      	b.n	800f8b2 <__ieee754_pow+0x2a>
 800f910:	2d00      	cmp	r5, #0
 800f912:	da3b      	bge.n	800f98c <__ieee754_pow+0x104>
 800f914:	4b72      	ldr	r3, [pc, #456]	; (800fae0 <__ieee754_pow+0x258>)
 800f916:	4598      	cmp	r8, r3
 800f918:	dc51      	bgt.n	800f9be <__ieee754_pow+0x136>
 800f91a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f91e:	4598      	cmp	r8, r3
 800f920:	f340 84ac 	ble.w	801027c <__ieee754_pow+0x9f4>
 800f924:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f928:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f92c:	2b14      	cmp	r3, #20
 800f92e:	dd0f      	ble.n	800f950 <__ieee754_pow+0xc8>
 800f930:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f934:	fa22 f103 	lsr.w	r1, r2, r3
 800f938:	fa01 f303 	lsl.w	r3, r1, r3
 800f93c:	4293      	cmp	r3, r2
 800f93e:	f040 849d 	bne.w	801027c <__ieee754_pow+0x9f4>
 800f942:	f001 0101 	and.w	r1, r1, #1
 800f946:	f1c1 0302 	rsb	r3, r1, #2
 800f94a:	9304      	str	r3, [sp, #16]
 800f94c:	b182      	cbz	r2, 800f970 <__ieee754_pow+0xe8>
 800f94e:	e05f      	b.n	800fa10 <__ieee754_pow+0x188>
 800f950:	2a00      	cmp	r2, #0
 800f952:	d15b      	bne.n	800fa0c <__ieee754_pow+0x184>
 800f954:	f1c3 0314 	rsb	r3, r3, #20
 800f958:	fa48 f103 	asr.w	r1, r8, r3
 800f95c:	fa01 f303 	lsl.w	r3, r1, r3
 800f960:	4543      	cmp	r3, r8
 800f962:	f040 8488 	bne.w	8010276 <__ieee754_pow+0x9ee>
 800f966:	f001 0101 	and.w	r1, r1, #1
 800f96a:	f1c1 0302 	rsb	r3, r1, #2
 800f96e:	9304      	str	r3, [sp, #16]
 800f970:	4b5c      	ldr	r3, [pc, #368]	; (800fae4 <__ieee754_pow+0x25c>)
 800f972:	4598      	cmp	r8, r3
 800f974:	d132      	bne.n	800f9dc <__ieee754_pow+0x154>
 800f976:	f1b9 0f00 	cmp.w	r9, #0
 800f97a:	f280 8478 	bge.w	801026e <__ieee754_pow+0x9e6>
 800f97e:	4959      	ldr	r1, [pc, #356]	; (800fae4 <__ieee754_pow+0x25c>)
 800f980:	4632      	mov	r2, r6
 800f982:	463b      	mov	r3, r7
 800f984:	2000      	movs	r0, #0
 800f986:	f7f0 ff99 	bl	80008bc <__aeabi_ddiv>
 800f98a:	e79c      	b.n	800f8c6 <__ieee754_pow+0x3e>
 800f98c:	2300      	movs	r3, #0
 800f98e:	9304      	str	r3, [sp, #16]
 800f990:	2a00      	cmp	r2, #0
 800f992:	d13d      	bne.n	800fa10 <__ieee754_pow+0x188>
 800f994:	4b51      	ldr	r3, [pc, #324]	; (800fadc <__ieee754_pow+0x254>)
 800f996:	4598      	cmp	r8, r3
 800f998:	d1ea      	bne.n	800f970 <__ieee754_pow+0xe8>
 800f99a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f99e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f9a2:	ea53 030a 	orrs.w	r3, r3, sl
 800f9a6:	f000 845a 	beq.w	801025e <__ieee754_pow+0x9d6>
 800f9aa:	4b4f      	ldr	r3, [pc, #316]	; (800fae8 <__ieee754_pow+0x260>)
 800f9ac:	429c      	cmp	r4, r3
 800f9ae:	dd08      	ble.n	800f9c2 <__ieee754_pow+0x13a>
 800f9b0:	f1b9 0f00 	cmp.w	r9, #0
 800f9b4:	f2c0 8457 	blt.w	8010266 <__ieee754_pow+0x9de>
 800f9b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9bc:	e783      	b.n	800f8c6 <__ieee754_pow+0x3e>
 800f9be:	2302      	movs	r3, #2
 800f9c0:	e7e5      	b.n	800f98e <__ieee754_pow+0x106>
 800f9c2:	f1b9 0f00 	cmp.w	r9, #0
 800f9c6:	f04f 0000 	mov.w	r0, #0
 800f9ca:	f04f 0100 	mov.w	r1, #0
 800f9ce:	f6bf af7a 	bge.w	800f8c6 <__ieee754_pow+0x3e>
 800f9d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f9d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f9da:	e774      	b.n	800f8c6 <__ieee754_pow+0x3e>
 800f9dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f9e0:	d106      	bne.n	800f9f0 <__ieee754_pow+0x168>
 800f9e2:	4632      	mov	r2, r6
 800f9e4:	463b      	mov	r3, r7
 800f9e6:	4630      	mov	r0, r6
 800f9e8:	4639      	mov	r1, r7
 800f9ea:	f7f0 fe3d 	bl	8000668 <__aeabi_dmul>
 800f9ee:	e76a      	b.n	800f8c6 <__ieee754_pow+0x3e>
 800f9f0:	4b3e      	ldr	r3, [pc, #248]	; (800faec <__ieee754_pow+0x264>)
 800f9f2:	4599      	cmp	r9, r3
 800f9f4:	d10c      	bne.n	800fa10 <__ieee754_pow+0x188>
 800f9f6:	2d00      	cmp	r5, #0
 800f9f8:	db0a      	blt.n	800fa10 <__ieee754_pow+0x188>
 800f9fa:	ec47 6b10 	vmov	d0, r6, r7
 800f9fe:	b009      	add	sp, #36	; 0x24
 800fa00:	ecbd 8b06 	vpop	{d8-d10}
 800fa04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa08:	f000 bc6c 	b.w	80102e4 <__ieee754_sqrt>
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	9304      	str	r3, [sp, #16]
 800fa10:	ec47 6b10 	vmov	d0, r6, r7
 800fa14:	f000 fd48 	bl	80104a8 <fabs>
 800fa18:	ec51 0b10 	vmov	r0, r1, d0
 800fa1c:	f1ba 0f00 	cmp.w	sl, #0
 800fa20:	d129      	bne.n	800fa76 <__ieee754_pow+0x1ee>
 800fa22:	b124      	cbz	r4, 800fa2e <__ieee754_pow+0x1a6>
 800fa24:	4b2f      	ldr	r3, [pc, #188]	; (800fae4 <__ieee754_pow+0x25c>)
 800fa26:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d123      	bne.n	800fa76 <__ieee754_pow+0x1ee>
 800fa2e:	f1b9 0f00 	cmp.w	r9, #0
 800fa32:	da05      	bge.n	800fa40 <__ieee754_pow+0x1b8>
 800fa34:	4602      	mov	r2, r0
 800fa36:	460b      	mov	r3, r1
 800fa38:	2000      	movs	r0, #0
 800fa3a:	492a      	ldr	r1, [pc, #168]	; (800fae4 <__ieee754_pow+0x25c>)
 800fa3c:	f7f0 ff3e 	bl	80008bc <__aeabi_ddiv>
 800fa40:	2d00      	cmp	r5, #0
 800fa42:	f6bf af40 	bge.w	800f8c6 <__ieee754_pow+0x3e>
 800fa46:	9b04      	ldr	r3, [sp, #16]
 800fa48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800fa4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fa50:	4323      	orrs	r3, r4
 800fa52:	d108      	bne.n	800fa66 <__ieee754_pow+0x1de>
 800fa54:	4602      	mov	r2, r0
 800fa56:	460b      	mov	r3, r1
 800fa58:	4610      	mov	r0, r2
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	f7f0 fc4c 	bl	80002f8 <__aeabi_dsub>
 800fa60:	4602      	mov	r2, r0
 800fa62:	460b      	mov	r3, r1
 800fa64:	e78f      	b.n	800f986 <__ieee754_pow+0xfe>
 800fa66:	9b04      	ldr	r3, [sp, #16]
 800fa68:	2b01      	cmp	r3, #1
 800fa6a:	f47f af2c 	bne.w	800f8c6 <__ieee754_pow+0x3e>
 800fa6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa72:	4619      	mov	r1, r3
 800fa74:	e727      	b.n	800f8c6 <__ieee754_pow+0x3e>
 800fa76:	0feb      	lsrs	r3, r5, #31
 800fa78:	3b01      	subs	r3, #1
 800fa7a:	9306      	str	r3, [sp, #24]
 800fa7c:	9a06      	ldr	r2, [sp, #24]
 800fa7e:	9b04      	ldr	r3, [sp, #16]
 800fa80:	4313      	orrs	r3, r2
 800fa82:	d102      	bne.n	800fa8a <__ieee754_pow+0x202>
 800fa84:	4632      	mov	r2, r6
 800fa86:	463b      	mov	r3, r7
 800fa88:	e7e6      	b.n	800fa58 <__ieee754_pow+0x1d0>
 800fa8a:	4b19      	ldr	r3, [pc, #100]	; (800faf0 <__ieee754_pow+0x268>)
 800fa8c:	4598      	cmp	r8, r3
 800fa8e:	f340 80fb 	ble.w	800fc88 <__ieee754_pow+0x400>
 800fa92:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800fa96:	4598      	cmp	r8, r3
 800fa98:	4b13      	ldr	r3, [pc, #76]	; (800fae8 <__ieee754_pow+0x260>)
 800fa9a:	dd0c      	ble.n	800fab6 <__ieee754_pow+0x22e>
 800fa9c:	429c      	cmp	r4, r3
 800fa9e:	dc0f      	bgt.n	800fac0 <__ieee754_pow+0x238>
 800faa0:	f1b9 0f00 	cmp.w	r9, #0
 800faa4:	da0f      	bge.n	800fac6 <__ieee754_pow+0x23e>
 800faa6:	2000      	movs	r0, #0
 800faa8:	b009      	add	sp, #36	; 0x24
 800faaa:	ecbd 8b06 	vpop	{d8-d10}
 800faae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fab2:	f000 bcf0 	b.w	8010496 <__math_oflow>
 800fab6:	429c      	cmp	r4, r3
 800fab8:	dbf2      	blt.n	800faa0 <__ieee754_pow+0x218>
 800faba:	4b0a      	ldr	r3, [pc, #40]	; (800fae4 <__ieee754_pow+0x25c>)
 800fabc:	429c      	cmp	r4, r3
 800fabe:	dd19      	ble.n	800faf4 <__ieee754_pow+0x26c>
 800fac0:	f1b9 0f00 	cmp.w	r9, #0
 800fac4:	dcef      	bgt.n	800faa6 <__ieee754_pow+0x21e>
 800fac6:	2000      	movs	r0, #0
 800fac8:	b009      	add	sp, #36	; 0x24
 800faca:	ecbd 8b06 	vpop	{d8-d10}
 800face:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fad2:	f000 bcd7 	b.w	8010484 <__math_uflow>
 800fad6:	bf00      	nop
 800fad8:	fff00000 	.word	0xfff00000
 800fadc:	7ff00000 	.word	0x7ff00000
 800fae0:	433fffff 	.word	0x433fffff
 800fae4:	3ff00000 	.word	0x3ff00000
 800fae8:	3fefffff 	.word	0x3fefffff
 800faec:	3fe00000 	.word	0x3fe00000
 800faf0:	41e00000 	.word	0x41e00000
 800faf4:	4b60      	ldr	r3, [pc, #384]	; (800fc78 <__ieee754_pow+0x3f0>)
 800faf6:	2200      	movs	r2, #0
 800faf8:	f7f0 fbfe 	bl	80002f8 <__aeabi_dsub>
 800fafc:	a354      	add	r3, pc, #336	; (adr r3, 800fc50 <__ieee754_pow+0x3c8>)
 800fafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb02:	4604      	mov	r4, r0
 800fb04:	460d      	mov	r5, r1
 800fb06:	f7f0 fdaf 	bl	8000668 <__aeabi_dmul>
 800fb0a:	a353      	add	r3, pc, #332	; (adr r3, 800fc58 <__ieee754_pow+0x3d0>)
 800fb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb10:	4606      	mov	r6, r0
 800fb12:	460f      	mov	r7, r1
 800fb14:	4620      	mov	r0, r4
 800fb16:	4629      	mov	r1, r5
 800fb18:	f7f0 fda6 	bl	8000668 <__aeabi_dmul>
 800fb1c:	4b57      	ldr	r3, [pc, #348]	; (800fc7c <__ieee754_pow+0x3f4>)
 800fb1e:	4682      	mov	sl, r0
 800fb20:	468b      	mov	fp, r1
 800fb22:	2200      	movs	r2, #0
 800fb24:	4620      	mov	r0, r4
 800fb26:	4629      	mov	r1, r5
 800fb28:	f7f0 fd9e 	bl	8000668 <__aeabi_dmul>
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	460b      	mov	r3, r1
 800fb30:	a14b      	add	r1, pc, #300	; (adr r1, 800fc60 <__ieee754_pow+0x3d8>)
 800fb32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb36:	f7f0 fbdf 	bl	80002f8 <__aeabi_dsub>
 800fb3a:	4622      	mov	r2, r4
 800fb3c:	462b      	mov	r3, r5
 800fb3e:	f7f0 fd93 	bl	8000668 <__aeabi_dmul>
 800fb42:	4602      	mov	r2, r0
 800fb44:	460b      	mov	r3, r1
 800fb46:	2000      	movs	r0, #0
 800fb48:	494d      	ldr	r1, [pc, #308]	; (800fc80 <__ieee754_pow+0x3f8>)
 800fb4a:	f7f0 fbd5 	bl	80002f8 <__aeabi_dsub>
 800fb4e:	4622      	mov	r2, r4
 800fb50:	4680      	mov	r8, r0
 800fb52:	4689      	mov	r9, r1
 800fb54:	462b      	mov	r3, r5
 800fb56:	4620      	mov	r0, r4
 800fb58:	4629      	mov	r1, r5
 800fb5a:	f7f0 fd85 	bl	8000668 <__aeabi_dmul>
 800fb5e:	4602      	mov	r2, r0
 800fb60:	460b      	mov	r3, r1
 800fb62:	4640      	mov	r0, r8
 800fb64:	4649      	mov	r1, r9
 800fb66:	f7f0 fd7f 	bl	8000668 <__aeabi_dmul>
 800fb6a:	a33f      	add	r3, pc, #252	; (adr r3, 800fc68 <__ieee754_pow+0x3e0>)
 800fb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb70:	f7f0 fd7a 	bl	8000668 <__aeabi_dmul>
 800fb74:	4602      	mov	r2, r0
 800fb76:	460b      	mov	r3, r1
 800fb78:	4650      	mov	r0, sl
 800fb7a:	4659      	mov	r1, fp
 800fb7c:	f7f0 fbbc 	bl	80002f8 <__aeabi_dsub>
 800fb80:	4602      	mov	r2, r0
 800fb82:	460b      	mov	r3, r1
 800fb84:	4680      	mov	r8, r0
 800fb86:	4689      	mov	r9, r1
 800fb88:	4630      	mov	r0, r6
 800fb8a:	4639      	mov	r1, r7
 800fb8c:	f7f0 fbb6 	bl	80002fc <__adddf3>
 800fb90:	2000      	movs	r0, #0
 800fb92:	4632      	mov	r2, r6
 800fb94:	463b      	mov	r3, r7
 800fb96:	4604      	mov	r4, r0
 800fb98:	460d      	mov	r5, r1
 800fb9a:	f7f0 fbad 	bl	80002f8 <__aeabi_dsub>
 800fb9e:	4602      	mov	r2, r0
 800fba0:	460b      	mov	r3, r1
 800fba2:	4640      	mov	r0, r8
 800fba4:	4649      	mov	r1, r9
 800fba6:	f7f0 fba7 	bl	80002f8 <__aeabi_dsub>
 800fbaa:	9b04      	ldr	r3, [sp, #16]
 800fbac:	9a06      	ldr	r2, [sp, #24]
 800fbae:	3b01      	subs	r3, #1
 800fbb0:	4313      	orrs	r3, r2
 800fbb2:	4682      	mov	sl, r0
 800fbb4:	468b      	mov	fp, r1
 800fbb6:	f040 81e7 	bne.w	800ff88 <__ieee754_pow+0x700>
 800fbba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800fc70 <__ieee754_pow+0x3e8>
 800fbbe:	eeb0 8a47 	vmov.f32	s16, s14
 800fbc2:	eef0 8a67 	vmov.f32	s17, s15
 800fbc6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fbca:	2600      	movs	r6, #0
 800fbcc:	4632      	mov	r2, r6
 800fbce:	463b      	mov	r3, r7
 800fbd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fbd4:	f7f0 fb90 	bl	80002f8 <__aeabi_dsub>
 800fbd8:	4622      	mov	r2, r4
 800fbda:	462b      	mov	r3, r5
 800fbdc:	f7f0 fd44 	bl	8000668 <__aeabi_dmul>
 800fbe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbe4:	4680      	mov	r8, r0
 800fbe6:	4689      	mov	r9, r1
 800fbe8:	4650      	mov	r0, sl
 800fbea:	4659      	mov	r1, fp
 800fbec:	f7f0 fd3c 	bl	8000668 <__aeabi_dmul>
 800fbf0:	4602      	mov	r2, r0
 800fbf2:	460b      	mov	r3, r1
 800fbf4:	4640      	mov	r0, r8
 800fbf6:	4649      	mov	r1, r9
 800fbf8:	f7f0 fb80 	bl	80002fc <__adddf3>
 800fbfc:	4632      	mov	r2, r6
 800fbfe:	463b      	mov	r3, r7
 800fc00:	4680      	mov	r8, r0
 800fc02:	4689      	mov	r9, r1
 800fc04:	4620      	mov	r0, r4
 800fc06:	4629      	mov	r1, r5
 800fc08:	f7f0 fd2e 	bl	8000668 <__aeabi_dmul>
 800fc0c:	460b      	mov	r3, r1
 800fc0e:	4604      	mov	r4, r0
 800fc10:	460d      	mov	r5, r1
 800fc12:	4602      	mov	r2, r0
 800fc14:	4649      	mov	r1, r9
 800fc16:	4640      	mov	r0, r8
 800fc18:	f7f0 fb70 	bl	80002fc <__adddf3>
 800fc1c:	4b19      	ldr	r3, [pc, #100]	; (800fc84 <__ieee754_pow+0x3fc>)
 800fc1e:	4299      	cmp	r1, r3
 800fc20:	ec45 4b19 	vmov	d9, r4, r5
 800fc24:	4606      	mov	r6, r0
 800fc26:	460f      	mov	r7, r1
 800fc28:	468b      	mov	fp, r1
 800fc2a:	f340 82f1 	ble.w	8010210 <__ieee754_pow+0x988>
 800fc2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800fc32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800fc36:	4303      	orrs	r3, r0
 800fc38:	f000 81e4 	beq.w	8010004 <__ieee754_pow+0x77c>
 800fc3c:	ec51 0b18 	vmov	r0, r1, d8
 800fc40:	2200      	movs	r2, #0
 800fc42:	2300      	movs	r3, #0
 800fc44:	f7f0 ff82 	bl	8000b4c <__aeabi_dcmplt>
 800fc48:	3800      	subs	r0, #0
 800fc4a:	bf18      	it	ne
 800fc4c:	2001      	movne	r0, #1
 800fc4e:	e72b      	b.n	800faa8 <__ieee754_pow+0x220>
 800fc50:	60000000 	.word	0x60000000
 800fc54:	3ff71547 	.word	0x3ff71547
 800fc58:	f85ddf44 	.word	0xf85ddf44
 800fc5c:	3e54ae0b 	.word	0x3e54ae0b
 800fc60:	55555555 	.word	0x55555555
 800fc64:	3fd55555 	.word	0x3fd55555
 800fc68:	652b82fe 	.word	0x652b82fe
 800fc6c:	3ff71547 	.word	0x3ff71547
 800fc70:	00000000 	.word	0x00000000
 800fc74:	bff00000 	.word	0xbff00000
 800fc78:	3ff00000 	.word	0x3ff00000
 800fc7c:	3fd00000 	.word	0x3fd00000
 800fc80:	3fe00000 	.word	0x3fe00000
 800fc84:	408fffff 	.word	0x408fffff
 800fc88:	4bd5      	ldr	r3, [pc, #852]	; (800ffe0 <__ieee754_pow+0x758>)
 800fc8a:	402b      	ands	r3, r5
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	b92b      	cbnz	r3, 800fc9c <__ieee754_pow+0x414>
 800fc90:	4bd4      	ldr	r3, [pc, #848]	; (800ffe4 <__ieee754_pow+0x75c>)
 800fc92:	f7f0 fce9 	bl	8000668 <__aeabi_dmul>
 800fc96:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800fc9a:	460c      	mov	r4, r1
 800fc9c:	1523      	asrs	r3, r4, #20
 800fc9e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fca2:	4413      	add	r3, r2
 800fca4:	9305      	str	r3, [sp, #20]
 800fca6:	4bd0      	ldr	r3, [pc, #832]	; (800ffe8 <__ieee754_pow+0x760>)
 800fca8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800fcac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800fcb0:	429c      	cmp	r4, r3
 800fcb2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fcb6:	dd08      	ble.n	800fcca <__ieee754_pow+0x442>
 800fcb8:	4bcc      	ldr	r3, [pc, #816]	; (800ffec <__ieee754_pow+0x764>)
 800fcba:	429c      	cmp	r4, r3
 800fcbc:	f340 8162 	ble.w	800ff84 <__ieee754_pow+0x6fc>
 800fcc0:	9b05      	ldr	r3, [sp, #20]
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	9305      	str	r3, [sp, #20]
 800fcc6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800fcca:	2400      	movs	r4, #0
 800fccc:	00e3      	lsls	r3, r4, #3
 800fcce:	9307      	str	r3, [sp, #28]
 800fcd0:	4bc7      	ldr	r3, [pc, #796]	; (800fff0 <__ieee754_pow+0x768>)
 800fcd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fcd6:	ed93 7b00 	vldr	d7, [r3]
 800fcda:	4629      	mov	r1, r5
 800fcdc:	ec53 2b17 	vmov	r2, r3, d7
 800fce0:	eeb0 9a47 	vmov.f32	s18, s14
 800fce4:	eef0 9a67 	vmov.f32	s19, s15
 800fce8:	4682      	mov	sl, r0
 800fcea:	f7f0 fb05 	bl	80002f8 <__aeabi_dsub>
 800fcee:	4652      	mov	r2, sl
 800fcf0:	4606      	mov	r6, r0
 800fcf2:	460f      	mov	r7, r1
 800fcf4:	462b      	mov	r3, r5
 800fcf6:	ec51 0b19 	vmov	r0, r1, d9
 800fcfa:	f7f0 faff 	bl	80002fc <__adddf3>
 800fcfe:	4602      	mov	r2, r0
 800fd00:	460b      	mov	r3, r1
 800fd02:	2000      	movs	r0, #0
 800fd04:	49bb      	ldr	r1, [pc, #748]	; (800fff4 <__ieee754_pow+0x76c>)
 800fd06:	f7f0 fdd9 	bl	80008bc <__aeabi_ddiv>
 800fd0a:	ec41 0b1a 	vmov	d10, r0, r1
 800fd0e:	4602      	mov	r2, r0
 800fd10:	460b      	mov	r3, r1
 800fd12:	4630      	mov	r0, r6
 800fd14:	4639      	mov	r1, r7
 800fd16:	f7f0 fca7 	bl	8000668 <__aeabi_dmul>
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd20:	9302      	str	r3, [sp, #8]
 800fd22:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fd26:	46ab      	mov	fp, r5
 800fd28:	106d      	asrs	r5, r5, #1
 800fd2a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fd2e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800fd32:	ec41 0b18 	vmov	d8, r0, r1
 800fd36:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	4640      	mov	r0, r8
 800fd3e:	4649      	mov	r1, r9
 800fd40:	4614      	mov	r4, r2
 800fd42:	461d      	mov	r5, r3
 800fd44:	f7f0 fc90 	bl	8000668 <__aeabi_dmul>
 800fd48:	4602      	mov	r2, r0
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	4630      	mov	r0, r6
 800fd4e:	4639      	mov	r1, r7
 800fd50:	f7f0 fad2 	bl	80002f8 <__aeabi_dsub>
 800fd54:	ec53 2b19 	vmov	r2, r3, d9
 800fd58:	4606      	mov	r6, r0
 800fd5a:	460f      	mov	r7, r1
 800fd5c:	4620      	mov	r0, r4
 800fd5e:	4629      	mov	r1, r5
 800fd60:	f7f0 faca 	bl	80002f8 <__aeabi_dsub>
 800fd64:	4602      	mov	r2, r0
 800fd66:	460b      	mov	r3, r1
 800fd68:	4650      	mov	r0, sl
 800fd6a:	4659      	mov	r1, fp
 800fd6c:	f7f0 fac4 	bl	80002f8 <__aeabi_dsub>
 800fd70:	4642      	mov	r2, r8
 800fd72:	464b      	mov	r3, r9
 800fd74:	f7f0 fc78 	bl	8000668 <__aeabi_dmul>
 800fd78:	4602      	mov	r2, r0
 800fd7a:	460b      	mov	r3, r1
 800fd7c:	4630      	mov	r0, r6
 800fd7e:	4639      	mov	r1, r7
 800fd80:	f7f0 faba 	bl	80002f8 <__aeabi_dsub>
 800fd84:	ec53 2b1a 	vmov	r2, r3, d10
 800fd88:	f7f0 fc6e 	bl	8000668 <__aeabi_dmul>
 800fd8c:	ec53 2b18 	vmov	r2, r3, d8
 800fd90:	ec41 0b19 	vmov	d9, r0, r1
 800fd94:	ec51 0b18 	vmov	r0, r1, d8
 800fd98:	f7f0 fc66 	bl	8000668 <__aeabi_dmul>
 800fd9c:	a37c      	add	r3, pc, #496	; (adr r3, 800ff90 <__ieee754_pow+0x708>)
 800fd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda2:	4604      	mov	r4, r0
 800fda4:	460d      	mov	r5, r1
 800fda6:	f7f0 fc5f 	bl	8000668 <__aeabi_dmul>
 800fdaa:	a37b      	add	r3, pc, #492	; (adr r3, 800ff98 <__ieee754_pow+0x710>)
 800fdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb0:	f7f0 faa4 	bl	80002fc <__adddf3>
 800fdb4:	4622      	mov	r2, r4
 800fdb6:	462b      	mov	r3, r5
 800fdb8:	f7f0 fc56 	bl	8000668 <__aeabi_dmul>
 800fdbc:	a378      	add	r3, pc, #480	; (adr r3, 800ffa0 <__ieee754_pow+0x718>)
 800fdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc2:	f7f0 fa9b 	bl	80002fc <__adddf3>
 800fdc6:	4622      	mov	r2, r4
 800fdc8:	462b      	mov	r3, r5
 800fdca:	f7f0 fc4d 	bl	8000668 <__aeabi_dmul>
 800fdce:	a376      	add	r3, pc, #472	; (adr r3, 800ffa8 <__ieee754_pow+0x720>)
 800fdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd4:	f7f0 fa92 	bl	80002fc <__adddf3>
 800fdd8:	4622      	mov	r2, r4
 800fdda:	462b      	mov	r3, r5
 800fddc:	f7f0 fc44 	bl	8000668 <__aeabi_dmul>
 800fde0:	a373      	add	r3, pc, #460	; (adr r3, 800ffb0 <__ieee754_pow+0x728>)
 800fde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde6:	f7f0 fa89 	bl	80002fc <__adddf3>
 800fdea:	4622      	mov	r2, r4
 800fdec:	462b      	mov	r3, r5
 800fdee:	f7f0 fc3b 	bl	8000668 <__aeabi_dmul>
 800fdf2:	a371      	add	r3, pc, #452	; (adr r3, 800ffb8 <__ieee754_pow+0x730>)
 800fdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf8:	f7f0 fa80 	bl	80002fc <__adddf3>
 800fdfc:	4622      	mov	r2, r4
 800fdfe:	4606      	mov	r6, r0
 800fe00:	460f      	mov	r7, r1
 800fe02:	462b      	mov	r3, r5
 800fe04:	4620      	mov	r0, r4
 800fe06:	4629      	mov	r1, r5
 800fe08:	f7f0 fc2e 	bl	8000668 <__aeabi_dmul>
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	460b      	mov	r3, r1
 800fe10:	4630      	mov	r0, r6
 800fe12:	4639      	mov	r1, r7
 800fe14:	f7f0 fc28 	bl	8000668 <__aeabi_dmul>
 800fe18:	4642      	mov	r2, r8
 800fe1a:	4604      	mov	r4, r0
 800fe1c:	460d      	mov	r5, r1
 800fe1e:	464b      	mov	r3, r9
 800fe20:	ec51 0b18 	vmov	r0, r1, d8
 800fe24:	f7f0 fa6a 	bl	80002fc <__adddf3>
 800fe28:	ec53 2b19 	vmov	r2, r3, d9
 800fe2c:	f7f0 fc1c 	bl	8000668 <__aeabi_dmul>
 800fe30:	4622      	mov	r2, r4
 800fe32:	462b      	mov	r3, r5
 800fe34:	f7f0 fa62 	bl	80002fc <__adddf3>
 800fe38:	4642      	mov	r2, r8
 800fe3a:	4682      	mov	sl, r0
 800fe3c:	468b      	mov	fp, r1
 800fe3e:	464b      	mov	r3, r9
 800fe40:	4640      	mov	r0, r8
 800fe42:	4649      	mov	r1, r9
 800fe44:	f7f0 fc10 	bl	8000668 <__aeabi_dmul>
 800fe48:	4b6b      	ldr	r3, [pc, #428]	; (800fff8 <__ieee754_pow+0x770>)
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	4606      	mov	r6, r0
 800fe4e:	460f      	mov	r7, r1
 800fe50:	f7f0 fa54 	bl	80002fc <__adddf3>
 800fe54:	4652      	mov	r2, sl
 800fe56:	465b      	mov	r3, fp
 800fe58:	f7f0 fa50 	bl	80002fc <__adddf3>
 800fe5c:	2000      	movs	r0, #0
 800fe5e:	4604      	mov	r4, r0
 800fe60:	460d      	mov	r5, r1
 800fe62:	4602      	mov	r2, r0
 800fe64:	460b      	mov	r3, r1
 800fe66:	4640      	mov	r0, r8
 800fe68:	4649      	mov	r1, r9
 800fe6a:	f7f0 fbfd 	bl	8000668 <__aeabi_dmul>
 800fe6e:	4b62      	ldr	r3, [pc, #392]	; (800fff8 <__ieee754_pow+0x770>)
 800fe70:	4680      	mov	r8, r0
 800fe72:	4689      	mov	r9, r1
 800fe74:	2200      	movs	r2, #0
 800fe76:	4620      	mov	r0, r4
 800fe78:	4629      	mov	r1, r5
 800fe7a:	f7f0 fa3d 	bl	80002f8 <__aeabi_dsub>
 800fe7e:	4632      	mov	r2, r6
 800fe80:	463b      	mov	r3, r7
 800fe82:	f7f0 fa39 	bl	80002f8 <__aeabi_dsub>
 800fe86:	4602      	mov	r2, r0
 800fe88:	460b      	mov	r3, r1
 800fe8a:	4650      	mov	r0, sl
 800fe8c:	4659      	mov	r1, fp
 800fe8e:	f7f0 fa33 	bl	80002f8 <__aeabi_dsub>
 800fe92:	ec53 2b18 	vmov	r2, r3, d8
 800fe96:	f7f0 fbe7 	bl	8000668 <__aeabi_dmul>
 800fe9a:	4622      	mov	r2, r4
 800fe9c:	4606      	mov	r6, r0
 800fe9e:	460f      	mov	r7, r1
 800fea0:	462b      	mov	r3, r5
 800fea2:	ec51 0b19 	vmov	r0, r1, d9
 800fea6:	f7f0 fbdf 	bl	8000668 <__aeabi_dmul>
 800feaa:	4602      	mov	r2, r0
 800feac:	460b      	mov	r3, r1
 800feae:	4630      	mov	r0, r6
 800feb0:	4639      	mov	r1, r7
 800feb2:	f7f0 fa23 	bl	80002fc <__adddf3>
 800feb6:	4606      	mov	r6, r0
 800feb8:	460f      	mov	r7, r1
 800feba:	4602      	mov	r2, r0
 800febc:	460b      	mov	r3, r1
 800febe:	4640      	mov	r0, r8
 800fec0:	4649      	mov	r1, r9
 800fec2:	f7f0 fa1b 	bl	80002fc <__adddf3>
 800fec6:	a33e      	add	r3, pc, #248	; (adr r3, 800ffc0 <__ieee754_pow+0x738>)
 800fec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fecc:	2000      	movs	r0, #0
 800fece:	4604      	mov	r4, r0
 800fed0:	460d      	mov	r5, r1
 800fed2:	f7f0 fbc9 	bl	8000668 <__aeabi_dmul>
 800fed6:	4642      	mov	r2, r8
 800fed8:	ec41 0b18 	vmov	d8, r0, r1
 800fedc:	464b      	mov	r3, r9
 800fede:	4620      	mov	r0, r4
 800fee0:	4629      	mov	r1, r5
 800fee2:	f7f0 fa09 	bl	80002f8 <__aeabi_dsub>
 800fee6:	4602      	mov	r2, r0
 800fee8:	460b      	mov	r3, r1
 800feea:	4630      	mov	r0, r6
 800feec:	4639      	mov	r1, r7
 800feee:	f7f0 fa03 	bl	80002f8 <__aeabi_dsub>
 800fef2:	a335      	add	r3, pc, #212	; (adr r3, 800ffc8 <__ieee754_pow+0x740>)
 800fef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef8:	f7f0 fbb6 	bl	8000668 <__aeabi_dmul>
 800fefc:	a334      	add	r3, pc, #208	; (adr r3, 800ffd0 <__ieee754_pow+0x748>)
 800fefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff02:	4606      	mov	r6, r0
 800ff04:	460f      	mov	r7, r1
 800ff06:	4620      	mov	r0, r4
 800ff08:	4629      	mov	r1, r5
 800ff0a:	f7f0 fbad 	bl	8000668 <__aeabi_dmul>
 800ff0e:	4602      	mov	r2, r0
 800ff10:	460b      	mov	r3, r1
 800ff12:	4630      	mov	r0, r6
 800ff14:	4639      	mov	r1, r7
 800ff16:	f7f0 f9f1 	bl	80002fc <__adddf3>
 800ff1a:	9a07      	ldr	r2, [sp, #28]
 800ff1c:	4b37      	ldr	r3, [pc, #220]	; (800fffc <__ieee754_pow+0x774>)
 800ff1e:	4413      	add	r3, r2
 800ff20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff24:	f7f0 f9ea 	bl	80002fc <__adddf3>
 800ff28:	4682      	mov	sl, r0
 800ff2a:	9805      	ldr	r0, [sp, #20]
 800ff2c:	468b      	mov	fp, r1
 800ff2e:	f7f0 fb31 	bl	8000594 <__aeabi_i2d>
 800ff32:	9a07      	ldr	r2, [sp, #28]
 800ff34:	4b32      	ldr	r3, [pc, #200]	; (8010000 <__ieee754_pow+0x778>)
 800ff36:	4413      	add	r3, r2
 800ff38:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ff3c:	4606      	mov	r6, r0
 800ff3e:	460f      	mov	r7, r1
 800ff40:	4652      	mov	r2, sl
 800ff42:	465b      	mov	r3, fp
 800ff44:	ec51 0b18 	vmov	r0, r1, d8
 800ff48:	f7f0 f9d8 	bl	80002fc <__adddf3>
 800ff4c:	4642      	mov	r2, r8
 800ff4e:	464b      	mov	r3, r9
 800ff50:	f7f0 f9d4 	bl	80002fc <__adddf3>
 800ff54:	4632      	mov	r2, r6
 800ff56:	463b      	mov	r3, r7
 800ff58:	f7f0 f9d0 	bl	80002fc <__adddf3>
 800ff5c:	2000      	movs	r0, #0
 800ff5e:	4632      	mov	r2, r6
 800ff60:	463b      	mov	r3, r7
 800ff62:	4604      	mov	r4, r0
 800ff64:	460d      	mov	r5, r1
 800ff66:	f7f0 f9c7 	bl	80002f8 <__aeabi_dsub>
 800ff6a:	4642      	mov	r2, r8
 800ff6c:	464b      	mov	r3, r9
 800ff6e:	f7f0 f9c3 	bl	80002f8 <__aeabi_dsub>
 800ff72:	ec53 2b18 	vmov	r2, r3, d8
 800ff76:	f7f0 f9bf 	bl	80002f8 <__aeabi_dsub>
 800ff7a:	4602      	mov	r2, r0
 800ff7c:	460b      	mov	r3, r1
 800ff7e:	4650      	mov	r0, sl
 800ff80:	4659      	mov	r1, fp
 800ff82:	e610      	b.n	800fba6 <__ieee754_pow+0x31e>
 800ff84:	2401      	movs	r4, #1
 800ff86:	e6a1      	b.n	800fccc <__ieee754_pow+0x444>
 800ff88:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ffd8 <__ieee754_pow+0x750>
 800ff8c:	e617      	b.n	800fbbe <__ieee754_pow+0x336>
 800ff8e:	bf00      	nop
 800ff90:	4a454eef 	.word	0x4a454eef
 800ff94:	3fca7e28 	.word	0x3fca7e28
 800ff98:	93c9db65 	.word	0x93c9db65
 800ff9c:	3fcd864a 	.word	0x3fcd864a
 800ffa0:	a91d4101 	.word	0xa91d4101
 800ffa4:	3fd17460 	.word	0x3fd17460
 800ffa8:	518f264d 	.word	0x518f264d
 800ffac:	3fd55555 	.word	0x3fd55555
 800ffb0:	db6fabff 	.word	0xdb6fabff
 800ffb4:	3fdb6db6 	.word	0x3fdb6db6
 800ffb8:	33333303 	.word	0x33333303
 800ffbc:	3fe33333 	.word	0x3fe33333
 800ffc0:	e0000000 	.word	0xe0000000
 800ffc4:	3feec709 	.word	0x3feec709
 800ffc8:	dc3a03fd 	.word	0xdc3a03fd
 800ffcc:	3feec709 	.word	0x3feec709
 800ffd0:	145b01f5 	.word	0x145b01f5
 800ffd4:	be3e2fe0 	.word	0xbe3e2fe0
 800ffd8:	00000000 	.word	0x00000000
 800ffdc:	3ff00000 	.word	0x3ff00000
 800ffe0:	7ff00000 	.word	0x7ff00000
 800ffe4:	43400000 	.word	0x43400000
 800ffe8:	0003988e 	.word	0x0003988e
 800ffec:	000bb679 	.word	0x000bb679
 800fff0:	08015e90 	.word	0x08015e90
 800fff4:	3ff00000 	.word	0x3ff00000
 800fff8:	40080000 	.word	0x40080000
 800fffc:	08015eb0 	.word	0x08015eb0
 8010000:	08015ea0 	.word	0x08015ea0
 8010004:	a3b5      	add	r3, pc, #724	; (adr r3, 80102dc <__ieee754_pow+0xa54>)
 8010006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801000a:	4640      	mov	r0, r8
 801000c:	4649      	mov	r1, r9
 801000e:	f7f0 f975 	bl	80002fc <__adddf3>
 8010012:	4622      	mov	r2, r4
 8010014:	ec41 0b1a 	vmov	d10, r0, r1
 8010018:	462b      	mov	r3, r5
 801001a:	4630      	mov	r0, r6
 801001c:	4639      	mov	r1, r7
 801001e:	f7f0 f96b 	bl	80002f8 <__aeabi_dsub>
 8010022:	4602      	mov	r2, r0
 8010024:	460b      	mov	r3, r1
 8010026:	ec51 0b1a 	vmov	r0, r1, d10
 801002a:	f7f0 fdad 	bl	8000b88 <__aeabi_dcmpgt>
 801002e:	2800      	cmp	r0, #0
 8010030:	f47f ae04 	bne.w	800fc3c <__ieee754_pow+0x3b4>
 8010034:	4aa4      	ldr	r2, [pc, #656]	; (80102c8 <__ieee754_pow+0xa40>)
 8010036:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801003a:	4293      	cmp	r3, r2
 801003c:	f340 8108 	ble.w	8010250 <__ieee754_pow+0x9c8>
 8010040:	151b      	asrs	r3, r3, #20
 8010042:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010046:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801004a:	fa4a f303 	asr.w	r3, sl, r3
 801004e:	445b      	add	r3, fp
 8010050:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010054:	4e9d      	ldr	r6, [pc, #628]	; (80102cc <__ieee754_pow+0xa44>)
 8010056:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801005a:	4116      	asrs	r6, r2
 801005c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010060:	2000      	movs	r0, #0
 8010062:	ea23 0106 	bic.w	r1, r3, r6
 8010066:	f1c2 0214 	rsb	r2, r2, #20
 801006a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801006e:	fa4a fa02 	asr.w	sl, sl, r2
 8010072:	f1bb 0f00 	cmp.w	fp, #0
 8010076:	4602      	mov	r2, r0
 8010078:	460b      	mov	r3, r1
 801007a:	4620      	mov	r0, r4
 801007c:	4629      	mov	r1, r5
 801007e:	bfb8      	it	lt
 8010080:	f1ca 0a00 	rsblt	sl, sl, #0
 8010084:	f7f0 f938 	bl	80002f8 <__aeabi_dsub>
 8010088:	ec41 0b19 	vmov	d9, r0, r1
 801008c:	4642      	mov	r2, r8
 801008e:	464b      	mov	r3, r9
 8010090:	ec51 0b19 	vmov	r0, r1, d9
 8010094:	f7f0 f932 	bl	80002fc <__adddf3>
 8010098:	a37b      	add	r3, pc, #492	; (adr r3, 8010288 <__ieee754_pow+0xa00>)
 801009a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801009e:	2000      	movs	r0, #0
 80100a0:	4604      	mov	r4, r0
 80100a2:	460d      	mov	r5, r1
 80100a4:	f7f0 fae0 	bl	8000668 <__aeabi_dmul>
 80100a8:	ec53 2b19 	vmov	r2, r3, d9
 80100ac:	4606      	mov	r6, r0
 80100ae:	460f      	mov	r7, r1
 80100b0:	4620      	mov	r0, r4
 80100b2:	4629      	mov	r1, r5
 80100b4:	f7f0 f920 	bl	80002f8 <__aeabi_dsub>
 80100b8:	4602      	mov	r2, r0
 80100ba:	460b      	mov	r3, r1
 80100bc:	4640      	mov	r0, r8
 80100be:	4649      	mov	r1, r9
 80100c0:	f7f0 f91a 	bl	80002f8 <__aeabi_dsub>
 80100c4:	a372      	add	r3, pc, #456	; (adr r3, 8010290 <__ieee754_pow+0xa08>)
 80100c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ca:	f7f0 facd 	bl	8000668 <__aeabi_dmul>
 80100ce:	a372      	add	r3, pc, #456	; (adr r3, 8010298 <__ieee754_pow+0xa10>)
 80100d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d4:	4680      	mov	r8, r0
 80100d6:	4689      	mov	r9, r1
 80100d8:	4620      	mov	r0, r4
 80100da:	4629      	mov	r1, r5
 80100dc:	f7f0 fac4 	bl	8000668 <__aeabi_dmul>
 80100e0:	4602      	mov	r2, r0
 80100e2:	460b      	mov	r3, r1
 80100e4:	4640      	mov	r0, r8
 80100e6:	4649      	mov	r1, r9
 80100e8:	f7f0 f908 	bl	80002fc <__adddf3>
 80100ec:	4604      	mov	r4, r0
 80100ee:	460d      	mov	r5, r1
 80100f0:	4602      	mov	r2, r0
 80100f2:	460b      	mov	r3, r1
 80100f4:	4630      	mov	r0, r6
 80100f6:	4639      	mov	r1, r7
 80100f8:	f7f0 f900 	bl	80002fc <__adddf3>
 80100fc:	4632      	mov	r2, r6
 80100fe:	463b      	mov	r3, r7
 8010100:	4680      	mov	r8, r0
 8010102:	4689      	mov	r9, r1
 8010104:	f7f0 f8f8 	bl	80002f8 <__aeabi_dsub>
 8010108:	4602      	mov	r2, r0
 801010a:	460b      	mov	r3, r1
 801010c:	4620      	mov	r0, r4
 801010e:	4629      	mov	r1, r5
 8010110:	f7f0 f8f2 	bl	80002f8 <__aeabi_dsub>
 8010114:	4642      	mov	r2, r8
 8010116:	4606      	mov	r6, r0
 8010118:	460f      	mov	r7, r1
 801011a:	464b      	mov	r3, r9
 801011c:	4640      	mov	r0, r8
 801011e:	4649      	mov	r1, r9
 8010120:	f7f0 faa2 	bl	8000668 <__aeabi_dmul>
 8010124:	a35e      	add	r3, pc, #376	; (adr r3, 80102a0 <__ieee754_pow+0xa18>)
 8010126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801012a:	4604      	mov	r4, r0
 801012c:	460d      	mov	r5, r1
 801012e:	f7f0 fa9b 	bl	8000668 <__aeabi_dmul>
 8010132:	a35d      	add	r3, pc, #372	; (adr r3, 80102a8 <__ieee754_pow+0xa20>)
 8010134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010138:	f7f0 f8de 	bl	80002f8 <__aeabi_dsub>
 801013c:	4622      	mov	r2, r4
 801013e:	462b      	mov	r3, r5
 8010140:	f7f0 fa92 	bl	8000668 <__aeabi_dmul>
 8010144:	a35a      	add	r3, pc, #360	; (adr r3, 80102b0 <__ieee754_pow+0xa28>)
 8010146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014a:	f7f0 f8d7 	bl	80002fc <__adddf3>
 801014e:	4622      	mov	r2, r4
 8010150:	462b      	mov	r3, r5
 8010152:	f7f0 fa89 	bl	8000668 <__aeabi_dmul>
 8010156:	a358      	add	r3, pc, #352	; (adr r3, 80102b8 <__ieee754_pow+0xa30>)
 8010158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801015c:	f7f0 f8cc 	bl	80002f8 <__aeabi_dsub>
 8010160:	4622      	mov	r2, r4
 8010162:	462b      	mov	r3, r5
 8010164:	f7f0 fa80 	bl	8000668 <__aeabi_dmul>
 8010168:	a355      	add	r3, pc, #340	; (adr r3, 80102c0 <__ieee754_pow+0xa38>)
 801016a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801016e:	f7f0 f8c5 	bl	80002fc <__adddf3>
 8010172:	4622      	mov	r2, r4
 8010174:	462b      	mov	r3, r5
 8010176:	f7f0 fa77 	bl	8000668 <__aeabi_dmul>
 801017a:	4602      	mov	r2, r0
 801017c:	460b      	mov	r3, r1
 801017e:	4640      	mov	r0, r8
 8010180:	4649      	mov	r1, r9
 8010182:	f7f0 f8b9 	bl	80002f8 <__aeabi_dsub>
 8010186:	4604      	mov	r4, r0
 8010188:	460d      	mov	r5, r1
 801018a:	4602      	mov	r2, r0
 801018c:	460b      	mov	r3, r1
 801018e:	4640      	mov	r0, r8
 8010190:	4649      	mov	r1, r9
 8010192:	f7f0 fa69 	bl	8000668 <__aeabi_dmul>
 8010196:	2200      	movs	r2, #0
 8010198:	ec41 0b19 	vmov	d9, r0, r1
 801019c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80101a0:	4620      	mov	r0, r4
 80101a2:	4629      	mov	r1, r5
 80101a4:	f7f0 f8a8 	bl	80002f8 <__aeabi_dsub>
 80101a8:	4602      	mov	r2, r0
 80101aa:	460b      	mov	r3, r1
 80101ac:	ec51 0b19 	vmov	r0, r1, d9
 80101b0:	f7f0 fb84 	bl	80008bc <__aeabi_ddiv>
 80101b4:	4632      	mov	r2, r6
 80101b6:	4604      	mov	r4, r0
 80101b8:	460d      	mov	r5, r1
 80101ba:	463b      	mov	r3, r7
 80101bc:	4640      	mov	r0, r8
 80101be:	4649      	mov	r1, r9
 80101c0:	f7f0 fa52 	bl	8000668 <__aeabi_dmul>
 80101c4:	4632      	mov	r2, r6
 80101c6:	463b      	mov	r3, r7
 80101c8:	f7f0 f898 	bl	80002fc <__adddf3>
 80101cc:	4602      	mov	r2, r0
 80101ce:	460b      	mov	r3, r1
 80101d0:	4620      	mov	r0, r4
 80101d2:	4629      	mov	r1, r5
 80101d4:	f7f0 f890 	bl	80002f8 <__aeabi_dsub>
 80101d8:	4642      	mov	r2, r8
 80101da:	464b      	mov	r3, r9
 80101dc:	f7f0 f88c 	bl	80002f8 <__aeabi_dsub>
 80101e0:	460b      	mov	r3, r1
 80101e2:	4602      	mov	r2, r0
 80101e4:	493a      	ldr	r1, [pc, #232]	; (80102d0 <__ieee754_pow+0xa48>)
 80101e6:	2000      	movs	r0, #0
 80101e8:	f7f0 f886 	bl	80002f8 <__aeabi_dsub>
 80101ec:	ec41 0b10 	vmov	d0, r0, r1
 80101f0:	ee10 3a90 	vmov	r3, s1
 80101f4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80101f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80101fc:	da2b      	bge.n	8010256 <__ieee754_pow+0x9ce>
 80101fe:	4650      	mov	r0, sl
 8010200:	f000 f966 	bl	80104d0 <scalbn>
 8010204:	ec51 0b10 	vmov	r0, r1, d0
 8010208:	ec53 2b18 	vmov	r2, r3, d8
 801020c:	f7ff bbed 	b.w	800f9ea <__ieee754_pow+0x162>
 8010210:	4b30      	ldr	r3, [pc, #192]	; (80102d4 <__ieee754_pow+0xa4c>)
 8010212:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010216:	429e      	cmp	r6, r3
 8010218:	f77f af0c 	ble.w	8010034 <__ieee754_pow+0x7ac>
 801021c:	4b2e      	ldr	r3, [pc, #184]	; (80102d8 <__ieee754_pow+0xa50>)
 801021e:	440b      	add	r3, r1
 8010220:	4303      	orrs	r3, r0
 8010222:	d009      	beq.n	8010238 <__ieee754_pow+0x9b0>
 8010224:	ec51 0b18 	vmov	r0, r1, d8
 8010228:	2200      	movs	r2, #0
 801022a:	2300      	movs	r3, #0
 801022c:	f7f0 fc8e 	bl	8000b4c <__aeabi_dcmplt>
 8010230:	3800      	subs	r0, #0
 8010232:	bf18      	it	ne
 8010234:	2001      	movne	r0, #1
 8010236:	e447      	b.n	800fac8 <__ieee754_pow+0x240>
 8010238:	4622      	mov	r2, r4
 801023a:	462b      	mov	r3, r5
 801023c:	f7f0 f85c 	bl	80002f8 <__aeabi_dsub>
 8010240:	4642      	mov	r2, r8
 8010242:	464b      	mov	r3, r9
 8010244:	f7f0 fc96 	bl	8000b74 <__aeabi_dcmpge>
 8010248:	2800      	cmp	r0, #0
 801024a:	f43f aef3 	beq.w	8010034 <__ieee754_pow+0x7ac>
 801024e:	e7e9      	b.n	8010224 <__ieee754_pow+0x99c>
 8010250:	f04f 0a00 	mov.w	sl, #0
 8010254:	e71a      	b.n	801008c <__ieee754_pow+0x804>
 8010256:	ec51 0b10 	vmov	r0, r1, d0
 801025a:	4619      	mov	r1, r3
 801025c:	e7d4      	b.n	8010208 <__ieee754_pow+0x980>
 801025e:	491c      	ldr	r1, [pc, #112]	; (80102d0 <__ieee754_pow+0xa48>)
 8010260:	2000      	movs	r0, #0
 8010262:	f7ff bb30 	b.w	800f8c6 <__ieee754_pow+0x3e>
 8010266:	2000      	movs	r0, #0
 8010268:	2100      	movs	r1, #0
 801026a:	f7ff bb2c 	b.w	800f8c6 <__ieee754_pow+0x3e>
 801026e:	4630      	mov	r0, r6
 8010270:	4639      	mov	r1, r7
 8010272:	f7ff bb28 	b.w	800f8c6 <__ieee754_pow+0x3e>
 8010276:	9204      	str	r2, [sp, #16]
 8010278:	f7ff bb7a 	b.w	800f970 <__ieee754_pow+0xe8>
 801027c:	2300      	movs	r3, #0
 801027e:	f7ff bb64 	b.w	800f94a <__ieee754_pow+0xc2>
 8010282:	bf00      	nop
 8010284:	f3af 8000 	nop.w
 8010288:	00000000 	.word	0x00000000
 801028c:	3fe62e43 	.word	0x3fe62e43
 8010290:	fefa39ef 	.word	0xfefa39ef
 8010294:	3fe62e42 	.word	0x3fe62e42
 8010298:	0ca86c39 	.word	0x0ca86c39
 801029c:	be205c61 	.word	0xbe205c61
 80102a0:	72bea4d0 	.word	0x72bea4d0
 80102a4:	3e663769 	.word	0x3e663769
 80102a8:	c5d26bf1 	.word	0xc5d26bf1
 80102ac:	3ebbbd41 	.word	0x3ebbbd41
 80102b0:	af25de2c 	.word	0xaf25de2c
 80102b4:	3f11566a 	.word	0x3f11566a
 80102b8:	16bebd93 	.word	0x16bebd93
 80102bc:	3f66c16c 	.word	0x3f66c16c
 80102c0:	5555553e 	.word	0x5555553e
 80102c4:	3fc55555 	.word	0x3fc55555
 80102c8:	3fe00000 	.word	0x3fe00000
 80102cc:	000fffff 	.word	0x000fffff
 80102d0:	3ff00000 	.word	0x3ff00000
 80102d4:	4090cbff 	.word	0x4090cbff
 80102d8:	3f6f3400 	.word	0x3f6f3400
 80102dc:	652b82fe 	.word	0x652b82fe
 80102e0:	3c971547 	.word	0x3c971547

080102e4 <__ieee754_sqrt>:
 80102e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102e8:	ec55 4b10 	vmov	r4, r5, d0
 80102ec:	4e55      	ldr	r6, [pc, #340]	; (8010444 <__ieee754_sqrt+0x160>)
 80102ee:	43ae      	bics	r6, r5
 80102f0:	ee10 0a10 	vmov	r0, s0
 80102f4:	ee10 3a10 	vmov	r3, s0
 80102f8:	462a      	mov	r2, r5
 80102fa:	4629      	mov	r1, r5
 80102fc:	d110      	bne.n	8010320 <__ieee754_sqrt+0x3c>
 80102fe:	ee10 2a10 	vmov	r2, s0
 8010302:	462b      	mov	r3, r5
 8010304:	f7f0 f9b0 	bl	8000668 <__aeabi_dmul>
 8010308:	4602      	mov	r2, r0
 801030a:	460b      	mov	r3, r1
 801030c:	4620      	mov	r0, r4
 801030e:	4629      	mov	r1, r5
 8010310:	f7ef fff4 	bl	80002fc <__adddf3>
 8010314:	4604      	mov	r4, r0
 8010316:	460d      	mov	r5, r1
 8010318:	ec45 4b10 	vmov	d0, r4, r5
 801031c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010320:	2d00      	cmp	r5, #0
 8010322:	dc10      	bgt.n	8010346 <__ieee754_sqrt+0x62>
 8010324:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010328:	4330      	orrs	r0, r6
 801032a:	d0f5      	beq.n	8010318 <__ieee754_sqrt+0x34>
 801032c:	b15d      	cbz	r5, 8010346 <__ieee754_sqrt+0x62>
 801032e:	ee10 2a10 	vmov	r2, s0
 8010332:	462b      	mov	r3, r5
 8010334:	ee10 0a10 	vmov	r0, s0
 8010338:	f7ef ffde 	bl	80002f8 <__aeabi_dsub>
 801033c:	4602      	mov	r2, r0
 801033e:	460b      	mov	r3, r1
 8010340:	f7f0 fabc 	bl	80008bc <__aeabi_ddiv>
 8010344:	e7e6      	b.n	8010314 <__ieee754_sqrt+0x30>
 8010346:	1512      	asrs	r2, r2, #20
 8010348:	d074      	beq.n	8010434 <__ieee754_sqrt+0x150>
 801034a:	07d4      	lsls	r4, r2, #31
 801034c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010350:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8010354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010358:	bf5e      	ittt	pl
 801035a:	0fda      	lsrpl	r2, r3, #31
 801035c:	005b      	lslpl	r3, r3, #1
 801035e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8010362:	2400      	movs	r4, #0
 8010364:	0fda      	lsrs	r2, r3, #31
 8010366:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801036a:	107f      	asrs	r7, r7, #1
 801036c:	005b      	lsls	r3, r3, #1
 801036e:	2516      	movs	r5, #22
 8010370:	4620      	mov	r0, r4
 8010372:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010376:	1886      	adds	r6, r0, r2
 8010378:	428e      	cmp	r6, r1
 801037a:	bfde      	ittt	le
 801037c:	1b89      	suble	r1, r1, r6
 801037e:	18b0      	addle	r0, r6, r2
 8010380:	18a4      	addle	r4, r4, r2
 8010382:	0049      	lsls	r1, r1, #1
 8010384:	3d01      	subs	r5, #1
 8010386:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801038a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801038e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010392:	d1f0      	bne.n	8010376 <__ieee754_sqrt+0x92>
 8010394:	462a      	mov	r2, r5
 8010396:	f04f 0e20 	mov.w	lr, #32
 801039a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801039e:	4281      	cmp	r1, r0
 80103a0:	eb06 0c05 	add.w	ip, r6, r5
 80103a4:	dc02      	bgt.n	80103ac <__ieee754_sqrt+0xc8>
 80103a6:	d113      	bne.n	80103d0 <__ieee754_sqrt+0xec>
 80103a8:	459c      	cmp	ip, r3
 80103aa:	d811      	bhi.n	80103d0 <__ieee754_sqrt+0xec>
 80103ac:	f1bc 0f00 	cmp.w	ip, #0
 80103b0:	eb0c 0506 	add.w	r5, ip, r6
 80103b4:	da43      	bge.n	801043e <__ieee754_sqrt+0x15a>
 80103b6:	2d00      	cmp	r5, #0
 80103b8:	db41      	blt.n	801043e <__ieee754_sqrt+0x15a>
 80103ba:	f100 0801 	add.w	r8, r0, #1
 80103be:	1a09      	subs	r1, r1, r0
 80103c0:	459c      	cmp	ip, r3
 80103c2:	bf88      	it	hi
 80103c4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80103c8:	eba3 030c 	sub.w	r3, r3, ip
 80103cc:	4432      	add	r2, r6
 80103ce:	4640      	mov	r0, r8
 80103d0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80103d4:	f1be 0e01 	subs.w	lr, lr, #1
 80103d8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80103dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80103e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80103e4:	d1db      	bne.n	801039e <__ieee754_sqrt+0xba>
 80103e6:	430b      	orrs	r3, r1
 80103e8:	d006      	beq.n	80103f8 <__ieee754_sqrt+0x114>
 80103ea:	1c50      	adds	r0, r2, #1
 80103ec:	bf13      	iteet	ne
 80103ee:	3201      	addne	r2, #1
 80103f0:	3401      	addeq	r4, #1
 80103f2:	4672      	moveq	r2, lr
 80103f4:	f022 0201 	bicne.w	r2, r2, #1
 80103f8:	1063      	asrs	r3, r4, #1
 80103fa:	0852      	lsrs	r2, r2, #1
 80103fc:	07e1      	lsls	r1, r4, #31
 80103fe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010402:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010406:	bf48      	it	mi
 8010408:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801040c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010410:	4614      	mov	r4, r2
 8010412:	e781      	b.n	8010318 <__ieee754_sqrt+0x34>
 8010414:	0ad9      	lsrs	r1, r3, #11
 8010416:	3815      	subs	r0, #21
 8010418:	055b      	lsls	r3, r3, #21
 801041a:	2900      	cmp	r1, #0
 801041c:	d0fa      	beq.n	8010414 <__ieee754_sqrt+0x130>
 801041e:	02cd      	lsls	r5, r1, #11
 8010420:	d50a      	bpl.n	8010438 <__ieee754_sqrt+0x154>
 8010422:	f1c2 0420 	rsb	r4, r2, #32
 8010426:	fa23 f404 	lsr.w	r4, r3, r4
 801042a:	1e55      	subs	r5, r2, #1
 801042c:	4093      	lsls	r3, r2
 801042e:	4321      	orrs	r1, r4
 8010430:	1b42      	subs	r2, r0, r5
 8010432:	e78a      	b.n	801034a <__ieee754_sqrt+0x66>
 8010434:	4610      	mov	r0, r2
 8010436:	e7f0      	b.n	801041a <__ieee754_sqrt+0x136>
 8010438:	0049      	lsls	r1, r1, #1
 801043a:	3201      	adds	r2, #1
 801043c:	e7ef      	b.n	801041e <__ieee754_sqrt+0x13a>
 801043e:	4680      	mov	r8, r0
 8010440:	e7bd      	b.n	80103be <__ieee754_sqrt+0xda>
 8010442:	bf00      	nop
 8010444:	7ff00000 	.word	0x7ff00000

08010448 <with_errno>:
 8010448:	b570      	push	{r4, r5, r6, lr}
 801044a:	4604      	mov	r4, r0
 801044c:	460d      	mov	r5, r1
 801044e:	4616      	mov	r6, r2
 8010450:	f000 f8c4 	bl	80105dc <__errno>
 8010454:	4629      	mov	r1, r5
 8010456:	6006      	str	r6, [r0, #0]
 8010458:	4620      	mov	r0, r4
 801045a:	bd70      	pop	{r4, r5, r6, pc}

0801045c <xflow>:
 801045c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801045e:	4614      	mov	r4, r2
 8010460:	461d      	mov	r5, r3
 8010462:	b108      	cbz	r0, 8010468 <xflow+0xc>
 8010464:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010468:	e9cd 2300 	strd	r2, r3, [sp]
 801046c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010470:	4620      	mov	r0, r4
 8010472:	4629      	mov	r1, r5
 8010474:	f7f0 f8f8 	bl	8000668 <__aeabi_dmul>
 8010478:	2222      	movs	r2, #34	; 0x22
 801047a:	b003      	add	sp, #12
 801047c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010480:	f7ff bfe2 	b.w	8010448 <with_errno>

08010484 <__math_uflow>:
 8010484:	b508      	push	{r3, lr}
 8010486:	2200      	movs	r2, #0
 8010488:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801048c:	f7ff ffe6 	bl	801045c <xflow>
 8010490:	ec41 0b10 	vmov	d0, r0, r1
 8010494:	bd08      	pop	{r3, pc}

08010496 <__math_oflow>:
 8010496:	b508      	push	{r3, lr}
 8010498:	2200      	movs	r2, #0
 801049a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801049e:	f7ff ffdd 	bl	801045c <xflow>
 80104a2:	ec41 0b10 	vmov	d0, r0, r1
 80104a6:	bd08      	pop	{r3, pc}

080104a8 <fabs>:
 80104a8:	ec51 0b10 	vmov	r0, r1, d0
 80104ac:	ee10 2a10 	vmov	r2, s0
 80104b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80104b4:	ec43 2b10 	vmov	d0, r2, r3
 80104b8:	4770      	bx	lr

080104ba <finite>:
 80104ba:	b082      	sub	sp, #8
 80104bc:	ed8d 0b00 	vstr	d0, [sp]
 80104c0:	9801      	ldr	r0, [sp, #4]
 80104c2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80104c6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80104ca:	0fc0      	lsrs	r0, r0, #31
 80104cc:	b002      	add	sp, #8
 80104ce:	4770      	bx	lr

080104d0 <scalbn>:
 80104d0:	b570      	push	{r4, r5, r6, lr}
 80104d2:	ec55 4b10 	vmov	r4, r5, d0
 80104d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80104da:	4606      	mov	r6, r0
 80104dc:	462b      	mov	r3, r5
 80104de:	b99a      	cbnz	r2, 8010508 <scalbn+0x38>
 80104e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80104e4:	4323      	orrs	r3, r4
 80104e6:	d036      	beq.n	8010556 <scalbn+0x86>
 80104e8:	4b39      	ldr	r3, [pc, #228]	; (80105d0 <scalbn+0x100>)
 80104ea:	4629      	mov	r1, r5
 80104ec:	ee10 0a10 	vmov	r0, s0
 80104f0:	2200      	movs	r2, #0
 80104f2:	f7f0 f8b9 	bl	8000668 <__aeabi_dmul>
 80104f6:	4b37      	ldr	r3, [pc, #220]	; (80105d4 <scalbn+0x104>)
 80104f8:	429e      	cmp	r6, r3
 80104fa:	4604      	mov	r4, r0
 80104fc:	460d      	mov	r5, r1
 80104fe:	da10      	bge.n	8010522 <scalbn+0x52>
 8010500:	a32b      	add	r3, pc, #172	; (adr r3, 80105b0 <scalbn+0xe0>)
 8010502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010506:	e03a      	b.n	801057e <scalbn+0xae>
 8010508:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801050c:	428a      	cmp	r2, r1
 801050e:	d10c      	bne.n	801052a <scalbn+0x5a>
 8010510:	ee10 2a10 	vmov	r2, s0
 8010514:	4620      	mov	r0, r4
 8010516:	4629      	mov	r1, r5
 8010518:	f7ef fef0 	bl	80002fc <__adddf3>
 801051c:	4604      	mov	r4, r0
 801051e:	460d      	mov	r5, r1
 8010520:	e019      	b.n	8010556 <scalbn+0x86>
 8010522:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010526:	460b      	mov	r3, r1
 8010528:	3a36      	subs	r2, #54	; 0x36
 801052a:	4432      	add	r2, r6
 801052c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010530:	428a      	cmp	r2, r1
 8010532:	dd08      	ble.n	8010546 <scalbn+0x76>
 8010534:	2d00      	cmp	r5, #0
 8010536:	a120      	add	r1, pc, #128	; (adr r1, 80105b8 <scalbn+0xe8>)
 8010538:	e9d1 0100 	ldrd	r0, r1, [r1]
 801053c:	da1c      	bge.n	8010578 <scalbn+0xa8>
 801053e:	a120      	add	r1, pc, #128	; (adr r1, 80105c0 <scalbn+0xf0>)
 8010540:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010544:	e018      	b.n	8010578 <scalbn+0xa8>
 8010546:	2a00      	cmp	r2, #0
 8010548:	dd08      	ble.n	801055c <scalbn+0x8c>
 801054a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801054e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010552:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010556:	ec45 4b10 	vmov	d0, r4, r5
 801055a:	bd70      	pop	{r4, r5, r6, pc}
 801055c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010560:	da19      	bge.n	8010596 <scalbn+0xc6>
 8010562:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010566:	429e      	cmp	r6, r3
 8010568:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801056c:	dd0a      	ble.n	8010584 <scalbn+0xb4>
 801056e:	a112      	add	r1, pc, #72	; (adr r1, 80105b8 <scalbn+0xe8>)
 8010570:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d1e2      	bne.n	801053e <scalbn+0x6e>
 8010578:	a30f      	add	r3, pc, #60	; (adr r3, 80105b8 <scalbn+0xe8>)
 801057a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801057e:	f7f0 f873 	bl	8000668 <__aeabi_dmul>
 8010582:	e7cb      	b.n	801051c <scalbn+0x4c>
 8010584:	a10a      	add	r1, pc, #40	; (adr r1, 80105b0 <scalbn+0xe0>)
 8010586:	e9d1 0100 	ldrd	r0, r1, [r1]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d0b8      	beq.n	8010500 <scalbn+0x30>
 801058e:	a10e      	add	r1, pc, #56	; (adr r1, 80105c8 <scalbn+0xf8>)
 8010590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010594:	e7b4      	b.n	8010500 <scalbn+0x30>
 8010596:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801059a:	3236      	adds	r2, #54	; 0x36
 801059c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80105a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80105a4:	4620      	mov	r0, r4
 80105a6:	4b0c      	ldr	r3, [pc, #48]	; (80105d8 <scalbn+0x108>)
 80105a8:	2200      	movs	r2, #0
 80105aa:	e7e8      	b.n	801057e <scalbn+0xae>
 80105ac:	f3af 8000 	nop.w
 80105b0:	c2f8f359 	.word	0xc2f8f359
 80105b4:	01a56e1f 	.word	0x01a56e1f
 80105b8:	8800759c 	.word	0x8800759c
 80105bc:	7e37e43c 	.word	0x7e37e43c
 80105c0:	8800759c 	.word	0x8800759c
 80105c4:	fe37e43c 	.word	0xfe37e43c
 80105c8:	c2f8f359 	.word	0xc2f8f359
 80105cc:	81a56e1f 	.word	0x81a56e1f
 80105d0:	43500000 	.word	0x43500000
 80105d4:	ffff3cb0 	.word	0xffff3cb0
 80105d8:	3c900000 	.word	0x3c900000

080105dc <__errno>:
 80105dc:	4b01      	ldr	r3, [pc, #4]	; (80105e4 <__errno+0x8>)
 80105de:	6818      	ldr	r0, [r3, #0]
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop
 80105e4:	20000700 	.word	0x20000700

080105e8 <__libc_init_array>:
 80105e8:	b570      	push	{r4, r5, r6, lr}
 80105ea:	4d0d      	ldr	r5, [pc, #52]	; (8010620 <__libc_init_array+0x38>)
 80105ec:	4c0d      	ldr	r4, [pc, #52]	; (8010624 <__libc_init_array+0x3c>)
 80105ee:	1b64      	subs	r4, r4, r5
 80105f0:	10a4      	asrs	r4, r4, #2
 80105f2:	2600      	movs	r6, #0
 80105f4:	42a6      	cmp	r6, r4
 80105f6:	d109      	bne.n	801060c <__libc_init_array+0x24>
 80105f8:	4d0b      	ldr	r5, [pc, #44]	; (8010628 <__libc_init_array+0x40>)
 80105fa:	4c0c      	ldr	r4, [pc, #48]	; (801062c <__libc_init_array+0x44>)
 80105fc:	f004 fd38 	bl	8015070 <_init>
 8010600:	1b64      	subs	r4, r4, r5
 8010602:	10a4      	asrs	r4, r4, #2
 8010604:	2600      	movs	r6, #0
 8010606:	42a6      	cmp	r6, r4
 8010608:	d105      	bne.n	8010616 <__libc_init_array+0x2e>
 801060a:	bd70      	pop	{r4, r5, r6, pc}
 801060c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010610:	4798      	blx	r3
 8010612:	3601      	adds	r6, #1
 8010614:	e7ee      	b.n	80105f4 <__libc_init_array+0xc>
 8010616:	f855 3b04 	ldr.w	r3, [r5], #4
 801061a:	4798      	blx	r3
 801061c:	3601      	adds	r6, #1
 801061e:	e7f2      	b.n	8010606 <__libc_init_array+0x1e>
 8010620:	080163c8 	.word	0x080163c8
 8010624:	080163c8 	.word	0x080163c8
 8010628:	080163c8 	.word	0x080163c8
 801062c:	080163cc 	.word	0x080163cc

08010630 <malloc>:
 8010630:	4b02      	ldr	r3, [pc, #8]	; (801063c <malloc+0xc>)
 8010632:	4601      	mov	r1, r0
 8010634:	6818      	ldr	r0, [r3, #0]
 8010636:	f000 b87f 	b.w	8010738 <_malloc_r>
 801063a:	bf00      	nop
 801063c:	20000700 	.word	0x20000700

08010640 <free>:
 8010640:	4b02      	ldr	r3, [pc, #8]	; (801064c <free+0xc>)
 8010642:	4601      	mov	r1, r0
 8010644:	6818      	ldr	r0, [r3, #0]
 8010646:	f000 b80b 	b.w	8010660 <_free_r>
 801064a:	bf00      	nop
 801064c:	20000700 	.word	0x20000700

08010650 <memset>:
 8010650:	4402      	add	r2, r0
 8010652:	4603      	mov	r3, r0
 8010654:	4293      	cmp	r3, r2
 8010656:	d100      	bne.n	801065a <memset+0xa>
 8010658:	4770      	bx	lr
 801065a:	f803 1b01 	strb.w	r1, [r3], #1
 801065e:	e7f9      	b.n	8010654 <memset+0x4>

08010660 <_free_r>:
 8010660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010662:	2900      	cmp	r1, #0
 8010664:	d044      	beq.n	80106f0 <_free_r+0x90>
 8010666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801066a:	9001      	str	r0, [sp, #4]
 801066c:	2b00      	cmp	r3, #0
 801066e:	f1a1 0404 	sub.w	r4, r1, #4
 8010672:	bfb8      	it	lt
 8010674:	18e4      	addlt	r4, r4, r3
 8010676:	f003 f905 	bl	8013884 <__malloc_lock>
 801067a:	4a1e      	ldr	r2, [pc, #120]	; (80106f4 <_free_r+0x94>)
 801067c:	9801      	ldr	r0, [sp, #4]
 801067e:	6813      	ldr	r3, [r2, #0]
 8010680:	b933      	cbnz	r3, 8010690 <_free_r+0x30>
 8010682:	6063      	str	r3, [r4, #4]
 8010684:	6014      	str	r4, [r2, #0]
 8010686:	b003      	add	sp, #12
 8010688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801068c:	f003 b900 	b.w	8013890 <__malloc_unlock>
 8010690:	42a3      	cmp	r3, r4
 8010692:	d908      	bls.n	80106a6 <_free_r+0x46>
 8010694:	6825      	ldr	r5, [r4, #0]
 8010696:	1961      	adds	r1, r4, r5
 8010698:	428b      	cmp	r3, r1
 801069a:	bf01      	itttt	eq
 801069c:	6819      	ldreq	r1, [r3, #0]
 801069e:	685b      	ldreq	r3, [r3, #4]
 80106a0:	1949      	addeq	r1, r1, r5
 80106a2:	6021      	streq	r1, [r4, #0]
 80106a4:	e7ed      	b.n	8010682 <_free_r+0x22>
 80106a6:	461a      	mov	r2, r3
 80106a8:	685b      	ldr	r3, [r3, #4]
 80106aa:	b10b      	cbz	r3, 80106b0 <_free_r+0x50>
 80106ac:	42a3      	cmp	r3, r4
 80106ae:	d9fa      	bls.n	80106a6 <_free_r+0x46>
 80106b0:	6811      	ldr	r1, [r2, #0]
 80106b2:	1855      	adds	r5, r2, r1
 80106b4:	42a5      	cmp	r5, r4
 80106b6:	d10b      	bne.n	80106d0 <_free_r+0x70>
 80106b8:	6824      	ldr	r4, [r4, #0]
 80106ba:	4421      	add	r1, r4
 80106bc:	1854      	adds	r4, r2, r1
 80106be:	42a3      	cmp	r3, r4
 80106c0:	6011      	str	r1, [r2, #0]
 80106c2:	d1e0      	bne.n	8010686 <_free_r+0x26>
 80106c4:	681c      	ldr	r4, [r3, #0]
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	6053      	str	r3, [r2, #4]
 80106ca:	4421      	add	r1, r4
 80106cc:	6011      	str	r1, [r2, #0]
 80106ce:	e7da      	b.n	8010686 <_free_r+0x26>
 80106d0:	d902      	bls.n	80106d8 <_free_r+0x78>
 80106d2:	230c      	movs	r3, #12
 80106d4:	6003      	str	r3, [r0, #0]
 80106d6:	e7d6      	b.n	8010686 <_free_r+0x26>
 80106d8:	6825      	ldr	r5, [r4, #0]
 80106da:	1961      	adds	r1, r4, r5
 80106dc:	428b      	cmp	r3, r1
 80106de:	bf04      	itt	eq
 80106e0:	6819      	ldreq	r1, [r3, #0]
 80106e2:	685b      	ldreq	r3, [r3, #4]
 80106e4:	6063      	str	r3, [r4, #4]
 80106e6:	bf04      	itt	eq
 80106e8:	1949      	addeq	r1, r1, r5
 80106ea:	6021      	streq	r1, [r4, #0]
 80106ec:	6054      	str	r4, [r2, #4]
 80106ee:	e7ca      	b.n	8010686 <_free_r+0x26>
 80106f0:	b003      	add	sp, #12
 80106f2:	bd30      	pop	{r4, r5, pc}
 80106f4:	20012a34 	.word	0x20012a34

080106f8 <sbrk_aligned>:
 80106f8:	b570      	push	{r4, r5, r6, lr}
 80106fa:	4e0e      	ldr	r6, [pc, #56]	; (8010734 <sbrk_aligned+0x3c>)
 80106fc:	460c      	mov	r4, r1
 80106fe:	6831      	ldr	r1, [r6, #0]
 8010700:	4605      	mov	r5, r0
 8010702:	b911      	cbnz	r1, 801070a <sbrk_aligned+0x12>
 8010704:	f000 ff72 	bl	80115ec <_sbrk_r>
 8010708:	6030      	str	r0, [r6, #0]
 801070a:	4621      	mov	r1, r4
 801070c:	4628      	mov	r0, r5
 801070e:	f000 ff6d 	bl	80115ec <_sbrk_r>
 8010712:	1c43      	adds	r3, r0, #1
 8010714:	d00a      	beq.n	801072c <sbrk_aligned+0x34>
 8010716:	1cc4      	adds	r4, r0, #3
 8010718:	f024 0403 	bic.w	r4, r4, #3
 801071c:	42a0      	cmp	r0, r4
 801071e:	d007      	beq.n	8010730 <sbrk_aligned+0x38>
 8010720:	1a21      	subs	r1, r4, r0
 8010722:	4628      	mov	r0, r5
 8010724:	f000 ff62 	bl	80115ec <_sbrk_r>
 8010728:	3001      	adds	r0, #1
 801072a:	d101      	bne.n	8010730 <sbrk_aligned+0x38>
 801072c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010730:	4620      	mov	r0, r4
 8010732:	bd70      	pop	{r4, r5, r6, pc}
 8010734:	20012a38 	.word	0x20012a38

08010738 <_malloc_r>:
 8010738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801073c:	1ccd      	adds	r5, r1, #3
 801073e:	f025 0503 	bic.w	r5, r5, #3
 8010742:	3508      	adds	r5, #8
 8010744:	2d0c      	cmp	r5, #12
 8010746:	bf38      	it	cc
 8010748:	250c      	movcc	r5, #12
 801074a:	2d00      	cmp	r5, #0
 801074c:	4607      	mov	r7, r0
 801074e:	db01      	blt.n	8010754 <_malloc_r+0x1c>
 8010750:	42a9      	cmp	r1, r5
 8010752:	d905      	bls.n	8010760 <_malloc_r+0x28>
 8010754:	230c      	movs	r3, #12
 8010756:	603b      	str	r3, [r7, #0]
 8010758:	2600      	movs	r6, #0
 801075a:	4630      	mov	r0, r6
 801075c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010760:	4e2e      	ldr	r6, [pc, #184]	; (801081c <_malloc_r+0xe4>)
 8010762:	f003 f88f 	bl	8013884 <__malloc_lock>
 8010766:	6833      	ldr	r3, [r6, #0]
 8010768:	461c      	mov	r4, r3
 801076a:	bb34      	cbnz	r4, 80107ba <_malloc_r+0x82>
 801076c:	4629      	mov	r1, r5
 801076e:	4638      	mov	r0, r7
 8010770:	f7ff ffc2 	bl	80106f8 <sbrk_aligned>
 8010774:	1c43      	adds	r3, r0, #1
 8010776:	4604      	mov	r4, r0
 8010778:	d14d      	bne.n	8010816 <_malloc_r+0xde>
 801077a:	6834      	ldr	r4, [r6, #0]
 801077c:	4626      	mov	r6, r4
 801077e:	2e00      	cmp	r6, #0
 8010780:	d140      	bne.n	8010804 <_malloc_r+0xcc>
 8010782:	6823      	ldr	r3, [r4, #0]
 8010784:	4631      	mov	r1, r6
 8010786:	4638      	mov	r0, r7
 8010788:	eb04 0803 	add.w	r8, r4, r3
 801078c:	f000 ff2e 	bl	80115ec <_sbrk_r>
 8010790:	4580      	cmp	r8, r0
 8010792:	d13a      	bne.n	801080a <_malloc_r+0xd2>
 8010794:	6821      	ldr	r1, [r4, #0]
 8010796:	3503      	adds	r5, #3
 8010798:	1a6d      	subs	r5, r5, r1
 801079a:	f025 0503 	bic.w	r5, r5, #3
 801079e:	3508      	adds	r5, #8
 80107a0:	2d0c      	cmp	r5, #12
 80107a2:	bf38      	it	cc
 80107a4:	250c      	movcc	r5, #12
 80107a6:	4629      	mov	r1, r5
 80107a8:	4638      	mov	r0, r7
 80107aa:	f7ff ffa5 	bl	80106f8 <sbrk_aligned>
 80107ae:	3001      	adds	r0, #1
 80107b0:	d02b      	beq.n	801080a <_malloc_r+0xd2>
 80107b2:	6823      	ldr	r3, [r4, #0]
 80107b4:	442b      	add	r3, r5
 80107b6:	6023      	str	r3, [r4, #0]
 80107b8:	e00e      	b.n	80107d8 <_malloc_r+0xa0>
 80107ba:	6822      	ldr	r2, [r4, #0]
 80107bc:	1b52      	subs	r2, r2, r5
 80107be:	d41e      	bmi.n	80107fe <_malloc_r+0xc6>
 80107c0:	2a0b      	cmp	r2, #11
 80107c2:	d916      	bls.n	80107f2 <_malloc_r+0xba>
 80107c4:	1961      	adds	r1, r4, r5
 80107c6:	42a3      	cmp	r3, r4
 80107c8:	6025      	str	r5, [r4, #0]
 80107ca:	bf18      	it	ne
 80107cc:	6059      	strne	r1, [r3, #4]
 80107ce:	6863      	ldr	r3, [r4, #4]
 80107d0:	bf08      	it	eq
 80107d2:	6031      	streq	r1, [r6, #0]
 80107d4:	5162      	str	r2, [r4, r5]
 80107d6:	604b      	str	r3, [r1, #4]
 80107d8:	4638      	mov	r0, r7
 80107da:	f104 060b 	add.w	r6, r4, #11
 80107de:	f003 f857 	bl	8013890 <__malloc_unlock>
 80107e2:	f026 0607 	bic.w	r6, r6, #7
 80107e6:	1d23      	adds	r3, r4, #4
 80107e8:	1af2      	subs	r2, r6, r3
 80107ea:	d0b6      	beq.n	801075a <_malloc_r+0x22>
 80107ec:	1b9b      	subs	r3, r3, r6
 80107ee:	50a3      	str	r3, [r4, r2]
 80107f0:	e7b3      	b.n	801075a <_malloc_r+0x22>
 80107f2:	6862      	ldr	r2, [r4, #4]
 80107f4:	42a3      	cmp	r3, r4
 80107f6:	bf0c      	ite	eq
 80107f8:	6032      	streq	r2, [r6, #0]
 80107fa:	605a      	strne	r2, [r3, #4]
 80107fc:	e7ec      	b.n	80107d8 <_malloc_r+0xa0>
 80107fe:	4623      	mov	r3, r4
 8010800:	6864      	ldr	r4, [r4, #4]
 8010802:	e7b2      	b.n	801076a <_malloc_r+0x32>
 8010804:	4634      	mov	r4, r6
 8010806:	6876      	ldr	r6, [r6, #4]
 8010808:	e7b9      	b.n	801077e <_malloc_r+0x46>
 801080a:	230c      	movs	r3, #12
 801080c:	603b      	str	r3, [r7, #0]
 801080e:	4638      	mov	r0, r7
 8010810:	f003 f83e 	bl	8013890 <__malloc_unlock>
 8010814:	e7a1      	b.n	801075a <_malloc_r+0x22>
 8010816:	6025      	str	r5, [r4, #0]
 8010818:	e7de      	b.n	80107d8 <_malloc_r+0xa0>
 801081a:	bf00      	nop
 801081c:	20012a34 	.word	0x20012a34

08010820 <__cvt>:
 8010820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010824:	ec55 4b10 	vmov	r4, r5, d0
 8010828:	2d00      	cmp	r5, #0
 801082a:	460e      	mov	r6, r1
 801082c:	4619      	mov	r1, r3
 801082e:	462b      	mov	r3, r5
 8010830:	bfbb      	ittet	lt
 8010832:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010836:	461d      	movlt	r5, r3
 8010838:	2300      	movge	r3, #0
 801083a:	232d      	movlt	r3, #45	; 0x2d
 801083c:	700b      	strb	r3, [r1, #0]
 801083e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010840:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010844:	4691      	mov	r9, r2
 8010846:	f023 0820 	bic.w	r8, r3, #32
 801084a:	bfbc      	itt	lt
 801084c:	4622      	movlt	r2, r4
 801084e:	4614      	movlt	r4, r2
 8010850:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010854:	d005      	beq.n	8010862 <__cvt+0x42>
 8010856:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801085a:	d100      	bne.n	801085e <__cvt+0x3e>
 801085c:	3601      	adds	r6, #1
 801085e:	2102      	movs	r1, #2
 8010860:	e000      	b.n	8010864 <__cvt+0x44>
 8010862:	2103      	movs	r1, #3
 8010864:	ab03      	add	r3, sp, #12
 8010866:	9301      	str	r3, [sp, #4]
 8010868:	ab02      	add	r3, sp, #8
 801086a:	9300      	str	r3, [sp, #0]
 801086c:	ec45 4b10 	vmov	d0, r4, r5
 8010870:	4653      	mov	r3, sl
 8010872:	4632      	mov	r2, r6
 8010874:	f001 fe60 	bl	8012538 <_dtoa_r>
 8010878:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801087c:	4607      	mov	r7, r0
 801087e:	d102      	bne.n	8010886 <__cvt+0x66>
 8010880:	f019 0f01 	tst.w	r9, #1
 8010884:	d022      	beq.n	80108cc <__cvt+0xac>
 8010886:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801088a:	eb07 0906 	add.w	r9, r7, r6
 801088e:	d110      	bne.n	80108b2 <__cvt+0x92>
 8010890:	783b      	ldrb	r3, [r7, #0]
 8010892:	2b30      	cmp	r3, #48	; 0x30
 8010894:	d10a      	bne.n	80108ac <__cvt+0x8c>
 8010896:	2200      	movs	r2, #0
 8010898:	2300      	movs	r3, #0
 801089a:	4620      	mov	r0, r4
 801089c:	4629      	mov	r1, r5
 801089e:	f7f0 f94b 	bl	8000b38 <__aeabi_dcmpeq>
 80108a2:	b918      	cbnz	r0, 80108ac <__cvt+0x8c>
 80108a4:	f1c6 0601 	rsb	r6, r6, #1
 80108a8:	f8ca 6000 	str.w	r6, [sl]
 80108ac:	f8da 3000 	ldr.w	r3, [sl]
 80108b0:	4499      	add	r9, r3
 80108b2:	2200      	movs	r2, #0
 80108b4:	2300      	movs	r3, #0
 80108b6:	4620      	mov	r0, r4
 80108b8:	4629      	mov	r1, r5
 80108ba:	f7f0 f93d 	bl	8000b38 <__aeabi_dcmpeq>
 80108be:	b108      	cbz	r0, 80108c4 <__cvt+0xa4>
 80108c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80108c4:	2230      	movs	r2, #48	; 0x30
 80108c6:	9b03      	ldr	r3, [sp, #12]
 80108c8:	454b      	cmp	r3, r9
 80108ca:	d307      	bcc.n	80108dc <__cvt+0xbc>
 80108cc:	9b03      	ldr	r3, [sp, #12]
 80108ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80108d0:	1bdb      	subs	r3, r3, r7
 80108d2:	4638      	mov	r0, r7
 80108d4:	6013      	str	r3, [r2, #0]
 80108d6:	b004      	add	sp, #16
 80108d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108dc:	1c59      	adds	r1, r3, #1
 80108de:	9103      	str	r1, [sp, #12]
 80108e0:	701a      	strb	r2, [r3, #0]
 80108e2:	e7f0      	b.n	80108c6 <__cvt+0xa6>

080108e4 <__exponent>:
 80108e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80108e6:	4603      	mov	r3, r0
 80108e8:	2900      	cmp	r1, #0
 80108ea:	bfb8      	it	lt
 80108ec:	4249      	neglt	r1, r1
 80108ee:	f803 2b02 	strb.w	r2, [r3], #2
 80108f2:	bfb4      	ite	lt
 80108f4:	222d      	movlt	r2, #45	; 0x2d
 80108f6:	222b      	movge	r2, #43	; 0x2b
 80108f8:	2909      	cmp	r1, #9
 80108fa:	7042      	strb	r2, [r0, #1]
 80108fc:	dd2a      	ble.n	8010954 <__exponent+0x70>
 80108fe:	f10d 0407 	add.w	r4, sp, #7
 8010902:	46a4      	mov	ip, r4
 8010904:	270a      	movs	r7, #10
 8010906:	46a6      	mov	lr, r4
 8010908:	460a      	mov	r2, r1
 801090a:	fb91 f6f7 	sdiv	r6, r1, r7
 801090e:	fb07 1516 	mls	r5, r7, r6, r1
 8010912:	3530      	adds	r5, #48	; 0x30
 8010914:	2a63      	cmp	r2, #99	; 0x63
 8010916:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801091a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801091e:	4631      	mov	r1, r6
 8010920:	dcf1      	bgt.n	8010906 <__exponent+0x22>
 8010922:	3130      	adds	r1, #48	; 0x30
 8010924:	f1ae 0502 	sub.w	r5, lr, #2
 8010928:	f804 1c01 	strb.w	r1, [r4, #-1]
 801092c:	1c44      	adds	r4, r0, #1
 801092e:	4629      	mov	r1, r5
 8010930:	4561      	cmp	r1, ip
 8010932:	d30a      	bcc.n	801094a <__exponent+0x66>
 8010934:	f10d 0209 	add.w	r2, sp, #9
 8010938:	eba2 020e 	sub.w	r2, r2, lr
 801093c:	4565      	cmp	r5, ip
 801093e:	bf88      	it	hi
 8010940:	2200      	movhi	r2, #0
 8010942:	4413      	add	r3, r2
 8010944:	1a18      	subs	r0, r3, r0
 8010946:	b003      	add	sp, #12
 8010948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801094a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801094e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010952:	e7ed      	b.n	8010930 <__exponent+0x4c>
 8010954:	2330      	movs	r3, #48	; 0x30
 8010956:	3130      	adds	r1, #48	; 0x30
 8010958:	7083      	strb	r3, [r0, #2]
 801095a:	70c1      	strb	r1, [r0, #3]
 801095c:	1d03      	adds	r3, r0, #4
 801095e:	e7f1      	b.n	8010944 <__exponent+0x60>

08010960 <_printf_float>:
 8010960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010964:	ed2d 8b02 	vpush	{d8}
 8010968:	b08d      	sub	sp, #52	; 0x34
 801096a:	460c      	mov	r4, r1
 801096c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010970:	4616      	mov	r6, r2
 8010972:	461f      	mov	r7, r3
 8010974:	4605      	mov	r5, r0
 8010976:	f002 ff61 	bl	801383c <_localeconv_r>
 801097a:	f8d0 a000 	ldr.w	sl, [r0]
 801097e:	4650      	mov	r0, sl
 8010980:	f7ef fc58 	bl	8000234 <strlen>
 8010984:	2300      	movs	r3, #0
 8010986:	930a      	str	r3, [sp, #40]	; 0x28
 8010988:	6823      	ldr	r3, [r4, #0]
 801098a:	9305      	str	r3, [sp, #20]
 801098c:	f8d8 3000 	ldr.w	r3, [r8]
 8010990:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010994:	3307      	adds	r3, #7
 8010996:	f023 0307 	bic.w	r3, r3, #7
 801099a:	f103 0208 	add.w	r2, r3, #8
 801099e:	f8c8 2000 	str.w	r2, [r8]
 80109a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80109aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80109ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80109b2:	9307      	str	r3, [sp, #28]
 80109b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80109b8:	ee08 0a10 	vmov	s16, r0
 80109bc:	4b9f      	ldr	r3, [pc, #636]	; (8010c3c <_printf_float+0x2dc>)
 80109be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80109c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80109c6:	f7f0 f8e9 	bl	8000b9c <__aeabi_dcmpun>
 80109ca:	bb88      	cbnz	r0, 8010a30 <_printf_float+0xd0>
 80109cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80109d0:	4b9a      	ldr	r3, [pc, #616]	; (8010c3c <_printf_float+0x2dc>)
 80109d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80109d6:	f7f0 f8c3 	bl	8000b60 <__aeabi_dcmple>
 80109da:	bb48      	cbnz	r0, 8010a30 <_printf_float+0xd0>
 80109dc:	2200      	movs	r2, #0
 80109de:	2300      	movs	r3, #0
 80109e0:	4640      	mov	r0, r8
 80109e2:	4649      	mov	r1, r9
 80109e4:	f7f0 f8b2 	bl	8000b4c <__aeabi_dcmplt>
 80109e8:	b110      	cbz	r0, 80109f0 <_printf_float+0x90>
 80109ea:	232d      	movs	r3, #45	; 0x2d
 80109ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80109f0:	4b93      	ldr	r3, [pc, #588]	; (8010c40 <_printf_float+0x2e0>)
 80109f2:	4894      	ldr	r0, [pc, #592]	; (8010c44 <_printf_float+0x2e4>)
 80109f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80109f8:	bf94      	ite	ls
 80109fa:	4698      	movls	r8, r3
 80109fc:	4680      	movhi	r8, r0
 80109fe:	2303      	movs	r3, #3
 8010a00:	6123      	str	r3, [r4, #16]
 8010a02:	9b05      	ldr	r3, [sp, #20]
 8010a04:	f023 0204 	bic.w	r2, r3, #4
 8010a08:	6022      	str	r2, [r4, #0]
 8010a0a:	f04f 0900 	mov.w	r9, #0
 8010a0e:	9700      	str	r7, [sp, #0]
 8010a10:	4633      	mov	r3, r6
 8010a12:	aa0b      	add	r2, sp, #44	; 0x2c
 8010a14:	4621      	mov	r1, r4
 8010a16:	4628      	mov	r0, r5
 8010a18:	f000 f9d8 	bl	8010dcc <_printf_common>
 8010a1c:	3001      	adds	r0, #1
 8010a1e:	f040 8090 	bne.w	8010b42 <_printf_float+0x1e2>
 8010a22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a26:	b00d      	add	sp, #52	; 0x34
 8010a28:	ecbd 8b02 	vpop	{d8}
 8010a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a30:	4642      	mov	r2, r8
 8010a32:	464b      	mov	r3, r9
 8010a34:	4640      	mov	r0, r8
 8010a36:	4649      	mov	r1, r9
 8010a38:	f7f0 f8b0 	bl	8000b9c <__aeabi_dcmpun>
 8010a3c:	b140      	cbz	r0, 8010a50 <_printf_float+0xf0>
 8010a3e:	464b      	mov	r3, r9
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	bfbc      	itt	lt
 8010a44:	232d      	movlt	r3, #45	; 0x2d
 8010a46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010a4a:	487f      	ldr	r0, [pc, #508]	; (8010c48 <_printf_float+0x2e8>)
 8010a4c:	4b7f      	ldr	r3, [pc, #508]	; (8010c4c <_printf_float+0x2ec>)
 8010a4e:	e7d1      	b.n	80109f4 <_printf_float+0x94>
 8010a50:	6863      	ldr	r3, [r4, #4]
 8010a52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010a56:	9206      	str	r2, [sp, #24]
 8010a58:	1c5a      	adds	r2, r3, #1
 8010a5a:	d13f      	bne.n	8010adc <_printf_float+0x17c>
 8010a5c:	2306      	movs	r3, #6
 8010a5e:	6063      	str	r3, [r4, #4]
 8010a60:	9b05      	ldr	r3, [sp, #20]
 8010a62:	6861      	ldr	r1, [r4, #4]
 8010a64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010a68:	2300      	movs	r3, #0
 8010a6a:	9303      	str	r3, [sp, #12]
 8010a6c:	ab0a      	add	r3, sp, #40	; 0x28
 8010a6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010a72:	ab09      	add	r3, sp, #36	; 0x24
 8010a74:	ec49 8b10 	vmov	d0, r8, r9
 8010a78:	9300      	str	r3, [sp, #0]
 8010a7a:	6022      	str	r2, [r4, #0]
 8010a7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010a80:	4628      	mov	r0, r5
 8010a82:	f7ff fecd 	bl	8010820 <__cvt>
 8010a86:	9b06      	ldr	r3, [sp, #24]
 8010a88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a8a:	2b47      	cmp	r3, #71	; 0x47
 8010a8c:	4680      	mov	r8, r0
 8010a8e:	d108      	bne.n	8010aa2 <_printf_float+0x142>
 8010a90:	1cc8      	adds	r0, r1, #3
 8010a92:	db02      	blt.n	8010a9a <_printf_float+0x13a>
 8010a94:	6863      	ldr	r3, [r4, #4]
 8010a96:	4299      	cmp	r1, r3
 8010a98:	dd41      	ble.n	8010b1e <_printf_float+0x1be>
 8010a9a:	f1ab 0b02 	sub.w	fp, fp, #2
 8010a9e:	fa5f fb8b 	uxtb.w	fp, fp
 8010aa2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010aa6:	d820      	bhi.n	8010aea <_printf_float+0x18a>
 8010aa8:	3901      	subs	r1, #1
 8010aaa:	465a      	mov	r2, fp
 8010aac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010ab0:	9109      	str	r1, [sp, #36]	; 0x24
 8010ab2:	f7ff ff17 	bl	80108e4 <__exponent>
 8010ab6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ab8:	1813      	adds	r3, r2, r0
 8010aba:	2a01      	cmp	r2, #1
 8010abc:	4681      	mov	r9, r0
 8010abe:	6123      	str	r3, [r4, #16]
 8010ac0:	dc02      	bgt.n	8010ac8 <_printf_float+0x168>
 8010ac2:	6822      	ldr	r2, [r4, #0]
 8010ac4:	07d2      	lsls	r2, r2, #31
 8010ac6:	d501      	bpl.n	8010acc <_printf_float+0x16c>
 8010ac8:	3301      	adds	r3, #1
 8010aca:	6123      	str	r3, [r4, #16]
 8010acc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d09c      	beq.n	8010a0e <_printf_float+0xae>
 8010ad4:	232d      	movs	r3, #45	; 0x2d
 8010ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ada:	e798      	b.n	8010a0e <_printf_float+0xae>
 8010adc:	9a06      	ldr	r2, [sp, #24]
 8010ade:	2a47      	cmp	r2, #71	; 0x47
 8010ae0:	d1be      	bne.n	8010a60 <_printf_float+0x100>
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d1bc      	bne.n	8010a60 <_printf_float+0x100>
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	e7b9      	b.n	8010a5e <_printf_float+0xfe>
 8010aea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010aee:	d118      	bne.n	8010b22 <_printf_float+0x1c2>
 8010af0:	2900      	cmp	r1, #0
 8010af2:	6863      	ldr	r3, [r4, #4]
 8010af4:	dd0b      	ble.n	8010b0e <_printf_float+0x1ae>
 8010af6:	6121      	str	r1, [r4, #16]
 8010af8:	b913      	cbnz	r3, 8010b00 <_printf_float+0x1a0>
 8010afa:	6822      	ldr	r2, [r4, #0]
 8010afc:	07d0      	lsls	r0, r2, #31
 8010afe:	d502      	bpl.n	8010b06 <_printf_float+0x1a6>
 8010b00:	3301      	adds	r3, #1
 8010b02:	440b      	add	r3, r1
 8010b04:	6123      	str	r3, [r4, #16]
 8010b06:	65a1      	str	r1, [r4, #88]	; 0x58
 8010b08:	f04f 0900 	mov.w	r9, #0
 8010b0c:	e7de      	b.n	8010acc <_printf_float+0x16c>
 8010b0e:	b913      	cbnz	r3, 8010b16 <_printf_float+0x1b6>
 8010b10:	6822      	ldr	r2, [r4, #0]
 8010b12:	07d2      	lsls	r2, r2, #31
 8010b14:	d501      	bpl.n	8010b1a <_printf_float+0x1ba>
 8010b16:	3302      	adds	r3, #2
 8010b18:	e7f4      	b.n	8010b04 <_printf_float+0x1a4>
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	e7f2      	b.n	8010b04 <_printf_float+0x1a4>
 8010b1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b24:	4299      	cmp	r1, r3
 8010b26:	db05      	blt.n	8010b34 <_printf_float+0x1d4>
 8010b28:	6823      	ldr	r3, [r4, #0]
 8010b2a:	6121      	str	r1, [r4, #16]
 8010b2c:	07d8      	lsls	r0, r3, #31
 8010b2e:	d5ea      	bpl.n	8010b06 <_printf_float+0x1a6>
 8010b30:	1c4b      	adds	r3, r1, #1
 8010b32:	e7e7      	b.n	8010b04 <_printf_float+0x1a4>
 8010b34:	2900      	cmp	r1, #0
 8010b36:	bfd4      	ite	le
 8010b38:	f1c1 0202 	rsble	r2, r1, #2
 8010b3c:	2201      	movgt	r2, #1
 8010b3e:	4413      	add	r3, r2
 8010b40:	e7e0      	b.n	8010b04 <_printf_float+0x1a4>
 8010b42:	6823      	ldr	r3, [r4, #0]
 8010b44:	055a      	lsls	r2, r3, #21
 8010b46:	d407      	bmi.n	8010b58 <_printf_float+0x1f8>
 8010b48:	6923      	ldr	r3, [r4, #16]
 8010b4a:	4642      	mov	r2, r8
 8010b4c:	4631      	mov	r1, r6
 8010b4e:	4628      	mov	r0, r5
 8010b50:	47b8      	blx	r7
 8010b52:	3001      	adds	r0, #1
 8010b54:	d12c      	bne.n	8010bb0 <_printf_float+0x250>
 8010b56:	e764      	b.n	8010a22 <_printf_float+0xc2>
 8010b58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010b5c:	f240 80e0 	bls.w	8010d20 <_printf_float+0x3c0>
 8010b60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010b64:	2200      	movs	r2, #0
 8010b66:	2300      	movs	r3, #0
 8010b68:	f7ef ffe6 	bl	8000b38 <__aeabi_dcmpeq>
 8010b6c:	2800      	cmp	r0, #0
 8010b6e:	d034      	beq.n	8010bda <_printf_float+0x27a>
 8010b70:	4a37      	ldr	r2, [pc, #220]	; (8010c50 <_printf_float+0x2f0>)
 8010b72:	2301      	movs	r3, #1
 8010b74:	4631      	mov	r1, r6
 8010b76:	4628      	mov	r0, r5
 8010b78:	47b8      	blx	r7
 8010b7a:	3001      	adds	r0, #1
 8010b7c:	f43f af51 	beq.w	8010a22 <_printf_float+0xc2>
 8010b80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010b84:	429a      	cmp	r2, r3
 8010b86:	db02      	blt.n	8010b8e <_printf_float+0x22e>
 8010b88:	6823      	ldr	r3, [r4, #0]
 8010b8a:	07d8      	lsls	r0, r3, #31
 8010b8c:	d510      	bpl.n	8010bb0 <_printf_float+0x250>
 8010b8e:	ee18 3a10 	vmov	r3, s16
 8010b92:	4652      	mov	r2, sl
 8010b94:	4631      	mov	r1, r6
 8010b96:	4628      	mov	r0, r5
 8010b98:	47b8      	blx	r7
 8010b9a:	3001      	adds	r0, #1
 8010b9c:	f43f af41 	beq.w	8010a22 <_printf_float+0xc2>
 8010ba0:	f04f 0800 	mov.w	r8, #0
 8010ba4:	f104 091a 	add.w	r9, r4, #26
 8010ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010baa:	3b01      	subs	r3, #1
 8010bac:	4543      	cmp	r3, r8
 8010bae:	dc09      	bgt.n	8010bc4 <_printf_float+0x264>
 8010bb0:	6823      	ldr	r3, [r4, #0]
 8010bb2:	079b      	lsls	r3, r3, #30
 8010bb4:	f100 8105 	bmi.w	8010dc2 <_printf_float+0x462>
 8010bb8:	68e0      	ldr	r0, [r4, #12]
 8010bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010bbc:	4298      	cmp	r0, r3
 8010bbe:	bfb8      	it	lt
 8010bc0:	4618      	movlt	r0, r3
 8010bc2:	e730      	b.n	8010a26 <_printf_float+0xc6>
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	464a      	mov	r2, r9
 8010bc8:	4631      	mov	r1, r6
 8010bca:	4628      	mov	r0, r5
 8010bcc:	47b8      	blx	r7
 8010bce:	3001      	adds	r0, #1
 8010bd0:	f43f af27 	beq.w	8010a22 <_printf_float+0xc2>
 8010bd4:	f108 0801 	add.w	r8, r8, #1
 8010bd8:	e7e6      	b.n	8010ba8 <_printf_float+0x248>
 8010bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	dc39      	bgt.n	8010c54 <_printf_float+0x2f4>
 8010be0:	4a1b      	ldr	r2, [pc, #108]	; (8010c50 <_printf_float+0x2f0>)
 8010be2:	2301      	movs	r3, #1
 8010be4:	4631      	mov	r1, r6
 8010be6:	4628      	mov	r0, r5
 8010be8:	47b8      	blx	r7
 8010bea:	3001      	adds	r0, #1
 8010bec:	f43f af19 	beq.w	8010a22 <_printf_float+0xc2>
 8010bf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010bf4:	4313      	orrs	r3, r2
 8010bf6:	d102      	bne.n	8010bfe <_printf_float+0x29e>
 8010bf8:	6823      	ldr	r3, [r4, #0]
 8010bfa:	07d9      	lsls	r1, r3, #31
 8010bfc:	d5d8      	bpl.n	8010bb0 <_printf_float+0x250>
 8010bfe:	ee18 3a10 	vmov	r3, s16
 8010c02:	4652      	mov	r2, sl
 8010c04:	4631      	mov	r1, r6
 8010c06:	4628      	mov	r0, r5
 8010c08:	47b8      	blx	r7
 8010c0a:	3001      	adds	r0, #1
 8010c0c:	f43f af09 	beq.w	8010a22 <_printf_float+0xc2>
 8010c10:	f04f 0900 	mov.w	r9, #0
 8010c14:	f104 0a1a 	add.w	sl, r4, #26
 8010c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c1a:	425b      	negs	r3, r3
 8010c1c:	454b      	cmp	r3, r9
 8010c1e:	dc01      	bgt.n	8010c24 <_printf_float+0x2c4>
 8010c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c22:	e792      	b.n	8010b4a <_printf_float+0x1ea>
 8010c24:	2301      	movs	r3, #1
 8010c26:	4652      	mov	r2, sl
 8010c28:	4631      	mov	r1, r6
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	47b8      	blx	r7
 8010c2e:	3001      	adds	r0, #1
 8010c30:	f43f aef7 	beq.w	8010a22 <_printf_float+0xc2>
 8010c34:	f109 0901 	add.w	r9, r9, #1
 8010c38:	e7ee      	b.n	8010c18 <_printf_float+0x2b8>
 8010c3a:	bf00      	nop
 8010c3c:	7fefffff 	.word	0x7fefffff
 8010c40:	08015ec4 	.word	0x08015ec4
 8010c44:	08015ec8 	.word	0x08015ec8
 8010c48:	08015ed0 	.word	0x08015ed0
 8010c4c:	08015ecc 	.word	0x08015ecc
 8010c50:	08015ed4 	.word	0x08015ed4
 8010c54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	bfa8      	it	ge
 8010c5c:	461a      	movge	r2, r3
 8010c5e:	2a00      	cmp	r2, #0
 8010c60:	4691      	mov	r9, r2
 8010c62:	dc37      	bgt.n	8010cd4 <_printf_float+0x374>
 8010c64:	f04f 0b00 	mov.w	fp, #0
 8010c68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010c6c:	f104 021a 	add.w	r2, r4, #26
 8010c70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010c72:	9305      	str	r3, [sp, #20]
 8010c74:	eba3 0309 	sub.w	r3, r3, r9
 8010c78:	455b      	cmp	r3, fp
 8010c7a:	dc33      	bgt.n	8010ce4 <_printf_float+0x384>
 8010c7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010c80:	429a      	cmp	r2, r3
 8010c82:	db3b      	blt.n	8010cfc <_printf_float+0x39c>
 8010c84:	6823      	ldr	r3, [r4, #0]
 8010c86:	07da      	lsls	r2, r3, #31
 8010c88:	d438      	bmi.n	8010cfc <_printf_float+0x39c>
 8010c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c8c:	9a05      	ldr	r2, [sp, #20]
 8010c8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c90:	1a9a      	subs	r2, r3, r2
 8010c92:	eba3 0901 	sub.w	r9, r3, r1
 8010c96:	4591      	cmp	r9, r2
 8010c98:	bfa8      	it	ge
 8010c9a:	4691      	movge	r9, r2
 8010c9c:	f1b9 0f00 	cmp.w	r9, #0
 8010ca0:	dc35      	bgt.n	8010d0e <_printf_float+0x3ae>
 8010ca2:	f04f 0800 	mov.w	r8, #0
 8010ca6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010caa:	f104 0a1a 	add.w	sl, r4, #26
 8010cae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010cb2:	1a9b      	subs	r3, r3, r2
 8010cb4:	eba3 0309 	sub.w	r3, r3, r9
 8010cb8:	4543      	cmp	r3, r8
 8010cba:	f77f af79 	ble.w	8010bb0 <_printf_float+0x250>
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	4652      	mov	r2, sl
 8010cc2:	4631      	mov	r1, r6
 8010cc4:	4628      	mov	r0, r5
 8010cc6:	47b8      	blx	r7
 8010cc8:	3001      	adds	r0, #1
 8010cca:	f43f aeaa 	beq.w	8010a22 <_printf_float+0xc2>
 8010cce:	f108 0801 	add.w	r8, r8, #1
 8010cd2:	e7ec      	b.n	8010cae <_printf_float+0x34e>
 8010cd4:	4613      	mov	r3, r2
 8010cd6:	4631      	mov	r1, r6
 8010cd8:	4642      	mov	r2, r8
 8010cda:	4628      	mov	r0, r5
 8010cdc:	47b8      	blx	r7
 8010cde:	3001      	adds	r0, #1
 8010ce0:	d1c0      	bne.n	8010c64 <_printf_float+0x304>
 8010ce2:	e69e      	b.n	8010a22 <_printf_float+0xc2>
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	4631      	mov	r1, r6
 8010ce8:	4628      	mov	r0, r5
 8010cea:	9205      	str	r2, [sp, #20]
 8010cec:	47b8      	blx	r7
 8010cee:	3001      	adds	r0, #1
 8010cf0:	f43f ae97 	beq.w	8010a22 <_printf_float+0xc2>
 8010cf4:	9a05      	ldr	r2, [sp, #20]
 8010cf6:	f10b 0b01 	add.w	fp, fp, #1
 8010cfa:	e7b9      	b.n	8010c70 <_printf_float+0x310>
 8010cfc:	ee18 3a10 	vmov	r3, s16
 8010d00:	4652      	mov	r2, sl
 8010d02:	4631      	mov	r1, r6
 8010d04:	4628      	mov	r0, r5
 8010d06:	47b8      	blx	r7
 8010d08:	3001      	adds	r0, #1
 8010d0a:	d1be      	bne.n	8010c8a <_printf_float+0x32a>
 8010d0c:	e689      	b.n	8010a22 <_printf_float+0xc2>
 8010d0e:	9a05      	ldr	r2, [sp, #20]
 8010d10:	464b      	mov	r3, r9
 8010d12:	4442      	add	r2, r8
 8010d14:	4631      	mov	r1, r6
 8010d16:	4628      	mov	r0, r5
 8010d18:	47b8      	blx	r7
 8010d1a:	3001      	adds	r0, #1
 8010d1c:	d1c1      	bne.n	8010ca2 <_printf_float+0x342>
 8010d1e:	e680      	b.n	8010a22 <_printf_float+0xc2>
 8010d20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d22:	2a01      	cmp	r2, #1
 8010d24:	dc01      	bgt.n	8010d2a <_printf_float+0x3ca>
 8010d26:	07db      	lsls	r3, r3, #31
 8010d28:	d538      	bpl.n	8010d9c <_printf_float+0x43c>
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	4642      	mov	r2, r8
 8010d2e:	4631      	mov	r1, r6
 8010d30:	4628      	mov	r0, r5
 8010d32:	47b8      	blx	r7
 8010d34:	3001      	adds	r0, #1
 8010d36:	f43f ae74 	beq.w	8010a22 <_printf_float+0xc2>
 8010d3a:	ee18 3a10 	vmov	r3, s16
 8010d3e:	4652      	mov	r2, sl
 8010d40:	4631      	mov	r1, r6
 8010d42:	4628      	mov	r0, r5
 8010d44:	47b8      	blx	r7
 8010d46:	3001      	adds	r0, #1
 8010d48:	f43f ae6b 	beq.w	8010a22 <_printf_float+0xc2>
 8010d4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010d50:	2200      	movs	r2, #0
 8010d52:	2300      	movs	r3, #0
 8010d54:	f7ef fef0 	bl	8000b38 <__aeabi_dcmpeq>
 8010d58:	b9d8      	cbnz	r0, 8010d92 <_printf_float+0x432>
 8010d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d5c:	f108 0201 	add.w	r2, r8, #1
 8010d60:	3b01      	subs	r3, #1
 8010d62:	4631      	mov	r1, r6
 8010d64:	4628      	mov	r0, r5
 8010d66:	47b8      	blx	r7
 8010d68:	3001      	adds	r0, #1
 8010d6a:	d10e      	bne.n	8010d8a <_printf_float+0x42a>
 8010d6c:	e659      	b.n	8010a22 <_printf_float+0xc2>
 8010d6e:	2301      	movs	r3, #1
 8010d70:	4652      	mov	r2, sl
 8010d72:	4631      	mov	r1, r6
 8010d74:	4628      	mov	r0, r5
 8010d76:	47b8      	blx	r7
 8010d78:	3001      	adds	r0, #1
 8010d7a:	f43f ae52 	beq.w	8010a22 <_printf_float+0xc2>
 8010d7e:	f108 0801 	add.w	r8, r8, #1
 8010d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d84:	3b01      	subs	r3, #1
 8010d86:	4543      	cmp	r3, r8
 8010d88:	dcf1      	bgt.n	8010d6e <_printf_float+0x40e>
 8010d8a:	464b      	mov	r3, r9
 8010d8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010d90:	e6dc      	b.n	8010b4c <_printf_float+0x1ec>
 8010d92:	f04f 0800 	mov.w	r8, #0
 8010d96:	f104 0a1a 	add.w	sl, r4, #26
 8010d9a:	e7f2      	b.n	8010d82 <_printf_float+0x422>
 8010d9c:	2301      	movs	r3, #1
 8010d9e:	4642      	mov	r2, r8
 8010da0:	e7df      	b.n	8010d62 <_printf_float+0x402>
 8010da2:	2301      	movs	r3, #1
 8010da4:	464a      	mov	r2, r9
 8010da6:	4631      	mov	r1, r6
 8010da8:	4628      	mov	r0, r5
 8010daa:	47b8      	blx	r7
 8010dac:	3001      	adds	r0, #1
 8010dae:	f43f ae38 	beq.w	8010a22 <_printf_float+0xc2>
 8010db2:	f108 0801 	add.w	r8, r8, #1
 8010db6:	68e3      	ldr	r3, [r4, #12]
 8010db8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010dba:	1a5b      	subs	r3, r3, r1
 8010dbc:	4543      	cmp	r3, r8
 8010dbe:	dcf0      	bgt.n	8010da2 <_printf_float+0x442>
 8010dc0:	e6fa      	b.n	8010bb8 <_printf_float+0x258>
 8010dc2:	f04f 0800 	mov.w	r8, #0
 8010dc6:	f104 0919 	add.w	r9, r4, #25
 8010dca:	e7f4      	b.n	8010db6 <_printf_float+0x456>

08010dcc <_printf_common>:
 8010dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dd0:	4616      	mov	r6, r2
 8010dd2:	4699      	mov	r9, r3
 8010dd4:	688a      	ldr	r2, [r1, #8]
 8010dd6:	690b      	ldr	r3, [r1, #16]
 8010dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010ddc:	4293      	cmp	r3, r2
 8010dde:	bfb8      	it	lt
 8010de0:	4613      	movlt	r3, r2
 8010de2:	6033      	str	r3, [r6, #0]
 8010de4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010de8:	4607      	mov	r7, r0
 8010dea:	460c      	mov	r4, r1
 8010dec:	b10a      	cbz	r2, 8010df2 <_printf_common+0x26>
 8010dee:	3301      	adds	r3, #1
 8010df0:	6033      	str	r3, [r6, #0]
 8010df2:	6823      	ldr	r3, [r4, #0]
 8010df4:	0699      	lsls	r1, r3, #26
 8010df6:	bf42      	ittt	mi
 8010df8:	6833      	ldrmi	r3, [r6, #0]
 8010dfa:	3302      	addmi	r3, #2
 8010dfc:	6033      	strmi	r3, [r6, #0]
 8010dfe:	6825      	ldr	r5, [r4, #0]
 8010e00:	f015 0506 	ands.w	r5, r5, #6
 8010e04:	d106      	bne.n	8010e14 <_printf_common+0x48>
 8010e06:	f104 0a19 	add.w	sl, r4, #25
 8010e0a:	68e3      	ldr	r3, [r4, #12]
 8010e0c:	6832      	ldr	r2, [r6, #0]
 8010e0e:	1a9b      	subs	r3, r3, r2
 8010e10:	42ab      	cmp	r3, r5
 8010e12:	dc26      	bgt.n	8010e62 <_printf_common+0x96>
 8010e14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010e18:	1e13      	subs	r3, r2, #0
 8010e1a:	6822      	ldr	r2, [r4, #0]
 8010e1c:	bf18      	it	ne
 8010e1e:	2301      	movne	r3, #1
 8010e20:	0692      	lsls	r2, r2, #26
 8010e22:	d42b      	bmi.n	8010e7c <_printf_common+0xb0>
 8010e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010e28:	4649      	mov	r1, r9
 8010e2a:	4638      	mov	r0, r7
 8010e2c:	47c0      	blx	r8
 8010e2e:	3001      	adds	r0, #1
 8010e30:	d01e      	beq.n	8010e70 <_printf_common+0xa4>
 8010e32:	6823      	ldr	r3, [r4, #0]
 8010e34:	68e5      	ldr	r5, [r4, #12]
 8010e36:	6832      	ldr	r2, [r6, #0]
 8010e38:	f003 0306 	and.w	r3, r3, #6
 8010e3c:	2b04      	cmp	r3, #4
 8010e3e:	bf08      	it	eq
 8010e40:	1aad      	subeq	r5, r5, r2
 8010e42:	68a3      	ldr	r3, [r4, #8]
 8010e44:	6922      	ldr	r2, [r4, #16]
 8010e46:	bf0c      	ite	eq
 8010e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010e4c:	2500      	movne	r5, #0
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	bfc4      	itt	gt
 8010e52:	1a9b      	subgt	r3, r3, r2
 8010e54:	18ed      	addgt	r5, r5, r3
 8010e56:	2600      	movs	r6, #0
 8010e58:	341a      	adds	r4, #26
 8010e5a:	42b5      	cmp	r5, r6
 8010e5c:	d11a      	bne.n	8010e94 <_printf_common+0xc8>
 8010e5e:	2000      	movs	r0, #0
 8010e60:	e008      	b.n	8010e74 <_printf_common+0xa8>
 8010e62:	2301      	movs	r3, #1
 8010e64:	4652      	mov	r2, sl
 8010e66:	4649      	mov	r1, r9
 8010e68:	4638      	mov	r0, r7
 8010e6a:	47c0      	blx	r8
 8010e6c:	3001      	adds	r0, #1
 8010e6e:	d103      	bne.n	8010e78 <_printf_common+0xac>
 8010e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e78:	3501      	adds	r5, #1
 8010e7a:	e7c6      	b.n	8010e0a <_printf_common+0x3e>
 8010e7c:	18e1      	adds	r1, r4, r3
 8010e7e:	1c5a      	adds	r2, r3, #1
 8010e80:	2030      	movs	r0, #48	; 0x30
 8010e82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010e86:	4422      	add	r2, r4
 8010e88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010e8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010e90:	3302      	adds	r3, #2
 8010e92:	e7c7      	b.n	8010e24 <_printf_common+0x58>
 8010e94:	2301      	movs	r3, #1
 8010e96:	4622      	mov	r2, r4
 8010e98:	4649      	mov	r1, r9
 8010e9a:	4638      	mov	r0, r7
 8010e9c:	47c0      	blx	r8
 8010e9e:	3001      	adds	r0, #1
 8010ea0:	d0e6      	beq.n	8010e70 <_printf_common+0xa4>
 8010ea2:	3601      	adds	r6, #1
 8010ea4:	e7d9      	b.n	8010e5a <_printf_common+0x8e>
	...

08010ea8 <_printf_i>:
 8010ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010eac:	7e0f      	ldrb	r7, [r1, #24]
 8010eae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010eb0:	2f78      	cmp	r7, #120	; 0x78
 8010eb2:	4691      	mov	r9, r2
 8010eb4:	4680      	mov	r8, r0
 8010eb6:	460c      	mov	r4, r1
 8010eb8:	469a      	mov	sl, r3
 8010eba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010ebe:	d807      	bhi.n	8010ed0 <_printf_i+0x28>
 8010ec0:	2f62      	cmp	r7, #98	; 0x62
 8010ec2:	d80a      	bhi.n	8010eda <_printf_i+0x32>
 8010ec4:	2f00      	cmp	r7, #0
 8010ec6:	f000 80d8 	beq.w	801107a <_printf_i+0x1d2>
 8010eca:	2f58      	cmp	r7, #88	; 0x58
 8010ecc:	f000 80a3 	beq.w	8011016 <_printf_i+0x16e>
 8010ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010ed8:	e03a      	b.n	8010f50 <_printf_i+0xa8>
 8010eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010ede:	2b15      	cmp	r3, #21
 8010ee0:	d8f6      	bhi.n	8010ed0 <_printf_i+0x28>
 8010ee2:	a101      	add	r1, pc, #4	; (adr r1, 8010ee8 <_printf_i+0x40>)
 8010ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010ee8:	08010f41 	.word	0x08010f41
 8010eec:	08010f55 	.word	0x08010f55
 8010ef0:	08010ed1 	.word	0x08010ed1
 8010ef4:	08010ed1 	.word	0x08010ed1
 8010ef8:	08010ed1 	.word	0x08010ed1
 8010efc:	08010ed1 	.word	0x08010ed1
 8010f00:	08010f55 	.word	0x08010f55
 8010f04:	08010ed1 	.word	0x08010ed1
 8010f08:	08010ed1 	.word	0x08010ed1
 8010f0c:	08010ed1 	.word	0x08010ed1
 8010f10:	08010ed1 	.word	0x08010ed1
 8010f14:	08011061 	.word	0x08011061
 8010f18:	08010f85 	.word	0x08010f85
 8010f1c:	08011043 	.word	0x08011043
 8010f20:	08010ed1 	.word	0x08010ed1
 8010f24:	08010ed1 	.word	0x08010ed1
 8010f28:	08011083 	.word	0x08011083
 8010f2c:	08010ed1 	.word	0x08010ed1
 8010f30:	08010f85 	.word	0x08010f85
 8010f34:	08010ed1 	.word	0x08010ed1
 8010f38:	08010ed1 	.word	0x08010ed1
 8010f3c:	0801104b 	.word	0x0801104b
 8010f40:	682b      	ldr	r3, [r5, #0]
 8010f42:	1d1a      	adds	r2, r3, #4
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	602a      	str	r2, [r5, #0]
 8010f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010f50:	2301      	movs	r3, #1
 8010f52:	e0a3      	b.n	801109c <_printf_i+0x1f4>
 8010f54:	6820      	ldr	r0, [r4, #0]
 8010f56:	6829      	ldr	r1, [r5, #0]
 8010f58:	0606      	lsls	r6, r0, #24
 8010f5a:	f101 0304 	add.w	r3, r1, #4
 8010f5e:	d50a      	bpl.n	8010f76 <_printf_i+0xce>
 8010f60:	680e      	ldr	r6, [r1, #0]
 8010f62:	602b      	str	r3, [r5, #0]
 8010f64:	2e00      	cmp	r6, #0
 8010f66:	da03      	bge.n	8010f70 <_printf_i+0xc8>
 8010f68:	232d      	movs	r3, #45	; 0x2d
 8010f6a:	4276      	negs	r6, r6
 8010f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f70:	485e      	ldr	r0, [pc, #376]	; (80110ec <_printf_i+0x244>)
 8010f72:	230a      	movs	r3, #10
 8010f74:	e019      	b.n	8010faa <_printf_i+0x102>
 8010f76:	680e      	ldr	r6, [r1, #0]
 8010f78:	602b      	str	r3, [r5, #0]
 8010f7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010f7e:	bf18      	it	ne
 8010f80:	b236      	sxthne	r6, r6
 8010f82:	e7ef      	b.n	8010f64 <_printf_i+0xbc>
 8010f84:	682b      	ldr	r3, [r5, #0]
 8010f86:	6820      	ldr	r0, [r4, #0]
 8010f88:	1d19      	adds	r1, r3, #4
 8010f8a:	6029      	str	r1, [r5, #0]
 8010f8c:	0601      	lsls	r1, r0, #24
 8010f8e:	d501      	bpl.n	8010f94 <_printf_i+0xec>
 8010f90:	681e      	ldr	r6, [r3, #0]
 8010f92:	e002      	b.n	8010f9a <_printf_i+0xf2>
 8010f94:	0646      	lsls	r6, r0, #25
 8010f96:	d5fb      	bpl.n	8010f90 <_printf_i+0xe8>
 8010f98:	881e      	ldrh	r6, [r3, #0]
 8010f9a:	4854      	ldr	r0, [pc, #336]	; (80110ec <_printf_i+0x244>)
 8010f9c:	2f6f      	cmp	r7, #111	; 0x6f
 8010f9e:	bf0c      	ite	eq
 8010fa0:	2308      	moveq	r3, #8
 8010fa2:	230a      	movne	r3, #10
 8010fa4:	2100      	movs	r1, #0
 8010fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010faa:	6865      	ldr	r5, [r4, #4]
 8010fac:	60a5      	str	r5, [r4, #8]
 8010fae:	2d00      	cmp	r5, #0
 8010fb0:	bfa2      	ittt	ge
 8010fb2:	6821      	ldrge	r1, [r4, #0]
 8010fb4:	f021 0104 	bicge.w	r1, r1, #4
 8010fb8:	6021      	strge	r1, [r4, #0]
 8010fba:	b90e      	cbnz	r6, 8010fc0 <_printf_i+0x118>
 8010fbc:	2d00      	cmp	r5, #0
 8010fbe:	d04d      	beq.n	801105c <_printf_i+0x1b4>
 8010fc0:	4615      	mov	r5, r2
 8010fc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8010fc6:	fb03 6711 	mls	r7, r3, r1, r6
 8010fca:	5dc7      	ldrb	r7, [r0, r7]
 8010fcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010fd0:	4637      	mov	r7, r6
 8010fd2:	42bb      	cmp	r3, r7
 8010fd4:	460e      	mov	r6, r1
 8010fd6:	d9f4      	bls.n	8010fc2 <_printf_i+0x11a>
 8010fd8:	2b08      	cmp	r3, #8
 8010fda:	d10b      	bne.n	8010ff4 <_printf_i+0x14c>
 8010fdc:	6823      	ldr	r3, [r4, #0]
 8010fde:	07de      	lsls	r6, r3, #31
 8010fe0:	d508      	bpl.n	8010ff4 <_printf_i+0x14c>
 8010fe2:	6923      	ldr	r3, [r4, #16]
 8010fe4:	6861      	ldr	r1, [r4, #4]
 8010fe6:	4299      	cmp	r1, r3
 8010fe8:	bfde      	ittt	le
 8010fea:	2330      	movle	r3, #48	; 0x30
 8010fec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010ff0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010ff4:	1b52      	subs	r2, r2, r5
 8010ff6:	6122      	str	r2, [r4, #16]
 8010ff8:	f8cd a000 	str.w	sl, [sp]
 8010ffc:	464b      	mov	r3, r9
 8010ffe:	aa03      	add	r2, sp, #12
 8011000:	4621      	mov	r1, r4
 8011002:	4640      	mov	r0, r8
 8011004:	f7ff fee2 	bl	8010dcc <_printf_common>
 8011008:	3001      	adds	r0, #1
 801100a:	d14c      	bne.n	80110a6 <_printf_i+0x1fe>
 801100c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011010:	b004      	add	sp, #16
 8011012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011016:	4835      	ldr	r0, [pc, #212]	; (80110ec <_printf_i+0x244>)
 8011018:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801101c:	6829      	ldr	r1, [r5, #0]
 801101e:	6823      	ldr	r3, [r4, #0]
 8011020:	f851 6b04 	ldr.w	r6, [r1], #4
 8011024:	6029      	str	r1, [r5, #0]
 8011026:	061d      	lsls	r5, r3, #24
 8011028:	d514      	bpl.n	8011054 <_printf_i+0x1ac>
 801102a:	07df      	lsls	r7, r3, #31
 801102c:	bf44      	itt	mi
 801102e:	f043 0320 	orrmi.w	r3, r3, #32
 8011032:	6023      	strmi	r3, [r4, #0]
 8011034:	b91e      	cbnz	r6, 801103e <_printf_i+0x196>
 8011036:	6823      	ldr	r3, [r4, #0]
 8011038:	f023 0320 	bic.w	r3, r3, #32
 801103c:	6023      	str	r3, [r4, #0]
 801103e:	2310      	movs	r3, #16
 8011040:	e7b0      	b.n	8010fa4 <_printf_i+0xfc>
 8011042:	6823      	ldr	r3, [r4, #0]
 8011044:	f043 0320 	orr.w	r3, r3, #32
 8011048:	6023      	str	r3, [r4, #0]
 801104a:	2378      	movs	r3, #120	; 0x78
 801104c:	4828      	ldr	r0, [pc, #160]	; (80110f0 <_printf_i+0x248>)
 801104e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011052:	e7e3      	b.n	801101c <_printf_i+0x174>
 8011054:	0659      	lsls	r1, r3, #25
 8011056:	bf48      	it	mi
 8011058:	b2b6      	uxthmi	r6, r6
 801105a:	e7e6      	b.n	801102a <_printf_i+0x182>
 801105c:	4615      	mov	r5, r2
 801105e:	e7bb      	b.n	8010fd8 <_printf_i+0x130>
 8011060:	682b      	ldr	r3, [r5, #0]
 8011062:	6826      	ldr	r6, [r4, #0]
 8011064:	6961      	ldr	r1, [r4, #20]
 8011066:	1d18      	adds	r0, r3, #4
 8011068:	6028      	str	r0, [r5, #0]
 801106a:	0635      	lsls	r5, r6, #24
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	d501      	bpl.n	8011074 <_printf_i+0x1cc>
 8011070:	6019      	str	r1, [r3, #0]
 8011072:	e002      	b.n	801107a <_printf_i+0x1d2>
 8011074:	0670      	lsls	r0, r6, #25
 8011076:	d5fb      	bpl.n	8011070 <_printf_i+0x1c8>
 8011078:	8019      	strh	r1, [r3, #0]
 801107a:	2300      	movs	r3, #0
 801107c:	6123      	str	r3, [r4, #16]
 801107e:	4615      	mov	r5, r2
 8011080:	e7ba      	b.n	8010ff8 <_printf_i+0x150>
 8011082:	682b      	ldr	r3, [r5, #0]
 8011084:	1d1a      	adds	r2, r3, #4
 8011086:	602a      	str	r2, [r5, #0]
 8011088:	681d      	ldr	r5, [r3, #0]
 801108a:	6862      	ldr	r2, [r4, #4]
 801108c:	2100      	movs	r1, #0
 801108e:	4628      	mov	r0, r5
 8011090:	f7ef f8de 	bl	8000250 <memchr>
 8011094:	b108      	cbz	r0, 801109a <_printf_i+0x1f2>
 8011096:	1b40      	subs	r0, r0, r5
 8011098:	6060      	str	r0, [r4, #4]
 801109a:	6863      	ldr	r3, [r4, #4]
 801109c:	6123      	str	r3, [r4, #16]
 801109e:	2300      	movs	r3, #0
 80110a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80110a4:	e7a8      	b.n	8010ff8 <_printf_i+0x150>
 80110a6:	6923      	ldr	r3, [r4, #16]
 80110a8:	462a      	mov	r2, r5
 80110aa:	4649      	mov	r1, r9
 80110ac:	4640      	mov	r0, r8
 80110ae:	47d0      	blx	sl
 80110b0:	3001      	adds	r0, #1
 80110b2:	d0ab      	beq.n	801100c <_printf_i+0x164>
 80110b4:	6823      	ldr	r3, [r4, #0]
 80110b6:	079b      	lsls	r3, r3, #30
 80110b8:	d413      	bmi.n	80110e2 <_printf_i+0x23a>
 80110ba:	68e0      	ldr	r0, [r4, #12]
 80110bc:	9b03      	ldr	r3, [sp, #12]
 80110be:	4298      	cmp	r0, r3
 80110c0:	bfb8      	it	lt
 80110c2:	4618      	movlt	r0, r3
 80110c4:	e7a4      	b.n	8011010 <_printf_i+0x168>
 80110c6:	2301      	movs	r3, #1
 80110c8:	4632      	mov	r2, r6
 80110ca:	4649      	mov	r1, r9
 80110cc:	4640      	mov	r0, r8
 80110ce:	47d0      	blx	sl
 80110d0:	3001      	adds	r0, #1
 80110d2:	d09b      	beq.n	801100c <_printf_i+0x164>
 80110d4:	3501      	adds	r5, #1
 80110d6:	68e3      	ldr	r3, [r4, #12]
 80110d8:	9903      	ldr	r1, [sp, #12]
 80110da:	1a5b      	subs	r3, r3, r1
 80110dc:	42ab      	cmp	r3, r5
 80110de:	dcf2      	bgt.n	80110c6 <_printf_i+0x21e>
 80110e0:	e7eb      	b.n	80110ba <_printf_i+0x212>
 80110e2:	2500      	movs	r5, #0
 80110e4:	f104 0619 	add.w	r6, r4, #25
 80110e8:	e7f5      	b.n	80110d6 <_printf_i+0x22e>
 80110ea:	bf00      	nop
 80110ec:	08015ed6 	.word	0x08015ed6
 80110f0:	08015ee7 	.word	0x08015ee7

080110f4 <_scanf_float>:
 80110f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110f8:	b087      	sub	sp, #28
 80110fa:	4617      	mov	r7, r2
 80110fc:	9303      	str	r3, [sp, #12]
 80110fe:	688b      	ldr	r3, [r1, #8]
 8011100:	1e5a      	subs	r2, r3, #1
 8011102:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011106:	bf83      	ittte	hi
 8011108:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801110c:	195b      	addhi	r3, r3, r5
 801110e:	9302      	strhi	r3, [sp, #8]
 8011110:	2300      	movls	r3, #0
 8011112:	bf86      	itte	hi
 8011114:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011118:	608b      	strhi	r3, [r1, #8]
 801111a:	9302      	strls	r3, [sp, #8]
 801111c:	680b      	ldr	r3, [r1, #0]
 801111e:	468b      	mov	fp, r1
 8011120:	2500      	movs	r5, #0
 8011122:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011126:	f84b 3b1c 	str.w	r3, [fp], #28
 801112a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801112e:	4680      	mov	r8, r0
 8011130:	460c      	mov	r4, r1
 8011132:	465e      	mov	r6, fp
 8011134:	46aa      	mov	sl, r5
 8011136:	46a9      	mov	r9, r5
 8011138:	9501      	str	r5, [sp, #4]
 801113a:	68a2      	ldr	r2, [r4, #8]
 801113c:	b152      	cbz	r2, 8011154 <_scanf_float+0x60>
 801113e:	683b      	ldr	r3, [r7, #0]
 8011140:	781b      	ldrb	r3, [r3, #0]
 8011142:	2b4e      	cmp	r3, #78	; 0x4e
 8011144:	d864      	bhi.n	8011210 <_scanf_float+0x11c>
 8011146:	2b40      	cmp	r3, #64	; 0x40
 8011148:	d83c      	bhi.n	80111c4 <_scanf_float+0xd0>
 801114a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801114e:	b2c8      	uxtb	r0, r1
 8011150:	280e      	cmp	r0, #14
 8011152:	d93a      	bls.n	80111ca <_scanf_float+0xd6>
 8011154:	f1b9 0f00 	cmp.w	r9, #0
 8011158:	d003      	beq.n	8011162 <_scanf_float+0x6e>
 801115a:	6823      	ldr	r3, [r4, #0]
 801115c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011160:	6023      	str	r3, [r4, #0]
 8011162:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011166:	f1ba 0f01 	cmp.w	sl, #1
 801116a:	f200 8113 	bhi.w	8011394 <_scanf_float+0x2a0>
 801116e:	455e      	cmp	r6, fp
 8011170:	f200 8105 	bhi.w	801137e <_scanf_float+0x28a>
 8011174:	2501      	movs	r5, #1
 8011176:	4628      	mov	r0, r5
 8011178:	b007      	add	sp, #28
 801117a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801117e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8011182:	2a0d      	cmp	r2, #13
 8011184:	d8e6      	bhi.n	8011154 <_scanf_float+0x60>
 8011186:	a101      	add	r1, pc, #4	; (adr r1, 801118c <_scanf_float+0x98>)
 8011188:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801118c:	080112cb 	.word	0x080112cb
 8011190:	08011155 	.word	0x08011155
 8011194:	08011155 	.word	0x08011155
 8011198:	08011155 	.word	0x08011155
 801119c:	0801132b 	.word	0x0801132b
 80111a0:	08011303 	.word	0x08011303
 80111a4:	08011155 	.word	0x08011155
 80111a8:	08011155 	.word	0x08011155
 80111ac:	080112d9 	.word	0x080112d9
 80111b0:	08011155 	.word	0x08011155
 80111b4:	08011155 	.word	0x08011155
 80111b8:	08011155 	.word	0x08011155
 80111bc:	08011155 	.word	0x08011155
 80111c0:	08011291 	.word	0x08011291
 80111c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80111c8:	e7db      	b.n	8011182 <_scanf_float+0x8e>
 80111ca:	290e      	cmp	r1, #14
 80111cc:	d8c2      	bhi.n	8011154 <_scanf_float+0x60>
 80111ce:	a001      	add	r0, pc, #4	; (adr r0, 80111d4 <_scanf_float+0xe0>)
 80111d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80111d4:	08011283 	.word	0x08011283
 80111d8:	08011155 	.word	0x08011155
 80111dc:	08011283 	.word	0x08011283
 80111e0:	08011317 	.word	0x08011317
 80111e4:	08011155 	.word	0x08011155
 80111e8:	08011231 	.word	0x08011231
 80111ec:	0801126d 	.word	0x0801126d
 80111f0:	0801126d 	.word	0x0801126d
 80111f4:	0801126d 	.word	0x0801126d
 80111f8:	0801126d 	.word	0x0801126d
 80111fc:	0801126d 	.word	0x0801126d
 8011200:	0801126d 	.word	0x0801126d
 8011204:	0801126d 	.word	0x0801126d
 8011208:	0801126d 	.word	0x0801126d
 801120c:	0801126d 	.word	0x0801126d
 8011210:	2b6e      	cmp	r3, #110	; 0x6e
 8011212:	d809      	bhi.n	8011228 <_scanf_float+0x134>
 8011214:	2b60      	cmp	r3, #96	; 0x60
 8011216:	d8b2      	bhi.n	801117e <_scanf_float+0x8a>
 8011218:	2b54      	cmp	r3, #84	; 0x54
 801121a:	d077      	beq.n	801130c <_scanf_float+0x218>
 801121c:	2b59      	cmp	r3, #89	; 0x59
 801121e:	d199      	bne.n	8011154 <_scanf_float+0x60>
 8011220:	2d07      	cmp	r5, #7
 8011222:	d197      	bne.n	8011154 <_scanf_float+0x60>
 8011224:	2508      	movs	r5, #8
 8011226:	e029      	b.n	801127c <_scanf_float+0x188>
 8011228:	2b74      	cmp	r3, #116	; 0x74
 801122a:	d06f      	beq.n	801130c <_scanf_float+0x218>
 801122c:	2b79      	cmp	r3, #121	; 0x79
 801122e:	e7f6      	b.n	801121e <_scanf_float+0x12a>
 8011230:	6821      	ldr	r1, [r4, #0]
 8011232:	05c8      	lsls	r0, r1, #23
 8011234:	d51a      	bpl.n	801126c <_scanf_float+0x178>
 8011236:	9b02      	ldr	r3, [sp, #8]
 8011238:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801123c:	6021      	str	r1, [r4, #0]
 801123e:	f109 0901 	add.w	r9, r9, #1
 8011242:	b11b      	cbz	r3, 801124c <_scanf_float+0x158>
 8011244:	3b01      	subs	r3, #1
 8011246:	3201      	adds	r2, #1
 8011248:	9302      	str	r3, [sp, #8]
 801124a:	60a2      	str	r2, [r4, #8]
 801124c:	68a3      	ldr	r3, [r4, #8]
 801124e:	3b01      	subs	r3, #1
 8011250:	60a3      	str	r3, [r4, #8]
 8011252:	6923      	ldr	r3, [r4, #16]
 8011254:	3301      	adds	r3, #1
 8011256:	6123      	str	r3, [r4, #16]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	3b01      	subs	r3, #1
 801125c:	2b00      	cmp	r3, #0
 801125e:	607b      	str	r3, [r7, #4]
 8011260:	f340 8084 	ble.w	801136c <_scanf_float+0x278>
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	3301      	adds	r3, #1
 8011268:	603b      	str	r3, [r7, #0]
 801126a:	e766      	b.n	801113a <_scanf_float+0x46>
 801126c:	eb1a 0f05 	cmn.w	sl, r5
 8011270:	f47f af70 	bne.w	8011154 <_scanf_float+0x60>
 8011274:	6822      	ldr	r2, [r4, #0]
 8011276:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801127a:	6022      	str	r2, [r4, #0]
 801127c:	f806 3b01 	strb.w	r3, [r6], #1
 8011280:	e7e4      	b.n	801124c <_scanf_float+0x158>
 8011282:	6822      	ldr	r2, [r4, #0]
 8011284:	0610      	lsls	r0, r2, #24
 8011286:	f57f af65 	bpl.w	8011154 <_scanf_float+0x60>
 801128a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801128e:	e7f4      	b.n	801127a <_scanf_float+0x186>
 8011290:	f1ba 0f00 	cmp.w	sl, #0
 8011294:	d10e      	bne.n	80112b4 <_scanf_float+0x1c0>
 8011296:	f1b9 0f00 	cmp.w	r9, #0
 801129a:	d10e      	bne.n	80112ba <_scanf_float+0x1c6>
 801129c:	6822      	ldr	r2, [r4, #0]
 801129e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80112a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80112a6:	d108      	bne.n	80112ba <_scanf_float+0x1c6>
 80112a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80112ac:	6022      	str	r2, [r4, #0]
 80112ae:	f04f 0a01 	mov.w	sl, #1
 80112b2:	e7e3      	b.n	801127c <_scanf_float+0x188>
 80112b4:	f1ba 0f02 	cmp.w	sl, #2
 80112b8:	d055      	beq.n	8011366 <_scanf_float+0x272>
 80112ba:	2d01      	cmp	r5, #1
 80112bc:	d002      	beq.n	80112c4 <_scanf_float+0x1d0>
 80112be:	2d04      	cmp	r5, #4
 80112c0:	f47f af48 	bne.w	8011154 <_scanf_float+0x60>
 80112c4:	3501      	adds	r5, #1
 80112c6:	b2ed      	uxtb	r5, r5
 80112c8:	e7d8      	b.n	801127c <_scanf_float+0x188>
 80112ca:	f1ba 0f01 	cmp.w	sl, #1
 80112ce:	f47f af41 	bne.w	8011154 <_scanf_float+0x60>
 80112d2:	f04f 0a02 	mov.w	sl, #2
 80112d6:	e7d1      	b.n	801127c <_scanf_float+0x188>
 80112d8:	b97d      	cbnz	r5, 80112fa <_scanf_float+0x206>
 80112da:	f1b9 0f00 	cmp.w	r9, #0
 80112de:	f47f af3c 	bne.w	801115a <_scanf_float+0x66>
 80112e2:	6822      	ldr	r2, [r4, #0]
 80112e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80112e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80112ec:	f47f af39 	bne.w	8011162 <_scanf_float+0x6e>
 80112f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80112f4:	6022      	str	r2, [r4, #0]
 80112f6:	2501      	movs	r5, #1
 80112f8:	e7c0      	b.n	801127c <_scanf_float+0x188>
 80112fa:	2d03      	cmp	r5, #3
 80112fc:	d0e2      	beq.n	80112c4 <_scanf_float+0x1d0>
 80112fe:	2d05      	cmp	r5, #5
 8011300:	e7de      	b.n	80112c0 <_scanf_float+0x1cc>
 8011302:	2d02      	cmp	r5, #2
 8011304:	f47f af26 	bne.w	8011154 <_scanf_float+0x60>
 8011308:	2503      	movs	r5, #3
 801130a:	e7b7      	b.n	801127c <_scanf_float+0x188>
 801130c:	2d06      	cmp	r5, #6
 801130e:	f47f af21 	bne.w	8011154 <_scanf_float+0x60>
 8011312:	2507      	movs	r5, #7
 8011314:	e7b2      	b.n	801127c <_scanf_float+0x188>
 8011316:	6822      	ldr	r2, [r4, #0]
 8011318:	0591      	lsls	r1, r2, #22
 801131a:	f57f af1b 	bpl.w	8011154 <_scanf_float+0x60>
 801131e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8011322:	6022      	str	r2, [r4, #0]
 8011324:	f8cd 9004 	str.w	r9, [sp, #4]
 8011328:	e7a8      	b.n	801127c <_scanf_float+0x188>
 801132a:	6822      	ldr	r2, [r4, #0]
 801132c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011330:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011334:	d006      	beq.n	8011344 <_scanf_float+0x250>
 8011336:	0550      	lsls	r0, r2, #21
 8011338:	f57f af0c 	bpl.w	8011154 <_scanf_float+0x60>
 801133c:	f1b9 0f00 	cmp.w	r9, #0
 8011340:	f43f af0f 	beq.w	8011162 <_scanf_float+0x6e>
 8011344:	0591      	lsls	r1, r2, #22
 8011346:	bf58      	it	pl
 8011348:	9901      	ldrpl	r1, [sp, #4]
 801134a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801134e:	bf58      	it	pl
 8011350:	eba9 0101 	subpl.w	r1, r9, r1
 8011354:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011358:	bf58      	it	pl
 801135a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801135e:	6022      	str	r2, [r4, #0]
 8011360:	f04f 0900 	mov.w	r9, #0
 8011364:	e78a      	b.n	801127c <_scanf_float+0x188>
 8011366:	f04f 0a03 	mov.w	sl, #3
 801136a:	e787      	b.n	801127c <_scanf_float+0x188>
 801136c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011370:	4639      	mov	r1, r7
 8011372:	4640      	mov	r0, r8
 8011374:	4798      	blx	r3
 8011376:	2800      	cmp	r0, #0
 8011378:	f43f aedf 	beq.w	801113a <_scanf_float+0x46>
 801137c:	e6ea      	b.n	8011154 <_scanf_float+0x60>
 801137e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011382:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011386:	463a      	mov	r2, r7
 8011388:	4640      	mov	r0, r8
 801138a:	4798      	blx	r3
 801138c:	6923      	ldr	r3, [r4, #16]
 801138e:	3b01      	subs	r3, #1
 8011390:	6123      	str	r3, [r4, #16]
 8011392:	e6ec      	b.n	801116e <_scanf_float+0x7a>
 8011394:	1e6b      	subs	r3, r5, #1
 8011396:	2b06      	cmp	r3, #6
 8011398:	d825      	bhi.n	80113e6 <_scanf_float+0x2f2>
 801139a:	2d02      	cmp	r5, #2
 801139c:	d836      	bhi.n	801140c <_scanf_float+0x318>
 801139e:	455e      	cmp	r6, fp
 80113a0:	f67f aee8 	bls.w	8011174 <_scanf_float+0x80>
 80113a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80113a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80113ac:	463a      	mov	r2, r7
 80113ae:	4640      	mov	r0, r8
 80113b0:	4798      	blx	r3
 80113b2:	6923      	ldr	r3, [r4, #16]
 80113b4:	3b01      	subs	r3, #1
 80113b6:	6123      	str	r3, [r4, #16]
 80113b8:	e7f1      	b.n	801139e <_scanf_float+0x2aa>
 80113ba:	9802      	ldr	r0, [sp, #8]
 80113bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80113c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80113c4:	9002      	str	r0, [sp, #8]
 80113c6:	463a      	mov	r2, r7
 80113c8:	4640      	mov	r0, r8
 80113ca:	4798      	blx	r3
 80113cc:	6923      	ldr	r3, [r4, #16]
 80113ce:	3b01      	subs	r3, #1
 80113d0:	6123      	str	r3, [r4, #16]
 80113d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80113d6:	fa5f fa8a 	uxtb.w	sl, sl
 80113da:	f1ba 0f02 	cmp.w	sl, #2
 80113de:	d1ec      	bne.n	80113ba <_scanf_float+0x2c6>
 80113e0:	3d03      	subs	r5, #3
 80113e2:	b2ed      	uxtb	r5, r5
 80113e4:	1b76      	subs	r6, r6, r5
 80113e6:	6823      	ldr	r3, [r4, #0]
 80113e8:	05da      	lsls	r2, r3, #23
 80113ea:	d52f      	bpl.n	801144c <_scanf_float+0x358>
 80113ec:	055b      	lsls	r3, r3, #21
 80113ee:	d510      	bpl.n	8011412 <_scanf_float+0x31e>
 80113f0:	455e      	cmp	r6, fp
 80113f2:	f67f aebf 	bls.w	8011174 <_scanf_float+0x80>
 80113f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80113fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80113fe:	463a      	mov	r2, r7
 8011400:	4640      	mov	r0, r8
 8011402:	4798      	blx	r3
 8011404:	6923      	ldr	r3, [r4, #16]
 8011406:	3b01      	subs	r3, #1
 8011408:	6123      	str	r3, [r4, #16]
 801140a:	e7f1      	b.n	80113f0 <_scanf_float+0x2fc>
 801140c:	46aa      	mov	sl, r5
 801140e:	9602      	str	r6, [sp, #8]
 8011410:	e7df      	b.n	80113d2 <_scanf_float+0x2de>
 8011412:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011416:	6923      	ldr	r3, [r4, #16]
 8011418:	2965      	cmp	r1, #101	; 0x65
 801141a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801141e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8011422:	6123      	str	r3, [r4, #16]
 8011424:	d00c      	beq.n	8011440 <_scanf_float+0x34c>
 8011426:	2945      	cmp	r1, #69	; 0x45
 8011428:	d00a      	beq.n	8011440 <_scanf_float+0x34c>
 801142a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801142e:	463a      	mov	r2, r7
 8011430:	4640      	mov	r0, r8
 8011432:	4798      	blx	r3
 8011434:	6923      	ldr	r3, [r4, #16]
 8011436:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801143a:	3b01      	subs	r3, #1
 801143c:	1eb5      	subs	r5, r6, #2
 801143e:	6123      	str	r3, [r4, #16]
 8011440:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011444:	463a      	mov	r2, r7
 8011446:	4640      	mov	r0, r8
 8011448:	4798      	blx	r3
 801144a:	462e      	mov	r6, r5
 801144c:	6825      	ldr	r5, [r4, #0]
 801144e:	f015 0510 	ands.w	r5, r5, #16
 8011452:	d159      	bne.n	8011508 <_scanf_float+0x414>
 8011454:	7035      	strb	r5, [r6, #0]
 8011456:	6823      	ldr	r3, [r4, #0]
 8011458:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801145c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011460:	d11b      	bne.n	801149a <_scanf_float+0x3a6>
 8011462:	9b01      	ldr	r3, [sp, #4]
 8011464:	454b      	cmp	r3, r9
 8011466:	eba3 0209 	sub.w	r2, r3, r9
 801146a:	d123      	bne.n	80114b4 <_scanf_float+0x3c0>
 801146c:	2200      	movs	r2, #0
 801146e:	4659      	mov	r1, fp
 8011470:	4640      	mov	r0, r8
 8011472:	f000 ff13 	bl	801229c <_strtod_r>
 8011476:	6822      	ldr	r2, [r4, #0]
 8011478:	9b03      	ldr	r3, [sp, #12]
 801147a:	f012 0f02 	tst.w	r2, #2
 801147e:	ec57 6b10 	vmov	r6, r7, d0
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	d021      	beq.n	80114ca <_scanf_float+0x3d6>
 8011486:	9903      	ldr	r1, [sp, #12]
 8011488:	1d1a      	adds	r2, r3, #4
 801148a:	600a      	str	r2, [r1, #0]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	e9c3 6700 	strd	r6, r7, [r3]
 8011492:	68e3      	ldr	r3, [r4, #12]
 8011494:	3301      	adds	r3, #1
 8011496:	60e3      	str	r3, [r4, #12]
 8011498:	e66d      	b.n	8011176 <_scanf_float+0x82>
 801149a:	9b04      	ldr	r3, [sp, #16]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d0e5      	beq.n	801146c <_scanf_float+0x378>
 80114a0:	9905      	ldr	r1, [sp, #20]
 80114a2:	230a      	movs	r3, #10
 80114a4:	462a      	mov	r2, r5
 80114a6:	3101      	adds	r1, #1
 80114a8:	4640      	mov	r0, r8
 80114aa:	f000 ff7f 	bl	80123ac <_strtol_r>
 80114ae:	9b04      	ldr	r3, [sp, #16]
 80114b0:	9e05      	ldr	r6, [sp, #20]
 80114b2:	1ac2      	subs	r2, r0, r3
 80114b4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80114b8:	429e      	cmp	r6, r3
 80114ba:	bf28      	it	cs
 80114bc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80114c0:	4912      	ldr	r1, [pc, #72]	; (801150c <_scanf_float+0x418>)
 80114c2:	4630      	mov	r0, r6
 80114c4:	f000 f8a8 	bl	8011618 <siprintf>
 80114c8:	e7d0      	b.n	801146c <_scanf_float+0x378>
 80114ca:	9903      	ldr	r1, [sp, #12]
 80114cc:	f012 0f04 	tst.w	r2, #4
 80114d0:	f103 0204 	add.w	r2, r3, #4
 80114d4:	600a      	str	r2, [r1, #0]
 80114d6:	d1d9      	bne.n	801148c <_scanf_float+0x398>
 80114d8:	f8d3 8000 	ldr.w	r8, [r3]
 80114dc:	ee10 2a10 	vmov	r2, s0
 80114e0:	ee10 0a10 	vmov	r0, s0
 80114e4:	463b      	mov	r3, r7
 80114e6:	4639      	mov	r1, r7
 80114e8:	f7ef fb58 	bl	8000b9c <__aeabi_dcmpun>
 80114ec:	b128      	cbz	r0, 80114fa <_scanf_float+0x406>
 80114ee:	4808      	ldr	r0, [pc, #32]	; (8011510 <_scanf_float+0x41c>)
 80114f0:	f000 f88c 	bl	801160c <nanf>
 80114f4:	ed88 0a00 	vstr	s0, [r8]
 80114f8:	e7cb      	b.n	8011492 <_scanf_float+0x39e>
 80114fa:	4630      	mov	r0, r6
 80114fc:	4639      	mov	r1, r7
 80114fe:	f7ef fbab 	bl	8000c58 <__aeabi_d2f>
 8011502:	f8c8 0000 	str.w	r0, [r8]
 8011506:	e7c4      	b.n	8011492 <_scanf_float+0x39e>
 8011508:	2500      	movs	r5, #0
 801150a:	e634      	b.n	8011176 <_scanf_float+0x82>
 801150c:	08015ef8 	.word	0x08015ef8
 8011510:	08015ffb 	.word	0x08015ffb

08011514 <srand>:
 8011514:	b538      	push	{r3, r4, r5, lr}
 8011516:	4b10      	ldr	r3, [pc, #64]	; (8011558 <srand+0x44>)
 8011518:	681d      	ldr	r5, [r3, #0]
 801151a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801151c:	4604      	mov	r4, r0
 801151e:	b9b3      	cbnz	r3, 801154e <srand+0x3a>
 8011520:	2018      	movs	r0, #24
 8011522:	f7ff f885 	bl	8010630 <malloc>
 8011526:	4602      	mov	r2, r0
 8011528:	63a8      	str	r0, [r5, #56]	; 0x38
 801152a:	b920      	cbnz	r0, 8011536 <srand+0x22>
 801152c:	4b0b      	ldr	r3, [pc, #44]	; (801155c <srand+0x48>)
 801152e:	480c      	ldr	r0, [pc, #48]	; (8011560 <srand+0x4c>)
 8011530:	2142      	movs	r1, #66	; 0x42
 8011532:	f000 ff57 	bl	80123e4 <__assert_func>
 8011536:	490b      	ldr	r1, [pc, #44]	; (8011564 <srand+0x50>)
 8011538:	4b0b      	ldr	r3, [pc, #44]	; (8011568 <srand+0x54>)
 801153a:	e9c0 1300 	strd	r1, r3, [r0]
 801153e:	4b0b      	ldr	r3, [pc, #44]	; (801156c <srand+0x58>)
 8011540:	6083      	str	r3, [r0, #8]
 8011542:	230b      	movs	r3, #11
 8011544:	8183      	strh	r3, [r0, #12]
 8011546:	2100      	movs	r1, #0
 8011548:	2001      	movs	r0, #1
 801154a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801154e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011550:	2200      	movs	r2, #0
 8011552:	611c      	str	r4, [r3, #16]
 8011554:	615a      	str	r2, [r3, #20]
 8011556:	bd38      	pop	{r3, r4, r5, pc}
 8011558:	20000700 	.word	0x20000700
 801155c:	08015efd 	.word	0x08015efd
 8011560:	08015f14 	.word	0x08015f14
 8011564:	abcd330e 	.word	0xabcd330e
 8011568:	e66d1234 	.word	0xe66d1234
 801156c:	0005deec 	.word	0x0005deec

08011570 <rand>:
 8011570:	4b16      	ldr	r3, [pc, #88]	; (80115cc <rand+0x5c>)
 8011572:	b510      	push	{r4, lr}
 8011574:	681c      	ldr	r4, [r3, #0]
 8011576:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011578:	b9b3      	cbnz	r3, 80115a8 <rand+0x38>
 801157a:	2018      	movs	r0, #24
 801157c:	f7ff f858 	bl	8010630 <malloc>
 8011580:	63a0      	str	r0, [r4, #56]	; 0x38
 8011582:	b928      	cbnz	r0, 8011590 <rand+0x20>
 8011584:	4602      	mov	r2, r0
 8011586:	4b12      	ldr	r3, [pc, #72]	; (80115d0 <rand+0x60>)
 8011588:	4812      	ldr	r0, [pc, #72]	; (80115d4 <rand+0x64>)
 801158a:	214e      	movs	r1, #78	; 0x4e
 801158c:	f000 ff2a 	bl	80123e4 <__assert_func>
 8011590:	4a11      	ldr	r2, [pc, #68]	; (80115d8 <rand+0x68>)
 8011592:	4b12      	ldr	r3, [pc, #72]	; (80115dc <rand+0x6c>)
 8011594:	e9c0 2300 	strd	r2, r3, [r0]
 8011598:	4b11      	ldr	r3, [pc, #68]	; (80115e0 <rand+0x70>)
 801159a:	6083      	str	r3, [r0, #8]
 801159c:	230b      	movs	r3, #11
 801159e:	8183      	strh	r3, [r0, #12]
 80115a0:	2201      	movs	r2, #1
 80115a2:	2300      	movs	r3, #0
 80115a4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80115a8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80115aa:	4a0e      	ldr	r2, [pc, #56]	; (80115e4 <rand+0x74>)
 80115ac:	6920      	ldr	r0, [r4, #16]
 80115ae:	6963      	ldr	r3, [r4, #20]
 80115b0:	490d      	ldr	r1, [pc, #52]	; (80115e8 <rand+0x78>)
 80115b2:	4342      	muls	r2, r0
 80115b4:	fb01 2203 	mla	r2, r1, r3, r2
 80115b8:	fba0 0101 	umull	r0, r1, r0, r1
 80115bc:	1c43      	adds	r3, r0, #1
 80115be:	eb42 0001 	adc.w	r0, r2, r1
 80115c2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80115c6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80115ca:	bd10      	pop	{r4, pc}
 80115cc:	20000700 	.word	0x20000700
 80115d0:	08015efd 	.word	0x08015efd
 80115d4:	08015f14 	.word	0x08015f14
 80115d8:	abcd330e 	.word	0xabcd330e
 80115dc:	e66d1234 	.word	0xe66d1234
 80115e0:	0005deec 	.word	0x0005deec
 80115e4:	5851f42d 	.word	0x5851f42d
 80115e8:	4c957f2d 	.word	0x4c957f2d

080115ec <_sbrk_r>:
 80115ec:	b538      	push	{r3, r4, r5, lr}
 80115ee:	4d06      	ldr	r5, [pc, #24]	; (8011608 <_sbrk_r+0x1c>)
 80115f0:	2300      	movs	r3, #0
 80115f2:	4604      	mov	r4, r0
 80115f4:	4608      	mov	r0, r1
 80115f6:	602b      	str	r3, [r5, #0]
 80115f8:	f7f3 f9e8 	bl	80049cc <_sbrk>
 80115fc:	1c43      	adds	r3, r0, #1
 80115fe:	d102      	bne.n	8011606 <_sbrk_r+0x1a>
 8011600:	682b      	ldr	r3, [r5, #0]
 8011602:	b103      	cbz	r3, 8011606 <_sbrk_r+0x1a>
 8011604:	6023      	str	r3, [r4, #0]
 8011606:	bd38      	pop	{r3, r4, r5, pc}
 8011608:	20012a3c 	.word	0x20012a3c

0801160c <nanf>:
 801160c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011614 <nanf+0x8>
 8011610:	4770      	bx	lr
 8011612:	bf00      	nop
 8011614:	7fc00000 	.word	0x7fc00000

08011618 <siprintf>:
 8011618:	b40e      	push	{r1, r2, r3}
 801161a:	b500      	push	{lr}
 801161c:	b09c      	sub	sp, #112	; 0x70
 801161e:	ab1d      	add	r3, sp, #116	; 0x74
 8011620:	9002      	str	r0, [sp, #8]
 8011622:	9006      	str	r0, [sp, #24]
 8011624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011628:	4809      	ldr	r0, [pc, #36]	; (8011650 <siprintf+0x38>)
 801162a:	9107      	str	r1, [sp, #28]
 801162c:	9104      	str	r1, [sp, #16]
 801162e:	4909      	ldr	r1, [pc, #36]	; (8011654 <siprintf+0x3c>)
 8011630:	f853 2b04 	ldr.w	r2, [r3], #4
 8011634:	9105      	str	r1, [sp, #20]
 8011636:	6800      	ldr	r0, [r0, #0]
 8011638:	9301      	str	r3, [sp, #4]
 801163a:	a902      	add	r1, sp, #8
 801163c:	f002 fe60 	bl	8014300 <_svfiprintf_r>
 8011640:	9b02      	ldr	r3, [sp, #8]
 8011642:	2200      	movs	r2, #0
 8011644:	701a      	strb	r2, [r3, #0]
 8011646:	b01c      	add	sp, #112	; 0x70
 8011648:	f85d eb04 	ldr.w	lr, [sp], #4
 801164c:	b003      	add	sp, #12
 801164e:	4770      	bx	lr
 8011650:	20000700 	.word	0x20000700
 8011654:	ffff0208 	.word	0xffff0208

08011658 <sulp>:
 8011658:	b570      	push	{r4, r5, r6, lr}
 801165a:	4604      	mov	r4, r0
 801165c:	460d      	mov	r5, r1
 801165e:	ec45 4b10 	vmov	d0, r4, r5
 8011662:	4616      	mov	r6, r2
 8011664:	f002 fc8c 	bl	8013f80 <__ulp>
 8011668:	ec51 0b10 	vmov	r0, r1, d0
 801166c:	b17e      	cbz	r6, 801168e <sulp+0x36>
 801166e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011672:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011676:	2b00      	cmp	r3, #0
 8011678:	dd09      	ble.n	801168e <sulp+0x36>
 801167a:	051b      	lsls	r3, r3, #20
 801167c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011680:	2400      	movs	r4, #0
 8011682:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011686:	4622      	mov	r2, r4
 8011688:	462b      	mov	r3, r5
 801168a:	f7ee ffed 	bl	8000668 <__aeabi_dmul>
 801168e:	bd70      	pop	{r4, r5, r6, pc}

08011690 <_strtod_l>:
 8011690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011694:	ed2d 8b02 	vpush	{d8}
 8011698:	b09d      	sub	sp, #116	; 0x74
 801169a:	461f      	mov	r7, r3
 801169c:	2300      	movs	r3, #0
 801169e:	9318      	str	r3, [sp, #96]	; 0x60
 80116a0:	4ba2      	ldr	r3, [pc, #648]	; (801192c <_strtod_l+0x29c>)
 80116a2:	9213      	str	r2, [sp, #76]	; 0x4c
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	9305      	str	r3, [sp, #20]
 80116a8:	4604      	mov	r4, r0
 80116aa:	4618      	mov	r0, r3
 80116ac:	4688      	mov	r8, r1
 80116ae:	f7ee fdc1 	bl	8000234 <strlen>
 80116b2:	f04f 0a00 	mov.w	sl, #0
 80116b6:	4605      	mov	r5, r0
 80116b8:	f04f 0b00 	mov.w	fp, #0
 80116bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80116c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80116c2:	781a      	ldrb	r2, [r3, #0]
 80116c4:	2a2b      	cmp	r2, #43	; 0x2b
 80116c6:	d04e      	beq.n	8011766 <_strtod_l+0xd6>
 80116c8:	d83b      	bhi.n	8011742 <_strtod_l+0xb2>
 80116ca:	2a0d      	cmp	r2, #13
 80116cc:	d834      	bhi.n	8011738 <_strtod_l+0xa8>
 80116ce:	2a08      	cmp	r2, #8
 80116d0:	d834      	bhi.n	801173c <_strtod_l+0xac>
 80116d2:	2a00      	cmp	r2, #0
 80116d4:	d03e      	beq.n	8011754 <_strtod_l+0xc4>
 80116d6:	2300      	movs	r3, #0
 80116d8:	930a      	str	r3, [sp, #40]	; 0x28
 80116da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80116dc:	7833      	ldrb	r3, [r6, #0]
 80116de:	2b30      	cmp	r3, #48	; 0x30
 80116e0:	f040 80b0 	bne.w	8011844 <_strtod_l+0x1b4>
 80116e4:	7873      	ldrb	r3, [r6, #1]
 80116e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80116ea:	2b58      	cmp	r3, #88	; 0x58
 80116ec:	d168      	bne.n	80117c0 <_strtod_l+0x130>
 80116ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116f0:	9301      	str	r3, [sp, #4]
 80116f2:	ab18      	add	r3, sp, #96	; 0x60
 80116f4:	9702      	str	r7, [sp, #8]
 80116f6:	9300      	str	r3, [sp, #0]
 80116f8:	4a8d      	ldr	r2, [pc, #564]	; (8011930 <_strtod_l+0x2a0>)
 80116fa:	ab19      	add	r3, sp, #100	; 0x64
 80116fc:	a917      	add	r1, sp, #92	; 0x5c
 80116fe:	4620      	mov	r0, r4
 8011700:	f001 fd82 	bl	8013208 <__gethex>
 8011704:	f010 0707 	ands.w	r7, r0, #7
 8011708:	4605      	mov	r5, r0
 801170a:	d005      	beq.n	8011718 <_strtod_l+0x88>
 801170c:	2f06      	cmp	r7, #6
 801170e:	d12c      	bne.n	801176a <_strtod_l+0xda>
 8011710:	3601      	adds	r6, #1
 8011712:	2300      	movs	r3, #0
 8011714:	9617      	str	r6, [sp, #92]	; 0x5c
 8011716:	930a      	str	r3, [sp, #40]	; 0x28
 8011718:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801171a:	2b00      	cmp	r3, #0
 801171c:	f040 8590 	bne.w	8012240 <_strtod_l+0xbb0>
 8011720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011722:	b1eb      	cbz	r3, 8011760 <_strtod_l+0xd0>
 8011724:	4652      	mov	r2, sl
 8011726:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801172a:	ec43 2b10 	vmov	d0, r2, r3
 801172e:	b01d      	add	sp, #116	; 0x74
 8011730:	ecbd 8b02 	vpop	{d8}
 8011734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011738:	2a20      	cmp	r2, #32
 801173a:	d1cc      	bne.n	80116d6 <_strtod_l+0x46>
 801173c:	3301      	adds	r3, #1
 801173e:	9317      	str	r3, [sp, #92]	; 0x5c
 8011740:	e7be      	b.n	80116c0 <_strtod_l+0x30>
 8011742:	2a2d      	cmp	r2, #45	; 0x2d
 8011744:	d1c7      	bne.n	80116d6 <_strtod_l+0x46>
 8011746:	2201      	movs	r2, #1
 8011748:	920a      	str	r2, [sp, #40]	; 0x28
 801174a:	1c5a      	adds	r2, r3, #1
 801174c:	9217      	str	r2, [sp, #92]	; 0x5c
 801174e:	785b      	ldrb	r3, [r3, #1]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d1c2      	bne.n	80116da <_strtod_l+0x4a>
 8011754:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011756:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801175a:	2b00      	cmp	r3, #0
 801175c:	f040 856e 	bne.w	801223c <_strtod_l+0xbac>
 8011760:	4652      	mov	r2, sl
 8011762:	465b      	mov	r3, fp
 8011764:	e7e1      	b.n	801172a <_strtod_l+0x9a>
 8011766:	2200      	movs	r2, #0
 8011768:	e7ee      	b.n	8011748 <_strtod_l+0xb8>
 801176a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801176c:	b13a      	cbz	r2, 801177e <_strtod_l+0xee>
 801176e:	2135      	movs	r1, #53	; 0x35
 8011770:	a81a      	add	r0, sp, #104	; 0x68
 8011772:	f002 fd10 	bl	8014196 <__copybits>
 8011776:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011778:	4620      	mov	r0, r4
 801177a:	f002 f8cf 	bl	801391c <_Bfree>
 801177e:	3f01      	subs	r7, #1
 8011780:	2f04      	cmp	r7, #4
 8011782:	d806      	bhi.n	8011792 <_strtod_l+0x102>
 8011784:	e8df f007 	tbb	[pc, r7]
 8011788:	1714030a 	.word	0x1714030a
 801178c:	0a          	.byte	0x0a
 801178d:	00          	.byte	0x00
 801178e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8011792:	0728      	lsls	r0, r5, #28
 8011794:	d5c0      	bpl.n	8011718 <_strtod_l+0x88>
 8011796:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801179a:	e7bd      	b.n	8011718 <_strtod_l+0x88>
 801179c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80117a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80117a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80117a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80117aa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80117ae:	e7f0      	b.n	8011792 <_strtod_l+0x102>
 80117b0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8011934 <_strtod_l+0x2a4>
 80117b4:	e7ed      	b.n	8011792 <_strtod_l+0x102>
 80117b6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80117ba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80117be:	e7e8      	b.n	8011792 <_strtod_l+0x102>
 80117c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80117c2:	1c5a      	adds	r2, r3, #1
 80117c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80117c6:	785b      	ldrb	r3, [r3, #1]
 80117c8:	2b30      	cmp	r3, #48	; 0x30
 80117ca:	d0f9      	beq.n	80117c0 <_strtod_l+0x130>
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d0a3      	beq.n	8011718 <_strtod_l+0x88>
 80117d0:	2301      	movs	r3, #1
 80117d2:	f04f 0900 	mov.w	r9, #0
 80117d6:	9304      	str	r3, [sp, #16]
 80117d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80117da:	9308      	str	r3, [sp, #32]
 80117dc:	f8cd 901c 	str.w	r9, [sp, #28]
 80117e0:	464f      	mov	r7, r9
 80117e2:	220a      	movs	r2, #10
 80117e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80117e6:	7806      	ldrb	r6, [r0, #0]
 80117e8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80117ec:	b2d9      	uxtb	r1, r3
 80117ee:	2909      	cmp	r1, #9
 80117f0:	d92a      	bls.n	8011848 <_strtod_l+0x1b8>
 80117f2:	9905      	ldr	r1, [sp, #20]
 80117f4:	462a      	mov	r2, r5
 80117f6:	f002 ffe7 	bl	80147c8 <strncmp>
 80117fa:	b398      	cbz	r0, 8011864 <_strtod_l+0x1d4>
 80117fc:	2000      	movs	r0, #0
 80117fe:	4632      	mov	r2, r6
 8011800:	463d      	mov	r5, r7
 8011802:	9005      	str	r0, [sp, #20]
 8011804:	4603      	mov	r3, r0
 8011806:	2a65      	cmp	r2, #101	; 0x65
 8011808:	d001      	beq.n	801180e <_strtod_l+0x17e>
 801180a:	2a45      	cmp	r2, #69	; 0x45
 801180c:	d118      	bne.n	8011840 <_strtod_l+0x1b0>
 801180e:	b91d      	cbnz	r5, 8011818 <_strtod_l+0x188>
 8011810:	9a04      	ldr	r2, [sp, #16]
 8011812:	4302      	orrs	r2, r0
 8011814:	d09e      	beq.n	8011754 <_strtod_l+0xc4>
 8011816:	2500      	movs	r5, #0
 8011818:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801181c:	f108 0201 	add.w	r2, r8, #1
 8011820:	9217      	str	r2, [sp, #92]	; 0x5c
 8011822:	f898 2001 	ldrb.w	r2, [r8, #1]
 8011826:	2a2b      	cmp	r2, #43	; 0x2b
 8011828:	d075      	beq.n	8011916 <_strtod_l+0x286>
 801182a:	2a2d      	cmp	r2, #45	; 0x2d
 801182c:	d07b      	beq.n	8011926 <_strtod_l+0x296>
 801182e:	f04f 0c00 	mov.w	ip, #0
 8011832:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011836:	2909      	cmp	r1, #9
 8011838:	f240 8082 	bls.w	8011940 <_strtod_l+0x2b0>
 801183c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011840:	2600      	movs	r6, #0
 8011842:	e09d      	b.n	8011980 <_strtod_l+0x2f0>
 8011844:	2300      	movs	r3, #0
 8011846:	e7c4      	b.n	80117d2 <_strtod_l+0x142>
 8011848:	2f08      	cmp	r7, #8
 801184a:	bfd8      	it	le
 801184c:	9907      	ldrle	r1, [sp, #28]
 801184e:	f100 0001 	add.w	r0, r0, #1
 8011852:	bfda      	itte	le
 8011854:	fb02 3301 	mlale	r3, r2, r1, r3
 8011858:	9307      	strle	r3, [sp, #28]
 801185a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801185e:	3701      	adds	r7, #1
 8011860:	9017      	str	r0, [sp, #92]	; 0x5c
 8011862:	e7bf      	b.n	80117e4 <_strtod_l+0x154>
 8011864:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011866:	195a      	adds	r2, r3, r5
 8011868:	9217      	str	r2, [sp, #92]	; 0x5c
 801186a:	5d5a      	ldrb	r2, [r3, r5]
 801186c:	2f00      	cmp	r7, #0
 801186e:	d037      	beq.n	80118e0 <_strtod_l+0x250>
 8011870:	9005      	str	r0, [sp, #20]
 8011872:	463d      	mov	r5, r7
 8011874:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8011878:	2b09      	cmp	r3, #9
 801187a:	d912      	bls.n	80118a2 <_strtod_l+0x212>
 801187c:	2301      	movs	r3, #1
 801187e:	e7c2      	b.n	8011806 <_strtod_l+0x176>
 8011880:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011882:	1c5a      	adds	r2, r3, #1
 8011884:	9217      	str	r2, [sp, #92]	; 0x5c
 8011886:	785a      	ldrb	r2, [r3, #1]
 8011888:	3001      	adds	r0, #1
 801188a:	2a30      	cmp	r2, #48	; 0x30
 801188c:	d0f8      	beq.n	8011880 <_strtod_l+0x1f0>
 801188e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011892:	2b08      	cmp	r3, #8
 8011894:	f200 84d9 	bhi.w	801224a <_strtod_l+0xbba>
 8011898:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801189a:	9005      	str	r0, [sp, #20]
 801189c:	2000      	movs	r0, #0
 801189e:	9308      	str	r3, [sp, #32]
 80118a0:	4605      	mov	r5, r0
 80118a2:	3a30      	subs	r2, #48	; 0x30
 80118a4:	f100 0301 	add.w	r3, r0, #1
 80118a8:	d014      	beq.n	80118d4 <_strtod_l+0x244>
 80118aa:	9905      	ldr	r1, [sp, #20]
 80118ac:	4419      	add	r1, r3
 80118ae:	9105      	str	r1, [sp, #20]
 80118b0:	462b      	mov	r3, r5
 80118b2:	eb00 0e05 	add.w	lr, r0, r5
 80118b6:	210a      	movs	r1, #10
 80118b8:	4573      	cmp	r3, lr
 80118ba:	d113      	bne.n	80118e4 <_strtod_l+0x254>
 80118bc:	182b      	adds	r3, r5, r0
 80118be:	2b08      	cmp	r3, #8
 80118c0:	f105 0501 	add.w	r5, r5, #1
 80118c4:	4405      	add	r5, r0
 80118c6:	dc1c      	bgt.n	8011902 <_strtod_l+0x272>
 80118c8:	9907      	ldr	r1, [sp, #28]
 80118ca:	230a      	movs	r3, #10
 80118cc:	fb03 2301 	mla	r3, r3, r1, r2
 80118d0:	9307      	str	r3, [sp, #28]
 80118d2:	2300      	movs	r3, #0
 80118d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80118d6:	1c51      	adds	r1, r2, #1
 80118d8:	9117      	str	r1, [sp, #92]	; 0x5c
 80118da:	7852      	ldrb	r2, [r2, #1]
 80118dc:	4618      	mov	r0, r3
 80118de:	e7c9      	b.n	8011874 <_strtod_l+0x1e4>
 80118e0:	4638      	mov	r0, r7
 80118e2:	e7d2      	b.n	801188a <_strtod_l+0x1fa>
 80118e4:	2b08      	cmp	r3, #8
 80118e6:	dc04      	bgt.n	80118f2 <_strtod_l+0x262>
 80118e8:	9e07      	ldr	r6, [sp, #28]
 80118ea:	434e      	muls	r6, r1
 80118ec:	9607      	str	r6, [sp, #28]
 80118ee:	3301      	adds	r3, #1
 80118f0:	e7e2      	b.n	80118b8 <_strtod_l+0x228>
 80118f2:	f103 0c01 	add.w	ip, r3, #1
 80118f6:	f1bc 0f10 	cmp.w	ip, #16
 80118fa:	bfd8      	it	le
 80118fc:	fb01 f909 	mulle.w	r9, r1, r9
 8011900:	e7f5      	b.n	80118ee <_strtod_l+0x25e>
 8011902:	2d10      	cmp	r5, #16
 8011904:	bfdc      	itt	le
 8011906:	230a      	movle	r3, #10
 8011908:	fb03 2909 	mlale	r9, r3, r9, r2
 801190c:	e7e1      	b.n	80118d2 <_strtod_l+0x242>
 801190e:	2300      	movs	r3, #0
 8011910:	9305      	str	r3, [sp, #20]
 8011912:	2301      	movs	r3, #1
 8011914:	e77c      	b.n	8011810 <_strtod_l+0x180>
 8011916:	f04f 0c00 	mov.w	ip, #0
 801191a:	f108 0202 	add.w	r2, r8, #2
 801191e:	9217      	str	r2, [sp, #92]	; 0x5c
 8011920:	f898 2002 	ldrb.w	r2, [r8, #2]
 8011924:	e785      	b.n	8011832 <_strtod_l+0x1a2>
 8011926:	f04f 0c01 	mov.w	ip, #1
 801192a:	e7f6      	b.n	801191a <_strtod_l+0x28a>
 801192c:	080161dc 	.word	0x080161dc
 8011930:	08015f70 	.word	0x08015f70
 8011934:	7ff00000 	.word	0x7ff00000
 8011938:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801193a:	1c51      	adds	r1, r2, #1
 801193c:	9117      	str	r1, [sp, #92]	; 0x5c
 801193e:	7852      	ldrb	r2, [r2, #1]
 8011940:	2a30      	cmp	r2, #48	; 0x30
 8011942:	d0f9      	beq.n	8011938 <_strtod_l+0x2a8>
 8011944:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011948:	2908      	cmp	r1, #8
 801194a:	f63f af79 	bhi.w	8011840 <_strtod_l+0x1b0>
 801194e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8011952:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011954:	9206      	str	r2, [sp, #24]
 8011956:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011958:	1c51      	adds	r1, r2, #1
 801195a:	9117      	str	r1, [sp, #92]	; 0x5c
 801195c:	7852      	ldrb	r2, [r2, #1]
 801195e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8011962:	2e09      	cmp	r6, #9
 8011964:	d937      	bls.n	80119d6 <_strtod_l+0x346>
 8011966:	9e06      	ldr	r6, [sp, #24]
 8011968:	1b89      	subs	r1, r1, r6
 801196a:	2908      	cmp	r1, #8
 801196c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011970:	dc02      	bgt.n	8011978 <_strtod_l+0x2e8>
 8011972:	4576      	cmp	r6, lr
 8011974:	bfa8      	it	ge
 8011976:	4676      	movge	r6, lr
 8011978:	f1bc 0f00 	cmp.w	ip, #0
 801197c:	d000      	beq.n	8011980 <_strtod_l+0x2f0>
 801197e:	4276      	negs	r6, r6
 8011980:	2d00      	cmp	r5, #0
 8011982:	d14d      	bne.n	8011a20 <_strtod_l+0x390>
 8011984:	9904      	ldr	r1, [sp, #16]
 8011986:	4301      	orrs	r1, r0
 8011988:	f47f aec6 	bne.w	8011718 <_strtod_l+0x88>
 801198c:	2b00      	cmp	r3, #0
 801198e:	f47f aee1 	bne.w	8011754 <_strtod_l+0xc4>
 8011992:	2a69      	cmp	r2, #105	; 0x69
 8011994:	d027      	beq.n	80119e6 <_strtod_l+0x356>
 8011996:	dc24      	bgt.n	80119e2 <_strtod_l+0x352>
 8011998:	2a49      	cmp	r2, #73	; 0x49
 801199a:	d024      	beq.n	80119e6 <_strtod_l+0x356>
 801199c:	2a4e      	cmp	r2, #78	; 0x4e
 801199e:	f47f aed9 	bne.w	8011754 <_strtod_l+0xc4>
 80119a2:	499f      	ldr	r1, [pc, #636]	; (8011c20 <_strtod_l+0x590>)
 80119a4:	a817      	add	r0, sp, #92	; 0x5c
 80119a6:	f001 fe87 	bl	80136b8 <__match>
 80119aa:	2800      	cmp	r0, #0
 80119ac:	f43f aed2 	beq.w	8011754 <_strtod_l+0xc4>
 80119b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80119b2:	781b      	ldrb	r3, [r3, #0]
 80119b4:	2b28      	cmp	r3, #40	; 0x28
 80119b6:	d12d      	bne.n	8011a14 <_strtod_l+0x384>
 80119b8:	499a      	ldr	r1, [pc, #616]	; (8011c24 <_strtod_l+0x594>)
 80119ba:	aa1a      	add	r2, sp, #104	; 0x68
 80119bc:	a817      	add	r0, sp, #92	; 0x5c
 80119be:	f001 fe8f 	bl	80136e0 <__hexnan>
 80119c2:	2805      	cmp	r0, #5
 80119c4:	d126      	bne.n	8011a14 <_strtod_l+0x384>
 80119c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80119c8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80119cc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80119d0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80119d4:	e6a0      	b.n	8011718 <_strtod_l+0x88>
 80119d6:	210a      	movs	r1, #10
 80119d8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80119dc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80119e0:	e7b9      	b.n	8011956 <_strtod_l+0x2c6>
 80119e2:	2a6e      	cmp	r2, #110	; 0x6e
 80119e4:	e7db      	b.n	801199e <_strtod_l+0x30e>
 80119e6:	4990      	ldr	r1, [pc, #576]	; (8011c28 <_strtod_l+0x598>)
 80119e8:	a817      	add	r0, sp, #92	; 0x5c
 80119ea:	f001 fe65 	bl	80136b8 <__match>
 80119ee:	2800      	cmp	r0, #0
 80119f0:	f43f aeb0 	beq.w	8011754 <_strtod_l+0xc4>
 80119f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80119f6:	498d      	ldr	r1, [pc, #564]	; (8011c2c <_strtod_l+0x59c>)
 80119f8:	3b01      	subs	r3, #1
 80119fa:	a817      	add	r0, sp, #92	; 0x5c
 80119fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80119fe:	f001 fe5b 	bl	80136b8 <__match>
 8011a02:	b910      	cbnz	r0, 8011a0a <_strtod_l+0x37a>
 8011a04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a06:	3301      	adds	r3, #1
 8011a08:	9317      	str	r3, [sp, #92]	; 0x5c
 8011a0a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8011c3c <_strtod_l+0x5ac>
 8011a0e:	f04f 0a00 	mov.w	sl, #0
 8011a12:	e681      	b.n	8011718 <_strtod_l+0x88>
 8011a14:	4886      	ldr	r0, [pc, #536]	; (8011c30 <_strtod_l+0x5a0>)
 8011a16:	f002 fecf 	bl	80147b8 <nan>
 8011a1a:	ec5b ab10 	vmov	sl, fp, d0
 8011a1e:	e67b      	b.n	8011718 <_strtod_l+0x88>
 8011a20:	9b05      	ldr	r3, [sp, #20]
 8011a22:	9807      	ldr	r0, [sp, #28]
 8011a24:	1af3      	subs	r3, r6, r3
 8011a26:	2f00      	cmp	r7, #0
 8011a28:	bf08      	it	eq
 8011a2a:	462f      	moveq	r7, r5
 8011a2c:	2d10      	cmp	r5, #16
 8011a2e:	9306      	str	r3, [sp, #24]
 8011a30:	46a8      	mov	r8, r5
 8011a32:	bfa8      	it	ge
 8011a34:	f04f 0810 	movge.w	r8, #16
 8011a38:	f7ee fd9c 	bl	8000574 <__aeabi_ui2d>
 8011a3c:	2d09      	cmp	r5, #9
 8011a3e:	4682      	mov	sl, r0
 8011a40:	468b      	mov	fp, r1
 8011a42:	dd13      	ble.n	8011a6c <_strtod_l+0x3dc>
 8011a44:	4b7b      	ldr	r3, [pc, #492]	; (8011c34 <_strtod_l+0x5a4>)
 8011a46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011a4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011a4e:	f7ee fe0b 	bl	8000668 <__aeabi_dmul>
 8011a52:	4682      	mov	sl, r0
 8011a54:	4648      	mov	r0, r9
 8011a56:	468b      	mov	fp, r1
 8011a58:	f7ee fd8c 	bl	8000574 <__aeabi_ui2d>
 8011a5c:	4602      	mov	r2, r0
 8011a5e:	460b      	mov	r3, r1
 8011a60:	4650      	mov	r0, sl
 8011a62:	4659      	mov	r1, fp
 8011a64:	f7ee fc4a 	bl	80002fc <__adddf3>
 8011a68:	4682      	mov	sl, r0
 8011a6a:	468b      	mov	fp, r1
 8011a6c:	2d0f      	cmp	r5, #15
 8011a6e:	dc38      	bgt.n	8011ae2 <_strtod_l+0x452>
 8011a70:	9b06      	ldr	r3, [sp, #24]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	f43f ae50 	beq.w	8011718 <_strtod_l+0x88>
 8011a78:	dd24      	ble.n	8011ac4 <_strtod_l+0x434>
 8011a7a:	2b16      	cmp	r3, #22
 8011a7c:	dc0b      	bgt.n	8011a96 <_strtod_l+0x406>
 8011a7e:	496d      	ldr	r1, [pc, #436]	; (8011c34 <_strtod_l+0x5a4>)
 8011a80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a88:	4652      	mov	r2, sl
 8011a8a:	465b      	mov	r3, fp
 8011a8c:	f7ee fdec 	bl	8000668 <__aeabi_dmul>
 8011a90:	4682      	mov	sl, r0
 8011a92:	468b      	mov	fp, r1
 8011a94:	e640      	b.n	8011718 <_strtod_l+0x88>
 8011a96:	9a06      	ldr	r2, [sp, #24]
 8011a98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	db20      	blt.n	8011ae2 <_strtod_l+0x452>
 8011aa0:	4c64      	ldr	r4, [pc, #400]	; (8011c34 <_strtod_l+0x5a4>)
 8011aa2:	f1c5 050f 	rsb	r5, r5, #15
 8011aa6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011aaa:	4652      	mov	r2, sl
 8011aac:	465b      	mov	r3, fp
 8011aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ab2:	f7ee fdd9 	bl	8000668 <__aeabi_dmul>
 8011ab6:	9b06      	ldr	r3, [sp, #24]
 8011ab8:	1b5d      	subs	r5, r3, r5
 8011aba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011abe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011ac2:	e7e3      	b.n	8011a8c <_strtod_l+0x3fc>
 8011ac4:	9b06      	ldr	r3, [sp, #24]
 8011ac6:	3316      	adds	r3, #22
 8011ac8:	db0b      	blt.n	8011ae2 <_strtod_l+0x452>
 8011aca:	9b05      	ldr	r3, [sp, #20]
 8011acc:	1b9e      	subs	r6, r3, r6
 8011ace:	4b59      	ldr	r3, [pc, #356]	; (8011c34 <_strtod_l+0x5a4>)
 8011ad0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011ad4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011ad8:	4650      	mov	r0, sl
 8011ada:	4659      	mov	r1, fp
 8011adc:	f7ee feee 	bl	80008bc <__aeabi_ddiv>
 8011ae0:	e7d6      	b.n	8011a90 <_strtod_l+0x400>
 8011ae2:	9b06      	ldr	r3, [sp, #24]
 8011ae4:	eba5 0808 	sub.w	r8, r5, r8
 8011ae8:	4498      	add	r8, r3
 8011aea:	f1b8 0f00 	cmp.w	r8, #0
 8011aee:	dd74      	ble.n	8011bda <_strtod_l+0x54a>
 8011af0:	f018 030f 	ands.w	r3, r8, #15
 8011af4:	d00a      	beq.n	8011b0c <_strtod_l+0x47c>
 8011af6:	494f      	ldr	r1, [pc, #316]	; (8011c34 <_strtod_l+0x5a4>)
 8011af8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011afc:	4652      	mov	r2, sl
 8011afe:	465b      	mov	r3, fp
 8011b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b04:	f7ee fdb0 	bl	8000668 <__aeabi_dmul>
 8011b08:	4682      	mov	sl, r0
 8011b0a:	468b      	mov	fp, r1
 8011b0c:	f038 080f 	bics.w	r8, r8, #15
 8011b10:	d04f      	beq.n	8011bb2 <_strtod_l+0x522>
 8011b12:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011b16:	dd22      	ble.n	8011b5e <_strtod_l+0x4ce>
 8011b18:	2500      	movs	r5, #0
 8011b1a:	462e      	mov	r6, r5
 8011b1c:	9507      	str	r5, [sp, #28]
 8011b1e:	9505      	str	r5, [sp, #20]
 8011b20:	2322      	movs	r3, #34	; 0x22
 8011b22:	f8df b118 	ldr.w	fp, [pc, #280]	; 8011c3c <_strtod_l+0x5ac>
 8011b26:	6023      	str	r3, [r4, #0]
 8011b28:	f04f 0a00 	mov.w	sl, #0
 8011b2c:	9b07      	ldr	r3, [sp, #28]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	f43f adf2 	beq.w	8011718 <_strtod_l+0x88>
 8011b34:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011b36:	4620      	mov	r0, r4
 8011b38:	f001 fef0 	bl	801391c <_Bfree>
 8011b3c:	9905      	ldr	r1, [sp, #20]
 8011b3e:	4620      	mov	r0, r4
 8011b40:	f001 feec 	bl	801391c <_Bfree>
 8011b44:	4631      	mov	r1, r6
 8011b46:	4620      	mov	r0, r4
 8011b48:	f001 fee8 	bl	801391c <_Bfree>
 8011b4c:	9907      	ldr	r1, [sp, #28]
 8011b4e:	4620      	mov	r0, r4
 8011b50:	f001 fee4 	bl	801391c <_Bfree>
 8011b54:	4629      	mov	r1, r5
 8011b56:	4620      	mov	r0, r4
 8011b58:	f001 fee0 	bl	801391c <_Bfree>
 8011b5c:	e5dc      	b.n	8011718 <_strtod_l+0x88>
 8011b5e:	4b36      	ldr	r3, [pc, #216]	; (8011c38 <_strtod_l+0x5a8>)
 8011b60:	9304      	str	r3, [sp, #16]
 8011b62:	2300      	movs	r3, #0
 8011b64:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011b68:	4650      	mov	r0, sl
 8011b6a:	4659      	mov	r1, fp
 8011b6c:	4699      	mov	r9, r3
 8011b6e:	f1b8 0f01 	cmp.w	r8, #1
 8011b72:	dc21      	bgt.n	8011bb8 <_strtod_l+0x528>
 8011b74:	b10b      	cbz	r3, 8011b7a <_strtod_l+0x4ea>
 8011b76:	4682      	mov	sl, r0
 8011b78:	468b      	mov	fp, r1
 8011b7a:	4b2f      	ldr	r3, [pc, #188]	; (8011c38 <_strtod_l+0x5a8>)
 8011b7c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011b80:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011b84:	4652      	mov	r2, sl
 8011b86:	465b      	mov	r3, fp
 8011b88:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011b8c:	f7ee fd6c 	bl	8000668 <__aeabi_dmul>
 8011b90:	4b2a      	ldr	r3, [pc, #168]	; (8011c3c <_strtod_l+0x5ac>)
 8011b92:	460a      	mov	r2, r1
 8011b94:	400b      	ands	r3, r1
 8011b96:	492a      	ldr	r1, [pc, #168]	; (8011c40 <_strtod_l+0x5b0>)
 8011b98:	428b      	cmp	r3, r1
 8011b9a:	4682      	mov	sl, r0
 8011b9c:	d8bc      	bhi.n	8011b18 <_strtod_l+0x488>
 8011b9e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011ba2:	428b      	cmp	r3, r1
 8011ba4:	bf86      	itte	hi
 8011ba6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8011c44 <_strtod_l+0x5b4>
 8011baa:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8011bae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	9304      	str	r3, [sp, #16]
 8011bb6:	e084      	b.n	8011cc2 <_strtod_l+0x632>
 8011bb8:	f018 0f01 	tst.w	r8, #1
 8011bbc:	d005      	beq.n	8011bca <_strtod_l+0x53a>
 8011bbe:	9b04      	ldr	r3, [sp, #16]
 8011bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc4:	f7ee fd50 	bl	8000668 <__aeabi_dmul>
 8011bc8:	2301      	movs	r3, #1
 8011bca:	9a04      	ldr	r2, [sp, #16]
 8011bcc:	3208      	adds	r2, #8
 8011bce:	f109 0901 	add.w	r9, r9, #1
 8011bd2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011bd6:	9204      	str	r2, [sp, #16]
 8011bd8:	e7c9      	b.n	8011b6e <_strtod_l+0x4de>
 8011bda:	d0ea      	beq.n	8011bb2 <_strtod_l+0x522>
 8011bdc:	f1c8 0800 	rsb	r8, r8, #0
 8011be0:	f018 020f 	ands.w	r2, r8, #15
 8011be4:	d00a      	beq.n	8011bfc <_strtod_l+0x56c>
 8011be6:	4b13      	ldr	r3, [pc, #76]	; (8011c34 <_strtod_l+0x5a4>)
 8011be8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011bec:	4650      	mov	r0, sl
 8011bee:	4659      	mov	r1, fp
 8011bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf4:	f7ee fe62 	bl	80008bc <__aeabi_ddiv>
 8011bf8:	4682      	mov	sl, r0
 8011bfa:	468b      	mov	fp, r1
 8011bfc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011c00:	d0d7      	beq.n	8011bb2 <_strtod_l+0x522>
 8011c02:	f1b8 0f1f 	cmp.w	r8, #31
 8011c06:	dd1f      	ble.n	8011c48 <_strtod_l+0x5b8>
 8011c08:	2500      	movs	r5, #0
 8011c0a:	462e      	mov	r6, r5
 8011c0c:	9507      	str	r5, [sp, #28]
 8011c0e:	9505      	str	r5, [sp, #20]
 8011c10:	2322      	movs	r3, #34	; 0x22
 8011c12:	f04f 0a00 	mov.w	sl, #0
 8011c16:	f04f 0b00 	mov.w	fp, #0
 8011c1a:	6023      	str	r3, [r4, #0]
 8011c1c:	e786      	b.n	8011b2c <_strtod_l+0x49c>
 8011c1e:	bf00      	nop
 8011c20:	08015ed1 	.word	0x08015ed1
 8011c24:	08015f84 	.word	0x08015f84
 8011c28:	08015ec9 	.word	0x08015ec9
 8011c2c:	08016100 	.word	0x08016100
 8011c30:	08015ffb 	.word	0x08015ffb
 8011c34:	08016278 	.word	0x08016278
 8011c38:	08016250 	.word	0x08016250
 8011c3c:	7ff00000 	.word	0x7ff00000
 8011c40:	7ca00000 	.word	0x7ca00000
 8011c44:	7fefffff 	.word	0x7fefffff
 8011c48:	f018 0310 	ands.w	r3, r8, #16
 8011c4c:	bf18      	it	ne
 8011c4e:	236a      	movne	r3, #106	; 0x6a
 8011c50:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8012000 <_strtod_l+0x970>
 8011c54:	9304      	str	r3, [sp, #16]
 8011c56:	4650      	mov	r0, sl
 8011c58:	4659      	mov	r1, fp
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	f018 0f01 	tst.w	r8, #1
 8011c60:	d004      	beq.n	8011c6c <_strtod_l+0x5dc>
 8011c62:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011c66:	f7ee fcff 	bl	8000668 <__aeabi_dmul>
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011c70:	f109 0908 	add.w	r9, r9, #8
 8011c74:	d1f2      	bne.n	8011c5c <_strtod_l+0x5cc>
 8011c76:	b10b      	cbz	r3, 8011c7c <_strtod_l+0x5ec>
 8011c78:	4682      	mov	sl, r0
 8011c7a:	468b      	mov	fp, r1
 8011c7c:	9b04      	ldr	r3, [sp, #16]
 8011c7e:	b1c3      	cbz	r3, 8011cb2 <_strtod_l+0x622>
 8011c80:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011c84:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	4659      	mov	r1, fp
 8011c8c:	dd11      	ble.n	8011cb2 <_strtod_l+0x622>
 8011c8e:	2b1f      	cmp	r3, #31
 8011c90:	f340 8124 	ble.w	8011edc <_strtod_l+0x84c>
 8011c94:	2b34      	cmp	r3, #52	; 0x34
 8011c96:	bfde      	ittt	le
 8011c98:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8011c9c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8011ca0:	fa03 f202 	lslle.w	r2, r3, r2
 8011ca4:	f04f 0a00 	mov.w	sl, #0
 8011ca8:	bfcc      	ite	gt
 8011caa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011cae:	ea02 0b01 	andle.w	fp, r2, r1
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	4650      	mov	r0, sl
 8011cb8:	4659      	mov	r1, fp
 8011cba:	f7ee ff3d 	bl	8000b38 <__aeabi_dcmpeq>
 8011cbe:	2800      	cmp	r0, #0
 8011cc0:	d1a2      	bne.n	8011c08 <_strtod_l+0x578>
 8011cc2:	9b07      	ldr	r3, [sp, #28]
 8011cc4:	9300      	str	r3, [sp, #0]
 8011cc6:	9908      	ldr	r1, [sp, #32]
 8011cc8:	462b      	mov	r3, r5
 8011cca:	463a      	mov	r2, r7
 8011ccc:	4620      	mov	r0, r4
 8011cce:	f001 fe8d 	bl	80139ec <__s2b>
 8011cd2:	9007      	str	r0, [sp, #28]
 8011cd4:	2800      	cmp	r0, #0
 8011cd6:	f43f af1f 	beq.w	8011b18 <_strtod_l+0x488>
 8011cda:	9b05      	ldr	r3, [sp, #20]
 8011cdc:	1b9e      	subs	r6, r3, r6
 8011cde:	9b06      	ldr	r3, [sp, #24]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	bfb4      	ite	lt
 8011ce4:	4633      	movlt	r3, r6
 8011ce6:	2300      	movge	r3, #0
 8011ce8:	930c      	str	r3, [sp, #48]	; 0x30
 8011cea:	9b06      	ldr	r3, [sp, #24]
 8011cec:	2500      	movs	r5, #0
 8011cee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011cf2:	9312      	str	r3, [sp, #72]	; 0x48
 8011cf4:	462e      	mov	r6, r5
 8011cf6:	9b07      	ldr	r3, [sp, #28]
 8011cf8:	4620      	mov	r0, r4
 8011cfa:	6859      	ldr	r1, [r3, #4]
 8011cfc:	f001 fdce 	bl	801389c <_Balloc>
 8011d00:	9005      	str	r0, [sp, #20]
 8011d02:	2800      	cmp	r0, #0
 8011d04:	f43f af0c 	beq.w	8011b20 <_strtod_l+0x490>
 8011d08:	9b07      	ldr	r3, [sp, #28]
 8011d0a:	691a      	ldr	r2, [r3, #16]
 8011d0c:	3202      	adds	r2, #2
 8011d0e:	f103 010c 	add.w	r1, r3, #12
 8011d12:	0092      	lsls	r2, r2, #2
 8011d14:	300c      	adds	r0, #12
 8011d16:	f001 fda7 	bl	8013868 <memcpy>
 8011d1a:	ec4b ab10 	vmov	d0, sl, fp
 8011d1e:	aa1a      	add	r2, sp, #104	; 0x68
 8011d20:	a919      	add	r1, sp, #100	; 0x64
 8011d22:	4620      	mov	r0, r4
 8011d24:	f002 f9a8 	bl	8014078 <__d2b>
 8011d28:	ec4b ab18 	vmov	d8, sl, fp
 8011d2c:	9018      	str	r0, [sp, #96]	; 0x60
 8011d2e:	2800      	cmp	r0, #0
 8011d30:	f43f aef6 	beq.w	8011b20 <_strtod_l+0x490>
 8011d34:	2101      	movs	r1, #1
 8011d36:	4620      	mov	r0, r4
 8011d38:	f001 fef2 	bl	8013b20 <__i2b>
 8011d3c:	4606      	mov	r6, r0
 8011d3e:	2800      	cmp	r0, #0
 8011d40:	f43f aeee 	beq.w	8011b20 <_strtod_l+0x490>
 8011d44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011d46:	9904      	ldr	r1, [sp, #16]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	bfab      	itete	ge
 8011d4c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8011d4e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8011d50:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8011d52:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8011d56:	bfac      	ite	ge
 8011d58:	eb03 0902 	addge.w	r9, r3, r2
 8011d5c:	1ad7      	sublt	r7, r2, r3
 8011d5e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011d60:	eba3 0801 	sub.w	r8, r3, r1
 8011d64:	4490      	add	r8, r2
 8011d66:	4ba1      	ldr	r3, [pc, #644]	; (8011fec <_strtod_l+0x95c>)
 8011d68:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011d6c:	4598      	cmp	r8, r3
 8011d6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011d72:	f280 80c7 	bge.w	8011f04 <_strtod_l+0x874>
 8011d76:	eba3 0308 	sub.w	r3, r3, r8
 8011d7a:	2b1f      	cmp	r3, #31
 8011d7c:	eba2 0203 	sub.w	r2, r2, r3
 8011d80:	f04f 0101 	mov.w	r1, #1
 8011d84:	f300 80b1 	bgt.w	8011eea <_strtod_l+0x85a>
 8011d88:	fa01 f303 	lsl.w	r3, r1, r3
 8011d8c:	930d      	str	r3, [sp, #52]	; 0x34
 8011d8e:	2300      	movs	r3, #0
 8011d90:	9308      	str	r3, [sp, #32]
 8011d92:	eb09 0802 	add.w	r8, r9, r2
 8011d96:	9b04      	ldr	r3, [sp, #16]
 8011d98:	45c1      	cmp	r9, r8
 8011d9a:	4417      	add	r7, r2
 8011d9c:	441f      	add	r7, r3
 8011d9e:	464b      	mov	r3, r9
 8011da0:	bfa8      	it	ge
 8011da2:	4643      	movge	r3, r8
 8011da4:	42bb      	cmp	r3, r7
 8011da6:	bfa8      	it	ge
 8011da8:	463b      	movge	r3, r7
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	bfc2      	ittt	gt
 8011dae:	eba8 0803 	subgt.w	r8, r8, r3
 8011db2:	1aff      	subgt	r7, r7, r3
 8011db4:	eba9 0903 	subgt.w	r9, r9, r3
 8011db8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	dd17      	ble.n	8011dee <_strtod_l+0x75e>
 8011dbe:	4631      	mov	r1, r6
 8011dc0:	461a      	mov	r2, r3
 8011dc2:	4620      	mov	r0, r4
 8011dc4:	f001 ff6c 	bl	8013ca0 <__pow5mult>
 8011dc8:	4606      	mov	r6, r0
 8011dca:	2800      	cmp	r0, #0
 8011dcc:	f43f aea8 	beq.w	8011b20 <_strtod_l+0x490>
 8011dd0:	4601      	mov	r1, r0
 8011dd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011dd4:	4620      	mov	r0, r4
 8011dd6:	f001 feb9 	bl	8013b4c <__multiply>
 8011dda:	900b      	str	r0, [sp, #44]	; 0x2c
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	f43f ae9f 	beq.w	8011b20 <_strtod_l+0x490>
 8011de2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011de4:	4620      	mov	r0, r4
 8011de6:	f001 fd99 	bl	801391c <_Bfree>
 8011dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011dec:	9318      	str	r3, [sp, #96]	; 0x60
 8011dee:	f1b8 0f00 	cmp.w	r8, #0
 8011df2:	f300 808c 	bgt.w	8011f0e <_strtod_l+0x87e>
 8011df6:	9b06      	ldr	r3, [sp, #24]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	dd08      	ble.n	8011e0e <_strtod_l+0x77e>
 8011dfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011dfe:	9905      	ldr	r1, [sp, #20]
 8011e00:	4620      	mov	r0, r4
 8011e02:	f001 ff4d 	bl	8013ca0 <__pow5mult>
 8011e06:	9005      	str	r0, [sp, #20]
 8011e08:	2800      	cmp	r0, #0
 8011e0a:	f43f ae89 	beq.w	8011b20 <_strtod_l+0x490>
 8011e0e:	2f00      	cmp	r7, #0
 8011e10:	dd08      	ble.n	8011e24 <_strtod_l+0x794>
 8011e12:	9905      	ldr	r1, [sp, #20]
 8011e14:	463a      	mov	r2, r7
 8011e16:	4620      	mov	r0, r4
 8011e18:	f001 ff9c 	bl	8013d54 <__lshift>
 8011e1c:	9005      	str	r0, [sp, #20]
 8011e1e:	2800      	cmp	r0, #0
 8011e20:	f43f ae7e 	beq.w	8011b20 <_strtod_l+0x490>
 8011e24:	f1b9 0f00 	cmp.w	r9, #0
 8011e28:	dd08      	ble.n	8011e3c <_strtod_l+0x7ac>
 8011e2a:	4631      	mov	r1, r6
 8011e2c:	464a      	mov	r2, r9
 8011e2e:	4620      	mov	r0, r4
 8011e30:	f001 ff90 	bl	8013d54 <__lshift>
 8011e34:	4606      	mov	r6, r0
 8011e36:	2800      	cmp	r0, #0
 8011e38:	f43f ae72 	beq.w	8011b20 <_strtod_l+0x490>
 8011e3c:	9a05      	ldr	r2, [sp, #20]
 8011e3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011e40:	4620      	mov	r0, r4
 8011e42:	f002 f813 	bl	8013e6c <__mdiff>
 8011e46:	4605      	mov	r5, r0
 8011e48:	2800      	cmp	r0, #0
 8011e4a:	f43f ae69 	beq.w	8011b20 <_strtod_l+0x490>
 8011e4e:	68c3      	ldr	r3, [r0, #12]
 8011e50:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e52:	2300      	movs	r3, #0
 8011e54:	60c3      	str	r3, [r0, #12]
 8011e56:	4631      	mov	r1, r6
 8011e58:	f001 ffec 	bl	8013e34 <__mcmp>
 8011e5c:	2800      	cmp	r0, #0
 8011e5e:	da60      	bge.n	8011f22 <_strtod_l+0x892>
 8011e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e62:	ea53 030a 	orrs.w	r3, r3, sl
 8011e66:	f040 8082 	bne.w	8011f6e <_strtod_l+0x8de>
 8011e6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d17d      	bne.n	8011f6e <_strtod_l+0x8de>
 8011e72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011e76:	0d1b      	lsrs	r3, r3, #20
 8011e78:	051b      	lsls	r3, r3, #20
 8011e7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011e7e:	d976      	bls.n	8011f6e <_strtod_l+0x8de>
 8011e80:	696b      	ldr	r3, [r5, #20]
 8011e82:	b913      	cbnz	r3, 8011e8a <_strtod_l+0x7fa>
 8011e84:	692b      	ldr	r3, [r5, #16]
 8011e86:	2b01      	cmp	r3, #1
 8011e88:	dd71      	ble.n	8011f6e <_strtod_l+0x8de>
 8011e8a:	4629      	mov	r1, r5
 8011e8c:	2201      	movs	r2, #1
 8011e8e:	4620      	mov	r0, r4
 8011e90:	f001 ff60 	bl	8013d54 <__lshift>
 8011e94:	4631      	mov	r1, r6
 8011e96:	4605      	mov	r5, r0
 8011e98:	f001 ffcc 	bl	8013e34 <__mcmp>
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	dd66      	ble.n	8011f6e <_strtod_l+0x8de>
 8011ea0:	9904      	ldr	r1, [sp, #16]
 8011ea2:	4a53      	ldr	r2, [pc, #332]	; (8011ff0 <_strtod_l+0x960>)
 8011ea4:	465b      	mov	r3, fp
 8011ea6:	2900      	cmp	r1, #0
 8011ea8:	f000 8081 	beq.w	8011fae <_strtod_l+0x91e>
 8011eac:	ea02 010b 	and.w	r1, r2, fp
 8011eb0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011eb4:	dc7b      	bgt.n	8011fae <_strtod_l+0x91e>
 8011eb6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011eba:	f77f aea9 	ble.w	8011c10 <_strtod_l+0x580>
 8011ebe:	4b4d      	ldr	r3, [pc, #308]	; (8011ff4 <_strtod_l+0x964>)
 8011ec0:	4650      	mov	r0, sl
 8011ec2:	4659      	mov	r1, fp
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	f7ee fbcf 	bl	8000668 <__aeabi_dmul>
 8011eca:	460b      	mov	r3, r1
 8011ecc:	4303      	orrs	r3, r0
 8011ece:	bf08      	it	eq
 8011ed0:	2322      	moveq	r3, #34	; 0x22
 8011ed2:	4682      	mov	sl, r0
 8011ed4:	468b      	mov	fp, r1
 8011ed6:	bf08      	it	eq
 8011ed8:	6023      	streq	r3, [r4, #0]
 8011eda:	e62b      	b.n	8011b34 <_strtod_l+0x4a4>
 8011edc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8011ee4:	ea03 0a0a 	and.w	sl, r3, sl
 8011ee8:	e6e3      	b.n	8011cb2 <_strtod_l+0x622>
 8011eea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011eee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011ef2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011ef6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011efa:	fa01 f308 	lsl.w	r3, r1, r8
 8011efe:	9308      	str	r3, [sp, #32]
 8011f00:	910d      	str	r1, [sp, #52]	; 0x34
 8011f02:	e746      	b.n	8011d92 <_strtod_l+0x702>
 8011f04:	2300      	movs	r3, #0
 8011f06:	9308      	str	r3, [sp, #32]
 8011f08:	2301      	movs	r3, #1
 8011f0a:	930d      	str	r3, [sp, #52]	; 0x34
 8011f0c:	e741      	b.n	8011d92 <_strtod_l+0x702>
 8011f0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011f10:	4642      	mov	r2, r8
 8011f12:	4620      	mov	r0, r4
 8011f14:	f001 ff1e 	bl	8013d54 <__lshift>
 8011f18:	9018      	str	r0, [sp, #96]	; 0x60
 8011f1a:	2800      	cmp	r0, #0
 8011f1c:	f47f af6b 	bne.w	8011df6 <_strtod_l+0x766>
 8011f20:	e5fe      	b.n	8011b20 <_strtod_l+0x490>
 8011f22:	465f      	mov	r7, fp
 8011f24:	d16e      	bne.n	8012004 <_strtod_l+0x974>
 8011f26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011f28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011f2c:	b342      	cbz	r2, 8011f80 <_strtod_l+0x8f0>
 8011f2e:	4a32      	ldr	r2, [pc, #200]	; (8011ff8 <_strtod_l+0x968>)
 8011f30:	4293      	cmp	r3, r2
 8011f32:	d128      	bne.n	8011f86 <_strtod_l+0x8f6>
 8011f34:	9b04      	ldr	r3, [sp, #16]
 8011f36:	4651      	mov	r1, sl
 8011f38:	b1eb      	cbz	r3, 8011f76 <_strtod_l+0x8e6>
 8011f3a:	4b2d      	ldr	r3, [pc, #180]	; (8011ff0 <_strtod_l+0x960>)
 8011f3c:	403b      	ands	r3, r7
 8011f3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011f42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f46:	d819      	bhi.n	8011f7c <_strtod_l+0x8ec>
 8011f48:	0d1b      	lsrs	r3, r3, #20
 8011f4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8011f52:	4299      	cmp	r1, r3
 8011f54:	d117      	bne.n	8011f86 <_strtod_l+0x8f6>
 8011f56:	4b29      	ldr	r3, [pc, #164]	; (8011ffc <_strtod_l+0x96c>)
 8011f58:	429f      	cmp	r7, r3
 8011f5a:	d102      	bne.n	8011f62 <_strtod_l+0x8d2>
 8011f5c:	3101      	adds	r1, #1
 8011f5e:	f43f addf 	beq.w	8011b20 <_strtod_l+0x490>
 8011f62:	4b23      	ldr	r3, [pc, #140]	; (8011ff0 <_strtod_l+0x960>)
 8011f64:	403b      	ands	r3, r7
 8011f66:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011f6a:	f04f 0a00 	mov.w	sl, #0
 8011f6e:	9b04      	ldr	r3, [sp, #16]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d1a4      	bne.n	8011ebe <_strtod_l+0x82e>
 8011f74:	e5de      	b.n	8011b34 <_strtod_l+0x4a4>
 8011f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f7a:	e7ea      	b.n	8011f52 <_strtod_l+0x8c2>
 8011f7c:	4613      	mov	r3, r2
 8011f7e:	e7e8      	b.n	8011f52 <_strtod_l+0x8c2>
 8011f80:	ea53 030a 	orrs.w	r3, r3, sl
 8011f84:	d08c      	beq.n	8011ea0 <_strtod_l+0x810>
 8011f86:	9b08      	ldr	r3, [sp, #32]
 8011f88:	b1db      	cbz	r3, 8011fc2 <_strtod_l+0x932>
 8011f8a:	423b      	tst	r3, r7
 8011f8c:	d0ef      	beq.n	8011f6e <_strtod_l+0x8de>
 8011f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f90:	9a04      	ldr	r2, [sp, #16]
 8011f92:	4650      	mov	r0, sl
 8011f94:	4659      	mov	r1, fp
 8011f96:	b1c3      	cbz	r3, 8011fca <_strtod_l+0x93a>
 8011f98:	f7ff fb5e 	bl	8011658 <sulp>
 8011f9c:	4602      	mov	r2, r0
 8011f9e:	460b      	mov	r3, r1
 8011fa0:	ec51 0b18 	vmov	r0, r1, d8
 8011fa4:	f7ee f9aa 	bl	80002fc <__adddf3>
 8011fa8:	4682      	mov	sl, r0
 8011faa:	468b      	mov	fp, r1
 8011fac:	e7df      	b.n	8011f6e <_strtod_l+0x8de>
 8011fae:	4013      	ands	r3, r2
 8011fb0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011fb4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011fb8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011fbc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011fc0:	e7d5      	b.n	8011f6e <_strtod_l+0x8de>
 8011fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011fc4:	ea13 0f0a 	tst.w	r3, sl
 8011fc8:	e7e0      	b.n	8011f8c <_strtod_l+0x8fc>
 8011fca:	f7ff fb45 	bl	8011658 <sulp>
 8011fce:	4602      	mov	r2, r0
 8011fd0:	460b      	mov	r3, r1
 8011fd2:	ec51 0b18 	vmov	r0, r1, d8
 8011fd6:	f7ee f98f 	bl	80002f8 <__aeabi_dsub>
 8011fda:	2200      	movs	r2, #0
 8011fdc:	2300      	movs	r3, #0
 8011fde:	4682      	mov	sl, r0
 8011fe0:	468b      	mov	fp, r1
 8011fe2:	f7ee fda9 	bl	8000b38 <__aeabi_dcmpeq>
 8011fe6:	2800      	cmp	r0, #0
 8011fe8:	d0c1      	beq.n	8011f6e <_strtod_l+0x8de>
 8011fea:	e611      	b.n	8011c10 <_strtod_l+0x580>
 8011fec:	fffffc02 	.word	0xfffffc02
 8011ff0:	7ff00000 	.word	0x7ff00000
 8011ff4:	39500000 	.word	0x39500000
 8011ff8:	000fffff 	.word	0x000fffff
 8011ffc:	7fefffff 	.word	0x7fefffff
 8012000:	08015f98 	.word	0x08015f98
 8012004:	4631      	mov	r1, r6
 8012006:	4628      	mov	r0, r5
 8012008:	f002 f892 	bl	8014130 <__ratio>
 801200c:	ec59 8b10 	vmov	r8, r9, d0
 8012010:	ee10 0a10 	vmov	r0, s0
 8012014:	2200      	movs	r2, #0
 8012016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801201a:	4649      	mov	r1, r9
 801201c:	f7ee fda0 	bl	8000b60 <__aeabi_dcmple>
 8012020:	2800      	cmp	r0, #0
 8012022:	d07a      	beq.n	801211a <_strtod_l+0xa8a>
 8012024:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012026:	2b00      	cmp	r3, #0
 8012028:	d04a      	beq.n	80120c0 <_strtod_l+0xa30>
 801202a:	4b95      	ldr	r3, [pc, #596]	; (8012280 <_strtod_l+0xbf0>)
 801202c:	2200      	movs	r2, #0
 801202e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012032:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8012280 <_strtod_l+0xbf0>
 8012036:	f04f 0800 	mov.w	r8, #0
 801203a:	4b92      	ldr	r3, [pc, #584]	; (8012284 <_strtod_l+0xbf4>)
 801203c:	403b      	ands	r3, r7
 801203e:	930d      	str	r3, [sp, #52]	; 0x34
 8012040:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012042:	4b91      	ldr	r3, [pc, #580]	; (8012288 <_strtod_l+0xbf8>)
 8012044:	429a      	cmp	r2, r3
 8012046:	f040 80b0 	bne.w	80121aa <_strtod_l+0xb1a>
 801204a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801204e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8012052:	ec4b ab10 	vmov	d0, sl, fp
 8012056:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801205a:	f001 ff91 	bl	8013f80 <__ulp>
 801205e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012062:	ec53 2b10 	vmov	r2, r3, d0
 8012066:	f7ee faff 	bl	8000668 <__aeabi_dmul>
 801206a:	4652      	mov	r2, sl
 801206c:	465b      	mov	r3, fp
 801206e:	f7ee f945 	bl	80002fc <__adddf3>
 8012072:	460b      	mov	r3, r1
 8012074:	4983      	ldr	r1, [pc, #524]	; (8012284 <_strtod_l+0xbf4>)
 8012076:	4a85      	ldr	r2, [pc, #532]	; (801228c <_strtod_l+0xbfc>)
 8012078:	4019      	ands	r1, r3
 801207a:	4291      	cmp	r1, r2
 801207c:	4682      	mov	sl, r0
 801207e:	d960      	bls.n	8012142 <_strtod_l+0xab2>
 8012080:	ee18 3a90 	vmov	r3, s17
 8012084:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012088:	4293      	cmp	r3, r2
 801208a:	d104      	bne.n	8012096 <_strtod_l+0xa06>
 801208c:	ee18 3a10 	vmov	r3, s16
 8012090:	3301      	adds	r3, #1
 8012092:	f43f ad45 	beq.w	8011b20 <_strtod_l+0x490>
 8012096:	f8df b200 	ldr.w	fp, [pc, #512]	; 8012298 <_strtod_l+0xc08>
 801209a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801209e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80120a0:	4620      	mov	r0, r4
 80120a2:	f001 fc3b 	bl	801391c <_Bfree>
 80120a6:	9905      	ldr	r1, [sp, #20]
 80120a8:	4620      	mov	r0, r4
 80120aa:	f001 fc37 	bl	801391c <_Bfree>
 80120ae:	4631      	mov	r1, r6
 80120b0:	4620      	mov	r0, r4
 80120b2:	f001 fc33 	bl	801391c <_Bfree>
 80120b6:	4629      	mov	r1, r5
 80120b8:	4620      	mov	r0, r4
 80120ba:	f001 fc2f 	bl	801391c <_Bfree>
 80120be:	e61a      	b.n	8011cf6 <_strtod_l+0x666>
 80120c0:	f1ba 0f00 	cmp.w	sl, #0
 80120c4:	d11b      	bne.n	80120fe <_strtod_l+0xa6e>
 80120c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80120ca:	b9f3      	cbnz	r3, 801210a <_strtod_l+0xa7a>
 80120cc:	4b6c      	ldr	r3, [pc, #432]	; (8012280 <_strtod_l+0xbf0>)
 80120ce:	2200      	movs	r2, #0
 80120d0:	4640      	mov	r0, r8
 80120d2:	4649      	mov	r1, r9
 80120d4:	f7ee fd3a 	bl	8000b4c <__aeabi_dcmplt>
 80120d8:	b9d0      	cbnz	r0, 8012110 <_strtod_l+0xa80>
 80120da:	4640      	mov	r0, r8
 80120dc:	4649      	mov	r1, r9
 80120de:	4b6c      	ldr	r3, [pc, #432]	; (8012290 <_strtod_l+0xc00>)
 80120e0:	2200      	movs	r2, #0
 80120e2:	f7ee fac1 	bl	8000668 <__aeabi_dmul>
 80120e6:	4680      	mov	r8, r0
 80120e8:	4689      	mov	r9, r1
 80120ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80120ee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80120f2:	9315      	str	r3, [sp, #84]	; 0x54
 80120f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80120f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80120fc:	e79d      	b.n	801203a <_strtod_l+0x9aa>
 80120fe:	f1ba 0f01 	cmp.w	sl, #1
 8012102:	d102      	bne.n	801210a <_strtod_l+0xa7a>
 8012104:	2f00      	cmp	r7, #0
 8012106:	f43f ad83 	beq.w	8011c10 <_strtod_l+0x580>
 801210a:	4b62      	ldr	r3, [pc, #392]	; (8012294 <_strtod_l+0xc04>)
 801210c:	2200      	movs	r2, #0
 801210e:	e78e      	b.n	801202e <_strtod_l+0x99e>
 8012110:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8012290 <_strtod_l+0xc00>
 8012114:	f04f 0800 	mov.w	r8, #0
 8012118:	e7e7      	b.n	80120ea <_strtod_l+0xa5a>
 801211a:	4b5d      	ldr	r3, [pc, #372]	; (8012290 <_strtod_l+0xc00>)
 801211c:	4640      	mov	r0, r8
 801211e:	4649      	mov	r1, r9
 8012120:	2200      	movs	r2, #0
 8012122:	f7ee faa1 	bl	8000668 <__aeabi_dmul>
 8012126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012128:	4680      	mov	r8, r0
 801212a:	4689      	mov	r9, r1
 801212c:	b933      	cbnz	r3, 801213c <_strtod_l+0xaac>
 801212e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012132:	900e      	str	r0, [sp, #56]	; 0x38
 8012134:	930f      	str	r3, [sp, #60]	; 0x3c
 8012136:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801213a:	e7dd      	b.n	80120f8 <_strtod_l+0xa68>
 801213c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8012140:	e7f9      	b.n	8012136 <_strtod_l+0xaa6>
 8012142:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8012146:	9b04      	ldr	r3, [sp, #16]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d1a8      	bne.n	801209e <_strtod_l+0xa0e>
 801214c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012150:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012152:	0d1b      	lsrs	r3, r3, #20
 8012154:	051b      	lsls	r3, r3, #20
 8012156:	429a      	cmp	r2, r3
 8012158:	d1a1      	bne.n	801209e <_strtod_l+0xa0e>
 801215a:	4640      	mov	r0, r8
 801215c:	4649      	mov	r1, r9
 801215e:	f7ee fde3 	bl	8000d28 <__aeabi_d2lz>
 8012162:	f7ee fa53 	bl	800060c <__aeabi_l2d>
 8012166:	4602      	mov	r2, r0
 8012168:	460b      	mov	r3, r1
 801216a:	4640      	mov	r0, r8
 801216c:	4649      	mov	r1, r9
 801216e:	f7ee f8c3 	bl	80002f8 <__aeabi_dsub>
 8012172:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012174:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012178:	ea43 030a 	orr.w	r3, r3, sl
 801217c:	4313      	orrs	r3, r2
 801217e:	4680      	mov	r8, r0
 8012180:	4689      	mov	r9, r1
 8012182:	d055      	beq.n	8012230 <_strtod_l+0xba0>
 8012184:	a336      	add	r3, pc, #216	; (adr r3, 8012260 <_strtod_l+0xbd0>)
 8012186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801218a:	f7ee fcdf 	bl	8000b4c <__aeabi_dcmplt>
 801218e:	2800      	cmp	r0, #0
 8012190:	f47f acd0 	bne.w	8011b34 <_strtod_l+0x4a4>
 8012194:	a334      	add	r3, pc, #208	; (adr r3, 8012268 <_strtod_l+0xbd8>)
 8012196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801219a:	4640      	mov	r0, r8
 801219c:	4649      	mov	r1, r9
 801219e:	f7ee fcf3 	bl	8000b88 <__aeabi_dcmpgt>
 80121a2:	2800      	cmp	r0, #0
 80121a4:	f43f af7b 	beq.w	801209e <_strtod_l+0xa0e>
 80121a8:	e4c4      	b.n	8011b34 <_strtod_l+0x4a4>
 80121aa:	9b04      	ldr	r3, [sp, #16]
 80121ac:	b333      	cbz	r3, 80121fc <_strtod_l+0xb6c>
 80121ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80121b0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80121b4:	d822      	bhi.n	80121fc <_strtod_l+0xb6c>
 80121b6:	a32e      	add	r3, pc, #184	; (adr r3, 8012270 <_strtod_l+0xbe0>)
 80121b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121bc:	4640      	mov	r0, r8
 80121be:	4649      	mov	r1, r9
 80121c0:	f7ee fcce 	bl	8000b60 <__aeabi_dcmple>
 80121c4:	b1a0      	cbz	r0, 80121f0 <_strtod_l+0xb60>
 80121c6:	4649      	mov	r1, r9
 80121c8:	4640      	mov	r0, r8
 80121ca:	f7ee fd25 	bl	8000c18 <__aeabi_d2uiz>
 80121ce:	2801      	cmp	r0, #1
 80121d0:	bf38      	it	cc
 80121d2:	2001      	movcc	r0, #1
 80121d4:	f7ee f9ce 	bl	8000574 <__aeabi_ui2d>
 80121d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121da:	4680      	mov	r8, r0
 80121dc:	4689      	mov	r9, r1
 80121de:	bb23      	cbnz	r3, 801222a <_strtod_l+0xb9a>
 80121e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80121e4:	9010      	str	r0, [sp, #64]	; 0x40
 80121e6:	9311      	str	r3, [sp, #68]	; 0x44
 80121e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80121ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80121f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80121f4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80121f8:	1a9b      	subs	r3, r3, r2
 80121fa:	9309      	str	r3, [sp, #36]	; 0x24
 80121fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012200:	eeb0 0a48 	vmov.f32	s0, s16
 8012204:	eef0 0a68 	vmov.f32	s1, s17
 8012208:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801220c:	f001 feb8 	bl	8013f80 <__ulp>
 8012210:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012214:	ec53 2b10 	vmov	r2, r3, d0
 8012218:	f7ee fa26 	bl	8000668 <__aeabi_dmul>
 801221c:	ec53 2b18 	vmov	r2, r3, d8
 8012220:	f7ee f86c 	bl	80002fc <__adddf3>
 8012224:	4682      	mov	sl, r0
 8012226:	468b      	mov	fp, r1
 8012228:	e78d      	b.n	8012146 <_strtod_l+0xab6>
 801222a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801222e:	e7db      	b.n	80121e8 <_strtod_l+0xb58>
 8012230:	a311      	add	r3, pc, #68	; (adr r3, 8012278 <_strtod_l+0xbe8>)
 8012232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012236:	f7ee fc89 	bl	8000b4c <__aeabi_dcmplt>
 801223a:	e7b2      	b.n	80121a2 <_strtod_l+0xb12>
 801223c:	2300      	movs	r3, #0
 801223e:	930a      	str	r3, [sp, #40]	; 0x28
 8012240:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012242:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012244:	6013      	str	r3, [r2, #0]
 8012246:	f7ff ba6b 	b.w	8011720 <_strtod_l+0x90>
 801224a:	2a65      	cmp	r2, #101	; 0x65
 801224c:	f43f ab5f 	beq.w	801190e <_strtod_l+0x27e>
 8012250:	2a45      	cmp	r2, #69	; 0x45
 8012252:	f43f ab5c 	beq.w	801190e <_strtod_l+0x27e>
 8012256:	2301      	movs	r3, #1
 8012258:	f7ff bb94 	b.w	8011984 <_strtod_l+0x2f4>
 801225c:	f3af 8000 	nop.w
 8012260:	94a03595 	.word	0x94a03595
 8012264:	3fdfffff 	.word	0x3fdfffff
 8012268:	35afe535 	.word	0x35afe535
 801226c:	3fe00000 	.word	0x3fe00000
 8012270:	ffc00000 	.word	0xffc00000
 8012274:	41dfffff 	.word	0x41dfffff
 8012278:	94a03595 	.word	0x94a03595
 801227c:	3fcfffff 	.word	0x3fcfffff
 8012280:	3ff00000 	.word	0x3ff00000
 8012284:	7ff00000 	.word	0x7ff00000
 8012288:	7fe00000 	.word	0x7fe00000
 801228c:	7c9fffff 	.word	0x7c9fffff
 8012290:	3fe00000 	.word	0x3fe00000
 8012294:	bff00000 	.word	0xbff00000
 8012298:	7fefffff 	.word	0x7fefffff

0801229c <_strtod_r>:
 801229c:	4b01      	ldr	r3, [pc, #4]	; (80122a4 <_strtod_r+0x8>)
 801229e:	f7ff b9f7 	b.w	8011690 <_strtod_l>
 80122a2:	bf00      	nop
 80122a4:	20000768 	.word	0x20000768

080122a8 <_strtol_l.constprop.0>:
 80122a8:	2b01      	cmp	r3, #1
 80122aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122ae:	d001      	beq.n	80122b4 <_strtol_l.constprop.0+0xc>
 80122b0:	2b24      	cmp	r3, #36	; 0x24
 80122b2:	d906      	bls.n	80122c2 <_strtol_l.constprop.0+0x1a>
 80122b4:	f7fe f992 	bl	80105dc <__errno>
 80122b8:	2316      	movs	r3, #22
 80122ba:	6003      	str	r3, [r0, #0]
 80122bc:	2000      	movs	r0, #0
 80122be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122c2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80123a8 <_strtol_l.constprop.0+0x100>
 80122c6:	460d      	mov	r5, r1
 80122c8:	462e      	mov	r6, r5
 80122ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80122ce:	f814 700c 	ldrb.w	r7, [r4, ip]
 80122d2:	f017 0708 	ands.w	r7, r7, #8
 80122d6:	d1f7      	bne.n	80122c8 <_strtol_l.constprop.0+0x20>
 80122d8:	2c2d      	cmp	r4, #45	; 0x2d
 80122da:	d132      	bne.n	8012342 <_strtol_l.constprop.0+0x9a>
 80122dc:	782c      	ldrb	r4, [r5, #0]
 80122de:	2701      	movs	r7, #1
 80122e0:	1cb5      	adds	r5, r6, #2
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d05b      	beq.n	801239e <_strtol_l.constprop.0+0xf6>
 80122e6:	2b10      	cmp	r3, #16
 80122e8:	d109      	bne.n	80122fe <_strtol_l.constprop.0+0x56>
 80122ea:	2c30      	cmp	r4, #48	; 0x30
 80122ec:	d107      	bne.n	80122fe <_strtol_l.constprop.0+0x56>
 80122ee:	782c      	ldrb	r4, [r5, #0]
 80122f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80122f4:	2c58      	cmp	r4, #88	; 0x58
 80122f6:	d14d      	bne.n	8012394 <_strtol_l.constprop.0+0xec>
 80122f8:	786c      	ldrb	r4, [r5, #1]
 80122fa:	2310      	movs	r3, #16
 80122fc:	3502      	adds	r5, #2
 80122fe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012302:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8012306:	f04f 0c00 	mov.w	ip, #0
 801230a:	fbb8 f9f3 	udiv	r9, r8, r3
 801230e:	4666      	mov	r6, ip
 8012310:	fb03 8a19 	mls	sl, r3, r9, r8
 8012314:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8012318:	f1be 0f09 	cmp.w	lr, #9
 801231c:	d816      	bhi.n	801234c <_strtol_l.constprop.0+0xa4>
 801231e:	4674      	mov	r4, lr
 8012320:	42a3      	cmp	r3, r4
 8012322:	dd24      	ble.n	801236e <_strtol_l.constprop.0+0xc6>
 8012324:	f1bc 0f00 	cmp.w	ip, #0
 8012328:	db1e      	blt.n	8012368 <_strtol_l.constprop.0+0xc0>
 801232a:	45b1      	cmp	r9, r6
 801232c:	d31c      	bcc.n	8012368 <_strtol_l.constprop.0+0xc0>
 801232e:	d101      	bne.n	8012334 <_strtol_l.constprop.0+0x8c>
 8012330:	45a2      	cmp	sl, r4
 8012332:	db19      	blt.n	8012368 <_strtol_l.constprop.0+0xc0>
 8012334:	fb06 4603 	mla	r6, r6, r3, r4
 8012338:	f04f 0c01 	mov.w	ip, #1
 801233c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012340:	e7e8      	b.n	8012314 <_strtol_l.constprop.0+0x6c>
 8012342:	2c2b      	cmp	r4, #43	; 0x2b
 8012344:	bf04      	itt	eq
 8012346:	782c      	ldrbeq	r4, [r5, #0]
 8012348:	1cb5      	addeq	r5, r6, #2
 801234a:	e7ca      	b.n	80122e2 <_strtol_l.constprop.0+0x3a>
 801234c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8012350:	f1be 0f19 	cmp.w	lr, #25
 8012354:	d801      	bhi.n	801235a <_strtol_l.constprop.0+0xb2>
 8012356:	3c37      	subs	r4, #55	; 0x37
 8012358:	e7e2      	b.n	8012320 <_strtol_l.constprop.0+0x78>
 801235a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801235e:	f1be 0f19 	cmp.w	lr, #25
 8012362:	d804      	bhi.n	801236e <_strtol_l.constprop.0+0xc6>
 8012364:	3c57      	subs	r4, #87	; 0x57
 8012366:	e7db      	b.n	8012320 <_strtol_l.constprop.0+0x78>
 8012368:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801236c:	e7e6      	b.n	801233c <_strtol_l.constprop.0+0x94>
 801236e:	f1bc 0f00 	cmp.w	ip, #0
 8012372:	da05      	bge.n	8012380 <_strtol_l.constprop.0+0xd8>
 8012374:	2322      	movs	r3, #34	; 0x22
 8012376:	6003      	str	r3, [r0, #0]
 8012378:	4646      	mov	r6, r8
 801237a:	b942      	cbnz	r2, 801238e <_strtol_l.constprop.0+0xe6>
 801237c:	4630      	mov	r0, r6
 801237e:	e79e      	b.n	80122be <_strtol_l.constprop.0+0x16>
 8012380:	b107      	cbz	r7, 8012384 <_strtol_l.constprop.0+0xdc>
 8012382:	4276      	negs	r6, r6
 8012384:	2a00      	cmp	r2, #0
 8012386:	d0f9      	beq.n	801237c <_strtol_l.constprop.0+0xd4>
 8012388:	f1bc 0f00 	cmp.w	ip, #0
 801238c:	d000      	beq.n	8012390 <_strtol_l.constprop.0+0xe8>
 801238e:	1e69      	subs	r1, r5, #1
 8012390:	6011      	str	r1, [r2, #0]
 8012392:	e7f3      	b.n	801237c <_strtol_l.constprop.0+0xd4>
 8012394:	2430      	movs	r4, #48	; 0x30
 8012396:	2b00      	cmp	r3, #0
 8012398:	d1b1      	bne.n	80122fe <_strtol_l.constprop.0+0x56>
 801239a:	2308      	movs	r3, #8
 801239c:	e7af      	b.n	80122fe <_strtol_l.constprop.0+0x56>
 801239e:	2c30      	cmp	r4, #48	; 0x30
 80123a0:	d0a5      	beq.n	80122ee <_strtol_l.constprop.0+0x46>
 80123a2:	230a      	movs	r3, #10
 80123a4:	e7ab      	b.n	80122fe <_strtol_l.constprop.0+0x56>
 80123a6:	bf00      	nop
 80123a8:	08015ffd 	.word	0x08015ffd

080123ac <_strtol_r>:
 80123ac:	f7ff bf7c 	b.w	80122a8 <_strtol_l.constprop.0>

080123b0 <time>:
 80123b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123b2:	4b0b      	ldr	r3, [pc, #44]	; (80123e0 <time+0x30>)
 80123b4:	2200      	movs	r2, #0
 80123b6:	4669      	mov	r1, sp
 80123b8:	4604      	mov	r4, r0
 80123ba:	6818      	ldr	r0, [r3, #0]
 80123bc:	f001 fa2c 	bl	8013818 <_gettimeofday_r>
 80123c0:	2800      	cmp	r0, #0
 80123c2:	bfbe      	ittt	lt
 80123c4:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 80123c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80123cc:	e9cd 2300 	strdlt	r2, r3, [sp]
 80123d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80123d4:	b10c      	cbz	r4, 80123da <time+0x2a>
 80123d6:	e9c4 0100 	strd	r0, r1, [r4]
 80123da:	b004      	add	sp, #16
 80123dc:	bd10      	pop	{r4, pc}
 80123de:	bf00      	nop
 80123e0:	20000700 	.word	0x20000700

080123e4 <__assert_func>:
 80123e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123e6:	4614      	mov	r4, r2
 80123e8:	461a      	mov	r2, r3
 80123ea:	4b09      	ldr	r3, [pc, #36]	; (8012410 <__assert_func+0x2c>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	4605      	mov	r5, r0
 80123f0:	68d8      	ldr	r0, [r3, #12]
 80123f2:	b14c      	cbz	r4, 8012408 <__assert_func+0x24>
 80123f4:	4b07      	ldr	r3, [pc, #28]	; (8012414 <__assert_func+0x30>)
 80123f6:	9100      	str	r1, [sp, #0]
 80123f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80123fc:	4906      	ldr	r1, [pc, #24]	; (8012418 <__assert_func+0x34>)
 80123fe:	462b      	mov	r3, r5
 8012400:	f000 fe88 	bl	8013114 <fiprintf>
 8012404:	f002 fac2 	bl	801498c <abort>
 8012408:	4b04      	ldr	r3, [pc, #16]	; (801241c <__assert_func+0x38>)
 801240a:	461c      	mov	r4, r3
 801240c:	e7f3      	b.n	80123f6 <__assert_func+0x12>
 801240e:	bf00      	nop
 8012410:	20000700 	.word	0x20000700
 8012414:	08015fc0 	.word	0x08015fc0
 8012418:	08015fcd 	.word	0x08015fcd
 801241c:	08015ffb 	.word	0x08015ffb

08012420 <quorem>:
 8012420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012424:	6903      	ldr	r3, [r0, #16]
 8012426:	690c      	ldr	r4, [r1, #16]
 8012428:	42a3      	cmp	r3, r4
 801242a:	4607      	mov	r7, r0
 801242c:	f2c0 8081 	blt.w	8012532 <quorem+0x112>
 8012430:	3c01      	subs	r4, #1
 8012432:	f101 0814 	add.w	r8, r1, #20
 8012436:	f100 0514 	add.w	r5, r0, #20
 801243a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801243e:	9301      	str	r3, [sp, #4]
 8012440:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012444:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012448:	3301      	adds	r3, #1
 801244a:	429a      	cmp	r2, r3
 801244c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012450:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012454:	fbb2 f6f3 	udiv	r6, r2, r3
 8012458:	d331      	bcc.n	80124be <quorem+0x9e>
 801245a:	f04f 0e00 	mov.w	lr, #0
 801245e:	4640      	mov	r0, r8
 8012460:	46ac      	mov	ip, r5
 8012462:	46f2      	mov	sl, lr
 8012464:	f850 2b04 	ldr.w	r2, [r0], #4
 8012468:	b293      	uxth	r3, r2
 801246a:	fb06 e303 	mla	r3, r6, r3, lr
 801246e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012472:	b29b      	uxth	r3, r3
 8012474:	ebaa 0303 	sub.w	r3, sl, r3
 8012478:	f8dc a000 	ldr.w	sl, [ip]
 801247c:	0c12      	lsrs	r2, r2, #16
 801247e:	fa13 f38a 	uxtah	r3, r3, sl
 8012482:	fb06 e202 	mla	r2, r6, r2, lr
 8012486:	9300      	str	r3, [sp, #0]
 8012488:	9b00      	ldr	r3, [sp, #0]
 801248a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801248e:	b292      	uxth	r2, r2
 8012490:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012494:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012498:	f8bd 3000 	ldrh.w	r3, [sp]
 801249c:	4581      	cmp	r9, r0
 801249e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80124a2:	f84c 3b04 	str.w	r3, [ip], #4
 80124a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80124aa:	d2db      	bcs.n	8012464 <quorem+0x44>
 80124ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80124b0:	b92b      	cbnz	r3, 80124be <quorem+0x9e>
 80124b2:	9b01      	ldr	r3, [sp, #4]
 80124b4:	3b04      	subs	r3, #4
 80124b6:	429d      	cmp	r5, r3
 80124b8:	461a      	mov	r2, r3
 80124ba:	d32e      	bcc.n	801251a <quorem+0xfa>
 80124bc:	613c      	str	r4, [r7, #16]
 80124be:	4638      	mov	r0, r7
 80124c0:	f001 fcb8 	bl	8013e34 <__mcmp>
 80124c4:	2800      	cmp	r0, #0
 80124c6:	db24      	blt.n	8012512 <quorem+0xf2>
 80124c8:	3601      	adds	r6, #1
 80124ca:	4628      	mov	r0, r5
 80124cc:	f04f 0c00 	mov.w	ip, #0
 80124d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80124d4:	f8d0 e000 	ldr.w	lr, [r0]
 80124d8:	b293      	uxth	r3, r2
 80124da:	ebac 0303 	sub.w	r3, ip, r3
 80124de:	0c12      	lsrs	r2, r2, #16
 80124e0:	fa13 f38e 	uxtah	r3, r3, lr
 80124e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80124e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80124ec:	b29b      	uxth	r3, r3
 80124ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80124f2:	45c1      	cmp	r9, r8
 80124f4:	f840 3b04 	str.w	r3, [r0], #4
 80124f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80124fc:	d2e8      	bcs.n	80124d0 <quorem+0xb0>
 80124fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012502:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012506:	b922      	cbnz	r2, 8012512 <quorem+0xf2>
 8012508:	3b04      	subs	r3, #4
 801250a:	429d      	cmp	r5, r3
 801250c:	461a      	mov	r2, r3
 801250e:	d30a      	bcc.n	8012526 <quorem+0x106>
 8012510:	613c      	str	r4, [r7, #16]
 8012512:	4630      	mov	r0, r6
 8012514:	b003      	add	sp, #12
 8012516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801251a:	6812      	ldr	r2, [r2, #0]
 801251c:	3b04      	subs	r3, #4
 801251e:	2a00      	cmp	r2, #0
 8012520:	d1cc      	bne.n	80124bc <quorem+0x9c>
 8012522:	3c01      	subs	r4, #1
 8012524:	e7c7      	b.n	80124b6 <quorem+0x96>
 8012526:	6812      	ldr	r2, [r2, #0]
 8012528:	3b04      	subs	r3, #4
 801252a:	2a00      	cmp	r2, #0
 801252c:	d1f0      	bne.n	8012510 <quorem+0xf0>
 801252e:	3c01      	subs	r4, #1
 8012530:	e7eb      	b.n	801250a <quorem+0xea>
 8012532:	2000      	movs	r0, #0
 8012534:	e7ee      	b.n	8012514 <quorem+0xf4>
	...

08012538 <_dtoa_r>:
 8012538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801253c:	ed2d 8b04 	vpush	{d8-d9}
 8012540:	ec57 6b10 	vmov	r6, r7, d0
 8012544:	b093      	sub	sp, #76	; 0x4c
 8012546:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012548:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801254c:	9106      	str	r1, [sp, #24]
 801254e:	ee10 aa10 	vmov	sl, s0
 8012552:	4604      	mov	r4, r0
 8012554:	9209      	str	r2, [sp, #36]	; 0x24
 8012556:	930c      	str	r3, [sp, #48]	; 0x30
 8012558:	46bb      	mov	fp, r7
 801255a:	b975      	cbnz	r5, 801257a <_dtoa_r+0x42>
 801255c:	2010      	movs	r0, #16
 801255e:	f7fe f867 	bl	8010630 <malloc>
 8012562:	4602      	mov	r2, r0
 8012564:	6260      	str	r0, [r4, #36]	; 0x24
 8012566:	b920      	cbnz	r0, 8012572 <_dtoa_r+0x3a>
 8012568:	4ba7      	ldr	r3, [pc, #668]	; (8012808 <_dtoa_r+0x2d0>)
 801256a:	21ea      	movs	r1, #234	; 0xea
 801256c:	48a7      	ldr	r0, [pc, #668]	; (801280c <_dtoa_r+0x2d4>)
 801256e:	f7ff ff39 	bl	80123e4 <__assert_func>
 8012572:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012576:	6005      	str	r5, [r0, #0]
 8012578:	60c5      	str	r5, [r0, #12]
 801257a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801257c:	6819      	ldr	r1, [r3, #0]
 801257e:	b151      	cbz	r1, 8012596 <_dtoa_r+0x5e>
 8012580:	685a      	ldr	r2, [r3, #4]
 8012582:	604a      	str	r2, [r1, #4]
 8012584:	2301      	movs	r3, #1
 8012586:	4093      	lsls	r3, r2
 8012588:	608b      	str	r3, [r1, #8]
 801258a:	4620      	mov	r0, r4
 801258c:	f001 f9c6 	bl	801391c <_Bfree>
 8012590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012592:	2200      	movs	r2, #0
 8012594:	601a      	str	r2, [r3, #0]
 8012596:	1e3b      	subs	r3, r7, #0
 8012598:	bfaa      	itet	ge
 801259a:	2300      	movge	r3, #0
 801259c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80125a0:	f8c8 3000 	strge.w	r3, [r8]
 80125a4:	4b9a      	ldr	r3, [pc, #616]	; (8012810 <_dtoa_r+0x2d8>)
 80125a6:	bfbc      	itt	lt
 80125a8:	2201      	movlt	r2, #1
 80125aa:	f8c8 2000 	strlt.w	r2, [r8]
 80125ae:	ea33 030b 	bics.w	r3, r3, fp
 80125b2:	d11b      	bne.n	80125ec <_dtoa_r+0xb4>
 80125b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80125b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80125ba:	6013      	str	r3, [r2, #0]
 80125bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80125c0:	4333      	orrs	r3, r6
 80125c2:	f000 8592 	beq.w	80130ea <_dtoa_r+0xbb2>
 80125c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125c8:	b963      	cbnz	r3, 80125e4 <_dtoa_r+0xac>
 80125ca:	4b92      	ldr	r3, [pc, #584]	; (8012814 <_dtoa_r+0x2dc>)
 80125cc:	e022      	b.n	8012614 <_dtoa_r+0xdc>
 80125ce:	4b92      	ldr	r3, [pc, #584]	; (8012818 <_dtoa_r+0x2e0>)
 80125d0:	9301      	str	r3, [sp, #4]
 80125d2:	3308      	adds	r3, #8
 80125d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80125d6:	6013      	str	r3, [r2, #0]
 80125d8:	9801      	ldr	r0, [sp, #4]
 80125da:	b013      	add	sp, #76	; 0x4c
 80125dc:	ecbd 8b04 	vpop	{d8-d9}
 80125e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125e4:	4b8b      	ldr	r3, [pc, #556]	; (8012814 <_dtoa_r+0x2dc>)
 80125e6:	9301      	str	r3, [sp, #4]
 80125e8:	3303      	adds	r3, #3
 80125ea:	e7f3      	b.n	80125d4 <_dtoa_r+0x9c>
 80125ec:	2200      	movs	r2, #0
 80125ee:	2300      	movs	r3, #0
 80125f0:	4650      	mov	r0, sl
 80125f2:	4659      	mov	r1, fp
 80125f4:	f7ee faa0 	bl	8000b38 <__aeabi_dcmpeq>
 80125f8:	ec4b ab19 	vmov	d9, sl, fp
 80125fc:	4680      	mov	r8, r0
 80125fe:	b158      	cbz	r0, 8012618 <_dtoa_r+0xe0>
 8012600:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012602:	2301      	movs	r3, #1
 8012604:	6013      	str	r3, [r2, #0]
 8012606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012608:	2b00      	cmp	r3, #0
 801260a:	f000 856b 	beq.w	80130e4 <_dtoa_r+0xbac>
 801260e:	4883      	ldr	r0, [pc, #524]	; (801281c <_dtoa_r+0x2e4>)
 8012610:	6018      	str	r0, [r3, #0]
 8012612:	1e43      	subs	r3, r0, #1
 8012614:	9301      	str	r3, [sp, #4]
 8012616:	e7df      	b.n	80125d8 <_dtoa_r+0xa0>
 8012618:	ec4b ab10 	vmov	d0, sl, fp
 801261c:	aa10      	add	r2, sp, #64	; 0x40
 801261e:	a911      	add	r1, sp, #68	; 0x44
 8012620:	4620      	mov	r0, r4
 8012622:	f001 fd29 	bl	8014078 <__d2b>
 8012626:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801262a:	ee08 0a10 	vmov	s16, r0
 801262e:	2d00      	cmp	r5, #0
 8012630:	f000 8084 	beq.w	801273c <_dtoa_r+0x204>
 8012634:	ee19 3a90 	vmov	r3, s19
 8012638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801263c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012640:	4656      	mov	r6, sl
 8012642:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012646:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801264a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801264e:	4b74      	ldr	r3, [pc, #464]	; (8012820 <_dtoa_r+0x2e8>)
 8012650:	2200      	movs	r2, #0
 8012652:	4630      	mov	r0, r6
 8012654:	4639      	mov	r1, r7
 8012656:	f7ed fe4f 	bl	80002f8 <__aeabi_dsub>
 801265a:	a365      	add	r3, pc, #404	; (adr r3, 80127f0 <_dtoa_r+0x2b8>)
 801265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012660:	f7ee f802 	bl	8000668 <__aeabi_dmul>
 8012664:	a364      	add	r3, pc, #400	; (adr r3, 80127f8 <_dtoa_r+0x2c0>)
 8012666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801266a:	f7ed fe47 	bl	80002fc <__adddf3>
 801266e:	4606      	mov	r6, r0
 8012670:	4628      	mov	r0, r5
 8012672:	460f      	mov	r7, r1
 8012674:	f7ed ff8e 	bl	8000594 <__aeabi_i2d>
 8012678:	a361      	add	r3, pc, #388	; (adr r3, 8012800 <_dtoa_r+0x2c8>)
 801267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801267e:	f7ed fff3 	bl	8000668 <__aeabi_dmul>
 8012682:	4602      	mov	r2, r0
 8012684:	460b      	mov	r3, r1
 8012686:	4630      	mov	r0, r6
 8012688:	4639      	mov	r1, r7
 801268a:	f7ed fe37 	bl	80002fc <__adddf3>
 801268e:	4606      	mov	r6, r0
 8012690:	460f      	mov	r7, r1
 8012692:	f7ee fa99 	bl	8000bc8 <__aeabi_d2iz>
 8012696:	2200      	movs	r2, #0
 8012698:	9000      	str	r0, [sp, #0]
 801269a:	2300      	movs	r3, #0
 801269c:	4630      	mov	r0, r6
 801269e:	4639      	mov	r1, r7
 80126a0:	f7ee fa54 	bl	8000b4c <__aeabi_dcmplt>
 80126a4:	b150      	cbz	r0, 80126bc <_dtoa_r+0x184>
 80126a6:	9800      	ldr	r0, [sp, #0]
 80126a8:	f7ed ff74 	bl	8000594 <__aeabi_i2d>
 80126ac:	4632      	mov	r2, r6
 80126ae:	463b      	mov	r3, r7
 80126b0:	f7ee fa42 	bl	8000b38 <__aeabi_dcmpeq>
 80126b4:	b910      	cbnz	r0, 80126bc <_dtoa_r+0x184>
 80126b6:	9b00      	ldr	r3, [sp, #0]
 80126b8:	3b01      	subs	r3, #1
 80126ba:	9300      	str	r3, [sp, #0]
 80126bc:	9b00      	ldr	r3, [sp, #0]
 80126be:	2b16      	cmp	r3, #22
 80126c0:	d85a      	bhi.n	8012778 <_dtoa_r+0x240>
 80126c2:	9a00      	ldr	r2, [sp, #0]
 80126c4:	4b57      	ldr	r3, [pc, #348]	; (8012824 <_dtoa_r+0x2ec>)
 80126c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80126ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ce:	ec51 0b19 	vmov	r0, r1, d9
 80126d2:	f7ee fa3b 	bl	8000b4c <__aeabi_dcmplt>
 80126d6:	2800      	cmp	r0, #0
 80126d8:	d050      	beq.n	801277c <_dtoa_r+0x244>
 80126da:	9b00      	ldr	r3, [sp, #0]
 80126dc:	3b01      	subs	r3, #1
 80126de:	9300      	str	r3, [sp, #0]
 80126e0:	2300      	movs	r3, #0
 80126e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80126e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80126e6:	1b5d      	subs	r5, r3, r5
 80126e8:	1e6b      	subs	r3, r5, #1
 80126ea:	9305      	str	r3, [sp, #20]
 80126ec:	bf45      	ittet	mi
 80126ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80126f2:	9304      	strmi	r3, [sp, #16]
 80126f4:	2300      	movpl	r3, #0
 80126f6:	2300      	movmi	r3, #0
 80126f8:	bf4c      	ite	mi
 80126fa:	9305      	strmi	r3, [sp, #20]
 80126fc:	9304      	strpl	r3, [sp, #16]
 80126fe:	9b00      	ldr	r3, [sp, #0]
 8012700:	2b00      	cmp	r3, #0
 8012702:	db3d      	blt.n	8012780 <_dtoa_r+0x248>
 8012704:	9b05      	ldr	r3, [sp, #20]
 8012706:	9a00      	ldr	r2, [sp, #0]
 8012708:	920a      	str	r2, [sp, #40]	; 0x28
 801270a:	4413      	add	r3, r2
 801270c:	9305      	str	r3, [sp, #20]
 801270e:	2300      	movs	r3, #0
 8012710:	9307      	str	r3, [sp, #28]
 8012712:	9b06      	ldr	r3, [sp, #24]
 8012714:	2b09      	cmp	r3, #9
 8012716:	f200 8089 	bhi.w	801282c <_dtoa_r+0x2f4>
 801271a:	2b05      	cmp	r3, #5
 801271c:	bfc4      	itt	gt
 801271e:	3b04      	subgt	r3, #4
 8012720:	9306      	strgt	r3, [sp, #24]
 8012722:	9b06      	ldr	r3, [sp, #24]
 8012724:	f1a3 0302 	sub.w	r3, r3, #2
 8012728:	bfcc      	ite	gt
 801272a:	2500      	movgt	r5, #0
 801272c:	2501      	movle	r5, #1
 801272e:	2b03      	cmp	r3, #3
 8012730:	f200 8087 	bhi.w	8012842 <_dtoa_r+0x30a>
 8012734:	e8df f003 	tbb	[pc, r3]
 8012738:	59383a2d 	.word	0x59383a2d
 801273c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012740:	441d      	add	r5, r3
 8012742:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012746:	2b20      	cmp	r3, #32
 8012748:	bfc1      	itttt	gt
 801274a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801274e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012752:	fa0b f303 	lslgt.w	r3, fp, r3
 8012756:	fa26 f000 	lsrgt.w	r0, r6, r0
 801275a:	bfda      	itte	le
 801275c:	f1c3 0320 	rsble	r3, r3, #32
 8012760:	fa06 f003 	lslle.w	r0, r6, r3
 8012764:	4318      	orrgt	r0, r3
 8012766:	f7ed ff05 	bl	8000574 <__aeabi_ui2d>
 801276a:	2301      	movs	r3, #1
 801276c:	4606      	mov	r6, r0
 801276e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012772:	3d01      	subs	r5, #1
 8012774:	930e      	str	r3, [sp, #56]	; 0x38
 8012776:	e76a      	b.n	801264e <_dtoa_r+0x116>
 8012778:	2301      	movs	r3, #1
 801277a:	e7b2      	b.n	80126e2 <_dtoa_r+0x1aa>
 801277c:	900b      	str	r0, [sp, #44]	; 0x2c
 801277e:	e7b1      	b.n	80126e4 <_dtoa_r+0x1ac>
 8012780:	9b04      	ldr	r3, [sp, #16]
 8012782:	9a00      	ldr	r2, [sp, #0]
 8012784:	1a9b      	subs	r3, r3, r2
 8012786:	9304      	str	r3, [sp, #16]
 8012788:	4253      	negs	r3, r2
 801278a:	9307      	str	r3, [sp, #28]
 801278c:	2300      	movs	r3, #0
 801278e:	930a      	str	r3, [sp, #40]	; 0x28
 8012790:	e7bf      	b.n	8012712 <_dtoa_r+0x1da>
 8012792:	2300      	movs	r3, #0
 8012794:	9308      	str	r3, [sp, #32]
 8012796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012798:	2b00      	cmp	r3, #0
 801279a:	dc55      	bgt.n	8012848 <_dtoa_r+0x310>
 801279c:	2301      	movs	r3, #1
 801279e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80127a2:	461a      	mov	r2, r3
 80127a4:	9209      	str	r2, [sp, #36]	; 0x24
 80127a6:	e00c      	b.n	80127c2 <_dtoa_r+0x28a>
 80127a8:	2301      	movs	r3, #1
 80127aa:	e7f3      	b.n	8012794 <_dtoa_r+0x25c>
 80127ac:	2300      	movs	r3, #0
 80127ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127b0:	9308      	str	r3, [sp, #32]
 80127b2:	9b00      	ldr	r3, [sp, #0]
 80127b4:	4413      	add	r3, r2
 80127b6:	9302      	str	r3, [sp, #8]
 80127b8:	3301      	adds	r3, #1
 80127ba:	2b01      	cmp	r3, #1
 80127bc:	9303      	str	r3, [sp, #12]
 80127be:	bfb8      	it	lt
 80127c0:	2301      	movlt	r3, #1
 80127c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80127c4:	2200      	movs	r2, #0
 80127c6:	6042      	str	r2, [r0, #4]
 80127c8:	2204      	movs	r2, #4
 80127ca:	f102 0614 	add.w	r6, r2, #20
 80127ce:	429e      	cmp	r6, r3
 80127d0:	6841      	ldr	r1, [r0, #4]
 80127d2:	d93d      	bls.n	8012850 <_dtoa_r+0x318>
 80127d4:	4620      	mov	r0, r4
 80127d6:	f001 f861 	bl	801389c <_Balloc>
 80127da:	9001      	str	r0, [sp, #4]
 80127dc:	2800      	cmp	r0, #0
 80127de:	d13b      	bne.n	8012858 <_dtoa_r+0x320>
 80127e0:	4b11      	ldr	r3, [pc, #68]	; (8012828 <_dtoa_r+0x2f0>)
 80127e2:	4602      	mov	r2, r0
 80127e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80127e8:	e6c0      	b.n	801256c <_dtoa_r+0x34>
 80127ea:	2301      	movs	r3, #1
 80127ec:	e7df      	b.n	80127ae <_dtoa_r+0x276>
 80127ee:	bf00      	nop
 80127f0:	636f4361 	.word	0x636f4361
 80127f4:	3fd287a7 	.word	0x3fd287a7
 80127f8:	8b60c8b3 	.word	0x8b60c8b3
 80127fc:	3fc68a28 	.word	0x3fc68a28
 8012800:	509f79fb 	.word	0x509f79fb
 8012804:	3fd34413 	.word	0x3fd34413
 8012808:	08015efd 	.word	0x08015efd
 801280c:	0801610a 	.word	0x0801610a
 8012810:	7ff00000 	.word	0x7ff00000
 8012814:	08016106 	.word	0x08016106
 8012818:	080160fd 	.word	0x080160fd
 801281c:	08015ed5 	.word	0x08015ed5
 8012820:	3ff80000 	.word	0x3ff80000
 8012824:	08016278 	.word	0x08016278
 8012828:	08016165 	.word	0x08016165
 801282c:	2501      	movs	r5, #1
 801282e:	2300      	movs	r3, #0
 8012830:	9306      	str	r3, [sp, #24]
 8012832:	9508      	str	r5, [sp, #32]
 8012834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012838:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801283c:	2200      	movs	r2, #0
 801283e:	2312      	movs	r3, #18
 8012840:	e7b0      	b.n	80127a4 <_dtoa_r+0x26c>
 8012842:	2301      	movs	r3, #1
 8012844:	9308      	str	r3, [sp, #32]
 8012846:	e7f5      	b.n	8012834 <_dtoa_r+0x2fc>
 8012848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801284a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801284e:	e7b8      	b.n	80127c2 <_dtoa_r+0x28a>
 8012850:	3101      	adds	r1, #1
 8012852:	6041      	str	r1, [r0, #4]
 8012854:	0052      	lsls	r2, r2, #1
 8012856:	e7b8      	b.n	80127ca <_dtoa_r+0x292>
 8012858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801285a:	9a01      	ldr	r2, [sp, #4]
 801285c:	601a      	str	r2, [r3, #0]
 801285e:	9b03      	ldr	r3, [sp, #12]
 8012860:	2b0e      	cmp	r3, #14
 8012862:	f200 809d 	bhi.w	80129a0 <_dtoa_r+0x468>
 8012866:	2d00      	cmp	r5, #0
 8012868:	f000 809a 	beq.w	80129a0 <_dtoa_r+0x468>
 801286c:	9b00      	ldr	r3, [sp, #0]
 801286e:	2b00      	cmp	r3, #0
 8012870:	dd32      	ble.n	80128d8 <_dtoa_r+0x3a0>
 8012872:	4ab7      	ldr	r2, [pc, #732]	; (8012b50 <_dtoa_r+0x618>)
 8012874:	f003 030f 	and.w	r3, r3, #15
 8012878:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801287c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012880:	9b00      	ldr	r3, [sp, #0]
 8012882:	05d8      	lsls	r0, r3, #23
 8012884:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012888:	d516      	bpl.n	80128b8 <_dtoa_r+0x380>
 801288a:	4bb2      	ldr	r3, [pc, #712]	; (8012b54 <_dtoa_r+0x61c>)
 801288c:	ec51 0b19 	vmov	r0, r1, d9
 8012890:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012894:	f7ee f812 	bl	80008bc <__aeabi_ddiv>
 8012898:	f007 070f 	and.w	r7, r7, #15
 801289c:	4682      	mov	sl, r0
 801289e:	468b      	mov	fp, r1
 80128a0:	2503      	movs	r5, #3
 80128a2:	4eac      	ldr	r6, [pc, #688]	; (8012b54 <_dtoa_r+0x61c>)
 80128a4:	b957      	cbnz	r7, 80128bc <_dtoa_r+0x384>
 80128a6:	4642      	mov	r2, r8
 80128a8:	464b      	mov	r3, r9
 80128aa:	4650      	mov	r0, sl
 80128ac:	4659      	mov	r1, fp
 80128ae:	f7ee f805 	bl	80008bc <__aeabi_ddiv>
 80128b2:	4682      	mov	sl, r0
 80128b4:	468b      	mov	fp, r1
 80128b6:	e028      	b.n	801290a <_dtoa_r+0x3d2>
 80128b8:	2502      	movs	r5, #2
 80128ba:	e7f2      	b.n	80128a2 <_dtoa_r+0x36a>
 80128bc:	07f9      	lsls	r1, r7, #31
 80128be:	d508      	bpl.n	80128d2 <_dtoa_r+0x39a>
 80128c0:	4640      	mov	r0, r8
 80128c2:	4649      	mov	r1, r9
 80128c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80128c8:	f7ed fece 	bl	8000668 <__aeabi_dmul>
 80128cc:	3501      	adds	r5, #1
 80128ce:	4680      	mov	r8, r0
 80128d0:	4689      	mov	r9, r1
 80128d2:	107f      	asrs	r7, r7, #1
 80128d4:	3608      	adds	r6, #8
 80128d6:	e7e5      	b.n	80128a4 <_dtoa_r+0x36c>
 80128d8:	f000 809b 	beq.w	8012a12 <_dtoa_r+0x4da>
 80128dc:	9b00      	ldr	r3, [sp, #0]
 80128de:	4f9d      	ldr	r7, [pc, #628]	; (8012b54 <_dtoa_r+0x61c>)
 80128e0:	425e      	negs	r6, r3
 80128e2:	4b9b      	ldr	r3, [pc, #620]	; (8012b50 <_dtoa_r+0x618>)
 80128e4:	f006 020f 	and.w	r2, r6, #15
 80128e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80128ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128f0:	ec51 0b19 	vmov	r0, r1, d9
 80128f4:	f7ed feb8 	bl	8000668 <__aeabi_dmul>
 80128f8:	1136      	asrs	r6, r6, #4
 80128fa:	4682      	mov	sl, r0
 80128fc:	468b      	mov	fp, r1
 80128fe:	2300      	movs	r3, #0
 8012900:	2502      	movs	r5, #2
 8012902:	2e00      	cmp	r6, #0
 8012904:	d17a      	bne.n	80129fc <_dtoa_r+0x4c4>
 8012906:	2b00      	cmp	r3, #0
 8012908:	d1d3      	bne.n	80128b2 <_dtoa_r+0x37a>
 801290a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801290c:	2b00      	cmp	r3, #0
 801290e:	f000 8082 	beq.w	8012a16 <_dtoa_r+0x4de>
 8012912:	4b91      	ldr	r3, [pc, #580]	; (8012b58 <_dtoa_r+0x620>)
 8012914:	2200      	movs	r2, #0
 8012916:	4650      	mov	r0, sl
 8012918:	4659      	mov	r1, fp
 801291a:	f7ee f917 	bl	8000b4c <__aeabi_dcmplt>
 801291e:	2800      	cmp	r0, #0
 8012920:	d079      	beq.n	8012a16 <_dtoa_r+0x4de>
 8012922:	9b03      	ldr	r3, [sp, #12]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d076      	beq.n	8012a16 <_dtoa_r+0x4de>
 8012928:	9b02      	ldr	r3, [sp, #8]
 801292a:	2b00      	cmp	r3, #0
 801292c:	dd36      	ble.n	801299c <_dtoa_r+0x464>
 801292e:	9b00      	ldr	r3, [sp, #0]
 8012930:	4650      	mov	r0, sl
 8012932:	4659      	mov	r1, fp
 8012934:	1e5f      	subs	r7, r3, #1
 8012936:	2200      	movs	r2, #0
 8012938:	4b88      	ldr	r3, [pc, #544]	; (8012b5c <_dtoa_r+0x624>)
 801293a:	f7ed fe95 	bl	8000668 <__aeabi_dmul>
 801293e:	9e02      	ldr	r6, [sp, #8]
 8012940:	4682      	mov	sl, r0
 8012942:	468b      	mov	fp, r1
 8012944:	3501      	adds	r5, #1
 8012946:	4628      	mov	r0, r5
 8012948:	f7ed fe24 	bl	8000594 <__aeabi_i2d>
 801294c:	4652      	mov	r2, sl
 801294e:	465b      	mov	r3, fp
 8012950:	f7ed fe8a 	bl	8000668 <__aeabi_dmul>
 8012954:	4b82      	ldr	r3, [pc, #520]	; (8012b60 <_dtoa_r+0x628>)
 8012956:	2200      	movs	r2, #0
 8012958:	f7ed fcd0 	bl	80002fc <__adddf3>
 801295c:	46d0      	mov	r8, sl
 801295e:	46d9      	mov	r9, fp
 8012960:	4682      	mov	sl, r0
 8012962:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8012966:	2e00      	cmp	r6, #0
 8012968:	d158      	bne.n	8012a1c <_dtoa_r+0x4e4>
 801296a:	4b7e      	ldr	r3, [pc, #504]	; (8012b64 <_dtoa_r+0x62c>)
 801296c:	2200      	movs	r2, #0
 801296e:	4640      	mov	r0, r8
 8012970:	4649      	mov	r1, r9
 8012972:	f7ed fcc1 	bl	80002f8 <__aeabi_dsub>
 8012976:	4652      	mov	r2, sl
 8012978:	465b      	mov	r3, fp
 801297a:	4680      	mov	r8, r0
 801297c:	4689      	mov	r9, r1
 801297e:	f7ee f903 	bl	8000b88 <__aeabi_dcmpgt>
 8012982:	2800      	cmp	r0, #0
 8012984:	f040 8295 	bne.w	8012eb2 <_dtoa_r+0x97a>
 8012988:	4652      	mov	r2, sl
 801298a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801298e:	4640      	mov	r0, r8
 8012990:	4649      	mov	r1, r9
 8012992:	f7ee f8db 	bl	8000b4c <__aeabi_dcmplt>
 8012996:	2800      	cmp	r0, #0
 8012998:	f040 8289 	bne.w	8012eae <_dtoa_r+0x976>
 801299c:	ec5b ab19 	vmov	sl, fp, d9
 80129a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	f2c0 8148 	blt.w	8012c38 <_dtoa_r+0x700>
 80129a8:	9a00      	ldr	r2, [sp, #0]
 80129aa:	2a0e      	cmp	r2, #14
 80129ac:	f300 8144 	bgt.w	8012c38 <_dtoa_r+0x700>
 80129b0:	4b67      	ldr	r3, [pc, #412]	; (8012b50 <_dtoa_r+0x618>)
 80129b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80129b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80129ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129bc:	2b00      	cmp	r3, #0
 80129be:	f280 80d5 	bge.w	8012b6c <_dtoa_r+0x634>
 80129c2:	9b03      	ldr	r3, [sp, #12]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	f300 80d1 	bgt.w	8012b6c <_dtoa_r+0x634>
 80129ca:	f040 826f 	bne.w	8012eac <_dtoa_r+0x974>
 80129ce:	4b65      	ldr	r3, [pc, #404]	; (8012b64 <_dtoa_r+0x62c>)
 80129d0:	2200      	movs	r2, #0
 80129d2:	4640      	mov	r0, r8
 80129d4:	4649      	mov	r1, r9
 80129d6:	f7ed fe47 	bl	8000668 <__aeabi_dmul>
 80129da:	4652      	mov	r2, sl
 80129dc:	465b      	mov	r3, fp
 80129de:	f7ee f8c9 	bl	8000b74 <__aeabi_dcmpge>
 80129e2:	9e03      	ldr	r6, [sp, #12]
 80129e4:	4637      	mov	r7, r6
 80129e6:	2800      	cmp	r0, #0
 80129e8:	f040 8245 	bne.w	8012e76 <_dtoa_r+0x93e>
 80129ec:	9d01      	ldr	r5, [sp, #4]
 80129ee:	2331      	movs	r3, #49	; 0x31
 80129f0:	f805 3b01 	strb.w	r3, [r5], #1
 80129f4:	9b00      	ldr	r3, [sp, #0]
 80129f6:	3301      	adds	r3, #1
 80129f8:	9300      	str	r3, [sp, #0]
 80129fa:	e240      	b.n	8012e7e <_dtoa_r+0x946>
 80129fc:	07f2      	lsls	r2, r6, #31
 80129fe:	d505      	bpl.n	8012a0c <_dtoa_r+0x4d4>
 8012a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012a04:	f7ed fe30 	bl	8000668 <__aeabi_dmul>
 8012a08:	3501      	adds	r5, #1
 8012a0a:	2301      	movs	r3, #1
 8012a0c:	1076      	asrs	r6, r6, #1
 8012a0e:	3708      	adds	r7, #8
 8012a10:	e777      	b.n	8012902 <_dtoa_r+0x3ca>
 8012a12:	2502      	movs	r5, #2
 8012a14:	e779      	b.n	801290a <_dtoa_r+0x3d2>
 8012a16:	9f00      	ldr	r7, [sp, #0]
 8012a18:	9e03      	ldr	r6, [sp, #12]
 8012a1a:	e794      	b.n	8012946 <_dtoa_r+0x40e>
 8012a1c:	9901      	ldr	r1, [sp, #4]
 8012a1e:	4b4c      	ldr	r3, [pc, #304]	; (8012b50 <_dtoa_r+0x618>)
 8012a20:	4431      	add	r1, r6
 8012a22:	910d      	str	r1, [sp, #52]	; 0x34
 8012a24:	9908      	ldr	r1, [sp, #32]
 8012a26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012a2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012a2e:	2900      	cmp	r1, #0
 8012a30:	d043      	beq.n	8012aba <_dtoa_r+0x582>
 8012a32:	494d      	ldr	r1, [pc, #308]	; (8012b68 <_dtoa_r+0x630>)
 8012a34:	2000      	movs	r0, #0
 8012a36:	f7ed ff41 	bl	80008bc <__aeabi_ddiv>
 8012a3a:	4652      	mov	r2, sl
 8012a3c:	465b      	mov	r3, fp
 8012a3e:	f7ed fc5b 	bl	80002f8 <__aeabi_dsub>
 8012a42:	9d01      	ldr	r5, [sp, #4]
 8012a44:	4682      	mov	sl, r0
 8012a46:	468b      	mov	fp, r1
 8012a48:	4649      	mov	r1, r9
 8012a4a:	4640      	mov	r0, r8
 8012a4c:	f7ee f8bc 	bl	8000bc8 <__aeabi_d2iz>
 8012a50:	4606      	mov	r6, r0
 8012a52:	f7ed fd9f 	bl	8000594 <__aeabi_i2d>
 8012a56:	4602      	mov	r2, r0
 8012a58:	460b      	mov	r3, r1
 8012a5a:	4640      	mov	r0, r8
 8012a5c:	4649      	mov	r1, r9
 8012a5e:	f7ed fc4b 	bl	80002f8 <__aeabi_dsub>
 8012a62:	3630      	adds	r6, #48	; 0x30
 8012a64:	f805 6b01 	strb.w	r6, [r5], #1
 8012a68:	4652      	mov	r2, sl
 8012a6a:	465b      	mov	r3, fp
 8012a6c:	4680      	mov	r8, r0
 8012a6e:	4689      	mov	r9, r1
 8012a70:	f7ee f86c 	bl	8000b4c <__aeabi_dcmplt>
 8012a74:	2800      	cmp	r0, #0
 8012a76:	d163      	bne.n	8012b40 <_dtoa_r+0x608>
 8012a78:	4642      	mov	r2, r8
 8012a7a:	464b      	mov	r3, r9
 8012a7c:	4936      	ldr	r1, [pc, #216]	; (8012b58 <_dtoa_r+0x620>)
 8012a7e:	2000      	movs	r0, #0
 8012a80:	f7ed fc3a 	bl	80002f8 <__aeabi_dsub>
 8012a84:	4652      	mov	r2, sl
 8012a86:	465b      	mov	r3, fp
 8012a88:	f7ee f860 	bl	8000b4c <__aeabi_dcmplt>
 8012a8c:	2800      	cmp	r0, #0
 8012a8e:	f040 80b5 	bne.w	8012bfc <_dtoa_r+0x6c4>
 8012a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a94:	429d      	cmp	r5, r3
 8012a96:	d081      	beq.n	801299c <_dtoa_r+0x464>
 8012a98:	4b30      	ldr	r3, [pc, #192]	; (8012b5c <_dtoa_r+0x624>)
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	4650      	mov	r0, sl
 8012a9e:	4659      	mov	r1, fp
 8012aa0:	f7ed fde2 	bl	8000668 <__aeabi_dmul>
 8012aa4:	4b2d      	ldr	r3, [pc, #180]	; (8012b5c <_dtoa_r+0x624>)
 8012aa6:	4682      	mov	sl, r0
 8012aa8:	468b      	mov	fp, r1
 8012aaa:	4640      	mov	r0, r8
 8012aac:	4649      	mov	r1, r9
 8012aae:	2200      	movs	r2, #0
 8012ab0:	f7ed fdda 	bl	8000668 <__aeabi_dmul>
 8012ab4:	4680      	mov	r8, r0
 8012ab6:	4689      	mov	r9, r1
 8012ab8:	e7c6      	b.n	8012a48 <_dtoa_r+0x510>
 8012aba:	4650      	mov	r0, sl
 8012abc:	4659      	mov	r1, fp
 8012abe:	f7ed fdd3 	bl	8000668 <__aeabi_dmul>
 8012ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ac4:	9d01      	ldr	r5, [sp, #4]
 8012ac6:	930f      	str	r3, [sp, #60]	; 0x3c
 8012ac8:	4682      	mov	sl, r0
 8012aca:	468b      	mov	fp, r1
 8012acc:	4649      	mov	r1, r9
 8012ace:	4640      	mov	r0, r8
 8012ad0:	f7ee f87a 	bl	8000bc8 <__aeabi_d2iz>
 8012ad4:	4606      	mov	r6, r0
 8012ad6:	f7ed fd5d 	bl	8000594 <__aeabi_i2d>
 8012ada:	3630      	adds	r6, #48	; 0x30
 8012adc:	4602      	mov	r2, r0
 8012ade:	460b      	mov	r3, r1
 8012ae0:	4640      	mov	r0, r8
 8012ae2:	4649      	mov	r1, r9
 8012ae4:	f7ed fc08 	bl	80002f8 <__aeabi_dsub>
 8012ae8:	f805 6b01 	strb.w	r6, [r5], #1
 8012aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012aee:	429d      	cmp	r5, r3
 8012af0:	4680      	mov	r8, r0
 8012af2:	4689      	mov	r9, r1
 8012af4:	f04f 0200 	mov.w	r2, #0
 8012af8:	d124      	bne.n	8012b44 <_dtoa_r+0x60c>
 8012afa:	4b1b      	ldr	r3, [pc, #108]	; (8012b68 <_dtoa_r+0x630>)
 8012afc:	4650      	mov	r0, sl
 8012afe:	4659      	mov	r1, fp
 8012b00:	f7ed fbfc 	bl	80002fc <__adddf3>
 8012b04:	4602      	mov	r2, r0
 8012b06:	460b      	mov	r3, r1
 8012b08:	4640      	mov	r0, r8
 8012b0a:	4649      	mov	r1, r9
 8012b0c:	f7ee f83c 	bl	8000b88 <__aeabi_dcmpgt>
 8012b10:	2800      	cmp	r0, #0
 8012b12:	d173      	bne.n	8012bfc <_dtoa_r+0x6c4>
 8012b14:	4652      	mov	r2, sl
 8012b16:	465b      	mov	r3, fp
 8012b18:	4913      	ldr	r1, [pc, #76]	; (8012b68 <_dtoa_r+0x630>)
 8012b1a:	2000      	movs	r0, #0
 8012b1c:	f7ed fbec 	bl	80002f8 <__aeabi_dsub>
 8012b20:	4602      	mov	r2, r0
 8012b22:	460b      	mov	r3, r1
 8012b24:	4640      	mov	r0, r8
 8012b26:	4649      	mov	r1, r9
 8012b28:	f7ee f810 	bl	8000b4c <__aeabi_dcmplt>
 8012b2c:	2800      	cmp	r0, #0
 8012b2e:	f43f af35 	beq.w	801299c <_dtoa_r+0x464>
 8012b32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012b34:	1e6b      	subs	r3, r5, #1
 8012b36:	930f      	str	r3, [sp, #60]	; 0x3c
 8012b38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012b3c:	2b30      	cmp	r3, #48	; 0x30
 8012b3e:	d0f8      	beq.n	8012b32 <_dtoa_r+0x5fa>
 8012b40:	9700      	str	r7, [sp, #0]
 8012b42:	e049      	b.n	8012bd8 <_dtoa_r+0x6a0>
 8012b44:	4b05      	ldr	r3, [pc, #20]	; (8012b5c <_dtoa_r+0x624>)
 8012b46:	f7ed fd8f 	bl	8000668 <__aeabi_dmul>
 8012b4a:	4680      	mov	r8, r0
 8012b4c:	4689      	mov	r9, r1
 8012b4e:	e7bd      	b.n	8012acc <_dtoa_r+0x594>
 8012b50:	08016278 	.word	0x08016278
 8012b54:	08016250 	.word	0x08016250
 8012b58:	3ff00000 	.word	0x3ff00000
 8012b5c:	40240000 	.word	0x40240000
 8012b60:	401c0000 	.word	0x401c0000
 8012b64:	40140000 	.word	0x40140000
 8012b68:	3fe00000 	.word	0x3fe00000
 8012b6c:	9d01      	ldr	r5, [sp, #4]
 8012b6e:	4656      	mov	r6, sl
 8012b70:	465f      	mov	r7, fp
 8012b72:	4642      	mov	r2, r8
 8012b74:	464b      	mov	r3, r9
 8012b76:	4630      	mov	r0, r6
 8012b78:	4639      	mov	r1, r7
 8012b7a:	f7ed fe9f 	bl	80008bc <__aeabi_ddiv>
 8012b7e:	f7ee f823 	bl	8000bc8 <__aeabi_d2iz>
 8012b82:	4682      	mov	sl, r0
 8012b84:	f7ed fd06 	bl	8000594 <__aeabi_i2d>
 8012b88:	4642      	mov	r2, r8
 8012b8a:	464b      	mov	r3, r9
 8012b8c:	f7ed fd6c 	bl	8000668 <__aeabi_dmul>
 8012b90:	4602      	mov	r2, r0
 8012b92:	460b      	mov	r3, r1
 8012b94:	4630      	mov	r0, r6
 8012b96:	4639      	mov	r1, r7
 8012b98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8012b9c:	f7ed fbac 	bl	80002f8 <__aeabi_dsub>
 8012ba0:	f805 6b01 	strb.w	r6, [r5], #1
 8012ba4:	9e01      	ldr	r6, [sp, #4]
 8012ba6:	9f03      	ldr	r7, [sp, #12]
 8012ba8:	1bae      	subs	r6, r5, r6
 8012baa:	42b7      	cmp	r7, r6
 8012bac:	4602      	mov	r2, r0
 8012bae:	460b      	mov	r3, r1
 8012bb0:	d135      	bne.n	8012c1e <_dtoa_r+0x6e6>
 8012bb2:	f7ed fba3 	bl	80002fc <__adddf3>
 8012bb6:	4642      	mov	r2, r8
 8012bb8:	464b      	mov	r3, r9
 8012bba:	4606      	mov	r6, r0
 8012bbc:	460f      	mov	r7, r1
 8012bbe:	f7ed ffe3 	bl	8000b88 <__aeabi_dcmpgt>
 8012bc2:	b9d0      	cbnz	r0, 8012bfa <_dtoa_r+0x6c2>
 8012bc4:	4642      	mov	r2, r8
 8012bc6:	464b      	mov	r3, r9
 8012bc8:	4630      	mov	r0, r6
 8012bca:	4639      	mov	r1, r7
 8012bcc:	f7ed ffb4 	bl	8000b38 <__aeabi_dcmpeq>
 8012bd0:	b110      	cbz	r0, 8012bd8 <_dtoa_r+0x6a0>
 8012bd2:	f01a 0f01 	tst.w	sl, #1
 8012bd6:	d110      	bne.n	8012bfa <_dtoa_r+0x6c2>
 8012bd8:	4620      	mov	r0, r4
 8012bda:	ee18 1a10 	vmov	r1, s16
 8012bde:	f000 fe9d 	bl	801391c <_Bfree>
 8012be2:	2300      	movs	r3, #0
 8012be4:	9800      	ldr	r0, [sp, #0]
 8012be6:	702b      	strb	r3, [r5, #0]
 8012be8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012bea:	3001      	adds	r0, #1
 8012bec:	6018      	str	r0, [r3, #0]
 8012bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	f43f acf1 	beq.w	80125d8 <_dtoa_r+0xa0>
 8012bf6:	601d      	str	r5, [r3, #0]
 8012bf8:	e4ee      	b.n	80125d8 <_dtoa_r+0xa0>
 8012bfa:	9f00      	ldr	r7, [sp, #0]
 8012bfc:	462b      	mov	r3, r5
 8012bfe:	461d      	mov	r5, r3
 8012c00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012c04:	2a39      	cmp	r2, #57	; 0x39
 8012c06:	d106      	bne.n	8012c16 <_dtoa_r+0x6de>
 8012c08:	9a01      	ldr	r2, [sp, #4]
 8012c0a:	429a      	cmp	r2, r3
 8012c0c:	d1f7      	bne.n	8012bfe <_dtoa_r+0x6c6>
 8012c0e:	9901      	ldr	r1, [sp, #4]
 8012c10:	2230      	movs	r2, #48	; 0x30
 8012c12:	3701      	adds	r7, #1
 8012c14:	700a      	strb	r2, [r1, #0]
 8012c16:	781a      	ldrb	r2, [r3, #0]
 8012c18:	3201      	adds	r2, #1
 8012c1a:	701a      	strb	r2, [r3, #0]
 8012c1c:	e790      	b.n	8012b40 <_dtoa_r+0x608>
 8012c1e:	4ba6      	ldr	r3, [pc, #664]	; (8012eb8 <_dtoa_r+0x980>)
 8012c20:	2200      	movs	r2, #0
 8012c22:	f7ed fd21 	bl	8000668 <__aeabi_dmul>
 8012c26:	2200      	movs	r2, #0
 8012c28:	2300      	movs	r3, #0
 8012c2a:	4606      	mov	r6, r0
 8012c2c:	460f      	mov	r7, r1
 8012c2e:	f7ed ff83 	bl	8000b38 <__aeabi_dcmpeq>
 8012c32:	2800      	cmp	r0, #0
 8012c34:	d09d      	beq.n	8012b72 <_dtoa_r+0x63a>
 8012c36:	e7cf      	b.n	8012bd8 <_dtoa_r+0x6a0>
 8012c38:	9a08      	ldr	r2, [sp, #32]
 8012c3a:	2a00      	cmp	r2, #0
 8012c3c:	f000 80d7 	beq.w	8012dee <_dtoa_r+0x8b6>
 8012c40:	9a06      	ldr	r2, [sp, #24]
 8012c42:	2a01      	cmp	r2, #1
 8012c44:	f300 80ba 	bgt.w	8012dbc <_dtoa_r+0x884>
 8012c48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012c4a:	2a00      	cmp	r2, #0
 8012c4c:	f000 80b2 	beq.w	8012db4 <_dtoa_r+0x87c>
 8012c50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012c54:	9e07      	ldr	r6, [sp, #28]
 8012c56:	9d04      	ldr	r5, [sp, #16]
 8012c58:	9a04      	ldr	r2, [sp, #16]
 8012c5a:	441a      	add	r2, r3
 8012c5c:	9204      	str	r2, [sp, #16]
 8012c5e:	9a05      	ldr	r2, [sp, #20]
 8012c60:	2101      	movs	r1, #1
 8012c62:	441a      	add	r2, r3
 8012c64:	4620      	mov	r0, r4
 8012c66:	9205      	str	r2, [sp, #20]
 8012c68:	f000 ff5a 	bl	8013b20 <__i2b>
 8012c6c:	4607      	mov	r7, r0
 8012c6e:	2d00      	cmp	r5, #0
 8012c70:	dd0c      	ble.n	8012c8c <_dtoa_r+0x754>
 8012c72:	9b05      	ldr	r3, [sp, #20]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	dd09      	ble.n	8012c8c <_dtoa_r+0x754>
 8012c78:	42ab      	cmp	r3, r5
 8012c7a:	9a04      	ldr	r2, [sp, #16]
 8012c7c:	bfa8      	it	ge
 8012c7e:	462b      	movge	r3, r5
 8012c80:	1ad2      	subs	r2, r2, r3
 8012c82:	9204      	str	r2, [sp, #16]
 8012c84:	9a05      	ldr	r2, [sp, #20]
 8012c86:	1aed      	subs	r5, r5, r3
 8012c88:	1ad3      	subs	r3, r2, r3
 8012c8a:	9305      	str	r3, [sp, #20]
 8012c8c:	9b07      	ldr	r3, [sp, #28]
 8012c8e:	b31b      	cbz	r3, 8012cd8 <_dtoa_r+0x7a0>
 8012c90:	9b08      	ldr	r3, [sp, #32]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	f000 80af 	beq.w	8012df6 <_dtoa_r+0x8be>
 8012c98:	2e00      	cmp	r6, #0
 8012c9a:	dd13      	ble.n	8012cc4 <_dtoa_r+0x78c>
 8012c9c:	4639      	mov	r1, r7
 8012c9e:	4632      	mov	r2, r6
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	f000 fffd 	bl	8013ca0 <__pow5mult>
 8012ca6:	ee18 2a10 	vmov	r2, s16
 8012caa:	4601      	mov	r1, r0
 8012cac:	4607      	mov	r7, r0
 8012cae:	4620      	mov	r0, r4
 8012cb0:	f000 ff4c 	bl	8013b4c <__multiply>
 8012cb4:	ee18 1a10 	vmov	r1, s16
 8012cb8:	4680      	mov	r8, r0
 8012cba:	4620      	mov	r0, r4
 8012cbc:	f000 fe2e 	bl	801391c <_Bfree>
 8012cc0:	ee08 8a10 	vmov	s16, r8
 8012cc4:	9b07      	ldr	r3, [sp, #28]
 8012cc6:	1b9a      	subs	r2, r3, r6
 8012cc8:	d006      	beq.n	8012cd8 <_dtoa_r+0x7a0>
 8012cca:	ee18 1a10 	vmov	r1, s16
 8012cce:	4620      	mov	r0, r4
 8012cd0:	f000 ffe6 	bl	8013ca0 <__pow5mult>
 8012cd4:	ee08 0a10 	vmov	s16, r0
 8012cd8:	2101      	movs	r1, #1
 8012cda:	4620      	mov	r0, r4
 8012cdc:	f000 ff20 	bl	8013b20 <__i2b>
 8012ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	4606      	mov	r6, r0
 8012ce6:	f340 8088 	ble.w	8012dfa <_dtoa_r+0x8c2>
 8012cea:	461a      	mov	r2, r3
 8012cec:	4601      	mov	r1, r0
 8012cee:	4620      	mov	r0, r4
 8012cf0:	f000 ffd6 	bl	8013ca0 <__pow5mult>
 8012cf4:	9b06      	ldr	r3, [sp, #24]
 8012cf6:	2b01      	cmp	r3, #1
 8012cf8:	4606      	mov	r6, r0
 8012cfa:	f340 8081 	ble.w	8012e00 <_dtoa_r+0x8c8>
 8012cfe:	f04f 0800 	mov.w	r8, #0
 8012d02:	6933      	ldr	r3, [r6, #16]
 8012d04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012d08:	6918      	ldr	r0, [r3, #16]
 8012d0a:	f000 feb9 	bl	8013a80 <__hi0bits>
 8012d0e:	f1c0 0020 	rsb	r0, r0, #32
 8012d12:	9b05      	ldr	r3, [sp, #20]
 8012d14:	4418      	add	r0, r3
 8012d16:	f010 001f 	ands.w	r0, r0, #31
 8012d1a:	f000 8092 	beq.w	8012e42 <_dtoa_r+0x90a>
 8012d1e:	f1c0 0320 	rsb	r3, r0, #32
 8012d22:	2b04      	cmp	r3, #4
 8012d24:	f340 808a 	ble.w	8012e3c <_dtoa_r+0x904>
 8012d28:	f1c0 001c 	rsb	r0, r0, #28
 8012d2c:	9b04      	ldr	r3, [sp, #16]
 8012d2e:	4403      	add	r3, r0
 8012d30:	9304      	str	r3, [sp, #16]
 8012d32:	9b05      	ldr	r3, [sp, #20]
 8012d34:	4403      	add	r3, r0
 8012d36:	4405      	add	r5, r0
 8012d38:	9305      	str	r3, [sp, #20]
 8012d3a:	9b04      	ldr	r3, [sp, #16]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	dd07      	ble.n	8012d50 <_dtoa_r+0x818>
 8012d40:	ee18 1a10 	vmov	r1, s16
 8012d44:	461a      	mov	r2, r3
 8012d46:	4620      	mov	r0, r4
 8012d48:	f001 f804 	bl	8013d54 <__lshift>
 8012d4c:	ee08 0a10 	vmov	s16, r0
 8012d50:	9b05      	ldr	r3, [sp, #20]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	dd05      	ble.n	8012d62 <_dtoa_r+0x82a>
 8012d56:	4631      	mov	r1, r6
 8012d58:	461a      	mov	r2, r3
 8012d5a:	4620      	mov	r0, r4
 8012d5c:	f000 fffa 	bl	8013d54 <__lshift>
 8012d60:	4606      	mov	r6, r0
 8012d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d06e      	beq.n	8012e46 <_dtoa_r+0x90e>
 8012d68:	ee18 0a10 	vmov	r0, s16
 8012d6c:	4631      	mov	r1, r6
 8012d6e:	f001 f861 	bl	8013e34 <__mcmp>
 8012d72:	2800      	cmp	r0, #0
 8012d74:	da67      	bge.n	8012e46 <_dtoa_r+0x90e>
 8012d76:	9b00      	ldr	r3, [sp, #0]
 8012d78:	3b01      	subs	r3, #1
 8012d7a:	ee18 1a10 	vmov	r1, s16
 8012d7e:	9300      	str	r3, [sp, #0]
 8012d80:	220a      	movs	r2, #10
 8012d82:	2300      	movs	r3, #0
 8012d84:	4620      	mov	r0, r4
 8012d86:	f000 fdeb 	bl	8013960 <__multadd>
 8012d8a:	9b08      	ldr	r3, [sp, #32]
 8012d8c:	ee08 0a10 	vmov	s16, r0
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	f000 81b1 	beq.w	80130f8 <_dtoa_r+0xbc0>
 8012d96:	2300      	movs	r3, #0
 8012d98:	4639      	mov	r1, r7
 8012d9a:	220a      	movs	r2, #10
 8012d9c:	4620      	mov	r0, r4
 8012d9e:	f000 fddf 	bl	8013960 <__multadd>
 8012da2:	9b02      	ldr	r3, [sp, #8]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	4607      	mov	r7, r0
 8012da8:	f300 808e 	bgt.w	8012ec8 <_dtoa_r+0x990>
 8012dac:	9b06      	ldr	r3, [sp, #24]
 8012dae:	2b02      	cmp	r3, #2
 8012db0:	dc51      	bgt.n	8012e56 <_dtoa_r+0x91e>
 8012db2:	e089      	b.n	8012ec8 <_dtoa_r+0x990>
 8012db4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012db6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012dba:	e74b      	b.n	8012c54 <_dtoa_r+0x71c>
 8012dbc:	9b03      	ldr	r3, [sp, #12]
 8012dbe:	1e5e      	subs	r6, r3, #1
 8012dc0:	9b07      	ldr	r3, [sp, #28]
 8012dc2:	42b3      	cmp	r3, r6
 8012dc4:	bfbf      	itttt	lt
 8012dc6:	9b07      	ldrlt	r3, [sp, #28]
 8012dc8:	9607      	strlt	r6, [sp, #28]
 8012dca:	1af2      	sublt	r2, r6, r3
 8012dcc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012dce:	bfb6      	itet	lt
 8012dd0:	189b      	addlt	r3, r3, r2
 8012dd2:	1b9e      	subge	r6, r3, r6
 8012dd4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8012dd6:	9b03      	ldr	r3, [sp, #12]
 8012dd8:	bfb8      	it	lt
 8012dda:	2600      	movlt	r6, #0
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	bfb7      	itett	lt
 8012de0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8012de4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012de8:	1a9d      	sublt	r5, r3, r2
 8012dea:	2300      	movlt	r3, #0
 8012dec:	e734      	b.n	8012c58 <_dtoa_r+0x720>
 8012dee:	9e07      	ldr	r6, [sp, #28]
 8012df0:	9d04      	ldr	r5, [sp, #16]
 8012df2:	9f08      	ldr	r7, [sp, #32]
 8012df4:	e73b      	b.n	8012c6e <_dtoa_r+0x736>
 8012df6:	9a07      	ldr	r2, [sp, #28]
 8012df8:	e767      	b.n	8012cca <_dtoa_r+0x792>
 8012dfa:	9b06      	ldr	r3, [sp, #24]
 8012dfc:	2b01      	cmp	r3, #1
 8012dfe:	dc18      	bgt.n	8012e32 <_dtoa_r+0x8fa>
 8012e00:	f1ba 0f00 	cmp.w	sl, #0
 8012e04:	d115      	bne.n	8012e32 <_dtoa_r+0x8fa>
 8012e06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012e0a:	b993      	cbnz	r3, 8012e32 <_dtoa_r+0x8fa>
 8012e0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012e10:	0d1b      	lsrs	r3, r3, #20
 8012e12:	051b      	lsls	r3, r3, #20
 8012e14:	b183      	cbz	r3, 8012e38 <_dtoa_r+0x900>
 8012e16:	9b04      	ldr	r3, [sp, #16]
 8012e18:	3301      	adds	r3, #1
 8012e1a:	9304      	str	r3, [sp, #16]
 8012e1c:	9b05      	ldr	r3, [sp, #20]
 8012e1e:	3301      	adds	r3, #1
 8012e20:	9305      	str	r3, [sp, #20]
 8012e22:	f04f 0801 	mov.w	r8, #1
 8012e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	f47f af6a 	bne.w	8012d02 <_dtoa_r+0x7ca>
 8012e2e:	2001      	movs	r0, #1
 8012e30:	e76f      	b.n	8012d12 <_dtoa_r+0x7da>
 8012e32:	f04f 0800 	mov.w	r8, #0
 8012e36:	e7f6      	b.n	8012e26 <_dtoa_r+0x8ee>
 8012e38:	4698      	mov	r8, r3
 8012e3a:	e7f4      	b.n	8012e26 <_dtoa_r+0x8ee>
 8012e3c:	f43f af7d 	beq.w	8012d3a <_dtoa_r+0x802>
 8012e40:	4618      	mov	r0, r3
 8012e42:	301c      	adds	r0, #28
 8012e44:	e772      	b.n	8012d2c <_dtoa_r+0x7f4>
 8012e46:	9b03      	ldr	r3, [sp, #12]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	dc37      	bgt.n	8012ebc <_dtoa_r+0x984>
 8012e4c:	9b06      	ldr	r3, [sp, #24]
 8012e4e:	2b02      	cmp	r3, #2
 8012e50:	dd34      	ble.n	8012ebc <_dtoa_r+0x984>
 8012e52:	9b03      	ldr	r3, [sp, #12]
 8012e54:	9302      	str	r3, [sp, #8]
 8012e56:	9b02      	ldr	r3, [sp, #8]
 8012e58:	b96b      	cbnz	r3, 8012e76 <_dtoa_r+0x93e>
 8012e5a:	4631      	mov	r1, r6
 8012e5c:	2205      	movs	r2, #5
 8012e5e:	4620      	mov	r0, r4
 8012e60:	f000 fd7e 	bl	8013960 <__multadd>
 8012e64:	4601      	mov	r1, r0
 8012e66:	4606      	mov	r6, r0
 8012e68:	ee18 0a10 	vmov	r0, s16
 8012e6c:	f000 ffe2 	bl	8013e34 <__mcmp>
 8012e70:	2800      	cmp	r0, #0
 8012e72:	f73f adbb 	bgt.w	80129ec <_dtoa_r+0x4b4>
 8012e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e78:	9d01      	ldr	r5, [sp, #4]
 8012e7a:	43db      	mvns	r3, r3
 8012e7c:	9300      	str	r3, [sp, #0]
 8012e7e:	f04f 0800 	mov.w	r8, #0
 8012e82:	4631      	mov	r1, r6
 8012e84:	4620      	mov	r0, r4
 8012e86:	f000 fd49 	bl	801391c <_Bfree>
 8012e8a:	2f00      	cmp	r7, #0
 8012e8c:	f43f aea4 	beq.w	8012bd8 <_dtoa_r+0x6a0>
 8012e90:	f1b8 0f00 	cmp.w	r8, #0
 8012e94:	d005      	beq.n	8012ea2 <_dtoa_r+0x96a>
 8012e96:	45b8      	cmp	r8, r7
 8012e98:	d003      	beq.n	8012ea2 <_dtoa_r+0x96a>
 8012e9a:	4641      	mov	r1, r8
 8012e9c:	4620      	mov	r0, r4
 8012e9e:	f000 fd3d 	bl	801391c <_Bfree>
 8012ea2:	4639      	mov	r1, r7
 8012ea4:	4620      	mov	r0, r4
 8012ea6:	f000 fd39 	bl	801391c <_Bfree>
 8012eaa:	e695      	b.n	8012bd8 <_dtoa_r+0x6a0>
 8012eac:	2600      	movs	r6, #0
 8012eae:	4637      	mov	r7, r6
 8012eb0:	e7e1      	b.n	8012e76 <_dtoa_r+0x93e>
 8012eb2:	9700      	str	r7, [sp, #0]
 8012eb4:	4637      	mov	r7, r6
 8012eb6:	e599      	b.n	80129ec <_dtoa_r+0x4b4>
 8012eb8:	40240000 	.word	0x40240000
 8012ebc:	9b08      	ldr	r3, [sp, #32]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	f000 80ca 	beq.w	8013058 <_dtoa_r+0xb20>
 8012ec4:	9b03      	ldr	r3, [sp, #12]
 8012ec6:	9302      	str	r3, [sp, #8]
 8012ec8:	2d00      	cmp	r5, #0
 8012eca:	dd05      	ble.n	8012ed8 <_dtoa_r+0x9a0>
 8012ecc:	4639      	mov	r1, r7
 8012ece:	462a      	mov	r2, r5
 8012ed0:	4620      	mov	r0, r4
 8012ed2:	f000 ff3f 	bl	8013d54 <__lshift>
 8012ed6:	4607      	mov	r7, r0
 8012ed8:	f1b8 0f00 	cmp.w	r8, #0
 8012edc:	d05b      	beq.n	8012f96 <_dtoa_r+0xa5e>
 8012ede:	6879      	ldr	r1, [r7, #4]
 8012ee0:	4620      	mov	r0, r4
 8012ee2:	f000 fcdb 	bl	801389c <_Balloc>
 8012ee6:	4605      	mov	r5, r0
 8012ee8:	b928      	cbnz	r0, 8012ef6 <_dtoa_r+0x9be>
 8012eea:	4b87      	ldr	r3, [pc, #540]	; (8013108 <_dtoa_r+0xbd0>)
 8012eec:	4602      	mov	r2, r0
 8012eee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012ef2:	f7ff bb3b 	b.w	801256c <_dtoa_r+0x34>
 8012ef6:	693a      	ldr	r2, [r7, #16]
 8012ef8:	3202      	adds	r2, #2
 8012efa:	0092      	lsls	r2, r2, #2
 8012efc:	f107 010c 	add.w	r1, r7, #12
 8012f00:	300c      	adds	r0, #12
 8012f02:	f000 fcb1 	bl	8013868 <memcpy>
 8012f06:	2201      	movs	r2, #1
 8012f08:	4629      	mov	r1, r5
 8012f0a:	4620      	mov	r0, r4
 8012f0c:	f000 ff22 	bl	8013d54 <__lshift>
 8012f10:	9b01      	ldr	r3, [sp, #4]
 8012f12:	f103 0901 	add.w	r9, r3, #1
 8012f16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012f1a:	4413      	add	r3, r2
 8012f1c:	9305      	str	r3, [sp, #20]
 8012f1e:	f00a 0301 	and.w	r3, sl, #1
 8012f22:	46b8      	mov	r8, r7
 8012f24:	9304      	str	r3, [sp, #16]
 8012f26:	4607      	mov	r7, r0
 8012f28:	4631      	mov	r1, r6
 8012f2a:	ee18 0a10 	vmov	r0, s16
 8012f2e:	f7ff fa77 	bl	8012420 <quorem>
 8012f32:	4641      	mov	r1, r8
 8012f34:	9002      	str	r0, [sp, #8]
 8012f36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012f3a:	ee18 0a10 	vmov	r0, s16
 8012f3e:	f000 ff79 	bl	8013e34 <__mcmp>
 8012f42:	463a      	mov	r2, r7
 8012f44:	9003      	str	r0, [sp, #12]
 8012f46:	4631      	mov	r1, r6
 8012f48:	4620      	mov	r0, r4
 8012f4a:	f000 ff8f 	bl	8013e6c <__mdiff>
 8012f4e:	68c2      	ldr	r2, [r0, #12]
 8012f50:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8012f54:	4605      	mov	r5, r0
 8012f56:	bb02      	cbnz	r2, 8012f9a <_dtoa_r+0xa62>
 8012f58:	4601      	mov	r1, r0
 8012f5a:	ee18 0a10 	vmov	r0, s16
 8012f5e:	f000 ff69 	bl	8013e34 <__mcmp>
 8012f62:	4602      	mov	r2, r0
 8012f64:	4629      	mov	r1, r5
 8012f66:	4620      	mov	r0, r4
 8012f68:	9207      	str	r2, [sp, #28]
 8012f6a:	f000 fcd7 	bl	801391c <_Bfree>
 8012f6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012f72:	ea43 0102 	orr.w	r1, r3, r2
 8012f76:	9b04      	ldr	r3, [sp, #16]
 8012f78:	430b      	orrs	r3, r1
 8012f7a:	464d      	mov	r5, r9
 8012f7c:	d10f      	bne.n	8012f9e <_dtoa_r+0xa66>
 8012f7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012f82:	d02a      	beq.n	8012fda <_dtoa_r+0xaa2>
 8012f84:	9b03      	ldr	r3, [sp, #12]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	dd02      	ble.n	8012f90 <_dtoa_r+0xa58>
 8012f8a:	9b02      	ldr	r3, [sp, #8]
 8012f8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012f90:	f88b a000 	strb.w	sl, [fp]
 8012f94:	e775      	b.n	8012e82 <_dtoa_r+0x94a>
 8012f96:	4638      	mov	r0, r7
 8012f98:	e7ba      	b.n	8012f10 <_dtoa_r+0x9d8>
 8012f9a:	2201      	movs	r2, #1
 8012f9c:	e7e2      	b.n	8012f64 <_dtoa_r+0xa2c>
 8012f9e:	9b03      	ldr	r3, [sp, #12]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	db04      	blt.n	8012fae <_dtoa_r+0xa76>
 8012fa4:	9906      	ldr	r1, [sp, #24]
 8012fa6:	430b      	orrs	r3, r1
 8012fa8:	9904      	ldr	r1, [sp, #16]
 8012faa:	430b      	orrs	r3, r1
 8012fac:	d122      	bne.n	8012ff4 <_dtoa_r+0xabc>
 8012fae:	2a00      	cmp	r2, #0
 8012fb0:	ddee      	ble.n	8012f90 <_dtoa_r+0xa58>
 8012fb2:	ee18 1a10 	vmov	r1, s16
 8012fb6:	2201      	movs	r2, #1
 8012fb8:	4620      	mov	r0, r4
 8012fba:	f000 fecb 	bl	8013d54 <__lshift>
 8012fbe:	4631      	mov	r1, r6
 8012fc0:	ee08 0a10 	vmov	s16, r0
 8012fc4:	f000 ff36 	bl	8013e34 <__mcmp>
 8012fc8:	2800      	cmp	r0, #0
 8012fca:	dc03      	bgt.n	8012fd4 <_dtoa_r+0xa9c>
 8012fcc:	d1e0      	bne.n	8012f90 <_dtoa_r+0xa58>
 8012fce:	f01a 0f01 	tst.w	sl, #1
 8012fd2:	d0dd      	beq.n	8012f90 <_dtoa_r+0xa58>
 8012fd4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012fd8:	d1d7      	bne.n	8012f8a <_dtoa_r+0xa52>
 8012fda:	2339      	movs	r3, #57	; 0x39
 8012fdc:	f88b 3000 	strb.w	r3, [fp]
 8012fe0:	462b      	mov	r3, r5
 8012fe2:	461d      	mov	r5, r3
 8012fe4:	3b01      	subs	r3, #1
 8012fe6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012fea:	2a39      	cmp	r2, #57	; 0x39
 8012fec:	d071      	beq.n	80130d2 <_dtoa_r+0xb9a>
 8012fee:	3201      	adds	r2, #1
 8012ff0:	701a      	strb	r2, [r3, #0]
 8012ff2:	e746      	b.n	8012e82 <_dtoa_r+0x94a>
 8012ff4:	2a00      	cmp	r2, #0
 8012ff6:	dd07      	ble.n	8013008 <_dtoa_r+0xad0>
 8012ff8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012ffc:	d0ed      	beq.n	8012fda <_dtoa_r+0xaa2>
 8012ffe:	f10a 0301 	add.w	r3, sl, #1
 8013002:	f88b 3000 	strb.w	r3, [fp]
 8013006:	e73c      	b.n	8012e82 <_dtoa_r+0x94a>
 8013008:	9b05      	ldr	r3, [sp, #20]
 801300a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801300e:	4599      	cmp	r9, r3
 8013010:	d047      	beq.n	80130a2 <_dtoa_r+0xb6a>
 8013012:	ee18 1a10 	vmov	r1, s16
 8013016:	2300      	movs	r3, #0
 8013018:	220a      	movs	r2, #10
 801301a:	4620      	mov	r0, r4
 801301c:	f000 fca0 	bl	8013960 <__multadd>
 8013020:	45b8      	cmp	r8, r7
 8013022:	ee08 0a10 	vmov	s16, r0
 8013026:	f04f 0300 	mov.w	r3, #0
 801302a:	f04f 020a 	mov.w	r2, #10
 801302e:	4641      	mov	r1, r8
 8013030:	4620      	mov	r0, r4
 8013032:	d106      	bne.n	8013042 <_dtoa_r+0xb0a>
 8013034:	f000 fc94 	bl	8013960 <__multadd>
 8013038:	4680      	mov	r8, r0
 801303a:	4607      	mov	r7, r0
 801303c:	f109 0901 	add.w	r9, r9, #1
 8013040:	e772      	b.n	8012f28 <_dtoa_r+0x9f0>
 8013042:	f000 fc8d 	bl	8013960 <__multadd>
 8013046:	4639      	mov	r1, r7
 8013048:	4680      	mov	r8, r0
 801304a:	2300      	movs	r3, #0
 801304c:	220a      	movs	r2, #10
 801304e:	4620      	mov	r0, r4
 8013050:	f000 fc86 	bl	8013960 <__multadd>
 8013054:	4607      	mov	r7, r0
 8013056:	e7f1      	b.n	801303c <_dtoa_r+0xb04>
 8013058:	9b03      	ldr	r3, [sp, #12]
 801305a:	9302      	str	r3, [sp, #8]
 801305c:	9d01      	ldr	r5, [sp, #4]
 801305e:	ee18 0a10 	vmov	r0, s16
 8013062:	4631      	mov	r1, r6
 8013064:	f7ff f9dc 	bl	8012420 <quorem>
 8013068:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801306c:	9b01      	ldr	r3, [sp, #4]
 801306e:	f805 ab01 	strb.w	sl, [r5], #1
 8013072:	1aea      	subs	r2, r5, r3
 8013074:	9b02      	ldr	r3, [sp, #8]
 8013076:	4293      	cmp	r3, r2
 8013078:	dd09      	ble.n	801308e <_dtoa_r+0xb56>
 801307a:	ee18 1a10 	vmov	r1, s16
 801307e:	2300      	movs	r3, #0
 8013080:	220a      	movs	r2, #10
 8013082:	4620      	mov	r0, r4
 8013084:	f000 fc6c 	bl	8013960 <__multadd>
 8013088:	ee08 0a10 	vmov	s16, r0
 801308c:	e7e7      	b.n	801305e <_dtoa_r+0xb26>
 801308e:	9b02      	ldr	r3, [sp, #8]
 8013090:	2b00      	cmp	r3, #0
 8013092:	bfc8      	it	gt
 8013094:	461d      	movgt	r5, r3
 8013096:	9b01      	ldr	r3, [sp, #4]
 8013098:	bfd8      	it	le
 801309a:	2501      	movle	r5, #1
 801309c:	441d      	add	r5, r3
 801309e:	f04f 0800 	mov.w	r8, #0
 80130a2:	ee18 1a10 	vmov	r1, s16
 80130a6:	2201      	movs	r2, #1
 80130a8:	4620      	mov	r0, r4
 80130aa:	f000 fe53 	bl	8013d54 <__lshift>
 80130ae:	4631      	mov	r1, r6
 80130b0:	ee08 0a10 	vmov	s16, r0
 80130b4:	f000 febe 	bl	8013e34 <__mcmp>
 80130b8:	2800      	cmp	r0, #0
 80130ba:	dc91      	bgt.n	8012fe0 <_dtoa_r+0xaa8>
 80130bc:	d102      	bne.n	80130c4 <_dtoa_r+0xb8c>
 80130be:	f01a 0f01 	tst.w	sl, #1
 80130c2:	d18d      	bne.n	8012fe0 <_dtoa_r+0xaa8>
 80130c4:	462b      	mov	r3, r5
 80130c6:	461d      	mov	r5, r3
 80130c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80130cc:	2a30      	cmp	r2, #48	; 0x30
 80130ce:	d0fa      	beq.n	80130c6 <_dtoa_r+0xb8e>
 80130d0:	e6d7      	b.n	8012e82 <_dtoa_r+0x94a>
 80130d2:	9a01      	ldr	r2, [sp, #4]
 80130d4:	429a      	cmp	r2, r3
 80130d6:	d184      	bne.n	8012fe2 <_dtoa_r+0xaaa>
 80130d8:	9b00      	ldr	r3, [sp, #0]
 80130da:	3301      	adds	r3, #1
 80130dc:	9300      	str	r3, [sp, #0]
 80130de:	2331      	movs	r3, #49	; 0x31
 80130e0:	7013      	strb	r3, [r2, #0]
 80130e2:	e6ce      	b.n	8012e82 <_dtoa_r+0x94a>
 80130e4:	4b09      	ldr	r3, [pc, #36]	; (801310c <_dtoa_r+0xbd4>)
 80130e6:	f7ff ba95 	b.w	8012614 <_dtoa_r+0xdc>
 80130ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	f47f aa6e 	bne.w	80125ce <_dtoa_r+0x96>
 80130f2:	4b07      	ldr	r3, [pc, #28]	; (8013110 <_dtoa_r+0xbd8>)
 80130f4:	f7ff ba8e 	b.w	8012614 <_dtoa_r+0xdc>
 80130f8:	9b02      	ldr	r3, [sp, #8]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	dcae      	bgt.n	801305c <_dtoa_r+0xb24>
 80130fe:	9b06      	ldr	r3, [sp, #24]
 8013100:	2b02      	cmp	r3, #2
 8013102:	f73f aea8 	bgt.w	8012e56 <_dtoa_r+0x91e>
 8013106:	e7a9      	b.n	801305c <_dtoa_r+0xb24>
 8013108:	08016165 	.word	0x08016165
 801310c:	08015ed4 	.word	0x08015ed4
 8013110:	080160fd 	.word	0x080160fd

08013114 <fiprintf>:
 8013114:	b40e      	push	{r1, r2, r3}
 8013116:	b503      	push	{r0, r1, lr}
 8013118:	4601      	mov	r1, r0
 801311a:	ab03      	add	r3, sp, #12
 801311c:	4805      	ldr	r0, [pc, #20]	; (8013134 <fiprintf+0x20>)
 801311e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013122:	6800      	ldr	r0, [r0, #0]
 8013124:	9301      	str	r3, [sp, #4]
 8013126:	f001 fa15 	bl	8014554 <_vfiprintf_r>
 801312a:	b002      	add	sp, #8
 801312c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013130:	b003      	add	sp, #12
 8013132:	4770      	bx	lr
 8013134:	20000700 	.word	0x20000700

08013138 <rshift>:
 8013138:	6903      	ldr	r3, [r0, #16]
 801313a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801313e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013142:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013146:	f100 0414 	add.w	r4, r0, #20
 801314a:	dd45      	ble.n	80131d8 <rshift+0xa0>
 801314c:	f011 011f 	ands.w	r1, r1, #31
 8013150:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013154:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013158:	d10c      	bne.n	8013174 <rshift+0x3c>
 801315a:	f100 0710 	add.w	r7, r0, #16
 801315e:	4629      	mov	r1, r5
 8013160:	42b1      	cmp	r1, r6
 8013162:	d334      	bcc.n	80131ce <rshift+0x96>
 8013164:	1a9b      	subs	r3, r3, r2
 8013166:	009b      	lsls	r3, r3, #2
 8013168:	1eea      	subs	r2, r5, #3
 801316a:	4296      	cmp	r6, r2
 801316c:	bf38      	it	cc
 801316e:	2300      	movcc	r3, #0
 8013170:	4423      	add	r3, r4
 8013172:	e015      	b.n	80131a0 <rshift+0x68>
 8013174:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013178:	f1c1 0820 	rsb	r8, r1, #32
 801317c:	40cf      	lsrs	r7, r1
 801317e:	f105 0e04 	add.w	lr, r5, #4
 8013182:	46a1      	mov	r9, r4
 8013184:	4576      	cmp	r6, lr
 8013186:	46f4      	mov	ip, lr
 8013188:	d815      	bhi.n	80131b6 <rshift+0x7e>
 801318a:	1a9a      	subs	r2, r3, r2
 801318c:	0092      	lsls	r2, r2, #2
 801318e:	3a04      	subs	r2, #4
 8013190:	3501      	adds	r5, #1
 8013192:	42ae      	cmp	r6, r5
 8013194:	bf38      	it	cc
 8013196:	2200      	movcc	r2, #0
 8013198:	18a3      	adds	r3, r4, r2
 801319a:	50a7      	str	r7, [r4, r2]
 801319c:	b107      	cbz	r7, 80131a0 <rshift+0x68>
 801319e:	3304      	adds	r3, #4
 80131a0:	1b1a      	subs	r2, r3, r4
 80131a2:	42a3      	cmp	r3, r4
 80131a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80131a8:	bf08      	it	eq
 80131aa:	2300      	moveq	r3, #0
 80131ac:	6102      	str	r2, [r0, #16]
 80131ae:	bf08      	it	eq
 80131b0:	6143      	streq	r3, [r0, #20]
 80131b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131b6:	f8dc c000 	ldr.w	ip, [ip]
 80131ba:	fa0c fc08 	lsl.w	ip, ip, r8
 80131be:	ea4c 0707 	orr.w	r7, ip, r7
 80131c2:	f849 7b04 	str.w	r7, [r9], #4
 80131c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80131ca:	40cf      	lsrs	r7, r1
 80131cc:	e7da      	b.n	8013184 <rshift+0x4c>
 80131ce:	f851 cb04 	ldr.w	ip, [r1], #4
 80131d2:	f847 cf04 	str.w	ip, [r7, #4]!
 80131d6:	e7c3      	b.n	8013160 <rshift+0x28>
 80131d8:	4623      	mov	r3, r4
 80131da:	e7e1      	b.n	80131a0 <rshift+0x68>

080131dc <__hexdig_fun>:
 80131dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80131e0:	2b09      	cmp	r3, #9
 80131e2:	d802      	bhi.n	80131ea <__hexdig_fun+0xe>
 80131e4:	3820      	subs	r0, #32
 80131e6:	b2c0      	uxtb	r0, r0
 80131e8:	4770      	bx	lr
 80131ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80131ee:	2b05      	cmp	r3, #5
 80131f0:	d801      	bhi.n	80131f6 <__hexdig_fun+0x1a>
 80131f2:	3847      	subs	r0, #71	; 0x47
 80131f4:	e7f7      	b.n	80131e6 <__hexdig_fun+0xa>
 80131f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80131fa:	2b05      	cmp	r3, #5
 80131fc:	d801      	bhi.n	8013202 <__hexdig_fun+0x26>
 80131fe:	3827      	subs	r0, #39	; 0x27
 8013200:	e7f1      	b.n	80131e6 <__hexdig_fun+0xa>
 8013202:	2000      	movs	r0, #0
 8013204:	4770      	bx	lr
	...

08013208 <__gethex>:
 8013208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801320c:	ed2d 8b02 	vpush	{d8}
 8013210:	b089      	sub	sp, #36	; 0x24
 8013212:	ee08 0a10 	vmov	s16, r0
 8013216:	9304      	str	r3, [sp, #16]
 8013218:	4bb4      	ldr	r3, [pc, #720]	; (80134ec <__gethex+0x2e4>)
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	9301      	str	r3, [sp, #4]
 801321e:	4618      	mov	r0, r3
 8013220:	468b      	mov	fp, r1
 8013222:	4690      	mov	r8, r2
 8013224:	f7ed f806 	bl	8000234 <strlen>
 8013228:	9b01      	ldr	r3, [sp, #4]
 801322a:	f8db 2000 	ldr.w	r2, [fp]
 801322e:	4403      	add	r3, r0
 8013230:	4682      	mov	sl, r0
 8013232:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013236:	9305      	str	r3, [sp, #20]
 8013238:	1c93      	adds	r3, r2, #2
 801323a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801323e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013242:	32fe      	adds	r2, #254	; 0xfe
 8013244:	18d1      	adds	r1, r2, r3
 8013246:	461f      	mov	r7, r3
 8013248:	f813 0b01 	ldrb.w	r0, [r3], #1
 801324c:	9100      	str	r1, [sp, #0]
 801324e:	2830      	cmp	r0, #48	; 0x30
 8013250:	d0f8      	beq.n	8013244 <__gethex+0x3c>
 8013252:	f7ff ffc3 	bl	80131dc <__hexdig_fun>
 8013256:	4604      	mov	r4, r0
 8013258:	2800      	cmp	r0, #0
 801325a:	d13a      	bne.n	80132d2 <__gethex+0xca>
 801325c:	9901      	ldr	r1, [sp, #4]
 801325e:	4652      	mov	r2, sl
 8013260:	4638      	mov	r0, r7
 8013262:	f001 fab1 	bl	80147c8 <strncmp>
 8013266:	4605      	mov	r5, r0
 8013268:	2800      	cmp	r0, #0
 801326a:	d168      	bne.n	801333e <__gethex+0x136>
 801326c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8013270:	eb07 060a 	add.w	r6, r7, sl
 8013274:	f7ff ffb2 	bl	80131dc <__hexdig_fun>
 8013278:	2800      	cmp	r0, #0
 801327a:	d062      	beq.n	8013342 <__gethex+0x13a>
 801327c:	4633      	mov	r3, r6
 801327e:	7818      	ldrb	r0, [r3, #0]
 8013280:	2830      	cmp	r0, #48	; 0x30
 8013282:	461f      	mov	r7, r3
 8013284:	f103 0301 	add.w	r3, r3, #1
 8013288:	d0f9      	beq.n	801327e <__gethex+0x76>
 801328a:	f7ff ffa7 	bl	80131dc <__hexdig_fun>
 801328e:	2301      	movs	r3, #1
 8013290:	fab0 f480 	clz	r4, r0
 8013294:	0964      	lsrs	r4, r4, #5
 8013296:	4635      	mov	r5, r6
 8013298:	9300      	str	r3, [sp, #0]
 801329a:	463a      	mov	r2, r7
 801329c:	4616      	mov	r6, r2
 801329e:	3201      	adds	r2, #1
 80132a0:	7830      	ldrb	r0, [r6, #0]
 80132a2:	f7ff ff9b 	bl	80131dc <__hexdig_fun>
 80132a6:	2800      	cmp	r0, #0
 80132a8:	d1f8      	bne.n	801329c <__gethex+0x94>
 80132aa:	9901      	ldr	r1, [sp, #4]
 80132ac:	4652      	mov	r2, sl
 80132ae:	4630      	mov	r0, r6
 80132b0:	f001 fa8a 	bl	80147c8 <strncmp>
 80132b4:	b980      	cbnz	r0, 80132d8 <__gethex+0xd0>
 80132b6:	b94d      	cbnz	r5, 80132cc <__gethex+0xc4>
 80132b8:	eb06 050a 	add.w	r5, r6, sl
 80132bc:	462a      	mov	r2, r5
 80132be:	4616      	mov	r6, r2
 80132c0:	3201      	adds	r2, #1
 80132c2:	7830      	ldrb	r0, [r6, #0]
 80132c4:	f7ff ff8a 	bl	80131dc <__hexdig_fun>
 80132c8:	2800      	cmp	r0, #0
 80132ca:	d1f8      	bne.n	80132be <__gethex+0xb6>
 80132cc:	1bad      	subs	r5, r5, r6
 80132ce:	00ad      	lsls	r5, r5, #2
 80132d0:	e004      	b.n	80132dc <__gethex+0xd4>
 80132d2:	2400      	movs	r4, #0
 80132d4:	4625      	mov	r5, r4
 80132d6:	e7e0      	b.n	801329a <__gethex+0x92>
 80132d8:	2d00      	cmp	r5, #0
 80132da:	d1f7      	bne.n	80132cc <__gethex+0xc4>
 80132dc:	7833      	ldrb	r3, [r6, #0]
 80132de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80132e2:	2b50      	cmp	r3, #80	; 0x50
 80132e4:	d13b      	bne.n	801335e <__gethex+0x156>
 80132e6:	7873      	ldrb	r3, [r6, #1]
 80132e8:	2b2b      	cmp	r3, #43	; 0x2b
 80132ea:	d02c      	beq.n	8013346 <__gethex+0x13e>
 80132ec:	2b2d      	cmp	r3, #45	; 0x2d
 80132ee:	d02e      	beq.n	801334e <__gethex+0x146>
 80132f0:	1c71      	adds	r1, r6, #1
 80132f2:	f04f 0900 	mov.w	r9, #0
 80132f6:	7808      	ldrb	r0, [r1, #0]
 80132f8:	f7ff ff70 	bl	80131dc <__hexdig_fun>
 80132fc:	1e43      	subs	r3, r0, #1
 80132fe:	b2db      	uxtb	r3, r3
 8013300:	2b18      	cmp	r3, #24
 8013302:	d82c      	bhi.n	801335e <__gethex+0x156>
 8013304:	f1a0 0210 	sub.w	r2, r0, #16
 8013308:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801330c:	f7ff ff66 	bl	80131dc <__hexdig_fun>
 8013310:	1e43      	subs	r3, r0, #1
 8013312:	b2db      	uxtb	r3, r3
 8013314:	2b18      	cmp	r3, #24
 8013316:	d91d      	bls.n	8013354 <__gethex+0x14c>
 8013318:	f1b9 0f00 	cmp.w	r9, #0
 801331c:	d000      	beq.n	8013320 <__gethex+0x118>
 801331e:	4252      	negs	r2, r2
 8013320:	4415      	add	r5, r2
 8013322:	f8cb 1000 	str.w	r1, [fp]
 8013326:	b1e4      	cbz	r4, 8013362 <__gethex+0x15a>
 8013328:	9b00      	ldr	r3, [sp, #0]
 801332a:	2b00      	cmp	r3, #0
 801332c:	bf14      	ite	ne
 801332e:	2700      	movne	r7, #0
 8013330:	2706      	moveq	r7, #6
 8013332:	4638      	mov	r0, r7
 8013334:	b009      	add	sp, #36	; 0x24
 8013336:	ecbd 8b02 	vpop	{d8}
 801333a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801333e:	463e      	mov	r6, r7
 8013340:	4625      	mov	r5, r4
 8013342:	2401      	movs	r4, #1
 8013344:	e7ca      	b.n	80132dc <__gethex+0xd4>
 8013346:	f04f 0900 	mov.w	r9, #0
 801334a:	1cb1      	adds	r1, r6, #2
 801334c:	e7d3      	b.n	80132f6 <__gethex+0xee>
 801334e:	f04f 0901 	mov.w	r9, #1
 8013352:	e7fa      	b.n	801334a <__gethex+0x142>
 8013354:	230a      	movs	r3, #10
 8013356:	fb03 0202 	mla	r2, r3, r2, r0
 801335a:	3a10      	subs	r2, #16
 801335c:	e7d4      	b.n	8013308 <__gethex+0x100>
 801335e:	4631      	mov	r1, r6
 8013360:	e7df      	b.n	8013322 <__gethex+0x11a>
 8013362:	1bf3      	subs	r3, r6, r7
 8013364:	3b01      	subs	r3, #1
 8013366:	4621      	mov	r1, r4
 8013368:	2b07      	cmp	r3, #7
 801336a:	dc0b      	bgt.n	8013384 <__gethex+0x17c>
 801336c:	ee18 0a10 	vmov	r0, s16
 8013370:	f000 fa94 	bl	801389c <_Balloc>
 8013374:	4604      	mov	r4, r0
 8013376:	b940      	cbnz	r0, 801338a <__gethex+0x182>
 8013378:	4b5d      	ldr	r3, [pc, #372]	; (80134f0 <__gethex+0x2e8>)
 801337a:	4602      	mov	r2, r0
 801337c:	21de      	movs	r1, #222	; 0xde
 801337e:	485d      	ldr	r0, [pc, #372]	; (80134f4 <__gethex+0x2ec>)
 8013380:	f7ff f830 	bl	80123e4 <__assert_func>
 8013384:	3101      	adds	r1, #1
 8013386:	105b      	asrs	r3, r3, #1
 8013388:	e7ee      	b.n	8013368 <__gethex+0x160>
 801338a:	f100 0914 	add.w	r9, r0, #20
 801338e:	f04f 0b00 	mov.w	fp, #0
 8013392:	f1ca 0301 	rsb	r3, sl, #1
 8013396:	f8cd 9008 	str.w	r9, [sp, #8]
 801339a:	f8cd b000 	str.w	fp, [sp]
 801339e:	9306      	str	r3, [sp, #24]
 80133a0:	42b7      	cmp	r7, r6
 80133a2:	d340      	bcc.n	8013426 <__gethex+0x21e>
 80133a4:	9802      	ldr	r0, [sp, #8]
 80133a6:	9b00      	ldr	r3, [sp, #0]
 80133a8:	f840 3b04 	str.w	r3, [r0], #4
 80133ac:	eba0 0009 	sub.w	r0, r0, r9
 80133b0:	1080      	asrs	r0, r0, #2
 80133b2:	0146      	lsls	r6, r0, #5
 80133b4:	6120      	str	r0, [r4, #16]
 80133b6:	4618      	mov	r0, r3
 80133b8:	f000 fb62 	bl	8013a80 <__hi0bits>
 80133bc:	1a30      	subs	r0, r6, r0
 80133be:	f8d8 6000 	ldr.w	r6, [r8]
 80133c2:	42b0      	cmp	r0, r6
 80133c4:	dd63      	ble.n	801348e <__gethex+0x286>
 80133c6:	1b87      	subs	r7, r0, r6
 80133c8:	4639      	mov	r1, r7
 80133ca:	4620      	mov	r0, r4
 80133cc:	f000 ff06 	bl	80141dc <__any_on>
 80133d0:	4682      	mov	sl, r0
 80133d2:	b1a8      	cbz	r0, 8013400 <__gethex+0x1f8>
 80133d4:	1e7b      	subs	r3, r7, #1
 80133d6:	1159      	asrs	r1, r3, #5
 80133d8:	f003 021f 	and.w	r2, r3, #31
 80133dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80133e0:	f04f 0a01 	mov.w	sl, #1
 80133e4:	fa0a f202 	lsl.w	r2, sl, r2
 80133e8:	420a      	tst	r2, r1
 80133ea:	d009      	beq.n	8013400 <__gethex+0x1f8>
 80133ec:	4553      	cmp	r3, sl
 80133ee:	dd05      	ble.n	80133fc <__gethex+0x1f4>
 80133f0:	1eb9      	subs	r1, r7, #2
 80133f2:	4620      	mov	r0, r4
 80133f4:	f000 fef2 	bl	80141dc <__any_on>
 80133f8:	2800      	cmp	r0, #0
 80133fa:	d145      	bne.n	8013488 <__gethex+0x280>
 80133fc:	f04f 0a02 	mov.w	sl, #2
 8013400:	4639      	mov	r1, r7
 8013402:	4620      	mov	r0, r4
 8013404:	f7ff fe98 	bl	8013138 <rshift>
 8013408:	443d      	add	r5, r7
 801340a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801340e:	42ab      	cmp	r3, r5
 8013410:	da4c      	bge.n	80134ac <__gethex+0x2a4>
 8013412:	ee18 0a10 	vmov	r0, s16
 8013416:	4621      	mov	r1, r4
 8013418:	f000 fa80 	bl	801391c <_Bfree>
 801341c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801341e:	2300      	movs	r3, #0
 8013420:	6013      	str	r3, [r2, #0]
 8013422:	27a3      	movs	r7, #163	; 0xa3
 8013424:	e785      	b.n	8013332 <__gethex+0x12a>
 8013426:	1e73      	subs	r3, r6, #1
 8013428:	9a05      	ldr	r2, [sp, #20]
 801342a:	9303      	str	r3, [sp, #12]
 801342c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013430:	4293      	cmp	r3, r2
 8013432:	d019      	beq.n	8013468 <__gethex+0x260>
 8013434:	f1bb 0f20 	cmp.w	fp, #32
 8013438:	d107      	bne.n	801344a <__gethex+0x242>
 801343a:	9b02      	ldr	r3, [sp, #8]
 801343c:	9a00      	ldr	r2, [sp, #0]
 801343e:	f843 2b04 	str.w	r2, [r3], #4
 8013442:	9302      	str	r3, [sp, #8]
 8013444:	2300      	movs	r3, #0
 8013446:	9300      	str	r3, [sp, #0]
 8013448:	469b      	mov	fp, r3
 801344a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801344e:	f7ff fec5 	bl	80131dc <__hexdig_fun>
 8013452:	9b00      	ldr	r3, [sp, #0]
 8013454:	f000 000f 	and.w	r0, r0, #15
 8013458:	fa00 f00b 	lsl.w	r0, r0, fp
 801345c:	4303      	orrs	r3, r0
 801345e:	9300      	str	r3, [sp, #0]
 8013460:	f10b 0b04 	add.w	fp, fp, #4
 8013464:	9b03      	ldr	r3, [sp, #12]
 8013466:	e00d      	b.n	8013484 <__gethex+0x27c>
 8013468:	9b03      	ldr	r3, [sp, #12]
 801346a:	9a06      	ldr	r2, [sp, #24]
 801346c:	4413      	add	r3, r2
 801346e:	42bb      	cmp	r3, r7
 8013470:	d3e0      	bcc.n	8013434 <__gethex+0x22c>
 8013472:	4618      	mov	r0, r3
 8013474:	9901      	ldr	r1, [sp, #4]
 8013476:	9307      	str	r3, [sp, #28]
 8013478:	4652      	mov	r2, sl
 801347a:	f001 f9a5 	bl	80147c8 <strncmp>
 801347e:	9b07      	ldr	r3, [sp, #28]
 8013480:	2800      	cmp	r0, #0
 8013482:	d1d7      	bne.n	8013434 <__gethex+0x22c>
 8013484:	461e      	mov	r6, r3
 8013486:	e78b      	b.n	80133a0 <__gethex+0x198>
 8013488:	f04f 0a03 	mov.w	sl, #3
 801348c:	e7b8      	b.n	8013400 <__gethex+0x1f8>
 801348e:	da0a      	bge.n	80134a6 <__gethex+0x29e>
 8013490:	1a37      	subs	r7, r6, r0
 8013492:	4621      	mov	r1, r4
 8013494:	ee18 0a10 	vmov	r0, s16
 8013498:	463a      	mov	r2, r7
 801349a:	f000 fc5b 	bl	8013d54 <__lshift>
 801349e:	1bed      	subs	r5, r5, r7
 80134a0:	4604      	mov	r4, r0
 80134a2:	f100 0914 	add.w	r9, r0, #20
 80134a6:	f04f 0a00 	mov.w	sl, #0
 80134aa:	e7ae      	b.n	801340a <__gethex+0x202>
 80134ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80134b0:	42a8      	cmp	r0, r5
 80134b2:	dd72      	ble.n	801359a <__gethex+0x392>
 80134b4:	1b45      	subs	r5, r0, r5
 80134b6:	42ae      	cmp	r6, r5
 80134b8:	dc36      	bgt.n	8013528 <__gethex+0x320>
 80134ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80134be:	2b02      	cmp	r3, #2
 80134c0:	d02a      	beq.n	8013518 <__gethex+0x310>
 80134c2:	2b03      	cmp	r3, #3
 80134c4:	d02c      	beq.n	8013520 <__gethex+0x318>
 80134c6:	2b01      	cmp	r3, #1
 80134c8:	d11c      	bne.n	8013504 <__gethex+0x2fc>
 80134ca:	42ae      	cmp	r6, r5
 80134cc:	d11a      	bne.n	8013504 <__gethex+0x2fc>
 80134ce:	2e01      	cmp	r6, #1
 80134d0:	d112      	bne.n	80134f8 <__gethex+0x2f0>
 80134d2:	9a04      	ldr	r2, [sp, #16]
 80134d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80134d8:	6013      	str	r3, [r2, #0]
 80134da:	2301      	movs	r3, #1
 80134dc:	6123      	str	r3, [r4, #16]
 80134de:	f8c9 3000 	str.w	r3, [r9]
 80134e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80134e4:	2762      	movs	r7, #98	; 0x62
 80134e6:	601c      	str	r4, [r3, #0]
 80134e8:	e723      	b.n	8013332 <__gethex+0x12a>
 80134ea:	bf00      	nop
 80134ec:	080161dc 	.word	0x080161dc
 80134f0:	08016165 	.word	0x08016165
 80134f4:	08016176 	.word	0x08016176
 80134f8:	1e71      	subs	r1, r6, #1
 80134fa:	4620      	mov	r0, r4
 80134fc:	f000 fe6e 	bl	80141dc <__any_on>
 8013500:	2800      	cmp	r0, #0
 8013502:	d1e6      	bne.n	80134d2 <__gethex+0x2ca>
 8013504:	ee18 0a10 	vmov	r0, s16
 8013508:	4621      	mov	r1, r4
 801350a:	f000 fa07 	bl	801391c <_Bfree>
 801350e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013510:	2300      	movs	r3, #0
 8013512:	6013      	str	r3, [r2, #0]
 8013514:	2750      	movs	r7, #80	; 0x50
 8013516:	e70c      	b.n	8013332 <__gethex+0x12a>
 8013518:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801351a:	2b00      	cmp	r3, #0
 801351c:	d1f2      	bne.n	8013504 <__gethex+0x2fc>
 801351e:	e7d8      	b.n	80134d2 <__gethex+0x2ca>
 8013520:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013522:	2b00      	cmp	r3, #0
 8013524:	d1d5      	bne.n	80134d2 <__gethex+0x2ca>
 8013526:	e7ed      	b.n	8013504 <__gethex+0x2fc>
 8013528:	1e6f      	subs	r7, r5, #1
 801352a:	f1ba 0f00 	cmp.w	sl, #0
 801352e:	d131      	bne.n	8013594 <__gethex+0x38c>
 8013530:	b127      	cbz	r7, 801353c <__gethex+0x334>
 8013532:	4639      	mov	r1, r7
 8013534:	4620      	mov	r0, r4
 8013536:	f000 fe51 	bl	80141dc <__any_on>
 801353a:	4682      	mov	sl, r0
 801353c:	117b      	asrs	r3, r7, #5
 801353e:	2101      	movs	r1, #1
 8013540:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013544:	f007 071f 	and.w	r7, r7, #31
 8013548:	fa01 f707 	lsl.w	r7, r1, r7
 801354c:	421f      	tst	r7, r3
 801354e:	4629      	mov	r1, r5
 8013550:	4620      	mov	r0, r4
 8013552:	bf18      	it	ne
 8013554:	f04a 0a02 	orrne.w	sl, sl, #2
 8013558:	1b76      	subs	r6, r6, r5
 801355a:	f7ff fded 	bl	8013138 <rshift>
 801355e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013562:	2702      	movs	r7, #2
 8013564:	f1ba 0f00 	cmp.w	sl, #0
 8013568:	d048      	beq.n	80135fc <__gethex+0x3f4>
 801356a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801356e:	2b02      	cmp	r3, #2
 8013570:	d015      	beq.n	801359e <__gethex+0x396>
 8013572:	2b03      	cmp	r3, #3
 8013574:	d017      	beq.n	80135a6 <__gethex+0x39e>
 8013576:	2b01      	cmp	r3, #1
 8013578:	d109      	bne.n	801358e <__gethex+0x386>
 801357a:	f01a 0f02 	tst.w	sl, #2
 801357e:	d006      	beq.n	801358e <__gethex+0x386>
 8013580:	f8d9 0000 	ldr.w	r0, [r9]
 8013584:	ea4a 0a00 	orr.w	sl, sl, r0
 8013588:	f01a 0f01 	tst.w	sl, #1
 801358c:	d10e      	bne.n	80135ac <__gethex+0x3a4>
 801358e:	f047 0710 	orr.w	r7, r7, #16
 8013592:	e033      	b.n	80135fc <__gethex+0x3f4>
 8013594:	f04f 0a01 	mov.w	sl, #1
 8013598:	e7d0      	b.n	801353c <__gethex+0x334>
 801359a:	2701      	movs	r7, #1
 801359c:	e7e2      	b.n	8013564 <__gethex+0x35c>
 801359e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80135a0:	f1c3 0301 	rsb	r3, r3, #1
 80135a4:	9315      	str	r3, [sp, #84]	; 0x54
 80135a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d0f0      	beq.n	801358e <__gethex+0x386>
 80135ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80135b0:	f104 0314 	add.w	r3, r4, #20
 80135b4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80135b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80135bc:	f04f 0c00 	mov.w	ip, #0
 80135c0:	4618      	mov	r0, r3
 80135c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80135c6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80135ca:	d01c      	beq.n	8013606 <__gethex+0x3fe>
 80135cc:	3201      	adds	r2, #1
 80135ce:	6002      	str	r2, [r0, #0]
 80135d0:	2f02      	cmp	r7, #2
 80135d2:	f104 0314 	add.w	r3, r4, #20
 80135d6:	d13f      	bne.n	8013658 <__gethex+0x450>
 80135d8:	f8d8 2000 	ldr.w	r2, [r8]
 80135dc:	3a01      	subs	r2, #1
 80135de:	42b2      	cmp	r2, r6
 80135e0:	d10a      	bne.n	80135f8 <__gethex+0x3f0>
 80135e2:	1171      	asrs	r1, r6, #5
 80135e4:	2201      	movs	r2, #1
 80135e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80135ea:	f006 061f 	and.w	r6, r6, #31
 80135ee:	fa02 f606 	lsl.w	r6, r2, r6
 80135f2:	421e      	tst	r6, r3
 80135f4:	bf18      	it	ne
 80135f6:	4617      	movne	r7, r2
 80135f8:	f047 0720 	orr.w	r7, r7, #32
 80135fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80135fe:	601c      	str	r4, [r3, #0]
 8013600:	9b04      	ldr	r3, [sp, #16]
 8013602:	601d      	str	r5, [r3, #0]
 8013604:	e695      	b.n	8013332 <__gethex+0x12a>
 8013606:	4299      	cmp	r1, r3
 8013608:	f843 cc04 	str.w	ip, [r3, #-4]
 801360c:	d8d8      	bhi.n	80135c0 <__gethex+0x3b8>
 801360e:	68a3      	ldr	r3, [r4, #8]
 8013610:	459b      	cmp	fp, r3
 8013612:	db19      	blt.n	8013648 <__gethex+0x440>
 8013614:	6861      	ldr	r1, [r4, #4]
 8013616:	ee18 0a10 	vmov	r0, s16
 801361a:	3101      	adds	r1, #1
 801361c:	f000 f93e 	bl	801389c <_Balloc>
 8013620:	4681      	mov	r9, r0
 8013622:	b918      	cbnz	r0, 801362c <__gethex+0x424>
 8013624:	4b1a      	ldr	r3, [pc, #104]	; (8013690 <__gethex+0x488>)
 8013626:	4602      	mov	r2, r0
 8013628:	2184      	movs	r1, #132	; 0x84
 801362a:	e6a8      	b.n	801337e <__gethex+0x176>
 801362c:	6922      	ldr	r2, [r4, #16]
 801362e:	3202      	adds	r2, #2
 8013630:	f104 010c 	add.w	r1, r4, #12
 8013634:	0092      	lsls	r2, r2, #2
 8013636:	300c      	adds	r0, #12
 8013638:	f000 f916 	bl	8013868 <memcpy>
 801363c:	4621      	mov	r1, r4
 801363e:	ee18 0a10 	vmov	r0, s16
 8013642:	f000 f96b 	bl	801391c <_Bfree>
 8013646:	464c      	mov	r4, r9
 8013648:	6923      	ldr	r3, [r4, #16]
 801364a:	1c5a      	adds	r2, r3, #1
 801364c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013650:	6122      	str	r2, [r4, #16]
 8013652:	2201      	movs	r2, #1
 8013654:	615a      	str	r2, [r3, #20]
 8013656:	e7bb      	b.n	80135d0 <__gethex+0x3c8>
 8013658:	6922      	ldr	r2, [r4, #16]
 801365a:	455a      	cmp	r2, fp
 801365c:	dd0b      	ble.n	8013676 <__gethex+0x46e>
 801365e:	2101      	movs	r1, #1
 8013660:	4620      	mov	r0, r4
 8013662:	f7ff fd69 	bl	8013138 <rshift>
 8013666:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801366a:	3501      	adds	r5, #1
 801366c:	42ab      	cmp	r3, r5
 801366e:	f6ff aed0 	blt.w	8013412 <__gethex+0x20a>
 8013672:	2701      	movs	r7, #1
 8013674:	e7c0      	b.n	80135f8 <__gethex+0x3f0>
 8013676:	f016 061f 	ands.w	r6, r6, #31
 801367a:	d0fa      	beq.n	8013672 <__gethex+0x46a>
 801367c:	4453      	add	r3, sl
 801367e:	f1c6 0620 	rsb	r6, r6, #32
 8013682:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013686:	f000 f9fb 	bl	8013a80 <__hi0bits>
 801368a:	42b0      	cmp	r0, r6
 801368c:	dbe7      	blt.n	801365e <__gethex+0x456>
 801368e:	e7f0      	b.n	8013672 <__gethex+0x46a>
 8013690:	08016165 	.word	0x08016165

08013694 <L_shift>:
 8013694:	f1c2 0208 	rsb	r2, r2, #8
 8013698:	0092      	lsls	r2, r2, #2
 801369a:	b570      	push	{r4, r5, r6, lr}
 801369c:	f1c2 0620 	rsb	r6, r2, #32
 80136a0:	6843      	ldr	r3, [r0, #4]
 80136a2:	6804      	ldr	r4, [r0, #0]
 80136a4:	fa03 f506 	lsl.w	r5, r3, r6
 80136a8:	432c      	orrs	r4, r5
 80136aa:	40d3      	lsrs	r3, r2
 80136ac:	6004      	str	r4, [r0, #0]
 80136ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80136b2:	4288      	cmp	r0, r1
 80136b4:	d3f4      	bcc.n	80136a0 <L_shift+0xc>
 80136b6:	bd70      	pop	{r4, r5, r6, pc}

080136b8 <__match>:
 80136b8:	b530      	push	{r4, r5, lr}
 80136ba:	6803      	ldr	r3, [r0, #0]
 80136bc:	3301      	adds	r3, #1
 80136be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80136c2:	b914      	cbnz	r4, 80136ca <__match+0x12>
 80136c4:	6003      	str	r3, [r0, #0]
 80136c6:	2001      	movs	r0, #1
 80136c8:	bd30      	pop	{r4, r5, pc}
 80136ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80136d2:	2d19      	cmp	r5, #25
 80136d4:	bf98      	it	ls
 80136d6:	3220      	addls	r2, #32
 80136d8:	42a2      	cmp	r2, r4
 80136da:	d0f0      	beq.n	80136be <__match+0x6>
 80136dc:	2000      	movs	r0, #0
 80136de:	e7f3      	b.n	80136c8 <__match+0x10>

080136e0 <__hexnan>:
 80136e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136e4:	680b      	ldr	r3, [r1, #0]
 80136e6:	115e      	asrs	r6, r3, #5
 80136e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80136ec:	f013 031f 	ands.w	r3, r3, #31
 80136f0:	b087      	sub	sp, #28
 80136f2:	bf18      	it	ne
 80136f4:	3604      	addne	r6, #4
 80136f6:	2500      	movs	r5, #0
 80136f8:	1f37      	subs	r7, r6, #4
 80136fa:	4690      	mov	r8, r2
 80136fc:	6802      	ldr	r2, [r0, #0]
 80136fe:	9301      	str	r3, [sp, #4]
 8013700:	4682      	mov	sl, r0
 8013702:	f846 5c04 	str.w	r5, [r6, #-4]
 8013706:	46b9      	mov	r9, r7
 8013708:	463c      	mov	r4, r7
 801370a:	9502      	str	r5, [sp, #8]
 801370c:	46ab      	mov	fp, r5
 801370e:	7851      	ldrb	r1, [r2, #1]
 8013710:	1c53      	adds	r3, r2, #1
 8013712:	9303      	str	r3, [sp, #12]
 8013714:	b341      	cbz	r1, 8013768 <__hexnan+0x88>
 8013716:	4608      	mov	r0, r1
 8013718:	9205      	str	r2, [sp, #20]
 801371a:	9104      	str	r1, [sp, #16]
 801371c:	f7ff fd5e 	bl	80131dc <__hexdig_fun>
 8013720:	2800      	cmp	r0, #0
 8013722:	d14f      	bne.n	80137c4 <__hexnan+0xe4>
 8013724:	9904      	ldr	r1, [sp, #16]
 8013726:	9a05      	ldr	r2, [sp, #20]
 8013728:	2920      	cmp	r1, #32
 801372a:	d818      	bhi.n	801375e <__hexnan+0x7e>
 801372c:	9b02      	ldr	r3, [sp, #8]
 801372e:	459b      	cmp	fp, r3
 8013730:	dd13      	ble.n	801375a <__hexnan+0x7a>
 8013732:	454c      	cmp	r4, r9
 8013734:	d206      	bcs.n	8013744 <__hexnan+0x64>
 8013736:	2d07      	cmp	r5, #7
 8013738:	dc04      	bgt.n	8013744 <__hexnan+0x64>
 801373a:	462a      	mov	r2, r5
 801373c:	4649      	mov	r1, r9
 801373e:	4620      	mov	r0, r4
 8013740:	f7ff ffa8 	bl	8013694 <L_shift>
 8013744:	4544      	cmp	r4, r8
 8013746:	d950      	bls.n	80137ea <__hexnan+0x10a>
 8013748:	2300      	movs	r3, #0
 801374a:	f1a4 0904 	sub.w	r9, r4, #4
 801374e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013752:	f8cd b008 	str.w	fp, [sp, #8]
 8013756:	464c      	mov	r4, r9
 8013758:	461d      	mov	r5, r3
 801375a:	9a03      	ldr	r2, [sp, #12]
 801375c:	e7d7      	b.n	801370e <__hexnan+0x2e>
 801375e:	2929      	cmp	r1, #41	; 0x29
 8013760:	d156      	bne.n	8013810 <__hexnan+0x130>
 8013762:	3202      	adds	r2, #2
 8013764:	f8ca 2000 	str.w	r2, [sl]
 8013768:	f1bb 0f00 	cmp.w	fp, #0
 801376c:	d050      	beq.n	8013810 <__hexnan+0x130>
 801376e:	454c      	cmp	r4, r9
 8013770:	d206      	bcs.n	8013780 <__hexnan+0xa0>
 8013772:	2d07      	cmp	r5, #7
 8013774:	dc04      	bgt.n	8013780 <__hexnan+0xa0>
 8013776:	462a      	mov	r2, r5
 8013778:	4649      	mov	r1, r9
 801377a:	4620      	mov	r0, r4
 801377c:	f7ff ff8a 	bl	8013694 <L_shift>
 8013780:	4544      	cmp	r4, r8
 8013782:	d934      	bls.n	80137ee <__hexnan+0x10e>
 8013784:	f1a8 0204 	sub.w	r2, r8, #4
 8013788:	4623      	mov	r3, r4
 801378a:	f853 1b04 	ldr.w	r1, [r3], #4
 801378e:	f842 1f04 	str.w	r1, [r2, #4]!
 8013792:	429f      	cmp	r7, r3
 8013794:	d2f9      	bcs.n	801378a <__hexnan+0xaa>
 8013796:	1b3b      	subs	r3, r7, r4
 8013798:	f023 0303 	bic.w	r3, r3, #3
 801379c:	3304      	adds	r3, #4
 801379e:	3401      	adds	r4, #1
 80137a0:	3e03      	subs	r6, #3
 80137a2:	42b4      	cmp	r4, r6
 80137a4:	bf88      	it	hi
 80137a6:	2304      	movhi	r3, #4
 80137a8:	4443      	add	r3, r8
 80137aa:	2200      	movs	r2, #0
 80137ac:	f843 2b04 	str.w	r2, [r3], #4
 80137b0:	429f      	cmp	r7, r3
 80137b2:	d2fb      	bcs.n	80137ac <__hexnan+0xcc>
 80137b4:	683b      	ldr	r3, [r7, #0]
 80137b6:	b91b      	cbnz	r3, 80137c0 <__hexnan+0xe0>
 80137b8:	4547      	cmp	r7, r8
 80137ba:	d127      	bne.n	801380c <__hexnan+0x12c>
 80137bc:	2301      	movs	r3, #1
 80137be:	603b      	str	r3, [r7, #0]
 80137c0:	2005      	movs	r0, #5
 80137c2:	e026      	b.n	8013812 <__hexnan+0x132>
 80137c4:	3501      	adds	r5, #1
 80137c6:	2d08      	cmp	r5, #8
 80137c8:	f10b 0b01 	add.w	fp, fp, #1
 80137cc:	dd06      	ble.n	80137dc <__hexnan+0xfc>
 80137ce:	4544      	cmp	r4, r8
 80137d0:	d9c3      	bls.n	801375a <__hexnan+0x7a>
 80137d2:	2300      	movs	r3, #0
 80137d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80137d8:	2501      	movs	r5, #1
 80137da:	3c04      	subs	r4, #4
 80137dc:	6822      	ldr	r2, [r4, #0]
 80137de:	f000 000f 	and.w	r0, r0, #15
 80137e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80137e6:	6022      	str	r2, [r4, #0]
 80137e8:	e7b7      	b.n	801375a <__hexnan+0x7a>
 80137ea:	2508      	movs	r5, #8
 80137ec:	e7b5      	b.n	801375a <__hexnan+0x7a>
 80137ee:	9b01      	ldr	r3, [sp, #4]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d0df      	beq.n	80137b4 <__hexnan+0xd4>
 80137f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80137f8:	f1c3 0320 	rsb	r3, r3, #32
 80137fc:	fa22 f303 	lsr.w	r3, r2, r3
 8013800:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013804:	401a      	ands	r2, r3
 8013806:	f846 2c04 	str.w	r2, [r6, #-4]
 801380a:	e7d3      	b.n	80137b4 <__hexnan+0xd4>
 801380c:	3f04      	subs	r7, #4
 801380e:	e7d1      	b.n	80137b4 <__hexnan+0xd4>
 8013810:	2004      	movs	r0, #4
 8013812:	b007      	add	sp, #28
 8013814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013818 <_gettimeofday_r>:
 8013818:	b538      	push	{r3, r4, r5, lr}
 801381a:	4d07      	ldr	r5, [pc, #28]	; (8013838 <_gettimeofday_r+0x20>)
 801381c:	2300      	movs	r3, #0
 801381e:	4604      	mov	r4, r0
 8013820:	4608      	mov	r0, r1
 8013822:	4611      	mov	r1, r2
 8013824:	602b      	str	r3, [r5, #0]
 8013826:	f001 fc1b 	bl	8015060 <_gettimeofday>
 801382a:	1c43      	adds	r3, r0, #1
 801382c:	d102      	bne.n	8013834 <_gettimeofday_r+0x1c>
 801382e:	682b      	ldr	r3, [r5, #0]
 8013830:	b103      	cbz	r3, 8013834 <_gettimeofday_r+0x1c>
 8013832:	6023      	str	r3, [r4, #0]
 8013834:	bd38      	pop	{r3, r4, r5, pc}
 8013836:	bf00      	nop
 8013838:	20012a3c 	.word	0x20012a3c

0801383c <_localeconv_r>:
 801383c:	4800      	ldr	r0, [pc, #0]	; (8013840 <_localeconv_r+0x4>)
 801383e:	4770      	bx	lr
 8013840:	20000858 	.word	0x20000858

08013844 <__ascii_mbtowc>:
 8013844:	b082      	sub	sp, #8
 8013846:	b901      	cbnz	r1, 801384a <__ascii_mbtowc+0x6>
 8013848:	a901      	add	r1, sp, #4
 801384a:	b142      	cbz	r2, 801385e <__ascii_mbtowc+0x1a>
 801384c:	b14b      	cbz	r3, 8013862 <__ascii_mbtowc+0x1e>
 801384e:	7813      	ldrb	r3, [r2, #0]
 8013850:	600b      	str	r3, [r1, #0]
 8013852:	7812      	ldrb	r2, [r2, #0]
 8013854:	1e10      	subs	r0, r2, #0
 8013856:	bf18      	it	ne
 8013858:	2001      	movne	r0, #1
 801385a:	b002      	add	sp, #8
 801385c:	4770      	bx	lr
 801385e:	4610      	mov	r0, r2
 8013860:	e7fb      	b.n	801385a <__ascii_mbtowc+0x16>
 8013862:	f06f 0001 	mvn.w	r0, #1
 8013866:	e7f8      	b.n	801385a <__ascii_mbtowc+0x16>

08013868 <memcpy>:
 8013868:	440a      	add	r2, r1
 801386a:	4291      	cmp	r1, r2
 801386c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013870:	d100      	bne.n	8013874 <memcpy+0xc>
 8013872:	4770      	bx	lr
 8013874:	b510      	push	{r4, lr}
 8013876:	f811 4b01 	ldrb.w	r4, [r1], #1
 801387a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801387e:	4291      	cmp	r1, r2
 8013880:	d1f9      	bne.n	8013876 <memcpy+0xe>
 8013882:	bd10      	pop	{r4, pc}

08013884 <__malloc_lock>:
 8013884:	4801      	ldr	r0, [pc, #4]	; (801388c <__malloc_lock+0x8>)
 8013886:	f001 ba41 	b.w	8014d0c <__retarget_lock_acquire_recursive>
 801388a:	bf00      	nop
 801388c:	20012a40 	.word	0x20012a40

08013890 <__malloc_unlock>:
 8013890:	4801      	ldr	r0, [pc, #4]	; (8013898 <__malloc_unlock+0x8>)
 8013892:	f001 ba3c 	b.w	8014d0e <__retarget_lock_release_recursive>
 8013896:	bf00      	nop
 8013898:	20012a40 	.word	0x20012a40

0801389c <_Balloc>:
 801389c:	b570      	push	{r4, r5, r6, lr}
 801389e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80138a0:	4604      	mov	r4, r0
 80138a2:	460d      	mov	r5, r1
 80138a4:	b976      	cbnz	r6, 80138c4 <_Balloc+0x28>
 80138a6:	2010      	movs	r0, #16
 80138a8:	f7fc fec2 	bl	8010630 <malloc>
 80138ac:	4602      	mov	r2, r0
 80138ae:	6260      	str	r0, [r4, #36]	; 0x24
 80138b0:	b920      	cbnz	r0, 80138bc <_Balloc+0x20>
 80138b2:	4b18      	ldr	r3, [pc, #96]	; (8013914 <_Balloc+0x78>)
 80138b4:	4818      	ldr	r0, [pc, #96]	; (8013918 <_Balloc+0x7c>)
 80138b6:	2166      	movs	r1, #102	; 0x66
 80138b8:	f7fe fd94 	bl	80123e4 <__assert_func>
 80138bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80138c0:	6006      	str	r6, [r0, #0]
 80138c2:	60c6      	str	r6, [r0, #12]
 80138c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80138c6:	68f3      	ldr	r3, [r6, #12]
 80138c8:	b183      	cbz	r3, 80138ec <_Balloc+0x50>
 80138ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138cc:	68db      	ldr	r3, [r3, #12]
 80138ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80138d2:	b9b8      	cbnz	r0, 8013904 <_Balloc+0x68>
 80138d4:	2101      	movs	r1, #1
 80138d6:	fa01 f605 	lsl.w	r6, r1, r5
 80138da:	1d72      	adds	r2, r6, #5
 80138dc:	0092      	lsls	r2, r2, #2
 80138de:	4620      	mov	r0, r4
 80138e0:	f000 fc9d 	bl	801421e <_calloc_r>
 80138e4:	b160      	cbz	r0, 8013900 <_Balloc+0x64>
 80138e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80138ea:	e00e      	b.n	801390a <_Balloc+0x6e>
 80138ec:	2221      	movs	r2, #33	; 0x21
 80138ee:	2104      	movs	r1, #4
 80138f0:	4620      	mov	r0, r4
 80138f2:	f000 fc94 	bl	801421e <_calloc_r>
 80138f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138f8:	60f0      	str	r0, [r6, #12]
 80138fa:	68db      	ldr	r3, [r3, #12]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d1e4      	bne.n	80138ca <_Balloc+0x2e>
 8013900:	2000      	movs	r0, #0
 8013902:	bd70      	pop	{r4, r5, r6, pc}
 8013904:	6802      	ldr	r2, [r0, #0]
 8013906:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801390a:	2300      	movs	r3, #0
 801390c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013910:	e7f7      	b.n	8013902 <_Balloc+0x66>
 8013912:	bf00      	nop
 8013914:	08015efd 	.word	0x08015efd
 8013918:	080161f0 	.word	0x080161f0

0801391c <_Bfree>:
 801391c:	b570      	push	{r4, r5, r6, lr}
 801391e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013920:	4605      	mov	r5, r0
 8013922:	460c      	mov	r4, r1
 8013924:	b976      	cbnz	r6, 8013944 <_Bfree+0x28>
 8013926:	2010      	movs	r0, #16
 8013928:	f7fc fe82 	bl	8010630 <malloc>
 801392c:	4602      	mov	r2, r0
 801392e:	6268      	str	r0, [r5, #36]	; 0x24
 8013930:	b920      	cbnz	r0, 801393c <_Bfree+0x20>
 8013932:	4b09      	ldr	r3, [pc, #36]	; (8013958 <_Bfree+0x3c>)
 8013934:	4809      	ldr	r0, [pc, #36]	; (801395c <_Bfree+0x40>)
 8013936:	218a      	movs	r1, #138	; 0x8a
 8013938:	f7fe fd54 	bl	80123e4 <__assert_func>
 801393c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013940:	6006      	str	r6, [r0, #0]
 8013942:	60c6      	str	r6, [r0, #12]
 8013944:	b13c      	cbz	r4, 8013956 <_Bfree+0x3a>
 8013946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013948:	6862      	ldr	r2, [r4, #4]
 801394a:	68db      	ldr	r3, [r3, #12]
 801394c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013950:	6021      	str	r1, [r4, #0]
 8013952:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013956:	bd70      	pop	{r4, r5, r6, pc}
 8013958:	08015efd 	.word	0x08015efd
 801395c:	080161f0 	.word	0x080161f0

08013960 <__multadd>:
 8013960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013964:	690d      	ldr	r5, [r1, #16]
 8013966:	4607      	mov	r7, r0
 8013968:	460c      	mov	r4, r1
 801396a:	461e      	mov	r6, r3
 801396c:	f101 0c14 	add.w	ip, r1, #20
 8013970:	2000      	movs	r0, #0
 8013972:	f8dc 3000 	ldr.w	r3, [ip]
 8013976:	b299      	uxth	r1, r3
 8013978:	fb02 6101 	mla	r1, r2, r1, r6
 801397c:	0c1e      	lsrs	r6, r3, #16
 801397e:	0c0b      	lsrs	r3, r1, #16
 8013980:	fb02 3306 	mla	r3, r2, r6, r3
 8013984:	b289      	uxth	r1, r1
 8013986:	3001      	adds	r0, #1
 8013988:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801398c:	4285      	cmp	r5, r0
 801398e:	f84c 1b04 	str.w	r1, [ip], #4
 8013992:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013996:	dcec      	bgt.n	8013972 <__multadd+0x12>
 8013998:	b30e      	cbz	r6, 80139de <__multadd+0x7e>
 801399a:	68a3      	ldr	r3, [r4, #8]
 801399c:	42ab      	cmp	r3, r5
 801399e:	dc19      	bgt.n	80139d4 <__multadd+0x74>
 80139a0:	6861      	ldr	r1, [r4, #4]
 80139a2:	4638      	mov	r0, r7
 80139a4:	3101      	adds	r1, #1
 80139a6:	f7ff ff79 	bl	801389c <_Balloc>
 80139aa:	4680      	mov	r8, r0
 80139ac:	b928      	cbnz	r0, 80139ba <__multadd+0x5a>
 80139ae:	4602      	mov	r2, r0
 80139b0:	4b0c      	ldr	r3, [pc, #48]	; (80139e4 <__multadd+0x84>)
 80139b2:	480d      	ldr	r0, [pc, #52]	; (80139e8 <__multadd+0x88>)
 80139b4:	21b5      	movs	r1, #181	; 0xb5
 80139b6:	f7fe fd15 	bl	80123e4 <__assert_func>
 80139ba:	6922      	ldr	r2, [r4, #16]
 80139bc:	3202      	adds	r2, #2
 80139be:	f104 010c 	add.w	r1, r4, #12
 80139c2:	0092      	lsls	r2, r2, #2
 80139c4:	300c      	adds	r0, #12
 80139c6:	f7ff ff4f 	bl	8013868 <memcpy>
 80139ca:	4621      	mov	r1, r4
 80139cc:	4638      	mov	r0, r7
 80139ce:	f7ff ffa5 	bl	801391c <_Bfree>
 80139d2:	4644      	mov	r4, r8
 80139d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80139d8:	3501      	adds	r5, #1
 80139da:	615e      	str	r6, [r3, #20]
 80139dc:	6125      	str	r5, [r4, #16]
 80139de:	4620      	mov	r0, r4
 80139e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139e4:	08016165 	.word	0x08016165
 80139e8:	080161f0 	.word	0x080161f0

080139ec <__s2b>:
 80139ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139f0:	460c      	mov	r4, r1
 80139f2:	4615      	mov	r5, r2
 80139f4:	461f      	mov	r7, r3
 80139f6:	2209      	movs	r2, #9
 80139f8:	3308      	adds	r3, #8
 80139fa:	4606      	mov	r6, r0
 80139fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8013a00:	2100      	movs	r1, #0
 8013a02:	2201      	movs	r2, #1
 8013a04:	429a      	cmp	r2, r3
 8013a06:	db09      	blt.n	8013a1c <__s2b+0x30>
 8013a08:	4630      	mov	r0, r6
 8013a0a:	f7ff ff47 	bl	801389c <_Balloc>
 8013a0e:	b940      	cbnz	r0, 8013a22 <__s2b+0x36>
 8013a10:	4602      	mov	r2, r0
 8013a12:	4b19      	ldr	r3, [pc, #100]	; (8013a78 <__s2b+0x8c>)
 8013a14:	4819      	ldr	r0, [pc, #100]	; (8013a7c <__s2b+0x90>)
 8013a16:	21ce      	movs	r1, #206	; 0xce
 8013a18:	f7fe fce4 	bl	80123e4 <__assert_func>
 8013a1c:	0052      	lsls	r2, r2, #1
 8013a1e:	3101      	adds	r1, #1
 8013a20:	e7f0      	b.n	8013a04 <__s2b+0x18>
 8013a22:	9b08      	ldr	r3, [sp, #32]
 8013a24:	6143      	str	r3, [r0, #20]
 8013a26:	2d09      	cmp	r5, #9
 8013a28:	f04f 0301 	mov.w	r3, #1
 8013a2c:	6103      	str	r3, [r0, #16]
 8013a2e:	dd16      	ble.n	8013a5e <__s2b+0x72>
 8013a30:	f104 0909 	add.w	r9, r4, #9
 8013a34:	46c8      	mov	r8, r9
 8013a36:	442c      	add	r4, r5
 8013a38:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013a3c:	4601      	mov	r1, r0
 8013a3e:	3b30      	subs	r3, #48	; 0x30
 8013a40:	220a      	movs	r2, #10
 8013a42:	4630      	mov	r0, r6
 8013a44:	f7ff ff8c 	bl	8013960 <__multadd>
 8013a48:	45a0      	cmp	r8, r4
 8013a4a:	d1f5      	bne.n	8013a38 <__s2b+0x4c>
 8013a4c:	f1a5 0408 	sub.w	r4, r5, #8
 8013a50:	444c      	add	r4, r9
 8013a52:	1b2d      	subs	r5, r5, r4
 8013a54:	1963      	adds	r3, r4, r5
 8013a56:	42bb      	cmp	r3, r7
 8013a58:	db04      	blt.n	8013a64 <__s2b+0x78>
 8013a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a5e:	340a      	adds	r4, #10
 8013a60:	2509      	movs	r5, #9
 8013a62:	e7f6      	b.n	8013a52 <__s2b+0x66>
 8013a64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013a68:	4601      	mov	r1, r0
 8013a6a:	3b30      	subs	r3, #48	; 0x30
 8013a6c:	220a      	movs	r2, #10
 8013a6e:	4630      	mov	r0, r6
 8013a70:	f7ff ff76 	bl	8013960 <__multadd>
 8013a74:	e7ee      	b.n	8013a54 <__s2b+0x68>
 8013a76:	bf00      	nop
 8013a78:	08016165 	.word	0x08016165
 8013a7c:	080161f0 	.word	0x080161f0

08013a80 <__hi0bits>:
 8013a80:	0c03      	lsrs	r3, r0, #16
 8013a82:	041b      	lsls	r3, r3, #16
 8013a84:	b9d3      	cbnz	r3, 8013abc <__hi0bits+0x3c>
 8013a86:	0400      	lsls	r0, r0, #16
 8013a88:	2310      	movs	r3, #16
 8013a8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013a8e:	bf04      	itt	eq
 8013a90:	0200      	lsleq	r0, r0, #8
 8013a92:	3308      	addeq	r3, #8
 8013a94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013a98:	bf04      	itt	eq
 8013a9a:	0100      	lsleq	r0, r0, #4
 8013a9c:	3304      	addeq	r3, #4
 8013a9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013aa2:	bf04      	itt	eq
 8013aa4:	0080      	lsleq	r0, r0, #2
 8013aa6:	3302      	addeq	r3, #2
 8013aa8:	2800      	cmp	r0, #0
 8013aaa:	db05      	blt.n	8013ab8 <__hi0bits+0x38>
 8013aac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013ab0:	f103 0301 	add.w	r3, r3, #1
 8013ab4:	bf08      	it	eq
 8013ab6:	2320      	moveq	r3, #32
 8013ab8:	4618      	mov	r0, r3
 8013aba:	4770      	bx	lr
 8013abc:	2300      	movs	r3, #0
 8013abe:	e7e4      	b.n	8013a8a <__hi0bits+0xa>

08013ac0 <__lo0bits>:
 8013ac0:	6803      	ldr	r3, [r0, #0]
 8013ac2:	f013 0207 	ands.w	r2, r3, #7
 8013ac6:	4601      	mov	r1, r0
 8013ac8:	d00b      	beq.n	8013ae2 <__lo0bits+0x22>
 8013aca:	07da      	lsls	r2, r3, #31
 8013acc:	d423      	bmi.n	8013b16 <__lo0bits+0x56>
 8013ace:	0798      	lsls	r0, r3, #30
 8013ad0:	bf49      	itett	mi
 8013ad2:	085b      	lsrmi	r3, r3, #1
 8013ad4:	089b      	lsrpl	r3, r3, #2
 8013ad6:	2001      	movmi	r0, #1
 8013ad8:	600b      	strmi	r3, [r1, #0]
 8013ada:	bf5c      	itt	pl
 8013adc:	600b      	strpl	r3, [r1, #0]
 8013ade:	2002      	movpl	r0, #2
 8013ae0:	4770      	bx	lr
 8013ae2:	b298      	uxth	r0, r3
 8013ae4:	b9a8      	cbnz	r0, 8013b12 <__lo0bits+0x52>
 8013ae6:	0c1b      	lsrs	r3, r3, #16
 8013ae8:	2010      	movs	r0, #16
 8013aea:	b2da      	uxtb	r2, r3
 8013aec:	b90a      	cbnz	r2, 8013af2 <__lo0bits+0x32>
 8013aee:	3008      	adds	r0, #8
 8013af0:	0a1b      	lsrs	r3, r3, #8
 8013af2:	071a      	lsls	r2, r3, #28
 8013af4:	bf04      	itt	eq
 8013af6:	091b      	lsreq	r3, r3, #4
 8013af8:	3004      	addeq	r0, #4
 8013afa:	079a      	lsls	r2, r3, #30
 8013afc:	bf04      	itt	eq
 8013afe:	089b      	lsreq	r3, r3, #2
 8013b00:	3002      	addeq	r0, #2
 8013b02:	07da      	lsls	r2, r3, #31
 8013b04:	d403      	bmi.n	8013b0e <__lo0bits+0x4e>
 8013b06:	085b      	lsrs	r3, r3, #1
 8013b08:	f100 0001 	add.w	r0, r0, #1
 8013b0c:	d005      	beq.n	8013b1a <__lo0bits+0x5a>
 8013b0e:	600b      	str	r3, [r1, #0]
 8013b10:	4770      	bx	lr
 8013b12:	4610      	mov	r0, r2
 8013b14:	e7e9      	b.n	8013aea <__lo0bits+0x2a>
 8013b16:	2000      	movs	r0, #0
 8013b18:	4770      	bx	lr
 8013b1a:	2020      	movs	r0, #32
 8013b1c:	4770      	bx	lr
	...

08013b20 <__i2b>:
 8013b20:	b510      	push	{r4, lr}
 8013b22:	460c      	mov	r4, r1
 8013b24:	2101      	movs	r1, #1
 8013b26:	f7ff feb9 	bl	801389c <_Balloc>
 8013b2a:	4602      	mov	r2, r0
 8013b2c:	b928      	cbnz	r0, 8013b3a <__i2b+0x1a>
 8013b2e:	4b05      	ldr	r3, [pc, #20]	; (8013b44 <__i2b+0x24>)
 8013b30:	4805      	ldr	r0, [pc, #20]	; (8013b48 <__i2b+0x28>)
 8013b32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013b36:	f7fe fc55 	bl	80123e4 <__assert_func>
 8013b3a:	2301      	movs	r3, #1
 8013b3c:	6144      	str	r4, [r0, #20]
 8013b3e:	6103      	str	r3, [r0, #16]
 8013b40:	bd10      	pop	{r4, pc}
 8013b42:	bf00      	nop
 8013b44:	08016165 	.word	0x08016165
 8013b48:	080161f0 	.word	0x080161f0

08013b4c <__multiply>:
 8013b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b50:	4691      	mov	r9, r2
 8013b52:	690a      	ldr	r2, [r1, #16]
 8013b54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013b58:	429a      	cmp	r2, r3
 8013b5a:	bfb8      	it	lt
 8013b5c:	460b      	movlt	r3, r1
 8013b5e:	460c      	mov	r4, r1
 8013b60:	bfbc      	itt	lt
 8013b62:	464c      	movlt	r4, r9
 8013b64:	4699      	movlt	r9, r3
 8013b66:	6927      	ldr	r7, [r4, #16]
 8013b68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013b6c:	68a3      	ldr	r3, [r4, #8]
 8013b6e:	6861      	ldr	r1, [r4, #4]
 8013b70:	eb07 060a 	add.w	r6, r7, sl
 8013b74:	42b3      	cmp	r3, r6
 8013b76:	b085      	sub	sp, #20
 8013b78:	bfb8      	it	lt
 8013b7a:	3101      	addlt	r1, #1
 8013b7c:	f7ff fe8e 	bl	801389c <_Balloc>
 8013b80:	b930      	cbnz	r0, 8013b90 <__multiply+0x44>
 8013b82:	4602      	mov	r2, r0
 8013b84:	4b44      	ldr	r3, [pc, #272]	; (8013c98 <__multiply+0x14c>)
 8013b86:	4845      	ldr	r0, [pc, #276]	; (8013c9c <__multiply+0x150>)
 8013b88:	f240 115d 	movw	r1, #349	; 0x15d
 8013b8c:	f7fe fc2a 	bl	80123e4 <__assert_func>
 8013b90:	f100 0514 	add.w	r5, r0, #20
 8013b94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013b98:	462b      	mov	r3, r5
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	4543      	cmp	r3, r8
 8013b9e:	d321      	bcc.n	8013be4 <__multiply+0x98>
 8013ba0:	f104 0314 	add.w	r3, r4, #20
 8013ba4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013ba8:	f109 0314 	add.w	r3, r9, #20
 8013bac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013bb0:	9202      	str	r2, [sp, #8]
 8013bb2:	1b3a      	subs	r2, r7, r4
 8013bb4:	3a15      	subs	r2, #21
 8013bb6:	f022 0203 	bic.w	r2, r2, #3
 8013bba:	3204      	adds	r2, #4
 8013bbc:	f104 0115 	add.w	r1, r4, #21
 8013bc0:	428f      	cmp	r7, r1
 8013bc2:	bf38      	it	cc
 8013bc4:	2204      	movcc	r2, #4
 8013bc6:	9201      	str	r2, [sp, #4]
 8013bc8:	9a02      	ldr	r2, [sp, #8]
 8013bca:	9303      	str	r3, [sp, #12]
 8013bcc:	429a      	cmp	r2, r3
 8013bce:	d80c      	bhi.n	8013bea <__multiply+0x9e>
 8013bd0:	2e00      	cmp	r6, #0
 8013bd2:	dd03      	ble.n	8013bdc <__multiply+0x90>
 8013bd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d05a      	beq.n	8013c92 <__multiply+0x146>
 8013bdc:	6106      	str	r6, [r0, #16]
 8013bde:	b005      	add	sp, #20
 8013be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013be4:	f843 2b04 	str.w	r2, [r3], #4
 8013be8:	e7d8      	b.n	8013b9c <__multiply+0x50>
 8013bea:	f8b3 a000 	ldrh.w	sl, [r3]
 8013bee:	f1ba 0f00 	cmp.w	sl, #0
 8013bf2:	d024      	beq.n	8013c3e <__multiply+0xf2>
 8013bf4:	f104 0e14 	add.w	lr, r4, #20
 8013bf8:	46a9      	mov	r9, r5
 8013bfa:	f04f 0c00 	mov.w	ip, #0
 8013bfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013c02:	f8d9 1000 	ldr.w	r1, [r9]
 8013c06:	fa1f fb82 	uxth.w	fp, r2
 8013c0a:	b289      	uxth	r1, r1
 8013c0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8013c10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013c14:	f8d9 2000 	ldr.w	r2, [r9]
 8013c18:	4461      	add	r1, ip
 8013c1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013c1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8013c22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013c26:	b289      	uxth	r1, r1
 8013c28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013c2c:	4577      	cmp	r7, lr
 8013c2e:	f849 1b04 	str.w	r1, [r9], #4
 8013c32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013c36:	d8e2      	bhi.n	8013bfe <__multiply+0xb2>
 8013c38:	9a01      	ldr	r2, [sp, #4]
 8013c3a:	f845 c002 	str.w	ip, [r5, r2]
 8013c3e:	9a03      	ldr	r2, [sp, #12]
 8013c40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013c44:	3304      	adds	r3, #4
 8013c46:	f1b9 0f00 	cmp.w	r9, #0
 8013c4a:	d020      	beq.n	8013c8e <__multiply+0x142>
 8013c4c:	6829      	ldr	r1, [r5, #0]
 8013c4e:	f104 0c14 	add.w	ip, r4, #20
 8013c52:	46ae      	mov	lr, r5
 8013c54:	f04f 0a00 	mov.w	sl, #0
 8013c58:	f8bc b000 	ldrh.w	fp, [ip]
 8013c5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013c60:	fb09 220b 	mla	r2, r9, fp, r2
 8013c64:	4492      	add	sl, r2
 8013c66:	b289      	uxth	r1, r1
 8013c68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013c6c:	f84e 1b04 	str.w	r1, [lr], #4
 8013c70:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013c74:	f8be 1000 	ldrh.w	r1, [lr]
 8013c78:	0c12      	lsrs	r2, r2, #16
 8013c7a:	fb09 1102 	mla	r1, r9, r2, r1
 8013c7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013c82:	4567      	cmp	r7, ip
 8013c84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013c88:	d8e6      	bhi.n	8013c58 <__multiply+0x10c>
 8013c8a:	9a01      	ldr	r2, [sp, #4]
 8013c8c:	50a9      	str	r1, [r5, r2]
 8013c8e:	3504      	adds	r5, #4
 8013c90:	e79a      	b.n	8013bc8 <__multiply+0x7c>
 8013c92:	3e01      	subs	r6, #1
 8013c94:	e79c      	b.n	8013bd0 <__multiply+0x84>
 8013c96:	bf00      	nop
 8013c98:	08016165 	.word	0x08016165
 8013c9c:	080161f0 	.word	0x080161f0

08013ca0 <__pow5mult>:
 8013ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ca4:	4615      	mov	r5, r2
 8013ca6:	f012 0203 	ands.w	r2, r2, #3
 8013caa:	4606      	mov	r6, r0
 8013cac:	460f      	mov	r7, r1
 8013cae:	d007      	beq.n	8013cc0 <__pow5mult+0x20>
 8013cb0:	4c25      	ldr	r4, [pc, #148]	; (8013d48 <__pow5mult+0xa8>)
 8013cb2:	3a01      	subs	r2, #1
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013cba:	f7ff fe51 	bl	8013960 <__multadd>
 8013cbe:	4607      	mov	r7, r0
 8013cc0:	10ad      	asrs	r5, r5, #2
 8013cc2:	d03d      	beq.n	8013d40 <__pow5mult+0xa0>
 8013cc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013cc6:	b97c      	cbnz	r4, 8013ce8 <__pow5mult+0x48>
 8013cc8:	2010      	movs	r0, #16
 8013cca:	f7fc fcb1 	bl	8010630 <malloc>
 8013cce:	4602      	mov	r2, r0
 8013cd0:	6270      	str	r0, [r6, #36]	; 0x24
 8013cd2:	b928      	cbnz	r0, 8013ce0 <__pow5mult+0x40>
 8013cd4:	4b1d      	ldr	r3, [pc, #116]	; (8013d4c <__pow5mult+0xac>)
 8013cd6:	481e      	ldr	r0, [pc, #120]	; (8013d50 <__pow5mult+0xb0>)
 8013cd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013cdc:	f7fe fb82 	bl	80123e4 <__assert_func>
 8013ce0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013ce4:	6004      	str	r4, [r0, #0]
 8013ce6:	60c4      	str	r4, [r0, #12]
 8013ce8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013cec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013cf0:	b94c      	cbnz	r4, 8013d06 <__pow5mult+0x66>
 8013cf2:	f240 2171 	movw	r1, #625	; 0x271
 8013cf6:	4630      	mov	r0, r6
 8013cf8:	f7ff ff12 	bl	8013b20 <__i2b>
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8013d02:	4604      	mov	r4, r0
 8013d04:	6003      	str	r3, [r0, #0]
 8013d06:	f04f 0900 	mov.w	r9, #0
 8013d0a:	07eb      	lsls	r3, r5, #31
 8013d0c:	d50a      	bpl.n	8013d24 <__pow5mult+0x84>
 8013d0e:	4639      	mov	r1, r7
 8013d10:	4622      	mov	r2, r4
 8013d12:	4630      	mov	r0, r6
 8013d14:	f7ff ff1a 	bl	8013b4c <__multiply>
 8013d18:	4639      	mov	r1, r7
 8013d1a:	4680      	mov	r8, r0
 8013d1c:	4630      	mov	r0, r6
 8013d1e:	f7ff fdfd 	bl	801391c <_Bfree>
 8013d22:	4647      	mov	r7, r8
 8013d24:	106d      	asrs	r5, r5, #1
 8013d26:	d00b      	beq.n	8013d40 <__pow5mult+0xa0>
 8013d28:	6820      	ldr	r0, [r4, #0]
 8013d2a:	b938      	cbnz	r0, 8013d3c <__pow5mult+0x9c>
 8013d2c:	4622      	mov	r2, r4
 8013d2e:	4621      	mov	r1, r4
 8013d30:	4630      	mov	r0, r6
 8013d32:	f7ff ff0b 	bl	8013b4c <__multiply>
 8013d36:	6020      	str	r0, [r4, #0]
 8013d38:	f8c0 9000 	str.w	r9, [r0]
 8013d3c:	4604      	mov	r4, r0
 8013d3e:	e7e4      	b.n	8013d0a <__pow5mult+0x6a>
 8013d40:	4638      	mov	r0, r7
 8013d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d46:	bf00      	nop
 8013d48:	08016340 	.word	0x08016340
 8013d4c:	08015efd 	.word	0x08015efd
 8013d50:	080161f0 	.word	0x080161f0

08013d54 <__lshift>:
 8013d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d58:	460c      	mov	r4, r1
 8013d5a:	6849      	ldr	r1, [r1, #4]
 8013d5c:	6923      	ldr	r3, [r4, #16]
 8013d5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013d62:	68a3      	ldr	r3, [r4, #8]
 8013d64:	4607      	mov	r7, r0
 8013d66:	4691      	mov	r9, r2
 8013d68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013d6c:	f108 0601 	add.w	r6, r8, #1
 8013d70:	42b3      	cmp	r3, r6
 8013d72:	db0b      	blt.n	8013d8c <__lshift+0x38>
 8013d74:	4638      	mov	r0, r7
 8013d76:	f7ff fd91 	bl	801389c <_Balloc>
 8013d7a:	4605      	mov	r5, r0
 8013d7c:	b948      	cbnz	r0, 8013d92 <__lshift+0x3e>
 8013d7e:	4602      	mov	r2, r0
 8013d80:	4b2a      	ldr	r3, [pc, #168]	; (8013e2c <__lshift+0xd8>)
 8013d82:	482b      	ldr	r0, [pc, #172]	; (8013e30 <__lshift+0xdc>)
 8013d84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013d88:	f7fe fb2c 	bl	80123e4 <__assert_func>
 8013d8c:	3101      	adds	r1, #1
 8013d8e:	005b      	lsls	r3, r3, #1
 8013d90:	e7ee      	b.n	8013d70 <__lshift+0x1c>
 8013d92:	2300      	movs	r3, #0
 8013d94:	f100 0114 	add.w	r1, r0, #20
 8013d98:	f100 0210 	add.w	r2, r0, #16
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	4553      	cmp	r3, sl
 8013da0:	db37      	blt.n	8013e12 <__lshift+0xbe>
 8013da2:	6920      	ldr	r0, [r4, #16]
 8013da4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013da8:	f104 0314 	add.w	r3, r4, #20
 8013dac:	f019 091f 	ands.w	r9, r9, #31
 8013db0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013db4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013db8:	d02f      	beq.n	8013e1a <__lshift+0xc6>
 8013dba:	f1c9 0e20 	rsb	lr, r9, #32
 8013dbe:	468a      	mov	sl, r1
 8013dc0:	f04f 0c00 	mov.w	ip, #0
 8013dc4:	681a      	ldr	r2, [r3, #0]
 8013dc6:	fa02 f209 	lsl.w	r2, r2, r9
 8013dca:	ea42 020c 	orr.w	r2, r2, ip
 8013dce:	f84a 2b04 	str.w	r2, [sl], #4
 8013dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8013dd6:	4298      	cmp	r0, r3
 8013dd8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013ddc:	d8f2      	bhi.n	8013dc4 <__lshift+0x70>
 8013dde:	1b03      	subs	r3, r0, r4
 8013de0:	3b15      	subs	r3, #21
 8013de2:	f023 0303 	bic.w	r3, r3, #3
 8013de6:	3304      	adds	r3, #4
 8013de8:	f104 0215 	add.w	r2, r4, #21
 8013dec:	4290      	cmp	r0, r2
 8013dee:	bf38      	it	cc
 8013df0:	2304      	movcc	r3, #4
 8013df2:	f841 c003 	str.w	ip, [r1, r3]
 8013df6:	f1bc 0f00 	cmp.w	ip, #0
 8013dfa:	d001      	beq.n	8013e00 <__lshift+0xac>
 8013dfc:	f108 0602 	add.w	r6, r8, #2
 8013e00:	3e01      	subs	r6, #1
 8013e02:	4638      	mov	r0, r7
 8013e04:	612e      	str	r6, [r5, #16]
 8013e06:	4621      	mov	r1, r4
 8013e08:	f7ff fd88 	bl	801391c <_Bfree>
 8013e0c:	4628      	mov	r0, r5
 8013e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e12:	f842 0f04 	str.w	r0, [r2, #4]!
 8013e16:	3301      	adds	r3, #1
 8013e18:	e7c1      	b.n	8013d9e <__lshift+0x4a>
 8013e1a:	3904      	subs	r1, #4
 8013e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e20:	f841 2f04 	str.w	r2, [r1, #4]!
 8013e24:	4298      	cmp	r0, r3
 8013e26:	d8f9      	bhi.n	8013e1c <__lshift+0xc8>
 8013e28:	e7ea      	b.n	8013e00 <__lshift+0xac>
 8013e2a:	bf00      	nop
 8013e2c:	08016165 	.word	0x08016165
 8013e30:	080161f0 	.word	0x080161f0

08013e34 <__mcmp>:
 8013e34:	b530      	push	{r4, r5, lr}
 8013e36:	6902      	ldr	r2, [r0, #16]
 8013e38:	690c      	ldr	r4, [r1, #16]
 8013e3a:	1b12      	subs	r2, r2, r4
 8013e3c:	d10e      	bne.n	8013e5c <__mcmp+0x28>
 8013e3e:	f100 0314 	add.w	r3, r0, #20
 8013e42:	3114      	adds	r1, #20
 8013e44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013e48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013e4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013e50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013e54:	42a5      	cmp	r5, r4
 8013e56:	d003      	beq.n	8013e60 <__mcmp+0x2c>
 8013e58:	d305      	bcc.n	8013e66 <__mcmp+0x32>
 8013e5a:	2201      	movs	r2, #1
 8013e5c:	4610      	mov	r0, r2
 8013e5e:	bd30      	pop	{r4, r5, pc}
 8013e60:	4283      	cmp	r3, r0
 8013e62:	d3f3      	bcc.n	8013e4c <__mcmp+0x18>
 8013e64:	e7fa      	b.n	8013e5c <__mcmp+0x28>
 8013e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e6a:	e7f7      	b.n	8013e5c <__mcmp+0x28>

08013e6c <__mdiff>:
 8013e6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e70:	460c      	mov	r4, r1
 8013e72:	4606      	mov	r6, r0
 8013e74:	4611      	mov	r1, r2
 8013e76:	4620      	mov	r0, r4
 8013e78:	4690      	mov	r8, r2
 8013e7a:	f7ff ffdb 	bl	8013e34 <__mcmp>
 8013e7e:	1e05      	subs	r5, r0, #0
 8013e80:	d110      	bne.n	8013ea4 <__mdiff+0x38>
 8013e82:	4629      	mov	r1, r5
 8013e84:	4630      	mov	r0, r6
 8013e86:	f7ff fd09 	bl	801389c <_Balloc>
 8013e8a:	b930      	cbnz	r0, 8013e9a <__mdiff+0x2e>
 8013e8c:	4b3a      	ldr	r3, [pc, #232]	; (8013f78 <__mdiff+0x10c>)
 8013e8e:	4602      	mov	r2, r0
 8013e90:	f240 2132 	movw	r1, #562	; 0x232
 8013e94:	4839      	ldr	r0, [pc, #228]	; (8013f7c <__mdiff+0x110>)
 8013e96:	f7fe faa5 	bl	80123e4 <__assert_func>
 8013e9a:	2301      	movs	r3, #1
 8013e9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013ea0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ea4:	bfa4      	itt	ge
 8013ea6:	4643      	movge	r3, r8
 8013ea8:	46a0      	movge	r8, r4
 8013eaa:	4630      	mov	r0, r6
 8013eac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013eb0:	bfa6      	itte	ge
 8013eb2:	461c      	movge	r4, r3
 8013eb4:	2500      	movge	r5, #0
 8013eb6:	2501      	movlt	r5, #1
 8013eb8:	f7ff fcf0 	bl	801389c <_Balloc>
 8013ebc:	b920      	cbnz	r0, 8013ec8 <__mdiff+0x5c>
 8013ebe:	4b2e      	ldr	r3, [pc, #184]	; (8013f78 <__mdiff+0x10c>)
 8013ec0:	4602      	mov	r2, r0
 8013ec2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013ec6:	e7e5      	b.n	8013e94 <__mdiff+0x28>
 8013ec8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013ecc:	6926      	ldr	r6, [r4, #16]
 8013ece:	60c5      	str	r5, [r0, #12]
 8013ed0:	f104 0914 	add.w	r9, r4, #20
 8013ed4:	f108 0514 	add.w	r5, r8, #20
 8013ed8:	f100 0e14 	add.w	lr, r0, #20
 8013edc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013ee0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013ee4:	f108 0210 	add.w	r2, r8, #16
 8013ee8:	46f2      	mov	sl, lr
 8013eea:	2100      	movs	r1, #0
 8013eec:	f859 3b04 	ldr.w	r3, [r9], #4
 8013ef0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013ef4:	fa1f f883 	uxth.w	r8, r3
 8013ef8:	fa11 f18b 	uxtah	r1, r1, fp
 8013efc:	0c1b      	lsrs	r3, r3, #16
 8013efe:	eba1 0808 	sub.w	r8, r1, r8
 8013f02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013f06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013f0a:	fa1f f888 	uxth.w	r8, r8
 8013f0e:	1419      	asrs	r1, r3, #16
 8013f10:	454e      	cmp	r6, r9
 8013f12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013f16:	f84a 3b04 	str.w	r3, [sl], #4
 8013f1a:	d8e7      	bhi.n	8013eec <__mdiff+0x80>
 8013f1c:	1b33      	subs	r3, r6, r4
 8013f1e:	3b15      	subs	r3, #21
 8013f20:	f023 0303 	bic.w	r3, r3, #3
 8013f24:	3304      	adds	r3, #4
 8013f26:	3415      	adds	r4, #21
 8013f28:	42a6      	cmp	r6, r4
 8013f2a:	bf38      	it	cc
 8013f2c:	2304      	movcc	r3, #4
 8013f2e:	441d      	add	r5, r3
 8013f30:	4473      	add	r3, lr
 8013f32:	469e      	mov	lr, r3
 8013f34:	462e      	mov	r6, r5
 8013f36:	4566      	cmp	r6, ip
 8013f38:	d30e      	bcc.n	8013f58 <__mdiff+0xec>
 8013f3a:	f10c 0203 	add.w	r2, ip, #3
 8013f3e:	1b52      	subs	r2, r2, r5
 8013f40:	f022 0203 	bic.w	r2, r2, #3
 8013f44:	3d03      	subs	r5, #3
 8013f46:	45ac      	cmp	ip, r5
 8013f48:	bf38      	it	cc
 8013f4a:	2200      	movcc	r2, #0
 8013f4c:	441a      	add	r2, r3
 8013f4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013f52:	b17b      	cbz	r3, 8013f74 <__mdiff+0x108>
 8013f54:	6107      	str	r7, [r0, #16]
 8013f56:	e7a3      	b.n	8013ea0 <__mdiff+0x34>
 8013f58:	f856 8b04 	ldr.w	r8, [r6], #4
 8013f5c:	fa11 f288 	uxtah	r2, r1, r8
 8013f60:	1414      	asrs	r4, r2, #16
 8013f62:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013f66:	b292      	uxth	r2, r2
 8013f68:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013f6c:	f84e 2b04 	str.w	r2, [lr], #4
 8013f70:	1421      	asrs	r1, r4, #16
 8013f72:	e7e0      	b.n	8013f36 <__mdiff+0xca>
 8013f74:	3f01      	subs	r7, #1
 8013f76:	e7ea      	b.n	8013f4e <__mdiff+0xe2>
 8013f78:	08016165 	.word	0x08016165
 8013f7c:	080161f0 	.word	0x080161f0

08013f80 <__ulp>:
 8013f80:	b082      	sub	sp, #8
 8013f82:	ed8d 0b00 	vstr	d0, [sp]
 8013f86:	9b01      	ldr	r3, [sp, #4]
 8013f88:	4912      	ldr	r1, [pc, #72]	; (8013fd4 <__ulp+0x54>)
 8013f8a:	4019      	ands	r1, r3
 8013f8c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013f90:	2900      	cmp	r1, #0
 8013f92:	dd05      	ble.n	8013fa0 <__ulp+0x20>
 8013f94:	2200      	movs	r2, #0
 8013f96:	460b      	mov	r3, r1
 8013f98:	ec43 2b10 	vmov	d0, r2, r3
 8013f9c:	b002      	add	sp, #8
 8013f9e:	4770      	bx	lr
 8013fa0:	4249      	negs	r1, r1
 8013fa2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013fa6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013faa:	f04f 0200 	mov.w	r2, #0
 8013fae:	f04f 0300 	mov.w	r3, #0
 8013fb2:	da04      	bge.n	8013fbe <__ulp+0x3e>
 8013fb4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013fb8:	fa41 f300 	asr.w	r3, r1, r0
 8013fbc:	e7ec      	b.n	8013f98 <__ulp+0x18>
 8013fbe:	f1a0 0114 	sub.w	r1, r0, #20
 8013fc2:	291e      	cmp	r1, #30
 8013fc4:	bfda      	itte	le
 8013fc6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013fca:	fa20 f101 	lsrle.w	r1, r0, r1
 8013fce:	2101      	movgt	r1, #1
 8013fd0:	460a      	mov	r2, r1
 8013fd2:	e7e1      	b.n	8013f98 <__ulp+0x18>
 8013fd4:	7ff00000 	.word	0x7ff00000

08013fd8 <__b2d>:
 8013fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fda:	6905      	ldr	r5, [r0, #16]
 8013fdc:	f100 0714 	add.w	r7, r0, #20
 8013fe0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013fe4:	1f2e      	subs	r6, r5, #4
 8013fe6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013fea:	4620      	mov	r0, r4
 8013fec:	f7ff fd48 	bl	8013a80 <__hi0bits>
 8013ff0:	f1c0 0320 	rsb	r3, r0, #32
 8013ff4:	280a      	cmp	r0, #10
 8013ff6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014074 <__b2d+0x9c>
 8013ffa:	600b      	str	r3, [r1, #0]
 8013ffc:	dc14      	bgt.n	8014028 <__b2d+0x50>
 8013ffe:	f1c0 0e0b 	rsb	lr, r0, #11
 8014002:	fa24 f10e 	lsr.w	r1, r4, lr
 8014006:	42b7      	cmp	r7, r6
 8014008:	ea41 030c 	orr.w	r3, r1, ip
 801400c:	bf34      	ite	cc
 801400e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014012:	2100      	movcs	r1, #0
 8014014:	3015      	adds	r0, #21
 8014016:	fa04 f000 	lsl.w	r0, r4, r0
 801401a:	fa21 f10e 	lsr.w	r1, r1, lr
 801401e:	ea40 0201 	orr.w	r2, r0, r1
 8014022:	ec43 2b10 	vmov	d0, r2, r3
 8014026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014028:	42b7      	cmp	r7, r6
 801402a:	bf3a      	itte	cc
 801402c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014030:	f1a5 0608 	subcc.w	r6, r5, #8
 8014034:	2100      	movcs	r1, #0
 8014036:	380b      	subs	r0, #11
 8014038:	d017      	beq.n	801406a <__b2d+0x92>
 801403a:	f1c0 0c20 	rsb	ip, r0, #32
 801403e:	fa04 f500 	lsl.w	r5, r4, r0
 8014042:	42be      	cmp	r6, r7
 8014044:	fa21 f40c 	lsr.w	r4, r1, ip
 8014048:	ea45 0504 	orr.w	r5, r5, r4
 801404c:	bf8c      	ite	hi
 801404e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014052:	2400      	movls	r4, #0
 8014054:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8014058:	fa01 f000 	lsl.w	r0, r1, r0
 801405c:	fa24 f40c 	lsr.w	r4, r4, ip
 8014060:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014064:	ea40 0204 	orr.w	r2, r0, r4
 8014068:	e7db      	b.n	8014022 <__b2d+0x4a>
 801406a:	ea44 030c 	orr.w	r3, r4, ip
 801406e:	460a      	mov	r2, r1
 8014070:	e7d7      	b.n	8014022 <__b2d+0x4a>
 8014072:	bf00      	nop
 8014074:	3ff00000 	.word	0x3ff00000

08014078 <__d2b>:
 8014078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801407c:	4689      	mov	r9, r1
 801407e:	2101      	movs	r1, #1
 8014080:	ec57 6b10 	vmov	r6, r7, d0
 8014084:	4690      	mov	r8, r2
 8014086:	f7ff fc09 	bl	801389c <_Balloc>
 801408a:	4604      	mov	r4, r0
 801408c:	b930      	cbnz	r0, 801409c <__d2b+0x24>
 801408e:	4602      	mov	r2, r0
 8014090:	4b25      	ldr	r3, [pc, #148]	; (8014128 <__d2b+0xb0>)
 8014092:	4826      	ldr	r0, [pc, #152]	; (801412c <__d2b+0xb4>)
 8014094:	f240 310a 	movw	r1, #778	; 0x30a
 8014098:	f7fe f9a4 	bl	80123e4 <__assert_func>
 801409c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80140a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80140a4:	bb35      	cbnz	r5, 80140f4 <__d2b+0x7c>
 80140a6:	2e00      	cmp	r6, #0
 80140a8:	9301      	str	r3, [sp, #4]
 80140aa:	d028      	beq.n	80140fe <__d2b+0x86>
 80140ac:	4668      	mov	r0, sp
 80140ae:	9600      	str	r6, [sp, #0]
 80140b0:	f7ff fd06 	bl	8013ac0 <__lo0bits>
 80140b4:	9900      	ldr	r1, [sp, #0]
 80140b6:	b300      	cbz	r0, 80140fa <__d2b+0x82>
 80140b8:	9a01      	ldr	r2, [sp, #4]
 80140ba:	f1c0 0320 	rsb	r3, r0, #32
 80140be:	fa02 f303 	lsl.w	r3, r2, r3
 80140c2:	430b      	orrs	r3, r1
 80140c4:	40c2      	lsrs	r2, r0
 80140c6:	6163      	str	r3, [r4, #20]
 80140c8:	9201      	str	r2, [sp, #4]
 80140ca:	9b01      	ldr	r3, [sp, #4]
 80140cc:	61a3      	str	r3, [r4, #24]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	bf14      	ite	ne
 80140d2:	2202      	movne	r2, #2
 80140d4:	2201      	moveq	r2, #1
 80140d6:	6122      	str	r2, [r4, #16]
 80140d8:	b1d5      	cbz	r5, 8014110 <__d2b+0x98>
 80140da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80140de:	4405      	add	r5, r0
 80140e0:	f8c9 5000 	str.w	r5, [r9]
 80140e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80140e8:	f8c8 0000 	str.w	r0, [r8]
 80140ec:	4620      	mov	r0, r4
 80140ee:	b003      	add	sp, #12
 80140f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80140f8:	e7d5      	b.n	80140a6 <__d2b+0x2e>
 80140fa:	6161      	str	r1, [r4, #20]
 80140fc:	e7e5      	b.n	80140ca <__d2b+0x52>
 80140fe:	a801      	add	r0, sp, #4
 8014100:	f7ff fcde 	bl	8013ac0 <__lo0bits>
 8014104:	9b01      	ldr	r3, [sp, #4]
 8014106:	6163      	str	r3, [r4, #20]
 8014108:	2201      	movs	r2, #1
 801410a:	6122      	str	r2, [r4, #16]
 801410c:	3020      	adds	r0, #32
 801410e:	e7e3      	b.n	80140d8 <__d2b+0x60>
 8014110:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014114:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014118:	f8c9 0000 	str.w	r0, [r9]
 801411c:	6918      	ldr	r0, [r3, #16]
 801411e:	f7ff fcaf 	bl	8013a80 <__hi0bits>
 8014122:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014126:	e7df      	b.n	80140e8 <__d2b+0x70>
 8014128:	08016165 	.word	0x08016165
 801412c:	080161f0 	.word	0x080161f0

08014130 <__ratio>:
 8014130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014134:	4688      	mov	r8, r1
 8014136:	4669      	mov	r1, sp
 8014138:	4681      	mov	r9, r0
 801413a:	f7ff ff4d 	bl	8013fd8 <__b2d>
 801413e:	a901      	add	r1, sp, #4
 8014140:	4640      	mov	r0, r8
 8014142:	ec55 4b10 	vmov	r4, r5, d0
 8014146:	f7ff ff47 	bl	8013fd8 <__b2d>
 801414a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801414e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014152:	eba3 0c02 	sub.w	ip, r3, r2
 8014156:	e9dd 3200 	ldrd	r3, r2, [sp]
 801415a:	1a9b      	subs	r3, r3, r2
 801415c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014160:	ec51 0b10 	vmov	r0, r1, d0
 8014164:	2b00      	cmp	r3, #0
 8014166:	bfd6      	itet	le
 8014168:	460a      	movle	r2, r1
 801416a:	462a      	movgt	r2, r5
 801416c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014170:	468b      	mov	fp, r1
 8014172:	462f      	mov	r7, r5
 8014174:	bfd4      	ite	le
 8014176:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801417a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801417e:	4620      	mov	r0, r4
 8014180:	ee10 2a10 	vmov	r2, s0
 8014184:	465b      	mov	r3, fp
 8014186:	4639      	mov	r1, r7
 8014188:	f7ec fb98 	bl	80008bc <__aeabi_ddiv>
 801418c:	ec41 0b10 	vmov	d0, r0, r1
 8014190:	b003      	add	sp, #12
 8014192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014196 <__copybits>:
 8014196:	3901      	subs	r1, #1
 8014198:	b570      	push	{r4, r5, r6, lr}
 801419a:	1149      	asrs	r1, r1, #5
 801419c:	6914      	ldr	r4, [r2, #16]
 801419e:	3101      	adds	r1, #1
 80141a0:	f102 0314 	add.w	r3, r2, #20
 80141a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80141a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80141ac:	1f05      	subs	r5, r0, #4
 80141ae:	42a3      	cmp	r3, r4
 80141b0:	d30c      	bcc.n	80141cc <__copybits+0x36>
 80141b2:	1aa3      	subs	r3, r4, r2
 80141b4:	3b11      	subs	r3, #17
 80141b6:	f023 0303 	bic.w	r3, r3, #3
 80141ba:	3211      	adds	r2, #17
 80141bc:	42a2      	cmp	r2, r4
 80141be:	bf88      	it	hi
 80141c0:	2300      	movhi	r3, #0
 80141c2:	4418      	add	r0, r3
 80141c4:	2300      	movs	r3, #0
 80141c6:	4288      	cmp	r0, r1
 80141c8:	d305      	bcc.n	80141d6 <__copybits+0x40>
 80141ca:	bd70      	pop	{r4, r5, r6, pc}
 80141cc:	f853 6b04 	ldr.w	r6, [r3], #4
 80141d0:	f845 6f04 	str.w	r6, [r5, #4]!
 80141d4:	e7eb      	b.n	80141ae <__copybits+0x18>
 80141d6:	f840 3b04 	str.w	r3, [r0], #4
 80141da:	e7f4      	b.n	80141c6 <__copybits+0x30>

080141dc <__any_on>:
 80141dc:	f100 0214 	add.w	r2, r0, #20
 80141e0:	6900      	ldr	r0, [r0, #16]
 80141e2:	114b      	asrs	r3, r1, #5
 80141e4:	4298      	cmp	r0, r3
 80141e6:	b510      	push	{r4, lr}
 80141e8:	db11      	blt.n	801420e <__any_on+0x32>
 80141ea:	dd0a      	ble.n	8014202 <__any_on+0x26>
 80141ec:	f011 011f 	ands.w	r1, r1, #31
 80141f0:	d007      	beq.n	8014202 <__any_on+0x26>
 80141f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80141f6:	fa24 f001 	lsr.w	r0, r4, r1
 80141fa:	fa00 f101 	lsl.w	r1, r0, r1
 80141fe:	428c      	cmp	r4, r1
 8014200:	d10b      	bne.n	801421a <__any_on+0x3e>
 8014202:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014206:	4293      	cmp	r3, r2
 8014208:	d803      	bhi.n	8014212 <__any_on+0x36>
 801420a:	2000      	movs	r0, #0
 801420c:	bd10      	pop	{r4, pc}
 801420e:	4603      	mov	r3, r0
 8014210:	e7f7      	b.n	8014202 <__any_on+0x26>
 8014212:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014216:	2900      	cmp	r1, #0
 8014218:	d0f5      	beq.n	8014206 <__any_on+0x2a>
 801421a:	2001      	movs	r0, #1
 801421c:	e7f6      	b.n	801420c <__any_on+0x30>

0801421e <_calloc_r>:
 801421e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014220:	fba1 2402 	umull	r2, r4, r1, r2
 8014224:	b94c      	cbnz	r4, 801423a <_calloc_r+0x1c>
 8014226:	4611      	mov	r1, r2
 8014228:	9201      	str	r2, [sp, #4]
 801422a:	f7fc fa85 	bl	8010738 <_malloc_r>
 801422e:	9a01      	ldr	r2, [sp, #4]
 8014230:	4605      	mov	r5, r0
 8014232:	b930      	cbnz	r0, 8014242 <_calloc_r+0x24>
 8014234:	4628      	mov	r0, r5
 8014236:	b003      	add	sp, #12
 8014238:	bd30      	pop	{r4, r5, pc}
 801423a:	220c      	movs	r2, #12
 801423c:	6002      	str	r2, [r0, #0]
 801423e:	2500      	movs	r5, #0
 8014240:	e7f8      	b.n	8014234 <_calloc_r+0x16>
 8014242:	4621      	mov	r1, r4
 8014244:	f7fc fa04 	bl	8010650 <memset>
 8014248:	e7f4      	b.n	8014234 <_calloc_r+0x16>

0801424a <__ssputs_r>:
 801424a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801424e:	688e      	ldr	r6, [r1, #8]
 8014250:	429e      	cmp	r6, r3
 8014252:	4682      	mov	sl, r0
 8014254:	460c      	mov	r4, r1
 8014256:	4690      	mov	r8, r2
 8014258:	461f      	mov	r7, r3
 801425a:	d838      	bhi.n	80142ce <__ssputs_r+0x84>
 801425c:	898a      	ldrh	r2, [r1, #12]
 801425e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014262:	d032      	beq.n	80142ca <__ssputs_r+0x80>
 8014264:	6825      	ldr	r5, [r4, #0]
 8014266:	6909      	ldr	r1, [r1, #16]
 8014268:	eba5 0901 	sub.w	r9, r5, r1
 801426c:	6965      	ldr	r5, [r4, #20]
 801426e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014272:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014276:	3301      	adds	r3, #1
 8014278:	444b      	add	r3, r9
 801427a:	106d      	asrs	r5, r5, #1
 801427c:	429d      	cmp	r5, r3
 801427e:	bf38      	it	cc
 8014280:	461d      	movcc	r5, r3
 8014282:	0553      	lsls	r3, r2, #21
 8014284:	d531      	bpl.n	80142ea <__ssputs_r+0xa0>
 8014286:	4629      	mov	r1, r5
 8014288:	f7fc fa56 	bl	8010738 <_malloc_r>
 801428c:	4606      	mov	r6, r0
 801428e:	b950      	cbnz	r0, 80142a6 <__ssputs_r+0x5c>
 8014290:	230c      	movs	r3, #12
 8014292:	f8ca 3000 	str.w	r3, [sl]
 8014296:	89a3      	ldrh	r3, [r4, #12]
 8014298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801429c:	81a3      	strh	r3, [r4, #12]
 801429e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80142a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142a6:	6921      	ldr	r1, [r4, #16]
 80142a8:	464a      	mov	r2, r9
 80142aa:	f7ff fadd 	bl	8013868 <memcpy>
 80142ae:	89a3      	ldrh	r3, [r4, #12]
 80142b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80142b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80142b8:	81a3      	strh	r3, [r4, #12]
 80142ba:	6126      	str	r6, [r4, #16]
 80142bc:	6165      	str	r5, [r4, #20]
 80142be:	444e      	add	r6, r9
 80142c0:	eba5 0509 	sub.w	r5, r5, r9
 80142c4:	6026      	str	r6, [r4, #0]
 80142c6:	60a5      	str	r5, [r4, #8]
 80142c8:	463e      	mov	r6, r7
 80142ca:	42be      	cmp	r6, r7
 80142cc:	d900      	bls.n	80142d0 <__ssputs_r+0x86>
 80142ce:	463e      	mov	r6, r7
 80142d0:	6820      	ldr	r0, [r4, #0]
 80142d2:	4632      	mov	r2, r6
 80142d4:	4641      	mov	r1, r8
 80142d6:	f000 fd81 	bl	8014ddc <memmove>
 80142da:	68a3      	ldr	r3, [r4, #8]
 80142dc:	1b9b      	subs	r3, r3, r6
 80142de:	60a3      	str	r3, [r4, #8]
 80142e0:	6823      	ldr	r3, [r4, #0]
 80142e2:	4433      	add	r3, r6
 80142e4:	6023      	str	r3, [r4, #0]
 80142e6:	2000      	movs	r0, #0
 80142e8:	e7db      	b.n	80142a2 <__ssputs_r+0x58>
 80142ea:	462a      	mov	r2, r5
 80142ec:	f000 fd90 	bl	8014e10 <_realloc_r>
 80142f0:	4606      	mov	r6, r0
 80142f2:	2800      	cmp	r0, #0
 80142f4:	d1e1      	bne.n	80142ba <__ssputs_r+0x70>
 80142f6:	6921      	ldr	r1, [r4, #16]
 80142f8:	4650      	mov	r0, sl
 80142fa:	f7fc f9b1 	bl	8010660 <_free_r>
 80142fe:	e7c7      	b.n	8014290 <__ssputs_r+0x46>

08014300 <_svfiprintf_r>:
 8014300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014304:	4698      	mov	r8, r3
 8014306:	898b      	ldrh	r3, [r1, #12]
 8014308:	061b      	lsls	r3, r3, #24
 801430a:	b09d      	sub	sp, #116	; 0x74
 801430c:	4607      	mov	r7, r0
 801430e:	460d      	mov	r5, r1
 8014310:	4614      	mov	r4, r2
 8014312:	d50e      	bpl.n	8014332 <_svfiprintf_r+0x32>
 8014314:	690b      	ldr	r3, [r1, #16]
 8014316:	b963      	cbnz	r3, 8014332 <_svfiprintf_r+0x32>
 8014318:	2140      	movs	r1, #64	; 0x40
 801431a:	f7fc fa0d 	bl	8010738 <_malloc_r>
 801431e:	6028      	str	r0, [r5, #0]
 8014320:	6128      	str	r0, [r5, #16]
 8014322:	b920      	cbnz	r0, 801432e <_svfiprintf_r+0x2e>
 8014324:	230c      	movs	r3, #12
 8014326:	603b      	str	r3, [r7, #0]
 8014328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801432c:	e0d1      	b.n	80144d2 <_svfiprintf_r+0x1d2>
 801432e:	2340      	movs	r3, #64	; 0x40
 8014330:	616b      	str	r3, [r5, #20]
 8014332:	2300      	movs	r3, #0
 8014334:	9309      	str	r3, [sp, #36]	; 0x24
 8014336:	2320      	movs	r3, #32
 8014338:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801433c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014340:	2330      	movs	r3, #48	; 0x30
 8014342:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80144ec <_svfiprintf_r+0x1ec>
 8014346:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801434a:	f04f 0901 	mov.w	r9, #1
 801434e:	4623      	mov	r3, r4
 8014350:	469a      	mov	sl, r3
 8014352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014356:	b10a      	cbz	r2, 801435c <_svfiprintf_r+0x5c>
 8014358:	2a25      	cmp	r2, #37	; 0x25
 801435a:	d1f9      	bne.n	8014350 <_svfiprintf_r+0x50>
 801435c:	ebba 0b04 	subs.w	fp, sl, r4
 8014360:	d00b      	beq.n	801437a <_svfiprintf_r+0x7a>
 8014362:	465b      	mov	r3, fp
 8014364:	4622      	mov	r2, r4
 8014366:	4629      	mov	r1, r5
 8014368:	4638      	mov	r0, r7
 801436a:	f7ff ff6e 	bl	801424a <__ssputs_r>
 801436e:	3001      	adds	r0, #1
 8014370:	f000 80aa 	beq.w	80144c8 <_svfiprintf_r+0x1c8>
 8014374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014376:	445a      	add	r2, fp
 8014378:	9209      	str	r2, [sp, #36]	; 0x24
 801437a:	f89a 3000 	ldrb.w	r3, [sl]
 801437e:	2b00      	cmp	r3, #0
 8014380:	f000 80a2 	beq.w	80144c8 <_svfiprintf_r+0x1c8>
 8014384:	2300      	movs	r3, #0
 8014386:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801438a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801438e:	f10a 0a01 	add.w	sl, sl, #1
 8014392:	9304      	str	r3, [sp, #16]
 8014394:	9307      	str	r3, [sp, #28]
 8014396:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801439a:	931a      	str	r3, [sp, #104]	; 0x68
 801439c:	4654      	mov	r4, sl
 801439e:	2205      	movs	r2, #5
 80143a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143a4:	4851      	ldr	r0, [pc, #324]	; (80144ec <_svfiprintf_r+0x1ec>)
 80143a6:	f7eb ff53 	bl	8000250 <memchr>
 80143aa:	9a04      	ldr	r2, [sp, #16]
 80143ac:	b9d8      	cbnz	r0, 80143e6 <_svfiprintf_r+0xe6>
 80143ae:	06d0      	lsls	r0, r2, #27
 80143b0:	bf44      	itt	mi
 80143b2:	2320      	movmi	r3, #32
 80143b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143b8:	0711      	lsls	r1, r2, #28
 80143ba:	bf44      	itt	mi
 80143bc:	232b      	movmi	r3, #43	; 0x2b
 80143be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143c2:	f89a 3000 	ldrb.w	r3, [sl]
 80143c6:	2b2a      	cmp	r3, #42	; 0x2a
 80143c8:	d015      	beq.n	80143f6 <_svfiprintf_r+0xf6>
 80143ca:	9a07      	ldr	r2, [sp, #28]
 80143cc:	4654      	mov	r4, sl
 80143ce:	2000      	movs	r0, #0
 80143d0:	f04f 0c0a 	mov.w	ip, #10
 80143d4:	4621      	mov	r1, r4
 80143d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80143da:	3b30      	subs	r3, #48	; 0x30
 80143dc:	2b09      	cmp	r3, #9
 80143de:	d94e      	bls.n	801447e <_svfiprintf_r+0x17e>
 80143e0:	b1b0      	cbz	r0, 8014410 <_svfiprintf_r+0x110>
 80143e2:	9207      	str	r2, [sp, #28]
 80143e4:	e014      	b.n	8014410 <_svfiprintf_r+0x110>
 80143e6:	eba0 0308 	sub.w	r3, r0, r8
 80143ea:	fa09 f303 	lsl.w	r3, r9, r3
 80143ee:	4313      	orrs	r3, r2
 80143f0:	9304      	str	r3, [sp, #16]
 80143f2:	46a2      	mov	sl, r4
 80143f4:	e7d2      	b.n	801439c <_svfiprintf_r+0x9c>
 80143f6:	9b03      	ldr	r3, [sp, #12]
 80143f8:	1d19      	adds	r1, r3, #4
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	9103      	str	r1, [sp, #12]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	bfbb      	ittet	lt
 8014402:	425b      	neglt	r3, r3
 8014404:	f042 0202 	orrlt.w	r2, r2, #2
 8014408:	9307      	strge	r3, [sp, #28]
 801440a:	9307      	strlt	r3, [sp, #28]
 801440c:	bfb8      	it	lt
 801440e:	9204      	strlt	r2, [sp, #16]
 8014410:	7823      	ldrb	r3, [r4, #0]
 8014412:	2b2e      	cmp	r3, #46	; 0x2e
 8014414:	d10c      	bne.n	8014430 <_svfiprintf_r+0x130>
 8014416:	7863      	ldrb	r3, [r4, #1]
 8014418:	2b2a      	cmp	r3, #42	; 0x2a
 801441a:	d135      	bne.n	8014488 <_svfiprintf_r+0x188>
 801441c:	9b03      	ldr	r3, [sp, #12]
 801441e:	1d1a      	adds	r2, r3, #4
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	9203      	str	r2, [sp, #12]
 8014424:	2b00      	cmp	r3, #0
 8014426:	bfb8      	it	lt
 8014428:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801442c:	3402      	adds	r4, #2
 801442e:	9305      	str	r3, [sp, #20]
 8014430:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80144fc <_svfiprintf_r+0x1fc>
 8014434:	7821      	ldrb	r1, [r4, #0]
 8014436:	2203      	movs	r2, #3
 8014438:	4650      	mov	r0, sl
 801443a:	f7eb ff09 	bl	8000250 <memchr>
 801443e:	b140      	cbz	r0, 8014452 <_svfiprintf_r+0x152>
 8014440:	2340      	movs	r3, #64	; 0x40
 8014442:	eba0 000a 	sub.w	r0, r0, sl
 8014446:	fa03 f000 	lsl.w	r0, r3, r0
 801444a:	9b04      	ldr	r3, [sp, #16]
 801444c:	4303      	orrs	r3, r0
 801444e:	3401      	adds	r4, #1
 8014450:	9304      	str	r3, [sp, #16]
 8014452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014456:	4826      	ldr	r0, [pc, #152]	; (80144f0 <_svfiprintf_r+0x1f0>)
 8014458:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801445c:	2206      	movs	r2, #6
 801445e:	f7eb fef7 	bl	8000250 <memchr>
 8014462:	2800      	cmp	r0, #0
 8014464:	d038      	beq.n	80144d8 <_svfiprintf_r+0x1d8>
 8014466:	4b23      	ldr	r3, [pc, #140]	; (80144f4 <_svfiprintf_r+0x1f4>)
 8014468:	bb1b      	cbnz	r3, 80144b2 <_svfiprintf_r+0x1b2>
 801446a:	9b03      	ldr	r3, [sp, #12]
 801446c:	3307      	adds	r3, #7
 801446e:	f023 0307 	bic.w	r3, r3, #7
 8014472:	3308      	adds	r3, #8
 8014474:	9303      	str	r3, [sp, #12]
 8014476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014478:	4433      	add	r3, r6
 801447a:	9309      	str	r3, [sp, #36]	; 0x24
 801447c:	e767      	b.n	801434e <_svfiprintf_r+0x4e>
 801447e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014482:	460c      	mov	r4, r1
 8014484:	2001      	movs	r0, #1
 8014486:	e7a5      	b.n	80143d4 <_svfiprintf_r+0xd4>
 8014488:	2300      	movs	r3, #0
 801448a:	3401      	adds	r4, #1
 801448c:	9305      	str	r3, [sp, #20]
 801448e:	4619      	mov	r1, r3
 8014490:	f04f 0c0a 	mov.w	ip, #10
 8014494:	4620      	mov	r0, r4
 8014496:	f810 2b01 	ldrb.w	r2, [r0], #1
 801449a:	3a30      	subs	r2, #48	; 0x30
 801449c:	2a09      	cmp	r2, #9
 801449e:	d903      	bls.n	80144a8 <_svfiprintf_r+0x1a8>
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d0c5      	beq.n	8014430 <_svfiprintf_r+0x130>
 80144a4:	9105      	str	r1, [sp, #20]
 80144a6:	e7c3      	b.n	8014430 <_svfiprintf_r+0x130>
 80144a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80144ac:	4604      	mov	r4, r0
 80144ae:	2301      	movs	r3, #1
 80144b0:	e7f0      	b.n	8014494 <_svfiprintf_r+0x194>
 80144b2:	ab03      	add	r3, sp, #12
 80144b4:	9300      	str	r3, [sp, #0]
 80144b6:	462a      	mov	r2, r5
 80144b8:	4b0f      	ldr	r3, [pc, #60]	; (80144f8 <_svfiprintf_r+0x1f8>)
 80144ba:	a904      	add	r1, sp, #16
 80144bc:	4638      	mov	r0, r7
 80144be:	f7fc fa4f 	bl	8010960 <_printf_float>
 80144c2:	1c42      	adds	r2, r0, #1
 80144c4:	4606      	mov	r6, r0
 80144c6:	d1d6      	bne.n	8014476 <_svfiprintf_r+0x176>
 80144c8:	89ab      	ldrh	r3, [r5, #12]
 80144ca:	065b      	lsls	r3, r3, #25
 80144cc:	f53f af2c 	bmi.w	8014328 <_svfiprintf_r+0x28>
 80144d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80144d2:	b01d      	add	sp, #116	; 0x74
 80144d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144d8:	ab03      	add	r3, sp, #12
 80144da:	9300      	str	r3, [sp, #0]
 80144dc:	462a      	mov	r2, r5
 80144de:	4b06      	ldr	r3, [pc, #24]	; (80144f8 <_svfiprintf_r+0x1f8>)
 80144e0:	a904      	add	r1, sp, #16
 80144e2:	4638      	mov	r0, r7
 80144e4:	f7fc fce0 	bl	8010ea8 <_printf_i>
 80144e8:	e7eb      	b.n	80144c2 <_svfiprintf_r+0x1c2>
 80144ea:	bf00      	nop
 80144ec:	0801634c 	.word	0x0801634c
 80144f0:	08016356 	.word	0x08016356
 80144f4:	08010961 	.word	0x08010961
 80144f8:	0801424b 	.word	0x0801424b
 80144fc:	08016352 	.word	0x08016352

08014500 <__sfputc_r>:
 8014500:	6893      	ldr	r3, [r2, #8]
 8014502:	3b01      	subs	r3, #1
 8014504:	2b00      	cmp	r3, #0
 8014506:	b410      	push	{r4}
 8014508:	6093      	str	r3, [r2, #8]
 801450a:	da08      	bge.n	801451e <__sfputc_r+0x1e>
 801450c:	6994      	ldr	r4, [r2, #24]
 801450e:	42a3      	cmp	r3, r4
 8014510:	db01      	blt.n	8014516 <__sfputc_r+0x16>
 8014512:	290a      	cmp	r1, #10
 8014514:	d103      	bne.n	801451e <__sfputc_r+0x1e>
 8014516:	f85d 4b04 	ldr.w	r4, [sp], #4
 801451a:	f000 b969 	b.w	80147f0 <__swbuf_r>
 801451e:	6813      	ldr	r3, [r2, #0]
 8014520:	1c58      	adds	r0, r3, #1
 8014522:	6010      	str	r0, [r2, #0]
 8014524:	7019      	strb	r1, [r3, #0]
 8014526:	4608      	mov	r0, r1
 8014528:	f85d 4b04 	ldr.w	r4, [sp], #4
 801452c:	4770      	bx	lr

0801452e <__sfputs_r>:
 801452e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014530:	4606      	mov	r6, r0
 8014532:	460f      	mov	r7, r1
 8014534:	4614      	mov	r4, r2
 8014536:	18d5      	adds	r5, r2, r3
 8014538:	42ac      	cmp	r4, r5
 801453a:	d101      	bne.n	8014540 <__sfputs_r+0x12>
 801453c:	2000      	movs	r0, #0
 801453e:	e007      	b.n	8014550 <__sfputs_r+0x22>
 8014540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014544:	463a      	mov	r2, r7
 8014546:	4630      	mov	r0, r6
 8014548:	f7ff ffda 	bl	8014500 <__sfputc_r>
 801454c:	1c43      	adds	r3, r0, #1
 801454e:	d1f3      	bne.n	8014538 <__sfputs_r+0xa>
 8014550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014554 <_vfiprintf_r>:
 8014554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014558:	460d      	mov	r5, r1
 801455a:	b09d      	sub	sp, #116	; 0x74
 801455c:	4614      	mov	r4, r2
 801455e:	4698      	mov	r8, r3
 8014560:	4606      	mov	r6, r0
 8014562:	b118      	cbz	r0, 801456c <_vfiprintf_r+0x18>
 8014564:	6983      	ldr	r3, [r0, #24]
 8014566:	b90b      	cbnz	r3, 801456c <_vfiprintf_r+0x18>
 8014568:	f000 fb32 	bl	8014bd0 <__sinit>
 801456c:	4b89      	ldr	r3, [pc, #548]	; (8014794 <_vfiprintf_r+0x240>)
 801456e:	429d      	cmp	r5, r3
 8014570:	d11b      	bne.n	80145aa <_vfiprintf_r+0x56>
 8014572:	6875      	ldr	r5, [r6, #4]
 8014574:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014576:	07d9      	lsls	r1, r3, #31
 8014578:	d405      	bmi.n	8014586 <_vfiprintf_r+0x32>
 801457a:	89ab      	ldrh	r3, [r5, #12]
 801457c:	059a      	lsls	r2, r3, #22
 801457e:	d402      	bmi.n	8014586 <_vfiprintf_r+0x32>
 8014580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014582:	f000 fbc3 	bl	8014d0c <__retarget_lock_acquire_recursive>
 8014586:	89ab      	ldrh	r3, [r5, #12]
 8014588:	071b      	lsls	r3, r3, #28
 801458a:	d501      	bpl.n	8014590 <_vfiprintf_r+0x3c>
 801458c:	692b      	ldr	r3, [r5, #16]
 801458e:	b9eb      	cbnz	r3, 80145cc <_vfiprintf_r+0x78>
 8014590:	4629      	mov	r1, r5
 8014592:	4630      	mov	r0, r6
 8014594:	f000 f98c 	bl	80148b0 <__swsetup_r>
 8014598:	b1c0      	cbz	r0, 80145cc <_vfiprintf_r+0x78>
 801459a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801459c:	07dc      	lsls	r4, r3, #31
 801459e:	d50e      	bpl.n	80145be <_vfiprintf_r+0x6a>
 80145a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80145a4:	b01d      	add	sp, #116	; 0x74
 80145a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145aa:	4b7b      	ldr	r3, [pc, #492]	; (8014798 <_vfiprintf_r+0x244>)
 80145ac:	429d      	cmp	r5, r3
 80145ae:	d101      	bne.n	80145b4 <_vfiprintf_r+0x60>
 80145b0:	68b5      	ldr	r5, [r6, #8]
 80145b2:	e7df      	b.n	8014574 <_vfiprintf_r+0x20>
 80145b4:	4b79      	ldr	r3, [pc, #484]	; (801479c <_vfiprintf_r+0x248>)
 80145b6:	429d      	cmp	r5, r3
 80145b8:	bf08      	it	eq
 80145ba:	68f5      	ldreq	r5, [r6, #12]
 80145bc:	e7da      	b.n	8014574 <_vfiprintf_r+0x20>
 80145be:	89ab      	ldrh	r3, [r5, #12]
 80145c0:	0598      	lsls	r0, r3, #22
 80145c2:	d4ed      	bmi.n	80145a0 <_vfiprintf_r+0x4c>
 80145c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80145c6:	f000 fba2 	bl	8014d0e <__retarget_lock_release_recursive>
 80145ca:	e7e9      	b.n	80145a0 <_vfiprintf_r+0x4c>
 80145cc:	2300      	movs	r3, #0
 80145ce:	9309      	str	r3, [sp, #36]	; 0x24
 80145d0:	2320      	movs	r3, #32
 80145d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80145d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80145da:	2330      	movs	r3, #48	; 0x30
 80145dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80147a0 <_vfiprintf_r+0x24c>
 80145e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80145e4:	f04f 0901 	mov.w	r9, #1
 80145e8:	4623      	mov	r3, r4
 80145ea:	469a      	mov	sl, r3
 80145ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80145f0:	b10a      	cbz	r2, 80145f6 <_vfiprintf_r+0xa2>
 80145f2:	2a25      	cmp	r2, #37	; 0x25
 80145f4:	d1f9      	bne.n	80145ea <_vfiprintf_r+0x96>
 80145f6:	ebba 0b04 	subs.w	fp, sl, r4
 80145fa:	d00b      	beq.n	8014614 <_vfiprintf_r+0xc0>
 80145fc:	465b      	mov	r3, fp
 80145fe:	4622      	mov	r2, r4
 8014600:	4629      	mov	r1, r5
 8014602:	4630      	mov	r0, r6
 8014604:	f7ff ff93 	bl	801452e <__sfputs_r>
 8014608:	3001      	adds	r0, #1
 801460a:	f000 80aa 	beq.w	8014762 <_vfiprintf_r+0x20e>
 801460e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014610:	445a      	add	r2, fp
 8014612:	9209      	str	r2, [sp, #36]	; 0x24
 8014614:	f89a 3000 	ldrb.w	r3, [sl]
 8014618:	2b00      	cmp	r3, #0
 801461a:	f000 80a2 	beq.w	8014762 <_vfiprintf_r+0x20e>
 801461e:	2300      	movs	r3, #0
 8014620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014628:	f10a 0a01 	add.w	sl, sl, #1
 801462c:	9304      	str	r3, [sp, #16]
 801462e:	9307      	str	r3, [sp, #28]
 8014630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014634:	931a      	str	r3, [sp, #104]	; 0x68
 8014636:	4654      	mov	r4, sl
 8014638:	2205      	movs	r2, #5
 801463a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801463e:	4858      	ldr	r0, [pc, #352]	; (80147a0 <_vfiprintf_r+0x24c>)
 8014640:	f7eb fe06 	bl	8000250 <memchr>
 8014644:	9a04      	ldr	r2, [sp, #16]
 8014646:	b9d8      	cbnz	r0, 8014680 <_vfiprintf_r+0x12c>
 8014648:	06d1      	lsls	r1, r2, #27
 801464a:	bf44      	itt	mi
 801464c:	2320      	movmi	r3, #32
 801464e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014652:	0713      	lsls	r3, r2, #28
 8014654:	bf44      	itt	mi
 8014656:	232b      	movmi	r3, #43	; 0x2b
 8014658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801465c:	f89a 3000 	ldrb.w	r3, [sl]
 8014660:	2b2a      	cmp	r3, #42	; 0x2a
 8014662:	d015      	beq.n	8014690 <_vfiprintf_r+0x13c>
 8014664:	9a07      	ldr	r2, [sp, #28]
 8014666:	4654      	mov	r4, sl
 8014668:	2000      	movs	r0, #0
 801466a:	f04f 0c0a 	mov.w	ip, #10
 801466e:	4621      	mov	r1, r4
 8014670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014674:	3b30      	subs	r3, #48	; 0x30
 8014676:	2b09      	cmp	r3, #9
 8014678:	d94e      	bls.n	8014718 <_vfiprintf_r+0x1c4>
 801467a:	b1b0      	cbz	r0, 80146aa <_vfiprintf_r+0x156>
 801467c:	9207      	str	r2, [sp, #28]
 801467e:	e014      	b.n	80146aa <_vfiprintf_r+0x156>
 8014680:	eba0 0308 	sub.w	r3, r0, r8
 8014684:	fa09 f303 	lsl.w	r3, r9, r3
 8014688:	4313      	orrs	r3, r2
 801468a:	9304      	str	r3, [sp, #16]
 801468c:	46a2      	mov	sl, r4
 801468e:	e7d2      	b.n	8014636 <_vfiprintf_r+0xe2>
 8014690:	9b03      	ldr	r3, [sp, #12]
 8014692:	1d19      	adds	r1, r3, #4
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	9103      	str	r1, [sp, #12]
 8014698:	2b00      	cmp	r3, #0
 801469a:	bfbb      	ittet	lt
 801469c:	425b      	neglt	r3, r3
 801469e:	f042 0202 	orrlt.w	r2, r2, #2
 80146a2:	9307      	strge	r3, [sp, #28]
 80146a4:	9307      	strlt	r3, [sp, #28]
 80146a6:	bfb8      	it	lt
 80146a8:	9204      	strlt	r2, [sp, #16]
 80146aa:	7823      	ldrb	r3, [r4, #0]
 80146ac:	2b2e      	cmp	r3, #46	; 0x2e
 80146ae:	d10c      	bne.n	80146ca <_vfiprintf_r+0x176>
 80146b0:	7863      	ldrb	r3, [r4, #1]
 80146b2:	2b2a      	cmp	r3, #42	; 0x2a
 80146b4:	d135      	bne.n	8014722 <_vfiprintf_r+0x1ce>
 80146b6:	9b03      	ldr	r3, [sp, #12]
 80146b8:	1d1a      	adds	r2, r3, #4
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	9203      	str	r2, [sp, #12]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	bfb8      	it	lt
 80146c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80146c6:	3402      	adds	r4, #2
 80146c8:	9305      	str	r3, [sp, #20]
 80146ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80147b0 <_vfiprintf_r+0x25c>
 80146ce:	7821      	ldrb	r1, [r4, #0]
 80146d0:	2203      	movs	r2, #3
 80146d2:	4650      	mov	r0, sl
 80146d4:	f7eb fdbc 	bl	8000250 <memchr>
 80146d8:	b140      	cbz	r0, 80146ec <_vfiprintf_r+0x198>
 80146da:	2340      	movs	r3, #64	; 0x40
 80146dc:	eba0 000a 	sub.w	r0, r0, sl
 80146e0:	fa03 f000 	lsl.w	r0, r3, r0
 80146e4:	9b04      	ldr	r3, [sp, #16]
 80146e6:	4303      	orrs	r3, r0
 80146e8:	3401      	adds	r4, #1
 80146ea:	9304      	str	r3, [sp, #16]
 80146ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146f0:	482c      	ldr	r0, [pc, #176]	; (80147a4 <_vfiprintf_r+0x250>)
 80146f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80146f6:	2206      	movs	r2, #6
 80146f8:	f7eb fdaa 	bl	8000250 <memchr>
 80146fc:	2800      	cmp	r0, #0
 80146fe:	d03f      	beq.n	8014780 <_vfiprintf_r+0x22c>
 8014700:	4b29      	ldr	r3, [pc, #164]	; (80147a8 <_vfiprintf_r+0x254>)
 8014702:	bb1b      	cbnz	r3, 801474c <_vfiprintf_r+0x1f8>
 8014704:	9b03      	ldr	r3, [sp, #12]
 8014706:	3307      	adds	r3, #7
 8014708:	f023 0307 	bic.w	r3, r3, #7
 801470c:	3308      	adds	r3, #8
 801470e:	9303      	str	r3, [sp, #12]
 8014710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014712:	443b      	add	r3, r7
 8014714:	9309      	str	r3, [sp, #36]	; 0x24
 8014716:	e767      	b.n	80145e8 <_vfiprintf_r+0x94>
 8014718:	fb0c 3202 	mla	r2, ip, r2, r3
 801471c:	460c      	mov	r4, r1
 801471e:	2001      	movs	r0, #1
 8014720:	e7a5      	b.n	801466e <_vfiprintf_r+0x11a>
 8014722:	2300      	movs	r3, #0
 8014724:	3401      	adds	r4, #1
 8014726:	9305      	str	r3, [sp, #20]
 8014728:	4619      	mov	r1, r3
 801472a:	f04f 0c0a 	mov.w	ip, #10
 801472e:	4620      	mov	r0, r4
 8014730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014734:	3a30      	subs	r2, #48	; 0x30
 8014736:	2a09      	cmp	r2, #9
 8014738:	d903      	bls.n	8014742 <_vfiprintf_r+0x1ee>
 801473a:	2b00      	cmp	r3, #0
 801473c:	d0c5      	beq.n	80146ca <_vfiprintf_r+0x176>
 801473e:	9105      	str	r1, [sp, #20]
 8014740:	e7c3      	b.n	80146ca <_vfiprintf_r+0x176>
 8014742:	fb0c 2101 	mla	r1, ip, r1, r2
 8014746:	4604      	mov	r4, r0
 8014748:	2301      	movs	r3, #1
 801474a:	e7f0      	b.n	801472e <_vfiprintf_r+0x1da>
 801474c:	ab03      	add	r3, sp, #12
 801474e:	9300      	str	r3, [sp, #0]
 8014750:	462a      	mov	r2, r5
 8014752:	4b16      	ldr	r3, [pc, #88]	; (80147ac <_vfiprintf_r+0x258>)
 8014754:	a904      	add	r1, sp, #16
 8014756:	4630      	mov	r0, r6
 8014758:	f7fc f902 	bl	8010960 <_printf_float>
 801475c:	4607      	mov	r7, r0
 801475e:	1c78      	adds	r0, r7, #1
 8014760:	d1d6      	bne.n	8014710 <_vfiprintf_r+0x1bc>
 8014762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014764:	07d9      	lsls	r1, r3, #31
 8014766:	d405      	bmi.n	8014774 <_vfiprintf_r+0x220>
 8014768:	89ab      	ldrh	r3, [r5, #12]
 801476a:	059a      	lsls	r2, r3, #22
 801476c:	d402      	bmi.n	8014774 <_vfiprintf_r+0x220>
 801476e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014770:	f000 facd 	bl	8014d0e <__retarget_lock_release_recursive>
 8014774:	89ab      	ldrh	r3, [r5, #12]
 8014776:	065b      	lsls	r3, r3, #25
 8014778:	f53f af12 	bmi.w	80145a0 <_vfiprintf_r+0x4c>
 801477c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801477e:	e711      	b.n	80145a4 <_vfiprintf_r+0x50>
 8014780:	ab03      	add	r3, sp, #12
 8014782:	9300      	str	r3, [sp, #0]
 8014784:	462a      	mov	r2, r5
 8014786:	4b09      	ldr	r3, [pc, #36]	; (80147ac <_vfiprintf_r+0x258>)
 8014788:	a904      	add	r1, sp, #16
 801478a:	4630      	mov	r0, r6
 801478c:	f7fc fb8c 	bl	8010ea8 <_printf_i>
 8014790:	e7e4      	b.n	801475c <_vfiprintf_r+0x208>
 8014792:	bf00      	nop
 8014794:	08016380 	.word	0x08016380
 8014798:	080163a0 	.word	0x080163a0
 801479c:	08016360 	.word	0x08016360
 80147a0:	0801634c 	.word	0x0801634c
 80147a4:	08016356 	.word	0x08016356
 80147a8:	08010961 	.word	0x08010961
 80147ac:	0801452f 	.word	0x0801452f
 80147b0:	08016352 	.word	0x08016352
 80147b4:	00000000 	.word	0x00000000

080147b8 <nan>:
 80147b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80147c0 <nan+0x8>
 80147bc:	4770      	bx	lr
 80147be:	bf00      	nop
 80147c0:	00000000 	.word	0x00000000
 80147c4:	7ff80000 	.word	0x7ff80000

080147c8 <strncmp>:
 80147c8:	b510      	push	{r4, lr}
 80147ca:	b17a      	cbz	r2, 80147ec <strncmp+0x24>
 80147cc:	4603      	mov	r3, r0
 80147ce:	3901      	subs	r1, #1
 80147d0:	1884      	adds	r4, r0, r2
 80147d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80147d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80147da:	4290      	cmp	r0, r2
 80147dc:	d101      	bne.n	80147e2 <strncmp+0x1a>
 80147de:	42a3      	cmp	r3, r4
 80147e0:	d101      	bne.n	80147e6 <strncmp+0x1e>
 80147e2:	1a80      	subs	r0, r0, r2
 80147e4:	bd10      	pop	{r4, pc}
 80147e6:	2800      	cmp	r0, #0
 80147e8:	d1f3      	bne.n	80147d2 <strncmp+0xa>
 80147ea:	e7fa      	b.n	80147e2 <strncmp+0x1a>
 80147ec:	4610      	mov	r0, r2
 80147ee:	e7f9      	b.n	80147e4 <strncmp+0x1c>

080147f0 <__swbuf_r>:
 80147f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147f2:	460e      	mov	r6, r1
 80147f4:	4614      	mov	r4, r2
 80147f6:	4605      	mov	r5, r0
 80147f8:	b118      	cbz	r0, 8014802 <__swbuf_r+0x12>
 80147fa:	6983      	ldr	r3, [r0, #24]
 80147fc:	b90b      	cbnz	r3, 8014802 <__swbuf_r+0x12>
 80147fe:	f000 f9e7 	bl	8014bd0 <__sinit>
 8014802:	4b21      	ldr	r3, [pc, #132]	; (8014888 <__swbuf_r+0x98>)
 8014804:	429c      	cmp	r4, r3
 8014806:	d12b      	bne.n	8014860 <__swbuf_r+0x70>
 8014808:	686c      	ldr	r4, [r5, #4]
 801480a:	69a3      	ldr	r3, [r4, #24]
 801480c:	60a3      	str	r3, [r4, #8]
 801480e:	89a3      	ldrh	r3, [r4, #12]
 8014810:	071a      	lsls	r2, r3, #28
 8014812:	d52f      	bpl.n	8014874 <__swbuf_r+0x84>
 8014814:	6923      	ldr	r3, [r4, #16]
 8014816:	b36b      	cbz	r3, 8014874 <__swbuf_r+0x84>
 8014818:	6923      	ldr	r3, [r4, #16]
 801481a:	6820      	ldr	r0, [r4, #0]
 801481c:	1ac0      	subs	r0, r0, r3
 801481e:	6963      	ldr	r3, [r4, #20]
 8014820:	b2f6      	uxtb	r6, r6
 8014822:	4283      	cmp	r3, r0
 8014824:	4637      	mov	r7, r6
 8014826:	dc04      	bgt.n	8014832 <__swbuf_r+0x42>
 8014828:	4621      	mov	r1, r4
 801482a:	4628      	mov	r0, r5
 801482c:	f000 f93c 	bl	8014aa8 <_fflush_r>
 8014830:	bb30      	cbnz	r0, 8014880 <__swbuf_r+0x90>
 8014832:	68a3      	ldr	r3, [r4, #8]
 8014834:	3b01      	subs	r3, #1
 8014836:	60a3      	str	r3, [r4, #8]
 8014838:	6823      	ldr	r3, [r4, #0]
 801483a:	1c5a      	adds	r2, r3, #1
 801483c:	6022      	str	r2, [r4, #0]
 801483e:	701e      	strb	r6, [r3, #0]
 8014840:	6963      	ldr	r3, [r4, #20]
 8014842:	3001      	adds	r0, #1
 8014844:	4283      	cmp	r3, r0
 8014846:	d004      	beq.n	8014852 <__swbuf_r+0x62>
 8014848:	89a3      	ldrh	r3, [r4, #12]
 801484a:	07db      	lsls	r3, r3, #31
 801484c:	d506      	bpl.n	801485c <__swbuf_r+0x6c>
 801484e:	2e0a      	cmp	r6, #10
 8014850:	d104      	bne.n	801485c <__swbuf_r+0x6c>
 8014852:	4621      	mov	r1, r4
 8014854:	4628      	mov	r0, r5
 8014856:	f000 f927 	bl	8014aa8 <_fflush_r>
 801485a:	b988      	cbnz	r0, 8014880 <__swbuf_r+0x90>
 801485c:	4638      	mov	r0, r7
 801485e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014860:	4b0a      	ldr	r3, [pc, #40]	; (801488c <__swbuf_r+0x9c>)
 8014862:	429c      	cmp	r4, r3
 8014864:	d101      	bne.n	801486a <__swbuf_r+0x7a>
 8014866:	68ac      	ldr	r4, [r5, #8]
 8014868:	e7cf      	b.n	801480a <__swbuf_r+0x1a>
 801486a:	4b09      	ldr	r3, [pc, #36]	; (8014890 <__swbuf_r+0xa0>)
 801486c:	429c      	cmp	r4, r3
 801486e:	bf08      	it	eq
 8014870:	68ec      	ldreq	r4, [r5, #12]
 8014872:	e7ca      	b.n	801480a <__swbuf_r+0x1a>
 8014874:	4621      	mov	r1, r4
 8014876:	4628      	mov	r0, r5
 8014878:	f000 f81a 	bl	80148b0 <__swsetup_r>
 801487c:	2800      	cmp	r0, #0
 801487e:	d0cb      	beq.n	8014818 <__swbuf_r+0x28>
 8014880:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014884:	e7ea      	b.n	801485c <__swbuf_r+0x6c>
 8014886:	bf00      	nop
 8014888:	08016380 	.word	0x08016380
 801488c:	080163a0 	.word	0x080163a0
 8014890:	08016360 	.word	0x08016360

08014894 <__ascii_wctomb>:
 8014894:	b149      	cbz	r1, 80148aa <__ascii_wctomb+0x16>
 8014896:	2aff      	cmp	r2, #255	; 0xff
 8014898:	bf85      	ittet	hi
 801489a:	238a      	movhi	r3, #138	; 0x8a
 801489c:	6003      	strhi	r3, [r0, #0]
 801489e:	700a      	strbls	r2, [r1, #0]
 80148a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80148a4:	bf98      	it	ls
 80148a6:	2001      	movls	r0, #1
 80148a8:	4770      	bx	lr
 80148aa:	4608      	mov	r0, r1
 80148ac:	4770      	bx	lr
	...

080148b0 <__swsetup_r>:
 80148b0:	4b32      	ldr	r3, [pc, #200]	; (801497c <__swsetup_r+0xcc>)
 80148b2:	b570      	push	{r4, r5, r6, lr}
 80148b4:	681d      	ldr	r5, [r3, #0]
 80148b6:	4606      	mov	r6, r0
 80148b8:	460c      	mov	r4, r1
 80148ba:	b125      	cbz	r5, 80148c6 <__swsetup_r+0x16>
 80148bc:	69ab      	ldr	r3, [r5, #24]
 80148be:	b913      	cbnz	r3, 80148c6 <__swsetup_r+0x16>
 80148c0:	4628      	mov	r0, r5
 80148c2:	f000 f985 	bl	8014bd0 <__sinit>
 80148c6:	4b2e      	ldr	r3, [pc, #184]	; (8014980 <__swsetup_r+0xd0>)
 80148c8:	429c      	cmp	r4, r3
 80148ca:	d10f      	bne.n	80148ec <__swsetup_r+0x3c>
 80148cc:	686c      	ldr	r4, [r5, #4]
 80148ce:	89a3      	ldrh	r3, [r4, #12]
 80148d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80148d4:	0719      	lsls	r1, r3, #28
 80148d6:	d42c      	bmi.n	8014932 <__swsetup_r+0x82>
 80148d8:	06dd      	lsls	r5, r3, #27
 80148da:	d411      	bmi.n	8014900 <__swsetup_r+0x50>
 80148dc:	2309      	movs	r3, #9
 80148de:	6033      	str	r3, [r6, #0]
 80148e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80148e4:	81a3      	strh	r3, [r4, #12]
 80148e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80148ea:	e03e      	b.n	801496a <__swsetup_r+0xba>
 80148ec:	4b25      	ldr	r3, [pc, #148]	; (8014984 <__swsetup_r+0xd4>)
 80148ee:	429c      	cmp	r4, r3
 80148f0:	d101      	bne.n	80148f6 <__swsetup_r+0x46>
 80148f2:	68ac      	ldr	r4, [r5, #8]
 80148f4:	e7eb      	b.n	80148ce <__swsetup_r+0x1e>
 80148f6:	4b24      	ldr	r3, [pc, #144]	; (8014988 <__swsetup_r+0xd8>)
 80148f8:	429c      	cmp	r4, r3
 80148fa:	bf08      	it	eq
 80148fc:	68ec      	ldreq	r4, [r5, #12]
 80148fe:	e7e6      	b.n	80148ce <__swsetup_r+0x1e>
 8014900:	0758      	lsls	r0, r3, #29
 8014902:	d512      	bpl.n	801492a <__swsetup_r+0x7a>
 8014904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014906:	b141      	cbz	r1, 801491a <__swsetup_r+0x6a>
 8014908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801490c:	4299      	cmp	r1, r3
 801490e:	d002      	beq.n	8014916 <__swsetup_r+0x66>
 8014910:	4630      	mov	r0, r6
 8014912:	f7fb fea5 	bl	8010660 <_free_r>
 8014916:	2300      	movs	r3, #0
 8014918:	6363      	str	r3, [r4, #52]	; 0x34
 801491a:	89a3      	ldrh	r3, [r4, #12]
 801491c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014920:	81a3      	strh	r3, [r4, #12]
 8014922:	2300      	movs	r3, #0
 8014924:	6063      	str	r3, [r4, #4]
 8014926:	6923      	ldr	r3, [r4, #16]
 8014928:	6023      	str	r3, [r4, #0]
 801492a:	89a3      	ldrh	r3, [r4, #12]
 801492c:	f043 0308 	orr.w	r3, r3, #8
 8014930:	81a3      	strh	r3, [r4, #12]
 8014932:	6923      	ldr	r3, [r4, #16]
 8014934:	b94b      	cbnz	r3, 801494a <__swsetup_r+0x9a>
 8014936:	89a3      	ldrh	r3, [r4, #12]
 8014938:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801493c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014940:	d003      	beq.n	801494a <__swsetup_r+0x9a>
 8014942:	4621      	mov	r1, r4
 8014944:	4630      	mov	r0, r6
 8014946:	f000 fa09 	bl	8014d5c <__smakebuf_r>
 801494a:	89a0      	ldrh	r0, [r4, #12]
 801494c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014950:	f010 0301 	ands.w	r3, r0, #1
 8014954:	d00a      	beq.n	801496c <__swsetup_r+0xbc>
 8014956:	2300      	movs	r3, #0
 8014958:	60a3      	str	r3, [r4, #8]
 801495a:	6963      	ldr	r3, [r4, #20]
 801495c:	425b      	negs	r3, r3
 801495e:	61a3      	str	r3, [r4, #24]
 8014960:	6923      	ldr	r3, [r4, #16]
 8014962:	b943      	cbnz	r3, 8014976 <__swsetup_r+0xc6>
 8014964:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014968:	d1ba      	bne.n	80148e0 <__swsetup_r+0x30>
 801496a:	bd70      	pop	{r4, r5, r6, pc}
 801496c:	0781      	lsls	r1, r0, #30
 801496e:	bf58      	it	pl
 8014970:	6963      	ldrpl	r3, [r4, #20]
 8014972:	60a3      	str	r3, [r4, #8]
 8014974:	e7f4      	b.n	8014960 <__swsetup_r+0xb0>
 8014976:	2000      	movs	r0, #0
 8014978:	e7f7      	b.n	801496a <__swsetup_r+0xba>
 801497a:	bf00      	nop
 801497c:	20000700 	.word	0x20000700
 8014980:	08016380 	.word	0x08016380
 8014984:	080163a0 	.word	0x080163a0
 8014988:	08016360 	.word	0x08016360

0801498c <abort>:
 801498c:	b508      	push	{r3, lr}
 801498e:	2006      	movs	r0, #6
 8014990:	f000 fa96 	bl	8014ec0 <raise>
 8014994:	2001      	movs	r0, #1
 8014996:	f7ef ffe9 	bl	800496c <_exit>
	...

0801499c <__sflush_r>:
 801499c:	898a      	ldrh	r2, [r1, #12]
 801499e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149a2:	4605      	mov	r5, r0
 80149a4:	0710      	lsls	r0, r2, #28
 80149a6:	460c      	mov	r4, r1
 80149a8:	d458      	bmi.n	8014a5c <__sflush_r+0xc0>
 80149aa:	684b      	ldr	r3, [r1, #4]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	dc05      	bgt.n	80149bc <__sflush_r+0x20>
 80149b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	dc02      	bgt.n	80149bc <__sflush_r+0x20>
 80149b6:	2000      	movs	r0, #0
 80149b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80149be:	2e00      	cmp	r6, #0
 80149c0:	d0f9      	beq.n	80149b6 <__sflush_r+0x1a>
 80149c2:	2300      	movs	r3, #0
 80149c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80149c8:	682f      	ldr	r7, [r5, #0]
 80149ca:	602b      	str	r3, [r5, #0]
 80149cc:	d032      	beq.n	8014a34 <__sflush_r+0x98>
 80149ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80149d0:	89a3      	ldrh	r3, [r4, #12]
 80149d2:	075a      	lsls	r2, r3, #29
 80149d4:	d505      	bpl.n	80149e2 <__sflush_r+0x46>
 80149d6:	6863      	ldr	r3, [r4, #4]
 80149d8:	1ac0      	subs	r0, r0, r3
 80149da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80149dc:	b10b      	cbz	r3, 80149e2 <__sflush_r+0x46>
 80149de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80149e0:	1ac0      	subs	r0, r0, r3
 80149e2:	2300      	movs	r3, #0
 80149e4:	4602      	mov	r2, r0
 80149e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80149e8:	6a21      	ldr	r1, [r4, #32]
 80149ea:	4628      	mov	r0, r5
 80149ec:	47b0      	blx	r6
 80149ee:	1c43      	adds	r3, r0, #1
 80149f0:	89a3      	ldrh	r3, [r4, #12]
 80149f2:	d106      	bne.n	8014a02 <__sflush_r+0x66>
 80149f4:	6829      	ldr	r1, [r5, #0]
 80149f6:	291d      	cmp	r1, #29
 80149f8:	d82c      	bhi.n	8014a54 <__sflush_r+0xb8>
 80149fa:	4a2a      	ldr	r2, [pc, #168]	; (8014aa4 <__sflush_r+0x108>)
 80149fc:	40ca      	lsrs	r2, r1
 80149fe:	07d6      	lsls	r6, r2, #31
 8014a00:	d528      	bpl.n	8014a54 <__sflush_r+0xb8>
 8014a02:	2200      	movs	r2, #0
 8014a04:	6062      	str	r2, [r4, #4]
 8014a06:	04d9      	lsls	r1, r3, #19
 8014a08:	6922      	ldr	r2, [r4, #16]
 8014a0a:	6022      	str	r2, [r4, #0]
 8014a0c:	d504      	bpl.n	8014a18 <__sflush_r+0x7c>
 8014a0e:	1c42      	adds	r2, r0, #1
 8014a10:	d101      	bne.n	8014a16 <__sflush_r+0x7a>
 8014a12:	682b      	ldr	r3, [r5, #0]
 8014a14:	b903      	cbnz	r3, 8014a18 <__sflush_r+0x7c>
 8014a16:	6560      	str	r0, [r4, #84]	; 0x54
 8014a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a1a:	602f      	str	r7, [r5, #0]
 8014a1c:	2900      	cmp	r1, #0
 8014a1e:	d0ca      	beq.n	80149b6 <__sflush_r+0x1a>
 8014a20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a24:	4299      	cmp	r1, r3
 8014a26:	d002      	beq.n	8014a2e <__sflush_r+0x92>
 8014a28:	4628      	mov	r0, r5
 8014a2a:	f7fb fe19 	bl	8010660 <_free_r>
 8014a2e:	2000      	movs	r0, #0
 8014a30:	6360      	str	r0, [r4, #52]	; 0x34
 8014a32:	e7c1      	b.n	80149b8 <__sflush_r+0x1c>
 8014a34:	6a21      	ldr	r1, [r4, #32]
 8014a36:	2301      	movs	r3, #1
 8014a38:	4628      	mov	r0, r5
 8014a3a:	47b0      	blx	r6
 8014a3c:	1c41      	adds	r1, r0, #1
 8014a3e:	d1c7      	bne.n	80149d0 <__sflush_r+0x34>
 8014a40:	682b      	ldr	r3, [r5, #0]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d0c4      	beq.n	80149d0 <__sflush_r+0x34>
 8014a46:	2b1d      	cmp	r3, #29
 8014a48:	d001      	beq.n	8014a4e <__sflush_r+0xb2>
 8014a4a:	2b16      	cmp	r3, #22
 8014a4c:	d101      	bne.n	8014a52 <__sflush_r+0xb6>
 8014a4e:	602f      	str	r7, [r5, #0]
 8014a50:	e7b1      	b.n	80149b6 <__sflush_r+0x1a>
 8014a52:	89a3      	ldrh	r3, [r4, #12]
 8014a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a58:	81a3      	strh	r3, [r4, #12]
 8014a5a:	e7ad      	b.n	80149b8 <__sflush_r+0x1c>
 8014a5c:	690f      	ldr	r7, [r1, #16]
 8014a5e:	2f00      	cmp	r7, #0
 8014a60:	d0a9      	beq.n	80149b6 <__sflush_r+0x1a>
 8014a62:	0793      	lsls	r3, r2, #30
 8014a64:	680e      	ldr	r6, [r1, #0]
 8014a66:	bf08      	it	eq
 8014a68:	694b      	ldreq	r3, [r1, #20]
 8014a6a:	600f      	str	r7, [r1, #0]
 8014a6c:	bf18      	it	ne
 8014a6e:	2300      	movne	r3, #0
 8014a70:	eba6 0807 	sub.w	r8, r6, r7
 8014a74:	608b      	str	r3, [r1, #8]
 8014a76:	f1b8 0f00 	cmp.w	r8, #0
 8014a7a:	dd9c      	ble.n	80149b6 <__sflush_r+0x1a>
 8014a7c:	6a21      	ldr	r1, [r4, #32]
 8014a7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014a80:	4643      	mov	r3, r8
 8014a82:	463a      	mov	r2, r7
 8014a84:	4628      	mov	r0, r5
 8014a86:	47b0      	blx	r6
 8014a88:	2800      	cmp	r0, #0
 8014a8a:	dc06      	bgt.n	8014a9a <__sflush_r+0xfe>
 8014a8c:	89a3      	ldrh	r3, [r4, #12]
 8014a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a92:	81a3      	strh	r3, [r4, #12]
 8014a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014a98:	e78e      	b.n	80149b8 <__sflush_r+0x1c>
 8014a9a:	4407      	add	r7, r0
 8014a9c:	eba8 0800 	sub.w	r8, r8, r0
 8014aa0:	e7e9      	b.n	8014a76 <__sflush_r+0xda>
 8014aa2:	bf00      	nop
 8014aa4:	20400001 	.word	0x20400001

08014aa8 <_fflush_r>:
 8014aa8:	b538      	push	{r3, r4, r5, lr}
 8014aaa:	690b      	ldr	r3, [r1, #16]
 8014aac:	4605      	mov	r5, r0
 8014aae:	460c      	mov	r4, r1
 8014ab0:	b913      	cbnz	r3, 8014ab8 <_fflush_r+0x10>
 8014ab2:	2500      	movs	r5, #0
 8014ab4:	4628      	mov	r0, r5
 8014ab6:	bd38      	pop	{r3, r4, r5, pc}
 8014ab8:	b118      	cbz	r0, 8014ac2 <_fflush_r+0x1a>
 8014aba:	6983      	ldr	r3, [r0, #24]
 8014abc:	b90b      	cbnz	r3, 8014ac2 <_fflush_r+0x1a>
 8014abe:	f000 f887 	bl	8014bd0 <__sinit>
 8014ac2:	4b14      	ldr	r3, [pc, #80]	; (8014b14 <_fflush_r+0x6c>)
 8014ac4:	429c      	cmp	r4, r3
 8014ac6:	d11b      	bne.n	8014b00 <_fflush_r+0x58>
 8014ac8:	686c      	ldr	r4, [r5, #4]
 8014aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d0ef      	beq.n	8014ab2 <_fflush_r+0xa>
 8014ad2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014ad4:	07d0      	lsls	r0, r2, #31
 8014ad6:	d404      	bmi.n	8014ae2 <_fflush_r+0x3a>
 8014ad8:	0599      	lsls	r1, r3, #22
 8014ada:	d402      	bmi.n	8014ae2 <_fflush_r+0x3a>
 8014adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ade:	f000 f915 	bl	8014d0c <__retarget_lock_acquire_recursive>
 8014ae2:	4628      	mov	r0, r5
 8014ae4:	4621      	mov	r1, r4
 8014ae6:	f7ff ff59 	bl	801499c <__sflush_r>
 8014aea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014aec:	07da      	lsls	r2, r3, #31
 8014aee:	4605      	mov	r5, r0
 8014af0:	d4e0      	bmi.n	8014ab4 <_fflush_r+0xc>
 8014af2:	89a3      	ldrh	r3, [r4, #12]
 8014af4:	059b      	lsls	r3, r3, #22
 8014af6:	d4dd      	bmi.n	8014ab4 <_fflush_r+0xc>
 8014af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014afa:	f000 f908 	bl	8014d0e <__retarget_lock_release_recursive>
 8014afe:	e7d9      	b.n	8014ab4 <_fflush_r+0xc>
 8014b00:	4b05      	ldr	r3, [pc, #20]	; (8014b18 <_fflush_r+0x70>)
 8014b02:	429c      	cmp	r4, r3
 8014b04:	d101      	bne.n	8014b0a <_fflush_r+0x62>
 8014b06:	68ac      	ldr	r4, [r5, #8]
 8014b08:	e7df      	b.n	8014aca <_fflush_r+0x22>
 8014b0a:	4b04      	ldr	r3, [pc, #16]	; (8014b1c <_fflush_r+0x74>)
 8014b0c:	429c      	cmp	r4, r3
 8014b0e:	bf08      	it	eq
 8014b10:	68ec      	ldreq	r4, [r5, #12]
 8014b12:	e7da      	b.n	8014aca <_fflush_r+0x22>
 8014b14:	08016380 	.word	0x08016380
 8014b18:	080163a0 	.word	0x080163a0
 8014b1c:	08016360 	.word	0x08016360

08014b20 <std>:
 8014b20:	2300      	movs	r3, #0
 8014b22:	b510      	push	{r4, lr}
 8014b24:	4604      	mov	r4, r0
 8014b26:	e9c0 3300 	strd	r3, r3, [r0]
 8014b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014b2e:	6083      	str	r3, [r0, #8]
 8014b30:	8181      	strh	r1, [r0, #12]
 8014b32:	6643      	str	r3, [r0, #100]	; 0x64
 8014b34:	81c2      	strh	r2, [r0, #14]
 8014b36:	6183      	str	r3, [r0, #24]
 8014b38:	4619      	mov	r1, r3
 8014b3a:	2208      	movs	r2, #8
 8014b3c:	305c      	adds	r0, #92	; 0x5c
 8014b3e:	f7fb fd87 	bl	8010650 <memset>
 8014b42:	4b05      	ldr	r3, [pc, #20]	; (8014b58 <std+0x38>)
 8014b44:	6263      	str	r3, [r4, #36]	; 0x24
 8014b46:	4b05      	ldr	r3, [pc, #20]	; (8014b5c <std+0x3c>)
 8014b48:	62a3      	str	r3, [r4, #40]	; 0x28
 8014b4a:	4b05      	ldr	r3, [pc, #20]	; (8014b60 <std+0x40>)
 8014b4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014b4e:	4b05      	ldr	r3, [pc, #20]	; (8014b64 <std+0x44>)
 8014b50:	6224      	str	r4, [r4, #32]
 8014b52:	6323      	str	r3, [r4, #48]	; 0x30
 8014b54:	bd10      	pop	{r4, pc}
 8014b56:	bf00      	nop
 8014b58:	08014ef9 	.word	0x08014ef9
 8014b5c:	08014f1b 	.word	0x08014f1b
 8014b60:	08014f53 	.word	0x08014f53
 8014b64:	08014f77 	.word	0x08014f77

08014b68 <_cleanup_r>:
 8014b68:	4901      	ldr	r1, [pc, #4]	; (8014b70 <_cleanup_r+0x8>)
 8014b6a:	f000 b8af 	b.w	8014ccc <_fwalk_reent>
 8014b6e:	bf00      	nop
 8014b70:	08014aa9 	.word	0x08014aa9

08014b74 <__sfmoreglue>:
 8014b74:	b570      	push	{r4, r5, r6, lr}
 8014b76:	2268      	movs	r2, #104	; 0x68
 8014b78:	1e4d      	subs	r5, r1, #1
 8014b7a:	4355      	muls	r5, r2
 8014b7c:	460e      	mov	r6, r1
 8014b7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014b82:	f7fb fdd9 	bl	8010738 <_malloc_r>
 8014b86:	4604      	mov	r4, r0
 8014b88:	b140      	cbz	r0, 8014b9c <__sfmoreglue+0x28>
 8014b8a:	2100      	movs	r1, #0
 8014b8c:	e9c0 1600 	strd	r1, r6, [r0]
 8014b90:	300c      	adds	r0, #12
 8014b92:	60a0      	str	r0, [r4, #8]
 8014b94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014b98:	f7fb fd5a 	bl	8010650 <memset>
 8014b9c:	4620      	mov	r0, r4
 8014b9e:	bd70      	pop	{r4, r5, r6, pc}

08014ba0 <__sfp_lock_acquire>:
 8014ba0:	4801      	ldr	r0, [pc, #4]	; (8014ba8 <__sfp_lock_acquire+0x8>)
 8014ba2:	f000 b8b3 	b.w	8014d0c <__retarget_lock_acquire_recursive>
 8014ba6:	bf00      	nop
 8014ba8:	20012a41 	.word	0x20012a41

08014bac <__sfp_lock_release>:
 8014bac:	4801      	ldr	r0, [pc, #4]	; (8014bb4 <__sfp_lock_release+0x8>)
 8014bae:	f000 b8ae 	b.w	8014d0e <__retarget_lock_release_recursive>
 8014bb2:	bf00      	nop
 8014bb4:	20012a41 	.word	0x20012a41

08014bb8 <__sinit_lock_acquire>:
 8014bb8:	4801      	ldr	r0, [pc, #4]	; (8014bc0 <__sinit_lock_acquire+0x8>)
 8014bba:	f000 b8a7 	b.w	8014d0c <__retarget_lock_acquire_recursive>
 8014bbe:	bf00      	nop
 8014bc0:	20012a42 	.word	0x20012a42

08014bc4 <__sinit_lock_release>:
 8014bc4:	4801      	ldr	r0, [pc, #4]	; (8014bcc <__sinit_lock_release+0x8>)
 8014bc6:	f000 b8a2 	b.w	8014d0e <__retarget_lock_release_recursive>
 8014bca:	bf00      	nop
 8014bcc:	20012a42 	.word	0x20012a42

08014bd0 <__sinit>:
 8014bd0:	b510      	push	{r4, lr}
 8014bd2:	4604      	mov	r4, r0
 8014bd4:	f7ff fff0 	bl	8014bb8 <__sinit_lock_acquire>
 8014bd8:	69a3      	ldr	r3, [r4, #24]
 8014bda:	b11b      	cbz	r3, 8014be4 <__sinit+0x14>
 8014bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014be0:	f7ff bff0 	b.w	8014bc4 <__sinit_lock_release>
 8014be4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014be8:	6523      	str	r3, [r4, #80]	; 0x50
 8014bea:	4b13      	ldr	r3, [pc, #76]	; (8014c38 <__sinit+0x68>)
 8014bec:	4a13      	ldr	r2, [pc, #76]	; (8014c3c <__sinit+0x6c>)
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	62a2      	str	r2, [r4, #40]	; 0x28
 8014bf2:	42a3      	cmp	r3, r4
 8014bf4:	bf04      	itt	eq
 8014bf6:	2301      	moveq	r3, #1
 8014bf8:	61a3      	streq	r3, [r4, #24]
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	f000 f820 	bl	8014c40 <__sfp>
 8014c00:	6060      	str	r0, [r4, #4]
 8014c02:	4620      	mov	r0, r4
 8014c04:	f000 f81c 	bl	8014c40 <__sfp>
 8014c08:	60a0      	str	r0, [r4, #8]
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	f000 f818 	bl	8014c40 <__sfp>
 8014c10:	2200      	movs	r2, #0
 8014c12:	60e0      	str	r0, [r4, #12]
 8014c14:	2104      	movs	r1, #4
 8014c16:	6860      	ldr	r0, [r4, #4]
 8014c18:	f7ff ff82 	bl	8014b20 <std>
 8014c1c:	68a0      	ldr	r0, [r4, #8]
 8014c1e:	2201      	movs	r2, #1
 8014c20:	2109      	movs	r1, #9
 8014c22:	f7ff ff7d 	bl	8014b20 <std>
 8014c26:	68e0      	ldr	r0, [r4, #12]
 8014c28:	2202      	movs	r2, #2
 8014c2a:	2112      	movs	r1, #18
 8014c2c:	f7ff ff78 	bl	8014b20 <std>
 8014c30:	2301      	movs	r3, #1
 8014c32:	61a3      	str	r3, [r4, #24]
 8014c34:	e7d2      	b.n	8014bdc <__sinit+0xc>
 8014c36:	bf00      	nop
 8014c38:	08015ec0 	.word	0x08015ec0
 8014c3c:	08014b69 	.word	0x08014b69

08014c40 <__sfp>:
 8014c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c42:	4607      	mov	r7, r0
 8014c44:	f7ff ffac 	bl	8014ba0 <__sfp_lock_acquire>
 8014c48:	4b1e      	ldr	r3, [pc, #120]	; (8014cc4 <__sfp+0x84>)
 8014c4a:	681e      	ldr	r6, [r3, #0]
 8014c4c:	69b3      	ldr	r3, [r6, #24]
 8014c4e:	b913      	cbnz	r3, 8014c56 <__sfp+0x16>
 8014c50:	4630      	mov	r0, r6
 8014c52:	f7ff ffbd 	bl	8014bd0 <__sinit>
 8014c56:	3648      	adds	r6, #72	; 0x48
 8014c58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014c5c:	3b01      	subs	r3, #1
 8014c5e:	d503      	bpl.n	8014c68 <__sfp+0x28>
 8014c60:	6833      	ldr	r3, [r6, #0]
 8014c62:	b30b      	cbz	r3, 8014ca8 <__sfp+0x68>
 8014c64:	6836      	ldr	r6, [r6, #0]
 8014c66:	e7f7      	b.n	8014c58 <__sfp+0x18>
 8014c68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014c6c:	b9d5      	cbnz	r5, 8014ca4 <__sfp+0x64>
 8014c6e:	4b16      	ldr	r3, [pc, #88]	; (8014cc8 <__sfp+0x88>)
 8014c70:	60e3      	str	r3, [r4, #12]
 8014c72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014c76:	6665      	str	r5, [r4, #100]	; 0x64
 8014c78:	f000 f847 	bl	8014d0a <__retarget_lock_init_recursive>
 8014c7c:	f7ff ff96 	bl	8014bac <__sfp_lock_release>
 8014c80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014c84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014c88:	6025      	str	r5, [r4, #0]
 8014c8a:	61a5      	str	r5, [r4, #24]
 8014c8c:	2208      	movs	r2, #8
 8014c8e:	4629      	mov	r1, r5
 8014c90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014c94:	f7fb fcdc 	bl	8010650 <memset>
 8014c98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014c9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014ca0:	4620      	mov	r0, r4
 8014ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ca4:	3468      	adds	r4, #104	; 0x68
 8014ca6:	e7d9      	b.n	8014c5c <__sfp+0x1c>
 8014ca8:	2104      	movs	r1, #4
 8014caa:	4638      	mov	r0, r7
 8014cac:	f7ff ff62 	bl	8014b74 <__sfmoreglue>
 8014cb0:	4604      	mov	r4, r0
 8014cb2:	6030      	str	r0, [r6, #0]
 8014cb4:	2800      	cmp	r0, #0
 8014cb6:	d1d5      	bne.n	8014c64 <__sfp+0x24>
 8014cb8:	f7ff ff78 	bl	8014bac <__sfp_lock_release>
 8014cbc:	230c      	movs	r3, #12
 8014cbe:	603b      	str	r3, [r7, #0]
 8014cc0:	e7ee      	b.n	8014ca0 <__sfp+0x60>
 8014cc2:	bf00      	nop
 8014cc4:	08015ec0 	.word	0x08015ec0
 8014cc8:	ffff0001 	.word	0xffff0001

08014ccc <_fwalk_reent>:
 8014ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014cd0:	4606      	mov	r6, r0
 8014cd2:	4688      	mov	r8, r1
 8014cd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014cd8:	2700      	movs	r7, #0
 8014cda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014cde:	f1b9 0901 	subs.w	r9, r9, #1
 8014ce2:	d505      	bpl.n	8014cf0 <_fwalk_reent+0x24>
 8014ce4:	6824      	ldr	r4, [r4, #0]
 8014ce6:	2c00      	cmp	r4, #0
 8014ce8:	d1f7      	bne.n	8014cda <_fwalk_reent+0xe>
 8014cea:	4638      	mov	r0, r7
 8014cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cf0:	89ab      	ldrh	r3, [r5, #12]
 8014cf2:	2b01      	cmp	r3, #1
 8014cf4:	d907      	bls.n	8014d06 <_fwalk_reent+0x3a>
 8014cf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014cfa:	3301      	adds	r3, #1
 8014cfc:	d003      	beq.n	8014d06 <_fwalk_reent+0x3a>
 8014cfe:	4629      	mov	r1, r5
 8014d00:	4630      	mov	r0, r6
 8014d02:	47c0      	blx	r8
 8014d04:	4307      	orrs	r7, r0
 8014d06:	3568      	adds	r5, #104	; 0x68
 8014d08:	e7e9      	b.n	8014cde <_fwalk_reent+0x12>

08014d0a <__retarget_lock_init_recursive>:
 8014d0a:	4770      	bx	lr

08014d0c <__retarget_lock_acquire_recursive>:
 8014d0c:	4770      	bx	lr

08014d0e <__retarget_lock_release_recursive>:
 8014d0e:	4770      	bx	lr

08014d10 <__swhatbuf_r>:
 8014d10:	b570      	push	{r4, r5, r6, lr}
 8014d12:	460e      	mov	r6, r1
 8014d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d18:	2900      	cmp	r1, #0
 8014d1a:	b096      	sub	sp, #88	; 0x58
 8014d1c:	4614      	mov	r4, r2
 8014d1e:	461d      	mov	r5, r3
 8014d20:	da08      	bge.n	8014d34 <__swhatbuf_r+0x24>
 8014d22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014d26:	2200      	movs	r2, #0
 8014d28:	602a      	str	r2, [r5, #0]
 8014d2a:	061a      	lsls	r2, r3, #24
 8014d2c:	d410      	bmi.n	8014d50 <__swhatbuf_r+0x40>
 8014d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014d32:	e00e      	b.n	8014d52 <__swhatbuf_r+0x42>
 8014d34:	466a      	mov	r2, sp
 8014d36:	f000 f945 	bl	8014fc4 <_fstat_r>
 8014d3a:	2800      	cmp	r0, #0
 8014d3c:	dbf1      	blt.n	8014d22 <__swhatbuf_r+0x12>
 8014d3e:	9a01      	ldr	r2, [sp, #4]
 8014d40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014d44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014d48:	425a      	negs	r2, r3
 8014d4a:	415a      	adcs	r2, r3
 8014d4c:	602a      	str	r2, [r5, #0]
 8014d4e:	e7ee      	b.n	8014d2e <__swhatbuf_r+0x1e>
 8014d50:	2340      	movs	r3, #64	; 0x40
 8014d52:	2000      	movs	r0, #0
 8014d54:	6023      	str	r3, [r4, #0]
 8014d56:	b016      	add	sp, #88	; 0x58
 8014d58:	bd70      	pop	{r4, r5, r6, pc}
	...

08014d5c <__smakebuf_r>:
 8014d5c:	898b      	ldrh	r3, [r1, #12]
 8014d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014d60:	079d      	lsls	r5, r3, #30
 8014d62:	4606      	mov	r6, r0
 8014d64:	460c      	mov	r4, r1
 8014d66:	d507      	bpl.n	8014d78 <__smakebuf_r+0x1c>
 8014d68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014d6c:	6023      	str	r3, [r4, #0]
 8014d6e:	6123      	str	r3, [r4, #16]
 8014d70:	2301      	movs	r3, #1
 8014d72:	6163      	str	r3, [r4, #20]
 8014d74:	b002      	add	sp, #8
 8014d76:	bd70      	pop	{r4, r5, r6, pc}
 8014d78:	ab01      	add	r3, sp, #4
 8014d7a:	466a      	mov	r2, sp
 8014d7c:	f7ff ffc8 	bl	8014d10 <__swhatbuf_r>
 8014d80:	9900      	ldr	r1, [sp, #0]
 8014d82:	4605      	mov	r5, r0
 8014d84:	4630      	mov	r0, r6
 8014d86:	f7fb fcd7 	bl	8010738 <_malloc_r>
 8014d8a:	b948      	cbnz	r0, 8014da0 <__smakebuf_r+0x44>
 8014d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d90:	059a      	lsls	r2, r3, #22
 8014d92:	d4ef      	bmi.n	8014d74 <__smakebuf_r+0x18>
 8014d94:	f023 0303 	bic.w	r3, r3, #3
 8014d98:	f043 0302 	orr.w	r3, r3, #2
 8014d9c:	81a3      	strh	r3, [r4, #12]
 8014d9e:	e7e3      	b.n	8014d68 <__smakebuf_r+0xc>
 8014da0:	4b0d      	ldr	r3, [pc, #52]	; (8014dd8 <__smakebuf_r+0x7c>)
 8014da2:	62b3      	str	r3, [r6, #40]	; 0x28
 8014da4:	89a3      	ldrh	r3, [r4, #12]
 8014da6:	6020      	str	r0, [r4, #0]
 8014da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014dac:	81a3      	strh	r3, [r4, #12]
 8014dae:	9b00      	ldr	r3, [sp, #0]
 8014db0:	6163      	str	r3, [r4, #20]
 8014db2:	9b01      	ldr	r3, [sp, #4]
 8014db4:	6120      	str	r0, [r4, #16]
 8014db6:	b15b      	cbz	r3, 8014dd0 <__smakebuf_r+0x74>
 8014db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014dbc:	4630      	mov	r0, r6
 8014dbe:	f000 f913 	bl	8014fe8 <_isatty_r>
 8014dc2:	b128      	cbz	r0, 8014dd0 <__smakebuf_r+0x74>
 8014dc4:	89a3      	ldrh	r3, [r4, #12]
 8014dc6:	f023 0303 	bic.w	r3, r3, #3
 8014dca:	f043 0301 	orr.w	r3, r3, #1
 8014dce:	81a3      	strh	r3, [r4, #12]
 8014dd0:	89a0      	ldrh	r0, [r4, #12]
 8014dd2:	4305      	orrs	r5, r0
 8014dd4:	81a5      	strh	r5, [r4, #12]
 8014dd6:	e7cd      	b.n	8014d74 <__smakebuf_r+0x18>
 8014dd8:	08014b69 	.word	0x08014b69

08014ddc <memmove>:
 8014ddc:	4288      	cmp	r0, r1
 8014dde:	b510      	push	{r4, lr}
 8014de0:	eb01 0402 	add.w	r4, r1, r2
 8014de4:	d902      	bls.n	8014dec <memmove+0x10>
 8014de6:	4284      	cmp	r4, r0
 8014de8:	4623      	mov	r3, r4
 8014dea:	d807      	bhi.n	8014dfc <memmove+0x20>
 8014dec:	1e43      	subs	r3, r0, #1
 8014dee:	42a1      	cmp	r1, r4
 8014df0:	d008      	beq.n	8014e04 <memmove+0x28>
 8014df2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014df6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014dfa:	e7f8      	b.n	8014dee <memmove+0x12>
 8014dfc:	4402      	add	r2, r0
 8014dfe:	4601      	mov	r1, r0
 8014e00:	428a      	cmp	r2, r1
 8014e02:	d100      	bne.n	8014e06 <memmove+0x2a>
 8014e04:	bd10      	pop	{r4, pc}
 8014e06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014e0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014e0e:	e7f7      	b.n	8014e00 <memmove+0x24>

08014e10 <_realloc_r>:
 8014e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e14:	4680      	mov	r8, r0
 8014e16:	4614      	mov	r4, r2
 8014e18:	460e      	mov	r6, r1
 8014e1a:	b921      	cbnz	r1, 8014e26 <_realloc_r+0x16>
 8014e1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e20:	4611      	mov	r1, r2
 8014e22:	f7fb bc89 	b.w	8010738 <_malloc_r>
 8014e26:	b92a      	cbnz	r2, 8014e34 <_realloc_r+0x24>
 8014e28:	f7fb fc1a 	bl	8010660 <_free_r>
 8014e2c:	4625      	mov	r5, r4
 8014e2e:	4628      	mov	r0, r5
 8014e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e34:	f000 f8fa 	bl	801502c <_malloc_usable_size_r>
 8014e38:	4284      	cmp	r4, r0
 8014e3a:	4607      	mov	r7, r0
 8014e3c:	d802      	bhi.n	8014e44 <_realloc_r+0x34>
 8014e3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014e42:	d812      	bhi.n	8014e6a <_realloc_r+0x5a>
 8014e44:	4621      	mov	r1, r4
 8014e46:	4640      	mov	r0, r8
 8014e48:	f7fb fc76 	bl	8010738 <_malloc_r>
 8014e4c:	4605      	mov	r5, r0
 8014e4e:	2800      	cmp	r0, #0
 8014e50:	d0ed      	beq.n	8014e2e <_realloc_r+0x1e>
 8014e52:	42bc      	cmp	r4, r7
 8014e54:	4622      	mov	r2, r4
 8014e56:	4631      	mov	r1, r6
 8014e58:	bf28      	it	cs
 8014e5a:	463a      	movcs	r2, r7
 8014e5c:	f7fe fd04 	bl	8013868 <memcpy>
 8014e60:	4631      	mov	r1, r6
 8014e62:	4640      	mov	r0, r8
 8014e64:	f7fb fbfc 	bl	8010660 <_free_r>
 8014e68:	e7e1      	b.n	8014e2e <_realloc_r+0x1e>
 8014e6a:	4635      	mov	r5, r6
 8014e6c:	e7df      	b.n	8014e2e <_realloc_r+0x1e>

08014e6e <_raise_r>:
 8014e6e:	291f      	cmp	r1, #31
 8014e70:	b538      	push	{r3, r4, r5, lr}
 8014e72:	4604      	mov	r4, r0
 8014e74:	460d      	mov	r5, r1
 8014e76:	d904      	bls.n	8014e82 <_raise_r+0x14>
 8014e78:	2316      	movs	r3, #22
 8014e7a:	6003      	str	r3, [r0, #0]
 8014e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e80:	bd38      	pop	{r3, r4, r5, pc}
 8014e82:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014e84:	b112      	cbz	r2, 8014e8c <_raise_r+0x1e>
 8014e86:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014e8a:	b94b      	cbnz	r3, 8014ea0 <_raise_r+0x32>
 8014e8c:	4620      	mov	r0, r4
 8014e8e:	f000 f831 	bl	8014ef4 <_getpid_r>
 8014e92:	462a      	mov	r2, r5
 8014e94:	4601      	mov	r1, r0
 8014e96:	4620      	mov	r0, r4
 8014e98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014e9c:	f000 b818 	b.w	8014ed0 <_kill_r>
 8014ea0:	2b01      	cmp	r3, #1
 8014ea2:	d00a      	beq.n	8014eba <_raise_r+0x4c>
 8014ea4:	1c59      	adds	r1, r3, #1
 8014ea6:	d103      	bne.n	8014eb0 <_raise_r+0x42>
 8014ea8:	2316      	movs	r3, #22
 8014eaa:	6003      	str	r3, [r0, #0]
 8014eac:	2001      	movs	r0, #1
 8014eae:	e7e7      	b.n	8014e80 <_raise_r+0x12>
 8014eb0:	2400      	movs	r4, #0
 8014eb2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014eb6:	4628      	mov	r0, r5
 8014eb8:	4798      	blx	r3
 8014eba:	2000      	movs	r0, #0
 8014ebc:	e7e0      	b.n	8014e80 <_raise_r+0x12>
	...

08014ec0 <raise>:
 8014ec0:	4b02      	ldr	r3, [pc, #8]	; (8014ecc <raise+0xc>)
 8014ec2:	4601      	mov	r1, r0
 8014ec4:	6818      	ldr	r0, [r3, #0]
 8014ec6:	f7ff bfd2 	b.w	8014e6e <_raise_r>
 8014eca:	bf00      	nop
 8014ecc:	20000700 	.word	0x20000700

08014ed0 <_kill_r>:
 8014ed0:	b538      	push	{r3, r4, r5, lr}
 8014ed2:	4d07      	ldr	r5, [pc, #28]	; (8014ef0 <_kill_r+0x20>)
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	4604      	mov	r4, r0
 8014ed8:	4608      	mov	r0, r1
 8014eda:	4611      	mov	r1, r2
 8014edc:	602b      	str	r3, [r5, #0]
 8014ede:	f7ef fd3d 	bl	800495c <_kill>
 8014ee2:	1c43      	adds	r3, r0, #1
 8014ee4:	d102      	bne.n	8014eec <_kill_r+0x1c>
 8014ee6:	682b      	ldr	r3, [r5, #0]
 8014ee8:	b103      	cbz	r3, 8014eec <_kill_r+0x1c>
 8014eea:	6023      	str	r3, [r4, #0]
 8014eec:	bd38      	pop	{r3, r4, r5, pc}
 8014eee:	bf00      	nop
 8014ef0:	20012a3c 	.word	0x20012a3c

08014ef4 <_getpid_r>:
 8014ef4:	f7ef bd30 	b.w	8004958 <_getpid>

08014ef8 <__sread>:
 8014ef8:	b510      	push	{r4, lr}
 8014efa:	460c      	mov	r4, r1
 8014efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f00:	f000 f89c 	bl	801503c <_read_r>
 8014f04:	2800      	cmp	r0, #0
 8014f06:	bfab      	itete	ge
 8014f08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8014f0c:	181b      	addge	r3, r3, r0
 8014f0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014f12:	bfac      	ite	ge
 8014f14:	6563      	strge	r3, [r4, #84]	; 0x54
 8014f16:	81a3      	strhlt	r3, [r4, #12]
 8014f18:	bd10      	pop	{r4, pc}

08014f1a <__swrite>:
 8014f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f1e:	461f      	mov	r7, r3
 8014f20:	898b      	ldrh	r3, [r1, #12]
 8014f22:	05db      	lsls	r3, r3, #23
 8014f24:	4605      	mov	r5, r0
 8014f26:	460c      	mov	r4, r1
 8014f28:	4616      	mov	r6, r2
 8014f2a:	d505      	bpl.n	8014f38 <__swrite+0x1e>
 8014f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f30:	2302      	movs	r3, #2
 8014f32:	2200      	movs	r2, #0
 8014f34:	f000 f868 	bl	8015008 <_lseek_r>
 8014f38:	89a3      	ldrh	r3, [r4, #12]
 8014f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014f42:	81a3      	strh	r3, [r4, #12]
 8014f44:	4632      	mov	r2, r6
 8014f46:	463b      	mov	r3, r7
 8014f48:	4628      	mov	r0, r5
 8014f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f4e:	f000 b817 	b.w	8014f80 <_write_r>

08014f52 <__sseek>:
 8014f52:	b510      	push	{r4, lr}
 8014f54:	460c      	mov	r4, r1
 8014f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f5a:	f000 f855 	bl	8015008 <_lseek_r>
 8014f5e:	1c43      	adds	r3, r0, #1
 8014f60:	89a3      	ldrh	r3, [r4, #12]
 8014f62:	bf15      	itete	ne
 8014f64:	6560      	strne	r0, [r4, #84]	; 0x54
 8014f66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014f6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014f6e:	81a3      	strheq	r3, [r4, #12]
 8014f70:	bf18      	it	ne
 8014f72:	81a3      	strhne	r3, [r4, #12]
 8014f74:	bd10      	pop	{r4, pc}

08014f76 <__sclose>:
 8014f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f7a:	f000 b813 	b.w	8014fa4 <_close_r>
	...

08014f80 <_write_r>:
 8014f80:	b538      	push	{r3, r4, r5, lr}
 8014f82:	4d07      	ldr	r5, [pc, #28]	; (8014fa0 <_write_r+0x20>)
 8014f84:	4604      	mov	r4, r0
 8014f86:	4608      	mov	r0, r1
 8014f88:	4611      	mov	r1, r2
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	602a      	str	r2, [r5, #0]
 8014f8e:	461a      	mov	r2, r3
 8014f90:	f7ef fd02 	bl	8004998 <_write>
 8014f94:	1c43      	adds	r3, r0, #1
 8014f96:	d102      	bne.n	8014f9e <_write_r+0x1e>
 8014f98:	682b      	ldr	r3, [r5, #0]
 8014f9a:	b103      	cbz	r3, 8014f9e <_write_r+0x1e>
 8014f9c:	6023      	str	r3, [r4, #0]
 8014f9e:	bd38      	pop	{r3, r4, r5, pc}
 8014fa0:	20012a3c 	.word	0x20012a3c

08014fa4 <_close_r>:
 8014fa4:	b538      	push	{r3, r4, r5, lr}
 8014fa6:	4d06      	ldr	r5, [pc, #24]	; (8014fc0 <_close_r+0x1c>)
 8014fa8:	2300      	movs	r3, #0
 8014faa:	4604      	mov	r4, r0
 8014fac:	4608      	mov	r0, r1
 8014fae:	602b      	str	r3, [r5, #0]
 8014fb0:	f7ef fd00 	bl	80049b4 <_close>
 8014fb4:	1c43      	adds	r3, r0, #1
 8014fb6:	d102      	bne.n	8014fbe <_close_r+0x1a>
 8014fb8:	682b      	ldr	r3, [r5, #0]
 8014fba:	b103      	cbz	r3, 8014fbe <_close_r+0x1a>
 8014fbc:	6023      	str	r3, [r4, #0]
 8014fbe:	bd38      	pop	{r3, r4, r5, pc}
 8014fc0:	20012a3c 	.word	0x20012a3c

08014fc4 <_fstat_r>:
 8014fc4:	b538      	push	{r3, r4, r5, lr}
 8014fc6:	4d07      	ldr	r5, [pc, #28]	; (8014fe4 <_fstat_r+0x20>)
 8014fc8:	2300      	movs	r3, #0
 8014fca:	4604      	mov	r4, r0
 8014fcc:	4608      	mov	r0, r1
 8014fce:	4611      	mov	r1, r2
 8014fd0:	602b      	str	r3, [r5, #0]
 8014fd2:	f7ef fcf2 	bl	80049ba <_fstat>
 8014fd6:	1c43      	adds	r3, r0, #1
 8014fd8:	d102      	bne.n	8014fe0 <_fstat_r+0x1c>
 8014fda:	682b      	ldr	r3, [r5, #0]
 8014fdc:	b103      	cbz	r3, 8014fe0 <_fstat_r+0x1c>
 8014fde:	6023      	str	r3, [r4, #0]
 8014fe0:	bd38      	pop	{r3, r4, r5, pc}
 8014fe2:	bf00      	nop
 8014fe4:	20012a3c 	.word	0x20012a3c

08014fe8 <_isatty_r>:
 8014fe8:	b538      	push	{r3, r4, r5, lr}
 8014fea:	4d06      	ldr	r5, [pc, #24]	; (8015004 <_isatty_r+0x1c>)
 8014fec:	2300      	movs	r3, #0
 8014fee:	4604      	mov	r4, r0
 8014ff0:	4608      	mov	r0, r1
 8014ff2:	602b      	str	r3, [r5, #0]
 8014ff4:	f7ef fce6 	bl	80049c4 <_isatty>
 8014ff8:	1c43      	adds	r3, r0, #1
 8014ffa:	d102      	bne.n	8015002 <_isatty_r+0x1a>
 8014ffc:	682b      	ldr	r3, [r5, #0]
 8014ffe:	b103      	cbz	r3, 8015002 <_isatty_r+0x1a>
 8015000:	6023      	str	r3, [r4, #0]
 8015002:	bd38      	pop	{r3, r4, r5, pc}
 8015004:	20012a3c 	.word	0x20012a3c

08015008 <_lseek_r>:
 8015008:	b538      	push	{r3, r4, r5, lr}
 801500a:	4d07      	ldr	r5, [pc, #28]	; (8015028 <_lseek_r+0x20>)
 801500c:	4604      	mov	r4, r0
 801500e:	4608      	mov	r0, r1
 8015010:	4611      	mov	r1, r2
 8015012:	2200      	movs	r2, #0
 8015014:	602a      	str	r2, [r5, #0]
 8015016:	461a      	mov	r2, r3
 8015018:	f7ef fcd6 	bl	80049c8 <_lseek>
 801501c:	1c43      	adds	r3, r0, #1
 801501e:	d102      	bne.n	8015026 <_lseek_r+0x1e>
 8015020:	682b      	ldr	r3, [r5, #0]
 8015022:	b103      	cbz	r3, 8015026 <_lseek_r+0x1e>
 8015024:	6023      	str	r3, [r4, #0]
 8015026:	bd38      	pop	{r3, r4, r5, pc}
 8015028:	20012a3c 	.word	0x20012a3c

0801502c <_malloc_usable_size_r>:
 801502c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015030:	1f18      	subs	r0, r3, #4
 8015032:	2b00      	cmp	r3, #0
 8015034:	bfbc      	itt	lt
 8015036:	580b      	ldrlt	r3, [r1, r0]
 8015038:	18c0      	addlt	r0, r0, r3
 801503a:	4770      	bx	lr

0801503c <_read_r>:
 801503c:	b538      	push	{r3, r4, r5, lr}
 801503e:	4d07      	ldr	r5, [pc, #28]	; (801505c <_read_r+0x20>)
 8015040:	4604      	mov	r4, r0
 8015042:	4608      	mov	r0, r1
 8015044:	4611      	mov	r1, r2
 8015046:	2200      	movs	r2, #0
 8015048:	602a      	str	r2, [r5, #0]
 801504a:	461a      	mov	r2, r3
 801504c:	f7ef fc94 	bl	8004978 <_read>
 8015050:	1c43      	adds	r3, r0, #1
 8015052:	d102      	bne.n	801505a <_read_r+0x1e>
 8015054:	682b      	ldr	r3, [r5, #0]
 8015056:	b103      	cbz	r3, 801505a <_read_r+0x1e>
 8015058:	6023      	str	r3, [r4, #0]
 801505a:	bd38      	pop	{r3, r4, r5, pc}
 801505c:	20012a3c 	.word	0x20012a3c

08015060 <_gettimeofday>:
 8015060:	4b02      	ldr	r3, [pc, #8]	; (801506c <_gettimeofday+0xc>)
 8015062:	2258      	movs	r2, #88	; 0x58
 8015064:	601a      	str	r2, [r3, #0]
 8015066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801506a:	4770      	bx	lr
 801506c:	20012a3c 	.word	0x20012a3c

08015070 <_init>:
 8015070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015072:	bf00      	nop
 8015074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015076:	bc08      	pop	{r3}
 8015078:	469e      	mov	lr, r3
 801507a:	4770      	bx	lr

0801507c <_fini>:
 801507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801507e:	bf00      	nop
 8015080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015082:	bc08      	pop	{r3}
 8015084:	469e      	mov	lr, r3
 8015086:	4770      	bx	lr
