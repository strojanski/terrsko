
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000131c8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001240  080133a8  080133a8  000233a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080145e8  080145e8  00031558  2**0
                  CONTENTS
  4 .ARM          00000008  080145e8  080145e8  000245e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080145f0  080145f0  00031558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080145f0  080145f0  000245f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080145f4  080145f4  000245f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001558  20000000  080145f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012ab4  20001558  08015b50  00031558  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001400c  08015b50  0003400c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031558  2**0
                  CONTENTS, READONLY
 12 .debug_info   000568b6  00000000  00000000  00031588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a160  00000000  00000000  00087e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003238  00000000  00000000  00091fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003d40  00000000  00000000  000951d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039e61  00000000  00000000  00098f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005af7e  00000000  00000000  000d2d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00141cad  00000000  00000000  0012dcf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0026f9a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a088  00000000  00000000  0026f9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0003ab09  00000000  00000000  00279a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  002b4588  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  002b45ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001558 	.word	0x20001558
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013390 	.word	0x08013390

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000155c 	.word	0x2000155c
 800021c:	08013390 	.word	0x08013390

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <action_reset>:
 * Each guysko's button action is immediatley reset to zero after being taken into consideration, so that is can be known in the
 * next frame if the action was made once again.
 */

void action_reset(uint8_t action_index) {
	if (action_index == 0) {
 8001048:	b918      	cbnz	r0, 8001052 <action_reset+0xa>
		act_up			=	false;
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <action_reset+0x78>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	4770      	bx	lr
	} else if (action_index == 1) {
 8001052:	2801      	cmp	r0, #1
 8001054:	d010      	beq.n	8001078 <action_reset+0x30>
		act_right		=	false;
	} else if (action_index == 2) {
 8001056:	2802      	cmp	r0, #2
 8001058:	d012      	beq.n	8001080 <action_reset+0x38>
		act_down		=	false;
	} else if (action_index == 3) {
 800105a:	2803      	cmp	r0, #3
 800105c:	d014      	beq.n	8001088 <action_reset+0x40>
		act_left		=	false;
	} else if (action_index == 4) {
 800105e:	2804      	cmp	r0, #4
 8001060:	d016      	beq.n	8001090 <action_reset+0x48>
		ok					=	false;
	} else if (action_index == 5) {
 8001062:	2805      	cmp	r0, #5
 8001064:	d018      	beq.n	8001098 <action_reset+0x50>
		esc					=	false;
	} else if (action_index == 6) {
 8001066:	2806      	cmp	r0, #6
 8001068:	d01a      	beq.n	80010a0 <action_reset+0x58>
		move_up			= false;
	} else if (action_index == 7) {
 800106a:	2807      	cmp	r0, #7
 800106c:	d01c      	beq.n	80010a8 <action_reset+0x60>
		move_right 	= false;
	} else if (action_index == 8) {
 800106e:	2808      	cmp	r0, #8
 8001070:	d01e      	beq.n	80010b0 <action_reset+0x68>
		move_down		= false;
	} else if (action_index == 9) {
 8001072:	2809      	cmp	r0, #9
 8001074:	d020      	beq.n	80010b8 <action_reset+0x70>
		move_left		= false;
	}
}
 8001076:	4770      	bx	lr
		act_right		=	false;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <action_reset+0x7c>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	4770      	bx	lr
		act_down		=	false;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <action_reset+0x80>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
 8001086:	4770      	bx	lr
		act_left		=	false;
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <action_reset+0x84>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
 800108e:	4770      	bx	lr
		ok					=	false;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <action_reset+0x88>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	4770      	bx	lr
		esc					=	false;
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <action_reset+0x8c>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	4770      	bx	lr
		move_up			= false;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <action_reset+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	4770      	bx	lr
		move_right 	= false;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <action_reset+0x94>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	4770      	bx	lr
		move_down		= false;
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <action_reset+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	4770      	bx	lr
		move_left		= false;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <action_reset+0x9c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
}
 80010be:	e7da      	b.n	8001076 <action_reset+0x2e>
 80010c0:	20001577 	.word	0x20001577
 80010c4:	20001576 	.word	0x20001576
 80010c8:	20001574 	.word	0x20001574
 80010cc:	20001575 	.word	0x20001575
 80010d0:	2000157d 	.word	0x2000157d
 80010d4:	20001578 	.word	0x20001578
 80010d8:	2000157c 	.word	0x2000157c
 80010dc:	2000157b 	.word	0x2000157b
 80010e0:	20001579 	.word	0x20001579
 80010e4:	2000157a 	.word	0x2000157a

080010e8 <action_set>:
/*
 * This funcion updates joystick input logicaly
 * the other buttons are set to be handled as interrupts
 */
void action_set(coord_t* joystick_raw) {
	if (joystick_raw->x > 2500) {
 80010e8:	6803      	ldr	r3, [r0, #0]
 80010ea:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80010ee:	4293      	cmp	r3, r2
 80010f0:	dd11      	ble.n	8001116 <action_set+0x2e>
		move_right 	= true;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <action_set+0x58>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
		move_left		= false;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <action_set+0x5c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
	} else if (joystick_raw->x < 1000) {
		move_right 	= false;
		move_left		= true;
	}

	if (joystick_raw->y > 2500) {
 80010fe:	6843      	ldr	r3, [r0, #4]
 8001100:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001104:	4293      	cmp	r3, r2
 8001106:	dd10      	ble.n	800112a <action_set+0x42>
		move_up			= true;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <action_set+0x60>)
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
		move_down		= false;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <action_set+0x64>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	4770      	bx	lr
	} else if (joystick_raw->x < 1000) {
 8001116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800111a:	daf0      	bge.n	80010fe <action_set+0x16>
		move_right 	= false;
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <action_set+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
		move_left		= true;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <action_set+0x5c>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	e7e9      	b.n	80010fe <action_set+0x16>
	} else if (joystick_raw->y < 1000) {
 800112a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800112e:	da05      	bge.n	800113c <action_set+0x54>
		move_up			= false;
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <action_set+0x60>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
		move_down		= true;
 8001136:	4b05      	ldr	r3, [pc, #20]	; (800114c <action_set+0x64>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
	}
}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	2000157b 	.word	0x2000157b
 8001144:	2000157a 	.word	0x2000157a
 8001148:	2000157c 	.word	0x2000157c
 800114c:	20001579 	.word	0x20001579

08001150 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001150:	b510      	push	{r4, lr}
 8001152:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001154:	2400      	movs	r4, #0
 8001156:	9409      	str	r4, [sp, #36]	; 0x24
 8001158:	940a      	str	r4, [sp, #40]	; 0x28
 800115a:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 800115c:	2220      	movs	r2, #32
 800115e:	4621      	mov	r1, r4
 8001160:	a801      	add	r0, sp, #4
 8001162:	f00d fc05 	bl	800e970 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001166:	4820      	ldr	r0, [pc, #128]	; (80011e8 <MX_ADC1_Init+0x98>)
 8001168:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800116c:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800116e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001172:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001174:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001176:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 8001178:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800117a:	6144      	str	r4, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800117c:	2304      	movs	r3, #4
 800117e:	6183      	str	r3, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001180:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001182:	7744      	strb	r4, [r0, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001184:	2301      	movs	r3, #1
 8001186:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001188:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800118c:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800118e:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001190:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001194:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001196:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800119a:	f004 fbd3 	bl	8005944 <HAL_ADC_Init>
 800119e:	b9c8      	cbnz	r0, 80011d4 <MX_ADC1_Init+0x84>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011a0:	2300      	movs	r3, #0
 80011a2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011a4:	a909      	add	r1, sp, #36	; 0x24
 80011a6:	4810      	ldr	r0, [pc, #64]	; (80011e8 <MX_ADC1_Init+0x98>)
 80011a8:	f005 f8fe 	bl	80063a8 <HAL_ADCEx_MultiModeConfigChannel>
 80011ac:	b9a8      	cbnz	r0, 80011da <MX_ADC1_Init+0x8a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_ADC1_Init+0x9c>)
 80011b0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b2:	2306      	movs	r3, #6
 80011b4:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011b6:	2300      	movs	r3, #0
 80011b8:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ba:	227f      	movs	r2, #127	; 0x7f
 80011bc:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011be:	2204      	movs	r2, #4
 80011c0:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 80011c2:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c4:	eb0d 0102 	add.w	r1, sp, r2
 80011c8:	4807      	ldr	r0, [pc, #28]	; (80011e8 <MX_ADC1_Init+0x98>)
 80011ca:	f004 fd69 	bl	8005ca0 <HAL_ADC_ConfigChannel>
 80011ce:	b938      	cbnz	r0, 80011e0 <MX_ADC1_Init+0x90>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d0:	b00c      	add	sp, #48	; 0x30
 80011d2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80011d4:	f000 fed0 	bl	8001f78 <Error_Handler>
 80011d8:	e7e2      	b.n	80011a0 <MX_ADC1_Init+0x50>
    Error_Handler();
 80011da:	f000 fecd 	bl	8001f78 <Error_Handler>
 80011de:	e7e6      	b.n	80011ae <MX_ADC1_Init+0x5e>
    Error_Handler();
 80011e0:	f000 feca 	bl	8001f78 <Error_Handler>
}
 80011e4:	e7f4      	b.n	80011d0 <MX_ADC1_Init+0x80>
 80011e6:	bf00      	nop
 80011e8:	20001588 	.word	0x20001588
 80011ec:	08600004 	.word	0x08600004

080011f0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011f0:	b500      	push	{lr}
 80011f2:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011f4:	2220      	movs	r2, #32
 80011f6:	2100      	movs	r1, #0
 80011f8:	4668      	mov	r0, sp
 80011fa:	f00d fbb9 	bl	800e970 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011fe:	481b      	ldr	r0, [pc, #108]	; (800126c <MX_ADC2_Init+0x7c>)
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_ADC2_Init+0x80>)
 8001202:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001204:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001208:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800120a:	2300      	movs	r3, #0
 800120c:	6083      	str	r3, [r0, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800120e:	60c3      	str	r3, [r0, #12]
  hadc2.Init.GainCompensation = 0;
 8001210:	6103      	str	r3, [r0, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001212:	6143      	str	r3, [r0, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001214:	2204      	movs	r2, #4
 8001216:	6182      	str	r2, [r0, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001218:	7703      	strb	r3, [r0, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800121a:	7743      	strb	r3, [r0, #29]
  hadc2.Init.NbrOfConversion = 1;
 800121c:	2201      	movs	r2, #1
 800121e:	6202      	str	r2, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001220:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001224:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001226:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001228:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800122c:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800122e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001232:	f004 fb87 	bl	8005944 <HAL_ADC_Init>
 8001236:	b990      	cbnz	r0, 800125e <MX_ADC2_Init+0x6e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_ADC2_Init+0x84>)
 800123a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800123c:	2306      	movs	r3, #6
 800123e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001240:	2300      	movs	r3, #0
 8001242:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001244:	227f      	movs	r2, #127	; 0x7f
 8001246:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001248:	2204      	movs	r2, #4
 800124a:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 800124c:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800124e:	4669      	mov	r1, sp
 8001250:	4806      	ldr	r0, [pc, #24]	; (800126c <MX_ADC2_Init+0x7c>)
 8001252:	f004 fd25 	bl	8005ca0 <HAL_ADC_ConfigChannel>
 8001256:	b928      	cbnz	r0, 8001264 <MX_ADC2_Init+0x74>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001258:	b009      	add	sp, #36	; 0x24
 800125a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800125e:	f000 fe8b 	bl	8001f78 <Error_Handler>
 8001262:	e7e9      	b.n	8001238 <MX_ADC2_Init+0x48>
    Error_Handler();
 8001264:	f000 fe88 	bl	8001f78 <Error_Handler>
}
 8001268:	e7f6      	b.n	8001258 <MX_ADC2_Init+0x68>
 800126a:	bf00      	nop
 800126c:	200015f4 	.word	0x200015f4
 8001270:	50000100 	.word	0x50000100
 8001274:	14f00020 	.word	0x14f00020

08001278 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001278:	b510      	push	{r4, lr}
 800127a:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800127c:	2400      	movs	r4, #0
 800127e:	9409      	str	r4, [sp, #36]	; 0x24
 8001280:	940a      	str	r4, [sp, #40]	; 0x28
 8001282:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8001284:	2220      	movs	r2, #32
 8001286:	4621      	mov	r1, r4
 8001288:	a801      	add	r0, sp, #4
 800128a:	f00d fb71 	bl	800e970 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800128e:	481f      	ldr	r0, [pc, #124]	; (800130c <MX_ADC3_Init+0x94>)
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <MX_ADC3_Init+0x98>)
 8001292:	6003      	str	r3, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001294:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001298:	6043      	str	r3, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800129a:	6084      	str	r4, [r0, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800129c:	60c4      	str	r4, [r0, #12]
  hadc3.Init.GainCompensation = 0;
 800129e:	6104      	str	r4, [r0, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012a0:	6144      	str	r4, [r0, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a2:	2304      	movs	r3, #4
 80012a4:	6183      	str	r3, [r0, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80012a6:	7704      	strb	r4, [r0, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80012a8:	7744      	strb	r4, [r0, #29]
  hadc3.Init.NbrOfConversion = 1;
 80012aa:	2301      	movs	r3, #1
 80012ac:	6203      	str	r3, [r0, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012ae:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b2:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012b4:	6304      	str	r4, [r0, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80012b6:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012ba:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80012bc:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012c0:	f004 fb40 	bl	8005944 <HAL_ADC_Init>
 80012c4:	b9c8      	cbnz	r0, 80012fa <MX_ADC3_Init+0x82>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012c6:	2300      	movs	r3, #0
 80012c8:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80012ca:	a909      	add	r1, sp, #36	; 0x24
 80012cc:	480f      	ldr	r0, [pc, #60]	; (800130c <MX_ADC3_Init+0x94>)
 80012ce:	f005 f86b 	bl	80063a8 <HAL_ADCEx_MultiModeConfigChannel>
 80012d2:	b9a8      	cbnz	r0, 8001300 <MX_ADC3_Init+0x88>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_ADC3_Init+0x9c>)
 80012d6:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012d8:	2306      	movs	r3, #6
 80012da:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012dc:	2300      	movs	r3, #0
 80012de:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012e0:	227f      	movs	r2, #127	; 0x7f
 80012e2:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012e4:	2204      	movs	r2, #4
 80012e6:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 80012e8:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012ea:	eb0d 0102 	add.w	r1, sp, r2
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <MX_ADC3_Init+0x94>)
 80012f0:	f004 fcd6 	bl	8005ca0 <HAL_ADC_ConfigChannel>
 80012f4:	b938      	cbnz	r0, 8001306 <MX_ADC3_Init+0x8e>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012f6:	b00c      	add	sp, #48	; 0x30
 80012f8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80012fa:	f000 fe3d 	bl	8001f78 <Error_Handler>
 80012fe:	e7e2      	b.n	80012c6 <MX_ADC3_Init+0x4e>
    Error_Handler();
 8001300:	f000 fe3a 	bl	8001f78 <Error_Handler>
 8001304:	e7e6      	b.n	80012d4 <MX_ADC3_Init+0x5c>
    Error_Handler();
 8001306:	f000 fe37 	bl	8001f78 <Error_Handler>
}
 800130a:	e7f4      	b.n	80012f6 <MX_ADC3_Init+0x7e>
 800130c:	20001660 	.word	0x20001660
 8001310:	50000400 	.word	0x50000400
 8001314:	21800100 	.word	0x21800100

08001318 <MX_ADC4_Init>:
/* ADC4 init function */
// JOYSTICK
void MX_ADC4_Init(void)
{
 8001318:	b500      	push	{lr}
 800131a:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800131c:	2220      	movs	r2, #32
 800131e:	2100      	movs	r1, #0
 8001320:	4668      	mov	r0, sp
 8001322:	f00d fb25 	bl	800e970 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001326:	4822      	ldr	r0, [pc, #136]	; (80013b0 <MX_ADC4_Init+0x98>)
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <MX_ADC4_Init+0x9c>)
 800132a:	6003      	str	r3, [r0, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800132c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001330:	6043      	str	r3, [r0, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001332:	2300      	movs	r3, #0
 8001334:	6083      	str	r3, [r0, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001336:	60c3      	str	r3, [r0, #12]
  hadc4.Init.GainCompensation = 0;
 8001338:	6103      	str	r3, [r0, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800133a:	2201      	movs	r2, #1
 800133c:	6142      	str	r2, [r0, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800133e:	2104      	movs	r1, #4
 8001340:	6181      	str	r1, [r0, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001342:	7703      	strb	r3, [r0, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001344:	7742      	strb	r2, [r0, #29]
  hadc4.Init.NbrOfConversion = 2;
 8001346:	2102      	movs	r1, #2
 8001348:	6201      	str	r1, [r0, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800134a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800134e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001350:	6303      	str	r3, [r0, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001352:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001356:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001358:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800135c:	f004 faf2 	bl	8005944 <HAL_ADC_Init>
 8001360:	b9e0      	cbnz	r0, 800139c <MX_ADC4_Init+0x84>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_ADC4_Init+0xa0>)
 8001364:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001366:	2306      	movs	r3, #6
 8001368:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800136a:	2307      	movs	r3, #7
 800136c:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800136e:	237f      	movs	r3, #127	; 0x7f
 8001370:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001372:	2304      	movs	r3, #4
 8001374:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800137a:	4669      	mov	r1, sp
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <MX_ADC4_Init+0x98>)
 800137e:	f004 fc8f 	bl	8005ca0 <HAL_ADC_ConfigChannel>
 8001382:	b970      	cbnz	r0, 80013a2 <MX_ADC4_Init+0x8a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <MX_ADC4_Init+0xa4>)
 8001386:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001388:	230c      	movs	r3, #12
 800138a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800138c:	4669      	mov	r1, sp
 800138e:	4808      	ldr	r0, [pc, #32]	; (80013b0 <MX_ADC4_Init+0x98>)
 8001390:	f004 fc86 	bl	8005ca0 <HAL_ADC_ConfigChannel>
 8001394:	b940      	cbnz	r0, 80013a8 <MX_ADC4_Init+0x90>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001396:	b009      	add	sp, #36	; 0x24
 8001398:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800139c:	f000 fdec 	bl	8001f78 <Error_Handler>
 80013a0:	e7df      	b.n	8001362 <MX_ADC4_Init+0x4a>
    Error_Handler();
 80013a2:	f000 fde9 	bl	8001f78 <Error_Handler>
 80013a6:	e7ed      	b.n	8001384 <MX_ADC4_Init+0x6c>
    Error_Handler();
 80013a8:	f000 fde6 	bl	8001f78 <Error_Handler>
}
 80013ac:	e7f3      	b.n	8001396 <MX_ADC4_Init+0x7e>
 80013ae:	bf00      	nop
 80013b0:	200016cc 	.word	0x200016cc
 80013b4:	50000500 	.word	0x50000500
 80013b8:	10c00010 	.word	0x10c00010
 80013bc:	14f00020 	.word	0x14f00020

080013c0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013c0:	b530      	push	{r4, r5, lr}
 80013c2:	b0a7      	sub	sp, #156	; 0x9c
 80013c4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	2100      	movs	r1, #0
 80013c8:	9121      	str	r1, [sp, #132]	; 0x84
 80013ca:	9122      	str	r1, [sp, #136]	; 0x88
 80013cc:	9123      	str	r1, [sp, #140]	; 0x8c
 80013ce:	9124      	str	r1, [sp, #144]	; 0x90
 80013d0:	9125      	str	r1, [sp, #148]	; 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d2:	2254      	movs	r2, #84	; 0x54
 80013d4:	a80c      	add	r0, sp, #48	; 0x30
 80013d6:	f00d facb 	bl	800e970 <memset>
  if(adcHandle->Instance==ADC1)
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013e0:	d00c      	beq.n	80013fc <HAL_ADC_MspInit+0x3c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 80013e2:	4a96      	ldr	r2, [pc, #600]	; (800163c <HAL_ADC_MspInit+0x27c>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d03d      	beq.n	8001464 <HAL_ADC_MspInit+0xa4>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 80013e8:	4a95      	ldr	r2, [pc, #596]	; (8001640 <HAL_ADC_MspInit+0x280>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	f000 80a2 	beq.w	8001534 <HAL_ADC_MspInit+0x174>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC4)
 80013f0:	4a94      	ldr	r2, [pc, #592]	; (8001644 <HAL_ADC_MspInit+0x284>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	f000 80d2 	beq.w	800159c <HAL_ADC_MspInit+0x1dc>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 80013f8:	b027      	add	sp, #156	; 0x9c
 80013fa:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001400:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001402:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001406:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001408:	a80c      	add	r0, sp, #48	; 0x30
 800140a:	f007 fffd 	bl	8009408 <HAL_RCCEx_PeriphCLKConfig>
 800140e:	b9d8      	cbnz	r0, 8001448 <HAL_ADC_MspInit+0x88>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001410:	4a8d      	ldr	r2, [pc, #564]	; (8001648 <HAL_ADC_MspInit+0x288>)
 8001412:	6813      	ldr	r3, [r2, #0]
 8001414:	3301      	adds	r3, #1
 8001416:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001418:	2b01      	cmp	r3, #1
 800141a:	d018      	beq.n	800144e <HAL_ADC_MspInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b8b      	ldr	r3, [pc, #556]	; (800164c <HAL_ADC_MspInit+0x28c>)
 800141e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001420:	f042 0201 	orr.w	r2, r2, #1
 8001424:	64da      	str	r2, [r3, #76]	; 0x4c
 8001426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AD0_Pin|AD1_Pin|AD2_Pin|AD3_Pin;
 8001430:	230f      	movs	r3, #15
 8001432:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001434:	2303      	movs	r3, #3
 8001436:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143c:	a921      	add	r1, sp, #132	; 0x84
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001442:	f005 fdcf 	bl	8006fe4 <HAL_GPIO_Init>
 8001446:	e7d7      	b.n	80013f8 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001448:	f000 fd96 	bl	8001f78 <Error_Handler>
 800144c:	e7e0      	b.n	8001410 <HAL_ADC_MspInit+0x50>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800144e:	4b7f      	ldr	r3, [pc, #508]	; (800164c <HAL_ADC_MspInit+0x28c>)
 8001450:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001452:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001456:	64da      	str	r2, [r3, #76]	; 0x4c
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	9b01      	ldr	r3, [sp, #4]
 8001462:	e7db      	b.n	800141c <HAL_ADC_MspInit+0x5c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001464:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001468:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800146a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800146e:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001470:	a80c      	add	r0, sp, #48	; 0x30
 8001472:	f007 ffc9 	bl	8009408 <HAL_RCCEx_PeriphCLKConfig>
 8001476:	2800      	cmp	r0, #0
 8001478:	d14e      	bne.n	8001518 <HAL_ADC_MspInit+0x158>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800147a:	4a73      	ldr	r2, [pc, #460]	; (8001648 <HAL_ADC_MspInit+0x288>)
 800147c:	6813      	ldr	r3, [r2, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001482:	2b01      	cmp	r3, #1
 8001484:	d04b      	beq.n	800151e <HAL_ADC_MspInit+0x15e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001486:	4b71      	ldr	r3, [pc, #452]	; (800164c <HAL_ADC_MspInit+0x28c>)
 8001488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800148a:	f042 0220 	orr.w	r2, r2, #32
 800148e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001490:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001492:	f002 0220 	and.w	r2, r2, #32
 8001496:	9204      	str	r2, [sp, #16]
 8001498:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800149c:	f042 0201 	orr.w	r2, r2, #1
 80014a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80014a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014a4:	f002 0201 	and.w	r2, r2, #1
 80014a8:	9205      	str	r2, [sp, #20]
 80014aa:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ae:	f042 0204 	orr.w	r2, r2, #4
 80014b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80014b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014b6:	f002 0204 	and.w	r2, r2, #4
 80014ba:	9206      	str	r2, [sp, #24]
 80014bc:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014c0:	f042 0202 	orr.w	r2, r2, #2
 80014c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	9307      	str	r3, [sp, #28]
 80014ce:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = AD5_Pin;
 80014d0:	2302      	movs	r3, #2
 80014d2:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d4:	2503      	movs	r5, #3
 80014d6:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2400      	movs	r4, #0
 80014da:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD5_GPIO_Port, &GPIO_InitStruct);
 80014dc:	a921      	add	r1, sp, #132	; 0x84
 80014de:	485c      	ldr	r0, [pc, #368]	; (8001650 <HAL_ADC_MspInit+0x290>)
 80014e0:	f005 fd80 	bl	8006fe4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD8_Pin;
 80014e4:	2320      	movs	r3, #32
 80014e6:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e8:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD8_GPIO_Port, &GPIO_InitStruct);
 80014ec:	a921      	add	r1, sp, #132	; 0x84
 80014ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f2:	f005 fd77 	bl	8006fe4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD4_Pin|AD6_Pin;
 80014f6:	2330      	movs	r3, #48	; 0x30
 80014f8:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014fa:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fe:	a921      	add	r1, sp, #132	; 0x84
 8001500:	4854      	ldr	r0, [pc, #336]	; (8001654 <HAL_ADC_MspInit+0x294>)
 8001502:	f005 fd6f 	bl	8006fe4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD7_Pin;
 8001506:	2304      	movs	r3, #4
 8001508:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150a:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD7_GPIO_Port, &GPIO_InitStruct);
 800150e:	a921      	add	r1, sp, #132	; 0x84
 8001510:	4851      	ldr	r0, [pc, #324]	; (8001658 <HAL_ADC_MspInit+0x298>)
 8001512:	f005 fd67 	bl	8006fe4 <HAL_GPIO_Init>
 8001516:	e76f      	b.n	80013f8 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001518:	f000 fd2e 	bl	8001f78 <Error_Handler>
 800151c:	e7ad      	b.n	800147a <HAL_ADC_MspInit+0xba>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800151e:	4b4b      	ldr	r3, [pc, #300]	; (800164c <HAL_ADC_MspInit+0x28c>)
 8001520:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001522:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001526:	64da      	str	r2, [r3, #76]	; 0x4c
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800152e:	9303      	str	r3, [sp, #12]
 8001530:	9b03      	ldr	r3, [sp, #12]
 8001532:	e7a8      	b.n	8001486 <HAL_ADC_MspInit+0xc6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001538:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800153a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800153e:	931e      	str	r3, [sp, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001540:	a80c      	add	r0, sp, #48	; 0x30
 8001542:	f007 ff61 	bl	8009408 <HAL_RCCEx_PeriphCLKConfig>
 8001546:	b9d8      	cbnz	r0, 8001580 <HAL_ADC_MspInit+0x1c0>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001548:	4a44      	ldr	r2, [pc, #272]	; (800165c <HAL_ADC_MspInit+0x29c>)
 800154a:	6813      	ldr	r3, [r2, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001550:	2b01      	cmp	r3, #1
 8001552:	d018      	beq.n	8001586 <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001554:	4b3d      	ldr	r3, [pc, #244]	; (800164c <HAL_ADC_MspInit+0x28c>)
 8001556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001558:	f042 0208 	orr.w	r2, r2, #8
 800155c:	64da      	str	r2, [r3, #76]	; 0x4c
 800155e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	9309      	str	r3, [sp, #36]	; 0x24
 8001566:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = AD9_Pin|AD10_Pin|AD11_Pin;
 8001568:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800156c:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800156e:	2303      	movs	r3, #3
 8001570:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001576:	a921      	add	r1, sp, #132	; 0x84
 8001578:	4839      	ldr	r0, [pc, #228]	; (8001660 <HAL_ADC_MspInit+0x2a0>)
 800157a:	f005 fd33 	bl	8006fe4 <HAL_GPIO_Init>
 800157e:	e73b      	b.n	80013f8 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001580:	f000 fcfa 	bl	8001f78 <Error_Handler>
 8001584:	e7e0      	b.n	8001548 <HAL_ADC_MspInit+0x188>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001586:	4b31      	ldr	r3, [pc, #196]	; (800164c <HAL_ADC_MspInit+0x28c>)
 8001588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800158a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800158e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	9308      	str	r3, [sp, #32]
 8001598:	9b08      	ldr	r3, [sp, #32]
 800159a:	e7db      	b.n	8001554 <HAL_ADC_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800159c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a0:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80015a6:	931e      	str	r3, [sp, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a8:	a80c      	add	r0, sp, #48	; 0x30
 80015aa:	f007 ff2d 	bl	8009408 <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	2800      	cmp	r0, #0
 80015b0:	d133      	bne.n	800161a <HAL_ADC_MspInit+0x25a>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80015b2:	4a2a      	ldr	r2, [pc, #168]	; (800165c <HAL_ADC_MspInit+0x29c>)
 80015b4:	6813      	ldr	r3, [r2, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d030      	beq.n	8001620 <HAL_ADC_MspInit+0x260>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	4b23      	ldr	r3, [pc, #140]	; (800164c <HAL_ADC_MspInit+0x28c>)
 80015c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015c2:	f042 0202 	orr.w	r2, r2, #2
 80015c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80015d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80015d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80015d6:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d8:	2303      	movs	r3, #3
 80015da:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2500      	movs	r5, #0
 80015de:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	a921      	add	r1, sp, #132	; 0x84
 80015e2:	481d      	ldr	r0, [pc, #116]	; (8001658 <HAL_ADC_MspInit+0x298>)
 80015e4:	f005 fcfe 	bl	8006fe4 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel5;
 80015e8:	481e      	ldr	r0, [pc, #120]	; (8001664 <HAL_ADC_MspInit+0x2a4>)
 80015ea:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <HAL_ADC_MspInit+0x2a8>)
 80015ec:	6003      	str	r3, [r0, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80015ee:	2326      	movs	r3, #38	; 0x26
 80015f0:	6043      	str	r3, [r0, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f2:	6085      	str	r5, [r0, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f4:	60c5      	str	r5, [r0, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	6103      	str	r3, [r0, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015fe:	6143      	str	r3, [r0, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001600:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001604:	6183      	str	r3, [r0, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8001606:	2320      	movs	r3, #32
 8001608:	61c3      	str	r3, [r0, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 800160a:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800160c:	f005 fa04 	bl	8006a18 <HAL_DMA_Init>
 8001610:	b988      	cbnz	r0, 8001636 <HAL_ADC_MspInit+0x276>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_ADC_MspInit+0x2a4>)
 8001614:	6563      	str	r3, [r4, #84]	; 0x54
 8001616:	629c      	str	r4, [r3, #40]	; 0x28
}
 8001618:	e6ee      	b.n	80013f8 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 800161a:	f000 fcad 	bl	8001f78 <Error_Handler>
 800161e:	e7c8      	b.n	80015b2 <HAL_ADC_MspInit+0x1f2>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_ADC_MspInit+0x28c>)
 8001622:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001624:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001628:	64da      	str	r2, [r3, #76]	; 0x4c
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001630:	930a      	str	r3, [sp, #40]	; 0x28
 8001632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001634:	e7c3      	b.n	80015be <HAL_ADC_MspInit+0x1fe>
      Error_Handler();
 8001636:	f000 fc9f 	bl	8001f78 <Error_Handler>
 800163a:	e7ea      	b.n	8001612 <HAL_ADC_MspInit+0x252>
 800163c:	50000100 	.word	0x50000100
 8001640:	50000400 	.word	0x50000400
 8001644:	50000500 	.word	0x50000500
 8001648:	20001580 	.word	0x20001580
 800164c:	40021000 	.word	0x40021000
 8001650:	48001400 	.word	0x48001400
 8001654:	48000800 	.word	0x48000800
 8001658:	48000400 	.word	0x48000400
 800165c:	20001584 	.word	0x20001584
 8001660:	48000c00 	.word	0x48000c00
 8001664:	20001738 	.word	0x20001738
 8001668:	40020058 	.word	0x40020058

0800166c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800166c:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800166e:	4808      	ldr	r0, [pc, #32]	; (8001690 <MX_CRC_Init+0x24>)
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <MX_CRC_Init+0x28>)
 8001672:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001678:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800167a:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800167c:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800167e:	2301      	movs	r3, #1
 8001680:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001682:	f004 ffe7 	bl	8006654 <HAL_CRC_Init>
 8001686:	b900      	cbnz	r0, 800168a <MX_CRC_Init+0x1e>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001688:	bd08      	pop	{r3, pc}
    Error_Handler();
 800168a:	f000 fc75 	bl	8001f78 <Error_Handler>
}
 800168e:	e7fb      	b.n	8001688 <MX_CRC_Init+0x1c>
 8001690:	20001798 	.word	0x20001798
 8001694:	40023000 	.word	0x40023000

08001698 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8001698:	6802      	ldr	r2, [r0, #0]
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_CRC_MspInit+0x28>)
 800169c:	429a      	cmp	r2, r3
 800169e:	d000      	beq.n	80016a2 <HAL_CRC_MspInit+0xa>
 80016a0:	4770      	bx	lr
{
 80016a2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80016a4:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80016a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016ae:	649a      	str	r2, [r3, #72]	; 0x48
 80016b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80016ba:	b002      	add	sp, #8
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40023000 	.word	0x40023000

080016c4 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DAC_HandleTypeDef hdac2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80016c4:	b500      	push	{lr}
 80016c6:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016c8:	2230      	movs	r2, #48	; 0x30
 80016ca:	2100      	movs	r1, #0
 80016cc:	4668      	mov	r0, sp
 80016ce:	f00d f94f 	bl	800e970 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016d2:	4811      	ldr	r0, [pc, #68]	; (8001718 <MX_DAC1_Init+0x54>)
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_DAC1_Init+0x58>)
 80016d6:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016d8:	f005 f833 	bl	8006742 <HAL_DAC_Init>
 80016dc:	b9a8      	cbnz	r0, 800170a <MX_DAC1_Init+0x46>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80016de:	2302      	movs	r3, #2
 80016e0:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80016e2:	2200      	movs	r2, #0
 80016e4:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80016e8:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016ec:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80016ee:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80016f0:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016f2:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80016f4:	2301      	movs	r3, #1
 80016f6:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016f8:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016fa:	4669      	mov	r1, sp
 80016fc:	4806      	ldr	r0, [pc, #24]	; (8001718 <MX_DAC1_Init+0x54>)
 80016fe:	f005 f833 	bl	8006768 <HAL_DAC_ConfigChannel>
 8001702:	b928      	cbnz	r0, 8001710 <MX_DAC1_Init+0x4c>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001704:	b00d      	add	sp, #52	; 0x34
 8001706:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800170a:	f000 fc35 	bl	8001f78 <Error_Handler>
 800170e:	e7e6      	b.n	80016de <MX_DAC1_Init+0x1a>
    Error_Handler();
 8001710:	f000 fc32 	bl	8001f78 <Error_Handler>
}
 8001714:	e7f6      	b.n	8001704 <MX_DAC1_Init+0x40>
 8001716:	bf00      	nop
 8001718:	200017bc 	.word	0x200017bc
 800171c:	50000800 	.word	0x50000800

08001720 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001720:	b500      	push	{lr}
 8001722:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001724:	2230      	movs	r2, #48	; 0x30
 8001726:	2100      	movs	r1, #0
 8001728:	4668      	mov	r0, sp
 800172a:	f00d f921 	bl	800e970 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 800172e:	4811      	ldr	r0, [pc, #68]	; (8001774 <MX_DAC2_Init+0x54>)
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_DAC2_Init+0x58>)
 8001732:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001734:	f005 f805 	bl	8006742 <HAL_DAC_Init>
 8001738:	b9a8      	cbnz	r0, 8001766 <MX_DAC2_Init+0x46>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800173a:	2302      	movs	r3, #2
 800173c:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800173e:	2200      	movs	r2, #0
 8001740:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001744:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001748:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800174a:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800174c:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800174e:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001750:	2301      	movs	r3, #1
 8001752:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001754:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001756:	4669      	mov	r1, sp
 8001758:	4806      	ldr	r0, [pc, #24]	; (8001774 <MX_DAC2_Init+0x54>)
 800175a:	f005 f805 	bl	8006768 <HAL_DAC_ConfigChannel>
 800175e:	b928      	cbnz	r0, 800176c <MX_DAC2_Init+0x4c>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001760:	b00d      	add	sp, #52	; 0x34
 8001762:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001766:	f000 fc07 	bl	8001f78 <Error_Handler>
 800176a:	e7e6      	b.n	800173a <MX_DAC2_Init+0x1a>
    Error_Handler();
 800176c:	f000 fc04 	bl	8001f78 <Error_Handler>
}
 8001770:	e7f6      	b.n	8001760 <MX_DAC2_Init+0x40>
 8001772:	bf00      	nop
 8001774:	200017d0 	.word	0x200017d0
 8001778:	50000c00 	.word	0x50000c00

0800177c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800177c:	b500      	push	{lr}
 800177e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	2300      	movs	r3, #0
 8001782:	9305      	str	r3, [sp, #20]
 8001784:	9306      	str	r3, [sp, #24]
 8001786:	9307      	str	r3, [sp, #28]
 8001788:	9308      	str	r3, [sp, #32]
 800178a:	9309      	str	r3, [sp, #36]	; 0x24
  if(dacHandle->Instance==DAC1)
 800178c:	6803      	ldr	r3, [r0, #0]
 800178e:	4a21      	ldr	r2, [pc, #132]	; (8001814 <HAL_DAC_MspInit+0x98>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d005      	beq.n	80017a0 <HAL_DAC_MspInit+0x24>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
  else if(dacHandle->Instance==DAC2)
 8001794:	4a20      	ldr	r2, [pc, #128]	; (8001818 <HAL_DAC_MspInit+0x9c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01f      	beq.n	80017da <HAL_DAC_MspInit+0x5e>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800179a:	b00b      	add	sp, #44	; 0x2c
 800179c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 80017a0:	4b1e      	ldr	r3, [pc, #120]	; (800181c <HAL_DAC_MspInit+0xa0>)
 80017a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80017aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017ac:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80017b0:	9201      	str	r2, [sp, #4]
 80017b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017b6:	f042 0201 	orr.w	r2, r2, #1
 80017ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DAC1_Pin;
 80017c6:	2310      	movs	r3, #16
 80017c8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ca:	2303      	movs	r3, #3
 80017cc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(DAC1_GPIO_Port, &GPIO_InitStruct);
 80017ce:	a905      	add	r1, sp, #20
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d4:	f005 fc06 	bl	8006fe4 <HAL_GPIO_Init>
 80017d8:	e7df      	b.n	800179a <HAL_DAC_MspInit+0x1e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_DAC_MspInit+0xa0>)
 80017dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80017e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80017e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017e6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80017ea:	9203      	str	r2, [sp, #12]
 80017ec:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017f0:	f042 0201 	orr.w	r2, r2, #1
 80017f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80017f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	9304      	str	r3, [sp, #16]
 80017fe:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = DAC2_Pin;
 8001800:	2340      	movs	r3, #64	; 0x40
 8001802:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001804:	2303      	movs	r3, #3
 8001806:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(DAC2_GPIO_Port, &GPIO_InitStruct);
 8001808:	a905      	add	r1, sp, #20
 800180a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180e:	f005 fbe9 	bl	8006fe4 <HAL_GPIO_Init>
}
 8001812:	e7c2      	b.n	800179a <HAL_DAC_MspInit+0x1e>
 8001814:	50000800 	.word	0x50000800
 8001818:	50000c00 	.word	0x50000c00
 800181c:	40021000 	.word	0x40021000

08001820 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
void MX_DMA_Init(void)
{
 8001820:	b500      	push	{lr}
 8001822:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <MX_DMA_Init+0xc4>)
 8001826:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001828:	f042 0204 	orr.w	r2, r2, #4
 800182c:	649a      	str	r2, [r3, #72]	; 0x48
 800182e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001830:	f002 0204 	and.w	r2, r2, #4
 8001834:	9200      	str	r2, [sp, #0]
 8001836:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001838:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	649a      	str	r2, [r3, #72]	; 0x48
 8001840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	9b01      	ldr	r3, [sp, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 800184a:	4827      	ldr	r0, [pc, #156]	; (80018e8 <MX_DMA_Init+0xc8>)
 800184c:	4b27      	ldr	r3, [pc, #156]	; (80018ec <MX_DMA_Init+0xcc>)
 800184e:	6003      	str	r3, [r0, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_MEM2MEM;
 8001850:	2300      	movs	r3, #0
 8001852:	6043      	str	r3, [r0, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001854:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001858:	6082      	str	r2, [r0, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 800185a:	2240      	movs	r2, #64	; 0x40
 800185c:	60c2      	str	r2, [r0, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_DISABLE;
 800185e:	6103      	str	r3, [r0, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001864:	6142      	str	r2, [r0, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001866:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800186a:	6182      	str	r2, [r0, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 800186c:	61c3      	str	r3, [r0, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_HIGH;
 800186e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001872:	6203      	str	r3, [r0, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8001874:	f005 f8d0 	bl	8006a18 <HAL_DMA_Init>
 8001878:	bb88      	cbnz	r0, 80018de <MX_DMA_Init+0xbe>
    Error_Handler();
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	4611      	mov	r1, r2
 800187e:	200b      	movs	r0, #11
 8001880:	f004 fe8e 	bl	80065a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001884:	200b      	movs	r0, #11
 8001886:	f004 fec3 	bl	8006610 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	4611      	mov	r1, r2
 800188e:	200d      	movs	r0, #13
 8001890:	f004 fe86 	bl	80065a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001894:	200d      	movs	r0, #13
 8001896:	f004 febb 	bl	8006610 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	4611      	mov	r1, r2
 800189e:	200e      	movs	r0, #14
 80018a0:	f004 fe7e 	bl	80065a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80018a4:	200e      	movs	r0, #14
 80018a6:	f004 feb3 	bl	8006610 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	4611      	mov	r1, r2
 80018ae:	200f      	movs	r0, #15
 80018b0:	f004 fe76 	bl	80065a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80018b4:	200f      	movs	r0, #15
 80018b6:	f004 feab 	bl	8006610 <HAL_NVIC_EnableIRQ>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ba:	490d      	ldr	r1, [pc, #52]	; (80018f0 <MX_DMA_Init+0xd0>)
 80018bc:	68cb      	ldr	r3, [r1, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <MX_DMA_Init+0xd4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018ca:	6018      	str	r0, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	68c9      	ldr	r1, [r1, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ce:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018d6:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);

}
 80018d8:	b003      	add	sp, #12
 80018da:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80018de:	f000 fb4b 	bl	8001f78 <Error_Handler>
 80018e2:	e7ca      	b.n	800187a <MX_DMA_Init+0x5a>
 80018e4:	40021000 	.word	0x40021000
 80018e8:	200017e4 	.word	0x200017e4
 80018ec:	40020008 	.word	0x40020008
 80018f0:	e000ed00 	.word	0xe000ed00
 80018f4:	e000e100 	.word	0xe000e100

080018f8 <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80018f8:	b508      	push	{r3, lr}
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80018fa:	480f      	ldr	r0, [pc, #60]	; (8001938 <MX_FDCAN2_Init+0x40>)
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_FDCAN2_Init+0x44>)
 80018fe:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001900:	2300      	movs	r3, #0
 8001902:	6043      	str	r3, [r0, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001904:	6083      	str	r3, [r0, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001906:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001908:	7403      	strb	r3, [r0, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800190a:	7443      	strb	r3, [r0, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800190c:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800190e:	2210      	movs	r2, #16
 8001910:	6142      	str	r2, [r0, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001912:	2201      	movs	r2, #1
 8001914:	6182      	str	r2, [r0, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001916:	2102      	movs	r1, #2
 8001918:	61c1      	str	r1, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800191a:	6201      	str	r1, [r0, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800191c:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800191e:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001920:	62c2      	str	r2, [r0, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001922:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001924:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001926:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001928:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800192a:	f005 fa71 	bl	8006e10 <HAL_FDCAN_Init>
 800192e:	b900      	cbnz	r0, 8001932 <MX_FDCAN2_Init+0x3a>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001930:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001932:	f000 fb21 	bl	8001f78 <Error_Handler>
}
 8001936:	e7fb      	b.n	8001930 <MX_FDCAN2_Init+0x38>
 8001938:	20001844 	.word	0x20001844
 800193c:	40006800 	.word	0x40006800

08001940 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001940:	b510      	push	{r4, lr}
 8001942:	b09c      	sub	sp, #112	; 0x70
 8001944:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001946:	2100      	movs	r1, #0
 8001948:	9117      	str	r1, [sp, #92]	; 0x5c
 800194a:	9118      	str	r1, [sp, #96]	; 0x60
 800194c:	9119      	str	r1, [sp, #100]	; 0x64
 800194e:	911a      	str	r1, [sp, #104]	; 0x68
 8001950:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001952:	2254      	movs	r2, #84	; 0x54
 8001954:	a802      	add	r0, sp, #8
 8001956:	f00d f80b 	bl	800e970 <memset>
  if(fdcanHandle->Instance==FDCAN2)
 800195a:	6822      	ldr	r2, [r4, #0]
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_FDCAN_MspInit+0x84>)
 800195e:	429a      	cmp	r2, r3
 8001960:	d001      	beq.n	8001966 <HAL_FDCAN_MspInit+0x26>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001962:	b01c      	add	sp, #112	; 0x70
 8001964:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196a:	9302      	str	r3, [sp, #8]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800196c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001970:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001972:	a802      	add	r0, sp, #8
 8001974:	f007 fd48 	bl	8009408 <HAL_RCCEx_PeriphCLKConfig>
 8001978:	bb08      	cbnz	r0, 80019be <HAL_FDCAN_MspInit+0x7e>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <HAL_FDCAN_MspInit+0x88>)
 800197c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800197e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001982:	659a      	str	r2, [r3, #88]	; 0x58
 8001984:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001986:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800198a:	9200      	str	r2, [sp, #0]
 800198c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001990:	f042 0202 	orr.w	r2, r2, #2
 8001994:	64da      	str	r2, [r3, #76]	; 0x4c
 8001996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 80019a0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80019a4:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80019b0:	2309      	movs	r3, #9
 80019b2:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	a917      	add	r1, sp, #92	; 0x5c
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <HAL_FDCAN_MspInit+0x8c>)
 80019b8:	f005 fb14 	bl	8006fe4 <HAL_GPIO_Init>
}
 80019bc:	e7d1      	b.n	8001962 <HAL_FDCAN_MspInit+0x22>
      Error_Handler();
 80019be:	f000 fadb 	bl	8001f78 <Error_Handler>
 80019c2:	e7da      	b.n	800197a <HAL_FDCAN_MspInit+0x3a>
 80019c4:	40006800 	.word	0x40006800
 80019c8:	40021000 	.word	0x40021000
 80019cc:	48000400 	.word	0x48000400

080019d0 <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80019d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d2:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	2300      	movs	r3, #0
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	9302      	str	r3, [sp, #8]
 80019da:	9303      	str	r3, [sp, #12]
 80019dc:	9304      	str	r3, [sp, #16]
 80019de:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_FMC_MspInit+0x7c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	b10b      	cbz	r3, 80019ea <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80019e6:	b007      	add	sp, #28
 80019e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_FMC_MspInit+0x7c>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 80019f0:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_FMC_MspInit+0x80>)
 80019f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019f4:	f042 0201 	orr.w	r2, r2, #1
 80019f8:	651a      	str	r2, [r3, #80]	; 0x50
 80019fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001a04:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001a08:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2602      	movs	r6, #2
 8001a0c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2503      	movs	r5, #3
 8001a10:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a12:	240c      	movs	r4, #12
 8001a14:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a16:	a901      	add	r1, sp, #4
 8001a18:	480e      	ldr	r0, [pc, #56]	; (8001a54 <HAL_FMC_MspInit+0x84>)
 8001a1a:	f005 fae3 	bl	8006fe4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001a1e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001a22:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2700      	movs	r7, #0
 8001a28:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a2c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2e:	a901      	add	r1, sp, #4
 8001a30:	4809      	ldr	r0, [pc, #36]	; (8001a58 <HAL_FMC_MspInit+0x88>)
 8001a32:	f005 fad7 	bl	8006fe4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8001a36:	2320      	movs	r3, #32
 8001a38:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a40:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8001a42:	a901      	add	r1, sp, #4
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <HAL_FMC_MspInit+0x8c>)
 8001a46:	f005 facd 	bl	8006fe4 <HAL_GPIO_Init>
 8001a4a:	e7cc      	b.n	80019e6 <HAL_FMC_MspInit+0x16>
 8001a4c:	200018a8 	.word	0x200018a8
 8001a50:	40021000 	.word	0x40021000
 8001a54:	48001000 	.word	0x48001000
 8001a58:	48000c00 	.word	0x48000c00
 8001a5c:	48001800 	.word	0x48001800

08001a60 <MX_FMC_Init>:
{
 8001a60:	b510      	push	{r4, lr}
 8001a62:	b088      	sub	sp, #32
  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001a64:	2220      	movs	r2, #32
 8001a66:	2100      	movs	r1, #0
 8001a68:	4668      	mov	r0, sp
 8001a6a:	f00c ff81 	bl	800e970 <memset>
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001a6e:	4818      	ldr	r0, [pc, #96]	; (8001ad0 <MX_FMC_Init+0x70>)
 8001a70:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001a74:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001a76:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001a7a:	6043      	str	r3, [r0, #4]
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6082      	str	r2, [r0, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001a80:	60c2      	str	r2, [r0, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001a82:	6102      	str	r2, [r0, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001a84:	2110      	movs	r1, #16
 8001a86:	6141      	str	r1, [r0, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001a88:	6182      	str	r2, [r0, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001a8a:	61c2      	str	r2, [r0, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001a8c:	6202      	str	r2, [r0, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a92:	6243      	str	r3, [r0, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001a94:	6282      	str	r2, [r0, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001a96:	62c2      	str	r2, [r0, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001a98:	6302      	str	r2, [r0, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001a9a:	6342      	str	r2, [r0, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001a9c:	6382      	str	r2, [r0, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001a9e:	63c2      	str	r2, [r0, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8001aa0:	6442      	str	r2, [r0, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001aa2:	6402      	str	r2, [r0, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8001aa4:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
  Timing.AddressSetupTime = 1;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	9300      	str	r3, [sp, #0]
  Timing.AddressHoldTime = 15;
 8001aac:	240f      	movs	r4, #15
 8001aae:	9401      	str	r4, [sp, #4]
  Timing.DataSetupTime = 1;
 8001ab0:	9302      	str	r3, [sp, #8]
  Timing.DataHoldTime = 1;
 8001ab2:	9303      	str	r3, [sp, #12]
  Timing.BusTurnAroundDuration = 1;
 8001ab4:	9304      	str	r3, [sp, #16]
  Timing.CLKDivision = 16;
 8001ab6:	9105      	str	r1, [sp, #20]
  Timing.DataLatency = 17;
 8001ab8:	2311      	movs	r3, #17
 8001aba:	9306      	str	r3, [sp, #24]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001abc:	4669      	mov	r1, sp
 8001abe:	f007 fed3 	bl	8009868 <HAL_SRAM_Init>
 8001ac2:	b908      	cbnz	r0, 8001ac8 <MX_FMC_Init+0x68>
}
 8001ac4:	b008      	add	sp, #32
 8001ac6:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8001ac8:	f000 fa56 	bl	8001f78 <Error_Handler>
}
 8001acc:	e7fa      	b.n	8001ac4 <MX_FMC_Init+0x64>
 8001ace:	bf00      	nop
 8001ad0:	200018ac 	.word	0x200018ac

08001ad4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001ad4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001ad6:	f7ff ff7b 	bl	80019d0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ada:	bd08      	pop	{r3, pc}

08001adc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ae0:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae2:	2400      	movs	r4, #0
 8001ae4:	9407      	str	r4, [sp, #28]
 8001ae6:	9408      	str	r4, [sp, #32]
 8001ae8:	9409      	str	r4, [sp, #36]	; 0x24
 8001aea:	940a      	str	r4, [sp, #40]	; 0x28
 8001aec:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aee:	4b71      	ldr	r3, [pc, #452]	; (8001cb4 <MX_GPIO_Init+0x1d8>)
 8001af0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001af2:	f042 0210 	orr.w	r2, r2, #16
 8001af6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001af8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001afa:	f002 0210 	and.w	r2, r2, #16
 8001afe:	9200      	str	r2, [sp, #0]
 8001b00:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b04:	f042 0204 	orr.w	r2, r2, #4
 8001b08:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b0c:	f002 0204 	and.w	r2, r2, #4
 8001b10:	9201      	str	r2, [sp, #4]
 8001b12:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b16:	f042 0220 	orr.w	r2, r2, #32
 8001b1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b1e:	f002 0220 	and.w	r2, r2, #32
 8001b22:	9202      	str	r2, [sp, #8]
 8001b24:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b28:	f042 0201 	orr.w	r2, r2, #1
 8001b2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b30:	f002 0201 	and.w	r2, r2, #1
 8001b34:	9203      	str	r2, [sp, #12]
 8001b36:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b3a:	f042 0202 	orr.w	r2, r2, #2
 8001b3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b42:	f002 0202 	and.w	r2, r2, #2
 8001b46:	9204      	str	r2, [sp, #16]
 8001b48:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b4c:	f042 0208 	orr.w	r2, r2, #8
 8001b50:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b54:	f002 0208 	and.w	r2, r2, #8
 8001b58:	9205      	str	r2, [sp, #20]
 8001b5a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b62:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b6a:	9306      	str	r3, [sp, #24]
 8001b6c:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin|LED3_Pin|LED0_Pin
 8001b6e:	f8df a150 	ldr.w	sl, [pc, #336]	; 8001cc0 <MX_GPIO_Init+0x1e4>
 8001b72:	4622      	mov	r2, r4
 8001b74:	f640 013c 	movw	r1, #2108	; 0x83c
 8001b78:	4650      	mov	r0, sl
 8001b7a:	f005 fb1d 	bl	80071b8 <HAL_GPIO_WritePin>
                          |ARDUINO_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);
 8001b7e:	4f4e      	ldr	r7, [pc, #312]	; (8001cb8 <MX_GPIO_Init+0x1dc>)
 8001b80:	4622      	mov	r2, r4
 8001b82:	210f      	movs	r1, #15
 8001b84:	4638      	mov	r0, r7
 8001b86:	f005 fb17 	bl	80071b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8001b8a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8001cc4 <MX_GPIO_Init+0x1e8>
 8001b8e:	4622      	mov	r2, r4
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	4648      	mov	r0, r9
 8001b94:	f005 fb10 	bl	80071b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001b98:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8001cc8 <MX_GPIO_Init+0x1ec>
 8001b9c:	4622      	mov	r2, r4
 8001b9e:	2108      	movs	r1, #8
 8001ba0:	4640      	mov	r0, r8
 8001ba2:	f005 fb09 	bl	80071b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIN_SLP_Pin|LCD_BKLT_Pin, GPIO_PIN_RESET);
 8001ba6:	f8df b124 	ldr.w	fp, [pc, #292]	; 8001ccc <MX_GPIO_Init+0x1f0>
 8001baa:	4622      	mov	r2, r4
 8001bac:	2160      	movs	r1, #96	; 0x60
 8001bae:	4658      	mov	r0, fp
 8001bb0:	f005 fb02 	bl	80071b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001bb4:	4e41      	ldr	r6, [pc, #260]	; (8001cbc <MX_GPIO_Init+0x1e0>)
 8001bb6:	4622      	mov	r2, r4
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4630      	mov	r0, r6
 8001bbc:	f005 fafc 	bl	80071b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2102      	movs	r1, #2
 8001bc4:	4630      	mov	r0, r6
 8001bc6:	f005 faf7 	bl	80071b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = JOY_BTN_Pin|BTN_OK_Pin;
 8001bca:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001bce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd0:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd2:	2501      	movs	r5, #1
 8001bd4:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd6:	a907      	add	r1, sp, #28
 8001bd8:	4638      	mov	r0, r7
 8001bda:	f005 fa03 	bl	8006fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_ESC_Pin;
 8001bde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001be2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001be4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001be8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bea:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(BTN_ESC_GPIO_Port, &GPIO_InitStruct);
 8001bec:	a907      	add	r1, sp, #28
 8001bee:	4638      	mov	r0, r7
 8001bf0:	f005 f9f8 	bl	8006fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|ARDUINO_CS_Pin;
 8001bf4:	f640 0338 	movw	r3, #2104	; 0x838
 8001bf8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfa:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c00:	a907      	add	r1, sp, #28
 8001c02:	4650      	mov	r0, sl
 8001c04:	f005 f9ee 	bl	8006fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
 8001c08:	230f      	movs	r3, #15
 8001c0a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c12:	a907      	add	r1, sp, #28
 8001c14:	4638      	mov	r0, r7
 8001c16:	f005 f9e5 	bl	8006fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001c26:	a907      	add	r1, sp, #28
 8001c28:	4650      	mov	r0, sl
 8001c2a:	f005 f9db 	bl	8006fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_DOWN_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 8001c2e:	f240 1343 	movw	r3, #323	; 0x143
 8001c32:	9307      	str	r3, [sp, #28]
//  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c38:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c3a:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c3c:	a907      	add	r1, sp, #28
 8001c3e:	4648      	mov	r0, r9
 8001c40:	f005 f9d0 	bl	8006fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	a907      	add	r1, sp, #28
 8001c50:	4648      	mov	r0, r9
 8001c52:	f005 f9c7 	bl	8006fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001c56:	2308      	movs	r3, #8
 8001c58:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001c60:	a907      	add	r1, sp, #28
 8001c62:	4640      	mov	r0, r8
 8001c64:	f005 f9be 	bl	8006fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_PENIRQ_Pin;
 8001c68:	2340      	movs	r3, #64	; 0x40
 8001c6a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_PENIRQ_GPIO_Port, &GPIO_InitStruct);
 8001c70:	a907      	add	r1, sp, #28
 8001c72:	4640      	mov	r0, r8
 8001c74:	f005 f9b6 	bl	8006fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LIN_SLP_Pin|LCD_BKLT_Pin;
 8001c78:	2360      	movs	r3, #96	; 0x60
 8001c7a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	a907      	add	r1, sp, #28
 8001c84:	4658      	mov	r0, fp
 8001c86:	f005 f9ad 	bl	8006fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001c8a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8001c92:	a907      	add	r1, sp, #28
 8001c94:	4630      	mov	r0, r6
 8001c96:	f005 f9a5 	bl	8006fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca0:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca2:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	a907      	add	r1, sp, #28
 8001ca6:	4630      	mov	r0, r6
 8001ca8:	f005 f99c 	bl	8006fe4 <HAL_GPIO_Init>

}
 8001cac:	b00d      	add	sp, #52	; 0x34
 8001cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	48000800 	.word	0x48000800
 8001cbc:	48001000 	.word	0x48001000
 8001cc0:	48001400 	.word	0x48001400
 8001cc4:	48001800 	.word	0x48001800
 8001cc8:	48000c00 	.word	0x48000c00
 8001ccc:	48000400 	.word	0x48000400

08001cd0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cd0:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cd2:	4812      	ldr	r0, [pc, #72]	; (8001d1c <MX_I2C1_Init+0x4c>)
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <MX_I2C1_Init+0x50>)
 8001cd6:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10902A95;
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <MX_I2C1_Init+0x54>)
 8001cda:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce4:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ce6:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ce8:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cea:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cec:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cee:	f005 fab1 	bl	8007254 <HAL_I2C_Init>
 8001cf2:	b950      	cbnz	r0, 8001d0a <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4809      	ldr	r0, [pc, #36]	; (8001d1c <MX_I2C1_Init+0x4c>)
 8001cf8:	f005 fe17 	bl	800792a <HAL_I2CEx_ConfigAnalogFilter>
 8001cfc:	b940      	cbnz	r0, 8001d10 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 5) != HAL_OK)
 8001cfe:	2105      	movs	r1, #5
 8001d00:	4806      	ldr	r0, [pc, #24]	; (8001d1c <MX_I2C1_Init+0x4c>)
 8001d02:	f005 fe40 	bl	8007986 <HAL_I2CEx_ConfigDigitalFilter>
 8001d06:	b930      	cbnz	r0, 8001d16 <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d08:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001d0a:	f000 f935 	bl	8001f78 <Error_Handler>
 8001d0e:	e7f1      	b.n	8001cf4 <MX_I2C1_Init+0x24>
    Error_Handler();
 8001d10:	f000 f932 	bl	8001f78 <Error_Handler>
 8001d14:	e7f3      	b.n	8001cfe <MX_I2C1_Init+0x2e>
    Error_Handler();
 8001d16:	f000 f92f 	bl	8001f78 <Error_Handler>
}
 8001d1a:	e7f5      	b.n	8001d08 <MX_I2C1_Init+0x38>
 8001d1c:	200019c4 	.word	0x200019c4
 8001d20:	40005400 	.word	0x40005400
 8001d24:	10902a95 	.word	0x10902a95

08001d28 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001d28:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d2a:	4815      	ldr	r0, [pc, #84]	; (8001d80 <MX_I2C2_Init+0x58>)
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <MX_I2C2_Init+0x5c>)
 8001d2e:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x60505F8C;
 8001d30:	f103 5301 	add.w	r3, r3, #541065216	; 0x20400000
 8001d34:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001d38:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 8001d3c:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d42:	2201      	movs	r2, #1
 8001d44:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d46:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d48:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d4a:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d4c:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d4e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d50:	f005 fa80 	bl	8007254 <HAL_I2C_Init>
 8001d54:	b950      	cbnz	r0, 8001d6c <MX_I2C2_Init+0x44>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d56:	2100      	movs	r1, #0
 8001d58:	4809      	ldr	r0, [pc, #36]	; (8001d80 <MX_I2C2_Init+0x58>)
 8001d5a:	f005 fde6 	bl	800792a <HAL_I2CEx_ConfigAnalogFilter>
 8001d5e:	b940      	cbnz	r0, 8001d72 <MX_I2C2_Init+0x4a>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d60:	2100      	movs	r1, #0
 8001d62:	4807      	ldr	r0, [pc, #28]	; (8001d80 <MX_I2C2_Init+0x58>)
 8001d64:	f005 fe0f 	bl	8007986 <HAL_I2CEx_ConfigDigitalFilter>
 8001d68:	b930      	cbnz	r0, 8001d78 <MX_I2C2_Init+0x50>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d6a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001d6c:	f000 f904 	bl	8001f78 <Error_Handler>
 8001d70:	e7f1      	b.n	8001d56 <MX_I2C2_Init+0x2e>
    Error_Handler();
 8001d72:	f000 f901 	bl	8001f78 <Error_Handler>
 8001d76:	e7f3      	b.n	8001d60 <MX_I2C2_Init+0x38>
    Error_Handler();
 8001d78:	f000 f8fe 	bl	8001f78 <Error_Handler>
}
 8001d7c:	e7f5      	b.n	8001d6a <MX_I2C2_Init+0x42>
 8001d7e:	bf00      	nop
 8001d80:	20001a10 	.word	0x20001a10
 8001d84:	40005800 	.word	0x40005800

08001d88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d8c:	b0a1      	sub	sp, #132	; 0x84
 8001d8e:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	2100      	movs	r1, #0
 8001d92:	911b      	str	r1, [sp, #108]	; 0x6c
 8001d94:	911c      	str	r1, [sp, #112]	; 0x70
 8001d96:	911d      	str	r1, [sp, #116]	; 0x74
 8001d98:	911e      	str	r1, [sp, #120]	; 0x78
 8001d9a:	911f      	str	r1, [sp, #124]	; 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d9c:	2254      	movs	r2, #84	; 0x54
 8001d9e:	a806      	add	r0, sp, #24
 8001da0:	f00c fde6 	bl	800e970 <memset>
  if(i2cHandle->Instance==I2C1)
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	4a5d      	ldr	r2, [pc, #372]	; (8001f1c <HAL_I2C_MspInit+0x194>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d006      	beq.n	8001dba <HAL_I2C_MspInit+0x32>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 8001dac:	4a5c      	ldr	r2, [pc, #368]	; (8001f20 <HAL_I2C_MspInit+0x198>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	f000 8086 	beq.w	8001ec0 <HAL_I2C_MspInit+0x138>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001db4:	b021      	add	sp, #132	; 0x84
 8001db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001dba:	2340      	movs	r3, #64	; 0x40
 8001dbc:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dbe:	a806      	add	r0, sp, #24
 8001dc0:	f007 fb22 	bl	8009408 <HAL_RCCEx_PeriphCLKConfig>
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	d172      	bne.n	8001eae <HAL_I2C_MspInit+0x126>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	4e56      	ldr	r6, [pc, #344]	; (8001f24 <HAL_I2C_MspInit+0x19c>)
 8001dca:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	64f3      	str	r3, [r6, #76]	; 0x4c
 8001dd2:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ddc:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001dde:	f043 0302 	orr.w	r3, r3, #2
 8001de2:	64f3      	str	r3, [r6, #76]	; 0x4c
 8001de4:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	9302      	str	r3, [sp, #8]
 8001dec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df2:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df4:	f04f 0912 	mov.w	r9, #18
 8001df8:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2500      	movs	r5, #0
 8001dfe:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	951e      	str	r5, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e02:	f04f 0804 	mov.w	r8, #4
 8001e06:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0a:	a91b      	add	r1, sp, #108	; 0x6c
 8001e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e10:	f005 f8e8 	bl	8006fe4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e14:	2780      	movs	r7, #128	; 0x80
 8001e16:	971b      	str	r7, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e18:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	951e      	str	r5, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e20:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e24:	a91b      	add	r1, sp, #108	; 0x6c
 8001e26:	4840      	ldr	r0, [pc, #256]	; (8001f28 <HAL_I2C_MspInit+0x1a0>)
 8001e28:	f005 f8dc 	bl	8006fe4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e2c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001e2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e32:	65b3      	str	r3, [r6, #88]	; 0x58
 8001e34:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3a:	9303      	str	r3, [sp, #12]
 8001e3c:	9b03      	ldr	r3, [sp, #12]
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8001e3e:	483b      	ldr	r0, [pc, #236]	; (8001f2c <HAL_I2C_MspInit+0x1a4>)
 8001e40:	4b3b      	ldr	r3, [pc, #236]	; (8001f30 <HAL_I2C_MspInit+0x1a8>)
 8001e42:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001e44:	2310      	movs	r3, #16
 8001e46:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e48:	6085      	str	r5, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e4a:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e4c:	6107      	str	r7, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e4e:	6145      	str	r5, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e50:	6185      	str	r5, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001e52:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e54:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001e56:	f004 fddf 	bl	8006a18 <HAL_DMA_Init>
 8001e5a:	bb58      	cbnz	r0, 8001eb4 <HAL_I2C_MspInit+0x12c>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001e5c:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <HAL_I2C_MspInit+0x1a4>)
 8001e5e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001e60:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8001e62:	4834      	ldr	r0, [pc, #208]	; (8001f34 <HAL_I2C_MspInit+0x1ac>)
 8001e64:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <HAL_I2C_MspInit+0x1b0>)
 8001e66:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001e68:	2311      	movs	r3, #17
 8001e6a:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e6c:	2310      	movs	r3, #16
 8001e6e:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e74:	2280      	movs	r2, #128	; 0x80
 8001e76:	6102      	str	r2, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e78:	6143      	str	r3, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e7a:	6183      	str	r3, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001e7c:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e7e:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001e80:	f004 fdca 	bl	8006a18 <HAL_DMA_Init>
 8001e84:	b9c8      	cbnz	r0, 8001eba <HAL_I2C_MspInit+0x132>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001e86:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_I2C_MspInit+0x1ac>)
 8001e88:	63a3      	str	r3, [r4, #56]	; 0x38
 8001e8a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4611      	mov	r1, r2
 8001e90:	201f      	movs	r0, #31
 8001e92:	f004 fb85 	bl	80065a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e96:	201f      	movs	r0, #31
 8001e98:	f004 fbba 	bl	8006610 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	2020      	movs	r0, #32
 8001ea2:	f004 fb7d 	bl	80065a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001ea6:	2020      	movs	r0, #32
 8001ea8:	f004 fbb2 	bl	8006610 <HAL_NVIC_EnableIRQ>
 8001eac:	e782      	b.n	8001db4 <HAL_I2C_MspInit+0x2c>
      Error_Handler();
 8001eae:	f000 f863 	bl	8001f78 <Error_Handler>
 8001eb2:	e789      	b.n	8001dc8 <HAL_I2C_MspInit+0x40>
      Error_Handler();
 8001eb4:	f000 f860 	bl	8001f78 <Error_Handler>
 8001eb8:	e7d0      	b.n	8001e5c <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 8001eba:	f000 f85d 	bl	8001f78 <Error_Handler>
 8001ebe:	e7e2      	b.n	8001e86 <HAL_I2C_MspInit+0xfe>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec4:	a806      	add	r0, sp, #24
 8001ec6:	f007 fa9f 	bl	8009408 <HAL_RCCEx_PeriphCLKConfig>
 8001eca:	bb18      	cbnz	r0, 8001f14 <HAL_I2C_MspInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ecc:	4c15      	ldr	r4, [pc, #84]	; (8001f24 <HAL_I2C_MspInit+0x19c>)
 8001ece:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001ed6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	9304      	str	r3, [sp, #16]
 8001ede:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ee0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ee4:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee6:	2312      	movs	r3, #18
 8001ee8:	931c      	str	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	931d      	str	r3, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	931e      	str	r3, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	931f      	str	r3, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef6:	a91b      	add	r1, sp, #108	; 0x6c
 8001ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efc:	f005 f872 	bl	8006fe4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f06:	65a3      	str	r3, [r4, #88]	; 0x58
 8001f08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0e:	9305      	str	r3, [sp, #20]
 8001f10:	9b05      	ldr	r3, [sp, #20]
}
 8001f12:	e74f      	b.n	8001db4 <HAL_I2C_MspInit+0x2c>
      Error_Handler();
 8001f14:	f000 f830 	bl	8001f78 <Error_Handler>
 8001f18:	e7d8      	b.n	8001ecc <HAL_I2C_MspInit+0x144>
 8001f1a:	bf00      	nop
 8001f1c:	40005400 	.word	0x40005400
 8001f20:	40005800 	.word	0x40005800
 8001f24:	40021000 	.word	0x40021000
 8001f28:	48000400 	.word	0x48000400
 8001f2c:	20001904 	.word	0x20001904
 8001f30:	40020030 	.word	0x40020030
 8001f34:	20001964 	.word	0x20001964
 8001f38:	40020044 	.word	0x40020044

08001f3c <joystick_init>:
 */
#include "joystick.h"

void joystick_init(joystick_t *joystick)
{
	joystick->raw_min.x = 640;
 8001f3c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001f40:	6003      	str	r3, [r0, #0]
	joystick->raw_max.x = 3070;
 8001f42:	f640 33fe 	movw	r3, #3070	; 0xbfe
 8001f46:	6083      	str	r3, [r0, #8]
	joystick->raw_min.y = 733;
 8001f48:	f240 23dd 	movw	r3, #733	; 0x2dd
 8001f4c:	6043      	str	r3, [r0, #4]
	joystick->raw_max.y = 3185;
 8001f4e:	f640 4371 	movw	r3, #3185	; 0xc71
 8001f52:	60c3      	str	r3, [r0, #12]
	joystick->out_max.x = 90;
 8001f54:	235a      	movs	r3, #90	; 0x5a
 8001f56:	6103      	str	r3, [r0, #16]
	joystick->out_max.y = 90;
 8001f58:	6143      	str	r3, [r0, #20]


	joystick->x_k = (float) joystick->out_max.x / (joystick->raw_max.x - joystick->raw_min.x);
 8001f5a:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <joystick_init+0x34>)
 8001f5c:	6183      	str	r3, [r0, #24]
	joystick->y_k = (float) joystick->out_max.y / (joystick->raw_max.y - joystick->raw_min.y);
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <joystick_init+0x38>)
 8001f60:	61c3      	str	r3, [r0, #28]
	joystick->n.x = (joystick->raw_max.x+joystick->raw_min.x)/2;
 8001f62:	f240 733f 	movw	r3, #1855	; 0x73f
 8001f66:	6203      	str	r3, [r0, #32]
	joystick->n.y = (joystick->raw_max.y+joystick->raw_min.y)/2;
 8001f68:	f240 73a7 	movw	r3, #1959	; 0x7a7
 8001f6c:	6243      	str	r3, [r0, #36]	; 0x24

}
 8001f6e:	4770      	bx	lr
 8001f70:	3d17b426 	.word	0x3d17b426
 8001f74:	3d1657b3 	.word	0x3d1657b3

08001f78 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001f78:	b082      	sub	sp, #8
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f7a:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	volatile int a = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	9301      	str	r3, [sp, #4]
	while (1)
	{
		a++;
 8001f80:	9b01      	ldr	r3, [sp, #4]
 8001f82:	3301      	adds	r3, #1
 8001f84:	9301      	str	r3, [sp, #4]
	while (1)
 8001f86:	e7fb      	b.n	8001f80 <Error_Handler+0x8>

08001f88 <SystemClock_Config>:
{
 8001f88:	b500      	push	{lr}
 8001f8a:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f8c:	2238      	movs	r2, #56	; 0x38
 8001f8e:	2100      	movs	r1, #0
 8001f90:	a806      	add	r0, sp, #24
 8001f92:	f00c fced 	bl	800e970 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f96:	2000      	movs	r0, #0
 8001f98:	9001      	str	r0, [sp, #4]
 8001f9a:	9002      	str	r0, [sp, #8]
 8001f9c:	9003      	str	r0, [sp, #12]
 8001f9e:	9004      	str	r0, [sp, #16]
 8001fa0:	9005      	str	r0, [sp, #20]
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001fa2:	f006 fd15 	bl	80089d0 <HAL_PWREx_ControlVoltageScaling>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSE;
 8001fa6:	2321      	movs	r3, #33	; 0x21
 8001fa8:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001faa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001fae:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fb8:	2103      	movs	r1, #3
 8001fba:	910e      	str	r1, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001fbc:	920f      	str	r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 42;
 8001fbe:	222a      	movs	r2, #42	; 0x2a
 8001fc0:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fc2:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8001fc4:	2206      	movs	r2, #6
 8001fc6:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fc8:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fca:	a806      	add	r0, sp, #24
 8001fcc:	f006 fe3e 	bl	8008c4c <HAL_RCC_OscConfig>
 8001fd0:	b978      	cbnz	r0, 8001ff2 <SystemClock_Config+0x6a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fd2:	230f      	movs	r3, #15
 8001fd4:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fde:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fe0:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_10) != HAL_OK)
 8001fe2:	210a      	movs	r1, #10
 8001fe4:	a801      	add	r0, sp, #4
 8001fe6:	f007 f8e9 	bl	80091bc <HAL_RCC_ClockConfig>
 8001fea:	b920      	cbnz	r0, 8001ff6 <SystemClock_Config+0x6e>
}
 8001fec:	b015      	add	sp, #84	; 0x54
 8001fee:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001ff2:	f7ff ffc1 	bl	8001f78 <Error_Handler>
		Error_Handler();
 8001ff6:	f7ff ffbf 	bl	8001f78 <Error_Handler>
	...

08001ffc <main>:
{
 8001ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002000:	b08e      	sub	sp, #56	; 0x38
	coord_t joystick_raw = {0, 0};
 8002002:	2400      	movs	r4, #0
 8002004:	940c      	str	r4, [sp, #48]	; 0x30
 8002006:	940d      	str	r4, [sp, #52]	; 0x34
	coord_t joystick_new = {0, 0};
 8002008:	940a      	str	r4, [sp, #40]	; 0x28
 800200a:	940b      	str	r4, [sp, #44]	; 0x2c
	HAL_Init();
 800200c:	f003 fc64 	bl	80058d8 <HAL_Init>
	SystemClock_Config();
 8002010:	f7ff ffba 	bl	8001f88 <SystemClock_Config>
	MX_GPIO_Init();
 8002014:	f7ff fd62 	bl	8001adc <MX_GPIO_Init>
	MX_ADC1_Init();
 8002018:	f7ff f89a 	bl	8001150 <MX_ADC1_Init>
	MX_ADC2_Init();
 800201c:	f7ff f8e8 	bl	80011f0 <MX_ADC2_Init>
	MX_FMC_Init();
 8002020:	f7ff fd1e 	bl	8001a60 <MX_FMC_Init>
	MX_I2C2_Init();
 8002024:	f7ff fe80 	bl	8001d28 <MX_I2C2_Init>
	MX_UART4_Init();
 8002028:	f002 fd2c 	bl	8004a84 <MX_UART4_Init>
	MX_UART5_Init();
 800202c:	f002 fd5e 	bl	8004aec <MX_UART5_Init>
	MX_USART1_UART_Init();
 8002030:	f002 fd90 	bl	8004b54 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8002034:	f002 fe88 	bl	8004d48 <MX_USART2_UART_Init>
	MX_QUADSPI1_Init();
 8002038:	f000 fd08 	bl	8002a4c <MX_QUADSPI1_Init>
	MX_SPI1_Init();
 800203c:	f002 f8a8 	bl	8004190 <MX_SPI1_Init>
	MX_TIM5_Init();
 8002040:	f002 fae2 	bl	8004608 <MX_TIM5_Init>
	MX_TIM8_Init();
 8002044:	f002 fb56 	bl	80046f4 <MX_TIM8_Init>
	MX_TIM20_Init();
 8002048:	f002 fc74 	bl	8004934 <MX_TIM20_Init>
	MX_ADC3_Init();
 800204c:	f7ff f914 	bl	8001278 <MX_ADC3_Init>
	MX_DAC1_Init();
 8002050:	f7ff fb38 	bl	80016c4 <MX_DAC1_Init>
	MX_DAC2_Init();
 8002054:	f7ff fb64 	bl	8001720 <MX_DAC2_Init>
	MX_FDCAN2_Init();
 8002058:	f7ff fc4e 	bl	80018f8 <MX_FDCAN2_Init>
	MX_I2C1_Init();
 800205c:	f7ff fe38 	bl	8001cd0 <MX_I2C1_Init>
	MX_TIM15_Init();
 8002060:	f002 fbf0 	bl	8004844 <MX_TIM15_Init>
	MX_USART3_UART_Init();
 8002064:	f002 fea4 	bl	8004db0 <MX_USART3_UART_Init>
	MX_USB_Device_Init();
 8002068:	f00b f89c 	bl	800d1a4 <MX_USB_Device_Init>
	MX_DMA_Init();
 800206c:	f7ff fbd8 	bl	8001820 <MX_DMA_Init>
	MX_CRC_Init();
 8002070:	f7ff fafc 	bl	800166c <MX_CRC_Init>
	MX_ADC4_Init(); // bug workaround: https://community.st.com/s/question/0D50X0000BVnBhASQV/bug-report-dma-and-adc-initialization-order-changed-in-stm32f4-hal-v1241-causing-incorrect-adc-operation
 8002074:	f7ff f950 	bl	8001318 <MX_ADC4_Init>
	for (uint8_t i = 0; i < 3; i++)
 8002078:	e01d      	b.n	80020b6 <main+0xba>
		HAL_Delay(100);
 800207a:	2064      	movs	r0, #100	; 0x64
 800207c:	f003 fc4e 	bl	800591c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, LED0_Pin | LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_SET);
 8002080:	4e6b      	ldr	r6, [pc, #428]	; (8002230 <main+0x234>)
 8002082:	2201      	movs	r2, #1
 8002084:	213c      	movs	r1, #60	; 0x3c
 8002086:	4630      	mov	r0, r6
 8002088:	f005 f896 	bl	80071b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, LED4_Pin | LED5_Pin | LED6_Pin | LED7_Pin, GPIO_PIN_SET);
 800208c:	4d69      	ldr	r5, [pc, #420]	; (8002234 <main+0x238>)
 800208e:	2201      	movs	r2, #1
 8002090:	210f      	movs	r1, #15
 8002092:	4628      	mov	r0, r5
 8002094:	f005 f890 	bl	80071b8 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8002098:	2064      	movs	r0, #100	; 0x64
 800209a:	f003 fc3f 	bl	800591c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, LED0_Pin | LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 800209e:	2200      	movs	r2, #0
 80020a0:	213c      	movs	r1, #60	; 0x3c
 80020a2:	4630      	mov	r0, r6
 80020a4:	f005 f888 	bl	80071b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, LED4_Pin | LED5_Pin | LED6_Pin | LED7_Pin, GPIO_PIN_RESET);
 80020a8:	2200      	movs	r2, #0
 80020aa:	210f      	movs	r1, #15
 80020ac:	4628      	mov	r0, r5
 80020ae:	f005 f883 	bl	80071b8 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 3; i++)
 80020b2:	3401      	adds	r4, #1
 80020b4:	b2e4      	uxtb	r4, r4
 80020b6:	2c02      	cmp	r4, #2
 80020b8:	d9df      	bls.n	800207a <main+0x7e>
	LCD_Init();
 80020ba:	f009 ff55 	bl	800bf68 <LCD_Init>
	LCD_UG_init();
 80020be:	f00a f8c7 	bl	800c250 <LCD_UG_init>
	UG_DriverRegister(DRIVER_FILL_FRAME, (void *)_HW_FillFrame_);
 80020c2:	495d      	ldr	r1, [pc, #372]	; (8002238 <main+0x23c>)
 80020c4:	2001      	movs	r0, #1
 80020c6:	f00a f98f 	bl	800c3e8 <UG_DriverRegister>
	joystick_init(&joystick);
 80020ca:	4668      	mov	r0, sp
 80020cc:	f7ff ff36 	bl	8001f3c <joystick_init>
	HAL_ADC_Start_DMA(&hadc4, &joystick_raw, 2);
 80020d0:	2202      	movs	r2, #2
 80020d2:	a90c      	add	r1, sp, #48	; 0x30
 80020d4:	4859      	ldr	r0, [pc, #356]	; (800223c <main+0x240>)
 80020d6:	f004 f8cb 	bl	8006270 <HAL_ADC_Start_DMA>
	HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 2);
 80020da:	2202      	movs	r2, #2
 80020dc:	2101      	movs	r1, #1
 80020de:	2006      	movs	r0, #6
 80020e0:	f004 fa5e 	bl	80065a0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020e4:	2006      	movs	r0, #6
 80020e6:	f004 fa93 	bl	8006610 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 2);
 80020ea:	2202      	movs	r2, #2
 80020ec:	2101      	movs	r1, #1
 80020ee:	2007      	movs	r0, #7
 80020f0:	f004 fa56 	bl	80065a0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020f4:	2007      	movs	r0, #7
 80020f6:	f004 fa8b 	bl	8006610 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 2);
 80020fa:	2202      	movs	r2, #2
 80020fc:	2101      	movs	r1, #1
 80020fe:	200a      	movs	r0, #10
 8002100:	f004 fa4e 	bl	80065a0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002104:	2017      	movs	r0, #23
 8002106:	f004 fa83 	bl	8006610 <HAL_NVIC_EnableIRQ>
	init_world();
 800210a:	f001 ff89 	bl	8004020 <init_world>
	guysko* player = new_guysko();
 800210e:	f003 faa4 	bl	800565a <new_guysko>
 8002112:	4605      	mov	r5, r0
	movable* beings = new_movables();
 8002114:	f003 fada 	bl	80056cc <new_movables>
	block_c new_camera_x = camera_x_block;
 8002118:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8002250 <main+0x254>
 800211c:	f8b8 4000 	ldrh.w	r4, [r8]
	block_c new_camera_y = camera_y_block;
 8002120:	4f47      	ldr	r7, [pc, #284]	; (8002240 <main+0x244>)
 8002122:	883e      	ldrh	r6, [r7, #0]
	player->pos->x = block_to_pixel(camera_x_block);
 8002124:	4620      	mov	r0, r4
 8002126:	f002 ff6a 	bl	8004ffe <block_to_pixel>
 800212a:	692b      	ldr	r3, [r5, #16]
 800212c:	8018      	strh	r0, [r3, #0]
	player->pos->y = block_to_pixel(camera_y_block);
 800212e:	8838      	ldrh	r0, [r7, #0]
 8002130:	f002 ff65 	bl	8004ffe <block_to_pixel>
 8002134:	692b      	ldr	r3, [r5, #16]
 8002136:	8058      	strh	r0, [r3, #2]
	update_camera_center(new_camera_x, new_camera_y);
 8002138:	4631      	mov	r1, r6
 800213a:	4620      	mov	r0, r4
 800213c:	f000 fe92 	bl	8002e64 <update_camera_center>
	old_camera_x = camera_x_block;
 8002140:	f8b8 2000 	ldrh.w	r2, [r8]
 8002144:	4b3f      	ldr	r3, [pc, #252]	; (8002244 <main+0x248>)
 8002146:	801a      	strh	r2, [r3, #0]
	old_camera_y = camera_y_block;
 8002148:	883a      	ldrh	r2, [r7, #0]
 800214a:	4b3f      	ldr	r3, [pc, #252]	; (8002248 <main+0x24c>)
 800214c:	801a      	strh	r2, [r3, #0]
	draw_scene(true);
 800214e:	2001      	movs	r0, #1
 8002150:	f000 fb9e 	bl	8002890 <draw_scene>
 8002154:	e01c      	b.n	8002190 <main+0x194>
		if (camera_x_block - player->pos->x / BLOCK_WIDTH > GUYSKO_WINDOW_SPAN_PIXEL_X / BLOCK_WIDTH) {
 8002156:	3303      	adds	r3, #3
 8002158:	e032      	b.n	80021c0 <main+0x1c4>
		} else if (camera_x_block - player->pos->x / BLOCK_WIDTH < - GUYSKO_WINDOW_SPAN_PIXEL_X / BLOCK_WIDTH) {
 800215a:	f113 0f12 	cmn.w	r3, #18
 800215e:	da3d      	bge.n	80021dc <main+0x1e0>
			new_camera_x = camera_x_block + abs(-camera_x_block - GUYSKO_WINDOW_SPAN_PIXEL_X / BLOCK_WIDTH + player->pos->x / BLOCK_WIDTH);
 8002160:	f06f 0411 	mvn.w	r4, #17
 8002164:	1aa4      	subs	r4, r4, r2
 8002166:	440c      	add	r4, r1
 8002168:	2c00      	cmp	r4, #0
 800216a:	bfb8      	it	lt
 800216c:	4264      	neglt	r4, r4
 800216e:	fa12 f484 	uxtah	r4, r2, r4
 8002172:	b2a4      	uxth	r4, r4
 8002174:	e032      	b.n	80021dc <main+0x1e0>
			new_camera_y = (camera_y_block * BLOCK_WIDTH - abs(camera_y_block * BLOCK_WIDTH - GUYSKO_WINDOW_SPAN_PIXEL_Y - player->pos->y)) / BLOCK_WIDTH;
 8002176:	f3c3 068f 	ubfx	r6, r3, #2, #16
		update_camera_center(new_camera_x, new_camera_y);
 800217a:	4631      	mov	r1, r6
 800217c:	4620      	mov	r0, r4
 800217e:	f000 fe71 	bl	8002e64 <update_camera_center>
		action_set(&joystick_raw);
 8002182:	a80c      	add	r0, sp, #48	; 0x30
 8002184:	f7fe ffb0 	bl	80010e8 <action_set>
		while (!cycle)
 8002188:	4b30      	ldr	r3, [pc, #192]	; (800224c <main+0x250>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d04a      	beq.n	8002226 <main+0x22a>
		cycle = false;
 8002190:	2000      	movs	r0, #0
 8002192:	4b2e      	ldr	r3, [pc, #184]	; (800224c <main+0x250>)
 8002194:	7018      	strb	r0, [r3, #0]
		draw_scene(false);
 8002196:	f000 fb7b 	bl	8002890 <draw_scene>
		old_camera_x = camera_x_block;
 800219a:	4f2d      	ldr	r7, [pc, #180]	; (8002250 <main+0x254>)
 800219c:	883a      	ldrh	r2, [r7, #0]
 800219e:	4b29      	ldr	r3, [pc, #164]	; (8002244 <main+0x248>)
 80021a0:	801a      	strh	r2, [r3, #0]
		old_camera_y = camera_y_block;
 80021a2:	4b27      	ldr	r3, [pc, #156]	; (8002240 <main+0x244>)
 80021a4:	881a      	ldrh	r2, [r3, #0]
 80021a6:	4b28      	ldr	r3, [pc, #160]	; (8002248 <main+0x24c>)
 80021a8:	801a      	strh	r2, [r3, #0]
		refresh_guysko(player, FPS);
 80021aa:	4b2a      	ldr	r3, [pc, #168]	; (8002254 <main+0x258>)
 80021ac:	7819      	ldrb	r1, [r3, #0]
 80021ae:	4628      	mov	r0, r5
 80021b0:	f003 fa20 	bl	80055f4 <refresh_guysko>
		if (camera_x_block - player->pos->x / BLOCK_WIDTH > GUYSKO_WINDOW_SPAN_PIXEL_X / BLOCK_WIDTH) {
 80021b4:	883a      	ldrh	r2, [r7, #0]
 80021b6:	6928      	ldr	r0, [r5, #16]
 80021b8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	dbca      	blt.n	8002156 <main+0x15a>
 80021c0:	1099      	asrs	r1, r3, #2
 80021c2:	eba2 03a3 	sub.w	r3, r2, r3, asr #2
 80021c6:	2b12      	cmp	r3, #18
 80021c8:	ddc7      	ble.n	800215a <main+0x15e>
			new_camera_x = camera_x_block - abs(camera_x_block - GUYSKO_WINDOW_SPAN_PIXEL_X / BLOCK_WIDTH - player->pos->x / BLOCK_WIDTH);
 80021ca:	f1a2 0412 	sub.w	r4, r2, #18
 80021ce:	1a64      	subs	r4, r4, r1
 80021d0:	2c00      	cmp	r4, #0
 80021d2:	bfb8      	it	lt
 80021d4:	4264      	neglt	r4, r4
 80021d6:	b2a4      	uxth	r4, r4
 80021d8:	1b14      	subs	r4, r2, r4
 80021da:	b2a4      	uxth	r4, r4
		if (camera_y_block * BLOCK_WIDTH - player->pos->y > GUYSKO_WINDOW_SPAN_PIXEL_Y) {
 80021dc:	4b18      	ldr	r3, [pc, #96]	; (8002240 <main+0x244>)
 80021de:	881a      	ldrh	r2, [r3, #0]
 80021e0:	0091      	lsls	r1, r2, #2
 80021e2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80021e6:	ebc3 0082 	rsb	r0, r3, r2, lsl #2
 80021ea:	2814      	cmp	r0, #20
 80021ec:	dd09      	ble.n	8002202 <main+0x206>
			new_camera_y = (camera_y_block * BLOCK_WIDTH - abs(camera_y_block * BLOCK_WIDTH - GUYSKO_WINDOW_SPAN_PIXEL_Y - player->pos->y)) / BLOCK_WIDTH;
 80021ee:	3a05      	subs	r2, #5
 80021f0:	ebc3 0382 	rsb	r3, r3, r2, lsl #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bfb8      	it	lt
 80021f8:	425b      	neglt	r3, r3
 80021fa:	1acb      	subs	r3, r1, r3
 80021fc:	d5bb      	bpl.n	8002176 <main+0x17a>
 80021fe:	3303      	adds	r3, #3
 8002200:	e7b9      	b.n	8002176 <main+0x17a>
		} else if (camera_y_block * BLOCK_WIDTH - player->pos->y < (-1) * GUYSKO_WINDOW_SPAN_PIXEL_Y) {
 8002202:	f110 0f14 	cmn.w	r0, #20
 8002206:	dab8      	bge.n	800217a <main+0x17e>
			new_camera_y = (camera_y_block * BLOCK_WIDTH + abs((-1) * camera_y_block * BLOCK_WIDTH - GUYSKO_WINDOW_SPAN_PIXEL_Y + player->pos->y)) / BLOCK_WIDTH;
 8002208:	3205      	adds	r2, #5
 800220a:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
 800220e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8002212:	2a00      	cmp	r2, #0
 8002214:	bfb8      	it	lt
 8002216:	4252      	neglt	r2, r2
 8002218:	188b      	adds	r3, r1, r2
 800221a:	d402      	bmi.n	8002222 <main+0x226>
 800221c:	f3c3 068f 	ubfx	r6, r3, #2, #16
 8002220:	e7ab      	b.n	800217a <main+0x17e>
 8002222:	3303      	adds	r3, #3
 8002224:	e7fa      	b.n	800221c <main+0x220>
			action_set(&joystick_raw);
 8002226:	a80c      	add	r0, sp, #48	; 0x30
 8002228:	f7fe ff5e 	bl	80010e8 <action_set>
 800222c:	e7ac      	b.n	8002188 <main+0x18c>
 800222e:	bf00      	nop
 8002230:	48001400 	.word	0x48001400
 8002234:	48000800 	.word	0x48000800
 8002238:	0800c239 	.word	0x0800c239
 800223c:	200016cc 	.word	0x200016cc
 8002240:	200121b6 	.word	0x200121b6
 8002244:	200121ba 	.word	0x200121ba
 8002248:	200121bc 	.word	0x200121bc
 800224c:	20001a5c 	.word	0x20001a5c
 8002250:	200121b4 	.word	0x200121b4
 8002254:	20001000 	.word	0x20001000

08002258 <is_light_source>:
		_sky,
		_empty		// currently sky defaults to _empty, we want to see some blocks under ground
};

bool is_light_source(uint8_t material) {
	uint8_t full_cell = material << 4 | material;
 8002258:	ea40 1c00 	orr.w	ip, r0, r0, lsl #4
 800225c:	fa4f fc8c 	sxtb.w	ip, ip
	for (uint8_t i = 0; i < N_LIGHT_SOURCES; i++) {
 8002260:	2300      	movs	r3, #0
 8002262:	2b02      	cmp	r3, #2
 8002264:	d80c      	bhi.n	8002280 <is_light_source+0x28>
		if (light_sources[i] == material) {
 8002266:	4a09      	ldr	r2, [pc, #36]	; (800228c <is_light_source+0x34>)
 8002268:	5cd1      	ldrb	r1, [r2, r3]
 800226a:	4281      	cmp	r1, r0
 800226c:	d00a      	beq.n	8002284 <is_light_source+0x2c>
			return true;
		}

		uint8_t full_source = light_sources[i] << 4 | light_sources[i];
 800226e:	b24a      	sxtb	r2, r1
 8002270:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8002274:	b252      	sxtb	r2, r2
		if (full_source == full_cell) {
 8002276:	4594      	cmp	ip, r2
 8002278:	d006      	beq.n	8002288 <is_light_source+0x30>
	for (uint8_t i = 0; i < N_LIGHT_SOURCES; i++) {
 800227a:	3301      	adds	r3, #1
 800227c:	b2db      	uxtb	r3, r3
 800227e:	e7f0      	b.n	8002262 <is_light_source+0xa>
			return true;
		}

	}
	return false;
 8002280:	2000      	movs	r0, #0
 8002282:	4770      	bx	lr
			return true;
 8002284:	2001      	movs	r0, #1
 8002286:	4770      	bx	lr
			return true;
 8002288:	2001      	movs	r0, #1
}
 800228a:	4770      	bx	lr
 800228c:	20001004 	.word	0x20001004

08002290 <map_name_to_material>:
//#define COLOR_GRASS {C_GREEN, C_GREEN, C_DARK_GREEN, C_GREEN}

uint16_t* map_name_to_material (block_t block) {

	//_dirt
	if (block == 1) {
 8002290:	2801      	cmp	r0, #1
 8002292:	d01b      	beq.n	80022cc <map_name_to_material+0x3c>
		return C_DIRT;
	}
	//_grass
	else if (block == 2) {
 8002294:	2802      	cmp	r0, #2
 8002296:	d01b      	beq.n	80022d0 <map_name_to_material+0x40>
		return C_GRASS;
	}
	//_wood
	else if (block == 3) {
 8002298:	2803      	cmp	r0, #3
 800229a:	d01b      	beq.n	80022d4 <map_name_to_material+0x44>
		return C_WOOD;
	}
	//_sky
	else if (block == 4) {
 800229c:	2804      	cmp	r0, #4
 800229e:	d01b      	beq.n	80022d8 <map_name_to_material+0x48>
		return C_SKY;
	}
	//_water
	else if (block == 5) {
 80022a0:	2805      	cmp	r0, #5
 80022a2:	d01b      	beq.n	80022dc <map_name_to_material+0x4c>
		return C_WATER;
	}
	//_sand
	else if (block == 6) {
 80022a4:	2806      	cmp	r0, #6
 80022a6:	d01b      	beq.n	80022e0 <map_name_to_material+0x50>
		return C_GRASS;
	}
	//_rock
	else if (block == 7) {
 80022a8:	2807      	cmp	r0, #7
 80022aa:	d01b      	beq.n	80022e4 <map_name_to_material+0x54>
		return C_ROCK;
	}
	//_lava
	else if (block == 8) {
 80022ac:	2808      	cmp	r0, #8
 80022ae:	d01b      	beq.n	80022e8 <map_name_to_material+0x58>
		return C_LAVA;
	}
	//_red_wood
	else if (block == 9) {
 80022b0:	2809      	cmp	r0, #9
 80022b2:	d01b      	beq.n	80022ec <map_name_to_material+0x5c>
		return C_RED_WOOD;
	}
	//_gold
	else if (block == 10) {
 80022b4:	280a      	cmp	r0, #10
 80022b6:	d01b      	beq.n	80022f0 <map_name_to_material+0x60>
		return C_GRASS;
	}
	//_diamond
	else if (block == 11) {
 80022b8:	280b      	cmp	r0, #11
 80022ba:	d01b      	beq.n	80022f4 <map_name_to_material+0x64>
		return C_BG_DIRT;
	}
	//_dirt_bg
	else if (block == 12) {
 80022bc:	280c      	cmp	r0, #12
 80022be:	d01b      	beq.n	80022f8 <map_name_to_material+0x68>
uint16_t* map_name_to_material (block_t block) {
 80022c0:	b082      	sub	sp, #8
		return C_BG_DIRT;
	}
	uint16_t BLANK[4] = {0x0, 0x0, 0x0, 0x0};
 80022c2:	2000      	movs	r0, #0
 80022c4:	9000      	str	r0, [sp, #0]
 80022c6:	9001      	str	r0, [sp, #4]
	return BLANK;
}
 80022c8:	b002      	add	sp, #8
 80022ca:	4770      	bx	lr
		return C_DIRT;
 80022cc:	480b      	ldr	r0, [pc, #44]	; (80022fc <map_name_to_material+0x6c>)
 80022ce:	4770      	bx	lr
		return C_GRASS;
 80022d0:	480b      	ldr	r0, [pc, #44]	; (8002300 <map_name_to_material+0x70>)
 80022d2:	4770      	bx	lr
		return C_WOOD;
 80022d4:	480b      	ldr	r0, [pc, #44]	; (8002304 <map_name_to_material+0x74>)
 80022d6:	4770      	bx	lr
		return C_SKY;
 80022d8:	480b      	ldr	r0, [pc, #44]	; (8002308 <map_name_to_material+0x78>)
 80022da:	4770      	bx	lr
		return C_WATER;
 80022dc:	480b      	ldr	r0, [pc, #44]	; (800230c <map_name_to_material+0x7c>)
 80022de:	4770      	bx	lr
		return C_GRASS;
 80022e0:	4807      	ldr	r0, [pc, #28]	; (8002300 <map_name_to_material+0x70>)
 80022e2:	4770      	bx	lr
		return C_ROCK;
 80022e4:	480a      	ldr	r0, [pc, #40]	; (8002310 <map_name_to_material+0x80>)
 80022e6:	4770      	bx	lr
		return C_LAVA;
 80022e8:	480a      	ldr	r0, [pc, #40]	; (8002314 <map_name_to_material+0x84>)
 80022ea:	4770      	bx	lr
		return C_RED_WOOD;
 80022ec:	480a      	ldr	r0, [pc, #40]	; (8002318 <map_name_to_material+0x88>)
 80022ee:	4770      	bx	lr
		return C_GRASS;
 80022f0:	4803      	ldr	r0, [pc, #12]	; (8002300 <map_name_to_material+0x70>)
 80022f2:	4770      	bx	lr
		return C_BG_DIRT;
 80022f4:	4809      	ldr	r0, [pc, #36]	; (800231c <map_name_to_material+0x8c>)
 80022f6:	4770      	bx	lr
		return C_BG_DIRT;
 80022f8:	4808      	ldr	r0, [pc, #32]	; (800231c <map_name_to_material+0x8c>)
}
 80022fa:	4770      	bx	lr
 80022fc:	20001008 	.word	0x20001008
 8002300:	20001010 	.word	0x20001010
 8002304:	20001050 	.word	0x20001050
 8002308:	20001038 	.word	0x20001038
 800230c:	20001048 	.word	0x20001048
 8002310:	20001030 	.word	0x20001030
 8002314:	20001018 	.word	0x20001018
 8002318:	20001028 	.word	0x20001028
 800231c:	20001a60 	.word	0x20001a60

08002320 <apply_shading>:
#define RGB565_RED 0xF800
#define RGB565_GREEN 0x7E0
#define RGB565_BLUE 0x1F

// Computes colors for some illumination factor
uint16_t* apply_shading(uint16_t colors[4], float illumination) {
 8002320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002324:	ed2d 8b02 	vpush	{d8}
 8002328:	b083      	sub	sp, #12
 800232a:	4682      	mov	sl, r0
 800232c:	eef0 8a40 	vmov.f32	s17, s0

	for (uint8_t i = 0; i < 4; i++) {
 8002330:	2400      	movs	r4, #0
 8002332:	e03c      	b.n	80023ae <apply_shading+0x8e>
		uint16_t r = (colors[i] & RGB565_RED) >> 11;
		uint16_t b = colors[i] & RGB565_BLUE;

		// For dirt, remove less red and green to get a better color
		if (colors[i] == C_DIRT[0]) {
			r = (uint8_t) (r * MIN(1, illumination * 1.3));
 8002334:	f7fe f91e 	bl	8000574 <__aeabi_i2d>
 8002338:	4680      	mov	r8, r0
 800233a:	4689      	mov	r9, r1
 800233c:	ee18 0a90 	vmov	r0, s17
 8002340:	f7fe f92a 	bl	8000598 <__aeabi_f2d>
 8002344:	a358      	add	r3, pc, #352	; (adr r3, 80024a8 <apply_shading+0x188>)
 8002346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234a:	f7fe f97d 	bl	8000648 <__aeabi_dmul>
 800234e:	4606      	mov	r6, r0
 8002350:	460f      	mov	r7, r1
 8002352:	2200      	movs	r2, #0
 8002354:	4b50      	ldr	r3, [pc, #320]	; (8002498 <apply_shading+0x178>)
 8002356:	f7fe fc07 	bl	8000b68 <__aeabi_dcmpgt>
 800235a:	b108      	cbz	r0, 8002360 <apply_shading+0x40>
 800235c:	2600      	movs	r6, #0
 800235e:	4f4e      	ldr	r7, [pc, #312]	; (8002498 <apply_shading+0x178>)
 8002360:	4632      	mov	r2, r6
 8002362:	463b      	mov	r3, r7
 8002364:	4640      	mov	r0, r8
 8002366:	4649      	mov	r1, r9
 8002368:	f7fe f96e 	bl	8000648 <__aeabi_dmul>
 800236c:	f7fe fc44 	bl	8000bf8 <__aeabi_d2uiz>
 8002370:	fa5f f880 	uxtb.w	r8, r0
			g = (uint8_t) (g * MIN(1, illumination * 1.3));
 8002374:	4628      	mov	r0, r5
 8002376:	f7fe f8fd 	bl	8000574 <__aeabi_i2d>
 800237a:	4632      	mov	r2, r6
 800237c:	463b      	mov	r3, r7
 800237e:	f7fe f963 	bl	8000648 <__aeabi_dmul>
 8002382:	f7fe fc39 	bl	8000bf8 <__aeabi_d2uiz>
 8002386:	b2c3      	uxtb	r3, r0

			b = (uint8_t) (b * illumination);
 8002388:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800238c:	ee28 8a28 	vmul.f32	s16, s16, s17
 8002390:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002394:	edcd 7a01 	vstr	s15, [sp, #4]
 8002398:	f89d 2004 	ldrb.w	r2, [sp, #4]
			g = (uint8_t) (g * illumination);
			b = (uint8_t) (b * illumination);
		}

		// MAKE SURE TO 0 PAD TO GET RGB OF LENGTH 4
		uint16_t rgb = (r << 11) | (g << 5) | (b);
 800239c:	015b      	lsls	r3, r3, #5
 800239e:	ea43 23c8 	orr.w	r3, r3, r8, lsl #11
 80023a2:	b21b      	sxth	r3, r3
 80023a4:	4313      	orrs	r3, r2

		colors[i] = rgb;
 80023a6:	f82a 300b 	strh.w	r3, [sl, fp]
	for (uint8_t i = 0; i < 4; i++) {
 80023aa:	3401      	adds	r4, #1
 80023ac:	b2e4      	uxtb	r4, r4
 80023ae:	2c03      	cmp	r4, #3
 80023b0:	d86b      	bhi.n	800248a <apply_shading+0x16a>
		uint16_t g = (colors[i] & RGB565_GREEN) >> 5;
 80023b2:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 80023b6:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
 80023ba:	f3c3 1545 	ubfx	r5, r3, #5, #6
		uint16_t r = (colors[i] & RGB565_RED) >> 11;
 80023be:	0ad8      	lsrs	r0, r3, #11
		uint16_t b = colors[i] & RGB565_BLUE;
 80023c0:	f003 021f 	and.w	r2, r3, #31
 80023c4:	ee08 2a10 	vmov	s16, r2
		if (colors[i] == C_DIRT[0]) {
 80023c8:	4a34      	ldr	r2, [pc, #208]	; (800249c <apply_shading+0x17c>)
 80023ca:	8812      	ldrh	r2, [r2, #0]
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d0b1      	beq.n	8002334 <apply_shading+0x14>
		} else if (colors[i] == C_BG_DIRT[0]) {
 80023d0:	4a33      	ldr	r2, [pc, #204]	; (80024a0 <apply_shading+0x180>)
 80023d2:	8812      	ldrh	r2, [r2, #0]
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d022      	beq.n	800241e <apply_shading+0xfe>
			r = (uint8_t) (r * illumination);
 80023d8:	ee07 0a90 	vmov	s15, r0
 80023dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e0:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80023e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023e8:	edcd 7a01 	vstr	s15, [sp, #4]
 80023ec:	f89d 8004 	ldrb.w	r8, [sp, #4]
			g = (uint8_t) (g * illumination);
 80023f0:	ee07 5a90 	vmov	s15, r5
 80023f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023f8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80023fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002400:	edcd 7a01 	vstr	s15, [sp, #4]
 8002404:	f89d 3004 	ldrb.w	r3, [sp, #4]
			b = (uint8_t) (b * illumination);
 8002408:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800240c:	ee28 8a28 	vmul.f32	s16, s16, s17
 8002410:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002414:	edcd 7a01 	vstr	s15, [sp, #4]
 8002418:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800241c:	e7be      	b.n	800239c <apply_shading+0x7c>
			r = (uint8_t) (r * MIN(1, illumination * 1.5));
 800241e:	f7fe f8a9 	bl	8000574 <__aeabi_i2d>
 8002422:	4680      	mov	r8, r0
 8002424:	4689      	mov	r9, r1
 8002426:	ee18 0a90 	vmov	r0, s17
 800242a:	f7fe f8b5 	bl	8000598 <__aeabi_f2d>
 800242e:	2200      	movs	r2, #0
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <apply_shading+0x184>)
 8002432:	f7fe f909 	bl	8000648 <__aeabi_dmul>
 8002436:	4606      	mov	r6, r0
 8002438:	460f      	mov	r7, r1
 800243a:	2200      	movs	r2, #0
 800243c:	4b16      	ldr	r3, [pc, #88]	; (8002498 <apply_shading+0x178>)
 800243e:	f7fe fb93 	bl	8000b68 <__aeabi_dcmpgt>
 8002442:	b108      	cbz	r0, 8002448 <apply_shading+0x128>
 8002444:	2600      	movs	r6, #0
 8002446:	4f14      	ldr	r7, [pc, #80]	; (8002498 <apply_shading+0x178>)
 8002448:	4632      	mov	r2, r6
 800244a:	463b      	mov	r3, r7
 800244c:	4640      	mov	r0, r8
 800244e:	4649      	mov	r1, r9
 8002450:	f7fe f8fa 	bl	8000648 <__aeabi_dmul>
 8002454:	f7fe fbd0 	bl	8000bf8 <__aeabi_d2uiz>
 8002458:	fa5f f880 	uxtb.w	r8, r0
			g = (uint8_t) (g * illumination);
 800245c:	ee07 5a90 	vmov	s15, r5
 8002460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002464:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8002468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800246c:	edcd 7a01 	vstr	s15, [sp, #4]
 8002470:	f89d 3004 	ldrb.w	r3, [sp, #4]
			b = (uint8_t) (b * illumination);
 8002474:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8002478:	ee28 8a28 	vmul.f32	s16, s16, s17
 800247c:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002480:	edcd 7a01 	vstr	s15, [sp, #4]
 8002484:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002488:	e788      	b.n	800239c <apply_shading+0x7c>
	}

	return colors;
}
 800248a:	4650      	mov	r0, sl
 800248c:	b003      	add	sp, #12
 800248e:	ecbd 8b02 	vpop	{d8}
 8002492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002496:	bf00      	nop
 8002498:	3ff00000 	.word	0x3ff00000
 800249c:	20001008 	.word	0x20001008
 80024a0:	20001a60 	.word	0x20001a60
 80024a4:	3ff80000 	.word	0x3ff80000
 80024a8:	cccccccd 	.word	0xcccccccd
 80024ac:	3ff4cccc 	.word	0x3ff4cccc

080024b0 <create_block>:

/* Creates block with given coordinates and width */
block* create_block(uint16_t x, uint16_t y, uint16_t colors[4], uint8_t type, float illumination) {
 80024b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024b4:	ed2d 8b02 	vpush	{d8}
 80024b8:	b082      	sub	sp, #8
 80024ba:	4680      	mov	r8, r0
 80024bc:	460f      	mov	r7, r1
 80024be:	4615      	mov	r5, r2
 80024c0:	461e      	mov	r6, r3
 80024c2:	eeb0 8a40 	vmov.f32	s16, s0
	block *block = (struct _block*) malloc(sizeof(struct _block));
 80024c6:	200e      	movs	r0, #14
 80024c8:	f00c fa42 	bl	800e950 <malloc>
 80024cc:	4604      	mov	r4, r0
	block->pos.x = x;
 80024ce:	f8a0 8000 	strh.w	r8, [r0]
	block->pos.y = y;
 80024d2:	8047      	strh	r7, [r0, #2]
	block->type = type;
 80024d4:	7306      	strb	r6, [r0, #12]

	uint16_t copy[4];
	for (uint8_t i = 0; i < 4; i++) {
 80024d6:	2300      	movs	r3, #0
 80024d8:	e008      	b.n	80024ec <create_block+0x3c>
		copy[i] = colors[i];
 80024da:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
 80024de:	aa02      	add	r2, sp, #8
 80024e0:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80024e4:	f821 0c08 	strh.w	r0, [r1, #-8]
	for (uint8_t i = 0; i < 4; i++) {
 80024e8:	3301      	adds	r3, #1
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d9f4      	bls.n	80024da <create_block+0x2a>
	}

	// Get appropriate colors
//	if (illumination != 1.0) {
//	}
		uint16_t *new_colors = apply_shading(copy, illumination);
 80024f0:	eeb0 0a48 	vmov.f32	s0, s16
 80024f4:	4668      	mov	r0, sp
 80024f6:	f7ff ff13 	bl	8002320 <apply_shading>
		for (uint8_t i = 0; i < 4; i++) {
 80024fa:	2300      	movs	r3, #0
 80024fc:	e006      	b.n	800250c <create_block+0x5c>
			block->colors[i] = new_colors[i];
 80024fe:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8002502:	eb04 0243 	add.w	r2, r4, r3, lsl #1
 8002506:	8091      	strh	r1, [r2, #4]
		for (uint8_t i = 0; i < 4; i++) {
 8002508:	3301      	adds	r3, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b03      	cmp	r3, #3
 800250e:	d9f6      	bls.n	80024fe <create_block+0x4e>
		}


	return block;
}
 8002510:	4620      	mov	r0, r4
 8002512:	b002      	add	sp, #8
 8002514:	ecbd 8b02 	vpop	{d8}
 8002518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800251c <create_destroyable>:

// Create wrapper for block - destroyables
destroyable* create_destroyable(uint16_t x, uint16_t y, uint16_t colors[4], uint8_t type, float illumination) {
 800251c:	b510      	push	{r4, lr}
	block *block = create_block(x, y, colors, type, illumination);
 800251e:	f7ff ffc7 	bl	80024b0 <create_block>
 8002522:	4604      	mov	r4, r0

	destroyable *destroyable = (struct _destroyable*) malloc(
 8002524:	2004      	movs	r0, #4
 8002526:	f00c fa13 	bl	800e950 <malloc>
			sizeof(struct _destroyable));
	destroyable->block = block;
 800252a:	6004      	str	r4, [r0, #0]
	return destroyable;
}
 800252c:	bd10      	pop	{r4, pc}

0800252e <create_bg_material>:

bg_material* create_bg_material(uint16_t x, uint16_t y, uint16_t colors[4], uint8_t type, float illumination) {
 800252e:	b510      	push	{r4, lr}
	block *block = create_block(x, y, colors, type, illumination);
 8002530:	f7ff ffbe 	bl	80024b0 <create_block>
 8002534:	4604      	mov	r4, r0

	bg_material *bg_material = (struct _bg_material*) malloc(
 8002536:	2004      	movs	r0, #4
 8002538:	f00c fa0a 	bl	800e950 <malloc>
			sizeof(struct _bg_material));
	bg_material->block = block;
 800253c:	6004      	str	r4, [r0, #0]
	return bg_material;
}
 800253e:	bd10      	pop	{r4, pc}

08002540 <draw_block>:

/* Draws a block with its colors, attempt to draw chunks as big as possible */
void draw_block(block *block) {
 8002540:	b530      	push	{r4, r5, lr}
 8002542:	b083      	sub	sp, #12
 8002544:	4604      	mov	r4, r0
//	_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x, block->pos.y, block->colors[0]);
	if (block->colors[0] == block->colors[1] && block->colors[1] == block->colors[2] && block->colors[2] == block->colors[3]) {
 8002546:	8885      	ldrh	r5, [r0, #4]
 8002548:	88c3      	ldrh	r3, [r0, #6]
 800254a:	429d      	cmp	r5, r3
 800254c:	d029      	beq.n	80025a2 <draw_block+0x62>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x, block->pos.y, block->colors[0]);
	} else if (block->colors[0] == block->colors[1]) {	// Top part
 800254e:	429d      	cmp	r5, r3
 8002550:	d035      	beq.n	80025be <draw_block+0x7e>
			_HW_FillFrame_(block->pos.x - 4, block->pos.y - 2, block->pos.x - 2,
					block->pos.y, block->colors[2]);
			_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
					block->pos.y, block->colors[3]);
		}
	} else if (block->colors[0] == block->colors[2]) {	// Left part
 8002552:	8923      	ldrh	r3, [r4, #8]
 8002554:	429d      	cmp	r5, r3
 8002556:	d057      	beq.n	8002608 <draw_block+0xc8>
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
				block->pos.y - 2, block->colors[1]);
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
				block->pos.y, block->colors[3]);
	} else {
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x - 2,
 8002558:	8820      	ldrh	r0, [r4, #0]
 800255a:	8861      	ldrh	r1, [r4, #2]
 800255c:	9500      	str	r5, [sp, #0]
 800255e:	1e8b      	subs	r3, r1, #2
 8002560:	1e82      	subs	r2, r0, #2
 8002562:	3904      	subs	r1, #4
 8002564:	3804      	subs	r0, #4
 8002566:	f009 fe67 	bl	800c238 <_HW_FillFrame_>
				block->pos.y - 2, block->colors[0]);
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 800256a:	8822      	ldrh	r2, [r4, #0]
 800256c:	8861      	ldrh	r1, [r4, #2]
				block->pos.y - 2, block->colors[1]);
 800256e:	88e3      	ldrh	r3, [r4, #6]
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	1e8b      	subs	r3, r1, #2
 8002574:	3904      	subs	r1, #4
 8002576:	1e90      	subs	r0, r2, #2
 8002578:	f009 fe5e 	bl	800c238 <_HW_FillFrame_>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 2, block->pos.x - 2,
 800257c:	8820      	ldrh	r0, [r4, #0]
 800257e:	8863      	ldrh	r3, [r4, #2]
				block->pos.y, block->colors[2]);
 8002580:	8922      	ldrh	r2, [r4, #8]
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 2, block->pos.x - 2,
 8002582:	9200      	str	r2, [sp, #0]
 8002584:	1e82      	subs	r2, r0, #2
 8002586:	1e99      	subs	r1, r3, #2
 8002588:	3804      	subs	r0, #4
 800258a:	f009 fe55 	bl	800c238 <_HW_FillFrame_>
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 800258e:	8822      	ldrh	r2, [r4, #0]
 8002590:	8863      	ldrh	r3, [r4, #2]
				block->pos.y, block->colors[3]);
 8002592:	8961      	ldrh	r1, [r4, #10]
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 8002594:	9100      	str	r1, [sp, #0]
 8002596:	1e99      	subs	r1, r3, #2
 8002598:	1e90      	subs	r0, r2, #2
 800259a:	f009 fe4d 	bl	800c238 <_HW_FillFrame_>
	}

}
 800259e:	b003      	add	sp, #12
 80025a0:	bd30      	pop	{r4, r5, pc}
	if (block->colors[0] == block->colors[1] && block->colors[1] == block->colors[2] && block->colors[2] == block->colors[3]) {
 80025a2:	8902      	ldrh	r2, [r0, #8]
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d1d2      	bne.n	800254e <draw_block+0xe>
 80025a8:	8941      	ldrh	r1, [r0, #10]
 80025aa:	428a      	cmp	r2, r1
 80025ac:	d1cf      	bne.n	800254e <draw_block+0xe>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x, block->pos.y, block->colors[0]);
 80025ae:	8802      	ldrh	r2, [r0, #0]
 80025b0:	8843      	ldrh	r3, [r0, #2]
 80025b2:	9500      	str	r5, [sp, #0]
 80025b4:	1f19      	subs	r1, r3, #4
 80025b6:	1f10      	subs	r0, r2, #4
 80025b8:	f009 fe3e 	bl	800c238 <_HW_FillFrame_>
	if (block->colors[0] == block->colors[1] && block->colors[1] == block->colors[2] && block->colors[2] == block->colors[3]) {
 80025bc:	e7ef      	b.n	800259e <draw_block+0x5e>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x,
 80025be:	8822      	ldrh	r2, [r4, #0]
 80025c0:	8861      	ldrh	r1, [r4, #2]
 80025c2:	9500      	str	r5, [sp, #0]
 80025c4:	1e8b      	subs	r3, r1, #2
 80025c6:	3904      	subs	r1, #4
 80025c8:	1f10      	subs	r0, r2, #4
 80025ca:	f009 fe35 	bl	800c238 <_HW_FillFrame_>
		if (block->colors[2] == block->colors[3]) {		// Bottom part
 80025ce:	8925      	ldrh	r5, [r4, #8]
 80025d0:	8963      	ldrh	r3, [r4, #10]
 80025d2:	429d      	cmp	r5, r3
 80025d4:	d010      	beq.n	80025f8 <draw_block+0xb8>
			_HW_FillFrame_(block->pos.x - 4, block->pos.y - 2, block->pos.x - 2,
 80025d6:	8820      	ldrh	r0, [r4, #0]
 80025d8:	8863      	ldrh	r3, [r4, #2]
 80025da:	9500      	str	r5, [sp, #0]
 80025dc:	1e82      	subs	r2, r0, #2
 80025de:	1e99      	subs	r1, r3, #2
 80025e0:	3804      	subs	r0, #4
 80025e2:	f009 fe29 	bl	800c238 <_HW_FillFrame_>
			_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 80025e6:	8822      	ldrh	r2, [r4, #0]
 80025e8:	8863      	ldrh	r3, [r4, #2]
					block->pos.y, block->colors[3]);
 80025ea:	8961      	ldrh	r1, [r4, #10]
			_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 80025ec:	9100      	str	r1, [sp, #0]
 80025ee:	1e99      	subs	r1, r3, #2
 80025f0:	1e90      	subs	r0, r2, #2
 80025f2:	f009 fe21 	bl	800c238 <_HW_FillFrame_>
 80025f6:	e7d2      	b.n	800259e <draw_block+0x5e>
			_HW_FillFrame_(block->pos.x - 4, block->pos.y - 2, block->pos.x,
 80025f8:	8822      	ldrh	r2, [r4, #0]
 80025fa:	8863      	ldrh	r3, [r4, #2]
 80025fc:	9500      	str	r5, [sp, #0]
 80025fe:	1e99      	subs	r1, r3, #2
 8002600:	1f10      	subs	r0, r2, #4
 8002602:	f009 fe19 	bl	800c238 <_HW_FillFrame_>
 8002606:	e7ca      	b.n	800259e <draw_block+0x5e>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x - 2,
 8002608:	8820      	ldrh	r0, [r4, #0]
 800260a:	8863      	ldrh	r3, [r4, #2]
 800260c:	9500      	str	r5, [sp, #0]
 800260e:	1e82      	subs	r2, r0, #2
 8002610:	1f19      	subs	r1, r3, #4
 8002612:	3804      	subs	r0, #4
 8002614:	f009 fe10 	bl	800c238 <_HW_FillFrame_>
		if (block->colors[1] == block->colors[3]) {		// Right part
 8002618:	88e3      	ldrh	r3, [r4, #6]
 800261a:	8962      	ldrh	r2, [r4, #10]
 800261c:	4293      	cmp	r3, r2
 800261e:	d011      	beq.n	8002644 <draw_block+0x104>
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 8002620:	8822      	ldrh	r2, [r4, #0]
 8002622:	8861      	ldrh	r1, [r4, #2]
				block->pos.y - 2, block->colors[1]);
 8002624:	88e3      	ldrh	r3, [r4, #6]
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	1e8b      	subs	r3, r1, #2
 800262a:	3904      	subs	r1, #4
 800262c:	1e90      	subs	r0, r2, #2
 800262e:	f009 fe03 	bl	800c238 <_HW_FillFrame_>
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 8002632:	8822      	ldrh	r2, [r4, #0]
 8002634:	8863      	ldrh	r3, [r4, #2]
				block->pos.y, block->colors[3]);
 8002636:	8961      	ldrh	r1, [r4, #10]
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 8002638:	9100      	str	r1, [sp, #0]
 800263a:	1e99      	subs	r1, r3, #2
 800263c:	1e90      	subs	r0, r2, #2
 800263e:	f009 fdfb 	bl	800c238 <_HW_FillFrame_>
 8002642:	e7ac      	b.n	800259e <draw_block+0x5e>
			_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 8002644:	8822      	ldrh	r2, [r4, #0]
 8002646:	8861      	ldrh	r1, [r4, #2]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	1e8b      	subs	r3, r1, #2
 800264c:	3904      	subs	r1, #4
 800264e:	1e90      	subs	r0, r2, #2
 8002650:	f009 fdf2 	bl	800c238 <_HW_FillFrame_>
 8002654:	e7e4      	b.n	8002620 <draw_block+0xe0>
	...

08002658 <draw_tree_normal>:

void draw_tree_normal(coord *pos) {
 8002658:	b570      	push	{r4, r5, r6, lr}
 800265a:	4606      	mov	r6, r0
	// 0,0 in top left corner
	for (int j = 0; j < TREE_WIDTH; j++) {
 800265c:	2500      	movs	r5, #0
 800265e:	e013      	b.n	8002688 <draw_tree_normal+0x30>
		for (int i = 0; i < TREE_HEIGHT; i++) {
 8002660:	3401      	adds	r4, #1
 8002662:	2c3f      	cmp	r4, #63	; 0x3f
 8002664:	dc0f      	bgt.n	8002686 <draw_tree_normal+0x2e>
			if (tree[i][j] == 0)
 8002666:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 800266a:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <draw_tree_normal+0x3c>)
 800266c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002670:	2a00      	cmp	r2, #0
 8002672:	d0f5      	beq.n	8002660 <draw_tree_normal+0x8>
				continue;
			UG_DrawPixel(j + pos->x, i + pos->y, tree[i][j]);
 8002674:	8830      	ldrh	r0, [r6, #0]
 8002676:	4428      	add	r0, r5
 8002678:	8871      	ldrh	r1, [r6, #2]
 800267a:	4421      	add	r1, r4
 800267c:	b209      	sxth	r1, r1
 800267e:	b200      	sxth	r0, r0
 8002680:	f009 fe9a 	bl	800c3b8 <UG_DrawPixel>
 8002684:	e7ec      	b.n	8002660 <draw_tree_normal+0x8>
	for (int j = 0; j < TREE_WIDTH; j++) {
 8002686:	3501      	adds	r5, #1
 8002688:	2d1f      	cmp	r5, #31
 800268a:	dc01      	bgt.n	8002690 <draw_tree_normal+0x38>
		for (int i = 0; i < TREE_HEIGHT; i++) {
 800268c:	2400      	movs	r4, #0
 800268e:	e7e8      	b.n	8002662 <draw_tree_normal+0xa>
		}
	}
}
 8002690:	bd70      	pop	{r4, r5, r6, pc}
 8002692:	bf00      	nop
 8002694:	20000000 	.word	0x20000000

08002698 <free_block>:
	free_block(mat->block);
	free(mat);
}

/* Frees the memory of a block pointer */
void free_block(block *block) {
 8002698:	b508      	push	{r3, lr}
	free(block);
 800269a:	f00c f961 	bl	800e960 <free>
}
 800269e:	bd08      	pop	{r3, pc}

080026a0 <free_destroyable>:
void free_destroyable(destroyable *destroyable) {
 80026a0:	b510      	push	{r4, lr}
 80026a2:	4604      	mov	r4, r0
	free_block(destroyable->block);
 80026a4:	6800      	ldr	r0, [r0, #0]
 80026a6:	f7ff fff7 	bl	8002698 <free_block>
	free(destroyable);
 80026aa:	4620      	mov	r0, r4
 80026ac:	f00c f958 	bl	800e960 <free>
}
 80026b0:	bd10      	pop	{r4, pc}

080026b2 <free_bg_material>:
void free_bg_material(bg_material *mat) {
 80026b2:	b510      	push	{r4, lr}
 80026b4:	4604      	mov	r4, r0
	free_block(mat->block);
 80026b6:	6800      	ldr	r0, [r0, #0]
 80026b8:	f7ff ffee 	bl	8002698 <free_block>
	free(mat);
 80026bc:	4620      	mov	r0, r4
 80026be:	f00c f94f 	bl	800e960 <free>
}
 80026c2:	bd10      	pop	{r4, pc}

080026c4 <render_block>:
	if (material == _empty) {
 80026c4:	b900      	cbnz	r0, 80026c8 <render_block+0x4>
 80026c6:	4770      	bx	lr
void render_block(block_t material, pixel_c pixel_pos_x, pixel_c pixel_pos_y, float illumination, block_c ground_height, block_c current_height) {
 80026c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026cc:	ed2d 8b02 	vpush	{d8}
 80026d0:	460f      	mov	r7, r1
 80026d2:	4616      	mov	r6, r2
 80026d4:	eeb0 8a40 	vmov.f32	s16, s0
 80026d8:	461c      	mov	r4, r3
 80026da:	4605      	mov	r5, r0
	bool night = is_night();
 80026dc:	f000 fc94 	bl	8003008 <is_night>
 80026e0:	4680      	mov	r8, r0
	float random = (float) rand() / RAND_MAX;
 80026e2:	f00d f8d5 	bl	800f890 <rand>
 80026e6:	ee07 0a90 	vmov	s15, r0
 80026ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ee:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002868 <render_block+0x1a4>
 80026f2:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (material == (block_t) _dirt) {
 80026f6:	2d01      	cmp	r5, #1
 80026f8:	d02b      	beq.n	8002752 <render_block+0x8e>
	} else if (material == (block_t) _grass) {
 80026fa:	2d02      	cmp	r5, #2
 80026fc:	d03c      	beq.n	8002778 <render_block+0xb4>
	} else if (material == (block_t) _lava) {
 80026fe:	2d08      	cmp	r5, #8
 8002700:	d04a      	beq.n	8002798 <render_block+0xd4>
	} else if (material == (block_t) _wood) {
 8002702:	2d03      	cmp	r5, #3
 8002704:	d058      	beq.n	80027b8 <render_block+0xf4>
	} else if (material == (block_t) _rock) {
 8002706:	2d07      	cmp	r5, #7
 8002708:	d066      	beq.n	80027d8 <render_block+0x114>
	} else if (material == (block_t) _dirt_bg) {
 800270a:	2d0c      	cmp	r5, #12
 800270c:	d074      	beq.n	80027f8 <render_block+0x134>
	} else if (material == (block_t) _sky) {
 800270e:	2d04      	cmp	r5, #4
 8002710:	f000 8082 	beq.w	8002818 <render_block+0x154>
		if (current_height < ground_height) {
 8002714:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8002718:	42a3      	cmp	r3, r4
 800271a:	f080 8095 	bcs.w	8002848 <render_block+0x184>
			if (random < probability_star && night) {
 800271e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002726:	f100 8087 	bmi.w	8002838 <render_block+0x174>
			} else if (night) {
 800272a:	f1b8 0f00 	cmp.w	r8, #0
 800272e:	f040 8089 	bne.w	8002844 <render_block+0x180>
			uint16_t *color = C_SKY;
 8002732:	4a4e      	ldr	r2, [pc, #312]	; (800286c <render_block+0x1a8>)
			bg_material *sky = create_bg_material(pixel_pos_x, pixel_pos_y, color, _sky, illumination);
 8002734:	eeb0 0a48 	vmov.f32	s0, s16
 8002738:	2304      	movs	r3, #4
 800273a:	4631      	mov	r1, r6
 800273c:	4638      	mov	r0, r7
 800273e:	f7ff fef6 	bl	800252e <create_bg_material>
 8002742:	4604      	mov	r4, r0
			draw_block(sky->block);
 8002744:	6800      	ldr	r0, [r0, #0]
 8002746:	f7ff fefb 	bl	8002540 <draw_block>
			free_bg_material(sky);
 800274a:	4620      	mov	r0, r4
 800274c:	f7ff ffb1 	bl	80026b2 <free_bg_material>
 8002750:	e00e      	b.n	8002770 <render_block+0xac>
		destroyable *dirt = create_destroyable(pixel_pos_x, pixel_pos_y, C_DIRT, _dirt, illumination);
 8002752:	eeb0 0a48 	vmov.f32	s0, s16
 8002756:	2301      	movs	r3, #1
 8002758:	4a45      	ldr	r2, [pc, #276]	; (8002870 <render_block+0x1ac>)
 800275a:	4631      	mov	r1, r6
 800275c:	4638      	mov	r0, r7
 800275e:	f7ff fedd 	bl	800251c <create_destroyable>
 8002762:	4604      	mov	r4, r0
		draw_block(dirt->block);
 8002764:	6800      	ldr	r0, [r0, #0]
 8002766:	f7ff feeb 	bl	8002540 <draw_block>
		free_destroyable(dirt);
 800276a:	4620      	mov	r0, r4
 800276c:	f7ff ff98 	bl	80026a0 <free_destroyable>
}
 8002770:	ecbd 8b02 	vpop	{d8}
 8002774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		destroyable *grass = create_destroyable(pixel_pos_x, pixel_pos_y, C_GRASS, _grass, illumination);
 8002778:	eeb0 0a48 	vmov.f32	s0, s16
 800277c:	2302      	movs	r3, #2
 800277e:	4a3d      	ldr	r2, [pc, #244]	; (8002874 <render_block+0x1b0>)
 8002780:	4631      	mov	r1, r6
 8002782:	4638      	mov	r0, r7
 8002784:	f7ff feca 	bl	800251c <create_destroyable>
 8002788:	4604      	mov	r4, r0
		draw_block(grass->block);
 800278a:	6800      	ldr	r0, [r0, #0]
 800278c:	f7ff fed8 	bl	8002540 <draw_block>
		free_destroyable(grass);
 8002790:	4620      	mov	r0, r4
 8002792:	f7ff ff85 	bl	80026a0 <free_destroyable>
 8002796:	e7eb      	b.n	8002770 <render_block+0xac>
		destroyable *lava = create_destroyable(pixel_pos_x, pixel_pos_y, C_LAVA, _lava, illumination);
 8002798:	eeb0 0a48 	vmov.f32	s0, s16
 800279c:	2308      	movs	r3, #8
 800279e:	4a36      	ldr	r2, [pc, #216]	; (8002878 <render_block+0x1b4>)
 80027a0:	4631      	mov	r1, r6
 80027a2:	4638      	mov	r0, r7
 80027a4:	f7ff feba 	bl	800251c <create_destroyable>
 80027a8:	4604      	mov	r4, r0
		draw_block(lava->block);
 80027aa:	6800      	ldr	r0, [r0, #0]
 80027ac:	f7ff fec8 	bl	8002540 <draw_block>
		free_destroyable(lava);
 80027b0:	4620      	mov	r0, r4
 80027b2:	f7ff ff75 	bl	80026a0 <free_destroyable>
 80027b6:	e7db      	b.n	8002770 <render_block+0xac>
		destroyable *wood = create_destroyable(pixel_pos_x, pixel_pos_y, C_WOOD, _wood, illumination);
 80027b8:	eeb0 0a48 	vmov.f32	s0, s16
 80027bc:	2303      	movs	r3, #3
 80027be:	4a2f      	ldr	r2, [pc, #188]	; (800287c <render_block+0x1b8>)
 80027c0:	4631      	mov	r1, r6
 80027c2:	4638      	mov	r0, r7
 80027c4:	f7ff feaa 	bl	800251c <create_destroyable>
 80027c8:	4604      	mov	r4, r0
		draw_block(wood->block);
 80027ca:	6800      	ldr	r0, [r0, #0]
 80027cc:	f7ff feb8 	bl	8002540 <draw_block>
		free_destroyable(wood);
 80027d0:	4620      	mov	r0, r4
 80027d2:	f7ff ff65 	bl	80026a0 <free_destroyable>
 80027d6:	e7cb      	b.n	8002770 <render_block+0xac>
		destroyable *rock = create_destroyable(pixel_pos_x, pixel_pos_y, C_ROCK, _rock, illumination);
 80027d8:	eeb0 0a48 	vmov.f32	s0, s16
 80027dc:	2307      	movs	r3, #7
 80027de:	4a28      	ldr	r2, [pc, #160]	; (8002880 <render_block+0x1bc>)
 80027e0:	4631      	mov	r1, r6
 80027e2:	4638      	mov	r0, r7
 80027e4:	f7ff fe9a 	bl	800251c <create_destroyable>
 80027e8:	4604      	mov	r4, r0
		draw_block(rock->block);
 80027ea:	6800      	ldr	r0, [r0, #0]
 80027ec:	f7ff fea8 	bl	8002540 <draw_block>
		free_destroyable(rock);
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7ff ff55 	bl	80026a0 <free_destroyable>
 80027f6:	e7bb      	b.n	8002770 <render_block+0xac>
		bg_material *dirt = create_bg_material(pixel_pos_x, pixel_pos_y, C_BG_DIRT, _dirt_bg, illumination);
 80027f8:	eeb0 0a48 	vmov.f32	s0, s16
 80027fc:	230c      	movs	r3, #12
 80027fe:	4a21      	ldr	r2, [pc, #132]	; (8002884 <render_block+0x1c0>)
 8002800:	4631      	mov	r1, r6
 8002802:	4638      	mov	r0, r7
 8002804:	f7ff fe93 	bl	800252e <create_bg_material>
 8002808:	4604      	mov	r4, r0
		draw_block(dirt->block);
 800280a:	6800      	ldr	r0, [r0, #0]
 800280c:	f7ff fe98 	bl	8002540 <draw_block>
		free_bg_material(dirt);
 8002810:	4620      	mov	r0, r4
 8002812:	f7ff ff4e 	bl	80026b2 <free_bg_material>
 8002816:	e7ab      	b.n	8002770 <render_block+0xac>
		bg_material *sky = create_bg_material(pixel_pos_x, pixel_pos_y, C_SKY, _sky, illumination);
 8002818:	eeb0 0a48 	vmov.f32	s0, s16
 800281c:	2304      	movs	r3, #4
 800281e:	4a13      	ldr	r2, [pc, #76]	; (800286c <render_block+0x1a8>)
 8002820:	4631      	mov	r1, r6
 8002822:	4638      	mov	r0, r7
 8002824:	f7ff fe83 	bl	800252e <create_bg_material>
 8002828:	4604      	mov	r4, r0
		draw_block(sky->block);
 800282a:	6800      	ldr	r0, [r0, #0]
 800282c:	f7ff fe88 	bl	8002540 <draw_block>
		free_bg_material(sky);
 8002830:	4620      	mov	r0, r4
 8002832:	f7ff ff3e 	bl	80026b2 <free_bg_material>
 8002836:	e79b      	b.n	8002770 <render_block+0xac>
			if (random < probability_star && night) {
 8002838:	f1b8 0f00 	cmp.w	r8, #0
 800283c:	f43f af75 	beq.w	800272a <render_block+0x66>
				color = C_STAR;
 8002840:	4a11      	ldr	r2, [pc, #68]	; (8002888 <render_block+0x1c4>)
 8002842:	e777      	b.n	8002734 <render_block+0x70>
				color = C_NIGHT_SKY;
 8002844:	4a11      	ldr	r2, [pc, #68]	; (800288c <render_block+0x1c8>)
 8002846:	e775      	b.n	8002734 <render_block+0x70>
			bg_material *dirt = create_bg_material(pixel_pos_x, pixel_pos_y, C_BG_DIRT, _dirt_bg, illumination);
 8002848:	eeb0 0a48 	vmov.f32	s0, s16
 800284c:	230c      	movs	r3, #12
 800284e:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <render_block+0x1c0>)
 8002850:	4631      	mov	r1, r6
 8002852:	4638      	mov	r0, r7
 8002854:	f7ff fe6b 	bl	800252e <create_bg_material>
 8002858:	4604      	mov	r4, r0
			draw_block(dirt->block);
 800285a:	6800      	ldr	r0, [r0, #0]
 800285c:	f7ff fe70 	bl	8002540 <draw_block>
			free_bg_material(dirt);
 8002860:	4620      	mov	r0, r4
 8002862:	f7ff ff26 	bl	80026b2 <free_bg_material>
 8002866:	e783      	b.n	8002770 <render_block+0xac>
 8002868:	30000000 	.word	0x30000000
 800286c:	20001038 	.word	0x20001038
 8002870:	20001008 	.word	0x20001008
 8002874:	20001010 	.word	0x20001010
 8002878:	20001018 	.word	0x20001018
 800287c:	20001050 	.word	0x20001050
 8002880:	20001030 	.word	0x20001030
 8002884:	20001a60 	.word	0x20001a60
 8002888:	20001040 	.word	0x20001040
 800288c:	20001020 	.word	0x20001020

08002890 <draw_scene>:
void draw_scene(bool init) {
 8002890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002894:	b08d      	sub	sp, #52	; 0x34
 8002896:	4604      	mov	r4, r0
 8002898:	9003      	str	r0, [sp, #12]
	get_scene();
 800289a:	f000 f961 	bl	8002b60 <get_scene>
	get_scene_mask();	// 1 - do not overwrite, 0 do overwrite
 800289e:	f000 fa03 	bl	8002ca8 <get_scene_mask>
	srand(time(NULL));
 80028a2:	2000      	movs	r0, #0
 80028a4:	f00d ff14 	bl	80106d0 <time>
 80028a8:	f00c ffc4 	bl	800f834 <srand>
	int8_t move_horizontal = old_camera_x - camera_x_block; // + -> left, - -> right
 80028ac:	4b60      	ldr	r3, [pc, #384]	; (8002a30 <draw_scene+0x1a0>)
 80028ae:	881a      	ldrh	r2, [r3, #0]
 80028b0:	4b60      	ldr	r3, [pc, #384]	; (8002a34 <draw_scene+0x1a4>)
 80028b2:	8818      	ldrh	r0, [r3, #0]
	int8_t move_vertical = old_camera_y - camera_y_block; // + -> up, - -> down
 80028b4:	4b60      	ldr	r3, [pc, #384]	; (8002a38 <draw_scene+0x1a8>)
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	4960      	ldr	r1, [pc, #384]	; (8002a3c <draw_scene+0x1ac>)
 80028ba:	8809      	ldrh	r1, [r1, #0]
	if (!init && move_horizontal == 0 && move_vertical == 0) {
 80028bc:	b934      	cbnz	r4, 80028cc <draw_scene+0x3c>
 80028be:	b2d7      	uxtb	r7, r2
 80028c0:	b2c6      	uxtb	r6, r0
 80028c2:	b2dd      	uxtb	r5, r3
 80028c4:	fa5f fc81 	uxtb.w	ip, r1
 80028c8:	42b7      	cmp	r7, r6
 80028ca:	d012      	beq.n	80028f2 <draw_scene+0x62>
	block_c world_block_x0 = camera_x_block - SCENE_BLOCKS_X / 2;
 80028cc:	3828      	subs	r0, #40	; 0x28
 80028ce:	b280      	uxth	r0, r0
 80028d0:	9005      	str	r0, [sp, #20]
	block_c world_block_y0 = camera_y_block - SCENE_BLOCKS_Y / 2;
 80028d2:	391e      	subs	r1, #30
 80028d4:	b289      	uxth	r1, r1
 80028d6:	9106      	str	r1, [sp, #24]
	block_c old_world_block_x0 = old_camera_x - SCENE_BLOCKS_X / 2;
 80028d8:	3a28      	subs	r2, #40	; 0x28
 80028da:	b292      	uxth	r2, r2
 80028dc:	9207      	str	r2, [sp, #28]
	block_c old_world_block_y0 = old_camera_y - SCENE_BLOCKS_Y / 2;
 80028de:	3b1e      	subs	r3, #30
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	9308      	str	r3, [sp, #32]
	for (cell_c i = 0; i < SCENE_CELLS_X; i++) {
 80028e4:	f04f 0a00 	mov.w	sl, #0
	pixel_c pos_x2 = 8;
 80028e8:	2308      	movs	r3, #8
 80028ea:	9304      	str	r3, [sp, #16]
	pixel_c pos_x1 = 4;
 80028ec:	2304      	movs	r3, #4
 80028ee:	9309      	str	r3, [sp, #36]	; 0x24
	for (cell_c i = 0; i < SCENE_CELLS_X; i++) {
 80028f0:	e097      	b.n	8002a22 <draw_scene+0x192>
	if (!init && move_horizontal == 0 && move_vertical == 0) {
 80028f2:	4565      	cmp	r5, ip
 80028f4:	d1ea      	bne.n	80028cc <draw_scene+0x3c>
}
 80028f6:	b00d      	add	sp, #52	; 0x34
 80028f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					} else if (lower(old_world_cell) == lower(current_scene_cell)) {
 80028fc:	4638      	mov	r0, r7
 80028fe:	f002 fb79 	bl	8004ff4 <lower>
 8002902:	4607      	mov	r7, r0
 8002904:	4640      	mov	r0, r8
 8002906:	f002 fb75 	bl	8004ff4 <lower>
 800290a:	4287      	cmp	r7, r0
 800290c:	d060      	beq.n	80029d0 <draw_scene+0x140>
			bool skip_left = false, skip_right = false;
 800290e:	9b03      	ldr	r3, [sp, #12]
 8002910:	4699      	mov	r9, r3
 8002912:	9302      	str	r3, [sp, #8]
 8002914:	e003      	b.n	800291e <draw_scene+0x8e>
 8002916:	f04f 0900 	mov.w	r9, #0
 800291a:	f8cd 9008 	str.w	r9, [sp, #8]
			block_t left_block = upper(current_scene_cell);
 800291e:	4640      	mov	r0, r8
 8002920:	f002 fb66 	bl	8004ff0 <upper>
 8002924:	4607      	mov	r7, r0
			block_t right_block = lower(current_scene_cell);
 8002926:	4640      	mov	r0, r8
 8002928:	f002 fb64 	bl	8004ff4 <lower>
 800292c:	4680      	mov	r8, r0
			block_c ground_height = LVL1_HMAP[world_cell_x];
 800292e:	4b44      	ldr	r3, [pc, #272]	; (8002a40 <draw_scene+0x1b0>)
 8002930:	f833 b016 	ldrh.w	fp, [r3, r6, lsl #1]
			pixel_c pos_y = block_to_pixel(j) + 1;
 8002934:	4620      	mov	r0, r4
 8002936:	f002 fb62 	bl	8004ffe <block_to_pixel>
 800293a:	1c46      	adds	r6, r0, #1
 800293c:	b2b6      	uxth	r6, r6
			coord pos = { x: pos_x2, y: pos_y };
 800293e:	9b04      	ldr	r3, [sp, #16]
 8002940:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8002944:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
			if (left_block == _tree || right_block == _tree) {
 8002948:	2f0e      	cmp	r7, #14
 800294a:	d046      	beq.n	80029da <draw_scene+0x14a>
 800294c:	f1b8 0f0e 	cmp.w	r8, #14
 8002950:	d043      	beq.n	80029da <draw_scene+0x14a>
			if (!skip_left) {
 8002952:	9b02      	ldr	r3, [sp, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d044      	beq.n	80029e2 <draw_scene+0x152>
			if (!skip_right) {
 8002958:	f1b9 0f00 	cmp.w	r9, #0
 800295c:	d04b      	beq.n	80029f6 <draw_scene+0x166>
		for (cell_c j = 0; j < SCENE_CELLS_Y; j++) {
 800295e:	3401      	adds	r4, #1
 8002960:	b2a4      	uxth	r4, r4
 8002962:	2c3b      	cmp	r4, #59	; 0x3b
 8002964:	d851      	bhi.n	8002a0a <draw_scene+0x17a>
			cell_c world_cell_x = block_to_cell_x(world_block_x0) + i;
 8002966:	9805      	ldr	r0, [sp, #20]
 8002968:	f002 fb4e 	bl	8005008 <block_to_cell_x>
 800296c:	eb00 060a 	add.w	r6, r0, sl
 8002970:	b2b6      	uxth	r6, r6
			cell_c world_cell_y = block_to_cell_y(world_block_y0) + j;
 8002972:	9806      	ldr	r0, [sp, #24]
 8002974:	f002 fb4a 	bl	800500c <block_to_cell_y>
 8002978:	1905      	adds	r5, r0, r4
 800297a:	b2ad      	uxth	r5, r5
			cell_c old_world_cell_x = block_to_cell_x(old_world_block_x0) + i;
 800297c:	9807      	ldr	r0, [sp, #28]
 800297e:	f002 fb43 	bl	8005008 <block_to_cell_x>
 8002982:	eb00 070a 	add.w	r7, r0, sl
 8002986:	b2bf      	uxth	r7, r7
			cell_c old_world_cell_y = block_to_cell_y(old_world_block_y0) + j;
 8002988:	9808      	ldr	r0, [sp, #32]
 800298a:	f002 fb3f 	bl	800500c <block_to_cell_y>
 800298e:	4420      	add	r0, r4
 8002990:	b280      	uxth	r0, r0
			cell_t current_scene_cell = SCENE[scene_cell_y][scene_cell_x];
 8002992:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002996:	4a2b      	ldr	r2, [pc, #172]	; (8002a44 <draw_scene+0x1b4>)
 8002998:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800299c:	f813 800a 	ldrb.w	r8, [r3, sl]
			cell_t old_world_cell = WORLD[old_world_cell_y][old_world_cell_x];
 80029a0:	4b29      	ldr	r3, [pc, #164]	; (8002a48 <draw_scene+0x1b8>)
 80029a2:	22c8      	movs	r2, #200	; 0xc8
 80029a4:	fb02 3000 	mla	r0, r2, r0, r3
 80029a8:	5dc7      	ldrb	r7, [r0, r7]
			if (!init) {
 80029aa:	9b03      	ldr	r3, [sp, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1b2      	bne.n	8002916 <draw_scene+0x86>
				if (old_world_cell == current_scene_cell) {
 80029b0:	45b8      	cmp	r8, r7
 80029b2:	d0d4      	beq.n	800295e <draw_scene+0xce>
					if (upper(old_world_cell) == upper(current_scene_cell)) {
 80029b4:	4638      	mov	r0, r7
 80029b6:	f002 fb1b 	bl	8004ff0 <upper>
 80029ba:	4681      	mov	r9, r0
 80029bc:	4640      	mov	r0, r8
 80029be:	f002 fb17 	bl	8004ff0 <upper>
 80029c2:	4581      	cmp	r9, r0
 80029c4:	d19a      	bne.n	80028fc <draw_scene+0x6c>
			bool skip_left = false, skip_right = false;
 80029c6:	f8dd 900c 	ldr.w	r9, [sp, #12]
						skip_left = true;
 80029ca:	2301      	movs	r3, #1
 80029cc:	9302      	str	r3, [sp, #8]
 80029ce:	e7a6      	b.n	800291e <draw_scene+0x8e>
			bool skip_left = false, skip_right = false;
 80029d0:	9b03      	ldr	r3, [sp, #12]
 80029d2:	9302      	str	r3, [sp, #8]
						skip_right = true;
 80029d4:	f04f 0901 	mov.w	r9, #1
 80029d8:	e7a1      	b.n	800291e <draw_scene+0x8e>
				draw_tree_normal(&pos);
 80029da:	a80b      	add	r0, sp, #44	; 0x2c
 80029dc:	f7ff fe3c 	bl	8002658 <draw_tree_normal>
 80029e0:	e7b7      	b.n	8002952 <draw_scene+0xc2>
				render_block(left_block, pos_x1, pos_y, illumination, ground_height, current_height);
 80029e2:	9500      	str	r5, [sp, #0]
 80029e4:	465b      	mov	r3, fp
 80029e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80029ea:	4632      	mov	r2, r6
 80029ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80029ee:	4638      	mov	r0, r7
 80029f0:	f7ff fe68 	bl	80026c4 <render_block>
 80029f4:	e7b0      	b.n	8002958 <draw_scene+0xc8>
				render_block(right_block, pos_x2, pos_y, illumination, ground_height, current_height);
 80029f6:	9500      	str	r5, [sp, #0]
 80029f8:	465b      	mov	r3, fp
 80029fa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80029fe:	4632      	mov	r2, r6
 8002a00:	9904      	ldr	r1, [sp, #16]
 8002a02:	4640      	mov	r0, r8
 8002a04:	f7ff fe5e 	bl	80026c4 <render_block>
 8002a08:	e7a9      	b.n	800295e <draw_scene+0xce>
		pos_x1 += 8;
 8002a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a0c:	3308      	adds	r3, #8
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	9309      	str	r3, [sp, #36]	; 0x24
		pos_x2 += 8;
 8002a12:	9b04      	ldr	r3, [sp, #16]
 8002a14:	3308      	adds	r3, #8
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	9304      	str	r3, [sp, #16]
	for (cell_c i = 0; i < SCENE_CELLS_X; i++) {
 8002a1a:	f10a 0301 	add.w	r3, sl, #1
 8002a1e:	fa1f fa83 	uxth.w	sl, r3
 8002a22:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
 8002a26:	f63f af66 	bhi.w	80028f6 <draw_scene+0x66>
		for (cell_c j = 0; j < SCENE_CELLS_Y; j++) {
 8002a2a:	2400      	movs	r4, #0
 8002a2c:	e799      	b.n	8002962 <draw_scene+0xd2>
 8002a2e:	bf00      	nop
 8002a30:	200121ba 	.word	0x200121ba
 8002a34:	200121b4 	.word	0x200121b4
 8002a38:	200121bc 	.word	0x200121bc
 8002a3c:	200121b6 	.word	0x200121b6
 8002a40:	20005020 	.word	0x20005020
 8002a44:	20005340 	.word	0x20005340
 8002a48:	20006634 	.word	0x20006634

08002a4c <MX_QUADSPI1_Init>:

QSPI_HandleTypeDef hqspi1;

/* QUADSPI1 init function */
void MX_QUADSPI1_Init(void)
{
 8002a4c:	b508      	push	{r3, lr}
  /* USER CODE END QUADSPI1_Init 0 */

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  hqspi1.Instance = QUADSPI;
 8002a4e:	480a      	ldr	r0, [pc, #40]	; (8002a78 <MX_QUADSPI1_Init+0x2c>)
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <MX_QUADSPI1_Init+0x30>)
 8002a52:	6003      	str	r3, [r0, #0]
  hqspi1.Init.ClockPrescaler = 255;
 8002a54:	23ff      	movs	r3, #255	; 0xff
 8002a56:	6043      	str	r3, [r0, #4]
  hqspi1.Init.FifoThreshold = 1;
 8002a58:	2201      	movs	r2, #1
 8002a5a:	6082      	str	r2, [r0, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60c3      	str	r3, [r0, #12]
  hqspi1.Init.FlashSize = 1;
 8002a60:	6102      	str	r2, [r0, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002a62:	6143      	str	r3, [r0, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002a64:	6183      	str	r3, [r0, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_1;
 8002a66:	61c3      	str	r3, [r0, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002a68:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 8002a6a:	f006 f86b 	bl	8008b44 <HAL_QSPI_Init>
 8002a6e:	b900      	cbnz	r0, 8002a72 <MX_QUADSPI1_Init+0x26>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 8002a70:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002a72:	f7ff fa81 	bl	8001f78 <Error_Handler>
}
 8002a76:	e7fb      	b.n	8002a70 <MX_QUADSPI1_Init+0x24>
 8002a78:	20001a68 	.word	0x20001a68
 8002a7c:	a0001000 	.word	0xa0001000

08002a80 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002a80:	b570      	push	{r4, r5, r6, lr}
 8002a82:	b09e      	sub	sp, #120	; 0x78
 8002a84:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a86:	2100      	movs	r1, #0
 8002a88:	9119      	str	r1, [sp, #100]	; 0x64
 8002a8a:	911a      	str	r1, [sp, #104]	; 0x68
 8002a8c:	911b      	str	r1, [sp, #108]	; 0x6c
 8002a8e:	911c      	str	r1, [sp, #112]	; 0x70
 8002a90:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a92:	2254      	movs	r2, #84	; 0x54
 8002a94:	a804      	add	r0, sp, #16
 8002a96:	f00b ff6b 	bl	800e970 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8002a9a:	6822      	ldr	r2, [r4, #0]
 8002a9c:	4b2c      	ldr	r3, [pc, #176]	; (8002b50 <HAL_QSPI_MspInit+0xd0>)
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d001      	beq.n	8002aa6 <HAL_QSPI_MspInit+0x26>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002aa2:	b01e      	add	sp, #120	; 0x78
 8002aa4:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8002aa6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002aaa:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aac:	a804      	add	r0, sp, #16
 8002aae:	f006 fcab 	bl	8009408 <HAL_RCCEx_PeriphCLKConfig>
 8002ab2:	2800      	cmp	r0, #0
 8002ab4:	d148      	bne.n	8002b48 <HAL_QSPI_MspInit+0xc8>
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002ab6:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <HAL_QSPI_MspInit+0xd4>)
 8002ab8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002abe:	651a      	str	r2, [r3, #80]	; 0x50
 8002ac0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ac2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002ac6:	9200      	str	r2, [sp, #0]
 8002ac8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002acc:	f042 0201 	orr.w	r2, r2, #1
 8002ad0:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ad4:	f002 0201 	and.w	r2, r2, #1
 8002ad8:	9201      	str	r2, [sp, #4]
 8002ada:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002adc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ade:	f042 0202 	orr.w	r2, r2, #2
 8002ae2:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ae4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ae6:	f002 0202 	and.w	r2, r2, #2
 8002aea:	9202      	str	r2, [sp, #8]
 8002aec:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002aee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002af0:	f042 0220 	orr.w	r2, r2, #32
 8002af4:	64da      	str	r2, [r3, #76]	; 0x4c
 8002af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	9303      	str	r3, [sp, #12]
 8002afe:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = QSPI_IO2_Pin;
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b04:	2602      	movs	r6, #2
 8002b06:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2400      	movs	r4, #0
 8002b0a:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0c:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002b0e:	250a      	movs	r5, #10
 8002b10:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(QSPI_IO2_GPIO_Port, &GPIO_InitStruct);
 8002b12:	a919      	add	r1, sp, #100	; 0x64
 8002b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b18:	f004 fa64 	bl	8006fe4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_IO1_Pin|QSPI_IO0_Pin|QSPI_CLK_Pin|QSPI_NCS_Pin;
 8002b1c:	f640 4303 	movw	r3, #3075	; 0xc03
 8002b20:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b26:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002b28:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2a:	a919      	add	r1, sp, #100	; 0x64
 8002b2c:	480a      	ldr	r0, [pc, #40]	; (8002b58 <HAL_QSPI_MspInit+0xd8>)
 8002b2e:	f004 fa59 	bl	8006fe4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_IO3_Pin;
 8002b32:	2340      	movs	r3, #64	; 0x40
 8002b34:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b36:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3a:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002b3c:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(QSPI_IO3_GPIO_Port, &GPIO_InitStruct);
 8002b3e:	a919      	add	r1, sp, #100	; 0x64
 8002b40:	4806      	ldr	r0, [pc, #24]	; (8002b5c <HAL_QSPI_MspInit+0xdc>)
 8002b42:	f004 fa4f 	bl	8006fe4 <HAL_GPIO_Init>
}
 8002b46:	e7ac      	b.n	8002aa2 <HAL_QSPI_MspInit+0x22>
      Error_Handler();
 8002b48:	f7ff fa16 	bl	8001f78 <Error_Handler>
 8002b4c:	e7b3      	b.n	8002ab6 <HAL_QSPI_MspInit+0x36>
 8002b4e:	bf00      	nop
 8002b50:	a0001000 	.word	0xa0001000
 8002b54:	40021000 	.word	0x40021000
 8002b58:	48000400 	.word	0x48000400
 8002b5c:	48001400 	.word	0x48001400

08002b60 <get_scene>:
	update_camera_center((uint16_t) floor(WORLD_WIDTH_BLOCKS/3), zero_height - SKY_GROUND_OFFSET);	// zero level height should be at 1/3 of the screen

}

// DO NOT UNDER ANY CIRCUMSTANCE TOUCH BELOW CODE!
void get_scene() {
 8002b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// width / 4 because each cell represents 2 blocks
	block_c block_offset_width = (SCENE_WIDTH_BLOCKS / 2);
	block_c block_offset_height = (SCENE_HEIGHT_BLOCKS / 2);

	cell_c offset_w = block_to_cell_x(block_offset_width);
 8002b64:	2028      	movs	r0, #40	; 0x28
 8002b66:	f002 fa4f 	bl	8005008 <block_to_cell_x>
 8002b6a:	4605      	mov	r5, r0
	cell_c offset_h = block_to_cell_y(block_offset_height);
 8002b6c:	201e      	movs	r0, #30
 8002b6e:	f002 fa4d 	bl	800500c <block_to_cell_y>
 8002b72:	4607      	mov	r7, r0

	// Check if within bounds
	cell_c left = MAX(0, (int16_t) block_to_cell_x(camera_x_block) - offset_w);
 8002b74:	4b37      	ldr	r3, [pc, #220]	; (8002c54 <get_scene+0xf4>)
 8002b76:	8818      	ldrh	r0, [r3, #0]
 8002b78:	f002 fa46 	bl	8005008 <block_to_cell_x>
 8002b7c:	b203      	sxth	r3, r0
 8002b7e:	1b5b      	subs	r3, r3, r5
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	da30      	bge.n	8002be6 <get_scene+0x86>
 8002b84:	2600      	movs	r6, #0
	cell_c top = MAX(0, (int16_t) block_to_cell_y(camera_y_block) - offset_h);
 8002b86:	4b34      	ldr	r3, [pc, #208]	; (8002c58 <get_scene+0xf8>)
 8002b88:	8818      	ldrh	r0, [r3, #0]
 8002b8a:	f002 fa3f 	bl	800500c <block_to_cell_y>
 8002b8e:	b203      	sxth	r3, r0
 8002b90:	1bdb      	subs	r3, r3, r7
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	da2e      	bge.n	8002bf4 <get_scene+0x94>
 8002b96:	2400      	movs	r4, #0
	cell_c right = MIN(block_to_cell_x(camera_x_block) + offset_w, block_to_cell_x(WORLD_WIDTH_BLOCKS));
 8002b98:	4b2e      	ldr	r3, [pc, #184]	; (8002c54 <get_scene+0xf4>)
 8002b9a:	8818      	ldrh	r0, [r3, #0]
 8002b9c:	f002 fa34 	bl	8005008 <block_to_cell_x>
 8002ba0:	eb05 0800 	add.w	r8, r5, r0
 8002ba4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002ba8:	f002 fa2e 	bl	8005008 <block_to_cell_x>
 8002bac:	4580      	cmp	r8, r0
 8002bae:	da28      	bge.n	8002c02 <get_scene+0xa2>
 8002bb0:	4b28      	ldr	r3, [pc, #160]	; (8002c54 <get_scene+0xf4>)
 8002bb2:	8818      	ldrh	r0, [r3, #0]
 8002bb4:	f002 fa28 	bl	8005008 <block_to_cell_x>
 8002bb8:	4405      	add	r5, r0
 8002bba:	b2ad      	uxth	r5, r5
	cell_c bottom = MIN(block_to_cell_y(camera_y_block) + offset_h, block_to_cell_y(WORLD_HEIGHT_BLOCKS));
 8002bbc:	4b26      	ldr	r3, [pc, #152]	; (8002c58 <get_scene+0xf8>)
 8002bbe:	8818      	ldrh	r0, [r3, #0]
 8002bc0:	f002 fa24 	bl	800500c <block_to_cell_y>
 8002bc4:	eb07 0800 	add.w	r8, r7, r0
 8002bc8:	20f0      	movs	r0, #240	; 0xf0
 8002bca:	f002 fa1f 	bl	800500c <block_to_cell_y>
 8002bce:	4580      	cmp	r8, r0
 8002bd0:	da1d      	bge.n	8002c0e <get_scene+0xae>
 8002bd2:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <get_scene+0xf8>)
 8002bd4:	8818      	ldrh	r0, [r3, #0]
 8002bd6:	f002 fa19 	bl	800500c <block_to_cell_y>
 8002bda:	4407      	add	r7, r0
 8002bdc:	fa1f fe87 	uxth.w	lr, r7


	cell_c x = 0;
	cell_c y = 0;
 8002be0:	f04f 0c00 	mov.w	ip, #0
	for (cell_c j = top; j <= bottom; j++) {
 8002be4:	e02f      	b.n	8002c46 <get_scene+0xe6>
	cell_c left = MAX(0, (int16_t) block_to_cell_x(camera_x_block) - offset_w);
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <get_scene+0xf4>)
 8002be8:	8818      	ldrh	r0, [r3, #0]
 8002bea:	f002 fa0d 	bl	8005008 <block_to_cell_x>
 8002bee:	1b46      	subs	r6, r0, r5
 8002bf0:	b2b6      	uxth	r6, r6
 8002bf2:	e7c8      	b.n	8002b86 <get_scene+0x26>
	cell_c top = MAX(0, (int16_t) block_to_cell_y(camera_y_block) - offset_h);
 8002bf4:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <get_scene+0xf8>)
 8002bf6:	8818      	ldrh	r0, [r3, #0]
 8002bf8:	f002 fa08 	bl	800500c <block_to_cell_y>
 8002bfc:	1bc4      	subs	r4, r0, r7
 8002bfe:	b2a4      	uxth	r4, r4
 8002c00:	e7ca      	b.n	8002b98 <get_scene+0x38>
	cell_c right = MIN(block_to_cell_x(camera_x_block) + offset_w, block_to_cell_x(WORLD_WIDTH_BLOCKS));
 8002c02:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002c06:	f002 f9ff 	bl	8005008 <block_to_cell_x>
 8002c0a:	4605      	mov	r5, r0
 8002c0c:	e7d6      	b.n	8002bbc <get_scene+0x5c>
	cell_c bottom = MIN(block_to_cell_y(camera_y_block) + offset_h, block_to_cell_y(WORLD_HEIGHT_BLOCKS));
 8002c0e:	20f0      	movs	r0, #240	; 0xf0
 8002c10:	f002 f9fc 	bl	800500c <block_to_cell_y>
 8002c14:	4686      	mov	lr, r0
 8002c16:	e7e3      	b.n	8002be0 <get_scene+0x80>
		for (cell_c i = left; i <= right; i++) {
			SCENE[y][x] = WORLD[j][i];
 8002c18:	4910      	ldr	r1, [pc, #64]	; (8002c5c <get_scene+0xfc>)
 8002c1a:	20c8      	movs	r0, #200	; 0xc8
 8002c1c:	fb00 1104 	mla	r1, r0, r4, r1
 8002c20:	5ccf      	ldrb	r7, [r1, r3]
 8002c22:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8002c26:	480e      	ldr	r0, [pc, #56]	; (8002c60 <get_scene+0x100>)
 8002c28:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8002c2c:	548f      	strb	r7, [r1, r2]
			x++;
 8002c2e:	3201      	adds	r2, #1
 8002c30:	b292      	uxth	r2, r2
		for (cell_c i = left; i <= right; i++) {
 8002c32:	3301      	adds	r3, #1
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	42ab      	cmp	r3, r5
 8002c38:	d9ee      	bls.n	8002c18 <get_scene+0xb8>
		}
		x = 0;
		y++;
 8002c3a:	f10c 0c01 	add.w	ip, ip, #1
 8002c3e:	fa1f fc8c 	uxth.w	ip, ip
	for (cell_c j = top; j <= bottom; j++) {
 8002c42:	3401      	adds	r4, #1
 8002c44:	b2a4      	uxth	r4, r4
 8002c46:	4574      	cmp	r4, lr
 8002c48:	d802      	bhi.n	8002c50 <get_scene+0xf0>
		for (cell_c i = left; i <= right; i++) {
 8002c4a:	4633      	mov	r3, r6
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	e7f2      	b.n	8002c36 <get_scene+0xd6>
	}
}
 8002c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c54:	200121b4 	.word	0x200121b4
 8002c58:	200121b6 	.word	0x200121b6
 8002c5c:	20006634 	.word	0x20006634
 8002c60:	20005340 	.word	0x20005340

08002c64 <mark_tree>:
	}

	new_frame = 1;
}

void mark_tree(uint16_t y, uint16_t x, uint8_t left_right, uint16_t height, uint16_t width) {
 8002c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c66:	460e      	mov	r6, r1
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f8bd 7014 	ldrh.w	r7, [sp, #20]
//	x += left_right;
	for (uint16_t j = x; j < x + width; j++) {
 8002c6e:	4635      	mov	r5, r6
 8002c70:	e010      	b.n	8002c94 <mark_tree+0x30>
		for (uint16_t i = y; i < y + height; i++) {
			SCENE_MASK[i][j] = 1 << 4 | 1;
 8002c72:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <mark_tree+0x40>)
 8002c78:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 8002c7c:	f04f 0e11 	mov.w	lr, #17
 8002c80:	f80c e004 	strb.w	lr, [ip, r4]
		for (uint16_t i = y; i < y + height; i++) {
 8002c84:	3201      	adds	r2, #1
 8002c86:	b292      	uxth	r2, r2
 8002c88:	eb00 0c01 	add.w	ip, r0, r1
 8002c8c:	4562      	cmp	r2, ip
 8002c8e:	dbf0      	blt.n	8002c72 <mark_tree+0xe>
	for (uint16_t j = x; j < x + width; j++) {
 8002c90:	3501      	adds	r5, #1
 8002c92:	b2ad      	uxth	r5, r5
 8002c94:	462c      	mov	r4, r5
 8002c96:	19f3      	adds	r3, r6, r7
 8002c98:	429d      	cmp	r5, r3
 8002c9a:	da01      	bge.n	8002ca0 <mark_tree+0x3c>
		for (uint16_t i = y; i < y + height; i++) {
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	e7f3      	b.n	8002c88 <mark_tree+0x24>
		}
	}
}
 8002ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20005ca0 	.word	0x20005ca0

08002ca8 <get_scene_mask>:
void get_scene_mask() {
 8002ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cac:	b087      	sub	sp, #28
	cell_c offset_w = block_to_cell_x(block_offset_width);
 8002cae:	2028      	movs	r0, #40	; 0x28
 8002cb0:	f002 f9aa 	bl	8005008 <block_to_cell_x>
 8002cb4:	4605      	mov	r5, r0
	cell_c offset_h = block_to_cell_y(block_offset_height);
 8002cb6:	201e      	movs	r0, #30
 8002cb8:	f002 f9a8 	bl	800500c <block_to_cell_y>
 8002cbc:	4604      	mov	r4, r0
	cell_c left = MAX(0, (int16_t) block_to_cell_x(camera_x_block) - offset_w);
 8002cbe:	4b64      	ldr	r3, [pc, #400]	; (8002e50 <get_scene_mask+0x1a8>)
 8002cc0:	8818      	ldrh	r0, [r3, #0]
 8002cc2:	f002 f9a1 	bl	8005008 <block_to_cell_x>
 8002cc6:	b203      	sxth	r3, r0
 8002cc8:	1b5b      	subs	r3, r3, r5
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	da35      	bge.n	8002d3a <get_scene_mask+0x92>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	9304      	str	r3, [sp, #16]
	cell_c top = MAX(0, (int16_t) block_to_cell_y(camera_y_block) - offset_h);
 8002cd2:	4b60      	ldr	r3, [pc, #384]	; (8002e54 <get_scene_mask+0x1ac>)
 8002cd4:	8818      	ldrh	r0, [r3, #0]
 8002cd6:	f002 f999 	bl	800500c <block_to_cell_y>
 8002cda:	b203      	sxth	r3, r0
 8002cdc:	1b1b      	subs	r3, r3, r4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	da33      	bge.n	8002d4a <get_scene_mask+0xa2>
 8002ce2:	f04f 0a00 	mov.w	sl, #0
	cell_c right = MIN(block_to_cell_x(camera_x_block) + offset_w, block_to_cell_x(WORLD_WIDTH_BLOCKS));
 8002ce6:	4b5a      	ldr	r3, [pc, #360]	; (8002e50 <get_scene_mask+0x1a8>)
 8002ce8:	8818      	ldrh	r0, [r3, #0]
 8002cea:	f002 f98d 	bl	8005008 <block_to_cell_x>
 8002cee:	182e      	adds	r6, r5, r0
 8002cf0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002cf4:	f002 f988 	bl	8005008 <block_to_cell_x>
 8002cf8:	4286      	cmp	r6, r0
 8002cfa:	da2e      	bge.n	8002d5a <get_scene_mask+0xb2>
 8002cfc:	4b54      	ldr	r3, [pc, #336]	; (8002e50 <get_scene_mask+0x1a8>)
 8002cfe:	8818      	ldrh	r0, [r3, #0]
 8002d00:	f002 f982 	bl	8005008 <block_to_cell_x>
 8002d04:	4405      	add	r5, r0
 8002d06:	fa1f f985 	uxth.w	r9, r5
	cell_c bottom = MIN(block_to_cell_y(camera_y_block) + offset_h, block_to_cell_y(WORLD_HEIGHT_BLOCKS));
 8002d0a:	4b52      	ldr	r3, [pc, #328]	; (8002e54 <get_scene_mask+0x1ac>)
 8002d0c:	8818      	ldrh	r0, [r3, #0]
 8002d0e:	f002 f97d 	bl	800500c <block_to_cell_y>
 8002d12:	1825      	adds	r5, r4, r0
 8002d14:	20f0      	movs	r0, #240	; 0xf0
 8002d16:	f002 f979 	bl	800500c <block_to_cell_y>
 8002d1a:	4285      	cmp	r5, r0
 8002d1c:	da23      	bge.n	8002d66 <get_scene_mask+0xbe>
 8002d1e:	4b4d      	ldr	r3, [pc, #308]	; (8002e54 <get_scene_mask+0x1ac>)
 8002d20:	8818      	ldrh	r0, [r3, #0]
 8002d22:	f002 f973 	bl	800500c <block_to_cell_y>
 8002d26:	4404      	add	r4, r0
 8002d28:	b2a3      	uxth	r3, r4
 8002d2a:	9305      	str	r3, [sp, #20]
	new_frame = 0;
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	4b4a      	ldr	r3, [pc, #296]	; (8002e58 <get_scene_mask+0x1b0>)
 8002d30:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = top; i < bottom; i++) {
 8002d32:	4655      	mov	r5, sl
	uint16_t y = 0;
 8002d34:	4614      	mov	r4, r2
 8002d36:	9e05      	ldr	r6, [sp, #20]
	for (uint16_t i = top; i < bottom; i++) {
 8002d38:	e02b      	b.n	8002d92 <get_scene_mask+0xea>
	cell_c left = MAX(0, (int16_t) block_to_cell_x(camera_x_block) - offset_w);
 8002d3a:	4b45      	ldr	r3, [pc, #276]	; (8002e50 <get_scene_mask+0x1a8>)
 8002d3c:	8818      	ldrh	r0, [r3, #0]
 8002d3e:	f002 f963 	bl	8005008 <block_to_cell_x>
 8002d42:	1b43      	subs	r3, r0, r5
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	9304      	str	r3, [sp, #16]
 8002d48:	e7c3      	b.n	8002cd2 <get_scene_mask+0x2a>
	cell_c top = MAX(0, (int16_t) block_to_cell_y(camera_y_block) - offset_h);
 8002d4a:	4b42      	ldr	r3, [pc, #264]	; (8002e54 <get_scene_mask+0x1ac>)
 8002d4c:	8818      	ldrh	r0, [r3, #0]
 8002d4e:	f002 f95d 	bl	800500c <block_to_cell_y>
 8002d52:	1b03      	subs	r3, r0, r4
 8002d54:	fa1f fa83 	uxth.w	sl, r3
 8002d58:	e7c5      	b.n	8002ce6 <get_scene_mask+0x3e>
	cell_c right = MIN(block_to_cell_x(camera_x_block) + offset_w, block_to_cell_x(WORLD_WIDTH_BLOCKS));
 8002d5a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002d5e:	f002 f953 	bl	8005008 <block_to_cell_x>
 8002d62:	4681      	mov	r9, r0
 8002d64:	e7d1      	b.n	8002d0a <get_scene_mask+0x62>
	cell_c bottom = MIN(block_to_cell_y(camera_y_block) + offset_h, block_to_cell_y(WORLD_HEIGHT_BLOCKS));
 8002d66:	20f0      	movs	r0, #240	; 0xf0
 8002d68:	f002 f950 	bl	800500c <block_to_cell_y>
 8002d6c:	9005      	str	r0, [sp, #20]
 8002d6e:	e7dd      	b.n	8002d2c <get_scene_mask+0x84>
			SCENE_MASK[y][x] = 0;
 8002d70:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002d74:	4839      	ldr	r0, [pc, #228]	; (8002e5c <get_scene_mask+0x1b4>)
 8002d76:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	5488      	strb	r0, [r1, r2]
			x++;
 8002d7e:	3201      	adds	r2, #1
 8002d80:	b292      	uxth	r2, r2
		for (uint16_t j = left; j < right; j++) {
 8002d82:	3301      	adds	r3, #1
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	454b      	cmp	r3, r9
 8002d88:	d3f2      	bcc.n	8002d70 <get_scene_mask+0xc8>
		y++;
 8002d8a:	3401      	adds	r4, #1
 8002d8c:	b2a4      	uxth	r4, r4
	for (uint16_t i = top; i < bottom; i++) {
 8002d8e:	3501      	adds	r5, #1
 8002d90:	b2ad      	uxth	r5, r5
 8002d92:	42b5      	cmp	r5, r6
 8002d94:	d201      	bcs.n	8002d9a <get_scene_mask+0xf2>
		for (uint16_t j = left; j < right; j++) {
 8002d96:	9b04      	ldr	r3, [sp, #16]
 8002d98:	e7f5      	b.n	8002d86 <get_scene_mask+0xde>
	x = 0; y = 0;
 8002d9a:	f04f 0800 	mov.w	r8, #0
 8002d9e:	e04a      	b.n	8002e36 <get_scene_mask+0x18e>
			uint8_t val = WORLD[i][j];
 8002da0:	4b2f      	ldr	r3, [pc, #188]	; (8002e60 <get_scene_mask+0x1b8>)
 8002da2:	22c8      	movs	r2, #200	; 0xc8
 8002da4:	fb02 330a 	mla	r3, r2, sl, r3
 8002da8:	5d1f      	ldrb	r7, [r3, r4]
			uint8_t l_val = (val & 0xF0) >> 4;
 8002daa:	093b      	lsrs	r3, r7, #4
			uint8_t r_val = val & 0x0F;
 8002dac:	f007 070f 	and.w	r7, r7, #15
			if (l_val == _tree) {
 8002db0:	2b0e      	cmp	r3, #14
 8002db2:	d023      	beq.n	8002dfc <get_scene_mask+0x154>
			uint8_t mask_val_l = 0, mask_val_r = 0;
 8002db4:	f04f 0b00 	mov.w	fp, #0
			if (r_val == _tree) {
 8002db8:	2f0e      	cmp	r7, #14
 8002dba:	d02a      	beq.n	8002e12 <get_scene_mask+0x16a>
			uint8_t mask_val_l = 0, mask_val_r = 0;
 8002dbc:	2300      	movs	r3, #0
			SCENE_MASK[y][x] = (mask_val_l << 4) | mask_val_r;
 8002dbe:	ea43 1b0b 	orr.w	fp, r3, fp, lsl #4
 8002dc2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8002dc6:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <get_scene_mask+0x1b4>)
 8002dc8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8002dcc:	9b03      	ldr	r3, [sp, #12]
 8002dce:	f806 b003 	strb.w	fp, [r6, r3]
			x++;
 8002dd2:	3501      	adds	r5, #1
 8002dd4:	b2ad      	uxth	r5, r5
		for (uint16_t j = left; j < right; j++) {
 8002dd6:	3401      	adds	r4, #1
 8002dd8:	b2a4      	uxth	r4, r4
 8002dda:	454c      	cmp	r4, r9
 8002ddc:	d223      	bcs.n	8002e26 <get_scene_mask+0x17e>
			if (SCENE_MASK[y][x] > 0 && new_frame == 0) continue;
 8002dde:	4646      	mov	r6, r8
 8002de0:	9503      	str	r5, [sp, #12]
 8002de2:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8002de6:	4a1d      	ldr	r2, [pc, #116]	; (8002e5c <get_scene_mask+0x1b4>)
 8002de8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002dec:	5d5b      	ldrb	r3, [r3, r5]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0d6      	beq.n	8002da0 <get_scene_mask+0xf8>
 8002df2:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <get_scene_mask+0x1b0>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1d2      	bne.n	8002da0 <get_scene_mask+0xf8>
 8002dfa:	e7ec      	b.n	8002dd6 <get_scene_mask+0x12e>
				mark_tree(y, x, 0, TREE_HEIGHT/BLOCK_WIDTH, TREE_WIDTH/BLOCK_WIDTH);
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	2310      	movs	r3, #16
 8002e02:	2200      	movs	r2, #0
 8002e04:	4629      	mov	r1, r5
 8002e06:	4640      	mov	r0, r8
 8002e08:	f7ff ff2c 	bl	8002c64 <mark_tree>
				mask_val_l = 1;
 8002e0c:	f04f 0b01 	mov.w	fp, #1
 8002e10:	e7d2      	b.n	8002db8 <get_scene_mask+0x110>
				mark_tree(y, x, 1, TREE_HEIGHT/BLOCK_WIDTH, TREE_WIDTH/BLOCK_WIDTH);
 8002e12:	2308      	movs	r3, #8
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2310      	movs	r3, #16
 8002e18:	2201      	movs	r2, #1
 8002e1a:	4629      	mov	r1, r5
 8002e1c:	4640      	mov	r0, r8
 8002e1e:	f7ff ff21 	bl	8002c64 <mark_tree>
				mask_val_r = 1;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e7cb      	b.n	8002dbe <get_scene_mask+0x116>
		y++;
 8002e26:	f108 0801 	add.w	r8, r8, #1
 8002e2a:	fa1f f888 	uxth.w	r8, r8
	for (uint16_t i = top; i < bottom; i++) {
 8002e2e:	f10a 0a01 	add.w	sl, sl, #1
 8002e32:	fa1f fa8a 	uxth.w	sl, sl
 8002e36:	9b05      	ldr	r3, [sp, #20]
 8002e38:	459a      	cmp	sl, r3
 8002e3a:	d202      	bcs.n	8002e42 <get_scene_mask+0x19a>
		for (uint16_t j = left; j < right; j++) {
 8002e3c:	9c04      	ldr	r4, [sp, #16]
 8002e3e:	2500      	movs	r5, #0
 8002e40:	e7cb      	b.n	8002dda <get_scene_mask+0x132>
	new_frame = 1;
 8002e42:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <get_scene_mask+0x1b0>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	701a      	strb	r2, [r3, #0]
}
 8002e48:	b007      	add	sp, #28
 8002e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e4e:	bf00      	nop
 8002e50:	200121b4 	.word	0x200121b4
 8002e54:	200121b6 	.word	0x200121b6
 8002e58:	200121b8 	.word	0x200121b8
 8002e5c:	20005ca0 	.word	0x20005ca0
 8002e60:	20006634 	.word	0x20006634

08002e64 <update_camera_center>:

// x,y in blocks
void update_camera_center(uint16_t x, uint16_t y) {
	// Check if we are at least half a screen from a border
	if (x >= WORLD_WIDTH_BLOCKS - (SCENE_WIDTH_BLOCKS / 2 + 1)) {
 8002e64:	f5b0 7fb3 	cmp.w	r0, #358	; 0x166
 8002e68:	d803      	bhi.n	8002e72 <update_camera_center+0xe>
		x = WORLD_WIDTH_BLOCKS - SCENE_WIDTH_BLOCKS / 2 + 1;
	} else if (x < SCENE_WIDTH_BLOCKS / 2) {
 8002e6a:	2827      	cmp	r0, #39	; 0x27
 8002e6c:	d803      	bhi.n	8002e76 <update_camera_center+0x12>
		x = SCENE_WIDTH_BLOCKS / 2 + 1;
 8002e6e:	2029      	movs	r0, #41	; 0x29
 8002e70:	e001      	b.n	8002e76 <update_camera_center+0x12>
		x = WORLD_WIDTH_BLOCKS - SCENE_WIDTH_BLOCKS / 2 + 1;
 8002e72:	f240 1069 	movw	r0, #361	; 0x169
	}

	if (y >= WORLD_HEIGHT_BLOCKS - (SCENE_HEIGHT_BLOCKS / 2 + 1)) {
 8002e76:	29d0      	cmp	r1, #208	; 0xd0
 8002e78:	d803      	bhi.n	8002e82 <update_camera_center+0x1e>
		y = WORLD_HEIGHT_BLOCKS - (SCENE_HEIGHT_BLOCKS / 2 + 1);
	} else if (y < (SCENE_HEIGHT_BLOCKS / 2 + 1)) {
 8002e7a:	291e      	cmp	r1, #30
 8002e7c:	d802      	bhi.n	8002e84 <update_camera_center+0x20>
		y = (SCENE_HEIGHT_BLOCKS / 2 + 1);
 8002e7e:	211f      	movs	r1, #31
 8002e80:	e000      	b.n	8002e84 <update_camera_center+0x20>
		y = WORLD_HEIGHT_BLOCKS - (SCENE_HEIGHT_BLOCKS / 2 + 1);
 8002e82:	21d1      	movs	r1, #209	; 0xd1
	}

	camera_x_block = x;
 8002e84:	4b02      	ldr	r3, [pc, #8]	; (8002e90 <update_camera_center+0x2c>)
 8002e86:	8018      	strh	r0, [r3, #0]
	camera_y_block = y;
 8002e88:	4b02      	ldr	r3, [pc, #8]	; (8002e94 <update_camera_center+0x30>)
 8002e8a:	8019      	strh	r1, [r3, #0]
}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	200121b4 	.word	0x200121b4
 8002e94:	200121b6 	.word	0x200121b6

08002e98 <place_trees>:


}


void place_trees() {
 8002e98:	b570      	push	{r4, r5, r6, lr}
	// TODO - mark every covered pixel as taken

	srand(time(NULL));
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f00d fc18 	bl	80106d0 <time>
 8002ea0:	f00c fcc8 	bl	800f834 <srand>
	float tree_density = 0.2;
	for (int i = 0; i < tree_mask_width; i++) {
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e003      	b.n	8002eb0 <place_trees+0x18>
		TREE_MASK[i] = 0;
 8002ea8:	4a2c      	ldr	r2, [pc, #176]	; (8002f5c <place_trees+0xc4>)
 8002eaa:	2100      	movs	r1, #0
 8002eac:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < tree_mask_width; i++) {
 8002eae:	3301      	adds	r3, #1
 8002eb0:	2b31      	cmp	r3, #49	; 0x31
 8002eb2:	ddf9      	ble.n	8002ea8 <place_trees+0x10>
	}

	for (block_c i = 0; i < WORLD_WIDTH_BLOCKS; i++) {
 8002eb4:	2500      	movs	r5, #0
 8002eb6:	e022      	b.n	8002efe <place_trees+0x66>
		if (rand() % 100 < tree_density) {

			// Trees only on odd numbered blocks (bottom 4 bits)
			WORLD[y][i/2] = (WORLD[y][i/2] & 0xF0) | _tree;
			for (int j = 1; j < TREE_WIDTH; j++) {
				for (int i = 0; i < TREE_HEIGHT; i++) {
 8002eb8:	3301      	adds	r3, #1
 8002eba:	2b3f      	cmp	r3, #63	; 0x3f
 8002ebc:	dc13      	bgt.n	8002ee6 <place_trees+0x4e>
					if (tree[i][j] > 0) {
 8002ebe:	eb0c 1243 	add.w	r2, ip, r3, lsl #5
 8002ec2:	4927      	ldr	r1, [pc, #156]	; (8002f60 <place_trees+0xc8>)
 8002ec4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d0f5      	beq.n	8002eb8 <place_trees+0x20>
						WORLD[y+i][i/2+j] = _empty;
 8002ecc:	18e1      	adds	r1, r4, r3
 8002ece:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 8002ed2:	eb0c 0262 	add.w	r2, ip, r2, asr #1
 8002ed6:	4823      	ldr	r0, [pc, #140]	; (8002f64 <place_trees+0xcc>)
 8002ed8:	f04f 0ec8 	mov.w	lr, #200	; 0xc8
 8002edc:	fb0e 0101 	mla	r1, lr, r1, r0
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	5488      	strb	r0, [r1, r2]
 8002ee4:	e7e8      	b.n	8002eb8 <place_trees+0x20>
			for (int j = 1; j < TREE_WIDTH; j++) {
 8002ee6:	f10c 0c01 	add.w	ip, ip, #1
 8002eea:	f1bc 0f1f 	cmp.w	ip, #31
 8002eee:	dc01      	bgt.n	8002ef4 <place_trees+0x5c>
				for (int i = 0; i < TREE_HEIGHT; i++) {
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e7e2      	b.n	8002eba <place_trees+0x22>
					}
				}
			}
			TREE_MASK[coord] = 1;
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <place_trees+0xc4>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	559a      	strb	r2, [r3, r6]
	for (block_c i = 0; i < WORLD_WIDTH_BLOCKS; i++) {
 8002efa:	3501      	adds	r5, #1
 8002efc:	b2ad      	uxth	r5, r5
 8002efe:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
 8002f02:	d229      	bcs.n	8002f58 <place_trees+0xc0>
		block_c coord = i / (TREE_WIDTH / BLOCK_WIDTH);
 8002f04:	08ee      	lsrs	r6, r5, #3
		block_c y = LVL1_HMAP[i] - TREE_HEIGHT / BLOCK_WIDTH;
 8002f06:	4b18      	ldr	r3, [pc, #96]	; (8002f68 <place_trees+0xd0>)
 8002f08:	f833 4015 	ldrh.w	r4, [r3, r5, lsl #1]
 8002f0c:	3c10      	subs	r4, #16
 8002f0e:	b2a4      	uxth	r4, r4
		if (rand() % 100 < tree_density) {
 8002f10:	f00c fcbe 	bl	800f890 <rand>
 8002f14:	4915      	ldr	r1, [pc, #84]	; (8002f6c <place_trees+0xd4>)
 8002f16:	fb81 3100 	smull	r3, r1, r1, r0
 8002f1a:	17c3      	asrs	r3, r0, #31
 8002f1c:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8002f20:	2164      	movs	r1, #100	; 0x64
 8002f22:	fb01 0313 	mls	r3, r1, r3, r0
 8002f26:	ee07 3a90 	vmov	s15, r3
 8002f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f2e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002f70 <place_trees+0xd8>
 8002f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3a:	d5de      	bpl.n	8002efa <place_trees+0x62>
			WORLD[y][i/2] = (WORLD[y][i/2] & 0xF0) | _tree;
 8002f3c:	086a      	lsrs	r2, r5, #1
 8002f3e:	4909      	ldr	r1, [pc, #36]	; (8002f64 <place_trees+0xcc>)
 8002f40:	23c8      	movs	r3, #200	; 0xc8
 8002f42:	fb03 1104 	mla	r1, r3, r4, r1
 8002f46:	568b      	ldrsb	r3, [r1, r2]
 8002f48:	f023 030f 	bic.w	r3, r3, #15
 8002f4c:	f043 030e 	orr.w	r3, r3, #14
 8002f50:	548b      	strb	r3, [r1, r2]
			for (int j = 1; j < TREE_WIDTH; j++) {
 8002f52:	f04f 0c01 	mov.w	ip, #1
 8002f56:	e7c8      	b.n	8002eea <place_trees+0x52>
		}
	}
}
 8002f58:	bd70      	pop	{r4, r5, r6, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20006600 	.word	0x20006600
 8002f60:	20000000 	.word	0x20000000
 8002f64:	20006634 	.word	0x20006634
 8002f68:	20005020 	.word	0x20005020
 8002f6c:	51eb851f 	.word	0x51eb851f
 8002f70:	3e4ccccd 	.word	0x3e4ccccd

08002f74 <init_light_map>:


void init_light_map() {
 8002f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	// Coefficient between world and light width, !HEIGHT IS THE SAME!
	uint8_t light_to_world_coefficient = WORLD_WIDTH_CELLS / LIGHT_MAP_WIDTH;

	for (uint16_t i = 0; i < LIGHT_MAP_WIDTH; i++) {
 8002f78:	f04f 0800 	mov.w	r8, #0
 8002f7c:	e039      	b.n	8002ff2 <init_light_map+0x7e>

			uint16_t x_coor = i * light_to_world_coefficient;
			uint16_t y_coor = j;

			// Check 4 world cells, equivalent to 8 blocks
			for (uint16_t k = 0; k < light_to_world_coefficient; k++) {
 8002f7e:	3401      	adds	r4, #1
 8002f80:	b2a4      	uxth	r4, r4
 8002f82:	2c03      	cmp	r4, #3
 8002f84:	d821      	bhi.n	8002fca <init_light_map+0x56>
				uint16_t world_x = x_coor + k;
 8002f86:	19e3      	adds	r3, r4, r7
 8002f88:	b29b      	uxth	r3, r3
				uint16_t world_y = y_coor;

				uint8_t cell = WORLD[world_y][world_x];
 8002f8a:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <init_light_map+0x8c>)
 8002f8c:	21c8      	movs	r1, #200	; 0xc8
 8002f8e:	fb01 2205 	mla	r2, r1, r5, r2
 8002f92:	5cd0      	ldrb	r0, [r2, r3]

				uint8_t l_cell = (cell & 0xF0) >> 4;
				uint8_t r_cell = cell & 0x0F;
 8002f94:	f000 090f 	and.w	r9, r0, #15

				if (is_light_source(l_cell)) {
 8002f98:	0900      	lsrs	r0, r0, #4
 8002f9a:	f7ff f95d 	bl	8002258 <is_light_source>
 8002f9e:	b130      	cbz	r0, 8002fae <init_light_map+0x3a>
					lighting_byte |= 1 << (8 - (2 * k));
 8002fa0:	f1c4 0304 	rsb	r3, r4, #4
 8002fa4:	005a      	lsls	r2, r3, #1
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	4093      	lsls	r3, r2
 8002faa:	431e      	orrs	r6, r3
 8002fac:	b2f6      	uxtb	r6, r6
				}

				if (is_light_source(r_cell)) {
 8002fae:	4648      	mov	r0, r9
 8002fb0:	f7ff f952 	bl	8002258 <is_light_source>
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	d0e2      	beq.n	8002f7e <init_light_map+0xa>
					lighting_byte |= 1 << (8 - (2 * k) - 1);
 8002fb8:	f1c4 0304 	rsb	r3, r4, #4
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	1e5a      	subs	r2, r3, #1
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	4093      	lsls	r3, r2
 8002fc4:	431e      	orrs	r6, r3
 8002fc6:	b2f6      	uxtb	r6, r6
 8002fc8:	e7d9      	b.n	8002f7e <init_light_map+0xa>
				}
			}
		LIGHT_MAP[j][i] = lighting_byte;
 8002fca:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <init_light_map+0x90>)
 8002fcc:	2232      	movs	r2, #50	; 0x32
 8002fce:	fb02 3305 	mla	r3, r2, r5, r3
 8002fd2:	f803 6008 	strb.w	r6, [r3, r8]
		for (uint16_t j = 0; j < LIGHT_MAP_HEIGHT; j++) {
 8002fd6:	3501      	adds	r5, #1
 8002fd8:	b2ad      	uxth	r5, r5
 8002fda:	2def      	cmp	r5, #239	; 0xef
 8002fdc:	d805      	bhi.n	8002fea <init_light_map+0x76>
			uint16_t x_coor = i * light_to_world_coefficient;
 8002fde:	ea4f 0788 	mov.w	r7, r8, lsl #2
 8002fe2:	b2bf      	uxth	r7, r7
			for (uint16_t k = 0; k < light_to_world_coefficient; k++) {
 8002fe4:	2400      	movs	r4, #0
			uint8_t lighting_byte = 0;
 8002fe6:	4626      	mov	r6, r4
			for (uint16_t k = 0; k < light_to_world_coefficient; k++) {
 8002fe8:	e7cb      	b.n	8002f82 <init_light_map+0xe>
	for (uint16_t i = 0; i < LIGHT_MAP_WIDTH; i++) {
 8002fea:	f108 0801 	add.w	r8, r8, #1
 8002fee:	fa1f f888 	uxth.w	r8, r8
 8002ff2:	f1b8 0f31 	cmp.w	r8, #49	; 0x31
 8002ff6:	d801      	bhi.n	8002ffc <init_light_map+0x88>
		for (uint16_t j = 0; j < LIGHT_MAP_HEIGHT; j++) {
 8002ff8:	2500      	movs	r5, #0
 8002ffa:	e7ee      	b.n	8002fda <init_light_map+0x66>
		}
	}
}
 8002ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003000:	20006634 	.word	0x20006634
 8003004:	20002140 	.word	0x20002140

08003008 <is_night>:

bool is_night() {
 8003008:	b508      	push	{r3, lr}
	srand(time(NULL));
 800300a:	2000      	movs	r0, #0
 800300c:	f00d fb60 	bl	80106d0 <time>
 8003010:	f00c fc10 	bl	800f834 <srand>
	float random = (float)rand() / RAND_MAX;
 8003014:	f00c fc3c 	bl	800f890 <rand>
 8003018:	ee07 0a90 	vmov	s15, r0
 800301c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003020:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003040 <is_night+0x38>
 8003024:	ee67 7a87 	vmul.f32	s15, s15, s14

	if (random < 0.5) {
 8003028:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800302c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003034:	d401      	bmi.n	800303a <is_night+0x32>
		return true;
	}
	return false;
 8003036:	2000      	movs	r0, #0
}
 8003038:	bd08      	pop	{r3, pc}
		return true;
 800303a:	2001      	movs	r0, #1
 800303c:	e7fc      	b.n	8003038 <is_night+0x30>
 800303e:	bf00      	nop
 8003040:	30000000 	.word	0x30000000
 8003044:	00000000 	.word	0x00000000

08003048 <euclidean_dist>:

float manhattan_dist(int8_t x, int8_t y) {
	return abs(x) + abs(y);
}

float euclidean_dist(int8_t x, int8_t y) {
 8003048:	b570      	push	{r4, r5, r6, lr}
 800304a:	ed2d 8b02 	vpush	{d8}
 800304e:	460e      	mov	r6, r1
	return sqrt(pow(x,2) + pow(y,2));
 8003050:	ed9f 8b15 	vldr	d8, [pc, #84]	; 80030a8 <euclidean_dist+0x60>
 8003054:	f7fd fa8e 	bl	8000574 <__aeabi_i2d>
 8003058:	eeb0 1a48 	vmov.f32	s2, s16
 800305c:	eef0 1a68 	vmov.f32	s3, s17
 8003060:	ec41 0b10 	vmov	d0, r0, r1
 8003064:	f00a fb80 	bl	800d768 <pow>
 8003068:	ec55 4b10 	vmov	r4, r5, d0
 800306c:	4630      	mov	r0, r6
 800306e:	f7fd fa81 	bl	8000574 <__aeabi_i2d>
 8003072:	eeb0 1a48 	vmov.f32	s2, s16
 8003076:	eef0 1a68 	vmov.f32	s3, s17
 800307a:	ec41 0b10 	vmov	d0, r0, r1
 800307e:	f00a fb73 	bl	800d768 <pow>
 8003082:	ec53 2b10 	vmov	r2, r3, d0
 8003086:	4620      	mov	r0, r4
 8003088:	4629      	mov	r1, r5
 800308a:	f7fd f927 	bl	80002dc <__adddf3>
 800308e:	ec41 0b10 	vmov	d0, r0, r1
 8003092:	f00a fbd9 	bl	800d848 <sqrt>
 8003096:	ec51 0b10 	vmov	r0, r1, d0
 800309a:	f7fd fdcd 	bl	8000c38 <__aeabi_d2f>
}
 800309e:	ee00 0a10 	vmov	s0, r0
 80030a2:	ecbd 8b02 	vpop	{d8}
 80030a6:	bd70      	pop	{r4, r5, r6, pc}
 80030a8:	00000000 	.word	0x00000000
 80030ac:	40000000 	.word	0x40000000

080030b0 <precompute_euclidean>:

void precompute_euclidean() {
 80030b0:	b538      	push	{r3, r4, r5, lr}
	for (uint8_t i = 0; i <= LIGHT_RADIUS; i++) {
 80030b2:	2500      	movs	r5, #0
 80030b4:	e00f      	b.n	80030d6 <precompute_euclidean+0x26>
		for (uint8_t j = i; j <= LIGHT_RADIUS; j++) {
			float dist = euclidean_dist(i, j);
 80030b6:	b261      	sxtb	r1, r4
 80030b8:	b268      	sxtb	r0, r5
 80030ba:	f7ff ffc5 	bl	8003048 <euclidean_dist>
			EUCLIDEAN_DISTANCES[i+j] = dist;
 80030be:	192a      	adds	r2, r5, r4
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <precompute_euclidean+0x30>)
 80030c2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80030c6:	ed83 0a00 	vstr	s0, [r3]
		for (uint8_t j = i; j <= LIGHT_RADIUS; j++) {
 80030ca:	3401      	adds	r4, #1
 80030cc:	b2e4      	uxtb	r4, r4
 80030ce:	2c10      	cmp	r4, #16
 80030d0:	d9f1      	bls.n	80030b6 <precompute_euclidean+0x6>
	for (uint8_t i = 0; i <= LIGHT_RADIUS; i++) {
 80030d2:	3501      	adds	r5, #1
 80030d4:	b2ed      	uxtb	r5, r5
 80030d6:	2d10      	cmp	r5, #16
 80030d8:	d801      	bhi.n	80030de <precompute_euclidean+0x2e>
		for (uint8_t j = i; j <= LIGHT_RADIUS; j++) {
 80030da:	462c      	mov	r4, r5
 80030dc:	e7f7      	b.n	80030ce <precompute_euclidean+0x1e>
		}
	}
}
 80030de:	bd38      	pop	{r3, r4, r5, pc}
 80030e0:	20001ab8 	.word	0x20001ab8

080030e4 <get_euclidean>:

float get_euclidean(uint8_t manhattan_dist) {
	return EUCLIDEAN_DISTANCES[manhattan_dist];
 80030e4:	4b02      	ldr	r3, [pc, #8]	; (80030f0 <get_euclidean+0xc>)
 80030e6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
}
 80030ea:	ed93 0a00 	vldr	s0, [r3]
 80030ee:	4770      	bx	lr
 80030f0:	20001ab8 	.word	0x20001ab8
 80030f4:	00000000 	.word	0x00000000

080030f8 <light_intensity>:
float get_light_intensity(uint8_t manhattan_dist) {
	float value = LIGHT_INTENSITIES[manhattan_dist];
	return value;
}

float light_intensity(float dist) {
 80030f8:	b508      	push	{r3, lr}
 80030fa:	ed2d 8b02 	vpush	{d8}
	if (dist < 4) {
 80030fe:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8003102:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310a:	d41e      	bmi.n	800314a <light_intensity+0x52>
		return MIN(1, pow(LIGHT_DEGRADATION_RATE, dist));
	} else if (dist < 6) {
 800310c:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8003110:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003118:	d54b      	bpl.n	80031b2 <light_intensity+0xba>
		return MIN(1, pow(LIGHT_DEGRADATION_RATE-.1, dist));
 800311a:	ee10 0a10 	vmov	r0, s0
 800311e:	f7fd fa3b 	bl	8000598 <__aeabi_f2d>
 8003122:	ec41 0b18 	vmov	d8, r0, r1
 8003126:	ec41 0b11 	vmov	d1, r0, r1
 800312a:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8003200 <light_intensity+0x108>
 800312e:	f00a fb1b 	bl	800d768 <pow>
 8003132:	ec51 0b10 	vmov	r0, r1, d0
 8003136:	2200      	movs	r2, #0
 8003138:	4b37      	ldr	r3, [pc, #220]	; (8003218 <light_intensity+0x120>)
 800313a:	f7fd fd15 	bl	8000b68 <__aeabi_dcmpgt>
 800313e:	b348      	cbz	r0, 8003194 <light_intensity+0x9c>
 8003140:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	} else {
		return MIN(1, pow(LIGHT_DEGRADATION_RATE-.2, dist));
	}
}
 8003144:	ecbd 8b02 	vpop	{d8}
 8003148:	bd08      	pop	{r3, pc}
		return MIN(1, pow(LIGHT_DEGRADATION_RATE, dist));
 800314a:	ee10 0a10 	vmov	r0, s0
 800314e:	f7fd fa23 	bl	8000598 <__aeabi_f2d>
 8003152:	ec41 0b18 	vmov	d8, r0, r1
 8003156:	ec41 0b11 	vmov	d1, r0, r1
 800315a:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 8003208 <light_intensity+0x110>
 800315e:	f00a fb03 	bl	800d768 <pow>
 8003162:	ec51 0b10 	vmov	r0, r1, d0
 8003166:	2200      	movs	r2, #0
 8003168:	4b2b      	ldr	r3, [pc, #172]	; (8003218 <light_intensity+0x120>)
 800316a:	f7fd fcfd 	bl	8000b68 <__aeabi_dcmpgt>
 800316e:	b110      	cbz	r0, 8003176 <light_intensity+0x7e>
 8003170:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003174:	e7e6      	b.n	8003144 <light_intensity+0x4c>
 8003176:	eeb0 1a48 	vmov.f32	s2, s16
 800317a:	eef0 1a68 	vmov.f32	s3, s17
 800317e:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8003208 <light_intensity+0x110>
 8003182:	f00a faf1 	bl	800d768 <pow>
 8003186:	ec51 0b10 	vmov	r0, r1, d0
 800318a:	f7fd fd55 	bl	8000c38 <__aeabi_d2f>
 800318e:	ee00 0a10 	vmov	s0, r0
 8003192:	e7d7      	b.n	8003144 <light_intensity+0x4c>
		return MIN(1, pow(LIGHT_DEGRADATION_RATE-.1, dist));
 8003194:	eeb0 1a48 	vmov.f32	s2, s16
 8003198:	eef0 1a68 	vmov.f32	s3, s17
 800319c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8003200 <light_intensity+0x108>
 80031a0:	f00a fae2 	bl	800d768 <pow>
 80031a4:	ec51 0b10 	vmov	r0, r1, d0
 80031a8:	f7fd fd46 	bl	8000c38 <__aeabi_d2f>
 80031ac:	ee00 0a10 	vmov	s0, r0
 80031b0:	e7c8      	b.n	8003144 <light_intensity+0x4c>
		return MIN(1, pow(LIGHT_DEGRADATION_RATE-.2, dist));
 80031b2:	ee10 0a10 	vmov	r0, s0
 80031b6:	f7fd f9ef 	bl	8000598 <__aeabi_f2d>
 80031ba:	ec41 0b18 	vmov	d8, r0, r1
 80031be:	ec41 0b11 	vmov	d1, r0, r1
 80031c2:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8003210 <light_intensity+0x118>
 80031c6:	f00a facf 	bl	800d768 <pow>
 80031ca:	ec51 0b10 	vmov	r0, r1, d0
 80031ce:	2200      	movs	r2, #0
 80031d0:	4b11      	ldr	r3, [pc, #68]	; (8003218 <light_intensity+0x120>)
 80031d2:	f7fd fcc9 	bl	8000b68 <__aeabi_dcmpgt>
 80031d6:	b110      	cbz	r0, 80031de <light_intensity+0xe6>
 80031d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80031dc:	e7b2      	b.n	8003144 <light_intensity+0x4c>
 80031de:	eeb0 1a48 	vmov.f32	s2, s16
 80031e2:	eef0 1a68 	vmov.f32	s3, s17
 80031e6:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8003210 <light_intensity+0x118>
 80031ea:	f00a fabd 	bl	800d768 <pow>
 80031ee:	ec51 0b10 	vmov	r0, r1, d0
 80031f2:	f7fd fd21 	bl	8000c38 <__aeabi_d2f>
 80031f6:	ee00 0a10 	vmov	s0, r0
 80031fa:	e7a3      	b.n	8003144 <light_intensity+0x4c>
 80031fc:	f3af 8000 	nop.w
 8003200:	33333333 	.word	0x33333333
 8003204:	3feb3333 	.word	0x3feb3333
 8003208:	66666666 	.word	0x66666666
 800320c:	3fee6666 	.word	0x3fee6666
 8003210:	00000000 	.word	0x00000000
 8003214:	3fe80000 	.word	0x3fe80000
 8003218:	3ff00000 	.word	0x3ff00000
 800321c:	00000000 	.word	0x00000000

08003220 <precompute_light_intensity>:
void precompute_light_intensity() {
 8003220:	b510      	push	{r4, lr}
 8003222:	ed2d 8b02 	vpush	{d8}
	for (uint8_t i = 0; i < n_values; i++) {
 8003226:	2400      	movs	r4, #0
 8003228:	e00b      	b.n	8003242 <precompute_light_intensity+0x22>
		if (euclidean > 0.01) {
 800322a:	ee18 0a10 	vmov	r0, s16
 800322e:	f7fd f9b3 	bl	8000598 <__aeabi_f2d>
 8003232:	a314      	add	r3, pc, #80	; (adr r3, 8003284 <precompute_light_intensity+0x64>)
 8003234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003238:	f7fd fc96 	bl	8000b68 <__aeabi_dcmpgt>
 800323c:	b990      	cbnz	r0, 8003264 <precompute_light_intensity+0x44>
	for (uint8_t i = 0; i < n_values; i++) {
 800323e:	3401      	adds	r4, #1
 8003240:	b2e4      	uxtb	r4, r4
 8003242:	2c1f      	cmp	r4, #31
 8003244:	d818      	bhi.n	8003278 <precompute_light_intensity+0x58>
		float euclidean = get_euclidean(i);
 8003246:	4620      	mov	r0, r4
 8003248:	f7ff ff4c 	bl	80030e4 <get_euclidean>
 800324c:	eeb0 8a40 	vmov.f32	s16, s0
		euclidean = MAX(1, euclidean);
 8003250:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003254:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325c:	d5e5      	bpl.n	800322a <precompute_light_intensity+0xa>
 800325e:	eeb0 8a67 	vmov.f32	s16, s15
 8003262:	e7e2      	b.n	800322a <precompute_light_intensity+0xa>
			LIGHT_INTENSITIES[i] = light_intensity(euclidean);
 8003264:	eeb0 0a48 	vmov.f32	s0, s16
 8003268:	f7ff ff46 	bl	80030f8 <light_intensity>
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <precompute_light_intensity+0x60>)
 800326e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003272:	ed83 0a00 	vstr	s0, [r3]
 8003276:	e7e2      	b.n	800323e <precompute_light_intensity+0x1e>
}
 8003278:	ecbd 8b02 	vpop	{d8}
 800327c:	bd10      	pop	{r4, pc}
 800327e:	bf00      	nop
 8003280:	20002080 	.word	0x20002080
 8003284:	47ae147b 	.word	0x47ae147b
 8003288:	3f847ae1 	.word	0x3f847ae1

0800328c <assign_block_material>:


block_t assign_block_material(block_c x, block_c y) {
 800328c:	b538      	push	{r3, r4, r5, lr}
 800328e:	460c      	mov	r4, r1
	float probability_rock = 0.01;
	block_t block;

	// right block
	if (y > LVL1_HMAP[x]) { // Ground
 8003290:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <assign_block_material+0x5c>)
 8003292:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8003296:	428b      	cmp	r3, r1
 8003298:	d303      	bcc.n	80032a2 <assign_block_material+0x16>
			block = _rock;
		} else {
			block = _dirt;
		}

	} else if (y == LVL1_HMAP[x]) {
 800329a:	428b      	cmp	r3, r1
 800329c:	d01e      	beq.n	80032dc <assign_block_material+0x50>
		block = _grass;
	} else {
		block = _sky;
 800329e:	2004      	movs	r0, #4
	}

	return block;
}
 80032a0:	bd38      	pop	{r3, r4, r5, pc}
 80032a2:	4605      	mov	r5, r0
		float random = (float) rand() / (float) (RAND_MAX/100);
 80032a4:	f00c faf4 	bl	800f890 <rand>
 80032a8:	ee07 0a90 	vmov	s15, r0
 80032ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032b0:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80032ec <assign_block_material+0x60>
 80032b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
		if (random < probability_rock && abs(LVL1_HMAP[x] - y) > 2) {
 80032b8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80032f0 <assign_block_material+0x64>
 80032bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c4:	d50c      	bpl.n	80032e0 <assign_block_material+0x54>
 80032c6:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <assign_block_material+0x5c>)
 80032c8:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80032cc:	1b0c      	subs	r4, r1, r4
 80032ce:	2c00      	cmp	r4, #0
 80032d0:	bfb8      	it	lt
 80032d2:	4264      	neglt	r4, r4
 80032d4:	2c02      	cmp	r4, #2
 80032d6:	dc05      	bgt.n	80032e4 <assign_block_material+0x58>
			block = _dirt;
 80032d8:	2001      	movs	r0, #1
 80032da:	e7e1      	b.n	80032a0 <assign_block_material+0x14>
		block = _grass;
 80032dc:	2002      	movs	r0, #2
 80032de:	e7df      	b.n	80032a0 <assign_block_material+0x14>
			block = _dirt;
 80032e0:	2001      	movs	r0, #1
 80032e2:	e7dd      	b.n	80032a0 <assign_block_material+0x14>
			block = _rock;
 80032e4:	2007      	movs	r0, #7
 80032e6:	e7db      	b.n	80032a0 <assign_block_material+0x14>
 80032e8:	20005020 	.word	0x20005020
 80032ec:	4ba3d70a 	.word	0x4ba3d70a
 80032f0:	3c23d70a 	.word	0x3c23d70a

080032f4 <init_stage_0>:


// Get basic landscape - dirt, sky + caves, lava
void init_stage_0() {
 80032f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	srand(time(NULL));
 80032f8:	2000      	movs	r0, #0
 80032fa:	f00d f9e9 	bl	80106d0 <time>
 80032fe:	f00c fa99 	bl	800f834 <srand>

	// Values identifying cave and lava materials
	block_t cave = ((_dirt_bg << 4) | _dirt_bg);
	block_t lava = ((_lava << 4) | _lava);

	for (block_c i = 0; i < WORLD_HEIGHT_BLOCKS; i++) {
 8003302:	2500      	movs	r5, #0
 8003304:	e028      	b.n	8003358 <init_stage_0+0x64>
		for (block_c j = 0; j < WORLD_WIDTH_BLOCKS; j+=2) {
			block_t l_block; block_t r_block;

			// Check for predetermined special values and don't overwrite, because they are already put in
			if ((WORLD[i][j/2] == cave || WORLD[i][j/2] == lava) && i > LVL1_HMAP[j]) {
 8003306:	4b17      	ldr	r3, [pc, #92]	; (8003364 <init_stage_0+0x70>)
 8003308:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800330c:	42ab      	cmp	r3, r5
 800330e:	d310      	bcc.n	8003332 <init_stage_0+0x3e>
				continue;
			}

			// Assign materials
			l_block = assign_block_material(j, i);
 8003310:	4629      	mov	r1, r5
 8003312:	4620      	mov	r0, r4
 8003314:	f7ff ffba 	bl	800328c <assign_block_material>
 8003318:	4680      	mov	r8, r0
			r_block = assign_block_material(j+1, i);
 800331a:	1c60      	adds	r0, r4, #1
 800331c:	4629      	mov	r1, r5
 800331e:	b280      	uxth	r0, r0
 8003320:	f7ff ffb4 	bl	800328c <assign_block_material>


			// Store into WORLD
			WORLD[i][j/2] = (l_block << 4) | r_block;
 8003324:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
 8003328:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <init_stage_0+0x74>)
 800332a:	22c8      	movs	r2, #200	; 0xc8
 800332c:	fb02 3307 	mla	r3, r2, r7, r3
 8003330:	5598      	strb	r0, [r3, r6]
		for (block_c j = 0; j < WORLD_WIDTH_BLOCKS; j+=2) {
 8003332:	3402      	adds	r4, #2
 8003334:	b2a4      	uxth	r4, r4
 8003336:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 800333a:	d20b      	bcs.n	8003354 <init_stage_0+0x60>
			if ((WORLD[i][j/2] == cave || WORLD[i][j/2] == lava) && i > LVL1_HMAP[j]) {
 800333c:	462f      	mov	r7, r5
 800333e:	0866      	lsrs	r6, r4, #1
 8003340:	4b09      	ldr	r3, [pc, #36]	; (8003368 <init_stage_0+0x74>)
 8003342:	22c8      	movs	r2, #200	; 0xc8
 8003344:	fb02 3305 	mla	r3, r2, r5, r3
 8003348:	5d9b      	ldrb	r3, [r3, r6]
 800334a:	2bcc      	cmp	r3, #204	; 0xcc
 800334c:	d0db      	beq.n	8003306 <init_stage_0+0x12>
 800334e:	2b88      	cmp	r3, #136	; 0x88
 8003350:	d1de      	bne.n	8003310 <init_stage_0+0x1c>
 8003352:	e7d8      	b.n	8003306 <init_stage_0+0x12>
	for (block_c i = 0; i < WORLD_HEIGHT_BLOCKS; i++) {
 8003354:	3501      	adds	r5, #1
 8003356:	b2ad      	uxth	r5, r5
 8003358:	2def      	cmp	r5, #239	; 0xef
 800335a:	d801      	bhi.n	8003360 <init_stage_0+0x6c>
		for (block_c j = 0; j < WORLD_WIDTH_BLOCKS; j+=2) {
 800335c:	2400      	movs	r4, #0
 800335e:	e7ea      	b.n	8003336 <init_stage_0+0x42>
		}
	}
}
 8003360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003364:	20005020 	.word	0x20005020
 8003368:	20006634 	.word	0x20006634

0800336c <draw_blob>:
	free(CAVE_MAP);

}

// Draws blob, make sure value includes value for both blocks
void draw_blob(cell_c x, cell_c y, uint16_t radius, cell_t value) {
 800336c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003370:	4605      	mov	r5, r0
 8003372:	460e      	mov	r6, r1
 8003374:	4611      	mov	r1, r2
 8003376:	461c      	mov	r4, r3
	for (int8_t i = -radius; i <= radius; i++) {
 8003378:	f1c2 0800 	rsb	r8, r2, #0
 800337c:	fa4f f888 	sxtb.w	r8, r8
 8003380:	4647      	mov	r7, r8
 8003382:	e012      	b.n	80033aa <draw_blob+0x3e>
		for (int8_t j = -radius; j <= radius; j++) {
			WORLD[y+i][x+j] = value;
 8003384:	eb06 0e00 	add.w	lr, r6, r0
 8003388:	eb05 020c 	add.w	r2, r5, ip
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <draw_blob+0x4c>)
 800338e:	f04f 09c8 	mov.w	r9, #200	; 0xc8
 8003392:	fb09 3e0e 	mla	lr, r9, lr, r3
 8003396:	f80e 4002 	strb.w	r4, [lr, r2]
		for (int8_t j = -radius; j <= radius; j++) {
 800339a:	f10c 0c01 	add.w	ip, ip, #1
 800339e:	fa4f fc8c 	sxtb.w	ip, ip
 80033a2:	458c      	cmp	ip, r1
 80033a4:	ddee      	ble.n	8003384 <draw_blob+0x18>
	for (int8_t i = -radius; i <= radius; i++) {
 80033a6:	3701      	adds	r7, #1
 80033a8:	b27f      	sxtb	r7, r7
 80033aa:	4638      	mov	r0, r7
 80033ac:	428f      	cmp	r7, r1
 80033ae:	dc01      	bgt.n	80033b4 <draw_blob+0x48>
		for (int8_t j = -radius; j <= radius; j++) {
 80033b0:	46c4      	mov	ip, r8
 80033b2:	e7f6      	b.n	80033a2 <draw_blob+0x36>
		}
	}
}
 80033b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033b8:	20006634 	.word	0x20006634

080033bc <draw_circle>:

void draw_circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t cave_value) {
 80033bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033be:	4604      	mov	r4, r0
 80033c0:	4608      	mov	r0, r1
 80033c2:	4611      	mov	r1, r2
 80033c4:	461e      	mov	r6, r3
	uint16_t width = WORLD_WIDTH_BLOCKS / (2 * CAVE_SAMPLES_PER_CELL);
	uint16_t height = WORLD_HEIGHT_BLOCKS / CAVE_SAMPLES_PER_CELL;

	for (int8_t xx = -radius; xx < radius; xx++) {
 80033c6:	4255      	negs	r5, r2
 80033c8:	b26d      	sxtb	r5, r5
 80033ca:	462a      	mov	r2, r5
 80033cc:	e01f      	b.n	800340e <draw_circle+0x52>
		for (int8_t yy = -radius; yy < radius; yy++) {
 80033ce:	f10c 0c01 	add.w	ip, ip, #1
 80033d2:	fa4f fc8c 	sxtb.w	ip, ip
 80033d6:	458c      	cmp	ip, r1
 80033d8:	da17      	bge.n	800340a <draw_circle+0x4e>

			int16_t pos_x = (int16_t) x + xx;
 80033da:	eb04 0e02 	add.w	lr, r4, r2
 80033de:	fa0f fe8e 	sxth.w	lr, lr
			int16_t pos_y = (int16_t) y + yy;
 80033e2:	eb00 030c 	add.w	r3, r0, ip
 80033e6:	b21b      	sxth	r3, r3

			if (pos_x > 0 && pos_x < width && pos_y > 0 && pos_y < height) {
 80033e8:	f1be 0f00 	cmp.w	lr, #0
 80033ec:	ddef      	ble.n	80033ce <draw_circle+0x12>
 80033ee:	f1be 0f63 	cmp.w	lr, #99	; 0x63
 80033f2:	dcec      	bgt.n	80033ce <draw_circle+0x12>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	ddea      	ble.n	80033ce <draw_circle+0x12>
 80033f8:	2b77      	cmp	r3, #119	; 0x77
 80033fa:	dce8      	bgt.n	80033ce <draw_circle+0x12>
				CAVE_MAP[pos_y][pos_x] = cave_value;
 80033fc:	4f06      	ldr	r7, [pc, #24]	; (8003418 <draw_circle+0x5c>)
 80033fe:	683f      	ldr	r7, [r7, #0]
 8003400:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8003404:	f803 600e 	strb.w	r6, [r3, lr]
 8003408:	e7e1      	b.n	80033ce <draw_circle+0x12>
	for (int8_t xx = -radius; xx < radius; xx++) {
 800340a:	3201      	adds	r2, #1
 800340c:	b252      	sxtb	r2, r2
 800340e:	428a      	cmp	r2, r1
 8003410:	da01      	bge.n	8003416 <draw_circle+0x5a>
		for (int8_t yy = -radius; yy < radius; yy++) {
 8003412:	46ac      	mov	ip, r5
 8003414:	e7df      	b.n	80033d6 <draw_circle+0x1a>
			}

		}
	}
}
 8003416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003418:	20001ab4 	.word	0x20001ab4

0800341c <generate_caves>:
void generate_caves() {
 800341c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	CAVE_MAP = (uint8_t**) malloc((WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL) * sizeof(uint8_t*));
 8003420:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003424:	f00b fa94 	bl	800e950 <malloc>
 8003428:	4ba9      	ldr	r3, [pc, #676]	; (80036d0 <generate_caves+0x2b4>)
 800342a:	6018      	str	r0, [r3, #0]
	for (uint16_t j = 0; j < WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL; j++) {
 800342c:	2400      	movs	r4, #0
 800342e:	2c77      	cmp	r4, #119	; 0x77
 8003430:	d809      	bhi.n	8003446 <generate_caves+0x2a>
		CAVE_MAP[j] = (uint8_t*) malloc((WORLD_WIDTH_BLOCKS/(2*CAVE_SAMPLES_PER_CELL)) * sizeof(uint8_t));
 8003432:	4ba7      	ldr	r3, [pc, #668]	; (80036d0 <generate_caves+0x2b4>)
 8003434:	681d      	ldr	r5, [r3, #0]
 8003436:	2064      	movs	r0, #100	; 0x64
 8003438:	f00b fa8a 	bl	800e950 <malloc>
 800343c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (uint16_t j = 0; j < WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL; j++) {
 8003440:	3401      	adds	r4, #1
 8003442:	b2a4      	uxth	r4, r4
 8003444:	e7f3      	b.n	800342e <generate_caves+0x12>
	for (uint16_t x = 0; x < map_width; x++) {
 8003446:	2500      	movs	r5, #0
 8003448:	e01f      	b.n	800348a <generate_caves+0x6e>
		for (uint16_t y = 0; y < map_height; y++) {	// Caves start 5 blocks under ground
 800344a:	3401      	adds	r4, #1
 800344c:	b2a4      	uxth	r4, r4
 800344e:	2c77      	cmp	r4, #119	; 0x77
 8003450:	d819      	bhi.n	8003486 <generate_caves+0x6a>
			CAVE_MAP[y][x] = dirt_value;
 8003452:	4b9f      	ldr	r3, [pc, #636]	; (80036d0 <generate_caves+0x2b4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800345a:	2211      	movs	r2, #17
 800345c:	555a      	strb	r2, [r3, r5]
			if (rand() % 100 < CAVE_THRESH) {
 800345e:	f00c fa17 	bl	800f890 <rand>
 8003462:	4a9c      	ldr	r2, [pc, #624]	; (80036d4 <generate_caves+0x2b8>)
 8003464:	fb82 3200 	smull	r3, r2, r2, r0
 8003468:	17c3      	asrs	r3, r0, #31
 800346a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800346e:	2264      	movs	r2, #100	; 0x64
 8003470:	fb02 0313 	mls	r3, r2, r3, r0
 8003474:	2b0b      	cmp	r3, #11
 8003476:	dce8      	bgt.n	800344a <generate_caves+0x2e>
				CAVE_MAP[y][x] = cave_value;
 8003478:	4b95      	ldr	r3, [pc, #596]	; (80036d0 <generate_caves+0x2b4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003480:	22cc      	movs	r2, #204	; 0xcc
 8003482:	555a      	strb	r2, [r3, r5]
 8003484:	e7e1      	b.n	800344a <generate_caves+0x2e>
	for (uint16_t x = 0; x < map_width; x++) {
 8003486:	3501      	adds	r5, #1
 8003488:	b2ad      	uxth	r5, r5
 800348a:	2d63      	cmp	r5, #99	; 0x63
 800348c:	d801      	bhi.n	8003492 <generate_caves+0x76>
		for (uint16_t y = 0; y < map_height; y++) {	// Caves start 5 blocks under ground
 800348e:	2400      	movs	r4, #0
 8003490:	e7dd      	b.n	800344e <generate_caves+0x32>
	for (uint8_t iter = 0; iter < CAVE_ITER; iter++) {
 8003492:	2600      	movs	r6, #0
 8003494:	e0ee      	b.n	8003674 <generate_caves+0x258>
				uint8_t neighbor_cave_count = 0;
 8003496:	2300      	movs	r3, #0
				if (i > 0 && CAVE_MAP[i-1][j] == cave_value) {
 8003498:	b14c      	cbz	r4, 80034ae <generate_caves+0x92>
 800349a:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 800349e:	3a01      	subs	r2, #1
 80034a0:	498b      	ldr	r1, [pc, #556]	; (80036d0 <generate_caves+0x2b4>)
 80034a2:	6809      	ldr	r1, [r1, #0]
 80034a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80034a8:	5d52      	ldrb	r2, [r2, r5]
 80034aa:	2acc      	cmp	r2, #204	; 0xcc
 80034ac:	d07f      	beq.n	80035ae <generate_caves+0x192>
				if (i > 0 && j < map_height-1 && CAVE_MAP[i-1][j+1] == cave_value) {
 80034ae:	b164      	cbz	r4, 80034ca <generate_caves+0xae>
 80034b0:	2d76      	cmp	r5, #118	; 0x76
 80034b2:	d80a      	bhi.n	80034ca <generate_caves+0xae>
 80034b4:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 80034b8:	3a01      	subs	r2, #1
 80034ba:	4985      	ldr	r1, [pc, #532]	; (80036d0 <generate_caves+0x2b4>)
 80034bc:	6809      	ldr	r1, [r1, #0]
 80034be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80034c2:	442a      	add	r2, r5
 80034c4:	7852      	ldrb	r2, [r2, #1]
 80034c6:	2acc      	cmp	r2, #204	; 0xcc
 80034c8:	d074      	beq.n	80035b4 <generate_caves+0x198>
				if (j > 0 && CAVE_MAP[i][j-1] == cave_value) {
 80034ca:	b145      	cbz	r5, 80034de <generate_caves+0xc2>
 80034cc:	4a80      	ldr	r2, [pc, #512]	; (80036d0 <generate_caves+0x2b4>)
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80034d4:	442a      	add	r2, r5
 80034d6:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80034da:	2acc      	cmp	r2, #204	; 0xcc
 80034dc:	d06d      	beq.n	80035ba <generate_caves+0x19e>
				if (j < map_height-1 && CAVE_MAP[i][j+1] == cave_value) {
 80034de:	2d76      	cmp	r5, #118	; 0x76
 80034e0:	d807      	bhi.n	80034f2 <generate_caves+0xd6>
 80034e2:	4a7b      	ldr	r2, [pc, #492]	; (80036d0 <generate_caves+0x2b4>)
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80034ea:	442a      	add	r2, r5
 80034ec:	7852      	ldrb	r2, [r2, #1]
 80034ee:	2acc      	cmp	r2, #204	; 0xcc
 80034f0:	d066      	beq.n	80035c0 <generate_caves+0x1a4>
				if (i < map_width-1 && j > 0 && CAVE_MAP[i+1][j-1] == cave_value) {
 80034f2:	2c62      	cmp	r4, #98	; 0x62
 80034f4:	d80a      	bhi.n	800350c <generate_caves+0xf0>
 80034f6:	b14d      	cbz	r5, 800350c <generate_caves+0xf0>
 80034f8:	1c62      	adds	r2, r4, #1
 80034fa:	4975      	ldr	r1, [pc, #468]	; (80036d0 <generate_caves+0x2b4>)
 80034fc:	6809      	ldr	r1, [r1, #0]
 80034fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003502:	442a      	add	r2, r5
 8003504:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8003508:	2acc      	cmp	r2, #204	; 0xcc
 800350a:	d05c      	beq.n	80035c6 <generate_caves+0x1aa>
				if (i < map_width-1 && CAVE_MAP[i+1][j] == cave_value) {
 800350c:	2c62      	cmp	r4, #98	; 0x62
 800350e:	d807      	bhi.n	8003520 <generate_caves+0x104>
 8003510:	1c62      	adds	r2, r4, #1
 8003512:	496f      	ldr	r1, [pc, #444]	; (80036d0 <generate_caves+0x2b4>)
 8003514:	6809      	ldr	r1, [r1, #0]
 8003516:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800351a:	5d52      	ldrb	r2, [r2, r5]
 800351c:	2acc      	cmp	r2, #204	; 0xcc
 800351e:	d055      	beq.n	80035cc <generate_caves+0x1b0>
				if (i < map_width-1 && j < map_height-1 && CAVE_MAP[i+1][j+1] == cave_value) {
 8003520:	2c62      	cmp	r4, #98	; 0x62
 8003522:	d80a      	bhi.n	800353a <generate_caves+0x11e>
 8003524:	2d76      	cmp	r5, #118	; 0x76
 8003526:	d808      	bhi.n	800353a <generate_caves+0x11e>
 8003528:	1c62      	adds	r2, r4, #1
 800352a:	4969      	ldr	r1, [pc, #420]	; (80036d0 <generate_caves+0x2b4>)
 800352c:	6809      	ldr	r1, [r1, #0]
 800352e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003532:	442a      	add	r2, r5
 8003534:	7852      	ldrb	r2, [r2, #1]
 8003536:	2acc      	cmp	r2, #204	; 0xcc
 8003538:	d04b      	beq.n	80035d2 <generate_caves+0x1b6>
				if (CAVE_MAP[i][j] == dirt_value) {
 800353a:	00a7      	lsls	r7, r4, #2
 800353c:	4a64      	ldr	r2, [pc, #400]	; (80036d0 <generate_caves+0x2b4>)
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8003544:	46a8      	mov	r8, r5
 8003546:	1951      	adds	r1, r2, r5
 8003548:	5d52      	ldrb	r2, [r2, r5]
 800354a:	2a11      	cmp	r2, #17
 800354c:	d044      	beq.n	80035d8 <generate_caves+0x1bc>
					if (neighbor_cave_count < CAVE_DEATH_THRESH || (neighbor_cave_count > 6 && rand() % 100 < 40)) {
 800354e:	2b04      	cmp	r3, #4
 8003550:	d967      	bls.n	8003622 <generate_caves+0x206>
 8003552:	2b06      	cmp	r3, #6
 8003554:	d858      	bhi.n	8003608 <generate_caves+0x1ec>
					CAVE_MAP[i][j] = cave_value;
 8003556:	4b5e      	ldr	r3, [pc, #376]	; (80036d0 <generate_caves+0x2b4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	59db      	ldr	r3, [r3, r7]
 800355c:	22cc      	movs	r2, #204	; 0xcc
 800355e:	f803 2008 	strb.w	r2, [r3, r8]
					if (rand() % 100 < blob_probability) {
 8003562:	f00c f995 	bl	800f890 <rand>
 8003566:	4a5b      	ldr	r2, [pc, #364]	; (80036d4 <generate_caves+0x2b8>)
 8003568:	fb82 3200 	smull	r3, r2, r2, r0
 800356c:	17c3      	asrs	r3, r0, #31
 800356e:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8003572:	2264      	movs	r2, #100	; 0x64
 8003574:	fb02 0313 	mls	r3, r2, r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	db6c      	blt.n	8003656 <generate_caves+0x23a>
			for (uint16_t i = 0; i < map_height; i++) {
 800357c:	3401      	adds	r4, #1
 800357e:	b2a4      	uxth	r4, r4
 8003580:	2c77      	cmp	r4, #119	; 0x77
 8003582:	d86f      	bhi.n	8003664 <generate_caves+0x248>
				if (i > 0 && j > 0 && CAVE_MAP[i-1][j-1] == cave_value) {
 8003584:	2c00      	cmp	r4, #0
 8003586:	d086      	beq.n	8003496 <generate_caves+0x7a>
 8003588:	b16d      	cbz	r5, 80035a6 <generate_caves+0x18a>
 800358a:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800358e:	3b01      	subs	r3, #1
 8003590:	4a4f      	ldr	r2, [pc, #316]	; (80036d0 <generate_caves+0x2b4>)
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003598:	442b      	add	r3, r5
 800359a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800359e:	2bcc      	cmp	r3, #204	; 0xcc
 80035a0:	d003      	beq.n	80035aa <generate_caves+0x18e>
				uint8_t neighbor_cave_count = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e778      	b.n	8003498 <generate_caves+0x7c>
 80035a6:	2300      	movs	r3, #0
 80035a8:	e776      	b.n	8003498 <generate_caves+0x7c>
					neighbor_cave_count++;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e774      	b.n	8003498 <generate_caves+0x7c>
					neighbor_cave_count++;
 80035ae:	3301      	adds	r3, #1
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	e77c      	b.n	80034ae <generate_caves+0x92>
					neighbor_cave_count++;
 80035b4:	3301      	adds	r3, #1
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	e787      	b.n	80034ca <generate_caves+0xae>
					neighbor_cave_count++;
 80035ba:	3301      	adds	r3, #1
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	e78e      	b.n	80034de <generate_caves+0xc2>
					neighbor_cave_count++;
 80035c0:	3301      	adds	r3, #1
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	e795      	b.n	80034f2 <generate_caves+0xd6>
					neighbor_cave_count++;
 80035c6:	3301      	adds	r3, #1
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e79f      	b.n	800350c <generate_caves+0xf0>
					neighbor_cave_count++;
 80035cc:	3301      	adds	r3, #1
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	e7a6      	b.n	8003520 <generate_caves+0x104>
					neighbor_cave_count++;
 80035d2:	3301      	adds	r3, #1
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	e7b0      	b.n	800353a <generate_caves+0x11e>
					if (neighbor_cave_count > CAVE_BIRTH_THRESH) {
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d9cf      	bls.n	800357c <generate_caves+0x160>
						CAVE_MAP[i][j] = cave_value;
 80035dc:	23cc      	movs	r3, #204	; 0xcc
 80035de:	700b      	strb	r3, [r1, #0]
						if (rand() % 100 < blob_probability) {
 80035e0:	f00c f956 	bl	800f890 <rand>
 80035e4:	4a3b      	ldr	r2, [pc, #236]	; (80036d4 <generate_caves+0x2b8>)
 80035e6:	fb82 3200 	smull	r3, r2, r2, r0
 80035ea:	17c3      	asrs	r3, r0, #31
 80035ec:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 80035f0:	2264      	movs	r2, #100	; 0x64
 80035f2:	fb02 0313 	mls	r3, r2, r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	dac0      	bge.n	800357c <generate_caves+0x160>
							draw_circle(i, j, radius, cave_value);
 80035fa:	23cc      	movs	r3, #204	; 0xcc
 80035fc:	2203      	movs	r2, #3
 80035fe:	4629      	mov	r1, r5
 8003600:	4620      	mov	r0, r4
 8003602:	f7ff fedb 	bl	80033bc <draw_circle>
 8003606:	e7b9      	b.n	800357c <generate_caves+0x160>
					if (neighbor_cave_count < CAVE_DEATH_THRESH || (neighbor_cave_count > 6 && rand() % 100 < 40)) {
 8003608:	f00c f942 	bl	800f890 <rand>
 800360c:	4a31      	ldr	r2, [pc, #196]	; (80036d4 <generate_caves+0x2b8>)
 800360e:	fb82 3200 	smull	r3, r2, r2, r0
 8003612:	17c3      	asrs	r3, r0, #31
 8003614:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8003618:	2264      	movs	r2, #100	; 0x64
 800361a:	fb02 0313 	mls	r3, r2, r3, r0
 800361e:	2b27      	cmp	r3, #39	; 0x27
 8003620:	dc99      	bgt.n	8003556 <generate_caves+0x13a>
						CAVE_MAP[i][j] = dirt_value;
 8003622:	4b2b      	ldr	r3, [pc, #172]	; (80036d0 <generate_caves+0x2b4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	59db      	ldr	r3, [r3, r7]
 8003628:	2211      	movs	r2, #17
 800362a:	f803 2008 	strb.w	r2, [r3, r8]
						if (rand() % 100 < blob_probability) {
 800362e:	f00c f92f 	bl	800f890 <rand>
 8003632:	4a28      	ldr	r2, [pc, #160]	; (80036d4 <generate_caves+0x2b8>)
 8003634:	fb82 3200 	smull	r3, r2, r2, r0
 8003638:	17c3      	asrs	r3, r0, #31
 800363a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800363e:	2264      	movs	r2, #100	; 0x64
 8003640:	fb02 0313 	mls	r3, r2, r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	da86      	bge.n	8003556 <generate_caves+0x13a>
							draw_circle(i, j, radius, dirt_value);
 8003648:	2311      	movs	r3, #17
 800364a:	2203      	movs	r2, #3
 800364c:	4629      	mov	r1, r5
 800364e:	4620      	mov	r0, r4
 8003650:	f7ff feb4 	bl	80033bc <draw_circle>
 8003654:	e77f      	b.n	8003556 <generate_caves+0x13a>
						draw_circle(i, j, radius, cave_value);
 8003656:	23cc      	movs	r3, #204	; 0xcc
 8003658:	2203      	movs	r2, #3
 800365a:	4629      	mov	r1, r5
 800365c:	4620      	mov	r0, r4
 800365e:	f7ff fead 	bl	80033bc <draw_circle>
 8003662:	e78b      	b.n	800357c <generate_caves+0x160>
		for (uint16_t j = 0; j < map_width; j++) {
 8003664:	3501      	adds	r5, #1
 8003666:	b2ad      	uxth	r5, r5
 8003668:	2d63      	cmp	r5, #99	; 0x63
 800366a:	d801      	bhi.n	8003670 <generate_caves+0x254>
			for (uint16_t i = 0; i < map_height; i++) {
 800366c:	2400      	movs	r4, #0
 800366e:	e787      	b.n	8003580 <generate_caves+0x164>
	for (uint8_t iter = 0; iter < CAVE_ITER; iter++) {
 8003670:	3601      	adds	r6, #1
 8003672:	b2f6      	uxtb	r6, r6
 8003674:	2e09      	cmp	r6, #9
 8003676:	d801      	bhi.n	800367c <generate_caves+0x260>
		for (uint16_t j = 0; j < map_width; j++) {
 8003678:	2500      	movs	r5, #0
 800367a:	e7f5      	b.n	8003668 <generate_caves+0x24c>
	for (uint16_t x = 0; x < map_width; x += 1) {
 800367c:	2700      	movs	r7, #0
 800367e:	e047      	b.n	8003710 <generate_caves+0x2f4>
				for (int8_t cy = 0; cy < CAVE_SAMPLES_PER_CELL; cy++) {
 8003680:	3401      	adds	r4, #1
 8003682:	b264      	sxtb	r4, r4
 8003684:	2c01      	cmp	r4, #1
 8003686:	dc2d      	bgt.n	80036e4 <generate_caves+0x2c8>
					uint8_t depth = rand() % 6 + 7;
 8003688:	f00c f902 	bl	800f890 <rand>
 800368c:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <generate_caves+0x2bc>)
 800368e:	fb83 2300 	smull	r2, r3, r3, r0
 8003692:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8003696:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800369a:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	3307      	adds	r3, #7
					uint16_t y_coor = y * CAVE_SAMPLES_PER_CELL + cy;
 80036a2:	0071      	lsls	r1, r6, #1
 80036a4:	b289      	uxth	r1, r1
 80036a6:	fa11 f184 	uxtah	r1, r1, r4
 80036aa:	b289      	uxth	r1, r1
					uint16_t x_coor = x * CAVE_SAMPLES_PER_CELL + cx;
 80036ac:	007a      	lsls	r2, r7, #1
 80036ae:	b292      	uxth	r2, r2
 80036b0:	442a      	add	r2, r5
 80036b2:	b292      	uxth	r2, r2
					if (y_coor > LVL1_HMAP[x_coor] + depth) {
 80036b4:	4809      	ldr	r0, [pc, #36]	; (80036dc <generate_caves+0x2c0>)
 80036b6:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 80036ba:	fa50 f383 	uxtab	r3, r0, r3
 80036be:	4299      	cmp	r1, r3
 80036c0:	ddde      	ble.n	8003680 <generate_caves+0x264>
						WORLD[y_coor][x_coor] = value;
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <generate_caves+0x2c4>)
 80036c4:	20c8      	movs	r0, #200	; 0xc8
 80036c6:	fb00 3101 	mla	r1, r0, r1, r3
 80036ca:	f801 8002 	strb.w	r8, [r1, r2]
 80036ce:	e7d7      	b.n	8003680 <generate_caves+0x264>
 80036d0:	20001ab4 	.word	0x20001ab4
 80036d4:	51eb851f 	.word	0x51eb851f
 80036d8:	2aaaaaab 	.word	0x2aaaaaab
 80036dc:	20005020 	.word	0x20005020
 80036e0:	20006634 	.word	0x20006634
			for (uint8_t cx = 0; cx < CAVE_SAMPLES_PER_CELL; cx++) {
 80036e4:	3501      	adds	r5, #1
 80036e6:	b2ed      	uxtb	r5, r5
 80036e8:	2d01      	cmp	r5, #1
 80036ea:	d801      	bhi.n	80036f0 <generate_caves+0x2d4>
				for (int8_t cy = 0; cy < CAVE_SAMPLES_PER_CELL; cy++) {
 80036ec:	2400      	movs	r4, #0
 80036ee:	e7c9      	b.n	8003684 <generate_caves+0x268>
		for (uint16_t y = 0; y < map_height; y += 1) {
 80036f0:	3601      	adds	r6, #1
 80036f2:	b2b6      	uxth	r6, r6
 80036f4:	2e77      	cmp	r6, #119	; 0x77
 80036f6:	d809      	bhi.n	800370c <generate_caves+0x2f0>
			uint8_t value = CAVE_MAP[map_height - y][x];
 80036f8:	f1c6 0378 	rsb	r3, r6, #120	; 0x78
 80036fc:	4a0f      	ldr	r2, [pc, #60]	; (800373c <generate_caves+0x320>)
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003704:	f813 8007 	ldrb.w	r8, [r3, r7]
			for (uint8_t cx = 0; cx < CAVE_SAMPLES_PER_CELL; cx++) {
 8003708:	2500      	movs	r5, #0
 800370a:	e7ed      	b.n	80036e8 <generate_caves+0x2cc>
	for (uint16_t x = 0; x < map_width; x += 1) {
 800370c:	3701      	adds	r7, #1
 800370e:	b2bf      	uxth	r7, r7
 8003710:	2f63      	cmp	r7, #99	; 0x63
 8003712:	d801      	bhi.n	8003718 <generate_caves+0x2fc>
		for (uint16_t y = 0; y < map_height; y += 1) {
 8003714:	2600      	movs	r6, #0
 8003716:	e7ed      	b.n	80036f4 <generate_caves+0x2d8>
	for (uint16_t j = 0; j < WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL; j++) {
 8003718:	2400      	movs	r4, #0
 800371a:	2c77      	cmp	r4, #119	; 0x77
 800371c:	d808      	bhi.n	8003730 <generate_caves+0x314>
		free(CAVE_MAP[j]);
 800371e:	4b07      	ldr	r3, [pc, #28]	; (800373c <generate_caves+0x320>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003726:	f00b f91b 	bl	800e960 <free>
	for (uint16_t j = 0; j < WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL; j++) {
 800372a:	3401      	adds	r4, #1
 800372c:	b2a4      	uxth	r4, r4
 800372e:	e7f4      	b.n	800371a <generate_caves+0x2fe>
	free(CAVE_MAP);
 8003730:	4b02      	ldr	r3, [pc, #8]	; (800373c <generate_caves+0x320>)
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	f00b f914 	bl	800e960 <free>
}
 8003738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800373c:	20001ab4 	.word	0x20001ab4

08003740 <gauss_kernel>:
	filter_level(WORLD_WIDTH_BLOCKS, KERNEL_WIDTH, LEVEL_SMOOTHING_FACTOR, true);

}

// Returns gauss kernel of width width and given sigma
float* gauss_kernel(uint8_t width, uint8_t sigma) {
 8003740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003744:	ed2d 8b02 	vpush	{d8}
 8003748:	4605      	mov	r5, r0
 800374a:	4688      	mov	r8, r1
	float* filter = (float*) malloc(width * sizeof(float));
 800374c:	0080      	lsls	r0, r0, #2
 800374e:	f00b f8ff 	bl	800e950 <malloc>
 8003752:	4681      	mov	r9, r0

    float sum = 0.0;

    // Compute the filter values
    for (int i = 0; i < width; i++) {
 8003754:	2400      	movs	r4, #0
    float sum = 0.0;
 8003756:	ed9f 8a26 	vldr	s16, [pc, #152]	; 80037f0 <gauss_kernel+0xb0>
    for (int i = 0; i < width; i++) {
 800375a:	e02e      	b.n	80037ba <gauss_kernel+0x7a>
        int x = i - (width - 1) / 2;
 800375c:	1e6b      	subs	r3, r5, #1
 800375e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8003762:	eba4 0063 	sub.w	r0, r4, r3, asr #1
        filter[i] = exp(-x * x / (2 * sigma * sigma)) / (sqrt(2 * M_PI) * sigma);
 8003766:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 800376a:	fb00 f303 	mul.w	r3, r0, r3
 800376e:	fb08 f008 	mul.w	r0, r8, r8
 8003772:	0040      	lsls	r0, r0, #1
 8003774:	fb93 f0f0 	sdiv	r0, r3, r0
 8003778:	f7fc fefc 	bl	8000574 <__aeabi_i2d>
 800377c:	ec41 0b10 	vmov	d0, r0, r1
 8003780:	f009 ffaa 	bl	800d6d8 <exp>
 8003784:	ec57 6b10 	vmov	r6, r7, d0
 8003788:	4640      	mov	r0, r8
 800378a:	f7fc fef3 	bl	8000574 <__aeabi_i2d>
 800378e:	a316      	add	r3, pc, #88	; (adr r3, 80037e8 <gauss_kernel+0xa8>)
 8003790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003794:	f7fc ff58 	bl	8000648 <__aeabi_dmul>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	eb09 0a84 	add.w	sl, r9, r4, lsl #2
 80037a0:	4630      	mov	r0, r6
 80037a2:	4639      	mov	r1, r7
 80037a4:	f7fd f87a 	bl	800089c <__aeabi_ddiv>
 80037a8:	f7fd fa46 	bl	8000c38 <__aeabi_d2f>
 80037ac:	ee07 0a90 	vmov	s15, r0
 80037b0:	f8ca 0000 	str.w	r0, [sl]
        sum += filter[i];
 80037b4:	ee38 8a27 	vadd.f32	s16, s16, s15
    for (int i = 0; i < width; i++) {
 80037b8:	3401      	adds	r4, #1
 80037ba:	42a5      	cmp	r5, r4
 80037bc:	dcce      	bgt.n	800375c <gauss_kernel+0x1c>
    }

    // Normalize the filter values
    for (int i = 0; i < width; i++) {
 80037be:	2300      	movs	r3, #0
 80037c0:	e008      	b.n	80037d4 <gauss_kernel+0x94>
        filter[i] /= sum;
 80037c2:	eb09 0283 	add.w	r2, r9, r3, lsl #2
 80037c6:	ed92 7a00 	vldr	s14, [r2]
 80037ca:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80037ce:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < width; i++) {
 80037d2:	3301      	adds	r3, #1
 80037d4:	429d      	cmp	r5, r3
 80037d6:	dcf4      	bgt.n	80037c2 <gauss_kernel+0x82>
    }

    return filter;
}
 80037d8:	4648      	mov	r0, r9
 80037da:	ecbd 8b02 	vpop	{d8}
 80037de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037e2:	bf00      	nop
 80037e4:	f3af 8000 	nop.w
 80037e8:	1ff62705 	.word	0x1ff62705
 80037ec:	40040d93 	.word	0x40040d93
 80037f0:	00000000 	.word	0x00000000

080037f4 <erosion>:
	}


}

void erosion(uint8_t SE[SE_SIZE_EROSION][SE_SIZE_EROSION], uint16_t map_width, uint16_t map_height, uint8_t foreground) {
 80037f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	4686      	mov	lr, r0
 80037fe:	460d      	mov	r5, r1
 8003800:	4691      	mov	r9, r2
 8003802:	469c      	mov	ip, r3
	uint8_t se_size = SE_SIZE_EROSION;

	uint8_t temp[map_height][map_width];
 8003804:	fb01 f302 	mul.w	r3, r1, r2
 8003808:	3307      	adds	r3, #7
 800380a:	f023 0307 	bic.w	r3, r3, #7
 800380e:	ebad 0d03 	sub.w	sp, sp, r3
 8003812:	f8c7 d000 	str.w	sp, [r7]

	for (uint16_t i = 0; i < map_width; i++) {
 8003816:	2600      	movs	r6, #0
 8003818:	e036      	b.n	8003888 <erosion+0x94>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
			uint8_t min_value = foreground;
			for (uint16_t k = 0; k < se_size; k++) {
				for (uint16_t l = 0; l < se_size; l++) {
 800381a:	3301      	adds	r3, #1
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b04      	cmp	r3, #4
 8003820:	d81c      	bhi.n	800385c <erosion+0x68>
					if (SE[k][l] == foreground) {
 8003822:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003826:	4471      	add	r1, lr
 8003828:	5cc9      	ldrb	r1, [r1, r3]
 800382a:	4561      	cmp	r1, ip
 800382c:	d1f5      	bne.n	800381a <erosion+0x26>
						uint16_t x = i - k + se_size / 2;
 800382e:	1ab1      	subs	r1, r6, r2
 8003830:	b289      	uxth	r1, r1
 8003832:	3102      	adds	r1, #2
 8003834:	b289      	uxth	r1, r1
						uint16_t y = j - l + se_size / 2;
 8003836:	1ae0      	subs	r0, r4, r3
 8003838:	b280      	uxth	r0, r0
 800383a:	3002      	adds	r0, #2
 800383c:	b280      	uxth	r0, r0
						if (x >= 0 && x < map_width && y >= 0 && y < map_height) {
 800383e:	428d      	cmp	r5, r1
 8003840:	d9eb      	bls.n	800381a <erosion+0x26>
 8003842:	4581      	cmp	r9, r0
 8003844:	d9e9      	bls.n	800381a <erosion+0x26>
							min_value = min_value < WORLD[y][x] ? min_value : WORLD[y][x];
 8003846:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80038d8 <erosion+0xe4>
 800384a:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
 800384e:	fb0b 8000 	mla	r0, fp, r0, r8
 8003852:	5c41      	ldrb	r1, [r0, r1]
 8003854:	458a      	cmp	sl, r1
 8003856:	bf28      	it	cs
 8003858:	468a      	movcs	sl, r1
 800385a:	e7de      	b.n	800381a <erosion+0x26>
			for (uint16_t k = 0; k < se_size; k++) {
 800385c:	3201      	adds	r2, #1
 800385e:	b292      	uxth	r2, r2
 8003860:	2a04      	cmp	r2, #4
 8003862:	d801      	bhi.n	8003868 <erosion+0x74>
				for (uint16_t l = 0; l < se_size; l++) {
 8003864:	2300      	movs	r3, #0
 8003866:	e7da      	b.n	800381e <erosion+0x2a>
						}
					}
				}
			}

			temp[j][i] = min_value;
 8003868:	fb05 f304 	mul.w	r3, r5, r4
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	440a      	add	r2, r1
 8003872:	f802 a003 	strb.w	sl, [r2, r3]
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 8003876:	3401      	adds	r4, #1
 8003878:	b2a4      	uxth	r4, r4
 800387a:	454c      	cmp	r4, r9
 800387c:	d202      	bcs.n	8003884 <erosion+0x90>
			uint8_t min_value = foreground;
 800387e:	46e2      	mov	sl, ip
			for (uint16_t k = 0; k < se_size; k++) {
 8003880:	2200      	movs	r2, #0
 8003882:	e7ed      	b.n	8003860 <erosion+0x6c>
	for (uint16_t i = 0; i < map_width; i++) {
 8003884:	3601      	adds	r6, #1
 8003886:	b2b6      	uxth	r6, r6
 8003888:	42ae      	cmp	r6, r5
 800388a:	d204      	bcs.n	8003896 <erosion+0xa2>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 800388c:	607e      	str	r6, [r7, #4]
 800388e:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <erosion+0xe0>)
 8003890:	f833 4016 	ldrh.w	r4, [r3, r6, lsl #1]
 8003894:	e7f1      	b.n	800387a <erosion+0x86>
		}
	}

	for (uint16_t i = 0; i < map_width; i++) {
 8003896:	2600      	movs	r6, #0
 8003898:	f8d7 c000 	ldr.w	ip, [r7]
 800389c:	e00f      	b.n	80038be <erosion+0xca>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
			WORLD[j][i] = temp[j][i];
 800389e:	fb05 f203 	mul.w	r2, r5, r3
 80038a2:	eb0c 0001 	add.w	r0, ip, r1
 80038a6:	5c80      	ldrb	r0, [r0, r2]
 80038a8:	4a0b      	ldr	r2, [pc, #44]	; (80038d8 <erosion+0xe4>)
 80038aa:	24c8      	movs	r4, #200	; 0xc8
 80038ac:	fb04 2203 	mla	r2, r4, r3, r2
 80038b0:	5450      	strb	r0, [r2, r1]
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 80038b2:	3301      	adds	r3, #1
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	454b      	cmp	r3, r9
 80038b8:	d3f1      	bcc.n	800389e <erosion+0xaa>
	for (uint16_t i = 0; i < map_width; i++) {
 80038ba:	3601      	adds	r6, #1
 80038bc:	b2b6      	uxth	r6, r6
 80038be:	42ae      	cmp	r6, r5
 80038c0:	d204      	bcs.n	80038cc <erosion+0xd8>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 80038c2:	4631      	mov	r1, r6
 80038c4:	4b03      	ldr	r3, [pc, #12]	; (80038d4 <erosion+0xe0>)
 80038c6:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 80038ca:	e7f4      	b.n	80038b6 <erosion+0xc2>
		}
	}
}
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d4:	20005020 	.word	0x20005020
 80038d8:	20006634 	.word	0x20006634

080038dc <dilation>:

void dilation(uint8_t SE[SE_SIZE_DILATION][SE_SIZE_DILATION], uint16_t map_width, uint16_t map_height, uint8_t dirt, uint8_t foreground) {
 80038dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	4604      	mov	r4, r0
 80038e6:	460e      	mov	r6, r1
 80038e8:	4692      	mov	sl, r2
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	f897 5038 	ldrb.w	r5, [r7, #56]	; 0x38

	uint8_t se_size = SE_SIZE_DILATION;

	uint8_t temp[map_height][map_width];
 80038f0:	fb01 f302 	mul.w	r3, r1, r2
 80038f4:	3307      	adds	r3, #7
 80038f6:	f023 0307 	bic.w	r3, r3, #7
 80038fa:	ebad 0d03 	sub.w	sp, sp, r3
 80038fe:	46eb      	mov	fp, sp

	uint8_t depth = rand() % 5 + 5;
 8003900:	f00b ffc6 	bl	800f890 <rand>
 8003904:	4942      	ldr	r1, [pc, #264]	; (8003a10 <dilation+0x134>)
 8003906:	fb81 3100 	smull	r3, r1, r1, r0
 800390a:	17c3      	asrs	r3, r0, #31
 800390c:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 8003910:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003914:	1ac3      	subs	r3, r0, r3
 8003916:	b2db      	uxtb	r3, r3
 8003918:	3305      	adds	r3, #5
 800391a:	b2db      	uxtb	r3, r3

	for (uint16_t i = 0; i < map_width; i++) {
 800391c:	f04f 0e00 	mov.w	lr, #0
 8003920:	f8c7 b004 	str.w	fp, [r7, #4]
 8003924:	469b      	mov	fp, r3
 8003926:	e048      	b.n	80039ba <dilation+0xde>
		for (uint16_t j = LVL1_HMAP[i] + depth; j < map_height; j++) {
			uint8_t max_value = dirt;
			for (uint16_t k = 0; k < se_size; k++) {
				for (uint16_t l = 0; l < se_size; l++) {
 8003928:	3301      	adds	r3, #1
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d825      	bhi.n	800397c <dilation+0xa0>
					if (SE[k][l] == foreground) {
 8003930:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8003934:	4421      	add	r1, r4
 8003936:	5cc9      	ldrb	r1, [r1, r3]
 8003938:	42a9      	cmp	r1, r5
 800393a:	d1f5      	bne.n	8003928 <dilation+0x4c>
						uint16_t x = i - k + se_size / 2;
 800393c:	ebae 0102 	sub.w	r1, lr, r2
 8003940:	b289      	uxth	r1, r1
 8003942:	3101      	adds	r1, #1
 8003944:	fa1f f881 	uxth.w	r8, r1
						uint16_t y = j - l + se_size / 2;
 8003948:	ebac 0103 	sub.w	r1, ip, r3
 800394c:	b289      	uxth	r1, r1
 800394e:	3101      	adds	r1, #1
 8003950:	b289      	uxth	r1, r1
						if (x >= 0 && x < map_width && y > GROUND_SKY_RATIO + depth && y < map_height) {
 8003952:	4546      	cmp	r6, r8
 8003954:	d9e8      	bls.n	8003928 <dilation+0x4c>
 8003956:	f10b 0050 	add.w	r0, fp, #80	; 0x50
 800395a:	4281      	cmp	r1, r0
 800395c:	dde4      	ble.n	8003928 <dilation+0x4c>
 800395e:	458a      	cmp	sl, r1
 8003960:	d9e2      	bls.n	8003928 <dilation+0x4c>
							max_value = max_value > WORLD[y][x] ? max_value : WORLD[y][x];
 8003962:	482c      	ldr	r0, [pc, #176]	; (8003a14 <dilation+0x138>)
 8003964:	f04f 09c8 	mov.w	r9, #200	; 0xc8
 8003968:	fb09 0101 	mla	r1, r9, r1, r0
 800396c:	f811 1008 	ldrb.w	r1, [r1, r8]
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	4288      	cmp	r0, r1
 8003974:	bf38      	it	cc
 8003976:	4608      	movcc	r0, r1
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	e7d5      	b.n	8003928 <dilation+0x4c>
			for (uint16_t k = 0; k < se_size; k++) {
 800397c:	f8d7 900c 	ldr.w	r9, [r7, #12]
 8003980:	3201      	adds	r2, #1
 8003982:	b292      	uxth	r2, r2
 8003984:	2a02      	cmp	r2, #2
 8003986:	d803      	bhi.n	8003990 <dilation+0xb4>
				for (uint16_t l = 0; l < se_size; l++) {
 8003988:	2300      	movs	r3, #0
 800398a:	f8c7 900c 	str.w	r9, [r7, #12]
 800398e:	e7cd      	b.n	800392c <dilation+0x50>
						}
					}
				}
			}

			temp[j][i] = max_value;
 8003990:	fb06 f30c 	mul.w	r3, r6, ip
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	440a      	add	r2, r1
 800399a:	f802 9003 	strb.w	r9, [r2, r3]
		for (uint16_t j = LVL1_HMAP[i] + depth; j < map_height; j++) {
 800399e:	f10c 0c01 	add.w	ip, ip, #1
 80039a2:	fa1f fc8c 	uxth.w	ip, ip
 80039a6:	45d4      	cmp	ip, sl
 80039a8:	d203      	bcs.n	80039b2 <dilation+0xd6>
			uint8_t max_value = dirt;
 80039aa:	f8d7 9000 	ldr.w	r9, [r7]
			for (uint16_t k = 0; k < se_size; k++) {
 80039ae:	2200      	movs	r2, #0
 80039b0:	e7e8      	b.n	8003984 <dilation+0xa8>
	for (uint16_t i = 0; i < map_width; i++) {
 80039b2:	f10e 0e01 	add.w	lr, lr, #1
 80039b6:	fa1f fe8e 	uxth.w	lr, lr
 80039ba:	45b6      	cmp	lr, r6
 80039bc:	d208      	bcs.n	80039d0 <dilation+0xf4>
		for (uint16_t j = LVL1_HMAP[i] + depth; j < map_height; j++) {
 80039be:	f8c7 e008 	str.w	lr, [r7, #8]
 80039c2:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <dilation+0x13c>)
 80039c4:	f833 c01e 	ldrh.w	ip, [r3, lr, lsl #1]
 80039c8:	44dc      	add	ip, fp
 80039ca:	fa1f fc8c 	uxth.w	ip, ip
 80039ce:	e7ea      	b.n	80039a6 <dilation+0xca>
		}
	}

	for (uint16_t i = 0; i < map_width; i++) {
 80039d0:	f8d7 b004 	ldr.w	fp, [r7, #4]
 80039d4:	2500      	movs	r5, #0
 80039d6:	e00f      	b.n	80039f8 <dilation+0x11c>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
			WORLD[j][i] = temp[j][i];
 80039d8:	fb06 f203 	mul.w	r2, r6, r3
 80039dc:	eb0b 0001 	add.w	r0, fp, r1
 80039e0:	5c80      	ldrb	r0, [r0, r2]
 80039e2:	4a0c      	ldr	r2, [pc, #48]	; (8003a14 <dilation+0x138>)
 80039e4:	24c8      	movs	r4, #200	; 0xc8
 80039e6:	fb04 2203 	mla	r2, r4, r3, r2
 80039ea:	5450      	strb	r0, [r2, r1]
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 80039ec:	3301      	adds	r3, #1
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	4553      	cmp	r3, sl
 80039f2:	d3f1      	bcc.n	80039d8 <dilation+0xfc>
	for (uint16_t i = 0; i < map_width; i++) {
 80039f4:	3501      	adds	r5, #1
 80039f6:	b2ad      	uxth	r5, r5
 80039f8:	42b5      	cmp	r5, r6
 80039fa:	d204      	bcs.n	8003a06 <dilation+0x12a>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 80039fc:	4629      	mov	r1, r5
 80039fe:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <dilation+0x13c>)
 8003a00:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8003a04:	e7f4      	b.n	80039f0 <dilation+0x114>
		}
	}
}
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a0e:	bf00      	nop
 8003a10:	66666667 	.word	0x66666667
 8003a14:	20006634 	.word	0x20006634
 8003a18:	20005020 	.word	0x20005020

08003a1c <shape_caves_with_morphological_operations>:
void shape_caves_with_morphological_operations(uint8_t dirt, uint8_t foreground) {
 8003a1c:	b530      	push	{r4, r5, lr}
 8003a1e:	b08d      	sub	sp, #52	; 0x34
 8003a20:	4605      	mov	r5, r0
 8003a22:	460c      	mov	r4, r1
	for (uint8_t i = 0; i < SE_SIZE_EROSION; i++) {
 8003a24:	f04f 0e00 	mov.w	lr, #0
 8003a28:	e015      	b.n	8003a56 <shape_caves_with_morphological_operations+0x3a>
			if ((i < SE_SIZE_EROSION/3 || i > 2*SE_SIZE_EROSION/3) && (j < SE_SIZE_EROSION/3 || j > 2*SE_SIZE_EROSION/3)) {
 8003a2a:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d815      	bhi.n	8003a60 <shape_caves_with_morphological_operations+0x44>
				EROSION_SE[i][j] = foreground;
 8003a34:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
 8003a38:	f10c 0330 	add.w	r3, ip, #48	; 0x30
 8003a3c:	eb0d 0c03 	add.w	ip, sp, r3
 8003a40:	4494      	add	ip, r2
 8003a42:	f80c 4c1c 	strb.w	r4, [ip, #-28]
		for (uint8_t j = 0; j < SE_SIZE_EROSION; j++) {
 8003a46:	3201      	adds	r2, #1
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	2a04      	cmp	r2, #4
 8003a4c:	d9ed      	bls.n	8003a2a <shape_caves_with_morphological_operations+0xe>
	for (uint8_t i = 0; i < SE_SIZE_EROSION; i++) {
 8003a4e:	f10e 0e01 	add.w	lr, lr, #1
 8003a52:	fa5f fe8e 	uxtb.w	lr, lr
 8003a56:	f1be 0f04 	cmp.w	lr, #4
 8003a5a:	d80d      	bhi.n	8003a78 <shape_caves_with_morphological_operations+0x5c>
		for (uint8_t j = 0; j < SE_SIZE_EROSION; j++) {
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	e7f4      	b.n	8003a4a <shape_caves_with_morphological_operations+0x2e>
			if ((i < SE_SIZE_EROSION/3 || i > 2*SE_SIZE_EROSION/3) && (j < SE_SIZE_EROSION/3 || j > 2*SE_SIZE_EROSION/3)) {
 8003a60:	1e53      	subs	r3, r2, #1
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d9e5      	bls.n	8003a34 <shape_caves_with_morphological_operations+0x18>
				EROSION_SE[i][j] = dirt;
 8003a68:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 8003a6c:	3330      	adds	r3, #48	; 0x30
 8003a6e:	446b      	add	r3, sp
 8003a70:	4413      	add	r3, r2
 8003a72:	f803 5c1c 	strb.w	r5, [r3, #-28]
 8003a76:	e7e6      	b.n	8003a46 <shape_caves_with_morphological_operations+0x2a>
	for (uint8_t i = 0; i < SE_SIZE_DILATION; i++) {
 8003a78:	2100      	movs	r1, #0
 8003a7a:	e010      	b.n	8003a9e <shape_caves_with_morphological_operations+0x82>
			if ((i < SE_SIZE_DILATION/3 || i > 2*SE_SIZE_DILATION/3) && (j < SE_SIZE_DILATION/3 || j > 2*SE_SIZE_DILATION/3)) {
 8003a7c:	1e4a      	subs	r2, r1, #1
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	2a01      	cmp	r2, #1
 8003a82:	d810      	bhi.n	8003aa6 <shape_caves_with_morphological_operations+0x8a>
				DILATION_SE[i][j] = foreground;
 8003a84:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003a88:	3230      	adds	r2, #48	; 0x30
 8003a8a:	446a      	add	r2, sp
 8003a8c:	441a      	add	r2, r3
 8003a8e:	f802 4c28 	strb.w	r4, [r2, #-40]
		for (uint8_t j = 0; j < SE_SIZE_DILATION; j++) {
 8003a92:	3301      	adds	r3, #1
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d9f0      	bls.n	8003a7c <shape_caves_with_morphological_operations+0x60>
	for (uint8_t i = 0; i < SE_SIZE_DILATION; i++) {
 8003a9a:	3101      	adds	r1, #1
 8003a9c:	b2c9      	uxtb	r1, r1
 8003a9e:	2902      	cmp	r1, #2
 8003aa0:	d80d      	bhi.n	8003abe <shape_caves_with_morphological_operations+0xa2>
		for (uint8_t j = 0; j < SE_SIZE_DILATION; j++) {
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e7f7      	b.n	8003a96 <shape_caves_with_morphological_operations+0x7a>
			if ((i < SE_SIZE_DILATION/3 || i > 2*SE_SIZE_DILATION/3) && (j < SE_SIZE_DILATION/3 || j > 2*SE_SIZE_DILATION/3)) {
 8003aa6:	1e5a      	subs	r2, r3, #1
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	2a01      	cmp	r2, #1
 8003aac:	d9ea      	bls.n	8003a84 <shape_caves_with_morphological_operations+0x68>
				DILATION_SE[i][j] = dirt;
 8003aae:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003ab2:	3230      	adds	r2, #48	; 0x30
 8003ab4:	446a      	add	r2, sp
 8003ab6:	441a      	add	r2, r3
 8003ab8:	f802 5c28 	strb.w	r5, [r2, #-40]
 8003abc:	e7e9      	b.n	8003a92 <shape_caves_with_morphological_operations+0x76>
	if (foreground == cave) {
 8003abe:	2ccc      	cmp	r4, #204	; 0xcc
 8003ac0:	d01d      	beq.n	8003afe <shape_caves_with_morphological_operations+0xe2>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003ac2:	9400      	str	r4, [sp, #0]
 8003ac4:	462b      	mov	r3, r5
 8003ac6:	22f0      	movs	r2, #240	; 0xf0
 8003ac8:	21c8      	movs	r1, #200	; 0xc8
 8003aca:	a802      	add	r0, sp, #8
 8003acc:	f7ff ff06 	bl	80038dc <dilation>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003ad0:	9400      	str	r4, [sp, #0]
 8003ad2:	462b      	mov	r3, r5
 8003ad4:	22f0      	movs	r2, #240	; 0xf0
 8003ad6:	21c8      	movs	r1, #200	; 0xc8
 8003ad8:	a802      	add	r0, sp, #8
 8003ada:	f7ff feff 	bl	80038dc <dilation>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003ade:	9400      	str	r4, [sp, #0]
 8003ae0:	462b      	mov	r3, r5
 8003ae2:	22f0      	movs	r2, #240	; 0xf0
 8003ae4:	21c8      	movs	r1, #200	; 0xc8
 8003ae6:	a802      	add	r0, sp, #8
 8003ae8:	f7ff fef8 	bl	80038dc <dilation>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003aec:	9400      	str	r4, [sp, #0]
 8003aee:	462b      	mov	r3, r5
 8003af0:	22f0      	movs	r2, #240	; 0xf0
 8003af2:	21c8      	movs	r1, #200	; 0xc8
 8003af4:	a802      	add	r0, sp, #8
 8003af6:	f7ff fef1 	bl	80038dc <dilation>
}
 8003afa:	b00d      	add	sp, #52	; 0x34
 8003afc:	bd30      	pop	{r4, r5, pc}
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003afe:	9400      	str	r4, [sp, #0]
 8003b00:	462b      	mov	r3, r5
 8003b02:	22f0      	movs	r2, #240	; 0xf0
 8003b04:	21c8      	movs	r1, #200	; 0xc8
 8003b06:	a802      	add	r0, sp, #8
 8003b08:	f7ff fee8 	bl	80038dc <dilation>
		erosion(EROSION_SE, width, height, foreground);
 8003b0c:	4623      	mov	r3, r4
 8003b0e:	22f0      	movs	r2, #240	; 0xf0
 8003b10:	21c8      	movs	r1, #200	; 0xc8
 8003b12:	a805      	add	r0, sp, #20
 8003b14:	f7ff fe6e 	bl	80037f4 <erosion>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003b18:	9400      	str	r4, [sp, #0]
 8003b1a:	462b      	mov	r3, r5
 8003b1c:	22f0      	movs	r2, #240	; 0xf0
 8003b1e:	21c8      	movs	r1, #200	; 0xc8
 8003b20:	a802      	add	r0, sp, #8
 8003b22:	f7ff fedb 	bl	80038dc <dilation>
		erosion(EROSION_SE, width, height, foreground);
 8003b26:	4623      	mov	r3, r4
 8003b28:	22f0      	movs	r2, #240	; 0xf0
 8003b2a:	21c8      	movs	r1, #200	; 0xc8
 8003b2c:	a805      	add	r0, sp, #20
 8003b2e:	f7ff fe61 	bl	80037f4 <erosion>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003b32:	9400      	str	r4, [sp, #0]
 8003b34:	462b      	mov	r3, r5
 8003b36:	22f0      	movs	r2, #240	; 0xf0
 8003b38:	21c8      	movs	r1, #200	; 0xc8
 8003b3a:	a802      	add	r0, sp, #8
 8003b3c:	f7ff fece 	bl	80038dc <dilation>
		erosion(EROSION_SE, width, height, foreground);
 8003b40:	4623      	mov	r3, r4
 8003b42:	22f0      	movs	r2, #240	; 0xf0
 8003b44:	21c8      	movs	r1, #200	; 0xc8
 8003b46:	a805      	add	r0, sp, #20
 8003b48:	f7ff fe54 	bl	80037f4 <erosion>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003b4c:	9400      	str	r4, [sp, #0]
 8003b4e:	462b      	mov	r3, r5
 8003b50:	22f0      	movs	r2, #240	; 0xf0
 8003b52:	21c8      	movs	r1, #200	; 0xc8
 8003b54:	a802      	add	r0, sp, #8
 8003b56:	f7ff fec1 	bl	80038dc <dilation>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003b5a:	9400      	str	r4, [sp, #0]
 8003b5c:	462b      	mov	r3, r5
 8003b5e:	22f0      	movs	r2, #240	; 0xf0
 8003b60:	21c8      	movs	r1, #200	; 0xc8
 8003b62:	a802      	add	r0, sp, #8
 8003b64:	f7ff feba 	bl	80038dc <dilation>
 8003b68:	e7c7      	b.n	8003afa <shape_caves_with_morphological_operations+0xde>
	...

08003b6c <place_lava>:
void place_lava() {
 8003b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	srand(time(NULL));
 8003b6e:	2000      	movs	r0, #0
 8003b70:	f00c fdae 	bl	80106d0 <time>
 8003b74:	f00b fe5e 	bl	800f834 <srand>
	uint8_t lava_blob_radius = rand() % 3;
 8003b78:	f00b fe8a 	bl	800f890 <rand>
 8003b7c:	4f1f      	ldr	r7, [pc, #124]	; (8003bfc <place_lava+0x90>)
 8003b7e:	fb87 2700 	smull	r2, r7, r7, r0
 8003b82:	eba7 77e0 	sub.w	r7, r7, r0, asr #31
 8003b86:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8003b8a:	1bc7      	subs	r7, r0, r7
 8003b8c:	b2ff      	uxtb	r7, r7
	for (cell_c i = 0; i < WORLD_WIDTH_CELLS; i++) {
 8003b8e:	2500      	movs	r5, #0
 8003b90:	e026      	b.n	8003be0 <place_lava+0x74>
				draw_blob(i, j, lava_blob_radius, lava_block);
 8003b92:	2388      	movs	r3, #136	; 0x88
 8003b94:	463a      	mov	r2, r7
 8003b96:	4621      	mov	r1, r4
 8003b98:	4628      	mov	r0, r5
 8003b9a:	f7ff fbe7 	bl	800336c <draw_blob>
 8003b9e:	e014      	b.n	8003bca <place_lava+0x5e>
		for (uint16_t j = starting_depth; j < WORLD_HEIGHT_CELLS; j++) {
 8003ba0:	3401      	adds	r4, #1
 8003ba2:	b2a4      	uxth	r4, r4
 8003ba4:	2cef      	cmp	r4, #239	; 0xef
 8003ba6:	d819      	bhi.n	8003bdc <place_lava+0x70>
			if ((float) rand() / (float) (RAND_MAX / 100) < chance_of_lava) { // && WORLD[j][i] & 0xF0 != _dirt_bg) {
 8003ba8:	f00b fe72 	bl	800f890 <rand>
 8003bac:	ee07 0a90 	vmov	s15, r0
 8003bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bb4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003c00 <place_lava+0x94>
 8003bb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003bbc:	eddf 7a11 	vldr	s15, [pc, #68]	; 8003c04 <place_lava+0x98>
 8003bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc8:	d4e3      	bmi.n	8003b92 <place_lava+0x26>
			if (j >= WORLD_HEIGHT_CELLS - 2) {
 8003bca:	2ced      	cmp	r4, #237	; 0xed
 8003bcc:	d9e8      	bls.n	8003ba0 <place_lava+0x34>
				WORLD[j][i] = lava_block;
 8003bce:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <place_lava+0x9c>)
 8003bd0:	22c8      	movs	r2, #200	; 0xc8
 8003bd2:	fb02 3304 	mla	r3, r2, r4, r3
 8003bd6:	2288      	movs	r2, #136	; 0x88
 8003bd8:	559a      	strb	r2, [r3, r6]
 8003bda:	e7e1      	b.n	8003ba0 <place_lava+0x34>
	for (cell_c i = 0; i < WORLD_WIDTH_CELLS; i++) {
 8003bdc:	3501      	adds	r5, #1
 8003bde:	b2ad      	uxth	r5, r5
 8003be0:	2dc7      	cmp	r5, #199	; 0xc7
 8003be2:	d806      	bhi.n	8003bf2 <place_lava+0x86>
		cell_c starting_depth = LVL1_HMAP[2*i] + 10;
 8003be4:	462e      	mov	r6, r5
 8003be6:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <place_lava+0xa0>)
 8003be8:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8003bec:	340a      	adds	r4, #10
 8003bee:	b2a4      	uxth	r4, r4
		for (uint16_t j = starting_depth; j < WORLD_HEIGHT_CELLS; j++) {
 8003bf0:	e7d8      	b.n	8003ba4 <place_lava+0x38>
	shape_caves_with_morphological_operations(dirt_block, lava_block);
 8003bf2:	2188      	movs	r1, #136	; 0x88
 8003bf4:	2011      	movs	r0, #17
 8003bf6:	f7ff ff11 	bl	8003a1c <shape_caves_with_morphological_operations>
}
 8003bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bfc:	55555556 	.word	0x55555556
 8003c00:	4ba3d70a 	.word	0x4ba3d70a
 8003c04:	3dcccccd 	.word	0x3dcccccd
 8003c08:	20006634 	.word	0x20006634
 8003c0c:	20005020 	.word	0x20005020

08003c10 <filter_level>:

void filter_level(uint16_t array_size, uint8_t kernel_width, uint8_t sigma, bool only_sharp_edges) {
 8003c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c14:	ed2d 8b04 	vpush	{d8-d9}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	4607      	mov	r7, r0
 8003c1c:	460c      	mov	r4, r1
 8003c1e:	4615      	mov	r5, r2
 8003c20:	4699      	mov	r9, r3
	int8_t* result = malloc(array_size);
 8003c22:	f00a fe95 	bl	800e950 <malloc>
 8003c26:	4683      	mov	fp, r0

	float* filter = gauss_kernel(kernel_width, sigma);
 8003c28:	4629      	mov	r1, r5
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f7ff fd88 	bl	8003740 <gauss_kernel>
 8003c30:	4682      	mov	sl, r0


	for (uint16_t i = 0; i < array_size; i++) {
 8003c32:	2500      	movs	r5, #0
 8003c34:	e03f      	b.n	8003cb6 <filter_level+0xa6>
		float sum = 0.0;

		float std = 0.0;
		float mean = 0.0;

		for (int j = 0; j < kernel_width; j++) {
 8003c36:	3101      	adds	r1, #1
 8003c38:	428c      	cmp	r4, r1
 8003c3a:	dd1a      	ble.n	8003c72 <filter_level+0x62>
			int k = i + j - (kernel_width - 1) / 2;
 8003c3c:	186b      	adds	r3, r5, r1
 8003c3e:	1e62      	subs	r2, r4, #1
 8003c40:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
			if (k >= 0 && k < array_size) {
 8003c44:	ebb3 0362 	subs.w	r3, r3, r2, asr #1
 8003c48:	d4f5      	bmi.n	8003c36 <filter_level+0x26>
 8003c4a:	429f      	cmp	r7, r3
 8003c4c:	ddf3      	ble.n	8003c36 <filter_level+0x26>
				sum += LVL1_HMAP[k] * filter[j];
 8003c4e:	4a54      	ldr	r2, [pc, #336]	; (8003da0 <filter_level+0x190>)
 8003c50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c54:	ee07 3a90 	vmov	s15, r3
 8003c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c5c:	eb0a 0381 	add.w	r3, sl, r1, lsl #2
 8003c60:	ed93 7a00 	vldr	s14, [r3]
 8003c64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c68:	ee38 8a07 	vadd.f32	s16, s16, s14
				mean += LVL1_HMAP[k];
 8003c6c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003c70:	e7e1      	b.n	8003c36 <filter_level+0x26>
			}
		}

		// Calculate standard deviation
		if (only_sharp_edges) {
 8003c72:	f1b9 0f00 	cmp.w	r9, #0
 8003c76:	d126      	bne.n	8003cc6 <filter_level+0xb6>
		float std = 0.0;
 8003c78:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8003da4 <filter_level+0x194>
			}
			std /= (kernel_width - 1);
			std = sqrt(std);
		}

		if ((only_sharp_edges && std > TERRAIN_STD_THRESH) || !only_sharp_edges) {
 8003c7c:	f1b9 0f00 	cmp.w	r9, #0
 8003c80:	d006      	beq.n	8003c90 <filter_level+0x80>
 8003c82:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c8e:	dc02      	bgt.n	8003c96 <filter_level+0x86>
 8003c90:	f1b9 0f00 	cmp.w	r9, #0
 8003c94:	d161      	bne.n	8003d5a <filter_level+0x14a>
			result[i] = (int8_t) round(sum);
 8003c96:	ee18 0a10 	vmov	r0, s16
 8003c9a:	f7fc fc7d 	bl	8000598 <__aeabi_f2d>
 8003c9e:	ec41 0b10 	vmov	d0, r0, r1
 8003ca2:	f009 fcd3 	bl	800d64c <round>
 8003ca6:	ec51 0b10 	vmov	r0, r1, d0
 8003caa:	f7fc ff7d 	bl	8000ba8 <__aeabi_d2iz>
 8003cae:	f80b 0005 	strb.w	r0, [fp, r5]
	for (uint16_t i = 0; i < array_size; i++) {
 8003cb2:	3501      	adds	r5, #1
 8003cb4:	b2ad      	uxth	r5, r5
 8003cb6:	42bd      	cmp	r5, r7
 8003cb8:	d255      	bcs.n	8003d66 <filter_level+0x156>
		for (int j = 0; j < kernel_width; j++) {
 8003cba:	2100      	movs	r1, #0
		float mean = 0.0;
 8003cbc:	eddf 6a39 	vldr	s13, [pc, #228]	; 8003da4 <filter_level+0x194>
		float sum = 0.0;
 8003cc0:	eeb0 8a66 	vmov.f32	s16, s13
 8003cc4:	e7b8      	b.n	8003c38 <filter_level+0x28>
			mean = mean / (kernel_width-1);
 8003cc6:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
 8003cca:	ee07 8a90 	vmov	s15, r8
 8003cce:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8003cd2:	eec6 9a89 	vdiv.f32	s19, s13, s18
			for (int j = 0; j < kernel_width; j++) {
 8003cd6:	2600      	movs	r6, #0
		float std = 0.0;
 8003cd8:	eddf 8a32 	vldr	s17, [pc, #200]	; 8003da4 <filter_level+0x194>
			for (int j = 0; j < kernel_width; j++) {
 8003cdc:	e000      	b.n	8003ce0 <filter_level+0xd0>
 8003cde:	3601      	adds	r6, #1
 8003ce0:	42b4      	cmp	r4, r6
 8003ce2:	dd29      	ble.n	8003d38 <filter_level+0x128>
				int k = i + j - (kernel_width - 1) / 2;
 8003ce4:	19ab      	adds	r3, r5, r6
 8003ce6:	eb08 72d8 	add.w	r2, r8, r8, lsr #31
				if (k >= 0 && k < array_size) {
 8003cea:	ebb3 0362 	subs.w	r3, r3, r2, asr #1
 8003cee:	d4f6      	bmi.n	8003cde <filter_level+0xce>
 8003cf0:	429f      	cmp	r7, r3
 8003cf2:	ddf4      	ble.n	8003cde <filter_level+0xce>
					std += pow(LVL1_HMAP[k] - mean, 2);
 8003cf4:	4a2a      	ldr	r2, [pc, #168]	; (8003da0 <filter_level+0x190>)
 8003cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d02:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8003d06:	ee17 0a90 	vmov	r0, s15
 8003d0a:	f7fc fc45 	bl	8000598 <__aeabi_f2d>
 8003d0e:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8003d98 <filter_level+0x188>
 8003d12:	ec41 0b10 	vmov	d0, r0, r1
 8003d16:	f009 fd27 	bl	800d768 <pow>
 8003d1a:	ed8d 0b00 	vstr	d0, [sp]
 8003d1e:	ee18 0a90 	vmov	r0, s17
 8003d22:	f7fc fc39 	bl	8000598 <__aeabi_f2d>
 8003d26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d2a:	f7fc fad7 	bl	80002dc <__adddf3>
 8003d2e:	f7fc ff83 	bl	8000c38 <__aeabi_d2f>
 8003d32:	ee08 0a90 	vmov	s17, r0
 8003d36:	e7d2      	b.n	8003cde <filter_level+0xce>
			std = sqrt(std);
 8003d38:	eec8 7a89 	vdiv.f32	s15, s17, s18
 8003d3c:	ee17 0a90 	vmov	r0, s15
 8003d40:	f7fc fc2a 	bl	8000598 <__aeabi_f2d>
 8003d44:	ec41 0b10 	vmov	d0, r0, r1
 8003d48:	f009 fd7e 	bl	800d848 <sqrt>
 8003d4c:	ec51 0b10 	vmov	r0, r1, d0
 8003d50:	f7fc ff72 	bl	8000c38 <__aeabi_d2f>
 8003d54:	ee07 0a90 	vmov	s15, r0
 8003d58:	e790      	b.n	8003c7c <filter_level+0x6c>
		} else {
			result[i] = LVL1_HMAP[i];
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <filter_level+0x190>)
 8003d5c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8003d60:	f80b 3005 	strb.w	r3, [fp, r5]
 8003d64:	e7a5      	b.n	8003cb2 <filter_level+0xa2>
		}
	}

	// Write back
	for (uint16_t i = 0; i < array_size; i++) {
 8003d66:	2300      	movs	r3, #0
 8003d68:	e006      	b.n	8003d78 <filter_level+0x168>
		LVL1_HMAP[i] = result[i];
 8003d6a:	f91b 1003 	ldrsb.w	r1, [fp, r3]
 8003d6e:	4a0c      	ldr	r2, [pc, #48]	; (8003da0 <filter_level+0x190>)
 8003d70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint16_t i = 0; i < array_size; i++) {
 8003d74:	3301      	adds	r3, #1
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	42bb      	cmp	r3, r7
 8003d7a:	d3f6      	bcc.n	8003d6a <filter_level+0x15a>
	}

	free(filter);
 8003d7c:	4650      	mov	r0, sl
 8003d7e:	f00a fdef 	bl	800e960 <free>
	free(result);
 8003d82:	4658      	mov	r0, fp
 8003d84:	f00a fdec 	bl	800e960 <free>
}
 8003d88:	b003      	add	sp, #12
 8003d8a:	ecbd 8b04 	vpop	{d8-d9}
 8003d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d92:	bf00      	nop
 8003d94:	f3af 8000 	nop.w
 8003d98:	00000000 	.word	0x00000000
 8003d9c:	40000000 	.word	0x40000000
 8003da0:	20005020 	.word	0x20005020
 8003da4:	00000000 	.word	0x00000000

08003da8 <generate_height_map>:
void generate_height_map(uint8_t random_lower, uint8_t random_upper, float roughness) {
 8003da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dac:	ed2d 8b02 	vpush	{d8}
 8003db0:	b085      	sub	sp, #20
 8003db2:	4681      	mov	r9, r0
 8003db4:	9101      	str	r1, [sp, #4]
 8003db6:	eeb0 8a40 	vmov.f32	s16, s0
	srand(time(NULL));
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f00c fc88 	bl	80106d0 <time>
 8003dc0:	f00b fd38 	bl	800f834 <srand>
	HEIGHT_MAP[0][0] = 0;			// Elevated on edge
 8003dc4:	4b94      	ldr	r3, [pc, #592]	; (8004018 <generate_height_map+0x270>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	801a      	strh	r2, [r3, #0]
	HEIGHT_MAP[0][map_size-1] = 0;
 8003dca:	f8a3 2320 	strh.w	r2, [r3, #800]	; 0x320
	HEIGHT_MAP[map_size-1][0] = 0;	// Elevated on edge
 8003dce:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8003dd2:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
	HEIGHT_MAP[map_size-1][map_size-1] = 0;
 8003dd6:	f8a3 2460 	strh.w	r2, [r3, #1120]	; 0x460
	uint8_t step = map_size - 1;
 8003dda:	f04f 0b90 	mov.w	fp, #144	; 0x90
	while (step > 1) {
 8003dde:	e0da      	b.n	8003f96 <generate_height_map+0x1ee>
				uint8_t sum = 	HEIGHT_MAP[y-half_step][x-half_step] +
 8003de0:	ebaa 0306 	sub.w	r3, sl, r6
 8003de4:	1baa      	subs	r2, r5, r6
 8003de6:	4f8c      	ldr	r7, [pc, #560]	; (8004018 <generate_height_map+0x270>)
 8003de8:	f04f 081a 	mov.w	r8, #26
 8003dec:	fb08 f303 	mul.w	r3, r8, r3
 8003df0:	1899      	adds	r1, r3, r2
 8003df2:	f937 4011 	ldrsh.w	r4, [r7, r1, lsl #1]
								HEIGHT_MAP[y-half_step][x+half_step] +
 8003df6:	1971      	adds	r1, r6, r5
 8003df8:	440b      	add	r3, r1
 8003dfa:	f937 3013 	ldrsh.w	r3, [r7, r3, lsl #1]
				uint8_t sum = 	HEIGHT_MAP[y-half_step][x-half_step] +
 8003dfe:	441c      	add	r4, r3
								HEIGHT_MAP[y+half_step][x-half_step] +
 8003e00:	eb06 030a 	add.w	r3, r6, sl
 8003e04:	fb08 f303 	mul.w	r3, r8, r3
 8003e08:	441a      	add	r2, r3
 8003e0a:	f937 2012 	ldrsh.w	r2, [r7, r2, lsl #1]
								HEIGHT_MAP[y-half_step][x+half_step] +
 8003e0e:	fa52 f484 	uxtab	r4, r2, r4
								HEIGHT_MAP[y+half_step][x+half_step];
 8003e12:	440b      	add	r3, r1
 8003e14:	f937 3013 	ldrsh.w	r3, [r7, r3, lsl #1]
								HEIGHT_MAP[y+half_step][x-half_step] +
 8003e18:	b2db      	uxtb	r3, r3
				uint8_t sum = 	HEIGHT_MAP[y-half_step][x-half_step] +
 8003e1a:	fa53 f484 	uxtab	r4, r3, r4
 8003e1e:	b2e4      	uxtb	r4, r4
				uint8_t random_n = random_lower + (uint8_t) ( (int) rand() % (random_upper - random_lower + 1));
 8003e20:	f00b fd36 	bl	800f890 <rand>
 8003e24:	9b01      	ldr	r3, [sp, #4]
 8003e26:	eba3 0309 	sub.w	r3, r3, r9
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	fb90 f2f3 	sdiv	r2, r0, r3
 8003e30:	fb03 0012 	mls	r0, r3, r2, r0
 8003e34:	fa59 f080 	uxtab	r0, r9, r0
 8003e38:	b2c0      	uxtb	r0, r0
				uint8_t average = (uint8_t) round(sum / 4);
 8003e3a:	08a4      	lsrs	r4, r4, #2
				HEIGHT_MAP[y][x] = average + random_n * roughness;
 8003e3c:	ee07 0a90 	vmov	s15, r0
 8003e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e44:	ee67 7a88 	vmul.f32	s15, s15, s16
 8003e48:	ee07 4a10 	vmov	s14, r4
 8003e4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e54:	fb08 580a 	mla	r8, r8, sl, r5
 8003e58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e5c:	ee17 3a90 	vmov	r3, s15
 8003e60:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
			for (uint16_t x = step / 2; x < map_size- 1; x += step) {
 8003e64:	445d      	add	r5, fp
 8003e66:	b2ad      	uxth	r5, r5
 8003e68:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
 8003e6c:	d3b8      	bcc.n	8003de0 <generate_height_map+0x38>
		for (uint16_t y = step / 2; y < map_size - 1; y += step) {
 8003e6e:	9b02      	ldr	r3, [sp, #8]
 8003e70:	445b      	add	r3, fp
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	9302      	str	r3, [sp, #8]
 8003e76:	9b02      	ldr	r3, [sp, #8]
 8003e78:	469a      	mov	sl, r3
 8003e7a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003e7e:	d201      	bcs.n	8003e84 <generate_height_map+0xdc>
			for (uint16_t x = step / 2; x < map_size- 1; x += step) {
 8003e80:	9d03      	ldr	r5, [sp, #12]
 8003e82:	e7f1      	b.n	8003e68 <generate_height_map+0xc0>
		for (uint16_t y = 0; y < map_size; y += step/2) {
 8003e84:	f04f 0a00 	mov.w	sl, #0
 8003e88:	f8cd 9008 	str.w	r9, [sp, #8]
 8003e8c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003e90:	e067      	b.n	8003f62 <generate_height_map+0x1ba>
				uint8_t count = 0;
 8003e92:	2300      	movs	r3, #0
				uint8_t sum = 0;
 8003e94:	461a      	mov	r2, r3
 8003e96:	e034      	b.n	8003f02 <generate_height_map+0x15a>
				uint8_t average = sum / count;
 8003e98:	fbb2 f5f3 	udiv	r5, r2, r3
				uint8_t random_n = random_lower + (uint8_t) ((int) rand() % (random_upper - random_lower + 1)) * roughness;
 8003e9c:	f00b fcf8 	bl	800f890 <rand>
 8003ea0:	9b01      	ldr	r3, [sp, #4]
 8003ea2:	9902      	ldr	r1, [sp, #8]
 8003ea4:	1a5b      	subs	r3, r3, r1
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	fb90 f2f3 	sdiv	r2, r0, r3
 8003eac:	fb03 0012 	mls	r0, r3, r2, r0
 8003eb0:	b2c0      	uxtb	r0, r0
 8003eb2:	ee07 0a90 	vmov	s15, r0
 8003eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eba:	ee67 7a88 	vmul.f32	s15, s15, s16
 8003ebe:	ee07 1a10 	vmov	s14, r1
 8003ec2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ece:	ee17 3a90 	vmov	r3, s15
				HEIGHT_MAP[y][x] = average + random_n;
 8003ed2:	fa55 f583 	uxtab	r5, r5, r3
 8003ed6:	231a      	movs	r3, #26
 8003ed8:	fb03 7708 	mla	r7, r3, r8, r7
 8003edc:	4b4e      	ldr	r3, [pc, #312]	; (8004018 <generate_height_map+0x270>)
 8003ede:	f823 5017 	strh.w	r5, [r3, r7, lsl #1]
			for (uint16_t x = x0; x < map_size; x += step) {
 8003ee2:	445c      	add	r4, fp
 8003ee4:	b2a4      	uxth	r4, r4
 8003ee6:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 8003eea:	d837      	bhi.n	8003f5c <generate_height_map+0x1b4>
				if (x >= half_step ) {
 8003eec:	454c      	cmp	r4, r9
 8003eee:	d3d0      	bcc.n	8003e92 <generate_height_map+0xea>
					sum += HEIGHT_MAP[y][x-half_step];
 8003ef0:	1ba3      	subs	r3, r4, r6
 8003ef2:	221a      	movs	r2, #26
 8003ef4:	fb02 3308 	mla	r3, r2, r8, r3
 8003ef8:	4a47      	ldr	r2, [pc, #284]	; (8004018 <generate_height_map+0x270>)
 8003efa:	f932 5013 	ldrsh.w	r5, [r2, r3, lsl #1]
 8003efe:	b2ea      	uxtb	r2, r5
					count++;
 8003f00:	2301      	movs	r3, #1
				if (x < map_size - half_step ) {
 8003f02:	4627      	mov	r7, r4
 8003f04:	f5c6 71c8 	rsb	r1, r6, #400	; 0x190
 8003f08:	3101      	adds	r1, #1
 8003f0a:	428c      	cmp	r4, r1
 8003f0c:	da0a      	bge.n	8003f24 <generate_height_map+0x17c>
					sum += HEIGHT_MAP[y][x+half_step];
 8003f0e:	1930      	adds	r0, r6, r4
 8003f10:	251a      	movs	r5, #26
 8003f12:	fb05 0008 	mla	r0, r5, r8, r0
 8003f16:	4d40      	ldr	r5, [pc, #256]	; (8004018 <generate_height_map+0x270>)
 8003f18:	f935 5010 	ldrsh.w	r5, [r5, r0, lsl #1]
 8003f1c:	4415      	add	r5, r2
 8003f1e:	b2ea      	uxtb	r2, r5
					count++;
 8003f20:	1c5d      	adds	r5, r3, #1
 8003f22:	b2eb      	uxtb	r3, r5
				if (y >= half_step ) {
 8003f24:	45ca      	cmp	sl, r9
 8003f26:	d30b      	bcc.n	8003f40 <generate_height_map+0x198>
					sum += HEIGHT_MAP[y-half_step][x];
 8003f28:	eba8 0006 	sub.w	r0, r8, r6
 8003f2c:	251a      	movs	r5, #26
 8003f2e:	fb05 7000 	mla	r0, r5, r0, r7
 8003f32:	4d39      	ldr	r5, [pc, #228]	; (8004018 <generate_height_map+0x270>)
 8003f34:	f935 5010 	ldrsh.w	r5, [r5, r0, lsl #1]
 8003f38:	4415      	add	r5, r2
 8003f3a:	b2ea      	uxtb	r2, r5
					count++;
 8003f3c:	1c5d      	adds	r5, r3, #1
 8003f3e:	b2eb      	uxtb	r3, r5
				if (y < map_size - half_step ) {
 8003f40:	4588      	cmp	r8, r1
 8003f42:	daa9      	bge.n	8003e98 <generate_height_map+0xf0>
					sum += HEIGHT_MAP[y+half_step][x];
 8003f44:	211a      	movs	r1, #26
 8003f46:	9803      	ldr	r0, [sp, #12]
 8003f48:	fb01 7100 	mla	r1, r1, r0, r7
 8003f4c:	4832      	ldr	r0, [pc, #200]	; (8004018 <generate_height_map+0x270>)
 8003f4e:	f930 5011 	ldrsh.w	r5, [r0, r1, lsl #1]
 8003f52:	4415      	add	r5, r2
 8003f54:	b2ea      	uxtb	r2, r5
					count++;
 8003f56:	1c5d      	adds	r5, r3, #1
 8003f58:	b2eb      	uxtb	r3, r5
 8003f5a:	e79d      	b.n	8003e98 <generate_height_map+0xf0>
		for (uint16_t y = 0; y < map_size; y += step/2) {
 8003f5c:	44ca      	add	sl, r9
 8003f5e:	fa1f fa8a 	uxth.w	sl, sl
 8003f62:	f5ba 7fc8 	cmp.w	sl, #400	; 0x190
 8003f66:	d809      	bhi.n	8003f7c <generate_height_map+0x1d4>
			uint16_t x0 = (y + step/2) % step;		// CHECK IF OK
 8003f68:	46d0      	mov	r8, sl
 8003f6a:	eb0a 0306 	add.w	r3, sl, r6
 8003f6e:	9303      	str	r3, [sp, #12]
 8003f70:	fb93 f4fb 	sdiv	r4, r3, fp
 8003f74:	fb0b 3414 	mls	r4, fp, r4, r3
 8003f78:	b2a4      	uxth	r4, r4
			for (uint16_t x = x0; x < map_size; x += step) {
 8003f7a:	e7b4      	b.n	8003ee6 <generate_height_map+0x13e>
		if (abs(random_lower) > 1 && abs(random_upper) > 1) {
 8003f7c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003f80:	f1b9 0f01 	cmp.w	r9, #1
 8003f84:	d906      	bls.n	8003f94 <generate_height_map+0x1ec>
 8003f86:	9b01      	ldr	r3, [sp, #4]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d903      	bls.n	8003f94 <generate_height_map+0x1ec>
			random_lower /= 2;
 8003f8c:	ea4f 0959 	mov.w	r9, r9, lsr #1
			random_upper /= 2;
 8003f90:	085b      	lsrs	r3, r3, #1
 8003f92:	9301      	str	r3, [sp, #4]
		for (uint16_t y = 0; y < map_size; y += step/2) {
 8003f94:	46b3      	mov	fp, r6
	while (step > 1) {
 8003f96:	f1bb 0f01 	cmp.w	fp, #1
 8003f9a:	d904      	bls.n	8003fa6 <generate_height_map+0x1fe>
		for (uint16_t y = step / 2; y < map_size - 1; y += step) {
 8003f9c:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8003fa0:	9603      	str	r6, [sp, #12]
 8003fa2:	9602      	str	r6, [sp, #8]
 8003fa4:	e767      	b.n	8003e76 <generate_height_map+0xce>
	for (uint16_t i = 0; i < WORLD_WIDTH_BLOCKS; i+=HMAP_SAMPLES_PER_CELL) {
 8003fa6:	2400      	movs	r4, #0
 8003fa8:	e00b      	b.n	8003fc2 <generate_height_map+0x21a>
		uint8_t val = HEIGHT_MAP[WORLD_WIDTH_BLOCKS/HMAP_SAMPLES_PER_CELL][i/HMAP_SAMPLES_PER_CELL] / HMAP_SAMPLES_PER_CELL + GROUND_SKY_RATIO;
 8003faa:	330f      	adds	r3, #15
 8003fac:	e014      	b.n	8003fd8 <generate_height_map+0x230>
			LVL1_HMAP[i+j] = val;
 8003fae:	18e1      	adds	r1, r4, r3
 8003fb0:	4a1a      	ldr	r2, [pc, #104]	; (800401c <generate_height_map+0x274>)
 8003fb2:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
		for (uint8_t j = 0; j < HMAP_SAMPLES_PER_CELL; j++) {
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b0f      	cmp	r3, #15
 8003fbc:	d9f7      	bls.n	8003fae <generate_height_map+0x206>
	for (uint16_t i = 0; i < WORLD_WIDTH_BLOCKS; i+=HMAP_SAMPLES_PER_CELL) {
 8003fbe:	3410      	adds	r4, #16
 8003fc0:	b2a4      	uxth	r4, r4
 8003fc2:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 8003fc6:	d20d      	bcs.n	8003fe4 <generate_height_map+0x23c>
		uint8_t val = HEIGHT_MAP[WORLD_WIDTH_BLOCKS/HMAP_SAMPLES_PER_CELL][i/HMAP_SAMPLES_PER_CELL] / HMAP_SAMPLES_PER_CELL + GROUND_SKY_RATIO;
 8003fc8:	0923      	lsrs	r3, r4, #4
 8003fca:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8003fce:	4a12      	ldr	r2, [pc, #72]	; (8004018 <generate_height_map+0x270>)
 8003fd0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	dbe8      	blt.n	8003faa <generate_height_map+0x202>
 8003fd8:	f3c3 1007 	ubfx	r0, r3, #4, #8
 8003fdc:	3050      	adds	r0, #80	; 0x50
 8003fde:	b2c0      	uxtb	r0, r0
		for (uint8_t j = 0; j < HMAP_SAMPLES_PER_CELL; j++) {
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e7ea      	b.n	8003fba <generate_height_map+0x212>
	filter_level(WORLD_WIDTH_BLOCKS, KERNEL_WIDTH, LEVEL_SMOOTHING_FACTOR, false);
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	220c      	movs	r2, #12
 8003fe8:	2120      	movs	r1, #32
 8003fea:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003fee:	f7ff fe0f 	bl	8003c10 <filter_level>
	filter_level(WORLD_WIDTH_BLOCKS, KERNEL_WIDTH, LEVEL_SMOOTHING_FACTOR, true);
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	220c      	movs	r2, #12
 8003ff6:	2120      	movs	r1, #32
 8003ff8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003ffc:	f7ff fe08 	bl	8003c10 <filter_level>
	filter_level(WORLD_WIDTH_BLOCKS, KERNEL_WIDTH, LEVEL_SMOOTHING_FACTOR, true);
 8004000:	2301      	movs	r3, #1
 8004002:	220c      	movs	r2, #12
 8004004:	2120      	movs	r1, #32
 8004006:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800400a:	f7ff fe01 	bl	8003c10 <filter_level>
}
 800400e:	b005      	add	sp, #20
 8004010:	ecbd 8b02 	vpop	{d8}
 8004014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004018:	20001b38 	.word	0x20001b38
 800401c:	20005020 	.word	0x20005020

08004020 <init_world>:
void init_world() {
 8004020:	b508      	push	{r3, lr}
	generate_height_map(-3, 3, 5);
 8004022:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8004026:	2103      	movs	r1, #3
 8004028:	20fd      	movs	r0, #253	; 0xfd
 800402a:	f7ff febd 	bl	8003da8 <generate_height_map>
	generate_caves();
 800402e:	f7ff f9f5 	bl	800341c <generate_caves>
	shape_caves_with_morphological_operations(dirt, cave);
 8004032:	21cc      	movs	r1, #204	; 0xcc
 8004034:	2011      	movs	r0, #17
 8004036:	f7ff fcf1 	bl	8003a1c <shape_caves_with_morphological_operations>
	place_lava();
 800403a:	f7ff fd97 	bl	8003b6c <place_lava>
	precompute_euclidean();
 800403e:	f7ff f837 	bl	80030b0 <precompute_euclidean>
	precompute_light_intensity();
 8004042:	f7ff f8ed 	bl	8003220 <precompute_light_intensity>
	init_stage_0();
 8004046:	f7ff f955 	bl	80032f4 <init_stage_0>
	init_light_map();
 800404a:	f7fe ff93 	bl	8002f74 <init_light_map>
	place_trees();
 800404e:	f7fe ff23 	bl	8002e98 <place_trees>
	uint16_t zero_height = LVL1_HMAP[WORLD_WIDTH_BLOCKS/2];
 8004052:	4b04      	ldr	r3, [pc, #16]	; (8004064 <init_world+0x44>)
 8004054:	f8b3 1190 	ldrh.w	r1, [r3, #400]	; 0x190
	update_camera_center((uint16_t) floor(WORLD_WIDTH_BLOCKS/3), zero_height - SKY_GROUND_OFFSET);	// zero level height should be at 1/3 of the screen
 8004058:	390f      	subs	r1, #15
 800405a:	b289      	uxth	r1, r1
 800405c:	2085      	movs	r0, #133	; 0x85
 800405e:	f7fe ff01 	bl	8002e64 <update_camera_center>
}
 8004062:	bd08      	pop	{r3, pc}
 8004064:	20005020 	.word	0x20005020

08004068 <get_block_with_pixels_from_WORLD>:
    return (uint8_t) rand() % (max - min + 1) + min;
}

// x and y are postion of pixels on world
// function used for movables to get what is around them
block_t get_block_with_pixels_from_WORLD(pixel_c x, pixel_c y) {
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	4604      	mov	r4, r0
 800406c:	4608      	mov	r0, r1
	// Same as x % 2 but for pixel coordinates
	if (x % 8 >= 4) {
 800406e:	f014 0f04 	tst.w	r4, #4
 8004072:	d10d      	bne.n	8004090 <get_block_with_pixels_from_WORLD+0x28>
		return lower(WORLD[pixel_to_cell_y(y)][pixel_to_cell_x(x)]);
	}

	return upper(WORLD[pixel_to_cell_y(y)][pixel_to_cell_x(x)]);
 8004074:	f000 ffd1 	bl	800501a <pixel_to_cell_y>
 8004078:	4605      	mov	r5, r0
 800407a:	4620      	mov	r0, r4
 800407c:	f000 ffc7 	bl	800500e <pixel_to_cell_x>
 8004080:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <get_block_with_pixels_from_WORLD+0x44>)
 8004082:	22c8      	movs	r2, #200	; 0xc8
 8004084:	fb02 3305 	mla	r3, r2, r5, r3
 8004088:	5c18      	ldrb	r0, [r3, r0]
 800408a:	f000 ffb1 	bl	8004ff0 <upper>
}
 800408e:	bd38      	pop	{r3, r4, r5, pc}
		return lower(WORLD[pixel_to_cell_y(y)][pixel_to_cell_x(x)]);
 8004090:	f000 ffc3 	bl	800501a <pixel_to_cell_y>
 8004094:	4605      	mov	r5, r0
 8004096:	4620      	mov	r0, r4
 8004098:	f000 ffb9 	bl	800500e <pixel_to_cell_x>
 800409c:	4b03      	ldr	r3, [pc, #12]	; (80040ac <get_block_with_pixels_from_WORLD+0x44>)
 800409e:	22c8      	movs	r2, #200	; 0xc8
 80040a0:	fb02 3305 	mla	r3, r2, r5, r3
 80040a4:	5c18      	ldrb	r0, [r3, r0]
 80040a6:	f000 ffa5 	bl	8004ff4 <lower>
 80040aa:	e7f0      	b.n	800408e <get_block_with_pixels_from_WORLD+0x26>
 80040ac:	20006634 	.word	0x20006634

080040b0 <isSolid>:

bool isSolid (block_t block) {
	if (block == _dirt || block == _grass || block == _wood || block == _sand || block == _rock || block == _red_wood || block == _gold || block == _diamond) {
 80040b0:	1e43      	subs	r3, r0, #1
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d90b      	bls.n	80040d0 <isSolid+0x20>
 80040b8:	2806      	cmp	r0, #6
 80040ba:	d00b      	beq.n	80040d4 <isSolid+0x24>
 80040bc:	2807      	cmp	r0, #7
 80040be:	d00b      	beq.n	80040d8 <isSolid+0x28>
 80040c0:	2809      	cmp	r0, #9
 80040c2:	d00b      	beq.n	80040dc <isSolid+0x2c>
 80040c4:	280a      	cmp	r0, #10
 80040c6:	d00b      	beq.n	80040e0 <isSolid+0x30>
 80040c8:	280b      	cmp	r0, #11
 80040ca:	d00b      	beq.n	80040e4 <isSolid+0x34>
		return true;
	}
	return false;
 80040cc:	2000      	movs	r0, #0
 80040ce:	4770      	bx	lr
		return true;
 80040d0:	2001      	movs	r0, #1
 80040d2:	4770      	bx	lr
 80040d4:	2001      	movs	r0, #1
 80040d6:	4770      	bx	lr
 80040d8:	2001      	movs	r0, #1
 80040da:	4770      	bx	lr
 80040dc:	2001      	movs	r0, #1
 80040de:	4770      	bx	lr
 80040e0:	2001      	movs	r0, #1
 80040e2:	4770      	bx	lr
 80040e4:	2001      	movs	r0, #1
}
 80040e6:	4770      	bx	lr

080040e8 <world_pixel_to_scene_pixel_x_no_band>:
 * position that is represented in SCENE position
 * for x axis and down under y axis
 *
 */
posx_pixel world_pixel_to_scene_pixel_x_no_band (posx_pixel pos_x) {
	posx_pixel mapped_pos = pos_x - ((camera_x_block * BLOCK_WIDTH) - (SCENE_WIDTH_PIXELS / 2));
 80040e8:	4b08      	ldr	r3, [pc, #32]	; (800410c <world_pixel_to_scene_pixel_x_no_band+0x24>)
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	3b28      	subs	r3, #40	; 0x28
 80040ee:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 80040f2:	b200      	sxth	r0, r0

	if (mapped_pos < 0) mapped_pos = 0;
 80040f4:	2800      	cmp	r0, #0
 80040f6:	db03      	blt.n	8004100 <world_pixel_to_scene_pixel_x_no_band+0x18>
	if (mapped_pos >= SCENE_WIDTH_PIXELS) mapped_pos = SCENE_WIDTH_PIXELS - 1;
 80040f8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
 80040fc:	da02      	bge.n	8004104 <world_pixel_to_scene_pixel_x_no_band+0x1c>

	return mapped_pos;
}
 80040fe:	4770      	bx	lr
	if (mapped_pos < 0) mapped_pos = 0;
 8004100:	2000      	movs	r0, #0
 8004102:	4770      	bx	lr
	if (mapped_pos >= SCENE_WIDTH_PIXELS) mapped_pos = SCENE_WIDTH_PIXELS - 1;
 8004104:	f240 103f 	movw	r0, #319	; 0x13f
 8004108:	e7f9      	b.n	80040fe <world_pixel_to_scene_pixel_x_no_band+0x16>
 800410a:	bf00      	nop
 800410c:	200121b4 	.word	0x200121b4

08004110 <world_pixel_to_scene_pixel_y_no_band>:
posy_pixel world_pixel_to_scene_pixel_y_no_band (posy_pixel pos_y) {
	posx_pixel mapped_pos = pos_y - ((camera_y_block * BLOCK_WIDTH) - (SCENE_HEIGHT_PIXELS / 2));
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <world_pixel_to_scene_pixel_y_no_band+0x20>)
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	3b1e      	subs	r3, #30
 8004116:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 800411a:	b200      	sxth	r0, r0

	if (mapped_pos < 0) mapped_pos = 0;
 800411c:	2800      	cmp	r0, #0
 800411e:	db02      	blt.n	8004126 <world_pixel_to_scene_pixel_y_no_band+0x16>
	if (mapped_pos >= SCENE_HEIGHT_PIXELS) mapped_pos = SCENE_HEIGHT_PIXELS - 1;
 8004120:	28ef      	cmp	r0, #239	; 0xef
 8004122:	dc02      	bgt.n	800412a <world_pixel_to_scene_pixel_y_no_band+0x1a>
	return mapped_pos;
}
 8004124:	4770      	bx	lr
	if (mapped_pos < 0) mapped_pos = 0;
 8004126:	2000      	movs	r0, #0
 8004128:	4770      	bx	lr
	if (mapped_pos >= SCENE_HEIGHT_PIXELS) mapped_pos = SCENE_HEIGHT_PIXELS - 1;
 800412a:	20ef      	movs	r0, #239	; 0xef
 800412c:	e7fa      	b.n	8004124 <world_pixel_to_scene_pixel_y_no_band+0x14>
 800412e:	bf00      	nop
 8004130:	200121b6 	.word	0x200121b6

08004134 <world_pixel_to_scene_pixel_x_band>:

posx_pixel world_pixel_to_scene_pixel_x_band (posx_pixel pos_x) {
	posx_pixel mapped_pos = pos_x - ((camera_x_block * BLOCK_WIDTH) - (SCENE_WIDTH_BLOCKS * BLOCK_WIDTH / 2));
 8004134:	4b03      	ldr	r3, [pc, #12]	; (8004144 <world_pixel_to_scene_pixel_x_band+0x10>)
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	3b28      	subs	r3, #40	; 0x28
 800413a:	eba0 0083 	sub.w	r0, r0, r3, lsl #2

	return mapped_pos;
}
 800413e:	b200      	sxth	r0, r0
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	200121b4 	.word	0x200121b4

08004148 <world_pixel_to_scene_pixel_y_band>:
posy_pixel world_pixel_to_scene_pixel_y_band (posy_pixel pos_y) {
	posx_pixel mapped_pos = pos_y - ((camera_y_block * BLOCK_WIDTH) - (SCENE_HEIGHT_BLOCKS * BLOCK_WIDTH / 2));
 8004148:	4b03      	ldr	r3, [pc, #12]	; (8004158 <world_pixel_to_scene_pixel_y_band+0x10>)
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	3b1e      	subs	r3, #30
 800414e:	eba0 0083 	sub.w	r0, r0, r3, lsl #2

	return mapped_pos;
}
 8004152:	b200      	sxth	r0, r0
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	200121b6 	.word	0x200121b6

0800415c <world_pixel_to_world_pixel_x_no_band_param>:
	if (mapped_pos >= SCENE_HEIGHT_BLOCKS * BLOCK_WIDTH) mapped_pos = SCENE_HEIGHT_BLOCKS * BLOCK_WIDTH - 1;
	return mapped_pos;
}

posx_pixel world_pixel_to_world_pixel_x_no_band_param (posx_pixel pos_x, posx_pixel x_diff) {
	posx_pixel mapped_pos = pos_x + x_diff;
 800415c:	4408      	add	r0, r1
 800415e:	b200      	sxth	r0, r0

	if (mapped_pos < 0) mapped_pos = 0;
 8004160:	2800      	cmp	r0, #0
 8004162:	db03      	blt.n	800416c <world_pixel_to_world_pixel_x_no_band_param+0x10>
	if (mapped_pos >= WORLD_WIDTH_PIXELS) mapped_pos = WORLD_WIDTH_PIXELS - 1;
 8004164:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 8004168:	da02      	bge.n	8004170 <world_pixel_to_world_pixel_x_no_band_param+0x14>
	return mapped_pos;

}
 800416a:	4770      	bx	lr
	if (mapped_pos < 0) mapped_pos = 0;
 800416c:	2000      	movs	r0, #0
 800416e:	4770      	bx	lr
	if (mapped_pos >= WORLD_WIDTH_PIXELS) mapped_pos = WORLD_WIDTH_PIXELS - 1;
 8004170:	f240 603f 	movw	r0, #1599	; 0x63f
 8004174:	e7f9      	b.n	800416a <world_pixel_to_world_pixel_x_no_band_param+0xe>

08004176 <world_pixel_to_world_pixel_y_no_band_param>:

posy_pixel world_pixel_to_world_pixel_y_no_band_param (posy_pixel pos_y, posy_pixel y_diff) {
	posx_pixel mapped_pos = pos_y + y_diff;
 8004176:	4408      	add	r0, r1
 8004178:	b200      	sxth	r0, r0

	if (mapped_pos < 0) mapped_pos = 0;
 800417a:	2800      	cmp	r0, #0
 800417c:	db03      	blt.n	8004186 <world_pixel_to_world_pixel_y_no_band_param+0x10>
	if (mapped_pos >= WORLD_HEIGHT_PIXELS) mapped_pos = WORLD_HEIGHT_PIXELS - 1;
 800417e:	f5b0 7f70 	cmp.w	r0, #960	; 0x3c0
 8004182:	da02      	bge.n	800418a <world_pixel_to_world_pixel_y_no_band_param+0x14>
	return mapped_pos;
}
 8004184:	4770      	bx	lr
	if (mapped_pos < 0) mapped_pos = 0;
 8004186:	2000      	movs	r0, #0
 8004188:	4770      	bx	lr
	if (mapped_pos >= WORLD_HEIGHT_PIXELS) mapped_pos = WORLD_HEIGHT_PIXELS - 1;
 800418a:	f240 30bf 	movw	r0, #959	; 0x3bf
 800418e:	e7f9      	b.n	8004184 <world_pixel_to_world_pixel_y_no_band_param+0xe>

08004190 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004190:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004192:	4810      	ldr	r0, [pc, #64]	; (80041d4 <MX_SPI1_Init+0x44>)
 8004194:	4b10      	ldr	r3, [pc, #64]	; (80041d8 <MX_SPI1_Init+0x48>)
 8004196:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004198:	f44f 7382 	mov.w	r3, #260	; 0x104
 800419c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800419e:	2300      	movs	r3, #0
 80041a0:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80041a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80041a6:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041a8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041aa:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041b0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80041b2:	2228      	movs	r2, #40	; 0x28
 80041b4:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041b6:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80041b8:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ba:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80041bc:	2207      	movs	r2, #7
 80041be:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80041c0:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80041c2:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80041c4:	f005 fadc 	bl	8009780 <HAL_SPI_Init>
 80041c8:	b900      	cbnz	r0, 80041cc <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80041ca:	bd08      	pop	{r3, pc}
    Error_Handler();
 80041cc:	f7fd fed4 	bl	8001f78 <Error_Handler>
}
 80041d0:	e7fb      	b.n	80041ca <MX_SPI1_Init+0x3a>
 80041d2:	bf00      	nop
 80041d4:	200121c0 	.word	0x200121c0
 80041d8:	40013000 	.word	0x40013000

080041dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80041dc:	b500      	push	{lr}
 80041de:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e0:	2300      	movs	r3, #0
 80041e2:	9303      	str	r3, [sp, #12]
 80041e4:	9304      	str	r3, [sp, #16]
 80041e6:	9305      	str	r3, [sp, #20]
 80041e8:	9306      	str	r3, [sp, #24]
 80041ea:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 80041ec:	6802      	ldr	r2, [r0, #0]
 80041ee:	4b12      	ldr	r3, [pc, #72]	; (8004238 <HAL_SPI_MspInit+0x5c>)
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d002      	beq.n	80041fa <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80041f4:	b009      	add	sp, #36	; 0x24
 80041f6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80041fa:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80041fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004200:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004204:	661a      	str	r2, [r3, #96]	; 0x60
 8004206:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004208:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800420c:	9201      	str	r2, [sp, #4]
 800420e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004210:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004216:	64da      	str	r2, [r3, #76]	; 0x4c
 8004218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	9302      	str	r3, [sp, #8]
 8004220:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8004222:	231c      	movs	r3, #28
 8004224:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004226:	2302      	movs	r3, #2
 8004228:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800422a:	2305      	movs	r3, #5
 800422c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800422e:	a903      	add	r1, sp, #12
 8004230:	4802      	ldr	r0, [pc, #8]	; (800423c <HAL_SPI_MspInit+0x60>)
 8004232:	f002 fed7 	bl	8006fe4 <HAL_GPIO_Init>
}
 8004236:	e7dd      	b.n	80041f4 <HAL_SPI_MspInit+0x18>
 8004238:	40013000 	.word	0x40013000
 800423c:	48001800 	.word	0x48001800

08004240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004240:	b500      	push	{lr}
 8004242:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_MspInit+0x34>)
 8004246:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004248:	f042 0201 	orr.w	r2, r2, #1
 800424c:	661a      	str	r2, [r3, #96]	; 0x60
 800424e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004250:	f002 0201 	and.w	r2, r2, #1
 8004254:	9200      	str	r2, [sp, #0]
 8004256:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004258:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800425a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800425e:	659a      	str	r2, [r3, #88]	; 0x58
 8004260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004266:	9301      	str	r3, [sp, #4]
 8004268:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800426a:	f004 fc37 	bl	8008adc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800426e:	b003      	add	sp, #12
 8004270:	f85d fb04 	ldr.w	pc, [sp], #4
 8004274:	40021000 	.word	0x40021000

08004278 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004278:	e7fe      	b.n	8004278 <NMI_Handler>

0800427a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800427a:	e7fe      	b.n	800427a <HardFault_Handler>

0800427c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800427c:	e7fe      	b.n	800427c <MemManage_Handler>

0800427e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800427e:	e7fe      	b.n	800427e <BusFault_Handler>

08004280 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004280:	e7fe      	b.n	8004280 <UsageFault_Handler>

08004282 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004282:	4770      	bx	lr

08004284 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004284:	4770      	bx	lr

08004286 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004286:	4770      	bx	lr

08004288 <SysTick_Handler>:
volatile	uint8_t	milliseconds 	= 0;
extern bool cycle;
extern uint8_t FPS;

void SysTick_Handler(void)
{
 8004288:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800428a:	f001 fb35 	bl	80058f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  	// Here the frame rate of TERRSKO is set to values of 10 to 100 FPS
    if (milliseconds >= FPS) {
 800428e:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <SysTick_Handler+0x2c>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	4a08      	ldr	r2, [pc, #32]	; (80042b8 <SysTick_Handler+0x30>)
 8004296:	7812      	ldrb	r2, [r2, #0]
 8004298:	4293      	cmp	r3, r2
 800429a:	d305      	bcc.n	80042a8 <SysTick_Handler+0x20>
    	milliseconds = 0;
 800429c:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <SysTick_Handler+0x2c>)
 800429e:	2200      	movs	r2, #0
 80042a0:	701a      	strb	r2, [r3, #0]
    	cycle = true;
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <SysTick_Handler+0x34>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	701a      	strb	r2, [r3, #0]
    }
    milliseconds++;
 80042a8:	4a02      	ldr	r2, [pc, #8]	; (80042b4 <SysTick_Handler+0x2c>)
 80042aa:	7813      	ldrb	r3, [r2, #0]
 80042ac:	3301      	adds	r3, #1
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	7013      	strb	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80042b2:	bd08      	pop	{r3, pc}
 80042b4:	20012224 	.word	0x20012224
 80042b8:	20001000 	.word	0x20001000
 80042bc:	20001a5c 	.word	0x20001a5c

080042c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80042c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 80042c2:	4802      	ldr	r0, [pc, #8]	; (80042cc <DMA1_Channel1_IRQHandler+0xc>)
 80042c4:	f002 fcf9 	bl	8006cba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80042c8:	bd08      	pop	{r3, pc}
 80042ca:	bf00      	nop
 80042cc:	200017e4 	.word	0x200017e4

080042d0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80042d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80042d2:	4802      	ldr	r0, [pc, #8]	; (80042dc <DMA1_Channel3_IRQHandler+0xc>)
 80042d4:	f002 fcf1 	bl	8006cba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80042d8:	bd08      	pop	{r3, pc}
 80042da:	bf00      	nop
 80042dc:	20001904 	.word	0x20001904

080042e0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80042e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80042e2:	4802      	ldr	r0, [pc, #8]	; (80042ec <DMA1_Channel4_IRQHandler+0xc>)
 80042e4:	f002 fce9 	bl	8006cba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80042e8:	bd08      	pop	{r3, pc}
 80042ea:	bf00      	nop
 80042ec:	20001964 	.word	0x20001964

080042f0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80042f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80042f2:	4802      	ldr	r0, [pc, #8]	; (80042fc <DMA1_Channel5_IRQHandler+0xc>)
 80042f4:	f002 fce1 	bl	8006cba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80042f8:	bd08      	pop	{r3, pc}
 80042fa:	bf00      	nop
 80042fc:	20001738 	.word	0x20001738

08004300 <DMA1_Channel6_IRQHandler>:
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004300:	4770      	bx	lr

08004302 <DMA1_Channel7_IRQHandler>:
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8004302:	4770      	bx	lr

08004304 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8004304:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004306:	4802      	ldr	r0, [pc, #8]	; (8004310 <USB_LP_IRQHandler+0xc>)
 8004308:	f004 f91f 	bl	800854a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800430c:	bd08      	pop	{r3, pc}
 800430e:	bf00      	nop
 8004310:	20013ae8 	.word	0x20013ae8

08004314 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8004314:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004316:	4802      	ldr	r0, [pc, #8]	; (8004320 <I2C1_EV_IRQHandler+0xc>)
 8004318:	f002 fffa 	bl	8007310 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800431c:	bd08      	pop	{r3, pc}
 800431e:	bf00      	nop
 8004320:	200019c4 	.word	0x200019c4

08004324 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004324:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004326:	4802      	ldr	r0, [pc, #8]	; (8004330 <I2C1_ER_IRQHandler+0xc>)
 8004328:	f003 fabd 	bl	80078a6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800432c:	bd08      	pop	{r3, pc}
 800432e:	bf00      	nop
 8004330:	200019c4 	.word	0x200019c4

08004334 <EXTI0_IRQHandler>:
//	}
//}
/*	TIM2 IS READY FOR ACTIVITY IN FREQUENCY: 1HZ */

void EXTI0_IRQHandler() {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0)) {
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <EXTI0_IRQHandler+0x18>)
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	f013 0f01 	tst.w	r3, #1
 800433c:	d002      	beq.n	8004344 <EXTI0_IRQHandler+0x10>
			act_up = true;
 800433e:	4b04      	ldr	r3, [pc, #16]	; (8004350 <EXTI0_IRQHandler+0x1c>)
 8004340:	2201      	movs	r2, #1
 8004342:	701a      	strb	r2, [r3, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8004344:	4b01      	ldr	r3, [pc, #4]	; (800434c <EXTI0_IRQHandler+0x18>)
 8004346:	2201      	movs	r2, #1
 8004348:	615a      	str	r2, [r3, #20]
}
 800434a:	4770      	bx	lr
 800434c:	40010400 	.word	0x40010400
 8004350:	20001577 	.word	0x20001577

08004354 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler() {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1)) {
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <EXTI1_IRQHandler+0x18>)
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f013 0f02 	tst.w	r3, #2
 800435c:	d002      	beq.n	8004364 <EXTI1_IRQHandler+0x10>
		act_left = true;
 800435e:	4b04      	ldr	r3, [pc, #16]	; (8004370 <EXTI1_IRQHandler+0x1c>)
 8004360:	2201      	movs	r2, #1
 8004362:	701a      	strb	r2, [r3, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 8004364:	4b01      	ldr	r3, [pc, #4]	; (800436c <EXTI1_IRQHandler+0x18>)
 8004366:	2202      	movs	r2, #2
 8004368:	615a      	str	r2, [r3, #20]
}
 800436a:	4770      	bx	lr
 800436c:	40010400 	.word	0x40010400
 8004370:	20001575 	.word	0x20001575

08004374 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler() {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6)) {
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <EXTI9_5_IRQHandler+0x30>)
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	f013 0f40 	tst.w	r3, #64	; 0x40
 800437c:	d002      	beq.n	8004384 <EXTI9_5_IRQHandler+0x10>
		act_down = true;
 800437e:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <EXTI9_5_IRQHandler+0x34>)
 8004380:	2201      	movs	r2, #1
 8004382:	701a      	strb	r2, [r3, #0]
	}
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8)) {
 8004384:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <EXTI9_5_IRQHandler+0x30>)
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	f413 7f80 	tst.w	r3, #256	; 0x100
 800438c:	d002      	beq.n	8004394 <EXTI9_5_IRQHandler+0x20>
		act_right = true;
 800438e:	4b07      	ldr	r3, [pc, #28]	; (80043ac <EXTI9_5_IRQHandler+0x38>)
 8004390:	2201      	movs	r2, #1
 8004392:	701a      	strb	r2, [r3, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8004394:	4b03      	ldr	r3, [pc, #12]	; (80043a4 <EXTI9_5_IRQHandler+0x30>)
 8004396:	2240      	movs	r2, #64	; 0x40
 8004398:	615a      	str	r2, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 800439a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800439e:	615a      	str	r2, [r3, #20]
}
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40010400 	.word	0x40010400
 80043a8:	20001574 	.word	0x20001574
 80043ac:	20001576 	.word	0x20001576

080043b0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80043b0:	2001      	movs	r0, #1
 80043b2:	4770      	bx	lr

080043b4 <_kill>:

int _kill(int pid, int sig)
{
 80043b4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80043b6:	f00a faa1 	bl	800e8fc <__errno>
 80043ba:	2316      	movs	r3, #22
 80043bc:	6003      	str	r3, [r0, #0]
	return -1;
}
 80043be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043c2:	bd08      	pop	{r3, pc}

080043c4 <_exit>:

void _exit (int status)
{
 80043c4:	b508      	push	{r3, lr}
	_kill(status, -1);
 80043c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043ca:	f7ff fff3 	bl	80043b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80043ce:	e7fe      	b.n	80043ce <_exit+0xa>

080043d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043d0:	b570      	push	{r4, r5, r6, lr}
 80043d2:	460c      	mov	r4, r1
 80043d4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043d6:	2500      	movs	r5, #0
 80043d8:	e006      	b.n	80043e8 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 80043da:	f3af 8000 	nop.w
 80043de:	4621      	mov	r1, r4
 80043e0:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043e4:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 80043e6:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043e8:	42b5      	cmp	r5, r6
 80043ea:	dbf6      	blt.n	80043da <_read+0xa>
	}

return len;
}
 80043ec:	4630      	mov	r0, r6
 80043ee:	bd70      	pop	{r4, r5, r6, pc}

080043f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	460c      	mov	r4, r1
 80043f4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043f6:	2500      	movs	r5, #0
 80043f8:	e004      	b.n	8004404 <_write+0x14>
	{
		__io_putchar(*ptr++);
 80043fa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80043fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004402:	3501      	adds	r5, #1
 8004404:	42b5      	cmp	r5, r6
 8004406:	dbf8      	blt.n	80043fa <_write+0xa>
	}
	return len;
}
 8004408:	4630      	mov	r0, r6
 800440a:	bd70      	pop	{r4, r5, r6, pc}

0800440c <_close>:

int _close(int file)
{
	return -1;
}
 800440c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004410:	4770      	bx	lr

08004412 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004416:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004418:	2000      	movs	r0, #0
 800441a:	4770      	bx	lr

0800441c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800441c:	2001      	movs	r0, #1
 800441e:	4770      	bx	lr

08004420 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004420:	2000      	movs	r0, #0
 8004422:	4770      	bx	lr

08004424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004424:	b510      	push	{r4, lr}
 8004426:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004428:	4a0c      	ldr	r2, [pc, #48]	; (800445c <_sbrk+0x38>)
 800442a:	490d      	ldr	r1, [pc, #52]	; (8004460 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800442c:	480d      	ldr	r0, [pc, #52]	; (8004464 <_sbrk+0x40>)
 800442e:	6800      	ldr	r0, [r0, #0]
 8004430:	b140      	cbz	r0, 8004444 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004432:	480c      	ldr	r0, [pc, #48]	; (8004464 <_sbrk+0x40>)
 8004434:	6800      	ldr	r0, [r0, #0]
 8004436:	4403      	add	r3, r0
 8004438:	1a52      	subs	r2, r2, r1
 800443a:	4293      	cmp	r3, r2
 800443c:	d806      	bhi.n	800444c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800443e:	4a09      	ldr	r2, [pc, #36]	; (8004464 <_sbrk+0x40>)
 8004440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8004442:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004444:	4807      	ldr	r0, [pc, #28]	; (8004464 <_sbrk+0x40>)
 8004446:	4c08      	ldr	r4, [pc, #32]	; (8004468 <_sbrk+0x44>)
 8004448:	6004      	str	r4, [r0, #0]
 800444a:	e7f2      	b.n	8004432 <_sbrk+0xe>
    errno = ENOMEM;
 800444c:	f00a fa56 	bl	800e8fc <__errno>
 8004450:	230c      	movs	r3, #12
 8004452:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004458:	e7f3      	b.n	8004442 <_sbrk+0x1e>
 800445a:	bf00      	nop
 800445c:	20020000 	.word	0x20020000
 8004460:	00000400 	.word	0x00000400
 8004464:	20012228 	.word	0x20012228
 8004468:	20014010 	.word	0x20014010

0800446c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800446c:	4a03      	ldr	r2, [pc, #12]	; (800447c <SystemInit+0x10>)
 800446e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004472:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004476:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800447a:	4770      	bx	lr
 800447c:	e000ed00 	.word	0xe000ed00

08004480 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim20);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004480:	b084      	sub	sp, #16

  if(tim_baseHandle->Instance==TIM5)
 8004482:	6803      	ldr	r3, [r0, #0]
 8004484:	4a1c      	ldr	r2, [pc, #112]	; (80044f8 <HAL_TIM_Base_MspInit+0x78>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d013      	beq.n	80044b2 <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 800448a:	4a1c      	ldr	r2, [pc, #112]	; (80044fc <HAL_TIM_Base_MspInit+0x7c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d01c      	beq.n	80044ca <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM15)
 8004490:	4a1b      	ldr	r2, [pc, #108]	; (8004500 <HAL_TIM_Base_MspInit+0x80>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d024      	beq.n	80044e0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM20)
 8004496:	4a1b      	ldr	r2, [pc, #108]	; (8004504 <HAL_TIM_Base_MspInit+0x84>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d114      	bne.n	80044c6 <HAL_TIM_Base_MspInit+0x46>
  {
  /* USER CODE BEGIN TIM20_MspInit 0 */

  /* USER CODE END TIM20_MspInit 0 */
    /* TIM20 clock enable */
    __HAL_RCC_TIM20_CLK_ENABLE();
 800449c:	4b1a      	ldr	r3, [pc, #104]	; (8004508 <HAL_TIM_Base_MspInit+0x88>)
 800449e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80044a4:	661a      	str	r2, [r3, #96]	; 0x60
 80044a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ac:	9303      	str	r3, [sp, #12]
 80044ae:	9b03      	ldr	r3, [sp, #12]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 80044b0:	e009      	b.n	80044c6 <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80044b2:	4b15      	ldr	r3, [pc, #84]	; (8004508 <HAL_TIM_Base_MspInit+0x88>)
 80044b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044b6:	f042 0208 	orr.w	r2, r2, #8
 80044ba:	659a      	str	r2, [r3, #88]	; 0x58
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	9b00      	ldr	r3, [sp, #0]
}
 80044c6:	b004      	add	sp, #16
 80044c8:	4770      	bx	lr
    __HAL_RCC_TIM8_CLK_ENABLE();
 80044ca:	4b0f      	ldr	r3, [pc, #60]	; (8004508 <HAL_TIM_Base_MspInit+0x88>)
 80044cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044d2:	661a      	str	r2, [r3, #96]	; 0x60
 80044d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044da:	9301      	str	r3, [sp, #4]
 80044dc:	9b01      	ldr	r3, [sp, #4]
 80044de:	e7f2      	b.n	80044c6 <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80044e0:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_TIM_Base_MspInit+0x88>)
 80044e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80044e8:	661a      	str	r2, [r3, #96]	; 0x60
 80044ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f0:	9302      	str	r3, [sp, #8]
 80044f2:	9b02      	ldr	r3, [sp, #8]
 80044f4:	e7e7      	b.n	80044c6 <HAL_TIM_Base_MspInit+0x46>
 80044f6:	bf00      	nop
 80044f8:	40000c00 	.word	0x40000c00
 80044fc:	40013400 	.word	0x40013400
 8004500:	40014000 	.word	0x40014000
 8004504:	40015000 	.word	0x40015000
 8004508:	40021000 	.word	0x40021000

0800450c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800450c:	b500      	push	{lr}
 800450e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004510:	2300      	movs	r3, #0
 8004512:	9305      	str	r3, [sp, #20]
 8004514:	9306      	str	r3, [sp, #24]
 8004516:	9307      	str	r3, [sp, #28]
 8004518:	9308      	str	r3, [sp, #32]
 800451a:	9309      	str	r3, [sp, #36]	; 0x24
  if(timHandle->Instance==TIM5)
 800451c:	6803      	ldr	r3, [r0, #0]
 800451e:	4a33      	ldr	r2, [pc, #204]	; (80045ec <HAL_TIM_MspPostInit+0xe0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00b      	beq.n	800453c <HAL_TIM_MspPostInit+0x30>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 8004524:	4a32      	ldr	r2, [pc, #200]	; (80045f0 <HAL_TIM_MspPostInit+0xe4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d01e      	beq.n	8004568 <HAL_TIM_MspPostInit+0x5c>

  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM15)
 800452a:	4a32      	ldr	r2, [pc, #200]	; (80045f4 <HAL_TIM_MspPostInit+0xe8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d031      	beq.n	8004594 <HAL_TIM_MspPostInit+0x88>

  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM20)
 8004530:	4a31      	ldr	r2, [pc, #196]	; (80045f8 <HAL_TIM_MspPostInit+0xec>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d044      	beq.n	80045c0 <HAL_TIM_MspPostInit+0xb4>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8004536:	b00b      	add	sp, #44	; 0x2c
 8004538:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800453c:	4b2f      	ldr	r3, [pc, #188]	; (80045fc <HAL_TIM_MspPostInit+0xf0>)
 800453e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004540:	f042 0220 	orr.w	r2, r2, #32
 8004544:	64da      	str	r2, [r3, #76]	; 0x4c
 8004546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	9301      	str	r3, [sp, #4]
 800454e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM2_Pin|PWM3_Pin|PWM4_Pin;
 8004550:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004554:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004556:	2302      	movs	r3, #2
 8004558:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 800455a:	2306      	movs	r3, #6
 800455c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800455e:	a905      	add	r1, sp, #20
 8004560:	4827      	ldr	r0, [pc, #156]	; (8004600 <HAL_TIM_MspPostInit+0xf4>)
 8004562:	f002 fd3f 	bl	8006fe4 <HAL_GPIO_Init>
 8004566:	e7e6      	b.n	8004536 <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004568:	4b24      	ldr	r3, [pc, #144]	; (80045fc <HAL_TIM_MspPostInit+0xf0>)
 800456a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800456c:	f042 0204 	orr.w	r2, r2, #4
 8004570:	64da      	str	r2, [r3, #76]	; 0x4c
 8004572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	9302      	str	r3, [sp, #8]
 800457a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM10_Pin|PWM11_Pin|PWM12_Pin|PWM13_Pin;
 800457c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004580:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004582:	2302      	movs	r3, #2
 8004584:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004586:	2304      	movs	r3, #4
 8004588:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800458a:	a905      	add	r1, sp, #20
 800458c:	481d      	ldr	r0, [pc, #116]	; (8004604 <HAL_TIM_MspPostInit+0xf8>)
 800458e:	f002 fd29 	bl	8006fe4 <HAL_GPIO_Init>
 8004592:	e7d0      	b.n	8004536 <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004594:	4b19      	ldr	r3, [pc, #100]	; (80045fc <HAL_TIM_MspPostInit+0xf0>)
 8004596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004598:	f042 0220 	orr.w	r2, r2, #32
 800459c:	64da      	str	r2, [r3, #76]	; 0x4c
 800459e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	9303      	str	r3, [sp, #12]
 80045a6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = PWM5_Pin;
 80045a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ac:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ae:	2302      	movs	r3, #2
 80045b0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
 80045b2:	2303      	movs	r3, #3
 80045b4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(PWM5_GPIO_Port, &GPIO_InitStruct);
 80045b6:	a905      	add	r1, sp, #20
 80045b8:	4811      	ldr	r0, [pc, #68]	; (8004600 <HAL_TIM_MspPostInit+0xf4>)
 80045ba:	f002 fd13 	bl	8006fe4 <HAL_GPIO_Init>
 80045be:	e7ba      	b.n	8004536 <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80045c0:	4b0e      	ldr	r3, [pc, #56]	; (80045fc <HAL_TIM_MspPostInit+0xf0>)
 80045c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045c4:	f042 0220 	orr.w	r2, r2, #32
 80045c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80045ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045cc:	f003 0320 	and.w	r3, r3, #32
 80045d0:	9304      	str	r3, [sp, #16]
 80045d2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = PWM6_Pin|PWM7_Pin|PWM8_Pin|PWM9_Pin;
 80045d4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80045d8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045da:	2302      	movs	r3, #2
 80045dc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 80045de:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045e0:	a905      	add	r1, sp, #20
 80045e2:	4807      	ldr	r0, [pc, #28]	; (8004600 <HAL_TIM_MspPostInit+0xf4>)
 80045e4:	f002 fcfe 	bl	8006fe4 <HAL_GPIO_Init>
}
 80045e8:	e7a5      	b.n	8004536 <HAL_TIM_MspPostInit+0x2a>
 80045ea:	bf00      	nop
 80045ec:	40000c00 	.word	0x40000c00
 80045f0:	40013400 	.word	0x40013400
 80045f4:	40014000 	.word	0x40014000
 80045f8:	40015000 	.word	0x40015000
 80045fc:	40021000 	.word	0x40021000
 8004600:	48001400 	.word	0x48001400
 8004604:	48000800 	.word	0x48000800

08004608 <MX_TIM5_Init>:
{
 8004608:	b500      	push	{lr}
 800460a:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800460c:	2300      	movs	r3, #0
 800460e:	930a      	str	r3, [sp, #40]	; 0x28
 8004610:	930b      	str	r3, [sp, #44]	; 0x2c
 8004612:	930c      	str	r3, [sp, #48]	; 0x30
 8004614:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004616:	9307      	str	r3, [sp, #28]
 8004618:	9308      	str	r3, [sp, #32]
 800461a:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	9301      	str	r3, [sp, #4]
 8004620:	9302      	str	r3, [sp, #8]
 8004622:	9303      	str	r3, [sp, #12]
 8004624:	9304      	str	r3, [sp, #16]
 8004626:	9305      	str	r3, [sp, #20]
 8004628:	9306      	str	r3, [sp, #24]
  htim5.Instance = TIM5;
 800462a:	4830      	ldr	r0, [pc, #192]	; (80046ec <MX_TIM5_Init+0xe4>)
 800462c:	4a30      	ldr	r2, [pc, #192]	; (80046f0 <MX_TIM5_Init+0xe8>)
 800462e:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 10;
 8004630:	220a      	movs	r2, #10
 8004632:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004634:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 10000;
 8004636:	f242 7210 	movw	r2, #10000	; 0x2710
 800463a:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800463c:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800463e:	2380      	movs	r3, #128	; 0x80
 8004640:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004642:	f005 fb45 	bl	8009cd0 <HAL_TIM_Base_Init>
 8004646:	2800      	cmp	r0, #0
 8004648:	d13a      	bne.n	80046c0 <MX_TIM5_Init+0xb8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800464a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800464e:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004650:	a90a      	add	r1, sp, #40	; 0x28
 8004652:	4826      	ldr	r0, [pc, #152]	; (80046ec <MX_TIM5_Init+0xe4>)
 8004654:	f005 fc94 	bl	8009f80 <HAL_TIM_ConfigClockSource>
 8004658:	2800      	cmp	r0, #0
 800465a:	d134      	bne.n	80046c6 <MX_TIM5_Init+0xbe>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800465c:	4823      	ldr	r0, [pc, #140]	; (80046ec <MX_TIM5_Init+0xe4>)
 800465e:	f005 fb67 	bl	8009d30 <HAL_TIM_PWM_Init>
 8004662:	2800      	cmp	r0, #0
 8004664:	d132      	bne.n	80046cc <MX_TIM5_Init+0xc4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004666:	2300      	movs	r3, #0
 8004668:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800466a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800466c:	a907      	add	r1, sp, #28
 800466e:	481f      	ldr	r0, [pc, #124]	; (80046ec <MX_TIM5_Init+0xe4>)
 8004670:	f005 fd30 	bl	800a0d4 <HAL_TIMEx_MasterConfigSynchronization>
 8004674:	bb68      	cbnz	r0, 80046d2 <MX_TIM5_Init+0xca>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004676:	2360      	movs	r3, #96	; 0x60
 8004678:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 200;
 800467a:	23c8      	movs	r3, #200	; 0xc8
 800467c:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800467e:	2300      	movs	r3, #0
 8004680:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004682:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004684:	2204      	movs	r2, #4
 8004686:	4669      	mov	r1, sp
 8004688:	4818      	ldr	r0, [pc, #96]	; (80046ec <MX_TIM5_Init+0xe4>)
 800468a:	f005 fbcf 	bl	8009e2c <HAL_TIM_PWM_ConfigChannel>
 800468e:	bb18      	cbnz	r0, 80046d8 <MX_TIM5_Init+0xd0>
  sConfigOC.Pulse = 400;
 8004690:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004694:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004696:	2208      	movs	r2, #8
 8004698:	4669      	mov	r1, sp
 800469a:	4814      	ldr	r0, [pc, #80]	; (80046ec <MX_TIM5_Init+0xe4>)
 800469c:	f005 fbc6 	bl	8009e2c <HAL_TIM_PWM_ConfigChannel>
 80046a0:	b9e8      	cbnz	r0, 80046de <MX_TIM5_Init+0xd6>
  sConfigOC.Pulse = 600;
 80046a2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80046a6:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80046a8:	220c      	movs	r2, #12
 80046aa:	4669      	mov	r1, sp
 80046ac:	480f      	ldr	r0, [pc, #60]	; (80046ec <MX_TIM5_Init+0xe4>)
 80046ae:	f005 fbbd 	bl	8009e2c <HAL_TIM_PWM_ConfigChannel>
 80046b2:	b9b8      	cbnz	r0, 80046e4 <MX_TIM5_Init+0xdc>
  HAL_TIM_MspPostInit(&htim5);
 80046b4:	480d      	ldr	r0, [pc, #52]	; (80046ec <MX_TIM5_Init+0xe4>)
 80046b6:	f7ff ff29 	bl	800450c <HAL_TIM_MspPostInit>
}
 80046ba:	b00f      	add	sp, #60	; 0x3c
 80046bc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80046c0:	f7fd fc5a 	bl	8001f78 <Error_Handler>
 80046c4:	e7c1      	b.n	800464a <MX_TIM5_Init+0x42>
    Error_Handler();
 80046c6:	f7fd fc57 	bl	8001f78 <Error_Handler>
 80046ca:	e7c7      	b.n	800465c <MX_TIM5_Init+0x54>
    Error_Handler();
 80046cc:	f7fd fc54 	bl	8001f78 <Error_Handler>
 80046d0:	e7c9      	b.n	8004666 <MX_TIM5_Init+0x5e>
    Error_Handler();
 80046d2:	f7fd fc51 	bl	8001f78 <Error_Handler>
 80046d6:	e7ce      	b.n	8004676 <MX_TIM5_Init+0x6e>
    Error_Handler();
 80046d8:	f7fd fc4e 	bl	8001f78 <Error_Handler>
 80046dc:	e7d8      	b.n	8004690 <MX_TIM5_Init+0x88>
    Error_Handler();
 80046de:	f7fd fc4b 	bl	8001f78 <Error_Handler>
 80046e2:	e7de      	b.n	80046a2 <MX_TIM5_Init+0x9a>
    Error_Handler();
 80046e4:	f7fd fc48 	bl	8001f78 <Error_Handler>
 80046e8:	e7e4      	b.n	80046b4 <MX_TIM5_Init+0xac>
 80046ea:	bf00      	nop
 80046ec:	200122c4 	.word	0x200122c4
 80046f0:	40000c00 	.word	0x40000c00

080046f4 <MX_TIM8_Init>:
{
 80046f4:	b510      	push	{r4, lr}
 80046f6:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046f8:	2400      	movs	r4, #0
 80046fa:	9418      	str	r4, [sp, #96]	; 0x60
 80046fc:	9419      	str	r4, [sp, #100]	; 0x64
 80046fe:	941a      	str	r4, [sp, #104]	; 0x68
 8004700:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004702:	9415      	str	r4, [sp, #84]	; 0x54
 8004704:	9416      	str	r4, [sp, #88]	; 0x58
 8004706:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004708:	940e      	str	r4, [sp, #56]	; 0x38
 800470a:	940f      	str	r4, [sp, #60]	; 0x3c
 800470c:	9410      	str	r4, [sp, #64]	; 0x40
 800470e:	9411      	str	r4, [sp, #68]	; 0x44
 8004710:	9412      	str	r4, [sp, #72]	; 0x48
 8004712:	9413      	str	r4, [sp, #76]	; 0x4c
 8004714:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004716:	2234      	movs	r2, #52	; 0x34
 8004718:	4621      	mov	r1, r4
 800471a:	a801      	add	r0, sp, #4
 800471c:	f00a f928 	bl	800e970 <memset>
  htim8.Instance = TIM8;
 8004720:	4846      	ldr	r0, [pc, #280]	; (800483c <MX_TIM8_Init+0x148>)
 8004722:	4b47      	ldr	r3, [pc, #284]	; (8004840 <MX_TIM8_Init+0x14c>)
 8004724:	6003      	str	r3, [r0, #0]
  htim8.Init.Prescaler = 0;
 8004726:	6044      	str	r4, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004728:	6084      	str	r4, [r0, #8]
  htim8.Init.Period = 65535;
 800472a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800472e:	60c3      	str	r3, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004730:	6104      	str	r4, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 8004732:	6144      	str	r4, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004734:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004736:	f005 facb 	bl	8009cd0 <HAL_TIM_Base_Init>
 800473a:	2800      	cmp	r0, #0
 800473c:	d162      	bne.n	8004804 <MX_TIM8_Init+0x110>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800473e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004742:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004744:	a918      	add	r1, sp, #96	; 0x60
 8004746:	483d      	ldr	r0, [pc, #244]	; (800483c <MX_TIM8_Init+0x148>)
 8004748:	f005 fc1a 	bl	8009f80 <HAL_TIM_ConfigClockSource>
 800474c:	2800      	cmp	r0, #0
 800474e:	d15c      	bne.n	800480a <MX_TIM8_Init+0x116>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004750:	483a      	ldr	r0, [pc, #232]	; (800483c <MX_TIM8_Init+0x148>)
 8004752:	f005 faed 	bl	8009d30 <HAL_TIM_PWM_Init>
 8004756:	2800      	cmp	r0, #0
 8004758:	d15a      	bne.n	8004810 <MX_TIM8_Init+0x11c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800475a:	2300      	movs	r3, #0
 800475c:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800475e:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004760:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004762:	a915      	add	r1, sp, #84	; 0x54
 8004764:	4835      	ldr	r0, [pc, #212]	; (800483c <MX_TIM8_Init+0x148>)
 8004766:	f005 fcb5 	bl	800a0d4 <HAL_TIMEx_MasterConfigSynchronization>
 800476a:	2800      	cmp	r0, #0
 800476c:	d153      	bne.n	8004816 <MX_TIM8_Init+0x122>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800476e:	2360      	movs	r3, #96	; 0x60
 8004770:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 1000;
 8004772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004776:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004778:	2200      	movs	r2, #0
 800477a:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800477c:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800477e:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004780:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004782:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004784:	a90e      	add	r1, sp, #56	; 0x38
 8004786:	482d      	ldr	r0, [pc, #180]	; (800483c <MX_TIM8_Init+0x148>)
 8004788:	f005 fb50 	bl	8009e2c <HAL_TIM_PWM_ConfigChannel>
 800478c:	2800      	cmp	r0, #0
 800478e:	d145      	bne.n	800481c <MX_TIM8_Init+0x128>
  sConfigOC.Pulse = 2000;
 8004790:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004794:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004796:	2204      	movs	r2, #4
 8004798:	a90e      	add	r1, sp, #56	; 0x38
 800479a:	4828      	ldr	r0, [pc, #160]	; (800483c <MX_TIM8_Init+0x148>)
 800479c:	f005 fb46 	bl	8009e2c <HAL_TIM_PWM_ConfigChannel>
 80047a0:	2800      	cmp	r0, #0
 80047a2:	d13e      	bne.n	8004822 <MX_TIM8_Init+0x12e>
  sConfigOC.Pulse = 4000;
 80047a4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80047a8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80047aa:	2208      	movs	r2, #8
 80047ac:	a90e      	add	r1, sp, #56	; 0x38
 80047ae:	4823      	ldr	r0, [pc, #140]	; (800483c <MX_TIM8_Init+0x148>)
 80047b0:	f005 fb3c 	bl	8009e2c <HAL_TIM_PWM_ConfigChannel>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	d137      	bne.n	8004828 <MX_TIM8_Init+0x134>
  sConfigOC.Pulse = 8000;
 80047b8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80047bc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80047be:	220c      	movs	r2, #12
 80047c0:	a90e      	add	r1, sp, #56	; 0x38
 80047c2:	481e      	ldr	r0, [pc, #120]	; (800483c <MX_TIM8_Init+0x148>)
 80047c4:	f005 fb32 	bl	8009e2c <HAL_TIM_PWM_ConfigChannel>
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d130      	bne.n	800482e <MX_TIM8_Init+0x13a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80047cc:	2300      	movs	r3, #0
 80047ce:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80047d0:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80047d2:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80047d4:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80047d6:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80047d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047dc:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80047de:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80047e0:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80047e2:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80047e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047e8:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80047ea:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80047ec:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80047ee:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80047f0:	a901      	add	r1, sp, #4
 80047f2:	4812      	ldr	r0, [pc, #72]	; (800483c <MX_TIM8_Init+0x148>)
 80047f4:	f005 fcc4 	bl	800a180 <HAL_TIMEx_ConfigBreakDeadTime>
 80047f8:	b9e0      	cbnz	r0, 8004834 <MX_TIM8_Init+0x140>
  HAL_TIM_MspPostInit(&htim8);
 80047fa:	4810      	ldr	r0, [pc, #64]	; (800483c <MX_TIM8_Init+0x148>)
 80047fc:	f7ff fe86 	bl	800450c <HAL_TIM_MspPostInit>
}
 8004800:	b01c      	add	sp, #112	; 0x70
 8004802:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004804:	f7fd fbb8 	bl	8001f78 <Error_Handler>
 8004808:	e799      	b.n	800473e <MX_TIM8_Init+0x4a>
    Error_Handler();
 800480a:	f7fd fbb5 	bl	8001f78 <Error_Handler>
 800480e:	e79f      	b.n	8004750 <MX_TIM8_Init+0x5c>
    Error_Handler();
 8004810:	f7fd fbb2 	bl	8001f78 <Error_Handler>
 8004814:	e7a1      	b.n	800475a <MX_TIM8_Init+0x66>
    Error_Handler();
 8004816:	f7fd fbaf 	bl	8001f78 <Error_Handler>
 800481a:	e7a8      	b.n	800476e <MX_TIM8_Init+0x7a>
    Error_Handler();
 800481c:	f7fd fbac 	bl	8001f78 <Error_Handler>
 8004820:	e7b6      	b.n	8004790 <MX_TIM8_Init+0x9c>
    Error_Handler();
 8004822:	f7fd fba9 	bl	8001f78 <Error_Handler>
 8004826:	e7bd      	b.n	80047a4 <MX_TIM8_Init+0xb0>
    Error_Handler();
 8004828:	f7fd fba6 	bl	8001f78 <Error_Handler>
 800482c:	e7c4      	b.n	80047b8 <MX_TIM8_Init+0xc4>
    Error_Handler();
 800482e:	f7fd fba3 	bl	8001f78 <Error_Handler>
 8004832:	e7cb      	b.n	80047cc <MX_TIM8_Init+0xd8>
    Error_Handler();
 8004834:	f7fd fba0 	bl	8001f78 <Error_Handler>
 8004838:	e7df      	b.n	80047fa <MX_TIM8_Init+0x106>
 800483a:	bf00      	nop
 800483c:	20012310 	.word	0x20012310
 8004840:	40013400 	.word	0x40013400

08004844 <MX_TIM15_Init>:
{
 8004844:	b510      	push	{r4, lr}
 8004846:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004848:	2400      	movs	r4, #0
 800484a:	9418      	str	r4, [sp, #96]	; 0x60
 800484c:	9419      	str	r4, [sp, #100]	; 0x64
 800484e:	941a      	str	r4, [sp, #104]	; 0x68
 8004850:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004852:	9415      	str	r4, [sp, #84]	; 0x54
 8004854:	9416      	str	r4, [sp, #88]	; 0x58
 8004856:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004858:	940e      	str	r4, [sp, #56]	; 0x38
 800485a:	940f      	str	r4, [sp, #60]	; 0x3c
 800485c:	9410      	str	r4, [sp, #64]	; 0x40
 800485e:	9411      	str	r4, [sp, #68]	; 0x44
 8004860:	9412      	str	r4, [sp, #72]	; 0x48
 8004862:	9413      	str	r4, [sp, #76]	; 0x4c
 8004864:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004866:	2234      	movs	r2, #52	; 0x34
 8004868:	4621      	mov	r1, r4
 800486a:	a801      	add	r0, sp, #4
 800486c:	f00a f880 	bl	800e970 <memset>
  htim15.Instance = TIM15;
 8004870:	482e      	ldr	r0, [pc, #184]	; (800492c <MX_TIM15_Init+0xe8>)
 8004872:	4b2f      	ldr	r3, [pc, #188]	; (8004930 <MX_TIM15_Init+0xec>)
 8004874:	6003      	str	r3, [r0, #0]
  htim15.Init.Prescaler = 0;
 8004876:	6044      	str	r4, [r0, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004878:	6084      	str	r4, [r0, #8]
  htim15.Init.Period = 32768;
 800487a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800487e:	60c3      	str	r3, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004880:	6104      	str	r4, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 8004882:	6144      	str	r4, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004884:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004886:	f005 fa23 	bl	8009cd0 <HAL_TIM_Base_Init>
 800488a:	2800      	cmp	r0, #0
 800488c:	d13c      	bne.n	8004908 <MX_TIM15_Init+0xc4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800488e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004892:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004894:	a918      	add	r1, sp, #96	; 0x60
 8004896:	4825      	ldr	r0, [pc, #148]	; (800492c <MX_TIM15_Init+0xe8>)
 8004898:	f005 fb72 	bl	8009f80 <HAL_TIM_ConfigClockSource>
 800489c:	2800      	cmp	r0, #0
 800489e:	d136      	bne.n	800490e <MX_TIM15_Init+0xca>
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80048a0:	4822      	ldr	r0, [pc, #136]	; (800492c <MX_TIM15_Init+0xe8>)
 80048a2:	f005 fa45 	bl	8009d30 <HAL_TIM_PWM_Init>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	d134      	bne.n	8004914 <MX_TIM15_Init+0xd0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048aa:	2300      	movs	r3, #0
 80048ac:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048ae:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80048b0:	a915      	add	r1, sp, #84	; 0x54
 80048b2:	481e      	ldr	r0, [pc, #120]	; (800492c <MX_TIM15_Init+0xe8>)
 80048b4:	f005 fc0e 	bl	800a0d4 <HAL_TIMEx_MasterConfigSynchronization>
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d12e      	bne.n	800491a <MX_TIM15_Init+0xd6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048bc:	2360      	movs	r3, #96	; 0x60
 80048be:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 16000;
 80048c0:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80048c4:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048c6:	2300      	movs	r3, #0
 80048c8:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80048ca:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048cc:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80048ce:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80048d0:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80048d2:	2204      	movs	r2, #4
 80048d4:	a90e      	add	r1, sp, #56	; 0x38
 80048d6:	4815      	ldr	r0, [pc, #84]	; (800492c <MX_TIM15_Init+0xe8>)
 80048d8:	f005 faa8 	bl	8009e2c <HAL_TIM_PWM_ConfigChannel>
 80048dc:	bb00      	cbnz	r0, 8004920 <MX_TIM15_Init+0xdc>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80048de:	2300      	movs	r3, #0
 80048e0:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80048e2:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80048e4:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80048e6:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80048e8:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80048ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048ee:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80048f0:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80048f2:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80048f4:	a901      	add	r1, sp, #4
 80048f6:	480d      	ldr	r0, [pc, #52]	; (800492c <MX_TIM15_Init+0xe8>)
 80048f8:	f005 fc42 	bl	800a180 <HAL_TIMEx_ConfigBreakDeadTime>
 80048fc:	b998      	cbnz	r0, 8004926 <MX_TIM15_Init+0xe2>
  HAL_TIM_MspPostInit(&htim15);
 80048fe:	480b      	ldr	r0, [pc, #44]	; (800492c <MX_TIM15_Init+0xe8>)
 8004900:	f7ff fe04 	bl	800450c <HAL_TIM_MspPostInit>
}
 8004904:	b01c      	add	sp, #112	; 0x70
 8004906:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004908:	f7fd fb36 	bl	8001f78 <Error_Handler>
 800490c:	e7bf      	b.n	800488e <MX_TIM15_Init+0x4a>
    Error_Handler();
 800490e:	f7fd fb33 	bl	8001f78 <Error_Handler>
 8004912:	e7c5      	b.n	80048a0 <MX_TIM15_Init+0x5c>
    Error_Handler();
 8004914:	f7fd fb30 	bl	8001f78 <Error_Handler>
 8004918:	e7c7      	b.n	80048aa <MX_TIM15_Init+0x66>
    Error_Handler();
 800491a:	f7fd fb2d 	bl	8001f78 <Error_Handler>
 800491e:	e7cd      	b.n	80048bc <MX_TIM15_Init+0x78>
    Error_Handler();
 8004920:	f7fd fb2a 	bl	8001f78 <Error_Handler>
 8004924:	e7db      	b.n	80048de <MX_TIM15_Init+0x9a>
    Error_Handler();
 8004926:	f7fd fb27 	bl	8001f78 <Error_Handler>
 800492a:	e7e8      	b.n	80048fe <MX_TIM15_Init+0xba>
 800492c:	2001222c 	.word	0x2001222c
 8004930:	40014000 	.word	0x40014000

08004934 <MX_TIM20_Init>:
{
 8004934:	b510      	push	{r4, lr}
 8004936:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004938:	2400      	movs	r4, #0
 800493a:	9418      	str	r4, [sp, #96]	; 0x60
 800493c:	9419      	str	r4, [sp, #100]	; 0x64
 800493e:	941a      	str	r4, [sp, #104]	; 0x68
 8004940:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004942:	9415      	str	r4, [sp, #84]	; 0x54
 8004944:	9416      	str	r4, [sp, #88]	; 0x58
 8004946:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004948:	940e      	str	r4, [sp, #56]	; 0x38
 800494a:	940f      	str	r4, [sp, #60]	; 0x3c
 800494c:	9410      	str	r4, [sp, #64]	; 0x40
 800494e:	9411      	str	r4, [sp, #68]	; 0x44
 8004950:	9412      	str	r4, [sp, #72]	; 0x48
 8004952:	9413      	str	r4, [sp, #76]	; 0x4c
 8004954:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004956:	2234      	movs	r2, #52	; 0x34
 8004958:	4621      	mov	r1, r4
 800495a:	a801      	add	r0, sp, #4
 800495c:	f00a f808 	bl	800e970 <memset>
  htim20.Instance = TIM20;
 8004960:	4846      	ldr	r0, [pc, #280]	; (8004a7c <MX_TIM20_Init+0x148>)
 8004962:	4b47      	ldr	r3, [pc, #284]	; (8004a80 <MX_TIM20_Init+0x14c>)
 8004964:	6003      	str	r3, [r0, #0]
  htim20.Init.Prescaler = 0;
 8004966:	6044      	str	r4, [r0, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004968:	6084      	str	r4, [r0, #8]
  htim20.Init.Period = 16000;
 800496a:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800496e:	60c3      	str	r3, [r0, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004970:	6104      	str	r4, [r0, #16]
  htim20.Init.RepetitionCounter = 0;
 8004972:	6144      	str	r4, [r0, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004974:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8004976:	f005 f9ab 	bl	8009cd0 <HAL_TIM_Base_Init>
 800497a:	2800      	cmp	r0, #0
 800497c:	d162      	bne.n	8004a44 <MX_TIM20_Init+0x110>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800497e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004982:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8004984:	a918      	add	r1, sp, #96	; 0x60
 8004986:	483d      	ldr	r0, [pc, #244]	; (8004a7c <MX_TIM20_Init+0x148>)
 8004988:	f005 fafa 	bl	8009f80 <HAL_TIM_ConfigClockSource>
 800498c:	2800      	cmp	r0, #0
 800498e:	d15c      	bne.n	8004a4a <MX_TIM20_Init+0x116>
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8004990:	483a      	ldr	r0, [pc, #232]	; (8004a7c <MX_TIM20_Init+0x148>)
 8004992:	f005 f9cd 	bl	8009d30 <HAL_TIM_PWM_Init>
 8004996:	2800      	cmp	r0, #0
 8004998:	d15a      	bne.n	8004a50 <MX_TIM20_Init+0x11c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800499a:	2300      	movs	r3, #0
 800499c:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800499e:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049a0:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80049a2:	a915      	add	r1, sp, #84	; 0x54
 80049a4:	4835      	ldr	r0, [pc, #212]	; (8004a7c <MX_TIM20_Init+0x148>)
 80049a6:	f005 fb95 	bl	800a0d4 <HAL_TIMEx_MasterConfigSynchronization>
 80049aa:	2800      	cmp	r0, #0
 80049ac:	d153      	bne.n	8004a56 <MX_TIM20_Init+0x122>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049ae:	2360      	movs	r3, #96	; 0x60
 80049b0:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 8000;
 80049b2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80049b6:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049b8:	2200      	movs	r2, #0
 80049ba:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80049bc:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049be:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80049c0:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80049c2:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049c4:	a90e      	add	r1, sp, #56	; 0x38
 80049c6:	482d      	ldr	r0, [pc, #180]	; (8004a7c <MX_TIM20_Init+0x148>)
 80049c8:	f005 fa30 	bl	8009e2c <HAL_TIM_PWM_ConfigChannel>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d145      	bne.n	8004a5c <MX_TIM20_Init+0x128>
  sConfigOC.Pulse = 10000;
 80049d0:	f242 7310 	movw	r3, #10000	; 0x2710
 80049d4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80049d6:	2204      	movs	r2, #4
 80049d8:	a90e      	add	r1, sp, #56	; 0x38
 80049da:	4828      	ldr	r0, [pc, #160]	; (8004a7c <MX_TIM20_Init+0x148>)
 80049dc:	f005 fa26 	bl	8009e2c <HAL_TIM_PWM_ConfigChannel>
 80049e0:	2800      	cmp	r0, #0
 80049e2:	d13e      	bne.n	8004a62 <MX_TIM20_Init+0x12e>
  sConfigOC.Pulse = 12000;
 80049e4:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80049e8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80049ea:	2208      	movs	r2, #8
 80049ec:	a90e      	add	r1, sp, #56	; 0x38
 80049ee:	4823      	ldr	r0, [pc, #140]	; (8004a7c <MX_TIM20_Init+0x148>)
 80049f0:	f005 fa1c 	bl	8009e2c <HAL_TIM_PWM_ConfigChannel>
 80049f4:	2800      	cmp	r0, #0
 80049f6:	d137      	bne.n	8004a68 <MX_TIM20_Init+0x134>
  sConfigOC.Pulse = 15000;
 80049f8:	f643 2398 	movw	r3, #15000	; 0x3a98
 80049fc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80049fe:	220c      	movs	r2, #12
 8004a00:	a90e      	add	r1, sp, #56	; 0x38
 8004a02:	481e      	ldr	r0, [pc, #120]	; (8004a7c <MX_TIM20_Init+0x148>)
 8004a04:	f005 fa12 	bl	8009e2c <HAL_TIM_PWM_ConfigChannel>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d130      	bne.n	8004a6e <MX_TIM20_Init+0x13a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a10:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004a12:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004a14:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004a16:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004a18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a1c:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004a1e:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004a20:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004a22:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004a24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a28:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004a2a:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004a2c:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004a2e:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8004a30:	a901      	add	r1, sp, #4
 8004a32:	4812      	ldr	r0, [pc, #72]	; (8004a7c <MX_TIM20_Init+0x148>)
 8004a34:	f005 fba4 	bl	800a180 <HAL_TIMEx_ConfigBreakDeadTime>
 8004a38:	b9e0      	cbnz	r0, 8004a74 <MX_TIM20_Init+0x140>
  HAL_TIM_MspPostInit(&htim20);
 8004a3a:	4810      	ldr	r0, [pc, #64]	; (8004a7c <MX_TIM20_Init+0x148>)
 8004a3c:	f7ff fd66 	bl	800450c <HAL_TIM_MspPostInit>
}
 8004a40:	b01c      	add	sp, #112	; 0x70
 8004a42:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004a44:	f7fd fa98 	bl	8001f78 <Error_Handler>
 8004a48:	e799      	b.n	800497e <MX_TIM20_Init+0x4a>
    Error_Handler();
 8004a4a:	f7fd fa95 	bl	8001f78 <Error_Handler>
 8004a4e:	e79f      	b.n	8004990 <MX_TIM20_Init+0x5c>
    Error_Handler();
 8004a50:	f7fd fa92 	bl	8001f78 <Error_Handler>
 8004a54:	e7a1      	b.n	800499a <MX_TIM20_Init+0x66>
    Error_Handler();
 8004a56:	f7fd fa8f 	bl	8001f78 <Error_Handler>
 8004a5a:	e7a8      	b.n	80049ae <MX_TIM20_Init+0x7a>
    Error_Handler();
 8004a5c:	f7fd fa8c 	bl	8001f78 <Error_Handler>
 8004a60:	e7b6      	b.n	80049d0 <MX_TIM20_Init+0x9c>
    Error_Handler();
 8004a62:	f7fd fa89 	bl	8001f78 <Error_Handler>
 8004a66:	e7bd      	b.n	80049e4 <MX_TIM20_Init+0xb0>
    Error_Handler();
 8004a68:	f7fd fa86 	bl	8001f78 <Error_Handler>
 8004a6c:	e7c4      	b.n	80049f8 <MX_TIM20_Init+0xc4>
    Error_Handler();
 8004a6e:	f7fd fa83 	bl	8001f78 <Error_Handler>
 8004a72:	e7cb      	b.n	8004a0c <MX_TIM20_Init+0xd8>
    Error_Handler();
 8004a74:	f7fd fa80 	bl	8001f78 <Error_Handler>
 8004a78:	e7df      	b.n	8004a3a <MX_TIM20_Init+0x106>
 8004a7a:	bf00      	nop
 8004a7c:	20012278 	.word	0x20012278
 8004a80:	40015000 	.word	0x40015000

08004a84 <MX_UART4_Init>:
UART_HandleTypeDef huart3;


/* UART4 init function */
void MX_UART4_Init(void)
{
 8004a84:	b508      	push	{r3, lr}
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004a86:	4817      	ldr	r0, [pc, #92]	; (8004ae4 <MX_UART4_Init+0x60>)
 8004a88:	4b17      	ldr	r3, [pc, #92]	; (8004ae8 <MX_UART4_Init+0x64>)
 8004a8a:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8004a8c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004a90:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004a92:	2300      	movs	r3, #0
 8004a94:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004a96:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004a98:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004a9a:	220c      	movs	r2, #12
 8004a9c:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a9e:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004aa0:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004aa2:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004aa4:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004aa6:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004aa8:	f005 fea5 	bl	800a7f6 <HAL_UART_Init>
 8004aac:	b970      	cbnz	r0, 8004acc <MX_UART4_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004aae:	2100      	movs	r1, #0
 8004ab0:	480c      	ldr	r0, [pc, #48]	; (8004ae4 <MX_UART4_Init+0x60>)
 8004ab2:	f005 ff18 	bl	800a8e6 <HAL_UARTEx_SetTxFifoThreshold>
 8004ab6:	b960      	cbnz	r0, 8004ad2 <MX_UART4_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ab8:	2100      	movs	r1, #0
 8004aba:	480a      	ldr	r0, [pc, #40]	; (8004ae4 <MX_UART4_Init+0x60>)
 8004abc:	f005 ff38 	bl	800a930 <HAL_UARTEx_SetRxFifoThreshold>
 8004ac0:	b950      	cbnz	r0, 8004ad8 <MX_UART4_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8004ac2:	4808      	ldr	r0, [pc, #32]	; (8004ae4 <MX_UART4_Init+0x60>)
 8004ac4:	f005 fef0 	bl	800a8a8 <HAL_UARTEx_DisableFifoMode>
 8004ac8:	b948      	cbnz	r0, 8004ade <MX_UART4_Init+0x5a>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004aca:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004acc:	f7fd fa54 	bl	8001f78 <Error_Handler>
 8004ad0:	e7ed      	b.n	8004aae <MX_UART4_Init+0x2a>
    Error_Handler();
 8004ad2:	f7fd fa51 	bl	8001f78 <Error_Handler>
 8004ad6:	e7ef      	b.n	8004ab8 <MX_UART4_Init+0x34>
    Error_Handler();
 8004ad8:	f7fd fa4e 	bl	8001f78 <Error_Handler>
 8004adc:	e7f1      	b.n	8004ac2 <MX_UART4_Init+0x3e>
    Error_Handler();
 8004ade:	f7fd fa4b 	bl	8001f78 <Error_Handler>
}
 8004ae2:	e7f2      	b.n	8004aca <MX_UART4_Init+0x46>
 8004ae4:	2001247c 	.word	0x2001247c
 8004ae8:	40004c00 	.word	0x40004c00

08004aec <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8004aec:	b508      	push	{r3, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004aee:	4817      	ldr	r0, [pc, #92]	; (8004b4c <MX_UART5_Init+0x60>)
 8004af0:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <MX_UART5_Init+0x64>)
 8004af2:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 8004af4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004af8:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004afa:	2300      	movs	r3, #0
 8004afc:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004afe:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004b00:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004b02:	220c      	movs	r2, #12
 8004b04:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b06:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b08:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b0a:	6203      	str	r3, [r0, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004b0c:	6243      	str	r3, [r0, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b0e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004b10:	f005 fe71 	bl	800a7f6 <HAL_UART_Init>
 8004b14:	b970      	cbnz	r0, 8004b34 <MX_UART5_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b16:	2100      	movs	r1, #0
 8004b18:	480c      	ldr	r0, [pc, #48]	; (8004b4c <MX_UART5_Init+0x60>)
 8004b1a:	f005 fee4 	bl	800a8e6 <HAL_UARTEx_SetTxFifoThreshold>
 8004b1e:	b960      	cbnz	r0, 8004b3a <MX_UART5_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b20:	2100      	movs	r1, #0
 8004b22:	480a      	ldr	r0, [pc, #40]	; (8004b4c <MX_UART5_Init+0x60>)
 8004b24:	f005 ff04 	bl	800a930 <HAL_UARTEx_SetRxFifoThreshold>
 8004b28:	b950      	cbnz	r0, 8004b40 <MX_UART5_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8004b2a:	4808      	ldr	r0, [pc, #32]	; (8004b4c <MX_UART5_Init+0x60>)
 8004b2c:	f005 febc 	bl	800a8a8 <HAL_UARTEx_DisableFifoMode>
 8004b30:	b948      	cbnz	r0, 8004b46 <MX_UART5_Init+0x5a>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004b32:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004b34:	f7fd fa20 	bl	8001f78 <Error_Handler>
 8004b38:	e7ed      	b.n	8004b16 <MX_UART5_Init+0x2a>
    Error_Handler();
 8004b3a:	f7fd fa1d 	bl	8001f78 <Error_Handler>
 8004b3e:	e7ef      	b.n	8004b20 <MX_UART5_Init+0x34>
    Error_Handler();
 8004b40:	f7fd fa1a 	bl	8001f78 <Error_Handler>
 8004b44:	e7f1      	b.n	8004b2a <MX_UART5_Init+0x3e>
    Error_Handler();
 8004b46:	f7fd fa17 	bl	8001f78 <Error_Handler>
}
 8004b4a:	e7f2      	b.n	8004b32 <MX_UART5_Init+0x46>
 8004b4c:	2001250c 	.word	0x2001250c
 8004b50:	40005000 	.word	0x40005000

08004b54 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004b54:	b570      	push	{r4, r5, r6, lr}
 8004b56:	b0a6      	sub	sp, #152	; 0x98

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004b58:	2220      	movs	r2, #32
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	a81e      	add	r0, sp, #120	; 0x78
 8004b5e:	f009 ff07 	bl	800e970 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b62:	2100      	movs	r1, #0
 8004b64:	9118      	str	r1, [sp, #96]	; 0x60
 8004b66:	9119      	str	r1, [sp, #100]	; 0x64
 8004b68:	911a      	str	r1, [sp, #104]	; 0x68
 8004b6a:	911b      	str	r1, [sp, #108]	; 0x6c
 8004b6c:	911c      	str	r1, [sp, #112]	; 0x70
 8004b6e:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b70:	2254      	movs	r2, #84	; 0x54
 8004b72:	a803      	add	r0, sp, #12
 8004b74:	f009 fefc 	bl	800e970 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	9303      	str	r3, [sp, #12]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b7c:	a803      	add	r0, sp, #12
 8004b7e:	f004 fc43 	bl	8009408 <HAL_RCCEx_PeriphCLKConfig>
 8004b82:	2800      	cmp	r0, #0
 8004b84:	f040 80d2 	bne.w	8004d2c <MX_USART1_UART_Init+0x1d8>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004b88:	4b6a      	ldr	r3, [pc, #424]	; (8004d34 <MX_USART1_UART_Init+0x1e0>)
 8004b8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b90:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004b92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b94:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004b98:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8004b9a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004b9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004ba4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ba6:	f002 0201 	and.w	r2, r2, #1
 8004baa:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8004bac:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bb4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004bbe:	9b00      	ldr	r3, [sp, #0]
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOG);
  /**USART1 GPIO Configuration
  PA10   ------> USART1_RX
  PG9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8004bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bc4:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004bc6:	2602      	movs	r6, #2
 8004bc8:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004bca:	2400      	movs	r4, #0
 8004bcc:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004bce:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004bd0:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004bd2:	2507      	movs	r5, #7
 8004bd4:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bd6:	a918      	add	r1, sp, #96	; 0x60
 8004bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bdc:	f005 ff96 	bl	800ab0c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8004be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004be4:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004be6:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004be8:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004bea:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004bec:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004bee:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004bf0:	a918      	add	r1, sp, #96	; 0x60
 8004bf2:	4851      	ldr	r0, [pc, #324]	; (8004d38 <MX_USART1_UART_Init+0x1e4>)
 8004bf4:	f005 ff8a 	bl	800ab0c <LL_GPIO_Init>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8004bf8:	4b50      	ldr	r3, [pc, #320]	; (8004d3c <MX_USART1_UART_Init+0x1e8>)
 8004bfa:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8004bfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c02:	f042 0218 	orr.w	r2, r2, #24
 8004c06:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004c0a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c10:	f022 0210 	bic.w	r2, r2, #16
 8004c14:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8004c16:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c18:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004c1c:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8004c1e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c20:	f022 0220 	bic.w	r2, r2, #32
 8004c24:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8004c26:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c2c:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8004c2e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c34:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8004c36:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c3c:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8004c3e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c40:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c44:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8004c46:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8004c4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c4e:	f042 0219 	orr.w	r2, r2, #25
 8004c52:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004c56:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004c5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c5e:	f022 0210 	bic.w	r2, r2, #16
 8004c62:	f042 0210 	orr.w	r2, r2, #16
 8004c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8004c6a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004c6e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004c72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8004c76:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004c7a:	f022 0220 	bic.w	r2, r2, #32
 8004c7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8004c82:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8004c8e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004c92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8004c9a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004c9e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ca2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8004ca6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004caa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004cae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8004cb2:	941e      	str	r4, [sp, #120]	; 0x78
  USART_InitStruct.BaudRate = 115200;
 8004cb4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004cb8:	931f      	str	r3, [sp, #124]	; 0x7c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004cba:	9420      	str	r4, [sp, #128]	; 0x80
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004cbc:	9421      	str	r4, [sp, #132]	; 0x84
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004cbe:	9422      	str	r4, [sp, #136]	; 0x88
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004cc0:	230c      	movs	r3, #12
 8004cc2:	9323      	str	r3, [sp, #140]	; 0x8c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004cc4:	9424      	str	r4, [sp, #144]	; 0x90
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004cc6:	9425      	str	r4, [sp, #148]	; 0x94
  LL_USART_Init(USART1, &USART_InitStruct);
 8004cc8:	a91e      	add	r1, sp, #120	; 0x78
 8004cca:	481d      	ldr	r0, [pc, #116]	; (8004d40 <MX_USART1_UART_Init+0x1ec>)
 8004ccc:	f006 f934 	bl	800af38 <LL_USART_Init>
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8004cd0:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <MX_USART1_UART_Init+0x1f0>)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd2:	e853 2f00 	ldrex	r2, [r3]
 8004cd6:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cda:	e843 2100 	strex	r1, r2, [r3]
 8004cde:	2900      	cmp	r1, #0
 8004ce0:	d1f6      	bne.n	8004cd0 <MX_USART1_UART_Init+0x17c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce2:	e853 2f00 	ldrex	r2, [r3]
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8004ce6:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cea:	e843 2100 	strex	r1, r2, [r3]
 8004cee:	2900      	cmp	r1, #0
 8004cf0:	d1f7      	bne.n	8004ce2 <MX_USART1_UART_Init+0x18e>
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8004cf2:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <MX_USART1_UART_Init+0x1ec>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004cfa:	601a      	str	r2, [r3, #0]
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d02:	605a      	str	r2, [r3, #4]

  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d0a:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8004d14:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <MX_USART1_UART_Init+0x1ec>)
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004d1c:	d0fa      	beq.n	8004d14 <MX_USART1_UART_Init+0x1c0>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8004d1e:	4b08      	ldr	r3, [pc, #32]	; (8004d40 <MX_USART1_UART_Init+0x1ec>)
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004d26:	d0f5      	beq.n	8004d14 <MX_USART1_UART_Init+0x1c0>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004d28:	b026      	add	sp, #152	; 0x98
 8004d2a:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8004d2c:	f7fd f924 	bl	8001f78 <Error_Handler>
 8004d30:	e72a      	b.n	8004b88 <MX_USART1_UART_Init+0x34>
 8004d32:	bf00      	nop
 8004d34:	40021000 	.word	0x40021000
 8004d38:	48001800 	.word	0x48001800
 8004d3c:	40020000 	.word	0x40020000
 8004d40:	40013800 	.word	0x40013800
 8004d44:	40013808 	.word	0x40013808

08004d48 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004d48:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d4a:	4817      	ldr	r0, [pc, #92]	; (8004da8 <MX_USART2_UART_Init+0x60>)
 8004d4c:	4b17      	ldr	r3, [pc, #92]	; (8004dac <MX_USART2_UART_Init+0x64>)
 8004d4e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8004d50:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004d54:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d56:	2300      	movs	r3, #0
 8004d58:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d5a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d5c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d5e:	220c      	movs	r2, #12
 8004d60:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d62:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d64:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d66:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004d68:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d6a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d6c:	f005 fd43 	bl	800a7f6 <HAL_UART_Init>
 8004d70:	b970      	cbnz	r0, 8004d90 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004d72:	2100      	movs	r1, #0
 8004d74:	480c      	ldr	r0, [pc, #48]	; (8004da8 <MX_USART2_UART_Init+0x60>)
 8004d76:	f005 fdb6 	bl	800a8e6 <HAL_UARTEx_SetTxFifoThreshold>
 8004d7a:	b960      	cbnz	r0, 8004d96 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	480a      	ldr	r0, [pc, #40]	; (8004da8 <MX_USART2_UART_Init+0x60>)
 8004d80:	f005 fdd6 	bl	800a930 <HAL_UARTEx_SetRxFifoThreshold>
 8004d84:	b950      	cbnz	r0, 8004d9c <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004d86:	4808      	ldr	r0, [pc, #32]	; (8004da8 <MX_USART2_UART_Init+0x60>)
 8004d88:	f005 fd8e 	bl	800a8a8 <HAL_UARTEx_DisableFifoMode>
 8004d8c:	b948      	cbnz	r0, 8004da2 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004d8e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004d90:	f7fd f8f2 	bl	8001f78 <Error_Handler>
 8004d94:	e7ed      	b.n	8004d72 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8004d96:	f7fd f8ef 	bl	8001f78 <Error_Handler>
 8004d9a:	e7ef      	b.n	8004d7c <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8004d9c:	f7fd f8ec 	bl	8001f78 <Error_Handler>
 8004da0:	e7f1      	b.n	8004d86 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8004da2:	f7fd f8e9 	bl	8001f78 <Error_Handler>
}
 8004da6:	e7f2      	b.n	8004d8e <MX_USART2_UART_Init+0x46>
 8004da8:	2001235c 	.word	0x2001235c
 8004dac:	40004400 	.word	0x40004400

08004db0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004db0:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004db2:	4817      	ldr	r0, [pc, #92]	; (8004e10 <MX_USART3_UART_Init+0x60>)
 8004db4:	4b17      	ldr	r3, [pc, #92]	; (8004e14 <MX_USART3_UART_Init+0x64>)
 8004db6:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8004db8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004dbc:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004dc2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004dc4:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004dc6:	220c      	movs	r2, #12
 8004dc8:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dca:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dcc:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004dce:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004dd0:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004dd2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004dd4:	f005 fd0f 	bl	800a7f6 <HAL_UART_Init>
 8004dd8:	b970      	cbnz	r0, 8004df8 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004dda:	2100      	movs	r1, #0
 8004ddc:	480c      	ldr	r0, [pc, #48]	; (8004e10 <MX_USART3_UART_Init+0x60>)
 8004dde:	f005 fd82 	bl	800a8e6 <HAL_UARTEx_SetTxFifoThreshold>
 8004de2:	b960      	cbnz	r0, 8004dfe <MX_USART3_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004de4:	2100      	movs	r1, #0
 8004de6:	480a      	ldr	r0, [pc, #40]	; (8004e10 <MX_USART3_UART_Init+0x60>)
 8004de8:	f005 fda2 	bl	800a930 <HAL_UARTEx_SetRxFifoThreshold>
 8004dec:	b950      	cbnz	r0, 8004e04 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004dee:	4808      	ldr	r0, [pc, #32]	; (8004e10 <MX_USART3_UART_Init+0x60>)
 8004df0:	f005 fd5a 	bl	800a8a8 <HAL_UARTEx_DisableFifoMode>
 8004df4:	b948      	cbnz	r0, 8004e0a <MX_USART3_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004df6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004df8:	f7fd f8be 	bl	8001f78 <Error_Handler>
 8004dfc:	e7ed      	b.n	8004dda <MX_USART3_UART_Init+0x2a>
    Error_Handler();
 8004dfe:	f7fd f8bb 	bl	8001f78 <Error_Handler>
 8004e02:	e7ef      	b.n	8004de4 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 8004e04:	f7fd f8b8 	bl	8001f78 <Error_Handler>
 8004e08:	e7f1      	b.n	8004dee <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 8004e0a:	f7fd f8b5 	bl	8001f78 <Error_Handler>
}
 8004e0e:	e7f2      	b.n	8004df6 <MX_USART3_UART_Init+0x46>
 8004e10:	200123ec 	.word	0x200123ec
 8004e14:	40004800 	.word	0x40004800

08004e18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004e18:	b570      	push	{r4, r5, r6, lr}
 8004e1a:	b0a4      	sub	sp, #144	; 0x90
 8004e1c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e1e:	2100      	movs	r1, #0
 8004e20:	911f      	str	r1, [sp, #124]	; 0x7c
 8004e22:	9120      	str	r1, [sp, #128]	; 0x80
 8004e24:	9121      	str	r1, [sp, #132]	; 0x84
 8004e26:	9122      	str	r1, [sp, #136]	; 0x88
 8004e28:	9123      	str	r1, [sp, #140]	; 0x8c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e2a:	2254      	movs	r2, #84	; 0x54
 8004e2c:	a80a      	add	r0, sp, #40	; 0x28
 8004e2e:	f009 fd9f 	bl	800e970 <memset>
  if(uartHandle->Instance==UART4)
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	4a66      	ldr	r2, [pc, #408]	; (8004fd0 <HAL_UART_MspInit+0x1b8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00b      	beq.n	8004e52 <HAL_UART_MspInit+0x3a>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART5)
 8004e3a:	4a66      	ldr	r2, [pc, #408]	; (8004fd4 <HAL_UART_MspInit+0x1bc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d033      	beq.n	8004ea8 <HAL_UART_MspInit+0x90>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8004e40:	4a65      	ldr	r2, [pc, #404]	; (8004fd8 <HAL_UART_MspInit+0x1c0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d06f      	beq.n	8004f26 <HAL_UART_MspInit+0x10e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8004e46:	4a65      	ldr	r2, [pc, #404]	; (8004fdc <HAL_UART_MspInit+0x1c4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	f000 8096 	beq.w	8004f7a <HAL_UART_MspInit+0x162>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004e4e:	b024      	add	sp, #144	; 0x90
 8004e50:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004e52:	2308      	movs	r3, #8
 8004e54:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e56:	a80a      	add	r0, sp, #40	; 0x28
 8004e58:	f004 fad6 	bl	8009408 <HAL_RCCEx_PeriphCLKConfig>
 8004e5c:	bb08      	cbnz	r0, 8004ea2 <HAL_UART_MspInit+0x8a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8004e5e:	4b60      	ldr	r3, [pc, #384]	; (8004fe0 <HAL_UART_MspInit+0x1c8>)
 8004e60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e62:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004e66:	659a      	str	r2, [r3, #88]	; 0x58
 8004e68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e6a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8004e6e:	9201      	str	r2, [sp, #4]
 8004e70:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e74:	f042 0204 	orr.w	r2, r2, #4
 8004e78:	64da      	str	r2, [r3, #76]	; 0x4c
 8004e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	9302      	str	r3, [sp, #8]
 8004e82:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004e84:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e88:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e92:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8004e94:	2305      	movs	r3, #5
 8004e96:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e98:	a91f      	add	r1, sp, #124	; 0x7c
 8004e9a:	4852      	ldr	r0, [pc, #328]	; (8004fe4 <HAL_UART_MspInit+0x1cc>)
 8004e9c:	f002 f8a2 	bl	8006fe4 <HAL_GPIO_Init>
 8004ea0:	e7d5      	b.n	8004e4e <HAL_UART_MspInit+0x36>
      Error_Handler();
 8004ea2:	f7fd f869 	bl	8001f78 <Error_Handler>
 8004ea6:	e7da      	b.n	8004e5e <HAL_UART_MspInit+0x46>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004eac:	a80a      	add	r0, sp, #40	; 0x28
 8004eae:	f004 faab 	bl	8009408 <HAL_RCCEx_PeriphCLKConfig>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	d134      	bne.n	8004f20 <HAL_UART_MspInit+0x108>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004eb6:	4b4a      	ldr	r3, [pc, #296]	; (8004fe0 <HAL_UART_MspInit+0x1c8>)
 8004eb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004eba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004ebe:	659a      	str	r2, [r3, #88]	; 0x58
 8004ec0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ec2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004ec6:	9203      	str	r2, [sp, #12]
 8004ec8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ecc:	f042 0204 	orr.w	r2, r2, #4
 8004ed0:	64da      	str	r2, [r3, #76]	; 0x4c
 8004ed2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ed4:	f002 0204 	and.w	r2, r2, #4
 8004ed8:	9204      	str	r2, [sp, #16]
 8004eda:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004edc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ede:	f042 0208 	orr.w	r2, r2, #8
 8004ee2:	64da      	str	r2, [r3, #76]	; 0x4c
 8004ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	9305      	str	r3, [sp, #20]
 8004eec:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = LIN_TX_Pin;
 8004eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ef2:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef4:	2602      	movs	r6, #2
 8004ef6:	9620      	str	r6, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef8:	2400      	movs	r4, #0
 8004efa:	9421      	str	r4, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004efc:	9422      	str	r4, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8004efe:	2505      	movs	r5, #5
 8004f00:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(LIN_TX_GPIO_Port, &GPIO_InitStruct);
 8004f02:	a91f      	add	r1, sp, #124	; 0x7c
 8004f04:	4837      	ldr	r0, [pc, #220]	; (8004fe4 <HAL_UART_MspInit+0x1cc>)
 8004f06:	f002 f86d 	bl	8006fe4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIN_RX_Pin;
 8004f0a:	2304      	movs	r3, #4
 8004f0c:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f0e:	9620      	str	r6, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f10:	9421      	str	r4, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f12:	9422      	str	r4, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8004f14:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(LIN_RX_GPIO_Port, &GPIO_InitStruct);
 8004f16:	a91f      	add	r1, sp, #124	; 0x7c
 8004f18:	4833      	ldr	r0, [pc, #204]	; (8004fe8 <HAL_UART_MspInit+0x1d0>)
 8004f1a:	f002 f863 	bl	8006fe4 <HAL_GPIO_Init>
 8004f1e:	e796      	b.n	8004e4e <HAL_UART_MspInit+0x36>
      Error_Handler();
 8004f20:	f7fd f82a 	bl	8001f78 <Error_Handler>
 8004f24:	e7c7      	b.n	8004eb6 <HAL_UART_MspInit+0x9e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004f26:	2302      	movs	r3, #2
 8004f28:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f2a:	a80a      	add	r0, sp, #40	; 0x28
 8004f2c:	f004 fa6c 	bl	8009408 <HAL_RCCEx_PeriphCLKConfig>
 8004f30:	bb00      	cbnz	r0, 8004f74 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f32:	4b2b      	ldr	r3, [pc, #172]	; (8004fe0 <HAL_UART_MspInit+0x1c8>)
 8004f34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f36:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004f3a:	659a      	str	r2, [r3, #88]	; 0x58
 8004f3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f3e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004f42:	9206      	str	r2, [sp, #24]
 8004f44:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f48:	f042 0202 	orr.w	r2, r2, #2
 8004f4c:	64da      	str	r2, [r3, #76]	; 0x4c
 8004f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	9307      	str	r3, [sp, #28]
 8004f56:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004f58:	2318      	movs	r3, #24
 8004f5a:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f60:	2300      	movs	r3, #0
 8004f62:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f64:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004f66:	2307      	movs	r3, #7
 8004f68:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f6a:	a91f      	add	r1, sp, #124	; 0x7c
 8004f6c:	481f      	ldr	r0, [pc, #124]	; (8004fec <HAL_UART_MspInit+0x1d4>)
 8004f6e:	f002 f839 	bl	8006fe4 <HAL_GPIO_Init>
 8004f72:	e76c      	b.n	8004e4e <HAL_UART_MspInit+0x36>
      Error_Handler();
 8004f74:	f7fd f800 	bl	8001f78 <Error_Handler>
 8004f78:	e7db      	b.n	8004f32 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004f7a:	2304      	movs	r3, #4
 8004f7c:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f7e:	a80a      	add	r0, sp, #40	; 0x28
 8004f80:	f004 fa42 	bl	8009408 <HAL_RCCEx_PeriphCLKConfig>
 8004f84:	bb08      	cbnz	r0, 8004fca <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004f86:	4b16      	ldr	r3, [pc, #88]	; (8004fe0 <HAL_UART_MspInit+0x1c8>)
 8004f88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f8a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004f8e:	659a      	str	r2, [r3, #88]	; 0x58
 8004f90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f92:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8004f96:	9208      	str	r2, [sp, #32]
 8004f98:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f9c:	f042 0202 	orr.w	r2, r2, #2
 8004fa0:	64da      	str	r2, [r3, #76]	; 0x4c
 8004fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8004faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004fac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004fb0:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fba:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004fbc:	2307      	movs	r3, #7
 8004fbe:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fc0:	a91f      	add	r1, sp, #124	; 0x7c
 8004fc2:	480a      	ldr	r0, [pc, #40]	; (8004fec <HAL_UART_MspInit+0x1d4>)
 8004fc4:	f002 f80e 	bl	8006fe4 <HAL_GPIO_Init>
}
 8004fc8:	e741      	b.n	8004e4e <HAL_UART_MspInit+0x36>
      Error_Handler();
 8004fca:	f7fc ffd5 	bl	8001f78 <Error_Handler>
 8004fce:	e7da      	b.n	8004f86 <HAL_UART_MspInit+0x16e>
 8004fd0:	40004c00 	.word	0x40004c00
 8004fd4:	40005000 	.word	0x40005000
 8004fd8:	40004400 	.word	0x40004400
 8004fdc:	40004800 	.word	0x40004800
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	48000800 	.word	0x48000800
 8004fe8:	48000c00 	.word	0x48000c00
 8004fec:	48000400 	.word	0x48000400

08004ff0 <upper>:
/* Returns upper 4 bits of cell_t
 * 		@param block_t block
 * **/
block_t upper(block_t block) {
	return (block & 0xF0) >> 4;
}
 8004ff0:	0900      	lsrs	r0, r0, #4
 8004ff2:	4770      	bx	lr

08004ff4 <lower>:

/* Returns lower 4 bits of cell_t */
block_t lower(block_t block) {
	return block & 0x0F;
}
 8004ff4:	f000 000f 	and.w	r0, r0, #15
 8004ff8:	4770      	bx	lr

08004ffa <pixel_to_block>:
 */


block_c pixel_to_block(pixel_c pixel_coord) {
	return pixel_coord / BLOCK_WIDTH;
}
 8004ffa:	0880      	lsrs	r0, r0, #2
 8004ffc:	4770      	bx	lr

08004ffe <block_to_pixel>:

pixel_c block_to_pixel(block_c block_coord) {
	return BLOCK_WIDTH + block_coord * BLOCK_WIDTH - 1;
 8004ffe:	3001      	adds	r0, #1
 8005000:	0080      	lsls	r0, r0, #2
 8005002:	3801      	subs	r0, #1
}
 8005004:	b280      	uxth	r0, r0
 8005006:	4770      	bx	lr

08005008 <block_to_cell_x>:
	return cell_coord;
}

cell_c block_to_cell_x(block_c block_coord) {
	return block_coord / 2;
}
 8005008:	0840      	lsrs	r0, r0, #1
 800500a:	4770      	bx	lr

0800500c <block_to_cell_y>:

cell_c block_to_cell_y(block_c block_coord) {
	return block_coord;
}
 800500c:	4770      	bx	lr

0800500e <pixel_to_cell_x>:

cell_c pixel_to_cell_x(pixel_c pixel_coord) {
 800500e:	b508      	push	{r3, lr}
	return block_to_cell_x(
 8005010:	f7ff fff3 	bl	8004ffa <pixel_to_block>
 8005014:	f7ff fff8 	bl	8005008 <block_to_cell_x>
			pixel_to_block(pixel_coord));
}
 8005018:	bd08      	pop	{r3, pc}

0800501a <pixel_to_cell_y>:

cell_c pixel_to_cell_y(pixel_c pixel_coord) {
 800501a:	b508      	push	{r3, lr}
	return pixel_to_block(pixel_coord);
 800501c:	f7ff ffed 	bl	8004ffa <pixel_to_block>
}
 8005020:	bd08      	pop	{r3, pc}
	...

08005024 <display_guysko_hp>:
#include <stdlib.h>

#include "guysko.h"
#include "utils.h"

void display_guysko_hp (guysko* player) {
 8005024:	b500      	push	{lr}
 8005026:	ed2d 8b02 	vpush	{d8}
 800502a:	b083      	sub	sp, #12
	float hp_percentage = (float) get_life_points(player->lp) / (float) GUYSKO_MAX_LP;
 800502c:	6800      	ldr	r0, [r0, #0]
 800502e:	f000 fb4a 	bl	80056c6 <get_life_points>
 8005032:	ee07 0a90 	vmov	s15, r0
 8005036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800503a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005090 <display_guysko_hp+0x6c>
 800503e:	ee87 8a87 	vdiv.f32	s16, s15, s14
	float hp_line_length = hp_percentage * GUYSKO_HP_BAR_PIXEL_X;
 8005042:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005094 <display_guysko_hp+0x70>
 8005046:	ee28 8a27 	vmul.f32	s16, s16, s15

	UG_FillFrame(1, 1, 2 + GUYSKO_HP_BAR_PIXEL_X + 1, 2 + GUYSKO_HP_BAR_PIXEL_Y + 1, C_BLACK);
 800504a:	2300      	movs	r3, #0
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	230b      	movs	r3, #11
 8005050:	2235      	movs	r2, #53	; 0x35
 8005052:	2101      	movs	r1, #1
 8005054:	4608      	mov	r0, r1
 8005056:	f007 f977 	bl	800c348 <UG_FillFrame>
	UG_FillFrame(2, 2, 2 + hp_line_length - 1, 2 + GUYSKO_HP_BAR_PIXEL_Y, C_RED);
 800505a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800505e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8005062:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005066:	ee38 8a67 	vsub.f32	s16, s16, s15
 800506a:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800506e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	230a      	movs	r3, #10
 8005076:	ee18 2a10 	vmov	r2, s16
 800507a:	b212      	sxth	r2, r2
 800507c:	2102      	movs	r1, #2
 800507e:	4608      	mov	r0, r1
 8005080:	f007 f962 	bl	800c348 <UG_FillFrame>
}
 8005084:	b003      	add	sp, #12
 8005086:	ecbd 8b02 	vpop	{d8}
 800508a:	f85d fb04 	ldr.w	pc, [sp], #4
 800508e:	bf00      	nop
 8005090:	447a0000 	.word	0x447a0000
 8005094:	42480000 	.word	0x42480000

08005098 <update_guysko_hp>:

void update_guysko_hp (guysko* player, short y_diff) {
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	460c      	mov	r4, r1
	set_life_points(player->lp, get_life_points(player->lp) - abs(y_diff) / 50);
 800509c:	6805      	ldr	r5, [r0, #0]
 800509e:	4628      	mov	r0, r5
 80050a0:	f000 fb11 	bl	80056c6 <get_life_points>
 80050a4:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 80050a8:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 80050ac:	b289      	uxth	r1, r1
 80050ae:	4c06      	ldr	r4, [pc, #24]	; (80050c8 <update_guysko_hp+0x30>)
 80050b0:	fb84 3101 	smull	r3, r1, r4, r1
 80050b4:	1109      	asrs	r1, r1, #4
 80050b6:	4249      	negs	r1, r1
 80050b8:	fa11 f180 	uxtah	r1, r1, r0
 80050bc:	b209      	sxth	r1, r1
 80050be:	4628      	mov	r0, r5
 80050c0:	f000 faff 	bl	80056c2 <set_life_points>
}
 80050c4:	bd38      	pop	{r3, r4, r5, pc}
 80050c6:	bf00      	nop
 80050c8:	51eb851f 	.word	0x51eb851f

080050cc <update_guysko_position>:
/*
 * Simpy calculated the movement guysko makes based on his move. But when he goes outside of range of world in
 * x axis, he is teleported on the opposite side of the world. This does not apply for the y axis, where he
 * can be stuck at the botton of the world and of course won't fall down againg from sky.
 */
void update_guysko_position (guysko* player) {
 80050cc:	b510      	push	{r4, lr}
 80050ce:	4604      	mov	r4, r0
	update_position_x(player->pos, player->pos->x, player->mov->x);
 80050d0:	6900      	ldr	r0, [r0, #16]
 80050d2:	68e3      	ldr	r3, [r4, #12]
 80050d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80050d8:	f9b0 1000 	ldrsh.w	r1, [r0]
 80050dc:	f000 fb16 	bl	800570c <update_position_x>
	update_position_y(player->pos, player->pos->y, (-1) * player->mov->y);
 80050e0:	6920      	ldr	r0, [r4, #16]
 80050e2:	68e3      	ldr	r3, [r4, #12]
 80050e4:	885a      	ldrh	r2, [r3, #2]
 80050e6:	4252      	negs	r2, r2
 80050e8:	b212      	sxth	r2, r2
 80050ea:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80050ee:	f000 fb26 	bl	800573e <update_position_y>
}
 80050f2:	bd10      	pop	{r4, pc}

080050f4 <update_guysko_move>:
/*
 * Because it is posible at slow speed and high FPS for guysko to move less than one pixel in difference of
 * one frame, the traveled distance that was not displayed in previos frame is at this frame taken into calculation
 * with respect to value in "player->mov->x_remainder".
 */
void update_guysko_move (guysko* player, int FPS) {
 80050f4:	b510      	push	{r4, lr}
	float mov_x = ((float) 1 / ((float) (1000 / FPS) / (float) player->vel->x)) + player->mov->x_remainder;
 80050f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050fa:	fb93 f3f1 	sdiv	r3, r3, r1
 80050fe:	ee07 3a90 	vmov	s15, r3
 8005102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005106:	6883      	ldr	r3, [r0, #8]
 8005108:	f9b3 2000 	ldrsh.w	r2, [r3]
 800510c:	ee07 2a10 	vmov	s14, r2
 8005110:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005114:	eec7 5a87 	vdiv.f32	s11, s15, s14
 8005118:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800511c:	eec6 6a25 	vdiv.f32	s13, s12, s11
 8005120:	68c4      	ldr	r4, [r0, #12]
 8005122:	ed94 7a01 	vldr	s14, [r4, #4]
 8005126:	ee76 6a87 	vadd.f32	s13, s13, s14
	float mov_y = ((float) 1 / ((float) (1000 / FPS) / (float) player->vel->y)) + player->mov->y_remainder;
 800512a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800512e:	ee07 3a10 	vmov	s14, r3
 8005132:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005136:	eec7 5a87 	vdiv.f32	s11, s15, s14
 800513a:	ee86 7a25 	vdiv.f32	s14, s12, s11
 800513e:	edd4 7a02 	vldr	s15, [r4, #8]
 8005142:	ee37 7a27 	vadd.f32	s14, s14, s15

	short pix_move_x = (short) mov_x % 100;
 8005146:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800514a:	ee17 3a90 	vmov	r3, s15
 800514e:	b219      	sxth	r1, r3
 8005150:	4b17      	ldr	r3, [pc, #92]	; (80051b0 <update_guysko_move+0xbc>)
 8005152:	fb83 c201 	smull	ip, r2, r3, r1
 8005156:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 800515a:	ebcc 1c62 	rsb	ip, ip, r2, asr #5
 800515e:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8005162:	fb0e 111c 	mls	r1, lr, ip, r1
 8005166:	b209      	sxth	r1, r1
	short pix_move_y = (short) mov_y % 100;
 8005168:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800516c:	ee17 2a90 	vmov	r2, s15
 8005170:	b212      	sxth	r2, r2
 8005172:	fb83 c302 	smull	ip, r3, r3, r2
 8005176:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800517a:	ebcc 1363 	rsb	r3, ip, r3, asr #5
 800517e:	fb0e 2213 	mls	r2, lr, r3, r2
 8005182:	b212      	sxth	r2, r2

	player->mov->x_remainder = mov_x - (float) pix_move_x;
 8005184:	ee07 1a90 	vmov	s15, r1
 8005188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800518c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005190:	edc4 6a01 	vstr	s13, [r4, #4]
	player->mov->y_remainder = mov_y - (float) pix_move_y;
 8005194:	ee07 2a90 	vmov	s15, r2
 8005198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800519c:	68c3      	ldr	r3, [r0, #12]
 800519e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80051a2:	ed83 7a02 	vstr	s14, [r3, #8]

	set_move(player->mov, pix_move_x, pix_move_y);
 80051a6:	68c0      	ldr	r0, [r0, #12]
 80051a8:	f000 faaa 	bl	8005700 <set_move>
}
 80051ac:	bd10      	pop	{r4, pc}
 80051ae:	bf00      	nop
 80051b0:	51eb851f 	.word	0x51eb851f

080051b4 <update_guysko_velocity>:

/*
 * Guysko's velocity is calculated based on force of gravity and his jump acceleration. When calculating
 * velocity of each direction, button input is taken into consideration.
 */
void update_guysko_velocity(guysko* player) {
 80051b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051b8:	4604      	mov	r4, r0

	// TODO: preverba ali se je zaletel v solid levo desno gor, dol?
	// TODO: update movement based on that

	uint8_t material_u = get_block_with_pixels_from_WORLD(world_pixel_to_world_pixel_x_no_band_param(player->pos->x, 0), world_pixel_to_world_pixel_y_no_band_param(player->pos->y, (-1) * GUYSKO_IMG_Y - 1));
 80051ba:	6903      	ldr	r3, [r0, #16]
 80051bc:	2100      	movs	r1, #0
 80051be:	f9b3 0000 	ldrsh.w	r0, [r3]
 80051c2:	f7fe ffcb 	bl	800415c <world_pixel_to_world_pixel_x_no_band_param>
 80051c6:	4605      	mov	r5, r0
 80051c8:	6923      	ldr	r3, [r4, #16]
 80051ca:	f06f 0118 	mvn.w	r1, #24
 80051ce:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80051d2:	f7fe ffd0 	bl	8004176 <world_pixel_to_world_pixel_y_no_band_param>
 80051d6:	b281      	uxth	r1, r0
 80051d8:	b2a8      	uxth	r0, r5
 80051da:	f7fe ff45 	bl	8004068 <get_block_with_pixels_from_WORLD>
 80051de:	4607      	mov	r7, r0
	uint8_t material_r = get_block_with_pixels_from_WORLD(world_pixel_to_world_pixel_x_no_band_param(player->pos->x, 1), world_pixel_to_world_pixel_y_no_band_param(player->pos->y, 0));
 80051e0:	6923      	ldr	r3, [r4, #16]
 80051e2:	2101      	movs	r1, #1
 80051e4:	f9b3 0000 	ldrsh.w	r0, [r3]
 80051e8:	f7fe ffb8 	bl	800415c <world_pixel_to_world_pixel_x_no_band_param>
 80051ec:	4605      	mov	r5, r0
 80051ee:	6923      	ldr	r3, [r4, #16]
 80051f0:	2100      	movs	r1, #0
 80051f2:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80051f6:	f7fe ffbe 	bl	8004176 <world_pixel_to_world_pixel_y_no_band_param>
 80051fa:	b281      	uxth	r1, r0
 80051fc:	b2a8      	uxth	r0, r5
 80051fe:	f7fe ff33 	bl	8004068 <get_block_with_pixels_from_WORLD>
 8005202:	4680      	mov	r8, r0
	uint8_t material_d = get_block_with_pixels_from_WORLD(world_pixel_to_world_pixel_x_no_band_param(player->pos->x, 0), world_pixel_to_world_pixel_y_no_band_param(player->pos->y, 1));
 8005204:	6923      	ldr	r3, [r4, #16]
 8005206:	2100      	movs	r1, #0
 8005208:	f9b3 0000 	ldrsh.w	r0, [r3]
 800520c:	f7fe ffa6 	bl	800415c <world_pixel_to_world_pixel_x_no_band_param>
 8005210:	4605      	mov	r5, r0
 8005212:	6923      	ldr	r3, [r4, #16]
 8005214:	2101      	movs	r1, #1
 8005216:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800521a:	f7fe ffac 	bl	8004176 <world_pixel_to_world_pixel_y_no_band_param>
 800521e:	b281      	uxth	r1, r0
 8005220:	b2a8      	uxth	r0, r5
 8005222:	f7fe ff21 	bl	8004068 <get_block_with_pixels_from_WORLD>
 8005226:	4605      	mov	r5, r0
	uint8_t material_l = get_block_with_pixels_from_WORLD(world_pixel_to_world_pixel_x_no_band_param(player->pos->x, (-1) * GUYSKO_IMG_X - 1), world_pixel_to_world_pixel_x_no_band_param(player->pos->y, 0));
 8005228:	6923      	ldr	r3, [r4, #16]
 800522a:	f06f 0110 	mvn.w	r1, #16
 800522e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005232:	f7fe ff93 	bl	800415c <world_pixel_to_world_pixel_x_no_band_param>
 8005236:	4606      	mov	r6, r0
 8005238:	6923      	ldr	r3, [r4, #16]
 800523a:	2100      	movs	r1, #0
 800523c:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8005240:	f7fe ff8c 	bl	800415c <world_pixel_to_world_pixel_x_no_band_param>
 8005244:	b281      	uxth	r1, r0
 8005246:	b2b0      	uxth	r0, r6
 8005248:	f7fe ff0e 	bl	8004068 <get_block_with_pixels_from_WORLD>
 800524c:	4681      	mov	r9, r0

	short old_free_fall_speed = player->vel->y;
 800524e:	68a0      	ldr	r0, [r4, #8]
 8005250:	f9b0 6002 	ldrsh.w	r6, [r0, #2]

	if (move_right) {
 8005254:	4b59      	ldr	r3, [pc, #356]	; (80053bc <update_guysko_velocity+0x208>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d054      	beq.n	8005306 <update_guysko_velocity+0x152>
		player->orientation = true;
 800525c:	2301      	movs	r3, #1
 800525e:	75a3      	strb	r3, [r4, #22]
		if (player->vel->x < 0) set_velocity(player->vel, 0 + GUYSKO_WALK_VEL_INC, player->vel->y);
 8005260:	f9b0 1000 	ldrsh.w	r1, [r0]
 8005264:	2900      	cmp	r1, #0
 8005266:	db3b      	blt.n	80052e0 <update_guysko_velocity+0x12c>
		else set_velocity(player->vel, player->vel->x + GUYSKO_WALK_VEL_INC, player->vel->y);
 8005268:	b289      	uxth	r1, r1
 800526a:	310a      	adds	r1, #10
 800526c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8005270:	b209      	sxth	r1, r1
 8005272:	f000 fadc 	bl	800582e <set_velocity>
		// MAX VELOCITY IN X DIRECTION
		if (player->vel->x > GUYSKO_MAX_RIGHT_VELOCITY) set_velocity(player->vel, GUYSKO_MAX_RIGHT_VELOCITY, player->vel->y);
 8005276:	68a0      	ldr	r0, [r4, #8]
 8005278:	f9b0 3000 	ldrsh.w	r3, [r0]
 800527c:	2bc8      	cmp	r3, #200	; 0xc8
 800527e:	dc35      	bgt.n	80052ec <update_guysko_velocity+0x138>
		action_reset(MOVE_RIGHT_INDEX);
 8005280:	2007      	movs	r0, #7
 8005282:	f7fb fee1 	bl	8001048 <action_reset>
		if (isSolid(material_r)) set_velocity(player->vel, 0, player->vel->y);
 8005286:	4640      	mov	r0, r8
 8005288:	f7fe ff12 	bl	80040b0 <isSolid>
 800528c:	2800      	cmp	r0, #0
 800528e:	d133      	bne.n	80052f8 <update_guysko_velocity+0x144>
	} else {
		set_velocity(player->vel, 0, player->vel->y);
	}

	// y axis
	set_velocity(player->vel, player->vel->x, player->vel->y + GRAVITY);
 8005290:	68a0      	ldr	r0, [r4, #8]
 8005292:	8842      	ldrh	r2, [r0, #2]
 8005294:	3a05      	subs	r2, #5
 8005296:	b212      	sxth	r2, r2
 8005298:	f9b0 1000 	ldrsh.w	r1, [r0]
 800529c:	f000 fac7 	bl	800582e <set_velocity>
	if (isSolid(material_d)) {
 80052a0:	4628      	mov	r0, r5
 80052a2:	f7fe ff05 	bl	80040b0 <isSolid>
 80052a6:	2800      	cmp	r0, #0
 80052a8:	d06f      	beq.n	800538a <update_guysko_velocity+0x1d6>
		if (move_up) {
 80052aa:	4b45      	ldr	r3, [pc, #276]	; (80053c0 <update_guysko_velocity+0x20c>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d061      	beq.n	8005376 <update_guysko_velocity+0x1c2>
			set_velocity(player->vel, player->vel->x, player->vel->y + GUYSKO_JUMP_ACCELERATION);
 80052b2:	68a0      	ldr	r0, [r4, #8]
 80052b4:	8842      	ldrh	r2, [r0, #2]
 80052b6:	3296      	adds	r2, #150	; 0x96
 80052b8:	b212      	sxth	r2, r2
 80052ba:	f9b0 1000 	ldrsh.w	r1, [r0]
 80052be:	f000 fab6 	bl	800582e <set_velocity>
			action_reset(MOVE_UP_INDEX);
 80052c2:	2006      	movs	r0, #6
 80052c4:	f7fb fec0 	bl	8001048 <action_reset>
			 if (isSolid(material_u)) set_velocity(player->vel, player->vel->x, 0);
 80052c8:	4638      	mov	r0, r7
 80052ca:	f7fe fef1 	bl	80040b0 <isSolid>
 80052ce:	2800      	cmp	r0, #0
 80052d0:	d057      	beq.n	8005382 <update_guysko_velocity+0x1ce>
 80052d2:	68a0      	ldr	r0, [r4, #8]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f9b0 1000 	ldrsh.w	r1, [r0]
 80052da:	f000 faa8 	bl	800582e <set_velocity>
 80052de:	e050      	b.n	8005382 <update_guysko_velocity+0x1ce>
		if (player->vel->x < 0) set_velocity(player->vel, 0 + GUYSKO_WALK_VEL_INC, player->vel->y);
 80052e0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80052e4:	210a      	movs	r1, #10
 80052e6:	f000 faa2 	bl	800582e <set_velocity>
 80052ea:	e7c4      	b.n	8005276 <update_guysko_velocity+0xc2>
		if (player->vel->x > GUYSKO_MAX_RIGHT_VELOCITY) set_velocity(player->vel, GUYSKO_MAX_RIGHT_VELOCITY, player->vel->y);
 80052ec:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80052f0:	21c8      	movs	r1, #200	; 0xc8
 80052f2:	f000 fa9c 	bl	800582e <set_velocity>
 80052f6:	e7c3      	b.n	8005280 <update_guysko_velocity+0xcc>
		if (isSolid(material_r)) set_velocity(player->vel, 0, player->vel->y);
 80052f8:	68a0      	ldr	r0, [r4, #8]
 80052fa:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80052fe:	2100      	movs	r1, #0
 8005300:	f000 fa95 	bl	800582e <set_velocity>
 8005304:	e7c4      	b.n	8005290 <update_guysko_velocity+0xdc>
	} else if (move_left) {
 8005306:	4b2f      	ldr	r3, [pc, #188]	; (80053c4 <update_guysko_velocity+0x210>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	b37b      	cbz	r3, 800536c <update_guysko_velocity+0x1b8>
		player->orientation = false;
 800530c:	2300      	movs	r3, #0
 800530e:	75a3      	strb	r3, [r4, #22]
		if (player->vel->x > 0) set_velocity(player->vel, 0 - GUYSKO_WALK_VEL_INC, player->vel->y);
 8005310:	f9b0 1000 	ldrsh.w	r1, [r0]
 8005314:	4299      	cmp	r1, r3
 8005316:	dd1a      	ble.n	800534e <update_guysko_velocity+0x19a>
 8005318:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800531c:	f06f 0109 	mvn.w	r1, #9
 8005320:	f000 fa85 	bl	800582e <set_velocity>
		if (player->vel->x < GUYSKO_MAX_LEFT_VELOCITY) set_velocity(player->vel, GUYSKO_MAX_LEFT_VELOCITY, player->vel->y);
 8005324:	68a0      	ldr	r0, [r4, #8]
 8005326:	f9b0 3000 	ldrsh.w	r3, [r0]
 800532a:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 800532e:	db16      	blt.n	800535e <update_guysko_velocity+0x1aa>
		action_reset(MOVE_LEFT_INDEX);
 8005330:	2009      	movs	r0, #9
 8005332:	f7fb fe89 	bl	8001048 <action_reset>
		if (isSolid(material_l)) set_velocity(player->vel, 0, player->vel->y);
 8005336:	4648      	mov	r0, r9
 8005338:	f7fe feba 	bl	80040b0 <isSolid>
 800533c:	2800      	cmp	r0, #0
 800533e:	d0a7      	beq.n	8005290 <update_guysko_velocity+0xdc>
 8005340:	68a0      	ldr	r0, [r4, #8]
 8005342:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8005346:	2100      	movs	r1, #0
 8005348:	f000 fa71 	bl	800582e <set_velocity>
 800534c:	e7a0      	b.n	8005290 <update_guysko_velocity+0xdc>
		else set_velocity(player->vel, player->vel->x - GUYSKO_WALK_VEL_INC, player->vel->y);
 800534e:	b289      	uxth	r1, r1
 8005350:	390a      	subs	r1, #10
 8005352:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8005356:	b209      	sxth	r1, r1
 8005358:	f000 fa69 	bl	800582e <set_velocity>
 800535c:	e7e2      	b.n	8005324 <update_guysko_velocity+0x170>
		if (player->vel->x < GUYSKO_MAX_LEFT_VELOCITY) set_velocity(player->vel, GUYSKO_MAX_LEFT_VELOCITY, player->vel->y);
 800535e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8005362:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8005366:	f000 fa62 	bl	800582e <set_velocity>
 800536a:	e7e1      	b.n	8005330 <update_guysko_velocity+0x17c>
		set_velocity(player->vel, 0, player->vel->y);
 800536c:	4632      	mov	r2, r6
 800536e:	2100      	movs	r1, #0
 8005370:	f000 fa5d 	bl	800582e <set_velocity>
 8005374:	e78c      	b.n	8005290 <update_guysko_velocity+0xdc>
		} else {
			set_velocity(player->vel, player->vel->x, 0);
 8005376:	68a0      	ldr	r0, [r4, #8]
 8005378:	2200      	movs	r2, #0
 800537a:	f9b0 1000 	ldrsh.w	r1, [r0]
 800537e:	f000 fa56 	bl	800582e <set_velocity>
		}
			update_guysko_hp(player, old_free_fall_speed);
 8005382:	4631      	mov	r1, r6
 8005384:	4620      	mov	r0, r4
 8005386:	f7ff fe87 	bl	8005098 <update_guysko_hp>
	}

	// MAX VELOCITY IN Y DIRECTION
	if (player->vel->y < GUYSKO_MAX_DOWN_VELOCITY) {
 800538a:	68a0      	ldr	r0, [r4, #8]
 800538c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8005390:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8005394:	db04      	blt.n	80053a0 <update_guysko_velocity+0x1ec>
		set_velocity(player->vel, player->vel->x, GUYSKO_MAX_DOWN_VELOCITY);
	} else if (player->vel->y > GUYSKO_MAX_UP_VELOCITY) {
 8005396:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800539a:	dc07      	bgt.n	80053ac <update_guysko_velocity+0x1f8>
		set_velocity(player->vel, player->vel->x, GUYSKO_MAX_UP_VELOCITY);
	}

	return;
	// TODO: DIFFERENCE OF PREVIOUS AND NEW VELOCITY: FOR DAMAGE OF HIGH FALL
}
 800539c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		set_velocity(player->vel, player->vel->x, GUYSKO_MAX_DOWN_VELOCITY);
 80053a0:	4a09      	ldr	r2, [pc, #36]	; (80053c8 <update_guysko_velocity+0x214>)
 80053a2:	f9b0 1000 	ldrsh.w	r1, [r0]
 80053a6:	f000 fa42 	bl	800582e <set_velocity>
 80053aa:	e7f7      	b.n	800539c <update_guysko_velocity+0x1e8>
		set_velocity(player->vel, player->vel->x, GUYSKO_MAX_UP_VELOCITY);
 80053ac:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80053b0:	f9b0 1000 	ldrsh.w	r1, [r0]
 80053b4:	f000 fa3b 	bl	800582e <set_velocity>
	return;
 80053b8:	e7f0      	b.n	800539c <update_guysko_velocity+0x1e8>
 80053ba:	bf00      	nop
 80053bc:	2000157b 	.word	0x2000157b
 80053c0:	2000157c 	.word	0x2000157c
 80053c4:	2000157a 	.word	0x2000157a
 80053c8:	fffffe0c 	.word	0xfffffe0c

080053cc <draw_guysko>:
 * corner of guysko's image. The postion of guysko cannot be taken as the postion of guysko on screen,
 * because the screen is only a small part of world. So the starting drawing postion is calculated based on
 * guysko's postion and difference between the START of the left and top corner of the screen and left and
 * top corner of the world.
 */
void draw_guysko (guysko* player) {
 80053cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d0:	b085      	sub	sp, #20
 80053d2:	4604      	mov	r4, r0
	int index = 0;
	posx_pixel draw_startPoint_x = world_pixel_to_scene_pixel_x_band(player->pos->x - GUYSKO_IMG_X);
 80053d4:	6903      	ldr	r3, [r0, #16]
 80053d6:	8818      	ldrh	r0, [r3, #0]
 80053d8:	3810      	subs	r0, #16
 80053da:	b200      	sxth	r0, r0
 80053dc:	f7fe feaa 	bl	8004134 <world_pixel_to_scene_pixel_x_band>
 80053e0:	9002      	str	r0, [sp, #8]
	posy_pixel draw_startPoint_y = world_pixel_to_scene_pixel_y_band(player->pos->y - GUYSKO_IMG_Y);
 80053e2:	6923      	ldr	r3, [r4, #16]
 80053e4:	8858      	ldrh	r0, [r3, #2]
 80053e6:	3818      	subs	r0, #24
 80053e8:	b200      	sxth	r0, r0
 80053ea:	f7fe fead 	bl	8004148 <world_pixel_to_scene_pixel_y_band>
 80053ee:	9003      	str	r0, [sp, #12]
	// TODO: if guysko is on the edge of world, do not draw the whole guysko!

	uint8_t* picture_pointer;
	uint16_t* pallete_pointer;
	if (player->orientation){
 80053f0:	7da3      	ldrb	r3, [r4, #22]
 80053f2:	b133      	cbz	r3, 8005402 <draw_guysko+0x36>
		picture_pointer = guysko_r_0;
		pallete_pointer = GUYSKO_R_0;
 80053f4:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80054a4 <draw_guysko+0xd8>
		picture_pointer = guysko_r_0;
 80053f8:	4f28      	ldr	r7, [pc, #160]	; (800549c <draw_guysko+0xd0>)
	} else {
		picture_pointer = guysko_l_0;
		pallete_pointer = GUYSKO_L_0;
	}

	for (int i = 0; i < GUYSKO_IMG_SIZE / 2; i += 1) {
 80053fa:	f04f 0800 	mov.w	r8, #0
	int index = 0;
 80053fe:	4644      	mov	r4, r8
	for (int i = 0; i < GUYSKO_IMG_SIZE / 2; i += 1) {
 8005400:	e012      	b.n	8005428 <draw_guysko+0x5c>
		pallete_pointer = GUYSKO_L_0;
 8005402:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 80054a8 <draw_guysko+0xdc>
		picture_pointer = guysko_l_0;
 8005406:	4f26      	ldr	r7, [pc, #152]	; (80054a0 <draw_guysko+0xd4>)
 8005408:	e7f7      	b.n	80053fa <draw_guysko+0x2e>
		uint8_t offset_x = index % (GUYSKO_IMG_X / 2);
		uint8_t offset_y = index / (GUYSKO_IMG_X / 2);
 800540a:	1de6      	adds	r6, r4, #7
 800540c:	e01a      	b.n	8005444 <draw_guysko+0x78>
		if (frst_nibble != 0) {
			UG_DrawPixel(draw_on_screen_x, draw_on_screen_y, pallete_pointer[frst_nibble]);
		} else if (false) {
				// drug object uzadi
		} else {
			overdraw_background_pixel(draw_on_screen_x, draw_on_screen_y);
 800540e:	4601      	mov	r1, r0
 8005410:	9801      	ldr	r0, [sp, #4]
 8005412:	f000 f9f7 	bl	8005804 <overdraw_background_pixel>
 8005416:	e033      	b.n	8005480 <draw_guysko+0xb4>
		if (scnd_nibble != 0) {
			UG_DrawPixel(draw_on_screen_x + 1, draw_on_screen_y, pallete_pointer[scnd_nibble]);
		} else if (false) {
			// drug object uzadi
		} else {
			overdraw_background_pixel(draw_on_screen_x + 1, draw_on_screen_y);
 8005418:	f109 0001 	add.w	r0, r9, #1
 800541c:	4631      	mov	r1, r6
 800541e:	b200      	sxth	r0, r0
 8005420:	f000 f9f0 	bl	8005804 <overdraw_background_pixel>
	for (int i = 0; i < GUYSKO_IMG_SIZE / 2; i += 1) {
 8005424:	f108 0801 	add.w	r8, r8, #1
 8005428:	f1b8 0fbf 	cmp.w	r8, #191	; 0xbf
 800542c:	dc33      	bgt.n	8005496 <draw_guysko+0xca>
		uint8_t offset_x = index % (GUYSKO_IMG_X / 2);
 800542e:	4263      	negs	r3, r4
 8005430:	f004 0107 	and.w	r1, r4, #7
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	bf58      	it	pl
 800543a:	4259      	negpl	r1, r3
 800543c:	b2c9      	uxtb	r1, r1
		uint8_t offset_y = index / (GUYSKO_IMG_X / 2);
 800543e:	4626      	mov	r6, r4
 8005440:	2c00      	cmp	r4, #0
 8005442:	dbe2      	blt.n	800540a <draw_guysko+0x3e>
 8005444:	f3c6 06c7 	ubfx	r6, r6, #3, #8
		index++;
 8005448:	3401      	adds	r4, #1
		int frst_nibble =	(picture_pointer[i] & 0b11110000) >> 4;
 800544a:	f817 5008 	ldrb.w	r5, [r7, r8]
 800544e:	ea4f 1a15 	mov.w	sl, r5, lsr #4
		int scnd_nibble =	(picture_pointer[i] & 0b00001111) >> 0;
 8005452:	f005 050f 	and.w	r5, r5, #15
		pixel_c draw_on_screen_x = world_pixel_to_world_pixel_x_no_band_param(draw_startPoint_x, 2 * offset_x);
 8005456:	0049      	lsls	r1, r1, #1
 8005458:	9802      	ldr	r0, [sp, #8]
 800545a:	f7fe fe7f 	bl	800415c <world_pixel_to_world_pixel_x_no_band_param>
 800545e:	9001      	str	r0, [sp, #4]
 8005460:	f8bd 9004 	ldrh.w	r9, [sp, #4]
		pixel_c draw_on_screen_y = world_pixel_to_world_pixel_y_no_band_param(draw_startPoint_y, offset_y);
 8005464:	4631      	mov	r1, r6
 8005466:	9803      	ldr	r0, [sp, #12]
 8005468:	f7fe fe85 	bl	8004176 <world_pixel_to_world_pixel_y_no_band_param>
 800546c:	4606      	mov	r6, r0
		if (frst_nibble != 0) {
 800546e:	f1ba 0f00 	cmp.w	sl, #0
 8005472:	d0cc      	beq.n	800540e <draw_guysko+0x42>
			UG_DrawPixel(draw_on_screen_x, draw_on_screen_y, pallete_pointer[frst_nibble]);
 8005474:	f83b 201a 	ldrh.w	r2, [fp, sl, lsl #1]
 8005478:	4601      	mov	r1, r0
 800547a:	9801      	ldr	r0, [sp, #4]
 800547c:	f006 ff9c 	bl	800c3b8 <UG_DrawPixel>
		if (scnd_nibble != 0) {
 8005480:	2d00      	cmp	r5, #0
 8005482:	d0c9      	beq.n	8005418 <draw_guysko+0x4c>
			UG_DrawPixel(draw_on_screen_x + 1, draw_on_screen_y, pallete_pointer[scnd_nibble]);
 8005484:	f109 0001 	add.w	r0, r9, #1
 8005488:	f83b 2015 	ldrh.w	r2, [fp, r5, lsl #1]
 800548c:	4631      	mov	r1, r6
 800548e:	b200      	sxth	r0, r0
 8005490:	f006 ff92 	bl	800c3b8 <UG_DrawPixel>
 8005494:	e7c6      	b.n	8005424 <draw_guysko+0x58>
		}
	}
}
 8005496:	b005      	add	sp, #20
 8005498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549c:	20001144 	.word	0x20001144
 80054a0:	20001084 	.word	0x20001084
 80054a4:	20001070 	.word	0x20001070
 80054a8:	2000105c 	.word	0x2000105c

080054ac <camouflage>:

/*
 * TODO: fix
 */
void camouflage (guysko* player, uint16_t prev_guysko_x, uint16_t prev_guysko_y) {
 80054ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b0:	460e      	mov	r6, r1
 80054b2:	4615      	mov	r5, r2

	pixel_c guysko_x0 = prev_guysko_x;
	pixel_c guysko_y0 = prev_guysko_y;
	pixel_c guysko_x1 = player->pos->x;
 80054b4:	6903      	ldr	r3, [r0, #16]
 80054b6:	f9b3 8000 	ldrsh.w	r8, [r3]
	pixel_c guysko_y1 = player->pos->y;
 80054ba:	f9b3 7002 	ldrsh.w	r7, [r3, #2]

	// calculate the starting points of guysko image starting point
	// IN SCENE IN PIXELS on previous and current frame
	int prev_draw_startPoint_x = prev_guysko_x - GUYSKO_IMG_X - (camera_x_block * BLOCK_WIDTH - (SCENE_WIDTH_BLOCKS / 2) * BLOCK_WIDTH);
 80054be:	f1a1 0c10 	sub.w	ip, r1, #16
 80054c2:	4b4a      	ldr	r3, [pc, #296]	; (80055ec <camouflage+0x140>)
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 80054ca:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
	int prev_draw_startPoint_y = prev_guysko_y - GUYSKO_IMG_Y - (camera_y_block * BLOCK_WIDTH - (SCENE_HEIGHT_BLOCKS / 2) * BLOCK_WIDTH);
 80054ce:	f1a2 0018 	sub.w	r0, r2, #24
 80054d2:	4b47      	ldr	r3, [pc, #284]	; (80055f0 <camouflage+0x144>)
 80054d4:	881c      	ldrh	r4, [r3, #0]
 80054d6:	f1a4 021e 	sub.w	r2, r4, #30
 80054da:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
	int draw_startPoint_x = player->pos->x - GUYSKO_IMG_X - (camera_x_block * BLOCK_WIDTH - (SCENE_WIDTH_BLOCKS / 2)* BLOCK_WIDTH);
 80054de:	f1a8 0310 	sub.w	r3, r8, #16
 80054e2:	eba3 0381 	sub.w	r3, r3, r1, lsl #2
	int draw_startPoint_y = player->pos->y - GUYSKO_IMG_Y - (camera_y_block * BLOCK_WIDTH - (SCENE_HEIGHT_BLOCKS / 2)* BLOCK_WIDTH);
 80054e6:	f1a7 0418 	sub.w	r4, r7, #24
 80054ea:	eba4 0482 	sub.w	r4, r4, r2, lsl #2

	// calculate the difference the guysko has made since the previous frame (his previous drawing)
	// the difference is in pixels but on screen! Meaning it only checks for the difference it made on
	// screen, not his global moving in WORLD!
	short x_diff = draw_startPoint_x - prev_draw_startPoint_x;
 80054ee:	eba3 030c 	sub.w	r3, r3, ip
 80054f2:	b21b      	sxth	r3, r3
	short y_diff = draw_startPoint_y - prev_draw_startPoint_y;
 80054f4:	1a24      	subs	r4, r4, r0
 80054f6:	b224      	sxth	r4, r4

	// calculate the starting points of guysko image starting point
	// IN WORLD IN PIXELS on previous and current frame
	// make four calls based on which direction the guysko moved in:
	// right
	if (x_diff > 0) {
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	dc07      	bgt.n	800550c <camouflage+0x60>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x0, (-1) * GUYSKO_IMG_X), world_pixel_to_world_pixel_y_no_band_param(guysko_y0, (-1) * GUYSKO_IMG_Y),
				world_pixel_to_world_pixel_x_no_band_param(guysko_x1, (-1) * GUYSKO_IMG_X),world_pixel_to_world_pixel_y_no_band_param (guysko_y1, 0));
	} else if (x_diff < 0) {
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	db22      	blt.n	8005546 <camouflage+0x9a>
	// left
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x0, 0), world_pixel_to_world_pixel_y_no_band_param(guysko_y0, (-1) * GUYSKO_IMG_Y),
				world_pixel_to_world_pixel_x_no_band_param(guysko_x1, 0), world_pixel_to_world_pixel_y_no_band_param(guysko_y1, 0));
	}

	if (y_diff > 0) {
 8005500:	2c00      	cmp	r4, #0
 8005502:	dc3b      	bgt.n	800557c <camouflage+0xd0>
	// down
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x0, (-1) * GUYSKO_IMG_X), world_pixel_to_world_pixel_y_no_band_param(guysko_y0, (-1) * GUYSKO_IMG_Y),
				world_pixel_to_world_pixel_x_no_band_param(guysko_x1, 0), world_pixel_to_world_pixel_y_no_band_param(guysko_y1, (-1) * GUYSKO_IMG_Y - 10));
	} else if (y_diff < 0) {
 8005504:	2c00      	cmp	r4, #0
 8005506:	db56      	blt.n	80055b6 <camouflage+0x10a>
	// up
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x0, (-1) * GUYSKO_IMG_X), world_pixel_to_world_pixel_y_no_band_param(guysko_y0, 0),
				world_pixel_to_world_pixel_x_no_band_param(guysko_x1, 0), world_pixel_to_world_pixel_y_no_band_param(guysko_y1, 0));
	}

}
 8005508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x0, (-1) * GUYSKO_IMG_X), world_pixel_to_world_pixel_y_no_band_param(guysko_y0, (-1) * GUYSKO_IMG_Y),
 800550c:	f06f 010f 	mvn.w	r1, #15
 8005510:	b230      	sxth	r0, r6
 8005512:	f7fe fe23 	bl	800415c <world_pixel_to_world_pixel_x_no_band_param>
 8005516:	4681      	mov	r9, r0
 8005518:	f06f 0117 	mvn.w	r1, #23
 800551c:	b228      	sxth	r0, r5
 800551e:	f7fe fe2a 	bl	8004176 <world_pixel_to_world_pixel_y_no_band_param>
 8005522:	4682      	mov	sl, r0
 8005524:	f06f 010f 	mvn.w	r1, #15
 8005528:	4640      	mov	r0, r8
 800552a:	f7fe fe17 	bl	800415c <world_pixel_to_world_pixel_x_no_band_param>
 800552e:	4683      	mov	fp, r0
 8005530:	2100      	movs	r1, #0
 8005532:	4638      	mov	r0, r7
 8005534:	f7fe fe1f 	bl	8004176 <world_pixel_to_world_pixel_y_no_band_param>
 8005538:	4603      	mov	r3, r0
 800553a:	465a      	mov	r2, fp
 800553c:	4651      	mov	r1, sl
 800553e:	4648      	mov	r0, r9
 8005540:	f000 f916 	bl	8005770 <overdraw_background_rectangle>
 8005544:	e7dc      	b.n	8005500 <camouflage+0x54>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x0, 0), world_pixel_to_world_pixel_y_no_band_param(guysko_y0, (-1) * GUYSKO_IMG_Y),
 8005546:	2100      	movs	r1, #0
 8005548:	b230      	sxth	r0, r6
 800554a:	f7fe fe07 	bl	800415c <world_pixel_to_world_pixel_x_no_band_param>
 800554e:	4681      	mov	r9, r0
 8005550:	f06f 0117 	mvn.w	r1, #23
 8005554:	b228      	sxth	r0, r5
 8005556:	f7fe fe0e 	bl	8004176 <world_pixel_to_world_pixel_y_no_band_param>
 800555a:	4682      	mov	sl, r0
 800555c:	2100      	movs	r1, #0
 800555e:	4640      	mov	r0, r8
 8005560:	f7fe fdfc 	bl	800415c <world_pixel_to_world_pixel_x_no_band_param>
 8005564:	4683      	mov	fp, r0
 8005566:	2100      	movs	r1, #0
 8005568:	4638      	mov	r0, r7
 800556a:	f7fe fe04 	bl	8004176 <world_pixel_to_world_pixel_y_no_band_param>
 800556e:	4603      	mov	r3, r0
 8005570:	465a      	mov	r2, fp
 8005572:	4651      	mov	r1, sl
 8005574:	4648      	mov	r0, r9
 8005576:	f000 f8fb 	bl	8005770 <overdraw_background_rectangle>
 800557a:	e7c1      	b.n	8005500 <camouflage+0x54>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x0, (-1) * GUYSKO_IMG_X), world_pixel_to_world_pixel_y_no_band_param(guysko_y0, (-1) * GUYSKO_IMG_Y),
 800557c:	f06f 010f 	mvn.w	r1, #15
 8005580:	b230      	sxth	r0, r6
 8005582:	f7fe fdeb 	bl	800415c <world_pixel_to_world_pixel_x_no_band_param>
 8005586:	4604      	mov	r4, r0
 8005588:	f06f 0117 	mvn.w	r1, #23
 800558c:	b228      	sxth	r0, r5
 800558e:	f7fe fdf2 	bl	8004176 <world_pixel_to_world_pixel_y_no_band_param>
 8005592:	4605      	mov	r5, r0
 8005594:	2100      	movs	r1, #0
 8005596:	4640      	mov	r0, r8
 8005598:	f7fe fde0 	bl	800415c <world_pixel_to_world_pixel_x_no_band_param>
 800559c:	4606      	mov	r6, r0
 800559e:	f06f 0121 	mvn.w	r1, #33	; 0x21
 80055a2:	4638      	mov	r0, r7
 80055a4:	f7fe fde7 	bl	8004176 <world_pixel_to_world_pixel_y_no_band_param>
 80055a8:	4603      	mov	r3, r0
 80055aa:	4632      	mov	r2, r6
 80055ac:	4629      	mov	r1, r5
 80055ae:	4620      	mov	r0, r4
 80055b0:	f000 f8de 	bl	8005770 <overdraw_background_rectangle>
 80055b4:	e7a8      	b.n	8005508 <camouflage+0x5c>
		overdraw_background_rectangle(world_pixel_to_world_pixel_x_no_band_param(guysko_x0, (-1) * GUYSKO_IMG_X), world_pixel_to_world_pixel_y_no_band_param(guysko_y0, 0),
 80055b6:	f06f 010f 	mvn.w	r1, #15
 80055ba:	b230      	sxth	r0, r6
 80055bc:	f7fe fdce 	bl	800415c <world_pixel_to_world_pixel_x_no_band_param>
 80055c0:	4604      	mov	r4, r0
 80055c2:	2100      	movs	r1, #0
 80055c4:	b228      	sxth	r0, r5
 80055c6:	f7fe fdd6 	bl	8004176 <world_pixel_to_world_pixel_y_no_band_param>
 80055ca:	4605      	mov	r5, r0
 80055cc:	2100      	movs	r1, #0
 80055ce:	4640      	mov	r0, r8
 80055d0:	f7fe fdc4 	bl	800415c <world_pixel_to_world_pixel_x_no_band_param>
 80055d4:	4606      	mov	r6, r0
 80055d6:	2100      	movs	r1, #0
 80055d8:	4638      	mov	r0, r7
 80055da:	f7fe fdcc 	bl	8004176 <world_pixel_to_world_pixel_y_no_band_param>
 80055de:	4603      	mov	r3, r0
 80055e0:	4632      	mov	r2, r6
 80055e2:	4629      	mov	r1, r5
 80055e4:	4620      	mov	r0, r4
 80055e6:	f000 f8c3 	bl	8005770 <overdraw_background_rectangle>
}
 80055ea:	e78d      	b.n	8005508 <camouflage+0x5c>
 80055ec:	200121b4 	.word	0x200121b4
 80055f0:	200121b6 	.word	0x200121b6

080055f4 <refresh_guysko>:

/*
 * calls functions that update guysko properties
 */
void refresh_guysko(guysko* player, int FPS) {
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	4604      	mov	r4, r0
 80055f8:	460d      	mov	r5, r1
	int old_guysko_hp = get_life_points(player->lp);
 80055fa:	6800      	ldr	r0, [r0, #0]
 80055fc:	f000 f863 	bl	80056c6 <get_life_points>
 8005600:	4607      	mov	r7, r0
	update_guysko_velocity(player);
 8005602:	4620      	mov	r0, r4
 8005604:	f7ff fdd6 	bl	80051b4 <update_guysko_velocity>
	update_guysko_move(player, FPS);
 8005608:	4629      	mov	r1, r5
 800560a:	4620      	mov	r0, r4
 800560c:	f7ff fd72 	bl	80050f4 <update_guysko_move>
	uint16_t prev_guysko_x = player->pos->x;
 8005610:	6923      	ldr	r3, [r4, #16]
 8005612:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005616:	b2ad      	uxth	r5, r5
	uint16_t prev_guysko_y = player->pos->y;
 8005618:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 800561c:	b2b6      	uxth	r6, r6
	update_guysko_position(player);
 800561e:	4620      	mov	r0, r4
 8005620:	f7ff fd54 	bl	80050cc <update_guysko_position>

	// do the following two if and only if at least on one of the x and y
	// components of guysko position is different
	if (!(prev_guysko_x == player->pos->x && prev_guysko_y == player->pos->y)) {
 8005624:	6923      	ldr	r3, [r4, #16]
 8005626:	f9b3 2000 	ldrsh.w	r2, [r3]
 800562a:	4295      	cmp	r5, r2
 800562c:	d103      	bne.n	8005636 <refresh_guysko+0x42>
 800562e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005632:	429e      	cmp	r6, r3
 8005634:	d007      	beq.n	8005646 <refresh_guysko+0x52>
		// NOT WORKING, TODO: fix black lines
		camouflage (player, prev_guysko_x, prev_guysko_y);
 8005636:	4632      	mov	r2, r6
 8005638:	4629      	mov	r1, r5
 800563a:	4620      	mov	r0, r4
 800563c:	f7ff ff36 	bl	80054ac <camouflage>
		draw_guysko(player);
 8005640:	4620      	mov	r0, r4
 8005642:	f7ff fec3 	bl	80053cc <draw_guysko>
	}

	if (old_guysko_hp != get_life_points(player->lp)) {
 8005646:	6820      	ldr	r0, [r4, #0]
 8005648:	f000 f83d 	bl	80056c6 <get_life_points>
 800564c:	4287      	cmp	r7, r0
 800564e:	d100      	bne.n	8005652 <refresh_guysko+0x5e>
		display_guysko_hp(player);
	}
}
 8005650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		display_guysko_hp(player);
 8005652:	4620      	mov	r0, r4
 8005654:	f7ff fce6 	bl	8005024 <display_guysko_hp>
}
 8005658:	e7fa      	b.n	8005650 <refresh_guysko+0x5c>

0800565a <new_guysko>:
 * @param acceleration	guysko's acceleration
 * @param velocity 			guysko's velocity
 * @param move					difference of position guysko will make inbetween frame
 * @param position 			guysko's new position
 */
guysko* new_guysko() {
 800565a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	guysko* player = malloc(sizeof(guysko));
 800565e:	2018      	movs	r0, #24
 8005660:	f009 f976 	bl	800e950 <malloc>
 8005664:	4604      	mov	r4, r0
	life_points *lp = malloc(sizeof(life_points));
 8005666:	2002      	movs	r0, #2
 8005668:	f009 f972 	bl	800e950 <malloc>
 800566c:	4680      	mov	r8, r0
	lp->life_points = GUYSKO_MAX_LP;
 800566e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005672:	8003      	strh	r3, [r0, #0]
	velocity *guysko_vel = malloc(sizeof(velocity));
 8005674:	2004      	movs	r0, #4
 8005676:	f009 f96b 	bl	800e950 <malloc>
 800567a:	4606      	mov	r6, r0
	guysko_vel->x = 0;
 800567c:	2700      	movs	r7, #0
 800567e:	8007      	strh	r7, [r0, #0]
	guysko_vel->y = 0;
 8005680:	8047      	strh	r7, [r0, #2]
	move *guysko_mov = malloc(sizeof(move));
 8005682:	200c      	movs	r0, #12
 8005684:	f009 f964 	bl	800e950 <malloc>
 8005688:	4605      	mov	r5, r0
	guysko_mov->x = 0;
 800568a:	8007      	strh	r7, [r0, #0]
	guysko_mov->y = 0;
 800568c:	8047      	strh	r7, [r0, #2]
	guysko_mov->x_remainder = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	6043      	str	r3, [r0, #4]
	guysko_mov->y_remainder = 0;
 8005692:	6083      	str	r3, [r0, #8]
	position *guysko_pos = malloc(sizeof(position));
 8005694:	2004      	movs	r0, #4
 8005696:	f009 f95b 	bl	800e950 <malloc>
	guysko_pos->x = GUYSKO_SPAWN_X;
 800569a:	2264      	movs	r2, #100	; 0x64
 800569c:	8002      	strh	r2, [r0, #0]
	guysko_pos->y = GUYSKO_SPAWN_Y;
 800569e:	220a      	movs	r2, #10
 80056a0:	8042      	strh	r2, [r0, #2]

	player->lp->life_points = lp->life_points;
 80056a2:	6822      	ldr	r2, [r4, #0]
 80056a4:	f9b8 1000 	ldrsh.w	r1, [r8]
 80056a8:	8011      	strh	r1, [r2, #0]
	player->state 					= 0;
 80056aa:	7127      	strb	r7, [r4, #4]
	player->vel							= guysko_vel;
 80056ac:	60a6      	str	r6, [r4, #8]
	player->mov 						= guysko_mov;
 80056ae:	60e5      	str	r5, [r4, #12]
	player->pos		 					= guysko_pos;
 80056b0:	6120      	str	r0, [r4, #16]
	player->standing_bits		= 0b1111111111111111;
 80056b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056b6:	82a3      	strh	r3, [r4, #20]

	player->orientation = true;
 80056b8:	2301      	movs	r3, #1
 80056ba:	75a3      	strb	r3, [r4, #22]

	return player;
}
 80056bc:	4620      	mov	r0, r4
 80056be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080056c2 <set_life_points>:

/*
 * Update number of life points of movable in struct lp
 */
void set_life_points(life_points* lp, HP points) {
	lp->life_points = points;
 80056c2:	8001      	strh	r1, [r0, #0]
}
 80056c4:	4770      	bx	lr

080056c6 <get_life_points>:
/*
 * Getter function to get life points of movable
 */
HP get_life_points(life_points* lp) {
	return lp->life_points;
}
 80056c6:	f9b0 0000 	ldrsh.w	r0, [r0]
 80056ca:	4770      	bx	lr

080056cc <new_movables>:
}

/*
 * Initiate linked list with movables. Every species has their own linked list
 */
movable* new_movables() {
 80056cc:	b538      	push	{r3, r4, r5, lr}
	movable* beings = (movable*)malloc(sizeof(movable));
 80056ce:	2014      	movs	r0, #20
 80056d0:	f009 f93e 	bl	800e950 <malloc>
 80056d4:	4604      	mov	r4, r0

	beings->header_cow  = (cow*)malloc(sizeof(cow));
 80056d6:	2018      	movs	r0, #24
 80056d8:	f009 f93a 	bl	800e950 <malloc>
 80056dc:	4605      	mov	r5, r0
 80056de:	6020      	str	r0, [r4, #0]
	beings->tail_cow	 	= (cow*)malloc(sizeof(cow));
 80056e0:	2018      	movs	r0, #24
 80056e2:	f009 f935 	bl	800e950 <malloc>
 80056e6:	6060      	str	r0, [r4, #4]

	beings->header_cow->next = beings->tail_cow;
 80056e8:	6128      	str	r0, [r5, #16]
	beings->header_cow->prev = NULL;
 80056ea:	6822      	ldr	r2, [r4, #0]
 80056ec:	2300      	movs	r3, #0
 80056ee:	6153      	str	r3, [r2, #20]
	beings->tail_cow->next 	= NULL;
 80056f0:	6862      	ldr	r2, [r4, #4]
 80056f2:	6113      	str	r3, [r2, #16]
	beings->tail_cow->prev 	= beings->header_cow;
 80056f4:	6862      	ldr	r2, [r4, #4]
 80056f6:	6821      	ldr	r1, [r4, #0]
 80056f8:	6151      	str	r1, [r2, #20]

	beings->beings_quantity = 0;
 80056fa:	7423      	strb	r3, [r4, #16]

	return beings;
}
 80056fc:	4620      	mov	r0, r4
 80056fe:	bd38      	pop	{r3, r4, r5, pc}

08005700 <set_move>:

/*
 * set move of the moveable to x and y (distance in pixels the moveable will make in one frame)
 */
void set_move (move* mov, short x, short y) {
	mov->x = x;
 8005700:	8001      	strh	r1, [r0, #0]
	mov->y = y;
 8005702:	8042      	strh	r2, [r0, #2]
}
 8005704:	4770      	bx	lr

08005706 <set_position>:

/* update postion of struct position: !!! it is different from coord, since it is used for
 * movables. The values represent the position in pixels.
 */
void set_position (position* pos, posx_pixel x, posy_pixel y) {
	pos->x = x;
 8005706:	8001      	strh	r1, [r0, #0]
	pos->y = y;
 8005708:	8042      	strh	r2, [r0, #2]
}
 800570a:	4770      	bx	lr

0800570c <update_position_x>:
void update_position_x (position* pos, posx_pixel x, posx_pixel x_diff) {
 800570c:	b508      	push	{r3, lr}
	posx_pixel final_x = x + x_diff;
 800570e:	4411      	add	r1, r2
 8005710:	b28b      	uxth	r3, r1
 8005712:	b209      	sxth	r1, r1
	if (final_x < 0) {
 8005714:	2900      	cmp	r1, #0
 8005716:	db06      	blt.n	8005726 <update_position_x+0x1a>
	} else if (final_x > WORLD_WIDTH_PIXELS) {
 8005718:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 800571c:	dd0a      	ble.n	8005734 <update_position_x+0x28>
		final_x = final_x - WORLD_WIDTH_PIXELS;
 800571e:	f5a3 61c8 	sub.w	r1, r3, #1600	; 0x640
 8005722:	b209      	sxth	r1, r1
 8005724:	e006      	b.n	8005734 <update_position_x+0x28>
		final_x = WORLD_WIDTH_PIXELS - abs(final_x);
 8005726:	2900      	cmp	r1, #0
 8005728:	bfb8      	it	lt
 800572a:	4249      	neglt	r1, r1
 800572c:	b289      	uxth	r1, r1
 800572e:	f5c1 61c8 	rsb	r1, r1, #1600	; 0x640
 8005732:	b209      	sxth	r1, r1
	set_position(pos, final_x, pos->y);
 8005734:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8005738:	f7ff ffe5 	bl	8005706 <set_position>
}
 800573c:	bd08      	pop	{r3, pc}

0800573e <update_position_y>:
void update_position_y (position* pos, posy_pixel y, posy_pixel y_diff) {
 800573e:	b508      	push	{r3, lr}
	posy_pixel final_y = y + y_diff;
 8005740:	440a      	add	r2, r1
 8005742:	b293      	uxth	r3, r2
 8005744:	b212      	sxth	r2, r2
	if (final_y < 0) {
 8005746:	2a00      	cmp	r2, #0
 8005748:	db06      	blt.n	8005758 <update_position_y+0x1a>
	} else if (final_y > WORLD_HEIGHT_PIXELS) {
 800574a:	f5b2 7f70 	cmp.w	r2, #960	; 0x3c0
 800574e:	dd0a      	ble.n	8005766 <update_position_y+0x28>
		final_y = final_y - WORLD_HEIGHT_PIXELS;
 8005750:	f5a3 7270 	sub.w	r2, r3, #960	; 0x3c0
 8005754:	b212      	sxth	r2, r2
 8005756:	e006      	b.n	8005766 <update_position_y+0x28>
		final_y = WORLD_HEIGHT_PIXELS - abs(final_y);
 8005758:	2a00      	cmp	r2, #0
 800575a:	bfb8      	it	lt
 800575c:	4252      	neglt	r2, r2
 800575e:	b292      	uxth	r2, r2
 8005760:	f5c2 7270 	rsb	r2, r2, #960	; 0x3c0
 8005764:	b212      	sxth	r2, r2
	set_position(pos, pos->x, final_y);
 8005766:	f9b0 1000 	ldrsh.w	r1, [r0]
 800576a:	f7ff ffcc 	bl	8005706 <set_position>
}
 800576e:	bd08      	pop	{r3, pc}

08005770 <overdraw_background_rectangle>:
	* the parameters the function gets are given in: GLOBAL (WORLD) PIXELS
	* optimization idea: go iterate through columns and "fillFrame" for the largest
	* possible area, so that the time consuming function "UG_DRAW" is used as least
	* as possible times
*/
void overdraw_background_rectangle (posx_pixel x1, posx_pixel y1, posy_pixel x2, posy_pixel y2) {
 8005770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005774:	b083      	sub	sp, #12
 8005776:	4604      	mov	r4, r0

	pixel_c a = MIN(x1, x2);
 8005778:	4610      	mov	r0, r2
 800577a:	42a2      	cmp	r2, r4
 800577c:	bfa8      	it	ge
 800577e:	4620      	movge	r0, r4
 8005780:	fa1f fa80 	uxth.w	sl, r0
	pixel_c	b = MAX(x1, x2);
 8005784:	42a2      	cmp	r2, r4
 8005786:	bfb8      	it	lt
 8005788:	4622      	movlt	r2, r4
 800578a:	4616      	mov	r6, r2
	pixel_c c = MIN(y1, y2);
 800578c:	461d      	mov	r5, r3
 800578e:	428b      	cmp	r3, r1
 8005790:	bfa8      	it	ge
 8005792:	460d      	movge	r5, r1
 8005794:	fa1f f985 	uxth.w	r9, r5
	pixel_c d = MAX(y1, y2);
 8005798:	428b      	cmp	r3, r1
 800579a:	bfb8      	it	lt
 800579c:	460b      	movlt	r3, r1
 800579e:	461c      	mov	r4, r3

	// transform the pixels in position world to pixels in scene
	posx_pixel left = world_pixel_to_scene_pixel_x_no_band(a);
 80057a0:	f7fe fca2 	bl	80040e8 <world_pixel_to_scene_pixel_x_no_band>
 80057a4:	9001      	str	r0, [sp, #4]
	posx_pixel right = world_pixel_to_scene_pixel_x_no_band(b);
 80057a6:	4630      	mov	r0, r6
 80057a8:	f7fe fc9e 	bl	80040e8 <world_pixel_to_scene_pixel_x_no_band>
 80057ac:	4680      	mov	r8, r0
	posy_pixel top = world_pixel_to_scene_pixel_y_no_band(c);
 80057ae:	4628      	mov	r0, r5
 80057b0:	f7fe fcae 	bl	8004110 <world_pixel_to_scene_pixel_y_no_band>
 80057b4:	4606      	mov	r6, r0
	posy_pixel bottom = world_pixel_to_scene_pixel_y_no_band(d);
 80057b6:	4620      	mov	r0, r4
 80057b8:	f7fe fcaa 	bl	8004110 <world_pixel_to_scene_pixel_y_no_band>
 80057bc:	4683      	mov	fp, r0

	uint8_t index_i = 0;
 80057be:	2700      	movs	r7, #0
	// iterate through columns
	for (posx_pixel i = top; i <= bottom; i++) {
 80057c0:	e018      	b.n	80057f4 <overdraw_background_rectangle+0x84>
		// iterate through rows
		uint8_t index_j = 0;
		for (posy_pixel j = left; j <= right; j++) {
			int x = a + index_j;
 80057c2:	eb0a 0005 	add.w	r0, sl, r5
			int y = c + index_i;
 80057c6:	eb09 0107 	add.w	r1, r9, r7

			block_t block = get_block_with_pixels_from_WORLD(x, y);
 80057ca:	b289      	uxth	r1, r1
 80057cc:	b280      	uxth	r0, r0
 80057ce:	f7fe fc4b 	bl	8004068 <get_block_with_pixels_from_WORLD>
			uint16_t* material_xy = map_name_to_material(block);
 80057d2:	f7fc fd5d 	bl	8002290 <map_name_to_material>
 			UG_DrawPixel(j, i, material_xy[0]);
 80057d6:	8802      	ldrh	r2, [r0, #0]
 80057d8:	4631      	mov	r1, r6
 80057da:	4620      	mov	r0, r4
 80057dc:	f006 fdec 	bl	800c3b8 <UG_DrawPixel>
 			index_j++;
 80057e0:	3501      	adds	r5, #1
 80057e2:	b2ed      	uxtb	r5, r5
		for (posy_pixel j = left; j <= right; j++) {
 80057e4:	3401      	adds	r4, #1
 80057e6:	b224      	sxth	r4, r4
 80057e8:	4544      	cmp	r4, r8
 80057ea:	ddea      	ble.n	80057c2 <overdraw_background_rectangle+0x52>
		}
		index_i++;
 80057ec:	3701      	adds	r7, #1
 80057ee:	b2ff      	uxtb	r7, r7
	for (posx_pixel i = top; i <= bottom; i++) {
 80057f0:	3601      	adds	r6, #1
 80057f2:	b236      	sxth	r6, r6
 80057f4:	455e      	cmp	r6, fp
 80057f6:	dc02      	bgt.n	80057fe <overdraw_background_rectangle+0x8e>
		for (posy_pixel j = left; j <= right; j++) {
 80057f8:	9c01      	ldr	r4, [sp, #4]
		uint8_t index_j = 0;
 80057fa:	2500      	movs	r5, #0
 80057fc:	e7f4      	b.n	80057e8 <overdraw_background_rectangle+0x78>
	}
}
 80057fe:	b003      	add	sp, #12
 8005800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005804 <overdraw_background_pixel>:

void overdraw_background_pixel(posx_pixel x1, posx_pixel y1) {
 8005804:	b538      	push	{r3, r4, r5, lr}
 8005806:	460d      	mov	r5, r1

	// transform the pixels in position world to pixels in scene
	posx_pixel overdraw_x = world_pixel_to_scene_pixel_y_no_band(x1);
 8005808:	f7fe fc82 	bl	8004110 <world_pixel_to_scene_pixel_y_no_band>
 800580c:	4604      	mov	r4, r0
	posx_pixel overdraw_y = world_pixel_to_scene_pixel_y_no_band(y1);
 800580e:	4628      	mov	r0, r5
 8005810:	f7fe fc7e 	bl	8004110 <world_pixel_to_scene_pixel_y_no_band>
 8005814:	4605      	mov	r5, r0

	block_t block = get_block_with_pixels_from_WORLD(overdraw_x, overdraw_y);
 8005816:	b281      	uxth	r1, r0
 8005818:	b2a0      	uxth	r0, r4
 800581a:	f7fe fc25 	bl	8004068 <get_block_with_pixels_from_WORLD>
	uint16_t* material_xy = map_name_to_material(block);
 800581e:	f7fc fd37 	bl	8002290 <map_name_to_material>
	UG_DrawPixel(overdraw_x, overdraw_y, material_xy[0]);
 8005822:	8802      	ldrh	r2, [r0, #0]
 8005824:	4629      	mov	r1, r5
 8005826:	4620      	mov	r0, r4
 8005828:	f006 fdc6 	bl	800c3b8 <UG_DrawPixel>
}
 800582c:	bd38      	pop	{r3, r4, r5, pc}

0800582e <set_velocity>:
#include "velocity.h"


// update velocity of struct vel
void set_velocity(velocity* vel, short x, short y) {
	vel->x = x;
 800582e:	8001      	strh	r1, [r0, #0]
	vel->y = y;
 8005830:	8042      	strh	r2, [r0, #2]
}
 8005832:	4770      	bx	lr

08005834 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   r0, =_estack
 8005834:	480d      	ldr	r0, [pc, #52]	; (800586c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005836:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005838:	480d      	ldr	r0, [pc, #52]	; (8005870 <LoopForever+0x6>)
  ldr r1, =_edata
 800583a:	490e      	ldr	r1, [pc, #56]	; (8005874 <LoopForever+0xa>)
  ldr r2, =_sidata
 800583c:	4a0e      	ldr	r2, [pc, #56]	; (8005878 <LoopForever+0xe>)
  movs r3, #0
 800583e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005840:	e002      	b.n	8005848 <LoopCopyDataInit>

08005842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005846:	3304      	adds	r3, #4

08005848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800584a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800584c:	d3f9      	bcc.n	8005842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800584e:	4a0b      	ldr	r2, [pc, #44]	; (800587c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005850:	4c0b      	ldr	r4, [pc, #44]	; (8005880 <LoopForever+0x16>)
  movs r3, #0
 8005852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005854:	e001      	b.n	800585a <LoopFillZerobss>

08005856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005858:	3204      	adds	r2, #4

0800585a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800585a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800585c:	d3fb      	bcc.n	8005856 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800585e:	f7fe fe05 	bl	800446c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005862:	f009 f851 	bl	800e908 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005866:	f7fc fbc9 	bl	8001ffc <main>

0800586a <LoopForever>:

LoopForever:
    b LoopForever
 800586a:	e7fe      	b.n	800586a <LoopForever>
	  ldr   r0, =_estack
 800586c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005874:	20001558 	.word	0x20001558
  ldr r2, =_sidata
 8005878:	080145f8 	.word	0x080145f8
  ldr r2, =_sbss
 800587c:	20001558 	.word	0x20001558
  ldr r4, =_ebss
 8005880:	2001400c 	.word	0x2001400c

08005884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005884:	e7fe      	b.n	8005884 <ADC1_2_IRQHandler>
	...

08005888 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8005888:	4b10      	ldr	r3, [pc, #64]	; (80058cc <HAL_InitTick+0x44>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	b90b      	cbnz	r3, 8005892 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800588e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8005890:	4770      	bx	lr
{
 8005892:	b510      	push	{r4, lr}
 8005894:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800589a:	fbb0 f3f3 	udiv	r3, r0, r3
 800589e:	4a0c      	ldr	r2, [pc, #48]	; (80058d0 <HAL_InitTick+0x48>)
 80058a0:	6810      	ldr	r0, [r2, #0]
 80058a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80058a6:	f000 fec1 	bl	800662c <HAL_SYSTICK_Config>
 80058aa:	b968      	cbnz	r0, 80058c8 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058ac:	2c0f      	cmp	r4, #15
 80058ae:	d901      	bls.n	80058b4 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80058b0:	2001      	movs	r0, #1
 80058b2:	e00a      	b.n	80058ca <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058b4:	2200      	movs	r2, #0
 80058b6:	4621      	mov	r1, r4
 80058b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058bc:	f000 fe70 	bl	80065a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80058c0:	4b04      	ldr	r3, [pc, #16]	; (80058d4 <HAL_InitTick+0x4c>)
 80058c2:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80058c4:	2000      	movs	r0, #0
 80058c6:	e000      	b.n	80058ca <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80058c8:	2001      	movs	r0, #1
}
 80058ca:	bd10      	pop	{r4, pc}
 80058cc:	20001204 	.word	0x20001204
 80058d0:	20001058 	.word	0x20001058
 80058d4:	20001208 	.word	0x20001208

080058d8 <HAL_Init>:
{
 80058d8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058da:	2003      	movs	r0, #3
 80058dc:	f000 fe4e 	bl	800657c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80058e0:	2000      	movs	r0, #0
 80058e2:	f7ff ffd1 	bl	8005888 <HAL_InitTick>
 80058e6:	b110      	cbz	r0, 80058ee <HAL_Init+0x16>
    status = HAL_ERROR;
 80058e8:	2401      	movs	r4, #1
}
 80058ea:	4620      	mov	r0, r4
 80058ec:	bd10      	pop	{r4, pc}
 80058ee:	4604      	mov	r4, r0
    HAL_MspInit();
 80058f0:	f7fe fca6 	bl	8004240 <HAL_MspInit>
 80058f4:	e7f9      	b.n	80058ea <HAL_Init+0x12>
	...

080058f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80058f8:	4a03      	ldr	r2, [pc, #12]	; (8005908 <HAL_IncTick+0x10>)
 80058fa:	6813      	ldr	r3, [r2, #0]
 80058fc:	4903      	ldr	r1, [pc, #12]	; (800590c <HAL_IncTick+0x14>)
 80058fe:	6809      	ldr	r1, [r1, #0]
 8005900:	440b      	add	r3, r1
 8005902:	6013      	str	r3, [r2, #0]
}
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	2001259c 	.word	0x2001259c
 800590c:	20001204 	.word	0x20001204

08005910 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005910:	4b01      	ldr	r3, [pc, #4]	; (8005918 <HAL_GetTick+0x8>)
 8005912:	6818      	ldr	r0, [r3, #0]
}
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	2001259c 	.word	0x2001259c

0800591c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005920:	f7ff fff6 	bl	8005910 <HAL_GetTick>
 8005924:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005926:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800592a:	d002      	beq.n	8005932 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800592c:	4b04      	ldr	r3, [pc, #16]	; (8005940 <HAL_Delay+0x24>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005932:	f7ff ffed 	bl	8005910 <HAL_GetTick>
 8005936:	1b40      	subs	r0, r0, r5
 8005938:	42a0      	cmp	r0, r4
 800593a:	d3fa      	bcc.n	8005932 <HAL_Delay+0x16>
  {
  }
}
 800593c:	bd38      	pop	{r3, r4, r5, pc}
 800593e:	bf00      	nop
 8005940:	20001204 	.word	0x20001204

08005944 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005944:	b530      	push	{r4, r5, lr}
 8005946:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005948:	2300      	movs	r3, #0
 800594a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800594c:	2800      	cmp	r0, #0
 800594e:	f000 8138 	beq.w	8005bc2 <HAL_ADC_Init+0x27e>
 8005952:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005954:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005956:	b313      	cbz	r3, 800599e <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005958:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8005960:	d005      	beq.n	800596e <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8005968:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800596c:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800596e:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005970:	6893      	ldr	r3, [r2, #8]
 8005972:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005976:	d11f      	bne.n	80059b8 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 8005978:	6893      	ldr	r3, [r2, #8]
 800597a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800597e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005986:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005988:	4b8f      	ldr	r3, [pc, #572]	; (8005bc8 <HAL_ADC_Init+0x284>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	099b      	lsrs	r3, r3, #6
 800598e:	4a8f      	ldr	r2, [pc, #572]	; (8005bcc <HAL_ADC_Init+0x288>)
 8005990:	fba2 2303 	umull	r2, r3, r2, r3
 8005994:	099b      	lsrs	r3, r3, #6
 8005996:	3301      	adds	r3, #1
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800599c:	e009      	b.n	80059b2 <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 800599e:	f7fb fd0f 	bl	80013c0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80059a2:	2300      	movs	r3, #0
 80059a4:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80059a6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80059aa:	e7d5      	b.n	8005958 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80059ac:	9b01      	ldr	r3, [sp, #4]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80059b2:	9b01      	ldr	r3, [sp, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1f9      	bne.n	80059ac <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80059b8:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80059ba:	6893      	ldr	r3, [r2, #8]
 80059bc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80059c0:	d13d      	bne.n	8005a3e <HAL_ADC_Init+0xfa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80059c4:	f043 0310 	orr.w	r3, r3, #16
 80059c8:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80059cc:	f043 0301 	orr.w	r3, r3, #1
 80059d0:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80059d2:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059d4:	6893      	ldr	r3, [r2, #8]
 80059d6:	f013 0304 	ands.w	r3, r3, #4
 80059da:	d000      	beq.n	80059de <HAL_ADC_Init+0x9a>
 80059dc:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80059de:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80059e0:	f011 0f10 	tst.w	r1, #16
 80059e4:	f040 80e6 	bne.w	8005bb4 <HAL_ADC_Init+0x270>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f040 80e3 	bne.w	8005bb4 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059ee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80059f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80059f4:	f043 0302 	orr.w	r3, r3, #2
 80059f8:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80059fa:	6893      	ldr	r3, [r2, #8]
 80059fc:	f013 0f01 	tst.w	r3, #1
 8005a00:	d13e      	bne.n	8005a80 <HAL_ADC_Init+0x13c>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a02:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005a06:	d01c      	beq.n	8005a42 <HAL_ADC_Init+0xfe>
 8005a08:	4b71      	ldr	r3, [pc, #452]	; (8005bd0 <HAL_ADC_Init+0x28c>)
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d019      	beq.n	8005a42 <HAL_ADC_Init+0xfe>
 8005a0e:	4b71      	ldr	r3, [pc, #452]	; (8005bd4 <HAL_ADC_Init+0x290>)
 8005a10:	6899      	ldr	r1, [r3, #8]
 8005a12:	f011 0101 	ands.w	r1, r1, #1
 8005a16:	d000      	beq.n	8005a1a <HAL_ADC_Init+0xd6>
 8005a18:	2101      	movs	r1, #1
 8005a1a:	4b6f      	ldr	r3, [pc, #444]	; (8005bd8 <HAL_ADC_Init+0x294>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f013 0301 	ands.w	r3, r3, #1
 8005a22:	d000      	beq.n	8005a26 <HAL_ADC_Init+0xe2>
 8005a24:	2301      	movs	r3, #1
 8005a26:	430b      	orrs	r3, r1
 8005a28:	496c      	ldr	r1, [pc, #432]	; (8005bdc <HAL_ADC_Init+0x298>)
 8005a2a:	6889      	ldr	r1, [r1, #8]
 8005a2c:	f011 0101 	ands.w	r1, r1, #1
 8005a30:	d000      	beq.n	8005a34 <HAL_ADC_Init+0xf0>
 8005a32:	2101      	movs	r1, #1
 8005a34:	430b      	orrs	r3, r1
 8005a36:	bf0c      	ite	eq
 8005a38:	2301      	moveq	r3, #1
 8005a3a:	2300      	movne	r3, #0
 8005a3c:	e012      	b.n	8005a64 <HAL_ADC_Init+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a3e:	2000      	movs	r0, #0
 8005a40:	e7c8      	b.n	80059d4 <HAL_ADC_Init+0x90>
 8005a42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f013 0301 	ands.w	r3, r3, #1
 8005a4c:	d000      	beq.n	8005a50 <HAL_ADC_Init+0x10c>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	495f      	ldr	r1, [pc, #380]	; (8005bd0 <HAL_ADC_Init+0x28c>)
 8005a52:	6889      	ldr	r1, [r1, #8]
 8005a54:	f011 0101 	ands.w	r1, r1, #1
 8005a58:	d000      	beq.n	8005a5c <HAL_ADC_Init+0x118>
 8005a5a:	2101      	movs	r1, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	bf0c      	ite	eq
 8005a60:	2301      	moveq	r3, #1
 8005a62:	2300      	movne	r3, #0
 8005a64:	b163      	cbz	r3, 8005a80 <HAL_ADC_Init+0x13c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005a66:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005a6a:	d072      	beq.n	8005b52 <HAL_ADC_Init+0x20e>
 8005a6c:	4b58      	ldr	r3, [pc, #352]	; (8005bd0 <HAL_ADC_Init+0x28c>)
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d06d      	beq.n	8005b4e <HAL_ADC_Init+0x20a>
 8005a72:	495b      	ldr	r1, [pc, #364]	; (8005be0 <HAL_ADC_Init+0x29c>)
 8005a74:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005a76:	688a      	ldr	r2, [r1, #8]
 8005a78:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005a80:	7f62      	ldrb	r2, [r4, #29]
                hadc->Init.Overrun                                                     |
 8005a82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005a84:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 8005a88:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 8005a8a:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 8005a8c:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 8005a8e:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005a90:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005a94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005a98:	2a01      	cmp	r2, #1
 8005a9a:	d05c      	beq.n	8005b56 <HAL_ADC_Init+0x212>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005a9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a9e:	b122      	cbz	r2, 8005aaa <HAL_ADC_Init+0x166>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005aa0:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005aa4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005aa6:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005aa8:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005aaa:	6821      	ldr	r1, [r4, #0]
 8005aac:	68cd      	ldr	r5, [r1, #12]
 8005aae:	4a4d      	ldr	r2, [pc, #308]	; (8005be4 <HAL_ADC_Init+0x2a0>)
 8005ab0:	402a      	ands	r2, r5
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60cb      	str	r3, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005ab6:	6822      	ldr	r2, [r4, #0]
 8005ab8:	6913      	ldr	r3, [r2, #16]
 8005aba:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005abe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ac0:	430b      	orrs	r3, r1
 8005ac2:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ac4:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ac6:	688b      	ldr	r3, [r1, #8]
 8005ac8:	f013 0304 	ands.w	r3, r3, #4
 8005acc:	d000      	beq.n	8005ad0 <HAL_ADC_Init+0x18c>
 8005ace:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005ad0:	688a      	ldr	r2, [r1, #8]
 8005ad2:	f012 0208 	ands.w	r2, r2, #8
 8005ad6:	d000      	beq.n	8005ada <HAL_ADC_Init+0x196>
 8005ad8:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ada:	bb4b      	cbnz	r3, 8005b30 <HAL_ADC_Init+0x1ec>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005adc:	bb42      	cbnz	r2, 8005b30 <HAL_ADC_Init+0x1ec>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005ade:	7f22      	ldrb	r2, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005ae0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005ae4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005ae6:	ea43 3282 	orr.w	r2, r3, r2, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005aea:	68cb      	ldr	r3, [r1, #12]
 8005aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005af0:	f023 0302 	bic.w	r3, r3, #2
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005af8:	6923      	ldr	r3, [r4, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d030      	beq.n	8005b60 <HAL_ADC_Init+0x21c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005afe:	6822      	ldr	r2, [r4, #0]
 8005b00:	6913      	ldr	r3, [r2, #16]
 8005b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b06:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005b08:	6822      	ldr	r2, [r4, #0]
 8005b0a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005b0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005b12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b16:	6921      	ldr	r1, [r4, #16]
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005b1e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d02b      	beq.n	8005b7e <HAL_ADC_Init+0x23a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005b26:	6822      	ldr	r2, [r4, #0]
 8005b28:	6913      	ldr	r3, [r2, #16]
 8005b2a:	f023 0301 	bic.w	r3, r3, #1
 8005b2e:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005b30:	6963      	ldr	r3, [r4, #20]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d035      	beq.n	8005ba2 <HAL_ADC_Init+0x25e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005b36:	6822      	ldr	r2, [r4, #0]
 8005b38:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005b3a:	f023 030f 	bic.w	r3, r3, #15
 8005b3e:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005b40:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005b42:	f023 0303 	bic.w	r3, r3, #3
 8005b46:	f043 0301 	orr.w	r3, r3, #1
 8005b4a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005b4c:	e037      	b.n	8005bbe <HAL_ADC_Init+0x27a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005b4e:	4926      	ldr	r1, [pc, #152]	; (8005be8 <HAL_ADC_Init+0x2a4>)
 8005b50:	e790      	b.n	8005a74 <HAL_ADC_Init+0x130>
 8005b52:	4925      	ldr	r1, [pc, #148]	; (8005be8 <HAL_ADC_Init+0x2a4>)
 8005b54:	e78e      	b.n	8005a74 <HAL_ADC_Init+0x130>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005b56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005b58:	3a01      	subs	r2, #1
 8005b5a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8005b5e:	e79d      	b.n	8005a9c <HAL_ADC_Init+0x158>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005b60:	6822      	ldr	r2, [r4, #0]
 8005b62:	6913      	ldr	r3, [r2, #16]
 8005b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b68:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005b6a:	6822      	ldr	r2, [r4, #0]
 8005b6c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005b70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005b74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b78:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005b7c:	e7cf      	b.n	8005b1e <HAL_ADC_Init+0x1da>
        MODIFY_REG(hadc->Instance->CFGR2,
 8005b7e:	6821      	ldr	r1, [r4, #0]
 8005b80:	690b      	ldr	r3, [r1, #16]
 8005b82:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005b86:	f023 0304 	bic.w	r3, r3, #4
 8005b8a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005b8c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8005b8e:	432a      	orrs	r2, r5
 8005b90:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005b92:	432a      	orrs	r2, r5
 8005b94:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8005b96:	432a      	orrs	r2, r5
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f043 0301 	orr.w	r3, r3, #1
 8005b9e:	610b      	str	r3, [r1, #16]
 8005ba0:	e7c6      	b.n	8005b30 <HAL_ADC_Init+0x1ec>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005ba2:	6821      	ldr	r1, [r4, #0]
 8005ba4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8005ba6:	f023 030f 	bic.w	r3, r3, #15
 8005baa:	6a22      	ldr	r2, [r4, #32]
 8005bac:	3a01      	subs	r2, #1
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	630b      	str	r3, [r1, #48]	; 0x30
 8005bb2:	e7c5      	b.n	8005b40 <HAL_ADC_Init+0x1fc>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bb4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005bb6:	f043 0310 	orr.w	r3, r3, #16
 8005bba:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005bbc:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8005bbe:	b003      	add	sp, #12
 8005bc0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005bc2:	2001      	movs	r0, #1
 8005bc4:	e7fb      	b.n	8005bbe <HAL_ADC_Init+0x27a>
 8005bc6:	bf00      	nop
 8005bc8:	20001058 	.word	0x20001058
 8005bcc:	053e2d63 	.word	0x053e2d63
 8005bd0:	50000100 	.word	0x50000100
 8005bd4:	50000400 	.word	0x50000400
 8005bd8:	50000500 	.word	0x50000500
 8005bdc:	50000600 	.word	0x50000600
 8005be0:	50000700 	.word	0x50000700
 8005be4:	fff04007 	.word	0xfff04007
 8005be8:	50000300 	.word	0x50000300

08005bec <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005bec:	4770      	bx	lr

08005bee <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005bee:	4770      	bx	lr

08005bf0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005bf0:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005bf2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005bf4:	f7ff fffb 	bl	8005bee <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005bf8:	bd08      	pop	{r3, pc}

08005bfa <HAL_ADC_ErrorCallback>:
}
 8005bfa:	4770      	bx	lr

08005bfc <ADC_DMAConvCplt>:
{
 8005bfc:	b508      	push	{r3, lr}
 8005bfe:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c00:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005c02:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005c04:	f012 0f50 	tst.w	r2, #80	; 0x50
 8005c08:	d130      	bne.n	8005c6c <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c0a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005c0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c10:	65c3      	str	r3, [r0, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005c12:	6803      	ldr	r3, [r0, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	f012 0f08 	tst.w	r2, #8
 8005c1a:	d014      	beq.n	8005c46 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005c1c:	68da      	ldr	r2, [r3, #12]
 8005c1e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8005c22:	d120      	bne.n	8005c66 <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005c2a:	d11c      	bne.n	8005c66 <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c2c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005c2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c32:	65c3      	str	r3, [r0, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c34:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005c36:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005c3a:	d114      	bne.n	8005c66 <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c3c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005c3e:	f043 0301 	orr.w	r3, r3, #1
 8005c42:	65c3      	str	r3, [r0, #92]	; 0x5c
 8005c44:	e00f      	b.n	8005c66 <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f013 0f02 	tst.w	r3, #2
 8005c4c:	d10b      	bne.n	8005c66 <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c4e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c54:	65c3      	str	r3, [r0, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c56:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005c58:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005c5c:	d103      	bne.n	8005c66 <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c5e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005c60:	f043 0301 	orr.w	r3, r3, #1
 8005c64:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8005c66:	f7ff ffc1 	bl	8005bec <HAL_ADC_ConvCpltCallback>
}
 8005c6a:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005c6c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005c6e:	f012 0f10 	tst.w	r2, #16
 8005c72:	d104      	bne.n	8005c7e <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c74:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005c76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c78:	4618      	mov	r0, r3
 8005c7a:	4790      	blx	r2
}
 8005c7c:	e7f5      	b.n	8005c6a <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8005c7e:	f7ff ffbc 	bl	8005bfa <HAL_ADC_ErrorCallback>
 8005c82:	e7f2      	b.n	8005c6a <ADC_DMAConvCplt+0x6e>

08005c84 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c84:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c86:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c88:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c8e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005c90:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005c92:	f043 0304 	orr.w	r3, r3, #4
 8005c96:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c98:	f7ff ffaf 	bl	8005bfa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c9c:	bd08      	pop	{r3, pc}
	...

08005ca0 <HAL_ADC_ConfigChannel>:
{
 8005ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ca2:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8005ca8:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8005cac:	2a01      	cmp	r2, #1
 8005cae:	f000 8284 	beq.w	80061ba <HAL_ADC_ConfigChannel+0x51a>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005cba:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005cbc:	68a8      	ldr	r0, [r5, #8]
 8005cbe:	f010 0f04 	tst.w	r0, #4
 8005cc2:	d009      	beq.n	8005cd8 <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cc6:	f042 0220 	orr.w	r2, r2, #32
 8005cca:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8005ccc:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8005cd4:	b003      	add	sp, #12
 8005cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005cd8:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005cda:	3530      	adds	r5, #48	; 0x30
 8005cdc:	0a22      	lsrs	r2, r4, #8
 8005cde:	0092      	lsls	r2, r2, #2
 8005ce0:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8005ce4:	58a8      	ldr	r0, [r5, r2]
 8005ce6:	f004 0e1f 	and.w	lr, r4, #31
 8005cea:	241f      	movs	r4, #31
 8005cec:	fa04 f40e 	lsl.w	r4, r4, lr
 8005cf0:	ea20 0004 	bic.w	r0, r0, r4
 8005cf4:	680c      	ldr	r4, [r1, #0]
 8005cf6:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8005cfa:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005cfe:	ea40 000c 	orr.w	r0, r0, ip
 8005d02:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d04:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d06:	6882      	ldr	r2, [r0, #8]
 8005d08:	f012 0204 	ands.w	r2, r2, #4
 8005d0c:	d000      	beq.n	8005d10 <HAL_ADC_ConfigChannel+0x70>
 8005d0e:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005d10:	6884      	ldr	r4, [r0, #8]
 8005d12:	f014 0408 	ands.w	r4, r4, #8
 8005d16:	d000      	beq.n	8005d1a <HAL_ADC_ConfigChannel+0x7a>
 8005d18:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d1a:	2a00      	cmp	r2, #0
 8005d1c:	d150      	bne.n	8005dc0 <HAL_ADC_ConfigChannel+0x120>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d1e:	2c00      	cmp	r4, #0
 8005d20:	d14e      	bne.n	8005dc0 <HAL_ADC_ConfigChannel+0x120>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005d22:	688f      	ldr	r7, [r1, #8]
 8005d24:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 8005d28:	f000 8086 	beq.w	8005e38 <HAL_ADC_ConfigChannel+0x198>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005d2c:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005d2e:	3014      	adds	r0, #20
 8005d30:	0e72      	lsrs	r2, r6, #25
 8005d32:	0092      	lsls	r2, r2, #2
 8005d34:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8005d38:	5885      	ldr	r5, [r0, r2]
 8005d3a:	f3c6 5e04 	ubfx	lr, r6, #20, #5
 8005d3e:	f04f 0c07 	mov.w	ip, #7
 8005d42:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005d46:	ea25 0c0c 	bic.w	ip, r5, ip
 8005d4a:	fa07 f50e 	lsl.w	r5, r7, lr
 8005d4e:	ea4c 0505 	orr.w	r5, ip, r5
 8005d52:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005d54:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005d56:	6942      	ldr	r2, [r0, #20]
 8005d58:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005d5c:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005d5e:	694d      	ldr	r5, [r1, #20]
 8005d60:	6818      	ldr	r0, [r3, #0]
 8005d62:	68c2      	ldr	r2, [r0, #12]
 8005d64:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005d68:	0052      	lsls	r2, r2, #1
 8005d6a:	fa05 f202 	lsl.w	r2, r5, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005d6e:	690e      	ldr	r6, [r1, #16]
 8005d70:	2e04      	cmp	r6, #4
 8005d72:	d079      	beq.n	8005e68 <HAL_ADC_ConfigChannel+0x1c8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d74:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8005d76:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8005d7a:	4dae      	ldr	r5, [pc, #696]	; (8006034 <HAL_ADC_ConfigChannel+0x394>)
 8005d7c:	403d      	ands	r5, r7
 8005d7e:	680f      	ldr	r7, [r1, #0]
 8005d80:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 8005d84:	433a      	orrs	r2, r7
 8005d86:	4315      	orrs	r5, r2
 8005d88:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8005d8c:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	690e      	ldr	r6, [r1, #16]
 8005d94:	6988      	ldr	r0, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d96:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8005d98:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 8005d9c:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8005da0:	4328      	orrs	r0, r5
 8005da2:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	690d      	ldr	r5, [r1, #16]
 8005daa:	7f08      	ldrb	r0, [r1, #28]
 8005dac:	2801      	cmp	r0, #1
 8005dae:	d058      	beq.n	8005e62 <HAL_ADC_ConfigChannel+0x1c2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005db0:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8005db2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8005db6:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8005dba:	4304      	orrs	r4, r0
 8005dbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005dc0:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005dc2:	6890      	ldr	r0, [r2, #8]
 8005dc4:	f010 0f01 	tst.w	r0, #1
 8005dc8:	d112      	bne.n	8005df0 <HAL_ADC_ConfigChannel+0x150>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005dca:	6808      	ldr	r0, [r1, #0]
 8005dcc:	68cd      	ldr	r5, [r1, #12]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005dce:	4c9a      	ldr	r4, [pc, #616]	; (8006038 <HAL_ADC_ConfigChannel+0x398>)
 8005dd0:	42a5      	cmp	r5, r4
 8005dd2:	f000 80b1 	beq.w	8005f38 <HAL_ADC_ConfigChannel+0x298>
    CLEAR_BIT(ADCx->DIFSEL,
 8005dd6:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8005dda:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8005dde:	ea24 0000 	bic.w	r0, r4, r0
 8005de2:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005de6:	68c8      	ldr	r0, [r1, #12]
 8005de8:	4a93      	ldr	r2, [pc, #588]	; (8006038 <HAL_ADC_ConfigChannel+0x398>)
 8005dea:	4290      	cmp	r0, r2
 8005dec:	f000 80ac 	beq.w	8005f48 <HAL_ADC_ConfigChannel+0x2a8>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005df0:	680a      	ldr	r2, [r1, #0]
 8005df2:	4992      	ldr	r1, [pc, #584]	; (800603c <HAL_ADC_ConfigChannel+0x39c>)
 8005df4:	420a      	tst	r2, r1
 8005df6:	f000 81da 	beq.w	80061ae <HAL_ADC_ConfigChannel+0x50e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005dfa:	6819      	ldr	r1, [r3, #0]
 8005dfc:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8005e00:	f000 8173 	beq.w	80060ea <HAL_ADC_ConfigChannel+0x44a>
 8005e04:	488e      	ldr	r0, [pc, #568]	; (8006040 <HAL_ADC_ConfigChannel+0x3a0>)
 8005e06:	4281      	cmp	r1, r0
 8005e08:	f000 816c 	beq.w	80060e4 <HAL_ADC_ConfigChannel+0x444>
 8005e0c:	488d      	ldr	r0, [pc, #564]	; (8006044 <HAL_ADC_ConfigChannel+0x3a4>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005e0e:	6880      	ldr	r0, [r0, #8]
 8005e10:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005e14:	4d8c      	ldr	r5, [pc, #560]	; (8006048 <HAL_ADC_ConfigChannel+0x3a8>)
 8005e16:	42aa      	cmp	r2, r5
 8005e18:	f000 8169 	beq.w	80060ee <HAL_ADC_ConfigChannel+0x44e>
 8005e1c:	4d8b      	ldr	r5, [pc, #556]	; (800604c <HAL_ADC_ConfigChannel+0x3ac>)
 8005e1e:	42aa      	cmp	r2, r5
 8005e20:	f000 8165 	beq.w	80060ee <HAL_ADC_ConfigChannel+0x44e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e24:	4d8a      	ldr	r5, [pc, #552]	; (8006050 <HAL_ADC_ConfigChannel+0x3b0>)
 8005e26:	42aa      	cmp	r2, r5
 8005e28:	f000 8194 	beq.w	8006154 <HAL_ADC_ConfigChannel+0x4b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005e2c:	4d89      	ldr	r5, [pc, #548]	; (8006054 <HAL_ADC_ConfigChannel+0x3b4>)
 8005e2e:	42aa      	cmp	r2, r5
 8005e30:	f000 81a8 	beq.w	8006184 <HAL_ADC_ConfigChannel+0x4e4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e34:	2000      	movs	r0, #0
 8005e36:	e74a      	b.n	8005cce <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005e38:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005e3a:	3014      	adds	r0, #20
 8005e3c:	0e6a      	lsrs	r2, r5, #25
 8005e3e:	0092      	lsls	r2, r2, #2
 8005e40:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8005e44:	5886      	ldr	r6, [r0, r2]
 8005e46:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8005e4a:	2707      	movs	r7, #7
 8005e4c:	fa07 f505 	lsl.w	r5, r7, r5
 8005e50:	ea26 0505 	bic.w	r5, r6, r5
 8005e54:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005e56:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005e58:	6942      	ldr	r2, [r0, #20]
 8005e5a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005e5e:	6142      	str	r2, [r0, #20]
}
 8005e60:	e77d      	b.n	8005d5e <HAL_ADC_ConfigChannel+0xbe>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005e62:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8005e66:	e7a3      	b.n	8005db0 <HAL_ADC_ConfigChannel+0x110>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e68:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005e6a:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005e6c:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e70:	680a      	ldr	r2, [r1, #0]
 8005e72:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005e76:	bb85      	cbnz	r5, 8005eda <HAL_ADC_ConfigChannel+0x23a>
 8005e78:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005e7c:	4294      	cmp	r4, r2
 8005e7e:	d034      	beq.n	8005eea <HAL_ADC_ConfigChannel+0x24a>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005e80:	681c      	ldr	r4, [r3, #0]
 8005e82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e84:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005e86:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e8a:	680a      	ldr	r2, [r1, #0]
 8005e8c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005e90:	bb85      	cbnz	r5, 8005ef4 <HAL_ADC_ConfigChannel+0x254>
 8005e92:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005e96:	4290      	cmp	r0, r2
 8005e98:	d034      	beq.n	8005f04 <HAL_ADC_ConfigChannel+0x264>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005e9a:	681c      	ldr	r4, [r3, #0]
 8005e9c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8005e9e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005ea0:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ea4:	680a      	ldr	r2, [r1, #0]
 8005ea6:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005eaa:	bb85      	cbnz	r5, 8005f0e <HAL_ADC_ConfigChannel+0x26e>
 8005eac:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005eb0:	4290      	cmp	r0, r2
 8005eb2:	d034      	beq.n	8005f1e <HAL_ADC_ConfigChannel+0x27e>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005eb4:	681c      	ldr	r4, [r3, #0]
 8005eb6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005eb8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005eba:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ebe:	680a      	ldr	r2, [r1, #0]
 8005ec0:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005ec4:	bb85      	cbnz	r5, 8005f28 <HAL_ADC_ConfigChannel+0x288>
 8005ec6:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005eca:	4290      	cmp	r0, r2
 8005ecc:	f47f af78 	bne.w	8005dc0 <HAL_ADC_ConfigChannel+0x120>
  MODIFY_REG(*preg,
 8005ed0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005ed2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ed6:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 8005ed8:	e772      	b.n	8005dc0 <HAL_ADC_ConfigChannel+0x120>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eda:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005ede:	b112      	cbz	r2, 8005ee6 <HAL_ADC_ConfigChannel+0x246>
  return __builtin_clz(value);
 8005ee0:	fab2 f282 	clz	r2, r2
 8005ee4:	e7ca      	b.n	8005e7c <HAL_ADC_ConfigChannel+0x1dc>
    return 32U;
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	e7c8      	b.n	8005e7c <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(*preg,
 8005eea:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005eec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ef0:	6602      	str	r2, [r0, #96]	; 0x60
}
 8005ef2:	e7c5      	b.n	8005e80 <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005ef8:	b112      	cbz	r2, 8005f00 <HAL_ADC_ConfigChannel+0x260>
  return __builtin_clz(value);
 8005efa:	fab2 f282 	clz	r2, r2
 8005efe:	e7ca      	b.n	8005e96 <HAL_ADC_ConfigChannel+0x1f6>
    return 32U;
 8005f00:	2220      	movs	r2, #32
 8005f02:	e7c8      	b.n	8005e96 <HAL_ADC_ConfigChannel+0x1f6>
  MODIFY_REG(*preg,
 8005f04:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f0a:	6662      	str	r2, [r4, #100]	; 0x64
}
 8005f0c:	e7c5      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1fa>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f0e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005f12:	b112      	cbz	r2, 8005f1a <HAL_ADC_ConfigChannel+0x27a>
  return __builtin_clz(value);
 8005f14:	fab2 f282 	clz	r2, r2
 8005f18:	e7ca      	b.n	8005eb0 <HAL_ADC_ConfigChannel+0x210>
    return 32U;
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	e7c8      	b.n	8005eb0 <HAL_ADC_ConfigChannel+0x210>
  MODIFY_REG(*preg,
 8005f1e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8005f20:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f24:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8005f26:	e7c5      	b.n	8005eb4 <HAL_ADC_ConfigChannel+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f28:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005f2c:	b112      	cbz	r2, 8005f34 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8005f2e:	fab2 f282 	clz	r2, r2
 8005f32:	e7ca      	b.n	8005eca <HAL_ADC_ConfigChannel+0x22a>
    return 32U;
 8005f34:	2220      	movs	r2, #32
 8005f36:	e7c8      	b.n	8005eca <HAL_ADC_ConfigChannel+0x22a>
    SET_BIT(ADCx->DIFSEL,
 8005f38:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8005f3c:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8005f40:	4320      	orrs	r0, r4
 8005f42:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 8005f46:	e74e      	b.n	8005de6 <HAL_ADC_ConfigChannel+0x146>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f48:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f4a:	680a      	ldr	r2, [r1, #0]
 8005f4c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005f50:	2d00      	cmp	r5, #0
 8005f52:	d138      	bne.n	8005fc6 <HAL_ADC_ConfigChannel+0x326>
 8005f54:	0e90      	lsrs	r0, r2, #26
 8005f56:	3001      	adds	r0, #1
 8005f58:	f000 001f 	and.w	r0, r0, #31
 8005f5c:	2809      	cmp	r0, #9
 8005f5e:	bf8c      	ite	hi
 8005f60:	2000      	movhi	r0, #0
 8005f62:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d077      	beq.n	8006058 <HAL_ADC_ConfigChannel+0x3b8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f68:	2d00      	cmp	r5, #0
 8005f6a:	d13b      	bne.n	8005fe4 <HAL_ADC_ConfigChannel+0x344>
 8005f6c:	0e90      	lsrs	r0, r2, #26
 8005f6e:	3001      	adds	r0, #1
 8005f70:	0680      	lsls	r0, r0, #26
 8005f72:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005f76:	2d00      	cmp	r5, #0
 8005f78:	d140      	bne.n	8005ffc <HAL_ADC_ConfigChannel+0x35c>
 8005f7a:	0e96      	lsrs	r6, r2, #26
 8005f7c:	3601      	adds	r6, #1
 8005f7e:	f006 071f 	and.w	r7, r6, #31
 8005f82:	2601      	movs	r6, #1
 8005f84:	40be      	lsls	r6, r7
 8005f86:	4330      	orrs	r0, r6
 8005f88:	2d00      	cmp	r5, #0
 8005f8a:	d145      	bne.n	8006018 <HAL_ADC_ConfigChannel+0x378>
 8005f8c:	0e92      	lsrs	r2, r2, #26
 8005f8e:	3201      	adds	r2, #1
 8005f90:	f002 021f 	and.w	r2, r2, #31
 8005f94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005f98:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f9a:	4302      	orrs	r2, r0
 8005f9c:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005f9e:	f104 0614 	add.w	r6, r4, #20
 8005fa2:	0e55      	lsrs	r5, r2, #25
 8005fa4:	00ad      	lsls	r5, r5, #2
 8005fa6:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8005faa:	5974      	ldr	r4, [r6, r5]
 8005fac:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8005fb0:	f04f 0c07 	mov.w	ip, #7
 8005fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8005fb8:	ea24 0c0c 	bic.w	ip, r4, ip
 8005fbc:	4090      	lsls	r0, r2
 8005fbe:	ea4c 0000 	orr.w	r0, ip, r0
 8005fc2:	5170      	str	r0, [r6, r5]
}
 8005fc4:	e714      	b.n	8005df0 <HAL_ADC_ConfigChannel+0x150>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc6:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8005fca:	b148      	cbz	r0, 8005fe0 <HAL_ADC_ConfigChannel+0x340>
  return __builtin_clz(value);
 8005fcc:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	f000 001f 	and.w	r0, r0, #31
 8005fd6:	2809      	cmp	r0, #9
 8005fd8:	bf8c      	ite	hi
 8005fda:	2000      	movhi	r0, #0
 8005fdc:	2001      	movls	r0, #1
 8005fde:	e7c1      	b.n	8005f64 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8005fe0:	2020      	movs	r0, #32
 8005fe2:	e7f5      	b.n	8005fd0 <HAL_ADC_ConfigChannel+0x330>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe4:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8005fe8:	b130      	cbz	r0, 8005ff8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8005fea:	fab0 f080 	clz	r0, r0
 8005fee:	3001      	adds	r0, #1
 8005ff0:	0680      	lsls	r0, r0, #26
 8005ff2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005ff6:	e7be      	b.n	8005f76 <HAL_ADC_ConfigChannel+0x2d6>
    return 32U;
 8005ff8:	2020      	movs	r0, #32
 8005ffa:	e7f8      	b.n	8005fee <HAL_ADC_ConfigChannel+0x34e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ffc:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8006000:	b146      	cbz	r6, 8006014 <HAL_ADC_ConfigChannel+0x374>
  return __builtin_clz(value);
 8006002:	fab6 f686 	clz	r6, r6
 8006006:	3601      	adds	r6, #1
 8006008:	f006 061f 	and.w	r6, r6, #31
 800600c:	2701      	movs	r7, #1
 800600e:	fa07 f606 	lsl.w	r6, r7, r6
 8006012:	e7b8      	b.n	8005f86 <HAL_ADC_ConfigChannel+0x2e6>
    return 32U;
 8006014:	2620      	movs	r6, #32
 8006016:	e7f6      	b.n	8006006 <HAL_ADC_ConfigChannel+0x366>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006018:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800601c:	b142      	cbz	r2, 8006030 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800601e:	fab2 f282 	clz	r2, r2
 8006022:	3201      	adds	r2, #1
 8006024:	f002 021f 	and.w	r2, r2, #31
 8006028:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800602c:	0512      	lsls	r2, r2, #20
 800602e:	e7b4      	b.n	8005f9a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8006030:	2220      	movs	r2, #32
 8006032:	e7f6      	b.n	8006022 <HAL_ADC_ConfigChannel+0x382>
 8006034:	03fff000 	.word	0x03fff000
 8006038:	407f0000 	.word	0x407f0000
 800603c:	80080000 	.word	0x80080000
 8006040:	50000100 	.word	0x50000100
 8006044:	50000700 	.word	0x50000700
 8006048:	c3210000 	.word	0xc3210000
 800604c:	90c00010 	.word	0x90c00010
 8006050:	c7520000 	.word	0xc7520000
 8006054:	cb840000 	.word	0xcb840000
 8006058:	b9cd      	cbnz	r5, 800608e <HAL_ADC_ConfigChannel+0x3ee>
 800605a:	0e90      	lsrs	r0, r2, #26
 800605c:	3001      	adds	r0, #1
 800605e:	0680      	lsls	r0, r0, #26
 8006060:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006064:	b9fd      	cbnz	r5, 80060a6 <HAL_ADC_ConfigChannel+0x406>
 8006066:	0e96      	lsrs	r6, r2, #26
 8006068:	3601      	adds	r6, #1
 800606a:	f006 071f 	and.w	r7, r6, #31
 800606e:	2601      	movs	r6, #1
 8006070:	40be      	lsls	r6, r7
 8006072:	4330      	orrs	r0, r6
 8006074:	bb2d      	cbnz	r5, 80060c2 <HAL_ADC_ConfigChannel+0x422>
 8006076:	0e92      	lsrs	r2, r2, #26
 8006078:	3201      	adds	r2, #1
 800607a:	f002 021f 	and.w	r2, r2, #31
 800607e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006082:	3a1e      	subs	r2, #30
 8006084:	0512      	lsls	r2, r2, #20
 8006086:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800608a:	4302      	orrs	r2, r0
 800608c:	e786      	b.n	8005f9c <HAL_ADC_ConfigChannel+0x2fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800608e:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8006092:	b130      	cbz	r0, 80060a2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8006094:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006098:	3001      	adds	r0, #1
 800609a:	0680      	lsls	r0, r0, #26
 800609c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80060a0:	e7e0      	b.n	8006064 <HAL_ADC_ConfigChannel+0x3c4>
    return 32U;
 80060a2:	2020      	movs	r0, #32
 80060a4:	e7f8      	b.n	8006098 <HAL_ADC_ConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060a6:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80060aa:	b146      	cbz	r6, 80060be <HAL_ADC_ConfigChannel+0x41e>
  return __builtin_clz(value);
 80060ac:	fab6 f686 	clz	r6, r6
 80060b0:	3601      	adds	r6, #1
 80060b2:	f006 061f 	and.w	r6, r6, #31
 80060b6:	2701      	movs	r7, #1
 80060b8:	fa07 f606 	lsl.w	r6, r7, r6
 80060bc:	e7d9      	b.n	8006072 <HAL_ADC_ConfigChannel+0x3d2>
    return 32U;
 80060be:	2620      	movs	r6, #32
 80060c0:	e7f6      	b.n	80060b0 <HAL_ADC_ConfigChannel+0x410>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c2:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80060c6:	b15a      	cbz	r2, 80060e0 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 80060c8:	fab2 f282 	clz	r2, r2
 80060cc:	3201      	adds	r2, #1
 80060ce:	f002 021f 	and.w	r2, r2, #31
 80060d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80060d6:	3a1e      	subs	r2, #30
 80060d8:	0512      	lsls	r2, r2, #20
 80060da:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80060de:	e7d4      	b.n	800608a <HAL_ADC_ConfigChannel+0x3ea>
    return 32U;
 80060e0:	2220      	movs	r2, #32
 80060e2:	e7f3      	b.n	80060cc <HAL_ADC_ConfigChannel+0x42c>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80060e4:	f500 7000 	add.w	r0, r0, #512	; 0x200
 80060e8:	e691      	b.n	8005e0e <HAL_ADC_ConfigChannel+0x16e>
 80060ea:	4835      	ldr	r0, [pc, #212]	; (80061c0 <HAL_ADC_ConfigChannel+0x520>)
 80060ec:	e68f      	b.n	8005e0e <HAL_ADC_ConfigChannel+0x16e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80060ee:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80060f2:	f47f ae97 	bne.w	8005e24 <HAL_ADC_ConfigChannel+0x184>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80060f6:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80060fa:	d004      	beq.n	8006106 <HAL_ADC_ConfigChannel+0x466>
 80060fc:	4a31      	ldr	r2, [pc, #196]	; (80061c4 <HAL_ADC_ConfigChannel+0x524>)
 80060fe:	4291      	cmp	r1, r2
 8006100:	d001      	beq.n	8006106 <HAL_ADC_ConfigChannel+0x466>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006102:	2000      	movs	r0, #0
 8006104:	e5e3      	b.n	8005cce <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006106:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800610a:	d019      	beq.n	8006140 <HAL_ADC_ConfigChannel+0x4a0>
 800610c:	4a2e      	ldr	r2, [pc, #184]	; (80061c8 <HAL_ADC_ConfigChannel+0x528>)
 800610e:	4291      	cmp	r1, r2
 8006110:	d014      	beq.n	800613c <HAL_ADC_ConfigChannel+0x49c>
 8006112:	492e      	ldr	r1, [pc, #184]	; (80061cc <HAL_ADC_ConfigChannel+0x52c>)
 8006114:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006118:	688a      	ldr	r2, [r1, #8]
 800611a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800611e:	4314      	orrs	r4, r2
 8006120:	608c      	str	r4, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006122:	4a2b      	ldr	r2, [pc, #172]	; (80061d0 <HAL_ADC_ConfigChannel+0x530>)
 8006124:	6812      	ldr	r2, [r2, #0]
 8006126:	0992      	lsrs	r2, r2, #6
 8006128:	492a      	ldr	r1, [pc, #168]	; (80061d4 <HAL_ADC_ConfigChannel+0x534>)
 800612a:	fba1 1202 	umull	r1, r2, r1, r2
 800612e:	0992      	lsrs	r2, r2, #6
 8006130:	3201      	adds	r2, #1
 8006132:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006136:	0092      	lsls	r2, r2, #2
 8006138:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800613a:	e006      	b.n	800614a <HAL_ADC_ConfigChannel+0x4aa>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800613c:	4920      	ldr	r1, [pc, #128]	; (80061c0 <HAL_ADC_ConfigChannel+0x520>)
 800613e:	e7e9      	b.n	8006114 <HAL_ADC_ConfigChannel+0x474>
 8006140:	491f      	ldr	r1, [pc, #124]	; (80061c0 <HAL_ADC_ConfigChannel+0x520>)
 8006142:	e7e7      	b.n	8006114 <HAL_ADC_ConfigChannel+0x474>
            wait_loop_index--;
 8006144:	9a01      	ldr	r2, [sp, #4]
 8006146:	3a01      	subs	r2, #1
 8006148:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800614a:	9a01      	ldr	r2, [sp, #4]
 800614c:	2a00      	cmp	r2, #0
 800614e:	d1f9      	bne.n	8006144 <HAL_ADC_ConfigChannel+0x4a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006150:	2000      	movs	r0, #0
 8006152:	e5bc      	b.n	8005cce <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006154:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8006158:	f47f ae68 	bne.w	8005e2c <HAL_ADC_ConfigChannel+0x18c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800615c:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8006160:	d00e      	beq.n	8006180 <HAL_ADC_ConfigChannel+0x4e0>
 8006162:	4a19      	ldr	r2, [pc, #100]	; (80061c8 <HAL_ADC_ConfigChannel+0x528>)
 8006164:	4291      	cmp	r1, r2
 8006166:	d009      	beq.n	800617c <HAL_ADC_ConfigChannel+0x4dc>
 8006168:	4918      	ldr	r1, [pc, #96]	; (80061cc <HAL_ADC_ConfigChannel+0x52c>)
 800616a:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 800616e:	688a      	ldr	r2, [r1, #8]
 8006170:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8006174:	4314      	orrs	r4, r2
 8006176:	608c      	str	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006178:	2000      	movs	r0, #0
}
 800617a:	e5a8      	b.n	8005cce <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800617c:	4910      	ldr	r1, [pc, #64]	; (80061c0 <HAL_ADC_ConfigChannel+0x520>)
 800617e:	e7f4      	b.n	800616a <HAL_ADC_ConfigChannel+0x4ca>
 8006180:	490f      	ldr	r1, [pc, #60]	; (80061c0 <HAL_ADC_ConfigChannel+0x520>)
 8006182:	e7f2      	b.n	800616a <HAL_ADC_ConfigChannel+0x4ca>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006184:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8006188:	d113      	bne.n	80061b2 <HAL_ADC_ConfigChannel+0x512>
        if (ADC_VREFINT_INSTANCE(hadc))
 800618a:	4a0f      	ldr	r2, [pc, #60]	; (80061c8 <HAL_ADC_ConfigChannel+0x528>)
 800618c:	4291      	cmp	r1, r2
 800618e:	d012      	beq.n	80061b6 <HAL_ADC_ConfigChannel+0x516>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006190:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8006194:	d009      	beq.n	80061aa <HAL_ADC_ConfigChannel+0x50a>
 8006196:	480d      	ldr	r0, [pc, #52]	; (80061cc <HAL_ADC_ConfigChannel+0x52c>)
 8006198:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800619c:	6881      	ldr	r1, [r0, #8]
 800619e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80061a2:	430a      	orrs	r2, r1
 80061a4:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061a6:	2000      	movs	r0, #0
}
 80061a8:	e591      	b.n	8005cce <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80061aa:	4805      	ldr	r0, [pc, #20]	; (80061c0 <HAL_ADC_ConfigChannel+0x520>)
 80061ac:	e7f4      	b.n	8006198 <HAL_ADC_ConfigChannel+0x4f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061ae:	2000      	movs	r0, #0
 80061b0:	e58d      	b.n	8005cce <HAL_ADC_ConfigChannel+0x2e>
 80061b2:	2000      	movs	r0, #0
 80061b4:	e58b      	b.n	8005cce <HAL_ADC_ConfigChannel+0x2e>
 80061b6:	2000      	movs	r0, #0
 80061b8:	e589      	b.n	8005cce <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 80061ba:	2002      	movs	r0, #2
 80061bc:	e58a      	b.n	8005cd4 <HAL_ADC_ConfigChannel+0x34>
 80061be:	bf00      	nop
 80061c0:	50000300 	.word	0x50000300
 80061c4:	50000600 	.word	0x50000600
 80061c8:	50000100 	.word	0x50000100
 80061cc:	50000700 	.word	0x50000700
 80061d0:	20001058 	.word	0x20001058
 80061d4:	053e2d63 	.word	0x053e2d63

080061d8 <ADC_Enable>:
{
 80061d8:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80061da:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	f012 0f01 	tst.w	r2, #1
 80061e2:	d140      	bne.n	8006266 <ADC_Enable+0x8e>
 80061e4:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80061e6:	6899      	ldr	r1, [r3, #8]
 80061e8:	4a20      	ldr	r2, [pc, #128]	; (800626c <ADC_Enable+0x94>)
 80061ea:	4211      	tst	r1, r2
 80061ec:	d009      	beq.n	8006202 <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061ee:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80061f0:	f043 0310 	orr.w	r3, r3, #16
 80061f4:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061f6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80061f8:	f043 0301 	orr.w	r3, r3, #1
 80061fc:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 80061fe:	2001      	movs	r0, #1
 8006200:	e032      	b.n	8006268 <ADC_Enable+0x90>
  MODIFY_REG(ADCx->CR,
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006208:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800620c:	f042 0201 	orr.w	r2, r2, #1
 8006210:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006212:	f7ff fb7d 	bl	8005910 <HAL_GetTick>
 8006216:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	f012 0f01 	tst.w	r2, #1
 8006220:	d11f      	bne.n	8006262 <ADC_Enable+0x8a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	f012 0f01 	tst.w	r2, #1
 8006228:	d107      	bne.n	800623a <ADC_Enable+0x62>
  MODIFY_REG(ADCx->CR,
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006230:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006234:	f042 0201 	orr.w	r2, r2, #1
 8006238:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800623a:	f7ff fb69 	bl	8005910 <HAL_GetTick>
 800623e:	1b43      	subs	r3, r0, r5
 8006240:	2b02      	cmp	r3, #2
 8006242:	d9e9      	bls.n	8006218 <ADC_Enable+0x40>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f013 0f01 	tst.w	r3, #1
 800624c:	d1e4      	bne.n	8006218 <ADC_Enable+0x40>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800624e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006250:	f043 0310 	orr.w	r3, r3, #16
 8006254:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006256:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006258:	f043 0301 	orr.w	r3, r3, #1
 800625c:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 800625e:	2001      	movs	r0, #1
 8006260:	e002      	b.n	8006268 <ADC_Enable+0x90>
  return HAL_OK;
 8006262:	2000      	movs	r0, #0
 8006264:	e000      	b.n	8006268 <ADC_Enable+0x90>
 8006266:	2000      	movs	r0, #0
}
 8006268:	bd38      	pop	{r3, r4, r5, pc}
 800626a:	bf00      	nop
 800626c:	8000003f 	.word	0x8000003f

08006270 <HAL_ADC_Start_DMA>:
{
 8006270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006274:	4604      	mov	r4, r0
 8006276:	460f      	mov	r7, r1
 8006278:	4690      	mov	r8, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800627a:	6800      	ldr	r0, [r0, #0]
 800627c:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8006280:	d021      	beq.n	80062c6 <HAL_ADC_Start_DMA+0x56>
 8006282:	4b42      	ldr	r3, [pc, #264]	; (800638c <HAL_ADC_Start_DMA+0x11c>)
 8006284:	4298      	cmp	r0, r3
 8006286:	d01b      	beq.n	80062c0 <HAL_ADC_Start_DMA+0x50>
 8006288:	4b41      	ldr	r3, [pc, #260]	; (8006390 <HAL_ADC_Start_DMA+0x120>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800628a:	689e      	ldr	r6, [r3, #8]
 800628c:	f006 061f 	and.w	r6, r6, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006290:	6885      	ldr	r5, [r0, #8]
 8006292:	f015 0f04 	tst.w	r5, #4
 8006296:	d174      	bne.n	8006382 <HAL_ADC_Start_DMA+0x112>
    __HAL_LOCK(hadc);
 8006298:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800629c:	2b01      	cmp	r3, #1
 800629e:	d073      	beq.n	8006388 <HAL_ADC_Start_DMA+0x118>
 80062a0:	2301      	movs	r3, #1
 80062a2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80062a6:	4b3b      	ldr	r3, [pc, #236]	; (8006394 <HAL_ADC_Start_DMA+0x124>)
 80062a8:	4298      	cmp	r0, r3
 80062aa:	d00e      	beq.n	80062ca <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80062ac:	b16e      	cbz	r6, 80062ca <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80062ae:	2e05      	cmp	r6, #5
 80062b0:	d00b      	beq.n	80062ca <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80062b2:	2e09      	cmp	r6, #9
 80062b4:	d009      	beq.n	80062ca <HAL_ADC_Start_DMA+0x5a>
      __HAL_UNLOCK(hadc);
 80062b6:	2300      	movs	r3, #0
 80062b8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 80062bc:	2001      	movs	r0, #1
 80062be:	e061      	b.n	8006384 <HAL_ADC_Start_DMA+0x114>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80062c0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80062c4:	e7e1      	b.n	800628a <HAL_ADC_Start_DMA+0x1a>
 80062c6:	4b34      	ldr	r3, [pc, #208]	; (8006398 <HAL_ADC_Start_DMA+0x128>)
 80062c8:	e7df      	b.n	800628a <HAL_ADC_Start_DMA+0x1a>
      tmp_hal_status = ADC_Enable(hadc);
 80062ca:	4620      	mov	r0, r4
 80062cc:	f7ff ff84 	bl	80061d8 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d152      	bne.n	800637a <HAL_ADC_Start_DMA+0x10a>
        ADC_STATE_CLR_SET(hadc->State,
 80062d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80062d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80062da:	f023 0301 	bic.w	r3, r3, #1
 80062de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062e2:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	4a29      	ldr	r2, [pc, #164]	; (800638c <HAL_ADC_Start_DMA+0x11c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d040      	beq.n	800636e <HAL_ADC_Start_DMA+0xfe>
 80062ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d039      	beq.n	8006368 <HAL_ADC_Start_DMA+0xf8>
 80062f4:	461a      	mov	r2, r3
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d000      	beq.n	80062fc <HAL_ADC_Start_DMA+0x8c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80062fa:	b91e      	cbnz	r6, 8006304 <HAL_ADC_Start_DMA+0x94>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80062fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80062fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006302:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006304:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006306:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800630a:	d033      	beq.n	8006374 <HAL_ADC_Start_DMA+0x104>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800630c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800630e:	f023 0306 	bic.w	r3, r3, #6
 8006312:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006314:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006316:	4a21      	ldr	r2, [pc, #132]	; (800639c <HAL_ADC_Start_DMA+0x12c>)
 8006318:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800631a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800631c:	4a20      	ldr	r2, [pc, #128]	; (80063a0 <HAL_ADC_Start_DMA+0x130>)
 800631e:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006320:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006322:	4a20      	ldr	r2, [pc, #128]	; (80063a4 <HAL_ADC_Start_DMA+0x134>)
 8006324:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	221c      	movs	r2, #28
 800632a:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 800632c:	2300      	movs	r3, #0
 800632e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006332:	6822      	ldr	r2, [r4, #0]
 8006334:	6853      	ldr	r3, [r2, #4]
 8006336:	f043 0310 	orr.w	r3, r3, #16
 800633a:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800633c:	6822      	ldr	r2, [r4, #0]
 800633e:	68d3      	ldr	r3, [r2, #12]
 8006340:	f043 0301 	orr.w	r3, r3, #1
 8006344:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006346:	6821      	ldr	r1, [r4, #0]
 8006348:	4643      	mov	r3, r8
 800634a:	463a      	mov	r2, r7
 800634c:	3140      	adds	r1, #64	; 0x40
 800634e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006350:	f000 fc2a 	bl	8006ba8 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006354:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006356:	6893      	ldr	r3, [r2, #8]
 8006358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800635c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006360:	f043 0304 	orr.w	r3, r3, #4
 8006364:	6093      	str	r3, [r2, #8]
}
 8006366:	e00d      	b.n	8006384 <HAL_ADC_Start_DMA+0x114>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006368:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800636c:	e7c3      	b.n	80062f6 <HAL_ADC_Start_DMA+0x86>
 800636e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006372:	e7c0      	b.n	80062f6 <HAL_ADC_Start_DMA+0x86>
          ADC_CLEAR_ERRORCODE(hadc);
 8006374:	2300      	movs	r3, #0
 8006376:	6623      	str	r3, [r4, #96]	; 0x60
 8006378:	e7cc      	b.n	8006314 <HAL_ADC_Start_DMA+0xa4>
        __HAL_UNLOCK(hadc);
 800637a:	2300      	movs	r3, #0
 800637c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8006380:	e000      	b.n	8006384 <HAL_ADC_Start_DMA+0x114>
    tmp_hal_status = HAL_BUSY;
 8006382:	2002      	movs	r0, #2
}
 8006384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 8006388:	2002      	movs	r0, #2
 800638a:	e7fb      	b.n	8006384 <HAL_ADC_Start_DMA+0x114>
 800638c:	50000100 	.word	0x50000100
 8006390:	50000700 	.word	0x50000700
 8006394:	50000600 	.word	0x50000600
 8006398:	50000300 	.word	0x50000300
 800639c:	08005bfd 	.word	0x08005bfd
 80063a0:	08005bf1 	.word	0x08005bf1
 80063a4:	08005c85 	.word	0x08005c85

080063a8 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80063a8:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 80063ac:	2a01      	cmp	r2, #1
 80063ae:	f000 80d6 	beq.w	800655e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
{
 80063b2:	b410      	push	{r4}
 80063b4:	b09d      	sub	sp, #116	; 0x74
 80063b6:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80063b8:	2201      	movs	r2, #1
 80063ba:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80063be:	2200      	movs	r2, #0
 80063c0:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80063c2:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80063c4:	6800      	ldr	r0, [r0, #0]
 80063c6:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80063ca:	d047      	beq.n	800645c <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 80063cc:	4a65      	ldr	r2, [pc, #404]	; (8006564 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80063ce:	4290      	cmp	r0, r2
 80063d0:	d047      	beq.n	8006462 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 80063d2:	2200      	movs	r2, #0
 80063d4:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 80063d6:	9a01      	ldr	r2, [sp, #4]
 80063d8:	2a00      	cmp	r2, #0
 80063da:	d046      	beq.n	800646a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80063dc:	6892      	ldr	r2, [r2, #8]
 80063de:	f012 0204 	ands.w	r2, r2, #4
 80063e2:	d000      	beq.n	80063e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80063e4:	2201      	movs	r2, #1
 80063e6:	6884      	ldr	r4, [r0, #8]
 80063e8:	f014 0f04 	tst.w	r4, #4
 80063ec:	f040 80a7 	bne.w	800653e <HAL_ADCEx_MultiModeConfigChannel+0x196>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 80063f0:	2a00      	cmp	r2, #0
 80063f2:	f040 80a4 	bne.w	800653e <HAL_ADCEx_MultiModeConfigChannel+0x196>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80063f6:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80063fa:	d042      	beq.n	8006482 <HAL_ADCEx_MultiModeConfigChannel+0xda>
 80063fc:	4a5a      	ldr	r2, [pc, #360]	; (8006568 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80063fe:	4290      	cmp	r0, r2
 8006400:	d03c      	beq.n	800647c <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8006402:	4a5a      	ldr	r2, [pc, #360]	; (800656c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006404:	6808      	ldr	r0, [r1, #0]
 8006406:	2800      	cmp	r0, #0
 8006408:	d05c      	beq.n	80064c4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800640a:	6890      	ldr	r0, [r2, #8]
 800640c:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8006410:	684c      	ldr	r4, [r1, #4]
 8006412:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8006416:	ea44 344c 	orr.w	r4, r4, ip, lsl #13
 800641a:	4320      	orrs	r0, r4
 800641c:	6090      	str	r0, [r2, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800641e:	6818      	ldr	r0, [r3, #0]
 8006420:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8006424:	d02f      	beq.n	8006486 <HAL_ADCEx_MultiModeConfigChannel+0xde>
 8006426:	4c50      	ldr	r4, [pc, #320]	; (8006568 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006428:	42a0      	cmp	r0, r4
 800642a:	d02c      	beq.n	8006486 <HAL_ADCEx_MultiModeConfigChannel+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800642c:	484d      	ldr	r0, [pc, #308]	; (8006564 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800642e:	6884      	ldr	r4, [r0, #8]
 8006430:	f014 0401 	ands.w	r4, r4, #1
 8006434:	d000      	beq.n	8006438 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8006436:	2401      	movs	r4, #1
 8006438:	484d      	ldr	r0, [pc, #308]	; (8006570 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 800643a:	6880      	ldr	r0, [r0, #8]
 800643c:	f010 0001 	ands.w	r0, r0, #1
 8006440:	d000      	beq.n	8006444 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8006442:	2001      	movs	r0, #1
 8006444:	4320      	orrs	r0, r4
 8006446:	4c4b      	ldr	r4, [pc, #300]	; (8006574 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8006448:	68a4      	ldr	r4, [r4, #8]
 800644a:	f014 0401 	ands.w	r4, r4, #1
 800644e:	d000      	beq.n	8006452 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8006450:	2401      	movs	r4, #1
 8006452:	4320      	orrs	r0, r4
 8006454:	bf0c      	ite	eq
 8006456:	2001      	moveq	r0, #1
 8006458:	2000      	movne	r0, #0
 800645a:	e025      	b.n	80064a8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800645c:	4a42      	ldr	r2, [pc, #264]	; (8006568 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800645e:	9201      	str	r2, [sp, #4]
 8006460:	e7b9      	b.n	80063d6 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8006462:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006466:	9201      	str	r2, [sp, #4]
 8006468:	e7b5      	b.n	80063d6 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800646a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800646c:	f042 0220 	orr.w	r2, r2, #32
 8006470:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 8006478:	2001      	movs	r0, #1
 800647a:	e068      	b.n	800654e <HAL_ADCEx_MultiModeConfigChannel+0x1a6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800647c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006480:	e7c0      	b.n	8006404 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8006482:	4a3d      	ldr	r2, [pc, #244]	; (8006578 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006484:	e7be      	b.n	8006404 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8006486:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800648a:	6880      	ldr	r0, [r0, #8]
 800648c:	f010 0001 	ands.w	r0, r0, #1
 8006490:	d000      	beq.n	8006494 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8006492:	2001      	movs	r0, #1
 8006494:	4c34      	ldr	r4, [pc, #208]	; (8006568 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006496:	68a4      	ldr	r4, [r4, #8]
 8006498:	f014 0401 	ands.w	r4, r4, #1
 800649c:	d000      	beq.n	80064a0 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 800649e:	2401      	movs	r4, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064a0:	4320      	orrs	r0, r4
 80064a2:	bf0c      	ite	eq
 80064a4:	2001      	moveq	r0, #1
 80064a6:	2000      	movne	r0, #0
 80064a8:	2800      	cmp	r0, #0
 80064aa:	d054      	beq.n	8006556 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80064ac:	6890      	ldr	r0, [r2, #8]
 80064ae:	f420 6071 	bic.w	r0, r0, #3856	; 0xf10
 80064b2:	f020 000f 	bic.w	r0, r0, #15
 80064b6:	680c      	ldr	r4, [r1, #0]
 80064b8:	6889      	ldr	r1, [r1, #8]
 80064ba:	4321      	orrs	r1, r4
 80064bc:	4308      	orrs	r0, r1
 80064be:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064c0:	2000      	movs	r0, #0
 80064c2:	e041      	b.n	8006548 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80064c4:	6891      	ldr	r1, [r2, #8]
 80064c6:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80064ca:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064cc:	6819      	ldr	r1, [r3, #0]
 80064ce:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80064d2:	d01a      	beq.n	800650a <HAL_ADCEx_MultiModeConfigChannel+0x162>
 80064d4:	4824      	ldr	r0, [pc, #144]	; (8006568 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80064d6:	4281      	cmp	r1, r0
 80064d8:	d017      	beq.n	800650a <HAL_ADCEx_MultiModeConfigChannel+0x162>
 80064da:	4922      	ldr	r1, [pc, #136]	; (8006564 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80064dc:	6888      	ldr	r0, [r1, #8]
 80064de:	f010 0001 	ands.w	r0, r0, #1
 80064e2:	d000      	beq.n	80064e6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80064e4:	2001      	movs	r0, #1
 80064e6:	4922      	ldr	r1, [pc, #136]	; (8006570 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 80064e8:	6889      	ldr	r1, [r1, #8]
 80064ea:	f011 0101 	ands.w	r1, r1, #1
 80064ee:	d000      	beq.n	80064f2 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 80064f0:	2101      	movs	r1, #1
 80064f2:	4301      	orrs	r1, r0
 80064f4:	481f      	ldr	r0, [pc, #124]	; (8006574 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80064f6:	6880      	ldr	r0, [r0, #8]
 80064f8:	f010 0001 	ands.w	r0, r0, #1
 80064fc:	d000      	beq.n	8006500 <HAL_ADCEx_MultiModeConfigChannel+0x158>
 80064fe:	2001      	movs	r0, #1
 8006500:	4301      	orrs	r1, r0
 8006502:	bf0c      	ite	eq
 8006504:	2101      	moveq	r1, #1
 8006506:	2100      	movne	r1, #0
 8006508:	e010      	b.n	800652c <HAL_ADCEx_MultiModeConfigChannel+0x184>
 800650a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800650e:	6889      	ldr	r1, [r1, #8]
 8006510:	f011 0101 	ands.w	r1, r1, #1
 8006514:	d000      	beq.n	8006518 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006516:	2101      	movs	r1, #1
 8006518:	4813      	ldr	r0, [pc, #76]	; (8006568 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800651a:	6880      	ldr	r0, [r0, #8]
 800651c:	f010 0001 	ands.w	r0, r0, #1
 8006520:	d000      	beq.n	8006524 <HAL_ADCEx_MultiModeConfigChannel+0x17c>
 8006522:	2001      	movs	r0, #1
 8006524:	4301      	orrs	r1, r0
 8006526:	bf0c      	ite	eq
 8006528:	2101      	moveq	r1, #1
 800652a:	2100      	movne	r1, #0
 800652c:	b1a9      	cbz	r1, 800655a <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800652e:	6891      	ldr	r1, [r2, #8]
 8006530:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8006534:	f021 010f 	bic.w	r1, r1, #15
 8006538:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800653a:	2000      	movs	r0, #0
 800653c:	e004      	b.n	8006548 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800653e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006540:	f042 0220 	orr.w	r2, r2, #32
 8006544:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006546:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 800654e:	b01d      	add	sp, #116	; 0x74
 8006550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006554:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006556:	2000      	movs	r0, #0
 8006558:	e7f6      	b.n	8006548 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
 800655a:	2000      	movs	r0, #0
 800655c:	e7f4      	b.n	8006548 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  __HAL_LOCK(hadc);
 800655e:	2002      	movs	r0, #2
}
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	50000400 	.word	0x50000400
 8006568:	50000100 	.word	0x50000100
 800656c:	50000700 	.word	0x50000700
 8006570:	50000500 	.word	0x50000500
 8006574:	50000600 	.word	0x50000600
 8006578:	50000300 	.word	0x50000300

0800657c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800657c:	4a07      	ldr	r2, [pc, #28]	; (800659c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800657e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006580:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006584:	041b      	lsls	r3, r3, #16
 8006586:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006588:	0200      	lsls	r0, r0, #8
 800658a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800658e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8006590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006598:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800659a:	4770      	bx	lr
 800659c:	e000ed00 	.word	0xe000ed00

080065a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065a0:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065a2:	4b19      	ldr	r3, [pc, #100]	; (8006608 <HAL_NVIC_SetPriority+0x68>)
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065aa:	f1c3 0c07 	rsb	ip, r3, #7
 80065ae:	f1bc 0f04 	cmp.w	ip, #4
 80065b2:	bf28      	it	cs
 80065b4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065b8:	f103 0e04 	add.w	lr, r3, #4
 80065bc:	f1be 0f06 	cmp.w	lr, #6
 80065c0:	d918      	bls.n	80065f4 <HAL_NVIC_SetPriority+0x54>
 80065c2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065c4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80065c8:	fa0e fc0c 	lsl.w	ip, lr, ip
 80065cc:	ea21 010c 	bic.w	r1, r1, ip
 80065d0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065d2:	fa0e f303 	lsl.w	r3, lr, r3
 80065d6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065da:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80065dc:	2800      	cmp	r0, #0
 80065de:	db0b      	blt.n	80065f8 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065e0:	0109      	lsls	r1, r1, #4
 80065e2:	b2c9      	uxtb	r1, r1
 80065e4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80065e8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80065ec:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80065f0:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065f4:	2300      	movs	r3, #0
 80065f6:	e7e5      	b.n	80065c4 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065f8:	f000 000f 	and.w	r0, r0, #15
 80065fc:	0109      	lsls	r1, r1, #4
 80065fe:	b2c9      	uxtb	r1, r1
 8006600:	4b02      	ldr	r3, [pc, #8]	; (800660c <HAL_NVIC_SetPriority+0x6c>)
 8006602:	5419      	strb	r1, [r3, r0]
 8006604:	e7f4      	b.n	80065f0 <HAL_NVIC_SetPriority+0x50>
 8006606:	bf00      	nop
 8006608:	e000ed00 	.word	0xe000ed00
 800660c:	e000ed14 	.word	0xe000ed14

08006610 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006610:	2800      	cmp	r0, #0
 8006612:	db07      	blt.n	8006624 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006614:	f000 021f 	and.w	r2, r0, #31
 8006618:	0940      	lsrs	r0, r0, #5
 800661a:	2301      	movs	r3, #1
 800661c:	4093      	lsls	r3, r2
 800661e:	4a02      	ldr	r2, [pc, #8]	; (8006628 <HAL_NVIC_EnableIRQ+0x18>)
 8006620:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	e000e100 	.word	0xe000e100

0800662c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800662c:	3801      	subs	r0, #1
 800662e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006632:	d20b      	bcs.n	800664c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006634:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006638:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800663a:	4a05      	ldr	r2, [pc, #20]	; (8006650 <HAL_SYSTICK_Config+0x24>)
 800663c:	21f0      	movs	r1, #240	; 0xf0
 800663e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006642:	2000      	movs	r0, #0
 8006644:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006646:	2207      	movs	r2, #7
 8006648:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800664a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800664c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800664e:	4770      	bx	lr
 8006650:	e000ed00 	.word	0xe000ed00

08006654 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006654:	2800      	cmp	r0, #0
 8006656:	d038      	beq.n	80066ca <HAL_CRC_Init+0x76>
{
 8006658:	b510      	push	{r4, lr}
 800665a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800665c:	7f43      	ldrb	r3, [r0, #29]
 800665e:	b31b      	cbz	r3, 80066a8 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006660:	2302      	movs	r3, #2
 8006662:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006664:	7923      	ldrb	r3, [r4, #4]
 8006666:	bb1b      	cbnz	r3, 80066b0 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	4a19      	ldr	r2, [pc, #100]	; (80066d0 <HAL_CRC_Init+0x7c>)
 800666c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800666e:	6822      	ldr	r2, [r4, #0]
 8006670:	6893      	ldr	r3, [r2, #8]
 8006672:	f023 0318 	bic.w	r3, r3, #24
 8006676:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006678:	7963      	ldrb	r3, [r4, #5]
 800667a:	bb13      	cbnz	r3, 80066c2 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006682:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006684:	6822      	ldr	r2, [r4, #0]
 8006686:	6893      	ldr	r3, [r2, #8]
 8006688:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800668c:	6961      	ldr	r1, [r4, #20]
 800668e:	430b      	orrs	r3, r1
 8006690:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	6893      	ldr	r3, [r2, #8]
 8006696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800669a:	69a1      	ldr	r1, [r4, #24]
 800669c:	430b      	orrs	r3, r1
 800669e:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80066a0:	2301      	movs	r3, #1
 80066a2:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 80066a4:	2000      	movs	r0, #0
}
 80066a6:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80066a8:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80066aa:	f7fa fff5 	bl	8001698 <HAL_CRC_MspInit>
 80066ae:	e7d7      	b.n	8006660 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80066b0:	68e2      	ldr	r2, [r4, #12]
 80066b2:	68a1      	ldr	r1, [r4, #8]
 80066b4:	4620      	mov	r0, r4
 80066b6:	f000 f80d 	bl	80066d4 <HAL_CRCEx_Polynomial_Set>
 80066ba:	2800      	cmp	r0, #0
 80066bc:	d0dc      	beq.n	8006678 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 80066be:	2001      	movs	r0, #1
 80066c0:	e7f1      	b.n	80066a6 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	6922      	ldr	r2, [r4, #16]
 80066c6:	611a      	str	r2, [r3, #16]
 80066c8:	e7dc      	b.n	8006684 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 80066ca:	2001      	movs	r0, #1
}
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	04c11db7 	.word	0x04c11db7

080066d4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80066d4:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80066d6:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80066d8:	461c      	mov	r4, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	b134      	cbz	r4, 80066ec <HAL_CRCEx_Polynomial_Set+0x18>
 80066de:	f003 0c1f 	and.w	ip, r3, #31
 80066e2:	fa21 fc0c 	lsr.w	ip, r1, ip
 80066e6:	f01c 0f01 	tst.w	ip, #1
 80066ea:	d0f5      	beq.n	80066d8 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80066ec:	2a18      	cmp	r2, #24
 80066ee:	d822      	bhi.n	8006736 <HAL_CRCEx_Polynomial_Set+0x62>
 80066f0:	e8df f002 	tbb	[pc, r2]
 80066f4:	2121210f 	.word	0x2121210f
 80066f8:	21212121 	.word	0x21212121
 80066fc:	2121211d 	.word	0x2121211d
 8006700:	21212121 	.word	0x21212121
 8006704:	21212119 	.word	0x21212119
 8006708:	21212121 	.word	0x21212121
 800670c:	0d          	.byte	0x0d
 800670d:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800670e:	2b06      	cmp	r3, #6
 8006710:	d815      	bhi.n	800673e <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006712:	6803      	ldr	r3, [r0, #0]
 8006714:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006716:	6801      	ldr	r1, [r0, #0]
 8006718:	688b      	ldr	r3, [r1, #8]
 800671a:	f023 0318 	bic.w	r3, r3, #24
 800671e:	431a      	orrs	r2, r3
 8006720:	608a      	str	r2, [r1, #8]
 8006722:	2000      	movs	r0, #0
 8006724:	e008      	b.n	8006738 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 8006726:	2b07      	cmp	r3, #7
 8006728:	d9f3      	bls.n	8006712 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 800672a:	2001      	movs	r0, #1
 800672c:	e004      	b.n	8006738 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 800672e:	2b0f      	cmp	r3, #15
 8006730:	d9ef      	bls.n	8006712 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8006732:	2001      	movs	r0, #1
 8006734:	e000      	b.n	8006738 <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 8006736:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 8006738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800673c:	4770      	bx	lr
        status =   HAL_ERROR;
 800673e:	2001      	movs	r0, #1
 8006740:	e7fa      	b.n	8006738 <HAL_CRCEx_Polynomial_Set+0x64>

08006742 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8006742:	b170      	cbz	r0, 8006762 <HAL_DAC_Init+0x20>
{
 8006744:	b510      	push	{r4, lr}
 8006746:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006748:	7903      	ldrb	r3, [r0, #4]
 800674a:	b133      	cbz	r3, 800675a <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800674c:	2302      	movs	r3, #2
 800674e:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006750:	2000      	movs	r0, #0
 8006752:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006754:	2301      	movs	r3, #1
 8006756:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8006758:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800675a:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800675c:	f7fb f80e 	bl	800177c <HAL_DAC_MspInit>
 8006760:	e7f4      	b.n	800674c <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8006762:	2001      	movs	r0, #1
}
 8006764:	4770      	bx	lr
	...

08006768 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006768:	7943      	ldrb	r3, [r0, #5]
 800676a:	2b01      	cmp	r3, #1
 800676c:	f000 80f4 	beq.w	8006958 <HAL_DAC_ConfigChannel+0x1f0>
{
 8006770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006774:	4604      	mov	r4, r0
 8006776:	460e      	mov	r6, r1
 8006778:	4615      	mov	r5, r2
  __HAL_LOCK(hdac);
 800677a:	2301      	movs	r3, #1
 800677c:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800677e:	2302      	movs	r3, #2
 8006780:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006782:	688b      	ldr	r3, [r1, #8]
 8006784:	2b04      	cmp	r3, #4
 8006786:	d017      	beq.n	80067b8 <HAL_DAC_ConfigChannel+0x50>
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006788:	69f3      	ldr	r3, [r6, #28]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d05e      	beq.n	800684c <HAL_DAC_ConfigChannel+0xe4>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006792:	f005 0510 	and.w	r5, r5, #16
 8006796:	2307      	movs	r3, #7
 8006798:	40ab      	lsls	r3, r5
 800679a:	ea27 0703 	bic.w	r7, r7, r3
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800679e:	69b3      	ldr	r3, [r6, #24]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d060      	beq.n	8006866 <HAL_DAC_ConfigChannel+0xfe>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	f000 80bd 	beq.w	8006924 <HAL_DAC_ConfigChannel+0x1bc>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80067aa:	6973      	ldr	r3, [r6, #20]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f040 80bc 	bne.w	800692a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80067b2:	f04f 0801 	mov.w	r8, #1
 80067b6:	e058      	b.n	800686a <HAL_DAC_ConfigChannel+0x102>
    tickstart = HAL_GetTick();
 80067b8:	f7ff f8aa 	bl	8005910 <HAL_GetTick>
 80067bc:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 80067be:	b17d      	cbz	r5, 80067e0 <HAL_DAC_ConfigChannel+0x78>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	da3a      	bge.n	800683e <HAL_DAC_ConfigChannel+0xd6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80067c8:	f7ff f8a2 	bl	8005910 <HAL_GetTick>
 80067cc:	1bc0      	subs	r0, r0, r7
 80067ce:	2801      	cmp	r0, #1
 80067d0:	d9f6      	bls.n	80067c0 <HAL_DAC_ConfigChannel+0x58>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80067d2:	6923      	ldr	r3, [r4, #16]
 80067d4:	f043 0308 	orr.w	r3, r3, #8
 80067d8:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80067da:	2003      	movs	r0, #3
 80067dc:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 80067de:	e09f      	b.n	8006920 <HAL_DAC_ConfigChannel+0x1b8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80067e8:	d00b      	beq.n	8006802 <HAL_DAC_ConfigChannel+0x9a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80067ea:	f7ff f891 	bl	8005910 <HAL_GetTick>
 80067ee:	1bc0      	subs	r0, r0, r7
 80067f0:	2801      	cmp	r0, #1
 80067f2:	d9f5      	bls.n	80067e0 <HAL_DAC_ConfigChannel+0x78>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80067f4:	6923      	ldr	r3, [r4, #16]
 80067f6:	f043 0308 	orr.w	r3, r3, #8
 80067fa:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80067fc:	2003      	movs	r0, #3
 80067fe:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8006800:	e08e      	b.n	8006920 <HAL_DAC_ConfigChannel+0x1b8>
      HAL_Delay(1);
 8006802:	2001      	movs	r0, #1
 8006804:	f7ff f88a 	bl	800591c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800680c:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800680e:	6820      	ldr	r0, [r4, #0]
 8006810:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006812:	f005 0110 	and.w	r1, r5, #16
 8006816:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800681a:	408b      	lsls	r3, r1
 800681c:	ea22 0203 	bic.w	r2, r2, r3
 8006820:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006822:	408b      	lsls	r3, r1
 8006824:	431a      	orrs	r2, r3
 8006826:	6482      	str	r2, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006828:	6820      	ldr	r0, [r4, #0]
 800682a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800682c:	22ff      	movs	r2, #255	; 0xff
 800682e:	408a      	lsls	r2, r1
 8006830:	ea23 0302 	bic.w	r3, r3, r2
 8006834:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8006836:	408a      	lsls	r2, r1
 8006838:	4313      	orrs	r3, r2
 800683a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800683c:	e7a4      	b.n	8006788 <HAL_DAC_ConfigChannel+0x20>
      HAL_Delay(1U);
 800683e:	2001      	movs	r0, #1
 8006840:	f7ff f86c 	bl	800591c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006848:	645a      	str	r2, [r3, #68]	; 0x44
 800684a:	e7e0      	b.n	800680e <HAL_DAC_ConfigChannel+0xa6>
    tmpreg1 = hdac->Instance->CCR;
 800684c:	6821      	ldr	r1, [r4, #0]
 800684e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006850:	f005 0010 	and.w	r0, r5, #16
 8006854:	231f      	movs	r3, #31
 8006856:	4083      	lsls	r3, r0
 8006858:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800685c:	6a33      	ldr	r3, [r6, #32]
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800685e:	4083      	lsls	r3, r0
 8006860:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 8006862:	638b      	str	r3, [r1, #56]	; 0x38
 8006864:	e793      	b.n	800678e <HAL_DAC_ConfigChannel+0x26>
    connectOnChip = 0x00000000UL;
 8006866:	f04f 0800 	mov.w	r8, #0
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800686a:	68b3      	ldr	r3, [r6, #8]
 800686c:	6972      	ldr	r2, [r6, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	ea43 0308 	orr.w	r3, r3, r8
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006878:	40aa      	lsls	r2, r5
 800687a:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800687e:	7932      	ldrb	r2, [r6, #4]
 8006880:	2a01      	cmp	r2, #1
 8006882:	d055      	beq.n	8006930 <HAL_DAC_ConfigChannel+0x1c8>
 8006884:	f04f 0800 	mov.w	r8, #0
 8006888:	ea48 0303 	orr.w	r3, r8, r3
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800688c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006890:	40aa      	lsls	r2, r5
 8006892:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006896:	7972      	ldrb	r2, [r6, #5]
 8006898:	2a01      	cmp	r2, #1
 800689a:	d04c      	beq.n	8006936 <HAL_DAC_ConfigChannel+0x1ce>
 800689c:	f04f 0800 	mov.w	r8, #0
 80068a0:	ea48 0803 	orr.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80068a4:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80068a8:	6833      	ldr	r3, [r6, #0]
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d046      	beq.n	800693c <HAL_DAC_ConfigChannel+0x1d4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80068ae:	431f      	orrs	r7, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80068b0:	fa08 f805 	lsl.w	r8, r8, r5
 80068b4:	ea48 0707 	orr.w	r7, r8, r7
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80068bc:	6821      	ldr	r1, [r4, #0]
 80068be:	680b      	ldr	r3, [r1, #0]
 80068c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80068c4:	40aa      	lsls	r2, r5
 80068c6:	ea23 0302 	bic.w	r3, r3, r2
 80068ca:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80068cc:	6821      	ldr	r1, [r4, #0]
 80068ce:	680b      	ldr	r3, [r1, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80068d0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80068d4:	40aa      	lsls	r2, r5
 80068d6:	ea23 0202 	bic.w	r2, r3, r2
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80068da:	68f3      	ldr	r3, [r6, #12]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80068dc:	40ab      	lsls	r3, r5
 80068de:	4313      	orrs	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80068e0:	600b      	str	r3, [r1, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80068e2:	6821      	ldr	r1, [r4, #0]
 80068e4:	680b      	ldr	r3, [r1, #0]
 80068e6:	22c0      	movs	r2, #192	; 0xc0
 80068e8:	40aa      	lsls	r2, r5
 80068ea:	ea23 0302 	bic.w	r3, r3, r2
 80068ee:	600b      	str	r3, [r1, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80068f0:	68f2      	ldr	r2, [r6, #12]
 80068f2:	f3c2 0383 	ubfx	r3, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80068f6:	6932      	ldr	r2, [r6, #16]
 80068f8:	0892      	lsrs	r2, r2, #2
 80068fa:	0212      	lsls	r2, r2, #8
 80068fc:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8006900:	431a      	orrs	r2, r3
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006902:	6820      	ldr	r0, [r4, #0]
 8006904:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006906:	f640 710f 	movw	r1, #3855	; 0xf0f
 800690a:	40a9      	lsls	r1, r5
 800690c:	ea23 0301 	bic.w	r3, r3, r1
 8006910:	fa02 f505 	lsl.w	r5, r2, r5
 8006914:	431d      	orrs	r5, r3
 8006916:	6605      	str	r5, [r0, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006918:	2301      	movs	r3, #1
 800691a:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800691c:	2000      	movs	r0, #0
 800691e:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8006920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8006924:	f04f 0801 	mov.w	r8, #1
 8006928:	e79f      	b.n	800686a <HAL_DAC_ConfigChannel+0x102>
      connectOnChip = 0x00000000UL;
 800692a:	f04f 0800 	mov.w	r8, #0
 800692e:	e79c      	b.n	800686a <HAL_DAC_ConfigChannel+0x102>
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006930:	f44f 7880 	mov.w	r8, #256	; 0x100
 8006934:	e7a8      	b.n	8006888 <HAL_DAC_ConfigChannel+0x120>
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006936:	f44f 7800 	mov.w	r8, #512	; 0x200
 800693a:	e7b1      	b.n	80068a0 <HAL_DAC_ConfigChannel+0x138>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800693c:	f002 fd3a 	bl	80093b4 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006940:	4b06      	ldr	r3, [pc, #24]	; (800695c <HAL_DAC_ConfigChannel+0x1f4>)
 8006942:	4298      	cmp	r0, r3
 8006944:	d902      	bls.n	800694c <HAL_DAC_ConfigChannel+0x1e4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006946:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800694a:	e7b1      	b.n	80068b0 <HAL_DAC_ConfigChannel+0x148>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800694c:	4b04      	ldr	r3, [pc, #16]	; (8006960 <HAL_DAC_ConfigChannel+0x1f8>)
 800694e:	4298      	cmp	r0, r3
 8006950:	d9ae      	bls.n	80068b0 <HAL_DAC_ConfigChannel+0x148>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006952:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8006956:	e7ab      	b.n	80068b0 <HAL_DAC_ConfigChannel+0x148>
  __HAL_LOCK(hdac);
 8006958:	2002      	movs	r0, #2
}
 800695a:	4770      	bx	lr
 800695c:	09896800 	.word	0x09896800
 8006960:	04c4b400 	.word	0x04c4b400

08006964 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006964:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006966:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8006968:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800696a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800696c:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800696e:	b114      	cbz	r4, 8006976 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006970:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8006972:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8006974:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006976:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006978:	f004 0c1f 	and.w	ip, r4, #31
 800697c:	2401      	movs	r4, #1
 800697e:	fa04 f40c 	lsl.w	r4, r4, ip
 8006982:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8006984:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006986:	6804      	ldr	r4, [r0, #0]
 8006988:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800698a:	6883      	ldr	r3, [r0, #8]
 800698c:	2b10      	cmp	r3, #16
 800698e:	d005      	beq.n	800699c <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8006990:	6803      	ldr	r3, [r0, #0]
 8006992:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8006994:	6803      	ldr	r3, [r0, #0]
 8006996:	60da      	str	r2, [r3, #12]
  }
}
 8006998:	bc30      	pop	{r4, r5}
 800699a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800699c:	6803      	ldr	r3, [r0, #0]
 800699e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80069a0:	6803      	ldr	r3, [r0, #0]
 80069a2:	60d9      	str	r1, [r3, #12]
 80069a4:	e7f8      	b.n	8006998 <DMA_SetConfig+0x34>
	...

080069a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80069a8:	6803      	ldr	r3, [r0, #0]
 80069aa:	4a0c      	ldr	r2, [pc, #48]	; (80069dc <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d813      	bhi.n	80069d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80069b0:	490b      	ldr	r1, [pc, #44]	; (80069e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	3b08      	subs	r3, #8
 80069b6:	4a0b      	ldr	r2, [pc, #44]	; (80069e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 80069b8:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80069bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80069be:	f022 0203 	bic.w	r2, r2, #3
 80069c2:	440a      	add	r2, r1
 80069c4:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80069c6:	4a08      	ldr	r2, [pc, #32]	; (80069e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 80069c8:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80069ca:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80069ce:	2201      	movs	r2, #1
 80069d0:	fa02 f303 	lsl.w	r3, r2, r3
 80069d4:	6503      	str	r3, [r0, #80]	; 0x50
}
 80069d6:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80069d8:	4904      	ldr	r1, [pc, #16]	; (80069ec <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 80069da:	e7ea      	b.n	80069b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 80069dc:	40020407 	.word	0x40020407
 80069e0:	40020800 	.word	0x40020800
 80069e4:	cccccccd 	.word	0xcccccccd
 80069e8:	40020880 	.word	0x40020880
 80069ec:	40020820 	.word	0x40020820

080069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80069f0:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80069f2:	4a07      	ldr	r2, [pc, #28]	; (8006a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 80069f4:	441a      	add	r2, r3
 80069f6:	0092      	lsls	r2, r2, #2
 80069f8:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80069fa:	4a06      	ldr	r2, [pc, #24]	; (8006a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80069fc:	6582      	str	r2, [r0, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80069fe:	3b01      	subs	r3, #1
 8006a00:	f003 031f 	and.w	r3, r3, #31
 8006a04:	2201      	movs	r2, #1
 8006a06:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	1000823f 	.word	0x1000823f
 8006a14:	40020940 	.word	0x40020940

08006a18 <HAL_DMA_Init>:
  if (hdma == NULL)
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d05b      	beq.n	8006ad4 <HAL_DMA_Init+0xbc>
{
 8006a1c:	b510      	push	{r4, lr}
 8006a1e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006a20:	6801      	ldr	r1, [r0, #0]
 8006a22:	4b2d      	ldr	r3, [pc, #180]	; (8006ad8 <HAL_DMA_Init+0xc0>)
 8006a24:	4299      	cmp	r1, r3
 8006a26:	d83d      	bhi.n	8006aa4 <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006a28:	4b2c      	ldr	r3, [pc, #176]	; (8006adc <HAL_DMA_Init+0xc4>)
 8006a2a:	440b      	add	r3, r1
 8006a2c:	4a2c      	ldr	r2, [pc, #176]	; (8006ae0 <HAL_DMA_Init+0xc8>)
 8006a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a32:	091b      	lsrs	r3, r3, #4
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006a38:	4b2a      	ldr	r3, [pc, #168]	; (8006ae4 <HAL_DMA_Init+0xcc>)
 8006a3a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8006a42:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006a44:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8006a48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8006a4c:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a4e:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8006a50:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a52:	6920      	ldr	r0, [r4, #16]
 8006a54:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a56:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a58:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a5a:	69a0      	ldr	r0, [r4, #24]
 8006a5c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a5e:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a60:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a62:	6a20      	ldr	r0, [r4, #32]
 8006a64:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8006a66:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8006a68:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f7ff ff9c 	bl	80069a8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006a70:	68a3      	ldr	r3, [r4, #8]
 8006a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a76:	d020      	beq.n	8006aba <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006a78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006a7a:	7922      	ldrb	r2, [r4, #4]
 8006a7c:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a7e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006a80:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006a82:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006a84:	6863      	ldr	r3, [r4, #4]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	2b03      	cmp	r3, #3
 8006a8a:	d919      	bls.n	8006ac0 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006a90:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006a92:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a94:	2000      	movs	r0, #0
 8006a96:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8006a9e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8006aa2:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006aa4:	4b10      	ldr	r3, [pc, #64]	; (8006ae8 <HAL_DMA_Init+0xd0>)
 8006aa6:	440b      	add	r3, r1
 8006aa8:	4a0d      	ldr	r2, [pc, #52]	; (8006ae0 <HAL_DMA_Init+0xc8>)
 8006aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8006aae:	091b      	lsrs	r3, r3, #4
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006ab4:	4b0d      	ldr	r3, [pc, #52]	; (8006aec <HAL_DMA_Init+0xd4>)
 8006ab6:	6403      	str	r3, [r0, #64]	; 0x40
 8006ab8:	e7c0      	b.n	8006a3c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006aba:	2300      	movs	r3, #0
 8006abc:	6063      	str	r3, [r4, #4]
 8006abe:	e7db      	b.n	8006a78 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f7ff ff95 	bl	80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006ac6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006ac8:	2200      	movs	r2, #0
 8006aca:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006acc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ace:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006ad0:	605a      	str	r2, [r3, #4]
 8006ad2:	e7df      	b.n	8006a94 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8006ad4:	2001      	movs	r0, #1
}
 8006ad6:	4770      	bx	lr
 8006ad8:	40020407 	.word	0x40020407
 8006adc:	bffdfff8 	.word	0xbffdfff8
 8006ae0:	cccccccd 	.word	0xcccccccd
 8006ae4:	40020000 	.word	0x40020000
 8006ae8:	bffdfbf8 	.word	0xbffdfbf8
 8006aec:	40020400 	.word	0x40020400

08006af0 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d04b      	beq.n	8006b8c <HAL_DMA_DeInit+0x9c>
{
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8006af8:	6802      	ldr	r2, [r0, #0]
 8006afa:	6813      	ldr	r3, [r2, #0]
 8006afc:	f023 0301 	bic.w	r3, r3, #1
 8006b00:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006b02:	6802      	ldr	r2, [r0, #0]
 8006b04:	4b22      	ldr	r3, [pc, #136]	; (8006b90 <HAL_DMA_DeInit+0xa0>)
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d82c      	bhi.n	8006b64 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006b0a:	4b22      	ldr	r3, [pc, #136]	; (8006b94 <HAL_DMA_DeInit+0xa4>)
 8006b0c:	4413      	add	r3, r2
 8006b0e:	4922      	ldr	r1, [pc, #136]	; (8006b98 <HAL_DMA_DeInit+0xa8>)
 8006b10:	fba1 1303 	umull	r1, r3, r1, r3
 8006b14:	091b      	lsrs	r3, r3, #4
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006b1a:	4b20      	ldr	r3, [pc, #128]	; (8006b9c <HAL_DMA_DeInit+0xac>)
 8006b1c:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR  = 0;
 8006b1e:	2500      	movs	r5, #0
 8006b20:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006b22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006b24:	f003 021f 	and.w	r2, r3, #31
 8006b28:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	4093      	lsls	r3, r2
 8006b2e:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006b30:	4620      	mov	r0, r4
 8006b32:	f7ff ff39 	bl	80069a8 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0;
 8006b36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006b38:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b3a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006b3c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006b3e:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006b40:	6863      	ldr	r3, [r4, #4]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	d918      	bls.n	8006b7a <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8006b48:	2000      	movs	r0, #0
 8006b4a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8006b4c:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8006b4e:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8006b50:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006b52:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8006b54:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8006b56:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b58:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8006b5a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8006b5e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006b64:	4b0e      	ldr	r3, [pc, #56]	; (8006ba0 <HAL_DMA_DeInit+0xb0>)
 8006b66:	4413      	add	r3, r2
 8006b68:	490b      	ldr	r1, [pc, #44]	; (8006b98 <HAL_DMA_DeInit+0xa8>)
 8006b6a:	fba1 1303 	umull	r1, r3, r1, r3
 8006b6e:	091b      	lsrs	r3, r3, #4
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006b74:	4b0b      	ldr	r3, [pc, #44]	; (8006ba4 <HAL_DMA_DeInit+0xb4>)
 8006b76:	6403      	str	r3, [r0, #64]	; 0x40
 8006b78:	e7d1      	b.n	8006b1e <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f7ff ff38 	bl	80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006b80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006b82:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b86:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006b88:	605a      	str	r2, [r3, #4]
 8006b8a:	e7dd      	b.n	8006b48 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8006b8c:	2001      	movs	r0, #1
}
 8006b8e:	4770      	bx	lr
 8006b90:	40020407 	.word	0x40020407
 8006b94:	bffdfff8 	.word	0xbffdfff8
 8006b98:	cccccccd 	.word	0xcccccccd
 8006b9c:	40020000 	.word	0x40020000
 8006ba0:	bffdfbf8 	.word	0xbffdfbf8
 8006ba4:	40020400 	.word	0x40020400

08006ba8 <HAL_DMA_Start_IT>:
{
 8006ba8:	b538      	push	{r3, r4, r5, lr}
 8006baa:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8006bac:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8006bb0:	2801      	cmp	r0, #1
 8006bb2:	d041      	beq.n	8006c38 <HAL_DMA_Start_IT+0x90>
 8006bb4:	2001      	movs	r0, #1
 8006bb6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8006bba:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8006bbe:	b2c0      	uxtb	r0, r0
 8006bc0:	2801      	cmp	r0, #1
 8006bc2:	d004      	beq.n	8006bce <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8006bca:	2002      	movs	r0, #2
}
 8006bcc:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8006bce:	2002      	movs	r0, #2
 8006bd0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8006bd8:	6825      	ldr	r5, [r4, #0]
 8006bda:	6828      	ldr	r0, [r5, #0]
 8006bdc:	f020 0001 	bic.w	r0, r0, #1
 8006be0:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006be2:	4620      	mov	r0, r4
 8006be4:	f7ff febe 	bl	8006964 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8006be8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006bea:	b1d3      	cbz	r3, 8006c22 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bec:	6822      	ldr	r2, [r4, #0]
 8006bee:	6813      	ldr	r3, [r2, #0]
 8006bf0:	f043 030e 	orr.w	r3, r3, #14
 8006bf4:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006bf6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8006bfe:	d003      	beq.n	8006c08 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c06:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8006c08:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c0a:	b11b      	cbz	r3, 8006c14 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c12:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8006c14:	6822      	ldr	r2, [r4, #0]
 8006c16:	6813      	ldr	r3, [r2, #0]
 8006c18:	f043 0301 	orr.w	r3, r3, #1
 8006c1c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c1e:	2000      	movs	r0, #0
 8006c20:	e7d4      	b.n	8006bcc <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	6813      	ldr	r3, [r2, #0]
 8006c26:	f023 0304 	bic.w	r3, r3, #4
 8006c2a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006c2c:	6822      	ldr	r2, [r4, #0]
 8006c2e:	6813      	ldr	r3, [r2, #0]
 8006c30:	f043 030a 	orr.w	r3, r3, #10
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	e7de      	b.n	8006bf6 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8006c38:	2002      	movs	r0, #2
 8006c3a:	e7c7      	b.n	8006bcc <HAL_DMA_Start_IT+0x24>

08006c3c <HAL_DMA_Abort_IT>:
{
 8006c3c:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006c3e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d009      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c48:	2304      	movs	r3, #4
 8006c4a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8006c52:	2200      	movs	r2, #0
 8006c54:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    status = HAL_ERROR;
 8006c58:	4618      	mov	r0, r3
}
 8006c5a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c5c:	6802      	ldr	r2, [r0, #0]
 8006c5e:	6813      	ldr	r3, [r2, #0]
 8006c60:	f023 030e 	bic.w	r3, r3, #14
 8006c64:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8006c66:	6802      	ldr	r2, [r0, #0]
 8006c68:	6813      	ldr	r3, [r2, #0]
 8006c6a:	f023 0301 	bic.w	r3, r3, #1
 8006c6e:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006c70:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006c72:	6813      	ldr	r3, [r2, #0]
 8006c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c78:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006c7a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006c7c:	f003 021f 	and.w	r2, r3, #31
 8006c80:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006c82:	2301      	movs	r3, #1
 8006c84:	4093      	lsls	r3, r2
 8006c86:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c88:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006c8a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8006c8c:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8006c8e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006c90:	b133      	cbz	r3, 8006ca0 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c98:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c9a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006c9c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006c9e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8006cac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006cae:	b113      	cbz	r3, 8006cb6 <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 8006cb0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8006cb2:	2000      	movs	r0, #0
 8006cb4:	e7d1      	b.n	8006c5a <HAL_DMA_Abort_IT+0x1e>
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	e7cf      	b.n	8006c5a <HAL_DMA_Abort_IT+0x1e>

08006cba <HAL_DMA_IRQHandler>:
{
 8006cba:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006cbc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006cbe:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006cc0:	6804      	ldr	r4, [r0, #0]
 8006cc2:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006cc4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006cc6:	f003 031f 	and.w	r3, r3, #31
 8006cca:	2204      	movs	r2, #4
 8006ccc:	409a      	lsls	r2, r3
 8006cce:	420a      	tst	r2, r1
 8006cd0:	d015      	beq.n	8006cfe <HAL_DMA_IRQHandler+0x44>
 8006cd2:	f015 0f04 	tst.w	r5, #4
 8006cd6:	d012      	beq.n	8006cfe <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	f013 0f20 	tst.w	r3, #32
 8006cde:	d103      	bne.n	8006ce8 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	f023 0304 	bic.w	r3, r3, #4
 8006ce6:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ce8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006cea:	f003 021f 	and.w	r2, r3, #31
 8006cee:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	4093      	lsls	r3, r2
 8006cf4:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8006cf6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006cf8:	b103      	cbz	r3, 8006cfc <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8006cfa:	4798      	blx	r3
}
 8006cfc:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006cfe:	2202      	movs	r2, #2
 8006d00:	409a      	lsls	r2, r3
 8006d02:	420a      	tst	r2, r1
 8006d04:	d01c      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 8006d06:	f015 0f02 	tst.w	r5, #2
 8006d0a:	d019      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	f013 0f20 	tst.w	r3, #32
 8006d12:	d106      	bne.n	8006d22 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	f023 030a 	bic.w	r3, r3, #10
 8006d1a:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d22:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006d24:	f003 021f 	and.w	r2, r3, #31
 8006d28:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	4093      	lsls	r3, r2
 8006d2e:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8006d30:	2300      	movs	r3, #0
 8006d32:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8006d36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d0df      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8006d3c:	4798      	blx	r3
 8006d3e:	e7dd      	b.n	8006cfc <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006d40:	2208      	movs	r2, #8
 8006d42:	fa02 f303 	lsl.w	r3, r2, r3
 8006d46:	420b      	tst	r3, r1
 8006d48:	d0d8      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 8006d4a:	f015 0f08 	tst.w	r5, #8
 8006d4e:	d0d5      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	f023 030e 	bic.w	r3, r3, #14
 8006d56:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d58:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006d5a:	f003 031f 	and.w	r3, r3, #31
 8006d5e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006d60:	2201      	movs	r2, #1
 8006d62:	fa02 f303 	lsl.w	r3, r2, r3
 8006d66:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d68:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8006d6a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8006d74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0c0      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8006d7a:	4798      	blx	r3
  return;
 8006d7c:	e7be      	b.n	8006cfc <HAL_DMA_IRQHandler+0x42>

08006d7e <HAL_DMA_GetState>:
  return hdma->State;
 8006d7e:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 8006d82:	4770      	bx	lr

08006d84 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006d84:	b410      	push	{r4}
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006d86:	6802      	ldr	r2, [r0, #0]
 8006d88:	4b1d      	ldr	r3, [pc, #116]	; (8006e00 <FDCAN_CalcultateRamBlockAddresses+0x7c>)
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d028      	beq.n	8006de0 <FDCAN_CalcultateRamBlockAddresses+0x5c>
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006d8e:	491d      	ldr	r1, [pc, #116]	; (8006e04 <FDCAN_CalcultateRamBlockAddresses+0x80>)
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8006d90:	4b1d      	ldr	r3, [pc, #116]	; (8006e08 <FDCAN_CalcultateRamBlockAddresses+0x84>)
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d026      	beq.n	8006de4 <FDCAN_CalcultateRamBlockAddresses+0x60>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006d96:	6401      	str	r1, [r0, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006d98:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006d9c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006da0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006da6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006daa:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8006dae:	6443      	str	r3, [r0, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006db0:	6802      	ldr	r2, [r0, #0]
 8006db2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006db6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8006dba:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006dbc:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8006dc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006dc4:	f101 03b0 	add.w	r3, r1, #176	; 0xb0
 8006dc8:	6483      	str	r3, [r0, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006dca:	f501 73c4 	add.w	r3, r1, #392	; 0x188
 8006dce:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006dd0:	f501 7318 	add.w	r3, r1, #608	; 0x260
 8006dd4:	6503      	str	r3, [r0, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006dd6:	f501 731e 	add.w	r3, r1, #632	; 0x278
 8006dda:	6543      	str	r3, [r0, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006ddc:	460b      	mov	r3, r1
 8006dde:	e007      	b.n	8006df0 <FDCAN_CalcultateRamBlockAddresses+0x6c>
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006de0:	490a      	ldr	r1, [pc, #40]	; (8006e0c <FDCAN_CalcultateRamBlockAddresses+0x88>)
 8006de2:	e7d5      	b.n	8006d90 <FDCAN_CalcultateRamBlockAddresses+0xc>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8006de4:	f501 61d4 	add.w	r1, r1, #1696	; 0x6a0
 8006de8:	e7d5      	b.n	8006d96 <FDCAN_CalcultateRamBlockAddresses+0x12>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006dea:	2200      	movs	r2, #0
 8006dec:	f843 2b04 	str.w	r2, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006df0:	f501 7254 	add.w	r2, r1, #848	; 0x350
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d8f8      	bhi.n	8006dea <FDCAN_CalcultateRamBlockAddresses+0x66>
  }
}
 8006df8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	40006800 	.word	0x40006800
 8006e04:	4000a400 	.word	0x4000a400
 8006e08:	40006c00 	.word	0x40006c00
 8006e0c:	4000a750 	.word	0x4000a750

08006e10 <HAL_FDCAN_Init>:
  if (hfdcan == NULL)
 8006e10:	2800      	cmp	r0, #0
 8006e12:	f000 80e3 	beq.w	8006fdc <HAL_FDCAN_Init+0x1cc>
{
 8006e16:	b538      	push	{r3, r4, r5, lr}
 8006e18:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006e1a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006e1e:	b1d3      	cbz	r3, 8006e56 <HAL_FDCAN_Init+0x46>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006e20:	6822      	ldr	r2, [r4, #0]
 8006e22:	6993      	ldr	r3, [r2, #24]
 8006e24:	f023 0310 	bic.w	r3, r3, #16
 8006e28:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 8006e2a:	f7fe fd71 	bl	8005910 <HAL_GetTick>
 8006e2e:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	699a      	ldr	r2, [r3, #24]
 8006e34:	f012 0f08 	tst.w	r2, #8
 8006e38:	d012      	beq.n	8006e60 <HAL_FDCAN_Init+0x50>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006e3a:	f7fe fd69 	bl	8005910 <HAL_GetTick>
 8006e3e:	1b40      	subs	r0, r0, r5
 8006e40:	280a      	cmp	r0, #10
 8006e42:	d9f5      	bls.n	8006e30 <HAL_FDCAN_Init+0x20>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006e44:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006e46:	f043 0301 	orr.w	r3, r3, #1
 8006e4a:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8006e52:	2001      	movs	r0, #1
}
 8006e54:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8006e56:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8006e5a:	f7fa fd71 	bl	8001940 <HAL_FDCAN_MspInit>
 8006e5e:	e7df      	b.n	8006e20 <HAL_FDCAN_Init+0x10>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006e60:	699a      	ldr	r2, [r3, #24]
 8006e62:	f042 0201 	orr.w	r2, r2, #1
 8006e66:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8006e68:	f7fe fd52 	bl	8005910 <HAL_GetTick>
 8006e6c:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	699a      	ldr	r2, [r3, #24]
 8006e72:	f012 0f01 	tst.w	r2, #1
 8006e76:	d10d      	bne.n	8006e94 <HAL_FDCAN_Init+0x84>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006e78:	f7fe fd4a 	bl	8005910 <HAL_GetTick>
 8006e7c:	1b40      	subs	r0, r0, r5
 8006e7e:	280a      	cmp	r0, #10
 8006e80:	d9f5      	bls.n	8006e6e <HAL_FDCAN_Init+0x5e>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006e82:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006e84:	f043 0301 	orr.w	r3, r3, #1
 8006e88:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8006e90:	2001      	movs	r0, #1
 8006e92:	e7df      	b.n	8006e54 <HAL_FDCAN_Init+0x44>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006e94:	699a      	ldr	r2, [r3, #24]
 8006e96:	f042 0202 	orr.w	r2, r2, #2
 8006e9a:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8006e9c:	6822      	ldr	r2, [r4, #0]
 8006e9e:	4b50      	ldr	r3, [pc, #320]	; (8006fe0 <HAL_FDCAN_Init+0x1d0>)
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d042      	beq.n	8006f2a <HAL_FDCAN_Init+0x11a>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006ea4:	7c23      	ldrb	r3, [r4, #16]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d045      	beq.n	8006f36 <HAL_FDCAN_Init+0x126>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006eaa:	6822      	ldr	r2, [r4, #0]
 8006eac:	6993      	ldr	r3, [r2, #24]
 8006eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb2:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006eb4:	7c63      	ldrb	r3, [r4, #17]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d043      	beq.n	8006f42 <HAL_FDCAN_Init+0x132>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006eba:	6822      	ldr	r2, [r4, #0]
 8006ebc:	6993      	ldr	r3, [r2, #24]
 8006ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ec2:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006ec4:	7ca3      	ldrb	r3, [r4, #18]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d041      	beq.n	8006f4e <HAL_FDCAN_Init+0x13e>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006eca:	6822      	ldr	r2, [r4, #0]
 8006ecc:	6993      	ldr	r3, [r2, #24]
 8006ece:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ed2:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006ed4:	6822      	ldr	r2, [r4, #0]
 8006ed6:	6993      	ldr	r3, [r2, #24]
 8006ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006edc:	68a1      	ldr	r1, [r4, #8]
 8006ede:	430b      	orrs	r3, r1
 8006ee0:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006ee2:	6822      	ldr	r2, [r4, #0]
 8006ee4:	6993      	ldr	r3, [r2, #24]
 8006ee6:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8006eea:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006eec:	6822      	ldr	r2, [r4, #0]
 8006eee:	6913      	ldr	r3, [r2, #16]
 8006ef0:	f023 0310 	bic.w	r3, r3, #16
 8006ef4:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006ef6:	68e3      	ldr	r3, [r4, #12]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d02e      	beq.n	8006f5a <HAL_FDCAN_Init+0x14a>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d031      	beq.n	8006f64 <HAL_FDCAN_Init+0x154>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d054      	beq.n	8006fae <HAL_FDCAN_Init+0x19e>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006f04:	6822      	ldr	r2, [r4, #0]
 8006f06:	6993      	ldr	r3, [r2, #24]
 8006f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f0c:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006f0e:	6822      	ldr	r2, [r4, #0]
 8006f10:	6913      	ldr	r3, [r2, #16]
 8006f12:	f043 0310 	orr.w	r3, r3, #16
 8006f16:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006f18:	68e3      	ldr	r3, [r4, #12]
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d122      	bne.n	8006f64 <HAL_FDCAN_Init+0x154>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006f1e:	6822      	ldr	r2, [r4, #0]
 8006f20:	6993      	ldr	r3, [r2, #24]
 8006f22:	f043 0320 	orr.w	r3, r3, #32
 8006f26:	6193      	str	r3, [r2, #24]
 8006f28:	e01c      	b.n	8006f64 <HAL_FDCAN_Init+0x154>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006f2a:	6862      	ldr	r2, [r4, #4]
 8006f2c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006f30:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8006f34:	e7b6      	b.n	8006ea4 <HAL_FDCAN_Init+0x94>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006f36:	6822      	ldr	r2, [r4, #0]
 8006f38:	6993      	ldr	r3, [r2, #24]
 8006f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f3e:	6193      	str	r3, [r2, #24]
 8006f40:	e7b8      	b.n	8006eb4 <HAL_FDCAN_Init+0xa4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006f42:	6822      	ldr	r2, [r4, #0]
 8006f44:	6993      	ldr	r3, [r2, #24]
 8006f46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f4a:	6193      	str	r3, [r2, #24]
 8006f4c:	e7ba      	b.n	8006ec4 <HAL_FDCAN_Init+0xb4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006f4e:	6822      	ldr	r2, [r4, #0]
 8006f50:	6993      	ldr	r3, [r2, #24]
 8006f52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f56:	6193      	str	r3, [r2, #24]
 8006f58:	e7bc      	b.n	8006ed4 <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006f5a:	6822      	ldr	r2, [r4, #0]
 8006f5c:	6993      	ldr	r3, [r2, #24]
 8006f5e:	f043 0304 	orr.w	r3, r3, #4
 8006f62:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f64:	69a3      	ldr	r3, [r4, #24]
 8006f66:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006f68:	69e3      	ldr	r3, [r4, #28]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f6e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006f72:	6a22      	ldr	r2, [r4, #32]
 8006f74:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006f76:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006f78:	6962      	ldr	r2, [r4, #20]
 8006f7a:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f7c:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006f7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f82:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006f84:	68a3      	ldr	r3, [r4, #8]
 8006f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f8a:	d016      	beq.n	8006fba <HAL_FDCAN_Init+0x1aa>
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006f8c:	6822      	ldr	r2, [r4, #0]
 8006f8e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8006f92:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006f94:	430b      	orrs	r3, r1
 8006f96:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f7ff fef2 	bl	8006d84 <FDCAN_CalcultateRamBlockAddresses>
  hfdcan->LatestTxFifoQRequest = 0U;
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006fa4:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return HAL_OK;
 8006fac:	e752      	b.n	8006e54 <HAL_FDCAN_Init+0x44>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006fae:	6822      	ldr	r2, [r4, #0]
 8006fb0:	6993      	ldr	r3, [r2, #24]
 8006fb2:	f043 0320 	orr.w	r3, r3, #32
 8006fb6:	6193      	str	r3, [r2, #24]
 8006fb8:	e7d4      	b.n	8006f64 <HAL_FDCAN_Init+0x154>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006fba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006fbc:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006fbe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006fc0:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006fc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006fc6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006fc8:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006fca:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006fce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006fd0:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006fd2:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006fd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006fd8:	60cb      	str	r3, [r1, #12]
 8006fda:	e7d7      	b.n	8006f8c <HAL_FDCAN_Init+0x17c>
    return HAL_ERROR;
 8006fdc:	2001      	movs	r0, #1
}
 8006fde:	4770      	bx	lr
 8006fe0:	40006400 	.word	0x40006400

08006fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fe6:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8006fe8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006fea:	e062      	b.n	80070b2 <HAL_GPIO_Init+0xce>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006fec:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006fee:	005e      	lsls	r6, r3, #1
 8006ff0:	2403      	movs	r4, #3
 8006ff2:	40b4      	lsls	r4, r6
 8006ff4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ff8:	68cc      	ldr	r4, [r1, #12]
 8006ffa:	40b4      	lsls	r4, r6
 8006ffc:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8006ffe:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007000:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007002:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007006:	684c      	ldr	r4, [r1, #4]
 8007008:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800700c:	409c      	lsls	r4, r3
 800700e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8007012:	6044      	str	r4, [r0, #4]
 8007014:	e05e      	b.n	80070d4 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007016:	08dd      	lsrs	r5, r3, #3
 8007018:	3508      	adds	r5, #8
 800701a:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800701e:	f003 0407 	and.w	r4, r3, #7
 8007022:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007026:	240f      	movs	r4, #15
 8007028:	fa04 f40c 	lsl.w	r4, r4, ip
 800702c:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007030:	690c      	ldr	r4, [r1, #16]
 8007032:	fa04 f40c 	lsl.w	r4, r4, ip
 8007036:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 800703a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800703e:	e060      	b.n	8007102 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007040:	2405      	movs	r4, #5
 8007042:	e000      	b.n	8007046 <HAL_GPIO_Init+0x62>
 8007044:	2400      	movs	r4, #0
 8007046:	fa04 f40e 	lsl.w	r4, r4, lr
 800704a:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800704c:	f10c 0c02 	add.w	ip, ip, #2
 8007050:	4d55      	ldr	r5, [pc, #340]	; (80071a8 <HAL_GPIO_Init+0x1c4>)
 8007052:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007056:	4c55      	ldr	r4, [pc, #340]	; (80071ac <HAL_GPIO_Init+0x1c8>)
 8007058:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800705a:	43d4      	mvns	r4, r2
 800705c:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007060:	684f      	ldr	r7, [r1, #4]
 8007062:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8007066:	d001      	beq.n	800706c <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8007068:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800706c:	4d4f      	ldr	r5, [pc, #316]	; (80071ac <HAL_GPIO_Init+0x1c8>)
 800706e:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8007070:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8007072:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007076:	684f      	ldr	r7, [r1, #4]
 8007078:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 800707c:	d001      	beq.n	8007082 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 800707e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8007082:	4d4a      	ldr	r5, [pc, #296]	; (80071ac <HAL_GPIO_Init+0x1c8>)
 8007084:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 8007086:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8007088:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800708c:	684f      	ldr	r7, [r1, #4]
 800708e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8007092:	d001      	beq.n	8007098 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8007094:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8007098:	4d44      	ldr	r5, [pc, #272]	; (80071ac <HAL_GPIO_Init+0x1c8>)
 800709a:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800709c:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800709e:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80070a0:	684e      	ldr	r6, [r1, #4]
 80070a2:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80070a6:	d001      	beq.n	80070ac <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 80070a8:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 80070ac:	4a3f      	ldr	r2, [pc, #252]	; (80071ac <HAL_GPIO_Init+0x1c8>)
 80070ae:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 80070b0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80070b2:	680a      	ldr	r2, [r1, #0]
 80070b4:	fa32 f403 	lsrs.w	r4, r2, r3
 80070b8:	d074      	beq.n	80071a4 <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80070ba:	f04f 0c01 	mov.w	ip, #1
 80070be:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80070c2:	ea1c 0202 	ands.w	r2, ip, r2
 80070c6:	d0f3      	beq.n	80070b0 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80070c8:	684c      	ldr	r4, [r1, #4]
 80070ca:	f004 0403 	and.w	r4, r4, #3
 80070ce:	3c01      	subs	r4, #1
 80070d0:	2c01      	cmp	r4, #1
 80070d2:	d98b      	bls.n	8006fec <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070d4:	684c      	ldr	r4, [r1, #4]
 80070d6:	f004 0403 	and.w	r4, r4, #3
 80070da:	2c03      	cmp	r4, #3
 80070dc:	d00c      	beq.n	80070f8 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80070de:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070e0:	005d      	lsls	r5, r3, #1
 80070e2:	f04f 0c03 	mov.w	ip, #3
 80070e6:	fa0c fc05 	lsl.w	ip, ip, r5
 80070ea:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070ee:	688c      	ldr	r4, [r1, #8]
 80070f0:	40ac      	lsls	r4, r5
 80070f2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80070f6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070f8:	684c      	ldr	r4, [r1, #4]
 80070fa:	f004 0403 	and.w	r4, r4, #3
 80070fe:	2c02      	cmp	r4, #2
 8007100:	d089      	beq.n	8007016 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8007102:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007104:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8007108:	f04f 0c03 	mov.w	ip, #3
 800710c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007110:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007114:	684c      	ldr	r4, [r1, #4]
 8007116:	f004 0403 	and.w	r4, r4, #3
 800711a:	fa04 f40e 	lsl.w	r4, r4, lr
 800711e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8007122:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007124:	684c      	ldr	r4, [r1, #4]
 8007126:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800712a:	d0c1      	beq.n	80070b0 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800712c:	4c20      	ldr	r4, [pc, #128]	; (80071b0 <HAL_GPIO_Init+0x1cc>)
 800712e:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8007130:	f045 0501 	orr.w	r5, r5, #1
 8007134:	6625      	str	r5, [r4, #96]	; 0x60
 8007136:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8007138:	f004 0401 	and.w	r4, r4, #1
 800713c:	9401      	str	r4, [sp, #4]
 800713e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8007140:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8007144:	f10c 0502 	add.w	r5, ip, #2
 8007148:	4c17      	ldr	r4, [pc, #92]	; (80071a8 <HAL_GPIO_Init+0x1c4>)
 800714a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800714e:	f003 0403 	and.w	r4, r3, #3
 8007152:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8007156:	240f      	movs	r4, #15
 8007158:	fa04 f40e 	lsl.w	r4, r4, lr
 800715c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007160:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8007164:	f43f af6e 	beq.w	8007044 <HAL_GPIO_Init+0x60>
 8007168:	4c12      	ldr	r4, [pc, #72]	; (80071b4 <HAL_GPIO_Init+0x1d0>)
 800716a:	42a0      	cmp	r0, r4
 800716c:	d012      	beq.n	8007194 <HAL_GPIO_Init+0x1b0>
 800716e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007172:	42a0      	cmp	r0, r4
 8007174:	d010      	beq.n	8007198 <HAL_GPIO_Init+0x1b4>
 8007176:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800717a:	42a0      	cmp	r0, r4
 800717c:	d00e      	beq.n	800719c <HAL_GPIO_Init+0x1b8>
 800717e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007182:	42a0      	cmp	r0, r4
 8007184:	d00c      	beq.n	80071a0 <HAL_GPIO_Init+0x1bc>
 8007186:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800718a:	42a0      	cmp	r0, r4
 800718c:	f43f af58 	beq.w	8007040 <HAL_GPIO_Init+0x5c>
 8007190:	2406      	movs	r4, #6
 8007192:	e758      	b.n	8007046 <HAL_GPIO_Init+0x62>
 8007194:	2401      	movs	r4, #1
 8007196:	e756      	b.n	8007046 <HAL_GPIO_Init+0x62>
 8007198:	2402      	movs	r4, #2
 800719a:	e754      	b.n	8007046 <HAL_GPIO_Init+0x62>
 800719c:	2403      	movs	r4, #3
 800719e:	e752      	b.n	8007046 <HAL_GPIO_Init+0x62>
 80071a0:	2404      	movs	r4, #4
 80071a2:	e750      	b.n	8007046 <HAL_GPIO_Init+0x62>
  }
}
 80071a4:	b003      	add	sp, #12
 80071a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071a8:	40010000 	.word	0x40010000
 80071ac:	40010400 	.word	0x40010400
 80071b0:	40021000 	.word	0x40021000
 80071b4:	48000400 	.word	0x48000400

080071b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80071b8:	b10a      	cbz	r2, 80071be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80071ba:	6181      	str	r1, [r0, #24]
 80071bc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80071be:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80071c0:	4770      	bx	lr

080071c2 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80071c2:	6803      	ldr	r3, [r0, #0]
 80071c4:	699a      	ldr	r2, [r3, #24]
 80071c6:	f012 0f02 	tst.w	r2, #2
 80071ca:	d001      	beq.n	80071d0 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80071cc:	2200      	movs	r2, #0
 80071ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071d0:	6803      	ldr	r3, [r0, #0]
 80071d2:	699a      	ldr	r2, [r3, #24]
 80071d4:	f012 0f01 	tst.w	r2, #1
 80071d8:	d103      	bne.n	80071e2 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80071da:	699a      	ldr	r2, [r3, #24]
 80071dc:	f042 0201 	orr.w	r2, r2, #1
 80071e0:	619a      	str	r2, [r3, #24]
  }
}
 80071e2:	4770      	bx	lr

080071e4 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80071e4:	f011 0f01 	tst.w	r1, #1
 80071e8:	d009      	beq.n	80071fe <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80071ea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80071ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80071f2:	2b28      	cmp	r3, #40	; 0x28
 80071f4:	d001      	beq.n	80071fa <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80071f6:	23f2      	movs	r3, #242	; 0xf2
 80071f8:	e002      	b.n	8007200 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80071fa:	2342      	movs	r3, #66	; 0x42
 80071fc:	e000      	b.n	8007200 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 80071fe:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007200:	f011 0f02 	tst.w	r1, #2
 8007204:	d009      	beq.n	800721a <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007206:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800720a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800720e:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8007212:	2a28      	cmp	r2, #40	; 0x28
 8007214:	d010      	beq.n	8007238 <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007216:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800721a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800721e:	d10d      	bne.n	800723c <I2C_Disable_IRQ+0x58>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007220:	2910      	cmp	r1, #16
 8007222:	d00e      	beq.n	8007242 <I2C_Disable_IRQ+0x5e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007224:	2920      	cmp	r1, #32
 8007226:	d00f      	beq.n	8007248 <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007228:	2940      	cmp	r1, #64	; 0x40
 800722a:	d010      	beq.n	800724e <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800722c:	6801      	ldr	r1, [r0, #0]
 800722e:	680a      	ldr	r2, [r1, #0]
 8007230:	ea22 0303 	bic.w	r3, r2, r3
 8007234:	600b      	str	r3, [r1, #0]
}
 8007236:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007238:	4663      	mov	r3, ip
 800723a:	e7ee      	b.n	800721a <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800723c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007240:	e7ee      	b.n	8007220 <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007242:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007246:	e7ed      	b.n	8007224 <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 8007248:	f043 0320 	orr.w	r3, r3, #32
 800724c:	e7ec      	b.n	8007228 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 800724e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007252:	e7eb      	b.n	800722c <I2C_Disable_IRQ+0x48>

08007254 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8007254:	2800      	cmp	r0, #0
 8007256:	d059      	beq.n	800730c <HAL_I2C_Init+0xb8>
{
 8007258:	b510      	push	{r4, lr}
 800725a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800725c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007260:	2b00      	cmp	r3, #0
 8007262:	d043      	beq.n	80072ec <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007264:	2324      	movs	r3, #36	; 0x24
 8007266:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800726a:	6822      	ldr	r2, [r4, #0]
 800726c:	6813      	ldr	r3, [r2, #0]
 800726e:	f023 0301 	bic.w	r3, r3, #1
 8007272:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007274:	6863      	ldr	r3, [r4, #4]
 8007276:	6822      	ldr	r2, [r4, #0]
 8007278:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800727c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800727e:	6822      	ldr	r2, [r4, #0]
 8007280:	6893      	ldr	r3, [r2, #8]
 8007282:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007286:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007288:	68e3      	ldr	r3, [r4, #12]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d033      	beq.n	80072f6 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800728e:	68a3      	ldr	r3, [r4, #8]
 8007290:	6822      	ldr	r2, [r4, #0]
 8007292:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8007296:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007298:	68e3      	ldr	r3, [r4, #12]
 800729a:	2b02      	cmp	r3, #2
 800729c:	d031      	beq.n	8007302 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800729e:	6822      	ldr	r2, [r4, #0]
 80072a0:	6853      	ldr	r3, [r2, #4]
 80072a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80072a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072aa:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80072ac:	6822      	ldr	r2, [r4, #0]
 80072ae:	68d3      	ldr	r3, [r2, #12]
 80072b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072b4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80072b6:	6923      	ldr	r3, [r4, #16]
 80072b8:	6962      	ldr	r2, [r4, #20]
 80072ba:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80072bc:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80072be:	6822      	ldr	r2, [r4, #0]
 80072c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80072c4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80072c6:	69e3      	ldr	r3, [r4, #28]
 80072c8:	6a21      	ldr	r1, [r4, #32]
 80072ca:	6822      	ldr	r2, [r4, #0]
 80072cc:	430b      	orrs	r3, r1
 80072ce:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80072d0:	6822      	ldr	r2, [r4, #0]
 80072d2:	6813      	ldr	r3, [r2, #0]
 80072d4:	f043 0301 	orr.w	r3, r3, #1
 80072d8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072da:	2000      	movs	r0, #0
 80072dc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80072de:	2320      	movs	r3, #32
 80072e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80072e4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072e6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80072ea:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80072ec:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80072f0:	f7fa fd4a 	bl	8001d88 <HAL_I2C_MspInit>
 80072f4:	e7b6      	b.n	8007264 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80072f6:	68a3      	ldr	r3, [r4, #8]
 80072f8:	6822      	ldr	r2, [r4, #0]
 80072fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072fe:	6093      	str	r3, [r2, #8]
 8007300:	e7ca      	b.n	8007298 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007308:	605a      	str	r2, [r3, #4]
 800730a:	e7c8      	b.n	800729e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800730c:	2001      	movs	r0, #1
}
 800730e:	4770      	bx	lr

08007310 <HAL_I2C_EV_IRQHandler>:
{
 8007310:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007312:	6803      	ldr	r3, [r0, #0]
 8007314:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007316:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8007318:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800731a:	b103      	cbz	r3, 800731e <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 800731c:	4798      	blx	r3
}
 800731e:	bd08      	pop	{r3, pc}

08007320 <HAL_I2C_SlaveTxCpltCallback>:
}
 8007320:	4770      	bx	lr

08007322 <HAL_I2C_SlaveRxCpltCallback>:
}
 8007322:	4770      	bx	lr

08007324 <I2C_ITSlaveSeqCplt>:
{
 8007324:	b510      	push	{r4, lr}
 8007326:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007328:	6803      	ldr	r3, [r0, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800732c:	2100      	movs	r1, #0
 800732e:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007332:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8007336:	d00e      	beq.n	8007356 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800733e:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007340:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b29      	cmp	r3, #41	; 0x29
 8007348:	d00d      	beq.n	8007366 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800734a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b2a      	cmp	r3, #42	; 0x2a
 8007352:	d018      	beq.n	8007386 <I2C_ITSlaveSeqCplt+0x62>
}
 8007354:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007356:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800735a:	d0f1      	beq.n	8007340 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	e7ec      	b.n	8007340 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007366:	2328      	movs	r3, #40	; 0x28
 8007368:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800736c:	2321      	movs	r3, #33	; 0x21
 800736e:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007370:	2101      	movs	r1, #1
 8007372:	4620      	mov	r0, r4
 8007374:	f7ff ff36 	bl	80071e4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007378:	2300      	movs	r3, #0
 800737a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800737e:	4620      	mov	r0, r4
 8007380:	f7ff ffce 	bl	8007320 <HAL_I2C_SlaveTxCpltCallback>
 8007384:	e7e6      	b.n	8007354 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007386:	2328      	movs	r3, #40	; 0x28
 8007388:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800738c:	2322      	movs	r3, #34	; 0x22
 800738e:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007390:	2102      	movs	r1, #2
 8007392:	4620      	mov	r0, r4
 8007394:	f7ff ff26 	bl	80071e4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007398:	2300      	movs	r3, #0
 800739a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800739e:	4620      	mov	r0, r4
 80073a0:	f7ff ffbf 	bl	8007322 <HAL_I2C_SlaveRxCpltCallback>
}
 80073a4:	e7d6      	b.n	8007354 <I2C_ITSlaveSeqCplt+0x30>

080073a6 <HAL_I2C_AddrCallback>:
}
 80073a6:	4770      	bx	lr

080073a8 <I2C_ITAddrCplt>:
{
 80073a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073aa:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80073ac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80073b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80073b4:	2b28      	cmp	r3, #40	; 0x28
 80073b6:	d006      	beq.n	80073c6 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80073b8:	6803      	ldr	r3, [r0, #0]
 80073ba:	2208      	movs	r2, #8
 80073bc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80073be:	2300      	movs	r3, #0
 80073c0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 80073c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 80073c6:	6803      	ldr	r3, [r0, #0]
 80073c8:	699e      	ldr	r6, [r3, #24]
 80073ca:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80073ce:	699a      	ldr	r2, [r3, #24]
 80073d0:	0c12      	lsrs	r2, r2, #16
 80073d2:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80073d6:	689a      	ldr	r2, [r3, #8]
 80073d8:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80073dc:	68df      	ldr	r7, [r3, #12]
 80073de:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80073e2:	68c1      	ldr	r1, [r0, #12]
 80073e4:	2902      	cmp	r1, #2
 80073e6:	d122      	bne.n	800742e <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80073e8:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 80073ec:	f015 0f06 	tst.w	r5, #6
 80073f0:	d110      	bne.n	8007414 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 80073f2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80073f4:	3101      	adds	r1, #1
 80073f6:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80073f8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80073fa:	2902      	cmp	r1, #2
 80073fc:	d1e2      	bne.n	80073c4 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 80073fe:	2100      	movs	r1, #0
 8007400:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007402:	2008      	movs	r0, #8
 8007404:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8007406:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800740a:	4631      	mov	r1, r6
 800740c:	4620      	mov	r0, r4
 800740e:	f7ff ffca 	bl	80073a6 <HAL_I2C_AddrCallback>
 8007412:	e7d7      	b.n	80073c4 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007418:	f7ff fee4 	bl	80071e4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800741c:	2300      	movs	r3, #0
 800741e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007422:	463a      	mov	r2, r7
 8007424:	4631      	mov	r1, r6
 8007426:	4620      	mov	r0, r4
 8007428:	f7ff ffbd 	bl	80073a6 <HAL_I2C_AddrCallback>
 800742c:	e7ca      	b.n	80073c4 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800742e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007432:	f7ff fed7 	bl	80071e4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007436:	2300      	movs	r3, #0
 8007438:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800743c:	462a      	mov	r2, r5
 800743e:	4631      	mov	r1, r6
 8007440:	4620      	mov	r0, r4
 8007442:	f7ff ffb0 	bl	80073a6 <HAL_I2C_AddrCallback>
 8007446:	e7bd      	b.n	80073c4 <I2C_ITAddrCplt+0x1c>

08007448 <HAL_I2C_ListenCpltCallback>:
}
 8007448:	4770      	bx	lr
	...

0800744c <I2C_ITListenCplt>:
{
 800744c:	b510      	push	{r4, lr}
 800744e:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007450:	4b17      	ldr	r3, [pc, #92]	; (80074b0 <I2C_ITListenCplt+0x64>)
 8007452:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007454:	2300      	movs	r3, #0
 8007456:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007458:	2220      	movs	r2, #32
 800745a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800745e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007462:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007464:	f011 0f04 	tst.w	r1, #4
 8007468:	d013      	beq.n	8007492 <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800746a:	6803      	ldr	r3, [r0, #0]
 800746c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800746e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007470:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007472:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007474:	3301      	adds	r3, #1
 8007476:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8007478:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800747a:	b153      	cbz	r3, 8007492 <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 800747c:	3b01      	subs	r3, #1
 800747e:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8007480:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007482:	b29b      	uxth	r3, r3
 8007484:	3b01      	subs	r3, #1
 8007486:	b29b      	uxth	r3, r3
 8007488:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800748a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800748c:	f043 0304 	orr.w	r3, r3, #4
 8007490:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007492:	f248 0103 	movw	r1, #32771	; 0x8003
 8007496:	4620      	mov	r0, r4
 8007498:	f7ff fea4 	bl	80071e4 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	2210      	movs	r2, #16
 80074a0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80074a2:	2300      	movs	r3, #0
 80074a4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80074a8:	4620      	mov	r0, r4
 80074aa:	f7ff ffcd 	bl	8007448 <HAL_I2C_ListenCpltCallback>
}
 80074ae:	bd10      	pop	{r4, pc}
 80074b0:	ffff0000 	.word	0xffff0000

080074b4 <HAL_I2C_ErrorCallback>:
}
 80074b4:	4770      	bx	lr

080074b6 <HAL_I2C_AbortCpltCallback>:
}
 80074b6:	4770      	bx	lr

080074b8 <I2C_TreatErrorCallback>:
{
 80074b8:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80074ba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b60      	cmp	r3, #96	; 0x60
 80074c2:	d006      	beq.n	80074d2 <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80074c4:	2300      	movs	r3, #0
 80074c6:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80074c8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80074cc:	f7ff fff2 	bl	80074b4 <HAL_I2C_ErrorCallback>
}
 80074d0:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80074d2:	2320      	movs	r3, #32
 80074d4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80074d8:	2300      	movs	r3, #0
 80074da:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80074dc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80074e0:	f7ff ffe9 	bl	80074b6 <HAL_I2C_AbortCpltCallback>
 80074e4:	e7f4      	b.n	80074d0 <I2C_TreatErrorCallback+0x18>
	...

080074e8 <I2C_ITError>:
{
 80074e8:	b510      	push	{r4, lr}
 80074ea:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80074ec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074f0:	2000      	movs	r0, #0
 80074f2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80074f6:	4a3b      	ldr	r2, [pc, #236]	; (80075e4 <I2C_ITError+0xfc>)
 80074f8:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80074fa:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80074fc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80074fe:	430a      	orrs	r2, r1
 8007500:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007502:	3b28      	subs	r3, #40	; 0x28
 8007504:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007506:	2b02      	cmp	r3, #2
 8007508:	d819      	bhi.n	800753e <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800750a:	2103      	movs	r1, #3
 800750c:	4620      	mov	r0, r4
 800750e:	f7ff fe69 	bl	80071e4 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007512:	2328      	movs	r3, #40	; 0x28
 8007514:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007518:	4b33      	ldr	r3, [pc, #204]	; (80075e8 <I2C_ITError+0x100>)
 800751a:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 800751c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800751e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007520:	b11a      	cbz	r2, 800752a <I2C_ITError+0x42>
 8007522:	2b11      	cmp	r3, #17
 8007524:	d01b      	beq.n	800755e <I2C_ITError+0x76>
 8007526:	2b21      	cmp	r3, #33	; 0x21
 8007528:	d019      	beq.n	800755e <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800752a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800752c:	b11a      	cbz	r2, 8007536 <I2C_ITError+0x4e>
 800752e:	2b12      	cmp	r3, #18
 8007530:	d036      	beq.n	80075a0 <I2C_ITError+0xb8>
 8007532:	2b22      	cmp	r3, #34	; 0x22
 8007534:	d034      	beq.n	80075a0 <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 8007536:	4620      	mov	r0, r4
 8007538:	f7ff ffbe 	bl	80074b8 <I2C_TreatErrorCallback>
}
 800753c:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800753e:	f248 0103 	movw	r1, #32771	; 0x8003
 8007542:	4620      	mov	r0, r4
 8007544:	f7ff fe4e 	bl	80071e4 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007548:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b60      	cmp	r3, #96	; 0x60
 8007550:	d002      	beq.n	8007558 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 8007552:	2320      	movs	r3, #32
 8007554:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8007558:	2300      	movs	r3, #0
 800755a:	6363      	str	r3, [r4, #52]	; 0x34
 800755c:	e7de      	b.n	800751c <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8007566:	d003      	beq.n	8007570 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800756e:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007570:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007572:	f7ff fc04 	bl	8006d7e <HAL_DMA_GetState>
 8007576:	2801      	cmp	r0, #1
 8007578:	d00e      	beq.n	8007598 <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800757a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800757c:	4a1b      	ldr	r2, [pc, #108]	; (80075ec <I2C_ITError+0x104>)
 800757e:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8007580:	2300      	movs	r3, #0
 8007582:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007586:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007588:	f7ff fb58 	bl	8006c3c <HAL_DMA_Abort_IT>
 800758c:	2800      	cmp	r0, #0
 800758e:	d0d5      	beq.n	800753c <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007590:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007592:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007594:	4798      	blx	r3
 8007596:	e7d1      	b.n	800753c <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8007598:	4620      	mov	r0, r4
 800759a:	f7ff ff8d 	bl	80074b8 <I2C_TreatErrorCallback>
 800759e:	e7cd      	b.n	800753c <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80075a0:	6823      	ldr	r3, [r4, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80075a8:	d003      	beq.n	80075b2 <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075b0:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80075b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80075b4:	f7ff fbe3 	bl	8006d7e <HAL_DMA_GetState>
 80075b8:	2801      	cmp	r0, #1
 80075ba:	d00e      	beq.n	80075da <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80075bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80075be:	4a0b      	ldr	r2, [pc, #44]	; (80075ec <I2C_ITError+0x104>)
 80075c0:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80075c2:	2300      	movs	r3, #0
 80075c4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80075c8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80075ca:	f7ff fb37 	bl	8006c3c <HAL_DMA_Abort_IT>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	d0b4      	beq.n	800753c <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80075d2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80075d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80075d6:	4798      	blx	r3
 80075d8:	e7b0      	b.n	800753c <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 80075da:	4620      	mov	r0, r4
 80075dc:	f7ff ff6c 	bl	80074b8 <I2C_TreatErrorCallback>
 80075e0:	e7ac      	b.n	800753c <I2C_ITError+0x54>
 80075e2:	bf00      	nop
 80075e4:	ffff0000 	.word	0xffff0000
 80075e8:	08007759 	.word	0x08007759
 80075ec:	08007911 	.word	0x08007911

080075f0 <I2C_ITSlaveCplt>:
{
 80075f0:	b570      	push	{r4, r5, r6, lr}
 80075f2:	4604      	mov	r4, r0
 80075f4:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80075f6:	6802      	ldr	r2, [r0, #0]
 80075f8:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80075fa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80075fe:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007600:	2120      	movs	r1, #32
 8007602:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007604:	2b21      	cmp	r3, #33	; 0x21
 8007606:	d00d      	beq.n	8007624 <I2C_ITSlaveCplt+0x34>
 8007608:	2b29      	cmp	r3, #41	; 0x29
 800760a:	d00b      	beq.n	8007624 <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800760c:	2b22      	cmp	r3, #34	; 0x22
 800760e:	d001      	beq.n	8007614 <I2C_ITSlaveCplt+0x24>
 8007610:	2b2a      	cmp	r3, #42	; 0x2a
 8007612:	d10e      	bne.n	8007632 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007614:	f248 0102 	movw	r1, #32770	; 0x8002
 8007618:	4620      	mov	r0, r4
 800761a:	f7ff fde3 	bl	80071e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800761e:	2322      	movs	r3, #34	; 0x22
 8007620:	6323      	str	r3, [r4, #48]	; 0x30
 8007622:	e006      	b.n	8007632 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007624:	f248 0101 	movw	r1, #32769	; 0x8001
 8007628:	4620      	mov	r0, r4
 800762a:	f7ff fddb 	bl	80071e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800762e:	2321      	movs	r3, #33	; 0x21
 8007630:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007632:	6822      	ldr	r2, [r4, #0]
 8007634:	6853      	ldr	r3, [r2, #4]
 8007636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800763a:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 800763c:	6822      	ldr	r2, [r4, #0]
 800763e:	6853      	ldr	r3, [r2, #4]
 8007640:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8007644:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8007648:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800764c:	f023 0301 	bic.w	r3, r3, #1
 8007650:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8007652:	4620      	mov	r0, r4
 8007654:	f7ff fdb5 	bl	80071c2 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007658:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800765c:	d040      	beq.n	80076e0 <I2C_ITSlaveCplt+0xf0>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800765e:	6822      	ldr	r2, [r4, #0]
 8007660:	6813      	ldr	r3, [r2, #0]
 8007662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007666:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8007668:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800766a:	b11b      	cbz	r3, 8007674 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	b29b      	uxth	r3, r3
 8007672:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007674:	f015 0f04 	tst.w	r5, #4
 8007678:	d011      	beq.n	800769e <I2C_ITSlaveCplt+0xae>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800767a:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007684:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007688:	3301      	adds	r3, #1
 800768a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800768c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800768e:	b133      	cbz	r3, 800769e <I2C_ITSlaveCplt+0xae>
      hi2c->XferSize--;
 8007690:	3b01      	subs	r3, #1
 8007692:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007694:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b29b      	uxth	r3, r3
 800769c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800769e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	b11b      	cbz	r3, 80076ac <I2C_ITSlaveCplt+0xbc>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80076a6:	f043 0304 	orr.w	r3, r3, #4
 80076aa:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076ac:	2300      	movs	r3, #0
 80076ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 80076b2:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80076b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80076b6:	bb1b      	cbnz	r3, 8007700 <I2C_ITSlaveCplt+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80076b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80076ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076be:	d12d      	bne.n	800771c <I2C_ITSlaveCplt+0x12c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80076c0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b22      	cmp	r3, #34	; 0x22
 80076c8:	d038      	beq.n	800773c <I2C_ITSlaveCplt+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 80076ca:	2320      	movs	r3, #32
 80076cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80076d0:	2300      	movs	r3, #0
 80076d2:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80076d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80076d8:	4620      	mov	r0, r4
 80076da:	f7ff fe21 	bl	8007320 <HAL_I2C_SlaveTxCpltCallback>
}
 80076de:	e02c      	b.n	800773a <I2C_ITSlaveCplt+0x14a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80076e0:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80076e4:	d0c6      	beq.n	8007674 <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80076e6:	6822      	ldr	r2, [r4, #0]
 80076e8:	6813      	ldr	r3, [r2, #0]
 80076ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076ee:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 80076f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0be      	beq.n	8007674 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	8563      	strh	r3, [r4, #42]	; 0x2a
 80076fe:	e7b9      	b.n	8007674 <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007700:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007702:	4620      	mov	r0, r4
 8007704:	f7ff fef0 	bl	80074e8 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007708:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b28      	cmp	r3, #40	; 0x28
 8007710:	d113      	bne.n	800773a <I2C_ITSlaveCplt+0x14a>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007712:	4629      	mov	r1, r5
 8007714:	4620      	mov	r0, r4
 8007716:	f7ff fe99 	bl	800744c <I2C_ITListenCplt>
 800771a:	e00e      	b.n	800773a <I2C_ITSlaveCplt+0x14a>
    I2C_ITSlaveSeqCplt(hi2c);
 800771c:	4620      	mov	r0, r4
 800771e:	f7ff fe01 	bl	8007324 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007722:	4b0c      	ldr	r3, [pc, #48]	; (8007754 <I2C_ITSlaveCplt+0x164>)
 8007724:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007726:	2320      	movs	r3, #32
 8007728:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800772c:	2300      	movs	r3, #0
 800772e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007730:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007734:	4620      	mov	r0, r4
 8007736:	f7ff fe87 	bl	8007448 <HAL_I2C_ListenCpltCallback>
}
 800773a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800773c:	2320      	movs	r3, #32
 800773e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007742:	2300      	movs	r3, #0
 8007744:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007746:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800774a:	4620      	mov	r0, r4
 800774c:	f7ff fde9 	bl	8007322 <HAL_I2C_SlaveRxCpltCallback>
 8007750:	e7f3      	b.n	800773a <I2C_ITSlaveCplt+0x14a>
 8007752:	bf00      	nop
 8007754:	ffff0000 	.word	0xffff0000

08007758 <I2C_Slave_ISR_IT>:
{
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 800775a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800775c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007760:	2b01      	cmp	r3, #1
 8007762:	f000 809e 	beq.w	80078a2 <I2C_Slave_ISR_IT+0x14a>
 8007766:	4604      	mov	r4, r0
 8007768:	460d      	mov	r5, r1
 800776a:	4616      	mov	r6, r2
 800776c:	2301      	movs	r3, #1
 800776e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007772:	f011 0f20 	tst.w	r1, #32
 8007776:	d002      	beq.n	800777e <I2C_Slave_ISR_IT+0x26>
 8007778:	f012 0f20 	tst.w	r2, #32
 800777c:	d119      	bne.n	80077b2 <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800777e:	f015 0f10 	tst.w	r5, #16
 8007782:	d03e      	beq.n	8007802 <I2C_Slave_ISR_IT+0xaa>
 8007784:	f016 0f10 	tst.w	r6, #16
 8007788:	d03b      	beq.n	8007802 <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 800778a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800778c:	b29b      	uxth	r3, r3
 800778e:	bb43      	cbnz	r3, 80077e2 <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007790:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b28      	cmp	r3, #40	; 0x28
 8007798:	d00e      	beq.n	80077b8 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800779a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2b29      	cmp	r3, #41	; 0x29
 80077a2:	d011      	beq.n	80077c8 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	2210      	movs	r2, #16
 80077a8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80077aa:	2000      	movs	r0, #0
 80077ac:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80077b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80077b2:	f7ff ff1d 	bl	80075f0 <I2C_ITSlaveCplt>
 80077b6:	e7e2      	b.n	800777e <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80077b8:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80077bc:	d1ed      	bne.n	800779a <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80077be:	4629      	mov	r1, r5
 80077c0:	4620      	mov	r0, r4
 80077c2:	f7ff fe43 	bl	800744c <I2C_ITListenCplt>
 80077c6:	e7f0      	b.n	80077aa <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80077c8:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80077cc:	d0ea      	beq.n	80077a4 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	2210      	movs	r2, #16
 80077d2:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 80077d4:	4620      	mov	r0, r4
 80077d6:	f7ff fcf4 	bl	80071c2 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 80077da:	4620      	mov	r0, r4
 80077dc:	f7ff fda2 	bl	8007324 <I2C_ITSlaveSeqCplt>
 80077e0:	e7e3      	b.n	80077aa <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	2210      	movs	r2, #16
 80077e6:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80077ea:	f043 0304 	orr.w	r3, r3, #4
 80077ee:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80077f0:	b117      	cbz	r7, 80077f8 <I2C_Slave_ISR_IT+0xa0>
 80077f2:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 80077f6:	d1d8      	bne.n	80077aa <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80077f8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80077fa:	4620      	mov	r0, r4
 80077fc:	f7ff fe74 	bl	80074e8 <I2C_ITError>
 8007800:	e7d3      	b.n	80077aa <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007802:	f015 0f04 	tst.w	r5, #4
 8007806:	d01f      	beq.n	8007848 <I2C_Slave_ISR_IT+0xf0>
 8007808:	f016 0f04 	tst.w	r6, #4
 800780c:	d01c      	beq.n	8007848 <I2C_Slave_ISR_IT+0xf0>
    if (hi2c->XferCount > 0U)
 800780e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007810:	b29b      	uxth	r3, r3
 8007812:	b173      	cbz	r3, 8007832 <I2C_Slave_ISR_IT+0xda>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800781a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800781c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800781e:	3301      	adds	r3, #1
 8007820:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007822:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007824:	3b01      	subs	r3, #1
 8007826:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007828:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800782a:	b29b      	uxth	r3, r3
 800782c:	3b01      	subs	r3, #1
 800782e:	b29b      	uxth	r3, r3
 8007830:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8007832:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007834:	b29b      	uxth	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1b7      	bne.n	80077aa <I2C_Slave_ISR_IT+0x52>
 800783a:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 800783e:	d0b4      	beq.n	80077aa <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8007840:	4620      	mov	r0, r4
 8007842:	f7ff fd6f 	bl	8007324 <I2C_ITSlaveSeqCplt>
 8007846:	e7b0      	b.n	80077aa <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007848:	f015 0f08 	tst.w	r5, #8
 800784c:	d002      	beq.n	8007854 <I2C_Slave_ISR_IT+0xfc>
 800784e:	f016 0f08 	tst.w	r6, #8
 8007852:	d118      	bne.n	8007886 <I2C_Slave_ISR_IT+0x12e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007854:	f015 0f02 	tst.w	r5, #2
 8007858:	d0a7      	beq.n	80077aa <I2C_Slave_ISR_IT+0x52>
 800785a:	f016 0f02 	tst.w	r6, #2
 800785e:	d0a4      	beq.n	80077aa <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 8007860:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007862:	b29b      	uxth	r3, r3
 8007864:	b1a3      	cbz	r3, 8007890 <I2C_Slave_ISR_IT+0x138>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007866:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	7812      	ldrb	r2, [r2, #0]
 800786c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800786e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007870:	3301      	adds	r3, #1
 8007872:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007874:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007876:	b29b      	uxth	r3, r3
 8007878:	3b01      	subs	r3, #1
 800787a:	b29b      	uxth	r3, r3
 800787c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800787e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007880:	3b01      	subs	r3, #1
 8007882:	8523      	strh	r3, [r4, #40]	; 0x28
 8007884:	e791      	b.n	80077aa <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007886:	4629      	mov	r1, r5
 8007888:	4620      	mov	r0, r4
 800788a:	f7ff fd8d 	bl	80073a8 <I2C_ITAddrCplt>
 800788e:	e78c      	b.n	80077aa <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007890:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8007894:	d001      	beq.n	800789a <I2C_Slave_ISR_IT+0x142>
 8007896:	2f00      	cmp	r7, #0
 8007898:	d187      	bne.n	80077aa <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 800789a:	4620      	mov	r0, r4
 800789c:	f7ff fd42 	bl	8007324 <I2C_ITSlaveSeqCplt>
 80078a0:	e783      	b.n	80077aa <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 80078a2:	2002      	movs	r0, #2
 80078a4:	e784      	b.n	80077b0 <I2C_Slave_ISR_IT+0x58>

080078a6 <HAL_I2C_ER_IRQHandler>:
{
 80078a6:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80078a8:	6802      	ldr	r2, [r0, #0]
 80078aa:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80078ac:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80078ae:	f413 7f80 	tst.w	r3, #256	; 0x100
 80078b2:	d009      	beq.n	80078c8 <HAL_I2C_ER_IRQHandler+0x22>
 80078b4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80078b8:	d006      	beq.n	80078c8 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80078ba:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80078bc:	f044 0401 	orr.w	r4, r4, #1
 80078c0:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80078c2:	f44f 7480 	mov.w	r4, #256	; 0x100
 80078c6:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80078c8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80078cc:	d00a      	beq.n	80078e4 <HAL_I2C_ER_IRQHandler+0x3e>
 80078ce:	f011 0f80 	tst.w	r1, #128	; 0x80
 80078d2:	d007      	beq.n	80078e4 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80078d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80078d6:	f042 0208 	orr.w	r2, r2, #8
 80078da:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80078dc:	6802      	ldr	r2, [r0, #0]
 80078de:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80078e2:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80078e4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80078e8:	d00a      	beq.n	8007900 <HAL_I2C_ER_IRQHandler+0x5a>
 80078ea:	f011 0f80 	tst.w	r1, #128	; 0x80
 80078ee:	d007      	beq.n	8007900 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80078f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80078f2:	f043 0302 	orr.w	r3, r3, #2
 80078f6:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80078f8:	6803      	ldr	r3, [r0, #0]
 80078fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078fe:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8007900:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007902:	f011 0f0b 	tst.w	r1, #11
 8007906:	d100      	bne.n	800790a <HAL_I2C_ER_IRQHandler+0x64>
}
 8007908:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 800790a:	f7ff fded 	bl	80074e8 <I2C_ITError>
}
 800790e:	e7fb      	b.n	8007908 <HAL_I2C_ER_IRQHandler+0x62>

08007910 <I2C_DMAAbort>:
{
 8007910:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007912:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 8007914:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007916:	b10b      	cbz	r3, 800791c <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007918:	2200      	movs	r2, #0
 800791a:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 800791c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800791e:	b10b      	cbz	r3, 8007924 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007920:	2200      	movs	r2, #0
 8007922:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 8007924:	f7ff fdc8 	bl	80074b8 <I2C_TreatErrorCallback>
}
 8007928:	bd08      	pop	{r3, pc}

0800792a <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800792a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b20      	cmp	r3, #32
 8007932:	d124      	bne.n	800797e <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007934:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007938:	2b01      	cmp	r3, #1
 800793a:	d022      	beq.n	8007982 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800793c:	2301      	movs	r3, #1
 800793e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007942:	2324      	movs	r3, #36	; 0x24
 8007944:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007948:	6802      	ldr	r2, [r0, #0]
 800794a:	6813      	ldr	r3, [r2, #0]
 800794c:	f023 0301 	bic.w	r3, r3, #1
 8007950:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007952:	6802      	ldr	r2, [r0, #0]
 8007954:	6813      	ldr	r3, [r2, #0]
 8007956:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800795a:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800795c:	6802      	ldr	r2, [r0, #0]
 800795e:	6813      	ldr	r3, [r2, #0]
 8007960:	4319      	orrs	r1, r3
 8007962:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007964:	6802      	ldr	r2, [r0, #0]
 8007966:	6813      	ldr	r3, [r2, #0]
 8007968:	f043 0301 	orr.w	r3, r3, #1
 800796c:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800796e:	2320      	movs	r3, #32
 8007970:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007974:	2300      	movs	r3, #0
 8007976:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800797a:	4618      	mov	r0, r3
 800797c:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800797e:	2002      	movs	r0, #2
 8007980:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8007982:	2002      	movs	r0, #2
  }
}
 8007984:	4770      	bx	lr

08007986 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007986:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b20      	cmp	r3, #32
 800798e:	d122      	bne.n	80079d6 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007990:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007994:	2b01      	cmp	r3, #1
 8007996:	d020      	beq.n	80079da <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8007998:	2301      	movs	r3, #1
 800799a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800799e:	2324      	movs	r3, #36	; 0x24
 80079a0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079a4:	6802      	ldr	r2, [r0, #0]
 80079a6:	6813      	ldr	r3, [r2, #0]
 80079a8:	f023 0301 	bic.w	r3, r3, #1
 80079ac:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80079ae:	6802      	ldr	r2, [r0, #0]
 80079b0:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80079b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80079b6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80079ba:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079bc:	6802      	ldr	r2, [r0, #0]
 80079be:	6813      	ldr	r3, [r2, #0]
 80079c0:	f043 0301 	orr.w	r3, r3, #1
 80079c4:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079c6:	2320      	movs	r3, #32
 80079c8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079cc:	2300      	movs	r3, #0
 80079ce:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80079d2:	4618      	mov	r0, r3
 80079d4:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80079d6:	2002      	movs	r0, #2
 80079d8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80079da:	2002      	movs	r0, #2
  }
}
 80079dc:	4770      	bx	lr

080079de <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80079de:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80079e0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80079e4:	d043      	beq.n	8007a6e <HAL_PCD_EP_DB_Receive+0x90>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80079e6:	6804      	ldr	r4, [r0, #0]
 80079e8:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80079ec:	f891 c000 	ldrb.w	ip, [r1]
 80079f0:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 80079f4:	fa1e f383 	uxtah	r3, lr, r3
 80079f8:	4423      	add	r3, r4
 80079fa:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 80079fe:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8007a02:	698b      	ldr	r3, [r1, #24]
 8007a04:	42a3      	cmp	r3, r4
 8007a06:	d328      	bcc.n	8007a5a <HAL_PCD_EP_DB_Receive+0x7c>
    {
      ep->xfer_len -= count;
 8007a08:	1b1b      	subs	r3, r3, r4
 8007a0a:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8007a0c:	698b      	ldr	r3, [r1, #24]
 8007a0e:	b97b      	cbnz	r3, 8007a30 <HAL_PCD_EP_DB_Receive+0x52>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007a10:	6805      	ldr	r5, [r0, #0]
 8007a12:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a2c:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007a30:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007a34:	d00e      	beq.n	8007a54 <HAL_PCD_EP_DB_Receive+0x76>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007a36:	6802      	ldr	r2, [r0, #0]
 8007a38:	780d      	ldrb	r5, [r1, #0]
 8007a3a:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a50:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 8007a54:	b924      	cbnz	r4, 8007a60 <HAL_PCD_EP_DB_Receive+0x82>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 8007a56:	4620      	mov	r0, r4
 8007a58:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	618b      	str	r3, [r1, #24]
 8007a5e:	e7d5      	b.n	8007a0c <HAL_PCD_EP_DB_Receive+0x2e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007a60:	4623      	mov	r3, r4
 8007a62:	890a      	ldrh	r2, [r1, #8]
 8007a64:	6949      	ldr	r1, [r1, #20]
 8007a66:	6800      	ldr	r0, [r0, #0]
 8007a68:	f004 fa1d 	bl	800bea6 <USB_ReadPMA>
 8007a6c:	e7f3      	b.n	8007a56 <HAL_PCD_EP_DB_Receive+0x78>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007a6e:	6804      	ldr	r4, [r0, #0]
 8007a70:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8007a74:	f891 c000 	ldrb.w	ip, [r1]
 8007a78:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 8007a7c:	fa1e f383 	uxtah	r3, lr, r3
 8007a80:	4423      	add	r3, r4
 8007a82:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	; 0x406
 8007a86:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 8007a8a:	698b      	ldr	r3, [r1, #24]
 8007a8c:	42a3      	cmp	r3, r4
 8007a8e:	d32f      	bcc.n	8007af0 <HAL_PCD_EP_DB_Receive+0x112>
      ep->xfer_len -= count;
 8007a90:	1b1b      	subs	r3, r3, r4
 8007a92:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8007a94:	698b      	ldr	r3, [r1, #24]
 8007a96:	b97b      	cbnz	r3, 8007ab8 <HAL_PCD_EP_DB_Receive+0xda>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007a98:	6805      	ldr	r5, [r0, #0]
 8007a9a:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab4:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007ab8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007abc:	d10f      	bne.n	8007ade <HAL_PCD_EP_DB_Receive+0x100>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007abe:	6802      	ldr	r2, [r0, #0]
 8007ac0:	f891 c000 	ldrb.w	ip, [r1]
 8007ac4:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ad6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ada:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 8007ade:	2c00      	cmp	r4, #0
 8007ae0:	d0b9      	beq.n	8007a56 <HAL_PCD_EP_DB_Receive+0x78>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007ae2:	4623      	mov	r3, r4
 8007ae4:	894a      	ldrh	r2, [r1, #10]
 8007ae6:	6949      	ldr	r1, [r1, #20]
 8007ae8:	6800      	ldr	r0, [r0, #0]
 8007aea:	f004 f9dc 	bl	800bea6 <USB_ReadPMA>
 8007aee:	e7b2      	b.n	8007a56 <HAL_PCD_EP_DB_Receive+0x78>
      ep->xfer_len = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	618b      	str	r3, [r1, #24]
 8007af4:	e7ce      	b.n	8007a94 <HAL_PCD_EP_DB_Receive+0xb6>

08007af6 <HAL_PCD_Init>:
  if (hpcd == NULL)
 8007af6:	2800      	cmp	r0, #0
 8007af8:	d06d      	beq.n	8007bd6 <HAL_PCD_Init+0xe0>
{
 8007afa:	b530      	push	{r4, r5, lr}
 8007afc:	b087      	sub	sp, #28
 8007afe:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007b00:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8007b04:	b13b      	cbz	r3, 8007b16 <HAL_PCD_Init+0x20>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8007b06:	2303      	movs	r3, #3
 8007b08:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8007b0c:	6820      	ldr	r0, [r4, #0]
 8007b0e:	f003 faa8 	bl	800b062 <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b12:	2300      	movs	r3, #0
 8007b14:	e01f      	b.n	8007b56 <HAL_PCD_Init+0x60>
    hpcd->Lock = HAL_UNLOCKED;
 8007b16:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8007b1a:	f005 fc3d 	bl	800d398 <HAL_PCD_MspInit>
 8007b1e:	e7f2      	b.n	8007b06 <HAL_PCD_Init+0x10>
    hpcd->IN_ep[i].is_in = 1U;
 8007b20:	1c5a      	adds	r2, r3, #1
 8007b22:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8007b26:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8007b2a:	2001      	movs	r0, #1
 8007b2c:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 8007b2e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8007b32:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007b36:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007b3a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8007b3e:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007b40:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8007b44:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8007b48:	2000      	movs	r0, #0
 8007b4a:	f88c 0003 	strb.w	r0, [ip, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007b4e:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007b50:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8007b52:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b54:	b2d3      	uxtb	r3, r2
 8007b56:	6860      	ldr	r0, [r4, #4]
 8007b58:	4283      	cmp	r3, r0
 8007b5a:	d3e1      	bcc.n	8007b20 <HAL_PCD_Init+0x2a>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	e016      	b.n	8007b8e <HAL_PCD_Init+0x98>
    hpcd->OUT_ep[i].is_in = 0U;
 8007b60:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007b64:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8007b68:	2100      	movs	r1, #0
 8007b6a:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8007b6e:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007b72:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007b76:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007b7a:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007b7e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007b82:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8007b86:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	4298      	cmp	r0, r3
 8007b90:	d8e6      	bhi.n	8007b60 <HAL_PCD_Init+0x6a>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007b92:	46a4      	mov	ip, r4
 8007b94:	f85c 5b10 	ldr.w	r5, [ip], #16
 8007b98:	46ee      	mov	lr, sp
 8007b9a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007b9e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007ba2:	f8dc 3000 	ldr.w	r3, [ip]
 8007ba6:	f8ce 3000 	str.w	r3, [lr]
 8007baa:	1d23      	adds	r3, r4, #4
 8007bac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007bae:	4628      	mov	r0, r5
 8007bb0:	f003 fa61 	bl	800b076 <USB_DevInit>
  hpcd->USB_Address = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 8007bc0:	69e3      	ldr	r3, [r4, #28]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d002      	beq.n	8007bcc <HAL_PCD_Init+0xd6>
  return HAL_OK;
 8007bc6:	2000      	movs	r0, #0
}
 8007bc8:	b007      	add	sp, #28
 8007bca:	bd30      	pop	{r4, r5, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f000 fee8 	bl	80089a2 <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	e7f8      	b.n	8007bc8 <HAL_PCD_Init+0xd2>
    return HAL_ERROR;
 8007bd6:	2001      	movs	r0, #1
}
 8007bd8:	4770      	bx	lr

08007bda <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 8007bda:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d00e      	beq.n	8007c00 <HAL_PCD_Start+0x26>
{
 8007be2:	b510      	push	{r4, lr}
 8007be4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8007be6:	2301      	movs	r3, #1
 8007be8:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8007bec:	6800      	ldr	r0, [r0, #0]
 8007bee:	f003 fa2f 	bl	800b050 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007bf2:	6820      	ldr	r0, [r4, #0]
 8007bf4:	f003 fd84 	bl	800b700 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8007bfe:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007c00:	2002      	movs	r0, #2
}
 8007c02:	4770      	bx	lr

08007c04 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007c04:	b570      	push	{r4, r5, r6, lr}
 8007c06:	4605      	mov	r5, r0
 8007c08:	460c      	mov	r4, r1
 8007c0a:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007c0c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007c10:	f000 8109 	beq.w	8007e26 <HAL_PCD_EP_DB_Transmit+0x222>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007c14:	6802      	ldr	r2, [r0, #0]
 8007c16:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8007c1a:	7809      	ldrb	r1, [r1, #0]
 8007c1c:	00c8      	lsls	r0, r1, #3
 8007c1e:	fa10 f383 	uxtah	r3, r0, r3
 8007c22:	4413      	add	r3, r2
 8007c24:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007c28:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 8007c2c:	69a3      	ldr	r3, [r4, #24]
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d951      	bls.n	8007cd6 <HAL_PCD_EP_DB_Transmit+0xd2>
    {
      ep->xfer_len -= TxPctSize;
 8007c32:	1a9b      	subs	r3, r3, r2
 8007c34:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007c36:	69a3      	ldr	r3, [r4, #24]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d168      	bne.n	8007d0e <HAL_PCD_EP_DB_Transmit+0x10a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007c3c:	7863      	ldrb	r3, [r4, #1]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d14c      	bne.n	8007cdc <HAL_PCD_EP_DB_Transmit+0xd8>
 8007c42:	682a      	ldr	r2, [r5, #0]
 8007c44:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8007c48:	fa12 f383 	uxtah	r3, r2, r3
 8007c4c:	4403      	add	r3, r0
 8007c4e:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007c52:	b292      	uxth	r2, r2
 8007c54:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007c58:	b292      	uxth	r2, r2
 8007c5a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007c5e:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007c62:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007c66:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007c6a:	b292      	uxth	r2, r2
 8007c6c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007c70:	6829      	ldr	r1, [r5, #0]
 8007c72:	7862      	ldrb	r2, [r4, #1]
 8007c74:	2a00      	cmp	r2, #0
 8007c76:	d13d      	bne.n	8007cf4 <HAL_PCD_EP_DB_Transmit+0xf0>
 8007c78:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8007c7c:	fa11 f383 	uxtah	r3, r1, r3
 8007c80:	7822      	ldrb	r2, [r4, #0]
 8007c82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c86:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007c8a:	b292      	uxth	r2, r2
 8007c8c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007c90:	b292      	uxth	r2, r2
 8007c92:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007c96:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007c9a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007c9e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007ca2:	b292      	uxth	r2, r2
 8007ca4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007ca8:	7821      	ldrb	r1, [r4, #0]
 8007caa:	4628      	mov	r0, r5
 8007cac:	f005 fbb8 	bl	800d420 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007cb0:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8007cb4:	d040      	beq.n	8007d38 <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007cb6:	682a      	ldr	r2, [r5, #0]
 8007cb8:	7821      	ldrb	r1, [r4, #0]
 8007cba:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cd0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8007cd4:	e030      	b.n	8007d38 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	61a3      	str	r3, [r4, #24]
 8007cda:	e7ac      	b.n	8007c36 <HAL_PCD_EP_DB_Transmit+0x32>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d1c7      	bne.n	8007c70 <HAL_PCD_EP_DB_Transmit+0x6c>
 8007ce0:	682a      	ldr	r2, [r5, #0]
 8007ce2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8007ce6:	fa12 f383 	uxtah	r3, r2, r3
 8007cea:	4403      	add	r3, r0
 8007cec:	2200      	movs	r2, #0
 8007cee:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007cf2:	e7bd      	b.n	8007c70 <HAL_PCD_EP_DB_Transmit+0x6c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007cf4:	2a01      	cmp	r2, #1
 8007cf6:	d1d7      	bne.n	8007ca8 <HAL_PCD_EP_DB_Transmit+0xa4>
 8007cf8:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8007cfc:	fa11 f383 	uxtah	r3, r1, r3
 8007d00:	7821      	ldrb	r1, [r4, #0]
 8007d02:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007d0c:	e7cc      	b.n	8007ca8 <HAL_PCD_EP_DB_Transmit+0xa4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007d0e:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8007d12:	d00d      	beq.n	8007d30 <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007d14:	6828      	ldr	r0, [r5, #0]
 8007d16:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d2c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007d30:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d012      	beq.n	8007d5e <HAL_PCD_EP_DB_Transmit+0x15a>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007d38:	682a      	ldr	r2, [r5, #0]
 8007d3a:	7821      	ldrb	r1, [r4, #0]
 8007d3c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d4a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8007d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d56:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 8007d5e:	6963      	ldr	r3, [r4, #20]
 8007d60:	4413      	add	r3, r2
 8007d62:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8007d64:	69e3      	ldr	r3, [r4, #28]
 8007d66:	4413      	add	r3, r2
 8007d68:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8007d6a:	6a21      	ldr	r1, [r4, #32]
 8007d6c:	6923      	ldr	r3, [r4, #16]
 8007d6e:	4299      	cmp	r1, r3
 8007d70:	d31b      	bcc.n	8007daa <HAL_PCD_EP_DB_Transmit+0x1a6>
          ep->xfer_len_db -= len;
 8007d72:	1ac9      	subs	r1, r1, r3
 8007d74:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007d76:	7862      	ldrb	r2, [r4, #1]
 8007d78:	2a00      	cmp	r2, #0
 8007d7a:	d13f      	bne.n	8007dfc <HAL_PCD_EP_DB_Transmit+0x1f8>
 8007d7c:	6829      	ldr	r1, [r5, #0]
 8007d7e:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8007d82:	fa11 f282 	uxtah	r2, r1, r2
 8007d86:	7821      	ldrb	r1, [r4, #0]
 8007d88:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007d8c:	2b3e      	cmp	r3, #62	; 0x3e
 8007d8e:	d918      	bls.n	8007dc2 <HAL_PCD_EP_DB_Transmit+0x1be>
 8007d90:	0959      	lsrs	r1, r3, #5
 8007d92:	f013 0f1f 	tst.w	r3, #31
 8007d96:	d100      	bne.n	8007d9a <HAL_PCD_EP_DB_Transmit+0x196>
 8007d98:	3901      	subs	r1, #1
 8007d9a:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8007d9e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007da2:	b289      	uxth	r1, r1
 8007da4:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007da8:	e02a      	b.n	8007e00 <HAL_PCD_EP_DB_Transmit+0x1fc>
        else if (ep->xfer_len_db == 0U)
 8007daa:	b921      	cbnz	r1, 8007db6 <HAL_PCD_EP_DB_Transmit+0x1b2>
          ep->xfer_fill_db = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 8007db2:	4613      	mov	r3, r2
 8007db4:	e7df      	b.n	8007d76 <HAL_PCD_EP_DB_Transmit+0x172>
          ep->xfer_fill_db = 0U;
 8007db6:	2300      	movs	r3, #0
 8007db8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8007dbc:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	e7d9      	b.n	8007d76 <HAL_PCD_EP_DB_Transmit+0x172>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007dc2:	b98b      	cbnz	r3, 8007de8 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8007dc4:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8007dc8:	b289      	uxth	r1, r1
 8007dca:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8007dce:	b289      	uxth	r1, r1
 8007dd0:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007dd4:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8007dd8:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007ddc:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007de0:	b289      	uxth	r1, r1
 8007de2:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007de6:	e00b      	b.n	8007e00 <HAL_PCD_EP_DB_Transmit+0x1fc>
 8007de8:	0859      	lsrs	r1, r3, #1
 8007dea:	f013 0f01 	tst.w	r3, #1
 8007dee:	d000      	beq.n	8007df2 <HAL_PCD_EP_DB_Transmit+0x1ee>
 8007df0:	3101      	adds	r1, #1
 8007df2:	0289      	lsls	r1, r1, #10
 8007df4:	b289      	uxth	r1, r1
 8007df6:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007dfa:	e001      	b.n	8007e00 <HAL_PCD_EP_DB_Transmit+0x1fc>
 8007dfc:	2a01      	cmp	r2, #1
 8007dfe:	d006      	beq.n	8007e0e <HAL_PCD_EP_DB_Transmit+0x20a>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	8922      	ldrh	r2, [r4, #8]
 8007e04:	6961      	ldr	r1, [r4, #20]
 8007e06:	6828      	ldr	r0, [r5, #0]
 8007e08:	f003 fc89 	bl	800b71e <USB_WritePMA>
 8007e0c:	e794      	b.n	8007d38 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007e0e:	6829      	ldr	r1, [r5, #0]
 8007e10:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8007e14:	fa11 f282 	uxtah	r2, r1, r2
 8007e18:	7821      	ldrb	r1, [r4, #0]
 8007e1a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007e1e:	b299      	uxth	r1, r3
 8007e20:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007e24:	e7ec      	b.n	8007e00 <HAL_PCD_EP_DB_Transmit+0x1fc>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007e26:	6802      	ldr	r2, [r0, #0]
 8007e28:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8007e2c:	7809      	ldrb	r1, [r1, #0]
 8007e2e:	00c8      	lsls	r0, r1, #3
 8007e30:	fa10 f383 	uxtah	r3, r0, r3
 8007e34:	4413      	add	r3, r2
 8007e36:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007e3a:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8007e3e:	69a3      	ldr	r3, [r4, #24]
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d352      	bcc.n	8007eea <HAL_PCD_EP_DB_Transmit+0x2e6>
      ep->xfer_len -= TxPctSize;
 8007e44:	1a9b      	subs	r3, r3, r2
 8007e46:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8007e48:	69a3      	ldr	r3, [r4, #24]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d169      	bne.n	8007f22 <HAL_PCD_EP_DB_Transmit+0x31e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e4e:	7863      	ldrb	r3, [r4, #1]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d14d      	bne.n	8007ef0 <HAL_PCD_EP_DB_Transmit+0x2ec>
 8007e54:	682a      	ldr	r2, [r5, #0]
 8007e56:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8007e5a:	fa12 f383 	uxtah	r3, r2, r3
 8007e5e:	4418      	add	r0, r3
 8007e60:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 8007e70:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 8007e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e82:	6829      	ldr	r1, [r5, #0]
 8007e84:	7862      	ldrb	r2, [r4, #1]
 8007e86:	2a00      	cmp	r2, #0
 8007e88:	d13e      	bne.n	8007f08 <HAL_PCD_EP_DB_Transmit+0x304>
 8007e8a:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8007e8e:	fa11 f383 	uxtah	r3, r1, r3
 8007e92:	7822      	ldrb	r2, [r4, #0]
 8007e94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e98:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007e9c:	b292      	uxth	r2, r2
 8007e9e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007ea2:	b292      	uxth	r2, r2
 8007ea4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007ea8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007eac:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007eb0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007eb4:	b292      	uxth	r2, r2
 8007eb6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007eba:	7821      	ldrb	r1, [r4, #0]
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f005 faaf 	bl	800d420 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007ec2:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8007ec6:	f47f af37 	bne.w	8007d38 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007eca:	682a      	ldr	r2, [r5, #0]
 8007ecc:	7821      	ldrb	r1, [r4, #0]
 8007ece:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8007ee8:	e726      	b.n	8007d38 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	61a3      	str	r3, [r4, #24]
 8007eee:	e7ab      	b.n	8007e48 <HAL_PCD_EP_DB_Transmit+0x244>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d1c6      	bne.n	8007e82 <HAL_PCD_EP_DB_Transmit+0x27e>
 8007ef4:	682a      	ldr	r2, [r5, #0]
 8007ef6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8007efa:	fa12 f383 	uxtah	r3, r2, r3
 8007efe:	4418      	add	r0, r3
 8007f00:	2300      	movs	r3, #0
 8007f02:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 8007f06:	e7bc      	b.n	8007e82 <HAL_PCD_EP_DB_Transmit+0x27e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007f08:	2a01      	cmp	r2, #1
 8007f0a:	d1d6      	bne.n	8007eba <HAL_PCD_EP_DB_Transmit+0x2b6>
 8007f0c:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8007f10:	fa11 f383 	uxtah	r3, r1, r3
 8007f14:	7821      	ldrb	r1, [r4, #0]
 8007f16:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007f20:	e7cb      	b.n	8007eba <HAL_PCD_EP_DB_Transmit+0x2b6>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007f22:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8007f26:	d10d      	bne.n	8007f44 <HAL_PCD_EP_DB_Transmit+0x340>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007f28:	6828      	ldr	r0, [r5, #0]
 8007f2a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f40:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8007f44:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	f47f aef5 	bne.w	8007d38 <HAL_PCD_EP_DB_Transmit+0x134>
        ep->xfer_buff += TxPctSize;
 8007f4e:	6963      	ldr	r3, [r4, #20]
 8007f50:	4413      	add	r3, r2
 8007f52:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8007f54:	69e3      	ldr	r3, [r4, #28]
 8007f56:	4413      	add	r3, r2
 8007f58:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8007f5a:	6a21      	ldr	r1, [r4, #32]
 8007f5c:	6923      	ldr	r3, [r4, #16]
 8007f5e:	4299      	cmp	r1, r3
 8007f60:	d31b      	bcc.n	8007f9a <HAL_PCD_EP_DB_Transmit+0x396>
          ep->xfer_len_db -= len;
 8007f62:	1ac9      	subs	r1, r1, r3
 8007f64:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007f66:	6829      	ldr	r1, [r5, #0]
 8007f68:	7862      	ldrb	r2, [r4, #1]
 8007f6a:	2a00      	cmp	r2, #0
 8007f6c:	d13e      	bne.n	8007fec <HAL_PCD_EP_DB_Transmit+0x3e8>
 8007f6e:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8007f72:	fa11 f282 	uxtah	r2, r1, r2
 8007f76:	7821      	ldrb	r1, [r4, #0]
 8007f78:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007f7c:	2b3e      	cmp	r3, #62	; 0x3e
 8007f7e:	d918      	bls.n	8007fb2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8007f80:	0959      	lsrs	r1, r3, #5
 8007f82:	f013 0f1f 	tst.w	r3, #31
 8007f86:	d100      	bne.n	8007f8a <HAL_PCD_EP_DB_Transmit+0x386>
 8007f88:	3901      	subs	r1, #1
 8007f8a:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8007f8e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007f92:	b289      	uxth	r1, r1
 8007f94:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8007f98:	e02a      	b.n	8007ff0 <HAL_PCD_EP_DB_Transmit+0x3ec>
        else if (ep->xfer_len_db == 0U)
 8007f9a:	b921      	cbnz	r1, 8007fa6 <HAL_PCD_EP_DB_Transmit+0x3a2>
          ep->xfer_fill_db = 0U;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	e7df      	b.n	8007f66 <HAL_PCD_EP_DB_Transmit+0x362>
          ep->xfer_len_db = 0U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8007faa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 8007fae:	460b      	mov	r3, r1
 8007fb0:	e7d9      	b.n	8007f66 <HAL_PCD_EP_DB_Transmit+0x362>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007fb2:	b98b      	cbnz	r3, 8007fd8 <HAL_PCD_EP_DB_Transmit+0x3d4>
 8007fb4:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8007fb8:	b289      	uxth	r1, r1
 8007fba:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8007fbe:	b289      	uxth	r1, r1
 8007fc0:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8007fc4:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8007fc8:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007fcc:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007fd0:	b289      	uxth	r1, r1
 8007fd2:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8007fd6:	e00b      	b.n	8007ff0 <HAL_PCD_EP_DB_Transmit+0x3ec>
 8007fd8:	0859      	lsrs	r1, r3, #1
 8007fda:	f013 0f01 	tst.w	r3, #1
 8007fde:	d000      	beq.n	8007fe2 <HAL_PCD_EP_DB_Transmit+0x3de>
 8007fe0:	3101      	adds	r1, #1
 8007fe2:	0289      	lsls	r1, r1, #10
 8007fe4:	b289      	uxth	r1, r1
 8007fe6:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8007fea:	e001      	b.n	8007ff0 <HAL_PCD_EP_DB_Transmit+0x3ec>
 8007fec:	2a01      	cmp	r2, #1
 8007fee:	d006      	beq.n	8007ffe <HAL_PCD_EP_DB_Transmit+0x3fa>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	8962      	ldrh	r2, [r4, #10]
 8007ff4:	6961      	ldr	r1, [r4, #20]
 8007ff6:	6828      	ldr	r0, [r5, #0]
 8007ff8:	f003 fb91 	bl	800b71e <USB_WritePMA>
 8007ffc:	e69c      	b.n	8007d38 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007ffe:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8008002:	fa11 f282 	uxtah	r2, r1, r2
 8008006:	7821      	ldrb	r1, [r4, #0]
 8008008:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800800c:	b299      	uxth	r1, r3
 800800e:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8008012:	e7ed      	b.n	8007ff0 <HAL_PCD_EP_DB_Transmit+0x3ec>

08008014 <PCD_EP_ISR_Handler>:
{
 8008014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008018:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800801a:	e0ca      	b.n	80081b2 <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800801c:	8803      	ldrh	r3, [r0, #0]
 800801e:	b29b      	uxth	r3, r3
 8008020:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8008024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800802c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008030:	b29b      	uxth	r3, r3
 8008032:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008034:	6829      	ldr	r1, [r5, #0]
 8008036:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 800803a:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800803e:	00d2      	lsls	r2, r2, #3
 8008040:	fa12 f383 	uxtah	r3, r2, r3
 8008044:	440b      	add	r3, r1
 8008046:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800804a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800804e:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8008050:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8008052:	4413      	add	r3, r2
 8008054:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008056:	2100      	movs	r1, #0
 8008058:	4628      	mov	r0, r5
 800805a:	f005 f9e1 	bl	800d420 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800805e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 80a5 	beq.w	80081b2 <PCD_EP_ISR_Handler+0x19e>
 8008068:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800806a:	2b00      	cmp	r3, #0
 800806c:	f040 80a1 	bne.w	80081b2 <PCD_EP_ISR_Handler+0x19e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008070:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8008074:	682a      	ldr	r2, [r5, #0]
 8008076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800807a:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800807e:	2300      	movs	r3, #0
 8008080:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8008084:	e095      	b.n	80081b2 <PCD_EP_ISR_Handler+0x19e>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008086:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800808a:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 800808e:	00d2      	lsls	r2, r2, #3
 8008090:	fa12 f383 	uxtah	r3, r2, r3
 8008094:	4403      	add	r3, r0
 8008096:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 800809a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800809e:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80080a2:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 80080a6:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 80080aa:	f003 fefc 	bl	800bea6 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80080ae:	682a      	ldr	r2, [r5, #0]
 80080b0:	8813      	ldrh	r3, [r2, #0]
 80080b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b6:	051b      	lsls	r3, r3, #20
 80080b8:	0d1b      	lsrs	r3, r3, #20
 80080ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080be:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80080c0:	4628      	mov	r0, r5
 80080c2:	f005 f999 	bl	800d3f8 <HAL_PCD_SetupStageCallback>
 80080c6:	e074      	b.n	80081b2 <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80080c8:	b989      	cbnz	r1, 80080ee <PCD_EP_ISR_Handler+0xda>
 80080ca:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80080ce:	b292      	uxth	r2, r2
 80080d0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80080d4:	b292      	uxth	r2, r2
 80080d6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80080da:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80080de:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80080e2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80080e6:	b292      	uxth	r2, r2
 80080e8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80080ec:	e0bf      	b.n	800826e <PCD_EP_ISR_Handler+0x25a>
 80080ee:	084a      	lsrs	r2, r1, #1
 80080f0:	f011 0f01 	tst.w	r1, #1
 80080f4:	d000      	beq.n	80080f8 <PCD_EP_ISR_Handler+0xe4>
 80080f6:	3201      	adds	r2, #1
 80080f8:	0292      	lsls	r2, r2, #10
 80080fa:	b292      	uxth	r2, r2
 80080fc:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8008100:	e0b5      	b.n	800826e <PCD_EP_ISR_Handler+0x25a>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008102:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8008106:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008108:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800810c:	f040 80be 	bne.w	800828c <PCD_EP_ISR_Handler+0x278>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8008110:	f016 0f80 	tst.w	r6, #128	; 0x80
 8008114:	d04d      	beq.n	80081b2 <PCD_EP_ISR_Handler+0x19e>
        ep = &hpcd->IN_ep[epindex];
 8008116:	1c62      	adds	r2, r4, #1
 8008118:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800811c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008120:	6828      	ldr	r0, [r5, #0]
 8008122:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8008126:	b29b      	uxth	r3, r3
 8008128:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800812c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008138:	b29b      	uxth	r3, r3
 800813a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->type != EP_TYPE_BULK)
 800813e:	78cb      	ldrb	r3, [r1, #3]
 8008140:	2b02      	cmp	r3, #2
 8008142:	f000 81a7 	beq.w	8008494 <PCD_EP_ISR_Handler+0x480>
          ep->xfer_len = 0U;
 8008146:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800814a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800814e:	2200      	movs	r2, #0
 8008150:	641a      	str	r2, [r3, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8008152:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008156:	b323      	cbz	r3, 80081a2 <PCD_EP_ISR_Handler+0x18e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008158:	f016 0f40 	tst.w	r6, #64	; 0x40
 800815c:	f000 8163 	beq.w	8008426 <PCD_EP_ISR_Handler+0x412>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008160:	784b      	ldrb	r3, [r1, #1]
 8008162:	2b00      	cmp	r3, #0
 8008164:	f040 814c 	bne.w	8008400 <PCD_EP_ISR_Handler+0x3ec>
 8008168:	682a      	ldr	r2, [r5, #0]
 800816a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800816e:	fa12 f383 	uxtah	r3, r2, r3
 8008172:	1c62      	adds	r2, r4, #1
 8008174:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008178:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 800817c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008180:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8008184:	b292      	uxth	r2, r2
 8008186:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800818a:	b292      	uxth	r2, r2
 800818c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8008190:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8008194:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8008198:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800819c:	b292      	uxth	r2, r2
 800819e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80081a2:	3401      	adds	r4, #1
 80081a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80081a8:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 80081ac:	4628      	mov	r0, r5
 80081ae:	f005 f937 	bl	800d420 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80081b2:	6828      	ldr	r0, [r5, #0]
 80081b4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80081b8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80081bc:	f000 81ae 	beq.w	800851c <PCD_EP_ISR_Handler+0x508>
    wIstr = hpcd->Instance->ISTR;
 80081c0:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 80081c4:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 80081c6:	f014 040f 	ands.w	r4, r4, #15
 80081ca:	d19a      	bne.n	8008102 <PCD_EP_ISR_Handler+0xee>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80081cc:	f013 0f10 	tst.w	r3, #16
 80081d0:	f43f af24 	beq.w	800801c <PCD_EP_ISR_Handler+0x8>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80081d4:	8803      	ldrh	r3, [r0, #0]
 80081d6:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80081d8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80081dc:	f47f af53 	bne.w	8008086 <PCD_EP_ISR_Handler+0x72>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80081e0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80081e4:	d0e5      	beq.n	80081b2 <PCD_EP_ISR_Handler+0x19e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80081e6:	8803      	ldrh	r3, [r0, #0]
 80081e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ec:	051b      	lsls	r3, r3, #20
 80081ee:	0d1b      	lsrs	r3, r3, #20
 80081f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f4:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80081f6:	6828      	ldr	r0, [r5, #0]
 80081f8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80081fc:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8008200:	00d2      	lsls	r2, r2, #3
 8008202:	fa12 f383 	uxtah	r3, r2, r3
 8008206:	4403      	add	r3, r0
 8008208:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 800820c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008210:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008214:	b18b      	cbz	r3, 800823a <PCD_EP_ISR_Handler+0x226>
 8008216:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 800821a:	b171      	cbz	r1, 800823a <PCD_EP_ISR_Handler+0x226>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800821c:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8008220:	f003 fe41 	bl	800bea6 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8008224:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 8008228:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 800822c:	4413      	add	r3, r2
 800822e:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008232:	2100      	movs	r1, #0
 8008234:	4628      	mov	r0, r5
 8008236:	f005 f8e7 	bl	800d408 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800823a:	682b      	ldr	r3, [r5, #0]
 800823c:	881a      	ldrh	r2, [r3, #0]
 800823e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008242:	d1b6      	bne.n	80081b2 <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008244:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8008248:	fa13 f382 	uxtah	r3, r3, r2
 800824c:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 8008250:	293e      	cmp	r1, #62	; 0x3e
 8008252:	f67f af39 	bls.w	80080c8 <PCD_EP_ISR_Handler+0xb4>
 8008256:	094a      	lsrs	r2, r1, #5
 8008258:	f011 0f1f 	tst.w	r1, #31
 800825c:	d100      	bne.n	8008260 <PCD_EP_ISR_Handler+0x24c>
 800825e:	3a01      	subs	r2, #1
 8008260:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8008264:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008268:	b292      	uxth	r2, r2
 800826a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800826e:	682a      	ldr	r2, [r5, #0]
 8008270:	8813      	ldrh	r3, [r2, #0]
 8008272:	b29b      	uxth	r3, r3
 8008274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008288:	8013      	strh	r3, [r2, #0]
 800828a:	e792      	b.n	80081b2 <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800828c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8008290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008294:	051b      	lsls	r3, r3, #20
 8008296:	0d1b      	lsrs	r3, r3, #20
 8008298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800829c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 80082a0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80082a4:	00c9      	lsls	r1, r1, #3
 80082a6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80082aa:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 80082ae:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80082b2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80082b6:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d140      	bne.n	8008340 <PCD_EP_ISR_Handler+0x32c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80082be:	6828      	ldr	r0, [r5, #0]
 80082c0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80082c4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80082c8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80082cc:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 80082d0:	00d2      	lsls	r2, r2, #3
 80082d2:	fa12 f383 	uxtah	r3, r2, r3
 80082d6:	4403      	add	r3, r0
 80082d8:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 80082dc:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 80082e0:	bb17      	cbnz	r7, 8008328 <PCD_EP_ISR_Handler+0x314>
        ep->xfer_count += count;
 80082e2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80082e6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80082ea:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80082ee:	443a      	add	r2, r7
 80082f0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 80082f4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80082f8:	443a      	add	r2, r7
 80082fa:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80082fe:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8008302:	b13b      	cbz	r3, 8008314 <PCD_EP_ISR_Handler+0x300>
 8008304:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8008308:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800830c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8008310:	429f      	cmp	r7, r3
 8008312:	d270      	bcs.n	80083f6 <PCD_EP_ISR_Handler+0x3e2>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008314:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8008318:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800831c:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8008320:	4628      	mov	r0, r5
 8008322:	f005 f871 	bl	800d408 <HAL_PCD_DataOutStageCallback>
 8008326:	e6f3      	b.n	8008110 <PCD_EP_ISR_Handler+0xfc>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008328:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800832c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8008330:	463b      	mov	r3, r7
 8008332:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8008336:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800833a:	f003 fdb4 	bl	800bea6 <USB_ReadPMA>
 800833e:	e7d0      	b.n	80082e2 <PCD_EP_ISR_Handler+0x2ce>
          if (ep->type == EP_TYPE_BULK)
 8008340:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8008344:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8008348:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 800834c:	2b02      	cmp	r3, #2
 800834e:	d033      	beq.n	80083b8 <PCD_EP_ISR_Handler+0x3a4>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008350:	6829      	ldr	r1, [r5, #0]
 8008352:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008356:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800835a:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 800835e:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8008362:	b29b      	uxth	r3, r3
 8008364:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800836c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008370:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008374:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008378:	6828      	ldr	r0, [r5, #0]
 800837a:	f892 3168 	ldrb.w	r3, [r2, #360]	; 0x168
 800837e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008382:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8008386:	d01e      	beq.n	80083c6 <PCD_EP_ISR_Handler+0x3b2>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008388:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800838c:	00db      	lsls	r3, r3, #3
 800838e:	fa13 f382 	uxtah	r3, r3, r2
 8008392:	4403      	add	r3, r0
 8008394:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	; 0x402
 8008398:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 800839c:	2f00      	cmp	r7, #0
 800839e:	d0a0      	beq.n	80082e2 <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80083a0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80083a4:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80083a8:	463b      	mov	r3, r7
 80083aa:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80083ae:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80083b2:	f003 fd78 	bl	800bea6 <USB_ReadPMA>
 80083b6:	e794      	b.n	80082e2 <PCD_EP_ISR_Handler+0x2ce>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80083b8:	4632      	mov	r2, r6
 80083ba:	4641      	mov	r1, r8
 80083bc:	4628      	mov	r0, r5
 80083be:	f7ff fb0e 	bl	80079de <HAL_PCD_EP_DB_Receive>
 80083c2:	4607      	mov	r7, r0
 80083c4:	e78d      	b.n	80082e2 <PCD_EP_ISR_Handler+0x2ce>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80083c6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	fa13 f382 	uxtah	r3, r3, r2
 80083d0:	4403      	add	r3, r0
 80083d2:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 80083d6:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 80083da:	2f00      	cmp	r7, #0
 80083dc:	d081      	beq.n	80082e2 <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80083de:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80083e2:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80083e6:	463b      	mov	r3, r7
 80083e8:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 80083ec:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80083f0:	f003 fd59 	bl	800bea6 <USB_ReadPMA>
 80083f4:	e775      	b.n	80082e2 <PCD_EP_ISR_Handler+0x2ce>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80083f6:	4641      	mov	r1, r8
 80083f8:	6828      	ldr	r0, [r5, #0]
 80083fa:	f003 f9a4 	bl	800b746 <USB_EPStartXfer>
 80083fe:	e687      	b.n	8008110 <PCD_EP_ISR_Handler+0xfc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008400:	2b01      	cmp	r3, #1
 8008402:	f47f aece 	bne.w	80081a2 <PCD_EP_ISR_Handler+0x18e>
 8008406:	682a      	ldr	r2, [r5, #0]
 8008408:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800840c:	fa12 f383 	uxtah	r3, r2, r3
 8008410:	1c62      	adds	r2, r4, #1
 8008412:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008416:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 800841a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800841e:	2200      	movs	r2, #0
 8008420:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8008424:	e6bd      	b.n	80081a2 <PCD_EP_ISR_Handler+0x18e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008426:	6829      	ldr	r1, [r5, #0]
 8008428:	1c63      	adds	r3, r4, #1
 800842a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800842e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8008432:	785a      	ldrb	r2, [r3, #1]
 8008434:	b9e2      	cbnz	r2, 8008470 <PCD_EP_ISR_Handler+0x45c>
 8008436:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 800843a:	fa11 f383 	uxtah	r3, r1, r3
 800843e:	1c62      	adds	r2, r4, #1
 8008440:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008444:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8008448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800844c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8008450:	b292      	uxth	r2, r2
 8008452:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008456:	b292      	uxth	r2, r2
 8008458:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800845c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8008460:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8008464:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008468:	b292      	uxth	r2, r2
 800846a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800846e:	e698      	b.n	80081a2 <PCD_EP_ISR_Handler+0x18e>
 8008470:	2a01      	cmp	r2, #1
 8008472:	f47f ae96 	bne.w	80081a2 <PCD_EP_ISR_Handler+0x18e>
 8008476:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 800847a:	fa11 f383 	uxtah	r3, r1, r3
 800847e:	1c62      	adds	r2, r4, #1
 8008480:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008484:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8008488:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800848c:	2200      	movs	r2, #0
 800848e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8008492:	e686      	b.n	80081a2 <PCD_EP_ISR_Handler+0x18e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008494:	f416 7f80 	tst.w	r6, #256	; 0x100
 8008498:	d13b      	bne.n	8008512 <PCD_EP_ISR_Handler+0x4fe>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800849a:	6828      	ldr	r0, [r5, #0]
 800849c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80084a0:	1c62      	adds	r2, r4, #1
 80084a2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80084a6:	f815 6032 	ldrb.w	r6, [r5, r2, lsl #3]
 80084aa:	00f2      	lsls	r2, r6, #3
 80084ac:	fa12 f383 	uxtah	r3, r2, r3
 80084b0:	4403      	add	r3, r0
 80084b2:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80084b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 80084ba:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80084be:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80084c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d910      	bls.n	80084ea <PCD_EP_ISR_Handler+0x4d6>
              ep->xfer_len -= TxPctSize;
 80084c8:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 80084cc:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 80084d0:	1ad2      	subs	r2, r2, r3
 80084d2:	643a      	str	r2, [r7, #64]	; 0x40
            if (ep->xfer_len == 0U)
 80084d4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80084d8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80084dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80084de:	b95a      	cbnz	r2, 80084f8 <PCD_EP_ISR_Handler+0x4e4>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80084e0:	4631      	mov	r1, r6
 80084e2:	4628      	mov	r0, r5
 80084e4:	f004 ff9c 	bl	800d420 <HAL_PCD_DataInStageCallback>
 80084e8:	e663      	b.n	80081b2 <PCD_EP_ISR_Handler+0x19e>
              ep->xfer_len = 0U;
 80084ea:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80084ee:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80084f2:	2700      	movs	r7, #0
 80084f4:	6417      	str	r7, [r2, #64]	; 0x40
 80084f6:	e7ed      	b.n	80084d4 <PCD_EP_ISR_Handler+0x4c0>
              ep->xfer_buff += TxPctSize;
 80084f8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80084fc:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8008500:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8008502:	441e      	add	r6, r3
 8008504:	63d6      	str	r6, [r2, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8008506:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8008508:	4423      	add	r3, r4
 800850a:	6453      	str	r3, [r2, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800850c:	f003 f91b 	bl	800b746 <USB_EPStartXfer>
 8008510:	e64f      	b.n	80081b2 <PCD_EP_ISR_Handler+0x19e>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008512:	4632      	mov	r2, r6
 8008514:	4628      	mov	r0, r5
 8008516:	f7ff fb75 	bl	8007c04 <HAL_PCD_EP_DB_Transmit>
 800851a:	e64a      	b.n	80081b2 <PCD_EP_ISR_Handler+0x19e>
}
 800851c:	2000      	movs	r0, #0
 800851e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008522 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8008522:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8008526:	2b01      	cmp	r3, #1
 8008528:	d00d      	beq.n	8008546 <HAL_PCD_SetAddress+0x24>
{
 800852a:	b510      	push	{r4, lr}
 800852c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800852e:	2301      	movs	r3, #1
 8008530:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8008534:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008538:	6800      	ldr	r0, [r0, #0]
 800853a:	f003 f8db 	bl	800b6f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800853e:	2000      	movs	r0, #0
 8008540:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8008544:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008546:	2002      	movs	r0, #2
}
 8008548:	4770      	bx	lr

0800854a <HAL_PCD_IRQHandler>:
{
 800854a:	b510      	push	{r4, lr}
 800854c:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800854e:	6800      	ldr	r0, [r0, #0]
 8008550:	f003 f8e1 	bl	800b716 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8008554:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8008558:	d123      	bne.n	80085a2 <HAL_PCD_IRQHandler+0x58>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800855a:	f410 6f80 	tst.w	r0, #1024	; 0x400
 800855e:	d124      	bne.n	80085aa <HAL_PCD_IRQHandler+0x60>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8008560:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8008564:	d132      	bne.n	80085cc <HAL_PCD_IRQHandler+0x82>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8008566:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800856a:	d139      	bne.n	80085e0 <HAL_PCD_IRQHandler+0x96>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800856c:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8008570:	d140      	bne.n	80085f4 <HAL_PCD_IRQHandler+0xaa>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8008572:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8008576:	d167      	bne.n	8008648 <HAL_PCD_IRQHandler+0xfe>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8008578:	f010 0f80 	tst.w	r0, #128	; 0x80
 800857c:	f040 8081 	bne.w	8008682 <HAL_PCD_IRQHandler+0x138>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008580:	f410 7f00 	tst.w	r0, #512	; 0x200
 8008584:	f040 80ad 	bne.w	80086e2 <HAL_PCD_IRQHandler+0x198>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8008588:	f410 7f80 	tst.w	r0, #256	; 0x100
 800858c:	d027      	beq.n	80085de <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800858e:	6822      	ldr	r2, [r4, #0]
 8008590:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008594:	b29b      	uxth	r3, r3
 8008596:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800859a:	b29b      	uxth	r3, r3
 800859c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 80085a0:	e01d      	b.n	80085de <HAL_PCD_IRQHandler+0x94>
    (void)PCD_EP_ISR_Handler(hpcd);
 80085a2:	4620      	mov	r0, r4
 80085a4:	f7ff fd36 	bl	8008014 <PCD_EP_ISR_Handler>
    return;
 80085a8:	e019      	b.n	80085de <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80085aa:	6822      	ldr	r2, [r4, #0]
 80085ac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80085bc:	4620      	mov	r0, r4
 80085be:	f004 ff40 	bl	800d442 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80085c2:	2100      	movs	r1, #0
 80085c4:	4620      	mov	r0, r4
 80085c6:	f7ff ffac 	bl	8008522 <HAL_PCD_SetAddress>
    return;
 80085ca:	e008      	b.n	80085de <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80085cc:	6822      	ldr	r2, [r4, #0]
 80085ce:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085d8:	b29b      	uxth	r3, r3
 80085da:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80085de:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80085e0:	6822      	ldr	r2, [r4, #0]
 80085e2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 80085f2:	e7f4      	b.n	80085de <HAL_PCD_IRQHandler+0x94>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80085f4:	6822      	ldr	r2, [r4, #0]
 80085f6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	f023 0304 	bic.w	r3, r3, #4
 8008600:	b29b      	uxth	r3, r3
 8008602:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008606:	6822      	ldr	r2, [r4, #0]
 8008608:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800860c:	b29b      	uxth	r3, r3
 800860e:	f023 0308 	bic.w	r3, r3, #8
 8008612:	b29b      	uxth	r3, r3
 8008614:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8008618:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 800861c:	2b01      	cmp	r3, #1
 800861e:	d00c      	beq.n	800863a <HAL_PCD_IRQHandler+0xf0>
    HAL_PCD_ResumeCallback(hpcd);
 8008620:	4620      	mov	r0, r4
 8008622:	f004 ff31 	bl	800d488 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008626:	6822      	ldr	r2, [r4, #0]
 8008628:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800862c:	b29b      	uxth	r3, r3
 800862e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008632:	b29b      	uxth	r3, r3
 8008634:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8008638:	e7d1      	b.n	80085de <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 800863a:	2100      	movs	r1, #0
 800863c:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008640:	4620      	mov	r0, r4
 8008642:	f004 ffd9 	bl	800d5f8 <HAL_PCDEx_LPM_Callback>
 8008646:	e7eb      	b.n	8008620 <HAL_PCD_IRQHandler+0xd6>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008648:	6822      	ldr	r2, [r4, #0]
 800864a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800864e:	b29b      	uxth	r3, r3
 8008650:	f043 0308 	orr.w	r3, r3, #8
 8008654:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008658:	6822      	ldr	r2, [r4, #0]
 800865a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800865e:	b29b      	uxth	r3, r3
 8008660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008664:	b29b      	uxth	r3, r3
 8008666:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800866a:	6822      	ldr	r2, [r4, #0]
 800866c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8008670:	b29b      	uxth	r3, r3
 8008672:	f043 0304 	orr.w	r3, r3, #4
 8008676:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800867a:	4620      	mov	r0, r4
 800867c:	f004 fef4 	bl	800d468 <HAL_PCD_SuspendCallback>
    return;
 8008680:	e7ad      	b.n	80085de <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8008682:	6822      	ldr	r2, [r4, #0]
 8008684:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008688:	b29b      	uxth	r3, r3
 800868a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800868e:	b29b      	uxth	r3, r3
 8008690:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8008694:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8008698:	b9fb      	cbnz	r3, 80086da <HAL_PCD_IRQHandler+0x190>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800869a:	6822      	ldr	r2, [r4, #0]
 800869c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	f043 0304 	orr.w	r3, r3, #4
 80086a6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80086aa:	6822      	ldr	r2, [r4, #0]
 80086ac:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	f043 0308 	orr.w	r3, r3, #8
 80086b6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 80086ba:	2101      	movs	r1, #1
 80086bc:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80086c0:	6823      	ldr	r3, [r4, #0]
 80086c2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80086c6:	f3c3 038d 	ubfx	r3, r3, #2, #14
 80086ca:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80086ce:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80086d2:	4620      	mov	r0, r4
 80086d4:	f004 ff90 	bl	800d5f8 <HAL_PCDEx_LPM_Callback>
 80086d8:	e781      	b.n	80085de <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_SuspendCallback(hpcd);
 80086da:	4620      	mov	r0, r4
 80086dc:	f004 fec4 	bl	800d468 <HAL_PCD_SuspendCallback>
    return;
 80086e0:	e77d      	b.n	80085de <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80086e2:	6822      	ldr	r2, [r4, #0]
 80086e4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80086f4:	4620      	mov	r0, r4
 80086f6:	f004 fe9e 	bl	800d436 <HAL_PCD_SOFCallback>
    return;
 80086fa:	e770      	b.n	80085de <HAL_PCD_IRQHandler+0x94>

080086fc <HAL_PCD_EP_Open>:
{
 80086fc:	b510      	push	{r4, lr}
 80086fe:	4604      	mov	r4, r0
 8008700:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8008702:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008706:	d12a      	bne.n	800875e <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008708:	f001 0007 	and.w	r0, r1, #7
 800870c:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8008710:	00c9      	lsls	r1, r1, #3
 8008712:	f501 7eb4 	add.w	lr, r1, #360	; 0x168
 8008716:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 800871a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800871e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8008722:	f04f 0e00 	mov.w	lr, #0
 8008726:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800872a:	f00c 0c07 	and.w	ip, ip, #7
 800872e:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 8008732:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8008734:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8008736:	784a      	ldrb	r2, [r1, #1]
 8008738:	b10a      	cbz	r2, 800873e <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 800873a:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 800873e:	2b02      	cmp	r3, #2
 8008740:	d019      	beq.n	8008776 <HAL_PCD_EP_Open+0x7a>
  __HAL_LOCK(hpcd);
 8008742:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8008746:	2b01      	cmp	r3, #1
 8008748:	d018      	beq.n	800877c <HAL_PCD_EP_Open+0x80>
 800874a:	2301      	movs	r3, #1
 800874c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008750:	6820      	ldr	r0, [r4, #0]
 8008752:	f002 fca1 	bl	800b098 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008756:	2000      	movs	r0, #0
 8008758:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800875c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800875e:	f001 0007 	and.w	r0, r1, #7
 8008762:	3001      	adds	r0, #1
 8008764:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8008768:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 800876c:	f04f 0e01 	mov.w	lr, #1
 8008770:	f881 e001 	strb.w	lr, [r1, #1]
 8008774:	e7d9      	b.n	800872a <HAL_PCD_EP_Open+0x2e>
    ep->data_pid_start = 0U;
 8008776:	2300      	movs	r3, #0
 8008778:	710b      	strb	r3, [r1, #4]
 800877a:	e7e2      	b.n	8008742 <HAL_PCD_EP_Open+0x46>
  __HAL_LOCK(hpcd);
 800877c:	2002      	movs	r0, #2
 800877e:	e7ed      	b.n	800875c <HAL_PCD_EP_Open+0x60>

08008780 <HAL_PCD_EP_Close>:
{
 8008780:	b510      	push	{r4, lr}
 8008782:	4604      	mov	r4, r0
 8008784:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8008786:	f011 0f80 	tst.w	r1, #128	; 0x80
 800878a:	d11f      	bne.n	80087cc <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800878c:	f001 0207 	and.w	r2, r1, #7
 8008790:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8008794:	00c9      	lsls	r1, r1, #3
 8008796:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800879a:	4401      	add	r1, r0
    ep->is_in = 0U;
 800879c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80087a0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80087a4:	2000      	movs	r0, #0
 80087a6:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 80087aa:	f003 0307 	and.w	r3, r3, #7
 80087ae:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80087b0:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d013      	beq.n	80087e0 <HAL_PCD_EP_Close+0x60>
 80087b8:	2301      	movs	r3, #1
 80087ba:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80087be:	6820      	ldr	r0, [r4, #0]
 80087c0:	f002 fe37 	bl	800b432 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80087c4:	2000      	movs	r0, #0
 80087c6:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80087ca:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087cc:	f001 0207 	and.w	r2, r1, #7
 80087d0:	3201      	adds	r2, #1
 80087d2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80087d6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80087da:	2001      	movs	r0, #1
 80087dc:	7048      	strb	r0, [r1, #1]
 80087de:	e7e4      	b.n	80087aa <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 80087e0:	2002      	movs	r0, #2
 80087e2:	e7f2      	b.n	80087ca <HAL_PCD_EP_Close+0x4a>

080087e4 <HAL_PCD_EP_Receive>:
{
 80087e4:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80087e6:	f001 0407 	and.w	r4, r1, #7
 80087ea:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80087ee:	00c9      	lsls	r1, r1, #3
 80087f0:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80087f4:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80087f6:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 80087fa:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80087fe:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 8008802:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 8008806:	2300      	movs	r3, #0
 8008808:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
  ep->is_in = 0U;
 800880c:	f88c 3169 	strb.w	r3, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8008810:	f88c 4168 	strb.w	r4, [ip, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008814:	b924      	cbnz	r4, 8008820 <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008816:	6800      	ldr	r0, [r0, #0]
 8008818:	f002 ff95 	bl	800b746 <USB_EPStartXfer>
}
 800881c:	2000      	movs	r0, #0
 800881e:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008820:	6800      	ldr	r0, [r0, #0]
 8008822:	f002 ff90 	bl	800b746 <USB_EPStartXfer>
 8008826:	e7f9      	b.n	800881c <HAL_PCD_EP_Receive+0x38>

08008828 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008828:	f001 0107 	and.w	r1, r1, #7
 800882c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008830:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8008834:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8008838:	4770      	bx	lr

0800883a <HAL_PCD_EP_Transmit>:
{
 800883a:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800883c:	f001 0407 	and.w	r4, r1, #7
 8008840:	f104 0c01 	add.w	ip, r4, #1
 8008844:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8008848:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 800884c:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
 8008850:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8008854:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
  ep->xfer_len = len;
 8008858:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 800885c:	2201      	movs	r2, #1
 800885e:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
  ep->xfer_len_db = len;
 8008862:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
  ep->xfer_count = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44
  ep->is_in = 1U;
 800886c:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800886e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8008872:	f800 403c 	strb.w	r4, [r0, ip, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008876:	b924      	cbnz	r4, 8008882 <HAL_PCD_EP_Transmit+0x48>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008878:	6800      	ldr	r0, [r0, #0]
 800887a:	f002 ff64 	bl	800b746 <USB_EPStartXfer>
}
 800887e:	2000      	movs	r0, #0
 8008880:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008882:	6800      	ldr	r0, [r0, #0]
 8008884:	f002 ff5f 	bl	800b746 <USB_EPStartXfer>
 8008888:	e7f9      	b.n	800887e <HAL_PCD_EP_Transmit+0x44>

0800888a <HAL_PCD_EP_SetStall>:
{
 800888a:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800888c:	f001 0207 	and.w	r2, r1, #7
 8008890:	6841      	ldr	r1, [r0, #4]
 8008892:	428a      	cmp	r2, r1
 8008894:	d82a      	bhi.n	80088ec <HAL_PCD_EP_SetStall+0x62>
{
 8008896:	b510      	push	{r4, lr}
 8008898:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800889a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800889e:	d11d      	bne.n	80088dc <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 80088a0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80088a4:	00c9      	lsls	r1, r1, #3
 80088a6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80088aa:	4401      	add	r1, r0
    ep->is_in = 0U;
 80088ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80088b0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80088b4:	2000      	movs	r0, #0
 80088b6:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 80088ba:	2301      	movs	r3, #1
 80088bc:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80088be:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80088c0:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d013      	beq.n	80088f0 <HAL_PCD_EP_SetStall+0x66>
 80088c8:	2301      	movs	r3, #1
 80088ca:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80088ce:	6820      	ldr	r0, [r4, #0]
 80088d0:	f002 fe9a 	bl	800b608 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 80088d4:	2000      	movs	r0, #0
 80088d6:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80088da:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088dc:	1c53      	adds	r3, r2, #1
 80088de:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80088e2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80088e6:	2001      	movs	r0, #1
 80088e8:	7048      	strb	r0, [r1, #1]
 80088ea:	e7e6      	b.n	80088ba <HAL_PCD_EP_SetStall+0x30>
    return HAL_ERROR;
 80088ec:	2001      	movs	r0, #1
}
 80088ee:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80088f0:	2002      	movs	r0, #2
 80088f2:	e7f2      	b.n	80088da <HAL_PCD_EP_SetStall+0x50>

080088f4 <HAL_PCD_EP_ClrStall>:
{
 80088f4:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80088f6:	f001 010f 	and.w	r1, r1, #15
 80088fa:	6842      	ldr	r2, [r0, #4]
 80088fc:	4291      	cmp	r1, r2
 80088fe:	d830      	bhi.n	8008962 <HAL_PCD_EP_ClrStall+0x6e>
{
 8008900:	b510      	push	{r4, lr}
 8008902:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8008904:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008908:	d121      	bne.n	800894e <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800890a:	f003 0207 	and.w	r2, r3, #7
 800890e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8008912:	00c9      	lsls	r1, r1, #3
 8008914:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8008918:	4401      	add	r1, r0
    ep->is_in = 0U;
 800891a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800891e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8008922:	2000      	movs	r0, #0
 8008924:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8008928:	2200      	movs	r2, #0
 800892a:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800892c:	f003 0307 	and.w	r3, r3, #7
 8008930:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8008932:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8008936:	2b01      	cmp	r3, #1
 8008938:	d015      	beq.n	8008966 <HAL_PCD_EP_ClrStall+0x72>
 800893a:	2301      	movs	r3, #1
 800893c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008940:	6820      	ldr	r0, [r4, #0]
 8008942:	f002 fe86 	bl	800b652 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008946:	2000      	movs	r0, #0
 8008948:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800894c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800894e:	f003 0207 	and.w	r2, r3, #7
 8008952:	3201      	adds	r2, #1
 8008954:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8008958:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800895c:	2001      	movs	r0, #1
 800895e:	7048      	strb	r0, [r1, #1]
 8008960:	e7e2      	b.n	8008928 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8008962:	2001      	movs	r0, #1
}
 8008964:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8008966:	2002      	movs	r0, #2
 8008968:	e7f0      	b.n	800894c <HAL_PCD_EP_ClrStall+0x58>

0800896a <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800896a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800896e:	d00b      	beq.n	8008988 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008970:	f001 0107 	and.w	r1, r1, #7
 8008974:	3101      	adds	r1, #1
 8008976:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800897a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800897e:	b952      	cbnz	r2, 8008996 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008980:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008982:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8008984:	2000      	movs	r0, #0
 8008986:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8008988:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800898c:	00c9      	lsls	r1, r1, #3
 800898e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8008992:	4401      	add	r1, r0
 8008994:	e7f3      	b.n	800897e <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8008996:	2201      	movs	r2, #1
 8008998:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800899a:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800899c:	0c1b      	lsrs	r3, r3, #16
 800899e:	814b      	strh	r3, [r1, #10]
 80089a0:	e7f0      	b.n	8008984 <HAL_PCDEx_PMAConfig+0x1a>

080089a2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80089a2:	4603      	mov	r3, r0

  USB_TypeDef *USBx = hpcd->Instance;
 80089a4:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 80089a6:	2101      	movs	r1, #1
 80089a8:	f8c0 12e8 	str.w	r1, [r0, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80089ac:	2000      	movs	r0, #0
 80089ae:	f883 02e0 	strb.w	r0, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80089b2:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	430b      	orrs	r3, r1
 80089ba:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80089be:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	f043 0302 	orr.w	r3, r3, #2
 80089c8:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80089cc:	4770      	bx	lr
	...

080089d0 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d136      	bne.n	8008a42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80089d4:	4b3e      	ldr	r3, [pc, #248]	; (8008ad0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80089dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089e0:	d008      	beq.n	80089f4 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80089e2:	4a3b      	ldr	r2, [pc, #236]	; (8008ad0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80089e4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80089e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80089f0:	2000      	movs	r0, #0
 80089f2:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80089f4:	4a36      	ldr	r2, [pc, #216]	; (8008ad0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80089f6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80089fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a02:	6813      	ldr	r3, [r2, #0]
 8008a04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008a08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a0c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008a0e:	4b31      	ldr	r3, [pc, #196]	; (8008ad4 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2232      	movs	r2, #50	; 0x32
 8008a14:	fb02 f303 	mul.w	r3, r2, r3
 8008a18:	4a2f      	ldr	r2, [pc, #188]	; (8008ad8 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8008a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a1e:	0c9b      	lsrs	r3, r3, #18
 8008a20:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a22:	e000      	b.n	8008a26 <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8008a24:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a26:	4a2a      	ldr	r2, [pc, #168]	; (8008ad0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8008a28:	6952      	ldr	r2, [r2, #20]
 8008a2a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8008a2e:	d001      	beq.n	8008a34 <HAL_PWREx_ControlVoltageScaling+0x64>
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1f7      	bne.n	8008a24 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008a34:	4b26      	ldr	r3, [pc, #152]	; (8008ad0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8008a36:	695b      	ldr	r3, [r3, #20]
 8008a38:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008a3c:	d144      	bne.n	8008ac8 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 8008a3e:	2000      	movs	r0, #0
 8008a40:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008a42:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008a46:	d008      	beq.n	8008a5a <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008a48:	4a21      	ldr	r2, [pc, #132]	; (8008ad0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8008a4a:	6813      	ldr	r3, [r2, #0]
 8008a4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008a50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a54:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8008a56:	2000      	movs	r0, #0
 8008a58:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008a5a:	4b1d      	ldr	r3, [pc, #116]	; (8008ad0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a66:	d008      	beq.n	8008a7a <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a68:	4a19      	ldr	r2, [pc, #100]	; (8008ad0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8008a6a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8008a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a72:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8008a76:	2000      	movs	r0, #0
 8008a78:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a7a:	4a15      	ldr	r2, [pc, #84]	; (8008ad0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8008a7c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8008a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a88:	6813      	ldr	r3, [r2, #0]
 8008a8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a92:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008a94:	4b0f      	ldr	r3, [pc, #60]	; (8008ad4 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2232      	movs	r2, #50	; 0x32
 8008a9a:	fb02 f303 	mul.w	r3, r2, r3
 8008a9e:	4a0e      	ldr	r2, [pc, #56]	; (8008ad8 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8008aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa4:	0c9b      	lsrs	r3, r3, #18
 8008aa6:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008aa8:	e000      	b.n	8008aac <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 8008aaa:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008aac:	4a08      	ldr	r2, [pc, #32]	; (8008ad0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8008aae:	6952      	ldr	r2, [r2, #20]
 8008ab0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8008ab4:	d001      	beq.n	8008aba <HAL_PWREx_ControlVoltageScaling+0xea>
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1f7      	bne.n	8008aaa <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008aba:	4b05      	ldr	r3, [pc, #20]	; (8008ad0 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008ac2:	d103      	bne.n	8008acc <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	4770      	bx	lr
        return HAL_TIMEOUT;
 8008ac8:	2003      	movs	r0, #3
 8008aca:	4770      	bx	lr
        return HAL_TIMEOUT;
 8008acc:	2003      	movs	r0, #3
}
 8008ace:	4770      	bx	lr
 8008ad0:	40007000 	.word	0x40007000
 8008ad4:	20001058 	.word	0x20001058
 8008ad8:	431bde83 	.word	0x431bde83

08008adc <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008adc:	4a02      	ldr	r2, [pc, #8]	; (8008ae8 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8008ade:	6893      	ldr	r3, [r2, #8]
 8008ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ae4:	6093      	str	r3, [r2, #8]
}
 8008ae6:	4770      	bx	lr
 8008ae8:	40007000 	.word	0x40007000

08008aec <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008af0:	4605      	mov	r5, r0
 8008af2:	460f      	mov	r7, r1
 8008af4:	4616      	mov	r6, r2
 8008af6:	4699      	mov	r9, r3
 8008af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008afc:	682c      	ldr	r4, [r5, #0]
 8008afe:	68a4      	ldr	r4, [r4, #8]
 8008b00:	423c      	tst	r4, r7
 8008b02:	bf14      	ite	ne
 8008b04:	f04f 0c01 	movne.w	ip, #1
 8008b08:	f04f 0c00 	moveq.w	ip, #0
 8008b0c:	45b4      	cmp	ip, r6
 8008b0e:	d014      	beq.n	8008b3a <QSPI_WaitFlagStateUntilTimeout+0x4e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b10:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8008b14:	d0f2      	beq.n	8008afc <QSPI_WaitFlagStateUntilTimeout+0x10>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b16:	f7fc fefb 	bl	8005910 <HAL_GetTick>
 8008b1a:	eba0 0009 	sub.w	r0, r0, r9
 8008b1e:	4540      	cmp	r0, r8
 8008b20:	d802      	bhi.n	8008b28 <QSPI_WaitFlagStateUntilTimeout+0x3c>
 8008b22:	f1b8 0f00 	cmp.w	r8, #0
 8008b26:	d1e9      	bne.n	8008afc <QSPI_WaitFlagStateUntilTimeout+0x10>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008b28:	2304      	movs	r3, #4
 8008b2a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008b2e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008b30:	f043 0301 	orr.w	r3, r3, #1
 8008b34:	646b      	str	r3, [r5, #68]	; 0x44

        return HAL_ERROR;
 8008b36:	2001      	movs	r0, #1
 8008b38:	e000      	b.n	8008b3c <QSPI_WaitFlagStateUntilTimeout+0x50>
      }
    }
  }
  return HAL_OK;
 8008b3a:	2000      	movs	r0, #0
}
 8008b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008b40 <HAL_QSPI_SetTimeout>:
  hqspi->Timeout = Timeout;
 8008b40:	6481      	str	r1, [r0, #72]	; 0x48
}
 8008b42:	4770      	bx	lr

08008b44 <HAL_QSPI_Init>:
{
 8008b44:	b570      	push	{r4, r5, r6, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008b4a:	f7fc fee1 	bl	8005910 <HAL_GetTick>
  if(hqspi == NULL)
 8008b4e:	2c00      	cmp	r4, #0
 8008b50:	d04c      	beq.n	8008bec <HAL_QSPI_Init+0xa8>
 8008b52:	4606      	mov	r6, r0
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008b54:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d03c      	beq.n	8008bd6 <HAL_QSPI_Init+0x92>
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008b5c:	6825      	ldr	r5, [r4, #0]
 8008b5e:	682a      	ldr	r2, [r5, #0]
 8008b60:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8008b64:	68a1      	ldr	r1, [r4, #8]
 8008b66:	3901      	subs	r1, #1
 8008b68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008b6c:	602a      	str	r2, [r5, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008b6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	4633      	mov	r3, r6
 8008b74:	2200      	movs	r2, #0
 8008b76:	2120      	movs	r1, #32
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f7ff ffb7 	bl	8008aec <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8008b7e:	bb28      	cbnz	r0, 8008bcc <HAL_QSPI_Init+0x88>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008b80:	6821      	ldr	r1, [r4, #0]
 8008b82:	680b      	ldr	r3, [r1, #0]
 8008b84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008b88:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8008b8c:	6865      	ldr	r5, [r4, #4]
 8008b8e:	68e2      	ldr	r2, [r4, #12]
 8008b90:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8008b94:	69e5      	ldr	r5, [r4, #28]
 8008b96:	432a      	orrs	r2, r5
 8008b98:	6a25      	ldr	r5, [r4, #32]
 8008b9a:	432a      	orrs	r2, r5
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	600b      	str	r3, [r1, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008ba0:	6821      	ldr	r1, [r4, #0]
 8008ba2:	684a      	ldr	r2, [r1, #4]
 8008ba4:	4b12      	ldr	r3, [pc, #72]	; (8008bf0 <HAL_QSPI_Init+0xac>)
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	6925      	ldr	r5, [r4, #16]
 8008baa:	6962      	ldr	r2, [r4, #20]
 8008bac:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8008bb0:	69a5      	ldr	r5, [r4, #24]
 8008bb2:	432a      	orrs	r2, r5
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	604b      	str	r3, [r1, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8008bb8:	6822      	ldr	r2, [r4, #0]
 8008bba:	6813      	ldr	r3, [r2, #0]
 8008bbc:	f043 0301 	orr.w	r3, r3, #1
 8008bc0:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8008bd2:	b002      	add	sp, #8
 8008bd4:	bd70      	pop	{r4, r5, r6, pc}
    hqspi->Lock = HAL_UNLOCKED;
 8008bd6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f7f9 ff50 	bl	8002a80 <HAL_QSPI_MspInit>
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008be0:	f241 3188 	movw	r1, #5000	; 0x1388
 8008be4:	4620      	mov	r0, r4
 8008be6:	f7ff ffab 	bl	8008b40 <HAL_QSPI_SetTimeout>
 8008bea:	e7b7      	b.n	8008b5c <HAL_QSPI_Init+0x18>
    return HAL_ERROR;
 8008bec:	2001      	movs	r0, #1
 8008bee:	e7f0      	b.n	8008bd2 <HAL_QSPI_Init+0x8e>
 8008bf0:	ffe0f8fe 	.word	0xffe0f8fe

08008bf4 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008bf4:	4b12      	ldr	r3, [pc, #72]	; (8008c40 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8008bf6:	68da      	ldr	r2, [r3, #12]
 8008bf8:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008bfc:	68d8      	ldr	r0, [r3, #12]
 8008bfe:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8008c02:	1c43      	adds	r3, r0, #1

  switch (pllsource)
 8008c04:	2a03      	cmp	r2, #3
 8008c06:	d011      	beq.n	8008c2c <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008c08:	480e      	ldr	r0, [pc, #56]	; (8008c44 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 8008c0a:	fbb0 f0f3 	udiv	r0, r0, r3
 8008c0e:	4b0c      	ldr	r3, [pc, #48]	; (8008c40 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8008c16:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008c1a:	4b09      	ldr	r3, [pc, #36]	; (8008c40 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8008c22:	3301      	adds	r3, #1
 8008c24:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 8008c26:	fbb0 f0f3 	udiv	r0, r0, r3
 8008c2a:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008c2c:	4806      	ldr	r0, [pc, #24]	; (8008c48 <RCC_GetSysClockFreqFromPLLSource+0x54>)
 8008c2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8008c32:	4b03      	ldr	r3, [pc, #12]	; (8008c40 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8008c3a:	fb03 f000 	mul.w	r0, r3, r0
    break;
 8008c3e:	e7ec      	b.n	8008c1a <RCC_GetSysClockFreqFromPLLSource+0x26>
 8008c40:	40021000 	.word	0x40021000
 8008c44:	00f42400 	.word	0x00f42400
 8008c48:	007a1200 	.word	0x007a1200

08008c4c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	f000 8254 	beq.w	80090fa <HAL_RCC_OscConfig+0x4ae>
{
 8008c52:	b570      	push	{r4, r5, r6, lr}
 8008c54:	b082      	sub	sp, #8
 8008c56:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c58:	6803      	ldr	r3, [r0, #0]
 8008c5a:	f013 0f01 	tst.w	r3, #1
 8008c5e:	d037      	beq.n	8008cd0 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c60:	4aa4      	ldr	r2, [pc, #656]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008c62:	6893      	ldr	r3, [r2, #8]
 8008c64:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c68:	68d2      	ldr	r2, [r2, #12]
 8008c6a:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008c6e:	2b0c      	cmp	r3, #12
 8008c70:	d023      	beq.n	8008cba <HAL_RCC_OscConfig+0x6e>
 8008c72:	2b08      	cmp	r3, #8
 8008c74:	d023      	beq.n	8008cbe <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c76:	6863      	ldr	r3, [r4, #4]
 8008c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c7c:	d04e      	beq.n	8008d1c <HAL_RCC_OscConfig+0xd0>
 8008c7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c82:	d051      	beq.n	8008d28 <HAL_RCC_OscConfig+0xdc>
 8008c84:	4b9b      	ldr	r3, [pc, #620]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008c8c:	601a      	str	r2, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c94:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c96:	6863      	ldr	r3, [r4, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d052      	beq.n	8008d42 <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 8008c9c:	f7fc fe38 	bl	8005910 <HAL_GetTick>
 8008ca0:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ca2:	4b94      	ldr	r3, [pc, #592]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008caa:	d111      	bne.n	8008cd0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008cac:	f7fc fe30 	bl	8005910 <HAL_GetTick>
 8008cb0:	1b40      	subs	r0, r0, r5
 8008cb2:	2864      	cmp	r0, #100	; 0x64
 8008cb4:	d9f5      	bls.n	8008ca2 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8008cb6:	2003      	movs	r0, #3
 8008cb8:	e228      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008cba:	2a03      	cmp	r2, #3
 8008cbc:	d1d9      	bne.n	8008c72 <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cbe:	4b8d      	ldr	r3, [pc, #564]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008cc6:	d003      	beq.n	8008cd0 <HAL_RCC_OscConfig+0x84>
 8008cc8:	6863      	ldr	r3, [r4, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f000 8217 	beq.w	80090fe <HAL_RCC_OscConfig+0x4b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cd0:	6823      	ldr	r3, [r4, #0]
 8008cd2:	f013 0f02 	tst.w	r3, #2
 8008cd6:	d05d      	beq.n	8008d94 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cd8:	4a86      	ldr	r2, [pc, #536]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008cda:	6893      	ldr	r3, [r2, #8]
 8008cdc:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ce0:	68d2      	ldr	r2, [r2, #12]
 8008ce2:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008ce6:	2b0c      	cmp	r3, #12
 8008ce8:	d03a      	beq.n	8008d60 <HAL_RCC_OscConfig+0x114>
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d03a      	beq.n	8008d64 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008cee:	68e3      	ldr	r3, [r4, #12]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d075      	beq.n	8008de0 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8008cf4:	4a7f      	ldr	r2, [pc, #508]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008cf6:	6813      	ldr	r3, [r2, #0]
 8008cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cfc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008cfe:	f7fc fe07 	bl	8005910 <HAL_GetTick>
 8008d02:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d04:	4b7b      	ldr	r3, [pc, #492]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008d0c:	d15f      	bne.n	8008dce <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d0e:	f7fc fdff 	bl	8005910 <HAL_GetTick>
 8008d12:	1b40      	subs	r0, r0, r5
 8008d14:	2802      	cmp	r0, #2
 8008d16:	d9f5      	bls.n	8008d04 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 8008d18:	2003      	movs	r0, #3
 8008d1a:	e1f7      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d1c:	4a75      	ldr	r2, [pc, #468]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008d1e:	6813      	ldr	r3, [r2, #0]
 8008d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d24:	6013      	str	r3, [r2, #0]
 8008d26:	e7b6      	b.n	8008c96 <HAL_RCC_OscConfig+0x4a>
 8008d28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d2c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	e7a9      	b.n	8008c96 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8008d42:	f7fc fde5 	bl	8005910 <HAL_GetTick>
 8008d46:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008d48:	4b6a      	ldr	r3, [pc, #424]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008d50:	d0be      	beq.n	8008cd0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d52:	f7fc fddd 	bl	8005910 <HAL_GetTick>
 8008d56:	1b40      	subs	r0, r0, r5
 8008d58:	2864      	cmp	r0, #100	; 0x64
 8008d5a:	d9f5      	bls.n	8008d48 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 8008d5c:	2003      	movs	r0, #3
 8008d5e:	e1d5      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008d60:	2a02      	cmp	r2, #2
 8008d62:	d1c2      	bne.n	8008cea <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d64:	4b63      	ldr	r3, [pc, #396]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008d6c:	d003      	beq.n	8008d76 <HAL_RCC_OscConfig+0x12a>
 8008d6e:	68e3      	ldr	r3, [r4, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f000 81c6 	beq.w	8009102 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d76:	4a5f      	ldr	r2, [pc, #380]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008d78:	6853      	ldr	r3, [r2, #4]
 8008d7a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008d7e:	6921      	ldr	r1, [r4, #16]
 8008d80:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008d84:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008d86:	4b5c      	ldr	r3, [pc, #368]	; (8008ef8 <HAL_RCC_OscConfig+0x2ac>)
 8008d88:	6818      	ldr	r0, [r3, #0]
 8008d8a:	f7fc fd7d 	bl	8005888 <HAL_InitTick>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	f040 81b9 	bne.w	8009106 <HAL_RCC_OscConfig+0x4ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	f013 0f08 	tst.w	r3, #8
 8008d9a:	d04c      	beq.n	8008e36 <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008d9c:	6963      	ldr	r3, [r4, #20]
 8008d9e:	b39b      	cbz	r3, 8008e08 <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 8008da0:	4a54      	ldr	r2, [pc, #336]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008da2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8008da6:	f043 0301 	orr.w	r3, r3, #1
 8008daa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8008dae:	f7fc fdaf 	bl	8005910 <HAL_GetTick>
 8008db2:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008db4:	4b4f      	ldr	r3, [pc, #316]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008dba:	f013 0f02 	tst.w	r3, #2
 8008dbe:	d13a      	bne.n	8008e36 <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008dc0:	f7fc fda6 	bl	8005910 <HAL_GetTick>
 8008dc4:	1b40      	subs	r0, r0, r5
 8008dc6:	2802      	cmp	r0, #2
 8008dc8:	d9f4      	bls.n	8008db4 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 8008dca:	2003      	movs	r0, #3
 8008dcc:	e19e      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dce:	4a49      	ldr	r2, [pc, #292]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008dd0:	6853      	ldr	r3, [r2, #4]
 8008dd2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008dd6:	6921      	ldr	r1, [r4, #16]
 8008dd8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008ddc:	6053      	str	r3, [r2, #4]
 8008dde:	e7d9      	b.n	8008d94 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8008de0:	4a44      	ldr	r2, [pc, #272]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008de2:	6813      	ldr	r3, [r2, #0]
 8008de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008de8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008dea:	f7fc fd91 	bl	8005910 <HAL_GetTick>
 8008dee:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008df0:	4b40      	ldr	r3, [pc, #256]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008df8:	d0cc      	beq.n	8008d94 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008dfa:	f7fc fd89 	bl	8005910 <HAL_GetTick>
 8008dfe:	1b40      	subs	r0, r0, r5
 8008e00:	2802      	cmp	r0, #2
 8008e02:	d9f5      	bls.n	8008df0 <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8008e04:	2003      	movs	r0, #3
 8008e06:	e181      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_LSI_DISABLE();
 8008e08:	4a3a      	ldr	r2, [pc, #232]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008e0a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8008e0e:	f023 0301 	bic.w	r3, r3, #1
 8008e12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8008e16:	f7fc fd7b 	bl	8005910 <HAL_GetTick>
 8008e1a:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008e1c:	4b35      	ldr	r3, [pc, #212]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e22:	f013 0f02 	tst.w	r3, #2
 8008e26:	d006      	beq.n	8008e36 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e28:	f7fc fd72 	bl	8005910 <HAL_GetTick>
 8008e2c:	1b40      	subs	r0, r0, r5
 8008e2e:	2802      	cmp	r0, #2
 8008e30:	d9f4      	bls.n	8008e1c <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 8008e32:	2003      	movs	r0, #3
 8008e34:	e16a      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	f013 0f04 	tst.w	r3, #4
 8008e3c:	f000 8081 	beq.w	8008f42 <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008e40:	4b2c      	ldr	r3, [pc, #176]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e44:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008e48:	d136      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e4a:	4b2a      	ldr	r3, [pc, #168]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008e4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008e52:	659a      	str	r2, [r3, #88]	; 0x58
 8008e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e5a:	9301      	str	r3, [sp, #4]
 8008e5c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008e5e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e60:	4b26      	ldr	r3, [pc, #152]	; (8008efc <HAL_RCC_OscConfig+0x2b0>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008e68:	d028      	beq.n	8008ebc <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e6a:	68a3      	ldr	r3, [r4, #8]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d039      	beq.n	8008ee4 <HAL_RCC_OscConfig+0x298>
 8008e70:	2b05      	cmp	r3, #5
 8008e72:	d045      	beq.n	8008f00 <HAL_RCC_OscConfig+0x2b4>
 8008e74:	4b1f      	ldr	r3, [pc, #124]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008e76:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008e7a:	f022 0201 	bic.w	r2, r2, #1
 8008e7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008e82:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008e86:	f022 0204 	bic.w	r2, r2, #4
 8008e8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008e8e:	68a3      	ldr	r3, [r4, #8]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d043      	beq.n	8008f1c <HAL_RCC_OscConfig+0x2d0>
      tickstart = HAL_GetTick();
 8008e94:	f7fc fd3c 	bl	8005910 <HAL_GetTick>
 8008e98:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e9a:	4b16      	ldr	r3, [pc, #88]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea0:	f013 0f02 	tst.w	r3, #2
 8008ea4:	d14c      	bne.n	8008f40 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ea6:	f7fc fd33 	bl	8005910 <HAL_GetTick>
 8008eaa:	1b80      	subs	r0, r0, r6
 8008eac:	f241 3388 	movw	r3, #5000	; 0x1388
 8008eb0:	4298      	cmp	r0, r3
 8008eb2:	d9f2      	bls.n	8008e9a <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 8008eb4:	2003      	movs	r0, #3
 8008eb6:	e129      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
    FlagStatus       pwrclkchanged = RESET;
 8008eb8:	2500      	movs	r5, #0
 8008eba:	e7d1      	b.n	8008e60 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ebc:	4a0f      	ldr	r2, [pc, #60]	; (8008efc <HAL_RCC_OscConfig+0x2b0>)
 8008ebe:	6813      	ldr	r3, [r2, #0]
 8008ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ec4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8008ec6:	f7fc fd23 	bl	8005910 <HAL_GetTick>
 8008eca:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ecc:	4b0b      	ldr	r3, [pc, #44]	; (8008efc <HAL_RCC_OscConfig+0x2b0>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008ed4:	d1c9      	bne.n	8008e6a <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ed6:	f7fc fd1b 	bl	8005910 <HAL_GetTick>
 8008eda:	1b80      	subs	r0, r0, r6
 8008edc:	2802      	cmp	r0, #2
 8008ede:	d9f5      	bls.n	8008ecc <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 8008ee0:	2003      	movs	r0, #3
 8008ee2:	e113      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ee4:	4a03      	ldr	r2, [pc, #12]	; (8008ef4 <HAL_RCC_OscConfig+0x2a8>)
 8008ee6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008eea:	f043 0301 	orr.w	r3, r3, #1
 8008eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008ef2:	e7cc      	b.n	8008e8e <HAL_RCC_OscConfig+0x242>
 8008ef4:	40021000 	.word	0x40021000
 8008ef8:	20001208 	.word	0x20001208
 8008efc:	40007000 	.word	0x40007000
 8008f00:	4b8a      	ldr	r3, [pc, #552]	; (800912c <HAL_RCC_OscConfig+0x4e0>)
 8008f02:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008f06:	f042 0204 	orr.w	r2, r2, #4
 8008f0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008f0e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008f12:	f042 0201 	orr.w	r2, r2, #1
 8008f16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008f1a:	e7b8      	b.n	8008e8e <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 8008f1c:	f7fc fcf8 	bl	8005910 <HAL_GetTick>
 8008f20:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008f22:	4b82      	ldr	r3, [pc, #520]	; (800912c <HAL_RCC_OscConfig+0x4e0>)
 8008f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f28:	f013 0f02 	tst.w	r3, #2
 8008f2c:	d008      	beq.n	8008f40 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f2e:	f7fc fcef 	bl	8005910 <HAL_GetTick>
 8008f32:	1b80      	subs	r0, r0, r6
 8008f34:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f38:	4298      	cmp	r0, r3
 8008f3a:	d9f2      	bls.n	8008f22 <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 8008f3c:	2003      	movs	r0, #3
 8008f3e:	e0e5      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
    if (pwrclkchanged == SET)
 8008f40:	b9e5      	cbnz	r5, 8008f7c <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	f013 0f20 	tst.w	r3, #32
 8008f48:	d035      	beq.n	8008fb6 <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008f4a:	69a3      	ldr	r3, [r4, #24]
 8008f4c:	b1e3      	cbz	r3, 8008f88 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 8008f4e:	4a77      	ldr	r2, [pc, #476]	; (800912c <HAL_RCC_OscConfig+0x4e0>)
 8008f50:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8008f54:	f043 0301 	orr.w	r3, r3, #1
 8008f58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8008f5c:	f7fc fcd8 	bl	8005910 <HAL_GetTick>
 8008f60:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008f62:	4b72      	ldr	r3, [pc, #456]	; (800912c <HAL_RCC_OscConfig+0x4e0>)
 8008f64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f68:	f013 0f02 	tst.w	r3, #2
 8008f6c:	d123      	bne.n	8008fb6 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008f6e:	f7fc fccf 	bl	8005910 <HAL_GetTick>
 8008f72:	1b40      	subs	r0, r0, r5
 8008f74:	2802      	cmp	r0, #2
 8008f76:	d9f4      	bls.n	8008f62 <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 8008f78:	2003      	movs	r0, #3
 8008f7a:	e0c7      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f7c:	4a6b      	ldr	r2, [pc, #428]	; (800912c <HAL_RCC_OscConfig+0x4e0>)
 8008f7e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f84:	6593      	str	r3, [r2, #88]	; 0x58
 8008f86:	e7dc      	b.n	8008f42 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 8008f88:	4a68      	ldr	r2, [pc, #416]	; (800912c <HAL_RCC_OscConfig+0x4e0>)
 8008f8a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8008f8e:	f023 0301 	bic.w	r3, r3, #1
 8008f92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8008f96:	f7fc fcbb 	bl	8005910 <HAL_GetTick>
 8008f9a:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008f9c:	4b63      	ldr	r3, [pc, #396]	; (800912c <HAL_RCC_OscConfig+0x4e0>)
 8008f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008fa2:	f013 0f02 	tst.w	r3, #2
 8008fa6:	d006      	beq.n	8008fb6 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fa8:	f7fc fcb2 	bl	8005910 <HAL_GetTick>
 8008fac:	1b40      	subs	r0, r0, r5
 8008fae:	2802      	cmp	r0, #2
 8008fb0:	d9f4      	bls.n	8008f9c <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 8008fb2:	2003      	movs	r0, #3
 8008fb4:	e0aa      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008fb6:	69e3      	ldr	r3, [r4, #28]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 80a6 	beq.w	800910a <HAL_RCC_OscConfig+0x4be>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008fbe:	4a5b      	ldr	r2, [pc, #364]	; (800912c <HAL_RCC_OscConfig+0x4e0>)
 8008fc0:	6892      	ldr	r2, [r2, #8]
 8008fc2:	f002 020c 	and.w	r2, r2, #12
 8008fc6:	2a0c      	cmp	r2, #12
 8008fc8:	d069      	beq.n	800909e <HAL_RCC_OscConfig+0x452>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d01d      	beq.n	800900a <HAL_RCC_OscConfig+0x3be>
        __HAL_RCC_PLL_DISABLE();
 8008fce:	4b57      	ldr	r3, [pc, #348]	; (800912c <HAL_RCC_OscConfig+0x4e0>)
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008fd6:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008fd8:	68da      	ldr	r2, [r3, #12]
 8008fda:	f022 0203 	bic.w	r2, r2, #3
 8008fde:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008fe0:	68da      	ldr	r2, [r3, #12]
 8008fe2:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8008fe6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008fea:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8008fec:	f7fc fc90 	bl	8005910 <HAL_GetTick>
 8008ff0:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ff2:	4b4e      	ldr	r3, [pc, #312]	; (800912c <HAL_RCC_OscConfig+0x4e0>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008ffa:	d04e      	beq.n	800909a <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ffc:	f7fc fc88 	bl	8005910 <HAL_GetTick>
 8009000:	1b00      	subs	r0, r0, r4
 8009002:	2802      	cmp	r0, #2
 8009004:	d9f5      	bls.n	8008ff2 <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 8009006:	2003      	movs	r0, #3
 8009008:	e080      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_DISABLE();
 800900a:	4a48      	ldr	r2, [pc, #288]	; (800912c <HAL_RCC_OscConfig+0x4e0>)
 800900c:	6813      	ldr	r3, [r2, #0]
 800900e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009012:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009014:	f7fc fc7c 	bl	8005910 <HAL_GetTick>
 8009018:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800901a:	4b44      	ldr	r3, [pc, #272]	; (800912c <HAL_RCC_OscConfig+0x4e0>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009022:	d006      	beq.n	8009032 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009024:	f7fc fc74 	bl	8005910 <HAL_GetTick>
 8009028:	1b40      	subs	r0, r0, r5
 800902a:	2802      	cmp	r0, #2
 800902c:	d9f5      	bls.n	800901a <HAL_RCC_OscConfig+0x3ce>
            return HAL_TIMEOUT;
 800902e:	2003      	movs	r0, #3
 8009030:	e06c      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009032:	4a3e      	ldr	r2, [pc, #248]	; (800912c <HAL_RCC_OscConfig+0x4e0>)
 8009034:	68d3      	ldr	r3, [r2, #12]
 8009036:	493e      	ldr	r1, [pc, #248]	; (8009130 <HAL_RCC_OscConfig+0x4e4>)
 8009038:	4019      	ands	r1, r3
 800903a:	6a23      	ldr	r3, [r4, #32]
 800903c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800903e:	3801      	subs	r0, #1
 8009040:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8009044:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009046:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800904a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800904c:	0840      	lsrs	r0, r0, #1
 800904e:	3801      	subs	r0, #1
 8009050:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8009054:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009056:	0840      	lsrs	r0, r0, #1
 8009058:	3801      	subs	r0, #1
 800905a:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800905e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009060:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8009064:	430b      	orrs	r3, r1
 8009066:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8009068:	6813      	ldr	r3, [r2, #0]
 800906a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800906e:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009070:	68d3      	ldr	r3, [r2, #12]
 8009072:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009076:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8009078:	f7fc fc4a 	bl	8005910 <HAL_GetTick>
 800907c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800907e:	4b2b      	ldr	r3, [pc, #172]	; (800912c <HAL_RCC_OscConfig+0x4e0>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009086:	d106      	bne.n	8009096 <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009088:	f7fc fc42 	bl	8005910 <HAL_GetTick>
 800908c:	1b00      	subs	r0, r0, r4
 800908e:	2802      	cmp	r0, #2
 8009090:	d9f5      	bls.n	800907e <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 8009092:	2003      	movs	r0, #3
 8009094:	e03a      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 8009096:	2000      	movs	r0, #0
 8009098:	e038      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
 800909a:	2000      	movs	r0, #0
 800909c:	e036      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d036      	beq.n	8009110 <HAL_RCC_OscConfig+0x4c4>
      temp_pllckcfg = RCC->PLLCFGR;
 80090a2:	4b22      	ldr	r3, [pc, #136]	; (800912c <HAL_RCC_OscConfig+0x4e0>)
 80090a4:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090a6:	f003 0103 	and.w	r1, r3, #3
 80090aa:	6a22      	ldr	r2, [r4, #32]
 80090ac:	4291      	cmp	r1, r2
 80090ae:	d131      	bne.n	8009114 <HAL_RCC_OscConfig+0x4c8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80090b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80090b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80090b6:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090b8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80090bc:	d12c      	bne.n	8009118 <HAL_RCC_OscConfig+0x4cc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80090be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80090c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80090c4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80090c8:	d128      	bne.n	800911c <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80090ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80090ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80090d0:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80090d4:	d124      	bne.n	8009120 <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80090d6:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80090da:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80090dc:	0852      	lsrs	r2, r2, #1
 80090de:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80090e0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80090e4:	d11e      	bne.n	8009124 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80090e6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80090ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80090ec:	0852      	lsrs	r2, r2, #1
 80090ee:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80090f0:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80090f4:	d118      	bne.n	8009128 <HAL_RCC_OscConfig+0x4dc>
  return HAL_OK;
 80090f6:	2000      	movs	r0, #0
 80090f8:	e008      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
    return HAL_ERROR;
 80090fa:	2001      	movs	r0, #1
}
 80090fc:	4770      	bx	lr
        return HAL_ERROR;
 80090fe:	2001      	movs	r0, #1
 8009100:	e004      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8009102:	2001      	movs	r0, #1
 8009104:	e002      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
          return HAL_ERROR;
 8009106:	2001      	movs	r0, #1
 8009108:	e000      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 800910a:	2000      	movs	r0, #0
}
 800910c:	b002      	add	sp, #8
 800910e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8009110:	2001      	movs	r0, #1
 8009112:	e7fb      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8009114:	2001      	movs	r0, #1
 8009116:	e7f9      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
 8009118:	2001      	movs	r0, #1
 800911a:	e7f7      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
 800911c:	2001      	movs	r0, #1
 800911e:	e7f5      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
 8009120:	2001      	movs	r0, #1
 8009122:	e7f3      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
 8009124:	2001      	movs	r0, #1
 8009126:	e7f1      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
 8009128:	2001      	movs	r0, #1
 800912a:	e7ef      	b.n	800910c <HAL_RCC_OscConfig+0x4c0>
 800912c:	40021000 	.word	0x40021000
 8009130:	019f800c 	.word	0x019f800c

08009134 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009134:	4b1e      	ldr	r3, [pc, #120]	; (80091b0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	f003 030c 	and.w	r3, r3, #12
 800913c:	2b04      	cmp	r3, #4
 800913e:	d033      	beq.n	80091a8 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009140:	4b1b      	ldr	r3, [pc, #108]	; (80091b0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	f003 030c 	and.w	r3, r3, #12
 8009148:	2b08      	cmp	r3, #8
 800914a:	d02f      	beq.n	80091ac <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800914c:	4b18      	ldr	r3, [pc, #96]	; (80091b0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	f003 030c 	and.w	r3, r3, #12
 8009154:	2b0c      	cmp	r3, #12
 8009156:	d001      	beq.n	800915c <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 8009158:	2000      	movs	r0, #0
}
 800915a:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800915c:	4b14      	ldr	r3, [pc, #80]	; (80091b0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800915e:	68da      	ldr	r2, [r3, #12]
 8009160:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009164:	68d8      	ldr	r0, [r3, #12]
 8009166:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800916a:	1c43      	adds	r3, r0, #1
    switch (pllsource)
 800916c:	2a03      	cmp	r2, #3
 800916e:	d011      	beq.n	8009194 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009170:	4810      	ldr	r0, [pc, #64]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x80>)
 8009172:	fbb0 f0f3 	udiv	r0, r0, r3
 8009176:	4b0e      	ldr	r3, [pc, #56]	; (80091b0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800917e:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009182:	4b0b      	ldr	r3, [pc, #44]	; (80091b0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800918a:	3301      	adds	r3, #1
 800918c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800918e:	fbb0 f0f3 	udiv	r0, r0, r3
 8009192:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009194:	4808      	ldr	r0, [pc, #32]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x84>)
 8009196:	fbb0 f0f3 	udiv	r0, r0, r3
 800919a:	4b05      	ldr	r3, [pc, #20]	; (80091b0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80091a2:	fb03 f000 	mul.w	r0, r3, r0
      break;
 80091a6:	e7ec      	b.n	8009182 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 80091a8:	4802      	ldr	r0, [pc, #8]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x80>)
 80091aa:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80091ac:	4802      	ldr	r0, [pc, #8]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x84>)
 80091ae:	4770      	bx	lr
 80091b0:	40021000 	.word	0x40021000
 80091b4:	00f42400 	.word	0x00f42400
 80091b8:	007a1200 	.word	0x007a1200

080091bc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80091bc:	2800      	cmp	r0, #0
 80091be:	f000 80e6 	beq.w	800938e <HAL_RCC_ClockConfig+0x1d2>
{
 80091c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c4:	460c      	mov	r4, r1
 80091c6:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80091c8:	4b74      	ldr	r3, [pc, #464]	; (800939c <HAL_RCC_ClockConfig+0x1e0>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 030f 	and.w	r3, r3, #15
 80091d0:	428b      	cmp	r3, r1
 80091d2:	d20b      	bcs.n	80091ec <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091d4:	4a71      	ldr	r2, [pc, #452]	; (800939c <HAL_RCC_ClockConfig+0x1e0>)
 80091d6:	6813      	ldr	r3, [r2, #0]
 80091d8:	f023 030f 	bic.w	r3, r3, #15
 80091dc:	430b      	orrs	r3, r1
 80091de:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091e0:	6813      	ldr	r3, [r2, #0]
 80091e2:	f003 030f 	and.w	r3, r3, #15
 80091e6:	428b      	cmp	r3, r1
 80091e8:	f040 80d3 	bne.w	8009392 <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091ec:	682e      	ldr	r6, [r5, #0]
 80091ee:	f016 0601 	ands.w	r6, r6, #1
 80091f2:	d05f      	beq.n	80092b4 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80091f4:	686b      	ldr	r3, [r5, #4]
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	d02f      	beq.n	800925a <HAL_RCC_ClockConfig+0x9e>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d04d      	beq.n	800929a <HAL_RCC_ClockConfig+0xde>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091fe:	4b68      	ldr	r3, [pc, #416]	; (80093a0 <HAL_RCC_ClockConfig+0x1e4>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8009206:	f000 80c6 	beq.w	8009396 <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 800920a:	f7ff ff93 	bl	8009134 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800920e:	4b65      	ldr	r3, [pc, #404]	; (80093a4 <HAL_RCC_ClockConfig+0x1e8>)
 8009210:	4298      	cmp	r0, r3
 8009212:	d94d      	bls.n	80092b0 <HAL_RCC_ClockConfig+0xf4>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009214:	4a62      	ldr	r2, [pc, #392]	; (80093a0 <HAL_RCC_ClockConfig+0x1e4>)
 8009216:	6893      	ldr	r3, [r2, #8]
 8009218:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800921c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009220:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009222:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009224:	4a5e      	ldr	r2, [pc, #376]	; (80093a0 <HAL_RCC_ClockConfig+0x1e4>)
 8009226:	6893      	ldr	r3, [r2, #8]
 8009228:	f023 0303 	bic.w	r3, r3, #3
 800922c:	6869      	ldr	r1, [r5, #4]
 800922e:	430b      	orrs	r3, r1
 8009230:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8009232:	f7fc fb6d 	bl	8005910 <HAL_GetTick>
 8009236:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009238:	4b59      	ldr	r3, [pc, #356]	; (80093a0 <HAL_RCC_ClockConfig+0x1e4>)
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	f003 030c 	and.w	r3, r3, #12
 8009240:	686a      	ldr	r2, [r5, #4]
 8009242:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009246:	d035      	beq.n	80092b4 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009248:	f7fc fb62 	bl	8005910 <HAL_GetTick>
 800924c:	1bc0      	subs	r0, r0, r7
 800924e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009252:	4298      	cmp	r0, r3
 8009254:	d9f0      	bls.n	8009238 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8009256:	2003      	movs	r0, #3
 8009258:	e078      	b.n	800934c <HAL_RCC_ClockConfig+0x190>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800925a:	4b51      	ldr	r3, [pc, #324]	; (80093a0 <HAL_RCC_ClockConfig+0x1e4>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009262:	d101      	bne.n	8009268 <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8009264:	2001      	movs	r0, #1
 8009266:	e071      	b.n	800934c <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009268:	f7ff fcc4 	bl	8008bf4 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 800926c:	4b4d      	ldr	r3, [pc, #308]	; (80093a4 <HAL_RCC_ClockConfig+0x1e8>)
 800926e:	4298      	cmp	r0, r3
 8009270:	d91a      	bls.n	80092a8 <HAL_RCC_ClockConfig+0xec>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009272:	4b4b      	ldr	r3, [pc, #300]	; (80093a0 <HAL_RCC_ClockConfig+0x1e4>)
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800927a:	d005      	beq.n	8009288 <HAL_RCC_ClockConfig+0xcc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800927c:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800927e:	f016 0602 	ands.w	r6, r6, #2
 8009282:	d0cf      	beq.n	8009224 <HAL_RCC_ClockConfig+0x68>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009284:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009286:	b98b      	cbnz	r3, 80092ac <HAL_RCC_ClockConfig+0xf0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009288:	4a45      	ldr	r2, [pc, #276]	; (80093a0 <HAL_RCC_ClockConfig+0x1e4>)
 800928a:	6893      	ldr	r3, [r2, #8]
 800928c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009294:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009296:	2680      	movs	r6, #128	; 0x80
 8009298:	e7c4      	b.n	8009224 <HAL_RCC_ClockConfig+0x68>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800929a:	4b41      	ldr	r3, [pc, #260]	; (80093a0 <HAL_RCC_ClockConfig+0x1e4>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80092a2:	d1b2      	bne.n	800920a <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 80092a4:	2001      	movs	r0, #1
 80092a6:	e051      	b.n	800934c <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80092a8:	2600      	movs	r6, #0
 80092aa:	e7bb      	b.n	8009224 <HAL_RCC_ClockConfig+0x68>
 80092ac:	2600      	movs	r6, #0
 80092ae:	e7b9      	b.n	8009224 <HAL_RCC_ClockConfig+0x68>
 80092b0:	2600      	movs	r6, #0
 80092b2:	e7b7      	b.n	8009224 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092b4:	682b      	ldr	r3, [r5, #0]
 80092b6:	f013 0f02 	tst.w	r3, #2
 80092ba:	d048      	beq.n	800934e <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092bc:	f013 0f04 	tst.w	r3, #4
 80092c0:	d004      	beq.n	80092cc <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80092c2:	4a37      	ldr	r2, [pc, #220]	; (80093a0 <HAL_RCC_ClockConfig+0x1e4>)
 80092c4:	6893      	ldr	r3, [r2, #8]
 80092c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80092ca:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092cc:	682b      	ldr	r3, [r5, #0]
 80092ce:	f013 0f08 	tst.w	r3, #8
 80092d2:	d006      	beq.n	80092e2 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80092d4:	4a32      	ldr	r2, [pc, #200]	; (80093a0 <HAL_RCC_ClockConfig+0x1e4>)
 80092d6:	6893      	ldr	r3, [r2, #8]
 80092d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80092dc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80092e0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092e2:	4a2f      	ldr	r2, [pc, #188]	; (80093a0 <HAL_RCC_ClockConfig+0x1e4>)
 80092e4:	6893      	ldr	r3, [r2, #8]
 80092e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80092ea:	68a9      	ldr	r1, [r5, #8]
 80092ec:	430b      	orrs	r3, r1
 80092ee:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092f0:	4b2a      	ldr	r3, [pc, #168]	; (800939c <HAL_RCC_ClockConfig+0x1e0>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 030f 	and.w	r3, r3, #15
 80092f8:	42a3      	cmp	r3, r4
 80092fa:	d830      	bhi.n	800935e <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092fc:	682b      	ldr	r3, [r5, #0]
 80092fe:	f013 0f04 	tst.w	r3, #4
 8009302:	d006      	beq.n	8009312 <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009304:	4a26      	ldr	r2, [pc, #152]	; (80093a0 <HAL_RCC_ClockConfig+0x1e4>)
 8009306:	6893      	ldr	r3, [r2, #8]
 8009308:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800930c:	68e9      	ldr	r1, [r5, #12]
 800930e:	430b      	orrs	r3, r1
 8009310:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009312:	682b      	ldr	r3, [r5, #0]
 8009314:	f013 0f08 	tst.w	r3, #8
 8009318:	d007      	beq.n	800932a <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800931a:	4a21      	ldr	r2, [pc, #132]	; (80093a0 <HAL_RCC_ClockConfig+0x1e4>)
 800931c:	6893      	ldr	r3, [r2, #8]
 800931e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8009322:	6929      	ldr	r1, [r5, #16]
 8009324:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009328:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800932a:	f7ff ff03 	bl	8009134 <HAL_RCC_GetSysClockFreq>
 800932e:	4b1c      	ldr	r3, [pc, #112]	; (80093a0 <HAL_RCC_ClockConfig+0x1e4>)
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009336:	4a1c      	ldr	r2, [pc, #112]	; (80093a8 <HAL_RCC_ClockConfig+0x1ec>)
 8009338:	5cd3      	ldrb	r3, [r2, r3]
 800933a:	f003 031f 	and.w	r3, r3, #31
 800933e:	40d8      	lsrs	r0, r3
 8009340:	4b1a      	ldr	r3, [pc, #104]	; (80093ac <HAL_RCC_ClockConfig+0x1f0>)
 8009342:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8009344:	4b1a      	ldr	r3, [pc, #104]	; (80093b0 <HAL_RCC_ClockConfig+0x1f4>)
 8009346:	6818      	ldr	r0, [r3, #0]
 8009348:	f7fc fa9e 	bl	8005888 <HAL_InitTick>
}
 800934c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 800934e:	2e80      	cmp	r6, #128	; 0x80
 8009350:	d1ce      	bne.n	80092f0 <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009352:	4a13      	ldr	r2, [pc, #76]	; (80093a0 <HAL_RCC_ClockConfig+0x1e4>)
 8009354:	6893      	ldr	r3, [r2, #8]
 8009356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800935a:	6093      	str	r3, [r2, #8]
 800935c:	e7c8      	b.n	80092f0 <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800935e:	4a0f      	ldr	r2, [pc, #60]	; (800939c <HAL_RCC_ClockConfig+0x1e0>)
 8009360:	6813      	ldr	r3, [r2, #0]
 8009362:	f023 030f 	bic.w	r3, r3, #15
 8009366:	4323      	orrs	r3, r4
 8009368:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800936a:	f7fc fad1 	bl	8005910 <HAL_GetTick>
 800936e:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009370:	4b0a      	ldr	r3, [pc, #40]	; (800939c <HAL_RCC_ClockConfig+0x1e0>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 030f 	and.w	r3, r3, #15
 8009378:	42a3      	cmp	r3, r4
 800937a:	d0bf      	beq.n	80092fc <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800937c:	f7fc fac8 	bl	8005910 <HAL_GetTick>
 8009380:	1b80      	subs	r0, r0, r6
 8009382:	f241 3388 	movw	r3, #5000	; 0x1388
 8009386:	4298      	cmp	r0, r3
 8009388:	d9f2      	bls.n	8009370 <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 800938a:	2003      	movs	r0, #3
 800938c:	e7de      	b.n	800934c <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 800938e:	2001      	movs	r0, #1
}
 8009390:	4770      	bx	lr
      return HAL_ERROR;
 8009392:	2001      	movs	r0, #1
 8009394:	e7da      	b.n	800934c <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 8009396:	2001      	movs	r0, #1
 8009398:	e7d8      	b.n	800934c <HAL_RCC_ClockConfig+0x190>
 800939a:	bf00      	nop
 800939c:	40022000 	.word	0x40022000
 80093a0:	40021000 	.word	0x40021000
 80093a4:	04c4b400 	.word	0x04c4b400
 80093a8:	080133a8 	.word	0x080133a8
 80093ac:	20001058 	.word	0x20001058
 80093b0:	20001208 	.word	0x20001208

080093b4 <HAL_RCC_GetHCLKFreq>:
}
 80093b4:	4b01      	ldr	r3, [pc, #4]	; (80093bc <HAL_RCC_GetHCLKFreq+0x8>)
 80093b6:	6818      	ldr	r0, [r3, #0]
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	20001058 	.word	0x20001058

080093c0 <HAL_RCC_GetPCLK1Freq>:
{
 80093c0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80093c2:	f7ff fff7 	bl	80093b4 <HAL_RCC_GetHCLKFreq>
 80093c6:	4b05      	ldr	r3, [pc, #20]	; (80093dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80093ce:	4a04      	ldr	r2, [pc, #16]	; (80093e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80093d0:	5cd3      	ldrb	r3, [r2, r3]
 80093d2:	f003 031f 	and.w	r3, r3, #31
}
 80093d6:	40d8      	lsrs	r0, r3
 80093d8:	bd08      	pop	{r3, pc}
 80093da:	bf00      	nop
 80093dc:	40021000 	.word	0x40021000
 80093e0:	080133b8 	.word	0x080133b8

080093e4 <HAL_RCC_GetPCLK2Freq>:
{
 80093e4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80093e6:	f7ff ffe5 	bl	80093b4 <HAL_RCC_GetHCLKFreq>
 80093ea:	4b05      	ldr	r3, [pc, #20]	; (8009400 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80093f2:	4a04      	ldr	r2, [pc, #16]	; (8009404 <HAL_RCC_GetPCLK2Freq+0x20>)
 80093f4:	5cd3      	ldrb	r3, [r2, r3]
 80093f6:	f003 031f 	and.w	r3, r3, #31
}
 80093fa:	40d8      	lsrs	r0, r3
 80093fc:	bd08      	pop	{r3, pc}
 80093fe:	bf00      	nop
 8009400:	40021000 	.word	0x40021000
 8009404:	080133b8 	.word	0x080133b8

08009408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800940a:	b083      	sub	sp, #12
 800940c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800940e:	6803      	ldr	r3, [r0, #0]
 8009410:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8009414:	d06e      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009416:	4b35      	ldr	r3, [pc, #212]	; (80094ec <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8009418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800941a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800941e:	d11e      	bne.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009420:	4b32      	ldr	r3, [pc, #200]	; (80094ec <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8009422:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009424:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009428:	659a      	str	r2, [r3, #88]	; 0x58
 800942a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800942c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009430:	9301      	str	r3, [sp, #4]
 8009432:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009434:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009436:	4a2e      	ldr	r2, [pc, #184]	; (80094f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009438:	6813      	ldr	r3, [r2, #0]
 800943a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800943e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009440:	f7fc fa66 	bl	8005910 <HAL_GetTick>
 8009444:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009446:	4b2a      	ldr	r3, [pc, #168]	; (80094f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800944e:	d108      	bne.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009450:	f7fc fa5e 	bl	8005910 <HAL_GetTick>
 8009454:	1b40      	subs	r0, r0, r5
 8009456:	2802      	cmp	r0, #2
 8009458:	d9f5      	bls.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 800945a:	2503      	movs	r5, #3
 800945c:	e002      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 800945e:	2600      	movs	r6, #0
 8009460:	e7e9      	b.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009462:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8009464:	bb45      	cbnz	r5, 80094b8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009466:	4b21      	ldr	r3, [pc, #132]	; (80094ec <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8009468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800946c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8009470:	d015      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x96>
 8009472:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009474:	429a      	cmp	r2, r3
 8009476:	d012      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009478:	4a1c      	ldr	r2, [pc, #112]	; (80094ec <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800947a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800947e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009482:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8009486:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800948a:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800948e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8009492:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009496:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800949a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800949e:	f013 0f01 	tst.w	r3, #1
 80094a2:	d110      	bne.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 80094a4:	b945      	cbnz	r5, 80094b8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094a6:	4a11      	ldr	r2, [pc, #68]	; (80094ec <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80094a8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80094ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094b0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80094b2:	430b      	orrs	r3, r1
 80094b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80094b8:	b1ee      	cbz	r6, 80094f6 <HAL_RCCEx_PeriphCLKConfig+0xee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094ba:	4a0c      	ldr	r2, [pc, #48]	; (80094ec <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80094bc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80094be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094c2:	6593      	str	r3, [r2, #88]	; 0x58
 80094c4:	e017      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 80094c6:	f7fc fa23 	bl	8005910 <HAL_GetTick>
 80094ca:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094cc:	4b07      	ldr	r3, [pc, #28]	; (80094ec <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80094ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094d2:	f013 0f02 	tst.w	r3, #2
 80094d6:	d1e5      	bne.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094d8:	f7fc fa1a 	bl	8005910 <HAL_GetTick>
 80094dc:	1bc0      	subs	r0, r0, r7
 80094de:	f241 3388 	movw	r3, #5000	; 0x1388
 80094e2:	4298      	cmp	r0, r3
 80094e4:	d9f2      	bls.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 80094e6:	2503      	movs	r5, #3
 80094e8:	e7dc      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80094ea:	bf00      	nop
 80094ec:	40021000 	.word	0x40021000
 80094f0:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80094f4:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	f013 0f01 	tst.w	r3, #1
 80094fc:	d008      	beq.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80094fe:	4a9f      	ldr	r2, [pc, #636]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009500:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009504:	f023 0303 	bic.w	r3, r3, #3
 8009508:	6861      	ldr	r1, [r4, #4]
 800950a:	430b      	orrs	r3, r1
 800950c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009510:	6823      	ldr	r3, [r4, #0]
 8009512:	f013 0f02 	tst.w	r3, #2
 8009516:	d008      	beq.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009518:	4a98      	ldr	r2, [pc, #608]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800951a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800951e:	f023 030c 	bic.w	r3, r3, #12
 8009522:	68a1      	ldr	r1, [r4, #8]
 8009524:	430b      	orrs	r3, r1
 8009526:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	f013 0f04 	tst.w	r3, #4
 8009530:	d008      	beq.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009532:	4a92      	ldr	r2, [pc, #584]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009534:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009538:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800953c:	68e1      	ldr	r1, [r4, #12]
 800953e:	430b      	orrs	r3, r1
 8009540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009544:	6823      	ldr	r3, [r4, #0]
 8009546:	f013 0f08 	tst.w	r3, #8
 800954a:	d008      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800954c:	4a8b      	ldr	r2, [pc, #556]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800954e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009552:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009556:	6921      	ldr	r1, [r4, #16]
 8009558:	430b      	orrs	r3, r1
 800955a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	f013 0f10 	tst.w	r3, #16
 8009564:	d008      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009566:	4a85      	ldr	r2, [pc, #532]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009568:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800956c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009570:	6961      	ldr	r1, [r4, #20]
 8009572:	430b      	orrs	r3, r1
 8009574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	f013 0f20 	tst.w	r3, #32
 800957e:	d008      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009580:	4a7e      	ldr	r2, [pc, #504]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009582:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009586:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800958a:	69a1      	ldr	r1, [r4, #24]
 800958c:	430b      	orrs	r3, r1
 800958e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009598:	d008      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800959a:	4a78      	ldr	r2, [pc, #480]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800959c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80095a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80095a4:	69e1      	ldr	r1, [r4, #28]
 80095a6:	430b      	orrs	r3, r1
 80095a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80095ac:	6823      	ldr	r3, [r4, #0]
 80095ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 80095b2:	d008      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80095b4:	4a71      	ldr	r2, [pc, #452]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80095b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80095ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80095be:	6a21      	ldr	r1, [r4, #32]
 80095c0:	430b      	orrs	r3, r1
 80095c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80095c6:	6823      	ldr	r3, [r4, #0]
 80095c8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80095cc:	d008      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80095ce:	4a6b      	ldr	r2, [pc, #428]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80095d0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80095d4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80095d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80095da:	430b      	orrs	r3, r1
 80095dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80095e6:	d008      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80095e8:	4a64      	ldr	r2, [pc, #400]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80095ea:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80095ee:	f023 0303 	bic.w	r3, r3, #3
 80095f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80095f4:	430b      	orrs	r3, r1
 80095f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009600:	d008      	beq.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009602:	4a5e      	ldr	r2, [pc, #376]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009604:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009608:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800960c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800960e:	430b      	orrs	r3, r1
 8009610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009614:	6823      	ldr	r3, [r4, #0]
 8009616:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800961a:	d00c      	beq.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800961c:	4a57      	ldr	r2, [pc, #348]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800961e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009622:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009626:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009628:	430b      	orrs	r3, r1
 800962a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800962e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009630:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009634:	d079      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800963c:	d00c      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800963e:	4a4f      	ldr	r2, [pc, #316]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009640:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009644:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8009648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800964a:	430b      	orrs	r3, r1
 800964c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009650:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009656:	d06d      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009658:	6823      	ldr	r3, [r4, #0]
 800965a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800965e:	d00c      	beq.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009660:	4a46      	ldr	r2, [pc, #280]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009662:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009666:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800966a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800966c:	430b      	orrs	r3, r1
 800966e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009672:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009678:	d061      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x336>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009680:	d00c      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009682:	4a3e      	ldr	r2, [pc, #248]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009684:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009688:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800968c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800968e:	430b      	orrs	r3, r1
 8009690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009694:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009696:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800969a:	d055      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x340>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800969c:	6823      	ldr	r3, [r4, #0]
 800969e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80096a2:	d00c      	beq.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80096a4:	4a35      	ldr	r2, [pc, #212]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80096a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80096aa:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80096ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80096b0:	430b      	orrs	r3, r1
 80096b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80096b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096bc:	d049      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80096c4:	d00c      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80096c6:	4a2d      	ldr	r2, [pc, #180]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80096c8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80096cc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80096d0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80096d2:	430b      	orrs	r3, r1
 80096d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80096d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80096da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096de:	d03d      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x354>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80096e0:	6823      	ldr	r3, [r4, #0]
 80096e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80096e6:	d00c      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80096e8:	4a24      	ldr	r2, [pc, #144]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80096ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80096ee:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80096f2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80096f4:	430b      	orrs	r3, r1
 80096f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80096fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80096fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009700:	d031      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x35e>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8009708:	d00c      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800970a:	4a1c      	ldr	r2, [pc, #112]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800970c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8009710:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009714:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009716:	430b      	orrs	r3, r1
 8009718:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800971c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800971e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009722:	d025      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x368>
  }

#endif /* QUADSPI */

  return status;
}
 8009724:	4628      	mov	r0, r5
 8009726:	b003      	add	sp, #12
 8009728:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800972a:	68d3      	ldr	r3, [r2, #12]
 800972c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009730:	60d3      	str	r3, [r2, #12]
 8009732:	e780      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009734:	68d3      	ldr	r3, [r2, #12]
 8009736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800973a:	60d3      	str	r3, [r2, #12]
 800973c:	e78c      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800973e:	68d3      	ldr	r3, [r2, #12]
 8009740:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009744:	60d3      	str	r3, [r2, #12]
 8009746:	e798      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009748:	68d3      	ldr	r3, [r2, #12]
 800974a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800974e:	60d3      	str	r3, [r2, #12]
 8009750:	e7a4      	b.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009752:	68d3      	ldr	r3, [r2, #12]
 8009754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009758:	60d3      	str	r3, [r2, #12]
 800975a:	e7b0      	b.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800975c:	68d3      	ldr	r3, [r2, #12]
 800975e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009762:	60d3      	str	r3, [r2, #12]
 8009764:	e7bc      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009766:	68d3      	ldr	r3, [r2, #12]
 8009768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800976c:	60d3      	str	r3, [r2, #12]
 800976e:	e7c8      	b.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009770:	68d3      	ldr	r3, [r2, #12]
 8009772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009776:	60d3      	str	r3, [r2, #12]
 8009778:	e7d4      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800977a:	bf00      	nop
 800977c:	40021000 	.word	0x40021000

08009780 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009780:	2800      	cmp	r0, #0
 8009782:	d06f      	beq.n	8009864 <HAL_SPI_Init+0xe4>
{
 8009784:	b510      	push	{r4, lr}
 8009786:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009788:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800978a:	b933      	cbnz	r3, 800979a <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800978c:	6843      	ldr	r3, [r0, #4]
 800978e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009792:	d005      	beq.n	80097a0 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009794:	2300      	movs	r3, #0
 8009796:	61c3      	str	r3, [r0, #28]
 8009798:	e002      	b.n	80097a0 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800979a:	2300      	movs	r3, #0
 800979c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800979e:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097a0:	2300      	movs	r3, #0
 80097a2:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097a4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d052      	beq.n	8009852 <HAL_SPI_Init+0xd2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097ac:	2302      	movs	r3, #2
 80097ae:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097b2:	6822      	ldr	r2, [r4, #0]
 80097b4:	6813      	ldr	r3, [r2, #0]
 80097b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097ba:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097bc:	68e3      	ldr	r3, [r4, #12]
 80097be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097c2:	d94c      	bls.n	800985e <HAL_SPI_Init+0xde>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80097c4:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80097c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80097ca:	d004      	beq.n	80097d6 <HAL_SPI_Init+0x56>
 80097cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097d0:	d001      	beq.n	80097d6 <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097d2:	2300      	movs	r3, #0
 80097d4:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80097d6:	6863      	ldr	r3, [r4, #4]
 80097d8:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80097dc:	68a1      	ldr	r1, [r4, #8]
 80097de:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 80097e2:	430b      	orrs	r3, r1
 80097e4:	6921      	ldr	r1, [r4, #16]
 80097e6:	f001 0102 	and.w	r1, r1, #2
 80097ea:	430b      	orrs	r3, r1
 80097ec:	6961      	ldr	r1, [r4, #20]
 80097ee:	f001 0101 	and.w	r1, r1, #1
 80097f2:	430b      	orrs	r3, r1
 80097f4:	69a1      	ldr	r1, [r4, #24]
 80097f6:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80097fa:	430b      	orrs	r3, r1
 80097fc:	69e1      	ldr	r1, [r4, #28]
 80097fe:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8009802:	430b      	orrs	r3, r1
 8009804:	6a21      	ldr	r1, [r4, #32]
 8009806:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800980a:	430b      	orrs	r3, r1
 800980c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800980e:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8009812:	6820      	ldr	r0, [r4, #0]
 8009814:	430b      	orrs	r3, r1
 8009816:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009818:	8b63      	ldrh	r3, [r4, #26]
 800981a:	f003 0304 	and.w	r3, r3, #4
 800981e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009820:	f001 0110 	and.w	r1, r1, #16
 8009824:	430b      	orrs	r3, r1
 8009826:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009828:	f001 0108 	and.w	r1, r1, #8
 800982c:	430b      	orrs	r3, r1
 800982e:	68e1      	ldr	r1, [r4, #12]
 8009830:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8009834:	430b      	orrs	r3, r1
 8009836:	6821      	ldr	r1, [r4, #0]
 8009838:	4313      	orrs	r3, r2
 800983a:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800983c:	6822      	ldr	r2, [r4, #0]
 800983e:	69d3      	ldr	r3, [r2, #28]
 8009840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009844:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009846:	2000      	movs	r0, #0
 8009848:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800984a:	2301      	movs	r3, #1
 800984c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8009850:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8009852:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8009856:	4620      	mov	r0, r4
 8009858:	f7fa fcc0 	bl	80041dc <HAL_SPI_MspInit>
 800985c:	e7a6      	b.n	80097ac <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800985e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009862:	e7b0      	b.n	80097c6 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8009864:	2001      	movs	r0, #1
}
 8009866:	4770      	bx	lr

08009868 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8009868:	b340      	cbz	r0, 80098bc <HAL_SRAM_Init+0x54>
{
 800986a:	b570      	push	{r4, r5, r6, lr}
 800986c:	460e      	mov	r6, r1
 800986e:	4615      	mov	r5, r2
 8009870:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8009872:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8009876:	b1e3      	cbz	r3, 80098b2 <HAL_SRAM_Init+0x4a>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009878:	4621      	mov	r1, r4
 800987a:	f851 0b08 	ldr.w	r0, [r1], #8
 800987e:	f001 f87d 	bl	800a97c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8009882:	68a2      	ldr	r2, [r4, #8]
 8009884:	4631      	mov	r1, r6
 8009886:	6820      	ldr	r0, [r4, #0]
 8009888:	f001 f8e8 	bl	800aa5c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800988c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800988e:	68a2      	ldr	r2, [r4, #8]
 8009890:	4629      	mov	r1, r5
 8009892:	6860      	ldr	r0, [r4, #4]
 8009894:	f001 f915 	bl	800aac2 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8009898:	6822      	ldr	r2, [r4, #0]
 800989a:	68a1      	ldr	r1, [r4, #8]
 800989c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098a0:	f043 0301 	orr.w	r3, r3, #1
 80098a4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80098a8:	2301      	movs	r3, #1
 80098aa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 80098ae:	2000      	movs	r0, #0
}
 80098b0:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 80098b2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SRAM_MspInit(hsram);
 80098b6:	f7f8 f90d 	bl	8001ad4 <HAL_SRAM_MspInit>
 80098ba:	e7dd      	b.n	8009878 <HAL_SRAM_Init+0x10>
    return HAL_ERROR;
 80098bc:	2001      	movs	r0, #1
}
 80098be:	4770      	bx	lr

080098c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098c0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098c2:	6a03      	ldr	r3, [r0, #32]
 80098c4:	f023 0301 	bic.w	r3, r3, #1
 80098c8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ca:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098cc:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098ce:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80098d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80098d4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098d8:	680c      	ldr	r4, [r1, #0]
 80098da:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80098dc:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80098e0:	688c      	ldr	r4, [r1, #8]
 80098e2:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80098e4:	4c21      	ldr	r4, [pc, #132]	; (800996c <TIM_OC1_SetConfig+0xac>)
 80098e6:	42a0      	cmp	r0, r4
 80098e8:	d013      	beq.n	8009912 <TIM_OC1_SetConfig+0x52>
 80098ea:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80098ee:	42a0      	cmp	r0, r4
 80098f0:	d00f      	beq.n	8009912 <TIM_OC1_SetConfig+0x52>
 80098f2:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80098f6:	42a0      	cmp	r0, r4
 80098f8:	d00b      	beq.n	8009912 <TIM_OC1_SetConfig+0x52>
 80098fa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80098fe:	42a0      	cmp	r0, r4
 8009900:	d007      	beq.n	8009912 <TIM_OC1_SetConfig+0x52>
 8009902:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009906:	42a0      	cmp	r0, r4
 8009908:	d003      	beq.n	8009912 <TIM_OC1_SetConfig+0x52>
 800990a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800990e:	42a0      	cmp	r0, r4
 8009910:	d105      	bne.n	800991e <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009912:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009916:	68cc      	ldr	r4, [r1, #12]
 8009918:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800991a:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800991e:	4c13      	ldr	r4, [pc, #76]	; (800996c <TIM_OC1_SetConfig+0xac>)
 8009920:	42a0      	cmp	r0, r4
 8009922:	d013      	beq.n	800994c <TIM_OC1_SetConfig+0x8c>
 8009924:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009928:	42a0      	cmp	r0, r4
 800992a:	d00f      	beq.n	800994c <TIM_OC1_SetConfig+0x8c>
 800992c:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8009930:	42a0      	cmp	r0, r4
 8009932:	d00b      	beq.n	800994c <TIM_OC1_SetConfig+0x8c>
 8009934:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009938:	42a0      	cmp	r0, r4
 800993a:	d007      	beq.n	800994c <TIM_OC1_SetConfig+0x8c>
 800993c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009940:	42a0      	cmp	r0, r4
 8009942:	d003      	beq.n	800994c <TIM_OC1_SetConfig+0x8c>
 8009944:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009948:	42a0      	cmp	r0, r4
 800994a:	d107      	bne.n	800995c <TIM_OC1_SetConfig+0x9c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800994c:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009950:	694c      	ldr	r4, [r1, #20]
 8009952:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009956:	698d      	ldr	r5, [r1, #24]
 8009958:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800995c:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800995e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009960:	684a      	ldr	r2, [r1, #4]
 8009962:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009964:	6203      	str	r3, [r0, #32]
}
 8009966:	bc30      	pop	{r4, r5}
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	40012c00 	.word	0x40012c00

08009970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009970:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009972:	6a03      	ldr	r3, [r0, #32]
 8009974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009978:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800997a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800997c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800997e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009980:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009984:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009988:	680d      	ldr	r5, [r1, #0]
 800998a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800998c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009990:	688d      	ldr	r5, [r1, #8]
 8009992:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009996:	4d1c      	ldr	r5, [pc, #112]	; (8009a08 <TIM_OC3_SetConfig+0x98>)
 8009998:	42a8      	cmp	r0, r5
 800999a:	d007      	beq.n	80099ac <TIM_OC3_SetConfig+0x3c>
 800999c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80099a0:	42a8      	cmp	r0, r5
 80099a2:	d003      	beq.n	80099ac <TIM_OC3_SetConfig+0x3c>
 80099a4:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80099a8:	42a8      	cmp	r0, r5
 80099aa:	d106      	bne.n	80099ba <TIM_OC3_SetConfig+0x4a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80099ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099b0:	68cd      	ldr	r5, [r1, #12]
 80099b2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80099b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ba:	4d13      	ldr	r5, [pc, #76]	; (8009a08 <TIM_OC3_SetConfig+0x98>)
 80099bc:	42a8      	cmp	r0, r5
 80099be:	d013      	beq.n	80099e8 <TIM_OC3_SetConfig+0x78>
 80099c0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80099c4:	42a8      	cmp	r0, r5
 80099c6:	d00f      	beq.n	80099e8 <TIM_OC3_SetConfig+0x78>
 80099c8:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80099cc:	42a8      	cmp	r0, r5
 80099ce:	d00b      	beq.n	80099e8 <TIM_OC3_SetConfig+0x78>
 80099d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80099d4:	42a8      	cmp	r0, r5
 80099d6:	d007      	beq.n	80099e8 <TIM_OC3_SetConfig+0x78>
 80099d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80099dc:	42a8      	cmp	r0, r5
 80099de:	d003      	beq.n	80099e8 <TIM_OC3_SetConfig+0x78>
 80099e0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80099e4:	42a8      	cmp	r0, r5
 80099e6:	d107      	bne.n	80099f8 <TIM_OC3_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80099e8:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80099ec:	694c      	ldr	r4, [r1, #20]
 80099ee:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80099f2:	698c      	ldr	r4, [r1, #24]
 80099f4:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099f8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099fa:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099fc:	684a      	ldr	r2, [r1, #4]
 80099fe:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a00:	6203      	str	r3, [r0, #32]
}
 8009a02:	bc30      	pop	{r4, r5}
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	40012c00 	.word	0x40012c00

08009a0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a0c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a0e:	6a03      	ldr	r3, [r0, #32]
 8009a10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a14:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a16:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a18:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a1a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a1c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009a20:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a24:	680d      	ldr	r5, [r1, #0]
 8009a26:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a2e:	688d      	ldr	r5, [r1, #8]
 8009a30:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009a34:	4d1b      	ldr	r5, [pc, #108]	; (8009aa4 <TIM_OC4_SetConfig+0x98>)
 8009a36:	42a8      	cmp	r0, r5
 8009a38:	d007      	beq.n	8009a4a <TIM_OC4_SetConfig+0x3e>
 8009a3a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009a3e:	42a8      	cmp	r0, r5
 8009a40:	d003      	beq.n	8009a4a <TIM_OC4_SetConfig+0x3e>
 8009a42:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8009a46:	42a8      	cmp	r0, r5
 8009a48:	d106      	bne.n	8009a58 <TIM_OC4_SetConfig+0x4c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009a4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009a4e:	68cd      	ldr	r5, [r1, #12]
 8009a50:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009a54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a58:	4d12      	ldr	r5, [pc, #72]	; (8009aa4 <TIM_OC4_SetConfig+0x98>)
 8009a5a:	42a8      	cmp	r0, r5
 8009a5c:	d013      	beq.n	8009a86 <TIM_OC4_SetConfig+0x7a>
 8009a5e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009a62:	42a8      	cmp	r0, r5
 8009a64:	d00f      	beq.n	8009a86 <TIM_OC4_SetConfig+0x7a>
 8009a66:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009a6a:	42a8      	cmp	r0, r5
 8009a6c:	d00b      	beq.n	8009a86 <TIM_OC4_SetConfig+0x7a>
 8009a6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009a72:	42a8      	cmp	r0, r5
 8009a74:	d007      	beq.n	8009a86 <TIM_OC4_SetConfig+0x7a>
 8009a76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009a7a:	42a8      	cmp	r0, r5
 8009a7c:	d003      	beq.n	8009a86 <TIM_OC4_SetConfig+0x7a>
 8009a7e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009a82:	42a8      	cmp	r0, r5
 8009a84:	d107      	bne.n	8009a96 <TIM_OC4_SetConfig+0x8a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009a86:	f424 4c40 	bic.w	ip, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a8a:	694c      	ldr	r4, [r1, #20]
 8009a8c:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009a90:	698c      	ldr	r4, [r1, #24]
 8009a92:	ea4c 1484 	orr.w	r4, ip, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a96:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a98:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a9a:	684a      	ldr	r2, [r1, #4]
 8009a9c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a9e:	6203      	str	r3, [r0, #32]
}
 8009aa0:	bc30      	pop	{r4, r5}
 8009aa2:	4770      	bx	lr
 8009aa4:	40012c00 	.word	0x40012c00

08009aa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009aa8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009aaa:	6a03      	ldr	r3, [r0, #32]
 8009aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ab0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ab2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ab4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ab6:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ab8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009abc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ac0:	680d      	ldr	r5, [r1, #0]
 8009ac2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ac4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009ac8:	688d      	ldr	r5, [r1, #8]
 8009aca:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ace:	4d11      	ldr	r5, [pc, #68]	; (8009b14 <TIM_OC5_SetConfig+0x6c>)
 8009ad0:	42a8      	cmp	r0, r5
 8009ad2:	d013      	beq.n	8009afc <TIM_OC5_SetConfig+0x54>
 8009ad4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009ad8:	42a8      	cmp	r0, r5
 8009ada:	d00f      	beq.n	8009afc <TIM_OC5_SetConfig+0x54>
 8009adc:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009ae0:	42a8      	cmp	r0, r5
 8009ae2:	d00b      	beq.n	8009afc <TIM_OC5_SetConfig+0x54>
 8009ae4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009ae8:	42a8      	cmp	r0, r5
 8009aea:	d007      	beq.n	8009afc <TIM_OC5_SetConfig+0x54>
 8009aec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009af0:	42a8      	cmp	r0, r5
 8009af2:	d003      	beq.n	8009afc <TIM_OC5_SetConfig+0x54>
 8009af4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009af8:	42a8      	cmp	r0, r5
 8009afa:	d104      	bne.n	8009b06 <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009afc:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b00:	694d      	ldr	r5, [r1, #20]
 8009b02:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b06:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b08:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b0a:	684a      	ldr	r2, [r1, #4]
 8009b0c:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b0e:	6203      	str	r3, [r0, #32]
}
 8009b10:	bc30      	pop	{r4, r5}
 8009b12:	4770      	bx	lr
 8009b14:	40012c00 	.word	0x40012c00

08009b18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b18:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b1a:	6a03      	ldr	r3, [r0, #32]
 8009b1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009b20:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b22:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b24:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b26:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b28:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009b2c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b30:	680d      	ldr	r5, [r1, #0]
 8009b32:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009b3a:	688d      	ldr	r5, [r1, #8]
 8009b3c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b40:	4d11      	ldr	r5, [pc, #68]	; (8009b88 <TIM_OC6_SetConfig+0x70>)
 8009b42:	42a8      	cmp	r0, r5
 8009b44:	d013      	beq.n	8009b6e <TIM_OC6_SetConfig+0x56>
 8009b46:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009b4a:	42a8      	cmp	r0, r5
 8009b4c:	d00f      	beq.n	8009b6e <TIM_OC6_SetConfig+0x56>
 8009b4e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009b52:	42a8      	cmp	r0, r5
 8009b54:	d00b      	beq.n	8009b6e <TIM_OC6_SetConfig+0x56>
 8009b56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009b5a:	42a8      	cmp	r0, r5
 8009b5c:	d007      	beq.n	8009b6e <TIM_OC6_SetConfig+0x56>
 8009b5e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009b62:	42a8      	cmp	r0, r5
 8009b64:	d003      	beq.n	8009b6e <TIM_OC6_SetConfig+0x56>
 8009b66:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009b6a:	42a8      	cmp	r0, r5
 8009b6c:	d104      	bne.n	8009b78 <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009b6e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009b72:	694d      	ldr	r5, [r1, #20]
 8009b74:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b78:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b7a:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009b7c:	684a      	ldr	r2, [r1, #4]
 8009b7e:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b80:	6203      	str	r3, [r0, #32]
}
 8009b82:	bc30      	pop	{r4, r5}
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	40012c00 	.word	0x40012c00

08009b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b8c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b8e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b90:	6a04      	ldr	r4, [r0, #32]
 8009b92:	f024 0401 	bic.w	r4, r4, #1
 8009b96:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b98:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b9a:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b9e:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ba2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8009ba6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ba8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009baa:	6203      	str	r3, [r0, #32]
}
 8009bac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bb0:	4770      	bx	lr

08009bb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bb2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bb4:	6a04      	ldr	r4, [r0, #32]
 8009bb6:	f024 0410 	bic.w	r4, r4, #16
 8009bba:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bbc:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8009bbe:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009bc0:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009bc4:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009bc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8009bcc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009bd0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009bd2:	6203      	str	r3, [r0, #32]
}
 8009bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009bda:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bdc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009be4:	430b      	orrs	r3, r1
 8009be6:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bea:	6083      	str	r3, [r0, #8]
}
 8009bec:	4770      	bx	lr

08009bee <HAL_TIM_PWM_MspInit>:
}
 8009bee:	4770      	bx	lr

08009bf0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8009bf0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bf2:	4a36      	ldr	r2, [pc, #216]	; (8009ccc <TIM_Base_SetConfig+0xdc>)
 8009bf4:	4290      	cmp	r0, r2
 8009bf6:	d016      	beq.n	8009c26 <TIM_Base_SetConfig+0x36>
 8009bf8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009bfc:	d013      	beq.n	8009c26 <TIM_Base_SetConfig+0x36>
 8009bfe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009c02:	4290      	cmp	r0, r2
 8009c04:	d00f      	beq.n	8009c26 <TIM_Base_SetConfig+0x36>
 8009c06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c0a:	4290      	cmp	r0, r2
 8009c0c:	d00b      	beq.n	8009c26 <TIM_Base_SetConfig+0x36>
 8009c0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c12:	4290      	cmp	r0, r2
 8009c14:	d007      	beq.n	8009c26 <TIM_Base_SetConfig+0x36>
 8009c16:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009c1a:	4290      	cmp	r0, r2
 8009c1c:	d003      	beq.n	8009c26 <TIM_Base_SetConfig+0x36>
 8009c1e:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8009c22:	4290      	cmp	r0, r2
 8009c24:	d103      	bne.n	8009c2e <TIM_Base_SetConfig+0x3e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009c2a:	684a      	ldr	r2, [r1, #4]
 8009c2c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c2e:	4a27      	ldr	r2, [pc, #156]	; (8009ccc <TIM_Base_SetConfig+0xdc>)
 8009c30:	4290      	cmp	r0, r2
 8009c32:	d022      	beq.n	8009c7a <TIM_Base_SetConfig+0x8a>
 8009c34:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009c38:	d01f      	beq.n	8009c7a <TIM_Base_SetConfig+0x8a>
 8009c3a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009c3e:	4290      	cmp	r0, r2
 8009c40:	d01b      	beq.n	8009c7a <TIM_Base_SetConfig+0x8a>
 8009c42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c46:	4290      	cmp	r0, r2
 8009c48:	d017      	beq.n	8009c7a <TIM_Base_SetConfig+0x8a>
 8009c4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c4e:	4290      	cmp	r0, r2
 8009c50:	d013      	beq.n	8009c7a <TIM_Base_SetConfig+0x8a>
 8009c52:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009c56:	4290      	cmp	r0, r2
 8009c58:	d00f      	beq.n	8009c7a <TIM_Base_SetConfig+0x8a>
 8009c5a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009c5e:	4290      	cmp	r0, r2
 8009c60:	d00b      	beq.n	8009c7a <TIM_Base_SetConfig+0x8a>
 8009c62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c66:	4290      	cmp	r0, r2
 8009c68:	d007      	beq.n	8009c7a <TIM_Base_SetConfig+0x8a>
 8009c6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c6e:	4290      	cmp	r0, r2
 8009c70:	d003      	beq.n	8009c7a <TIM_Base_SetConfig+0x8a>
 8009c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c76:	4290      	cmp	r0, r2
 8009c78:	d103      	bne.n	8009c82 <TIM_Base_SetConfig+0x92>
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c7e:	68ca      	ldr	r2, [r1, #12]
 8009c80:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c86:	694a      	ldr	r2, [r1, #20]
 8009c88:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009c8a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c8c:	688b      	ldr	r3, [r1, #8]
 8009c8e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009c90:	680b      	ldr	r3, [r1, #0]
 8009c92:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c94:	4b0d      	ldr	r3, [pc, #52]	; (8009ccc <TIM_Base_SetConfig+0xdc>)
 8009c96:	4298      	cmp	r0, r3
 8009c98:	d013      	beq.n	8009cc2 <TIM_Base_SetConfig+0xd2>
 8009c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c9e:	4298      	cmp	r0, r3
 8009ca0:	d00f      	beq.n	8009cc2 <TIM_Base_SetConfig+0xd2>
 8009ca2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8009ca6:	4298      	cmp	r0, r3
 8009ca8:	d00b      	beq.n	8009cc2 <TIM_Base_SetConfig+0xd2>
 8009caa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cae:	4298      	cmp	r0, r3
 8009cb0:	d007      	beq.n	8009cc2 <TIM_Base_SetConfig+0xd2>
 8009cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cb6:	4298      	cmp	r0, r3
 8009cb8:	d003      	beq.n	8009cc2 <TIM_Base_SetConfig+0xd2>
 8009cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cbe:	4298      	cmp	r0, r3
 8009cc0:	d101      	bne.n	8009cc6 <TIM_Base_SetConfig+0xd6>
    TIMx->RCR = Structure->RepetitionCounter;
 8009cc2:	690b      	ldr	r3, [r1, #16]
 8009cc4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	6143      	str	r3, [r0, #20]
}
 8009cca:	4770      	bx	lr
 8009ccc:	40012c00 	.word	0x40012c00

08009cd0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8009cd0:	b360      	cbz	r0, 8009d2c <HAL_TIM_Base_Init+0x5c>
{
 8009cd2:	b510      	push	{r4, lr}
 8009cd4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8009cd6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009cda:	b313      	cbz	r3, 8009d22 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8009cdc:	2302      	movs	r3, #2
 8009cde:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ce2:	4621      	mov	r1, r4
 8009ce4:	f851 0b04 	ldr.w	r0, [r1], #4
 8009ce8:	f7ff ff82 	bl	8009bf0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cec:	2301      	movs	r3, #1
 8009cee:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cf2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009cf6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009cfa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009cfe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009d02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d0a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009d0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d12:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009d16:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009d1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8009d1e:	2000      	movs	r0, #0
}
 8009d20:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8009d22:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009d26:	f7fa fbab 	bl	8004480 <HAL_TIM_Base_MspInit>
 8009d2a:	e7d7      	b.n	8009cdc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8009d2c:	2001      	movs	r0, #1
}
 8009d2e:	4770      	bx	lr

08009d30 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8009d30:	b360      	cbz	r0, 8009d8c <HAL_TIM_PWM_Init+0x5c>
{
 8009d32:	b510      	push	{r4, lr}
 8009d34:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8009d36:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009d3a:	b313      	cbz	r3, 8009d82 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d42:	4621      	mov	r1, r4
 8009d44:	f851 0b04 	ldr.w	r0, [r1], #4
 8009d48:	f7ff ff52 	bl	8009bf0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d52:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009d56:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009d5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009d5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009d62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009d6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d72:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009d76:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009d7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8009d7e:	2000      	movs	r0, #0
}
 8009d80:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8009d82:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8009d86:	f7ff ff32 	bl	8009bee <HAL_TIM_PWM_MspInit>
 8009d8a:	e7d7      	b.n	8009d3c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8009d8c:	2001      	movs	r0, #1
}
 8009d8e:	4770      	bx	lr

08009d90 <TIM_OC2_SetConfig>:
{
 8009d90:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d92:	6a03      	ldr	r3, [r0, #32]
 8009d94:	f023 0310 	bic.w	r3, r3, #16
 8009d98:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8009d9a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8009d9c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8009d9e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009da0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009da4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009da8:	680d      	ldr	r5, [r1, #0]
 8009daa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8009dae:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009db2:	688d      	ldr	r5, [r1, #8]
 8009db4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009db8:	4d1b      	ldr	r5, [pc, #108]	; (8009e28 <TIM_OC2_SetConfig+0x98>)
 8009dba:	42a8      	cmp	r0, r5
 8009dbc:	d007      	beq.n	8009dce <TIM_OC2_SetConfig+0x3e>
 8009dbe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009dc2:	42a8      	cmp	r0, r5
 8009dc4:	d003      	beq.n	8009dce <TIM_OC2_SetConfig+0x3e>
 8009dc6:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8009dca:	42a8      	cmp	r0, r5
 8009dcc:	d106      	bne.n	8009ddc <TIM_OC2_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC2NP;
 8009dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009dd2:	68cd      	ldr	r5, [r1, #12]
 8009dd4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8009dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ddc:	4d12      	ldr	r5, [pc, #72]	; (8009e28 <TIM_OC2_SetConfig+0x98>)
 8009dde:	42a8      	cmp	r0, r5
 8009de0:	d013      	beq.n	8009e0a <TIM_OC2_SetConfig+0x7a>
 8009de2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009de6:	42a8      	cmp	r0, r5
 8009de8:	d00f      	beq.n	8009e0a <TIM_OC2_SetConfig+0x7a>
 8009dea:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009dee:	42a8      	cmp	r0, r5
 8009df0:	d00b      	beq.n	8009e0a <TIM_OC2_SetConfig+0x7a>
 8009df2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009df6:	42a8      	cmp	r0, r5
 8009df8:	d007      	beq.n	8009e0a <TIM_OC2_SetConfig+0x7a>
 8009dfa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009dfe:	42a8      	cmp	r0, r5
 8009e00:	d003      	beq.n	8009e0a <TIM_OC2_SetConfig+0x7a>
 8009e02:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009e06:	42a8      	cmp	r0, r5
 8009e08:	d107      	bne.n	8009e1a <TIM_OC2_SetConfig+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e0a:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e0e:	694c      	ldr	r4, [r1, #20]
 8009e10:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e14:	698c      	ldr	r4, [r1, #24]
 8009e16:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8009e1a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009e1c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8009e1e:	684a      	ldr	r2, [r1, #4]
 8009e20:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8009e22:	6203      	str	r3, [r0, #32]
}
 8009e24:	bc30      	pop	{r4, r5}
 8009e26:	4770      	bx	lr
 8009e28:	40012c00 	.word	0x40012c00

08009e2c <HAL_TIM_PWM_ConfigChannel>:
{
 8009e2c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8009e2e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	f000 8095 	beq.w	8009f62 <HAL_TIM_PWM_ConfigChannel+0x136>
 8009e38:	4604      	mov	r4, r0
 8009e3a:	460d      	mov	r5, r1
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8009e42:	2a14      	cmp	r2, #20
 8009e44:	f200 8088 	bhi.w	8009f58 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8009e48:	e8df f002 	tbb	[pc, r2]
 8009e4c:	8686860b 	.word	0x8686860b
 8009e50:	8686861f 	.word	0x8686861f
 8009e54:	86868634 	.word	0x86868634
 8009e58:	86868648 	.word	0x86868648
 8009e5c:	8686865d 	.word	0x8686865d
 8009e60:	71          	.byte	0x71
 8009e61:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e62:	6800      	ldr	r0, [r0, #0]
 8009e64:	f7ff fd2c 	bl	80098c0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009e68:	6822      	ldr	r2, [r4, #0]
 8009e6a:	6993      	ldr	r3, [r2, #24]
 8009e6c:	f043 0308 	orr.w	r3, r3, #8
 8009e70:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e72:	6822      	ldr	r2, [r4, #0]
 8009e74:	6993      	ldr	r3, [r2, #24]
 8009e76:	f023 0304 	bic.w	r3, r3, #4
 8009e7a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e7c:	6822      	ldr	r2, [r4, #0]
 8009e7e:	6993      	ldr	r3, [r2, #24]
 8009e80:	6929      	ldr	r1, [r5, #16]
 8009e82:	430b      	orrs	r3, r1
 8009e84:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8009e86:	2000      	movs	r0, #0
      break;
 8009e88:	e067      	b.n	8009f5a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e8a:	6800      	ldr	r0, [r0, #0]
 8009e8c:	f7ff ff80 	bl	8009d90 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e90:	6822      	ldr	r2, [r4, #0]
 8009e92:	6993      	ldr	r3, [r2, #24]
 8009e94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009e98:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e9a:	6822      	ldr	r2, [r4, #0]
 8009e9c:	6993      	ldr	r3, [r2, #24]
 8009e9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ea2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ea4:	6822      	ldr	r2, [r4, #0]
 8009ea6:	6993      	ldr	r3, [r2, #24]
 8009ea8:	6929      	ldr	r1, [r5, #16]
 8009eaa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009eae:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8009eb0:	2000      	movs	r0, #0
      break;
 8009eb2:	e052      	b.n	8009f5a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009eb4:	6800      	ldr	r0, [r0, #0]
 8009eb6:	f7ff fd5b 	bl	8009970 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009eba:	6822      	ldr	r2, [r4, #0]
 8009ebc:	69d3      	ldr	r3, [r2, #28]
 8009ebe:	f043 0308 	orr.w	r3, r3, #8
 8009ec2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ec4:	6822      	ldr	r2, [r4, #0]
 8009ec6:	69d3      	ldr	r3, [r2, #28]
 8009ec8:	f023 0304 	bic.w	r3, r3, #4
 8009ecc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ece:	6822      	ldr	r2, [r4, #0]
 8009ed0:	69d3      	ldr	r3, [r2, #28]
 8009ed2:	6929      	ldr	r1, [r5, #16]
 8009ed4:	430b      	orrs	r3, r1
 8009ed6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8009ed8:	2000      	movs	r0, #0
      break;
 8009eda:	e03e      	b.n	8009f5a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009edc:	6800      	ldr	r0, [r0, #0]
 8009ede:	f7ff fd95 	bl	8009a0c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009ee2:	6822      	ldr	r2, [r4, #0]
 8009ee4:	69d3      	ldr	r3, [r2, #28]
 8009ee6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009eea:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009eec:	6822      	ldr	r2, [r4, #0]
 8009eee:	69d3      	ldr	r3, [r2, #28]
 8009ef0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ef4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ef6:	6822      	ldr	r2, [r4, #0]
 8009ef8:	69d3      	ldr	r3, [r2, #28]
 8009efa:	6929      	ldr	r1, [r5, #16]
 8009efc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009f00:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8009f02:	2000      	movs	r0, #0
      break;
 8009f04:	e029      	b.n	8009f5a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009f06:	6800      	ldr	r0, [r0, #0]
 8009f08:	f7ff fdce 	bl	8009aa8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009f0c:	6822      	ldr	r2, [r4, #0]
 8009f0e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009f10:	f043 0308 	orr.w	r3, r3, #8
 8009f14:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009f16:	6822      	ldr	r2, [r4, #0]
 8009f18:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009f1a:	f023 0304 	bic.w	r3, r3, #4
 8009f1e:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009f20:	6822      	ldr	r2, [r4, #0]
 8009f22:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009f24:	6929      	ldr	r1, [r5, #16]
 8009f26:	430b      	orrs	r3, r1
 8009f28:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8009f2a:	2000      	movs	r0, #0
      break;
 8009f2c:	e015      	b.n	8009f5a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009f2e:	6800      	ldr	r0, [r0, #0]
 8009f30:	f7ff fdf2 	bl	8009b18 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009f34:	6822      	ldr	r2, [r4, #0]
 8009f36:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009f38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009f3c:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009f3e:	6822      	ldr	r2, [r4, #0]
 8009f40:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009f42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f46:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009f48:	6822      	ldr	r2, [r4, #0]
 8009f4a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009f4c:	6929      	ldr	r1, [r5, #16]
 8009f4e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009f52:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8009f54:	2000      	movs	r0, #0
      break;
 8009f56:	e000      	b.n	8009f5a <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8009f58:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009f60:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8009f62:	2002      	movs	r0, #2
 8009f64:	e7fc      	b.n	8009f60 <HAL_TIM_PWM_ConfigChannel+0x134>

08009f66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f66:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f68:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f6a:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f6e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009f72:	430a      	orrs	r2, r1
 8009f74:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f78:	6082      	str	r2, [r0, #8]
}
 8009f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8009f80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	f000 809b 	beq.w	800a0c0 <HAL_TIM_ConfigClockSource+0x140>
{
 8009f8a:	b510      	push	{r4, lr}
 8009f8c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8009f8e:	2301      	movs	r3, #1
 8009f90:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8009f94:	2302      	movs	r3, #2
 8009f96:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8009f9a:	6802      	ldr	r2, [r0, #0]
 8009f9c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f9e:	4b49      	ldr	r3, [pc, #292]	; (800a0c4 <HAL_TIM_ConfigClockSource+0x144>)
 8009fa0:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8009fa2:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8009fa4:	680b      	ldr	r3, [r1, #0]
 8009fa6:	2b70      	cmp	r3, #112	; 0x70
 8009fa8:	d061      	beq.n	800a06e <HAL_TIM_ConfigClockSource+0xee>
 8009faa:	d831      	bhi.n	800a010 <HAL_TIM_ConfigClockSource+0x90>
 8009fac:	2b50      	cmp	r3, #80	; 0x50
 8009fae:	d078      	beq.n	800a0a2 <HAL_TIM_ConfigClockSource+0x122>
 8009fb0:	d90c      	bls.n	8009fcc <HAL_TIM_ConfigClockSource+0x4c>
 8009fb2:	2b60      	cmp	r3, #96	; 0x60
 8009fb4:	d12a      	bne.n	800a00c <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fb6:	68ca      	ldr	r2, [r1, #12]
 8009fb8:	6849      	ldr	r1, [r1, #4]
 8009fba:	6820      	ldr	r0, [r4, #0]
 8009fbc:	f7ff fdf9 	bl	8009bb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009fc0:	2160      	movs	r1, #96	; 0x60
 8009fc2:	6820      	ldr	r0, [r4, #0]
 8009fc4:	f7ff fe09 	bl	8009bda <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8009fc8:	2000      	movs	r0, #0
      break;
 8009fca:	e038      	b.n	800a03e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8009fcc:	2b40      	cmp	r3, #64	; 0x40
 8009fce:	d10a      	bne.n	8009fe6 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fd0:	68ca      	ldr	r2, [r1, #12]
 8009fd2:	6849      	ldr	r1, [r1, #4]
 8009fd4:	6820      	ldr	r0, [r4, #0]
 8009fd6:	f7ff fdd9 	bl	8009b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009fda:	2140      	movs	r1, #64	; 0x40
 8009fdc:	6820      	ldr	r0, [r4, #0]
 8009fde:	f7ff fdfc 	bl	8009bda <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8009fe2:	2000      	movs	r0, #0
      break;
 8009fe4:	e02b      	b.n	800a03e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8009fe6:	d867      	bhi.n	800a0b8 <HAL_TIM_ConfigClockSource+0x138>
 8009fe8:	2b20      	cmp	r3, #32
 8009fea:	d007      	beq.n	8009ffc <HAL_TIM_ConfigClockSource+0x7c>
 8009fec:	d903      	bls.n	8009ff6 <HAL_TIM_ConfigClockSource+0x76>
 8009fee:	2b30      	cmp	r3, #48	; 0x30
 8009ff0:	d004      	beq.n	8009ffc <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8009ff2:	2001      	movs	r0, #1
 8009ff4:	e023      	b.n	800a03e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8009ff6:	b10b      	cbz	r3, 8009ffc <HAL_TIM_ConfigClockSource+0x7c>
 8009ff8:	2b10      	cmp	r3, #16
 8009ffa:	d105      	bne.n	800a008 <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6820      	ldr	r0, [r4, #0]
 800a000:	f7ff fdeb 	bl	8009bda <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800a004:	2000      	movs	r0, #0
      break;
 800a006:	e01a      	b.n	800a03e <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 800a008:	2001      	movs	r0, #1
 800a00a:	e018      	b.n	800a03e <HAL_TIM_ConfigClockSource+0xbe>
 800a00c:	2001      	movs	r0, #1
 800a00e:	e016      	b.n	800a03e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800a010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a014:	d038      	beq.n	800a088 <HAL_TIM_ConfigClockSource+0x108>
 800a016:	d90e      	bls.n	800a036 <HAL_TIM_ConfigClockSource+0xb6>
 800a018:	4a2b      	ldr	r2, [pc, #172]	; (800a0c8 <HAL_TIM_ConfigClockSource+0x148>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d0ee      	beq.n	8009ffc <HAL_TIM_ConfigClockSource+0x7c>
 800a01e:	d915      	bls.n	800a04c <HAL_TIM_ConfigClockSource+0xcc>
 800a020:	4a2a      	ldr	r2, [pc, #168]	; (800a0cc <HAL_TIM_ConfigClockSource+0x14c>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d0ea      	beq.n	8009ffc <HAL_TIM_ConfigClockSource+0x7c>
 800a026:	3210      	adds	r2, #16
 800a028:	4293      	cmp	r3, r2
 800a02a:	d0e7      	beq.n	8009ffc <HAL_TIM_ConfigClockSource+0x7c>
 800a02c:	3a20      	subs	r2, #32
 800a02e:	4293      	cmp	r3, r2
 800a030:	d0e4      	beq.n	8009ffc <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800a032:	2001      	movs	r0, #1
 800a034:	e003      	b.n	800a03e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800a036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a03a:	d13f      	bne.n	800a0bc <HAL_TIM_ConfigClockSource+0x13c>
 800a03c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800a03e:	2301      	movs	r3, #1
 800a040:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a044:	2300      	movs	r3, #0
 800a046:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800a04a:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800a04c:	3a20      	subs	r2, #32
 800a04e:	4293      	cmp	r3, r2
 800a050:	d0d4      	beq.n	8009ffc <HAL_TIM_ConfigClockSource+0x7c>
 800a052:	d904      	bls.n	800a05e <HAL_TIM_ConfigClockSource+0xde>
 800a054:	4a1e      	ldr	r2, [pc, #120]	; (800a0d0 <HAL_TIM_ConfigClockSource+0x150>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d0d0      	beq.n	8009ffc <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800a05a:	2001      	movs	r0, #1
 800a05c:	e7ef      	b.n	800a03e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800a05e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a062:	d0cb      	beq.n	8009ffc <HAL_TIM_ConfigClockSource+0x7c>
 800a064:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a068:	d0c8      	beq.n	8009ffc <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800a06a:	2001      	movs	r0, #1
 800a06c:	e7e7      	b.n	800a03e <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 800a06e:	68cb      	ldr	r3, [r1, #12]
 800a070:	684a      	ldr	r2, [r1, #4]
 800a072:	6889      	ldr	r1, [r1, #8]
 800a074:	6820      	ldr	r0, [r4, #0]
 800a076:	f7ff ff76 	bl	8009f66 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a07a:	6822      	ldr	r2, [r4, #0]
 800a07c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a07e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800a082:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a084:	2000      	movs	r0, #0
      break;
 800a086:	e7da      	b.n	800a03e <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 800a088:	68cb      	ldr	r3, [r1, #12]
 800a08a:	684a      	ldr	r2, [r1, #4]
 800a08c:	6889      	ldr	r1, [r1, #8]
 800a08e:	6820      	ldr	r0, [r4, #0]
 800a090:	f7ff ff69 	bl	8009f66 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a094:	6822      	ldr	r2, [r4, #0]
 800a096:	6893      	ldr	r3, [r2, #8]
 800a098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a09c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a09e:	2000      	movs	r0, #0
      break;
 800a0a0:	e7cd      	b.n	800a03e <HAL_TIM_ConfigClockSource+0xbe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0a2:	68ca      	ldr	r2, [r1, #12]
 800a0a4:	6849      	ldr	r1, [r1, #4]
 800a0a6:	6820      	ldr	r0, [r4, #0]
 800a0a8:	f7ff fd70 	bl	8009b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a0ac:	2150      	movs	r1, #80	; 0x50
 800a0ae:	6820      	ldr	r0, [r4, #0]
 800a0b0:	f7ff fd93 	bl	8009bda <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800a0b4:	2000      	movs	r0, #0
      break;
 800a0b6:	e7c2      	b.n	800a03e <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 800a0b8:	2001      	movs	r0, #1
 800a0ba:	e7c0      	b.n	800a03e <HAL_TIM_ConfigClockSource+0xbe>
 800a0bc:	2001      	movs	r0, #1
 800a0be:	e7be      	b.n	800a03e <HAL_TIM_ConfigClockSource+0xbe>
  __HAL_LOCK(htim);
 800a0c0:	2002      	movs	r0, #2
}
 800a0c2:	4770      	bx	lr
 800a0c4:	ffce0088 	.word	0xffce0088
 800a0c8:	00100040 	.word	0x00100040
 800a0cc:	00100060 	.word	0x00100060
 800a0d0:	00100030 	.word	0x00100030

0800a0d4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d04c      	beq.n	800a176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
{
 800a0dc:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800a0de:	2301      	movs	r3, #1
 800a0e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0e4:	2302      	movs	r3, #2
 800a0e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0ea:	6802      	ldr	r2, [r0, #0]
 800a0ec:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0ee:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0f0:	4d22      	ldr	r5, [pc, #136]	; (800a17c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800a0f2:	42aa      	cmp	r2, r5
 800a0f4:	d007      	beq.n	800a106 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800a0f6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800a0fa:	42aa      	cmp	r2, r5
 800a0fc:	d003      	beq.n	800a106 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800a0fe:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800a102:	42aa      	cmp	r2, r5
 800a104:	d103      	bne.n	800a10e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a106:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a10a:	684d      	ldr	r5, [r1, #4]
 800a10c:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a10e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a116:	680d      	ldr	r5, [r1, #0]
 800a118:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a11a:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a11c:	6803      	ldr	r3, [r0, #0]
 800a11e:	4a17      	ldr	r2, [pc, #92]	; (800a17c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d01a      	beq.n	800a15a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800a124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a128:	d017      	beq.n	800a15a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800a12a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a12e:	4293      	cmp	r3, r2
 800a130:	d013      	beq.n	800a15a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800a132:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a136:	4293      	cmp	r3, r2
 800a138:	d00f      	beq.n	800a15a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800a13a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a13e:	4293      	cmp	r3, r2
 800a140:	d00b      	beq.n	800a15a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800a142:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800a146:	4293      	cmp	r3, r2
 800a148:	d007      	beq.n	800a15a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800a14a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a14e:	4293      	cmp	r3, r2
 800a150:	d003      	beq.n	800a15a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800a152:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a156:	4293      	cmp	r3, r2
 800a158:	d104      	bne.n	800a164 <HAL_TIMEx_MasterConfigSynchronization+0x90>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a15a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a15e:	688a      	ldr	r2, [r1, #8]
 800a160:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a162:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a164:	2301      	movs	r3, #1
 800a166:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a16a:	2300      	movs	r3, #0
 800a16c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800a170:	4618      	mov	r0, r3
}
 800a172:	bc30      	pop	{r4, r5}
 800a174:	4770      	bx	lr
  __HAL_LOCK(htim);
 800a176:	2002      	movs	r0, #2
}
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	40012c00 	.word	0x40012c00

0800a180 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a180:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a184:	2b01      	cmp	r3, #1
 800a186:	d060      	beq.n	800a24a <HAL_TIMEx_ConfigBreakDeadTime+0xca>
{
 800a188:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800a18a:	2301      	movs	r3, #1
 800a18c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a190:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a196:	688a      	ldr	r2, [r1, #8]
 800a198:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a19a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a19e:	684a      	ldr	r2, [r1, #4]
 800a1a0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a1a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1a6:	680a      	ldr	r2, [r1, #0]
 800a1a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a1aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1ae:	690a      	ldr	r2, [r1, #16]
 800a1b0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a1b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1b6:	694a      	ldr	r2, [r1, #20]
 800a1b8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a1ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1be:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800a1c0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a1c2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800a1c6:	698a      	ldr	r2, [r1, #24]
 800a1c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a1cc:	6802      	ldr	r2, [r0, #0]
 800a1ce:	4c20      	ldr	r4, [pc, #128]	; (800a250 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 800a1d0:	42a2      	cmp	r2, r4
 800a1d2:	d007      	beq.n	800a1e4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800a1d4:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800a1d8:	42a2      	cmp	r2, r4
 800a1da:	d003      	beq.n	800a1e4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800a1dc:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800a1e0:	42a2      	cmp	r2, r4
 800a1e2:	d103      	bne.n	800a1ec <HAL_TIMEx_ConfigBreakDeadTime+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a1e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1e8:	69cc      	ldr	r4, [r1, #28]
 800a1ea:	4323      	orrs	r3, r4
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a1ec:	4c18      	ldr	r4, [pc, #96]	; (800a250 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 800a1ee:	42a2      	cmp	r2, r4
 800a1f0:	d007      	beq.n	800a202 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800a1f2:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800a1f6:	42a2      	cmp	r2, r4
 800a1f8:	d003      	beq.n	800a202 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800a1fa:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800a1fe:	42a2      	cmp	r2, r4
 800a200:	d11b      	bne.n	800a23a <HAL_TIMEx_ConfigBreakDeadTime+0xba>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a202:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a206:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800a208:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a20c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a210:	6a0c      	ldr	r4, [r1, #32]
 800a212:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a214:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a218:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800a21a:	4323      	orrs	r3, r4

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a21c:	4c0c      	ldr	r4, [pc, #48]	; (800a250 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 800a21e:	42a2      	cmp	r2, r4
 800a220:	d007      	beq.n	800a232 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800a222:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800a226:	42a2      	cmp	r2, r4
 800a228:	d003      	beq.n	800a232 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800a22a:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800a22e:	42a2      	cmp	r2, r4
 800a230:	d103      	bne.n	800a23a <HAL_TIMEx_ConfigBreakDeadTime+0xba>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a232:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a236:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800a238:	430b      	orrs	r3, r1
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a23a:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a23c:	2300      	movs	r3, #0
 800a23e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800a242:	4618      	mov	r0, r3
}
 800a244:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a248:	4770      	bx	lr
  __HAL_LOCK(htim);
 800a24a:	2002      	movs	r0, #2
}
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	40012c00 	.word	0x40012c00

0800a254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a254:	b570      	push	{r4, r5, r6, lr}
 800a256:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a258:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a25a:	6883      	ldr	r3, [r0, #8]
 800a25c:	6902      	ldr	r2, [r0, #16]
 800a25e:	4313      	orrs	r3, r2
 800a260:	6942      	ldr	r2, [r0, #20]
 800a262:	4313      	orrs	r3, r2
 800a264:	69c2      	ldr	r2, [r0, #28]
 800a266:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a268:	6808      	ldr	r0, [r1, #0]
 800a26a:	4a96      	ldr	r2, [pc, #600]	; (800a4c4 <UART_SetConfig+0x270>)
 800a26c:	4002      	ands	r2, r0
 800a26e:	4313      	orrs	r3, r2
 800a270:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a272:	6822      	ldr	r2, [r4, #0]
 800a274:	6853      	ldr	r3, [r2, #4]
 800a276:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a27a:	68e1      	ldr	r1, [r4, #12]
 800a27c:	430b      	orrs	r3, r1
 800a27e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a280:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a282:	6822      	ldr	r2, [r4, #0]
 800a284:	4b90      	ldr	r3, [pc, #576]	; (800a4c8 <UART_SetConfig+0x274>)
 800a286:	429a      	cmp	r2, r3
 800a288:	d001      	beq.n	800a28e <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a28a:	6a23      	ldr	r3, [r4, #32]
 800a28c:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a28e:	6893      	ldr	r3, [r2, #8]
 800a290:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a294:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a298:	430b      	orrs	r3, r1
 800a29a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a29c:	6822      	ldr	r2, [r4, #0]
 800a29e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a2a0:	f023 030f 	bic.w	r3, r3, #15
 800a2a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a2a6:	430b      	orrs	r3, r1
 800a2a8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2aa:	6823      	ldr	r3, [r4, #0]
 800a2ac:	4a87      	ldr	r2, [pc, #540]	; (800a4cc <UART_SetConfig+0x278>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d010      	beq.n	800a2d4 <UART_SetConfig+0x80>
 800a2b2:	4a87      	ldr	r2, [pc, #540]	; (800a4d0 <UART_SetConfig+0x27c>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d021      	beq.n	800a2fc <UART_SetConfig+0xa8>
 800a2b8:	4a86      	ldr	r2, [pc, #536]	; (800a4d4 <UART_SetConfig+0x280>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d037      	beq.n	800a32e <UART_SetConfig+0xda>
 800a2be:	4a86      	ldr	r2, [pc, #536]	; (800a4d8 <UART_SetConfig+0x284>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d05c      	beq.n	800a37e <UART_SetConfig+0x12a>
 800a2c4:	4a85      	ldr	r2, [pc, #532]	; (800a4dc <UART_SetConfig+0x288>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d06b      	beq.n	800a3a2 <UART_SetConfig+0x14e>
 800a2ca:	4a7f      	ldr	r2, [pc, #508]	; (800a4c8 <UART_SetConfig+0x274>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d07d      	beq.n	800a3cc <UART_SetConfig+0x178>
 800a2d0:	2210      	movs	r2, #16
 800a2d2:	e03a      	b.n	800a34a <UART_SetConfig+0xf6>
 800a2d4:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 800a2d8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800a2dc:	f002 0203 	and.w	r2, r2, #3
 800a2e0:	2a03      	cmp	r2, #3
 800a2e2:	d809      	bhi.n	800a2f8 <UART_SetConfig+0xa4>
 800a2e4:	e8df f002 	tbb	[pc, r2]
 800a2e8:	06870402 	.word	0x06870402
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	e02c      	b.n	800a34a <UART_SetConfig+0xf6>
 800a2f0:	2204      	movs	r2, #4
 800a2f2:	e02a      	b.n	800a34a <UART_SetConfig+0xf6>
 800a2f4:	2208      	movs	r2, #8
 800a2f6:	e028      	b.n	800a34a <UART_SetConfig+0xf6>
 800a2f8:	2210      	movs	r2, #16
 800a2fa:	e026      	b.n	800a34a <UART_SetConfig+0xf6>
 800a2fc:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 800a300:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800a304:	f002 020c 	and.w	r2, r2, #12
 800a308:	2a0c      	cmp	r2, #12
 800a30a:	d80e      	bhi.n	800a32a <UART_SetConfig+0xd6>
 800a30c:	e8df f002 	tbb	[pc, r2]
 800a310:	0d0d0d07 	.word	0x0d0d0d07
 800a314:	0d0d0d09 	.word	0x0d0d0d09
 800a318:	0d0d0d75 	.word	0x0d0d0d75
 800a31c:	0b          	.byte	0x0b
 800a31d:	00          	.byte	0x00
 800a31e:	2200      	movs	r2, #0
 800a320:	e013      	b.n	800a34a <UART_SetConfig+0xf6>
 800a322:	2204      	movs	r2, #4
 800a324:	e011      	b.n	800a34a <UART_SetConfig+0xf6>
 800a326:	2208      	movs	r2, #8
 800a328:	e00f      	b.n	800a34a <UART_SetConfig+0xf6>
 800a32a:	2210      	movs	r2, #16
 800a32c:	e00d      	b.n	800a34a <UART_SetConfig+0xf6>
 800a32e:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 800a332:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800a336:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800a33a:	2a20      	cmp	r2, #32
 800a33c:	d05f      	beq.n	800a3fe <UART_SetConfig+0x1aa>
 800a33e:	d81a      	bhi.n	800a376 <UART_SetConfig+0x122>
 800a340:	2a00      	cmp	r2, #0
 800a342:	d05e      	beq.n	800a402 <UART_SetConfig+0x1ae>
 800a344:	2a10      	cmp	r2, #16
 800a346:	d15e      	bne.n	800a406 <UART_SetConfig+0x1b2>
 800a348:	2204      	movs	r2, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a34a:	495f      	ldr	r1, [pc, #380]	; (800a4c8 <UART_SetConfig+0x274>)
 800a34c:	428b      	cmp	r3, r1
 800a34e:	d076      	beq.n	800a43e <UART_SetConfig+0x1ea>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a350:	69e0      	ldr	r0, [r4, #28]
 800a352:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a356:	f000 80c9 	beq.w	800a4ec <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a35a:	2a08      	cmp	r2, #8
 800a35c:	f200 8134 	bhi.w	800a5c8 <UART_SetConfig+0x374>
 800a360:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a364:	011900f7 	.word	0x011900f7
 800a368:	013200f5 	.word	0x013200f5
 800a36c:	0132011c 	.word	0x0132011c
 800a370:	01320132 	.word	0x01320132
 800a374:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a376:	2a30      	cmp	r2, #48	; 0x30
 800a378:	d147      	bne.n	800a40a <UART_SetConfig+0x1b6>
 800a37a:	2208      	movs	r2, #8
 800a37c:	e7e5      	b.n	800a34a <UART_SetConfig+0xf6>
 800a37e:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 800a382:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800a386:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800a38a:	2a80      	cmp	r2, #128	; 0x80
 800a38c:	d03f      	beq.n	800a40e <UART_SetConfig+0x1ba>
 800a38e:	d804      	bhi.n	800a39a <UART_SetConfig+0x146>
 800a390:	b3fa      	cbz	r2, 800a412 <UART_SetConfig+0x1be>
 800a392:	2a40      	cmp	r2, #64	; 0x40
 800a394:	d13f      	bne.n	800a416 <UART_SetConfig+0x1c2>
 800a396:	2204      	movs	r2, #4
 800a398:	e7d7      	b.n	800a34a <UART_SetConfig+0xf6>
 800a39a:	2ac0      	cmp	r2, #192	; 0xc0
 800a39c:	d13d      	bne.n	800a41a <UART_SetConfig+0x1c6>
 800a39e:	2208      	movs	r2, #8
 800a3a0:	e7d3      	b.n	800a34a <UART_SetConfig+0xf6>
 800a3a2:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800a3a6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800a3aa:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800a3ae:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800a3b2:	d034      	beq.n	800a41e <UART_SetConfig+0x1ca>
 800a3b4:	d805      	bhi.n	800a3c2 <UART_SetConfig+0x16e>
 800a3b6:	b3a2      	cbz	r2, 800a422 <UART_SetConfig+0x1ce>
 800a3b8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a3bc:	d133      	bne.n	800a426 <UART_SetConfig+0x1d2>
 800a3be:	2204      	movs	r2, #4
 800a3c0:	e7c3      	b.n	800a34a <UART_SetConfig+0xf6>
 800a3c2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800a3c6:	d130      	bne.n	800a42a <UART_SetConfig+0x1d6>
 800a3c8:	2208      	movs	r2, #8
 800a3ca:	e7be      	b.n	800a34a <UART_SetConfig+0xf6>
 800a3cc:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 800a3d0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800a3d4:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800a3d8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800a3dc:	d027      	beq.n	800a42e <UART_SetConfig+0x1da>
 800a3de:	d805      	bhi.n	800a3ec <UART_SetConfig+0x198>
 800a3e0:	b33a      	cbz	r2, 800a432 <UART_SetConfig+0x1de>
 800a3e2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a3e6:	d126      	bne.n	800a436 <UART_SetConfig+0x1e2>
 800a3e8:	2204      	movs	r2, #4
 800a3ea:	e7ae      	b.n	800a34a <UART_SetConfig+0xf6>
 800a3ec:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800a3f0:	d123      	bne.n	800a43a <UART_SetConfig+0x1e6>
 800a3f2:	2208      	movs	r2, #8
 800a3f4:	e7a9      	b.n	800a34a <UART_SetConfig+0xf6>
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	e7a7      	b.n	800a34a <UART_SetConfig+0xf6>
 800a3fa:	2202      	movs	r2, #2
 800a3fc:	e7a5      	b.n	800a34a <UART_SetConfig+0xf6>
 800a3fe:	2202      	movs	r2, #2
 800a400:	e7a3      	b.n	800a34a <UART_SetConfig+0xf6>
 800a402:	2200      	movs	r2, #0
 800a404:	e7a1      	b.n	800a34a <UART_SetConfig+0xf6>
 800a406:	2210      	movs	r2, #16
 800a408:	e79f      	b.n	800a34a <UART_SetConfig+0xf6>
 800a40a:	2210      	movs	r2, #16
 800a40c:	e79d      	b.n	800a34a <UART_SetConfig+0xf6>
 800a40e:	2202      	movs	r2, #2
 800a410:	e79b      	b.n	800a34a <UART_SetConfig+0xf6>
 800a412:	2200      	movs	r2, #0
 800a414:	e799      	b.n	800a34a <UART_SetConfig+0xf6>
 800a416:	2210      	movs	r2, #16
 800a418:	e797      	b.n	800a34a <UART_SetConfig+0xf6>
 800a41a:	2210      	movs	r2, #16
 800a41c:	e795      	b.n	800a34a <UART_SetConfig+0xf6>
 800a41e:	2202      	movs	r2, #2
 800a420:	e793      	b.n	800a34a <UART_SetConfig+0xf6>
 800a422:	2200      	movs	r2, #0
 800a424:	e791      	b.n	800a34a <UART_SetConfig+0xf6>
 800a426:	2210      	movs	r2, #16
 800a428:	e78f      	b.n	800a34a <UART_SetConfig+0xf6>
 800a42a:	2210      	movs	r2, #16
 800a42c:	e78d      	b.n	800a34a <UART_SetConfig+0xf6>
 800a42e:	2202      	movs	r2, #2
 800a430:	e78b      	b.n	800a34a <UART_SetConfig+0xf6>
 800a432:	2200      	movs	r2, #0
 800a434:	e789      	b.n	800a34a <UART_SetConfig+0xf6>
 800a436:	2210      	movs	r2, #16
 800a438:	e787      	b.n	800a34a <UART_SetConfig+0xf6>
 800a43a:	2210      	movs	r2, #16
 800a43c:	e785      	b.n	800a34a <UART_SetConfig+0xf6>
    switch (clocksource)
 800a43e:	2a08      	cmp	r2, #8
 800a440:	f200 80b2 	bhi.w	800a5a8 <UART_SetConfig+0x354>
 800a444:	e8df f002 	tbb	[pc, r2]
 800a448:	b03bb008 	.word	0xb03bb008
 800a44c:	b0b0b038 	.word	0xb0b0b038
 800a450:	05          	.byte	0x05
 800a451:	00          	.byte	0x00
 800a452:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a456:	e004      	b.n	800a462 <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a458:	f7fe ffb2 	bl	80093c0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a45c:	2800      	cmp	r0, #0
 800a45e:	f000 80a5 	beq.w	800a5ac <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a462:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a464:	4b1e      	ldr	r3, [pc, #120]	; (800a4e0 <UART_SetConfig+0x28c>)
 800a466:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800a46a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a46e:	6865      	ldr	r5, [r4, #4]
 800a470:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a474:	4299      	cmp	r1, r3
 800a476:	f200 809b 	bhi.w	800a5b0 <UART_SetConfig+0x35c>
 800a47a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800a47e:	f200 8099 	bhi.w	800a5b4 <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a482:	2600      	movs	r6, #0
 800a484:	4633      	mov	r3, r6
 800a486:	4631      	mov	r1, r6
 800a488:	f7f6 fc26 	bl	8000cd8 <__aeabi_uldivmod>
 800a48c:	0209      	lsls	r1, r1, #8
 800a48e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800a492:	0200      	lsls	r0, r0, #8
 800a494:	086b      	lsrs	r3, r5, #1
 800a496:	18c0      	adds	r0, r0, r3
 800a498:	462a      	mov	r2, r5
 800a49a:	4633      	mov	r3, r6
 800a49c:	f141 0100 	adc.w	r1, r1, #0
 800a4a0:	f7f6 fc1a 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a4a4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800a4a8:	4b0e      	ldr	r3, [pc, #56]	; (800a4e4 <UART_SetConfig+0x290>)
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	f200 8084 	bhi.w	800a5b8 <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 800a4b0:	6823      	ldr	r3, [r4, #0]
 800a4b2:	60d8      	str	r0, [r3, #12]
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	e065      	b.n	800a584 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 800a4b8:	f7fe fe3c 	bl	8009134 <HAL_RCC_GetSysClockFreq>
        break;
 800a4bc:	e7ce      	b.n	800a45c <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 800a4be:	480a      	ldr	r0, [pc, #40]	; (800a4e8 <UART_SetConfig+0x294>)
 800a4c0:	e7cf      	b.n	800a462 <UART_SetConfig+0x20e>
 800a4c2:	bf00      	nop
 800a4c4:	cfff69f3 	.word	0xcfff69f3
 800a4c8:	40008000 	.word	0x40008000
 800a4cc:	40013800 	.word	0x40013800
 800a4d0:	40004400 	.word	0x40004400
 800a4d4:	40004800 	.word	0x40004800
 800a4d8:	40004c00 	.word	0x40004c00
 800a4dc:	40005000 	.word	0x40005000
 800a4e0:	080133c0 	.word	0x080133c0
 800a4e4:	000ffcff 	.word	0x000ffcff
 800a4e8:	00f42400 	.word	0x00f42400
    switch (clocksource)
 800a4ec:	2a08      	cmp	r2, #8
 800a4ee:	d865      	bhi.n	800a5bc <UART_SetConfig+0x368>
 800a4f0:	e8df f002 	tbb	[pc, r2]
 800a4f4:	64052707 	.word	0x64052707
 800a4f8:	6464642a 	.word	0x6464642a
 800a4fc:	0b          	.byte	0x0b
 800a4fd:	00          	.byte	0x00
 800a4fe:	4835      	ldr	r0, [pc, #212]	; (800a5d4 <UART_SetConfig+0x380>)
 800a500:	e003      	b.n	800a50a <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a502:	f7fe ff5d 	bl	80093c0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a506:	2800      	cmp	r0, #0
 800a508:	d05a      	beq.n	800a5c0 <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a50a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a50c:	4b32      	ldr	r3, [pc, #200]	; (800a5d8 <UART_SetConfig+0x384>)
 800a50e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a512:	fbb0 f0f3 	udiv	r0, r0, r3
 800a516:	6862      	ldr	r2, [r4, #4]
 800a518:	0853      	lsrs	r3, r2, #1
 800a51a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800a51e:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a522:	f1a0 0210 	sub.w	r2, r0, #16
 800a526:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d84a      	bhi.n	800a5c4 <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a52e:	b283      	uxth	r3, r0
 800a530:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a534:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800a538:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	60d8      	str	r0, [r3, #12]
 800a53e:	2000      	movs	r0, #0
 800a540:	e020      	b.n	800a584 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a542:	f7fe ff4f 	bl	80093e4 <HAL_RCC_GetPCLK2Freq>
        break;
 800a546:	e7de      	b.n	800a506 <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 800a548:	f7fe fdf4 	bl	8009134 <HAL_RCC_GetSysClockFreq>
        break;
 800a54c:	e7db      	b.n	800a506 <UART_SetConfig+0x2b2>
    switch (clocksource)
 800a54e:	4821      	ldr	r0, [pc, #132]	; (800a5d4 <UART_SetConfig+0x380>)
 800a550:	e003      	b.n	800a55a <UART_SetConfig+0x306>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a552:	f7fe ff35 	bl	80093c0 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 800a556:	2800      	cmp	r0, #0
 800a558:	d038      	beq.n	800a5cc <UART_SetConfig+0x378>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a55a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a55c:	4b1e      	ldr	r3, [pc, #120]	; (800a5d8 <UART_SetConfig+0x384>)
 800a55e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a562:	fbb0 f0f3 	udiv	r0, r0, r3
 800a566:	6863      	ldr	r3, [r4, #4]
 800a568:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800a56c:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a570:	f1a0 0210 	sub.w	r2, r0, #16
 800a574:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800a578:	429a      	cmp	r2, r3
 800a57a:	d829      	bhi.n	800a5d0 <UART_SetConfig+0x37c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a57c:	6823      	ldr	r3, [r4, #0]
 800a57e:	b280      	uxth	r0, r0
 800a580:	60d8      	str	r0, [r3, #12]
 800a582:	2000      	movs	r0, #0
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a584:	2301      	movs	r3, #1
 800a586:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a58a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a58e:	2300      	movs	r3, #0
 800a590:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800a592:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 800a594:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800a596:	f7fe ff25 	bl	80093e4 <HAL_RCC_GetPCLK2Freq>
        break;
 800a59a:	e7dc      	b.n	800a556 <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 800a59c:	f7fe fdca 	bl	8009134 <HAL_RCC_GetSysClockFreq>
        break;
 800a5a0:	e7d9      	b.n	800a556 <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 800a5a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a5a6:	e7d8      	b.n	800a55a <UART_SetConfig+0x306>
    switch (clocksource)
 800a5a8:	2001      	movs	r0, #1
 800a5aa:	e7eb      	b.n	800a584 <UART_SetConfig+0x330>
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	e7e9      	b.n	800a584 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800a5b0:	2001      	movs	r0, #1
 800a5b2:	e7e7      	b.n	800a584 <UART_SetConfig+0x330>
 800a5b4:	2001      	movs	r0, #1
 800a5b6:	e7e5      	b.n	800a584 <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 800a5b8:	2001      	movs	r0, #1
 800a5ba:	e7e3      	b.n	800a584 <UART_SetConfig+0x330>
    switch (clocksource)
 800a5bc:	2001      	movs	r0, #1
 800a5be:	e7e1      	b.n	800a584 <UART_SetConfig+0x330>
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	e7df      	b.n	800a584 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800a5c4:	2001      	movs	r0, #1
 800a5c6:	e7dd      	b.n	800a584 <UART_SetConfig+0x330>
    switch (clocksource)
 800a5c8:	2001      	movs	r0, #1
 800a5ca:	e7db      	b.n	800a584 <UART_SetConfig+0x330>
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	e7d9      	b.n	800a584 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800a5d0:	2001      	movs	r0, #1
 800a5d2:	e7d7      	b.n	800a584 <UART_SetConfig+0x330>
 800a5d4:	00f42400 	.word	0x00f42400
 800a5d8:	080133c0 	.word	0x080133c0

0800a5dc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a5de:	f013 0f01 	tst.w	r3, #1
 800a5e2:	d006      	beq.n	800a5f2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5e4:	6802      	ldr	r2, [r0, #0]
 800a5e6:	6853      	ldr	r3, [r2, #4]
 800a5e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a5ec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a5ee:	430b      	orrs	r3, r1
 800a5f0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a5f4:	f013 0f02 	tst.w	r3, #2
 800a5f8:	d006      	beq.n	800a608 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5fa:	6802      	ldr	r2, [r0, #0]
 800a5fc:	6853      	ldr	r3, [r2, #4]
 800a5fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a602:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800a604:	430b      	orrs	r3, r1
 800a606:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a608:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a60a:	f013 0f04 	tst.w	r3, #4
 800a60e:	d006      	beq.n	800a61e <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a610:	6802      	ldr	r2, [r0, #0]
 800a612:	6853      	ldr	r3, [r2, #4]
 800a614:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a618:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800a61a:	430b      	orrs	r3, r1
 800a61c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a61e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a620:	f013 0f08 	tst.w	r3, #8
 800a624:	d006      	beq.n	800a634 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a626:	6802      	ldr	r2, [r0, #0]
 800a628:	6853      	ldr	r3, [r2, #4]
 800a62a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a62e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a630:	430b      	orrs	r3, r1
 800a632:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a634:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a636:	f013 0f10 	tst.w	r3, #16
 800a63a:	d006      	beq.n	800a64a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a63c:	6802      	ldr	r2, [r0, #0]
 800a63e:	6893      	ldr	r3, [r2, #8]
 800a640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a644:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800a646:	430b      	orrs	r3, r1
 800a648:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a64a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a64c:	f013 0f20 	tst.w	r3, #32
 800a650:	d006      	beq.n	800a660 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a652:	6802      	ldr	r2, [r0, #0]
 800a654:	6893      	ldr	r3, [r2, #8]
 800a656:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a65a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a65c:	430b      	orrs	r3, r1
 800a65e:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a660:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a662:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a666:	d00a      	beq.n	800a67e <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a668:	6802      	ldr	r2, [r0, #0]
 800a66a:	6853      	ldr	r3, [r2, #4]
 800a66c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a670:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800a672:	430b      	orrs	r3, r1
 800a674:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a676:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a67c:	d00b      	beq.n	800a696 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a67e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a680:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a684:	d006      	beq.n	800a694 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a686:	6802      	ldr	r2, [r0, #0]
 800a688:	6853      	ldr	r3, [r2, #4]
 800a68a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a68e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800a690:	430b      	orrs	r3, r1
 800a692:	6053      	str	r3, [r2, #4]
  }
}
 800a694:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a696:	6802      	ldr	r2, [r0, #0]
 800a698:	6853      	ldr	r3, [r2, #4]
 800a69a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a69e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800a6a0:	430b      	orrs	r3, r1
 800a6a2:	6053      	str	r3, [r2, #4]
 800a6a4:	e7eb      	b.n	800a67e <UART_AdvFeatureConfig+0xa2>

0800a6a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6aa:	4605      	mov	r5, r0
 800a6ac:	460f      	mov	r7, r1
 800a6ae:	4616      	mov	r6, r2
 800a6b0:	4699      	mov	r9, r3
 800a6b2:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6b6:	682c      	ldr	r4, [r5, #0]
 800a6b8:	69e4      	ldr	r4, [r4, #28]
 800a6ba:	ea37 0304 	bics.w	r3, r7, r4
 800a6be:	bf0c      	ite	eq
 800a6c0:	f04f 0c01 	moveq.w	ip, #1
 800a6c4:	f04f 0c00 	movne.w	ip, #0
 800a6c8:	45b4      	cmp	ip, r6
 800a6ca:	d157      	bne.n	800a77c <UART_WaitOnFlagUntilTimeout+0xd6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6cc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a6d0:	d0f1      	beq.n	800a6b6 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6d2:	f7fb f91d 	bl	8005910 <HAL_GetTick>
 800a6d6:	eba0 0009 	sub.w	r0, r0, r9
 800a6da:	4540      	cmp	r0, r8
 800a6dc:	d82f      	bhi.n	800a73e <UART_WaitOnFlagUntilTimeout+0x98>
 800a6de:	f1b8 0f00 	cmp.w	r8, #0
 800a6e2:	d02c      	beq.n	800a73e <UART_WaitOnFlagUntilTimeout+0x98>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a6e4:	682b      	ldr	r3, [r5, #0]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	f012 0f04 	tst.w	r2, #4
 800a6ec:	d0e3      	beq.n	800a6b6 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6ee:	69da      	ldr	r2, [r3, #28]
 800a6f0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800a6f4:	d0df      	beq.n	800a6b6 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6fa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a6fc:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fe:	e852 3f00 	ldrex	r3, [r2]
 800a702:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a706:	e842 3100 	strex	r1, r3, [r2]
 800a70a:	2900      	cmp	r1, #0
 800a70c:	d1f6      	bne.n	800a6fc <UART_WaitOnFlagUntilTimeout+0x56>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a70e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a710:	f102 0308 	add.w	r3, r2, #8
 800a714:	e853 3f00 	ldrex	r3, [r3]
 800a718:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71c:	3208      	adds	r2, #8
 800a71e:	e842 3100 	strex	r1, r3, [r2]
 800a722:	2900      	cmp	r1, #0
 800a724:	d1f3      	bne.n	800a70e <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 800a726:	2320      	movs	r3, #32
 800a728:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a72c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a730:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a734:	2300      	movs	r3, #0
 800a736:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80

          return HAL_TIMEOUT;
 800a73a:	2003      	movs	r0, #3
 800a73c:	e01f      	b.n	800a77e <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a73e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a740:	e852 3f00 	ldrex	r3, [r2]
 800a744:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a748:	e842 3100 	strex	r1, r3, [r2]
 800a74c:	2900      	cmp	r1, #0
 800a74e:	d1f6      	bne.n	800a73e <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a750:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a752:	f102 0308 	add.w	r3, r2, #8
 800a756:	e853 3f00 	ldrex	r3, [r3]
 800a75a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75e:	3208      	adds	r2, #8
 800a760:	e842 3100 	strex	r1, r3, [r2]
 800a764:	2900      	cmp	r1, #0
 800a766:	d1f3      	bne.n	800a750 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 800a768:	2320      	movs	r3, #32
 800a76a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a76e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800a772:	2300      	movs	r3, #0
 800a774:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 800a778:	2003      	movs	r0, #3
 800a77a:	e000      	b.n	800a77e <UART_WaitOnFlagUntilTimeout+0xd8>
        }
      }
    }
  }
  return HAL_OK;
 800a77c:	2000      	movs	r0, #0
}
 800a77e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a782 <UART_CheckIdleState>:
{
 800a782:	b530      	push	{r4, r5, lr}
 800a784:	b083      	sub	sp, #12
 800a786:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a788:	2300      	movs	r3, #0
 800a78a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800a78e:	f7fb f8bf 	bl	8005910 <HAL_GetTick>
 800a792:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a794:	6822      	ldr	r2, [r4, #0]
 800a796:	6812      	ldr	r2, [r2, #0]
 800a798:	f012 0f08 	tst.w	r2, #8
 800a79c:	d10f      	bne.n	800a7be <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a79e:	6823      	ldr	r3, [r4, #0]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f013 0f04 	tst.w	r3, #4
 800a7a6:	d118      	bne.n	800a7da <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800a7a8:	2320      	movs	r3, #32
 800a7aa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a7ae:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800a7b6:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a7ba:	b003      	add	sp, #12
 800a7bc:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	f7ff ff6a 	bl	800a6a6 <UART_WaitOnFlagUntilTimeout>
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	d0e3      	beq.n	800a79e <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800a7d6:	2003      	movs	r0, #3
 800a7d8:	e7ef      	b.n	800a7ba <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7de:	9300      	str	r3, [sp, #0]
 800a7e0:	462b      	mov	r3, r5
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f7ff ff5c 	bl	800a6a6 <UART_WaitOnFlagUntilTimeout>
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	d0da      	beq.n	800a7a8 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800a7f2:	2003      	movs	r0, #3
 800a7f4:	e7e1      	b.n	800a7ba <UART_CheckIdleState+0x38>

0800a7f6 <HAL_UART_Init>:
  if (huart == NULL)
 800a7f6:	b378      	cbz	r0, 800a858 <HAL_UART_Init+0x62>
{
 800a7f8:	b510      	push	{r4, lr}
 800a7fa:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800a7fc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800a800:	b30b      	cbz	r3, 800a846 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800a802:	2324      	movs	r3, #36	; 0x24
 800a804:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800a808:	6822      	ldr	r2, [r4, #0]
 800a80a:	6813      	ldr	r3, [r2, #0]
 800a80c:	f023 0301 	bic.w	r3, r3, #1
 800a810:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a812:	4620      	mov	r0, r4
 800a814:	f7ff fd1e 	bl	800a254 <UART_SetConfig>
 800a818:	2801      	cmp	r0, #1
 800a81a:	d013      	beq.n	800a844 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a81c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a81e:	b9bb      	cbnz	r3, 800a850 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a820:	6822      	ldr	r2, [r4, #0]
 800a822:	6853      	ldr	r3, [r2, #4]
 800a824:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800a828:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a82a:	6822      	ldr	r2, [r4, #0]
 800a82c:	6893      	ldr	r3, [r2, #8]
 800a82e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800a832:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800a834:	6822      	ldr	r2, [r4, #0]
 800a836:	6813      	ldr	r3, [r2, #0]
 800a838:	f043 0301 	orr.w	r3, r3, #1
 800a83c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800a83e:	4620      	mov	r0, r4
 800a840:	f7ff ff9f 	bl	800a782 <UART_CheckIdleState>
}
 800a844:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800a846:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800a84a:	f7fa fae5 	bl	8004e18 <HAL_UART_MspInit>
 800a84e:	e7d8      	b.n	800a802 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800a850:	4620      	mov	r0, r4
 800a852:	f7ff fec3 	bl	800a5dc <UART_AdvFeatureConfig>
 800a856:	e7e3      	b.n	800a820 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800a858:	2001      	movs	r0, #1
}
 800a85a:	4770      	bx	lr

0800a85c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a85c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a85e:	b92b      	cbnz	r3, 800a86c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800a860:	2301      	movs	r3, #1
 800a862:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a866:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800a86a:	4770      	bx	lr
{
 800a86c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a86e:	6803      	ldr	r3, [r0, #0]
 800a870:	689a      	ldr	r2, [r3, #8]
 800a872:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a876:	6899      	ldr	r1, [r3, #8]
 800a878:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a87a:	4d09      	ldr	r5, [pc, #36]	; (800a8a0 <UARTEx_SetNbDataToProcess+0x44>)
 800a87c:	5c6b      	ldrb	r3, [r5, r1]
 800a87e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a880:	4c08      	ldr	r4, [pc, #32]	; (800a8a4 <UARTEx_SetNbDataToProcess+0x48>)
 800a882:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a884:	fb93 f3f1 	sdiv	r3, r3, r1
 800a888:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a88c:	5cab      	ldrb	r3, [r5, r2]
 800a88e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a890:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a892:	fb93 f3f2 	sdiv	r3, r3, r2
 800a896:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800a89a:	bc30      	pop	{r4, r5}
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	080133e0 	.word	0x080133e0
 800a8a4:	080133d8 	.word	0x080133d8

0800a8a8 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800a8a8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d018      	beq.n	800a8e2 <HAL_UARTEx_DisableFifoMode+0x3a>
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a8b6:	2324      	movs	r3, #36	; 0x24
 800a8b8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8bc:	6803      	ldr	r3, [r0, #0]
 800a8be:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a8c0:	6819      	ldr	r1, [r3, #0]
 800a8c2:	f021 0101 	bic.w	r1, r1, #1
 800a8c6:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8c8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8d0:	6801      	ldr	r1, [r0, #0]
 800a8d2:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a8d4:	2220      	movs	r2, #32
 800a8d6:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a8da:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800a8de:	4618      	mov	r0, r3
 800a8e0:	4770      	bx	lr
  __HAL_LOCK(huart);
 800a8e2:	2002      	movs	r0, #2
}
 800a8e4:	4770      	bx	lr

0800a8e6 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800a8e6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800a8e8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d01d      	beq.n	800a92c <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800a8f0:	4604      	mov	r4, r0
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a8f8:	2324      	movs	r3, #36	; 0x24
 800a8fa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8fe:	6803      	ldr	r3, [r0, #0]
 800a900:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	f022 0201 	bic.w	r2, r2, #1
 800a908:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a90a:	6802      	ldr	r2, [r0, #0]
 800a90c:	6893      	ldr	r3, [r2, #8]
 800a90e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800a912:	4319      	orrs	r1, r3
 800a914:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800a916:	f7ff ffa1 	bl	800a85c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a91a:	6823      	ldr	r3, [r4, #0]
 800a91c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a91e:	2320      	movs	r3, #32
 800a920:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a924:	2000      	movs	r0, #0
 800a926:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a92a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800a92c:	2002      	movs	r0, #2
 800a92e:	e7fc      	b.n	800a92a <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800a930 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800a930:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800a932:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a936:	2b01      	cmp	r3, #1
 800a938:	d01d      	beq.n	800a976 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800a93a:	4604      	mov	r4, r0
 800a93c:	2301      	movs	r3, #1
 800a93e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a942:	2324      	movs	r3, #36	; 0x24
 800a944:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a948:	6803      	ldr	r3, [r0, #0]
 800a94a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	f022 0201 	bic.w	r2, r2, #1
 800a952:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a954:	6802      	ldr	r2, [r0, #0]
 800a956:	6893      	ldr	r3, [r2, #8]
 800a958:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800a95c:	4319      	orrs	r1, r3
 800a95e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800a960:	f7ff ff7c 	bl	800a85c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a964:	6823      	ldr	r3, [r4, #0]
 800a966:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a968:	2320      	movs	r3, #32
 800a96a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a96e:	2000      	movs	r0, #0
 800a970:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a974:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800a976:	2002      	movs	r0, #2
 800a978:	e7fc      	b.n	800a974 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

0800a97c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800a97c:	b430      	push	{r4, r5}
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a97e:	680a      	ldr	r2, [r1, #0]
 800a980:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800a984:	f023 0301 	bic.w	r3, r3, #1
 800a988:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800a98c:	688b      	ldr	r3, [r1, #8]
 800a98e:	2b08      	cmp	r3, #8
 800a990:	d036      	beq.n	800aa00 <FMC_NORSRAM_Init+0x84>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a992:	2400      	movs	r4, #0
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a994:	684a      	ldr	r2, [r1, #4]
  btcr_reg = (flashaccess                   | \
 800a996:	4322      	orrs	r2, r4
              Init->DataAddressMux          | \
 800a998:	4313      	orrs	r3, r2
              Init->MemoryType              | \
              Init->MemoryDataWidth         | \
 800a99a:	68ca      	ldr	r2, [r1, #12]
              Init->MemoryType              | \
 800a99c:	4313      	orrs	r3, r2
              Init->BurstAccessMode         | \
 800a99e:	690a      	ldr	r2, [r1, #16]
              Init->MemoryDataWidth         | \
 800a9a0:	4313      	orrs	r3, r2
              Init->WaitSignalPolarity      | \
 800a9a2:	694a      	ldr	r2, [r1, #20]
              Init->BurstAccessMode         | \
 800a9a4:	4313      	orrs	r3, r2
              Init->WaitSignalActive        | \
 800a9a6:	698a      	ldr	r2, [r1, #24]
              Init->WaitSignalPolarity      | \
 800a9a8:	4313      	orrs	r3, r2
              Init->WriteOperation          | \
 800a9aa:	69ca      	ldr	r2, [r1, #28]
              Init->WaitSignalActive        | \
 800a9ac:	4313      	orrs	r3, r2
              Init->WaitSignal              | \
 800a9ae:	6a0a      	ldr	r2, [r1, #32]
              Init->WriteOperation          | \
 800a9b0:	4313      	orrs	r3, r2
              Init->ExtendedMode            | \
 800a9b2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
              Init->WaitSignal              | \
 800a9b4:	4313      	orrs	r3, r2
              Init->AsynchronousWait        | \
 800a9b6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
              Init->ExtendedMode            | \
 800a9b8:	4313      	orrs	r3, r2
              Init->WriteBurst);
 800a9ba:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800a9bc:	4313      	orrs	r3, r2

  btcr_reg |= Init->ContinuousClock;
 800a9be:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800a9c0:	4313      	orrs	r3, r2
  btcr_reg |= Init->WriteFifo;
 800a9c2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800a9c4:	431a      	orrs	r2, r3
  btcr_reg |= Init->NBLSetupTime;
 800a9c6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a9c8:	431a      	orrs	r2, r3
  btcr_reg |= Init->PageSize;
 800a9ca:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800a9cc:	431a      	orrs	r2, r3
  mask |= FMC_BCR1_CCLKEN;
  mask |= FMC_BCR1_WFDIS;
  mask |= FMC_BCRx_NBLSET;
  mask |= FMC_BCRx_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800a9ce:	680c      	ldr	r4, [r1, #0]
 800a9d0:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800a9d4:	4b20      	ldr	r3, [pc, #128]	; (800aa58 <FMC_NORSRAM_Init+0xdc>)
 800a9d6:	402b      	ands	r3, r5
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	f840 3024 	str.w	r3, [r0, r4, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800a9de:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800a9e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9e4:	d00e      	beq.n	800aa04 <FMC_NORSRAM_Init+0x88>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800a9e6:	680b      	ldr	r3, [r1, #0]
 800a9e8:	b11b      	cbz	r3, 800a9f2 <FMC_NORSRAM_Init+0x76>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800a9ea:	6803      	ldr	r3, [r0, #0]
 800a9ec:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	6003      	str	r3, [r0, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800a9f2:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d00d      	beq.n	800aa16 <FMC_NORSRAM_Init+0x9a>
        break;
    }
  }

  return HAL_OK;
}
 800a9fa:	2000      	movs	r0, #0
 800a9fc:	bc30      	pop	{r4, r5}
 800a9fe:	4770      	bx	lr
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800aa00:	2440      	movs	r4, #64	; 0x40
 800aa02:	e7c7      	b.n	800a994 <FMC_NORSRAM_Init+0x18>
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800aa04:	680a      	ldr	r2, [r1, #0]
 800aa06:	2a00      	cmp	r2, #0
 800aa08:	d0ed      	beq.n	800a9e6 <FMC_NORSRAM_Init+0x6a>
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800aa0a:	6802      	ldr	r2, [r0, #0]
 800aa0c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800aa10:	4313      	orrs	r3, r2
 800aa12:	6003      	str	r3, [r0, #0]
 800aa14:	e7e7      	b.n	800a9e6 <FMC_NORSRAM_Init+0x6a>
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800aa16:	6a03      	ldr	r3, [r0, #32]
 800aa18:	0c1b      	lsrs	r3, r3, #16
 800aa1a:	041b      	lsls	r3, r3, #16
 800aa1c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	6203      	str	r3, [r0, #32]
    switch (Init->NSBank)
 800aa22:	680b      	ldr	r3, [r1, #0]
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d00c      	beq.n	800aa42 <FMC_NORSRAM_Init+0xc6>
 800aa28:	2b04      	cmp	r3, #4
 800aa2a:	d00f      	beq.n	800aa4c <FMC_NORSRAM_Init+0xd0>
 800aa2c:	b123      	cbz	r3, 800aa38 <FMC_NORSRAM_Init+0xbc>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800aa2e:	6a03      	ldr	r3, [r0, #32]
 800aa30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa34:	6203      	str	r3, [r0, #32]
        break;
 800aa36:	e7e0      	b.n	800a9fa <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800aa38:	6a03      	ldr	r3, [r0, #32]
 800aa3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa3e:	6203      	str	r3, [r0, #32]
        break;
 800aa40:	e7db      	b.n	800a9fa <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800aa42:	6a03      	ldr	r3, [r0, #32]
 800aa44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa48:	6203      	str	r3, [r0, #32]
        break;
 800aa4a:	e7d6      	b.n	800a9fa <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800aa4c:	6a03      	ldr	r3, [r0, #32]
 800aa4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa52:	6203      	str	r3, [r0, #32]
        break;
 800aa54:	e7d1      	b.n	800a9fa <FMC_NORSRAM_Init+0x7e>
 800aa56:	bf00      	nop
 800aa58:	ff000480 	.word	0xff000480

0800aa5c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800aa5c:	b410      	push	{r4}
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800aa5e:	3201      	adds	r2, #1
 800aa60:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800aa64:	680b      	ldr	r3, [r1, #0]
 800aa66:	684c      	ldr	r4, [r1, #4]
 800aa68:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800aa6c:	688c      	ldr	r4, [r1, #8]
 800aa6e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800aa72:	68cc      	ldr	r4, [r1, #12]
 800aa74:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 800aa78:	690c      	ldr	r4, [r1, #16]
 800aa7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aa7e:	694c      	ldr	r4, [r1, #20]
 800aa80:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800aa84:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 800aa88:	698c      	ldr	r4, [r1, #24]
 800aa8a:	f1a4 0c02 	sub.w	ip, r4, #2
 800aa8e:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 800aa92:	69cc      	ldr	r4, [r1, #28]
 800aa94:	4323      	orrs	r3, r4
 800aa96:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800aa9a:	6803      	ldr	r3, [r0, #0]
 800aa9c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800aaa0:	d00b      	beq.n	800aaba <FMC_NORSRAM_Timing_Init+0x5e>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800aaa2:	6843      	ldr	r3, [r0, #4]
 800aaa4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800aaa8:	694a      	ldr	r2, [r1, #20]
 800aaaa:	3a01      	subs	r2, #1
 800aaac:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800aab0:	6843      	ldr	r3, [r0, #4]
 800aab2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aab6:	4313      	orrs	r3, r2
 800aab8:	6043      	str	r3, [r0, #4]
  }

  return HAL_OK;
}
 800aaba:	2000      	movs	r0, #0
 800aabc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800aac2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aac6:	d005      	beq.n	800aad4 <FMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800aac8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800aacc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800aad0:	2000      	movs	r0, #0
 800aad2:	4770      	bx	lr
{
 800aad4:	b410      	push	{r4}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800aad6:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800aada:	f003 6c7f 	and.w	ip, r3, #267386880	; 0xff00000
 800aade:	680b      	ldr	r3, [r1, #0]
 800aae0:	684c      	ldr	r4, [r1, #4]
 800aae2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800aae6:	688c      	ldr	r4, [r1, #8]
 800aae8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800aaec:	68cc      	ldr	r4, [r1, #12]
 800aaee:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 800aaf2:	69cc      	ldr	r4, [r1, #28]
 800aaf4:	4323      	orrs	r3, r4
 800aaf6:	6909      	ldr	r1, [r1, #16]
 800aaf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800aafc:	ea4c 0303 	orr.w	r3, ip, r3
 800ab00:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 800ab04:	2000      	movs	r0, #0
 800ab06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800ab0c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800ab0e:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab10:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800ab14:	b112      	cbz	r2, 800ab1c <LL_GPIO_Init+0x10>
  return __builtin_clz(value);
 800ab16:	fab2 f282 	clz	r2, r2
 800ab1a:	e04e      	b.n	800abba <LL_GPIO_Init+0xae>
    return 32U;
 800ab1c:	2220      	movs	r2, #32

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ab1e:	e04c      	b.n	800abba <LL_GPIO_Init+0xae>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800ab20:	688e      	ldr	r6, [r1, #8]
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800ab22:	6885      	ldr	r5, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab24:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800ab28:	b1e4      	cbz	r4, 800ab64 <LL_GPIO_Init+0x58>
  return __builtin_clz(value);
 800ab2a:	fab4 f484 	clz	r4, r4
 800ab2e:	0064      	lsls	r4, r4, #1
 800ab30:	f04f 0c03 	mov.w	ip, #3
 800ab34:	fa0c f404 	lsl.w	r4, ip, r4
 800ab38:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab3c:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800ab40:	b194      	cbz	r4, 800ab68 <LL_GPIO_Init+0x5c>
  return __builtin_clz(value);
 800ab42:	fab4 f484 	clz	r4, r4
 800ab46:	0064      	lsls	r4, r4, #1
 800ab48:	fa06 f404 	lsl.w	r4, r6, r4
 800ab4c:	432c      	orrs	r4, r5
 800ab4e:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800ab50:	680d      	ldr	r5, [r1, #0]
 800ab52:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800ab54:	6844      	ldr	r4, [r0, #4]
 800ab56:	ea24 0405 	bic.w	r4, r4, r5
 800ab5a:	fb06 f505 	mul.w	r5, r6, r5
 800ab5e:	432c      	orrs	r4, r5
 800ab60:	6044      	str	r4, [r0, #4]
}
 800ab62:	e039      	b.n	800abd8 <LL_GPIO_Init+0xcc>
    return 32U;
 800ab64:	2420      	movs	r4, #32
 800ab66:	e7e2      	b.n	800ab2e <LL_GPIO_Init+0x22>
 800ab68:	2420      	movs	r4, #32
 800ab6a:	e7ec      	b.n	800ab46 <LL_GPIO_Init+0x3a>
 800ab6c:	2420      	movs	r4, #32
 800ab6e:	e03b      	b.n	800abe8 <LL_GPIO_Init+0xdc>
 800ab70:	2420      	movs	r4, #32
 800ab72:	e046      	b.n	800ac02 <LL_GPIO_Init+0xf6>
 800ab74:	2420      	movs	r4, #32
 800ab76:	e056      	b.n	800ac26 <LL_GPIO_Init+0x11a>
 800ab78:	2420      	movs	r4, #32
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800ab7a:	00a4      	lsls	r4, r4, #2
 800ab7c:	fa06 f404 	lsl.w	r4, r6, r4
 800ab80:	432c      	orrs	r4, r5
 800ab82:	6204      	str	r4, [r0, #32]
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800ab84:	684e      	ldr	r6, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800ab86:	6805      	ldr	r5, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab88:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800ab8c:	2c00      	cmp	r4, #0
 800ab8e:	d075      	beq.n	800ac7c <LL_GPIO_Init+0x170>
  return __builtin_clz(value);
 800ab90:	fab4 f484 	clz	r4, r4
 800ab94:	0064      	lsls	r4, r4, #1
 800ab96:	f04f 0c03 	mov.w	ip, #3
 800ab9a:	fa0c f404 	lsl.w	r4, ip, r4
 800ab9e:	ea25 0404 	bic.w	r4, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aba2:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d06a      	beq.n	800ac80 <LL_GPIO_Init+0x174>
  return __builtin_clz(value);
 800abaa:	fab3 f383 	clz	r3, r3
 800abae:	005b      	lsls	r3, r3, #1
 800abb0:	fa06 f303 	lsl.w	r3, r6, r3
 800abb4:	4323      	orrs	r3, r4
 800abb6:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 800abb8:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800abba:	680b      	ldr	r3, [r1, #0]
 800abbc:	fa33 f402 	lsrs.w	r4, r3, r2
 800abc0:	d060      	beq.n	800ac84 <LL_GPIO_Init+0x178>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800abc2:	f04f 0c01 	mov.w	ip, #1
 800abc6:	fa0c fc02 	lsl.w	ip, ip, r2
    if (currentpin != 0x00u)
 800abca:	ea1c 0303 	ands.w	r3, ip, r3
 800abce:	d0f3      	beq.n	800abb8 <LL_GPIO_Init+0xac>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800abd0:	684c      	ldr	r4, [r1, #4]
 800abd2:	3c01      	subs	r4, #1
 800abd4:	2c01      	cmp	r4, #1
 800abd6:	d9a3      	bls.n	800ab20 <LL_GPIO_Init+0x14>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800abd8:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800abda:	68c5      	ldr	r5, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abdc:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800abe0:	2c00      	cmp	r4, #0
 800abe2:	d0c3      	beq.n	800ab6c <LL_GPIO_Init+0x60>
  return __builtin_clz(value);
 800abe4:	fab4 f484 	clz	r4, r4
 800abe8:	0064      	lsls	r4, r4, #1
 800abea:	f04f 0c03 	mov.w	ip, #3
 800abee:	fa0c f404 	lsl.w	r4, ip, r4
 800abf2:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abf6:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800abfa:	2c00      	cmp	r4, #0
 800abfc:	d0b8      	beq.n	800ab70 <LL_GPIO_Init+0x64>
  return __builtin_clz(value);
 800abfe:	fab4 f484 	clz	r4, r4
 800ac02:	0064      	lsls	r4, r4, #1
 800ac04:	fa06 f404 	lsl.w	r4, r6, r4
 800ac08:	432c      	orrs	r4, r5
 800ac0a:	60c4      	str	r4, [r0, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800ac0c:	684c      	ldr	r4, [r1, #4]
 800ac0e:	2c02      	cmp	r4, #2
 800ac10:	d1b8      	bne.n	800ab84 <LL_GPIO_Init+0x78>
        if (currentpin < LL_GPIO_PIN_8)
 800ac12:	2bff      	cmp	r3, #255	; 0xff
 800ac14:	d814      	bhi.n	800ac40 <LL_GPIO_Init+0x134>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ac16:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800ac18:	6a05      	ldr	r5, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac1a:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800ac1e:	2c00      	cmp	r4, #0
 800ac20:	d0a8      	beq.n	800ab74 <LL_GPIO_Init+0x68>
  return __builtin_clz(value);
 800ac22:	fab4 f484 	clz	r4, r4
 800ac26:	00a4      	lsls	r4, r4, #2
 800ac28:	270f      	movs	r7, #15
 800ac2a:	fa07 f404 	lsl.w	r4, r7, r4
 800ac2e:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac32:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800ac36:	2c00      	cmp	r4, #0
 800ac38:	d09e      	beq.n	800ab78 <LL_GPIO_Init+0x6c>
  return __builtin_clz(value);
 800ac3a:	fab4 f484 	clz	r4, r4
 800ac3e:	e79c      	b.n	800ab7a <LL_GPIO_Init+0x6e>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ac40:	694f      	ldr	r7, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800ac42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac44:	0a1c      	lsrs	r4, r3, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac46:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800ac4a:	b19d      	cbz	r5, 800ac74 <LL_GPIO_Init+0x168>
  return __builtin_clz(value);
 800ac4c:	fab5 f585 	clz	r5, r5
 800ac50:	00ad      	lsls	r5, r5, #2
 800ac52:	f04f 0c0f 	mov.w	ip, #15
 800ac56:	fa0c f505 	lsl.w	r5, ip, r5
 800ac5a:	ea26 0505 	bic.w	r5, r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac5e:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 800ac62:	b14c      	cbz	r4, 800ac78 <LL_GPIO_Init+0x16c>
  return __builtin_clz(value);
 800ac64:	fab4 f484 	clz	r4, r4
 800ac68:	00a4      	lsls	r4, r4, #2
 800ac6a:	fa07 f404 	lsl.w	r4, r7, r4
 800ac6e:	432c      	orrs	r4, r5
 800ac70:	6244      	str	r4, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800ac72:	e787      	b.n	800ab84 <LL_GPIO_Init+0x78>
    return 32U;
 800ac74:	2520      	movs	r5, #32
 800ac76:	e7eb      	b.n	800ac50 <LL_GPIO_Init+0x144>
 800ac78:	2420      	movs	r4, #32
 800ac7a:	e7f5      	b.n	800ac68 <LL_GPIO_Init+0x15c>
 800ac7c:	2420      	movs	r4, #32
 800ac7e:	e789      	b.n	800ab94 <LL_GPIO_Init+0x88>
 800ac80:	2320      	movs	r3, #32
 800ac82:	e794      	b.n	800abae <LL_GPIO_Init+0xa2>
  }
  return (SUCCESS);
}
 800ac84:	2000      	movs	r0, #0
 800ac86:	bcf0      	pop	{r4, r5, r6, r7}
 800ac88:	4770      	bx	lr
	...

0800ac8c <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800ac8c:	4b04      	ldr	r3, [pc, #16]	; (800aca0 <RCC_GetHCLKClockFreq+0x14>)
 800ac8e:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800ac90:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ac94:	4a03      	ldr	r2, [pc, #12]	; (800aca4 <RCC_GetHCLKClockFreq+0x18>)
 800ac96:	5cd3      	ldrb	r3, [r2, r3]
 800ac98:	f003 031f 	and.w	r3, r3, #31
}
 800ac9c:	40d8      	lsrs	r0, r3
 800ac9e:	4770      	bx	lr
 800aca0:	40021000 	.word	0x40021000
 800aca4:	080133a8 	.word	0x080133a8

0800aca8 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800aca8:	4b04      	ldr	r3, [pc, #16]	; (800acbc <RCC_GetPCLK1ClockFreq+0x14>)
 800acaa:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800acac:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800acb0:	4a03      	ldr	r2, [pc, #12]	; (800acc0 <RCC_GetPCLK1ClockFreq+0x18>)
 800acb2:	5cd3      	ldrb	r3, [r2, r3]
 800acb4:	f003 031f 	and.w	r3, r3, #31
}
 800acb8:	40d8      	lsrs	r0, r3
 800acba:	4770      	bx	lr
 800acbc:	40021000 	.word	0x40021000
 800acc0:	080133b8 	.word	0x080133b8

0800acc4 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800acc4:	4b04      	ldr	r3, [pc, #16]	; (800acd8 <RCC_GetPCLK2ClockFreq+0x14>)
 800acc6:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800acc8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800accc:	4a03      	ldr	r2, [pc, #12]	; (800acdc <RCC_GetPCLK2ClockFreq+0x18>)
 800acce:	5cd3      	ldrb	r3, [r2, r3]
 800acd0:	f003 031f 	and.w	r3, r3, #31
}
 800acd4:	40d8      	lsrs	r0, r3
 800acd6:	4770      	bx	lr
 800acd8:	40021000 	.word	0x40021000
 800acdc:	080133b8 	.word	0x080133b8

0800ace0 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800ace0:	4b0e      	ldr	r3, [pc, #56]	; (800ad1c <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 800ace8:	2b03      	cmp	r3, #3
 800acea:	d014      	beq.n	800ad16 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800acec:	480c      	ldr	r0, [pc, #48]	; (800ad20 <RCC_PLL_GetFreqDomain_SYS+0x40>)
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800acee:	4a0b      	ldr	r2, [pc, #44]	; (800ad1c <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 800acf0:	68d3      	ldr	r3, [r2, #12]
 800acf2:	f3c3 2306 	ubfx	r3, r3, #8, #7

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800acf6:	fb03 f000 	mul.w	r0, r3, r0
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800acfa:	68d3      	ldr	r3, [r2, #12]
 800acfc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ad00:	3301      	adds	r3, #1
 800ad02:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800ad06:	68d3      	ldr	r3, [r2, #12]
 800ad08:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	005b      	lsls	r3, r3, #1
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800ad10:	fbb0 f0f3 	udiv	r0, r0, r3
 800ad14:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 800ad16:	4803      	ldr	r0, [pc, #12]	; (800ad24 <RCC_PLL_GetFreqDomain_SYS+0x44>)
 800ad18:	e7e9      	b.n	800acee <RCC_PLL_GetFreqDomain_SYS+0xe>
 800ad1a:	bf00      	nop
 800ad1c:	40021000 	.word	0x40021000
 800ad20:	00f42400 	.word	0x00f42400
 800ad24:	007a1200 	.word	0x007a1200

0800ad28 <RCC_GetSystemClockFreq>:
{
 800ad28:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800ad2a:	4b07      	ldr	r3, [pc, #28]	; (800ad48 <RCC_GetSystemClockFreq+0x20>)
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 800ad32:	2b08      	cmp	r3, #8
 800ad34:	d004      	beq.n	800ad40 <RCC_GetSystemClockFreq+0x18>
 800ad36:	2b0c      	cmp	r3, #12
 800ad38:	d104      	bne.n	800ad44 <RCC_GetSystemClockFreq+0x1c>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800ad3a:	f7ff ffd1 	bl	800ace0 <RCC_PLL_GetFreqDomain_SYS>
      break;
 800ad3e:	e002      	b.n	800ad46 <RCC_GetSystemClockFreq+0x1e>
      frequency = HSE_VALUE;
 800ad40:	4802      	ldr	r0, [pc, #8]	; (800ad4c <RCC_GetSystemClockFreq+0x24>)
 800ad42:	e000      	b.n	800ad46 <RCC_GetSystemClockFreq+0x1e>
  switch (LL_RCC_GetSysClkSource())
 800ad44:	4802      	ldr	r0, [pc, #8]	; (800ad50 <RCC_GetSystemClockFreq+0x28>)
}
 800ad46:	bd08      	pop	{r3, pc}
 800ad48:	40021000 	.word	0x40021000
 800ad4c:	007a1200 	.word	0x007a1200
 800ad50:	00f42400 	.word	0x00f42400

0800ad54 <LL_RCC_GetUSARTClockFreq>:
{
 800ad54:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800ad56:	2803      	cmp	r0, #3
 800ad58:	d005      	beq.n	800ad66 <LL_RCC_GetUSARTClockFreq+0x12>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800ad5a:	280c      	cmp	r0, #12
 800ad5c:	d02c      	beq.n	800adb8 <LL_RCC_GetUSARTClockFreq+0x64>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800ad5e:	2830      	cmp	r0, #48	; 0x30
 800ad60:	d053      	beq.n	800ae0a <LL_RCC_GetUSARTClockFreq+0xb6>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800ad62:	2000      	movs	r0, #0
}
 800ad64:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800ad66:	4b3d      	ldr	r3, [pc, #244]	; (800ae5c <LL_RCC_GetUSARTClockFreq+0x108>)
 800ad68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad6c:	4003      	ands	r3, r0
 800ad6e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800ad72:	4b3b      	ldr	r3, [pc, #236]	; (800ae60 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800ad74:	4298      	cmp	r0, r3
 800ad76:	d00f      	beq.n	800ad98 <LL_RCC_GetUSARTClockFreq+0x44>
 800ad78:	f1b0 1f03 	cmp.w	r0, #196611	; 0x30003
 800ad7c:	d013      	beq.n	800ada6 <LL_RCC_GetUSARTClockFreq+0x52>
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	4298      	cmp	r0, r3
 800ad82:	d006      	beq.n	800ad92 <LL_RCC_GetUSARTClockFreq+0x3e>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800ad84:	f7ff ffd0 	bl	800ad28 <RCC_GetSystemClockFreq>
 800ad88:	f7ff ff80 	bl	800ac8c <RCC_GetHCLKClockFreq>
 800ad8c:	f7ff ff9a 	bl	800acc4 <RCC_GetPCLK2ClockFreq>
        break;
 800ad90:	e7e8      	b.n	800ad64 <LL_RCC_GetUSARTClockFreq+0x10>
        usart_frequency = RCC_GetSystemClockFreq();
 800ad92:	f7ff ffc9 	bl	800ad28 <RCC_GetSystemClockFreq>
        break;
 800ad96:	e7e5      	b.n	800ad64 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800ad98:	4b30      	ldr	r3, [pc, #192]	; (800ae5c <LL_RCC_GetUSARTClockFreq+0x108>)
 800ad9a:	6818      	ldr	r0, [r3, #0]
 800ad9c:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800ada0:	d0e0      	beq.n	800ad64 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = HSI_VALUE;
 800ada2:	4830      	ldr	r0, [pc, #192]	; (800ae64 <LL_RCC_GetUSARTClockFreq+0x110>)
 800ada4:	e7de      	b.n	800ad64 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ada6:	4b2d      	ldr	r3, [pc, #180]	; (800ae5c <LL_RCC_GetUSARTClockFreq+0x108>)
 800ada8:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800adac:	f010 0002 	ands.w	r0, r0, #2
 800adb0:	d0d8      	beq.n	800ad64 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = LSE_VALUE;
 800adb2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800adb6:	e7d5      	b.n	800ad64 <LL_RCC_GetUSARTClockFreq+0x10>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800adb8:	4b28      	ldr	r3, [pc, #160]	; (800ae5c <LL_RCC_GetUSARTClockFreq+0x108>)
 800adba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adbe:	4003      	ands	r3, r0
 800adc0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800adc4:	4b28      	ldr	r3, [pc, #160]	; (800ae68 <LL_RCC_GetUSARTClockFreq+0x114>)
 800adc6:	4298      	cmp	r0, r3
 800adc8:	d00f      	beq.n	800adea <LL_RCC_GetUSARTClockFreq+0x96>
 800adca:	f1b0 1f0c 	cmp.w	r0, #786444	; 0xc000c
 800adce:	d013      	beq.n	800adf8 <LL_RCC_GetUSARTClockFreq+0xa4>
 800add0:	3b04      	subs	r3, #4
 800add2:	4298      	cmp	r0, r3
 800add4:	d006      	beq.n	800ade4 <LL_RCC_GetUSARTClockFreq+0x90>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800add6:	f7ff ffa7 	bl	800ad28 <RCC_GetSystemClockFreq>
 800adda:	f7ff ff57 	bl	800ac8c <RCC_GetHCLKClockFreq>
 800adde:	f7ff ff63 	bl	800aca8 <RCC_GetPCLK1ClockFreq>
        break;
 800ade2:	e7bf      	b.n	800ad64 <LL_RCC_GetUSARTClockFreq+0x10>
        usart_frequency = RCC_GetSystemClockFreq();
 800ade4:	f7ff ffa0 	bl	800ad28 <RCC_GetSystemClockFreq>
        break;
 800ade8:	e7bc      	b.n	800ad64 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800adea:	4b1c      	ldr	r3, [pc, #112]	; (800ae5c <LL_RCC_GetUSARTClockFreq+0x108>)
 800adec:	6818      	ldr	r0, [r3, #0]
 800adee:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800adf2:	d0b7      	beq.n	800ad64 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = HSI_VALUE;
 800adf4:	481b      	ldr	r0, [pc, #108]	; (800ae64 <LL_RCC_GetUSARTClockFreq+0x110>)
 800adf6:	e7b5      	b.n	800ad64 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800adf8:	4b18      	ldr	r3, [pc, #96]	; (800ae5c <LL_RCC_GetUSARTClockFreq+0x108>)
 800adfa:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800adfe:	f010 0002 	ands.w	r0, r0, #2
 800ae02:	d0af      	beq.n	800ad64 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = LSE_VALUE;
 800ae04:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ae08:	e7ac      	b.n	800ad64 <LL_RCC_GetUSARTClockFreq+0x10>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800ae0a:	4b14      	ldr	r3, [pc, #80]	; (800ae5c <LL_RCC_GetUSARTClockFreq+0x108>)
 800ae0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae10:	4003      	ands	r3, r0
 800ae12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800ae16:	4b15      	ldr	r3, [pc, #84]	; (800ae6c <LL_RCC_GetUSARTClockFreq+0x118>)
 800ae18:	4298      	cmp	r0, r3
 800ae1a:	d00f      	beq.n	800ae3c <LL_RCC_GetUSARTClockFreq+0xe8>
 800ae1c:	f1b0 1f30 	cmp.w	r0, #3145776	; 0x300030
 800ae20:	d013      	beq.n	800ae4a <LL_RCC_GetUSARTClockFreq+0xf6>
 800ae22:	3b10      	subs	r3, #16
 800ae24:	4298      	cmp	r0, r3
 800ae26:	d006      	beq.n	800ae36 <LL_RCC_GetUSARTClockFreq+0xe2>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800ae28:	f7ff ff7e 	bl	800ad28 <RCC_GetSystemClockFreq>
 800ae2c:	f7ff ff2e 	bl	800ac8c <RCC_GetHCLKClockFreq>
 800ae30:	f7ff ff3a 	bl	800aca8 <RCC_GetPCLK1ClockFreq>
          break;
 800ae34:	e796      	b.n	800ad64 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = RCC_GetSystemClockFreq();
 800ae36:	f7ff ff77 	bl	800ad28 <RCC_GetSystemClockFreq>
          break;
 800ae3a:	e793      	b.n	800ad64 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800ae3c:	4b07      	ldr	r3, [pc, #28]	; (800ae5c <LL_RCC_GetUSARTClockFreq+0x108>)
 800ae3e:	6818      	ldr	r0, [r3, #0]
 800ae40:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800ae44:	d08e      	beq.n	800ad64 <LL_RCC_GetUSARTClockFreq+0x10>
            usart_frequency = HSI_VALUE;
 800ae46:	4807      	ldr	r0, [pc, #28]	; (800ae64 <LL_RCC_GetUSARTClockFreq+0x110>)
 800ae48:	e78c      	b.n	800ad64 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ae4a:	4b04      	ldr	r3, [pc, #16]	; (800ae5c <LL_RCC_GetUSARTClockFreq+0x108>)
 800ae4c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800ae50:	f010 0002 	ands.w	r0, r0, #2
 800ae54:	d086      	beq.n	800ad64 <LL_RCC_GetUSARTClockFreq+0x10>
            usart_frequency = LSE_VALUE;
 800ae56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return usart_frequency;
 800ae5a:	e783      	b.n	800ad64 <LL_RCC_GetUSARTClockFreq+0x10>
 800ae5c:	40021000 	.word	0x40021000
 800ae60:	00030002 	.word	0x00030002
 800ae64:	00f42400 	.word	0x00f42400
 800ae68:	000c0008 	.word	0x000c0008
 800ae6c:	00300020 	.word	0x00300020

0800ae70 <LL_RCC_GetUARTClockFreq>:
{
 800ae70:	b510      	push	{r4, lr}
 800ae72:	4604      	mov	r4, r0
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800ae74:	28c0      	cmp	r0, #192	; 0xc0
 800ae76:	d004      	beq.n	800ae82 <LL_RCC_GetUARTClockFreq+0x12>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800ae78:	2000      	movs	r0, #0
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800ae7a:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 800ae7e:	d029      	beq.n	800aed4 <LL_RCC_GetUARTClockFreq+0x64>
}
 800ae80:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800ae82:	4b29      	ldr	r3, [pc, #164]	; (800af28 <LL_RCC_GetUARTClockFreq+0xb8>)
 800ae84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae88:	4003      	ands	r3, r0
 800ae8a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800ae8e:	4a27      	ldr	r2, [pc, #156]	; (800af2c <LL_RCC_GetUARTClockFreq+0xbc>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d00f      	beq.n	800aeb4 <LL_RCC_GetUARTClockFreq+0x44>
 800ae94:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800ae98:	d013      	beq.n	800aec2 <LL_RCC_GetUARTClockFreq+0x52>
 800ae9a:	3a40      	subs	r2, #64	; 0x40
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d006      	beq.n	800aeae <LL_RCC_GetUARTClockFreq+0x3e>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800aea0:	f7ff ff42 	bl	800ad28 <RCC_GetSystemClockFreq>
 800aea4:	f7ff fef2 	bl	800ac8c <RCC_GetHCLKClockFreq>
 800aea8:	f7ff fefe 	bl	800aca8 <RCC_GetPCLK1ClockFreq>
        break;
 800aeac:	e7e5      	b.n	800ae7a <LL_RCC_GetUARTClockFreq+0xa>
        uart_frequency = RCC_GetSystemClockFreq();
 800aeae:	f7ff ff3b 	bl	800ad28 <RCC_GetSystemClockFreq>
        break;
 800aeb2:	e7e2      	b.n	800ae7a <LL_RCC_GetUARTClockFreq+0xa>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800aeb4:	4b1c      	ldr	r3, [pc, #112]	; (800af28 <LL_RCC_GetUARTClockFreq+0xb8>)
 800aeb6:	6818      	ldr	r0, [r3, #0]
 800aeb8:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800aebc:	d0dd      	beq.n	800ae7a <LL_RCC_GetUARTClockFreq+0xa>
          uart_frequency = HSI_VALUE;
 800aebe:	481c      	ldr	r0, [pc, #112]	; (800af30 <LL_RCC_GetUARTClockFreq+0xc0>)
 800aec0:	e7db      	b.n	800ae7a <LL_RCC_GetUARTClockFreq+0xa>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800aec2:	4b19      	ldr	r3, [pc, #100]	; (800af28 <LL_RCC_GetUARTClockFreq+0xb8>)
 800aec4:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800aec8:	f010 0002 	ands.w	r0, r0, #2
 800aecc:	d0d5      	beq.n	800ae7a <LL_RCC_GetUARTClockFreq+0xa>
          uart_frequency = LSE_VALUE;
 800aece:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800aed2:	e7d2      	b.n	800ae7a <LL_RCC_GetUARTClockFreq+0xa>
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800aed4:	4b14      	ldr	r3, [pc, #80]	; (800af28 <LL_RCC_GetUARTClockFreq+0xb8>)
 800aed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeda:	4023      	ands	r3, r4
 800aedc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800aee0:	4b14      	ldr	r3, [pc, #80]	; (800af34 <LL_RCC_GetUARTClockFreq+0xc4>)
 800aee2:	429c      	cmp	r4, r3
 800aee4:	d010      	beq.n	800af08 <LL_RCC_GetUARTClockFreq+0x98>
 800aee6:	f1b4 2f03 	cmp.w	r4, #50332416	; 0x3000300
 800aeea:	d014      	beq.n	800af16 <LL_RCC_GetUARTClockFreq+0xa6>
 800aeec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800aef0:	429c      	cmp	r4, r3
 800aef2:	d006      	beq.n	800af02 <LL_RCC_GetUARTClockFreq+0x92>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800aef4:	f7ff ff18 	bl	800ad28 <RCC_GetSystemClockFreq>
 800aef8:	f7ff fec8 	bl	800ac8c <RCC_GetHCLKClockFreq>
 800aefc:	f7ff fed4 	bl	800aca8 <RCC_GetPCLK1ClockFreq>
        break;
 800af00:	e7be      	b.n	800ae80 <LL_RCC_GetUARTClockFreq+0x10>
        uart_frequency = RCC_GetSystemClockFreq();
 800af02:	f7ff ff11 	bl	800ad28 <RCC_GetSystemClockFreq>
        break;
 800af06:	e7bb      	b.n	800ae80 <LL_RCC_GetUARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800af08:	4b07      	ldr	r3, [pc, #28]	; (800af28 <LL_RCC_GetUARTClockFreq+0xb8>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800af10:	d0b6      	beq.n	800ae80 <LL_RCC_GetUARTClockFreq+0x10>
          uart_frequency = HSI_VALUE;
 800af12:	4807      	ldr	r0, [pc, #28]	; (800af30 <LL_RCC_GetUARTClockFreq+0xc0>)
 800af14:	e7b4      	b.n	800ae80 <LL_RCC_GetUARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800af16:	4b04      	ldr	r3, [pc, #16]	; (800af28 <LL_RCC_GetUARTClockFreq+0xb8>)
 800af18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af1c:	f013 0f02 	tst.w	r3, #2
 800af20:	d0ae      	beq.n	800ae80 <LL_RCC_GetUARTClockFreq+0x10>
          uart_frequency = LSE_VALUE;
 800af22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return uart_frequency;
 800af26:	e7ab      	b.n	800ae80 <LL_RCC_GetUARTClockFreq+0x10>
 800af28:	40021000 	.word	0x40021000
 800af2c:	00c00080 	.word	0x00c00080
 800af30:	00f42400 	.word	0x00f42400
 800af34:	03000200 	.word	0x03000200

0800af38 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800af38:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800af3a:	6803      	ldr	r3, [r0, #0]
 800af3c:	f013 0f01 	tst.w	r3, #1
 800af40:	d175      	bne.n	800b02e <LL_USART_Init+0xf6>
 800af42:	4604      	mov	r4, r0
 800af44:	460d      	mov	r5, r1
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800af46:	6803      	ldr	r3, [r0, #0]
 800af48:	4a3a      	ldr	r2, [pc, #232]	; (800b034 <LL_USART_Init+0xfc>)
 800af4a:	401a      	ands	r2, r3
 800af4c:	688b      	ldr	r3, [r1, #8]
 800af4e:	6909      	ldr	r1, [r1, #16]
 800af50:	430b      	orrs	r3, r1
 800af52:	6969      	ldr	r1, [r5, #20]
 800af54:	430b      	orrs	r3, r1
 800af56:	69e9      	ldr	r1, [r5, #28]
 800af58:	430b      	orrs	r3, r1
 800af5a:	4313      	orrs	r3, r2
 800af5c:	6003      	str	r3, [r0, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800af5e:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800af60:	6842      	ldr	r2, [r0, #4]
 800af62:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800af66:	4313      	orrs	r3, r2
 800af68:	6043      	str	r3, [r0, #4]
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800af6a:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800af6c:	6882      	ldr	r2, [r0, #8]
 800af6e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800af72:	4313      	orrs	r3, r2
 800af74:	6083      	str	r3, [r0, #8]

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800af76:	4b30      	ldr	r3, [pc, #192]	; (800b038 <LL_USART_Init+0x100>)
 800af78:	4298      	cmp	r0, r3
 800af7a:	d013      	beq.n	800afa4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 800af7c:	4b2f      	ldr	r3, [pc, #188]	; (800b03c <LL_USART_Init+0x104>)
 800af7e:	4298      	cmp	r0, r3
 800af80:	d019      	beq.n	800afb6 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
    }
    else if (USARTx == USART3)
 800af82:	4b2f      	ldr	r3, [pc, #188]	; (800b040 <LL_USART_Init+0x108>)
 800af84:	4298      	cmp	r0, r3
 800af86:	d01a      	beq.n	800afbe <LL_USART_Init+0x86>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
    }
#if defined(UART4)
    else if (USARTx == UART4)
 800af88:	4b2e      	ldr	r3, [pc, #184]	; (800b044 <LL_USART_Init+0x10c>)
 800af8a:	4298      	cmp	r0, r3
 800af8c:	d01b      	beq.n	800afc6 <LL_USART_Init+0x8e>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800af8e:	4b2e      	ldr	r3, [pc, #184]	; (800b048 <LL_USART_Init+0x110>)
 800af90:	4298      	cmp	r0, r3
 800af92:	d01c      	beq.n	800afce <LL_USART_Init+0x96>
  ErrorStatus status = ERROR;
 800af94:	2001      	movs	r0, #1
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800af96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800af98:	f022 020f 	bic.w	r2, r2, #15
 800af9c:	882b      	ldrh	r3, [r5, #0]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	62e3      	str	r3, [r4, #44]	; 0x2c
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800afa4:	2003      	movs	r0, #3
 800afa6:	f7ff fed5 	bl	800ad54 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800afaa:	2800      	cmp	r0, #0
 800afac:	d03d      	beq.n	800b02a <LL_USART_Init+0xf2>
        && (USART_InitStruct->BaudRate != 0U))
 800afae:	686a      	ldr	r2, [r5, #4]
 800afb0:	b992      	cbnz	r2, 800afd8 <LL_USART_Init+0xa0>
  ErrorStatus status = ERROR;
 800afb2:	2001      	movs	r0, #1
 800afb4:	e7ef      	b.n	800af96 <LL_USART_Init+0x5e>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800afb6:	200c      	movs	r0, #12
 800afb8:	f7ff fecc 	bl	800ad54 <LL_RCC_GetUSARTClockFreq>
 800afbc:	e7f5      	b.n	800afaa <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800afbe:	2030      	movs	r0, #48	; 0x30
 800afc0:	f7ff fec8 	bl	800ad54 <LL_RCC_GetUSARTClockFreq>
 800afc4:	e7f1      	b.n	800afaa <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800afc6:	20c0      	movs	r0, #192	; 0xc0
 800afc8:	f7ff ff52 	bl	800ae70 <LL_RCC_GetUARTClockFreq>
 800afcc:	e7ed      	b.n	800afaa <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800afce:	f44f 7040 	mov.w	r0, #768	; 0x300
 800afd2:	f7ff ff4d 	bl	800ae70 <LL_RCC_GetUARTClockFreq>
 800afd6:	e7e8      	b.n	800afaa <LL_USART_Init+0x72>
      LL_USART_SetBaudRate(USARTx,
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	69e9      	ldr	r1, [r5, #28]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800afdc:	2b0b      	cmp	r3, #11
 800afde:	d80f      	bhi.n	800b000 <LL_USART_Init+0xc8>
  else if (BaudRate == 0U)
 800afe0:	b172      	cbz	r2, 800b000 <LL_USART_Init+0xc8>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800afe2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800afe6:	d00d      	beq.n	800b004 <LL_USART_Init+0xcc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	4918      	ldr	r1, [pc, #96]	; (800b04c <LL_USART_Init+0x114>)
 800afec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aff0:	fbb0 f3f3 	udiv	r3, r0, r3
 800aff4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800aff8:	fbb3 f3f2 	udiv	r3, r3, r2
 800affc:	b29b      	uxth	r3, r3
 800affe:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 800b000:	2000      	movs	r0, #0
}
 800b002:	e7c8      	b.n	800af96 <LL_USART_Init+0x5e>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800b004:	b2db      	uxtb	r3, r3
 800b006:	4911      	ldr	r1, [pc, #68]	; (800b04c <LL_USART_Init+0x114>)
 800b008:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b00c:	fbb0 f0f3 	udiv	r0, r0, r3
 800b010:	0853      	lsrs	r3, r2, #1
 800b012:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800b016:	fbb0 f3f2 	udiv	r3, r0, r2
    brrtemp = usartdiv & 0xFFF0U;
 800b01a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800b01e:	401a      	ands	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b020:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800b024:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 800b026:	60e3      	str	r3, [r4, #12]
 800b028:	e7ea      	b.n	800b000 <LL_USART_Init+0xc8>
  ErrorStatus status = ERROR;
 800b02a:	2001      	movs	r0, #1
 800b02c:	e7b3      	b.n	800af96 <LL_USART_Init+0x5e>
 800b02e:	2001      	movs	r0, #1
 800b030:	e7b7      	b.n	800afa2 <LL_USART_Init+0x6a>
 800b032:	bf00      	nop
 800b034:	efff69f3 	.word	0xefff69f3
 800b038:	40013800 	.word	0x40013800
 800b03c:	40004400 	.word	0x40004400
 800b040:	40004800 	.word	0x40004800
 800b044:	40004c00 	.word	0x40004c00
 800b048:	40005000 	.word	0x40005000
 800b04c:	080133e8 	.word	0x080133e8

0800b050 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b050:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b052:	2000      	movs	r0, #0
 800b054:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b058:	f64b 7280 	movw	r2, #49024	; 0xbf80
 800b05c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 800b060:	4770      	bx	lr

0800b062 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b062:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800b066:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 800b06a:	045b      	lsls	r3, r3, #17
 800b06c:	0c5b      	lsrs	r3, r3, #17
 800b06e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800b072:	2000      	movs	r0, #0
 800b074:	4770      	bx	lr

0800b076 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b076:	b084      	sub	sp, #16
 800b078:	4684      	mov	ip, r0
 800b07a:	a801      	add	r0, sp, #4
 800b07c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b080:	2301      	movs	r3, #1
 800b082:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b086:	2000      	movs	r0, #0
 800b088:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b08c:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b090:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 800b094:	b004      	add	sp, #16
 800b096:	4770      	bx	lr

0800b098 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b098:	b510      	push	{r4, lr}
 800b09a:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b09c:	780a      	ldrb	r2, [r1, #0]
 800b09e:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
 800b0a2:	fa1f fc8c 	uxth.w	ip, ip
 800b0a6:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 800b0aa:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800b0ae:	fa1f fc8c 	uxth.w	ip, ip

  /* initialize Endpoint */
  switch (ep->type)
 800b0b2:	78c8      	ldrb	r0, [r1, #3]
 800b0b4:	2803      	cmp	r0, #3
 800b0b6:	d862      	bhi.n	800b17e <USB_ActivateEndpoint+0xe6>
 800b0b8:	e8df f000 	tbb	[pc, r0]
 800b0bc:	59025d56 	.word	0x59025d56
 800b0c0:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b0c2:	f248 0e80 	movw	lr, #32896	; 0x8080
 800b0c6:	ea4c 0c0e 	orr.w	ip, ip, lr
 800b0ca:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b0ce:	f891 c000 	ldrb.w	ip, [r1]
 800b0d2:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800b0d6:	b212      	sxth	r2, r2
 800b0d8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b0dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b0e0:	ea4c 0202 	orr.w	r2, ip, r2
 800b0e4:	b292      	uxth	r2, r2
 800b0e6:	ea42 020e 	orr.w	r2, r2, lr
 800b0ea:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 800b0ee:	7b0a      	ldrb	r2, [r1, #12]
 800b0f0:	2a00      	cmp	r2, #0
 800b0f2:	f040 80c2 	bne.w	800b27a <USB_ActivateEndpoint+0x1e2>
  {
    if (ep->is_in != 0U)
 800b0f6:	784a      	ldrb	r2, [r1, #1]
 800b0f8:	2a00      	cmp	r2, #0
 800b0fa:	d051      	beq.n	800b1a0 <USB_ActivateEndpoint+0x108>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b0fc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800b100:	fa13 f282 	uxtah	r2, r3, r2
 800b104:	780c      	ldrb	r4, [r1, #0]
 800b106:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b10a:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 800b10e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b112:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800b116:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b11a:	780c      	ldrb	r4, [r1, #0]
 800b11c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b120:	f012 0f40 	tst.w	r2, #64	; 0x40
 800b124:	d00c      	beq.n	800b140 <USB_ActivateEndpoint+0xa8>
 800b126:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b12a:	b292      	uxth	r2, r2
 800b12c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b130:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b134:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b138:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800b13c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800b140:	78ca      	ldrb	r2, [r1, #3]
 800b142:	2a01      	cmp	r2, #1
 800b144:	d01d      	beq.n	800b182 <USB_ActivateEndpoint+0xea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b146:	7809      	ldrb	r1, [r1, #0]
 800b148:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800b14c:	b292      	uxth	r2, r2
 800b14e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b156:	f082 0220 	eor.w	r2, r2, #32
 800b15a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b15e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b162:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800b166:	e066      	b.n	800b236 <USB_ActivateEndpoint+0x19e>
      wEpRegVal |= USB_EP_CONTROL;
 800b168:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
      break;
 800b16c:	e7a9      	b.n	800b0c2 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_INTERRUPT;
 800b16e:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800b172:	2000      	movs	r0, #0
      break;
 800b174:	e7a5      	b.n	800b0c2 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b176:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 800b17a:	2000      	movs	r0, #0
      break;
 800b17c:	e7a1      	b.n	800b0c2 <USB_ActivateEndpoint+0x2a>
      ret = HAL_ERROR;
 800b17e:	2001      	movs	r0, #1
 800b180:	e79f      	b.n	800b0c2 <USB_ActivateEndpoint+0x2a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b182:	7809      	ldrb	r1, [r1, #0]
 800b184:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800b188:	b292      	uxth	r2, r2
 800b18a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b18e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b196:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b19a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800b19e:	e04a      	b.n	800b236 <USB_ActivateEndpoint+0x19e>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b1a0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800b1a4:	fa13 f282 	uxtah	r2, r3, r2
 800b1a8:	780c      	ldrb	r4, [r1, #0]
 800b1aa:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b1ae:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 800b1b2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b1b6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800b1ba:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b1be:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800b1c2:	fa13 f282 	uxtah	r2, r3, r2
 800b1c6:	780c      	ldrb	r4, [r1, #0]
 800b1c8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b1cc:	690c      	ldr	r4, [r1, #16]
 800b1ce:	2c3e      	cmp	r4, #62	; 0x3e
 800b1d0:	d932      	bls.n	800b238 <USB_ActivateEndpoint+0x1a0>
 800b1d2:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 800b1d6:	f014 0f1f 	tst.w	r4, #31
 800b1da:	d101      	bne.n	800b1e0 <USB_ActivateEndpoint+0x148>
 800b1dc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800b1e0:	ea6f 6ccc 	mvn.w	ip, ip, lsl #27
 800b1e4:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 800b1e8:	fa1f fc8c 	uxth.w	ip, ip
 800b1ec:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b1f0:	780c      	ldrb	r4, [r1, #0]
 800b1f2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b1f6:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800b1fa:	d00c      	beq.n	800b216 <USB_ActivateEndpoint+0x17e>
 800b1fc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b200:	b292      	uxth	r2, r2
 800b202:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b206:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b20a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800b20e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b212:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b216:	7809      	ldrb	r1, [r1, #0]
 800b218:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800b21c:	b292      	uxth	r2, r2
 800b21e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b222:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b226:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800b22a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b22e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b232:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 800b236:	bd10      	pop	{r4, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b238:	b98c      	cbnz	r4, 800b25e <USB_ActivateEndpoint+0x1c6>
 800b23a:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 800b23e:	b2a4      	uxth	r4, r4
 800b240:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800b244:	b2a4      	uxth	r4, r4
 800b246:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 800b24a:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 800b24e:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800b252:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800b256:	b2a4      	uxth	r4, r4
 800b258:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 800b25c:	e7c8      	b.n	800b1f0 <USB_ActivateEndpoint+0x158>
 800b25e:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 800b262:	f014 0f01 	tst.w	r4, #1
 800b266:	d001      	beq.n	800b26c <USB_ActivateEndpoint+0x1d4>
 800b268:	f10c 0c01 	add.w	ip, ip, #1
 800b26c:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 800b270:	fa1f fc8c 	uxth.w	ip, ip
 800b274:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
 800b278:	e7ba      	b.n	800b1f0 <USB_ActivateEndpoint+0x158>
    if (ep->type == EP_TYPE_BULK)
 800b27a:	78ca      	ldrb	r2, [r1, #3]
 800b27c:	2a02      	cmp	r2, #2
 800b27e:	d072      	beq.n	800b366 <USB_ActivateEndpoint+0x2ce>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b280:	780c      	ldrb	r4, [r1, #0]
 800b282:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b286:	b292      	uxth	r2, r2
 800b288:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800b28c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b290:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b294:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b298:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b29c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800b2a0:	fa13 f282 	uxtah	r2, r3, r2
 800b2a4:	f891 c000 	ldrb.w	ip, [r1]
 800b2a8:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 800b2ac:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800b2b0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b2b4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800b2b8:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
 800b2bc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800b2c0:	fa13 f282 	uxtah	r2, r3, r2
 800b2c4:	f891 c000 	ldrb.w	ip, [r1]
 800b2c8:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 800b2cc:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 800b2d0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b2d4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800b2d8:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404
    if (ep->is_in == 0U)
 800b2dc:	784a      	ldrb	r2, [r1, #1]
 800b2de:	2a00      	cmp	r2, #0
 800b2e0:	d150      	bne.n	800b384 <USB_ActivateEndpoint+0x2ec>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b2e2:	780c      	ldrb	r4, [r1, #0]
 800b2e4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b2e8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800b2ec:	d00c      	beq.n	800b308 <USB_ActivateEndpoint+0x270>
 800b2ee:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b2f2:	b292      	uxth	r2, r2
 800b2f4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b2f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b2fc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800b300:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b304:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b308:	780c      	ldrb	r4, [r1, #0]
 800b30a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b30e:	f012 0f40 	tst.w	r2, #64	; 0x40
 800b312:	d00c      	beq.n	800b32e <USB_ActivateEndpoint+0x296>
 800b314:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b318:	b292      	uxth	r2, r2
 800b31a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b31e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b322:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b326:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800b32a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b32e:	f891 c000 	ldrb.w	ip, [r1]
 800b332:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800b336:	b292      	uxth	r2, r2
 800b338:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b33c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b340:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800b344:	f248 0480 	movw	r4, #32896	; 0x8080
 800b348:	4322      	orrs	r2, r4
 800b34a:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b34e:	7809      	ldrb	r1, [r1, #0]
 800b350:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800b354:	b292      	uxth	r2, r2
 800b356:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b35a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b35e:	4322      	orrs	r2, r4
 800b360:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800b364:	e767      	b.n	800b236 <USB_ActivateEndpoint+0x19e>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b366:	780c      	ldrb	r4, [r1, #0]
 800b368:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b36c:	b292      	uxth	r2, r2
 800b36e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b372:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b376:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800b37a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b37e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800b382:	e78b      	b.n	800b29c <USB_ActivateEndpoint+0x204>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b384:	780c      	ldrb	r4, [r1, #0]
 800b386:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b38a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800b38e:	d00c      	beq.n	800b3aa <USB_ActivateEndpoint+0x312>
 800b390:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b394:	b292      	uxth	r2, r2
 800b396:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b39a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b39e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800b3a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b3a6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b3aa:	780c      	ldrb	r4, [r1, #0]
 800b3ac:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b3b0:	f012 0f40 	tst.w	r2, #64	; 0x40
 800b3b4:	d00c      	beq.n	800b3d0 <USB_ActivateEndpoint+0x338>
 800b3b6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b3ba:	b292      	uxth	r2, r2
 800b3bc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b3c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b3c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3c8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800b3cc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800b3d0:	78ca      	ldrb	r2, [r1, #3]
 800b3d2:	2a01      	cmp	r2, #1
 800b3d4:	d01e      	beq.n	800b414 <USB_ActivateEndpoint+0x37c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b3d6:	780c      	ldrb	r4, [r1, #0]
 800b3d8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b3dc:	b292      	uxth	r2, r2
 800b3de:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b3e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3e6:	f082 0220 	eor.w	r2, r2, #32
 800b3ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b3f2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b3f6:	7809      	ldrb	r1, [r1, #0]
 800b3f8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800b3fc:	b292      	uxth	r2, r2
 800b3fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b402:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b406:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b40a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b40e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800b412:	e710      	b.n	800b236 <USB_ActivateEndpoint+0x19e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b414:	780c      	ldrb	r4, [r1, #0]
 800b416:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b41a:	b292      	uxth	r2, r2
 800b41c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b424:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b428:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b42c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800b430:	e7e1      	b.n	800b3f6 <USB_ActivateEndpoint+0x35e>

0800b432 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800b432:	7b0b      	ldrb	r3, [r1, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d146      	bne.n	800b4c6 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 800b438:	784b      	ldrb	r3, [r1, #1]
 800b43a:	b313      	cbz	r3, 800b482 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b43c:	780a      	ldrb	r2, [r1, #0]
 800b43e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b442:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b446:	d00c      	beq.n	800b462 <USB_DeactivateEndpoint+0x30>
 800b448:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b45a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b45e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b462:	780a      	ldrb	r2, [r1, #0]
 800b464:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b468:	b29b      	uxth	r3, r3
 800b46a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b46e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b47a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800b47e:	2000      	movs	r0, #0
 800b480:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b482:	780a      	ldrb	r2, [r1, #0]
 800b484:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b488:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800b48c:	d00c      	beq.n	800b4a8 <USB_DeactivateEndpoint+0x76>
 800b48e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b492:	b29b      	uxth	r3, r3
 800b494:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b49c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b4a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b4a8:	780a      	ldrb	r2, [r1, #0]
 800b4aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b4b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4c0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b4c4:	e7db      	b.n	800b47e <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 800b4c6:	784b      	ldrb	r3, [r1, #1]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d14e      	bne.n	800b56a <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b4cc:	780a      	ldrb	r2, [r1, #0]
 800b4ce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b4d2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800b4d6:	d00c      	beq.n	800b4f2 <USB_DeactivateEndpoint+0xc0>
 800b4d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b4ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b4f2:	780a      	ldrb	r2, [r1, #0]
 800b4f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b4f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b4fc:	d00c      	beq.n	800b518 <USB_DeactivateEndpoint+0xe6>
 800b4fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b502:	b29b      	uxth	r3, r3
 800b504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b50c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b510:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b514:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800b518:	780a      	ldrb	r2, [r1, #0]
 800b51a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b51e:	b29b      	uxth	r3, r3
 800b520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b52c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b530:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b534:	780b      	ldrb	r3, [r1, #0]
 800b536:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800b53a:	b292      	uxth	r2, r2
 800b53c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b540:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b544:	f248 0c80 	movw	ip, #32896	; 0x8080
 800b548:	ea42 020c 	orr.w	r2, r2, ip
 800b54c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b550:	780a      	ldrb	r2, [r1, #0]
 800b552:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b556:	b29b      	uxth	r3, r3
 800b558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b55c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b560:	ea43 030c 	orr.w	r3, r3, ip
 800b564:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b568:	e789      	b.n	800b47e <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b56a:	780a      	ldrb	r2, [r1, #0]
 800b56c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b570:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800b574:	d00c      	beq.n	800b590 <USB_DeactivateEndpoint+0x15e>
 800b576:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b58c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b590:	780a      	ldrb	r2, [r1, #0]
 800b592:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b596:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b59a:	d00c      	beq.n	800b5b6 <USB_DeactivateEndpoint+0x184>
 800b59c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b5b2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800b5b6:	780a      	ldrb	r2, [r1, #0]
 800b5b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b5ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5ce:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b5d2:	780b      	ldrb	r3, [r1, #0]
 800b5d4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800b5d8:	b292      	uxth	r2, r2
 800b5da:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b5de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5e2:	f248 0c80 	movw	ip, #32896	; 0x8080
 800b5e6:	ea42 020c 	orr.w	r2, r2, ip
 800b5ea:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b5ee:	780a      	ldrb	r2, [r1, #0]
 800b5f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b5fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5fe:	ea43 030c 	orr.w	r3, r3, ip
 800b602:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b606:	e73a      	b.n	800b47e <USB_DeactivateEndpoint+0x4c>

0800b608 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800b608:	784b      	ldrb	r3, [r1, #1]
 800b60a:	b18b      	cbz	r3, 800b630 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b60c:	780a      	ldrb	r2, [r1, #0]
 800b60e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b612:	b29b      	uxth	r3, r3
 800b614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b61c:	f083 0310 	eor.w	r3, r3, #16
 800b620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b628:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 800b62c:	2000      	movs	r0, #0
 800b62e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b630:	780a      	ldrb	r2, [r1, #0]
 800b632:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b636:	b29b      	uxth	r3, r3
 800b638:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b63c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b640:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b64c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b650:	e7ec      	b.n	800b62c <USB_EPSetStall+0x24>

0800b652 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800b652:	7b0b      	ldrb	r3, [r1, #12]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d14b      	bne.n	800b6f0 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 800b658:	784b      	ldrb	r3, [r1, #1]
 800b65a:	b333      	cbz	r3, 800b6aa <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b65c:	780a      	ldrb	r2, [r1, #0]
 800b65e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b662:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b666:	d00c      	beq.n	800b682 <USB_EPClearStall+0x30>
 800b668:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b67a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b67e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800b682:	78cb      	ldrb	r3, [r1, #3]
 800b684:	2b01      	cmp	r3, #1
 800b686:	d033      	beq.n	800b6f0 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b688:	780a      	ldrb	r2, [r1, #0]
 800b68a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b68e:	b29b      	uxth	r3, r3
 800b690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b698:	f083 0320 	eor.w	r3, r3, #32
 800b69c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b6a8:	e022      	b.n	800b6f0 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b6aa:	780a      	ldrb	r2, [r1, #0]
 800b6ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b6b0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800b6b4:	d00c      	beq.n	800b6d0 <USB_EPClearStall+0x7e>
 800b6b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b6c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b6d0:	780a      	ldrb	r2, [r1, #0]
 800b6d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6e0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800b6e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	4770      	bx	lr

0800b6f4 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800b6f4:	b911      	cbnz	r1, 800b6fc <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b6f6:	2380      	movs	r3, #128	; 0x80
 800b6f8:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	4770      	bx	lr

0800b700 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b700:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 800b704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 800b712:	2000      	movs	r0, #0
 800b714:	4770      	bx	lr

0800b716 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b716:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800b71a:	b280      	uxth	r0, r0
 800b71c:	4770      	bx	lr

0800b71e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b71e:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b720:	1c5c      	adds	r4, r3, #1
 800b722:	0864      	lsrs	r4, r4, #1
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b724:	4402      	add	r2, r0
 800b726:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800b72a:	e007      	b.n	800b73c <USB_WritePMA+0x1e>
  {
    temp1 = *pBuf;
 800b72c:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b72e:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 800b730:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800b734:	f822 3b02 	strh.w	r3, [r2], #2

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b738:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800b73a:	3c01      	subs	r4, #1
 800b73c:	2c00      	cmp	r4, #0
 800b73e:	d1f5      	bne.n	800b72c <USB_WritePMA+0xe>
  }
}
 800b740:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <USB_EPStartXfer>:
{
 800b746:	b570      	push	{r4, r5, r6, lr}
 800b748:	4605      	mov	r5, r0
 800b74a:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800b74c:	784a      	ldrb	r2, [r1, #1]
 800b74e:	2a01      	cmp	r2, #1
 800b750:	d032      	beq.n	800b7b8 <USB_EPStartXfer+0x72>
    if (ep->doublebuffer == 0U)
 800b752:	7b0b      	ldrb	r3, [r1, #12]
 800b754:	2b00      	cmp	r3, #0
 800b756:	f040 8283 	bne.w	800bc60 <USB_EPStartXfer+0x51a>
      if (ep->xfer_len > ep->maxpacket)
 800b75a:	698b      	ldr	r3, [r1, #24]
 800b75c:	690a      	ldr	r2, [r1, #16]
 800b75e:	4293      	cmp	r3, r2
 800b760:	f240 825d 	bls.w	800bc1e <USB_EPStartXfer+0x4d8>
        ep->xfer_len -= len;
 800b764:	1a9b      	subs	r3, r3, r2
 800b766:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b768:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800b76c:	fa15 f383 	uxtah	r3, r5, r3
 800b770:	7821      	ldrb	r1, [r4, #0]
 800b772:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800b776:	2a3e      	cmp	r2, #62	; 0x3e
 800b778:	f240 8255 	bls.w	800bc26 <USB_EPStartXfer+0x4e0>
 800b77c:	0951      	lsrs	r1, r2, #5
 800b77e:	f012 0f1f 	tst.w	r2, #31
 800b782:	d100      	bne.n	800b786 <USB_EPStartXfer+0x40>
 800b784:	3901      	subs	r1, #1
 800b786:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800b78a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800b78e:	b289      	uxth	r1, r1
 800b790:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b794:	7822      	ldrb	r2, [r4, #0]
 800b796:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7a4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800b7a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7b0:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800b7b4:	2000      	movs	r0, #0
}
 800b7b6:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 800b7b8:	698e      	ldr	r6, [r1, #24]
 800b7ba:	6909      	ldr	r1, [r1, #16]
 800b7bc:	428e      	cmp	r6, r1
 800b7be:	d900      	bls.n	800b7c2 <USB_EPStartXfer+0x7c>
      len = ep->maxpacket;
 800b7c0:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 800b7c2:	7b23      	ldrb	r3, [r4, #12]
 800b7c4:	b32b      	cbz	r3, 800b812 <USB_EPStartXfer+0xcc>
      if (ep->type == EP_TYPE_BULK)
 800b7c6:	78e3      	ldrb	r3, [r4, #3]
 800b7c8:	2b02      	cmp	r3, #2
 800b7ca:	d044      	beq.n	800b856 <USB_EPStartXfer+0x110>
        ep->xfer_len_db -= len;
 800b7cc:	6a23      	ldr	r3, [r4, #32]
 800b7ce:	1b9b      	subs	r3, r3, r6
 800b7d0:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b7d2:	7823      	ldrb	r3, [r4, #0]
 800b7d4:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
 800b7d8:	f011 0f40 	tst.w	r1, #64	; 0x40
 800b7dc:	f000 81dc 	beq.w	800bb98 <USB_EPStartXfer+0x452>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b7e0:	2a00      	cmp	r2, #0
 800b7e2:	f040 81c9 	bne.w	800bb78 <USB_EPStartXfer+0x432>
 800b7e6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b7ea:	fa15 f282 	uxtah	r2, r5, r2
 800b7ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b7f2:	2e3e      	cmp	r6, #62	; 0x3e
 800b7f4:	f240 81a3 	bls.w	800bb3e <USB_EPStartXfer+0x3f8>
 800b7f8:	0972      	lsrs	r2, r6, #5
 800b7fa:	f016 0f1f 	tst.w	r6, #31
 800b7fe:	d100      	bne.n	800b802 <USB_EPStartXfer+0xbc>
 800b800:	3a01      	subs	r2, #1
 800b802:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b806:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b80a:	b292      	uxth	r2, r2
 800b80c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b810:	e1bb      	b.n	800bb8a <USB_EPStartXfer+0x444>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b812:	b2b6      	uxth	r6, r6
 800b814:	4633      	mov	r3, r6
 800b816:	88e2      	ldrh	r2, [r4, #6]
 800b818:	6961      	ldr	r1, [r4, #20]
 800b81a:	4628      	mov	r0, r5
 800b81c:	f7ff ff7f 	bl	800b71e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b820:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800b824:	fa15 f383 	uxtah	r3, r5, r3
 800b828:	7822      	ldrb	r2, [r4, #0]
 800b82a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b82e:	f8a3 6402 	strh.w	r6, [r3, #1026]	; 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b832:	7822      	ldrb	r2, [r4, #0]
 800b834:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800b838:	b29b      	uxth	r3, r3
 800b83a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b83e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b842:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800b846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b84a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b84e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800b852:	2000      	movs	r0, #0
 800b854:	e7af      	b.n	800b7b6 <USB_EPStartXfer+0x70>
        if (ep->xfer_len_db > ep->maxpacket)
 800b856:	6a23      	ldr	r3, [r4, #32]
 800b858:	4299      	cmp	r1, r3
 800b85a:	f080 8152 	bcs.w	800bb02 <USB_EPStartXfer+0x3bc>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b85e:	7822      	ldrb	r2, [r4, #0]
 800b860:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800b864:	b29b      	uxth	r3, r3
 800b866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b86a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b86e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b876:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 800b87a:	6a23      	ldr	r3, [r4, #32]
 800b87c:	1b9b      	subs	r3, r3, r6
 800b87e:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b880:	7823      	ldrb	r3, [r4, #0]
 800b882:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 800b886:	f012 0f40 	tst.w	r2, #64	; 0x40
 800b88a:	f000 809d 	beq.w	800b9c8 <USB_EPStartXfer+0x282>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b88e:	7862      	ldrb	r2, [r4, #1]
 800b890:	bb8a      	cbnz	r2, 800b8f6 <USB_EPStartXfer+0x1b0>
 800b892:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b896:	fa15 f282 	uxtah	r2, r5, r2
 800b89a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b89e:	2e3e      	cmp	r6, #62	; 0x3e
 800b8a0:	d90c      	bls.n	800b8bc <USB_EPStartXfer+0x176>
 800b8a2:	0972      	lsrs	r2, r6, #5
 800b8a4:	f016 0f1f 	tst.w	r6, #31
 800b8a8:	d100      	bne.n	800b8ac <USB_EPStartXfer+0x166>
 800b8aa:	3a01      	subs	r2, #1
 800b8ac:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b8b0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b8b4:	b292      	uxth	r2, r2
 800b8b6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b8ba:	e01e      	b.n	800b8fa <USB_EPStartXfer+0x1b4>
 800b8bc:	b98e      	cbnz	r6, 800b8e2 <USB_EPStartXfer+0x19c>
 800b8be:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b8c2:	b292      	uxth	r2, r2
 800b8c4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b8c8:	b292      	uxth	r2, r2
 800b8ca:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b8ce:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b8d2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b8d6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b8da:	b292      	uxth	r2, r2
 800b8dc:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b8e0:	e00b      	b.n	800b8fa <USB_EPStartXfer+0x1b4>
 800b8e2:	0872      	lsrs	r2, r6, #1
 800b8e4:	f016 0f01 	tst.w	r6, #1
 800b8e8:	d000      	beq.n	800b8ec <USB_EPStartXfer+0x1a6>
 800b8ea:	3201      	adds	r2, #1
 800b8ec:	0292      	lsls	r2, r2, #10
 800b8ee:	b292      	uxth	r2, r2
 800b8f0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b8f4:	e001      	b.n	800b8fa <USB_EPStartXfer+0x1b4>
 800b8f6:	2a01      	cmp	r2, #1
 800b8f8:	d027      	beq.n	800b94a <USB_EPStartXfer+0x204>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b8fa:	b2b3      	uxth	r3, r6
 800b8fc:	8962      	ldrh	r2, [r4, #10]
 800b8fe:	6961      	ldr	r1, [r4, #20]
 800b900:	4628      	mov	r0, r5
 800b902:	f7ff ff0c 	bl	800b71e <USB_WritePMA>
            ep->xfer_buff += len;
 800b906:	6963      	ldr	r3, [r4, #20]
 800b908:	4433      	add	r3, r6
 800b90a:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800b90c:	6a23      	ldr	r3, [r4, #32]
 800b90e:	6922      	ldr	r2, [r4, #16]
 800b910:	4293      	cmp	r3, r2
 800b912:	d924      	bls.n	800b95e <USB_EPStartXfer+0x218>
              ep->xfer_len_db -= len;
 800b914:	1b9b      	subs	r3, r3, r6
 800b916:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b918:	7863      	ldrb	r3, [r4, #1]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d140      	bne.n	800b9a0 <USB_EPStartXfer+0x25a>
 800b91e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800b922:	fa15 f383 	uxtah	r3, r5, r3
 800b926:	7822      	ldrb	r2, [r4, #0]
 800b928:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b92c:	2e3e      	cmp	r6, #62	; 0x3e
 800b92e:	d91a      	bls.n	800b966 <USB_EPStartXfer+0x220>
 800b930:	0972      	lsrs	r2, r6, #5
 800b932:	f016 0f1f 	tst.w	r6, #31
 800b936:	d100      	bne.n	800b93a <USB_EPStartXfer+0x1f4>
 800b938:	3a01      	subs	r2, #1
 800b93a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b93e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b942:	b292      	uxth	r2, r2
 800b944:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b948:	e02c      	b.n	800b9a4 <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b94a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b94e:	fa15 f282 	uxtah	r2, r5, r2
 800b952:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b956:	b2b2      	uxth	r2, r6
 800b958:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b95c:	e7cd      	b.n	800b8fa <USB_EPStartXfer+0x1b4>
              ep->xfer_len_db = 0U;
 800b95e:	2200      	movs	r2, #0
 800b960:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 800b962:	461e      	mov	r6, r3
 800b964:	e7d8      	b.n	800b918 <USB_EPStartXfer+0x1d2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b966:	b98e      	cbnz	r6, 800b98c <USB_EPStartXfer+0x246>
 800b968:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800b96c:	b292      	uxth	r2, r2
 800b96e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b972:	b292      	uxth	r2, r2
 800b974:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b978:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800b97c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b980:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b984:	b292      	uxth	r2, r2
 800b986:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b98a:	e00b      	b.n	800b9a4 <USB_EPStartXfer+0x25e>
 800b98c:	0872      	lsrs	r2, r6, #1
 800b98e:	f016 0f01 	tst.w	r6, #1
 800b992:	d000      	beq.n	800b996 <USB_EPStartXfer+0x250>
 800b994:	3201      	adds	r2, #1
 800b996:	0292      	lsls	r2, r2, #10
 800b998:	b292      	uxth	r2, r2
 800b99a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b99e:	e001      	b.n	800b9a4 <USB_EPStartXfer+0x25e>
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d006      	beq.n	800b9b2 <USB_EPStartXfer+0x26c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b9a4:	b2b3      	uxth	r3, r6
 800b9a6:	8922      	ldrh	r2, [r4, #8]
 800b9a8:	6961      	ldr	r1, [r4, #20]
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	f7ff feb7 	bl	800b71e <USB_WritePMA>
 800b9b0:	e73f      	b.n	800b832 <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b9b2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800b9b6:	fa15 f383 	uxtah	r3, r5, r3
 800b9ba:	7822      	ldrb	r2, [r4, #0]
 800b9bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9c0:	b2b2      	uxth	r2, r6
 800b9c2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b9c6:	e7ed      	b.n	800b9a4 <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b9c8:	7862      	ldrb	r2, [r4, #1]
 800b9ca:	bb8a      	cbnz	r2, 800ba30 <USB_EPStartXfer+0x2ea>
 800b9cc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b9d0:	fa15 f282 	uxtah	r2, r5, r2
 800b9d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b9d8:	2e3e      	cmp	r6, #62	; 0x3e
 800b9da:	d90c      	bls.n	800b9f6 <USB_EPStartXfer+0x2b0>
 800b9dc:	0972      	lsrs	r2, r6, #5
 800b9de:	f016 0f1f 	tst.w	r6, #31
 800b9e2:	d100      	bne.n	800b9e6 <USB_EPStartXfer+0x2a0>
 800b9e4:	3a01      	subs	r2, #1
 800b9e6:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b9ea:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b9ee:	b292      	uxth	r2, r2
 800b9f0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b9f4:	e01e      	b.n	800ba34 <USB_EPStartXfer+0x2ee>
 800b9f6:	b98e      	cbnz	r6, 800ba1c <USB_EPStartXfer+0x2d6>
 800b9f8:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800b9fc:	b292      	uxth	r2, r2
 800b9fe:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800ba02:	b292      	uxth	r2, r2
 800ba04:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800ba08:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800ba0c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800ba10:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800ba14:	b292      	uxth	r2, r2
 800ba16:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800ba1a:	e00b      	b.n	800ba34 <USB_EPStartXfer+0x2ee>
 800ba1c:	0872      	lsrs	r2, r6, #1
 800ba1e:	f016 0f01 	tst.w	r6, #1
 800ba22:	d000      	beq.n	800ba26 <USB_EPStartXfer+0x2e0>
 800ba24:	3201      	adds	r2, #1
 800ba26:	0292      	lsls	r2, r2, #10
 800ba28:	b292      	uxth	r2, r2
 800ba2a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800ba2e:	e001      	b.n	800ba34 <USB_EPStartXfer+0x2ee>
 800ba30:	2a01      	cmp	r2, #1
 800ba32:	d027      	beq.n	800ba84 <USB_EPStartXfer+0x33e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba34:	b2b3      	uxth	r3, r6
 800ba36:	8922      	ldrh	r2, [r4, #8]
 800ba38:	6961      	ldr	r1, [r4, #20]
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	f7ff fe6f 	bl	800b71e <USB_WritePMA>
            ep->xfer_buff += len;
 800ba40:	6963      	ldr	r3, [r4, #20]
 800ba42:	4433      	add	r3, r6
 800ba44:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800ba46:	6a23      	ldr	r3, [r4, #32]
 800ba48:	6922      	ldr	r2, [r4, #16]
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d924      	bls.n	800ba98 <USB_EPStartXfer+0x352>
              ep->xfer_len_db -= len;
 800ba4e:	1b9b      	subs	r3, r3, r6
 800ba50:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ba52:	7863      	ldrb	r3, [r4, #1]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d140      	bne.n	800bada <USB_EPStartXfer+0x394>
 800ba58:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800ba5c:	fa15 f383 	uxtah	r3, r5, r3
 800ba60:	7822      	ldrb	r2, [r4, #0]
 800ba62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba66:	2e3e      	cmp	r6, #62	; 0x3e
 800ba68:	d91a      	bls.n	800baa0 <USB_EPStartXfer+0x35a>
 800ba6a:	0972      	lsrs	r2, r6, #5
 800ba6c:	f016 0f1f 	tst.w	r6, #31
 800ba70:	d100      	bne.n	800ba74 <USB_EPStartXfer+0x32e>
 800ba72:	3a01      	subs	r2, #1
 800ba74:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800ba78:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800ba7c:	b292      	uxth	r2, r2
 800ba7e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800ba82:	e02c      	b.n	800bade <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ba84:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800ba88:	fa15 f282 	uxtah	r2, r5, r2
 800ba8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ba90:	b2b2      	uxth	r2, r6
 800ba92:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800ba96:	e7cd      	b.n	800ba34 <USB_EPStartXfer+0x2ee>
              ep->xfer_len_db = 0U;
 800ba98:	2200      	movs	r2, #0
 800ba9a:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 800ba9c:	461e      	mov	r6, r3
 800ba9e:	e7d8      	b.n	800ba52 <USB_EPStartXfer+0x30c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800baa0:	b98e      	cbnz	r6, 800bac6 <USB_EPStartXfer+0x380>
 800baa2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800baa6:	b292      	uxth	r2, r2
 800baa8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800baac:	b292      	uxth	r2, r2
 800baae:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800bab2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800bab6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800baba:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800babe:	b292      	uxth	r2, r2
 800bac0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800bac4:	e00b      	b.n	800bade <USB_EPStartXfer+0x398>
 800bac6:	0872      	lsrs	r2, r6, #1
 800bac8:	f016 0f01 	tst.w	r6, #1
 800bacc:	d000      	beq.n	800bad0 <USB_EPStartXfer+0x38a>
 800bace:	3201      	adds	r2, #1
 800bad0:	0292      	lsls	r2, r2, #10
 800bad2:	b292      	uxth	r2, r2
 800bad4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800bad8:	e001      	b.n	800bade <USB_EPStartXfer+0x398>
 800bada:	2b01      	cmp	r3, #1
 800badc:	d006      	beq.n	800baec <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bade:	b2b3      	uxth	r3, r6
 800bae0:	8962      	ldrh	r2, [r4, #10]
 800bae2:	6961      	ldr	r1, [r4, #20]
 800bae4:	4628      	mov	r0, r5
 800bae6:	f7ff fe1a 	bl	800b71e <USB_WritePMA>
 800baea:	e6a2      	b.n	800b832 <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800baec:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800baf0:	fa15 f383 	uxtah	r3, r5, r3
 800baf4:	7822      	ldrb	r2, [r4, #0]
 800baf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bafa:	b2b2      	uxth	r2, r6
 800bafc:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800bb00:	e7ed      	b.n	800bade <USB_EPStartXfer+0x398>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bb02:	7821      	ldrb	r1, [r4, #0]
 800bb04:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 800bb08:	b292      	uxth	r2, r2
 800bb0a:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800bb0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800bb12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bb16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bb1a:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bb1e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800bb22:	fa15 f282 	uxtah	r2, r5, r2
 800bb26:	7821      	ldrb	r1, [r4, #0]
 800bb28:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb32:	8922      	ldrh	r2, [r4, #8]
 800bb34:	6961      	ldr	r1, [r4, #20]
 800bb36:	4628      	mov	r0, r5
 800bb38:	f7ff fdf1 	bl	800b71e <USB_WritePMA>
 800bb3c:	e679      	b.n	800b832 <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bb3e:	b98e      	cbnz	r6, 800bb64 <USB_EPStartXfer+0x41e>
 800bb40:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800bb44:	b292      	uxth	r2, r2
 800bb46:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800bb4a:	b292      	uxth	r2, r2
 800bb4c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800bb50:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800bb54:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800bb58:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800bb5c:	b292      	uxth	r2, r2
 800bb5e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800bb62:	e012      	b.n	800bb8a <USB_EPStartXfer+0x444>
 800bb64:	0872      	lsrs	r2, r6, #1
 800bb66:	f016 0f01 	tst.w	r6, #1
 800bb6a:	d000      	beq.n	800bb6e <USB_EPStartXfer+0x428>
 800bb6c:	3201      	adds	r2, #1
 800bb6e:	0292      	lsls	r2, r2, #10
 800bb70:	b292      	uxth	r2, r2
 800bb72:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800bb76:	e008      	b.n	800bb8a <USB_EPStartXfer+0x444>
 800bb78:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800bb7c:	fa15 f282 	uxtah	r2, r5, r2
 800bb80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb84:	b2b2      	uxth	r2, r6
 800bb86:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb8a:	b2b3      	uxth	r3, r6
 800bb8c:	8962      	ldrh	r2, [r4, #10]
 800bb8e:	6961      	ldr	r1, [r4, #20]
 800bb90:	4628      	mov	r0, r5
 800bb92:	f7ff fdc4 	bl	800b71e <USB_WritePMA>
 800bb96:	e64c      	b.n	800b832 <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bb98:	bb8a      	cbnz	r2, 800bbfe <USB_EPStartXfer+0x4b8>
 800bb9a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800bb9e:	fa15 f282 	uxtah	r2, r5, r2
 800bba2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bba6:	2e3e      	cmp	r6, #62	; 0x3e
 800bba8:	d90c      	bls.n	800bbc4 <USB_EPStartXfer+0x47e>
 800bbaa:	0972      	lsrs	r2, r6, #5
 800bbac:	f016 0f1f 	tst.w	r6, #31
 800bbb0:	d100      	bne.n	800bbb4 <USB_EPStartXfer+0x46e>
 800bbb2:	3a01      	subs	r2, #1
 800bbb4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800bbb8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800bbbc:	b292      	uxth	r2, r2
 800bbbe:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800bbc2:	e025      	b.n	800bc10 <USB_EPStartXfer+0x4ca>
 800bbc4:	b98e      	cbnz	r6, 800bbea <USB_EPStartXfer+0x4a4>
 800bbc6:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800bbca:	b292      	uxth	r2, r2
 800bbcc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800bbd0:	b292      	uxth	r2, r2
 800bbd2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800bbd6:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800bbda:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800bbde:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800bbe2:	b292      	uxth	r2, r2
 800bbe4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800bbe8:	e012      	b.n	800bc10 <USB_EPStartXfer+0x4ca>
 800bbea:	0872      	lsrs	r2, r6, #1
 800bbec:	f016 0f01 	tst.w	r6, #1
 800bbf0:	d000      	beq.n	800bbf4 <USB_EPStartXfer+0x4ae>
 800bbf2:	3201      	adds	r2, #1
 800bbf4:	0292      	lsls	r2, r2, #10
 800bbf6:	b292      	uxth	r2, r2
 800bbf8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800bbfc:	e008      	b.n	800bc10 <USB_EPStartXfer+0x4ca>
 800bbfe:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800bc02:	fa15 f282 	uxtah	r2, r5, r2
 800bc06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bc0a:	b2b2      	uxth	r2, r6
 800bc0c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc10:	b2b3      	uxth	r3, r6
 800bc12:	8922      	ldrh	r2, [r4, #8]
 800bc14:	6961      	ldr	r1, [r4, #20]
 800bc16:	4628      	mov	r0, r5
 800bc18:	f7ff fd81 	bl	800b71e <USB_WritePMA>
 800bc1c:	e609      	b.n	800b832 <USB_EPStartXfer+0xec>
        ep->xfer_len = 0U;
 800bc1e:	2200      	movs	r2, #0
 800bc20:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 800bc22:	461a      	mov	r2, r3
 800bc24:	e5a0      	b.n	800b768 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bc26:	b98a      	cbnz	r2, 800bc4c <USB_EPStartXfer+0x506>
 800bc28:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800bc2c:	b292      	uxth	r2, r2
 800bc2e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800bc32:	b292      	uxth	r2, r2
 800bc34:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800bc38:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800bc3c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800bc40:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800bc44:	b292      	uxth	r2, r2
 800bc46:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800bc4a:	e5a3      	b.n	800b794 <USB_EPStartXfer+0x4e>
 800bc4c:	0851      	lsrs	r1, r2, #1
 800bc4e:	f012 0f01 	tst.w	r2, #1
 800bc52:	d000      	beq.n	800bc56 <USB_EPStartXfer+0x510>
 800bc54:	3101      	adds	r1, #1
 800bc56:	0289      	lsls	r1, r1, #10
 800bc58:	b289      	uxth	r1, r1
 800bc5a:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 800bc5e:	e599      	b.n	800b794 <USB_EPStartXfer+0x4e>
      if (ep->type == EP_TYPE_BULK)
 800bc60:	78cb      	ldrb	r3, [r1, #3]
 800bc62:	2b02      	cmp	r3, #2
 800bc64:	d03b      	beq.n	800bcde <USB_EPStartXfer+0x598>
      else if (ep->type == EP_TYPE_ISOC)
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	f040 811b 	bne.w	800bea2 <USB_EPStartXfer+0x75c>
        if (ep->xfer_len > ep->maxpacket)
 800bc6c:	6989      	ldr	r1, [r1, #24]
 800bc6e:	6923      	ldr	r3, [r4, #16]
 800bc70:	4299      	cmp	r1, r3
 800bc72:	f240 80ca 	bls.w	800be0a <USB_EPStartXfer+0x6c4>
          ep->xfer_len -= len;
 800bc76:	1ac9      	subs	r1, r1, r3
 800bc78:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bc7a:	b9aa      	cbnz	r2, 800bca8 <USB_EPStartXfer+0x562>
 800bc7c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800bc80:	fa15 f282 	uxtah	r2, r5, r2
 800bc84:	7821      	ldrb	r1, [r4, #0]
 800bc86:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bc8a:	2b3e      	cmp	r3, #62	; 0x3e
 800bc8c:	f240 80c1 	bls.w	800be12 <USB_EPStartXfer+0x6cc>
 800bc90:	0959      	lsrs	r1, r3, #5
 800bc92:	f013 0f1f 	tst.w	r3, #31
 800bc96:	d100      	bne.n	800bc9a <USB_EPStartXfer+0x554>
 800bc98:	3901      	subs	r1, #1
 800bc9a:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800bc9e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800bca2:	b289      	uxth	r1, r1
 800bca4:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800bca8:	7862      	ldrb	r2, [r4, #1]
 800bcaa:	2a00      	cmp	r2, #0
 800bcac:	f040 80eb 	bne.w	800be86 <USB_EPStartXfer+0x740>
 800bcb0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800bcb4:	fa15 f282 	uxtah	r2, r5, r2
 800bcb8:	7821      	ldrb	r1, [r4, #0]
 800bcba:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bcbe:	2b3e      	cmp	r3, #62	; 0x3e
 800bcc0:	f240 80c4 	bls.w	800be4c <USB_EPStartXfer+0x706>
 800bcc4:	0959      	lsrs	r1, r3, #5
 800bcc6:	f013 0f1f 	tst.w	r3, #31
 800bcca:	d100      	bne.n	800bcce <USB_EPStartXfer+0x588>
 800bccc:	3901      	subs	r1, #1
 800bcce:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 800bcd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800bcdc:	e55a      	b.n	800b794 <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bcde:	b9aa      	cbnz	r2, 800bd0c <USB_EPStartXfer+0x5c6>
 800bce0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800bce4:	fa10 f383 	uxtah	r3, r0, r3
 800bce8:	780a      	ldrb	r2, [r1, #0]
 800bcea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcee:	6909      	ldr	r1, [r1, #16]
 800bcf0:	293e      	cmp	r1, #62	; 0x3e
 800bcf2:	d925      	bls.n	800bd40 <USB_EPStartXfer+0x5fa>
 800bcf4:	094a      	lsrs	r2, r1, #5
 800bcf6:	f011 0f1f 	tst.w	r1, #31
 800bcfa:	d100      	bne.n	800bcfe <USB_EPStartXfer+0x5b8>
 800bcfc:	3a01      	subs	r2, #1
 800bcfe:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800bd02:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800bd06:	b292      	uxth	r2, r2
 800bd08:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800bd0c:	7863      	ldrb	r3, [r4, #1]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d150      	bne.n	800bdb4 <USB_EPStartXfer+0x66e>
 800bd12:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800bd16:	fa15 f383 	uxtah	r3, r5, r3
 800bd1a:	7822      	ldrb	r2, [r4, #0]
 800bd1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd20:	6921      	ldr	r1, [r4, #16]
 800bd22:	293e      	cmp	r1, #62	; 0x3e
 800bd24:	d929      	bls.n	800bd7a <USB_EPStartXfer+0x634>
 800bd26:	094a      	lsrs	r2, r1, #5
 800bd28:	f011 0f1f 	tst.w	r1, #31
 800bd2c:	d100      	bne.n	800bd30 <USB_EPStartXfer+0x5ea>
 800bd2e:	3a01      	subs	r2, #1
 800bd30:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800bd34:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800bd38:	b292      	uxth	r2, r2
 800bd3a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800bd3e:	e03b      	b.n	800bdb8 <USB_EPStartXfer+0x672>
 800bd40:	b989      	cbnz	r1, 800bd66 <USB_EPStartXfer+0x620>
 800bd42:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800bd46:	b292      	uxth	r2, r2
 800bd48:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800bd4c:	b292      	uxth	r2, r2
 800bd4e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800bd52:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800bd56:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800bd5a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800bd5e:	b292      	uxth	r2, r2
 800bd60:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800bd64:	e7d2      	b.n	800bd0c <USB_EPStartXfer+0x5c6>
 800bd66:	084a      	lsrs	r2, r1, #1
 800bd68:	f011 0f01 	tst.w	r1, #1
 800bd6c:	d000      	beq.n	800bd70 <USB_EPStartXfer+0x62a>
 800bd6e:	3201      	adds	r2, #1
 800bd70:	0292      	lsls	r2, r2, #10
 800bd72:	b292      	uxth	r2, r2
 800bd74:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800bd78:	e7c8      	b.n	800bd0c <USB_EPStartXfer+0x5c6>
 800bd7a:	b989      	cbnz	r1, 800bda0 <USB_EPStartXfer+0x65a>
 800bd7c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800bd80:	b292      	uxth	r2, r2
 800bd82:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800bd86:	b292      	uxth	r2, r2
 800bd88:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800bd8c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800bd90:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800bd94:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800bd98:	b292      	uxth	r2, r2
 800bd9a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800bd9e:	e00b      	b.n	800bdb8 <USB_EPStartXfer+0x672>
 800bda0:	084a      	lsrs	r2, r1, #1
 800bda2:	f011 0f01 	tst.w	r1, #1
 800bda6:	d000      	beq.n	800bdaa <USB_EPStartXfer+0x664>
 800bda8:	3201      	adds	r2, #1
 800bdaa:	0292      	lsls	r2, r2, #10
 800bdac:	b292      	uxth	r2, r2
 800bdae:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800bdb2:	e001      	b.n	800bdb8 <USB_EPStartXfer+0x672>
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d01d      	beq.n	800bdf4 <USB_EPStartXfer+0x6ae>
        if (ep->xfer_count != 0U)
 800bdb8:	69e3      	ldr	r3, [r4, #28]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f43f acea 	beq.w	800b794 <USB_EPStartXfer+0x4e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bdc0:	7822      	ldrb	r2, [r4, #0]
 800bdc2:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bdc6:	f244 0340 	movw	r3, #16448	; 0x4040
 800bdca:	ea03 0001 	and.w	r0, r3, r1
 800bdce:	438b      	bics	r3, r1
 800bdd0:	d002      	beq.n	800bdd8 <USB_EPStartXfer+0x692>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	f47f acde 	bne.w	800b794 <USB_EPStartXfer+0x4e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800bdd8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bde2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bde6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bdee:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800bdf2:	e4cf      	b.n	800b794 <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bdf4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800bdf8:	fa15 f383 	uxtah	r3, r5, r3
 800bdfc:	7822      	ldrb	r2, [r4, #0]
 800bdfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be02:	8a22      	ldrh	r2, [r4, #16]
 800be04:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800be08:	e7d6      	b.n	800bdb8 <USB_EPStartXfer+0x672>
          ep->xfer_len = 0U;
 800be0a:	2300      	movs	r3, #0
 800be0c:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 800be0e:	460b      	mov	r3, r1
 800be10:	e733      	b.n	800bc7a <USB_EPStartXfer+0x534>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800be12:	b98b      	cbnz	r3, 800be38 <USB_EPStartXfer+0x6f2>
 800be14:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 800be18:	b289      	uxth	r1, r1
 800be1a:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800be1e:	b289      	uxth	r1, r1
 800be20:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800be24:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 800be28:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800be2c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800be30:	b289      	uxth	r1, r1
 800be32:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800be36:	e737      	b.n	800bca8 <USB_EPStartXfer+0x562>
 800be38:	0859      	lsrs	r1, r3, #1
 800be3a:	f013 0f01 	tst.w	r3, #1
 800be3e:	d000      	beq.n	800be42 <USB_EPStartXfer+0x6fc>
 800be40:	3101      	adds	r1, #1
 800be42:	0289      	lsls	r1, r1, #10
 800be44:	b289      	uxth	r1, r1
 800be46:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800be4a:	e72d      	b.n	800bca8 <USB_EPStartXfer+0x562>
 800be4c:	b98b      	cbnz	r3, 800be72 <USB_EPStartXfer+0x72c>
 800be4e:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 800be52:	b29b      	uxth	r3, r3
 800be54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800be58:	b29b      	uxth	r3, r3
 800be5a:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800be5e:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 800be62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800be70:	e490      	b.n	800b794 <USB_EPStartXfer+0x4e>
 800be72:	0859      	lsrs	r1, r3, #1
 800be74:	f013 0f01 	tst.w	r3, #1
 800be78:	d000      	beq.n	800be7c <USB_EPStartXfer+0x736>
 800be7a:	3101      	adds	r1, #1
 800be7c:	028b      	lsls	r3, r1, #10
 800be7e:	b29b      	uxth	r3, r3
 800be80:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800be84:	e486      	b.n	800b794 <USB_EPStartXfer+0x4e>
 800be86:	2a01      	cmp	r2, #1
 800be88:	f47f ac84 	bne.w	800b794 <USB_EPStartXfer+0x4e>
 800be8c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800be90:	fa15 f282 	uxtah	r2, r5, r2
 800be94:	7821      	ldrb	r1, [r4, #0]
 800be96:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800bea0:	e478      	b.n	800b794 <USB_EPStartXfer+0x4e>
        return HAL_ERROR;
 800bea2:	2001      	movs	r0, #1
 800bea4:	e487      	b.n	800b7b6 <USB_EPStartXfer+0x70>

0800bea6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bea6:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bea8:	085c      	lsrs	r4, r3, #1
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800beaa:	4410      	add	r0, r2
 800beac:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800beb0:	e007      	b.n	800bec2 <USB_ReadPMA+0x1c>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800beb2:	f830 2b02 	ldrh.w	r2, [r0], #2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800beb6:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800beb8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800bebc:	704a      	strb	r2, [r1, #1]
    pBuf++;
 800bebe:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800bec0:	3c01      	subs	r4, #1
 800bec2:	2c00      	cmp	r4, #0
 800bec4:	d1f5      	bne.n	800beb2 <USB_ReadPMA+0xc>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bec6:	f013 0f01 	tst.w	r3, #1
 800beca:	d001      	beq.n	800bed0 <USB_ReadPMA+0x2a>
  {
    temp = *pdwVal;
 800becc:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bece:	700b      	strb	r3, [r1, #0]
  }
}
 800bed0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bed4:	4770      	bx	lr
	...

0800bed8 <LCD_IO_Init>:
/*!
 * @brief Nizkonivojska inicializacija zaslona
 * @internal
 */
static void LCD_IO_Init()
{
 800bed8:	b538      	push	{r3, r4, r5, lr}
	LCD_RST_LOW();
 800beda:	4c05      	ldr	r4, [pc, #20]	; (800bef0 <LCD_IO_Init+0x18>)
 800bedc:	2508      	movs	r5, #8
 800bede:	62a5      	str	r5, [r4, #40]	; 0x28
	HAL_Delay(120);
 800bee0:	2078      	movs	r0, #120	; 0x78
 800bee2:	f7f9 fd1b 	bl	800591c <HAL_Delay>
	LCD_RST_HIGH();
 800bee6:	61a5      	str	r5, [r4, #24]
	HAL_Delay(120);
 800bee8:	2078      	movs	r0, #120	; 0x78
 800beea:	f7f9 fd17 	bl	800591c <HAL_Delay>
}
 800beee:	bd38      	pop	{r3, r4, r5, pc}
 800bef0:	48000c00 	.word	0x48000c00

0800bef4 <LCD_SetBacklight>:
 * @param state logična vrednost
 */

void LCD_SetBacklight(uint8_t state)
{
	if (state == 1)
 800bef4:	2801      	cmp	r0, #1
 800bef6:	d003      	beq.n	800bf00 <LCD_SetBacklight+0xc>
		LCD_BCKL_ON();
	else
		LCD_BCKL_OFF();
 800bef8:	4b03      	ldr	r3, [pc, #12]	; (800bf08 <LCD_SetBacklight+0x14>)
 800befa:	2240      	movs	r2, #64	; 0x40
 800befc:	629a      	str	r2, [r3, #40]	; 0x28
}
 800befe:	4770      	bx	lr
		LCD_BCKL_ON();
 800bf00:	4b01      	ldr	r3, [pc, #4]	; (800bf08 <LCD_SetBacklight+0x14>)
 800bf02:	2240      	movs	r2, #64	; 0x40
 800bf04:	619a      	str	r2, [r3, #24]
 800bf06:	4770      	bx	lr
 800bf08:	48000400 	.word	0x48000400

0800bf0c <LCD_FillRect>:
 *
 * Funkcija izbere želeno območje, potem pa tolikokrat pošlje izbrano barvo,
 * kolikor slikovnih točk je potrebnih.
 */
void LCD_FillRect(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint16_t c)
{
 800bf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf10:	4607      	mov	r7, r0
 800bf12:	4688      	mov	r8, r1
 800bf14:	4615      	mov	r5, r2
 800bf16:	461e      	mov	r6, r3
	uint32_t max_count   = ILI9341_GetParam(LCD_AREA);     /* Št. vseh pikslov     */
 800bf18:	2002      	movs	r0, #2
 800bf1a:	f000 f967 	bl	800c1ec <ILI9341_GetParam>
 800bf1e:	4604      	mov	r4, r0
	uint32_t pixel_count = w*h;  /* Dejansko št. pikslov */
 800bf20:	fb06 f305 	mul.w	r3, r6, r5

	if(pixel_count > max_count)
 800bf24:	4298      	cmp	r0, r3
 800bf26:	d300      	bcc.n	800bf2a <LCD_FillRect+0x1e>
	uint32_t pixel_count = w*h;  /* Dejansko št. pikslov */
 800bf28:	461c      	mov	r4, r3
		pixel_count = max_count;

	// Izbor koordinat piksla
	ILI9341_SetDisplayWindow(x, y, w, h);
 800bf2a:	4633      	mov	r3, r6
 800bf2c:	462a      	mov	r2, r5
 800bf2e:	4641      	mov	r1, r8
 800bf30:	4638      	mov	r0, r7
 800bf32:	f000 f87d 	bl	800c030 <ILI9341_SetDisplayWindow>

#ifdef ILI9341_USEDMA
	ILI9341_SendRepeatedDataDMA(c, pixel_count);
 800bf36:	4621      	mov	r1, r4
 800bf38:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800bf3c:	f000 f910 	bl	800c160 <ILI9341_SendRepeatedDataDMA>
#else
	ILI9341_SendRepeatedData(c, pixel_count);
#endif

}
 800bf40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bf44 <LCD_ClearScreen>:

/*!
 * @brief Počisti zaslon (prebarvaj s črno barvo)
 */
void LCD_ClearScreen()
{
 800bf44:	b510      	push	{r4, lr}
 800bf46:	b082      	sub	sp, #8
    LCD_FillRect(0, 0, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT), 0);
 800bf48:	2000      	movs	r0, #0
 800bf4a:	f000 f94f 	bl	800c1ec <ILI9341_GetParam>
 800bf4e:	4604      	mov	r4, r0
 800bf50:	2001      	movs	r0, #1
 800bf52:	f000 f94b 	bl	800c1ec <ILI9341_GetParam>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2000      	movs	r0, #0
 800bf5a:	9000      	str	r0, [sp, #0]
 800bf5c:	4622      	mov	r2, r4
 800bf5e:	4601      	mov	r1, r0
 800bf60:	f7ff ffd4 	bl	800bf0c <LCD_FillRect>
}
 800bf64:	b002      	add	sp, #8
 800bf66:	bd10      	pop	{r4, pc}

0800bf68 <LCD_Init>:
{
 800bf68:	b508      	push	{r3, lr}
	LCD_IO_Init();
 800bf6a:	f7ff ffb5 	bl	800bed8 <LCD_IO_Init>
	ILI9341_Init(ILI9341_COLORSPACE_RBG565, ILI9341_MISKO_ROTATE_0);
 800bf6e:	2103      	movs	r1, #3
 800bf70:	2055      	movs	r0, #85	; 0x55
 800bf72:	f000 f8ab 	bl	800c0cc <ILI9341_Init>
	ILI9341_DisplayOn();
 800bf76:	f000 f92d 	bl	800c1d4 <ILI9341_DisplayOn>
	LCD_ClearScreen();
 800bf7a:	f7ff ffe3 	bl	800bf44 <LCD_ClearScreen>
	ILI9341_WaitTransfer();
 800bf7e:	f000 f815 	bl	800bfac <ILI9341_WaitTransfer>
	LCD_SetBacklight(1);
 800bf82:	2001      	movs	r0, #1
 800bf84:	f7ff ffb6 	bl	800bef4 <LCD_SetBacklight>
}
 800bf88:	bd08      	pop	{r3, pc}
	...

0800bf8c <ILI9341_SendData>:
 */
void ILI9341_SendData(LCD_IO_Data_t *data, uint32_t length)
{
	uint8_t increment = LCD_IO_DATA_WRITE_CYCLES;

	for (uint32_t i = 0; i < (length/increment); i += increment)
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	e007      	b.n	800bfa0 <ILI9341_SendData+0x14>
		FMC_BANK1_WriteData(data[i]);
 800bf90:	f830 c013 	ldrh.w	ip, [r0, r3, lsl #1]
	*(LCD_IO_Data_t *)(FMC_BANK1_MEM) = data;
 800bf94:	4a04      	ldr	r2, [pc, #16]	; (800bfa8 <ILI9341_SendData+0x1c>)
 800bf96:	f8a2 c000 	strh.w	ip, [r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800bf9a:	f3bf 8f4f 	dsb	sy
	for (uint32_t i = 0; i < (length/increment); i += increment)
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	428b      	cmp	r3, r1
 800bfa2:	d3f5      	bcc.n	800bf90 <ILI9341_SendData+0x4>
}
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	60010000 	.word	0x60010000

0800bfac <ILI9341_WaitTransfer>:
#endif
}

//! @brief Počakaj na prenos podatka FSMC->Ili9341.
void ILI9341_WaitTransfer()
{
 800bfac:	b508      	push	{r3, lr}
#ifdef ILI9341_USEDMA
	while (HAL_DMA_GetState(&hLCDDMA) != HAL_DMA_STATE_READY);
 800bfae:	4803      	ldr	r0, [pc, #12]	; (800bfbc <ILI9341_WaitTransfer+0x10>)
 800bfb0:	f7fa fee5 	bl	8006d7e <HAL_DMA_GetState>
 800bfb4:	2801      	cmp	r0, #1
 800bfb6:	d1fa      	bne.n	800bfae <ILI9341_WaitTransfer+0x2>
#endif
}
 800bfb8:	bd08      	pop	{r3, pc}
 800bfba:	bf00      	nop
 800bfbc:	200017e4 	.word	0x200017e4

0800bfc0 <ILI9341_SetAddress>:
{
 800bfc0:	b510      	push	{r4, lr}
 800bfc2:	4604      	mov	r4, r0
	ILI9341_WaitTransfer();
 800bfc4:	f7ff fff2 	bl	800bfac <ILI9341_WaitTransfer>
	FMC_BANK1_SetAddress(*address);
 800bfc8:	8822      	ldrh	r2, [r4, #0]
	*(LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 800bfca:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800bfce:	801a      	strh	r2, [r3, #0]
 800bfd0:	f3bf 8f4f 	dsb	sy
}
 800bfd4:	bd10      	pop	{r4, pc}
	...

0800bfd8 <ILI9341_SetOrientation>:
{
 800bfd8:	b510      	push	{r4, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	4604      	mov	r4, r0
	ILI9341_Data_t command   = ILI9341_MAC; /* Memory Access Control */
 800bfde:	2336      	movs	r3, #54	; 0x36
 800bfe0:	f8ad 3006 	strh.w	r3, [sp, #6]
	ILI9341_Data_t parameter = (ILI9341_Data_t)orientations[orientation];
 800bfe4:	4b10      	ldr	r3, [pc, #64]	; (800c028 <ILI9341_SetOrientation+0x50>)
 800bfe6:	f833 3020 	ldrh.w	r3, [r3, r0, lsl #2]
 800bfea:	f8ad 3004 	strh.w	r3, [sp, #4]
	ILI9341_SetAddress(&command);
 800bfee:	f10d 0006 	add.w	r0, sp, #6
 800bff2:	f7ff ffe5 	bl	800bfc0 <ILI9341_SetAddress>
	ILI9341_SendData(&parameter, 1);
 800bff6:	2101      	movs	r1, #1
 800bff8:	a801      	add	r0, sp, #4
 800bffa:	f7ff ffc7 	bl	800bf8c <ILI9341_SendData>
	switch (orientation) {
 800bffe:	b144      	cbz	r4, 800c012 <ILI9341_SetOrientation+0x3a>
 800c000:	2c03      	cmp	r4, #3
 800c002:	d006      	beq.n	800c012 <ILI9341_SetOrientation+0x3a>
		LCD.width  = ILI9341_WIDTH;
 800c004:	4b09      	ldr	r3, [pc, #36]	; (800c02c <ILI9341_SetOrientation+0x54>)
 800c006:	22f0      	movs	r2, #240	; 0xf0
 800c008:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_HEIGHT;
 800c00a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c00e:	605a      	str	r2, [r3, #4]
		break;
 800c010:	e005      	b.n	800c01e <ILI9341_SetOrientation+0x46>
		LCD.width  = ILI9341_HEIGHT;
 800c012:	4b06      	ldr	r3, [pc, #24]	; (800c02c <ILI9341_SetOrientation+0x54>)
 800c014:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c018:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_WIDTH;
 800c01a:	22f0      	movs	r2, #240	; 0xf0
 800c01c:	605a      	str	r2, [r3, #4]
	LCD.orientation = orientation;
 800c01e:	4b03      	ldr	r3, [pc, #12]	; (800c02c <ILI9341_SetOrientation+0x54>)
 800c020:	609c      	str	r4, [r3, #8]
}
 800c022:	b002      	add	sp, #8
 800c024:	bd10      	pop	{r4, pc}
 800c026:	bf00      	nop
 800c028:	08013418 	.word	0x08013418
 800c02c:	200125a0 	.word	0x200125a0

0800c030 <ILI9341_SetDisplayWindow>:
{
 800c030:	b530      	push	{r4, r5, lr}
 800c032:	b085      	sub	sp, #20
 800c034:	460c      	mov	r4, r1
 800c036:	461d      	mov	r5, r3
	command = ILI9341_CASET;
 800c038:	232a      	movs	r3, #42	; 0x2a
 800c03a:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = (ILI9341_Data_t)(Xpos >> 8U);
 800c03e:	f3c0 230f 	ubfx	r3, r0, #8, #16
 800c042:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter[1] = (ILI9341_Data_t)(Xpos & 0xFFU);
 800c046:	b2c3      	uxtb	r3, r0
 800c048:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter[2] = (ILI9341_Data_t)((Xpos + Width - 1U) >> 8U);
 800c04c:	1883      	adds	r3, r0, r2
 800c04e:	3b01      	subs	r3, #1
 800c050:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800c054:	f8ad 3008 	strh.w	r3, [sp, #8]
	parameter[3] = (ILI9341_Data_t)((Xpos + Width - 1U) & 0xFFU);
 800c058:	fa12 f080 	uxtah	r0, r2, r0
 800c05c:	b280      	uxth	r0, r0
 800c05e:	3801      	subs	r0, #1
 800c060:	b2c0      	uxtb	r0, r0
 800c062:	f8ad 000a 	strh.w	r0, [sp, #10]
	ILI9341_SetAddress(&command);
 800c066:	f10d 000e 	add.w	r0, sp, #14
 800c06a:	f7ff ffa9 	bl	800bfc0 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 800c06e:	2104      	movs	r1, #4
 800c070:	eb0d 0001 	add.w	r0, sp, r1
 800c074:	f7ff ff8a 	bl	800bf8c <ILI9341_SendData>
	command = ILI9341_RASET;
 800c078:	232b      	movs	r3, #43	; 0x2b
 800c07a:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter [0] = (ILI9341_Data_t)(Ypos >> 8U);
 800c07e:	f3c4 230f 	ubfx	r3, r4, #8, #16
 800c082:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter [1] = (ILI9341_Data_t)(Ypos & 0xFFU);
 800c086:	b2e3      	uxtb	r3, r4
 800c088:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter [2] = (ILI9341_Data_t)((Ypos + Height - 1U) >> 8U);
 800c08c:	1962      	adds	r2, r4, r5
 800c08e:	3a01      	subs	r2, #1
 800c090:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800c094:	f8ad 2008 	strh.w	r2, [sp, #8]
	parameter [3] = (ILI9341_Data_t)((Ypos + Height - 1U) & 0xFFU);
 800c098:	fa15 f484 	uxtah	r4, r5, r4
 800c09c:	b2a4      	uxth	r4, r4
 800c09e:	3c01      	subs	r4, #1
 800c0a0:	b2e4      	uxtb	r4, r4
 800c0a2:	f8ad 400a 	strh.w	r4, [sp, #10]
	ILI9341_SetAddress(&command);
 800c0a6:	f10d 000e 	add.w	r0, sp, #14
 800c0aa:	f7ff ff89 	bl	800bfc0 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 800c0ae:	2104      	movs	r1, #4
 800c0b0:	eb0d 0001 	add.w	r0, sp, r1
 800c0b4:	f7ff ff6a 	bl	800bf8c <ILI9341_SendData>
	command = ILI9341_GRAM;
 800c0b8:	232c      	movs	r3, #44	; 0x2c
 800c0ba:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 800c0be:	f10d 000e 	add.w	r0, sp, #14
 800c0c2:	f7ff ff7d 	bl	800bfc0 <ILI9341_SetAddress>
}
 800c0c6:	b005      	add	sp, #20
 800c0c8:	bd30      	pop	{r4, r5, pc}
	...

0800c0cc <ILI9341_Init>:
{
 800c0cc:	b510      	push	{r4, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	4604      	mov	r4, r0
	ILI9341_SetOrientation(orientation);
 800c0d2:	4608      	mov	r0, r1
 800c0d4:	f7ff ff80 	bl	800bfd8 <ILI9341_SetOrientation>
	ILI9341_SetDisplayWindow(0U, 0U, LCD.width, LCD.height);
 800c0d8:	4a20      	ldr	r2, [pc, #128]	; (800c15c <ILI9341_Init+0x90>)
 800c0da:	6853      	ldr	r3, [r2, #4]
 800c0dc:	6812      	ldr	r2, [r2, #0]
 800c0de:	2100      	movs	r1, #0
 800c0e0:	4608      	mov	r0, r1
 800c0e2:	f7ff ffa5 	bl	800c030 <ILI9341_SetDisplayWindow>
	command = ILI9341_SLEEP_OUT;
 800c0e6:	2311      	movs	r3, #17
 800c0e8:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 800c0ec:	f10d 000e 	add.w	r0, sp, #14
 800c0f0:	f7ff ff66 	bl	800bfc0 <ILI9341_SetAddress>
	HAL_Delay(200);
 800c0f4:	20c8      	movs	r0, #200	; 0xc8
 800c0f6:	f7f9 fc11 	bl	800591c <HAL_Delay>
	command = ILI9341_NORMAL_MODE_ON;
 800c0fa:	2313      	movs	r3, #19
 800c0fc:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 800c100:	f10d 000e 	add.w	r0, sp, #14
 800c104:	f7ff ff5c 	bl	800bfc0 <ILI9341_SetAddress>
	HAL_Delay(100);
 800c108:	2064      	movs	r0, #100	; 0x64
 800c10a:	f7f9 fc07 	bl	800591c <HAL_Delay>
	command = ILI9341_PIXEL_FORMAT;
 800c10e:	233a      	movs	r3, #58	; 0x3a
 800c110:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = color_space;
 800c114:	f8ad 4004 	strh.w	r4, [sp, #4]
	ILI9341_SetAddress(&command);
 800c118:	f10d 000e 	add.w	r0, sp, #14
 800c11c:	f7ff ff50 	bl	800bfc0 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 1);
 800c120:	2101      	movs	r1, #1
 800c122:	a801      	add	r0, sp, #4
 800c124:	f7ff ff32 	bl	800bf8c <ILI9341_SendData>
	HAL_Delay(100);
 800c128:	2064      	movs	r0, #100	; 0x64
 800c12a:	f7f9 fbf7 	bl	800591c <HAL_Delay>
	command = ILI9341_INTERFACE;
 800c12e:	23f6      	movs	r3, #246	; 0xf6
 800c130:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = 0x49;
 800c134:	2349      	movs	r3, #73	; 0x49
 800c136:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter[1] = 0;
 800c13a:	2300      	movs	r3, #0
 800c13c:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter[2] = 0x20;
 800c140:	2320      	movs	r3, #32
 800c142:	f8ad 3008 	strh.w	r3, [sp, #8]
	ILI9341_SetAddress(&command);
 800c146:	f10d 000e 	add.w	r0, sp, #14
 800c14a:	f7ff ff39 	bl	800bfc0 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 3);
 800c14e:	2103      	movs	r1, #3
 800c150:	a801      	add	r0, sp, #4
 800c152:	f7ff ff1b 	bl	800bf8c <ILI9341_SendData>
}
 800c156:	b004      	add	sp, #16
 800c158:	bd10      	pop	{r4, pc}
 800c15a:	bf00      	nop
 800c15c:	200125a0 	.word	0x200125a0

0800c160 <ILI9341_SendRepeatedDataDMA>:
{
 800c160:	b530      	push	{r4, r5, lr}
 800c162:	b083      	sub	sp, #12
 800c164:	460c      	mov	r4, r1
 800c166:	f8ad 0006 	strh.w	r0, [sp, #6]
	switch (hLCDDMA.Init.PeriphDataAlignment)
 800c16a:	4b18      	ldr	r3, [pc, #96]	; (800c1cc <ILI9341_SendRepeatedDataDMA+0x6c>)
 800c16c:	695b      	ldr	r3, [r3, #20]
 800c16e:	b17b      	cbz	r3, 800c190 <ILI9341_SendRepeatedDataDMA+0x30>
 800c170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c174:	d100      	bne.n	800c178 <ILI9341_SendRepeatedDataDMA+0x18>
			len = (num_copies / (2*LCD_IO_DATA_WRITE_CYCLES));
 800c176:	084c      	lsrs	r4, r1, #1
	ILI9341_WaitTransfer();
 800c178:	f7ff ff18 	bl	800bfac <ILI9341_WaitTransfer>
	HAL_DMA_DeInit(&hLCDDMA);
 800c17c:	4d13      	ldr	r5, [pc, #76]	; (800c1cc <ILI9341_SendRepeatedDataDMA+0x6c>)
 800c17e:	4628      	mov	r0, r5
 800c180:	f7fa fcb6 	bl	8006af0 <HAL_DMA_DeInit>
	hLCDDMA.Init.PeriphInc = DMA_PINC_DISABLE;	// dont increment source address
 800c184:	2300      	movs	r3, #0
 800c186:	60eb      	str	r3, [r5, #12]
	HAL_DMA_Init(&hLCDDMA);
 800c188:	4628      	mov	r0, r5
 800c18a:	f7fa fc45 	bl	8006a18 <HAL_DMA_Init>
 800c18e:	e00e      	b.n	800c1ae <ILI9341_SendRepeatedDataDMA+0x4e>
			len = 2*num_copies/LCD_IO_DATA_WRITE_CYCLES;
 800c190:	004c      	lsls	r4, r1, #1
			break;
 800c192:	e7f1      	b.n	800c178 <ILI9341_SendRepeatedDataDMA+0x18>
			len -= 65535;
 800c194:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
 800c198:	3cff      	subs	r4, #255	; 0xff
			transfer = 65535;
 800c19a:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t) &data, (uint32_t)FMC_BANK1_MEM, transfer) != HAL_OK) return 1;
 800c19e:	4a0c      	ldr	r2, [pc, #48]	; (800c1d0 <ILI9341_SendRepeatedDataDMA+0x70>)
 800c1a0:	f10d 0106 	add.w	r1, sp, #6
 800c1a4:	4809      	ldr	r0, [pc, #36]	; (800c1cc <ILI9341_SendRepeatedDataDMA+0x6c>)
 800c1a6:	f7fa fcff 	bl	8006ba8 <HAL_DMA_Start_IT>
 800c1aa:	b960      	cbnz	r0, 800c1c6 <ILI9341_SendRepeatedDataDMA+0x66>
	while (len);
 800c1ac:	b134      	cbz	r4, 800c1bc <ILI9341_SendRepeatedDataDMA+0x5c>
		ILI9341_WaitTransfer();
 800c1ae:	f7ff fefd 	bl	800bfac <ILI9341_WaitTransfer>
		if (len > 65535)
 800c1b2:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800c1b6:	d2ed      	bcs.n	800c194 <ILI9341_SendRepeatedDataDMA+0x34>
		if (transfer == 0) return 1;
 800c1b8:	b914      	cbnz	r4, 800c1c0 <ILI9341_SendRepeatedDataDMA+0x60>
 800c1ba:	2001      	movs	r0, #1
}
 800c1bc:	b003      	add	sp, #12
 800c1be:	bd30      	pop	{r4, r5, pc}
			transfer = len;
 800c1c0:	4623      	mov	r3, r4
			len = 0;
 800c1c2:	2400      	movs	r4, #0
 800c1c4:	e7eb      	b.n	800c19e <ILI9341_SendRepeatedDataDMA+0x3e>
		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t) &data, (uint32_t)FMC_BANK1_MEM, transfer) != HAL_OK) return 1;
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	e7f8      	b.n	800c1bc <ILI9341_SendRepeatedDataDMA+0x5c>
 800c1ca:	bf00      	nop
 800c1cc:	200017e4 	.word	0x200017e4
 800c1d0:	60010000 	.word	0x60010000

0800c1d4 <ILI9341_DisplayOn>:

//! @brief Strojno omogoči zaslon
void ILI9341_DisplayOn()
{
 800c1d4:	b500      	push	{lr}
 800c1d6:	b083      	sub	sp, #12
	ILI9341_Data_t command = ILI9341_DISPLAY_ON;
 800c1d8:	2329      	movs	r3, #41	; 0x29
 800c1da:	f8ad 3006 	strh.w	r3, [sp, #6]
	ILI9341_SetAddress(&command);
 800c1de:	f10d 0006 	add.w	r0, sp, #6
 800c1e2:	f7ff feed 	bl	800bfc0 <ILI9341_SetAddress>
}
 800c1e6:	b003      	add	sp, #12
 800c1e8:	f85d fb04 	ldr.w	pc, [sp], #4

0800c1ec <ILI9341_GetParam>:
 */
uint32_t ILI9341_GetParam(LCD_Param_t param)
{
	uint32_t value = 0;

	switch (param) {
 800c1ec:	2803      	cmp	r0, #3
 800c1ee:	d803      	bhi.n	800c1f8 <ILI9341_GetParam+0xc>
 800c1f0:	e8df f000 	tbb	[pc, r0]
 800c1f4:	0a0d0704 	.word	0x0a0d0704
 800c1f8:	2000      	movs	r0, #0
 800c1fa:	4770      	bx	lr
	case LCD_WIDTH:
		value = LCD.width;
 800c1fc:	4b05      	ldr	r3, [pc, #20]	; (800c214 <ILI9341_GetParam+0x28>)
 800c1fe:	6818      	ldr	r0, [r3, #0]
		break;
 800c200:	4770      	bx	lr
	case LCD_HEIGHT:
		value = LCD.height;
 800c202:	4b04      	ldr	r3, [pc, #16]	; (800c214 <ILI9341_GetParam+0x28>)
 800c204:	6858      	ldr	r0, [r3, #4]
		break;
 800c206:	4770      	bx	lr
	case LCD_AREA:
		value = ILI9341_AREA;
		break;
	case LCD_ORIENTATION:
		value = LCD.orientation;
 800c208:	4b02      	ldr	r3, [pc, #8]	; (800c214 <ILI9341_GetParam+0x28>)
 800c20a:	6898      	ldr	r0, [r3, #8]
		break;
 800c20c:	4770      	bx	lr
		value = ILI9341_AREA;
 800c20e:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
	default:
		break;
	}

	return value;
}
 800c212:	4770      	bx	lr
 800c214:	200125a0 	.word	0x200125a0

0800c218 <UserPixelSetFunction>:


#include "lcd_ugui.h"

void UserPixelSetFunction(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 800c218:	b500      	push	{lr}
 800c21a:	b083      	sub	sp, #12
 800c21c:	f8ad 2006 	strh.w	r2, [sp, #6]
	ILI9341_SetDisplayWindow(x, y, 1, 1);
 800c220:	2301      	movs	r3, #1
 800c222:	461a      	mov	r2, r3
 800c224:	f7ff ff04 	bl	800c030 <ILI9341_SetDisplayWindow>
	ILI9341_SendData((LCD_IO_Data_t *)&c, 1);
 800c228:	2101      	movs	r1, #1
 800c22a:	f10d 0006 	add.w	r0, sp, #6
 800c22e:	f7ff fead 	bl	800bf8c <ILI9341_SendData>
}
 800c232:	b003      	add	sp, #12
 800c234:	f85d fb04 	ldr.w	pc, [sp], #4

0800c238 <_HW_FillFrame_>:

UG_RESULT _HW_FillFrame_(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 800c238:	b510      	push	{r4, lr}
 800c23a:	b082      	sub	sp, #8
	LCD_FillRect(x1, y1, x2-x1, y2-y1, c);
 800c23c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800c240:	9400      	str	r4, [sp, #0]
 800c242:	1a5b      	subs	r3, r3, r1
 800c244:	1a12      	subs	r2, r2, r0
 800c246:	f7ff fe61 	bl	800bf0c <LCD_FillRect>
	return UG_RESULT_OK;
}
 800c24a:	2000      	movs	r0, #0
 800c24c:	b002      	add	sp, #8
 800c24e:	bd10      	pop	{r4, pc}

0800c250 <LCD_UG_init>:


UG_GUI gui;

UG_S16 LCD_UG_init(void)
{
 800c250:	b510      	push	{r4, lr}
	UG_Init(&gui, UserPixelSetFunction, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT));
 800c252:	2000      	movs	r0, #0
 800c254:	f7ff ffca 	bl	800c1ec <ILI9341_GetParam>
 800c258:	4604      	mov	r4, r0
 800c25a:	2001      	movs	r0, #1
 800c25c:	f7ff ffc6 	bl	800c1ec <ILI9341_GetParam>
 800c260:	b203      	sxth	r3, r0
 800c262:	b222      	sxth	r2, r4
 800c264:	490b      	ldr	r1, [pc, #44]	; (800c294 <LCD_UG_init+0x44>)
 800c266:	480c      	ldr	r0, [pc, #48]	; (800c298 <LCD_UG_init+0x48>)
 800c268:	f000 f81c 	bl	800c2a4 <UG_Init>
	UG_DriverRegister(DRIVER_FILL_FRAME, (void *)_HW_FillFrame_);
 800c26c:	490b      	ldr	r1, [pc, #44]	; (800c29c <LCD_UG_init+0x4c>)
 800c26e:	2001      	movs	r0, #1
 800c270:	f000 f8ba 	bl	800c3e8 <UG_DriverRegister>
	UG_DriverEnable(DRIVER_FILL_FRAME);
 800c274:	2001      	movs	r0, #1
 800c276:	f000 f8c5 	bl	800c404 <UG_DriverEnable>

	UG_FontSelect(&FONT_8X12);
 800c27a:	4809      	ldr	r0, [pc, #36]	; (800c2a0 <LCD_UG_init+0x50>)
 800c27c:	f000 f852 	bl	800c324 <UG_FontSelect>
	UG_SetForecolor(C_WHITE);
 800c280:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c284:	f000 f8a0 	bl	800c3c8 <UG_SetForecolor>
	UG_SetBackcolor(C_BLACK);
 800c288:	2000      	movs	r0, #0
 800c28a:	f000 f8a5 	bl	800c3d8 <UG_SetBackcolor>
	return 0;
}
 800c28e:	2000      	movs	r0, #0
 800c290:	bd10      	pop	{r4, pc}
 800c292:	bf00      	nop
 800c294:	0800c219 	.word	0x0800c219
 800c298:	200125ac 	.word	0x200125ac
 800c29c:	0800c239 	.word	0x0800c239
 800c2a0:	08013428 	.word	0x08013428

0800c2a4 <UG_Init>:

UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 800c2a4:	6001      	str	r1, [r0, #0]
   g->x_dim = x;
 800c2a6:	8082      	strh	r2, [r0, #4]
   g->y_dim = y;
 800c2a8:	80c3      	strh	r3, [r0, #6]
   g->console.x_start = 4;
 800c2aa:	2104      	movs	r1, #4
 800c2ac:	8401      	strh	r1, [r0, #32]
   g->console.y_start = 4;
 800c2ae:	8441      	strh	r1, [r0, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 800c2b0:	b292      	uxth	r2, r2
 800c2b2:	3a04      	subs	r2, #4
 800c2b4:	b292      	uxth	r2, r2
 800c2b6:	3a01      	subs	r2, #1
 800c2b8:	b212      	sxth	r2, r2
 800c2ba:	8482      	strh	r2, [r0, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	3b04      	subs	r3, #4
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	3b01      	subs	r3, #1
 800c2c4:	b21b      	sxth	r3, r3
 800c2c6:	84c3      	strh	r3, [r0, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 800c2c8:	8382      	strh	r2, [r0, #28]
   g->console.y_pos = g->console.y_end;
 800c2ca:	83c3      	strh	r3, [r0, #30]
   g->char_h_space = 1;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   g->char_v_space = 1;
 800c2d2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
   g->font.p = NULL;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	62c3      	str	r3, [r0, #44]	; 0x2c
   g->font.char_height = 0;
 800c2da:	8683      	strh	r3, [r0, #52]	; 0x34
   g->font.char_width = 0;
 800c2dc:	8643      	strh	r3, [r0, #50]	; 0x32
   g->font.start_char = 0;
 800c2de:	86c3      	strh	r3, [r0, #54]	; 0x36
   g->font.end_char = 0;
 800c2e0:	8703      	strh	r3, [r0, #56]	; 0x38
   g->font.widths = NULL;
 800c2e2:	63c3      	str	r3, [r0, #60]	; 0x3c
   #ifdef USE_COLOR_RGB888
   g->desktop_color = 0x5E8BEf;
   #endif
   #ifdef USE_COLOR_RGB565
   g->desktop_color = 0x5C5D;
 800c2e4:	f645 425d 	movw	r2, #23645	; 0x5c5d
 800c2e8:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
   #endif
   g->fore_color = C_WHITE;
 800c2ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2f0:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
   g->back_color = C_BLACK;
 800c2f4:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
   g->next_window = NULL;
 800c2f8:	6103      	str	r3, [r0, #16]
   g->active_window = NULL;
 800c2fa:	6143      	str	r3, [r0, #20]
   g->last_window = NULL;
 800c2fc:	6183      	str	r3, [r0, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800c2fe:	e008      	b.n	800c312 <UG_Init+0x6e>
   {
      g->driver[i].driver = NULL;
 800c300:	f103 0209 	add.w	r2, r3, #9
 800c304:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800c308:	2100      	movs	r1, #0
 800c30a:	6051      	str	r1, [r2, #4]
      g->driver[i].state = 0;
 800c30c:	7211      	strb	r1, [r2, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800c30e:	3301      	adds	r3, #1
 800c310:	b2db      	uxtb	r3, r3
 800c312:	2b02      	cmp	r3, #2
 800c314:	d9f4      	bls.n	800c300 <UG_Init+0x5c>
   }

   gui = g;
 800c316:	4b02      	ldr	r3, [pc, #8]	; (800c320 <UG_Init+0x7c>)
 800c318:	6018      	str	r0, [r3, #0]
   return 1;
}
 800c31a:	2001      	movs	r0, #1
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	20012610 	.word	0x20012610

0800c324 <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 800c324:	b500      	push	{lr}
   gui->font = *font;
 800c326:	4b07      	ldr	r3, [pc, #28]	; (800c344 <UG_FontSelect+0x20>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f103 0c2c 	add.w	ip, r3, #44	; 0x2c
 800c32e:	4686      	mov	lr, r0
 800c330:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c334:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c338:	f8de 3000 	ldr.w	r3, [lr]
 800c33c:	f8cc 3000 	str.w	r3, [ip]
}
 800c340:	f85d fb04 	ldr.w	pc, [sp], #4
 800c344:	20012610 	.word	0x20012610

0800c348 <UG_FillFrame>:
{
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
}

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800c348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c34c:	b083      	sub	sp, #12
 800c34e:	4606      	mov	r6, r0
 800c350:	4688      	mov	r8, r1
 800c352:	4691      	mov	r9, r2
 800c354:	461d      	mov	r5, r3
 800c356:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
   UG_S16 n,m;

   if ( x2 < x1 )
 800c35a:	4282      	cmp	r2, r0
 800c35c:	db01      	blt.n	800c362 <UG_FillFrame+0x1a>
 800c35e:	4681      	mov	r9, r0
 800c360:	4616      	mov	r6, r2
   {
      n = x2;
      x2 = x1;
      x1 = n;
   }
   if ( y2 < y1 )
 800c362:	4545      	cmp	r5, r8
 800c364:	db02      	blt.n	800c36c <UG_FillFrame+0x24>
 800c366:	462b      	mov	r3, r5
 800c368:	4645      	mov	r5, r8
 800c36a:	4698      	mov	r8, r3
      y2 = y1;
      y1 = n;
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800c36c:	4b11      	ldr	r3, [pc, #68]	; (800c3b4 <UG_FillFrame+0x6c>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800c374:	f012 0f02 	tst.w	r2, #2
 800c378:	d017      	beq.n	800c3aa <UG_FillFrame+0x62>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800c37a:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 800c37c:	9700      	str	r7, [sp, #0]
 800c37e:	4643      	mov	r3, r8
 800c380:	4632      	mov	r2, r6
 800c382:	4629      	mov	r1, r5
 800c384:	4648      	mov	r0, r9
 800c386:	47a0      	blx	r4
 800c388:	b978      	cbnz	r0, 800c3aa <UG_FillFrame+0x62>
      for( n=x1; n<=x2; n++ )
      {
         gui->pset(n,m,c);
      }
   }
}
 800c38a:	b003      	add	sp, #12
 800c38c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
         gui->pset(n,m,c);
 800c390:	4b08      	ldr	r3, [pc, #32]	; (800c3b4 <UG_FillFrame+0x6c>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	463a      	mov	r2, r7
 800c398:	4629      	mov	r1, r5
 800c39a:	4620      	mov	r0, r4
 800c39c:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800c39e:	3401      	adds	r4, #1
 800c3a0:	b224      	sxth	r4, r4
 800c3a2:	42a6      	cmp	r6, r4
 800c3a4:	daf4      	bge.n	800c390 <UG_FillFrame+0x48>
   for( m=y1; m<=y2; m++ )
 800c3a6:	3501      	adds	r5, #1
 800c3a8:	b22d      	sxth	r5, r5
 800c3aa:	45a8      	cmp	r8, r5
 800c3ac:	dbed      	blt.n	800c38a <UG_FillFrame+0x42>
      for( n=x1; n<=x2; n++ )
 800c3ae:	464c      	mov	r4, r9
 800c3b0:	e7f7      	b.n	800c3a2 <UG_FillFrame+0x5a>
 800c3b2:	bf00      	nop
 800c3b4:	20012610 	.word	0x20012610

0800c3b8 <UG_DrawPixel>:
   UG_DrawArc(x1+r, y2-r, r, 0x30, c);
   UG_DrawArc(x2-r, y2-r, r, 0xC0, c);
}

void UG_DrawPixel( UG_S16 x0, UG_S16 y0, UG_COLOR c )
{
 800c3b8:	b508      	push	{r3, lr}
   gui->pset(x0,y0,c);
 800c3ba:	4b02      	ldr	r3, [pc, #8]	; (800c3c4 <UG_DrawPixel+0xc>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4798      	blx	r3
}
 800c3c2:	bd08      	pop	{r3, pc}
 800c3c4:	20012610 	.word	0x20012610

0800c3c8 <UG_SetForecolor>:
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
   gui->fore_color = c;
 800c3c8:	4b02      	ldr	r3, [pc, #8]	; (800c3d4 <UG_SetForecolor+0xc>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
}
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop
 800c3d4:	20012610 	.word	0x20012610

0800c3d8 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
   gui->back_color = c;
 800c3d8:	4b02      	ldr	r3, [pc, #8]	; (800c3e4 <UG_SetBackcolor+0xc>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
}
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	20012610 	.word	0x20012610

0800c3e8 <UG_DriverRegister>:
/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
 800c3e8:	2802      	cmp	r0, #2
 800c3ea:	d807      	bhi.n	800c3fc <UG_DriverRegister+0x14>

   gui->driver[type].driver = driver;
 800c3ec:	4b04      	ldr	r3, [pc, #16]	; (800c400 <UG_DriverRegister+0x18>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	3009      	adds	r0, #9
 800c3f2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c3f6:	6041      	str	r1, [r0, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 800c3f8:	2303      	movs	r3, #3
 800c3fa:	7203      	strb	r3, [r0, #8]
}
 800c3fc:	4770      	bx	lr
 800c3fe:	bf00      	nop
 800c400:	20012610 	.word	0x20012610

0800c404 <UG_DriverEnable>:

void UG_DriverEnable( UG_U8 type )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
 800c404:	2802      	cmp	r0, #2
 800c406:	d80f      	bhi.n	800c428 <UG_DriverEnable+0x24>
   if ( gui->driver[type].state & DRIVER_REGISTERED )
 800c408:	4b08      	ldr	r3, [pc, #32]	; (800c42c <UG_DriverEnable+0x28>)
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	f100 0309 	add.w	r3, r0, #9
 800c410:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c414:	7a1b      	ldrb	r3, [r3, #8]
 800c416:	f013 0f01 	tst.w	r3, #1
 800c41a:	d005      	beq.n	800c428 <UG_DriverEnable+0x24>
   {
      gui->driver[type].state |= DRIVER_ENABLED;
 800c41c:	3009      	adds	r0, #9
 800c41e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800c422:	f043 0302 	orr.w	r3, r3, #2
 800c426:	7203      	strb	r3, [r0, #8]
   }
}
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	20012610 	.word	0x20012610

0800c430 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c430:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c432:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800c436:	b184      	cbz	r4, 800c45a <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c438:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800c43c:	b17b      	cbz	r3, 800c45e <USBD_CDC_EP0_RxReady+0x2e>
 800c43e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800c442:	28ff      	cmp	r0, #255	; 0xff
 800c444:	d00d      	beq.n	800c462 <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800c44c:	4621      	mov	r1, r4
 800c44e:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800c450:	23ff      	movs	r3, #255	; 0xff
 800c452:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c456:	2000      	movs	r0, #0
}
 800c458:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800c45a:	2003      	movs	r0, #3
 800c45c:	e7fc      	b.n	800c458 <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 800c45e:	2000      	movs	r0, #0
 800c460:	e7fa      	b.n	800c458 <USBD_CDC_EP0_RxReady+0x28>
 800c462:	2000      	movs	r0, #0
 800c464:	e7f8      	b.n	800c458 <USBD_CDC_EP0_RxReady+0x28>
	...

0800c468 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c468:	2343      	movs	r3, #67	; 0x43
 800c46a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800c46c:	4800      	ldr	r0, [pc, #0]	; (800c470 <USBD_CDC_GetFSCfgDesc+0x8>)
 800c46e:	4770      	bx	lr
 800c470:	20001244 	.word	0x20001244

0800c474 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c474:	2343      	movs	r3, #67	; 0x43
 800c476:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800c478:	4800      	ldr	r0, [pc, #0]	; (800c47c <USBD_CDC_GetHSCfgDesc+0x8>)
 800c47a:	4770      	bx	lr
 800c47c:	20001288 	.word	0x20001288

0800c480 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c480:	2343      	movs	r3, #67	; 0x43
 800c482:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800c484:	4800      	ldr	r0, [pc, #0]	; (800c488 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800c486:	4770      	bx	lr
 800c488:	200012d8 	.word	0x200012d8

0800c48c <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c48c:	230a      	movs	r3, #10
 800c48e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800c490:	4800      	ldr	r0, [pc, #0]	; (800c494 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800c492:	4770      	bx	lr
 800c494:	200012cc 	.word	0x200012cc

0800c498 <USBD_CDC_DataOut>:
{
 800c498:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c49a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800c49e:	b175      	cbz	r5, 800c4be <USBD_CDC_DataOut+0x26>
 800c4a0:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c4a2:	f001 f8a3 	bl	800d5ec <USBD_LL_GetRxDataSize>
 800c4a6:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c4aa:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800c4b4:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800c4b8:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800c4ba:	2000      	movs	r0, #0
}
 800c4bc:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800c4be:	2003      	movs	r0, #3
 800c4c0:	e7fc      	b.n	800c4bc <USBD_CDC_DataOut+0x24>

0800c4c2 <USBD_CDC_DataIn>:
{
 800c4c2:	b510      	push	{r4, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c4c4:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 800c4c8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800c4cc:	b353      	cbz	r3, 800c524 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c4ce:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800c4d2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c4d6:	6992      	ldr	r2, [r2, #24]
 800c4d8:	b14a      	cbz	r2, 800c4ee <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c4da:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800c4de:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 800c4e2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800c4e4:	fbb2 fcf4 	udiv	ip, r2, r4
 800c4e8:	fb04 221c 	mls	r2, r4, ip, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c4ec:	b172      	cbz	r2, 800c50c <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c4f4:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800c4f8:	6914      	ldr	r4, [r2, #16]
 800c4fa:	b1ac      	cbz	r4, 800c528 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c4fc:	460a      	mov	r2, r1
 800c4fe:	f503 7104 	add.w	r1, r3, #528	; 0x210
 800c502:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800c506:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 800c508:	2000      	movs	r0, #0
}
 800c50a:	bd10      	pop	{r4, pc}
    pdev->ep_in[epnum].total_length = 0U;
 800c50c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800c510:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c514:	2400      	movs	r4, #0
 800c516:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c518:	4623      	mov	r3, r4
 800c51a:	4622      	mov	r2, r4
 800c51c:	f001 f856 	bl	800d5cc <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800c520:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c522:	e7f2      	b.n	800c50a <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 800c524:	2003      	movs	r0, #3
 800c526:	e7f0      	b.n	800c50a <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 800c528:	2000      	movs	r0, #0
 800c52a:	e7ee      	b.n	800c50a <USBD_CDC_DataIn+0x48>

0800c52c <USBD_CDC_Setup>:
{
 800c52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c52e:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c530:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800c534:	2300      	movs	r3, #0
 800c536:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800c53a:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 800c53e:	2e00      	cmp	r6, #0
 800c540:	d06c      	beq.n	800c61c <USBD_CDC_Setup+0xf0>
 800c542:	4607      	mov	r7, r0
 800c544:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c546:	780b      	ldrb	r3, [r1, #0]
 800c548:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800c54c:	d02a      	beq.n	800c5a4 <USBD_CDC_Setup+0x78>
 800c54e:	2d20      	cmp	r5, #32
 800c550:	d15e      	bne.n	800c610 <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 800c552:	88ca      	ldrh	r2, [r1, #6]
 800c554:	b1f2      	cbz	r2, 800c594 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 800c556:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c55a:	d00f      	beq.n	800c57c <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c55c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	4631      	mov	r1, r6
 800c564:	7860      	ldrb	r0, [r4, #1]
 800c566:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c568:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c56a:	2a07      	cmp	r2, #7
 800c56c:	bf28      	it	cs
 800c56e:	2207      	movcs	r2, #7
 800c570:	4631      	mov	r1, r6
 800c572:	4638      	mov	r0, r7
 800c574:	f000 fdd4 	bl	800d120 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800c578:	2500      	movs	r5, #0
 800c57a:	e04c      	b.n	800c616 <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 800c57c:	784b      	ldrb	r3, [r1, #1]
 800c57e:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c582:	798b      	ldrb	r3, [r1, #6]
 800c584:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c588:	88ca      	ldrh	r2, [r1, #6]
 800c58a:	4631      	mov	r1, r6
 800c58c:	f000 fddd 	bl	800d14a <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800c590:	2500      	movs	r5, #0
 800c592:	e040      	b.n	800c616 <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c594:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	2200      	movs	r2, #0
 800c59c:	7848      	ldrb	r0, [r1, #1]
 800c59e:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 800c5a0:	2500      	movs	r5, #0
 800c5a2:	e038      	b.n	800c616 <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 800c5a4:	784e      	ldrb	r6, [r1, #1]
 800c5a6:	2e0b      	cmp	r6, #11
 800c5a8:	d82e      	bhi.n	800c608 <USBD_CDC_Setup+0xdc>
 800c5aa:	e8df f006 	tbb	[pc, r6]
 800c5ae:	3406      	.short	0x3406
 800c5b0:	2d2d2d2d 	.word	0x2d2d2d2d
 800c5b4:	2d2d2d2d 	.word	0x2d2d2d2d
 800c5b8:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5ba:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	2b03      	cmp	r3, #3
 800c5c2:	d003      	beq.n	800c5cc <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 800c5c4:	f000 fa72 	bl	800caac <USBD_CtlError>
            ret = USBD_FAIL;
 800c5c8:	2503      	movs	r5, #3
 800c5ca:	e024      	b.n	800c616 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c5cc:	2202      	movs	r2, #2
 800c5ce:	a901      	add	r1, sp, #4
 800c5d0:	f000 fda6 	bl	800d120 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800c5d4:	4635      	mov	r5, r6
 800c5d6:	e01e      	b.n	800c616 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5d8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	2b03      	cmp	r3, #3
 800c5e0:	d003      	beq.n	800c5ea <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 800c5e2:	f000 fa63 	bl	800caac <USBD_CtlError>
            ret = USBD_FAIL;
 800c5e6:	2503      	movs	r5, #3
 800c5e8:	e015      	b.n	800c616 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f10d 0107 	add.w	r1, sp, #7
 800c5f0:	f000 fd96 	bl	800d120 <USBD_CtlSendData>
 800c5f4:	e00f      	b.n	800c616 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c5f6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	2b03      	cmp	r3, #3
 800c5fe:	d00a      	beq.n	800c616 <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 800c600:	f000 fa54 	bl	800caac <USBD_CtlError>
            ret = USBD_FAIL;
 800c604:	2503      	movs	r5, #3
 800c606:	e006      	b.n	800c616 <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 800c608:	f000 fa50 	bl	800caac <USBD_CtlError>
          ret = USBD_FAIL;
 800c60c:	2503      	movs	r5, #3
          break;
 800c60e:	e002      	b.n	800c616 <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 800c610:	f000 fa4c 	bl	800caac <USBD_CtlError>
      ret = USBD_FAIL;
 800c614:	2503      	movs	r5, #3
}
 800c616:	4628      	mov	r0, r5
 800c618:	b003      	add	sp, #12
 800c61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800c61c:	2503      	movs	r5, #3
 800c61e:	e7fa      	b.n	800c616 <USBD_CDC_Setup+0xea>

0800c620 <USBD_CDC_DeInit>:
{
 800c620:	b538      	push	{r3, r4, r5, lr}
 800c622:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c624:	2181      	movs	r1, #129	; 0x81
 800c626:	f000 ff9a 	bl	800d55e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c62a:	2500      	movs	r5, #0
 800c62c:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c62e:	2101      	movs	r1, #1
 800c630:	4620      	mov	r0, r4
 800c632:	f000 ff94 	bl	800d55e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c636:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c63a:	2182      	movs	r1, #130	; 0x82
 800c63c:	4620      	mov	r0, r4
 800c63e:	f000 ff8e 	bl	800d55e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c642:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c646:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 800c64a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800c64e:	b14b      	cbz	r3, 800c664 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c650:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c658:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800c65c:	f000 fff4 	bl	800d648 <USBD_static_free>
    pdev->pClassData = NULL;
 800c660:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800c664:	2000      	movs	r0, #0
 800c666:	bd38      	pop	{r3, r4, r5, pc}

0800c668 <USBD_CDC_Init>:
{
 800c668:	b570      	push	{r4, r5, r6, lr}
 800c66a:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c66c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c670:	f000 ffe6 	bl	800d640 <USBD_static_malloc>
  if (hcdc == NULL)
 800c674:	b3b8      	cbz	r0, 800c6e6 <USBD_CDC_Init+0x7e>
 800c676:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 800c678:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c67c:	7c23      	ldrb	r3, [r4, #16]
 800c67e:	bbbb      	cbnz	r3, 800c6f0 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c680:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c684:	2202      	movs	r2, #2
 800c686:	2181      	movs	r1, #129	; 0x81
 800c688:	4620      	mov	r0, r4
 800c68a:	f000 ff5d 	bl	800d548 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c68e:	2501      	movs	r5, #1
 800c690:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c692:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c696:	2202      	movs	r2, #2
 800c698:	4629      	mov	r1, r5
 800c69a:	4620      	mov	r0, r4
 800c69c:	f000 ff54 	bl	800d548 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c6a0:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c6a4:	2310      	movs	r3, #16
 800c6a6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c6aa:	2308      	movs	r3, #8
 800c6ac:	2203      	movs	r2, #3
 800c6ae:	2182      	movs	r1, #130	; 0x82
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	f000 ff49 	bl	800d548 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c6bc:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4798      	blx	r3
  hcdc->TxState = 0U;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800c6ca:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6ce:	7c25      	ldrb	r5, [r4, #16]
 800c6d0:	bb15      	cbnz	r5, 800c718 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c6d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6d6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800c6da:	2101      	movs	r1, #1
 800c6dc:	4620      	mov	r0, r4
 800c6de:	f000 ff7d 	bl	800d5dc <USBD_LL_PrepareReceive>
}
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c6ec:	2502      	movs	r5, #2
 800c6ee:	e7f8      	b.n	800c6e2 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c6f0:	2340      	movs	r3, #64	; 0x40
 800c6f2:	2202      	movs	r2, #2
 800c6f4:	2181      	movs	r1, #129	; 0x81
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	f000 ff26 	bl	800d548 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c6fc:	2501      	movs	r5, #1
 800c6fe:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c700:	2340      	movs	r3, #64	; 0x40
 800c702:	2202      	movs	r2, #2
 800c704:	4629      	mov	r1, r5
 800c706:	4620      	mov	r0, r4
 800c708:	f000 ff1e 	bl	800d548 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c70c:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c710:	2310      	movs	r3, #16
 800c712:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800c716:	e7c8      	b.n	800c6aa <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c718:	2340      	movs	r3, #64	; 0x40
 800c71a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800c71e:	2101      	movs	r1, #1
 800c720:	4620      	mov	r0, r4
 800c722:	f000 ff5b 	bl	800d5dc <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800c726:	2500      	movs	r5, #0
 800c728:	e7db      	b.n	800c6e2 <USBD_CDC_Init+0x7a>

0800c72a <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800c72a:	b119      	cbz	r1, 800c734 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800c72c:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c730:	2000      	movs	r0, #0
 800c732:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c734:	2003      	movs	r0, #3
}
 800c736:	4770      	bx	lr

0800c738 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c738:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800c73c:	b12b      	cbz	r3, 800c74a <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800c73e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c742:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c746:	2000      	movs	r0, #0
 800c748:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c74a:	2003      	movs	r0, #3
}
 800c74c:	4770      	bx	lr

0800c74e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c74e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800c752:	b11b      	cbz	r3, 800c75c <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800c754:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c758:	2000      	movs	r0, #0
 800c75a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c75c:	2003      	movs	r0, #3
}
 800c75e:	4770      	bx	lr

0800c760 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c760:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c762:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800c766:	b192      	cbz	r2, 800c78e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c768:	7c04      	ldrb	r4, [r0, #16]
 800c76a:	b944      	cbnz	r4, 800c77e <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c76c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c770:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c774:	2101      	movs	r1, #1
 800c776:	f000 ff31 	bl	800d5dc <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 800c77a:	4620      	mov	r0, r4
 800c77c:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c77e:	2340      	movs	r3, #64	; 0x40
 800c780:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c784:	2101      	movs	r1, #1
 800c786:	f000 ff29 	bl	800d5dc <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800c78a:	2400      	movs	r4, #0
 800c78c:	e7f5      	b.n	800c77a <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 800c78e:	2403      	movs	r4, #3
 800c790:	e7f3      	b.n	800c77a <USBD_CDC_ReceivePacket+0x1a>

0800c792 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c792:	b198      	cbz	r0, 800c7bc <USBD_Init+0x2a>
{
 800c794:	b508      	push	{r3, lr}
 800c796:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c798:	2000      	movs	r0, #0
 800c79a:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c79e:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c7a2:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c7a6:	b109      	cbz	r1, 800c7ac <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800c7a8:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7ac:	2101      	movs	r1, #1
 800c7ae:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 800c7b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f000 fe7b 	bl	800d4b0 <USBD_LL_Init>

  return ret;
}
 800c7ba:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c7bc:	2003      	movs	r0, #3
}
 800c7be:	4770      	bx	lr

0800c7c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c7c0:	b510      	push	{r4, lr}
 800c7c2:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800c7ca:	b161      	cbz	r1, 800c7e6 <USBD_RegisterClass+0x26>
 800c7cc:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c7ce:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c7d2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800c7d4:	b14b      	cbz	r3, 800c7ea <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c7d6:	f10d 0006 	add.w	r0, sp, #6
 800c7da:	4798      	blx	r3
 800c7dc:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c7e0:	2000      	movs	r0, #0
}
 800c7e2:	b002      	add	sp, #8
 800c7e4:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800c7e6:	2003      	movs	r0, #3
 800c7e8:	e7fb      	b.n	800c7e2 <USBD_RegisterClass+0x22>
  return USBD_OK;
 800c7ea:	2000      	movs	r0, #0
 800c7ec:	e7f9      	b.n	800c7e2 <USBD_RegisterClass+0x22>

0800c7ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c7ee:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c7f0:	f000 fea2 	bl	800d538 <USBD_LL_Start>
}
 800c7f4:	bd08      	pop	{r3, pc}

0800c7f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c7f6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800c7f8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c7fc:	b113      	cbz	r3, 800c804 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4798      	blx	r3
  }

  return ret;
}
 800c802:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c804:	2003      	movs	r0, #3
 800c806:	e7fc      	b.n	800c802 <USBD_SetClassConfig+0xc>

0800c808 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c808:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c80a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c80e:	b10b      	cbz	r3, 800c814 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	4798      	blx	r3
  }

  return USBD_OK;
}
 800c814:	2000      	movs	r0, #0
 800c816:	bd08      	pop	{r3, pc}

0800c818 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c818:	b538      	push	{r3, r4, r5, lr}
 800c81a:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c81c:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800c820:	4628      	mov	r0, r5
 800c822:	f000 f92f 	bl	800ca84 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c826:	2301      	movs	r3, #1
 800c828:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c82c:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800c830:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c834:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800c838:	f001 031f 	and.w	r3, r1, #31
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d00d      	beq.n	800c85c <USBD_LL_SetupStage+0x44>
 800c840:	2b02      	cmp	r3, #2
 800c842:	d010      	beq.n	800c866 <USBD_LL_SetupStage+0x4e>
 800c844:	b12b      	cbz	r3, 800c852 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c846:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800c84a:	4620      	mov	r0, r4
 800c84c:	f000 fe8f 	bl	800d56e <USBD_LL_StallEP>
      break;
 800c850:	e003      	b.n	800c85a <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c852:	4629      	mov	r1, r5
 800c854:	4620      	mov	r0, r4
 800c856:	f000 fae4 	bl	800ce22 <USBD_StdDevReq>
  }

  return ret;
}
 800c85a:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c85c:	4629      	mov	r1, r5
 800c85e:	4620      	mov	r0, r4
 800c860:	f000 fb17 	bl	800ce92 <USBD_StdItfReq>
      break;
 800c864:	e7f9      	b.n	800c85a <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c866:	4629      	mov	r1, r5
 800c868:	4620      	mov	r0, r4
 800c86a:	f000 fb46 	bl	800cefa <USBD_StdEPReq>
      break;
 800c86e:	e7f4      	b.n	800c85a <USBD_LL_SetupStage+0x42>

0800c870 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c874:	460d      	mov	r5, r1
 800c876:	bb41      	cbnz	r1, 800c8ca <USBD_LL_DataOutStage+0x5a>
 800c878:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c87a:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800c87e:	2a03      	cmp	r2, #3
 800c880:	d001      	beq.n	800c886 <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 800c882:	4608      	mov	r0, r1
}
 800c884:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800c886:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 800c88a:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800c88e:	4291      	cmp	r1, r2
 800c890:	d809      	bhi.n	800c8a6 <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c892:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c896:	b2db      	uxtb	r3, r3
 800c898:	2b03      	cmp	r3, #3
 800c89a:	d00f      	beq.n	800c8bc <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 800c89c:	4620      	mov	r0, r4
 800c89e:	f000 fc6b 	bl	800d178 <USBD_CtlSendStatus>
  return USBD_OK;
 800c8a2:	4628      	mov	r0, r5
 800c8a4:	e7ee      	b.n	800c884 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800c8a6:	1a89      	subs	r1, r1, r2
 800c8a8:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c8ac:	428a      	cmp	r2, r1
 800c8ae:	bf28      	it	cs
 800c8b0:	460a      	movcs	r2, r1
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	f000 fc58 	bl	800d168 <USBD_CtlContinueRx>
  return USBD_OK;
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	e7e3      	b.n	800c884 <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 800c8bc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d0ea      	beq.n	800c89c <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 800c8c6:	4798      	blx	r3
 800c8c8:	e7e8      	b.n	800c89c <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8ca:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	2b03      	cmp	r3, #3
 800c8d2:	d001      	beq.n	800c8d8 <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 800c8d4:	2000      	movs	r0, #0
 800c8d6:	e7d5      	b.n	800c884 <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 800c8d8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c8dc:	699b      	ldr	r3, [r3, #24]
 800c8de:	b10b      	cbz	r3, 800c8e4 <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c8e0:	4798      	blx	r3
        if (ret != USBD_OK)
 800c8e2:	e7cf      	b.n	800c884 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 800c8e4:	2000      	movs	r0, #0
 800c8e6:	e7cd      	b.n	800c884 <USBD_LL_DataOutStage+0x14>

0800c8e8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c8e8:	b538      	push	{r3, r4, r5, lr}
 800c8ea:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c8ec:	460d      	mov	r5, r1
 800c8ee:	2900      	cmp	r1, #0
 800c8f0:	d14a      	bne.n	800c988 <USBD_LL_DataInStage+0xa0>
 800c8f2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c8f4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800c8f8:	2a02      	cmp	r2, #2
 800c8fa:	d005      	beq.n	800c908 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c8fc:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800c900:	2b01      	cmp	r3, #1
 800c902:	d03c      	beq.n	800c97e <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 800c904:	4628      	mov	r0, r5
}
 800c906:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800c908:	69c2      	ldr	r2, [r0, #28]
 800c90a:	6a01      	ldr	r1, [r0, #32]
 800c90c:	428a      	cmp	r2, r1
 800c90e:	d80e      	bhi.n	800c92e <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 800c910:	428a      	cmp	r2, r1
 800c912:	d018      	beq.n	800c946 <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c914:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	2b03      	cmp	r3, #3
 800c91c:	d027      	beq.n	800c96e <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c91e:	2180      	movs	r1, #128	; 0x80
 800c920:	4620      	mov	r0, r4
 800c922:	f000 fe24 	bl	800d56e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c926:	4620      	mov	r0, r4
 800c928:	f000 fc31 	bl	800d18e <USBD_CtlReceiveStatus>
 800c92c:	e7e6      	b.n	800c8fc <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800c92e:	1a52      	subs	r2, r2, r1
 800c930:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c932:	4619      	mov	r1, r3
 800c934:	f000 fc01 	bl	800d13a <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c938:	2300      	movs	r3, #0
 800c93a:	461a      	mov	r2, r3
 800c93c:	4619      	mov	r1, r3
 800c93e:	4620      	mov	r0, r4
 800c940:	f000 fe4c 	bl	800d5dc <USBD_LL_PrepareReceive>
 800c944:	e7da      	b.n	800c8fc <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800c946:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800c948:	4299      	cmp	r1, r3
 800c94a:	d8e3      	bhi.n	800c914 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 800c94c:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c950:	4293      	cmp	r3, r2
 800c952:	d2df      	bcs.n	800c914 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c954:	2200      	movs	r2, #0
 800c956:	4611      	mov	r1, r2
 800c958:	f000 fbef 	bl	800d13a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c95c:	2100      	movs	r1, #0
 800c95e:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c962:	460b      	mov	r3, r1
 800c964:	460a      	mov	r2, r1
 800c966:	4620      	mov	r0, r4
 800c968:	f000 fe38 	bl	800d5dc <USBD_LL_PrepareReceive>
 800c96c:	e7c6      	b.n	800c8fc <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 800c96e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800c972:	68db      	ldr	r3, [r3, #12]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d0d2      	beq.n	800c91e <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 800c978:	4620      	mov	r0, r4
 800c97a:	4798      	blx	r3
 800c97c:	e7cf      	b.n	800c91e <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 800c97e:	2300      	movs	r3, #0
 800c980:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 800c984:	4628      	mov	r0, r5
 800c986:	e7be      	b.n	800c906 <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c988:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	2b03      	cmp	r3, #3
 800c990:	d001      	beq.n	800c996 <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 800c992:	2000      	movs	r0, #0
 800c994:	e7b7      	b.n	800c906 <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 800c996:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c99a:	695b      	ldr	r3, [r3, #20]
 800c99c:	b10b      	cbz	r3, 800c9a2 <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c99e:	4798      	blx	r3
        if (ret != USBD_OK)
 800c9a0:	e7b1      	b.n	800c906 <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	e7af      	b.n	800c906 <USBD_LL_DataInStage+0x1e>

0800c9a6 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800c9b2:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800c9b4:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c9b8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c9bc:	b1f3      	cbz	r3, 800c9fc <USBD_LL_Reset+0x56>
{
 800c9be:	b570      	push	{r4, r5, r6, lr}
 800c9c0:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800c9c2:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800c9c6:	b11a      	cbz	r2, 800c9d0 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	b10b      	cbz	r3, 800c9d0 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c9cc:	2100      	movs	r1, #0
 800c9ce:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c9d0:	2340      	movs	r3, #64	; 0x40
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	4611      	mov	r1, r2
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f000 fdb6 	bl	800d548 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c9dc:	2601      	movs	r6, #1
 800c9de:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c9e2:	2540      	movs	r5, #64	; 0x40
 800c9e4:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c9e8:	462b      	mov	r3, r5
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	2180      	movs	r1, #128	; 0x80
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f000 fdaa 	bl	800d548 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c9f4:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c9f6:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800c9f8:	2000      	movs	r0, #0
}
 800c9fa:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800c9fc:	2003      	movs	r0, #3
}
 800c9fe:	4770      	bx	lr

0800ca00 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800ca00:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800ca02:	2000      	movs	r0, #0
 800ca04:	4770      	bx	lr

0800ca06 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800ca06:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ca10:	2304      	movs	r3, #4
 800ca12:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800ca16:	2000      	movs	r0, #0
 800ca18:	4770      	bx	lr

0800ca1a <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ca1a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	2b04      	cmp	r3, #4
 800ca22:	d001      	beq.n	800ca28 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800ca24:	2000      	movs	r0, #0
 800ca26:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800ca28:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800ca32:	e7f7      	b.n	800ca24 <USBD_LL_Resume+0xa>

0800ca34 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800ca34:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800ca38:	b162      	cbz	r2, 800ca54 <USBD_LL_SOF+0x20>
{
 800ca3a:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca3c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	2b03      	cmp	r3, #3
 800ca44:	d001      	beq.n	800ca4a <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800ca46:	2000      	movs	r0, #0
}
 800ca48:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800ca4a:	69d3      	ldr	r3, [r2, #28]
 800ca4c:	b123      	cbz	r3, 800ca58 <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 800ca4e:	4798      	blx	r3
  return USBD_OK;
 800ca50:	2000      	movs	r0, #0
 800ca52:	e7f9      	b.n	800ca48 <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 800ca54:	2003      	movs	r0, #3
}
 800ca56:	4770      	bx	lr
  return USBD_OK;
 800ca58:	2000      	movs	r0, #0
 800ca5a:	e7f5      	b.n	800ca48 <USBD_LL_SOF+0x14>

0800ca5c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca5c:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800ca5e:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800ca60:	e002      	b.n	800ca68 <USBD_GetLen+0xc>
  {
    len++;
 800ca62:	3001      	adds	r0, #1
 800ca64:	b2c0      	uxtb	r0, r0
    pbuff++;
 800ca66:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800ca68:	781a      	ldrb	r2, [r3, #0]
 800ca6a:	2a00      	cmp	r2, #0
 800ca6c:	d1f9      	bne.n	800ca62 <USBD_GetLen+0x6>
  }

  return len;
}
 800ca6e:	4770      	bx	lr

0800ca70 <USBD_SetFeature>:
{
 800ca70:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca72:	884b      	ldrh	r3, [r1, #2]
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d000      	beq.n	800ca7a <USBD_SetFeature+0xa>
}
 800ca78:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800ca7a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ca7e:	f000 fb7b 	bl	800d178 <USBD_CtlSendStatus>
}
 800ca82:	e7f9      	b.n	800ca78 <USBD_SetFeature+0x8>

0800ca84 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800ca84:	780b      	ldrb	r3, [r1, #0]
 800ca86:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800ca88:	784b      	ldrb	r3, [r1, #1]
 800ca8a:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800ca8c:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800ca8e:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ca90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800ca94:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800ca96:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800ca98:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ca9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800ca9e:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800caa0:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800caa2:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800caa4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800caa8:	80c3      	strh	r3, [r0, #6]
}
 800caaa:	4770      	bx	lr

0800caac <USBD_CtlError>:
{
 800caac:	b510      	push	{r4, lr}
 800caae:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cab0:	2180      	movs	r1, #128	; 0x80
 800cab2:	f000 fd5c 	bl	800d56e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cab6:	2100      	movs	r1, #0
 800cab8:	4620      	mov	r0, r4
 800caba:	f000 fd58 	bl	800d56e <USBD_LL_StallEP>
}
 800cabe:	bd10      	pop	{r4, pc}

0800cac0 <USBD_GetDescriptor>:
{
 800cac0:	b530      	push	{r4, r5, lr}
 800cac2:	b083      	sub	sp, #12
 800cac4:	4604      	mov	r4, r0
 800cac6:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800cac8:	2300      	movs	r3, #0
 800caca:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800cace:	884a      	ldrh	r2, [r1, #2]
 800cad0:	0a13      	lsrs	r3, r2, #8
 800cad2:	3b01      	subs	r3, #1
 800cad4:	2b0e      	cmp	r3, #14
 800cad6:	f200 80bc 	bhi.w	800cc52 <USBD_GetDescriptor+0x192>
 800cada:	e8df f003 	tbb	[pc, r3]
 800cade:	3015      	.short	0x3015
 800cae0:	9ebaba44 	.word	0x9ebaba44
 800cae4:	bababaab 	.word	0xbababaab
 800cae8:	babababa 	.word	0xbabababa
 800caec:	08          	.byte	0x08
 800caed:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800caee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800caf2:	69db      	ldr	r3, [r3, #28]
 800caf4:	b123      	cbz	r3, 800cb00 <USBD_GetDescriptor+0x40>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800caf6:	f10d 0106 	add.w	r1, sp, #6
 800cafa:	7c00      	ldrb	r0, [r0, #16]
 800cafc:	4798      	blx	r3
  if (err != 0U)
 800cafe:	e00a      	b.n	800cb16 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800cb00:	4629      	mov	r1, r5
 800cb02:	f7ff ffd3 	bl	800caac <USBD_CtlError>
  if (err != 0U)
 800cb06:	e018      	b.n	800cb3a <USBD_GetDescriptor+0x7a>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cb08:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f10d 0106 	add.w	r1, sp, #6
 800cb12:	7c00      	ldrb	r0, [r0, #16]
 800cb14:	4798      	blx	r3
  if (req->wLength != 0U)
 800cb16:	88ea      	ldrh	r2, [r5, #6]
 800cb18:	2a00      	cmp	r2, #0
 800cb1a:	f000 80a3 	beq.w	800cc64 <USBD_GetDescriptor+0x1a4>
    if (len != 0U)
 800cb1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	f000 8099 	beq.w	800cc5a <USBD_GetDescriptor+0x19a>
      len = MIN(len, req->wLength);
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	bf28      	it	cs
 800cb2c:	461a      	movcs	r2, r3
 800cb2e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cb32:	4601      	mov	r1, r0
 800cb34:	4620      	mov	r0, r4
 800cb36:	f000 faf3 	bl	800d120 <USBD_CtlSendData>
}
 800cb3a:	b003      	add	sp, #12
 800cb3c:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb3e:	7c03      	ldrb	r3, [r0, #16]
 800cb40:	b943      	cbnz	r3, 800cb54 <USBD_GetDescriptor+0x94>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cb42:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800cb46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb48:	f10d 0006 	add.w	r0, sp, #6
 800cb4c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb4e:	2302      	movs	r3, #2
 800cb50:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800cb52:	e7e0      	b.n	800cb16 <USBD_GetDescriptor+0x56>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cb54:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800cb58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb5a:	f10d 0006 	add.w	r0, sp, #6
 800cb5e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb60:	2302      	movs	r3, #2
 800cb62:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800cb64:	e7d7      	b.n	800cb16 <USBD_GetDescriptor+0x56>
      switch ((uint8_t)(req->wValue))
 800cb66:	b2d2      	uxtb	r2, r2
 800cb68:	2a05      	cmp	r2, #5
 800cb6a:	d852      	bhi.n	800cc12 <USBD_GetDescriptor+0x152>
 800cb6c:	e8df f002 	tbb	[pc, r2]
 800cb70:	2a1d1003 	.word	0x2a1d1003
 800cb74:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cb76:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	b123      	cbz	r3, 800cb88 <USBD_GetDescriptor+0xc8>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cb7e:	f10d 0106 	add.w	r1, sp, #6
 800cb82:	7c00      	ldrb	r0, [r0, #16]
 800cb84:	4798      	blx	r3
  if (err != 0U)
 800cb86:	e7c6      	b.n	800cb16 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800cb88:	4629      	mov	r1, r5
 800cb8a:	f7ff ff8f 	bl	800caac <USBD_CtlError>
  if (err != 0U)
 800cb8e:	e7d4      	b.n	800cb3a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cb90:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cb94:	689b      	ldr	r3, [r3, #8]
 800cb96:	b123      	cbz	r3, 800cba2 <USBD_GetDescriptor+0xe2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cb98:	f10d 0106 	add.w	r1, sp, #6
 800cb9c:	7c00      	ldrb	r0, [r0, #16]
 800cb9e:	4798      	blx	r3
  if (err != 0U)
 800cba0:	e7b9      	b.n	800cb16 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800cba2:	4629      	mov	r1, r5
 800cba4:	f7ff ff82 	bl	800caac <USBD_CtlError>
  if (err != 0U)
 800cba8:	e7c7      	b.n	800cb3a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cbaa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cbae:	68db      	ldr	r3, [r3, #12]
 800cbb0:	b123      	cbz	r3, 800cbbc <USBD_GetDescriptor+0xfc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cbb2:	f10d 0106 	add.w	r1, sp, #6
 800cbb6:	7c00      	ldrb	r0, [r0, #16]
 800cbb8:	4798      	blx	r3
  if (err != 0U)
 800cbba:	e7ac      	b.n	800cb16 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800cbbc:	4629      	mov	r1, r5
 800cbbe:	f7ff ff75 	bl	800caac <USBD_CtlError>
  if (err != 0U)
 800cbc2:	e7ba      	b.n	800cb3a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cbc4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cbc8:	691b      	ldr	r3, [r3, #16]
 800cbca:	b123      	cbz	r3, 800cbd6 <USBD_GetDescriptor+0x116>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cbcc:	f10d 0106 	add.w	r1, sp, #6
 800cbd0:	7c00      	ldrb	r0, [r0, #16]
 800cbd2:	4798      	blx	r3
  if (err != 0U)
 800cbd4:	e79f      	b.n	800cb16 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800cbd6:	4629      	mov	r1, r5
 800cbd8:	f7ff ff68 	bl	800caac <USBD_CtlError>
  if (err != 0U)
 800cbdc:	e7ad      	b.n	800cb3a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cbde:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cbe2:	695b      	ldr	r3, [r3, #20]
 800cbe4:	b123      	cbz	r3, 800cbf0 <USBD_GetDescriptor+0x130>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cbe6:	f10d 0106 	add.w	r1, sp, #6
 800cbea:	7c00      	ldrb	r0, [r0, #16]
 800cbec:	4798      	blx	r3
  if (err != 0U)
 800cbee:	e792      	b.n	800cb16 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800cbf0:	4629      	mov	r1, r5
 800cbf2:	f7ff ff5b 	bl	800caac <USBD_CtlError>
  if (err != 0U)
 800cbf6:	e7a0      	b.n	800cb3a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cbf8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cbfc:	699b      	ldr	r3, [r3, #24]
 800cbfe:	b123      	cbz	r3, 800cc0a <USBD_GetDescriptor+0x14a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cc00:	f10d 0106 	add.w	r1, sp, #6
 800cc04:	7c00      	ldrb	r0, [r0, #16]
 800cc06:	4798      	blx	r3
  if (err != 0U)
 800cc08:	e785      	b.n	800cb16 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800cc0a:	4629      	mov	r1, r5
 800cc0c:	f7ff ff4e 	bl	800caac <USBD_CtlError>
  if (err != 0U)
 800cc10:	e793      	b.n	800cb3a <USBD_GetDescriptor+0x7a>
          USBD_CtlError(pdev, req);
 800cc12:	4629      	mov	r1, r5
 800cc14:	f7ff ff4a 	bl	800caac <USBD_CtlError>
  if (err != 0U)
 800cc18:	e78f      	b.n	800cb3a <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc1a:	7c03      	ldrb	r3, [r0, #16]
 800cc1c:	b933      	cbnz	r3, 800cc2c <USBD_GetDescriptor+0x16c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cc1e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800cc22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc24:	f10d 0006 	add.w	r0, sp, #6
 800cc28:	4798      	blx	r3
  if (err != 0U)
 800cc2a:	e774      	b.n	800cb16 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800cc2c:	4629      	mov	r1, r5
 800cc2e:	f7ff ff3d 	bl	800caac <USBD_CtlError>
  if (err != 0U)
 800cc32:	e782      	b.n	800cb3a <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc34:	7c03      	ldrb	r3, [r0, #16]
 800cc36:	b943      	cbnz	r3, 800cc4a <USBD_GetDescriptor+0x18a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cc38:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800cc3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc3e:	f10d 0006 	add.w	r0, sp, #6
 800cc42:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cc44:	2307      	movs	r3, #7
 800cc46:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800cc48:	e765      	b.n	800cb16 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800cc4a:	4629      	mov	r1, r5
 800cc4c:	f7ff ff2e 	bl	800caac <USBD_CtlError>
  if (err != 0U)
 800cc50:	e773      	b.n	800cb3a <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 800cc52:	4629      	mov	r1, r5
 800cc54:	f7ff ff2a 	bl	800caac <USBD_CtlError>
    return;
 800cc58:	e76f      	b.n	800cb3a <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 800cc5a:	4629      	mov	r1, r5
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	f7ff ff25 	bl	800caac <USBD_CtlError>
 800cc62:	e76a      	b.n	800cb3a <USBD_GetDescriptor+0x7a>
    (void)USBD_CtlSendStatus(pdev);
 800cc64:	4620      	mov	r0, r4
 800cc66:	f000 fa87 	bl	800d178 <USBD_CtlSendStatus>
 800cc6a:	e766      	b.n	800cb3a <USBD_GetDescriptor+0x7a>

0800cc6c <USBD_SetAddress>:
{
 800cc6c:	b538      	push	{r3, r4, r5, lr}
 800cc6e:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cc70:	888b      	ldrh	r3, [r1, #4]
 800cc72:	b9fb      	cbnz	r3, 800ccb4 <USBD_SetAddress+0x48>
 800cc74:	88cb      	ldrh	r3, [r1, #6]
 800cc76:	b9eb      	cbnz	r3, 800ccb4 <USBD_SetAddress+0x48>
 800cc78:	884b      	ldrh	r3, [r1, #2]
 800cc7a:	2b7f      	cmp	r3, #127	; 0x7f
 800cc7c:	d81a      	bhi.n	800ccb4 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cc7e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc82:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	2b03      	cmp	r3, #3
 800cc8a:	d00c      	beq.n	800cca6 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 800cc8c:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cc90:	4629      	mov	r1, r5
 800cc92:	f000 fc93 	bl	800d5bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cc96:	4620      	mov	r0, r4
 800cc98:	f000 fa6e 	bl	800d178 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800cc9c:	b135      	cbz	r5, 800ccac <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc9e:	2302      	movs	r3, #2
 800cca0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800cca4:	e009      	b.n	800ccba <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 800cca6:	f7ff ff01 	bl	800caac <USBD_CtlError>
 800ccaa:	e006      	b.n	800ccba <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ccac:	2301      	movs	r3, #1
 800ccae:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800ccb2:	e002      	b.n	800ccba <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f7ff fef9 	bl	800caac <USBD_CtlError>
}
 800ccba:	bd38      	pop	{r3, r4, r5, pc}

0800ccbc <USBD_SetConfig>:
{
 800ccbc:	b570      	push	{r4, r5, r6, lr}
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800ccc2:	788d      	ldrb	r5, [r1, #2]
 800ccc4:	4b2e      	ldr	r3, [pc, #184]	; (800cd80 <USBD_SetConfig+0xc4>)
 800ccc6:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ccc8:	2d01      	cmp	r5, #1
 800ccca:	d810      	bhi.n	800ccee <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800cccc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	2b02      	cmp	r3, #2
 800ccd4:	d00f      	beq.n	800ccf6 <USBD_SetConfig+0x3a>
 800ccd6:	2b03      	cmp	r3, #3
 800ccd8:	d023      	beq.n	800cd22 <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 800ccda:	f7ff fee7 	bl	800caac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ccde:	4b28      	ldr	r3, [pc, #160]	; (800cd80 <USBD_SetConfig+0xc4>)
 800cce0:	7819      	ldrb	r1, [r3, #0]
 800cce2:	4620      	mov	r0, r4
 800cce4:	f7ff fd90 	bl	800c808 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cce8:	2503      	movs	r5, #3
}
 800ccea:	4628      	mov	r0, r5
 800ccec:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800ccee:	f7ff fedd 	bl	800caac <USBD_CtlError>
    return USBD_FAIL;
 800ccf2:	2503      	movs	r5, #3
 800ccf4:	e7f9      	b.n	800ccea <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800ccf6:	b18d      	cbz	r5, 800cd1c <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 800ccf8:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ccfa:	4629      	mov	r1, r5
 800ccfc:	f7ff fd7b 	bl	800c7f6 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800cd00:	4605      	mov	r5, r0
 800cd02:	b120      	cbz	r0, 800cd0e <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 800cd04:	4631      	mov	r1, r6
 800cd06:	4620      	mov	r0, r4
 800cd08:	f7ff fed0 	bl	800caac <USBD_CtlError>
 800cd0c:	e7ed      	b.n	800ccea <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800cd0e:	4620      	mov	r0, r4
 800cd10:	f000 fa32 	bl	800d178 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cd14:	2303      	movs	r3, #3
 800cd16:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800cd1a:	e7e6      	b.n	800ccea <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800cd1c:	f000 fa2c 	bl	800d178 <USBD_CtlSendStatus>
 800cd20:	e7e3      	b.n	800ccea <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800cd22:	b1cd      	cbz	r5, 800cd58 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 800cd24:	6841      	ldr	r1, [r0, #4]
 800cd26:	428d      	cmp	r5, r1
 800cd28:	d025      	beq.n	800cd76 <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd2a:	b2c9      	uxtb	r1, r1
 800cd2c:	f7ff fd6c 	bl	800c808 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cd30:	4b13      	ldr	r3, [pc, #76]	; (800cd80 <USBD_SetConfig+0xc4>)
 800cd32:	7819      	ldrb	r1, [r3, #0]
 800cd34:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd36:	4620      	mov	r0, r4
 800cd38:	f7ff fd5d 	bl	800c7f6 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800cd3c:	4605      	mov	r5, r0
 800cd3e:	b1b0      	cbz	r0, 800cd6e <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 800cd40:	4631      	mov	r1, r6
 800cd42:	4620      	mov	r0, r4
 800cd44:	f7ff feb2 	bl	800caac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd48:	7921      	ldrb	r1, [r4, #4]
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	f7ff fd5c 	bl	800c808 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd50:	2302      	movs	r3, #2
 800cd52:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800cd56:	e7c8      	b.n	800ccea <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd58:	2302      	movs	r3, #2
 800cd5a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cd5e:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cd60:	4629      	mov	r1, r5
 800cd62:	f7ff fd51 	bl	800c808 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cd66:	4620      	mov	r0, r4
 800cd68:	f000 fa06 	bl	800d178 <USBD_CtlSendStatus>
 800cd6c:	e7bd      	b.n	800ccea <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800cd6e:	4620      	mov	r0, r4
 800cd70:	f000 fa02 	bl	800d178 <USBD_CtlSendStatus>
 800cd74:	e7b9      	b.n	800ccea <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800cd76:	f000 f9ff 	bl	800d178 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800cd7a:	2500      	movs	r5, #0
 800cd7c:	e7b5      	b.n	800ccea <USBD_SetConfig+0x2e>
 800cd7e:	bf00      	nop
 800cd80:	20012614 	.word	0x20012614

0800cd84 <USBD_GetConfig>:
{
 800cd84:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800cd86:	88cb      	ldrh	r3, [r1, #6]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d10b      	bne.n	800cda4 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800cd8c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	2b02      	cmp	r3, #2
 800cd94:	d909      	bls.n	800cdaa <USBD_GetConfig+0x26>
 800cd96:	2b03      	cmp	r3, #3
 800cd98:	d109      	bne.n	800cdae <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	1d01      	adds	r1, r0, #4
 800cd9e:	f000 f9bf 	bl	800d120 <USBD_CtlSendData>
        break;
 800cda2:	e001      	b.n	800cda8 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800cda4:	f7ff fe82 	bl	800caac <USBD_CtlError>
}
 800cda8:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800cdaa:	b25b      	sxtb	r3, r3
 800cdac:	b913      	cbnz	r3, 800cdb4 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 800cdae:	f7ff fe7d 	bl	800caac <USBD_CtlError>
}
 800cdb2:	e7f9      	b.n	800cda8 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 800cdb4:	4601      	mov	r1, r0
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	f000 f9af 	bl	800d120 <USBD_CtlSendData>
        break;
 800cdc2:	e7f1      	b.n	800cda8 <USBD_GetConfig+0x24>

0800cdc4 <USBD_GetStatus>:
{
 800cdc4:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800cdc6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800cdca:	3b01      	subs	r3, #1
 800cdcc:	2b02      	cmp	r3, #2
 800cdce:	d812      	bhi.n	800cdf6 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800cdd0:	88cb      	ldrh	r3, [r1, #6]
 800cdd2:	2b02      	cmp	r3, #2
 800cdd4:	d10c      	bne.n	800cdf0 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800cdda:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800cdde:	b10b      	cbz	r3, 800cde4 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cde0:	2303      	movs	r3, #3
 800cde2:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cde4:	2202      	movs	r2, #2
 800cde6:	f100 010c 	add.w	r1, r0, #12
 800cdea:	f000 f999 	bl	800d120 <USBD_CtlSendData>
}
 800cdee:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800cdf0:	f7ff fe5c 	bl	800caac <USBD_CtlError>
        break;
 800cdf4:	e7fb      	b.n	800cdee <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800cdf6:	f7ff fe59 	bl	800caac <USBD_CtlError>
}
 800cdfa:	e7f8      	b.n	800cdee <USBD_GetStatus+0x2a>

0800cdfc <USBD_ClrFeature>:
{
 800cdfc:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800cdfe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ce02:	3b01      	subs	r3, #1
 800ce04:	2b02      	cmp	r3, #2
 800ce06:	d809      	bhi.n	800ce1c <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce08:	884b      	ldrh	r3, [r1, #2]
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d000      	beq.n	800ce10 <USBD_ClrFeature+0x14>
}
 800ce0e:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800ce10:	2300      	movs	r3, #0
 800ce12:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ce16:	f000 f9af 	bl	800d178 <USBD_CtlSendStatus>
 800ce1a:	e7f8      	b.n	800ce0e <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800ce1c:	f7ff fe46 	bl	800caac <USBD_CtlError>
}
 800ce20:	e7f5      	b.n	800ce0e <USBD_ClrFeature+0x12>

0800ce22 <USBD_StdDevReq>:
{
 800ce22:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce24:	780c      	ldrb	r4, [r1, #0]
 800ce26:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800ce2a:	2c20      	cmp	r4, #32
 800ce2c:	d006      	beq.n	800ce3c <USBD_StdDevReq+0x1a>
 800ce2e:	2c40      	cmp	r4, #64	; 0x40
 800ce30:	d004      	beq.n	800ce3c <USBD_StdDevReq+0x1a>
 800ce32:	b154      	cbz	r4, 800ce4a <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 800ce34:	f7ff fe3a 	bl	800caac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ce38:	2400      	movs	r4, #0
      break;
 800ce3a:	e004      	b.n	800ce46 <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ce3c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ce40:	689b      	ldr	r3, [r3, #8]
 800ce42:	4798      	blx	r3
 800ce44:	4604      	mov	r4, r0
}
 800ce46:	4620      	mov	r0, r4
 800ce48:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800ce4a:	784d      	ldrb	r5, [r1, #1]
 800ce4c:	2d09      	cmp	r5, #9
 800ce4e:	d81d      	bhi.n	800ce8c <USBD_StdDevReq+0x6a>
 800ce50:	e8df f005 	tbb	[pc, r5]
 800ce54:	161c1912 	.word	0x161c1912
 800ce58:	1c05081c 	.word	0x1c05081c
 800ce5c:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800ce5e:	f7ff fe2f 	bl	800cac0 <USBD_GetDescriptor>
          break;
 800ce62:	e7f0      	b.n	800ce46 <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 800ce64:	f7ff ff02 	bl	800cc6c <USBD_SetAddress>
          break;
 800ce68:	e7ed      	b.n	800ce46 <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 800ce6a:	f7ff ff27 	bl	800ccbc <USBD_SetConfig>
 800ce6e:	4604      	mov	r4, r0
          break;
 800ce70:	e7e9      	b.n	800ce46 <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 800ce72:	f7ff ff87 	bl	800cd84 <USBD_GetConfig>
          break;
 800ce76:	e7e6      	b.n	800ce46 <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 800ce78:	f7ff ffa4 	bl	800cdc4 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800ce7c:	462c      	mov	r4, r5
          break;
 800ce7e:	e7e2      	b.n	800ce46 <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 800ce80:	f7ff fdf6 	bl	800ca70 <USBD_SetFeature>
          break;
 800ce84:	e7df      	b.n	800ce46 <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 800ce86:	f7ff ffb9 	bl	800cdfc <USBD_ClrFeature>
          break;
 800ce8a:	e7dc      	b.n	800ce46 <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 800ce8c:	f7ff fe0e 	bl	800caac <USBD_CtlError>
          break;
 800ce90:	e7d9      	b.n	800ce46 <USBD_StdDevReq+0x24>

0800ce92 <USBD_StdItfReq>:
{
 800ce92:	b570      	push	{r4, r5, r6, lr}
 800ce94:	4605      	mov	r5, r0
 800ce96:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce98:	780b      	ldrb	r3, [r1, #0]
 800ce9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ce9e:	2b20      	cmp	r3, #32
 800cea0:	d007      	beq.n	800ceb2 <USBD_StdItfReq+0x20>
 800cea2:	2b40      	cmp	r3, #64	; 0x40
 800cea4:	d005      	beq.n	800ceb2 <USBD_StdItfReq+0x20>
 800cea6:	b123      	cbz	r3, 800ceb2 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800cea8:	f7ff fe00 	bl	800caac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ceac:	2600      	movs	r6, #0
}
 800ceae:	4630      	mov	r0, r6
 800ceb0:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800ceb2:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800ceb6:	3b01      	subs	r3, #1
 800ceb8:	2b02      	cmp	r3, #2
 800ceba:	d818      	bhi.n	800ceee <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cebc:	7923      	ldrb	r3, [r4, #4]
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d80f      	bhi.n	800cee2 <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cec2:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	4621      	mov	r1, r4
 800ceca:	4628      	mov	r0, r5
 800cecc:	4798      	blx	r3
 800cece:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ced0:	88e3      	ldrh	r3, [r4, #6]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d1eb      	bne.n	800ceae <USBD_StdItfReq+0x1c>
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d1e9      	bne.n	800ceae <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800ceda:	4628      	mov	r0, r5
 800cedc:	f000 f94c 	bl	800d178 <USBD_CtlSendStatus>
 800cee0:	e7e5      	b.n	800ceae <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 800cee2:	4621      	mov	r1, r4
 800cee4:	4628      	mov	r0, r5
 800cee6:	f7ff fde1 	bl	800caac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ceea:	2600      	movs	r6, #0
 800ceec:	e7df      	b.n	800ceae <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 800ceee:	4621      	mov	r1, r4
 800cef0:	4628      	mov	r0, r5
 800cef2:	f7ff fddb 	bl	800caac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800cef6:	2600      	movs	r6, #0
          break;
 800cef8:	e7d9      	b.n	800ceae <USBD_StdItfReq+0x1c>

0800cefa <USBD_StdEPReq>:
{
 800cefa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cefc:	4606      	mov	r6, r0
 800cefe:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800cf00:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf02:	780c      	ldrb	r4, [r1, #0]
 800cf04:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800cf08:	2c20      	cmp	r4, #32
 800cf0a:	d008      	beq.n	800cf1e <USBD_StdEPReq+0x24>
 800cf0c:	b2d9      	uxtb	r1, r3
 800cf0e:	2c40      	cmp	r4, #64	; 0x40
 800cf10:	d005      	beq.n	800cf1e <USBD_StdEPReq+0x24>
 800cf12:	b16c      	cbz	r4, 800cf30 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 800cf14:	4629      	mov	r1, r5
 800cf16:	f7ff fdc9 	bl	800caac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800cf1a:	2400      	movs	r4, #0
      break;
 800cf1c:	e006      	b.n	800cf2c <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cf1e:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800cf22:	689b      	ldr	r3, [r3, #8]
 800cf24:	4629      	mov	r1, r5
 800cf26:	4630      	mov	r0, r6
 800cf28:	4798      	blx	r3
 800cf2a:	4604      	mov	r4, r0
}
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 800cf30:	786f      	ldrb	r7, [r5, #1]
 800cf32:	2f01      	cmp	r7, #1
 800cf34:	d02f      	beq.n	800cf96 <USBD_StdEPReq+0x9c>
 800cf36:	2f03      	cmp	r7, #3
 800cf38:	d005      	beq.n	800cf46 <USBD_StdEPReq+0x4c>
 800cf3a:	2f00      	cmp	r7, #0
 800cf3c:	d059      	beq.n	800cff2 <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 800cf3e:	4629      	mov	r1, r5
 800cf40:	f7ff fdb4 	bl	800caac <USBD_CtlError>
          break;
 800cf44:	e7f2      	b.n	800cf2c <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800cf46:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	d005      	beq.n	800cf5c <USBD_StdEPReq+0x62>
 800cf50:	2b03      	cmp	r3, #3
 800cf52:	d012      	beq.n	800cf7a <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 800cf54:	4629      	mov	r1, r5
 800cf56:	f7ff fda9 	bl	800caac <USBD_CtlError>
              break;
 800cf5a:	e7e7      	b.n	800cf2c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf5c:	b109      	cbz	r1, 800cf62 <USBD_StdEPReq+0x68>
 800cf5e:	2980      	cmp	r1, #128	; 0x80
 800cf60:	d104      	bne.n	800cf6c <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 800cf62:	4629      	mov	r1, r5
 800cf64:	4630      	mov	r0, r6
 800cf66:	f7ff fda1 	bl	800caac <USBD_CtlError>
 800cf6a:	e7df      	b.n	800cf2c <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cf6c:	f000 faff 	bl	800d56e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf70:	2180      	movs	r1, #128	; 0x80
 800cf72:	4630      	mov	r0, r6
 800cf74:	f000 fafb 	bl	800d56e <USBD_LL_StallEP>
 800cf78:	e7d8      	b.n	800cf2c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cf7a:	886b      	ldrh	r3, [r5, #2]
 800cf7c:	b923      	cbnz	r3, 800cf88 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cf7e:	b119      	cbz	r1, 800cf88 <USBD_StdEPReq+0x8e>
 800cf80:	2980      	cmp	r1, #128	; 0x80
 800cf82:	d001      	beq.n	800cf88 <USBD_StdEPReq+0x8e>
 800cf84:	88eb      	ldrh	r3, [r5, #6]
 800cf86:	b11b      	cbz	r3, 800cf90 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 800cf88:	4630      	mov	r0, r6
 800cf8a:	f000 f8f5 	bl	800d178 <USBD_CtlSendStatus>
              break;
 800cf8e:	e7cd      	b.n	800cf2c <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cf90:	f000 faed 	bl	800d56e <USBD_LL_StallEP>
 800cf94:	e7f8      	b.n	800cf88 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 800cf96:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	2b02      	cmp	r3, #2
 800cf9e:	d005      	beq.n	800cfac <USBD_StdEPReq+0xb2>
 800cfa0:	2b03      	cmp	r3, #3
 800cfa2:	d012      	beq.n	800cfca <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	f7ff fd81 	bl	800caac <USBD_CtlError>
              break;
 800cfaa:	e7bf      	b.n	800cf2c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cfac:	b109      	cbz	r1, 800cfb2 <USBD_StdEPReq+0xb8>
 800cfae:	2980      	cmp	r1, #128	; 0x80
 800cfb0:	d104      	bne.n	800cfbc <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 800cfb2:	4629      	mov	r1, r5
 800cfb4:	4630      	mov	r0, r6
 800cfb6:	f7ff fd79 	bl	800caac <USBD_CtlError>
 800cfba:	e7b7      	b.n	800cf2c <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cfbc:	f000 fad7 	bl	800d56e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cfc0:	2180      	movs	r1, #128	; 0x80
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	f000 fad3 	bl	800d56e <USBD_LL_StallEP>
 800cfc8:	e7b0      	b.n	800cf2c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cfca:	886b      	ldrh	r3, [r5, #2]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1ad      	bne.n	800cf2c <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 800cfd0:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800cfd4:	d10a      	bne.n	800cfec <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 800cfd6:	4630      	mov	r0, r6
 800cfd8:	f000 f8ce 	bl	800d178 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cfdc:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800cfe0:	689b      	ldr	r3, [r3, #8]
 800cfe2:	4629      	mov	r1, r5
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	4798      	blx	r3
 800cfe8:	4604      	mov	r4, r0
 800cfea:	e79f      	b.n	800cf2c <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cfec:	f000 fac7 	bl	800d57e <USBD_LL_ClearStallEP>
 800cff0:	e7f1      	b.n	800cfd6 <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 800cff2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800cff6:	b2d2      	uxtb	r2, r2
 800cff8:	2a02      	cmp	r2, #2
 800cffa:	d006      	beq.n	800d00a <USBD_StdEPReq+0x110>
 800cffc:	2a03      	cmp	r2, #3
 800cffe:	d029      	beq.n	800d054 <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 800d000:	4629      	mov	r1, r5
 800d002:	f7ff fd53 	bl	800caac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800d006:	463c      	mov	r4, r7
              break;
 800d008:	e790      	b.n	800cf2c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d00a:	b109      	cbz	r1, 800d010 <USBD_StdEPReq+0x116>
 800d00c:	2980      	cmp	r1, #128	; 0x80
 800d00e:	d113      	bne.n	800d038 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d010:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d014:	d115      	bne.n	800d042 <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d016:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d01a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d01e:	0089      	lsls	r1, r1, #2
 800d020:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800d024:	4431      	add	r1, r6
 800d026:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800d028:	2300      	movs	r3, #0
 800d02a:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d02c:	2202      	movs	r2, #2
 800d02e:	4630      	mov	r0, r6
 800d030:	f000 f876 	bl	800d120 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800d034:	463c      	mov	r4, r7
              break;
 800d036:	e779      	b.n	800cf2c <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 800d038:	4629      	mov	r1, r5
 800d03a:	f7ff fd37 	bl	800caac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800d03e:	463c      	mov	r4, r7
                break;
 800d040:	e774      	b.n	800cf2c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d042:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d046:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d04a:	0089      	lsls	r1, r1, #2
 800d04c:	3110      	adds	r1, #16
 800d04e:	4431      	add	r1, r6
 800d050:	3104      	adds	r1, #4
 800d052:	e7e9      	b.n	800d028 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 800d054:	b25b      	sxtb	r3, r3
 800d056:	2b00      	cmp	r3, #0
 800d058:	db1f      	blt.n	800d09a <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d05a:	f001 020f 	and.w	r2, r1, #15
 800d05e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800d062:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d066:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800d06a:	b322      	cbz	r2, 800d0b6 <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	db27      	blt.n	800d0c0 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d070:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d074:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d078:	009c      	lsls	r4, r3, #2
 800d07a:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 800d07e:	4434      	add	r4, r6
 800d080:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d082:	b109      	cbz	r1, 800d088 <USBD_StdEPReq+0x18e>
 800d084:	2980      	cmp	r1, #128	; 0x80
 800d086:	d124      	bne.n	800d0d2 <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 800d088:	2300      	movs	r3, #0
 800d08a:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d08c:	2202      	movs	r2, #2
 800d08e:	4621      	mov	r1, r4
 800d090:	4630      	mov	r0, r6
 800d092:	f000 f845 	bl	800d120 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800d096:	463c      	mov	r4, r7
              break;
 800d098:	e748      	b.n	800cf2c <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d09a:	f001 020f 	and.w	r2, r1, #15
 800d09e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800d0a2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d0a6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800d0a8:	2a00      	cmp	r2, #0
 800d0aa:	d1df      	bne.n	800d06c <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 800d0ac:	4629      	mov	r1, r5
 800d0ae:	f7ff fcfd 	bl	800caac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800d0b2:	463c      	mov	r4, r7
                  break;
 800d0b4:	e73a      	b.n	800cf2c <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 800d0b6:	4629      	mov	r1, r5
 800d0b8:	f7ff fcf8 	bl	800caac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800d0bc:	463c      	mov	r4, r7
                  break;
 800d0be:	e735      	b.n	800cf2c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0c0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800d0c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d0c8:	009c      	lsls	r4, r3, #2
 800d0ca:	3410      	adds	r4, #16
 800d0cc:	4434      	add	r4, r6
 800d0ce:	3404      	adds	r4, #4
 800d0d0:	e7d7      	b.n	800d082 <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d0d2:	4630      	mov	r0, r6
 800d0d4:	f000 fa5b 	bl	800d58e <USBD_LL_IsStallEP>
 800d0d8:	b110      	cbz	r0, 800d0e0 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 800d0da:	2301      	movs	r3, #1
 800d0dc:	6023      	str	r3, [r4, #0]
 800d0de:	e7d5      	b.n	800d08c <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	6023      	str	r3, [r4, #0]
 800d0e4:	e7d2      	b.n	800d08c <USBD_StdEPReq+0x192>

0800d0e6 <USBD_GetString>:
  if (desc == NULL)
 800d0e6:	b1d0      	cbz	r0, 800d11e <USBD_GetString+0x38>
{
 800d0e8:	b570      	push	{r4, r5, r6, lr}
 800d0ea:	460d      	mov	r5, r1
 800d0ec:	4616      	mov	r6, r2
 800d0ee:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d0f0:	f7ff fcb4 	bl	800ca5c <USBD_GetLen>
 800d0f4:	1c43      	adds	r3, r0, #1
 800d0f6:	005b      	lsls	r3, r3, #1
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800d0fc:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d0fe:	2303      	movs	r3, #3
 800d100:	706b      	strb	r3, [r5, #1]
  idx++;
 800d102:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800d104:	e007      	b.n	800d116 <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 800d106:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800d108:	3401      	adds	r4, #1
    idx++;
 800d10a:	1c5a      	adds	r2, r3, #1
 800d10c:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800d10e:	2100      	movs	r1, #0
 800d110:	54a9      	strb	r1, [r5, r2]
    idx++;
 800d112:	3302      	adds	r3, #2
 800d114:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800d116:	7822      	ldrb	r2, [r4, #0]
 800d118:	2a00      	cmp	r2, #0
 800d11a:	d1f4      	bne.n	800d106 <USBD_GetString+0x20>
}
 800d11c:	bd70      	pop	{r4, r5, r6, pc}
 800d11e:	4770      	bx	lr

0800d120 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d120:	b508      	push	{r3, lr}
 800d122:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d124:	2202      	movs	r2, #2
 800d126:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d12a:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d12c:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d12e:	460a      	mov	r2, r1
 800d130:	2100      	movs	r1, #0
 800d132:	f000 fa4b 	bl	800d5cc <USBD_LL_Transmit>

  return USBD_OK;
}
 800d136:	2000      	movs	r0, #0
 800d138:	bd08      	pop	{r3, pc}

0800d13a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d13a:	b508      	push	{r3, lr}
 800d13c:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d13e:	460a      	mov	r2, r1
 800d140:	2100      	movs	r1, #0
 800d142:	f000 fa43 	bl	800d5cc <USBD_LL_Transmit>

  return USBD_OK;
}
 800d146:	2000      	movs	r0, #0
 800d148:	bd08      	pop	{r3, pc}

0800d14a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d14a:	b508      	push	{r3, lr}
 800d14c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d14e:	2203      	movs	r2, #3
 800d150:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d154:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d158:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d15c:	460a      	mov	r2, r1
 800d15e:	2100      	movs	r1, #0
 800d160:	f000 fa3c 	bl	800d5dc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800d164:	2000      	movs	r0, #0
 800d166:	bd08      	pop	{r3, pc}

0800d168 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d168:	b508      	push	{r3, lr}
 800d16a:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d16c:	460a      	mov	r2, r1
 800d16e:	2100      	movs	r1, #0
 800d170:	f000 fa34 	bl	800d5dc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800d174:	2000      	movs	r0, #0
 800d176:	bd08      	pop	{r3, pc}

0800d178 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d178:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d17a:	2204      	movs	r2, #4
 800d17c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d180:	2300      	movs	r3, #0
 800d182:	461a      	mov	r2, r3
 800d184:	4619      	mov	r1, r3
 800d186:	f000 fa21 	bl	800d5cc <USBD_LL_Transmit>

  return USBD_OK;
}
 800d18a:	2000      	movs	r0, #0
 800d18c:	bd08      	pop	{r3, pc}

0800d18e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d18e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d190:	2205      	movs	r2, #5
 800d192:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d196:	2300      	movs	r3, #0
 800d198:	461a      	mov	r2, r3
 800d19a:	4619      	mov	r1, r3
 800d19c:	f000 fa1e 	bl	800d5dc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800d1a0:	2000      	movs	r0, #0
 800d1a2:	bd08      	pop	{r3, pc}

0800d1a4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d1a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	490f      	ldr	r1, [pc, #60]	; (800d1e8 <MX_USB_Device_Init+0x44>)
 800d1aa:	4810      	ldr	r0, [pc, #64]	; (800d1ec <MX_USB_Device_Init+0x48>)
 800d1ac:	f7ff faf1 	bl	800c792 <USBD_Init>
 800d1b0:	b970      	cbnz	r0, 800d1d0 <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d1b2:	490f      	ldr	r1, [pc, #60]	; (800d1f0 <MX_USB_Device_Init+0x4c>)
 800d1b4:	480d      	ldr	r0, [pc, #52]	; (800d1ec <MX_USB_Device_Init+0x48>)
 800d1b6:	f7ff fb03 	bl	800c7c0 <USBD_RegisterClass>
 800d1ba:	b960      	cbnz	r0, 800d1d6 <MX_USB_Device_Init+0x32>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d1bc:	490d      	ldr	r1, [pc, #52]	; (800d1f4 <MX_USB_Device_Init+0x50>)
 800d1be:	480b      	ldr	r0, [pc, #44]	; (800d1ec <MX_USB_Device_Init+0x48>)
 800d1c0:	f7ff fab3 	bl	800c72a <USBD_CDC_RegisterInterface>
 800d1c4:	b950      	cbnz	r0, 800d1dc <MX_USB_Device_Init+0x38>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d1c6:	4809      	ldr	r0, [pc, #36]	; (800d1ec <MX_USB_Device_Init+0x48>)
 800d1c8:	f7ff fb11 	bl	800c7ee <USBD_Start>
 800d1cc:	b948      	cbnz	r0, 800d1e2 <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d1ce:	bd08      	pop	{r3, pc}
    Error_Handler();
 800d1d0:	f7f4 fed2 	bl	8001f78 <Error_Handler>
 800d1d4:	e7ed      	b.n	800d1b2 <MX_USB_Device_Init+0xe>
    Error_Handler();
 800d1d6:	f7f4 fecf 	bl	8001f78 <Error_Handler>
 800d1da:	e7ef      	b.n	800d1bc <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d1dc:	f7f4 fecc 	bl	8001f78 <Error_Handler>
 800d1e0:	e7f1      	b.n	800d1c6 <MX_USB_Device_Init+0x22>
    Error_Handler();
 800d1e2:	f7f4 fec9 	bl	8001f78 <Error_Handler>
}
 800d1e6:	e7f2      	b.n	800d1ce <MX_USB_Device_Init+0x2a>
 800d1e8:	20001330 	.word	0x20001330
 800d1ec:	20012618 	.word	0x20012618
 800d1f0:	2000120c 	.word	0x2000120c
 800d1f4:	2000131c 	.word	0x2000131c

0800d1f8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800d1f8:	2000      	movs	r0, #0
 800d1fa:	4770      	bx	lr

0800d1fc <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800d1fc:	2000      	movs	r0, #0
 800d1fe:	4770      	bx	lr

0800d200 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800d200:	2000      	movs	r0, #0
 800d202:	4770      	bx	lr

0800d204 <CDC_Receive_FS>:
{
 800d204:	b510      	push	{r4, lr}
 800d206:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d208:	4c04      	ldr	r4, [pc, #16]	; (800d21c <CDC_Receive_FS+0x18>)
 800d20a:	4620      	mov	r0, r4
 800d20c:	f7ff fa9f 	bl	800c74e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d210:	4620      	mov	r0, r4
 800d212:	f7ff faa5 	bl	800c760 <USBD_CDC_ReceivePacket>
}
 800d216:	2000      	movs	r0, #0
 800d218:	bd10      	pop	{r4, pc}
 800d21a:	bf00      	nop
 800d21c:	20012618 	.word	0x20012618

0800d220 <CDC_Init_FS>:
{
 800d220:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d222:	4c06      	ldr	r4, [pc, #24]	; (800d23c <CDC_Init_FS+0x1c>)
 800d224:	2200      	movs	r2, #0
 800d226:	4906      	ldr	r1, [pc, #24]	; (800d240 <CDC_Init_FS+0x20>)
 800d228:	4620      	mov	r0, r4
 800d22a:	f7ff fa85 	bl	800c738 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d22e:	4905      	ldr	r1, [pc, #20]	; (800d244 <CDC_Init_FS+0x24>)
 800d230:	4620      	mov	r0, r4
 800d232:	f7ff fa8c 	bl	800c74e <USBD_CDC_SetRxBuffer>
}
 800d236:	2000      	movs	r0, #0
 800d238:	bd10      	pop	{r4, pc}
 800d23a:	bf00      	nop
 800d23c:	20012618 	.word	0x20012618
 800d240:	200130e8 	.word	0x200130e8
 800d244:	200128e8 	.word	0x200128e8

0800d248 <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d248:	2312      	movs	r3, #18
 800d24a:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 800d24c:	4800      	ldr	r0, [pc, #0]	; (800d250 <USBD_CDC_DeviceDescriptor+0x8>)
 800d24e:	4770      	bx	lr
 800d250:	20001350 	.word	0x20001350

0800d254 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d254:	2304      	movs	r3, #4
 800d256:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800d258:	4800      	ldr	r0, [pc, #0]	; (800d25c <USBD_CDC_LangIDStrDescriptor+0x8>)
 800d25a:	4770      	bx	lr
 800d25c:	20001364 	.word	0x20001364

0800d260 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800d260:	2300      	movs	r3, #0
 800d262:	4293      	cmp	r3, r2
 800d264:	d21e      	bcs.n	800d2a4 <IntToUnicode+0x44>
{
 800d266:	b500      	push	{lr}
 800d268:	e010      	b.n	800d28c <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d26a:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 800d26e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 800d272:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800d274:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800d278:	f10c 0c01 	add.w	ip, ip, #1
 800d27c:	f04f 0e00 	mov.w	lr, #0
 800d280:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 800d284:	3301      	adds	r3, #1
 800d286:	b2db      	uxtb	r3, r3
 800d288:	4293      	cmp	r3, r2
 800d28a:	d209      	bcs.n	800d2a0 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 800d28c:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 800d290:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 800d294:	d2e9      	bcs.n	800d26a <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800d296:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800d29a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800d29e:	e7e8      	b.n	800d272 <IntToUnicode+0x12>
  }
}
 800d2a0:	f85d fb04 	ldr.w	pc, [sp], #4
 800d2a4:	4770      	bx	lr
	...

0800d2a8 <Get_SerialNum>:
{
 800d2a8:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d2aa:	4b0b      	ldr	r3, [pc, #44]	; (800d2d8 <Get_SerialNum+0x30>)
 800d2ac:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d2b0:	f8d3 4594 	ldr.w	r4, [r3, #1428]	; 0x594
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d2b4:	f8d3 3598 	ldr.w	r3, [r3, #1432]	; 0x598
  if (deviceserial0 != 0)
 800d2b8:	18c0      	adds	r0, r0, r3
 800d2ba:	d100      	bne.n	800d2be <Get_SerialNum+0x16>
}
 800d2bc:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d2be:	4d07      	ldr	r5, [pc, #28]	; (800d2dc <Get_SerialNum+0x34>)
 800d2c0:	2208      	movs	r2, #8
 800d2c2:	1ca9      	adds	r1, r5, #2
 800d2c4:	f7ff ffcc 	bl	800d260 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d2c8:	2204      	movs	r2, #4
 800d2ca:	f105 0112 	add.w	r1, r5, #18
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f7ff ffc6 	bl	800d260 <IntToUnicode>
}
 800d2d4:	e7f2      	b.n	800d2bc <Get_SerialNum+0x14>
 800d2d6:	bf00      	nop
 800d2d8:	1fff7000 	.word	0x1fff7000
 800d2dc:	20001368 	.word	0x20001368

0800d2e0 <USBD_CDC_SerialStrDescriptor>:
{
 800d2e0:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800d2e2:	231a      	movs	r3, #26
 800d2e4:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800d2e6:	f7ff ffdf 	bl	800d2a8 <Get_SerialNum>
}
 800d2ea:	4801      	ldr	r0, [pc, #4]	; (800d2f0 <USBD_CDC_SerialStrDescriptor+0x10>)
 800d2ec:	bd08      	pop	{r3, pc}
 800d2ee:	bf00      	nop
 800d2f0:	20001368 	.word	0x20001368

0800d2f4 <USBD_CDC_ProductStrDescriptor>:
{
 800d2f4:	b508      	push	{r3, lr}
 800d2f6:	460a      	mov	r2, r1
  if(speed == 0)
 800d2f8:	b928      	cbnz	r0, 800d306 <USBD_CDC_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d2fa:	4905      	ldr	r1, [pc, #20]	; (800d310 <USBD_CDC_ProductStrDescriptor+0x1c>)
 800d2fc:	4805      	ldr	r0, [pc, #20]	; (800d314 <USBD_CDC_ProductStrDescriptor+0x20>)
 800d2fe:	f7ff fef2 	bl	800d0e6 <USBD_GetString>
}
 800d302:	4803      	ldr	r0, [pc, #12]	; (800d310 <USBD_CDC_ProductStrDescriptor+0x1c>)
 800d304:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d306:	4902      	ldr	r1, [pc, #8]	; (800d310 <USBD_CDC_ProductStrDescriptor+0x1c>)
 800d308:	4802      	ldr	r0, [pc, #8]	; (800d314 <USBD_CDC_ProductStrDescriptor+0x20>)
 800d30a:	f7ff feec 	bl	800d0e6 <USBD_GetString>
 800d30e:	e7f8      	b.n	800d302 <USBD_CDC_ProductStrDescriptor+0xe>
 800d310:	200138e8 	.word	0x200138e8
 800d314:	0801403c 	.word	0x0801403c

0800d318 <USBD_CDC_ManufacturerStrDescriptor>:
{
 800d318:	b510      	push	{r4, lr}
 800d31a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d31c:	4c03      	ldr	r4, [pc, #12]	; (800d32c <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 800d31e:	4621      	mov	r1, r4
 800d320:	4803      	ldr	r0, [pc, #12]	; (800d330 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 800d322:	f7ff fee0 	bl	800d0e6 <USBD_GetString>
}
 800d326:	4620      	mov	r0, r4
 800d328:	bd10      	pop	{r4, pc}
 800d32a:	bf00      	nop
 800d32c:	200138e8 	.word	0x200138e8
 800d330:	08014054 	.word	0x08014054

0800d334 <USBD_CDC_ConfigStrDescriptor>:
{
 800d334:	b508      	push	{r3, lr}
 800d336:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800d338:	b928      	cbnz	r0, 800d346 <USBD_CDC_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d33a:	4905      	ldr	r1, [pc, #20]	; (800d350 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800d33c:	4805      	ldr	r0, [pc, #20]	; (800d354 <USBD_CDC_ConfigStrDescriptor+0x20>)
 800d33e:	f7ff fed2 	bl	800d0e6 <USBD_GetString>
}
 800d342:	4803      	ldr	r0, [pc, #12]	; (800d350 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800d344:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d346:	4902      	ldr	r1, [pc, #8]	; (800d350 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800d348:	4802      	ldr	r0, [pc, #8]	; (800d354 <USBD_CDC_ConfigStrDescriptor+0x20>)
 800d34a:	f7ff fecc 	bl	800d0e6 <USBD_GetString>
 800d34e:	e7f8      	b.n	800d342 <USBD_CDC_ConfigStrDescriptor+0xe>
 800d350:	200138e8 	.word	0x200138e8
 800d354:	08014068 	.word	0x08014068

0800d358 <USBD_CDC_InterfaceStrDescriptor>:
{
 800d358:	b508      	push	{r3, lr}
 800d35a:	460a      	mov	r2, r1
  if(speed == 0)
 800d35c:	b928      	cbnz	r0, 800d36a <USBD_CDC_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d35e:	4905      	ldr	r1, [pc, #20]	; (800d374 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800d360:	4805      	ldr	r0, [pc, #20]	; (800d378 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 800d362:	f7ff fec0 	bl	800d0e6 <USBD_GetString>
}
 800d366:	4803      	ldr	r0, [pc, #12]	; (800d374 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800d368:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d36a:	4902      	ldr	r1, [pc, #8]	; (800d374 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800d36c:	4802      	ldr	r0, [pc, #8]	; (800d378 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 800d36e:	f7ff feba 	bl	800d0e6 <USBD_GetString>
 800d372:	e7f8      	b.n	800d366 <USBD_CDC_InterfaceStrDescriptor+0xe>
 800d374:	200138e8 	.word	0x200138e8
 800d378:	08014074 	.word	0x08014074

0800d37c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800d37c:	2803      	cmp	r0, #3
 800d37e:	d805      	bhi.n	800d38c <USBD_Get_USB_Status+0x10>
 800d380:	e8df f000 	tbb	[pc, r0]
 800d384:	05020405 	.word	0x05020405
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d388:	2001      	movs	r0, #1
    break;
 800d38a:	4770      	bx	lr
      usb_status = USBD_FAIL;
 800d38c:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800d38e:	4770      	bx	lr

0800d390 <SystemClockConfig_Resume>:
{
 800d390:	b508      	push	{r3, lr}
  SystemClock_Config();
 800d392:	f7f4 fdf9 	bl	8001f88 <SystemClock_Config>
}
 800d396:	bd08      	pop	{r3, pc}

0800d398 <HAL_PCD_MspInit>:
{
 800d398:	b510      	push	{r4, lr}
 800d39a:	b096      	sub	sp, #88	; 0x58
 800d39c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d39e:	2254      	movs	r2, #84	; 0x54
 800d3a0:	2100      	movs	r1, #0
 800d3a2:	a801      	add	r0, sp, #4
 800d3a4:	f001 fae4 	bl	800e970 <memset>
  if(pcdHandle->Instance==USB)
 800d3a8:	6822      	ldr	r2, [r4, #0]
 800d3aa:	4b11      	ldr	r3, [pc, #68]	; (800d3f0 <HAL_PCD_MspInit+0x58>)
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d001      	beq.n	800d3b4 <HAL_PCD_MspInit+0x1c>
}
 800d3b0:	b016      	add	sp, #88	; 0x58
 800d3b2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d3b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d3b8:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d3ba:	a801      	add	r0, sp, #4
 800d3bc:	f7fc f824 	bl	8009408 <HAL_RCCEx_PeriphCLKConfig>
 800d3c0:	b990      	cbnz	r0, 800d3e8 <HAL_PCD_MspInit+0x50>
    __HAL_RCC_USB_CLK_ENABLE();
 800d3c2:	4b0c      	ldr	r3, [pc, #48]	; (800d3f4 <HAL_PCD_MspInit+0x5c>)
 800d3c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d3c6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d3ca:	659a      	str	r2, [r3, #88]	; 0x58
 800d3cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d3d2:	9300      	str	r3, [sp, #0]
 800d3d4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	4611      	mov	r1, r2
 800d3da:	2014      	movs	r0, #20
 800d3dc:	f7f9 f8e0 	bl	80065a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d3e0:	2014      	movs	r0, #20
 800d3e2:	f7f9 f915 	bl	8006610 <HAL_NVIC_EnableIRQ>
}
 800d3e6:	e7e3      	b.n	800d3b0 <HAL_PCD_MspInit+0x18>
      Error_Handler();
 800d3e8:	f7f4 fdc6 	bl	8001f78 <Error_Handler>
 800d3ec:	e7e9      	b.n	800d3c2 <HAL_PCD_MspInit+0x2a>
 800d3ee:	bf00      	nop
 800d3f0:	40005c00 	.word	0x40005c00
 800d3f4:	40021000 	.word	0x40021000

0800d3f8 <HAL_PCD_SetupStageCallback>:
{
 800d3f8:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d3fa:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800d3fe:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800d402:	f7ff fa09 	bl	800c818 <USBD_LL_SetupStage>
}
 800d406:	bd08      	pop	{r3, pc}

0800d408 <HAL_PCD_DataOutStageCallback>:
{
 800d408:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d40a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800d40e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d412:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800d416:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800d41a:	f7ff fa29 	bl	800c870 <USBD_LL_DataOutStage>
}
 800d41e:	bd08      	pop	{r3, pc}

0800d420 <HAL_PCD_DataInStageCallback>:
{
 800d420:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d422:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800d426:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d42a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d42c:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800d430:	f7ff fa5a 	bl	800c8e8 <USBD_LL_DataInStage>
}
 800d434:	bd08      	pop	{r3, pc}

0800d436 <HAL_PCD_SOFCallback>:
{
 800d436:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d438:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800d43c:	f7ff fafa 	bl	800ca34 <USBD_LL_SOF>
}
 800d440:	bd08      	pop	{r3, pc}

0800d442 <HAL_PCD_ResetCallback>:
{
 800d442:	b510      	push	{r4, lr}
 800d444:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d446:	6883      	ldr	r3, [r0, #8]
 800d448:	2b02      	cmp	r3, #2
 800d44a:	d109      	bne.n	800d460 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d44c:	2101      	movs	r1, #1
 800d44e:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800d452:	f7ff fad5 	bl	800ca00 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d456:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800d45a:	f7ff faa4 	bl	800c9a6 <USBD_LL_Reset>
}
 800d45e:	bd10      	pop	{r4, pc}
    Error_Handler();
 800d460:	f7f4 fd8a 	bl	8001f78 <Error_Handler>
 800d464:	e7f2      	b.n	800d44c <HAL_PCD_ResetCallback+0xa>
	...

0800d468 <HAL_PCD_SuspendCallback>:
{
 800d468:	b510      	push	{r4, lr}
 800d46a:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d46c:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800d470:	f7ff fac9 	bl	800ca06 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800d474:	69a3      	ldr	r3, [r4, #24]
 800d476:	b123      	cbz	r3, 800d482 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d478:	4a02      	ldr	r2, [pc, #8]	; (800d484 <HAL_PCD_SuspendCallback+0x1c>)
 800d47a:	6913      	ldr	r3, [r2, #16]
 800d47c:	f043 0306 	orr.w	r3, r3, #6
 800d480:	6113      	str	r3, [r2, #16]
}
 800d482:	bd10      	pop	{r4, pc}
 800d484:	e000ed00 	.word	0xe000ed00

0800d488 <HAL_PCD_ResumeCallback>:
{
 800d488:	b510      	push	{r4, lr}
 800d48a:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800d48c:	6983      	ldr	r3, [r0, #24]
 800d48e:	b923      	cbnz	r3, 800d49a <HAL_PCD_ResumeCallback+0x12>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d490:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800d494:	f7ff fac1 	bl	800ca1a <USBD_LL_Resume>
}
 800d498:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d49a:	4a04      	ldr	r2, [pc, #16]	; (800d4ac <HAL_PCD_ResumeCallback+0x24>)
 800d49c:	6913      	ldr	r3, [r2, #16]
 800d49e:	f023 0306 	bic.w	r3, r3, #6
 800d4a2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d4a4:	f7ff ff74 	bl	800d390 <SystemClockConfig_Resume>
 800d4a8:	e7f2      	b.n	800d490 <HAL_PCD_ResumeCallback+0x8>
 800d4aa:	bf00      	nop
 800d4ac:	e000ed00 	.word	0xe000ed00

0800d4b0 <USBD_LL_Init>:
{
 800d4b0:	b510      	push	{r4, lr}
 800d4b2:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800d4b4:	481e      	ldr	r0, [pc, #120]	; (800d530 <USBD_LL_Init+0x80>)
 800d4b6:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800d4ba:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Instance = USB;
 800d4be:	4b1d      	ldr	r3, [pc, #116]	; (800d534 <USBD_LL_Init+0x84>)
 800d4c0:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d4c2:	2308      	movs	r3, #8
 800d4c4:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d4c6:	2302      	movs	r3, #2
 800d4c8:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d4ca:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d4d0:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d4d2:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d4d4:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d4d6:	f7fa fb0e 	bl	8007af6 <HAL_PCD_Init>
 800d4da:	bb30      	cbnz	r0, 800d52a <USBD_LL_Init+0x7a>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d4dc:	2318      	movs	r3, #24
 800d4de:	2200      	movs	r2, #0
 800d4e0:	4611      	mov	r1, r2
 800d4e2:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800d4e6:	f7fb fa40 	bl	800896a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d4ea:	2358      	movs	r3, #88	; 0x58
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	2180      	movs	r1, #128	; 0x80
 800d4f0:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800d4f4:	f7fb fa39 	bl	800896a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d4f8:	23c0      	movs	r3, #192	; 0xc0
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	2181      	movs	r1, #129	; 0x81
 800d4fe:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800d502:	f7fb fa32 	bl	800896a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d506:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d50a:	2200      	movs	r2, #0
 800d50c:	2101      	movs	r1, #1
 800d50e:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800d512:	f7fb fa2a 	bl	800896a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d51a:	2200      	movs	r2, #0
 800d51c:	2182      	movs	r1, #130	; 0x82
 800d51e:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800d522:	f7fb fa22 	bl	800896a <HAL_PCDEx_PMAConfig>
}
 800d526:	2000      	movs	r0, #0
 800d528:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800d52a:	f7f4 fd25 	bl	8001f78 <Error_Handler>
 800d52e:	e7d5      	b.n	800d4dc <USBD_LL_Init+0x2c>
 800d530:	20013ae8 	.word	0x20013ae8
 800d534:	40005c00 	.word	0x40005c00

0800d538 <USBD_LL_Start>:
{
 800d538:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800d53a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d53e:	f7fa fb4c 	bl	8007bda <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d542:	f7ff ff1b 	bl	800d37c <USBD_Get_USB_Status>
}
 800d546:	bd08      	pop	{r3, pc}

0800d548 <USBD_LL_OpenEP>:
{
 800d548:	b508      	push	{r3, lr}
 800d54a:	4694      	mov	ip, r2
 800d54c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d54e:	4663      	mov	r3, ip
 800d550:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d554:	f7fb f8d2 	bl	80086fc <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d558:	f7ff ff10 	bl	800d37c <USBD_Get_USB_Status>
}
 800d55c:	bd08      	pop	{r3, pc}

0800d55e <USBD_LL_CloseEP>:
{
 800d55e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d560:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d564:	f7fb f90c 	bl	8008780 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d568:	f7ff ff08 	bl	800d37c <USBD_Get_USB_Status>
}
 800d56c:	bd08      	pop	{r3, pc}

0800d56e <USBD_LL_StallEP>:
{
 800d56e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d570:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d574:	f7fb f989 	bl	800888a <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d578:	f7ff ff00 	bl	800d37c <USBD_Get_USB_Status>
}
 800d57c:	bd08      	pop	{r3, pc}

0800d57e <USBD_LL_ClearStallEP>:
{
 800d57e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d580:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d584:	f7fb f9b6 	bl	80088f4 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d588:	f7ff fef8 	bl	800d37c <USBD_Get_USB_Status>
}
 800d58c:	bd08      	pop	{r3, pc}

0800d58e <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d58e:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800d592:	f011 0f80 	tst.w	r1, #128	; 0x80
 800d596:	d108      	bne.n	800d5aa <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d598:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d59c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d5a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d5a4:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800d5a8:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d5aa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d5ae:	3101      	adds	r1, #1
 800d5b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d5b4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d5b8:	7888      	ldrb	r0, [r1, #2]
 800d5ba:	4770      	bx	lr

0800d5bc <USBD_LL_SetUSBAddress>:
{
 800d5bc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d5be:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d5c2:	f7fa ffae 	bl	8008522 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5c6:	f7ff fed9 	bl	800d37c <USBD_Get_USB_Status>
}
 800d5ca:	bd08      	pop	{r3, pc}

0800d5cc <USBD_LL_Transmit>:
{
 800d5cc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d5ce:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d5d2:	f7fb f932 	bl	800883a <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5d6:	f7ff fed1 	bl	800d37c <USBD_Get_USB_Status>
}
 800d5da:	bd08      	pop	{r3, pc}

0800d5dc <USBD_LL_PrepareReceive>:
{
 800d5dc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d5de:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d5e2:	f7fb f8ff 	bl	80087e4 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5e6:	f7ff fec9 	bl	800d37c <USBD_Get_USB_Status>
}
 800d5ea:	bd08      	pop	{r3, pc}

0800d5ec <USBD_LL_GetRxDataSize>:
{
 800d5ec:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d5ee:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d5f2:	f7fb f919 	bl	8008828 <HAL_PCD_EP_GetRxCount>
}
 800d5f6:	bd08      	pop	{r3, pc}

0800d5f8 <HAL_PCDEx_LPM_Callback>:
{
 800d5f8:	b510      	push	{r4, lr}
 800d5fa:	4604      	mov	r4, r0
  switch (msg)
 800d5fc:	b111      	cbz	r1, 800d604 <HAL_PCDEx_LPM_Callback+0xc>
 800d5fe:	2901      	cmp	r1, #1
 800d600:	d00f      	beq.n	800d622 <HAL_PCDEx_LPM_Callback+0x2a>
}
 800d602:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 800d604:	6983      	ldr	r3, [r0, #24]
 800d606:	b923      	cbnz	r3, 800d612 <HAL_PCDEx_LPM_Callback+0x1a>
    USBD_LL_Resume(hpcd->pData);
 800d608:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800d60c:	f7ff fa05 	bl	800ca1a <USBD_LL_Resume>
    break;
 800d610:	e7f7      	b.n	800d602 <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 800d612:	f7ff febd 	bl	800d390 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d616:	4a09      	ldr	r2, [pc, #36]	; (800d63c <HAL_PCDEx_LPM_Callback+0x44>)
 800d618:	6913      	ldr	r3, [r2, #16]
 800d61a:	f023 0306 	bic.w	r3, r3, #6
 800d61e:	6113      	str	r3, [r2, #16]
 800d620:	e7f2      	b.n	800d608 <HAL_PCDEx_LPM_Callback+0x10>
    USBD_LL_Suspend(hpcd->pData);
 800d622:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800d626:	f7ff f9ee 	bl	800ca06 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d62a:	69a3      	ldr	r3, [r4, #24]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d0e8      	beq.n	800d602 <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d630:	4a02      	ldr	r2, [pc, #8]	; (800d63c <HAL_PCDEx_LPM_Callback+0x44>)
 800d632:	6913      	ldr	r3, [r2, #16]
 800d634:	f043 0306 	orr.w	r3, r3, #6
 800d638:	6113      	str	r3, [r2, #16]
}
 800d63a:	e7e2      	b.n	800d602 <HAL_PCDEx_LPM_Callback+0xa>
 800d63c:	e000ed00 	.word	0xe000ed00

0800d640 <USBD_static_malloc>:
}
 800d640:	4800      	ldr	r0, [pc, #0]	; (800d644 <USBD_static_malloc+0x4>)
 800d642:	4770      	bx	lr
 800d644:	20013ddc 	.word	0x20013ddc

0800d648 <USBD_static_free>:
}
 800d648:	4770      	bx	lr
	...

0800d64c <round>:
 800d64c:	ec51 0b10 	vmov	r0, r1, d0
 800d650:	b570      	push	{r4, r5, r6, lr}
 800d652:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d656:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d65a:	2c13      	cmp	r4, #19
 800d65c:	ee10 2a10 	vmov	r2, s0
 800d660:	460b      	mov	r3, r1
 800d662:	dc19      	bgt.n	800d698 <round+0x4c>
 800d664:	2c00      	cmp	r4, #0
 800d666:	da09      	bge.n	800d67c <round+0x30>
 800d668:	3401      	adds	r4, #1
 800d66a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d66e:	d103      	bne.n	800d678 <round+0x2c>
 800d670:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d674:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d678:	2200      	movs	r2, #0
 800d67a:	e028      	b.n	800d6ce <round+0x82>
 800d67c:	4d15      	ldr	r5, [pc, #84]	; (800d6d4 <round+0x88>)
 800d67e:	4125      	asrs	r5, r4
 800d680:	ea01 0605 	and.w	r6, r1, r5
 800d684:	4332      	orrs	r2, r6
 800d686:	d00e      	beq.n	800d6a6 <round+0x5a>
 800d688:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d68c:	fa42 f404 	asr.w	r4, r2, r4
 800d690:	4423      	add	r3, r4
 800d692:	ea23 0305 	bic.w	r3, r3, r5
 800d696:	e7ef      	b.n	800d678 <round+0x2c>
 800d698:	2c33      	cmp	r4, #51	; 0x33
 800d69a:	dd07      	ble.n	800d6ac <round+0x60>
 800d69c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d6a0:	d101      	bne.n	800d6a6 <round+0x5a>
 800d6a2:	f7f2 fe1b 	bl	80002dc <__adddf3>
 800d6a6:	ec41 0b10 	vmov	d0, r0, r1
 800d6aa:	bd70      	pop	{r4, r5, r6, pc}
 800d6ac:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d6b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d6b4:	40f5      	lsrs	r5, r6
 800d6b6:	4228      	tst	r0, r5
 800d6b8:	d0f5      	beq.n	800d6a6 <round+0x5a>
 800d6ba:	2101      	movs	r1, #1
 800d6bc:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d6c0:	fa01 f404 	lsl.w	r4, r1, r4
 800d6c4:	1912      	adds	r2, r2, r4
 800d6c6:	bf28      	it	cs
 800d6c8:	185b      	addcs	r3, r3, r1
 800d6ca:	ea22 0205 	bic.w	r2, r2, r5
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	4610      	mov	r0, r2
 800d6d2:	e7e8      	b.n	800d6a6 <round+0x5a>
 800d6d4:	000fffff 	.word	0x000fffff

0800d6d8 <exp>:
 800d6d8:	b538      	push	{r3, r4, r5, lr}
 800d6da:	ed2d 8b02 	vpush	{d8}
 800d6de:	ec55 4b10 	vmov	r4, r5, d0
 800d6e2:	f000 f8dd 	bl	800d8a0 <__ieee754_exp>
 800d6e6:	eeb0 8a40 	vmov.f32	s16, s0
 800d6ea:	eef0 8a60 	vmov.f32	s17, s1
 800d6ee:	ec45 4b10 	vmov	d0, r4, r5
 800d6f2:	f001 f872 	bl	800e7da <finite>
 800d6f6:	b168      	cbz	r0, 800d714 <exp+0x3c>
 800d6f8:	a317      	add	r3, pc, #92	; (adr r3, 800d758 <exp+0x80>)
 800d6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fe:	4620      	mov	r0, r4
 800d700:	4629      	mov	r1, r5
 800d702:	f7f3 fa31 	bl	8000b68 <__aeabi_dcmpgt>
 800d706:	b160      	cbz	r0, 800d722 <exp+0x4a>
 800d708:	f001 f8f8 	bl	800e8fc <__errno>
 800d70c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800d748 <exp+0x70>
 800d710:	2322      	movs	r3, #34	; 0x22
 800d712:	6003      	str	r3, [r0, #0]
 800d714:	eeb0 0a48 	vmov.f32	s0, s16
 800d718:	eef0 0a68 	vmov.f32	s1, s17
 800d71c:	ecbd 8b02 	vpop	{d8}
 800d720:	bd38      	pop	{r3, r4, r5, pc}
 800d722:	a30f      	add	r3, pc, #60	; (adr r3, 800d760 <exp+0x88>)
 800d724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d728:	4620      	mov	r0, r4
 800d72a:	4629      	mov	r1, r5
 800d72c:	f7f3 f9fe 	bl	8000b2c <__aeabi_dcmplt>
 800d730:	2800      	cmp	r0, #0
 800d732:	d0ef      	beq.n	800d714 <exp+0x3c>
 800d734:	f001 f8e2 	bl	800e8fc <__errno>
 800d738:	2322      	movs	r3, #34	; 0x22
 800d73a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800d750 <exp+0x78>
 800d73e:	6003      	str	r3, [r0, #0]
 800d740:	e7e8      	b.n	800d714 <exp+0x3c>
 800d742:	bf00      	nop
 800d744:	f3af 8000 	nop.w
 800d748:	00000000 	.word	0x00000000
 800d74c:	7ff00000 	.word	0x7ff00000
	...
 800d758:	fefa39ef 	.word	0xfefa39ef
 800d75c:	40862e42 	.word	0x40862e42
 800d760:	d52d3051 	.word	0xd52d3051
 800d764:	c0874910 	.word	0xc0874910

0800d768 <pow>:
 800d768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d76a:	ed2d 8b02 	vpush	{d8}
 800d76e:	eeb0 8a40 	vmov.f32	s16, s0
 800d772:	eef0 8a60 	vmov.f32	s17, s1
 800d776:	ec55 4b11 	vmov	r4, r5, d1
 800d77a:	f000 fa15 	bl	800dba8 <__ieee754_pow>
 800d77e:	4622      	mov	r2, r4
 800d780:	462b      	mov	r3, r5
 800d782:	4620      	mov	r0, r4
 800d784:	4629      	mov	r1, r5
 800d786:	ec57 6b10 	vmov	r6, r7, d0
 800d78a:	f7f3 f9f7 	bl	8000b7c <__aeabi_dcmpun>
 800d78e:	2800      	cmp	r0, #0
 800d790:	d13b      	bne.n	800d80a <pow+0xa2>
 800d792:	ec51 0b18 	vmov	r0, r1, d8
 800d796:	2200      	movs	r2, #0
 800d798:	2300      	movs	r3, #0
 800d79a:	f7f3 f9bd 	bl	8000b18 <__aeabi_dcmpeq>
 800d79e:	b1b8      	cbz	r0, 800d7d0 <pow+0x68>
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	4629      	mov	r1, r5
 800d7a8:	f7f3 f9b6 	bl	8000b18 <__aeabi_dcmpeq>
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	d146      	bne.n	800d83e <pow+0xd6>
 800d7b0:	ec45 4b10 	vmov	d0, r4, r5
 800d7b4:	f001 f811 	bl	800e7da <finite>
 800d7b8:	b338      	cbz	r0, 800d80a <pow+0xa2>
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	2300      	movs	r3, #0
 800d7be:	4620      	mov	r0, r4
 800d7c0:	4629      	mov	r1, r5
 800d7c2:	f7f3 f9b3 	bl	8000b2c <__aeabi_dcmplt>
 800d7c6:	b300      	cbz	r0, 800d80a <pow+0xa2>
 800d7c8:	f001 f898 	bl	800e8fc <__errno>
 800d7cc:	2322      	movs	r3, #34	; 0x22
 800d7ce:	e01b      	b.n	800d808 <pow+0xa0>
 800d7d0:	ec47 6b10 	vmov	d0, r6, r7
 800d7d4:	f001 f801 	bl	800e7da <finite>
 800d7d8:	b9e0      	cbnz	r0, 800d814 <pow+0xac>
 800d7da:	eeb0 0a48 	vmov.f32	s0, s16
 800d7de:	eef0 0a68 	vmov.f32	s1, s17
 800d7e2:	f000 fffa 	bl	800e7da <finite>
 800d7e6:	b1a8      	cbz	r0, 800d814 <pow+0xac>
 800d7e8:	ec45 4b10 	vmov	d0, r4, r5
 800d7ec:	f000 fff5 	bl	800e7da <finite>
 800d7f0:	b180      	cbz	r0, 800d814 <pow+0xac>
 800d7f2:	4632      	mov	r2, r6
 800d7f4:	463b      	mov	r3, r7
 800d7f6:	4630      	mov	r0, r6
 800d7f8:	4639      	mov	r1, r7
 800d7fa:	f7f3 f9bf 	bl	8000b7c <__aeabi_dcmpun>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d0e2      	beq.n	800d7c8 <pow+0x60>
 800d802:	f001 f87b 	bl	800e8fc <__errno>
 800d806:	2321      	movs	r3, #33	; 0x21
 800d808:	6003      	str	r3, [r0, #0]
 800d80a:	ecbd 8b02 	vpop	{d8}
 800d80e:	ec47 6b10 	vmov	d0, r6, r7
 800d812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d814:	2200      	movs	r2, #0
 800d816:	2300      	movs	r3, #0
 800d818:	4630      	mov	r0, r6
 800d81a:	4639      	mov	r1, r7
 800d81c:	f7f3 f97c 	bl	8000b18 <__aeabi_dcmpeq>
 800d820:	2800      	cmp	r0, #0
 800d822:	d0f2      	beq.n	800d80a <pow+0xa2>
 800d824:	eeb0 0a48 	vmov.f32	s0, s16
 800d828:	eef0 0a68 	vmov.f32	s1, s17
 800d82c:	f000 ffd5 	bl	800e7da <finite>
 800d830:	2800      	cmp	r0, #0
 800d832:	d0ea      	beq.n	800d80a <pow+0xa2>
 800d834:	ec45 4b10 	vmov	d0, r4, r5
 800d838:	f000 ffcf 	bl	800e7da <finite>
 800d83c:	e7c3      	b.n	800d7c6 <pow+0x5e>
 800d83e:	4f01      	ldr	r7, [pc, #4]	; (800d844 <pow+0xdc>)
 800d840:	2600      	movs	r6, #0
 800d842:	e7e2      	b.n	800d80a <pow+0xa2>
 800d844:	3ff00000 	.word	0x3ff00000

0800d848 <sqrt>:
 800d848:	b538      	push	{r3, r4, r5, lr}
 800d84a:	ed2d 8b02 	vpush	{d8}
 800d84e:	ec55 4b10 	vmov	r4, r5, d0
 800d852:	f000 fed7 	bl	800e604 <__ieee754_sqrt>
 800d856:	4622      	mov	r2, r4
 800d858:	462b      	mov	r3, r5
 800d85a:	4620      	mov	r0, r4
 800d85c:	4629      	mov	r1, r5
 800d85e:	eeb0 8a40 	vmov.f32	s16, s0
 800d862:	eef0 8a60 	vmov.f32	s17, s1
 800d866:	f7f3 f989 	bl	8000b7c <__aeabi_dcmpun>
 800d86a:	b990      	cbnz	r0, 800d892 <sqrt+0x4a>
 800d86c:	2200      	movs	r2, #0
 800d86e:	2300      	movs	r3, #0
 800d870:	4620      	mov	r0, r4
 800d872:	4629      	mov	r1, r5
 800d874:	f7f3 f95a 	bl	8000b2c <__aeabi_dcmplt>
 800d878:	b158      	cbz	r0, 800d892 <sqrt+0x4a>
 800d87a:	f001 f83f 	bl	800e8fc <__errno>
 800d87e:	2321      	movs	r3, #33	; 0x21
 800d880:	6003      	str	r3, [r0, #0]
 800d882:	2200      	movs	r2, #0
 800d884:	2300      	movs	r3, #0
 800d886:	4610      	mov	r0, r2
 800d888:	4619      	mov	r1, r3
 800d88a:	f7f3 f807 	bl	800089c <__aeabi_ddiv>
 800d88e:	ec41 0b18 	vmov	d8, r0, r1
 800d892:	eeb0 0a48 	vmov.f32	s0, s16
 800d896:	eef0 0a68 	vmov.f32	s1, s17
 800d89a:	ecbd 8b02 	vpop	{d8}
 800d89e:	bd38      	pop	{r3, r4, r5, pc}

0800d8a0 <__ieee754_exp>:
 800d8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8a4:	ec55 4b10 	vmov	r4, r5, d0
 800d8a8:	49b5      	ldr	r1, [pc, #724]	; (800db80 <__ieee754_exp+0x2e0>)
 800d8aa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d8ae:	428b      	cmp	r3, r1
 800d8b0:	ed2d 8b04 	vpush	{d8-d9}
 800d8b4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800d8b8:	d93d      	bls.n	800d936 <__ieee754_exp+0x96>
 800d8ba:	49b2      	ldr	r1, [pc, #712]	; (800db84 <__ieee754_exp+0x2e4>)
 800d8bc:	428b      	cmp	r3, r1
 800d8be:	d918      	bls.n	800d8f2 <__ieee754_exp+0x52>
 800d8c0:	ee10 3a10 	vmov	r3, s0
 800d8c4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800d8c8:	4313      	orrs	r3, r2
 800d8ca:	d009      	beq.n	800d8e0 <__ieee754_exp+0x40>
 800d8cc:	ee10 2a10 	vmov	r2, s0
 800d8d0:	462b      	mov	r3, r5
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	4629      	mov	r1, r5
 800d8d6:	f7f2 fd01 	bl	80002dc <__adddf3>
 800d8da:	4604      	mov	r4, r0
 800d8dc:	460d      	mov	r5, r1
 800d8de:	e002      	b.n	800d8e6 <__ieee754_exp+0x46>
 800d8e0:	b10e      	cbz	r6, 800d8e6 <__ieee754_exp+0x46>
 800d8e2:	2400      	movs	r4, #0
 800d8e4:	2500      	movs	r5, #0
 800d8e6:	ecbd 8b04 	vpop	{d8-d9}
 800d8ea:	ec45 4b10 	vmov	d0, r4, r5
 800d8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8f2:	a38d      	add	r3, pc, #564	; (adr r3, 800db28 <__ieee754_exp+0x288>)
 800d8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f8:	ee10 0a10 	vmov	r0, s0
 800d8fc:	4629      	mov	r1, r5
 800d8fe:	f7f3 f933 	bl	8000b68 <__aeabi_dcmpgt>
 800d902:	4607      	mov	r7, r0
 800d904:	b130      	cbz	r0, 800d914 <__ieee754_exp+0x74>
 800d906:	ecbd 8b04 	vpop	{d8-d9}
 800d90a:	2000      	movs	r0, #0
 800d90c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d910:	f000 bf51 	b.w	800e7b6 <__math_oflow>
 800d914:	a386      	add	r3, pc, #536	; (adr r3, 800db30 <__ieee754_exp+0x290>)
 800d916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91a:	4620      	mov	r0, r4
 800d91c:	4629      	mov	r1, r5
 800d91e:	f7f3 f905 	bl	8000b2c <__aeabi_dcmplt>
 800d922:	2800      	cmp	r0, #0
 800d924:	f000 808b 	beq.w	800da3e <__ieee754_exp+0x19e>
 800d928:	ecbd 8b04 	vpop	{d8-d9}
 800d92c:	4638      	mov	r0, r7
 800d92e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d932:	f000 bf37 	b.w	800e7a4 <__math_uflow>
 800d936:	4a94      	ldr	r2, [pc, #592]	; (800db88 <__ieee754_exp+0x2e8>)
 800d938:	4293      	cmp	r3, r2
 800d93a:	f240 80ac 	bls.w	800da96 <__ieee754_exp+0x1f6>
 800d93e:	4a93      	ldr	r2, [pc, #588]	; (800db8c <__ieee754_exp+0x2ec>)
 800d940:	4293      	cmp	r3, r2
 800d942:	d87c      	bhi.n	800da3e <__ieee754_exp+0x19e>
 800d944:	4b92      	ldr	r3, [pc, #584]	; (800db90 <__ieee754_exp+0x2f0>)
 800d946:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d94e:	ee10 0a10 	vmov	r0, s0
 800d952:	4629      	mov	r1, r5
 800d954:	f7f2 fcc0 	bl	80002d8 <__aeabi_dsub>
 800d958:	4b8e      	ldr	r3, [pc, #568]	; (800db94 <__ieee754_exp+0x2f4>)
 800d95a:	00f7      	lsls	r7, r6, #3
 800d95c:	443b      	add	r3, r7
 800d95e:	ed93 7b00 	vldr	d7, [r3]
 800d962:	f1c6 0a01 	rsb	sl, r6, #1
 800d966:	4680      	mov	r8, r0
 800d968:	4689      	mov	r9, r1
 800d96a:	ebaa 0a06 	sub.w	sl, sl, r6
 800d96e:	eeb0 8a47 	vmov.f32	s16, s14
 800d972:	eef0 8a67 	vmov.f32	s17, s15
 800d976:	ec53 2b18 	vmov	r2, r3, d8
 800d97a:	4640      	mov	r0, r8
 800d97c:	4649      	mov	r1, r9
 800d97e:	f7f2 fcab 	bl	80002d8 <__aeabi_dsub>
 800d982:	4604      	mov	r4, r0
 800d984:	460d      	mov	r5, r1
 800d986:	4622      	mov	r2, r4
 800d988:	462b      	mov	r3, r5
 800d98a:	4620      	mov	r0, r4
 800d98c:	4629      	mov	r1, r5
 800d98e:	f7f2 fe5b 	bl	8000648 <__aeabi_dmul>
 800d992:	a369      	add	r3, pc, #420	; (adr r3, 800db38 <__ieee754_exp+0x298>)
 800d994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d998:	4606      	mov	r6, r0
 800d99a:	460f      	mov	r7, r1
 800d99c:	f7f2 fe54 	bl	8000648 <__aeabi_dmul>
 800d9a0:	a367      	add	r3, pc, #412	; (adr r3, 800db40 <__ieee754_exp+0x2a0>)
 800d9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a6:	f7f2 fc97 	bl	80002d8 <__aeabi_dsub>
 800d9aa:	4632      	mov	r2, r6
 800d9ac:	463b      	mov	r3, r7
 800d9ae:	f7f2 fe4b 	bl	8000648 <__aeabi_dmul>
 800d9b2:	a365      	add	r3, pc, #404	; (adr r3, 800db48 <__ieee754_exp+0x2a8>)
 800d9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b8:	f7f2 fc90 	bl	80002dc <__adddf3>
 800d9bc:	4632      	mov	r2, r6
 800d9be:	463b      	mov	r3, r7
 800d9c0:	f7f2 fe42 	bl	8000648 <__aeabi_dmul>
 800d9c4:	a362      	add	r3, pc, #392	; (adr r3, 800db50 <__ieee754_exp+0x2b0>)
 800d9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ca:	f7f2 fc85 	bl	80002d8 <__aeabi_dsub>
 800d9ce:	4632      	mov	r2, r6
 800d9d0:	463b      	mov	r3, r7
 800d9d2:	f7f2 fe39 	bl	8000648 <__aeabi_dmul>
 800d9d6:	a360      	add	r3, pc, #384	; (adr r3, 800db58 <__ieee754_exp+0x2b8>)
 800d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9dc:	f7f2 fc7e 	bl	80002dc <__adddf3>
 800d9e0:	4632      	mov	r2, r6
 800d9e2:	463b      	mov	r3, r7
 800d9e4:	f7f2 fe30 	bl	8000648 <__aeabi_dmul>
 800d9e8:	4602      	mov	r2, r0
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	4620      	mov	r0, r4
 800d9ee:	4629      	mov	r1, r5
 800d9f0:	f7f2 fc72 	bl	80002d8 <__aeabi_dsub>
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	4606      	mov	r6, r0
 800d9fa:	460f      	mov	r7, r1
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	4629      	mov	r1, r5
 800da00:	f7f2 fe22 	bl	8000648 <__aeabi_dmul>
 800da04:	ec41 0b19 	vmov	d9, r0, r1
 800da08:	f1ba 0f00 	cmp.w	sl, #0
 800da0c:	d15d      	bne.n	800daca <__ieee754_exp+0x22a>
 800da0e:	2200      	movs	r2, #0
 800da10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800da14:	4630      	mov	r0, r6
 800da16:	4639      	mov	r1, r7
 800da18:	f7f2 fc5e 	bl	80002d8 <__aeabi_dsub>
 800da1c:	4602      	mov	r2, r0
 800da1e:	460b      	mov	r3, r1
 800da20:	ec51 0b19 	vmov	r0, r1, d9
 800da24:	f7f2 ff3a 	bl	800089c <__aeabi_ddiv>
 800da28:	4622      	mov	r2, r4
 800da2a:	462b      	mov	r3, r5
 800da2c:	f7f2 fc54 	bl	80002d8 <__aeabi_dsub>
 800da30:	4602      	mov	r2, r0
 800da32:	460b      	mov	r3, r1
 800da34:	2000      	movs	r0, #0
 800da36:	4958      	ldr	r1, [pc, #352]	; (800db98 <__ieee754_exp+0x2f8>)
 800da38:	f7f2 fc4e 	bl	80002d8 <__aeabi_dsub>
 800da3c:	e74d      	b.n	800d8da <__ieee754_exp+0x3a>
 800da3e:	4857      	ldr	r0, [pc, #348]	; (800db9c <__ieee754_exp+0x2fc>)
 800da40:	a347      	add	r3, pc, #284	; (adr r3, 800db60 <__ieee754_exp+0x2c0>)
 800da42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da46:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800da4a:	4629      	mov	r1, r5
 800da4c:	4620      	mov	r0, r4
 800da4e:	f7f2 fdfb 	bl	8000648 <__aeabi_dmul>
 800da52:	e9d6 2300 	ldrd	r2, r3, [r6]
 800da56:	f7f2 fc41 	bl	80002dc <__adddf3>
 800da5a:	f7f3 f8a5 	bl	8000ba8 <__aeabi_d2iz>
 800da5e:	4682      	mov	sl, r0
 800da60:	f7f2 fd88 	bl	8000574 <__aeabi_i2d>
 800da64:	a340      	add	r3, pc, #256	; (adr r3, 800db68 <__ieee754_exp+0x2c8>)
 800da66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6a:	4606      	mov	r6, r0
 800da6c:	460f      	mov	r7, r1
 800da6e:	f7f2 fdeb 	bl	8000648 <__aeabi_dmul>
 800da72:	4602      	mov	r2, r0
 800da74:	460b      	mov	r3, r1
 800da76:	4620      	mov	r0, r4
 800da78:	4629      	mov	r1, r5
 800da7a:	f7f2 fc2d 	bl	80002d8 <__aeabi_dsub>
 800da7e:	a33c      	add	r3, pc, #240	; (adr r3, 800db70 <__ieee754_exp+0x2d0>)
 800da80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da84:	4680      	mov	r8, r0
 800da86:	4689      	mov	r9, r1
 800da88:	4630      	mov	r0, r6
 800da8a:	4639      	mov	r1, r7
 800da8c:	f7f2 fddc 	bl	8000648 <__aeabi_dmul>
 800da90:	ec41 0b18 	vmov	d8, r0, r1
 800da94:	e76f      	b.n	800d976 <__ieee754_exp+0xd6>
 800da96:	4a42      	ldr	r2, [pc, #264]	; (800dba0 <__ieee754_exp+0x300>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d811      	bhi.n	800dac0 <__ieee754_exp+0x220>
 800da9c:	a336      	add	r3, pc, #216	; (adr r3, 800db78 <__ieee754_exp+0x2d8>)
 800da9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa2:	ee10 0a10 	vmov	r0, s0
 800daa6:	4629      	mov	r1, r5
 800daa8:	f7f2 fc18 	bl	80002dc <__adddf3>
 800daac:	4b3a      	ldr	r3, [pc, #232]	; (800db98 <__ieee754_exp+0x2f8>)
 800daae:	2200      	movs	r2, #0
 800dab0:	f7f3 f85a 	bl	8000b68 <__aeabi_dcmpgt>
 800dab4:	b138      	cbz	r0, 800dac6 <__ieee754_exp+0x226>
 800dab6:	4b38      	ldr	r3, [pc, #224]	; (800db98 <__ieee754_exp+0x2f8>)
 800dab8:	2200      	movs	r2, #0
 800daba:	4620      	mov	r0, r4
 800dabc:	4629      	mov	r1, r5
 800dabe:	e70a      	b.n	800d8d6 <__ieee754_exp+0x36>
 800dac0:	f04f 0a00 	mov.w	sl, #0
 800dac4:	e75f      	b.n	800d986 <__ieee754_exp+0xe6>
 800dac6:	4682      	mov	sl, r0
 800dac8:	e75d      	b.n	800d986 <__ieee754_exp+0xe6>
 800daca:	4632      	mov	r2, r6
 800dacc:	463b      	mov	r3, r7
 800dace:	2000      	movs	r0, #0
 800dad0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800dad4:	f7f2 fc00 	bl	80002d8 <__aeabi_dsub>
 800dad8:	4602      	mov	r2, r0
 800dada:	460b      	mov	r3, r1
 800dadc:	ec51 0b19 	vmov	r0, r1, d9
 800dae0:	f7f2 fedc 	bl	800089c <__aeabi_ddiv>
 800dae4:	4602      	mov	r2, r0
 800dae6:	460b      	mov	r3, r1
 800dae8:	ec51 0b18 	vmov	r0, r1, d8
 800daec:	f7f2 fbf4 	bl	80002d8 <__aeabi_dsub>
 800daf0:	4642      	mov	r2, r8
 800daf2:	464b      	mov	r3, r9
 800daf4:	f7f2 fbf0 	bl	80002d8 <__aeabi_dsub>
 800daf8:	4602      	mov	r2, r0
 800dafa:	460b      	mov	r3, r1
 800dafc:	2000      	movs	r0, #0
 800dafe:	4926      	ldr	r1, [pc, #152]	; (800db98 <__ieee754_exp+0x2f8>)
 800db00:	f7f2 fbea 	bl	80002d8 <__aeabi_dsub>
 800db04:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800db08:	4592      	cmp	sl, r2
 800db0a:	db02      	blt.n	800db12 <__ieee754_exp+0x272>
 800db0c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800db10:	e6e3      	b.n	800d8da <__ieee754_exp+0x3a>
 800db12:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800db16:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800db1a:	2200      	movs	r2, #0
 800db1c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800db20:	f7f2 fd92 	bl	8000648 <__aeabi_dmul>
 800db24:	e6d9      	b.n	800d8da <__ieee754_exp+0x3a>
 800db26:	bf00      	nop
 800db28:	fefa39ef 	.word	0xfefa39ef
 800db2c:	40862e42 	.word	0x40862e42
 800db30:	d52d3051 	.word	0xd52d3051
 800db34:	c0874910 	.word	0xc0874910
 800db38:	72bea4d0 	.word	0x72bea4d0
 800db3c:	3e663769 	.word	0x3e663769
 800db40:	c5d26bf1 	.word	0xc5d26bf1
 800db44:	3ebbbd41 	.word	0x3ebbbd41
 800db48:	af25de2c 	.word	0xaf25de2c
 800db4c:	3f11566a 	.word	0x3f11566a
 800db50:	16bebd93 	.word	0x16bebd93
 800db54:	3f66c16c 	.word	0x3f66c16c
 800db58:	5555553e 	.word	0x5555553e
 800db5c:	3fc55555 	.word	0x3fc55555
 800db60:	652b82fe 	.word	0x652b82fe
 800db64:	3ff71547 	.word	0x3ff71547
 800db68:	fee00000 	.word	0xfee00000
 800db6c:	3fe62e42 	.word	0x3fe62e42
 800db70:	35793c76 	.word	0x35793c76
 800db74:	3dea39ef 	.word	0x3dea39ef
 800db78:	8800759c 	.word	0x8800759c
 800db7c:	7e37e43c 	.word	0x7e37e43c
 800db80:	40862e41 	.word	0x40862e41
 800db84:	7fefffff 	.word	0x7fefffff
 800db88:	3fd62e42 	.word	0x3fd62e42
 800db8c:	3ff0a2b1 	.word	0x3ff0a2b1
 800db90:	08014098 	.word	0x08014098
 800db94:	080140a8 	.word	0x080140a8
 800db98:	3ff00000 	.word	0x3ff00000
 800db9c:	08014088 	.word	0x08014088
 800dba0:	3defffff 	.word	0x3defffff
 800dba4:	00000000 	.word	0x00000000

0800dba8 <__ieee754_pow>:
 800dba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbac:	ed2d 8b06 	vpush	{d8-d10}
 800dbb0:	b089      	sub	sp, #36	; 0x24
 800dbb2:	ed8d 1b00 	vstr	d1, [sp]
 800dbb6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800dbba:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800dbbe:	ea58 0102 	orrs.w	r1, r8, r2
 800dbc2:	ec57 6b10 	vmov	r6, r7, d0
 800dbc6:	d115      	bne.n	800dbf4 <__ieee754_pow+0x4c>
 800dbc8:	19b3      	adds	r3, r6, r6
 800dbca:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800dbce:	4152      	adcs	r2, r2
 800dbd0:	4299      	cmp	r1, r3
 800dbd2:	4b89      	ldr	r3, [pc, #548]	; (800ddf8 <__ieee754_pow+0x250>)
 800dbd4:	4193      	sbcs	r3, r2
 800dbd6:	f080 84d2 	bcs.w	800e57e <__ieee754_pow+0x9d6>
 800dbda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbde:	4630      	mov	r0, r6
 800dbe0:	4639      	mov	r1, r7
 800dbe2:	f7f2 fb7b 	bl	80002dc <__adddf3>
 800dbe6:	ec41 0b10 	vmov	d0, r0, r1
 800dbea:	b009      	add	sp, #36	; 0x24
 800dbec:	ecbd 8b06 	vpop	{d8-d10}
 800dbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf4:	4b81      	ldr	r3, [pc, #516]	; (800ddfc <__ieee754_pow+0x254>)
 800dbf6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800dbfa:	429c      	cmp	r4, r3
 800dbfc:	ee10 aa10 	vmov	sl, s0
 800dc00:	463d      	mov	r5, r7
 800dc02:	dc06      	bgt.n	800dc12 <__ieee754_pow+0x6a>
 800dc04:	d101      	bne.n	800dc0a <__ieee754_pow+0x62>
 800dc06:	2e00      	cmp	r6, #0
 800dc08:	d1e7      	bne.n	800dbda <__ieee754_pow+0x32>
 800dc0a:	4598      	cmp	r8, r3
 800dc0c:	dc01      	bgt.n	800dc12 <__ieee754_pow+0x6a>
 800dc0e:	d10f      	bne.n	800dc30 <__ieee754_pow+0x88>
 800dc10:	b172      	cbz	r2, 800dc30 <__ieee754_pow+0x88>
 800dc12:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800dc16:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800dc1a:	ea55 050a 	orrs.w	r5, r5, sl
 800dc1e:	d1dc      	bne.n	800dbda <__ieee754_pow+0x32>
 800dc20:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dc24:	18db      	adds	r3, r3, r3
 800dc26:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800dc2a:	4152      	adcs	r2, r2
 800dc2c:	429d      	cmp	r5, r3
 800dc2e:	e7d0      	b.n	800dbd2 <__ieee754_pow+0x2a>
 800dc30:	2d00      	cmp	r5, #0
 800dc32:	da3b      	bge.n	800dcac <__ieee754_pow+0x104>
 800dc34:	4b72      	ldr	r3, [pc, #456]	; (800de00 <__ieee754_pow+0x258>)
 800dc36:	4598      	cmp	r8, r3
 800dc38:	dc51      	bgt.n	800dcde <__ieee754_pow+0x136>
 800dc3a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800dc3e:	4598      	cmp	r8, r3
 800dc40:	f340 84ac 	ble.w	800e59c <__ieee754_pow+0x9f4>
 800dc44:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dc48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dc4c:	2b14      	cmp	r3, #20
 800dc4e:	dd0f      	ble.n	800dc70 <__ieee754_pow+0xc8>
 800dc50:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800dc54:	fa22 f103 	lsr.w	r1, r2, r3
 800dc58:	fa01 f303 	lsl.w	r3, r1, r3
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	f040 849d 	bne.w	800e59c <__ieee754_pow+0x9f4>
 800dc62:	f001 0101 	and.w	r1, r1, #1
 800dc66:	f1c1 0302 	rsb	r3, r1, #2
 800dc6a:	9304      	str	r3, [sp, #16]
 800dc6c:	b182      	cbz	r2, 800dc90 <__ieee754_pow+0xe8>
 800dc6e:	e05f      	b.n	800dd30 <__ieee754_pow+0x188>
 800dc70:	2a00      	cmp	r2, #0
 800dc72:	d15b      	bne.n	800dd2c <__ieee754_pow+0x184>
 800dc74:	f1c3 0314 	rsb	r3, r3, #20
 800dc78:	fa48 f103 	asr.w	r1, r8, r3
 800dc7c:	fa01 f303 	lsl.w	r3, r1, r3
 800dc80:	4543      	cmp	r3, r8
 800dc82:	f040 8488 	bne.w	800e596 <__ieee754_pow+0x9ee>
 800dc86:	f001 0101 	and.w	r1, r1, #1
 800dc8a:	f1c1 0302 	rsb	r3, r1, #2
 800dc8e:	9304      	str	r3, [sp, #16]
 800dc90:	4b5c      	ldr	r3, [pc, #368]	; (800de04 <__ieee754_pow+0x25c>)
 800dc92:	4598      	cmp	r8, r3
 800dc94:	d132      	bne.n	800dcfc <__ieee754_pow+0x154>
 800dc96:	f1b9 0f00 	cmp.w	r9, #0
 800dc9a:	f280 8478 	bge.w	800e58e <__ieee754_pow+0x9e6>
 800dc9e:	4959      	ldr	r1, [pc, #356]	; (800de04 <__ieee754_pow+0x25c>)
 800dca0:	4632      	mov	r2, r6
 800dca2:	463b      	mov	r3, r7
 800dca4:	2000      	movs	r0, #0
 800dca6:	f7f2 fdf9 	bl	800089c <__aeabi_ddiv>
 800dcaa:	e79c      	b.n	800dbe6 <__ieee754_pow+0x3e>
 800dcac:	2300      	movs	r3, #0
 800dcae:	9304      	str	r3, [sp, #16]
 800dcb0:	2a00      	cmp	r2, #0
 800dcb2:	d13d      	bne.n	800dd30 <__ieee754_pow+0x188>
 800dcb4:	4b51      	ldr	r3, [pc, #324]	; (800ddfc <__ieee754_pow+0x254>)
 800dcb6:	4598      	cmp	r8, r3
 800dcb8:	d1ea      	bne.n	800dc90 <__ieee754_pow+0xe8>
 800dcba:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800dcbe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800dcc2:	ea53 030a 	orrs.w	r3, r3, sl
 800dcc6:	f000 845a 	beq.w	800e57e <__ieee754_pow+0x9d6>
 800dcca:	4b4f      	ldr	r3, [pc, #316]	; (800de08 <__ieee754_pow+0x260>)
 800dccc:	429c      	cmp	r4, r3
 800dcce:	dd08      	ble.n	800dce2 <__ieee754_pow+0x13a>
 800dcd0:	f1b9 0f00 	cmp.w	r9, #0
 800dcd4:	f2c0 8457 	blt.w	800e586 <__ieee754_pow+0x9de>
 800dcd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcdc:	e783      	b.n	800dbe6 <__ieee754_pow+0x3e>
 800dcde:	2302      	movs	r3, #2
 800dce0:	e7e5      	b.n	800dcae <__ieee754_pow+0x106>
 800dce2:	f1b9 0f00 	cmp.w	r9, #0
 800dce6:	f04f 0000 	mov.w	r0, #0
 800dcea:	f04f 0100 	mov.w	r1, #0
 800dcee:	f6bf af7a 	bge.w	800dbe6 <__ieee754_pow+0x3e>
 800dcf2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800dcf6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dcfa:	e774      	b.n	800dbe6 <__ieee754_pow+0x3e>
 800dcfc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800dd00:	d106      	bne.n	800dd10 <__ieee754_pow+0x168>
 800dd02:	4632      	mov	r2, r6
 800dd04:	463b      	mov	r3, r7
 800dd06:	4630      	mov	r0, r6
 800dd08:	4639      	mov	r1, r7
 800dd0a:	f7f2 fc9d 	bl	8000648 <__aeabi_dmul>
 800dd0e:	e76a      	b.n	800dbe6 <__ieee754_pow+0x3e>
 800dd10:	4b3e      	ldr	r3, [pc, #248]	; (800de0c <__ieee754_pow+0x264>)
 800dd12:	4599      	cmp	r9, r3
 800dd14:	d10c      	bne.n	800dd30 <__ieee754_pow+0x188>
 800dd16:	2d00      	cmp	r5, #0
 800dd18:	db0a      	blt.n	800dd30 <__ieee754_pow+0x188>
 800dd1a:	ec47 6b10 	vmov	d0, r6, r7
 800dd1e:	b009      	add	sp, #36	; 0x24
 800dd20:	ecbd 8b06 	vpop	{d8-d10}
 800dd24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd28:	f000 bc6c 	b.w	800e604 <__ieee754_sqrt>
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	9304      	str	r3, [sp, #16]
 800dd30:	ec47 6b10 	vmov	d0, r6, r7
 800dd34:	f000 fd48 	bl	800e7c8 <fabs>
 800dd38:	ec51 0b10 	vmov	r0, r1, d0
 800dd3c:	f1ba 0f00 	cmp.w	sl, #0
 800dd40:	d129      	bne.n	800dd96 <__ieee754_pow+0x1ee>
 800dd42:	b124      	cbz	r4, 800dd4e <__ieee754_pow+0x1a6>
 800dd44:	4b2f      	ldr	r3, [pc, #188]	; (800de04 <__ieee754_pow+0x25c>)
 800dd46:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d123      	bne.n	800dd96 <__ieee754_pow+0x1ee>
 800dd4e:	f1b9 0f00 	cmp.w	r9, #0
 800dd52:	da05      	bge.n	800dd60 <__ieee754_pow+0x1b8>
 800dd54:	4602      	mov	r2, r0
 800dd56:	460b      	mov	r3, r1
 800dd58:	2000      	movs	r0, #0
 800dd5a:	492a      	ldr	r1, [pc, #168]	; (800de04 <__ieee754_pow+0x25c>)
 800dd5c:	f7f2 fd9e 	bl	800089c <__aeabi_ddiv>
 800dd60:	2d00      	cmp	r5, #0
 800dd62:	f6bf af40 	bge.w	800dbe6 <__ieee754_pow+0x3e>
 800dd66:	9b04      	ldr	r3, [sp, #16]
 800dd68:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dd6c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dd70:	4323      	orrs	r3, r4
 800dd72:	d108      	bne.n	800dd86 <__ieee754_pow+0x1de>
 800dd74:	4602      	mov	r2, r0
 800dd76:	460b      	mov	r3, r1
 800dd78:	4610      	mov	r0, r2
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	f7f2 faac 	bl	80002d8 <__aeabi_dsub>
 800dd80:	4602      	mov	r2, r0
 800dd82:	460b      	mov	r3, r1
 800dd84:	e78f      	b.n	800dca6 <__ieee754_pow+0xfe>
 800dd86:	9b04      	ldr	r3, [sp, #16]
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	f47f af2c 	bne.w	800dbe6 <__ieee754_pow+0x3e>
 800dd8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd92:	4619      	mov	r1, r3
 800dd94:	e727      	b.n	800dbe6 <__ieee754_pow+0x3e>
 800dd96:	0feb      	lsrs	r3, r5, #31
 800dd98:	3b01      	subs	r3, #1
 800dd9a:	9306      	str	r3, [sp, #24]
 800dd9c:	9a06      	ldr	r2, [sp, #24]
 800dd9e:	9b04      	ldr	r3, [sp, #16]
 800dda0:	4313      	orrs	r3, r2
 800dda2:	d102      	bne.n	800ddaa <__ieee754_pow+0x202>
 800dda4:	4632      	mov	r2, r6
 800dda6:	463b      	mov	r3, r7
 800dda8:	e7e6      	b.n	800dd78 <__ieee754_pow+0x1d0>
 800ddaa:	4b19      	ldr	r3, [pc, #100]	; (800de10 <__ieee754_pow+0x268>)
 800ddac:	4598      	cmp	r8, r3
 800ddae:	f340 80fb 	ble.w	800dfa8 <__ieee754_pow+0x400>
 800ddb2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ddb6:	4598      	cmp	r8, r3
 800ddb8:	4b13      	ldr	r3, [pc, #76]	; (800de08 <__ieee754_pow+0x260>)
 800ddba:	dd0c      	ble.n	800ddd6 <__ieee754_pow+0x22e>
 800ddbc:	429c      	cmp	r4, r3
 800ddbe:	dc0f      	bgt.n	800dde0 <__ieee754_pow+0x238>
 800ddc0:	f1b9 0f00 	cmp.w	r9, #0
 800ddc4:	da0f      	bge.n	800dde6 <__ieee754_pow+0x23e>
 800ddc6:	2000      	movs	r0, #0
 800ddc8:	b009      	add	sp, #36	; 0x24
 800ddca:	ecbd 8b06 	vpop	{d8-d10}
 800ddce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd2:	f000 bcf0 	b.w	800e7b6 <__math_oflow>
 800ddd6:	429c      	cmp	r4, r3
 800ddd8:	dbf2      	blt.n	800ddc0 <__ieee754_pow+0x218>
 800ddda:	4b0a      	ldr	r3, [pc, #40]	; (800de04 <__ieee754_pow+0x25c>)
 800dddc:	429c      	cmp	r4, r3
 800ddde:	dd19      	ble.n	800de14 <__ieee754_pow+0x26c>
 800dde0:	f1b9 0f00 	cmp.w	r9, #0
 800dde4:	dcef      	bgt.n	800ddc6 <__ieee754_pow+0x21e>
 800dde6:	2000      	movs	r0, #0
 800dde8:	b009      	add	sp, #36	; 0x24
 800ddea:	ecbd 8b06 	vpop	{d8-d10}
 800ddee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf2:	f000 bcd7 	b.w	800e7a4 <__math_uflow>
 800ddf6:	bf00      	nop
 800ddf8:	fff00000 	.word	0xfff00000
 800ddfc:	7ff00000 	.word	0x7ff00000
 800de00:	433fffff 	.word	0x433fffff
 800de04:	3ff00000 	.word	0x3ff00000
 800de08:	3fefffff 	.word	0x3fefffff
 800de0c:	3fe00000 	.word	0x3fe00000
 800de10:	41e00000 	.word	0x41e00000
 800de14:	4b60      	ldr	r3, [pc, #384]	; (800df98 <__ieee754_pow+0x3f0>)
 800de16:	2200      	movs	r2, #0
 800de18:	f7f2 fa5e 	bl	80002d8 <__aeabi_dsub>
 800de1c:	a354      	add	r3, pc, #336	; (adr r3, 800df70 <__ieee754_pow+0x3c8>)
 800de1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de22:	4604      	mov	r4, r0
 800de24:	460d      	mov	r5, r1
 800de26:	f7f2 fc0f 	bl	8000648 <__aeabi_dmul>
 800de2a:	a353      	add	r3, pc, #332	; (adr r3, 800df78 <__ieee754_pow+0x3d0>)
 800de2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de30:	4606      	mov	r6, r0
 800de32:	460f      	mov	r7, r1
 800de34:	4620      	mov	r0, r4
 800de36:	4629      	mov	r1, r5
 800de38:	f7f2 fc06 	bl	8000648 <__aeabi_dmul>
 800de3c:	4b57      	ldr	r3, [pc, #348]	; (800df9c <__ieee754_pow+0x3f4>)
 800de3e:	4682      	mov	sl, r0
 800de40:	468b      	mov	fp, r1
 800de42:	2200      	movs	r2, #0
 800de44:	4620      	mov	r0, r4
 800de46:	4629      	mov	r1, r5
 800de48:	f7f2 fbfe 	bl	8000648 <__aeabi_dmul>
 800de4c:	4602      	mov	r2, r0
 800de4e:	460b      	mov	r3, r1
 800de50:	a14b      	add	r1, pc, #300	; (adr r1, 800df80 <__ieee754_pow+0x3d8>)
 800de52:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de56:	f7f2 fa3f 	bl	80002d8 <__aeabi_dsub>
 800de5a:	4622      	mov	r2, r4
 800de5c:	462b      	mov	r3, r5
 800de5e:	f7f2 fbf3 	bl	8000648 <__aeabi_dmul>
 800de62:	4602      	mov	r2, r0
 800de64:	460b      	mov	r3, r1
 800de66:	2000      	movs	r0, #0
 800de68:	494d      	ldr	r1, [pc, #308]	; (800dfa0 <__ieee754_pow+0x3f8>)
 800de6a:	f7f2 fa35 	bl	80002d8 <__aeabi_dsub>
 800de6e:	4622      	mov	r2, r4
 800de70:	4680      	mov	r8, r0
 800de72:	4689      	mov	r9, r1
 800de74:	462b      	mov	r3, r5
 800de76:	4620      	mov	r0, r4
 800de78:	4629      	mov	r1, r5
 800de7a:	f7f2 fbe5 	bl	8000648 <__aeabi_dmul>
 800de7e:	4602      	mov	r2, r0
 800de80:	460b      	mov	r3, r1
 800de82:	4640      	mov	r0, r8
 800de84:	4649      	mov	r1, r9
 800de86:	f7f2 fbdf 	bl	8000648 <__aeabi_dmul>
 800de8a:	a33f      	add	r3, pc, #252	; (adr r3, 800df88 <__ieee754_pow+0x3e0>)
 800de8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de90:	f7f2 fbda 	bl	8000648 <__aeabi_dmul>
 800de94:	4602      	mov	r2, r0
 800de96:	460b      	mov	r3, r1
 800de98:	4650      	mov	r0, sl
 800de9a:	4659      	mov	r1, fp
 800de9c:	f7f2 fa1c 	bl	80002d8 <__aeabi_dsub>
 800dea0:	4602      	mov	r2, r0
 800dea2:	460b      	mov	r3, r1
 800dea4:	4680      	mov	r8, r0
 800dea6:	4689      	mov	r9, r1
 800dea8:	4630      	mov	r0, r6
 800deaa:	4639      	mov	r1, r7
 800deac:	f7f2 fa16 	bl	80002dc <__adddf3>
 800deb0:	2000      	movs	r0, #0
 800deb2:	4632      	mov	r2, r6
 800deb4:	463b      	mov	r3, r7
 800deb6:	4604      	mov	r4, r0
 800deb8:	460d      	mov	r5, r1
 800deba:	f7f2 fa0d 	bl	80002d8 <__aeabi_dsub>
 800debe:	4602      	mov	r2, r0
 800dec0:	460b      	mov	r3, r1
 800dec2:	4640      	mov	r0, r8
 800dec4:	4649      	mov	r1, r9
 800dec6:	f7f2 fa07 	bl	80002d8 <__aeabi_dsub>
 800deca:	9b04      	ldr	r3, [sp, #16]
 800decc:	9a06      	ldr	r2, [sp, #24]
 800dece:	3b01      	subs	r3, #1
 800ded0:	4313      	orrs	r3, r2
 800ded2:	4682      	mov	sl, r0
 800ded4:	468b      	mov	fp, r1
 800ded6:	f040 81e7 	bne.w	800e2a8 <__ieee754_pow+0x700>
 800deda:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800df90 <__ieee754_pow+0x3e8>
 800dede:	eeb0 8a47 	vmov.f32	s16, s14
 800dee2:	eef0 8a67 	vmov.f32	s17, s15
 800dee6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800deea:	2600      	movs	r6, #0
 800deec:	4632      	mov	r2, r6
 800deee:	463b      	mov	r3, r7
 800def0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800def4:	f7f2 f9f0 	bl	80002d8 <__aeabi_dsub>
 800def8:	4622      	mov	r2, r4
 800defa:	462b      	mov	r3, r5
 800defc:	f7f2 fba4 	bl	8000648 <__aeabi_dmul>
 800df00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df04:	4680      	mov	r8, r0
 800df06:	4689      	mov	r9, r1
 800df08:	4650      	mov	r0, sl
 800df0a:	4659      	mov	r1, fp
 800df0c:	f7f2 fb9c 	bl	8000648 <__aeabi_dmul>
 800df10:	4602      	mov	r2, r0
 800df12:	460b      	mov	r3, r1
 800df14:	4640      	mov	r0, r8
 800df16:	4649      	mov	r1, r9
 800df18:	f7f2 f9e0 	bl	80002dc <__adddf3>
 800df1c:	4632      	mov	r2, r6
 800df1e:	463b      	mov	r3, r7
 800df20:	4680      	mov	r8, r0
 800df22:	4689      	mov	r9, r1
 800df24:	4620      	mov	r0, r4
 800df26:	4629      	mov	r1, r5
 800df28:	f7f2 fb8e 	bl	8000648 <__aeabi_dmul>
 800df2c:	460b      	mov	r3, r1
 800df2e:	4604      	mov	r4, r0
 800df30:	460d      	mov	r5, r1
 800df32:	4602      	mov	r2, r0
 800df34:	4649      	mov	r1, r9
 800df36:	4640      	mov	r0, r8
 800df38:	f7f2 f9d0 	bl	80002dc <__adddf3>
 800df3c:	4b19      	ldr	r3, [pc, #100]	; (800dfa4 <__ieee754_pow+0x3fc>)
 800df3e:	4299      	cmp	r1, r3
 800df40:	ec45 4b19 	vmov	d9, r4, r5
 800df44:	4606      	mov	r6, r0
 800df46:	460f      	mov	r7, r1
 800df48:	468b      	mov	fp, r1
 800df4a:	f340 82f1 	ble.w	800e530 <__ieee754_pow+0x988>
 800df4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800df52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800df56:	4303      	orrs	r3, r0
 800df58:	f000 81e4 	beq.w	800e324 <__ieee754_pow+0x77c>
 800df5c:	ec51 0b18 	vmov	r0, r1, d8
 800df60:	2200      	movs	r2, #0
 800df62:	2300      	movs	r3, #0
 800df64:	f7f2 fde2 	bl	8000b2c <__aeabi_dcmplt>
 800df68:	3800      	subs	r0, #0
 800df6a:	bf18      	it	ne
 800df6c:	2001      	movne	r0, #1
 800df6e:	e72b      	b.n	800ddc8 <__ieee754_pow+0x220>
 800df70:	60000000 	.word	0x60000000
 800df74:	3ff71547 	.word	0x3ff71547
 800df78:	f85ddf44 	.word	0xf85ddf44
 800df7c:	3e54ae0b 	.word	0x3e54ae0b
 800df80:	55555555 	.word	0x55555555
 800df84:	3fd55555 	.word	0x3fd55555
 800df88:	652b82fe 	.word	0x652b82fe
 800df8c:	3ff71547 	.word	0x3ff71547
 800df90:	00000000 	.word	0x00000000
 800df94:	bff00000 	.word	0xbff00000
 800df98:	3ff00000 	.word	0x3ff00000
 800df9c:	3fd00000 	.word	0x3fd00000
 800dfa0:	3fe00000 	.word	0x3fe00000
 800dfa4:	408fffff 	.word	0x408fffff
 800dfa8:	4bd5      	ldr	r3, [pc, #852]	; (800e300 <__ieee754_pow+0x758>)
 800dfaa:	402b      	ands	r3, r5
 800dfac:	2200      	movs	r2, #0
 800dfae:	b92b      	cbnz	r3, 800dfbc <__ieee754_pow+0x414>
 800dfb0:	4bd4      	ldr	r3, [pc, #848]	; (800e304 <__ieee754_pow+0x75c>)
 800dfb2:	f7f2 fb49 	bl	8000648 <__aeabi_dmul>
 800dfb6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800dfba:	460c      	mov	r4, r1
 800dfbc:	1523      	asrs	r3, r4, #20
 800dfbe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dfc2:	4413      	add	r3, r2
 800dfc4:	9305      	str	r3, [sp, #20]
 800dfc6:	4bd0      	ldr	r3, [pc, #832]	; (800e308 <__ieee754_pow+0x760>)
 800dfc8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dfcc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800dfd0:	429c      	cmp	r4, r3
 800dfd2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dfd6:	dd08      	ble.n	800dfea <__ieee754_pow+0x442>
 800dfd8:	4bcc      	ldr	r3, [pc, #816]	; (800e30c <__ieee754_pow+0x764>)
 800dfda:	429c      	cmp	r4, r3
 800dfdc:	f340 8162 	ble.w	800e2a4 <__ieee754_pow+0x6fc>
 800dfe0:	9b05      	ldr	r3, [sp, #20]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	9305      	str	r3, [sp, #20]
 800dfe6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800dfea:	2400      	movs	r4, #0
 800dfec:	00e3      	lsls	r3, r4, #3
 800dfee:	9307      	str	r3, [sp, #28]
 800dff0:	4bc7      	ldr	r3, [pc, #796]	; (800e310 <__ieee754_pow+0x768>)
 800dff2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dff6:	ed93 7b00 	vldr	d7, [r3]
 800dffa:	4629      	mov	r1, r5
 800dffc:	ec53 2b17 	vmov	r2, r3, d7
 800e000:	eeb0 9a47 	vmov.f32	s18, s14
 800e004:	eef0 9a67 	vmov.f32	s19, s15
 800e008:	4682      	mov	sl, r0
 800e00a:	f7f2 f965 	bl	80002d8 <__aeabi_dsub>
 800e00e:	4652      	mov	r2, sl
 800e010:	4606      	mov	r6, r0
 800e012:	460f      	mov	r7, r1
 800e014:	462b      	mov	r3, r5
 800e016:	ec51 0b19 	vmov	r0, r1, d9
 800e01a:	f7f2 f95f 	bl	80002dc <__adddf3>
 800e01e:	4602      	mov	r2, r0
 800e020:	460b      	mov	r3, r1
 800e022:	2000      	movs	r0, #0
 800e024:	49bb      	ldr	r1, [pc, #748]	; (800e314 <__ieee754_pow+0x76c>)
 800e026:	f7f2 fc39 	bl	800089c <__aeabi_ddiv>
 800e02a:	ec41 0b1a 	vmov	d10, r0, r1
 800e02e:	4602      	mov	r2, r0
 800e030:	460b      	mov	r3, r1
 800e032:	4630      	mov	r0, r6
 800e034:	4639      	mov	r1, r7
 800e036:	f7f2 fb07 	bl	8000648 <__aeabi_dmul>
 800e03a:	2300      	movs	r3, #0
 800e03c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e040:	9302      	str	r3, [sp, #8]
 800e042:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e046:	46ab      	mov	fp, r5
 800e048:	106d      	asrs	r5, r5, #1
 800e04a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e04e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e052:	ec41 0b18 	vmov	d8, r0, r1
 800e056:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e05a:	2200      	movs	r2, #0
 800e05c:	4640      	mov	r0, r8
 800e05e:	4649      	mov	r1, r9
 800e060:	4614      	mov	r4, r2
 800e062:	461d      	mov	r5, r3
 800e064:	f7f2 faf0 	bl	8000648 <__aeabi_dmul>
 800e068:	4602      	mov	r2, r0
 800e06a:	460b      	mov	r3, r1
 800e06c:	4630      	mov	r0, r6
 800e06e:	4639      	mov	r1, r7
 800e070:	f7f2 f932 	bl	80002d8 <__aeabi_dsub>
 800e074:	ec53 2b19 	vmov	r2, r3, d9
 800e078:	4606      	mov	r6, r0
 800e07a:	460f      	mov	r7, r1
 800e07c:	4620      	mov	r0, r4
 800e07e:	4629      	mov	r1, r5
 800e080:	f7f2 f92a 	bl	80002d8 <__aeabi_dsub>
 800e084:	4602      	mov	r2, r0
 800e086:	460b      	mov	r3, r1
 800e088:	4650      	mov	r0, sl
 800e08a:	4659      	mov	r1, fp
 800e08c:	f7f2 f924 	bl	80002d8 <__aeabi_dsub>
 800e090:	4642      	mov	r2, r8
 800e092:	464b      	mov	r3, r9
 800e094:	f7f2 fad8 	bl	8000648 <__aeabi_dmul>
 800e098:	4602      	mov	r2, r0
 800e09a:	460b      	mov	r3, r1
 800e09c:	4630      	mov	r0, r6
 800e09e:	4639      	mov	r1, r7
 800e0a0:	f7f2 f91a 	bl	80002d8 <__aeabi_dsub>
 800e0a4:	ec53 2b1a 	vmov	r2, r3, d10
 800e0a8:	f7f2 face 	bl	8000648 <__aeabi_dmul>
 800e0ac:	ec53 2b18 	vmov	r2, r3, d8
 800e0b0:	ec41 0b19 	vmov	d9, r0, r1
 800e0b4:	ec51 0b18 	vmov	r0, r1, d8
 800e0b8:	f7f2 fac6 	bl	8000648 <__aeabi_dmul>
 800e0bc:	a37c      	add	r3, pc, #496	; (adr r3, 800e2b0 <__ieee754_pow+0x708>)
 800e0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c2:	4604      	mov	r4, r0
 800e0c4:	460d      	mov	r5, r1
 800e0c6:	f7f2 fabf 	bl	8000648 <__aeabi_dmul>
 800e0ca:	a37b      	add	r3, pc, #492	; (adr r3, 800e2b8 <__ieee754_pow+0x710>)
 800e0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d0:	f7f2 f904 	bl	80002dc <__adddf3>
 800e0d4:	4622      	mov	r2, r4
 800e0d6:	462b      	mov	r3, r5
 800e0d8:	f7f2 fab6 	bl	8000648 <__aeabi_dmul>
 800e0dc:	a378      	add	r3, pc, #480	; (adr r3, 800e2c0 <__ieee754_pow+0x718>)
 800e0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e2:	f7f2 f8fb 	bl	80002dc <__adddf3>
 800e0e6:	4622      	mov	r2, r4
 800e0e8:	462b      	mov	r3, r5
 800e0ea:	f7f2 faad 	bl	8000648 <__aeabi_dmul>
 800e0ee:	a376      	add	r3, pc, #472	; (adr r3, 800e2c8 <__ieee754_pow+0x720>)
 800e0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f4:	f7f2 f8f2 	bl	80002dc <__adddf3>
 800e0f8:	4622      	mov	r2, r4
 800e0fa:	462b      	mov	r3, r5
 800e0fc:	f7f2 faa4 	bl	8000648 <__aeabi_dmul>
 800e100:	a373      	add	r3, pc, #460	; (adr r3, 800e2d0 <__ieee754_pow+0x728>)
 800e102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e106:	f7f2 f8e9 	bl	80002dc <__adddf3>
 800e10a:	4622      	mov	r2, r4
 800e10c:	462b      	mov	r3, r5
 800e10e:	f7f2 fa9b 	bl	8000648 <__aeabi_dmul>
 800e112:	a371      	add	r3, pc, #452	; (adr r3, 800e2d8 <__ieee754_pow+0x730>)
 800e114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e118:	f7f2 f8e0 	bl	80002dc <__adddf3>
 800e11c:	4622      	mov	r2, r4
 800e11e:	4606      	mov	r6, r0
 800e120:	460f      	mov	r7, r1
 800e122:	462b      	mov	r3, r5
 800e124:	4620      	mov	r0, r4
 800e126:	4629      	mov	r1, r5
 800e128:	f7f2 fa8e 	bl	8000648 <__aeabi_dmul>
 800e12c:	4602      	mov	r2, r0
 800e12e:	460b      	mov	r3, r1
 800e130:	4630      	mov	r0, r6
 800e132:	4639      	mov	r1, r7
 800e134:	f7f2 fa88 	bl	8000648 <__aeabi_dmul>
 800e138:	4642      	mov	r2, r8
 800e13a:	4604      	mov	r4, r0
 800e13c:	460d      	mov	r5, r1
 800e13e:	464b      	mov	r3, r9
 800e140:	ec51 0b18 	vmov	r0, r1, d8
 800e144:	f7f2 f8ca 	bl	80002dc <__adddf3>
 800e148:	ec53 2b19 	vmov	r2, r3, d9
 800e14c:	f7f2 fa7c 	bl	8000648 <__aeabi_dmul>
 800e150:	4622      	mov	r2, r4
 800e152:	462b      	mov	r3, r5
 800e154:	f7f2 f8c2 	bl	80002dc <__adddf3>
 800e158:	4642      	mov	r2, r8
 800e15a:	4682      	mov	sl, r0
 800e15c:	468b      	mov	fp, r1
 800e15e:	464b      	mov	r3, r9
 800e160:	4640      	mov	r0, r8
 800e162:	4649      	mov	r1, r9
 800e164:	f7f2 fa70 	bl	8000648 <__aeabi_dmul>
 800e168:	4b6b      	ldr	r3, [pc, #428]	; (800e318 <__ieee754_pow+0x770>)
 800e16a:	2200      	movs	r2, #0
 800e16c:	4606      	mov	r6, r0
 800e16e:	460f      	mov	r7, r1
 800e170:	f7f2 f8b4 	bl	80002dc <__adddf3>
 800e174:	4652      	mov	r2, sl
 800e176:	465b      	mov	r3, fp
 800e178:	f7f2 f8b0 	bl	80002dc <__adddf3>
 800e17c:	2000      	movs	r0, #0
 800e17e:	4604      	mov	r4, r0
 800e180:	460d      	mov	r5, r1
 800e182:	4602      	mov	r2, r0
 800e184:	460b      	mov	r3, r1
 800e186:	4640      	mov	r0, r8
 800e188:	4649      	mov	r1, r9
 800e18a:	f7f2 fa5d 	bl	8000648 <__aeabi_dmul>
 800e18e:	4b62      	ldr	r3, [pc, #392]	; (800e318 <__ieee754_pow+0x770>)
 800e190:	4680      	mov	r8, r0
 800e192:	4689      	mov	r9, r1
 800e194:	2200      	movs	r2, #0
 800e196:	4620      	mov	r0, r4
 800e198:	4629      	mov	r1, r5
 800e19a:	f7f2 f89d 	bl	80002d8 <__aeabi_dsub>
 800e19e:	4632      	mov	r2, r6
 800e1a0:	463b      	mov	r3, r7
 800e1a2:	f7f2 f899 	bl	80002d8 <__aeabi_dsub>
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	460b      	mov	r3, r1
 800e1aa:	4650      	mov	r0, sl
 800e1ac:	4659      	mov	r1, fp
 800e1ae:	f7f2 f893 	bl	80002d8 <__aeabi_dsub>
 800e1b2:	ec53 2b18 	vmov	r2, r3, d8
 800e1b6:	f7f2 fa47 	bl	8000648 <__aeabi_dmul>
 800e1ba:	4622      	mov	r2, r4
 800e1bc:	4606      	mov	r6, r0
 800e1be:	460f      	mov	r7, r1
 800e1c0:	462b      	mov	r3, r5
 800e1c2:	ec51 0b19 	vmov	r0, r1, d9
 800e1c6:	f7f2 fa3f 	bl	8000648 <__aeabi_dmul>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	460b      	mov	r3, r1
 800e1ce:	4630      	mov	r0, r6
 800e1d0:	4639      	mov	r1, r7
 800e1d2:	f7f2 f883 	bl	80002dc <__adddf3>
 800e1d6:	4606      	mov	r6, r0
 800e1d8:	460f      	mov	r7, r1
 800e1da:	4602      	mov	r2, r0
 800e1dc:	460b      	mov	r3, r1
 800e1de:	4640      	mov	r0, r8
 800e1e0:	4649      	mov	r1, r9
 800e1e2:	f7f2 f87b 	bl	80002dc <__adddf3>
 800e1e6:	a33e      	add	r3, pc, #248	; (adr r3, 800e2e0 <__ieee754_pow+0x738>)
 800e1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ec:	2000      	movs	r0, #0
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	460d      	mov	r5, r1
 800e1f2:	f7f2 fa29 	bl	8000648 <__aeabi_dmul>
 800e1f6:	4642      	mov	r2, r8
 800e1f8:	ec41 0b18 	vmov	d8, r0, r1
 800e1fc:	464b      	mov	r3, r9
 800e1fe:	4620      	mov	r0, r4
 800e200:	4629      	mov	r1, r5
 800e202:	f7f2 f869 	bl	80002d8 <__aeabi_dsub>
 800e206:	4602      	mov	r2, r0
 800e208:	460b      	mov	r3, r1
 800e20a:	4630      	mov	r0, r6
 800e20c:	4639      	mov	r1, r7
 800e20e:	f7f2 f863 	bl	80002d8 <__aeabi_dsub>
 800e212:	a335      	add	r3, pc, #212	; (adr r3, 800e2e8 <__ieee754_pow+0x740>)
 800e214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e218:	f7f2 fa16 	bl	8000648 <__aeabi_dmul>
 800e21c:	a334      	add	r3, pc, #208	; (adr r3, 800e2f0 <__ieee754_pow+0x748>)
 800e21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e222:	4606      	mov	r6, r0
 800e224:	460f      	mov	r7, r1
 800e226:	4620      	mov	r0, r4
 800e228:	4629      	mov	r1, r5
 800e22a:	f7f2 fa0d 	bl	8000648 <__aeabi_dmul>
 800e22e:	4602      	mov	r2, r0
 800e230:	460b      	mov	r3, r1
 800e232:	4630      	mov	r0, r6
 800e234:	4639      	mov	r1, r7
 800e236:	f7f2 f851 	bl	80002dc <__adddf3>
 800e23a:	9a07      	ldr	r2, [sp, #28]
 800e23c:	4b37      	ldr	r3, [pc, #220]	; (800e31c <__ieee754_pow+0x774>)
 800e23e:	4413      	add	r3, r2
 800e240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e244:	f7f2 f84a 	bl	80002dc <__adddf3>
 800e248:	4682      	mov	sl, r0
 800e24a:	9805      	ldr	r0, [sp, #20]
 800e24c:	468b      	mov	fp, r1
 800e24e:	f7f2 f991 	bl	8000574 <__aeabi_i2d>
 800e252:	9a07      	ldr	r2, [sp, #28]
 800e254:	4b32      	ldr	r3, [pc, #200]	; (800e320 <__ieee754_pow+0x778>)
 800e256:	4413      	add	r3, r2
 800e258:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e25c:	4606      	mov	r6, r0
 800e25e:	460f      	mov	r7, r1
 800e260:	4652      	mov	r2, sl
 800e262:	465b      	mov	r3, fp
 800e264:	ec51 0b18 	vmov	r0, r1, d8
 800e268:	f7f2 f838 	bl	80002dc <__adddf3>
 800e26c:	4642      	mov	r2, r8
 800e26e:	464b      	mov	r3, r9
 800e270:	f7f2 f834 	bl	80002dc <__adddf3>
 800e274:	4632      	mov	r2, r6
 800e276:	463b      	mov	r3, r7
 800e278:	f7f2 f830 	bl	80002dc <__adddf3>
 800e27c:	2000      	movs	r0, #0
 800e27e:	4632      	mov	r2, r6
 800e280:	463b      	mov	r3, r7
 800e282:	4604      	mov	r4, r0
 800e284:	460d      	mov	r5, r1
 800e286:	f7f2 f827 	bl	80002d8 <__aeabi_dsub>
 800e28a:	4642      	mov	r2, r8
 800e28c:	464b      	mov	r3, r9
 800e28e:	f7f2 f823 	bl	80002d8 <__aeabi_dsub>
 800e292:	ec53 2b18 	vmov	r2, r3, d8
 800e296:	f7f2 f81f 	bl	80002d8 <__aeabi_dsub>
 800e29a:	4602      	mov	r2, r0
 800e29c:	460b      	mov	r3, r1
 800e29e:	4650      	mov	r0, sl
 800e2a0:	4659      	mov	r1, fp
 800e2a2:	e610      	b.n	800dec6 <__ieee754_pow+0x31e>
 800e2a4:	2401      	movs	r4, #1
 800e2a6:	e6a1      	b.n	800dfec <__ieee754_pow+0x444>
 800e2a8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e2f8 <__ieee754_pow+0x750>
 800e2ac:	e617      	b.n	800dede <__ieee754_pow+0x336>
 800e2ae:	bf00      	nop
 800e2b0:	4a454eef 	.word	0x4a454eef
 800e2b4:	3fca7e28 	.word	0x3fca7e28
 800e2b8:	93c9db65 	.word	0x93c9db65
 800e2bc:	3fcd864a 	.word	0x3fcd864a
 800e2c0:	a91d4101 	.word	0xa91d4101
 800e2c4:	3fd17460 	.word	0x3fd17460
 800e2c8:	518f264d 	.word	0x518f264d
 800e2cc:	3fd55555 	.word	0x3fd55555
 800e2d0:	db6fabff 	.word	0xdb6fabff
 800e2d4:	3fdb6db6 	.word	0x3fdb6db6
 800e2d8:	33333303 	.word	0x33333303
 800e2dc:	3fe33333 	.word	0x3fe33333
 800e2e0:	e0000000 	.word	0xe0000000
 800e2e4:	3feec709 	.word	0x3feec709
 800e2e8:	dc3a03fd 	.word	0xdc3a03fd
 800e2ec:	3feec709 	.word	0x3feec709
 800e2f0:	145b01f5 	.word	0x145b01f5
 800e2f4:	be3e2fe0 	.word	0xbe3e2fe0
 800e2f8:	00000000 	.word	0x00000000
 800e2fc:	3ff00000 	.word	0x3ff00000
 800e300:	7ff00000 	.word	0x7ff00000
 800e304:	43400000 	.word	0x43400000
 800e308:	0003988e 	.word	0x0003988e
 800e30c:	000bb679 	.word	0x000bb679
 800e310:	080140b8 	.word	0x080140b8
 800e314:	3ff00000 	.word	0x3ff00000
 800e318:	40080000 	.word	0x40080000
 800e31c:	080140d8 	.word	0x080140d8
 800e320:	080140c8 	.word	0x080140c8
 800e324:	a3b5      	add	r3, pc, #724	; (adr r3, 800e5fc <__ieee754_pow+0xa54>)
 800e326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e32a:	4640      	mov	r0, r8
 800e32c:	4649      	mov	r1, r9
 800e32e:	f7f1 ffd5 	bl	80002dc <__adddf3>
 800e332:	4622      	mov	r2, r4
 800e334:	ec41 0b1a 	vmov	d10, r0, r1
 800e338:	462b      	mov	r3, r5
 800e33a:	4630      	mov	r0, r6
 800e33c:	4639      	mov	r1, r7
 800e33e:	f7f1 ffcb 	bl	80002d8 <__aeabi_dsub>
 800e342:	4602      	mov	r2, r0
 800e344:	460b      	mov	r3, r1
 800e346:	ec51 0b1a 	vmov	r0, r1, d10
 800e34a:	f7f2 fc0d 	bl	8000b68 <__aeabi_dcmpgt>
 800e34e:	2800      	cmp	r0, #0
 800e350:	f47f ae04 	bne.w	800df5c <__ieee754_pow+0x3b4>
 800e354:	4aa4      	ldr	r2, [pc, #656]	; (800e5e8 <__ieee754_pow+0xa40>)
 800e356:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e35a:	4293      	cmp	r3, r2
 800e35c:	f340 8108 	ble.w	800e570 <__ieee754_pow+0x9c8>
 800e360:	151b      	asrs	r3, r3, #20
 800e362:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e366:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e36a:	fa4a f303 	asr.w	r3, sl, r3
 800e36e:	445b      	add	r3, fp
 800e370:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e374:	4e9d      	ldr	r6, [pc, #628]	; (800e5ec <__ieee754_pow+0xa44>)
 800e376:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e37a:	4116      	asrs	r6, r2
 800e37c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e380:	2000      	movs	r0, #0
 800e382:	ea23 0106 	bic.w	r1, r3, r6
 800e386:	f1c2 0214 	rsb	r2, r2, #20
 800e38a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e38e:	fa4a fa02 	asr.w	sl, sl, r2
 800e392:	f1bb 0f00 	cmp.w	fp, #0
 800e396:	4602      	mov	r2, r0
 800e398:	460b      	mov	r3, r1
 800e39a:	4620      	mov	r0, r4
 800e39c:	4629      	mov	r1, r5
 800e39e:	bfb8      	it	lt
 800e3a0:	f1ca 0a00 	rsblt	sl, sl, #0
 800e3a4:	f7f1 ff98 	bl	80002d8 <__aeabi_dsub>
 800e3a8:	ec41 0b19 	vmov	d9, r0, r1
 800e3ac:	4642      	mov	r2, r8
 800e3ae:	464b      	mov	r3, r9
 800e3b0:	ec51 0b19 	vmov	r0, r1, d9
 800e3b4:	f7f1 ff92 	bl	80002dc <__adddf3>
 800e3b8:	a37b      	add	r3, pc, #492	; (adr r3, 800e5a8 <__ieee754_pow+0xa00>)
 800e3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3be:	2000      	movs	r0, #0
 800e3c0:	4604      	mov	r4, r0
 800e3c2:	460d      	mov	r5, r1
 800e3c4:	f7f2 f940 	bl	8000648 <__aeabi_dmul>
 800e3c8:	ec53 2b19 	vmov	r2, r3, d9
 800e3cc:	4606      	mov	r6, r0
 800e3ce:	460f      	mov	r7, r1
 800e3d0:	4620      	mov	r0, r4
 800e3d2:	4629      	mov	r1, r5
 800e3d4:	f7f1 ff80 	bl	80002d8 <__aeabi_dsub>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	460b      	mov	r3, r1
 800e3dc:	4640      	mov	r0, r8
 800e3de:	4649      	mov	r1, r9
 800e3e0:	f7f1 ff7a 	bl	80002d8 <__aeabi_dsub>
 800e3e4:	a372      	add	r3, pc, #456	; (adr r3, 800e5b0 <__ieee754_pow+0xa08>)
 800e3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ea:	f7f2 f92d 	bl	8000648 <__aeabi_dmul>
 800e3ee:	a372      	add	r3, pc, #456	; (adr r3, 800e5b8 <__ieee754_pow+0xa10>)
 800e3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f4:	4680      	mov	r8, r0
 800e3f6:	4689      	mov	r9, r1
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	4629      	mov	r1, r5
 800e3fc:	f7f2 f924 	bl	8000648 <__aeabi_dmul>
 800e400:	4602      	mov	r2, r0
 800e402:	460b      	mov	r3, r1
 800e404:	4640      	mov	r0, r8
 800e406:	4649      	mov	r1, r9
 800e408:	f7f1 ff68 	bl	80002dc <__adddf3>
 800e40c:	4604      	mov	r4, r0
 800e40e:	460d      	mov	r5, r1
 800e410:	4602      	mov	r2, r0
 800e412:	460b      	mov	r3, r1
 800e414:	4630      	mov	r0, r6
 800e416:	4639      	mov	r1, r7
 800e418:	f7f1 ff60 	bl	80002dc <__adddf3>
 800e41c:	4632      	mov	r2, r6
 800e41e:	463b      	mov	r3, r7
 800e420:	4680      	mov	r8, r0
 800e422:	4689      	mov	r9, r1
 800e424:	f7f1 ff58 	bl	80002d8 <__aeabi_dsub>
 800e428:	4602      	mov	r2, r0
 800e42a:	460b      	mov	r3, r1
 800e42c:	4620      	mov	r0, r4
 800e42e:	4629      	mov	r1, r5
 800e430:	f7f1 ff52 	bl	80002d8 <__aeabi_dsub>
 800e434:	4642      	mov	r2, r8
 800e436:	4606      	mov	r6, r0
 800e438:	460f      	mov	r7, r1
 800e43a:	464b      	mov	r3, r9
 800e43c:	4640      	mov	r0, r8
 800e43e:	4649      	mov	r1, r9
 800e440:	f7f2 f902 	bl	8000648 <__aeabi_dmul>
 800e444:	a35e      	add	r3, pc, #376	; (adr r3, 800e5c0 <__ieee754_pow+0xa18>)
 800e446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e44a:	4604      	mov	r4, r0
 800e44c:	460d      	mov	r5, r1
 800e44e:	f7f2 f8fb 	bl	8000648 <__aeabi_dmul>
 800e452:	a35d      	add	r3, pc, #372	; (adr r3, 800e5c8 <__ieee754_pow+0xa20>)
 800e454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e458:	f7f1 ff3e 	bl	80002d8 <__aeabi_dsub>
 800e45c:	4622      	mov	r2, r4
 800e45e:	462b      	mov	r3, r5
 800e460:	f7f2 f8f2 	bl	8000648 <__aeabi_dmul>
 800e464:	a35a      	add	r3, pc, #360	; (adr r3, 800e5d0 <__ieee754_pow+0xa28>)
 800e466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46a:	f7f1 ff37 	bl	80002dc <__adddf3>
 800e46e:	4622      	mov	r2, r4
 800e470:	462b      	mov	r3, r5
 800e472:	f7f2 f8e9 	bl	8000648 <__aeabi_dmul>
 800e476:	a358      	add	r3, pc, #352	; (adr r3, 800e5d8 <__ieee754_pow+0xa30>)
 800e478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47c:	f7f1 ff2c 	bl	80002d8 <__aeabi_dsub>
 800e480:	4622      	mov	r2, r4
 800e482:	462b      	mov	r3, r5
 800e484:	f7f2 f8e0 	bl	8000648 <__aeabi_dmul>
 800e488:	a355      	add	r3, pc, #340	; (adr r3, 800e5e0 <__ieee754_pow+0xa38>)
 800e48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48e:	f7f1 ff25 	bl	80002dc <__adddf3>
 800e492:	4622      	mov	r2, r4
 800e494:	462b      	mov	r3, r5
 800e496:	f7f2 f8d7 	bl	8000648 <__aeabi_dmul>
 800e49a:	4602      	mov	r2, r0
 800e49c:	460b      	mov	r3, r1
 800e49e:	4640      	mov	r0, r8
 800e4a0:	4649      	mov	r1, r9
 800e4a2:	f7f1 ff19 	bl	80002d8 <__aeabi_dsub>
 800e4a6:	4604      	mov	r4, r0
 800e4a8:	460d      	mov	r5, r1
 800e4aa:	4602      	mov	r2, r0
 800e4ac:	460b      	mov	r3, r1
 800e4ae:	4640      	mov	r0, r8
 800e4b0:	4649      	mov	r1, r9
 800e4b2:	f7f2 f8c9 	bl	8000648 <__aeabi_dmul>
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	ec41 0b19 	vmov	d9, r0, r1
 800e4bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e4c0:	4620      	mov	r0, r4
 800e4c2:	4629      	mov	r1, r5
 800e4c4:	f7f1 ff08 	bl	80002d8 <__aeabi_dsub>
 800e4c8:	4602      	mov	r2, r0
 800e4ca:	460b      	mov	r3, r1
 800e4cc:	ec51 0b19 	vmov	r0, r1, d9
 800e4d0:	f7f2 f9e4 	bl	800089c <__aeabi_ddiv>
 800e4d4:	4632      	mov	r2, r6
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	460d      	mov	r5, r1
 800e4da:	463b      	mov	r3, r7
 800e4dc:	4640      	mov	r0, r8
 800e4de:	4649      	mov	r1, r9
 800e4e0:	f7f2 f8b2 	bl	8000648 <__aeabi_dmul>
 800e4e4:	4632      	mov	r2, r6
 800e4e6:	463b      	mov	r3, r7
 800e4e8:	f7f1 fef8 	bl	80002dc <__adddf3>
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	460b      	mov	r3, r1
 800e4f0:	4620      	mov	r0, r4
 800e4f2:	4629      	mov	r1, r5
 800e4f4:	f7f1 fef0 	bl	80002d8 <__aeabi_dsub>
 800e4f8:	4642      	mov	r2, r8
 800e4fa:	464b      	mov	r3, r9
 800e4fc:	f7f1 feec 	bl	80002d8 <__aeabi_dsub>
 800e500:	460b      	mov	r3, r1
 800e502:	4602      	mov	r2, r0
 800e504:	493a      	ldr	r1, [pc, #232]	; (800e5f0 <__ieee754_pow+0xa48>)
 800e506:	2000      	movs	r0, #0
 800e508:	f7f1 fee6 	bl	80002d8 <__aeabi_dsub>
 800e50c:	ec41 0b10 	vmov	d0, r0, r1
 800e510:	ee10 3a90 	vmov	r3, s1
 800e514:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e51c:	da2b      	bge.n	800e576 <__ieee754_pow+0x9ce>
 800e51e:	4650      	mov	r0, sl
 800e520:	f000 f966 	bl	800e7f0 <scalbn>
 800e524:	ec51 0b10 	vmov	r0, r1, d0
 800e528:	ec53 2b18 	vmov	r2, r3, d8
 800e52c:	f7ff bbed 	b.w	800dd0a <__ieee754_pow+0x162>
 800e530:	4b30      	ldr	r3, [pc, #192]	; (800e5f4 <__ieee754_pow+0xa4c>)
 800e532:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e536:	429e      	cmp	r6, r3
 800e538:	f77f af0c 	ble.w	800e354 <__ieee754_pow+0x7ac>
 800e53c:	4b2e      	ldr	r3, [pc, #184]	; (800e5f8 <__ieee754_pow+0xa50>)
 800e53e:	440b      	add	r3, r1
 800e540:	4303      	orrs	r3, r0
 800e542:	d009      	beq.n	800e558 <__ieee754_pow+0x9b0>
 800e544:	ec51 0b18 	vmov	r0, r1, d8
 800e548:	2200      	movs	r2, #0
 800e54a:	2300      	movs	r3, #0
 800e54c:	f7f2 faee 	bl	8000b2c <__aeabi_dcmplt>
 800e550:	3800      	subs	r0, #0
 800e552:	bf18      	it	ne
 800e554:	2001      	movne	r0, #1
 800e556:	e447      	b.n	800dde8 <__ieee754_pow+0x240>
 800e558:	4622      	mov	r2, r4
 800e55a:	462b      	mov	r3, r5
 800e55c:	f7f1 febc 	bl	80002d8 <__aeabi_dsub>
 800e560:	4642      	mov	r2, r8
 800e562:	464b      	mov	r3, r9
 800e564:	f7f2 faf6 	bl	8000b54 <__aeabi_dcmpge>
 800e568:	2800      	cmp	r0, #0
 800e56a:	f43f aef3 	beq.w	800e354 <__ieee754_pow+0x7ac>
 800e56e:	e7e9      	b.n	800e544 <__ieee754_pow+0x99c>
 800e570:	f04f 0a00 	mov.w	sl, #0
 800e574:	e71a      	b.n	800e3ac <__ieee754_pow+0x804>
 800e576:	ec51 0b10 	vmov	r0, r1, d0
 800e57a:	4619      	mov	r1, r3
 800e57c:	e7d4      	b.n	800e528 <__ieee754_pow+0x980>
 800e57e:	491c      	ldr	r1, [pc, #112]	; (800e5f0 <__ieee754_pow+0xa48>)
 800e580:	2000      	movs	r0, #0
 800e582:	f7ff bb30 	b.w	800dbe6 <__ieee754_pow+0x3e>
 800e586:	2000      	movs	r0, #0
 800e588:	2100      	movs	r1, #0
 800e58a:	f7ff bb2c 	b.w	800dbe6 <__ieee754_pow+0x3e>
 800e58e:	4630      	mov	r0, r6
 800e590:	4639      	mov	r1, r7
 800e592:	f7ff bb28 	b.w	800dbe6 <__ieee754_pow+0x3e>
 800e596:	9204      	str	r2, [sp, #16]
 800e598:	f7ff bb7a 	b.w	800dc90 <__ieee754_pow+0xe8>
 800e59c:	2300      	movs	r3, #0
 800e59e:	f7ff bb64 	b.w	800dc6a <__ieee754_pow+0xc2>
 800e5a2:	bf00      	nop
 800e5a4:	f3af 8000 	nop.w
 800e5a8:	00000000 	.word	0x00000000
 800e5ac:	3fe62e43 	.word	0x3fe62e43
 800e5b0:	fefa39ef 	.word	0xfefa39ef
 800e5b4:	3fe62e42 	.word	0x3fe62e42
 800e5b8:	0ca86c39 	.word	0x0ca86c39
 800e5bc:	be205c61 	.word	0xbe205c61
 800e5c0:	72bea4d0 	.word	0x72bea4d0
 800e5c4:	3e663769 	.word	0x3e663769
 800e5c8:	c5d26bf1 	.word	0xc5d26bf1
 800e5cc:	3ebbbd41 	.word	0x3ebbbd41
 800e5d0:	af25de2c 	.word	0xaf25de2c
 800e5d4:	3f11566a 	.word	0x3f11566a
 800e5d8:	16bebd93 	.word	0x16bebd93
 800e5dc:	3f66c16c 	.word	0x3f66c16c
 800e5e0:	5555553e 	.word	0x5555553e
 800e5e4:	3fc55555 	.word	0x3fc55555
 800e5e8:	3fe00000 	.word	0x3fe00000
 800e5ec:	000fffff 	.word	0x000fffff
 800e5f0:	3ff00000 	.word	0x3ff00000
 800e5f4:	4090cbff 	.word	0x4090cbff
 800e5f8:	3f6f3400 	.word	0x3f6f3400
 800e5fc:	652b82fe 	.word	0x652b82fe
 800e600:	3c971547 	.word	0x3c971547

0800e604 <__ieee754_sqrt>:
 800e604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e608:	ec55 4b10 	vmov	r4, r5, d0
 800e60c:	4e55      	ldr	r6, [pc, #340]	; (800e764 <__ieee754_sqrt+0x160>)
 800e60e:	43ae      	bics	r6, r5
 800e610:	ee10 0a10 	vmov	r0, s0
 800e614:	ee10 3a10 	vmov	r3, s0
 800e618:	462a      	mov	r2, r5
 800e61a:	4629      	mov	r1, r5
 800e61c:	d110      	bne.n	800e640 <__ieee754_sqrt+0x3c>
 800e61e:	ee10 2a10 	vmov	r2, s0
 800e622:	462b      	mov	r3, r5
 800e624:	f7f2 f810 	bl	8000648 <__aeabi_dmul>
 800e628:	4602      	mov	r2, r0
 800e62a:	460b      	mov	r3, r1
 800e62c:	4620      	mov	r0, r4
 800e62e:	4629      	mov	r1, r5
 800e630:	f7f1 fe54 	bl	80002dc <__adddf3>
 800e634:	4604      	mov	r4, r0
 800e636:	460d      	mov	r5, r1
 800e638:	ec45 4b10 	vmov	d0, r4, r5
 800e63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e640:	2d00      	cmp	r5, #0
 800e642:	dc10      	bgt.n	800e666 <__ieee754_sqrt+0x62>
 800e644:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e648:	4330      	orrs	r0, r6
 800e64a:	d0f5      	beq.n	800e638 <__ieee754_sqrt+0x34>
 800e64c:	b15d      	cbz	r5, 800e666 <__ieee754_sqrt+0x62>
 800e64e:	ee10 2a10 	vmov	r2, s0
 800e652:	462b      	mov	r3, r5
 800e654:	ee10 0a10 	vmov	r0, s0
 800e658:	f7f1 fe3e 	bl	80002d8 <__aeabi_dsub>
 800e65c:	4602      	mov	r2, r0
 800e65e:	460b      	mov	r3, r1
 800e660:	f7f2 f91c 	bl	800089c <__aeabi_ddiv>
 800e664:	e7e6      	b.n	800e634 <__ieee754_sqrt+0x30>
 800e666:	1512      	asrs	r2, r2, #20
 800e668:	d074      	beq.n	800e754 <__ieee754_sqrt+0x150>
 800e66a:	07d4      	lsls	r4, r2, #31
 800e66c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e670:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e678:	bf5e      	ittt	pl
 800e67a:	0fda      	lsrpl	r2, r3, #31
 800e67c:	005b      	lslpl	r3, r3, #1
 800e67e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e682:	2400      	movs	r4, #0
 800e684:	0fda      	lsrs	r2, r3, #31
 800e686:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e68a:	107f      	asrs	r7, r7, #1
 800e68c:	005b      	lsls	r3, r3, #1
 800e68e:	2516      	movs	r5, #22
 800e690:	4620      	mov	r0, r4
 800e692:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e696:	1886      	adds	r6, r0, r2
 800e698:	428e      	cmp	r6, r1
 800e69a:	bfde      	ittt	le
 800e69c:	1b89      	suble	r1, r1, r6
 800e69e:	18b0      	addle	r0, r6, r2
 800e6a0:	18a4      	addle	r4, r4, r2
 800e6a2:	0049      	lsls	r1, r1, #1
 800e6a4:	3d01      	subs	r5, #1
 800e6a6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e6aa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e6ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e6b2:	d1f0      	bne.n	800e696 <__ieee754_sqrt+0x92>
 800e6b4:	462a      	mov	r2, r5
 800e6b6:	f04f 0e20 	mov.w	lr, #32
 800e6ba:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e6be:	4281      	cmp	r1, r0
 800e6c0:	eb06 0c05 	add.w	ip, r6, r5
 800e6c4:	dc02      	bgt.n	800e6cc <__ieee754_sqrt+0xc8>
 800e6c6:	d113      	bne.n	800e6f0 <__ieee754_sqrt+0xec>
 800e6c8:	459c      	cmp	ip, r3
 800e6ca:	d811      	bhi.n	800e6f0 <__ieee754_sqrt+0xec>
 800e6cc:	f1bc 0f00 	cmp.w	ip, #0
 800e6d0:	eb0c 0506 	add.w	r5, ip, r6
 800e6d4:	da43      	bge.n	800e75e <__ieee754_sqrt+0x15a>
 800e6d6:	2d00      	cmp	r5, #0
 800e6d8:	db41      	blt.n	800e75e <__ieee754_sqrt+0x15a>
 800e6da:	f100 0801 	add.w	r8, r0, #1
 800e6de:	1a09      	subs	r1, r1, r0
 800e6e0:	459c      	cmp	ip, r3
 800e6e2:	bf88      	it	hi
 800e6e4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800e6e8:	eba3 030c 	sub.w	r3, r3, ip
 800e6ec:	4432      	add	r2, r6
 800e6ee:	4640      	mov	r0, r8
 800e6f0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e6f4:	f1be 0e01 	subs.w	lr, lr, #1
 800e6f8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e6fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e700:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e704:	d1db      	bne.n	800e6be <__ieee754_sqrt+0xba>
 800e706:	430b      	orrs	r3, r1
 800e708:	d006      	beq.n	800e718 <__ieee754_sqrt+0x114>
 800e70a:	1c50      	adds	r0, r2, #1
 800e70c:	bf13      	iteet	ne
 800e70e:	3201      	addne	r2, #1
 800e710:	3401      	addeq	r4, #1
 800e712:	4672      	moveq	r2, lr
 800e714:	f022 0201 	bicne.w	r2, r2, #1
 800e718:	1063      	asrs	r3, r4, #1
 800e71a:	0852      	lsrs	r2, r2, #1
 800e71c:	07e1      	lsls	r1, r4, #31
 800e71e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e722:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e726:	bf48      	it	mi
 800e728:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e72c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e730:	4614      	mov	r4, r2
 800e732:	e781      	b.n	800e638 <__ieee754_sqrt+0x34>
 800e734:	0ad9      	lsrs	r1, r3, #11
 800e736:	3815      	subs	r0, #21
 800e738:	055b      	lsls	r3, r3, #21
 800e73a:	2900      	cmp	r1, #0
 800e73c:	d0fa      	beq.n	800e734 <__ieee754_sqrt+0x130>
 800e73e:	02cd      	lsls	r5, r1, #11
 800e740:	d50a      	bpl.n	800e758 <__ieee754_sqrt+0x154>
 800e742:	f1c2 0420 	rsb	r4, r2, #32
 800e746:	fa23 f404 	lsr.w	r4, r3, r4
 800e74a:	1e55      	subs	r5, r2, #1
 800e74c:	4093      	lsls	r3, r2
 800e74e:	4321      	orrs	r1, r4
 800e750:	1b42      	subs	r2, r0, r5
 800e752:	e78a      	b.n	800e66a <__ieee754_sqrt+0x66>
 800e754:	4610      	mov	r0, r2
 800e756:	e7f0      	b.n	800e73a <__ieee754_sqrt+0x136>
 800e758:	0049      	lsls	r1, r1, #1
 800e75a:	3201      	adds	r2, #1
 800e75c:	e7ef      	b.n	800e73e <__ieee754_sqrt+0x13a>
 800e75e:	4680      	mov	r8, r0
 800e760:	e7bd      	b.n	800e6de <__ieee754_sqrt+0xda>
 800e762:	bf00      	nop
 800e764:	7ff00000 	.word	0x7ff00000

0800e768 <with_errno>:
 800e768:	b570      	push	{r4, r5, r6, lr}
 800e76a:	4604      	mov	r4, r0
 800e76c:	460d      	mov	r5, r1
 800e76e:	4616      	mov	r6, r2
 800e770:	f000 f8c4 	bl	800e8fc <__errno>
 800e774:	4629      	mov	r1, r5
 800e776:	6006      	str	r6, [r0, #0]
 800e778:	4620      	mov	r0, r4
 800e77a:	bd70      	pop	{r4, r5, r6, pc}

0800e77c <xflow>:
 800e77c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e77e:	4614      	mov	r4, r2
 800e780:	461d      	mov	r5, r3
 800e782:	b108      	cbz	r0, 800e788 <xflow+0xc>
 800e784:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e788:	e9cd 2300 	strd	r2, r3, [sp]
 800e78c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e790:	4620      	mov	r0, r4
 800e792:	4629      	mov	r1, r5
 800e794:	f7f1 ff58 	bl	8000648 <__aeabi_dmul>
 800e798:	2222      	movs	r2, #34	; 0x22
 800e79a:	b003      	add	sp, #12
 800e79c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e7a0:	f7ff bfe2 	b.w	800e768 <with_errno>

0800e7a4 <__math_uflow>:
 800e7a4:	b508      	push	{r3, lr}
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e7ac:	f7ff ffe6 	bl	800e77c <xflow>
 800e7b0:	ec41 0b10 	vmov	d0, r0, r1
 800e7b4:	bd08      	pop	{r3, pc}

0800e7b6 <__math_oflow>:
 800e7b6:	b508      	push	{r3, lr}
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e7be:	f7ff ffdd 	bl	800e77c <xflow>
 800e7c2:	ec41 0b10 	vmov	d0, r0, r1
 800e7c6:	bd08      	pop	{r3, pc}

0800e7c8 <fabs>:
 800e7c8:	ec51 0b10 	vmov	r0, r1, d0
 800e7cc:	ee10 2a10 	vmov	r2, s0
 800e7d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e7d4:	ec43 2b10 	vmov	d0, r2, r3
 800e7d8:	4770      	bx	lr

0800e7da <finite>:
 800e7da:	b082      	sub	sp, #8
 800e7dc:	ed8d 0b00 	vstr	d0, [sp]
 800e7e0:	9801      	ldr	r0, [sp, #4]
 800e7e2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e7e6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e7ea:	0fc0      	lsrs	r0, r0, #31
 800e7ec:	b002      	add	sp, #8
 800e7ee:	4770      	bx	lr

0800e7f0 <scalbn>:
 800e7f0:	b570      	push	{r4, r5, r6, lr}
 800e7f2:	ec55 4b10 	vmov	r4, r5, d0
 800e7f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e7fa:	4606      	mov	r6, r0
 800e7fc:	462b      	mov	r3, r5
 800e7fe:	b99a      	cbnz	r2, 800e828 <scalbn+0x38>
 800e800:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e804:	4323      	orrs	r3, r4
 800e806:	d036      	beq.n	800e876 <scalbn+0x86>
 800e808:	4b39      	ldr	r3, [pc, #228]	; (800e8f0 <scalbn+0x100>)
 800e80a:	4629      	mov	r1, r5
 800e80c:	ee10 0a10 	vmov	r0, s0
 800e810:	2200      	movs	r2, #0
 800e812:	f7f1 ff19 	bl	8000648 <__aeabi_dmul>
 800e816:	4b37      	ldr	r3, [pc, #220]	; (800e8f4 <scalbn+0x104>)
 800e818:	429e      	cmp	r6, r3
 800e81a:	4604      	mov	r4, r0
 800e81c:	460d      	mov	r5, r1
 800e81e:	da10      	bge.n	800e842 <scalbn+0x52>
 800e820:	a32b      	add	r3, pc, #172	; (adr r3, 800e8d0 <scalbn+0xe0>)
 800e822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e826:	e03a      	b.n	800e89e <scalbn+0xae>
 800e828:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e82c:	428a      	cmp	r2, r1
 800e82e:	d10c      	bne.n	800e84a <scalbn+0x5a>
 800e830:	ee10 2a10 	vmov	r2, s0
 800e834:	4620      	mov	r0, r4
 800e836:	4629      	mov	r1, r5
 800e838:	f7f1 fd50 	bl	80002dc <__adddf3>
 800e83c:	4604      	mov	r4, r0
 800e83e:	460d      	mov	r5, r1
 800e840:	e019      	b.n	800e876 <scalbn+0x86>
 800e842:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e846:	460b      	mov	r3, r1
 800e848:	3a36      	subs	r2, #54	; 0x36
 800e84a:	4432      	add	r2, r6
 800e84c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e850:	428a      	cmp	r2, r1
 800e852:	dd08      	ble.n	800e866 <scalbn+0x76>
 800e854:	2d00      	cmp	r5, #0
 800e856:	a120      	add	r1, pc, #128	; (adr r1, 800e8d8 <scalbn+0xe8>)
 800e858:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e85c:	da1c      	bge.n	800e898 <scalbn+0xa8>
 800e85e:	a120      	add	r1, pc, #128	; (adr r1, 800e8e0 <scalbn+0xf0>)
 800e860:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e864:	e018      	b.n	800e898 <scalbn+0xa8>
 800e866:	2a00      	cmp	r2, #0
 800e868:	dd08      	ble.n	800e87c <scalbn+0x8c>
 800e86a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e86e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e872:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e876:	ec45 4b10 	vmov	d0, r4, r5
 800e87a:	bd70      	pop	{r4, r5, r6, pc}
 800e87c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e880:	da19      	bge.n	800e8b6 <scalbn+0xc6>
 800e882:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e886:	429e      	cmp	r6, r3
 800e888:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e88c:	dd0a      	ble.n	800e8a4 <scalbn+0xb4>
 800e88e:	a112      	add	r1, pc, #72	; (adr r1, 800e8d8 <scalbn+0xe8>)
 800e890:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d1e2      	bne.n	800e85e <scalbn+0x6e>
 800e898:	a30f      	add	r3, pc, #60	; (adr r3, 800e8d8 <scalbn+0xe8>)
 800e89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89e:	f7f1 fed3 	bl	8000648 <__aeabi_dmul>
 800e8a2:	e7cb      	b.n	800e83c <scalbn+0x4c>
 800e8a4:	a10a      	add	r1, pc, #40	; (adr r1, 800e8d0 <scalbn+0xe0>)
 800e8a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d0b8      	beq.n	800e820 <scalbn+0x30>
 800e8ae:	a10e      	add	r1, pc, #56	; (adr r1, 800e8e8 <scalbn+0xf8>)
 800e8b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8b4:	e7b4      	b.n	800e820 <scalbn+0x30>
 800e8b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e8ba:	3236      	adds	r2, #54	; 0x36
 800e8bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e8c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e8c4:	4620      	mov	r0, r4
 800e8c6:	4b0c      	ldr	r3, [pc, #48]	; (800e8f8 <scalbn+0x108>)
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	e7e8      	b.n	800e89e <scalbn+0xae>
 800e8cc:	f3af 8000 	nop.w
 800e8d0:	c2f8f359 	.word	0xc2f8f359
 800e8d4:	01a56e1f 	.word	0x01a56e1f
 800e8d8:	8800759c 	.word	0x8800759c
 800e8dc:	7e37e43c 	.word	0x7e37e43c
 800e8e0:	8800759c 	.word	0x8800759c
 800e8e4:	fe37e43c 	.word	0xfe37e43c
 800e8e8:	c2f8f359 	.word	0xc2f8f359
 800e8ec:	81a56e1f 	.word	0x81a56e1f
 800e8f0:	43500000 	.word	0x43500000
 800e8f4:	ffff3cb0 	.word	0xffff3cb0
 800e8f8:	3c900000 	.word	0x3c900000

0800e8fc <__errno>:
 800e8fc:	4b01      	ldr	r3, [pc, #4]	; (800e904 <__errno+0x8>)
 800e8fe:	6818      	ldr	r0, [r3, #0]
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	20001384 	.word	0x20001384

0800e908 <__libc_init_array>:
 800e908:	b570      	push	{r4, r5, r6, lr}
 800e90a:	4d0d      	ldr	r5, [pc, #52]	; (800e940 <__libc_init_array+0x38>)
 800e90c:	4c0d      	ldr	r4, [pc, #52]	; (800e944 <__libc_init_array+0x3c>)
 800e90e:	1b64      	subs	r4, r4, r5
 800e910:	10a4      	asrs	r4, r4, #2
 800e912:	2600      	movs	r6, #0
 800e914:	42a6      	cmp	r6, r4
 800e916:	d109      	bne.n	800e92c <__libc_init_array+0x24>
 800e918:	4d0b      	ldr	r5, [pc, #44]	; (800e948 <__libc_init_array+0x40>)
 800e91a:	4c0c      	ldr	r4, [pc, #48]	; (800e94c <__libc_init_array+0x44>)
 800e91c:	f004 fd38 	bl	8013390 <_init>
 800e920:	1b64      	subs	r4, r4, r5
 800e922:	10a4      	asrs	r4, r4, #2
 800e924:	2600      	movs	r6, #0
 800e926:	42a6      	cmp	r6, r4
 800e928:	d105      	bne.n	800e936 <__libc_init_array+0x2e>
 800e92a:	bd70      	pop	{r4, r5, r6, pc}
 800e92c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e930:	4798      	blx	r3
 800e932:	3601      	adds	r6, #1
 800e934:	e7ee      	b.n	800e914 <__libc_init_array+0xc>
 800e936:	f855 3b04 	ldr.w	r3, [r5], #4
 800e93a:	4798      	blx	r3
 800e93c:	3601      	adds	r6, #1
 800e93e:	e7f2      	b.n	800e926 <__libc_init_array+0x1e>
 800e940:	080145f0 	.word	0x080145f0
 800e944:	080145f0 	.word	0x080145f0
 800e948:	080145f0 	.word	0x080145f0
 800e94c:	080145f4 	.word	0x080145f4

0800e950 <malloc>:
 800e950:	4b02      	ldr	r3, [pc, #8]	; (800e95c <malloc+0xc>)
 800e952:	4601      	mov	r1, r0
 800e954:	6818      	ldr	r0, [r3, #0]
 800e956:	f000 b87f 	b.w	800ea58 <_malloc_r>
 800e95a:	bf00      	nop
 800e95c:	20001384 	.word	0x20001384

0800e960 <free>:
 800e960:	4b02      	ldr	r3, [pc, #8]	; (800e96c <free+0xc>)
 800e962:	4601      	mov	r1, r0
 800e964:	6818      	ldr	r0, [r3, #0]
 800e966:	f000 b80b 	b.w	800e980 <_free_r>
 800e96a:	bf00      	nop
 800e96c:	20001384 	.word	0x20001384

0800e970 <memset>:
 800e970:	4402      	add	r2, r0
 800e972:	4603      	mov	r3, r0
 800e974:	4293      	cmp	r3, r2
 800e976:	d100      	bne.n	800e97a <memset+0xa>
 800e978:	4770      	bx	lr
 800e97a:	f803 1b01 	strb.w	r1, [r3], #1
 800e97e:	e7f9      	b.n	800e974 <memset+0x4>

0800e980 <_free_r>:
 800e980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e982:	2900      	cmp	r1, #0
 800e984:	d044      	beq.n	800ea10 <_free_r+0x90>
 800e986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e98a:	9001      	str	r0, [sp, #4]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	f1a1 0404 	sub.w	r4, r1, #4
 800e992:	bfb8      	it	lt
 800e994:	18e4      	addlt	r4, r4, r3
 800e996:	f003 f905 	bl	8011ba4 <__malloc_lock>
 800e99a:	4a1e      	ldr	r2, [pc, #120]	; (800ea14 <_free_r+0x94>)
 800e99c:	9801      	ldr	r0, [sp, #4]
 800e99e:	6813      	ldr	r3, [r2, #0]
 800e9a0:	b933      	cbnz	r3, 800e9b0 <_free_r+0x30>
 800e9a2:	6063      	str	r3, [r4, #4]
 800e9a4:	6014      	str	r4, [r2, #0]
 800e9a6:	b003      	add	sp, #12
 800e9a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9ac:	f003 b900 	b.w	8011bb0 <__malloc_unlock>
 800e9b0:	42a3      	cmp	r3, r4
 800e9b2:	d908      	bls.n	800e9c6 <_free_r+0x46>
 800e9b4:	6825      	ldr	r5, [r4, #0]
 800e9b6:	1961      	adds	r1, r4, r5
 800e9b8:	428b      	cmp	r3, r1
 800e9ba:	bf01      	itttt	eq
 800e9bc:	6819      	ldreq	r1, [r3, #0]
 800e9be:	685b      	ldreq	r3, [r3, #4]
 800e9c0:	1949      	addeq	r1, r1, r5
 800e9c2:	6021      	streq	r1, [r4, #0]
 800e9c4:	e7ed      	b.n	800e9a2 <_free_r+0x22>
 800e9c6:	461a      	mov	r2, r3
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	b10b      	cbz	r3, 800e9d0 <_free_r+0x50>
 800e9cc:	42a3      	cmp	r3, r4
 800e9ce:	d9fa      	bls.n	800e9c6 <_free_r+0x46>
 800e9d0:	6811      	ldr	r1, [r2, #0]
 800e9d2:	1855      	adds	r5, r2, r1
 800e9d4:	42a5      	cmp	r5, r4
 800e9d6:	d10b      	bne.n	800e9f0 <_free_r+0x70>
 800e9d8:	6824      	ldr	r4, [r4, #0]
 800e9da:	4421      	add	r1, r4
 800e9dc:	1854      	adds	r4, r2, r1
 800e9de:	42a3      	cmp	r3, r4
 800e9e0:	6011      	str	r1, [r2, #0]
 800e9e2:	d1e0      	bne.n	800e9a6 <_free_r+0x26>
 800e9e4:	681c      	ldr	r4, [r3, #0]
 800e9e6:	685b      	ldr	r3, [r3, #4]
 800e9e8:	6053      	str	r3, [r2, #4]
 800e9ea:	4421      	add	r1, r4
 800e9ec:	6011      	str	r1, [r2, #0]
 800e9ee:	e7da      	b.n	800e9a6 <_free_r+0x26>
 800e9f0:	d902      	bls.n	800e9f8 <_free_r+0x78>
 800e9f2:	230c      	movs	r3, #12
 800e9f4:	6003      	str	r3, [r0, #0]
 800e9f6:	e7d6      	b.n	800e9a6 <_free_r+0x26>
 800e9f8:	6825      	ldr	r5, [r4, #0]
 800e9fa:	1961      	adds	r1, r4, r5
 800e9fc:	428b      	cmp	r3, r1
 800e9fe:	bf04      	itt	eq
 800ea00:	6819      	ldreq	r1, [r3, #0]
 800ea02:	685b      	ldreq	r3, [r3, #4]
 800ea04:	6063      	str	r3, [r4, #4]
 800ea06:	bf04      	itt	eq
 800ea08:	1949      	addeq	r1, r1, r5
 800ea0a:	6021      	streq	r1, [r4, #0]
 800ea0c:	6054      	str	r4, [r2, #4]
 800ea0e:	e7ca      	b.n	800e9a6 <_free_r+0x26>
 800ea10:	b003      	add	sp, #12
 800ea12:	bd30      	pop	{r4, r5, pc}
 800ea14:	20013ffc 	.word	0x20013ffc

0800ea18 <sbrk_aligned>:
 800ea18:	b570      	push	{r4, r5, r6, lr}
 800ea1a:	4e0e      	ldr	r6, [pc, #56]	; (800ea54 <sbrk_aligned+0x3c>)
 800ea1c:	460c      	mov	r4, r1
 800ea1e:	6831      	ldr	r1, [r6, #0]
 800ea20:	4605      	mov	r5, r0
 800ea22:	b911      	cbnz	r1, 800ea2a <sbrk_aligned+0x12>
 800ea24:	f000 ff72 	bl	800f90c <_sbrk_r>
 800ea28:	6030      	str	r0, [r6, #0]
 800ea2a:	4621      	mov	r1, r4
 800ea2c:	4628      	mov	r0, r5
 800ea2e:	f000 ff6d 	bl	800f90c <_sbrk_r>
 800ea32:	1c43      	adds	r3, r0, #1
 800ea34:	d00a      	beq.n	800ea4c <sbrk_aligned+0x34>
 800ea36:	1cc4      	adds	r4, r0, #3
 800ea38:	f024 0403 	bic.w	r4, r4, #3
 800ea3c:	42a0      	cmp	r0, r4
 800ea3e:	d007      	beq.n	800ea50 <sbrk_aligned+0x38>
 800ea40:	1a21      	subs	r1, r4, r0
 800ea42:	4628      	mov	r0, r5
 800ea44:	f000 ff62 	bl	800f90c <_sbrk_r>
 800ea48:	3001      	adds	r0, #1
 800ea4a:	d101      	bne.n	800ea50 <sbrk_aligned+0x38>
 800ea4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ea50:	4620      	mov	r0, r4
 800ea52:	bd70      	pop	{r4, r5, r6, pc}
 800ea54:	20014000 	.word	0x20014000

0800ea58 <_malloc_r>:
 800ea58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea5c:	1ccd      	adds	r5, r1, #3
 800ea5e:	f025 0503 	bic.w	r5, r5, #3
 800ea62:	3508      	adds	r5, #8
 800ea64:	2d0c      	cmp	r5, #12
 800ea66:	bf38      	it	cc
 800ea68:	250c      	movcc	r5, #12
 800ea6a:	2d00      	cmp	r5, #0
 800ea6c:	4607      	mov	r7, r0
 800ea6e:	db01      	blt.n	800ea74 <_malloc_r+0x1c>
 800ea70:	42a9      	cmp	r1, r5
 800ea72:	d905      	bls.n	800ea80 <_malloc_r+0x28>
 800ea74:	230c      	movs	r3, #12
 800ea76:	603b      	str	r3, [r7, #0]
 800ea78:	2600      	movs	r6, #0
 800ea7a:	4630      	mov	r0, r6
 800ea7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea80:	4e2e      	ldr	r6, [pc, #184]	; (800eb3c <_malloc_r+0xe4>)
 800ea82:	f003 f88f 	bl	8011ba4 <__malloc_lock>
 800ea86:	6833      	ldr	r3, [r6, #0]
 800ea88:	461c      	mov	r4, r3
 800ea8a:	bb34      	cbnz	r4, 800eada <_malloc_r+0x82>
 800ea8c:	4629      	mov	r1, r5
 800ea8e:	4638      	mov	r0, r7
 800ea90:	f7ff ffc2 	bl	800ea18 <sbrk_aligned>
 800ea94:	1c43      	adds	r3, r0, #1
 800ea96:	4604      	mov	r4, r0
 800ea98:	d14d      	bne.n	800eb36 <_malloc_r+0xde>
 800ea9a:	6834      	ldr	r4, [r6, #0]
 800ea9c:	4626      	mov	r6, r4
 800ea9e:	2e00      	cmp	r6, #0
 800eaa0:	d140      	bne.n	800eb24 <_malloc_r+0xcc>
 800eaa2:	6823      	ldr	r3, [r4, #0]
 800eaa4:	4631      	mov	r1, r6
 800eaa6:	4638      	mov	r0, r7
 800eaa8:	eb04 0803 	add.w	r8, r4, r3
 800eaac:	f000 ff2e 	bl	800f90c <_sbrk_r>
 800eab0:	4580      	cmp	r8, r0
 800eab2:	d13a      	bne.n	800eb2a <_malloc_r+0xd2>
 800eab4:	6821      	ldr	r1, [r4, #0]
 800eab6:	3503      	adds	r5, #3
 800eab8:	1a6d      	subs	r5, r5, r1
 800eaba:	f025 0503 	bic.w	r5, r5, #3
 800eabe:	3508      	adds	r5, #8
 800eac0:	2d0c      	cmp	r5, #12
 800eac2:	bf38      	it	cc
 800eac4:	250c      	movcc	r5, #12
 800eac6:	4629      	mov	r1, r5
 800eac8:	4638      	mov	r0, r7
 800eaca:	f7ff ffa5 	bl	800ea18 <sbrk_aligned>
 800eace:	3001      	adds	r0, #1
 800ead0:	d02b      	beq.n	800eb2a <_malloc_r+0xd2>
 800ead2:	6823      	ldr	r3, [r4, #0]
 800ead4:	442b      	add	r3, r5
 800ead6:	6023      	str	r3, [r4, #0]
 800ead8:	e00e      	b.n	800eaf8 <_malloc_r+0xa0>
 800eada:	6822      	ldr	r2, [r4, #0]
 800eadc:	1b52      	subs	r2, r2, r5
 800eade:	d41e      	bmi.n	800eb1e <_malloc_r+0xc6>
 800eae0:	2a0b      	cmp	r2, #11
 800eae2:	d916      	bls.n	800eb12 <_malloc_r+0xba>
 800eae4:	1961      	adds	r1, r4, r5
 800eae6:	42a3      	cmp	r3, r4
 800eae8:	6025      	str	r5, [r4, #0]
 800eaea:	bf18      	it	ne
 800eaec:	6059      	strne	r1, [r3, #4]
 800eaee:	6863      	ldr	r3, [r4, #4]
 800eaf0:	bf08      	it	eq
 800eaf2:	6031      	streq	r1, [r6, #0]
 800eaf4:	5162      	str	r2, [r4, r5]
 800eaf6:	604b      	str	r3, [r1, #4]
 800eaf8:	4638      	mov	r0, r7
 800eafa:	f104 060b 	add.w	r6, r4, #11
 800eafe:	f003 f857 	bl	8011bb0 <__malloc_unlock>
 800eb02:	f026 0607 	bic.w	r6, r6, #7
 800eb06:	1d23      	adds	r3, r4, #4
 800eb08:	1af2      	subs	r2, r6, r3
 800eb0a:	d0b6      	beq.n	800ea7a <_malloc_r+0x22>
 800eb0c:	1b9b      	subs	r3, r3, r6
 800eb0e:	50a3      	str	r3, [r4, r2]
 800eb10:	e7b3      	b.n	800ea7a <_malloc_r+0x22>
 800eb12:	6862      	ldr	r2, [r4, #4]
 800eb14:	42a3      	cmp	r3, r4
 800eb16:	bf0c      	ite	eq
 800eb18:	6032      	streq	r2, [r6, #0]
 800eb1a:	605a      	strne	r2, [r3, #4]
 800eb1c:	e7ec      	b.n	800eaf8 <_malloc_r+0xa0>
 800eb1e:	4623      	mov	r3, r4
 800eb20:	6864      	ldr	r4, [r4, #4]
 800eb22:	e7b2      	b.n	800ea8a <_malloc_r+0x32>
 800eb24:	4634      	mov	r4, r6
 800eb26:	6876      	ldr	r6, [r6, #4]
 800eb28:	e7b9      	b.n	800ea9e <_malloc_r+0x46>
 800eb2a:	230c      	movs	r3, #12
 800eb2c:	603b      	str	r3, [r7, #0]
 800eb2e:	4638      	mov	r0, r7
 800eb30:	f003 f83e 	bl	8011bb0 <__malloc_unlock>
 800eb34:	e7a1      	b.n	800ea7a <_malloc_r+0x22>
 800eb36:	6025      	str	r5, [r4, #0]
 800eb38:	e7de      	b.n	800eaf8 <_malloc_r+0xa0>
 800eb3a:	bf00      	nop
 800eb3c:	20013ffc 	.word	0x20013ffc

0800eb40 <__cvt>:
 800eb40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb44:	ec55 4b10 	vmov	r4, r5, d0
 800eb48:	2d00      	cmp	r5, #0
 800eb4a:	460e      	mov	r6, r1
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	462b      	mov	r3, r5
 800eb50:	bfbb      	ittet	lt
 800eb52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800eb56:	461d      	movlt	r5, r3
 800eb58:	2300      	movge	r3, #0
 800eb5a:	232d      	movlt	r3, #45	; 0x2d
 800eb5c:	700b      	strb	r3, [r1, #0]
 800eb5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800eb64:	4691      	mov	r9, r2
 800eb66:	f023 0820 	bic.w	r8, r3, #32
 800eb6a:	bfbc      	itt	lt
 800eb6c:	4622      	movlt	r2, r4
 800eb6e:	4614      	movlt	r4, r2
 800eb70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800eb74:	d005      	beq.n	800eb82 <__cvt+0x42>
 800eb76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800eb7a:	d100      	bne.n	800eb7e <__cvt+0x3e>
 800eb7c:	3601      	adds	r6, #1
 800eb7e:	2102      	movs	r1, #2
 800eb80:	e000      	b.n	800eb84 <__cvt+0x44>
 800eb82:	2103      	movs	r1, #3
 800eb84:	ab03      	add	r3, sp, #12
 800eb86:	9301      	str	r3, [sp, #4]
 800eb88:	ab02      	add	r3, sp, #8
 800eb8a:	9300      	str	r3, [sp, #0]
 800eb8c:	ec45 4b10 	vmov	d0, r4, r5
 800eb90:	4653      	mov	r3, sl
 800eb92:	4632      	mov	r2, r6
 800eb94:	f001 fe60 	bl	8010858 <_dtoa_r>
 800eb98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800eb9c:	4607      	mov	r7, r0
 800eb9e:	d102      	bne.n	800eba6 <__cvt+0x66>
 800eba0:	f019 0f01 	tst.w	r9, #1
 800eba4:	d022      	beq.n	800ebec <__cvt+0xac>
 800eba6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ebaa:	eb07 0906 	add.w	r9, r7, r6
 800ebae:	d110      	bne.n	800ebd2 <__cvt+0x92>
 800ebb0:	783b      	ldrb	r3, [r7, #0]
 800ebb2:	2b30      	cmp	r3, #48	; 0x30
 800ebb4:	d10a      	bne.n	800ebcc <__cvt+0x8c>
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	2300      	movs	r3, #0
 800ebba:	4620      	mov	r0, r4
 800ebbc:	4629      	mov	r1, r5
 800ebbe:	f7f1 ffab 	bl	8000b18 <__aeabi_dcmpeq>
 800ebc2:	b918      	cbnz	r0, 800ebcc <__cvt+0x8c>
 800ebc4:	f1c6 0601 	rsb	r6, r6, #1
 800ebc8:	f8ca 6000 	str.w	r6, [sl]
 800ebcc:	f8da 3000 	ldr.w	r3, [sl]
 800ebd0:	4499      	add	r9, r3
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	4629      	mov	r1, r5
 800ebda:	f7f1 ff9d 	bl	8000b18 <__aeabi_dcmpeq>
 800ebde:	b108      	cbz	r0, 800ebe4 <__cvt+0xa4>
 800ebe0:	f8cd 900c 	str.w	r9, [sp, #12]
 800ebe4:	2230      	movs	r2, #48	; 0x30
 800ebe6:	9b03      	ldr	r3, [sp, #12]
 800ebe8:	454b      	cmp	r3, r9
 800ebea:	d307      	bcc.n	800ebfc <__cvt+0xbc>
 800ebec:	9b03      	ldr	r3, [sp, #12]
 800ebee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ebf0:	1bdb      	subs	r3, r3, r7
 800ebf2:	4638      	mov	r0, r7
 800ebf4:	6013      	str	r3, [r2, #0]
 800ebf6:	b004      	add	sp, #16
 800ebf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebfc:	1c59      	adds	r1, r3, #1
 800ebfe:	9103      	str	r1, [sp, #12]
 800ec00:	701a      	strb	r2, [r3, #0]
 800ec02:	e7f0      	b.n	800ebe6 <__cvt+0xa6>

0800ec04 <__exponent>:
 800ec04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec06:	4603      	mov	r3, r0
 800ec08:	2900      	cmp	r1, #0
 800ec0a:	bfb8      	it	lt
 800ec0c:	4249      	neglt	r1, r1
 800ec0e:	f803 2b02 	strb.w	r2, [r3], #2
 800ec12:	bfb4      	ite	lt
 800ec14:	222d      	movlt	r2, #45	; 0x2d
 800ec16:	222b      	movge	r2, #43	; 0x2b
 800ec18:	2909      	cmp	r1, #9
 800ec1a:	7042      	strb	r2, [r0, #1]
 800ec1c:	dd2a      	ble.n	800ec74 <__exponent+0x70>
 800ec1e:	f10d 0407 	add.w	r4, sp, #7
 800ec22:	46a4      	mov	ip, r4
 800ec24:	270a      	movs	r7, #10
 800ec26:	46a6      	mov	lr, r4
 800ec28:	460a      	mov	r2, r1
 800ec2a:	fb91 f6f7 	sdiv	r6, r1, r7
 800ec2e:	fb07 1516 	mls	r5, r7, r6, r1
 800ec32:	3530      	adds	r5, #48	; 0x30
 800ec34:	2a63      	cmp	r2, #99	; 0x63
 800ec36:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ec3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ec3e:	4631      	mov	r1, r6
 800ec40:	dcf1      	bgt.n	800ec26 <__exponent+0x22>
 800ec42:	3130      	adds	r1, #48	; 0x30
 800ec44:	f1ae 0502 	sub.w	r5, lr, #2
 800ec48:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ec4c:	1c44      	adds	r4, r0, #1
 800ec4e:	4629      	mov	r1, r5
 800ec50:	4561      	cmp	r1, ip
 800ec52:	d30a      	bcc.n	800ec6a <__exponent+0x66>
 800ec54:	f10d 0209 	add.w	r2, sp, #9
 800ec58:	eba2 020e 	sub.w	r2, r2, lr
 800ec5c:	4565      	cmp	r5, ip
 800ec5e:	bf88      	it	hi
 800ec60:	2200      	movhi	r2, #0
 800ec62:	4413      	add	r3, r2
 800ec64:	1a18      	subs	r0, r3, r0
 800ec66:	b003      	add	sp, #12
 800ec68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ec72:	e7ed      	b.n	800ec50 <__exponent+0x4c>
 800ec74:	2330      	movs	r3, #48	; 0x30
 800ec76:	3130      	adds	r1, #48	; 0x30
 800ec78:	7083      	strb	r3, [r0, #2]
 800ec7a:	70c1      	strb	r1, [r0, #3]
 800ec7c:	1d03      	adds	r3, r0, #4
 800ec7e:	e7f1      	b.n	800ec64 <__exponent+0x60>

0800ec80 <_printf_float>:
 800ec80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec84:	ed2d 8b02 	vpush	{d8}
 800ec88:	b08d      	sub	sp, #52	; 0x34
 800ec8a:	460c      	mov	r4, r1
 800ec8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ec90:	4616      	mov	r6, r2
 800ec92:	461f      	mov	r7, r3
 800ec94:	4605      	mov	r5, r0
 800ec96:	f002 ff61 	bl	8011b5c <_localeconv_r>
 800ec9a:	f8d0 a000 	ldr.w	sl, [r0]
 800ec9e:	4650      	mov	r0, sl
 800eca0:	f7f1 fabe 	bl	8000220 <strlen>
 800eca4:	2300      	movs	r3, #0
 800eca6:	930a      	str	r3, [sp, #40]	; 0x28
 800eca8:	6823      	ldr	r3, [r4, #0]
 800ecaa:	9305      	str	r3, [sp, #20]
 800ecac:	f8d8 3000 	ldr.w	r3, [r8]
 800ecb0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ecb4:	3307      	adds	r3, #7
 800ecb6:	f023 0307 	bic.w	r3, r3, #7
 800ecba:	f103 0208 	add.w	r2, r3, #8
 800ecbe:	f8c8 2000 	str.w	r2, [r8]
 800ecc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ecca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ecce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ecd2:	9307      	str	r3, [sp, #28]
 800ecd4:	f8cd 8018 	str.w	r8, [sp, #24]
 800ecd8:	ee08 0a10 	vmov	s16, r0
 800ecdc:	4b9f      	ldr	r3, [pc, #636]	; (800ef5c <_printf_float+0x2dc>)
 800ecde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ece2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ece6:	f7f1 ff49 	bl	8000b7c <__aeabi_dcmpun>
 800ecea:	bb88      	cbnz	r0, 800ed50 <_printf_float+0xd0>
 800ecec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ecf0:	4b9a      	ldr	r3, [pc, #616]	; (800ef5c <_printf_float+0x2dc>)
 800ecf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ecf6:	f7f1 ff23 	bl	8000b40 <__aeabi_dcmple>
 800ecfa:	bb48      	cbnz	r0, 800ed50 <_printf_float+0xd0>
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	2300      	movs	r3, #0
 800ed00:	4640      	mov	r0, r8
 800ed02:	4649      	mov	r1, r9
 800ed04:	f7f1 ff12 	bl	8000b2c <__aeabi_dcmplt>
 800ed08:	b110      	cbz	r0, 800ed10 <_printf_float+0x90>
 800ed0a:	232d      	movs	r3, #45	; 0x2d
 800ed0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed10:	4b93      	ldr	r3, [pc, #588]	; (800ef60 <_printf_float+0x2e0>)
 800ed12:	4894      	ldr	r0, [pc, #592]	; (800ef64 <_printf_float+0x2e4>)
 800ed14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ed18:	bf94      	ite	ls
 800ed1a:	4698      	movls	r8, r3
 800ed1c:	4680      	movhi	r8, r0
 800ed1e:	2303      	movs	r3, #3
 800ed20:	6123      	str	r3, [r4, #16]
 800ed22:	9b05      	ldr	r3, [sp, #20]
 800ed24:	f023 0204 	bic.w	r2, r3, #4
 800ed28:	6022      	str	r2, [r4, #0]
 800ed2a:	f04f 0900 	mov.w	r9, #0
 800ed2e:	9700      	str	r7, [sp, #0]
 800ed30:	4633      	mov	r3, r6
 800ed32:	aa0b      	add	r2, sp, #44	; 0x2c
 800ed34:	4621      	mov	r1, r4
 800ed36:	4628      	mov	r0, r5
 800ed38:	f000 f9d8 	bl	800f0ec <_printf_common>
 800ed3c:	3001      	adds	r0, #1
 800ed3e:	f040 8090 	bne.w	800ee62 <_printf_float+0x1e2>
 800ed42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed46:	b00d      	add	sp, #52	; 0x34
 800ed48:	ecbd 8b02 	vpop	{d8}
 800ed4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed50:	4642      	mov	r2, r8
 800ed52:	464b      	mov	r3, r9
 800ed54:	4640      	mov	r0, r8
 800ed56:	4649      	mov	r1, r9
 800ed58:	f7f1 ff10 	bl	8000b7c <__aeabi_dcmpun>
 800ed5c:	b140      	cbz	r0, 800ed70 <_printf_float+0xf0>
 800ed5e:	464b      	mov	r3, r9
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	bfbc      	itt	lt
 800ed64:	232d      	movlt	r3, #45	; 0x2d
 800ed66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ed6a:	487f      	ldr	r0, [pc, #508]	; (800ef68 <_printf_float+0x2e8>)
 800ed6c:	4b7f      	ldr	r3, [pc, #508]	; (800ef6c <_printf_float+0x2ec>)
 800ed6e:	e7d1      	b.n	800ed14 <_printf_float+0x94>
 800ed70:	6863      	ldr	r3, [r4, #4]
 800ed72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ed76:	9206      	str	r2, [sp, #24]
 800ed78:	1c5a      	adds	r2, r3, #1
 800ed7a:	d13f      	bne.n	800edfc <_printf_float+0x17c>
 800ed7c:	2306      	movs	r3, #6
 800ed7e:	6063      	str	r3, [r4, #4]
 800ed80:	9b05      	ldr	r3, [sp, #20]
 800ed82:	6861      	ldr	r1, [r4, #4]
 800ed84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ed88:	2300      	movs	r3, #0
 800ed8a:	9303      	str	r3, [sp, #12]
 800ed8c:	ab0a      	add	r3, sp, #40	; 0x28
 800ed8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ed92:	ab09      	add	r3, sp, #36	; 0x24
 800ed94:	ec49 8b10 	vmov	d0, r8, r9
 800ed98:	9300      	str	r3, [sp, #0]
 800ed9a:	6022      	str	r2, [r4, #0]
 800ed9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eda0:	4628      	mov	r0, r5
 800eda2:	f7ff fecd 	bl	800eb40 <__cvt>
 800eda6:	9b06      	ldr	r3, [sp, #24]
 800eda8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800edaa:	2b47      	cmp	r3, #71	; 0x47
 800edac:	4680      	mov	r8, r0
 800edae:	d108      	bne.n	800edc2 <_printf_float+0x142>
 800edb0:	1cc8      	adds	r0, r1, #3
 800edb2:	db02      	blt.n	800edba <_printf_float+0x13a>
 800edb4:	6863      	ldr	r3, [r4, #4]
 800edb6:	4299      	cmp	r1, r3
 800edb8:	dd41      	ble.n	800ee3e <_printf_float+0x1be>
 800edba:	f1ab 0b02 	sub.w	fp, fp, #2
 800edbe:	fa5f fb8b 	uxtb.w	fp, fp
 800edc2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800edc6:	d820      	bhi.n	800ee0a <_printf_float+0x18a>
 800edc8:	3901      	subs	r1, #1
 800edca:	465a      	mov	r2, fp
 800edcc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800edd0:	9109      	str	r1, [sp, #36]	; 0x24
 800edd2:	f7ff ff17 	bl	800ec04 <__exponent>
 800edd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edd8:	1813      	adds	r3, r2, r0
 800edda:	2a01      	cmp	r2, #1
 800eddc:	4681      	mov	r9, r0
 800edde:	6123      	str	r3, [r4, #16]
 800ede0:	dc02      	bgt.n	800ede8 <_printf_float+0x168>
 800ede2:	6822      	ldr	r2, [r4, #0]
 800ede4:	07d2      	lsls	r2, r2, #31
 800ede6:	d501      	bpl.n	800edec <_printf_float+0x16c>
 800ede8:	3301      	adds	r3, #1
 800edea:	6123      	str	r3, [r4, #16]
 800edec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d09c      	beq.n	800ed2e <_printf_float+0xae>
 800edf4:	232d      	movs	r3, #45	; 0x2d
 800edf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edfa:	e798      	b.n	800ed2e <_printf_float+0xae>
 800edfc:	9a06      	ldr	r2, [sp, #24]
 800edfe:	2a47      	cmp	r2, #71	; 0x47
 800ee00:	d1be      	bne.n	800ed80 <_printf_float+0x100>
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d1bc      	bne.n	800ed80 <_printf_float+0x100>
 800ee06:	2301      	movs	r3, #1
 800ee08:	e7b9      	b.n	800ed7e <_printf_float+0xfe>
 800ee0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ee0e:	d118      	bne.n	800ee42 <_printf_float+0x1c2>
 800ee10:	2900      	cmp	r1, #0
 800ee12:	6863      	ldr	r3, [r4, #4]
 800ee14:	dd0b      	ble.n	800ee2e <_printf_float+0x1ae>
 800ee16:	6121      	str	r1, [r4, #16]
 800ee18:	b913      	cbnz	r3, 800ee20 <_printf_float+0x1a0>
 800ee1a:	6822      	ldr	r2, [r4, #0]
 800ee1c:	07d0      	lsls	r0, r2, #31
 800ee1e:	d502      	bpl.n	800ee26 <_printf_float+0x1a6>
 800ee20:	3301      	adds	r3, #1
 800ee22:	440b      	add	r3, r1
 800ee24:	6123      	str	r3, [r4, #16]
 800ee26:	65a1      	str	r1, [r4, #88]	; 0x58
 800ee28:	f04f 0900 	mov.w	r9, #0
 800ee2c:	e7de      	b.n	800edec <_printf_float+0x16c>
 800ee2e:	b913      	cbnz	r3, 800ee36 <_printf_float+0x1b6>
 800ee30:	6822      	ldr	r2, [r4, #0]
 800ee32:	07d2      	lsls	r2, r2, #31
 800ee34:	d501      	bpl.n	800ee3a <_printf_float+0x1ba>
 800ee36:	3302      	adds	r3, #2
 800ee38:	e7f4      	b.n	800ee24 <_printf_float+0x1a4>
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	e7f2      	b.n	800ee24 <_printf_float+0x1a4>
 800ee3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ee42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee44:	4299      	cmp	r1, r3
 800ee46:	db05      	blt.n	800ee54 <_printf_float+0x1d4>
 800ee48:	6823      	ldr	r3, [r4, #0]
 800ee4a:	6121      	str	r1, [r4, #16]
 800ee4c:	07d8      	lsls	r0, r3, #31
 800ee4e:	d5ea      	bpl.n	800ee26 <_printf_float+0x1a6>
 800ee50:	1c4b      	adds	r3, r1, #1
 800ee52:	e7e7      	b.n	800ee24 <_printf_float+0x1a4>
 800ee54:	2900      	cmp	r1, #0
 800ee56:	bfd4      	ite	le
 800ee58:	f1c1 0202 	rsble	r2, r1, #2
 800ee5c:	2201      	movgt	r2, #1
 800ee5e:	4413      	add	r3, r2
 800ee60:	e7e0      	b.n	800ee24 <_printf_float+0x1a4>
 800ee62:	6823      	ldr	r3, [r4, #0]
 800ee64:	055a      	lsls	r2, r3, #21
 800ee66:	d407      	bmi.n	800ee78 <_printf_float+0x1f8>
 800ee68:	6923      	ldr	r3, [r4, #16]
 800ee6a:	4642      	mov	r2, r8
 800ee6c:	4631      	mov	r1, r6
 800ee6e:	4628      	mov	r0, r5
 800ee70:	47b8      	blx	r7
 800ee72:	3001      	adds	r0, #1
 800ee74:	d12c      	bne.n	800eed0 <_printf_float+0x250>
 800ee76:	e764      	b.n	800ed42 <_printf_float+0xc2>
 800ee78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ee7c:	f240 80e0 	bls.w	800f040 <_printf_float+0x3c0>
 800ee80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ee84:	2200      	movs	r2, #0
 800ee86:	2300      	movs	r3, #0
 800ee88:	f7f1 fe46 	bl	8000b18 <__aeabi_dcmpeq>
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	d034      	beq.n	800eefa <_printf_float+0x27a>
 800ee90:	4a37      	ldr	r2, [pc, #220]	; (800ef70 <_printf_float+0x2f0>)
 800ee92:	2301      	movs	r3, #1
 800ee94:	4631      	mov	r1, r6
 800ee96:	4628      	mov	r0, r5
 800ee98:	47b8      	blx	r7
 800ee9a:	3001      	adds	r0, #1
 800ee9c:	f43f af51 	beq.w	800ed42 <_printf_float+0xc2>
 800eea0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eea4:	429a      	cmp	r2, r3
 800eea6:	db02      	blt.n	800eeae <_printf_float+0x22e>
 800eea8:	6823      	ldr	r3, [r4, #0]
 800eeaa:	07d8      	lsls	r0, r3, #31
 800eeac:	d510      	bpl.n	800eed0 <_printf_float+0x250>
 800eeae:	ee18 3a10 	vmov	r3, s16
 800eeb2:	4652      	mov	r2, sl
 800eeb4:	4631      	mov	r1, r6
 800eeb6:	4628      	mov	r0, r5
 800eeb8:	47b8      	blx	r7
 800eeba:	3001      	adds	r0, #1
 800eebc:	f43f af41 	beq.w	800ed42 <_printf_float+0xc2>
 800eec0:	f04f 0800 	mov.w	r8, #0
 800eec4:	f104 091a 	add.w	r9, r4, #26
 800eec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eeca:	3b01      	subs	r3, #1
 800eecc:	4543      	cmp	r3, r8
 800eece:	dc09      	bgt.n	800eee4 <_printf_float+0x264>
 800eed0:	6823      	ldr	r3, [r4, #0]
 800eed2:	079b      	lsls	r3, r3, #30
 800eed4:	f100 8105 	bmi.w	800f0e2 <_printf_float+0x462>
 800eed8:	68e0      	ldr	r0, [r4, #12]
 800eeda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eedc:	4298      	cmp	r0, r3
 800eede:	bfb8      	it	lt
 800eee0:	4618      	movlt	r0, r3
 800eee2:	e730      	b.n	800ed46 <_printf_float+0xc6>
 800eee4:	2301      	movs	r3, #1
 800eee6:	464a      	mov	r2, r9
 800eee8:	4631      	mov	r1, r6
 800eeea:	4628      	mov	r0, r5
 800eeec:	47b8      	blx	r7
 800eeee:	3001      	adds	r0, #1
 800eef0:	f43f af27 	beq.w	800ed42 <_printf_float+0xc2>
 800eef4:	f108 0801 	add.w	r8, r8, #1
 800eef8:	e7e6      	b.n	800eec8 <_printf_float+0x248>
 800eefa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	dc39      	bgt.n	800ef74 <_printf_float+0x2f4>
 800ef00:	4a1b      	ldr	r2, [pc, #108]	; (800ef70 <_printf_float+0x2f0>)
 800ef02:	2301      	movs	r3, #1
 800ef04:	4631      	mov	r1, r6
 800ef06:	4628      	mov	r0, r5
 800ef08:	47b8      	blx	r7
 800ef0a:	3001      	adds	r0, #1
 800ef0c:	f43f af19 	beq.w	800ed42 <_printf_float+0xc2>
 800ef10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ef14:	4313      	orrs	r3, r2
 800ef16:	d102      	bne.n	800ef1e <_printf_float+0x29e>
 800ef18:	6823      	ldr	r3, [r4, #0]
 800ef1a:	07d9      	lsls	r1, r3, #31
 800ef1c:	d5d8      	bpl.n	800eed0 <_printf_float+0x250>
 800ef1e:	ee18 3a10 	vmov	r3, s16
 800ef22:	4652      	mov	r2, sl
 800ef24:	4631      	mov	r1, r6
 800ef26:	4628      	mov	r0, r5
 800ef28:	47b8      	blx	r7
 800ef2a:	3001      	adds	r0, #1
 800ef2c:	f43f af09 	beq.w	800ed42 <_printf_float+0xc2>
 800ef30:	f04f 0900 	mov.w	r9, #0
 800ef34:	f104 0a1a 	add.w	sl, r4, #26
 800ef38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef3a:	425b      	negs	r3, r3
 800ef3c:	454b      	cmp	r3, r9
 800ef3e:	dc01      	bgt.n	800ef44 <_printf_float+0x2c4>
 800ef40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef42:	e792      	b.n	800ee6a <_printf_float+0x1ea>
 800ef44:	2301      	movs	r3, #1
 800ef46:	4652      	mov	r2, sl
 800ef48:	4631      	mov	r1, r6
 800ef4a:	4628      	mov	r0, r5
 800ef4c:	47b8      	blx	r7
 800ef4e:	3001      	adds	r0, #1
 800ef50:	f43f aef7 	beq.w	800ed42 <_printf_float+0xc2>
 800ef54:	f109 0901 	add.w	r9, r9, #1
 800ef58:	e7ee      	b.n	800ef38 <_printf_float+0x2b8>
 800ef5a:	bf00      	nop
 800ef5c:	7fefffff 	.word	0x7fefffff
 800ef60:	080140ec 	.word	0x080140ec
 800ef64:	080140f0 	.word	0x080140f0
 800ef68:	080140f8 	.word	0x080140f8
 800ef6c:	080140f4 	.word	0x080140f4
 800ef70:	080140fc 	.word	0x080140fc
 800ef74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ef78:	429a      	cmp	r2, r3
 800ef7a:	bfa8      	it	ge
 800ef7c:	461a      	movge	r2, r3
 800ef7e:	2a00      	cmp	r2, #0
 800ef80:	4691      	mov	r9, r2
 800ef82:	dc37      	bgt.n	800eff4 <_printf_float+0x374>
 800ef84:	f04f 0b00 	mov.w	fp, #0
 800ef88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ef8c:	f104 021a 	add.w	r2, r4, #26
 800ef90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ef92:	9305      	str	r3, [sp, #20]
 800ef94:	eba3 0309 	sub.w	r3, r3, r9
 800ef98:	455b      	cmp	r3, fp
 800ef9a:	dc33      	bgt.n	800f004 <_printf_float+0x384>
 800ef9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800efa0:	429a      	cmp	r2, r3
 800efa2:	db3b      	blt.n	800f01c <_printf_float+0x39c>
 800efa4:	6823      	ldr	r3, [r4, #0]
 800efa6:	07da      	lsls	r2, r3, #31
 800efa8:	d438      	bmi.n	800f01c <_printf_float+0x39c>
 800efaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efac:	9a05      	ldr	r2, [sp, #20]
 800efae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800efb0:	1a9a      	subs	r2, r3, r2
 800efb2:	eba3 0901 	sub.w	r9, r3, r1
 800efb6:	4591      	cmp	r9, r2
 800efb8:	bfa8      	it	ge
 800efba:	4691      	movge	r9, r2
 800efbc:	f1b9 0f00 	cmp.w	r9, #0
 800efc0:	dc35      	bgt.n	800f02e <_printf_float+0x3ae>
 800efc2:	f04f 0800 	mov.w	r8, #0
 800efc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800efca:	f104 0a1a 	add.w	sl, r4, #26
 800efce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800efd2:	1a9b      	subs	r3, r3, r2
 800efd4:	eba3 0309 	sub.w	r3, r3, r9
 800efd8:	4543      	cmp	r3, r8
 800efda:	f77f af79 	ble.w	800eed0 <_printf_float+0x250>
 800efde:	2301      	movs	r3, #1
 800efe0:	4652      	mov	r2, sl
 800efe2:	4631      	mov	r1, r6
 800efe4:	4628      	mov	r0, r5
 800efe6:	47b8      	blx	r7
 800efe8:	3001      	adds	r0, #1
 800efea:	f43f aeaa 	beq.w	800ed42 <_printf_float+0xc2>
 800efee:	f108 0801 	add.w	r8, r8, #1
 800eff2:	e7ec      	b.n	800efce <_printf_float+0x34e>
 800eff4:	4613      	mov	r3, r2
 800eff6:	4631      	mov	r1, r6
 800eff8:	4642      	mov	r2, r8
 800effa:	4628      	mov	r0, r5
 800effc:	47b8      	blx	r7
 800effe:	3001      	adds	r0, #1
 800f000:	d1c0      	bne.n	800ef84 <_printf_float+0x304>
 800f002:	e69e      	b.n	800ed42 <_printf_float+0xc2>
 800f004:	2301      	movs	r3, #1
 800f006:	4631      	mov	r1, r6
 800f008:	4628      	mov	r0, r5
 800f00a:	9205      	str	r2, [sp, #20]
 800f00c:	47b8      	blx	r7
 800f00e:	3001      	adds	r0, #1
 800f010:	f43f ae97 	beq.w	800ed42 <_printf_float+0xc2>
 800f014:	9a05      	ldr	r2, [sp, #20]
 800f016:	f10b 0b01 	add.w	fp, fp, #1
 800f01a:	e7b9      	b.n	800ef90 <_printf_float+0x310>
 800f01c:	ee18 3a10 	vmov	r3, s16
 800f020:	4652      	mov	r2, sl
 800f022:	4631      	mov	r1, r6
 800f024:	4628      	mov	r0, r5
 800f026:	47b8      	blx	r7
 800f028:	3001      	adds	r0, #1
 800f02a:	d1be      	bne.n	800efaa <_printf_float+0x32a>
 800f02c:	e689      	b.n	800ed42 <_printf_float+0xc2>
 800f02e:	9a05      	ldr	r2, [sp, #20]
 800f030:	464b      	mov	r3, r9
 800f032:	4442      	add	r2, r8
 800f034:	4631      	mov	r1, r6
 800f036:	4628      	mov	r0, r5
 800f038:	47b8      	blx	r7
 800f03a:	3001      	adds	r0, #1
 800f03c:	d1c1      	bne.n	800efc2 <_printf_float+0x342>
 800f03e:	e680      	b.n	800ed42 <_printf_float+0xc2>
 800f040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f042:	2a01      	cmp	r2, #1
 800f044:	dc01      	bgt.n	800f04a <_printf_float+0x3ca>
 800f046:	07db      	lsls	r3, r3, #31
 800f048:	d538      	bpl.n	800f0bc <_printf_float+0x43c>
 800f04a:	2301      	movs	r3, #1
 800f04c:	4642      	mov	r2, r8
 800f04e:	4631      	mov	r1, r6
 800f050:	4628      	mov	r0, r5
 800f052:	47b8      	blx	r7
 800f054:	3001      	adds	r0, #1
 800f056:	f43f ae74 	beq.w	800ed42 <_printf_float+0xc2>
 800f05a:	ee18 3a10 	vmov	r3, s16
 800f05e:	4652      	mov	r2, sl
 800f060:	4631      	mov	r1, r6
 800f062:	4628      	mov	r0, r5
 800f064:	47b8      	blx	r7
 800f066:	3001      	adds	r0, #1
 800f068:	f43f ae6b 	beq.w	800ed42 <_printf_float+0xc2>
 800f06c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f070:	2200      	movs	r2, #0
 800f072:	2300      	movs	r3, #0
 800f074:	f7f1 fd50 	bl	8000b18 <__aeabi_dcmpeq>
 800f078:	b9d8      	cbnz	r0, 800f0b2 <_printf_float+0x432>
 800f07a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f07c:	f108 0201 	add.w	r2, r8, #1
 800f080:	3b01      	subs	r3, #1
 800f082:	4631      	mov	r1, r6
 800f084:	4628      	mov	r0, r5
 800f086:	47b8      	blx	r7
 800f088:	3001      	adds	r0, #1
 800f08a:	d10e      	bne.n	800f0aa <_printf_float+0x42a>
 800f08c:	e659      	b.n	800ed42 <_printf_float+0xc2>
 800f08e:	2301      	movs	r3, #1
 800f090:	4652      	mov	r2, sl
 800f092:	4631      	mov	r1, r6
 800f094:	4628      	mov	r0, r5
 800f096:	47b8      	blx	r7
 800f098:	3001      	adds	r0, #1
 800f09a:	f43f ae52 	beq.w	800ed42 <_printf_float+0xc2>
 800f09e:	f108 0801 	add.w	r8, r8, #1
 800f0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0a4:	3b01      	subs	r3, #1
 800f0a6:	4543      	cmp	r3, r8
 800f0a8:	dcf1      	bgt.n	800f08e <_printf_float+0x40e>
 800f0aa:	464b      	mov	r3, r9
 800f0ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f0b0:	e6dc      	b.n	800ee6c <_printf_float+0x1ec>
 800f0b2:	f04f 0800 	mov.w	r8, #0
 800f0b6:	f104 0a1a 	add.w	sl, r4, #26
 800f0ba:	e7f2      	b.n	800f0a2 <_printf_float+0x422>
 800f0bc:	2301      	movs	r3, #1
 800f0be:	4642      	mov	r2, r8
 800f0c0:	e7df      	b.n	800f082 <_printf_float+0x402>
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	464a      	mov	r2, r9
 800f0c6:	4631      	mov	r1, r6
 800f0c8:	4628      	mov	r0, r5
 800f0ca:	47b8      	blx	r7
 800f0cc:	3001      	adds	r0, #1
 800f0ce:	f43f ae38 	beq.w	800ed42 <_printf_float+0xc2>
 800f0d2:	f108 0801 	add.w	r8, r8, #1
 800f0d6:	68e3      	ldr	r3, [r4, #12]
 800f0d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f0da:	1a5b      	subs	r3, r3, r1
 800f0dc:	4543      	cmp	r3, r8
 800f0de:	dcf0      	bgt.n	800f0c2 <_printf_float+0x442>
 800f0e0:	e6fa      	b.n	800eed8 <_printf_float+0x258>
 800f0e2:	f04f 0800 	mov.w	r8, #0
 800f0e6:	f104 0919 	add.w	r9, r4, #25
 800f0ea:	e7f4      	b.n	800f0d6 <_printf_float+0x456>

0800f0ec <_printf_common>:
 800f0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0f0:	4616      	mov	r6, r2
 800f0f2:	4699      	mov	r9, r3
 800f0f4:	688a      	ldr	r2, [r1, #8]
 800f0f6:	690b      	ldr	r3, [r1, #16]
 800f0f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f0fc:	4293      	cmp	r3, r2
 800f0fe:	bfb8      	it	lt
 800f100:	4613      	movlt	r3, r2
 800f102:	6033      	str	r3, [r6, #0]
 800f104:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f108:	4607      	mov	r7, r0
 800f10a:	460c      	mov	r4, r1
 800f10c:	b10a      	cbz	r2, 800f112 <_printf_common+0x26>
 800f10e:	3301      	adds	r3, #1
 800f110:	6033      	str	r3, [r6, #0]
 800f112:	6823      	ldr	r3, [r4, #0]
 800f114:	0699      	lsls	r1, r3, #26
 800f116:	bf42      	ittt	mi
 800f118:	6833      	ldrmi	r3, [r6, #0]
 800f11a:	3302      	addmi	r3, #2
 800f11c:	6033      	strmi	r3, [r6, #0]
 800f11e:	6825      	ldr	r5, [r4, #0]
 800f120:	f015 0506 	ands.w	r5, r5, #6
 800f124:	d106      	bne.n	800f134 <_printf_common+0x48>
 800f126:	f104 0a19 	add.w	sl, r4, #25
 800f12a:	68e3      	ldr	r3, [r4, #12]
 800f12c:	6832      	ldr	r2, [r6, #0]
 800f12e:	1a9b      	subs	r3, r3, r2
 800f130:	42ab      	cmp	r3, r5
 800f132:	dc26      	bgt.n	800f182 <_printf_common+0x96>
 800f134:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f138:	1e13      	subs	r3, r2, #0
 800f13a:	6822      	ldr	r2, [r4, #0]
 800f13c:	bf18      	it	ne
 800f13e:	2301      	movne	r3, #1
 800f140:	0692      	lsls	r2, r2, #26
 800f142:	d42b      	bmi.n	800f19c <_printf_common+0xb0>
 800f144:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f148:	4649      	mov	r1, r9
 800f14a:	4638      	mov	r0, r7
 800f14c:	47c0      	blx	r8
 800f14e:	3001      	adds	r0, #1
 800f150:	d01e      	beq.n	800f190 <_printf_common+0xa4>
 800f152:	6823      	ldr	r3, [r4, #0]
 800f154:	68e5      	ldr	r5, [r4, #12]
 800f156:	6832      	ldr	r2, [r6, #0]
 800f158:	f003 0306 	and.w	r3, r3, #6
 800f15c:	2b04      	cmp	r3, #4
 800f15e:	bf08      	it	eq
 800f160:	1aad      	subeq	r5, r5, r2
 800f162:	68a3      	ldr	r3, [r4, #8]
 800f164:	6922      	ldr	r2, [r4, #16]
 800f166:	bf0c      	ite	eq
 800f168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f16c:	2500      	movne	r5, #0
 800f16e:	4293      	cmp	r3, r2
 800f170:	bfc4      	itt	gt
 800f172:	1a9b      	subgt	r3, r3, r2
 800f174:	18ed      	addgt	r5, r5, r3
 800f176:	2600      	movs	r6, #0
 800f178:	341a      	adds	r4, #26
 800f17a:	42b5      	cmp	r5, r6
 800f17c:	d11a      	bne.n	800f1b4 <_printf_common+0xc8>
 800f17e:	2000      	movs	r0, #0
 800f180:	e008      	b.n	800f194 <_printf_common+0xa8>
 800f182:	2301      	movs	r3, #1
 800f184:	4652      	mov	r2, sl
 800f186:	4649      	mov	r1, r9
 800f188:	4638      	mov	r0, r7
 800f18a:	47c0      	blx	r8
 800f18c:	3001      	adds	r0, #1
 800f18e:	d103      	bne.n	800f198 <_printf_common+0xac>
 800f190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f198:	3501      	adds	r5, #1
 800f19a:	e7c6      	b.n	800f12a <_printf_common+0x3e>
 800f19c:	18e1      	adds	r1, r4, r3
 800f19e:	1c5a      	adds	r2, r3, #1
 800f1a0:	2030      	movs	r0, #48	; 0x30
 800f1a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f1a6:	4422      	add	r2, r4
 800f1a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f1ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f1b0:	3302      	adds	r3, #2
 800f1b2:	e7c7      	b.n	800f144 <_printf_common+0x58>
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	4622      	mov	r2, r4
 800f1b8:	4649      	mov	r1, r9
 800f1ba:	4638      	mov	r0, r7
 800f1bc:	47c0      	blx	r8
 800f1be:	3001      	adds	r0, #1
 800f1c0:	d0e6      	beq.n	800f190 <_printf_common+0xa4>
 800f1c2:	3601      	adds	r6, #1
 800f1c4:	e7d9      	b.n	800f17a <_printf_common+0x8e>
	...

0800f1c8 <_printf_i>:
 800f1c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f1cc:	7e0f      	ldrb	r7, [r1, #24]
 800f1ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f1d0:	2f78      	cmp	r7, #120	; 0x78
 800f1d2:	4691      	mov	r9, r2
 800f1d4:	4680      	mov	r8, r0
 800f1d6:	460c      	mov	r4, r1
 800f1d8:	469a      	mov	sl, r3
 800f1da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f1de:	d807      	bhi.n	800f1f0 <_printf_i+0x28>
 800f1e0:	2f62      	cmp	r7, #98	; 0x62
 800f1e2:	d80a      	bhi.n	800f1fa <_printf_i+0x32>
 800f1e4:	2f00      	cmp	r7, #0
 800f1e6:	f000 80d8 	beq.w	800f39a <_printf_i+0x1d2>
 800f1ea:	2f58      	cmp	r7, #88	; 0x58
 800f1ec:	f000 80a3 	beq.w	800f336 <_printf_i+0x16e>
 800f1f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f1f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f1f8:	e03a      	b.n	800f270 <_printf_i+0xa8>
 800f1fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f1fe:	2b15      	cmp	r3, #21
 800f200:	d8f6      	bhi.n	800f1f0 <_printf_i+0x28>
 800f202:	a101      	add	r1, pc, #4	; (adr r1, 800f208 <_printf_i+0x40>)
 800f204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f208:	0800f261 	.word	0x0800f261
 800f20c:	0800f275 	.word	0x0800f275
 800f210:	0800f1f1 	.word	0x0800f1f1
 800f214:	0800f1f1 	.word	0x0800f1f1
 800f218:	0800f1f1 	.word	0x0800f1f1
 800f21c:	0800f1f1 	.word	0x0800f1f1
 800f220:	0800f275 	.word	0x0800f275
 800f224:	0800f1f1 	.word	0x0800f1f1
 800f228:	0800f1f1 	.word	0x0800f1f1
 800f22c:	0800f1f1 	.word	0x0800f1f1
 800f230:	0800f1f1 	.word	0x0800f1f1
 800f234:	0800f381 	.word	0x0800f381
 800f238:	0800f2a5 	.word	0x0800f2a5
 800f23c:	0800f363 	.word	0x0800f363
 800f240:	0800f1f1 	.word	0x0800f1f1
 800f244:	0800f1f1 	.word	0x0800f1f1
 800f248:	0800f3a3 	.word	0x0800f3a3
 800f24c:	0800f1f1 	.word	0x0800f1f1
 800f250:	0800f2a5 	.word	0x0800f2a5
 800f254:	0800f1f1 	.word	0x0800f1f1
 800f258:	0800f1f1 	.word	0x0800f1f1
 800f25c:	0800f36b 	.word	0x0800f36b
 800f260:	682b      	ldr	r3, [r5, #0]
 800f262:	1d1a      	adds	r2, r3, #4
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	602a      	str	r2, [r5, #0]
 800f268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f26c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f270:	2301      	movs	r3, #1
 800f272:	e0a3      	b.n	800f3bc <_printf_i+0x1f4>
 800f274:	6820      	ldr	r0, [r4, #0]
 800f276:	6829      	ldr	r1, [r5, #0]
 800f278:	0606      	lsls	r6, r0, #24
 800f27a:	f101 0304 	add.w	r3, r1, #4
 800f27e:	d50a      	bpl.n	800f296 <_printf_i+0xce>
 800f280:	680e      	ldr	r6, [r1, #0]
 800f282:	602b      	str	r3, [r5, #0]
 800f284:	2e00      	cmp	r6, #0
 800f286:	da03      	bge.n	800f290 <_printf_i+0xc8>
 800f288:	232d      	movs	r3, #45	; 0x2d
 800f28a:	4276      	negs	r6, r6
 800f28c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f290:	485e      	ldr	r0, [pc, #376]	; (800f40c <_printf_i+0x244>)
 800f292:	230a      	movs	r3, #10
 800f294:	e019      	b.n	800f2ca <_printf_i+0x102>
 800f296:	680e      	ldr	r6, [r1, #0]
 800f298:	602b      	str	r3, [r5, #0]
 800f29a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f29e:	bf18      	it	ne
 800f2a0:	b236      	sxthne	r6, r6
 800f2a2:	e7ef      	b.n	800f284 <_printf_i+0xbc>
 800f2a4:	682b      	ldr	r3, [r5, #0]
 800f2a6:	6820      	ldr	r0, [r4, #0]
 800f2a8:	1d19      	adds	r1, r3, #4
 800f2aa:	6029      	str	r1, [r5, #0]
 800f2ac:	0601      	lsls	r1, r0, #24
 800f2ae:	d501      	bpl.n	800f2b4 <_printf_i+0xec>
 800f2b0:	681e      	ldr	r6, [r3, #0]
 800f2b2:	e002      	b.n	800f2ba <_printf_i+0xf2>
 800f2b4:	0646      	lsls	r6, r0, #25
 800f2b6:	d5fb      	bpl.n	800f2b0 <_printf_i+0xe8>
 800f2b8:	881e      	ldrh	r6, [r3, #0]
 800f2ba:	4854      	ldr	r0, [pc, #336]	; (800f40c <_printf_i+0x244>)
 800f2bc:	2f6f      	cmp	r7, #111	; 0x6f
 800f2be:	bf0c      	ite	eq
 800f2c0:	2308      	moveq	r3, #8
 800f2c2:	230a      	movne	r3, #10
 800f2c4:	2100      	movs	r1, #0
 800f2c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f2ca:	6865      	ldr	r5, [r4, #4]
 800f2cc:	60a5      	str	r5, [r4, #8]
 800f2ce:	2d00      	cmp	r5, #0
 800f2d0:	bfa2      	ittt	ge
 800f2d2:	6821      	ldrge	r1, [r4, #0]
 800f2d4:	f021 0104 	bicge.w	r1, r1, #4
 800f2d8:	6021      	strge	r1, [r4, #0]
 800f2da:	b90e      	cbnz	r6, 800f2e0 <_printf_i+0x118>
 800f2dc:	2d00      	cmp	r5, #0
 800f2de:	d04d      	beq.n	800f37c <_printf_i+0x1b4>
 800f2e0:	4615      	mov	r5, r2
 800f2e2:	fbb6 f1f3 	udiv	r1, r6, r3
 800f2e6:	fb03 6711 	mls	r7, r3, r1, r6
 800f2ea:	5dc7      	ldrb	r7, [r0, r7]
 800f2ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f2f0:	4637      	mov	r7, r6
 800f2f2:	42bb      	cmp	r3, r7
 800f2f4:	460e      	mov	r6, r1
 800f2f6:	d9f4      	bls.n	800f2e2 <_printf_i+0x11a>
 800f2f8:	2b08      	cmp	r3, #8
 800f2fa:	d10b      	bne.n	800f314 <_printf_i+0x14c>
 800f2fc:	6823      	ldr	r3, [r4, #0]
 800f2fe:	07de      	lsls	r6, r3, #31
 800f300:	d508      	bpl.n	800f314 <_printf_i+0x14c>
 800f302:	6923      	ldr	r3, [r4, #16]
 800f304:	6861      	ldr	r1, [r4, #4]
 800f306:	4299      	cmp	r1, r3
 800f308:	bfde      	ittt	le
 800f30a:	2330      	movle	r3, #48	; 0x30
 800f30c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f310:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f314:	1b52      	subs	r2, r2, r5
 800f316:	6122      	str	r2, [r4, #16]
 800f318:	f8cd a000 	str.w	sl, [sp]
 800f31c:	464b      	mov	r3, r9
 800f31e:	aa03      	add	r2, sp, #12
 800f320:	4621      	mov	r1, r4
 800f322:	4640      	mov	r0, r8
 800f324:	f7ff fee2 	bl	800f0ec <_printf_common>
 800f328:	3001      	adds	r0, #1
 800f32a:	d14c      	bne.n	800f3c6 <_printf_i+0x1fe>
 800f32c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f330:	b004      	add	sp, #16
 800f332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f336:	4835      	ldr	r0, [pc, #212]	; (800f40c <_printf_i+0x244>)
 800f338:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f33c:	6829      	ldr	r1, [r5, #0]
 800f33e:	6823      	ldr	r3, [r4, #0]
 800f340:	f851 6b04 	ldr.w	r6, [r1], #4
 800f344:	6029      	str	r1, [r5, #0]
 800f346:	061d      	lsls	r5, r3, #24
 800f348:	d514      	bpl.n	800f374 <_printf_i+0x1ac>
 800f34a:	07df      	lsls	r7, r3, #31
 800f34c:	bf44      	itt	mi
 800f34e:	f043 0320 	orrmi.w	r3, r3, #32
 800f352:	6023      	strmi	r3, [r4, #0]
 800f354:	b91e      	cbnz	r6, 800f35e <_printf_i+0x196>
 800f356:	6823      	ldr	r3, [r4, #0]
 800f358:	f023 0320 	bic.w	r3, r3, #32
 800f35c:	6023      	str	r3, [r4, #0]
 800f35e:	2310      	movs	r3, #16
 800f360:	e7b0      	b.n	800f2c4 <_printf_i+0xfc>
 800f362:	6823      	ldr	r3, [r4, #0]
 800f364:	f043 0320 	orr.w	r3, r3, #32
 800f368:	6023      	str	r3, [r4, #0]
 800f36a:	2378      	movs	r3, #120	; 0x78
 800f36c:	4828      	ldr	r0, [pc, #160]	; (800f410 <_printf_i+0x248>)
 800f36e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f372:	e7e3      	b.n	800f33c <_printf_i+0x174>
 800f374:	0659      	lsls	r1, r3, #25
 800f376:	bf48      	it	mi
 800f378:	b2b6      	uxthmi	r6, r6
 800f37a:	e7e6      	b.n	800f34a <_printf_i+0x182>
 800f37c:	4615      	mov	r5, r2
 800f37e:	e7bb      	b.n	800f2f8 <_printf_i+0x130>
 800f380:	682b      	ldr	r3, [r5, #0]
 800f382:	6826      	ldr	r6, [r4, #0]
 800f384:	6961      	ldr	r1, [r4, #20]
 800f386:	1d18      	adds	r0, r3, #4
 800f388:	6028      	str	r0, [r5, #0]
 800f38a:	0635      	lsls	r5, r6, #24
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	d501      	bpl.n	800f394 <_printf_i+0x1cc>
 800f390:	6019      	str	r1, [r3, #0]
 800f392:	e002      	b.n	800f39a <_printf_i+0x1d2>
 800f394:	0670      	lsls	r0, r6, #25
 800f396:	d5fb      	bpl.n	800f390 <_printf_i+0x1c8>
 800f398:	8019      	strh	r1, [r3, #0]
 800f39a:	2300      	movs	r3, #0
 800f39c:	6123      	str	r3, [r4, #16]
 800f39e:	4615      	mov	r5, r2
 800f3a0:	e7ba      	b.n	800f318 <_printf_i+0x150>
 800f3a2:	682b      	ldr	r3, [r5, #0]
 800f3a4:	1d1a      	adds	r2, r3, #4
 800f3a6:	602a      	str	r2, [r5, #0]
 800f3a8:	681d      	ldr	r5, [r3, #0]
 800f3aa:	6862      	ldr	r2, [r4, #4]
 800f3ac:	2100      	movs	r1, #0
 800f3ae:	4628      	mov	r0, r5
 800f3b0:	f7f0 ff3e 	bl	8000230 <memchr>
 800f3b4:	b108      	cbz	r0, 800f3ba <_printf_i+0x1f2>
 800f3b6:	1b40      	subs	r0, r0, r5
 800f3b8:	6060      	str	r0, [r4, #4]
 800f3ba:	6863      	ldr	r3, [r4, #4]
 800f3bc:	6123      	str	r3, [r4, #16]
 800f3be:	2300      	movs	r3, #0
 800f3c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3c4:	e7a8      	b.n	800f318 <_printf_i+0x150>
 800f3c6:	6923      	ldr	r3, [r4, #16]
 800f3c8:	462a      	mov	r2, r5
 800f3ca:	4649      	mov	r1, r9
 800f3cc:	4640      	mov	r0, r8
 800f3ce:	47d0      	blx	sl
 800f3d0:	3001      	adds	r0, #1
 800f3d2:	d0ab      	beq.n	800f32c <_printf_i+0x164>
 800f3d4:	6823      	ldr	r3, [r4, #0]
 800f3d6:	079b      	lsls	r3, r3, #30
 800f3d8:	d413      	bmi.n	800f402 <_printf_i+0x23a>
 800f3da:	68e0      	ldr	r0, [r4, #12]
 800f3dc:	9b03      	ldr	r3, [sp, #12]
 800f3de:	4298      	cmp	r0, r3
 800f3e0:	bfb8      	it	lt
 800f3e2:	4618      	movlt	r0, r3
 800f3e4:	e7a4      	b.n	800f330 <_printf_i+0x168>
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	4632      	mov	r2, r6
 800f3ea:	4649      	mov	r1, r9
 800f3ec:	4640      	mov	r0, r8
 800f3ee:	47d0      	blx	sl
 800f3f0:	3001      	adds	r0, #1
 800f3f2:	d09b      	beq.n	800f32c <_printf_i+0x164>
 800f3f4:	3501      	adds	r5, #1
 800f3f6:	68e3      	ldr	r3, [r4, #12]
 800f3f8:	9903      	ldr	r1, [sp, #12]
 800f3fa:	1a5b      	subs	r3, r3, r1
 800f3fc:	42ab      	cmp	r3, r5
 800f3fe:	dcf2      	bgt.n	800f3e6 <_printf_i+0x21e>
 800f400:	e7eb      	b.n	800f3da <_printf_i+0x212>
 800f402:	2500      	movs	r5, #0
 800f404:	f104 0619 	add.w	r6, r4, #25
 800f408:	e7f5      	b.n	800f3f6 <_printf_i+0x22e>
 800f40a:	bf00      	nop
 800f40c:	080140fe 	.word	0x080140fe
 800f410:	0801410f 	.word	0x0801410f

0800f414 <_scanf_float>:
 800f414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f418:	b087      	sub	sp, #28
 800f41a:	4617      	mov	r7, r2
 800f41c:	9303      	str	r3, [sp, #12]
 800f41e:	688b      	ldr	r3, [r1, #8]
 800f420:	1e5a      	subs	r2, r3, #1
 800f422:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f426:	bf83      	ittte	hi
 800f428:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f42c:	195b      	addhi	r3, r3, r5
 800f42e:	9302      	strhi	r3, [sp, #8]
 800f430:	2300      	movls	r3, #0
 800f432:	bf86      	itte	hi
 800f434:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f438:	608b      	strhi	r3, [r1, #8]
 800f43a:	9302      	strls	r3, [sp, #8]
 800f43c:	680b      	ldr	r3, [r1, #0]
 800f43e:	468b      	mov	fp, r1
 800f440:	2500      	movs	r5, #0
 800f442:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f446:	f84b 3b1c 	str.w	r3, [fp], #28
 800f44a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f44e:	4680      	mov	r8, r0
 800f450:	460c      	mov	r4, r1
 800f452:	465e      	mov	r6, fp
 800f454:	46aa      	mov	sl, r5
 800f456:	46a9      	mov	r9, r5
 800f458:	9501      	str	r5, [sp, #4]
 800f45a:	68a2      	ldr	r2, [r4, #8]
 800f45c:	b152      	cbz	r2, 800f474 <_scanf_float+0x60>
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	2b4e      	cmp	r3, #78	; 0x4e
 800f464:	d864      	bhi.n	800f530 <_scanf_float+0x11c>
 800f466:	2b40      	cmp	r3, #64	; 0x40
 800f468:	d83c      	bhi.n	800f4e4 <_scanf_float+0xd0>
 800f46a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f46e:	b2c8      	uxtb	r0, r1
 800f470:	280e      	cmp	r0, #14
 800f472:	d93a      	bls.n	800f4ea <_scanf_float+0xd6>
 800f474:	f1b9 0f00 	cmp.w	r9, #0
 800f478:	d003      	beq.n	800f482 <_scanf_float+0x6e>
 800f47a:	6823      	ldr	r3, [r4, #0]
 800f47c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f480:	6023      	str	r3, [r4, #0]
 800f482:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f486:	f1ba 0f01 	cmp.w	sl, #1
 800f48a:	f200 8113 	bhi.w	800f6b4 <_scanf_float+0x2a0>
 800f48e:	455e      	cmp	r6, fp
 800f490:	f200 8105 	bhi.w	800f69e <_scanf_float+0x28a>
 800f494:	2501      	movs	r5, #1
 800f496:	4628      	mov	r0, r5
 800f498:	b007      	add	sp, #28
 800f49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f49e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f4a2:	2a0d      	cmp	r2, #13
 800f4a4:	d8e6      	bhi.n	800f474 <_scanf_float+0x60>
 800f4a6:	a101      	add	r1, pc, #4	; (adr r1, 800f4ac <_scanf_float+0x98>)
 800f4a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f4ac:	0800f5eb 	.word	0x0800f5eb
 800f4b0:	0800f475 	.word	0x0800f475
 800f4b4:	0800f475 	.word	0x0800f475
 800f4b8:	0800f475 	.word	0x0800f475
 800f4bc:	0800f64b 	.word	0x0800f64b
 800f4c0:	0800f623 	.word	0x0800f623
 800f4c4:	0800f475 	.word	0x0800f475
 800f4c8:	0800f475 	.word	0x0800f475
 800f4cc:	0800f5f9 	.word	0x0800f5f9
 800f4d0:	0800f475 	.word	0x0800f475
 800f4d4:	0800f475 	.word	0x0800f475
 800f4d8:	0800f475 	.word	0x0800f475
 800f4dc:	0800f475 	.word	0x0800f475
 800f4e0:	0800f5b1 	.word	0x0800f5b1
 800f4e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f4e8:	e7db      	b.n	800f4a2 <_scanf_float+0x8e>
 800f4ea:	290e      	cmp	r1, #14
 800f4ec:	d8c2      	bhi.n	800f474 <_scanf_float+0x60>
 800f4ee:	a001      	add	r0, pc, #4	; (adr r0, 800f4f4 <_scanf_float+0xe0>)
 800f4f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f4f4:	0800f5a3 	.word	0x0800f5a3
 800f4f8:	0800f475 	.word	0x0800f475
 800f4fc:	0800f5a3 	.word	0x0800f5a3
 800f500:	0800f637 	.word	0x0800f637
 800f504:	0800f475 	.word	0x0800f475
 800f508:	0800f551 	.word	0x0800f551
 800f50c:	0800f58d 	.word	0x0800f58d
 800f510:	0800f58d 	.word	0x0800f58d
 800f514:	0800f58d 	.word	0x0800f58d
 800f518:	0800f58d 	.word	0x0800f58d
 800f51c:	0800f58d 	.word	0x0800f58d
 800f520:	0800f58d 	.word	0x0800f58d
 800f524:	0800f58d 	.word	0x0800f58d
 800f528:	0800f58d 	.word	0x0800f58d
 800f52c:	0800f58d 	.word	0x0800f58d
 800f530:	2b6e      	cmp	r3, #110	; 0x6e
 800f532:	d809      	bhi.n	800f548 <_scanf_float+0x134>
 800f534:	2b60      	cmp	r3, #96	; 0x60
 800f536:	d8b2      	bhi.n	800f49e <_scanf_float+0x8a>
 800f538:	2b54      	cmp	r3, #84	; 0x54
 800f53a:	d077      	beq.n	800f62c <_scanf_float+0x218>
 800f53c:	2b59      	cmp	r3, #89	; 0x59
 800f53e:	d199      	bne.n	800f474 <_scanf_float+0x60>
 800f540:	2d07      	cmp	r5, #7
 800f542:	d197      	bne.n	800f474 <_scanf_float+0x60>
 800f544:	2508      	movs	r5, #8
 800f546:	e029      	b.n	800f59c <_scanf_float+0x188>
 800f548:	2b74      	cmp	r3, #116	; 0x74
 800f54a:	d06f      	beq.n	800f62c <_scanf_float+0x218>
 800f54c:	2b79      	cmp	r3, #121	; 0x79
 800f54e:	e7f6      	b.n	800f53e <_scanf_float+0x12a>
 800f550:	6821      	ldr	r1, [r4, #0]
 800f552:	05c8      	lsls	r0, r1, #23
 800f554:	d51a      	bpl.n	800f58c <_scanf_float+0x178>
 800f556:	9b02      	ldr	r3, [sp, #8]
 800f558:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f55c:	6021      	str	r1, [r4, #0]
 800f55e:	f109 0901 	add.w	r9, r9, #1
 800f562:	b11b      	cbz	r3, 800f56c <_scanf_float+0x158>
 800f564:	3b01      	subs	r3, #1
 800f566:	3201      	adds	r2, #1
 800f568:	9302      	str	r3, [sp, #8]
 800f56a:	60a2      	str	r2, [r4, #8]
 800f56c:	68a3      	ldr	r3, [r4, #8]
 800f56e:	3b01      	subs	r3, #1
 800f570:	60a3      	str	r3, [r4, #8]
 800f572:	6923      	ldr	r3, [r4, #16]
 800f574:	3301      	adds	r3, #1
 800f576:	6123      	str	r3, [r4, #16]
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	3b01      	subs	r3, #1
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	607b      	str	r3, [r7, #4]
 800f580:	f340 8084 	ble.w	800f68c <_scanf_float+0x278>
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	3301      	adds	r3, #1
 800f588:	603b      	str	r3, [r7, #0]
 800f58a:	e766      	b.n	800f45a <_scanf_float+0x46>
 800f58c:	eb1a 0f05 	cmn.w	sl, r5
 800f590:	f47f af70 	bne.w	800f474 <_scanf_float+0x60>
 800f594:	6822      	ldr	r2, [r4, #0]
 800f596:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f59a:	6022      	str	r2, [r4, #0]
 800f59c:	f806 3b01 	strb.w	r3, [r6], #1
 800f5a0:	e7e4      	b.n	800f56c <_scanf_float+0x158>
 800f5a2:	6822      	ldr	r2, [r4, #0]
 800f5a4:	0610      	lsls	r0, r2, #24
 800f5a6:	f57f af65 	bpl.w	800f474 <_scanf_float+0x60>
 800f5aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f5ae:	e7f4      	b.n	800f59a <_scanf_float+0x186>
 800f5b0:	f1ba 0f00 	cmp.w	sl, #0
 800f5b4:	d10e      	bne.n	800f5d4 <_scanf_float+0x1c0>
 800f5b6:	f1b9 0f00 	cmp.w	r9, #0
 800f5ba:	d10e      	bne.n	800f5da <_scanf_float+0x1c6>
 800f5bc:	6822      	ldr	r2, [r4, #0]
 800f5be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f5c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f5c6:	d108      	bne.n	800f5da <_scanf_float+0x1c6>
 800f5c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f5cc:	6022      	str	r2, [r4, #0]
 800f5ce:	f04f 0a01 	mov.w	sl, #1
 800f5d2:	e7e3      	b.n	800f59c <_scanf_float+0x188>
 800f5d4:	f1ba 0f02 	cmp.w	sl, #2
 800f5d8:	d055      	beq.n	800f686 <_scanf_float+0x272>
 800f5da:	2d01      	cmp	r5, #1
 800f5dc:	d002      	beq.n	800f5e4 <_scanf_float+0x1d0>
 800f5de:	2d04      	cmp	r5, #4
 800f5e0:	f47f af48 	bne.w	800f474 <_scanf_float+0x60>
 800f5e4:	3501      	adds	r5, #1
 800f5e6:	b2ed      	uxtb	r5, r5
 800f5e8:	e7d8      	b.n	800f59c <_scanf_float+0x188>
 800f5ea:	f1ba 0f01 	cmp.w	sl, #1
 800f5ee:	f47f af41 	bne.w	800f474 <_scanf_float+0x60>
 800f5f2:	f04f 0a02 	mov.w	sl, #2
 800f5f6:	e7d1      	b.n	800f59c <_scanf_float+0x188>
 800f5f8:	b97d      	cbnz	r5, 800f61a <_scanf_float+0x206>
 800f5fa:	f1b9 0f00 	cmp.w	r9, #0
 800f5fe:	f47f af3c 	bne.w	800f47a <_scanf_float+0x66>
 800f602:	6822      	ldr	r2, [r4, #0]
 800f604:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f608:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f60c:	f47f af39 	bne.w	800f482 <_scanf_float+0x6e>
 800f610:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f614:	6022      	str	r2, [r4, #0]
 800f616:	2501      	movs	r5, #1
 800f618:	e7c0      	b.n	800f59c <_scanf_float+0x188>
 800f61a:	2d03      	cmp	r5, #3
 800f61c:	d0e2      	beq.n	800f5e4 <_scanf_float+0x1d0>
 800f61e:	2d05      	cmp	r5, #5
 800f620:	e7de      	b.n	800f5e0 <_scanf_float+0x1cc>
 800f622:	2d02      	cmp	r5, #2
 800f624:	f47f af26 	bne.w	800f474 <_scanf_float+0x60>
 800f628:	2503      	movs	r5, #3
 800f62a:	e7b7      	b.n	800f59c <_scanf_float+0x188>
 800f62c:	2d06      	cmp	r5, #6
 800f62e:	f47f af21 	bne.w	800f474 <_scanf_float+0x60>
 800f632:	2507      	movs	r5, #7
 800f634:	e7b2      	b.n	800f59c <_scanf_float+0x188>
 800f636:	6822      	ldr	r2, [r4, #0]
 800f638:	0591      	lsls	r1, r2, #22
 800f63a:	f57f af1b 	bpl.w	800f474 <_scanf_float+0x60>
 800f63e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f642:	6022      	str	r2, [r4, #0]
 800f644:	f8cd 9004 	str.w	r9, [sp, #4]
 800f648:	e7a8      	b.n	800f59c <_scanf_float+0x188>
 800f64a:	6822      	ldr	r2, [r4, #0]
 800f64c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f650:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f654:	d006      	beq.n	800f664 <_scanf_float+0x250>
 800f656:	0550      	lsls	r0, r2, #21
 800f658:	f57f af0c 	bpl.w	800f474 <_scanf_float+0x60>
 800f65c:	f1b9 0f00 	cmp.w	r9, #0
 800f660:	f43f af0f 	beq.w	800f482 <_scanf_float+0x6e>
 800f664:	0591      	lsls	r1, r2, #22
 800f666:	bf58      	it	pl
 800f668:	9901      	ldrpl	r1, [sp, #4]
 800f66a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f66e:	bf58      	it	pl
 800f670:	eba9 0101 	subpl.w	r1, r9, r1
 800f674:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f678:	bf58      	it	pl
 800f67a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f67e:	6022      	str	r2, [r4, #0]
 800f680:	f04f 0900 	mov.w	r9, #0
 800f684:	e78a      	b.n	800f59c <_scanf_float+0x188>
 800f686:	f04f 0a03 	mov.w	sl, #3
 800f68a:	e787      	b.n	800f59c <_scanf_float+0x188>
 800f68c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f690:	4639      	mov	r1, r7
 800f692:	4640      	mov	r0, r8
 800f694:	4798      	blx	r3
 800f696:	2800      	cmp	r0, #0
 800f698:	f43f aedf 	beq.w	800f45a <_scanf_float+0x46>
 800f69c:	e6ea      	b.n	800f474 <_scanf_float+0x60>
 800f69e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f6a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f6a6:	463a      	mov	r2, r7
 800f6a8:	4640      	mov	r0, r8
 800f6aa:	4798      	blx	r3
 800f6ac:	6923      	ldr	r3, [r4, #16]
 800f6ae:	3b01      	subs	r3, #1
 800f6b0:	6123      	str	r3, [r4, #16]
 800f6b2:	e6ec      	b.n	800f48e <_scanf_float+0x7a>
 800f6b4:	1e6b      	subs	r3, r5, #1
 800f6b6:	2b06      	cmp	r3, #6
 800f6b8:	d825      	bhi.n	800f706 <_scanf_float+0x2f2>
 800f6ba:	2d02      	cmp	r5, #2
 800f6bc:	d836      	bhi.n	800f72c <_scanf_float+0x318>
 800f6be:	455e      	cmp	r6, fp
 800f6c0:	f67f aee8 	bls.w	800f494 <_scanf_float+0x80>
 800f6c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f6c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f6cc:	463a      	mov	r2, r7
 800f6ce:	4640      	mov	r0, r8
 800f6d0:	4798      	blx	r3
 800f6d2:	6923      	ldr	r3, [r4, #16]
 800f6d4:	3b01      	subs	r3, #1
 800f6d6:	6123      	str	r3, [r4, #16]
 800f6d8:	e7f1      	b.n	800f6be <_scanf_float+0x2aa>
 800f6da:	9802      	ldr	r0, [sp, #8]
 800f6dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f6e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f6e4:	9002      	str	r0, [sp, #8]
 800f6e6:	463a      	mov	r2, r7
 800f6e8:	4640      	mov	r0, r8
 800f6ea:	4798      	blx	r3
 800f6ec:	6923      	ldr	r3, [r4, #16]
 800f6ee:	3b01      	subs	r3, #1
 800f6f0:	6123      	str	r3, [r4, #16]
 800f6f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f6f6:	fa5f fa8a 	uxtb.w	sl, sl
 800f6fa:	f1ba 0f02 	cmp.w	sl, #2
 800f6fe:	d1ec      	bne.n	800f6da <_scanf_float+0x2c6>
 800f700:	3d03      	subs	r5, #3
 800f702:	b2ed      	uxtb	r5, r5
 800f704:	1b76      	subs	r6, r6, r5
 800f706:	6823      	ldr	r3, [r4, #0]
 800f708:	05da      	lsls	r2, r3, #23
 800f70a:	d52f      	bpl.n	800f76c <_scanf_float+0x358>
 800f70c:	055b      	lsls	r3, r3, #21
 800f70e:	d510      	bpl.n	800f732 <_scanf_float+0x31e>
 800f710:	455e      	cmp	r6, fp
 800f712:	f67f aebf 	bls.w	800f494 <_scanf_float+0x80>
 800f716:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f71a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f71e:	463a      	mov	r2, r7
 800f720:	4640      	mov	r0, r8
 800f722:	4798      	blx	r3
 800f724:	6923      	ldr	r3, [r4, #16]
 800f726:	3b01      	subs	r3, #1
 800f728:	6123      	str	r3, [r4, #16]
 800f72a:	e7f1      	b.n	800f710 <_scanf_float+0x2fc>
 800f72c:	46aa      	mov	sl, r5
 800f72e:	9602      	str	r6, [sp, #8]
 800f730:	e7df      	b.n	800f6f2 <_scanf_float+0x2de>
 800f732:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f736:	6923      	ldr	r3, [r4, #16]
 800f738:	2965      	cmp	r1, #101	; 0x65
 800f73a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800f73e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800f742:	6123      	str	r3, [r4, #16]
 800f744:	d00c      	beq.n	800f760 <_scanf_float+0x34c>
 800f746:	2945      	cmp	r1, #69	; 0x45
 800f748:	d00a      	beq.n	800f760 <_scanf_float+0x34c>
 800f74a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f74e:	463a      	mov	r2, r7
 800f750:	4640      	mov	r0, r8
 800f752:	4798      	blx	r3
 800f754:	6923      	ldr	r3, [r4, #16]
 800f756:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f75a:	3b01      	subs	r3, #1
 800f75c:	1eb5      	subs	r5, r6, #2
 800f75e:	6123      	str	r3, [r4, #16]
 800f760:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f764:	463a      	mov	r2, r7
 800f766:	4640      	mov	r0, r8
 800f768:	4798      	blx	r3
 800f76a:	462e      	mov	r6, r5
 800f76c:	6825      	ldr	r5, [r4, #0]
 800f76e:	f015 0510 	ands.w	r5, r5, #16
 800f772:	d159      	bne.n	800f828 <_scanf_float+0x414>
 800f774:	7035      	strb	r5, [r6, #0]
 800f776:	6823      	ldr	r3, [r4, #0]
 800f778:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f77c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f780:	d11b      	bne.n	800f7ba <_scanf_float+0x3a6>
 800f782:	9b01      	ldr	r3, [sp, #4]
 800f784:	454b      	cmp	r3, r9
 800f786:	eba3 0209 	sub.w	r2, r3, r9
 800f78a:	d123      	bne.n	800f7d4 <_scanf_float+0x3c0>
 800f78c:	2200      	movs	r2, #0
 800f78e:	4659      	mov	r1, fp
 800f790:	4640      	mov	r0, r8
 800f792:	f000 ff13 	bl	80105bc <_strtod_r>
 800f796:	6822      	ldr	r2, [r4, #0]
 800f798:	9b03      	ldr	r3, [sp, #12]
 800f79a:	f012 0f02 	tst.w	r2, #2
 800f79e:	ec57 6b10 	vmov	r6, r7, d0
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	d021      	beq.n	800f7ea <_scanf_float+0x3d6>
 800f7a6:	9903      	ldr	r1, [sp, #12]
 800f7a8:	1d1a      	adds	r2, r3, #4
 800f7aa:	600a      	str	r2, [r1, #0]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	e9c3 6700 	strd	r6, r7, [r3]
 800f7b2:	68e3      	ldr	r3, [r4, #12]
 800f7b4:	3301      	adds	r3, #1
 800f7b6:	60e3      	str	r3, [r4, #12]
 800f7b8:	e66d      	b.n	800f496 <_scanf_float+0x82>
 800f7ba:	9b04      	ldr	r3, [sp, #16]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d0e5      	beq.n	800f78c <_scanf_float+0x378>
 800f7c0:	9905      	ldr	r1, [sp, #20]
 800f7c2:	230a      	movs	r3, #10
 800f7c4:	462a      	mov	r2, r5
 800f7c6:	3101      	adds	r1, #1
 800f7c8:	4640      	mov	r0, r8
 800f7ca:	f000 ff7f 	bl	80106cc <_strtol_r>
 800f7ce:	9b04      	ldr	r3, [sp, #16]
 800f7d0:	9e05      	ldr	r6, [sp, #20]
 800f7d2:	1ac2      	subs	r2, r0, r3
 800f7d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f7d8:	429e      	cmp	r6, r3
 800f7da:	bf28      	it	cs
 800f7dc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f7e0:	4912      	ldr	r1, [pc, #72]	; (800f82c <_scanf_float+0x418>)
 800f7e2:	4630      	mov	r0, r6
 800f7e4:	f000 f8a8 	bl	800f938 <siprintf>
 800f7e8:	e7d0      	b.n	800f78c <_scanf_float+0x378>
 800f7ea:	9903      	ldr	r1, [sp, #12]
 800f7ec:	f012 0f04 	tst.w	r2, #4
 800f7f0:	f103 0204 	add.w	r2, r3, #4
 800f7f4:	600a      	str	r2, [r1, #0]
 800f7f6:	d1d9      	bne.n	800f7ac <_scanf_float+0x398>
 800f7f8:	f8d3 8000 	ldr.w	r8, [r3]
 800f7fc:	ee10 2a10 	vmov	r2, s0
 800f800:	ee10 0a10 	vmov	r0, s0
 800f804:	463b      	mov	r3, r7
 800f806:	4639      	mov	r1, r7
 800f808:	f7f1 f9b8 	bl	8000b7c <__aeabi_dcmpun>
 800f80c:	b128      	cbz	r0, 800f81a <_scanf_float+0x406>
 800f80e:	4808      	ldr	r0, [pc, #32]	; (800f830 <_scanf_float+0x41c>)
 800f810:	f000 f88c 	bl	800f92c <nanf>
 800f814:	ed88 0a00 	vstr	s0, [r8]
 800f818:	e7cb      	b.n	800f7b2 <_scanf_float+0x39e>
 800f81a:	4630      	mov	r0, r6
 800f81c:	4639      	mov	r1, r7
 800f81e:	f7f1 fa0b 	bl	8000c38 <__aeabi_d2f>
 800f822:	f8c8 0000 	str.w	r0, [r8]
 800f826:	e7c4      	b.n	800f7b2 <_scanf_float+0x39e>
 800f828:	2500      	movs	r5, #0
 800f82a:	e634      	b.n	800f496 <_scanf_float+0x82>
 800f82c:	08014120 	.word	0x08014120
 800f830:	08014223 	.word	0x08014223

0800f834 <srand>:
 800f834:	b538      	push	{r3, r4, r5, lr}
 800f836:	4b10      	ldr	r3, [pc, #64]	; (800f878 <srand+0x44>)
 800f838:	681d      	ldr	r5, [r3, #0]
 800f83a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f83c:	4604      	mov	r4, r0
 800f83e:	b9b3      	cbnz	r3, 800f86e <srand+0x3a>
 800f840:	2018      	movs	r0, #24
 800f842:	f7ff f885 	bl	800e950 <malloc>
 800f846:	4602      	mov	r2, r0
 800f848:	63a8      	str	r0, [r5, #56]	; 0x38
 800f84a:	b920      	cbnz	r0, 800f856 <srand+0x22>
 800f84c:	4b0b      	ldr	r3, [pc, #44]	; (800f87c <srand+0x48>)
 800f84e:	480c      	ldr	r0, [pc, #48]	; (800f880 <srand+0x4c>)
 800f850:	2142      	movs	r1, #66	; 0x42
 800f852:	f000 ff57 	bl	8010704 <__assert_func>
 800f856:	490b      	ldr	r1, [pc, #44]	; (800f884 <srand+0x50>)
 800f858:	4b0b      	ldr	r3, [pc, #44]	; (800f888 <srand+0x54>)
 800f85a:	e9c0 1300 	strd	r1, r3, [r0]
 800f85e:	4b0b      	ldr	r3, [pc, #44]	; (800f88c <srand+0x58>)
 800f860:	6083      	str	r3, [r0, #8]
 800f862:	230b      	movs	r3, #11
 800f864:	8183      	strh	r3, [r0, #12]
 800f866:	2100      	movs	r1, #0
 800f868:	2001      	movs	r0, #1
 800f86a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f86e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f870:	2200      	movs	r2, #0
 800f872:	611c      	str	r4, [r3, #16]
 800f874:	615a      	str	r2, [r3, #20]
 800f876:	bd38      	pop	{r3, r4, r5, pc}
 800f878:	20001384 	.word	0x20001384
 800f87c:	08014125 	.word	0x08014125
 800f880:	0801413c 	.word	0x0801413c
 800f884:	abcd330e 	.word	0xabcd330e
 800f888:	e66d1234 	.word	0xe66d1234
 800f88c:	0005deec 	.word	0x0005deec

0800f890 <rand>:
 800f890:	4b16      	ldr	r3, [pc, #88]	; (800f8ec <rand+0x5c>)
 800f892:	b510      	push	{r4, lr}
 800f894:	681c      	ldr	r4, [r3, #0]
 800f896:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f898:	b9b3      	cbnz	r3, 800f8c8 <rand+0x38>
 800f89a:	2018      	movs	r0, #24
 800f89c:	f7ff f858 	bl	800e950 <malloc>
 800f8a0:	63a0      	str	r0, [r4, #56]	; 0x38
 800f8a2:	b928      	cbnz	r0, 800f8b0 <rand+0x20>
 800f8a4:	4602      	mov	r2, r0
 800f8a6:	4b12      	ldr	r3, [pc, #72]	; (800f8f0 <rand+0x60>)
 800f8a8:	4812      	ldr	r0, [pc, #72]	; (800f8f4 <rand+0x64>)
 800f8aa:	214e      	movs	r1, #78	; 0x4e
 800f8ac:	f000 ff2a 	bl	8010704 <__assert_func>
 800f8b0:	4a11      	ldr	r2, [pc, #68]	; (800f8f8 <rand+0x68>)
 800f8b2:	4b12      	ldr	r3, [pc, #72]	; (800f8fc <rand+0x6c>)
 800f8b4:	e9c0 2300 	strd	r2, r3, [r0]
 800f8b8:	4b11      	ldr	r3, [pc, #68]	; (800f900 <rand+0x70>)
 800f8ba:	6083      	str	r3, [r0, #8]
 800f8bc:	230b      	movs	r3, #11
 800f8be:	8183      	strh	r3, [r0, #12]
 800f8c0:	2201      	movs	r2, #1
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f8c8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800f8ca:	4a0e      	ldr	r2, [pc, #56]	; (800f904 <rand+0x74>)
 800f8cc:	6920      	ldr	r0, [r4, #16]
 800f8ce:	6963      	ldr	r3, [r4, #20]
 800f8d0:	490d      	ldr	r1, [pc, #52]	; (800f908 <rand+0x78>)
 800f8d2:	4342      	muls	r2, r0
 800f8d4:	fb01 2203 	mla	r2, r1, r3, r2
 800f8d8:	fba0 0101 	umull	r0, r1, r0, r1
 800f8dc:	1c43      	adds	r3, r0, #1
 800f8de:	eb42 0001 	adc.w	r0, r2, r1
 800f8e2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800f8e6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f8ea:	bd10      	pop	{r4, pc}
 800f8ec:	20001384 	.word	0x20001384
 800f8f0:	08014125 	.word	0x08014125
 800f8f4:	0801413c 	.word	0x0801413c
 800f8f8:	abcd330e 	.word	0xabcd330e
 800f8fc:	e66d1234 	.word	0xe66d1234
 800f900:	0005deec 	.word	0x0005deec
 800f904:	5851f42d 	.word	0x5851f42d
 800f908:	4c957f2d 	.word	0x4c957f2d

0800f90c <_sbrk_r>:
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	4d06      	ldr	r5, [pc, #24]	; (800f928 <_sbrk_r+0x1c>)
 800f910:	2300      	movs	r3, #0
 800f912:	4604      	mov	r4, r0
 800f914:	4608      	mov	r0, r1
 800f916:	602b      	str	r3, [r5, #0]
 800f918:	f7f4 fd84 	bl	8004424 <_sbrk>
 800f91c:	1c43      	adds	r3, r0, #1
 800f91e:	d102      	bne.n	800f926 <_sbrk_r+0x1a>
 800f920:	682b      	ldr	r3, [r5, #0]
 800f922:	b103      	cbz	r3, 800f926 <_sbrk_r+0x1a>
 800f924:	6023      	str	r3, [r4, #0]
 800f926:	bd38      	pop	{r3, r4, r5, pc}
 800f928:	20014004 	.word	0x20014004

0800f92c <nanf>:
 800f92c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f934 <nanf+0x8>
 800f930:	4770      	bx	lr
 800f932:	bf00      	nop
 800f934:	7fc00000 	.word	0x7fc00000

0800f938 <siprintf>:
 800f938:	b40e      	push	{r1, r2, r3}
 800f93a:	b500      	push	{lr}
 800f93c:	b09c      	sub	sp, #112	; 0x70
 800f93e:	ab1d      	add	r3, sp, #116	; 0x74
 800f940:	9002      	str	r0, [sp, #8]
 800f942:	9006      	str	r0, [sp, #24]
 800f944:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f948:	4809      	ldr	r0, [pc, #36]	; (800f970 <siprintf+0x38>)
 800f94a:	9107      	str	r1, [sp, #28]
 800f94c:	9104      	str	r1, [sp, #16]
 800f94e:	4909      	ldr	r1, [pc, #36]	; (800f974 <siprintf+0x3c>)
 800f950:	f853 2b04 	ldr.w	r2, [r3], #4
 800f954:	9105      	str	r1, [sp, #20]
 800f956:	6800      	ldr	r0, [r0, #0]
 800f958:	9301      	str	r3, [sp, #4]
 800f95a:	a902      	add	r1, sp, #8
 800f95c:	f002 fe60 	bl	8012620 <_svfiprintf_r>
 800f960:	9b02      	ldr	r3, [sp, #8]
 800f962:	2200      	movs	r2, #0
 800f964:	701a      	strb	r2, [r3, #0]
 800f966:	b01c      	add	sp, #112	; 0x70
 800f968:	f85d eb04 	ldr.w	lr, [sp], #4
 800f96c:	b003      	add	sp, #12
 800f96e:	4770      	bx	lr
 800f970:	20001384 	.word	0x20001384
 800f974:	ffff0208 	.word	0xffff0208

0800f978 <sulp>:
 800f978:	b570      	push	{r4, r5, r6, lr}
 800f97a:	4604      	mov	r4, r0
 800f97c:	460d      	mov	r5, r1
 800f97e:	ec45 4b10 	vmov	d0, r4, r5
 800f982:	4616      	mov	r6, r2
 800f984:	f002 fc8c 	bl	80122a0 <__ulp>
 800f988:	ec51 0b10 	vmov	r0, r1, d0
 800f98c:	b17e      	cbz	r6, 800f9ae <sulp+0x36>
 800f98e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f992:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f996:	2b00      	cmp	r3, #0
 800f998:	dd09      	ble.n	800f9ae <sulp+0x36>
 800f99a:	051b      	lsls	r3, r3, #20
 800f99c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f9a0:	2400      	movs	r4, #0
 800f9a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f9a6:	4622      	mov	r2, r4
 800f9a8:	462b      	mov	r3, r5
 800f9aa:	f7f0 fe4d 	bl	8000648 <__aeabi_dmul>
 800f9ae:	bd70      	pop	{r4, r5, r6, pc}

0800f9b0 <_strtod_l>:
 800f9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b4:	ed2d 8b02 	vpush	{d8}
 800f9b8:	b09d      	sub	sp, #116	; 0x74
 800f9ba:	461f      	mov	r7, r3
 800f9bc:	2300      	movs	r3, #0
 800f9be:	9318      	str	r3, [sp, #96]	; 0x60
 800f9c0:	4ba2      	ldr	r3, [pc, #648]	; (800fc4c <_strtod_l+0x29c>)
 800f9c2:	9213      	str	r2, [sp, #76]	; 0x4c
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	9305      	str	r3, [sp, #20]
 800f9c8:	4604      	mov	r4, r0
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	4688      	mov	r8, r1
 800f9ce:	f7f0 fc27 	bl	8000220 <strlen>
 800f9d2:	f04f 0a00 	mov.w	sl, #0
 800f9d6:	4605      	mov	r5, r0
 800f9d8:	f04f 0b00 	mov.w	fp, #0
 800f9dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f9e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f9e2:	781a      	ldrb	r2, [r3, #0]
 800f9e4:	2a2b      	cmp	r2, #43	; 0x2b
 800f9e6:	d04e      	beq.n	800fa86 <_strtod_l+0xd6>
 800f9e8:	d83b      	bhi.n	800fa62 <_strtod_l+0xb2>
 800f9ea:	2a0d      	cmp	r2, #13
 800f9ec:	d834      	bhi.n	800fa58 <_strtod_l+0xa8>
 800f9ee:	2a08      	cmp	r2, #8
 800f9f0:	d834      	bhi.n	800fa5c <_strtod_l+0xac>
 800f9f2:	2a00      	cmp	r2, #0
 800f9f4:	d03e      	beq.n	800fa74 <_strtod_l+0xc4>
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	930a      	str	r3, [sp, #40]	; 0x28
 800f9fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f9fc:	7833      	ldrb	r3, [r6, #0]
 800f9fe:	2b30      	cmp	r3, #48	; 0x30
 800fa00:	f040 80b0 	bne.w	800fb64 <_strtod_l+0x1b4>
 800fa04:	7873      	ldrb	r3, [r6, #1]
 800fa06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fa0a:	2b58      	cmp	r3, #88	; 0x58
 800fa0c:	d168      	bne.n	800fae0 <_strtod_l+0x130>
 800fa0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa10:	9301      	str	r3, [sp, #4]
 800fa12:	ab18      	add	r3, sp, #96	; 0x60
 800fa14:	9702      	str	r7, [sp, #8]
 800fa16:	9300      	str	r3, [sp, #0]
 800fa18:	4a8d      	ldr	r2, [pc, #564]	; (800fc50 <_strtod_l+0x2a0>)
 800fa1a:	ab19      	add	r3, sp, #100	; 0x64
 800fa1c:	a917      	add	r1, sp, #92	; 0x5c
 800fa1e:	4620      	mov	r0, r4
 800fa20:	f001 fd82 	bl	8011528 <__gethex>
 800fa24:	f010 0707 	ands.w	r7, r0, #7
 800fa28:	4605      	mov	r5, r0
 800fa2a:	d005      	beq.n	800fa38 <_strtod_l+0x88>
 800fa2c:	2f06      	cmp	r7, #6
 800fa2e:	d12c      	bne.n	800fa8a <_strtod_l+0xda>
 800fa30:	3601      	adds	r6, #1
 800fa32:	2300      	movs	r3, #0
 800fa34:	9617      	str	r6, [sp, #92]	; 0x5c
 800fa36:	930a      	str	r3, [sp, #40]	; 0x28
 800fa38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	f040 8590 	bne.w	8010560 <_strtod_l+0xbb0>
 800fa40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa42:	b1eb      	cbz	r3, 800fa80 <_strtod_l+0xd0>
 800fa44:	4652      	mov	r2, sl
 800fa46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fa4a:	ec43 2b10 	vmov	d0, r2, r3
 800fa4e:	b01d      	add	sp, #116	; 0x74
 800fa50:	ecbd 8b02 	vpop	{d8}
 800fa54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa58:	2a20      	cmp	r2, #32
 800fa5a:	d1cc      	bne.n	800f9f6 <_strtod_l+0x46>
 800fa5c:	3301      	adds	r3, #1
 800fa5e:	9317      	str	r3, [sp, #92]	; 0x5c
 800fa60:	e7be      	b.n	800f9e0 <_strtod_l+0x30>
 800fa62:	2a2d      	cmp	r2, #45	; 0x2d
 800fa64:	d1c7      	bne.n	800f9f6 <_strtod_l+0x46>
 800fa66:	2201      	movs	r2, #1
 800fa68:	920a      	str	r2, [sp, #40]	; 0x28
 800fa6a:	1c5a      	adds	r2, r3, #1
 800fa6c:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa6e:	785b      	ldrb	r3, [r3, #1]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d1c2      	bne.n	800f9fa <_strtod_l+0x4a>
 800fa74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	f040 856e 	bne.w	801055c <_strtod_l+0xbac>
 800fa80:	4652      	mov	r2, sl
 800fa82:	465b      	mov	r3, fp
 800fa84:	e7e1      	b.n	800fa4a <_strtod_l+0x9a>
 800fa86:	2200      	movs	r2, #0
 800fa88:	e7ee      	b.n	800fa68 <_strtod_l+0xb8>
 800fa8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fa8c:	b13a      	cbz	r2, 800fa9e <_strtod_l+0xee>
 800fa8e:	2135      	movs	r1, #53	; 0x35
 800fa90:	a81a      	add	r0, sp, #104	; 0x68
 800fa92:	f002 fd10 	bl	80124b6 <__copybits>
 800fa96:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fa98:	4620      	mov	r0, r4
 800fa9a:	f002 f8cf 	bl	8011c3c <_Bfree>
 800fa9e:	3f01      	subs	r7, #1
 800faa0:	2f04      	cmp	r7, #4
 800faa2:	d806      	bhi.n	800fab2 <_strtod_l+0x102>
 800faa4:	e8df f007 	tbb	[pc, r7]
 800faa8:	1714030a 	.word	0x1714030a
 800faac:	0a          	.byte	0x0a
 800faad:	00          	.byte	0x00
 800faae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800fab2:	0728      	lsls	r0, r5, #28
 800fab4:	d5c0      	bpl.n	800fa38 <_strtod_l+0x88>
 800fab6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800faba:	e7bd      	b.n	800fa38 <_strtod_l+0x88>
 800fabc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800fac0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fac2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fac6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800faca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800face:	e7f0      	b.n	800fab2 <_strtod_l+0x102>
 800fad0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800fc54 <_strtod_l+0x2a4>
 800fad4:	e7ed      	b.n	800fab2 <_strtod_l+0x102>
 800fad6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fada:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800fade:	e7e8      	b.n	800fab2 <_strtod_l+0x102>
 800fae0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fae2:	1c5a      	adds	r2, r3, #1
 800fae4:	9217      	str	r2, [sp, #92]	; 0x5c
 800fae6:	785b      	ldrb	r3, [r3, #1]
 800fae8:	2b30      	cmp	r3, #48	; 0x30
 800faea:	d0f9      	beq.n	800fae0 <_strtod_l+0x130>
 800faec:	2b00      	cmp	r3, #0
 800faee:	d0a3      	beq.n	800fa38 <_strtod_l+0x88>
 800faf0:	2301      	movs	r3, #1
 800faf2:	f04f 0900 	mov.w	r9, #0
 800faf6:	9304      	str	r3, [sp, #16]
 800faf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fafa:	9308      	str	r3, [sp, #32]
 800fafc:	f8cd 901c 	str.w	r9, [sp, #28]
 800fb00:	464f      	mov	r7, r9
 800fb02:	220a      	movs	r2, #10
 800fb04:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800fb06:	7806      	ldrb	r6, [r0, #0]
 800fb08:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fb0c:	b2d9      	uxtb	r1, r3
 800fb0e:	2909      	cmp	r1, #9
 800fb10:	d92a      	bls.n	800fb68 <_strtod_l+0x1b8>
 800fb12:	9905      	ldr	r1, [sp, #20]
 800fb14:	462a      	mov	r2, r5
 800fb16:	f002 ffe7 	bl	8012ae8 <strncmp>
 800fb1a:	b398      	cbz	r0, 800fb84 <_strtod_l+0x1d4>
 800fb1c:	2000      	movs	r0, #0
 800fb1e:	4632      	mov	r2, r6
 800fb20:	463d      	mov	r5, r7
 800fb22:	9005      	str	r0, [sp, #20]
 800fb24:	4603      	mov	r3, r0
 800fb26:	2a65      	cmp	r2, #101	; 0x65
 800fb28:	d001      	beq.n	800fb2e <_strtod_l+0x17e>
 800fb2a:	2a45      	cmp	r2, #69	; 0x45
 800fb2c:	d118      	bne.n	800fb60 <_strtod_l+0x1b0>
 800fb2e:	b91d      	cbnz	r5, 800fb38 <_strtod_l+0x188>
 800fb30:	9a04      	ldr	r2, [sp, #16]
 800fb32:	4302      	orrs	r2, r0
 800fb34:	d09e      	beq.n	800fa74 <_strtod_l+0xc4>
 800fb36:	2500      	movs	r5, #0
 800fb38:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800fb3c:	f108 0201 	add.w	r2, r8, #1
 800fb40:	9217      	str	r2, [sp, #92]	; 0x5c
 800fb42:	f898 2001 	ldrb.w	r2, [r8, #1]
 800fb46:	2a2b      	cmp	r2, #43	; 0x2b
 800fb48:	d075      	beq.n	800fc36 <_strtod_l+0x286>
 800fb4a:	2a2d      	cmp	r2, #45	; 0x2d
 800fb4c:	d07b      	beq.n	800fc46 <_strtod_l+0x296>
 800fb4e:	f04f 0c00 	mov.w	ip, #0
 800fb52:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fb56:	2909      	cmp	r1, #9
 800fb58:	f240 8082 	bls.w	800fc60 <_strtod_l+0x2b0>
 800fb5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fb60:	2600      	movs	r6, #0
 800fb62:	e09d      	b.n	800fca0 <_strtod_l+0x2f0>
 800fb64:	2300      	movs	r3, #0
 800fb66:	e7c4      	b.n	800faf2 <_strtod_l+0x142>
 800fb68:	2f08      	cmp	r7, #8
 800fb6a:	bfd8      	it	le
 800fb6c:	9907      	ldrle	r1, [sp, #28]
 800fb6e:	f100 0001 	add.w	r0, r0, #1
 800fb72:	bfda      	itte	le
 800fb74:	fb02 3301 	mlale	r3, r2, r1, r3
 800fb78:	9307      	strle	r3, [sp, #28]
 800fb7a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800fb7e:	3701      	adds	r7, #1
 800fb80:	9017      	str	r0, [sp, #92]	; 0x5c
 800fb82:	e7bf      	b.n	800fb04 <_strtod_l+0x154>
 800fb84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb86:	195a      	adds	r2, r3, r5
 800fb88:	9217      	str	r2, [sp, #92]	; 0x5c
 800fb8a:	5d5a      	ldrb	r2, [r3, r5]
 800fb8c:	2f00      	cmp	r7, #0
 800fb8e:	d037      	beq.n	800fc00 <_strtod_l+0x250>
 800fb90:	9005      	str	r0, [sp, #20]
 800fb92:	463d      	mov	r5, r7
 800fb94:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fb98:	2b09      	cmp	r3, #9
 800fb9a:	d912      	bls.n	800fbc2 <_strtod_l+0x212>
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	e7c2      	b.n	800fb26 <_strtod_l+0x176>
 800fba0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fba2:	1c5a      	adds	r2, r3, #1
 800fba4:	9217      	str	r2, [sp, #92]	; 0x5c
 800fba6:	785a      	ldrb	r2, [r3, #1]
 800fba8:	3001      	adds	r0, #1
 800fbaa:	2a30      	cmp	r2, #48	; 0x30
 800fbac:	d0f8      	beq.n	800fba0 <_strtod_l+0x1f0>
 800fbae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fbb2:	2b08      	cmp	r3, #8
 800fbb4:	f200 84d9 	bhi.w	801056a <_strtod_l+0xbba>
 800fbb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fbba:	9005      	str	r0, [sp, #20]
 800fbbc:	2000      	movs	r0, #0
 800fbbe:	9308      	str	r3, [sp, #32]
 800fbc0:	4605      	mov	r5, r0
 800fbc2:	3a30      	subs	r2, #48	; 0x30
 800fbc4:	f100 0301 	add.w	r3, r0, #1
 800fbc8:	d014      	beq.n	800fbf4 <_strtod_l+0x244>
 800fbca:	9905      	ldr	r1, [sp, #20]
 800fbcc:	4419      	add	r1, r3
 800fbce:	9105      	str	r1, [sp, #20]
 800fbd0:	462b      	mov	r3, r5
 800fbd2:	eb00 0e05 	add.w	lr, r0, r5
 800fbd6:	210a      	movs	r1, #10
 800fbd8:	4573      	cmp	r3, lr
 800fbda:	d113      	bne.n	800fc04 <_strtod_l+0x254>
 800fbdc:	182b      	adds	r3, r5, r0
 800fbde:	2b08      	cmp	r3, #8
 800fbe0:	f105 0501 	add.w	r5, r5, #1
 800fbe4:	4405      	add	r5, r0
 800fbe6:	dc1c      	bgt.n	800fc22 <_strtod_l+0x272>
 800fbe8:	9907      	ldr	r1, [sp, #28]
 800fbea:	230a      	movs	r3, #10
 800fbec:	fb03 2301 	mla	r3, r3, r1, r2
 800fbf0:	9307      	str	r3, [sp, #28]
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fbf6:	1c51      	adds	r1, r2, #1
 800fbf8:	9117      	str	r1, [sp, #92]	; 0x5c
 800fbfa:	7852      	ldrb	r2, [r2, #1]
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	e7c9      	b.n	800fb94 <_strtod_l+0x1e4>
 800fc00:	4638      	mov	r0, r7
 800fc02:	e7d2      	b.n	800fbaa <_strtod_l+0x1fa>
 800fc04:	2b08      	cmp	r3, #8
 800fc06:	dc04      	bgt.n	800fc12 <_strtod_l+0x262>
 800fc08:	9e07      	ldr	r6, [sp, #28]
 800fc0a:	434e      	muls	r6, r1
 800fc0c:	9607      	str	r6, [sp, #28]
 800fc0e:	3301      	adds	r3, #1
 800fc10:	e7e2      	b.n	800fbd8 <_strtod_l+0x228>
 800fc12:	f103 0c01 	add.w	ip, r3, #1
 800fc16:	f1bc 0f10 	cmp.w	ip, #16
 800fc1a:	bfd8      	it	le
 800fc1c:	fb01 f909 	mulle.w	r9, r1, r9
 800fc20:	e7f5      	b.n	800fc0e <_strtod_l+0x25e>
 800fc22:	2d10      	cmp	r5, #16
 800fc24:	bfdc      	itt	le
 800fc26:	230a      	movle	r3, #10
 800fc28:	fb03 2909 	mlale	r9, r3, r9, r2
 800fc2c:	e7e1      	b.n	800fbf2 <_strtod_l+0x242>
 800fc2e:	2300      	movs	r3, #0
 800fc30:	9305      	str	r3, [sp, #20]
 800fc32:	2301      	movs	r3, #1
 800fc34:	e77c      	b.n	800fb30 <_strtod_l+0x180>
 800fc36:	f04f 0c00 	mov.w	ip, #0
 800fc3a:	f108 0202 	add.w	r2, r8, #2
 800fc3e:	9217      	str	r2, [sp, #92]	; 0x5c
 800fc40:	f898 2002 	ldrb.w	r2, [r8, #2]
 800fc44:	e785      	b.n	800fb52 <_strtod_l+0x1a2>
 800fc46:	f04f 0c01 	mov.w	ip, #1
 800fc4a:	e7f6      	b.n	800fc3a <_strtod_l+0x28a>
 800fc4c:	08014404 	.word	0x08014404
 800fc50:	08014198 	.word	0x08014198
 800fc54:	7ff00000 	.word	0x7ff00000
 800fc58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fc5a:	1c51      	adds	r1, r2, #1
 800fc5c:	9117      	str	r1, [sp, #92]	; 0x5c
 800fc5e:	7852      	ldrb	r2, [r2, #1]
 800fc60:	2a30      	cmp	r2, #48	; 0x30
 800fc62:	d0f9      	beq.n	800fc58 <_strtod_l+0x2a8>
 800fc64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fc68:	2908      	cmp	r1, #8
 800fc6a:	f63f af79 	bhi.w	800fb60 <_strtod_l+0x1b0>
 800fc6e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800fc72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fc74:	9206      	str	r2, [sp, #24]
 800fc76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fc78:	1c51      	adds	r1, r2, #1
 800fc7a:	9117      	str	r1, [sp, #92]	; 0x5c
 800fc7c:	7852      	ldrb	r2, [r2, #1]
 800fc7e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800fc82:	2e09      	cmp	r6, #9
 800fc84:	d937      	bls.n	800fcf6 <_strtod_l+0x346>
 800fc86:	9e06      	ldr	r6, [sp, #24]
 800fc88:	1b89      	subs	r1, r1, r6
 800fc8a:	2908      	cmp	r1, #8
 800fc8c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fc90:	dc02      	bgt.n	800fc98 <_strtod_l+0x2e8>
 800fc92:	4576      	cmp	r6, lr
 800fc94:	bfa8      	it	ge
 800fc96:	4676      	movge	r6, lr
 800fc98:	f1bc 0f00 	cmp.w	ip, #0
 800fc9c:	d000      	beq.n	800fca0 <_strtod_l+0x2f0>
 800fc9e:	4276      	negs	r6, r6
 800fca0:	2d00      	cmp	r5, #0
 800fca2:	d14d      	bne.n	800fd40 <_strtod_l+0x390>
 800fca4:	9904      	ldr	r1, [sp, #16]
 800fca6:	4301      	orrs	r1, r0
 800fca8:	f47f aec6 	bne.w	800fa38 <_strtod_l+0x88>
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	f47f aee1 	bne.w	800fa74 <_strtod_l+0xc4>
 800fcb2:	2a69      	cmp	r2, #105	; 0x69
 800fcb4:	d027      	beq.n	800fd06 <_strtod_l+0x356>
 800fcb6:	dc24      	bgt.n	800fd02 <_strtod_l+0x352>
 800fcb8:	2a49      	cmp	r2, #73	; 0x49
 800fcba:	d024      	beq.n	800fd06 <_strtod_l+0x356>
 800fcbc:	2a4e      	cmp	r2, #78	; 0x4e
 800fcbe:	f47f aed9 	bne.w	800fa74 <_strtod_l+0xc4>
 800fcc2:	499f      	ldr	r1, [pc, #636]	; (800ff40 <_strtod_l+0x590>)
 800fcc4:	a817      	add	r0, sp, #92	; 0x5c
 800fcc6:	f001 fe87 	bl	80119d8 <__match>
 800fcca:	2800      	cmp	r0, #0
 800fccc:	f43f aed2 	beq.w	800fa74 <_strtod_l+0xc4>
 800fcd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fcd2:	781b      	ldrb	r3, [r3, #0]
 800fcd4:	2b28      	cmp	r3, #40	; 0x28
 800fcd6:	d12d      	bne.n	800fd34 <_strtod_l+0x384>
 800fcd8:	499a      	ldr	r1, [pc, #616]	; (800ff44 <_strtod_l+0x594>)
 800fcda:	aa1a      	add	r2, sp, #104	; 0x68
 800fcdc:	a817      	add	r0, sp, #92	; 0x5c
 800fcde:	f001 fe8f 	bl	8011a00 <__hexnan>
 800fce2:	2805      	cmp	r0, #5
 800fce4:	d126      	bne.n	800fd34 <_strtod_l+0x384>
 800fce6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fce8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800fcec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fcf0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fcf4:	e6a0      	b.n	800fa38 <_strtod_l+0x88>
 800fcf6:	210a      	movs	r1, #10
 800fcf8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800fcfc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fd00:	e7b9      	b.n	800fc76 <_strtod_l+0x2c6>
 800fd02:	2a6e      	cmp	r2, #110	; 0x6e
 800fd04:	e7db      	b.n	800fcbe <_strtod_l+0x30e>
 800fd06:	4990      	ldr	r1, [pc, #576]	; (800ff48 <_strtod_l+0x598>)
 800fd08:	a817      	add	r0, sp, #92	; 0x5c
 800fd0a:	f001 fe65 	bl	80119d8 <__match>
 800fd0e:	2800      	cmp	r0, #0
 800fd10:	f43f aeb0 	beq.w	800fa74 <_strtod_l+0xc4>
 800fd14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fd16:	498d      	ldr	r1, [pc, #564]	; (800ff4c <_strtod_l+0x59c>)
 800fd18:	3b01      	subs	r3, #1
 800fd1a:	a817      	add	r0, sp, #92	; 0x5c
 800fd1c:	9317      	str	r3, [sp, #92]	; 0x5c
 800fd1e:	f001 fe5b 	bl	80119d8 <__match>
 800fd22:	b910      	cbnz	r0, 800fd2a <_strtod_l+0x37a>
 800fd24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fd26:	3301      	adds	r3, #1
 800fd28:	9317      	str	r3, [sp, #92]	; 0x5c
 800fd2a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ff5c <_strtod_l+0x5ac>
 800fd2e:	f04f 0a00 	mov.w	sl, #0
 800fd32:	e681      	b.n	800fa38 <_strtod_l+0x88>
 800fd34:	4886      	ldr	r0, [pc, #536]	; (800ff50 <_strtod_l+0x5a0>)
 800fd36:	f002 fecf 	bl	8012ad8 <nan>
 800fd3a:	ec5b ab10 	vmov	sl, fp, d0
 800fd3e:	e67b      	b.n	800fa38 <_strtod_l+0x88>
 800fd40:	9b05      	ldr	r3, [sp, #20]
 800fd42:	9807      	ldr	r0, [sp, #28]
 800fd44:	1af3      	subs	r3, r6, r3
 800fd46:	2f00      	cmp	r7, #0
 800fd48:	bf08      	it	eq
 800fd4a:	462f      	moveq	r7, r5
 800fd4c:	2d10      	cmp	r5, #16
 800fd4e:	9306      	str	r3, [sp, #24]
 800fd50:	46a8      	mov	r8, r5
 800fd52:	bfa8      	it	ge
 800fd54:	f04f 0810 	movge.w	r8, #16
 800fd58:	f7f0 fbfc 	bl	8000554 <__aeabi_ui2d>
 800fd5c:	2d09      	cmp	r5, #9
 800fd5e:	4682      	mov	sl, r0
 800fd60:	468b      	mov	fp, r1
 800fd62:	dd13      	ble.n	800fd8c <_strtod_l+0x3dc>
 800fd64:	4b7b      	ldr	r3, [pc, #492]	; (800ff54 <_strtod_l+0x5a4>)
 800fd66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fd6a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fd6e:	f7f0 fc6b 	bl	8000648 <__aeabi_dmul>
 800fd72:	4682      	mov	sl, r0
 800fd74:	4648      	mov	r0, r9
 800fd76:	468b      	mov	fp, r1
 800fd78:	f7f0 fbec 	bl	8000554 <__aeabi_ui2d>
 800fd7c:	4602      	mov	r2, r0
 800fd7e:	460b      	mov	r3, r1
 800fd80:	4650      	mov	r0, sl
 800fd82:	4659      	mov	r1, fp
 800fd84:	f7f0 faaa 	bl	80002dc <__adddf3>
 800fd88:	4682      	mov	sl, r0
 800fd8a:	468b      	mov	fp, r1
 800fd8c:	2d0f      	cmp	r5, #15
 800fd8e:	dc38      	bgt.n	800fe02 <_strtod_l+0x452>
 800fd90:	9b06      	ldr	r3, [sp, #24]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	f43f ae50 	beq.w	800fa38 <_strtod_l+0x88>
 800fd98:	dd24      	ble.n	800fde4 <_strtod_l+0x434>
 800fd9a:	2b16      	cmp	r3, #22
 800fd9c:	dc0b      	bgt.n	800fdb6 <_strtod_l+0x406>
 800fd9e:	496d      	ldr	r1, [pc, #436]	; (800ff54 <_strtod_l+0x5a4>)
 800fda0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fda4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fda8:	4652      	mov	r2, sl
 800fdaa:	465b      	mov	r3, fp
 800fdac:	f7f0 fc4c 	bl	8000648 <__aeabi_dmul>
 800fdb0:	4682      	mov	sl, r0
 800fdb2:	468b      	mov	fp, r1
 800fdb4:	e640      	b.n	800fa38 <_strtod_l+0x88>
 800fdb6:	9a06      	ldr	r2, [sp, #24]
 800fdb8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	db20      	blt.n	800fe02 <_strtod_l+0x452>
 800fdc0:	4c64      	ldr	r4, [pc, #400]	; (800ff54 <_strtod_l+0x5a4>)
 800fdc2:	f1c5 050f 	rsb	r5, r5, #15
 800fdc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fdca:	4652      	mov	r2, sl
 800fdcc:	465b      	mov	r3, fp
 800fdce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdd2:	f7f0 fc39 	bl	8000648 <__aeabi_dmul>
 800fdd6:	9b06      	ldr	r3, [sp, #24]
 800fdd8:	1b5d      	subs	r5, r3, r5
 800fdda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fdde:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fde2:	e7e3      	b.n	800fdac <_strtod_l+0x3fc>
 800fde4:	9b06      	ldr	r3, [sp, #24]
 800fde6:	3316      	adds	r3, #22
 800fde8:	db0b      	blt.n	800fe02 <_strtod_l+0x452>
 800fdea:	9b05      	ldr	r3, [sp, #20]
 800fdec:	1b9e      	subs	r6, r3, r6
 800fdee:	4b59      	ldr	r3, [pc, #356]	; (800ff54 <_strtod_l+0x5a4>)
 800fdf0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800fdf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fdf8:	4650      	mov	r0, sl
 800fdfa:	4659      	mov	r1, fp
 800fdfc:	f7f0 fd4e 	bl	800089c <__aeabi_ddiv>
 800fe00:	e7d6      	b.n	800fdb0 <_strtod_l+0x400>
 800fe02:	9b06      	ldr	r3, [sp, #24]
 800fe04:	eba5 0808 	sub.w	r8, r5, r8
 800fe08:	4498      	add	r8, r3
 800fe0a:	f1b8 0f00 	cmp.w	r8, #0
 800fe0e:	dd74      	ble.n	800fefa <_strtod_l+0x54a>
 800fe10:	f018 030f 	ands.w	r3, r8, #15
 800fe14:	d00a      	beq.n	800fe2c <_strtod_l+0x47c>
 800fe16:	494f      	ldr	r1, [pc, #316]	; (800ff54 <_strtod_l+0x5a4>)
 800fe18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fe1c:	4652      	mov	r2, sl
 800fe1e:	465b      	mov	r3, fp
 800fe20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe24:	f7f0 fc10 	bl	8000648 <__aeabi_dmul>
 800fe28:	4682      	mov	sl, r0
 800fe2a:	468b      	mov	fp, r1
 800fe2c:	f038 080f 	bics.w	r8, r8, #15
 800fe30:	d04f      	beq.n	800fed2 <_strtod_l+0x522>
 800fe32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fe36:	dd22      	ble.n	800fe7e <_strtod_l+0x4ce>
 800fe38:	2500      	movs	r5, #0
 800fe3a:	462e      	mov	r6, r5
 800fe3c:	9507      	str	r5, [sp, #28]
 800fe3e:	9505      	str	r5, [sp, #20]
 800fe40:	2322      	movs	r3, #34	; 0x22
 800fe42:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ff5c <_strtod_l+0x5ac>
 800fe46:	6023      	str	r3, [r4, #0]
 800fe48:	f04f 0a00 	mov.w	sl, #0
 800fe4c:	9b07      	ldr	r3, [sp, #28]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	f43f adf2 	beq.w	800fa38 <_strtod_l+0x88>
 800fe54:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fe56:	4620      	mov	r0, r4
 800fe58:	f001 fef0 	bl	8011c3c <_Bfree>
 800fe5c:	9905      	ldr	r1, [sp, #20]
 800fe5e:	4620      	mov	r0, r4
 800fe60:	f001 feec 	bl	8011c3c <_Bfree>
 800fe64:	4631      	mov	r1, r6
 800fe66:	4620      	mov	r0, r4
 800fe68:	f001 fee8 	bl	8011c3c <_Bfree>
 800fe6c:	9907      	ldr	r1, [sp, #28]
 800fe6e:	4620      	mov	r0, r4
 800fe70:	f001 fee4 	bl	8011c3c <_Bfree>
 800fe74:	4629      	mov	r1, r5
 800fe76:	4620      	mov	r0, r4
 800fe78:	f001 fee0 	bl	8011c3c <_Bfree>
 800fe7c:	e5dc      	b.n	800fa38 <_strtod_l+0x88>
 800fe7e:	4b36      	ldr	r3, [pc, #216]	; (800ff58 <_strtod_l+0x5a8>)
 800fe80:	9304      	str	r3, [sp, #16]
 800fe82:	2300      	movs	r3, #0
 800fe84:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fe88:	4650      	mov	r0, sl
 800fe8a:	4659      	mov	r1, fp
 800fe8c:	4699      	mov	r9, r3
 800fe8e:	f1b8 0f01 	cmp.w	r8, #1
 800fe92:	dc21      	bgt.n	800fed8 <_strtod_l+0x528>
 800fe94:	b10b      	cbz	r3, 800fe9a <_strtod_l+0x4ea>
 800fe96:	4682      	mov	sl, r0
 800fe98:	468b      	mov	fp, r1
 800fe9a:	4b2f      	ldr	r3, [pc, #188]	; (800ff58 <_strtod_l+0x5a8>)
 800fe9c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fea0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800fea4:	4652      	mov	r2, sl
 800fea6:	465b      	mov	r3, fp
 800fea8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800feac:	f7f0 fbcc 	bl	8000648 <__aeabi_dmul>
 800feb0:	4b2a      	ldr	r3, [pc, #168]	; (800ff5c <_strtod_l+0x5ac>)
 800feb2:	460a      	mov	r2, r1
 800feb4:	400b      	ands	r3, r1
 800feb6:	492a      	ldr	r1, [pc, #168]	; (800ff60 <_strtod_l+0x5b0>)
 800feb8:	428b      	cmp	r3, r1
 800feba:	4682      	mov	sl, r0
 800febc:	d8bc      	bhi.n	800fe38 <_strtod_l+0x488>
 800febe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fec2:	428b      	cmp	r3, r1
 800fec4:	bf86      	itte	hi
 800fec6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ff64 <_strtod_l+0x5b4>
 800feca:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800fece:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fed2:	2300      	movs	r3, #0
 800fed4:	9304      	str	r3, [sp, #16]
 800fed6:	e084      	b.n	800ffe2 <_strtod_l+0x632>
 800fed8:	f018 0f01 	tst.w	r8, #1
 800fedc:	d005      	beq.n	800feea <_strtod_l+0x53a>
 800fede:	9b04      	ldr	r3, [sp, #16]
 800fee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee4:	f7f0 fbb0 	bl	8000648 <__aeabi_dmul>
 800fee8:	2301      	movs	r3, #1
 800feea:	9a04      	ldr	r2, [sp, #16]
 800feec:	3208      	adds	r2, #8
 800feee:	f109 0901 	add.w	r9, r9, #1
 800fef2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fef6:	9204      	str	r2, [sp, #16]
 800fef8:	e7c9      	b.n	800fe8e <_strtod_l+0x4de>
 800fefa:	d0ea      	beq.n	800fed2 <_strtod_l+0x522>
 800fefc:	f1c8 0800 	rsb	r8, r8, #0
 800ff00:	f018 020f 	ands.w	r2, r8, #15
 800ff04:	d00a      	beq.n	800ff1c <_strtod_l+0x56c>
 800ff06:	4b13      	ldr	r3, [pc, #76]	; (800ff54 <_strtod_l+0x5a4>)
 800ff08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff0c:	4650      	mov	r0, sl
 800ff0e:	4659      	mov	r1, fp
 800ff10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff14:	f7f0 fcc2 	bl	800089c <__aeabi_ddiv>
 800ff18:	4682      	mov	sl, r0
 800ff1a:	468b      	mov	fp, r1
 800ff1c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ff20:	d0d7      	beq.n	800fed2 <_strtod_l+0x522>
 800ff22:	f1b8 0f1f 	cmp.w	r8, #31
 800ff26:	dd1f      	ble.n	800ff68 <_strtod_l+0x5b8>
 800ff28:	2500      	movs	r5, #0
 800ff2a:	462e      	mov	r6, r5
 800ff2c:	9507      	str	r5, [sp, #28]
 800ff2e:	9505      	str	r5, [sp, #20]
 800ff30:	2322      	movs	r3, #34	; 0x22
 800ff32:	f04f 0a00 	mov.w	sl, #0
 800ff36:	f04f 0b00 	mov.w	fp, #0
 800ff3a:	6023      	str	r3, [r4, #0]
 800ff3c:	e786      	b.n	800fe4c <_strtod_l+0x49c>
 800ff3e:	bf00      	nop
 800ff40:	080140f9 	.word	0x080140f9
 800ff44:	080141ac 	.word	0x080141ac
 800ff48:	080140f1 	.word	0x080140f1
 800ff4c:	08014328 	.word	0x08014328
 800ff50:	08014223 	.word	0x08014223
 800ff54:	080144a0 	.word	0x080144a0
 800ff58:	08014478 	.word	0x08014478
 800ff5c:	7ff00000 	.word	0x7ff00000
 800ff60:	7ca00000 	.word	0x7ca00000
 800ff64:	7fefffff 	.word	0x7fefffff
 800ff68:	f018 0310 	ands.w	r3, r8, #16
 800ff6c:	bf18      	it	ne
 800ff6e:	236a      	movne	r3, #106	; 0x6a
 800ff70:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010320 <_strtod_l+0x970>
 800ff74:	9304      	str	r3, [sp, #16]
 800ff76:	4650      	mov	r0, sl
 800ff78:	4659      	mov	r1, fp
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	f018 0f01 	tst.w	r8, #1
 800ff80:	d004      	beq.n	800ff8c <_strtod_l+0x5dc>
 800ff82:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ff86:	f7f0 fb5f 	bl	8000648 <__aeabi_dmul>
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ff90:	f109 0908 	add.w	r9, r9, #8
 800ff94:	d1f2      	bne.n	800ff7c <_strtod_l+0x5cc>
 800ff96:	b10b      	cbz	r3, 800ff9c <_strtod_l+0x5ec>
 800ff98:	4682      	mov	sl, r0
 800ff9a:	468b      	mov	fp, r1
 800ff9c:	9b04      	ldr	r3, [sp, #16]
 800ff9e:	b1c3      	cbz	r3, 800ffd2 <_strtod_l+0x622>
 800ffa0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ffa4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	4659      	mov	r1, fp
 800ffac:	dd11      	ble.n	800ffd2 <_strtod_l+0x622>
 800ffae:	2b1f      	cmp	r3, #31
 800ffb0:	f340 8124 	ble.w	80101fc <_strtod_l+0x84c>
 800ffb4:	2b34      	cmp	r3, #52	; 0x34
 800ffb6:	bfde      	ittt	le
 800ffb8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ffbc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800ffc0:	fa03 f202 	lslle.w	r2, r3, r2
 800ffc4:	f04f 0a00 	mov.w	sl, #0
 800ffc8:	bfcc      	ite	gt
 800ffca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ffce:	ea02 0b01 	andle.w	fp, r2, r1
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	4650      	mov	r0, sl
 800ffd8:	4659      	mov	r1, fp
 800ffda:	f7f0 fd9d 	bl	8000b18 <__aeabi_dcmpeq>
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	d1a2      	bne.n	800ff28 <_strtod_l+0x578>
 800ffe2:	9b07      	ldr	r3, [sp, #28]
 800ffe4:	9300      	str	r3, [sp, #0]
 800ffe6:	9908      	ldr	r1, [sp, #32]
 800ffe8:	462b      	mov	r3, r5
 800ffea:	463a      	mov	r2, r7
 800ffec:	4620      	mov	r0, r4
 800ffee:	f001 fe8d 	bl	8011d0c <__s2b>
 800fff2:	9007      	str	r0, [sp, #28]
 800fff4:	2800      	cmp	r0, #0
 800fff6:	f43f af1f 	beq.w	800fe38 <_strtod_l+0x488>
 800fffa:	9b05      	ldr	r3, [sp, #20]
 800fffc:	1b9e      	subs	r6, r3, r6
 800fffe:	9b06      	ldr	r3, [sp, #24]
 8010000:	2b00      	cmp	r3, #0
 8010002:	bfb4      	ite	lt
 8010004:	4633      	movlt	r3, r6
 8010006:	2300      	movge	r3, #0
 8010008:	930c      	str	r3, [sp, #48]	; 0x30
 801000a:	9b06      	ldr	r3, [sp, #24]
 801000c:	2500      	movs	r5, #0
 801000e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010012:	9312      	str	r3, [sp, #72]	; 0x48
 8010014:	462e      	mov	r6, r5
 8010016:	9b07      	ldr	r3, [sp, #28]
 8010018:	4620      	mov	r0, r4
 801001a:	6859      	ldr	r1, [r3, #4]
 801001c:	f001 fdce 	bl	8011bbc <_Balloc>
 8010020:	9005      	str	r0, [sp, #20]
 8010022:	2800      	cmp	r0, #0
 8010024:	f43f af0c 	beq.w	800fe40 <_strtod_l+0x490>
 8010028:	9b07      	ldr	r3, [sp, #28]
 801002a:	691a      	ldr	r2, [r3, #16]
 801002c:	3202      	adds	r2, #2
 801002e:	f103 010c 	add.w	r1, r3, #12
 8010032:	0092      	lsls	r2, r2, #2
 8010034:	300c      	adds	r0, #12
 8010036:	f001 fda7 	bl	8011b88 <memcpy>
 801003a:	ec4b ab10 	vmov	d0, sl, fp
 801003e:	aa1a      	add	r2, sp, #104	; 0x68
 8010040:	a919      	add	r1, sp, #100	; 0x64
 8010042:	4620      	mov	r0, r4
 8010044:	f002 f9a8 	bl	8012398 <__d2b>
 8010048:	ec4b ab18 	vmov	d8, sl, fp
 801004c:	9018      	str	r0, [sp, #96]	; 0x60
 801004e:	2800      	cmp	r0, #0
 8010050:	f43f aef6 	beq.w	800fe40 <_strtod_l+0x490>
 8010054:	2101      	movs	r1, #1
 8010056:	4620      	mov	r0, r4
 8010058:	f001 fef2 	bl	8011e40 <__i2b>
 801005c:	4606      	mov	r6, r0
 801005e:	2800      	cmp	r0, #0
 8010060:	f43f aeee 	beq.w	800fe40 <_strtod_l+0x490>
 8010064:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010066:	9904      	ldr	r1, [sp, #16]
 8010068:	2b00      	cmp	r3, #0
 801006a:	bfab      	itete	ge
 801006c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801006e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010070:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010072:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8010076:	bfac      	ite	ge
 8010078:	eb03 0902 	addge.w	r9, r3, r2
 801007c:	1ad7      	sublt	r7, r2, r3
 801007e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010080:	eba3 0801 	sub.w	r8, r3, r1
 8010084:	4490      	add	r8, r2
 8010086:	4ba1      	ldr	r3, [pc, #644]	; (801030c <_strtod_l+0x95c>)
 8010088:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801008c:	4598      	cmp	r8, r3
 801008e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010092:	f280 80c7 	bge.w	8010224 <_strtod_l+0x874>
 8010096:	eba3 0308 	sub.w	r3, r3, r8
 801009a:	2b1f      	cmp	r3, #31
 801009c:	eba2 0203 	sub.w	r2, r2, r3
 80100a0:	f04f 0101 	mov.w	r1, #1
 80100a4:	f300 80b1 	bgt.w	801020a <_strtod_l+0x85a>
 80100a8:	fa01 f303 	lsl.w	r3, r1, r3
 80100ac:	930d      	str	r3, [sp, #52]	; 0x34
 80100ae:	2300      	movs	r3, #0
 80100b0:	9308      	str	r3, [sp, #32]
 80100b2:	eb09 0802 	add.w	r8, r9, r2
 80100b6:	9b04      	ldr	r3, [sp, #16]
 80100b8:	45c1      	cmp	r9, r8
 80100ba:	4417      	add	r7, r2
 80100bc:	441f      	add	r7, r3
 80100be:	464b      	mov	r3, r9
 80100c0:	bfa8      	it	ge
 80100c2:	4643      	movge	r3, r8
 80100c4:	42bb      	cmp	r3, r7
 80100c6:	bfa8      	it	ge
 80100c8:	463b      	movge	r3, r7
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	bfc2      	ittt	gt
 80100ce:	eba8 0803 	subgt.w	r8, r8, r3
 80100d2:	1aff      	subgt	r7, r7, r3
 80100d4:	eba9 0903 	subgt.w	r9, r9, r3
 80100d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80100da:	2b00      	cmp	r3, #0
 80100dc:	dd17      	ble.n	801010e <_strtod_l+0x75e>
 80100de:	4631      	mov	r1, r6
 80100e0:	461a      	mov	r2, r3
 80100e2:	4620      	mov	r0, r4
 80100e4:	f001 ff6c 	bl	8011fc0 <__pow5mult>
 80100e8:	4606      	mov	r6, r0
 80100ea:	2800      	cmp	r0, #0
 80100ec:	f43f aea8 	beq.w	800fe40 <_strtod_l+0x490>
 80100f0:	4601      	mov	r1, r0
 80100f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80100f4:	4620      	mov	r0, r4
 80100f6:	f001 feb9 	bl	8011e6c <__multiply>
 80100fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80100fc:	2800      	cmp	r0, #0
 80100fe:	f43f ae9f 	beq.w	800fe40 <_strtod_l+0x490>
 8010102:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010104:	4620      	mov	r0, r4
 8010106:	f001 fd99 	bl	8011c3c <_Bfree>
 801010a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801010c:	9318      	str	r3, [sp, #96]	; 0x60
 801010e:	f1b8 0f00 	cmp.w	r8, #0
 8010112:	f300 808c 	bgt.w	801022e <_strtod_l+0x87e>
 8010116:	9b06      	ldr	r3, [sp, #24]
 8010118:	2b00      	cmp	r3, #0
 801011a:	dd08      	ble.n	801012e <_strtod_l+0x77e>
 801011c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801011e:	9905      	ldr	r1, [sp, #20]
 8010120:	4620      	mov	r0, r4
 8010122:	f001 ff4d 	bl	8011fc0 <__pow5mult>
 8010126:	9005      	str	r0, [sp, #20]
 8010128:	2800      	cmp	r0, #0
 801012a:	f43f ae89 	beq.w	800fe40 <_strtod_l+0x490>
 801012e:	2f00      	cmp	r7, #0
 8010130:	dd08      	ble.n	8010144 <_strtod_l+0x794>
 8010132:	9905      	ldr	r1, [sp, #20]
 8010134:	463a      	mov	r2, r7
 8010136:	4620      	mov	r0, r4
 8010138:	f001 ff9c 	bl	8012074 <__lshift>
 801013c:	9005      	str	r0, [sp, #20]
 801013e:	2800      	cmp	r0, #0
 8010140:	f43f ae7e 	beq.w	800fe40 <_strtod_l+0x490>
 8010144:	f1b9 0f00 	cmp.w	r9, #0
 8010148:	dd08      	ble.n	801015c <_strtod_l+0x7ac>
 801014a:	4631      	mov	r1, r6
 801014c:	464a      	mov	r2, r9
 801014e:	4620      	mov	r0, r4
 8010150:	f001 ff90 	bl	8012074 <__lshift>
 8010154:	4606      	mov	r6, r0
 8010156:	2800      	cmp	r0, #0
 8010158:	f43f ae72 	beq.w	800fe40 <_strtod_l+0x490>
 801015c:	9a05      	ldr	r2, [sp, #20]
 801015e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010160:	4620      	mov	r0, r4
 8010162:	f002 f813 	bl	801218c <__mdiff>
 8010166:	4605      	mov	r5, r0
 8010168:	2800      	cmp	r0, #0
 801016a:	f43f ae69 	beq.w	800fe40 <_strtod_l+0x490>
 801016e:	68c3      	ldr	r3, [r0, #12]
 8010170:	930b      	str	r3, [sp, #44]	; 0x2c
 8010172:	2300      	movs	r3, #0
 8010174:	60c3      	str	r3, [r0, #12]
 8010176:	4631      	mov	r1, r6
 8010178:	f001 ffec 	bl	8012154 <__mcmp>
 801017c:	2800      	cmp	r0, #0
 801017e:	da60      	bge.n	8010242 <_strtod_l+0x892>
 8010180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010182:	ea53 030a 	orrs.w	r3, r3, sl
 8010186:	f040 8082 	bne.w	801028e <_strtod_l+0x8de>
 801018a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801018e:	2b00      	cmp	r3, #0
 8010190:	d17d      	bne.n	801028e <_strtod_l+0x8de>
 8010192:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010196:	0d1b      	lsrs	r3, r3, #20
 8010198:	051b      	lsls	r3, r3, #20
 801019a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801019e:	d976      	bls.n	801028e <_strtod_l+0x8de>
 80101a0:	696b      	ldr	r3, [r5, #20]
 80101a2:	b913      	cbnz	r3, 80101aa <_strtod_l+0x7fa>
 80101a4:	692b      	ldr	r3, [r5, #16]
 80101a6:	2b01      	cmp	r3, #1
 80101a8:	dd71      	ble.n	801028e <_strtod_l+0x8de>
 80101aa:	4629      	mov	r1, r5
 80101ac:	2201      	movs	r2, #1
 80101ae:	4620      	mov	r0, r4
 80101b0:	f001 ff60 	bl	8012074 <__lshift>
 80101b4:	4631      	mov	r1, r6
 80101b6:	4605      	mov	r5, r0
 80101b8:	f001 ffcc 	bl	8012154 <__mcmp>
 80101bc:	2800      	cmp	r0, #0
 80101be:	dd66      	ble.n	801028e <_strtod_l+0x8de>
 80101c0:	9904      	ldr	r1, [sp, #16]
 80101c2:	4a53      	ldr	r2, [pc, #332]	; (8010310 <_strtod_l+0x960>)
 80101c4:	465b      	mov	r3, fp
 80101c6:	2900      	cmp	r1, #0
 80101c8:	f000 8081 	beq.w	80102ce <_strtod_l+0x91e>
 80101cc:	ea02 010b 	and.w	r1, r2, fp
 80101d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80101d4:	dc7b      	bgt.n	80102ce <_strtod_l+0x91e>
 80101d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80101da:	f77f aea9 	ble.w	800ff30 <_strtod_l+0x580>
 80101de:	4b4d      	ldr	r3, [pc, #308]	; (8010314 <_strtod_l+0x964>)
 80101e0:	4650      	mov	r0, sl
 80101e2:	4659      	mov	r1, fp
 80101e4:	2200      	movs	r2, #0
 80101e6:	f7f0 fa2f 	bl	8000648 <__aeabi_dmul>
 80101ea:	460b      	mov	r3, r1
 80101ec:	4303      	orrs	r3, r0
 80101ee:	bf08      	it	eq
 80101f0:	2322      	moveq	r3, #34	; 0x22
 80101f2:	4682      	mov	sl, r0
 80101f4:	468b      	mov	fp, r1
 80101f6:	bf08      	it	eq
 80101f8:	6023      	streq	r3, [r4, #0]
 80101fa:	e62b      	b.n	800fe54 <_strtod_l+0x4a4>
 80101fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010200:	fa02 f303 	lsl.w	r3, r2, r3
 8010204:	ea03 0a0a 	and.w	sl, r3, sl
 8010208:	e6e3      	b.n	800ffd2 <_strtod_l+0x622>
 801020a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801020e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010212:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010216:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801021a:	fa01 f308 	lsl.w	r3, r1, r8
 801021e:	9308      	str	r3, [sp, #32]
 8010220:	910d      	str	r1, [sp, #52]	; 0x34
 8010222:	e746      	b.n	80100b2 <_strtod_l+0x702>
 8010224:	2300      	movs	r3, #0
 8010226:	9308      	str	r3, [sp, #32]
 8010228:	2301      	movs	r3, #1
 801022a:	930d      	str	r3, [sp, #52]	; 0x34
 801022c:	e741      	b.n	80100b2 <_strtod_l+0x702>
 801022e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010230:	4642      	mov	r2, r8
 8010232:	4620      	mov	r0, r4
 8010234:	f001 ff1e 	bl	8012074 <__lshift>
 8010238:	9018      	str	r0, [sp, #96]	; 0x60
 801023a:	2800      	cmp	r0, #0
 801023c:	f47f af6b 	bne.w	8010116 <_strtod_l+0x766>
 8010240:	e5fe      	b.n	800fe40 <_strtod_l+0x490>
 8010242:	465f      	mov	r7, fp
 8010244:	d16e      	bne.n	8010324 <_strtod_l+0x974>
 8010246:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010248:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801024c:	b342      	cbz	r2, 80102a0 <_strtod_l+0x8f0>
 801024e:	4a32      	ldr	r2, [pc, #200]	; (8010318 <_strtod_l+0x968>)
 8010250:	4293      	cmp	r3, r2
 8010252:	d128      	bne.n	80102a6 <_strtod_l+0x8f6>
 8010254:	9b04      	ldr	r3, [sp, #16]
 8010256:	4651      	mov	r1, sl
 8010258:	b1eb      	cbz	r3, 8010296 <_strtod_l+0x8e6>
 801025a:	4b2d      	ldr	r3, [pc, #180]	; (8010310 <_strtod_l+0x960>)
 801025c:	403b      	ands	r3, r7
 801025e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010262:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010266:	d819      	bhi.n	801029c <_strtod_l+0x8ec>
 8010268:	0d1b      	lsrs	r3, r3, #20
 801026a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801026e:	fa02 f303 	lsl.w	r3, r2, r3
 8010272:	4299      	cmp	r1, r3
 8010274:	d117      	bne.n	80102a6 <_strtod_l+0x8f6>
 8010276:	4b29      	ldr	r3, [pc, #164]	; (801031c <_strtod_l+0x96c>)
 8010278:	429f      	cmp	r7, r3
 801027a:	d102      	bne.n	8010282 <_strtod_l+0x8d2>
 801027c:	3101      	adds	r1, #1
 801027e:	f43f addf 	beq.w	800fe40 <_strtod_l+0x490>
 8010282:	4b23      	ldr	r3, [pc, #140]	; (8010310 <_strtod_l+0x960>)
 8010284:	403b      	ands	r3, r7
 8010286:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801028a:	f04f 0a00 	mov.w	sl, #0
 801028e:	9b04      	ldr	r3, [sp, #16]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d1a4      	bne.n	80101de <_strtod_l+0x82e>
 8010294:	e5de      	b.n	800fe54 <_strtod_l+0x4a4>
 8010296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801029a:	e7ea      	b.n	8010272 <_strtod_l+0x8c2>
 801029c:	4613      	mov	r3, r2
 801029e:	e7e8      	b.n	8010272 <_strtod_l+0x8c2>
 80102a0:	ea53 030a 	orrs.w	r3, r3, sl
 80102a4:	d08c      	beq.n	80101c0 <_strtod_l+0x810>
 80102a6:	9b08      	ldr	r3, [sp, #32]
 80102a8:	b1db      	cbz	r3, 80102e2 <_strtod_l+0x932>
 80102aa:	423b      	tst	r3, r7
 80102ac:	d0ef      	beq.n	801028e <_strtod_l+0x8de>
 80102ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102b0:	9a04      	ldr	r2, [sp, #16]
 80102b2:	4650      	mov	r0, sl
 80102b4:	4659      	mov	r1, fp
 80102b6:	b1c3      	cbz	r3, 80102ea <_strtod_l+0x93a>
 80102b8:	f7ff fb5e 	bl	800f978 <sulp>
 80102bc:	4602      	mov	r2, r0
 80102be:	460b      	mov	r3, r1
 80102c0:	ec51 0b18 	vmov	r0, r1, d8
 80102c4:	f7f0 f80a 	bl	80002dc <__adddf3>
 80102c8:	4682      	mov	sl, r0
 80102ca:	468b      	mov	fp, r1
 80102cc:	e7df      	b.n	801028e <_strtod_l+0x8de>
 80102ce:	4013      	ands	r3, r2
 80102d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80102d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80102d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80102dc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80102e0:	e7d5      	b.n	801028e <_strtod_l+0x8de>
 80102e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102e4:	ea13 0f0a 	tst.w	r3, sl
 80102e8:	e7e0      	b.n	80102ac <_strtod_l+0x8fc>
 80102ea:	f7ff fb45 	bl	800f978 <sulp>
 80102ee:	4602      	mov	r2, r0
 80102f0:	460b      	mov	r3, r1
 80102f2:	ec51 0b18 	vmov	r0, r1, d8
 80102f6:	f7ef ffef 	bl	80002d8 <__aeabi_dsub>
 80102fa:	2200      	movs	r2, #0
 80102fc:	2300      	movs	r3, #0
 80102fe:	4682      	mov	sl, r0
 8010300:	468b      	mov	fp, r1
 8010302:	f7f0 fc09 	bl	8000b18 <__aeabi_dcmpeq>
 8010306:	2800      	cmp	r0, #0
 8010308:	d0c1      	beq.n	801028e <_strtod_l+0x8de>
 801030a:	e611      	b.n	800ff30 <_strtod_l+0x580>
 801030c:	fffffc02 	.word	0xfffffc02
 8010310:	7ff00000 	.word	0x7ff00000
 8010314:	39500000 	.word	0x39500000
 8010318:	000fffff 	.word	0x000fffff
 801031c:	7fefffff 	.word	0x7fefffff
 8010320:	080141c0 	.word	0x080141c0
 8010324:	4631      	mov	r1, r6
 8010326:	4628      	mov	r0, r5
 8010328:	f002 f892 	bl	8012450 <__ratio>
 801032c:	ec59 8b10 	vmov	r8, r9, d0
 8010330:	ee10 0a10 	vmov	r0, s0
 8010334:	2200      	movs	r2, #0
 8010336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801033a:	4649      	mov	r1, r9
 801033c:	f7f0 fc00 	bl	8000b40 <__aeabi_dcmple>
 8010340:	2800      	cmp	r0, #0
 8010342:	d07a      	beq.n	801043a <_strtod_l+0xa8a>
 8010344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010346:	2b00      	cmp	r3, #0
 8010348:	d04a      	beq.n	80103e0 <_strtod_l+0xa30>
 801034a:	4b95      	ldr	r3, [pc, #596]	; (80105a0 <_strtod_l+0xbf0>)
 801034c:	2200      	movs	r2, #0
 801034e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010352:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80105a0 <_strtod_l+0xbf0>
 8010356:	f04f 0800 	mov.w	r8, #0
 801035a:	4b92      	ldr	r3, [pc, #584]	; (80105a4 <_strtod_l+0xbf4>)
 801035c:	403b      	ands	r3, r7
 801035e:	930d      	str	r3, [sp, #52]	; 0x34
 8010360:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010362:	4b91      	ldr	r3, [pc, #580]	; (80105a8 <_strtod_l+0xbf8>)
 8010364:	429a      	cmp	r2, r3
 8010366:	f040 80b0 	bne.w	80104ca <_strtod_l+0xb1a>
 801036a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801036e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010372:	ec4b ab10 	vmov	d0, sl, fp
 8010376:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801037a:	f001 ff91 	bl	80122a0 <__ulp>
 801037e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010382:	ec53 2b10 	vmov	r2, r3, d0
 8010386:	f7f0 f95f 	bl	8000648 <__aeabi_dmul>
 801038a:	4652      	mov	r2, sl
 801038c:	465b      	mov	r3, fp
 801038e:	f7ef ffa5 	bl	80002dc <__adddf3>
 8010392:	460b      	mov	r3, r1
 8010394:	4983      	ldr	r1, [pc, #524]	; (80105a4 <_strtod_l+0xbf4>)
 8010396:	4a85      	ldr	r2, [pc, #532]	; (80105ac <_strtod_l+0xbfc>)
 8010398:	4019      	ands	r1, r3
 801039a:	4291      	cmp	r1, r2
 801039c:	4682      	mov	sl, r0
 801039e:	d960      	bls.n	8010462 <_strtod_l+0xab2>
 80103a0:	ee18 3a90 	vmov	r3, s17
 80103a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80103a8:	4293      	cmp	r3, r2
 80103aa:	d104      	bne.n	80103b6 <_strtod_l+0xa06>
 80103ac:	ee18 3a10 	vmov	r3, s16
 80103b0:	3301      	adds	r3, #1
 80103b2:	f43f ad45 	beq.w	800fe40 <_strtod_l+0x490>
 80103b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80105b8 <_strtod_l+0xc08>
 80103ba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80103be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80103c0:	4620      	mov	r0, r4
 80103c2:	f001 fc3b 	bl	8011c3c <_Bfree>
 80103c6:	9905      	ldr	r1, [sp, #20]
 80103c8:	4620      	mov	r0, r4
 80103ca:	f001 fc37 	bl	8011c3c <_Bfree>
 80103ce:	4631      	mov	r1, r6
 80103d0:	4620      	mov	r0, r4
 80103d2:	f001 fc33 	bl	8011c3c <_Bfree>
 80103d6:	4629      	mov	r1, r5
 80103d8:	4620      	mov	r0, r4
 80103da:	f001 fc2f 	bl	8011c3c <_Bfree>
 80103de:	e61a      	b.n	8010016 <_strtod_l+0x666>
 80103e0:	f1ba 0f00 	cmp.w	sl, #0
 80103e4:	d11b      	bne.n	801041e <_strtod_l+0xa6e>
 80103e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80103ea:	b9f3      	cbnz	r3, 801042a <_strtod_l+0xa7a>
 80103ec:	4b6c      	ldr	r3, [pc, #432]	; (80105a0 <_strtod_l+0xbf0>)
 80103ee:	2200      	movs	r2, #0
 80103f0:	4640      	mov	r0, r8
 80103f2:	4649      	mov	r1, r9
 80103f4:	f7f0 fb9a 	bl	8000b2c <__aeabi_dcmplt>
 80103f8:	b9d0      	cbnz	r0, 8010430 <_strtod_l+0xa80>
 80103fa:	4640      	mov	r0, r8
 80103fc:	4649      	mov	r1, r9
 80103fe:	4b6c      	ldr	r3, [pc, #432]	; (80105b0 <_strtod_l+0xc00>)
 8010400:	2200      	movs	r2, #0
 8010402:	f7f0 f921 	bl	8000648 <__aeabi_dmul>
 8010406:	4680      	mov	r8, r0
 8010408:	4689      	mov	r9, r1
 801040a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801040e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010412:	9315      	str	r3, [sp, #84]	; 0x54
 8010414:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010418:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801041c:	e79d      	b.n	801035a <_strtod_l+0x9aa>
 801041e:	f1ba 0f01 	cmp.w	sl, #1
 8010422:	d102      	bne.n	801042a <_strtod_l+0xa7a>
 8010424:	2f00      	cmp	r7, #0
 8010426:	f43f ad83 	beq.w	800ff30 <_strtod_l+0x580>
 801042a:	4b62      	ldr	r3, [pc, #392]	; (80105b4 <_strtod_l+0xc04>)
 801042c:	2200      	movs	r2, #0
 801042e:	e78e      	b.n	801034e <_strtod_l+0x99e>
 8010430:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80105b0 <_strtod_l+0xc00>
 8010434:	f04f 0800 	mov.w	r8, #0
 8010438:	e7e7      	b.n	801040a <_strtod_l+0xa5a>
 801043a:	4b5d      	ldr	r3, [pc, #372]	; (80105b0 <_strtod_l+0xc00>)
 801043c:	4640      	mov	r0, r8
 801043e:	4649      	mov	r1, r9
 8010440:	2200      	movs	r2, #0
 8010442:	f7f0 f901 	bl	8000648 <__aeabi_dmul>
 8010446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010448:	4680      	mov	r8, r0
 801044a:	4689      	mov	r9, r1
 801044c:	b933      	cbnz	r3, 801045c <_strtod_l+0xaac>
 801044e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010452:	900e      	str	r0, [sp, #56]	; 0x38
 8010454:	930f      	str	r3, [sp, #60]	; 0x3c
 8010456:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801045a:	e7dd      	b.n	8010418 <_strtod_l+0xa68>
 801045c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010460:	e7f9      	b.n	8010456 <_strtod_l+0xaa6>
 8010462:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010466:	9b04      	ldr	r3, [sp, #16]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d1a8      	bne.n	80103be <_strtod_l+0xa0e>
 801046c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010470:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010472:	0d1b      	lsrs	r3, r3, #20
 8010474:	051b      	lsls	r3, r3, #20
 8010476:	429a      	cmp	r2, r3
 8010478:	d1a1      	bne.n	80103be <_strtod_l+0xa0e>
 801047a:	4640      	mov	r0, r8
 801047c:	4649      	mov	r1, r9
 801047e:	f7f0 fc43 	bl	8000d08 <__aeabi_d2lz>
 8010482:	f7f0 f8b3 	bl	80005ec <__aeabi_l2d>
 8010486:	4602      	mov	r2, r0
 8010488:	460b      	mov	r3, r1
 801048a:	4640      	mov	r0, r8
 801048c:	4649      	mov	r1, r9
 801048e:	f7ef ff23 	bl	80002d8 <__aeabi_dsub>
 8010492:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010494:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010498:	ea43 030a 	orr.w	r3, r3, sl
 801049c:	4313      	orrs	r3, r2
 801049e:	4680      	mov	r8, r0
 80104a0:	4689      	mov	r9, r1
 80104a2:	d055      	beq.n	8010550 <_strtod_l+0xba0>
 80104a4:	a336      	add	r3, pc, #216	; (adr r3, 8010580 <_strtod_l+0xbd0>)
 80104a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104aa:	f7f0 fb3f 	bl	8000b2c <__aeabi_dcmplt>
 80104ae:	2800      	cmp	r0, #0
 80104b0:	f47f acd0 	bne.w	800fe54 <_strtod_l+0x4a4>
 80104b4:	a334      	add	r3, pc, #208	; (adr r3, 8010588 <_strtod_l+0xbd8>)
 80104b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ba:	4640      	mov	r0, r8
 80104bc:	4649      	mov	r1, r9
 80104be:	f7f0 fb53 	bl	8000b68 <__aeabi_dcmpgt>
 80104c2:	2800      	cmp	r0, #0
 80104c4:	f43f af7b 	beq.w	80103be <_strtod_l+0xa0e>
 80104c8:	e4c4      	b.n	800fe54 <_strtod_l+0x4a4>
 80104ca:	9b04      	ldr	r3, [sp, #16]
 80104cc:	b333      	cbz	r3, 801051c <_strtod_l+0xb6c>
 80104ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80104d4:	d822      	bhi.n	801051c <_strtod_l+0xb6c>
 80104d6:	a32e      	add	r3, pc, #184	; (adr r3, 8010590 <_strtod_l+0xbe0>)
 80104d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104dc:	4640      	mov	r0, r8
 80104de:	4649      	mov	r1, r9
 80104e0:	f7f0 fb2e 	bl	8000b40 <__aeabi_dcmple>
 80104e4:	b1a0      	cbz	r0, 8010510 <_strtod_l+0xb60>
 80104e6:	4649      	mov	r1, r9
 80104e8:	4640      	mov	r0, r8
 80104ea:	f7f0 fb85 	bl	8000bf8 <__aeabi_d2uiz>
 80104ee:	2801      	cmp	r0, #1
 80104f0:	bf38      	it	cc
 80104f2:	2001      	movcc	r0, #1
 80104f4:	f7f0 f82e 	bl	8000554 <__aeabi_ui2d>
 80104f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104fa:	4680      	mov	r8, r0
 80104fc:	4689      	mov	r9, r1
 80104fe:	bb23      	cbnz	r3, 801054a <_strtod_l+0xb9a>
 8010500:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010504:	9010      	str	r0, [sp, #64]	; 0x40
 8010506:	9311      	str	r3, [sp, #68]	; 0x44
 8010508:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801050c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010512:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010514:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010518:	1a9b      	subs	r3, r3, r2
 801051a:	9309      	str	r3, [sp, #36]	; 0x24
 801051c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010520:	eeb0 0a48 	vmov.f32	s0, s16
 8010524:	eef0 0a68 	vmov.f32	s1, s17
 8010528:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801052c:	f001 feb8 	bl	80122a0 <__ulp>
 8010530:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010534:	ec53 2b10 	vmov	r2, r3, d0
 8010538:	f7f0 f886 	bl	8000648 <__aeabi_dmul>
 801053c:	ec53 2b18 	vmov	r2, r3, d8
 8010540:	f7ef fecc 	bl	80002dc <__adddf3>
 8010544:	4682      	mov	sl, r0
 8010546:	468b      	mov	fp, r1
 8010548:	e78d      	b.n	8010466 <_strtod_l+0xab6>
 801054a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801054e:	e7db      	b.n	8010508 <_strtod_l+0xb58>
 8010550:	a311      	add	r3, pc, #68	; (adr r3, 8010598 <_strtod_l+0xbe8>)
 8010552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010556:	f7f0 fae9 	bl	8000b2c <__aeabi_dcmplt>
 801055a:	e7b2      	b.n	80104c2 <_strtod_l+0xb12>
 801055c:	2300      	movs	r3, #0
 801055e:	930a      	str	r3, [sp, #40]	; 0x28
 8010560:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010562:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010564:	6013      	str	r3, [r2, #0]
 8010566:	f7ff ba6b 	b.w	800fa40 <_strtod_l+0x90>
 801056a:	2a65      	cmp	r2, #101	; 0x65
 801056c:	f43f ab5f 	beq.w	800fc2e <_strtod_l+0x27e>
 8010570:	2a45      	cmp	r2, #69	; 0x45
 8010572:	f43f ab5c 	beq.w	800fc2e <_strtod_l+0x27e>
 8010576:	2301      	movs	r3, #1
 8010578:	f7ff bb94 	b.w	800fca4 <_strtod_l+0x2f4>
 801057c:	f3af 8000 	nop.w
 8010580:	94a03595 	.word	0x94a03595
 8010584:	3fdfffff 	.word	0x3fdfffff
 8010588:	35afe535 	.word	0x35afe535
 801058c:	3fe00000 	.word	0x3fe00000
 8010590:	ffc00000 	.word	0xffc00000
 8010594:	41dfffff 	.word	0x41dfffff
 8010598:	94a03595 	.word	0x94a03595
 801059c:	3fcfffff 	.word	0x3fcfffff
 80105a0:	3ff00000 	.word	0x3ff00000
 80105a4:	7ff00000 	.word	0x7ff00000
 80105a8:	7fe00000 	.word	0x7fe00000
 80105ac:	7c9fffff 	.word	0x7c9fffff
 80105b0:	3fe00000 	.word	0x3fe00000
 80105b4:	bff00000 	.word	0xbff00000
 80105b8:	7fefffff 	.word	0x7fefffff

080105bc <_strtod_r>:
 80105bc:	4b01      	ldr	r3, [pc, #4]	; (80105c4 <_strtod_r+0x8>)
 80105be:	f7ff b9f7 	b.w	800f9b0 <_strtod_l>
 80105c2:	bf00      	nop
 80105c4:	200013ec 	.word	0x200013ec

080105c8 <_strtol_l.constprop.0>:
 80105c8:	2b01      	cmp	r3, #1
 80105ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105ce:	d001      	beq.n	80105d4 <_strtol_l.constprop.0+0xc>
 80105d0:	2b24      	cmp	r3, #36	; 0x24
 80105d2:	d906      	bls.n	80105e2 <_strtol_l.constprop.0+0x1a>
 80105d4:	f7fe f992 	bl	800e8fc <__errno>
 80105d8:	2316      	movs	r3, #22
 80105da:	6003      	str	r3, [r0, #0]
 80105dc:	2000      	movs	r0, #0
 80105de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80106c8 <_strtol_l.constprop.0+0x100>
 80105e6:	460d      	mov	r5, r1
 80105e8:	462e      	mov	r6, r5
 80105ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80105ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80105f2:	f017 0708 	ands.w	r7, r7, #8
 80105f6:	d1f7      	bne.n	80105e8 <_strtol_l.constprop.0+0x20>
 80105f8:	2c2d      	cmp	r4, #45	; 0x2d
 80105fa:	d132      	bne.n	8010662 <_strtol_l.constprop.0+0x9a>
 80105fc:	782c      	ldrb	r4, [r5, #0]
 80105fe:	2701      	movs	r7, #1
 8010600:	1cb5      	adds	r5, r6, #2
 8010602:	2b00      	cmp	r3, #0
 8010604:	d05b      	beq.n	80106be <_strtol_l.constprop.0+0xf6>
 8010606:	2b10      	cmp	r3, #16
 8010608:	d109      	bne.n	801061e <_strtol_l.constprop.0+0x56>
 801060a:	2c30      	cmp	r4, #48	; 0x30
 801060c:	d107      	bne.n	801061e <_strtol_l.constprop.0+0x56>
 801060e:	782c      	ldrb	r4, [r5, #0]
 8010610:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010614:	2c58      	cmp	r4, #88	; 0x58
 8010616:	d14d      	bne.n	80106b4 <_strtol_l.constprop.0+0xec>
 8010618:	786c      	ldrb	r4, [r5, #1]
 801061a:	2310      	movs	r3, #16
 801061c:	3502      	adds	r5, #2
 801061e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010622:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010626:	f04f 0c00 	mov.w	ip, #0
 801062a:	fbb8 f9f3 	udiv	r9, r8, r3
 801062e:	4666      	mov	r6, ip
 8010630:	fb03 8a19 	mls	sl, r3, r9, r8
 8010634:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010638:	f1be 0f09 	cmp.w	lr, #9
 801063c:	d816      	bhi.n	801066c <_strtol_l.constprop.0+0xa4>
 801063e:	4674      	mov	r4, lr
 8010640:	42a3      	cmp	r3, r4
 8010642:	dd24      	ble.n	801068e <_strtol_l.constprop.0+0xc6>
 8010644:	f1bc 0f00 	cmp.w	ip, #0
 8010648:	db1e      	blt.n	8010688 <_strtol_l.constprop.0+0xc0>
 801064a:	45b1      	cmp	r9, r6
 801064c:	d31c      	bcc.n	8010688 <_strtol_l.constprop.0+0xc0>
 801064e:	d101      	bne.n	8010654 <_strtol_l.constprop.0+0x8c>
 8010650:	45a2      	cmp	sl, r4
 8010652:	db19      	blt.n	8010688 <_strtol_l.constprop.0+0xc0>
 8010654:	fb06 4603 	mla	r6, r6, r3, r4
 8010658:	f04f 0c01 	mov.w	ip, #1
 801065c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010660:	e7e8      	b.n	8010634 <_strtol_l.constprop.0+0x6c>
 8010662:	2c2b      	cmp	r4, #43	; 0x2b
 8010664:	bf04      	itt	eq
 8010666:	782c      	ldrbeq	r4, [r5, #0]
 8010668:	1cb5      	addeq	r5, r6, #2
 801066a:	e7ca      	b.n	8010602 <_strtol_l.constprop.0+0x3a>
 801066c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010670:	f1be 0f19 	cmp.w	lr, #25
 8010674:	d801      	bhi.n	801067a <_strtol_l.constprop.0+0xb2>
 8010676:	3c37      	subs	r4, #55	; 0x37
 8010678:	e7e2      	b.n	8010640 <_strtol_l.constprop.0+0x78>
 801067a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801067e:	f1be 0f19 	cmp.w	lr, #25
 8010682:	d804      	bhi.n	801068e <_strtol_l.constprop.0+0xc6>
 8010684:	3c57      	subs	r4, #87	; 0x57
 8010686:	e7db      	b.n	8010640 <_strtol_l.constprop.0+0x78>
 8010688:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801068c:	e7e6      	b.n	801065c <_strtol_l.constprop.0+0x94>
 801068e:	f1bc 0f00 	cmp.w	ip, #0
 8010692:	da05      	bge.n	80106a0 <_strtol_l.constprop.0+0xd8>
 8010694:	2322      	movs	r3, #34	; 0x22
 8010696:	6003      	str	r3, [r0, #0]
 8010698:	4646      	mov	r6, r8
 801069a:	b942      	cbnz	r2, 80106ae <_strtol_l.constprop.0+0xe6>
 801069c:	4630      	mov	r0, r6
 801069e:	e79e      	b.n	80105de <_strtol_l.constprop.0+0x16>
 80106a0:	b107      	cbz	r7, 80106a4 <_strtol_l.constprop.0+0xdc>
 80106a2:	4276      	negs	r6, r6
 80106a4:	2a00      	cmp	r2, #0
 80106a6:	d0f9      	beq.n	801069c <_strtol_l.constprop.0+0xd4>
 80106a8:	f1bc 0f00 	cmp.w	ip, #0
 80106ac:	d000      	beq.n	80106b0 <_strtol_l.constprop.0+0xe8>
 80106ae:	1e69      	subs	r1, r5, #1
 80106b0:	6011      	str	r1, [r2, #0]
 80106b2:	e7f3      	b.n	801069c <_strtol_l.constprop.0+0xd4>
 80106b4:	2430      	movs	r4, #48	; 0x30
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d1b1      	bne.n	801061e <_strtol_l.constprop.0+0x56>
 80106ba:	2308      	movs	r3, #8
 80106bc:	e7af      	b.n	801061e <_strtol_l.constprop.0+0x56>
 80106be:	2c30      	cmp	r4, #48	; 0x30
 80106c0:	d0a5      	beq.n	801060e <_strtol_l.constprop.0+0x46>
 80106c2:	230a      	movs	r3, #10
 80106c4:	e7ab      	b.n	801061e <_strtol_l.constprop.0+0x56>
 80106c6:	bf00      	nop
 80106c8:	08014225 	.word	0x08014225

080106cc <_strtol_r>:
 80106cc:	f7ff bf7c 	b.w	80105c8 <_strtol_l.constprop.0>

080106d0 <time>:
 80106d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80106d2:	4b0b      	ldr	r3, [pc, #44]	; (8010700 <time+0x30>)
 80106d4:	2200      	movs	r2, #0
 80106d6:	4669      	mov	r1, sp
 80106d8:	4604      	mov	r4, r0
 80106da:	6818      	ldr	r0, [r3, #0]
 80106dc:	f001 fa2c 	bl	8011b38 <_gettimeofday_r>
 80106e0:	2800      	cmp	r0, #0
 80106e2:	bfbe      	ittt	lt
 80106e4:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 80106e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80106ec:	e9cd 2300 	strdlt	r2, r3, [sp]
 80106f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106f4:	b10c      	cbz	r4, 80106fa <time+0x2a>
 80106f6:	e9c4 0100 	strd	r0, r1, [r4]
 80106fa:	b004      	add	sp, #16
 80106fc:	bd10      	pop	{r4, pc}
 80106fe:	bf00      	nop
 8010700:	20001384 	.word	0x20001384

08010704 <__assert_func>:
 8010704:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010706:	4614      	mov	r4, r2
 8010708:	461a      	mov	r2, r3
 801070a:	4b09      	ldr	r3, [pc, #36]	; (8010730 <__assert_func+0x2c>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	4605      	mov	r5, r0
 8010710:	68d8      	ldr	r0, [r3, #12]
 8010712:	b14c      	cbz	r4, 8010728 <__assert_func+0x24>
 8010714:	4b07      	ldr	r3, [pc, #28]	; (8010734 <__assert_func+0x30>)
 8010716:	9100      	str	r1, [sp, #0]
 8010718:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801071c:	4906      	ldr	r1, [pc, #24]	; (8010738 <__assert_func+0x34>)
 801071e:	462b      	mov	r3, r5
 8010720:	f000 fe88 	bl	8011434 <fiprintf>
 8010724:	f002 fac2 	bl	8012cac <abort>
 8010728:	4b04      	ldr	r3, [pc, #16]	; (801073c <__assert_func+0x38>)
 801072a:	461c      	mov	r4, r3
 801072c:	e7f3      	b.n	8010716 <__assert_func+0x12>
 801072e:	bf00      	nop
 8010730:	20001384 	.word	0x20001384
 8010734:	080141e8 	.word	0x080141e8
 8010738:	080141f5 	.word	0x080141f5
 801073c:	08014223 	.word	0x08014223

08010740 <quorem>:
 8010740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010744:	6903      	ldr	r3, [r0, #16]
 8010746:	690c      	ldr	r4, [r1, #16]
 8010748:	42a3      	cmp	r3, r4
 801074a:	4607      	mov	r7, r0
 801074c:	f2c0 8081 	blt.w	8010852 <quorem+0x112>
 8010750:	3c01      	subs	r4, #1
 8010752:	f101 0814 	add.w	r8, r1, #20
 8010756:	f100 0514 	add.w	r5, r0, #20
 801075a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801075e:	9301      	str	r3, [sp, #4]
 8010760:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010764:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010768:	3301      	adds	r3, #1
 801076a:	429a      	cmp	r2, r3
 801076c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010770:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010774:	fbb2 f6f3 	udiv	r6, r2, r3
 8010778:	d331      	bcc.n	80107de <quorem+0x9e>
 801077a:	f04f 0e00 	mov.w	lr, #0
 801077e:	4640      	mov	r0, r8
 8010780:	46ac      	mov	ip, r5
 8010782:	46f2      	mov	sl, lr
 8010784:	f850 2b04 	ldr.w	r2, [r0], #4
 8010788:	b293      	uxth	r3, r2
 801078a:	fb06 e303 	mla	r3, r6, r3, lr
 801078e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010792:	b29b      	uxth	r3, r3
 8010794:	ebaa 0303 	sub.w	r3, sl, r3
 8010798:	f8dc a000 	ldr.w	sl, [ip]
 801079c:	0c12      	lsrs	r2, r2, #16
 801079e:	fa13 f38a 	uxtah	r3, r3, sl
 80107a2:	fb06 e202 	mla	r2, r6, r2, lr
 80107a6:	9300      	str	r3, [sp, #0]
 80107a8:	9b00      	ldr	r3, [sp, #0]
 80107aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80107ae:	b292      	uxth	r2, r2
 80107b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80107b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80107b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80107bc:	4581      	cmp	r9, r0
 80107be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80107c2:	f84c 3b04 	str.w	r3, [ip], #4
 80107c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80107ca:	d2db      	bcs.n	8010784 <quorem+0x44>
 80107cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80107d0:	b92b      	cbnz	r3, 80107de <quorem+0x9e>
 80107d2:	9b01      	ldr	r3, [sp, #4]
 80107d4:	3b04      	subs	r3, #4
 80107d6:	429d      	cmp	r5, r3
 80107d8:	461a      	mov	r2, r3
 80107da:	d32e      	bcc.n	801083a <quorem+0xfa>
 80107dc:	613c      	str	r4, [r7, #16]
 80107de:	4638      	mov	r0, r7
 80107e0:	f001 fcb8 	bl	8012154 <__mcmp>
 80107e4:	2800      	cmp	r0, #0
 80107e6:	db24      	blt.n	8010832 <quorem+0xf2>
 80107e8:	3601      	adds	r6, #1
 80107ea:	4628      	mov	r0, r5
 80107ec:	f04f 0c00 	mov.w	ip, #0
 80107f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80107f4:	f8d0 e000 	ldr.w	lr, [r0]
 80107f8:	b293      	uxth	r3, r2
 80107fa:	ebac 0303 	sub.w	r3, ip, r3
 80107fe:	0c12      	lsrs	r2, r2, #16
 8010800:	fa13 f38e 	uxtah	r3, r3, lr
 8010804:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010808:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801080c:	b29b      	uxth	r3, r3
 801080e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010812:	45c1      	cmp	r9, r8
 8010814:	f840 3b04 	str.w	r3, [r0], #4
 8010818:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801081c:	d2e8      	bcs.n	80107f0 <quorem+0xb0>
 801081e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010822:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010826:	b922      	cbnz	r2, 8010832 <quorem+0xf2>
 8010828:	3b04      	subs	r3, #4
 801082a:	429d      	cmp	r5, r3
 801082c:	461a      	mov	r2, r3
 801082e:	d30a      	bcc.n	8010846 <quorem+0x106>
 8010830:	613c      	str	r4, [r7, #16]
 8010832:	4630      	mov	r0, r6
 8010834:	b003      	add	sp, #12
 8010836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801083a:	6812      	ldr	r2, [r2, #0]
 801083c:	3b04      	subs	r3, #4
 801083e:	2a00      	cmp	r2, #0
 8010840:	d1cc      	bne.n	80107dc <quorem+0x9c>
 8010842:	3c01      	subs	r4, #1
 8010844:	e7c7      	b.n	80107d6 <quorem+0x96>
 8010846:	6812      	ldr	r2, [r2, #0]
 8010848:	3b04      	subs	r3, #4
 801084a:	2a00      	cmp	r2, #0
 801084c:	d1f0      	bne.n	8010830 <quorem+0xf0>
 801084e:	3c01      	subs	r4, #1
 8010850:	e7eb      	b.n	801082a <quorem+0xea>
 8010852:	2000      	movs	r0, #0
 8010854:	e7ee      	b.n	8010834 <quorem+0xf4>
	...

08010858 <_dtoa_r>:
 8010858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801085c:	ed2d 8b04 	vpush	{d8-d9}
 8010860:	ec57 6b10 	vmov	r6, r7, d0
 8010864:	b093      	sub	sp, #76	; 0x4c
 8010866:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010868:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801086c:	9106      	str	r1, [sp, #24]
 801086e:	ee10 aa10 	vmov	sl, s0
 8010872:	4604      	mov	r4, r0
 8010874:	9209      	str	r2, [sp, #36]	; 0x24
 8010876:	930c      	str	r3, [sp, #48]	; 0x30
 8010878:	46bb      	mov	fp, r7
 801087a:	b975      	cbnz	r5, 801089a <_dtoa_r+0x42>
 801087c:	2010      	movs	r0, #16
 801087e:	f7fe f867 	bl	800e950 <malloc>
 8010882:	4602      	mov	r2, r0
 8010884:	6260      	str	r0, [r4, #36]	; 0x24
 8010886:	b920      	cbnz	r0, 8010892 <_dtoa_r+0x3a>
 8010888:	4ba7      	ldr	r3, [pc, #668]	; (8010b28 <_dtoa_r+0x2d0>)
 801088a:	21ea      	movs	r1, #234	; 0xea
 801088c:	48a7      	ldr	r0, [pc, #668]	; (8010b2c <_dtoa_r+0x2d4>)
 801088e:	f7ff ff39 	bl	8010704 <__assert_func>
 8010892:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010896:	6005      	str	r5, [r0, #0]
 8010898:	60c5      	str	r5, [r0, #12]
 801089a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801089c:	6819      	ldr	r1, [r3, #0]
 801089e:	b151      	cbz	r1, 80108b6 <_dtoa_r+0x5e>
 80108a0:	685a      	ldr	r2, [r3, #4]
 80108a2:	604a      	str	r2, [r1, #4]
 80108a4:	2301      	movs	r3, #1
 80108a6:	4093      	lsls	r3, r2
 80108a8:	608b      	str	r3, [r1, #8]
 80108aa:	4620      	mov	r0, r4
 80108ac:	f001 f9c6 	bl	8011c3c <_Bfree>
 80108b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108b2:	2200      	movs	r2, #0
 80108b4:	601a      	str	r2, [r3, #0]
 80108b6:	1e3b      	subs	r3, r7, #0
 80108b8:	bfaa      	itet	ge
 80108ba:	2300      	movge	r3, #0
 80108bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80108c0:	f8c8 3000 	strge.w	r3, [r8]
 80108c4:	4b9a      	ldr	r3, [pc, #616]	; (8010b30 <_dtoa_r+0x2d8>)
 80108c6:	bfbc      	itt	lt
 80108c8:	2201      	movlt	r2, #1
 80108ca:	f8c8 2000 	strlt.w	r2, [r8]
 80108ce:	ea33 030b 	bics.w	r3, r3, fp
 80108d2:	d11b      	bne.n	801090c <_dtoa_r+0xb4>
 80108d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80108d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80108da:	6013      	str	r3, [r2, #0]
 80108dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80108e0:	4333      	orrs	r3, r6
 80108e2:	f000 8592 	beq.w	801140a <_dtoa_r+0xbb2>
 80108e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80108e8:	b963      	cbnz	r3, 8010904 <_dtoa_r+0xac>
 80108ea:	4b92      	ldr	r3, [pc, #584]	; (8010b34 <_dtoa_r+0x2dc>)
 80108ec:	e022      	b.n	8010934 <_dtoa_r+0xdc>
 80108ee:	4b92      	ldr	r3, [pc, #584]	; (8010b38 <_dtoa_r+0x2e0>)
 80108f0:	9301      	str	r3, [sp, #4]
 80108f2:	3308      	adds	r3, #8
 80108f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80108f6:	6013      	str	r3, [r2, #0]
 80108f8:	9801      	ldr	r0, [sp, #4]
 80108fa:	b013      	add	sp, #76	; 0x4c
 80108fc:	ecbd 8b04 	vpop	{d8-d9}
 8010900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010904:	4b8b      	ldr	r3, [pc, #556]	; (8010b34 <_dtoa_r+0x2dc>)
 8010906:	9301      	str	r3, [sp, #4]
 8010908:	3303      	adds	r3, #3
 801090a:	e7f3      	b.n	80108f4 <_dtoa_r+0x9c>
 801090c:	2200      	movs	r2, #0
 801090e:	2300      	movs	r3, #0
 8010910:	4650      	mov	r0, sl
 8010912:	4659      	mov	r1, fp
 8010914:	f7f0 f900 	bl	8000b18 <__aeabi_dcmpeq>
 8010918:	ec4b ab19 	vmov	d9, sl, fp
 801091c:	4680      	mov	r8, r0
 801091e:	b158      	cbz	r0, 8010938 <_dtoa_r+0xe0>
 8010920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010922:	2301      	movs	r3, #1
 8010924:	6013      	str	r3, [r2, #0]
 8010926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010928:	2b00      	cmp	r3, #0
 801092a:	f000 856b 	beq.w	8011404 <_dtoa_r+0xbac>
 801092e:	4883      	ldr	r0, [pc, #524]	; (8010b3c <_dtoa_r+0x2e4>)
 8010930:	6018      	str	r0, [r3, #0]
 8010932:	1e43      	subs	r3, r0, #1
 8010934:	9301      	str	r3, [sp, #4]
 8010936:	e7df      	b.n	80108f8 <_dtoa_r+0xa0>
 8010938:	ec4b ab10 	vmov	d0, sl, fp
 801093c:	aa10      	add	r2, sp, #64	; 0x40
 801093e:	a911      	add	r1, sp, #68	; 0x44
 8010940:	4620      	mov	r0, r4
 8010942:	f001 fd29 	bl	8012398 <__d2b>
 8010946:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801094a:	ee08 0a10 	vmov	s16, r0
 801094e:	2d00      	cmp	r5, #0
 8010950:	f000 8084 	beq.w	8010a5c <_dtoa_r+0x204>
 8010954:	ee19 3a90 	vmov	r3, s19
 8010958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801095c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010960:	4656      	mov	r6, sl
 8010962:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010966:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801096a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801096e:	4b74      	ldr	r3, [pc, #464]	; (8010b40 <_dtoa_r+0x2e8>)
 8010970:	2200      	movs	r2, #0
 8010972:	4630      	mov	r0, r6
 8010974:	4639      	mov	r1, r7
 8010976:	f7ef fcaf 	bl	80002d8 <__aeabi_dsub>
 801097a:	a365      	add	r3, pc, #404	; (adr r3, 8010b10 <_dtoa_r+0x2b8>)
 801097c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010980:	f7ef fe62 	bl	8000648 <__aeabi_dmul>
 8010984:	a364      	add	r3, pc, #400	; (adr r3, 8010b18 <_dtoa_r+0x2c0>)
 8010986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801098a:	f7ef fca7 	bl	80002dc <__adddf3>
 801098e:	4606      	mov	r6, r0
 8010990:	4628      	mov	r0, r5
 8010992:	460f      	mov	r7, r1
 8010994:	f7ef fdee 	bl	8000574 <__aeabi_i2d>
 8010998:	a361      	add	r3, pc, #388	; (adr r3, 8010b20 <_dtoa_r+0x2c8>)
 801099a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801099e:	f7ef fe53 	bl	8000648 <__aeabi_dmul>
 80109a2:	4602      	mov	r2, r0
 80109a4:	460b      	mov	r3, r1
 80109a6:	4630      	mov	r0, r6
 80109a8:	4639      	mov	r1, r7
 80109aa:	f7ef fc97 	bl	80002dc <__adddf3>
 80109ae:	4606      	mov	r6, r0
 80109b0:	460f      	mov	r7, r1
 80109b2:	f7f0 f8f9 	bl	8000ba8 <__aeabi_d2iz>
 80109b6:	2200      	movs	r2, #0
 80109b8:	9000      	str	r0, [sp, #0]
 80109ba:	2300      	movs	r3, #0
 80109bc:	4630      	mov	r0, r6
 80109be:	4639      	mov	r1, r7
 80109c0:	f7f0 f8b4 	bl	8000b2c <__aeabi_dcmplt>
 80109c4:	b150      	cbz	r0, 80109dc <_dtoa_r+0x184>
 80109c6:	9800      	ldr	r0, [sp, #0]
 80109c8:	f7ef fdd4 	bl	8000574 <__aeabi_i2d>
 80109cc:	4632      	mov	r2, r6
 80109ce:	463b      	mov	r3, r7
 80109d0:	f7f0 f8a2 	bl	8000b18 <__aeabi_dcmpeq>
 80109d4:	b910      	cbnz	r0, 80109dc <_dtoa_r+0x184>
 80109d6:	9b00      	ldr	r3, [sp, #0]
 80109d8:	3b01      	subs	r3, #1
 80109da:	9300      	str	r3, [sp, #0]
 80109dc:	9b00      	ldr	r3, [sp, #0]
 80109de:	2b16      	cmp	r3, #22
 80109e0:	d85a      	bhi.n	8010a98 <_dtoa_r+0x240>
 80109e2:	9a00      	ldr	r2, [sp, #0]
 80109e4:	4b57      	ldr	r3, [pc, #348]	; (8010b44 <_dtoa_r+0x2ec>)
 80109e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80109ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ee:	ec51 0b19 	vmov	r0, r1, d9
 80109f2:	f7f0 f89b 	bl	8000b2c <__aeabi_dcmplt>
 80109f6:	2800      	cmp	r0, #0
 80109f8:	d050      	beq.n	8010a9c <_dtoa_r+0x244>
 80109fa:	9b00      	ldr	r3, [sp, #0]
 80109fc:	3b01      	subs	r3, #1
 80109fe:	9300      	str	r3, [sp, #0]
 8010a00:	2300      	movs	r3, #0
 8010a02:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010a06:	1b5d      	subs	r5, r3, r5
 8010a08:	1e6b      	subs	r3, r5, #1
 8010a0a:	9305      	str	r3, [sp, #20]
 8010a0c:	bf45      	ittet	mi
 8010a0e:	f1c5 0301 	rsbmi	r3, r5, #1
 8010a12:	9304      	strmi	r3, [sp, #16]
 8010a14:	2300      	movpl	r3, #0
 8010a16:	2300      	movmi	r3, #0
 8010a18:	bf4c      	ite	mi
 8010a1a:	9305      	strmi	r3, [sp, #20]
 8010a1c:	9304      	strpl	r3, [sp, #16]
 8010a1e:	9b00      	ldr	r3, [sp, #0]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	db3d      	blt.n	8010aa0 <_dtoa_r+0x248>
 8010a24:	9b05      	ldr	r3, [sp, #20]
 8010a26:	9a00      	ldr	r2, [sp, #0]
 8010a28:	920a      	str	r2, [sp, #40]	; 0x28
 8010a2a:	4413      	add	r3, r2
 8010a2c:	9305      	str	r3, [sp, #20]
 8010a2e:	2300      	movs	r3, #0
 8010a30:	9307      	str	r3, [sp, #28]
 8010a32:	9b06      	ldr	r3, [sp, #24]
 8010a34:	2b09      	cmp	r3, #9
 8010a36:	f200 8089 	bhi.w	8010b4c <_dtoa_r+0x2f4>
 8010a3a:	2b05      	cmp	r3, #5
 8010a3c:	bfc4      	itt	gt
 8010a3e:	3b04      	subgt	r3, #4
 8010a40:	9306      	strgt	r3, [sp, #24]
 8010a42:	9b06      	ldr	r3, [sp, #24]
 8010a44:	f1a3 0302 	sub.w	r3, r3, #2
 8010a48:	bfcc      	ite	gt
 8010a4a:	2500      	movgt	r5, #0
 8010a4c:	2501      	movle	r5, #1
 8010a4e:	2b03      	cmp	r3, #3
 8010a50:	f200 8087 	bhi.w	8010b62 <_dtoa_r+0x30a>
 8010a54:	e8df f003 	tbb	[pc, r3]
 8010a58:	59383a2d 	.word	0x59383a2d
 8010a5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010a60:	441d      	add	r5, r3
 8010a62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010a66:	2b20      	cmp	r3, #32
 8010a68:	bfc1      	itttt	gt
 8010a6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010a6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010a72:	fa0b f303 	lslgt.w	r3, fp, r3
 8010a76:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010a7a:	bfda      	itte	le
 8010a7c:	f1c3 0320 	rsble	r3, r3, #32
 8010a80:	fa06 f003 	lslle.w	r0, r6, r3
 8010a84:	4318      	orrgt	r0, r3
 8010a86:	f7ef fd65 	bl	8000554 <__aeabi_ui2d>
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	4606      	mov	r6, r0
 8010a8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010a92:	3d01      	subs	r5, #1
 8010a94:	930e      	str	r3, [sp, #56]	; 0x38
 8010a96:	e76a      	b.n	801096e <_dtoa_r+0x116>
 8010a98:	2301      	movs	r3, #1
 8010a9a:	e7b2      	b.n	8010a02 <_dtoa_r+0x1aa>
 8010a9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8010a9e:	e7b1      	b.n	8010a04 <_dtoa_r+0x1ac>
 8010aa0:	9b04      	ldr	r3, [sp, #16]
 8010aa2:	9a00      	ldr	r2, [sp, #0]
 8010aa4:	1a9b      	subs	r3, r3, r2
 8010aa6:	9304      	str	r3, [sp, #16]
 8010aa8:	4253      	negs	r3, r2
 8010aaa:	9307      	str	r3, [sp, #28]
 8010aac:	2300      	movs	r3, #0
 8010aae:	930a      	str	r3, [sp, #40]	; 0x28
 8010ab0:	e7bf      	b.n	8010a32 <_dtoa_r+0x1da>
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	9308      	str	r3, [sp, #32]
 8010ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	dc55      	bgt.n	8010b68 <_dtoa_r+0x310>
 8010abc:	2301      	movs	r3, #1
 8010abe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010ac2:	461a      	mov	r2, r3
 8010ac4:	9209      	str	r2, [sp, #36]	; 0x24
 8010ac6:	e00c      	b.n	8010ae2 <_dtoa_r+0x28a>
 8010ac8:	2301      	movs	r3, #1
 8010aca:	e7f3      	b.n	8010ab4 <_dtoa_r+0x25c>
 8010acc:	2300      	movs	r3, #0
 8010ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ad0:	9308      	str	r3, [sp, #32]
 8010ad2:	9b00      	ldr	r3, [sp, #0]
 8010ad4:	4413      	add	r3, r2
 8010ad6:	9302      	str	r3, [sp, #8]
 8010ad8:	3301      	adds	r3, #1
 8010ada:	2b01      	cmp	r3, #1
 8010adc:	9303      	str	r3, [sp, #12]
 8010ade:	bfb8      	it	lt
 8010ae0:	2301      	movlt	r3, #1
 8010ae2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	6042      	str	r2, [r0, #4]
 8010ae8:	2204      	movs	r2, #4
 8010aea:	f102 0614 	add.w	r6, r2, #20
 8010aee:	429e      	cmp	r6, r3
 8010af0:	6841      	ldr	r1, [r0, #4]
 8010af2:	d93d      	bls.n	8010b70 <_dtoa_r+0x318>
 8010af4:	4620      	mov	r0, r4
 8010af6:	f001 f861 	bl	8011bbc <_Balloc>
 8010afa:	9001      	str	r0, [sp, #4]
 8010afc:	2800      	cmp	r0, #0
 8010afe:	d13b      	bne.n	8010b78 <_dtoa_r+0x320>
 8010b00:	4b11      	ldr	r3, [pc, #68]	; (8010b48 <_dtoa_r+0x2f0>)
 8010b02:	4602      	mov	r2, r0
 8010b04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010b08:	e6c0      	b.n	801088c <_dtoa_r+0x34>
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	e7df      	b.n	8010ace <_dtoa_r+0x276>
 8010b0e:	bf00      	nop
 8010b10:	636f4361 	.word	0x636f4361
 8010b14:	3fd287a7 	.word	0x3fd287a7
 8010b18:	8b60c8b3 	.word	0x8b60c8b3
 8010b1c:	3fc68a28 	.word	0x3fc68a28
 8010b20:	509f79fb 	.word	0x509f79fb
 8010b24:	3fd34413 	.word	0x3fd34413
 8010b28:	08014125 	.word	0x08014125
 8010b2c:	08014332 	.word	0x08014332
 8010b30:	7ff00000 	.word	0x7ff00000
 8010b34:	0801432e 	.word	0x0801432e
 8010b38:	08014325 	.word	0x08014325
 8010b3c:	080140fd 	.word	0x080140fd
 8010b40:	3ff80000 	.word	0x3ff80000
 8010b44:	080144a0 	.word	0x080144a0
 8010b48:	0801438d 	.word	0x0801438d
 8010b4c:	2501      	movs	r5, #1
 8010b4e:	2300      	movs	r3, #0
 8010b50:	9306      	str	r3, [sp, #24]
 8010b52:	9508      	str	r5, [sp, #32]
 8010b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	2312      	movs	r3, #18
 8010b60:	e7b0      	b.n	8010ac4 <_dtoa_r+0x26c>
 8010b62:	2301      	movs	r3, #1
 8010b64:	9308      	str	r3, [sp, #32]
 8010b66:	e7f5      	b.n	8010b54 <_dtoa_r+0x2fc>
 8010b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010b6e:	e7b8      	b.n	8010ae2 <_dtoa_r+0x28a>
 8010b70:	3101      	adds	r1, #1
 8010b72:	6041      	str	r1, [r0, #4]
 8010b74:	0052      	lsls	r2, r2, #1
 8010b76:	e7b8      	b.n	8010aea <_dtoa_r+0x292>
 8010b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b7a:	9a01      	ldr	r2, [sp, #4]
 8010b7c:	601a      	str	r2, [r3, #0]
 8010b7e:	9b03      	ldr	r3, [sp, #12]
 8010b80:	2b0e      	cmp	r3, #14
 8010b82:	f200 809d 	bhi.w	8010cc0 <_dtoa_r+0x468>
 8010b86:	2d00      	cmp	r5, #0
 8010b88:	f000 809a 	beq.w	8010cc0 <_dtoa_r+0x468>
 8010b8c:	9b00      	ldr	r3, [sp, #0]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	dd32      	ble.n	8010bf8 <_dtoa_r+0x3a0>
 8010b92:	4ab7      	ldr	r2, [pc, #732]	; (8010e70 <_dtoa_r+0x618>)
 8010b94:	f003 030f 	and.w	r3, r3, #15
 8010b98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010b9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010ba0:	9b00      	ldr	r3, [sp, #0]
 8010ba2:	05d8      	lsls	r0, r3, #23
 8010ba4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010ba8:	d516      	bpl.n	8010bd8 <_dtoa_r+0x380>
 8010baa:	4bb2      	ldr	r3, [pc, #712]	; (8010e74 <_dtoa_r+0x61c>)
 8010bac:	ec51 0b19 	vmov	r0, r1, d9
 8010bb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010bb4:	f7ef fe72 	bl	800089c <__aeabi_ddiv>
 8010bb8:	f007 070f 	and.w	r7, r7, #15
 8010bbc:	4682      	mov	sl, r0
 8010bbe:	468b      	mov	fp, r1
 8010bc0:	2503      	movs	r5, #3
 8010bc2:	4eac      	ldr	r6, [pc, #688]	; (8010e74 <_dtoa_r+0x61c>)
 8010bc4:	b957      	cbnz	r7, 8010bdc <_dtoa_r+0x384>
 8010bc6:	4642      	mov	r2, r8
 8010bc8:	464b      	mov	r3, r9
 8010bca:	4650      	mov	r0, sl
 8010bcc:	4659      	mov	r1, fp
 8010bce:	f7ef fe65 	bl	800089c <__aeabi_ddiv>
 8010bd2:	4682      	mov	sl, r0
 8010bd4:	468b      	mov	fp, r1
 8010bd6:	e028      	b.n	8010c2a <_dtoa_r+0x3d2>
 8010bd8:	2502      	movs	r5, #2
 8010bda:	e7f2      	b.n	8010bc2 <_dtoa_r+0x36a>
 8010bdc:	07f9      	lsls	r1, r7, #31
 8010bde:	d508      	bpl.n	8010bf2 <_dtoa_r+0x39a>
 8010be0:	4640      	mov	r0, r8
 8010be2:	4649      	mov	r1, r9
 8010be4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010be8:	f7ef fd2e 	bl	8000648 <__aeabi_dmul>
 8010bec:	3501      	adds	r5, #1
 8010bee:	4680      	mov	r8, r0
 8010bf0:	4689      	mov	r9, r1
 8010bf2:	107f      	asrs	r7, r7, #1
 8010bf4:	3608      	adds	r6, #8
 8010bf6:	e7e5      	b.n	8010bc4 <_dtoa_r+0x36c>
 8010bf8:	f000 809b 	beq.w	8010d32 <_dtoa_r+0x4da>
 8010bfc:	9b00      	ldr	r3, [sp, #0]
 8010bfe:	4f9d      	ldr	r7, [pc, #628]	; (8010e74 <_dtoa_r+0x61c>)
 8010c00:	425e      	negs	r6, r3
 8010c02:	4b9b      	ldr	r3, [pc, #620]	; (8010e70 <_dtoa_r+0x618>)
 8010c04:	f006 020f 	and.w	r2, r6, #15
 8010c08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c10:	ec51 0b19 	vmov	r0, r1, d9
 8010c14:	f7ef fd18 	bl	8000648 <__aeabi_dmul>
 8010c18:	1136      	asrs	r6, r6, #4
 8010c1a:	4682      	mov	sl, r0
 8010c1c:	468b      	mov	fp, r1
 8010c1e:	2300      	movs	r3, #0
 8010c20:	2502      	movs	r5, #2
 8010c22:	2e00      	cmp	r6, #0
 8010c24:	d17a      	bne.n	8010d1c <_dtoa_r+0x4c4>
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d1d3      	bne.n	8010bd2 <_dtoa_r+0x37a>
 8010c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	f000 8082 	beq.w	8010d36 <_dtoa_r+0x4de>
 8010c32:	4b91      	ldr	r3, [pc, #580]	; (8010e78 <_dtoa_r+0x620>)
 8010c34:	2200      	movs	r2, #0
 8010c36:	4650      	mov	r0, sl
 8010c38:	4659      	mov	r1, fp
 8010c3a:	f7ef ff77 	bl	8000b2c <__aeabi_dcmplt>
 8010c3e:	2800      	cmp	r0, #0
 8010c40:	d079      	beq.n	8010d36 <_dtoa_r+0x4de>
 8010c42:	9b03      	ldr	r3, [sp, #12]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d076      	beq.n	8010d36 <_dtoa_r+0x4de>
 8010c48:	9b02      	ldr	r3, [sp, #8]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	dd36      	ble.n	8010cbc <_dtoa_r+0x464>
 8010c4e:	9b00      	ldr	r3, [sp, #0]
 8010c50:	4650      	mov	r0, sl
 8010c52:	4659      	mov	r1, fp
 8010c54:	1e5f      	subs	r7, r3, #1
 8010c56:	2200      	movs	r2, #0
 8010c58:	4b88      	ldr	r3, [pc, #544]	; (8010e7c <_dtoa_r+0x624>)
 8010c5a:	f7ef fcf5 	bl	8000648 <__aeabi_dmul>
 8010c5e:	9e02      	ldr	r6, [sp, #8]
 8010c60:	4682      	mov	sl, r0
 8010c62:	468b      	mov	fp, r1
 8010c64:	3501      	adds	r5, #1
 8010c66:	4628      	mov	r0, r5
 8010c68:	f7ef fc84 	bl	8000574 <__aeabi_i2d>
 8010c6c:	4652      	mov	r2, sl
 8010c6e:	465b      	mov	r3, fp
 8010c70:	f7ef fcea 	bl	8000648 <__aeabi_dmul>
 8010c74:	4b82      	ldr	r3, [pc, #520]	; (8010e80 <_dtoa_r+0x628>)
 8010c76:	2200      	movs	r2, #0
 8010c78:	f7ef fb30 	bl	80002dc <__adddf3>
 8010c7c:	46d0      	mov	r8, sl
 8010c7e:	46d9      	mov	r9, fp
 8010c80:	4682      	mov	sl, r0
 8010c82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010c86:	2e00      	cmp	r6, #0
 8010c88:	d158      	bne.n	8010d3c <_dtoa_r+0x4e4>
 8010c8a:	4b7e      	ldr	r3, [pc, #504]	; (8010e84 <_dtoa_r+0x62c>)
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	4640      	mov	r0, r8
 8010c90:	4649      	mov	r1, r9
 8010c92:	f7ef fb21 	bl	80002d8 <__aeabi_dsub>
 8010c96:	4652      	mov	r2, sl
 8010c98:	465b      	mov	r3, fp
 8010c9a:	4680      	mov	r8, r0
 8010c9c:	4689      	mov	r9, r1
 8010c9e:	f7ef ff63 	bl	8000b68 <__aeabi_dcmpgt>
 8010ca2:	2800      	cmp	r0, #0
 8010ca4:	f040 8295 	bne.w	80111d2 <_dtoa_r+0x97a>
 8010ca8:	4652      	mov	r2, sl
 8010caa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010cae:	4640      	mov	r0, r8
 8010cb0:	4649      	mov	r1, r9
 8010cb2:	f7ef ff3b 	bl	8000b2c <__aeabi_dcmplt>
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	f040 8289 	bne.w	80111ce <_dtoa_r+0x976>
 8010cbc:	ec5b ab19 	vmov	sl, fp, d9
 8010cc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	f2c0 8148 	blt.w	8010f58 <_dtoa_r+0x700>
 8010cc8:	9a00      	ldr	r2, [sp, #0]
 8010cca:	2a0e      	cmp	r2, #14
 8010ccc:	f300 8144 	bgt.w	8010f58 <_dtoa_r+0x700>
 8010cd0:	4b67      	ldr	r3, [pc, #412]	; (8010e70 <_dtoa_r+0x618>)
 8010cd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010cd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	f280 80d5 	bge.w	8010e8c <_dtoa_r+0x634>
 8010ce2:	9b03      	ldr	r3, [sp, #12]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	f300 80d1 	bgt.w	8010e8c <_dtoa_r+0x634>
 8010cea:	f040 826f 	bne.w	80111cc <_dtoa_r+0x974>
 8010cee:	4b65      	ldr	r3, [pc, #404]	; (8010e84 <_dtoa_r+0x62c>)
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	4640      	mov	r0, r8
 8010cf4:	4649      	mov	r1, r9
 8010cf6:	f7ef fca7 	bl	8000648 <__aeabi_dmul>
 8010cfa:	4652      	mov	r2, sl
 8010cfc:	465b      	mov	r3, fp
 8010cfe:	f7ef ff29 	bl	8000b54 <__aeabi_dcmpge>
 8010d02:	9e03      	ldr	r6, [sp, #12]
 8010d04:	4637      	mov	r7, r6
 8010d06:	2800      	cmp	r0, #0
 8010d08:	f040 8245 	bne.w	8011196 <_dtoa_r+0x93e>
 8010d0c:	9d01      	ldr	r5, [sp, #4]
 8010d0e:	2331      	movs	r3, #49	; 0x31
 8010d10:	f805 3b01 	strb.w	r3, [r5], #1
 8010d14:	9b00      	ldr	r3, [sp, #0]
 8010d16:	3301      	adds	r3, #1
 8010d18:	9300      	str	r3, [sp, #0]
 8010d1a:	e240      	b.n	801119e <_dtoa_r+0x946>
 8010d1c:	07f2      	lsls	r2, r6, #31
 8010d1e:	d505      	bpl.n	8010d2c <_dtoa_r+0x4d4>
 8010d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d24:	f7ef fc90 	bl	8000648 <__aeabi_dmul>
 8010d28:	3501      	adds	r5, #1
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	1076      	asrs	r6, r6, #1
 8010d2e:	3708      	adds	r7, #8
 8010d30:	e777      	b.n	8010c22 <_dtoa_r+0x3ca>
 8010d32:	2502      	movs	r5, #2
 8010d34:	e779      	b.n	8010c2a <_dtoa_r+0x3d2>
 8010d36:	9f00      	ldr	r7, [sp, #0]
 8010d38:	9e03      	ldr	r6, [sp, #12]
 8010d3a:	e794      	b.n	8010c66 <_dtoa_r+0x40e>
 8010d3c:	9901      	ldr	r1, [sp, #4]
 8010d3e:	4b4c      	ldr	r3, [pc, #304]	; (8010e70 <_dtoa_r+0x618>)
 8010d40:	4431      	add	r1, r6
 8010d42:	910d      	str	r1, [sp, #52]	; 0x34
 8010d44:	9908      	ldr	r1, [sp, #32]
 8010d46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010d4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010d4e:	2900      	cmp	r1, #0
 8010d50:	d043      	beq.n	8010dda <_dtoa_r+0x582>
 8010d52:	494d      	ldr	r1, [pc, #308]	; (8010e88 <_dtoa_r+0x630>)
 8010d54:	2000      	movs	r0, #0
 8010d56:	f7ef fda1 	bl	800089c <__aeabi_ddiv>
 8010d5a:	4652      	mov	r2, sl
 8010d5c:	465b      	mov	r3, fp
 8010d5e:	f7ef fabb 	bl	80002d8 <__aeabi_dsub>
 8010d62:	9d01      	ldr	r5, [sp, #4]
 8010d64:	4682      	mov	sl, r0
 8010d66:	468b      	mov	fp, r1
 8010d68:	4649      	mov	r1, r9
 8010d6a:	4640      	mov	r0, r8
 8010d6c:	f7ef ff1c 	bl	8000ba8 <__aeabi_d2iz>
 8010d70:	4606      	mov	r6, r0
 8010d72:	f7ef fbff 	bl	8000574 <__aeabi_i2d>
 8010d76:	4602      	mov	r2, r0
 8010d78:	460b      	mov	r3, r1
 8010d7a:	4640      	mov	r0, r8
 8010d7c:	4649      	mov	r1, r9
 8010d7e:	f7ef faab 	bl	80002d8 <__aeabi_dsub>
 8010d82:	3630      	adds	r6, #48	; 0x30
 8010d84:	f805 6b01 	strb.w	r6, [r5], #1
 8010d88:	4652      	mov	r2, sl
 8010d8a:	465b      	mov	r3, fp
 8010d8c:	4680      	mov	r8, r0
 8010d8e:	4689      	mov	r9, r1
 8010d90:	f7ef fecc 	bl	8000b2c <__aeabi_dcmplt>
 8010d94:	2800      	cmp	r0, #0
 8010d96:	d163      	bne.n	8010e60 <_dtoa_r+0x608>
 8010d98:	4642      	mov	r2, r8
 8010d9a:	464b      	mov	r3, r9
 8010d9c:	4936      	ldr	r1, [pc, #216]	; (8010e78 <_dtoa_r+0x620>)
 8010d9e:	2000      	movs	r0, #0
 8010da0:	f7ef fa9a 	bl	80002d8 <__aeabi_dsub>
 8010da4:	4652      	mov	r2, sl
 8010da6:	465b      	mov	r3, fp
 8010da8:	f7ef fec0 	bl	8000b2c <__aeabi_dcmplt>
 8010dac:	2800      	cmp	r0, #0
 8010dae:	f040 80b5 	bne.w	8010f1c <_dtoa_r+0x6c4>
 8010db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010db4:	429d      	cmp	r5, r3
 8010db6:	d081      	beq.n	8010cbc <_dtoa_r+0x464>
 8010db8:	4b30      	ldr	r3, [pc, #192]	; (8010e7c <_dtoa_r+0x624>)
 8010dba:	2200      	movs	r2, #0
 8010dbc:	4650      	mov	r0, sl
 8010dbe:	4659      	mov	r1, fp
 8010dc0:	f7ef fc42 	bl	8000648 <__aeabi_dmul>
 8010dc4:	4b2d      	ldr	r3, [pc, #180]	; (8010e7c <_dtoa_r+0x624>)
 8010dc6:	4682      	mov	sl, r0
 8010dc8:	468b      	mov	fp, r1
 8010dca:	4640      	mov	r0, r8
 8010dcc:	4649      	mov	r1, r9
 8010dce:	2200      	movs	r2, #0
 8010dd0:	f7ef fc3a 	bl	8000648 <__aeabi_dmul>
 8010dd4:	4680      	mov	r8, r0
 8010dd6:	4689      	mov	r9, r1
 8010dd8:	e7c6      	b.n	8010d68 <_dtoa_r+0x510>
 8010dda:	4650      	mov	r0, sl
 8010ddc:	4659      	mov	r1, fp
 8010dde:	f7ef fc33 	bl	8000648 <__aeabi_dmul>
 8010de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010de4:	9d01      	ldr	r5, [sp, #4]
 8010de6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010de8:	4682      	mov	sl, r0
 8010dea:	468b      	mov	fp, r1
 8010dec:	4649      	mov	r1, r9
 8010dee:	4640      	mov	r0, r8
 8010df0:	f7ef feda 	bl	8000ba8 <__aeabi_d2iz>
 8010df4:	4606      	mov	r6, r0
 8010df6:	f7ef fbbd 	bl	8000574 <__aeabi_i2d>
 8010dfa:	3630      	adds	r6, #48	; 0x30
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	460b      	mov	r3, r1
 8010e00:	4640      	mov	r0, r8
 8010e02:	4649      	mov	r1, r9
 8010e04:	f7ef fa68 	bl	80002d8 <__aeabi_dsub>
 8010e08:	f805 6b01 	strb.w	r6, [r5], #1
 8010e0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e0e:	429d      	cmp	r5, r3
 8010e10:	4680      	mov	r8, r0
 8010e12:	4689      	mov	r9, r1
 8010e14:	f04f 0200 	mov.w	r2, #0
 8010e18:	d124      	bne.n	8010e64 <_dtoa_r+0x60c>
 8010e1a:	4b1b      	ldr	r3, [pc, #108]	; (8010e88 <_dtoa_r+0x630>)
 8010e1c:	4650      	mov	r0, sl
 8010e1e:	4659      	mov	r1, fp
 8010e20:	f7ef fa5c 	bl	80002dc <__adddf3>
 8010e24:	4602      	mov	r2, r0
 8010e26:	460b      	mov	r3, r1
 8010e28:	4640      	mov	r0, r8
 8010e2a:	4649      	mov	r1, r9
 8010e2c:	f7ef fe9c 	bl	8000b68 <__aeabi_dcmpgt>
 8010e30:	2800      	cmp	r0, #0
 8010e32:	d173      	bne.n	8010f1c <_dtoa_r+0x6c4>
 8010e34:	4652      	mov	r2, sl
 8010e36:	465b      	mov	r3, fp
 8010e38:	4913      	ldr	r1, [pc, #76]	; (8010e88 <_dtoa_r+0x630>)
 8010e3a:	2000      	movs	r0, #0
 8010e3c:	f7ef fa4c 	bl	80002d8 <__aeabi_dsub>
 8010e40:	4602      	mov	r2, r0
 8010e42:	460b      	mov	r3, r1
 8010e44:	4640      	mov	r0, r8
 8010e46:	4649      	mov	r1, r9
 8010e48:	f7ef fe70 	bl	8000b2c <__aeabi_dcmplt>
 8010e4c:	2800      	cmp	r0, #0
 8010e4e:	f43f af35 	beq.w	8010cbc <_dtoa_r+0x464>
 8010e52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010e54:	1e6b      	subs	r3, r5, #1
 8010e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8010e58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010e5c:	2b30      	cmp	r3, #48	; 0x30
 8010e5e:	d0f8      	beq.n	8010e52 <_dtoa_r+0x5fa>
 8010e60:	9700      	str	r7, [sp, #0]
 8010e62:	e049      	b.n	8010ef8 <_dtoa_r+0x6a0>
 8010e64:	4b05      	ldr	r3, [pc, #20]	; (8010e7c <_dtoa_r+0x624>)
 8010e66:	f7ef fbef 	bl	8000648 <__aeabi_dmul>
 8010e6a:	4680      	mov	r8, r0
 8010e6c:	4689      	mov	r9, r1
 8010e6e:	e7bd      	b.n	8010dec <_dtoa_r+0x594>
 8010e70:	080144a0 	.word	0x080144a0
 8010e74:	08014478 	.word	0x08014478
 8010e78:	3ff00000 	.word	0x3ff00000
 8010e7c:	40240000 	.word	0x40240000
 8010e80:	401c0000 	.word	0x401c0000
 8010e84:	40140000 	.word	0x40140000
 8010e88:	3fe00000 	.word	0x3fe00000
 8010e8c:	9d01      	ldr	r5, [sp, #4]
 8010e8e:	4656      	mov	r6, sl
 8010e90:	465f      	mov	r7, fp
 8010e92:	4642      	mov	r2, r8
 8010e94:	464b      	mov	r3, r9
 8010e96:	4630      	mov	r0, r6
 8010e98:	4639      	mov	r1, r7
 8010e9a:	f7ef fcff 	bl	800089c <__aeabi_ddiv>
 8010e9e:	f7ef fe83 	bl	8000ba8 <__aeabi_d2iz>
 8010ea2:	4682      	mov	sl, r0
 8010ea4:	f7ef fb66 	bl	8000574 <__aeabi_i2d>
 8010ea8:	4642      	mov	r2, r8
 8010eaa:	464b      	mov	r3, r9
 8010eac:	f7ef fbcc 	bl	8000648 <__aeabi_dmul>
 8010eb0:	4602      	mov	r2, r0
 8010eb2:	460b      	mov	r3, r1
 8010eb4:	4630      	mov	r0, r6
 8010eb6:	4639      	mov	r1, r7
 8010eb8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010ebc:	f7ef fa0c 	bl	80002d8 <__aeabi_dsub>
 8010ec0:	f805 6b01 	strb.w	r6, [r5], #1
 8010ec4:	9e01      	ldr	r6, [sp, #4]
 8010ec6:	9f03      	ldr	r7, [sp, #12]
 8010ec8:	1bae      	subs	r6, r5, r6
 8010eca:	42b7      	cmp	r7, r6
 8010ecc:	4602      	mov	r2, r0
 8010ece:	460b      	mov	r3, r1
 8010ed0:	d135      	bne.n	8010f3e <_dtoa_r+0x6e6>
 8010ed2:	f7ef fa03 	bl	80002dc <__adddf3>
 8010ed6:	4642      	mov	r2, r8
 8010ed8:	464b      	mov	r3, r9
 8010eda:	4606      	mov	r6, r0
 8010edc:	460f      	mov	r7, r1
 8010ede:	f7ef fe43 	bl	8000b68 <__aeabi_dcmpgt>
 8010ee2:	b9d0      	cbnz	r0, 8010f1a <_dtoa_r+0x6c2>
 8010ee4:	4642      	mov	r2, r8
 8010ee6:	464b      	mov	r3, r9
 8010ee8:	4630      	mov	r0, r6
 8010eea:	4639      	mov	r1, r7
 8010eec:	f7ef fe14 	bl	8000b18 <__aeabi_dcmpeq>
 8010ef0:	b110      	cbz	r0, 8010ef8 <_dtoa_r+0x6a0>
 8010ef2:	f01a 0f01 	tst.w	sl, #1
 8010ef6:	d110      	bne.n	8010f1a <_dtoa_r+0x6c2>
 8010ef8:	4620      	mov	r0, r4
 8010efa:	ee18 1a10 	vmov	r1, s16
 8010efe:	f000 fe9d 	bl	8011c3c <_Bfree>
 8010f02:	2300      	movs	r3, #0
 8010f04:	9800      	ldr	r0, [sp, #0]
 8010f06:	702b      	strb	r3, [r5, #0]
 8010f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f0a:	3001      	adds	r0, #1
 8010f0c:	6018      	str	r0, [r3, #0]
 8010f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	f43f acf1 	beq.w	80108f8 <_dtoa_r+0xa0>
 8010f16:	601d      	str	r5, [r3, #0]
 8010f18:	e4ee      	b.n	80108f8 <_dtoa_r+0xa0>
 8010f1a:	9f00      	ldr	r7, [sp, #0]
 8010f1c:	462b      	mov	r3, r5
 8010f1e:	461d      	mov	r5, r3
 8010f20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f24:	2a39      	cmp	r2, #57	; 0x39
 8010f26:	d106      	bne.n	8010f36 <_dtoa_r+0x6de>
 8010f28:	9a01      	ldr	r2, [sp, #4]
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d1f7      	bne.n	8010f1e <_dtoa_r+0x6c6>
 8010f2e:	9901      	ldr	r1, [sp, #4]
 8010f30:	2230      	movs	r2, #48	; 0x30
 8010f32:	3701      	adds	r7, #1
 8010f34:	700a      	strb	r2, [r1, #0]
 8010f36:	781a      	ldrb	r2, [r3, #0]
 8010f38:	3201      	adds	r2, #1
 8010f3a:	701a      	strb	r2, [r3, #0]
 8010f3c:	e790      	b.n	8010e60 <_dtoa_r+0x608>
 8010f3e:	4ba6      	ldr	r3, [pc, #664]	; (80111d8 <_dtoa_r+0x980>)
 8010f40:	2200      	movs	r2, #0
 8010f42:	f7ef fb81 	bl	8000648 <__aeabi_dmul>
 8010f46:	2200      	movs	r2, #0
 8010f48:	2300      	movs	r3, #0
 8010f4a:	4606      	mov	r6, r0
 8010f4c:	460f      	mov	r7, r1
 8010f4e:	f7ef fde3 	bl	8000b18 <__aeabi_dcmpeq>
 8010f52:	2800      	cmp	r0, #0
 8010f54:	d09d      	beq.n	8010e92 <_dtoa_r+0x63a>
 8010f56:	e7cf      	b.n	8010ef8 <_dtoa_r+0x6a0>
 8010f58:	9a08      	ldr	r2, [sp, #32]
 8010f5a:	2a00      	cmp	r2, #0
 8010f5c:	f000 80d7 	beq.w	801110e <_dtoa_r+0x8b6>
 8010f60:	9a06      	ldr	r2, [sp, #24]
 8010f62:	2a01      	cmp	r2, #1
 8010f64:	f300 80ba 	bgt.w	80110dc <_dtoa_r+0x884>
 8010f68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010f6a:	2a00      	cmp	r2, #0
 8010f6c:	f000 80b2 	beq.w	80110d4 <_dtoa_r+0x87c>
 8010f70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010f74:	9e07      	ldr	r6, [sp, #28]
 8010f76:	9d04      	ldr	r5, [sp, #16]
 8010f78:	9a04      	ldr	r2, [sp, #16]
 8010f7a:	441a      	add	r2, r3
 8010f7c:	9204      	str	r2, [sp, #16]
 8010f7e:	9a05      	ldr	r2, [sp, #20]
 8010f80:	2101      	movs	r1, #1
 8010f82:	441a      	add	r2, r3
 8010f84:	4620      	mov	r0, r4
 8010f86:	9205      	str	r2, [sp, #20]
 8010f88:	f000 ff5a 	bl	8011e40 <__i2b>
 8010f8c:	4607      	mov	r7, r0
 8010f8e:	2d00      	cmp	r5, #0
 8010f90:	dd0c      	ble.n	8010fac <_dtoa_r+0x754>
 8010f92:	9b05      	ldr	r3, [sp, #20]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	dd09      	ble.n	8010fac <_dtoa_r+0x754>
 8010f98:	42ab      	cmp	r3, r5
 8010f9a:	9a04      	ldr	r2, [sp, #16]
 8010f9c:	bfa8      	it	ge
 8010f9e:	462b      	movge	r3, r5
 8010fa0:	1ad2      	subs	r2, r2, r3
 8010fa2:	9204      	str	r2, [sp, #16]
 8010fa4:	9a05      	ldr	r2, [sp, #20]
 8010fa6:	1aed      	subs	r5, r5, r3
 8010fa8:	1ad3      	subs	r3, r2, r3
 8010faa:	9305      	str	r3, [sp, #20]
 8010fac:	9b07      	ldr	r3, [sp, #28]
 8010fae:	b31b      	cbz	r3, 8010ff8 <_dtoa_r+0x7a0>
 8010fb0:	9b08      	ldr	r3, [sp, #32]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	f000 80af 	beq.w	8011116 <_dtoa_r+0x8be>
 8010fb8:	2e00      	cmp	r6, #0
 8010fba:	dd13      	ble.n	8010fe4 <_dtoa_r+0x78c>
 8010fbc:	4639      	mov	r1, r7
 8010fbe:	4632      	mov	r2, r6
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	f000 fffd 	bl	8011fc0 <__pow5mult>
 8010fc6:	ee18 2a10 	vmov	r2, s16
 8010fca:	4601      	mov	r1, r0
 8010fcc:	4607      	mov	r7, r0
 8010fce:	4620      	mov	r0, r4
 8010fd0:	f000 ff4c 	bl	8011e6c <__multiply>
 8010fd4:	ee18 1a10 	vmov	r1, s16
 8010fd8:	4680      	mov	r8, r0
 8010fda:	4620      	mov	r0, r4
 8010fdc:	f000 fe2e 	bl	8011c3c <_Bfree>
 8010fe0:	ee08 8a10 	vmov	s16, r8
 8010fe4:	9b07      	ldr	r3, [sp, #28]
 8010fe6:	1b9a      	subs	r2, r3, r6
 8010fe8:	d006      	beq.n	8010ff8 <_dtoa_r+0x7a0>
 8010fea:	ee18 1a10 	vmov	r1, s16
 8010fee:	4620      	mov	r0, r4
 8010ff0:	f000 ffe6 	bl	8011fc0 <__pow5mult>
 8010ff4:	ee08 0a10 	vmov	s16, r0
 8010ff8:	2101      	movs	r1, #1
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	f000 ff20 	bl	8011e40 <__i2b>
 8011000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011002:	2b00      	cmp	r3, #0
 8011004:	4606      	mov	r6, r0
 8011006:	f340 8088 	ble.w	801111a <_dtoa_r+0x8c2>
 801100a:	461a      	mov	r2, r3
 801100c:	4601      	mov	r1, r0
 801100e:	4620      	mov	r0, r4
 8011010:	f000 ffd6 	bl	8011fc0 <__pow5mult>
 8011014:	9b06      	ldr	r3, [sp, #24]
 8011016:	2b01      	cmp	r3, #1
 8011018:	4606      	mov	r6, r0
 801101a:	f340 8081 	ble.w	8011120 <_dtoa_r+0x8c8>
 801101e:	f04f 0800 	mov.w	r8, #0
 8011022:	6933      	ldr	r3, [r6, #16]
 8011024:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011028:	6918      	ldr	r0, [r3, #16]
 801102a:	f000 feb9 	bl	8011da0 <__hi0bits>
 801102e:	f1c0 0020 	rsb	r0, r0, #32
 8011032:	9b05      	ldr	r3, [sp, #20]
 8011034:	4418      	add	r0, r3
 8011036:	f010 001f 	ands.w	r0, r0, #31
 801103a:	f000 8092 	beq.w	8011162 <_dtoa_r+0x90a>
 801103e:	f1c0 0320 	rsb	r3, r0, #32
 8011042:	2b04      	cmp	r3, #4
 8011044:	f340 808a 	ble.w	801115c <_dtoa_r+0x904>
 8011048:	f1c0 001c 	rsb	r0, r0, #28
 801104c:	9b04      	ldr	r3, [sp, #16]
 801104e:	4403      	add	r3, r0
 8011050:	9304      	str	r3, [sp, #16]
 8011052:	9b05      	ldr	r3, [sp, #20]
 8011054:	4403      	add	r3, r0
 8011056:	4405      	add	r5, r0
 8011058:	9305      	str	r3, [sp, #20]
 801105a:	9b04      	ldr	r3, [sp, #16]
 801105c:	2b00      	cmp	r3, #0
 801105e:	dd07      	ble.n	8011070 <_dtoa_r+0x818>
 8011060:	ee18 1a10 	vmov	r1, s16
 8011064:	461a      	mov	r2, r3
 8011066:	4620      	mov	r0, r4
 8011068:	f001 f804 	bl	8012074 <__lshift>
 801106c:	ee08 0a10 	vmov	s16, r0
 8011070:	9b05      	ldr	r3, [sp, #20]
 8011072:	2b00      	cmp	r3, #0
 8011074:	dd05      	ble.n	8011082 <_dtoa_r+0x82a>
 8011076:	4631      	mov	r1, r6
 8011078:	461a      	mov	r2, r3
 801107a:	4620      	mov	r0, r4
 801107c:	f000 fffa 	bl	8012074 <__lshift>
 8011080:	4606      	mov	r6, r0
 8011082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011084:	2b00      	cmp	r3, #0
 8011086:	d06e      	beq.n	8011166 <_dtoa_r+0x90e>
 8011088:	ee18 0a10 	vmov	r0, s16
 801108c:	4631      	mov	r1, r6
 801108e:	f001 f861 	bl	8012154 <__mcmp>
 8011092:	2800      	cmp	r0, #0
 8011094:	da67      	bge.n	8011166 <_dtoa_r+0x90e>
 8011096:	9b00      	ldr	r3, [sp, #0]
 8011098:	3b01      	subs	r3, #1
 801109a:	ee18 1a10 	vmov	r1, s16
 801109e:	9300      	str	r3, [sp, #0]
 80110a0:	220a      	movs	r2, #10
 80110a2:	2300      	movs	r3, #0
 80110a4:	4620      	mov	r0, r4
 80110a6:	f000 fdeb 	bl	8011c80 <__multadd>
 80110aa:	9b08      	ldr	r3, [sp, #32]
 80110ac:	ee08 0a10 	vmov	s16, r0
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	f000 81b1 	beq.w	8011418 <_dtoa_r+0xbc0>
 80110b6:	2300      	movs	r3, #0
 80110b8:	4639      	mov	r1, r7
 80110ba:	220a      	movs	r2, #10
 80110bc:	4620      	mov	r0, r4
 80110be:	f000 fddf 	bl	8011c80 <__multadd>
 80110c2:	9b02      	ldr	r3, [sp, #8]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	4607      	mov	r7, r0
 80110c8:	f300 808e 	bgt.w	80111e8 <_dtoa_r+0x990>
 80110cc:	9b06      	ldr	r3, [sp, #24]
 80110ce:	2b02      	cmp	r3, #2
 80110d0:	dc51      	bgt.n	8011176 <_dtoa_r+0x91e>
 80110d2:	e089      	b.n	80111e8 <_dtoa_r+0x990>
 80110d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80110d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80110da:	e74b      	b.n	8010f74 <_dtoa_r+0x71c>
 80110dc:	9b03      	ldr	r3, [sp, #12]
 80110de:	1e5e      	subs	r6, r3, #1
 80110e0:	9b07      	ldr	r3, [sp, #28]
 80110e2:	42b3      	cmp	r3, r6
 80110e4:	bfbf      	itttt	lt
 80110e6:	9b07      	ldrlt	r3, [sp, #28]
 80110e8:	9607      	strlt	r6, [sp, #28]
 80110ea:	1af2      	sublt	r2, r6, r3
 80110ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80110ee:	bfb6      	itet	lt
 80110f0:	189b      	addlt	r3, r3, r2
 80110f2:	1b9e      	subge	r6, r3, r6
 80110f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80110f6:	9b03      	ldr	r3, [sp, #12]
 80110f8:	bfb8      	it	lt
 80110fa:	2600      	movlt	r6, #0
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	bfb7      	itett	lt
 8011100:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011104:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011108:	1a9d      	sublt	r5, r3, r2
 801110a:	2300      	movlt	r3, #0
 801110c:	e734      	b.n	8010f78 <_dtoa_r+0x720>
 801110e:	9e07      	ldr	r6, [sp, #28]
 8011110:	9d04      	ldr	r5, [sp, #16]
 8011112:	9f08      	ldr	r7, [sp, #32]
 8011114:	e73b      	b.n	8010f8e <_dtoa_r+0x736>
 8011116:	9a07      	ldr	r2, [sp, #28]
 8011118:	e767      	b.n	8010fea <_dtoa_r+0x792>
 801111a:	9b06      	ldr	r3, [sp, #24]
 801111c:	2b01      	cmp	r3, #1
 801111e:	dc18      	bgt.n	8011152 <_dtoa_r+0x8fa>
 8011120:	f1ba 0f00 	cmp.w	sl, #0
 8011124:	d115      	bne.n	8011152 <_dtoa_r+0x8fa>
 8011126:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801112a:	b993      	cbnz	r3, 8011152 <_dtoa_r+0x8fa>
 801112c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011130:	0d1b      	lsrs	r3, r3, #20
 8011132:	051b      	lsls	r3, r3, #20
 8011134:	b183      	cbz	r3, 8011158 <_dtoa_r+0x900>
 8011136:	9b04      	ldr	r3, [sp, #16]
 8011138:	3301      	adds	r3, #1
 801113a:	9304      	str	r3, [sp, #16]
 801113c:	9b05      	ldr	r3, [sp, #20]
 801113e:	3301      	adds	r3, #1
 8011140:	9305      	str	r3, [sp, #20]
 8011142:	f04f 0801 	mov.w	r8, #1
 8011146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011148:	2b00      	cmp	r3, #0
 801114a:	f47f af6a 	bne.w	8011022 <_dtoa_r+0x7ca>
 801114e:	2001      	movs	r0, #1
 8011150:	e76f      	b.n	8011032 <_dtoa_r+0x7da>
 8011152:	f04f 0800 	mov.w	r8, #0
 8011156:	e7f6      	b.n	8011146 <_dtoa_r+0x8ee>
 8011158:	4698      	mov	r8, r3
 801115a:	e7f4      	b.n	8011146 <_dtoa_r+0x8ee>
 801115c:	f43f af7d 	beq.w	801105a <_dtoa_r+0x802>
 8011160:	4618      	mov	r0, r3
 8011162:	301c      	adds	r0, #28
 8011164:	e772      	b.n	801104c <_dtoa_r+0x7f4>
 8011166:	9b03      	ldr	r3, [sp, #12]
 8011168:	2b00      	cmp	r3, #0
 801116a:	dc37      	bgt.n	80111dc <_dtoa_r+0x984>
 801116c:	9b06      	ldr	r3, [sp, #24]
 801116e:	2b02      	cmp	r3, #2
 8011170:	dd34      	ble.n	80111dc <_dtoa_r+0x984>
 8011172:	9b03      	ldr	r3, [sp, #12]
 8011174:	9302      	str	r3, [sp, #8]
 8011176:	9b02      	ldr	r3, [sp, #8]
 8011178:	b96b      	cbnz	r3, 8011196 <_dtoa_r+0x93e>
 801117a:	4631      	mov	r1, r6
 801117c:	2205      	movs	r2, #5
 801117e:	4620      	mov	r0, r4
 8011180:	f000 fd7e 	bl	8011c80 <__multadd>
 8011184:	4601      	mov	r1, r0
 8011186:	4606      	mov	r6, r0
 8011188:	ee18 0a10 	vmov	r0, s16
 801118c:	f000 ffe2 	bl	8012154 <__mcmp>
 8011190:	2800      	cmp	r0, #0
 8011192:	f73f adbb 	bgt.w	8010d0c <_dtoa_r+0x4b4>
 8011196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011198:	9d01      	ldr	r5, [sp, #4]
 801119a:	43db      	mvns	r3, r3
 801119c:	9300      	str	r3, [sp, #0]
 801119e:	f04f 0800 	mov.w	r8, #0
 80111a2:	4631      	mov	r1, r6
 80111a4:	4620      	mov	r0, r4
 80111a6:	f000 fd49 	bl	8011c3c <_Bfree>
 80111aa:	2f00      	cmp	r7, #0
 80111ac:	f43f aea4 	beq.w	8010ef8 <_dtoa_r+0x6a0>
 80111b0:	f1b8 0f00 	cmp.w	r8, #0
 80111b4:	d005      	beq.n	80111c2 <_dtoa_r+0x96a>
 80111b6:	45b8      	cmp	r8, r7
 80111b8:	d003      	beq.n	80111c2 <_dtoa_r+0x96a>
 80111ba:	4641      	mov	r1, r8
 80111bc:	4620      	mov	r0, r4
 80111be:	f000 fd3d 	bl	8011c3c <_Bfree>
 80111c2:	4639      	mov	r1, r7
 80111c4:	4620      	mov	r0, r4
 80111c6:	f000 fd39 	bl	8011c3c <_Bfree>
 80111ca:	e695      	b.n	8010ef8 <_dtoa_r+0x6a0>
 80111cc:	2600      	movs	r6, #0
 80111ce:	4637      	mov	r7, r6
 80111d0:	e7e1      	b.n	8011196 <_dtoa_r+0x93e>
 80111d2:	9700      	str	r7, [sp, #0]
 80111d4:	4637      	mov	r7, r6
 80111d6:	e599      	b.n	8010d0c <_dtoa_r+0x4b4>
 80111d8:	40240000 	.word	0x40240000
 80111dc:	9b08      	ldr	r3, [sp, #32]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	f000 80ca 	beq.w	8011378 <_dtoa_r+0xb20>
 80111e4:	9b03      	ldr	r3, [sp, #12]
 80111e6:	9302      	str	r3, [sp, #8]
 80111e8:	2d00      	cmp	r5, #0
 80111ea:	dd05      	ble.n	80111f8 <_dtoa_r+0x9a0>
 80111ec:	4639      	mov	r1, r7
 80111ee:	462a      	mov	r2, r5
 80111f0:	4620      	mov	r0, r4
 80111f2:	f000 ff3f 	bl	8012074 <__lshift>
 80111f6:	4607      	mov	r7, r0
 80111f8:	f1b8 0f00 	cmp.w	r8, #0
 80111fc:	d05b      	beq.n	80112b6 <_dtoa_r+0xa5e>
 80111fe:	6879      	ldr	r1, [r7, #4]
 8011200:	4620      	mov	r0, r4
 8011202:	f000 fcdb 	bl	8011bbc <_Balloc>
 8011206:	4605      	mov	r5, r0
 8011208:	b928      	cbnz	r0, 8011216 <_dtoa_r+0x9be>
 801120a:	4b87      	ldr	r3, [pc, #540]	; (8011428 <_dtoa_r+0xbd0>)
 801120c:	4602      	mov	r2, r0
 801120e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011212:	f7ff bb3b 	b.w	801088c <_dtoa_r+0x34>
 8011216:	693a      	ldr	r2, [r7, #16]
 8011218:	3202      	adds	r2, #2
 801121a:	0092      	lsls	r2, r2, #2
 801121c:	f107 010c 	add.w	r1, r7, #12
 8011220:	300c      	adds	r0, #12
 8011222:	f000 fcb1 	bl	8011b88 <memcpy>
 8011226:	2201      	movs	r2, #1
 8011228:	4629      	mov	r1, r5
 801122a:	4620      	mov	r0, r4
 801122c:	f000 ff22 	bl	8012074 <__lshift>
 8011230:	9b01      	ldr	r3, [sp, #4]
 8011232:	f103 0901 	add.w	r9, r3, #1
 8011236:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801123a:	4413      	add	r3, r2
 801123c:	9305      	str	r3, [sp, #20]
 801123e:	f00a 0301 	and.w	r3, sl, #1
 8011242:	46b8      	mov	r8, r7
 8011244:	9304      	str	r3, [sp, #16]
 8011246:	4607      	mov	r7, r0
 8011248:	4631      	mov	r1, r6
 801124a:	ee18 0a10 	vmov	r0, s16
 801124e:	f7ff fa77 	bl	8010740 <quorem>
 8011252:	4641      	mov	r1, r8
 8011254:	9002      	str	r0, [sp, #8]
 8011256:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801125a:	ee18 0a10 	vmov	r0, s16
 801125e:	f000 ff79 	bl	8012154 <__mcmp>
 8011262:	463a      	mov	r2, r7
 8011264:	9003      	str	r0, [sp, #12]
 8011266:	4631      	mov	r1, r6
 8011268:	4620      	mov	r0, r4
 801126a:	f000 ff8f 	bl	801218c <__mdiff>
 801126e:	68c2      	ldr	r2, [r0, #12]
 8011270:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8011274:	4605      	mov	r5, r0
 8011276:	bb02      	cbnz	r2, 80112ba <_dtoa_r+0xa62>
 8011278:	4601      	mov	r1, r0
 801127a:	ee18 0a10 	vmov	r0, s16
 801127e:	f000 ff69 	bl	8012154 <__mcmp>
 8011282:	4602      	mov	r2, r0
 8011284:	4629      	mov	r1, r5
 8011286:	4620      	mov	r0, r4
 8011288:	9207      	str	r2, [sp, #28]
 801128a:	f000 fcd7 	bl	8011c3c <_Bfree>
 801128e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011292:	ea43 0102 	orr.w	r1, r3, r2
 8011296:	9b04      	ldr	r3, [sp, #16]
 8011298:	430b      	orrs	r3, r1
 801129a:	464d      	mov	r5, r9
 801129c:	d10f      	bne.n	80112be <_dtoa_r+0xa66>
 801129e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80112a2:	d02a      	beq.n	80112fa <_dtoa_r+0xaa2>
 80112a4:	9b03      	ldr	r3, [sp, #12]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	dd02      	ble.n	80112b0 <_dtoa_r+0xa58>
 80112aa:	9b02      	ldr	r3, [sp, #8]
 80112ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80112b0:	f88b a000 	strb.w	sl, [fp]
 80112b4:	e775      	b.n	80111a2 <_dtoa_r+0x94a>
 80112b6:	4638      	mov	r0, r7
 80112b8:	e7ba      	b.n	8011230 <_dtoa_r+0x9d8>
 80112ba:	2201      	movs	r2, #1
 80112bc:	e7e2      	b.n	8011284 <_dtoa_r+0xa2c>
 80112be:	9b03      	ldr	r3, [sp, #12]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	db04      	blt.n	80112ce <_dtoa_r+0xa76>
 80112c4:	9906      	ldr	r1, [sp, #24]
 80112c6:	430b      	orrs	r3, r1
 80112c8:	9904      	ldr	r1, [sp, #16]
 80112ca:	430b      	orrs	r3, r1
 80112cc:	d122      	bne.n	8011314 <_dtoa_r+0xabc>
 80112ce:	2a00      	cmp	r2, #0
 80112d0:	ddee      	ble.n	80112b0 <_dtoa_r+0xa58>
 80112d2:	ee18 1a10 	vmov	r1, s16
 80112d6:	2201      	movs	r2, #1
 80112d8:	4620      	mov	r0, r4
 80112da:	f000 fecb 	bl	8012074 <__lshift>
 80112de:	4631      	mov	r1, r6
 80112e0:	ee08 0a10 	vmov	s16, r0
 80112e4:	f000 ff36 	bl	8012154 <__mcmp>
 80112e8:	2800      	cmp	r0, #0
 80112ea:	dc03      	bgt.n	80112f4 <_dtoa_r+0xa9c>
 80112ec:	d1e0      	bne.n	80112b0 <_dtoa_r+0xa58>
 80112ee:	f01a 0f01 	tst.w	sl, #1
 80112f2:	d0dd      	beq.n	80112b0 <_dtoa_r+0xa58>
 80112f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80112f8:	d1d7      	bne.n	80112aa <_dtoa_r+0xa52>
 80112fa:	2339      	movs	r3, #57	; 0x39
 80112fc:	f88b 3000 	strb.w	r3, [fp]
 8011300:	462b      	mov	r3, r5
 8011302:	461d      	mov	r5, r3
 8011304:	3b01      	subs	r3, #1
 8011306:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801130a:	2a39      	cmp	r2, #57	; 0x39
 801130c:	d071      	beq.n	80113f2 <_dtoa_r+0xb9a>
 801130e:	3201      	adds	r2, #1
 8011310:	701a      	strb	r2, [r3, #0]
 8011312:	e746      	b.n	80111a2 <_dtoa_r+0x94a>
 8011314:	2a00      	cmp	r2, #0
 8011316:	dd07      	ble.n	8011328 <_dtoa_r+0xad0>
 8011318:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801131c:	d0ed      	beq.n	80112fa <_dtoa_r+0xaa2>
 801131e:	f10a 0301 	add.w	r3, sl, #1
 8011322:	f88b 3000 	strb.w	r3, [fp]
 8011326:	e73c      	b.n	80111a2 <_dtoa_r+0x94a>
 8011328:	9b05      	ldr	r3, [sp, #20]
 801132a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801132e:	4599      	cmp	r9, r3
 8011330:	d047      	beq.n	80113c2 <_dtoa_r+0xb6a>
 8011332:	ee18 1a10 	vmov	r1, s16
 8011336:	2300      	movs	r3, #0
 8011338:	220a      	movs	r2, #10
 801133a:	4620      	mov	r0, r4
 801133c:	f000 fca0 	bl	8011c80 <__multadd>
 8011340:	45b8      	cmp	r8, r7
 8011342:	ee08 0a10 	vmov	s16, r0
 8011346:	f04f 0300 	mov.w	r3, #0
 801134a:	f04f 020a 	mov.w	r2, #10
 801134e:	4641      	mov	r1, r8
 8011350:	4620      	mov	r0, r4
 8011352:	d106      	bne.n	8011362 <_dtoa_r+0xb0a>
 8011354:	f000 fc94 	bl	8011c80 <__multadd>
 8011358:	4680      	mov	r8, r0
 801135a:	4607      	mov	r7, r0
 801135c:	f109 0901 	add.w	r9, r9, #1
 8011360:	e772      	b.n	8011248 <_dtoa_r+0x9f0>
 8011362:	f000 fc8d 	bl	8011c80 <__multadd>
 8011366:	4639      	mov	r1, r7
 8011368:	4680      	mov	r8, r0
 801136a:	2300      	movs	r3, #0
 801136c:	220a      	movs	r2, #10
 801136e:	4620      	mov	r0, r4
 8011370:	f000 fc86 	bl	8011c80 <__multadd>
 8011374:	4607      	mov	r7, r0
 8011376:	e7f1      	b.n	801135c <_dtoa_r+0xb04>
 8011378:	9b03      	ldr	r3, [sp, #12]
 801137a:	9302      	str	r3, [sp, #8]
 801137c:	9d01      	ldr	r5, [sp, #4]
 801137e:	ee18 0a10 	vmov	r0, s16
 8011382:	4631      	mov	r1, r6
 8011384:	f7ff f9dc 	bl	8010740 <quorem>
 8011388:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801138c:	9b01      	ldr	r3, [sp, #4]
 801138e:	f805 ab01 	strb.w	sl, [r5], #1
 8011392:	1aea      	subs	r2, r5, r3
 8011394:	9b02      	ldr	r3, [sp, #8]
 8011396:	4293      	cmp	r3, r2
 8011398:	dd09      	ble.n	80113ae <_dtoa_r+0xb56>
 801139a:	ee18 1a10 	vmov	r1, s16
 801139e:	2300      	movs	r3, #0
 80113a0:	220a      	movs	r2, #10
 80113a2:	4620      	mov	r0, r4
 80113a4:	f000 fc6c 	bl	8011c80 <__multadd>
 80113a8:	ee08 0a10 	vmov	s16, r0
 80113ac:	e7e7      	b.n	801137e <_dtoa_r+0xb26>
 80113ae:	9b02      	ldr	r3, [sp, #8]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	bfc8      	it	gt
 80113b4:	461d      	movgt	r5, r3
 80113b6:	9b01      	ldr	r3, [sp, #4]
 80113b8:	bfd8      	it	le
 80113ba:	2501      	movle	r5, #1
 80113bc:	441d      	add	r5, r3
 80113be:	f04f 0800 	mov.w	r8, #0
 80113c2:	ee18 1a10 	vmov	r1, s16
 80113c6:	2201      	movs	r2, #1
 80113c8:	4620      	mov	r0, r4
 80113ca:	f000 fe53 	bl	8012074 <__lshift>
 80113ce:	4631      	mov	r1, r6
 80113d0:	ee08 0a10 	vmov	s16, r0
 80113d4:	f000 febe 	bl	8012154 <__mcmp>
 80113d8:	2800      	cmp	r0, #0
 80113da:	dc91      	bgt.n	8011300 <_dtoa_r+0xaa8>
 80113dc:	d102      	bne.n	80113e4 <_dtoa_r+0xb8c>
 80113de:	f01a 0f01 	tst.w	sl, #1
 80113e2:	d18d      	bne.n	8011300 <_dtoa_r+0xaa8>
 80113e4:	462b      	mov	r3, r5
 80113e6:	461d      	mov	r5, r3
 80113e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80113ec:	2a30      	cmp	r2, #48	; 0x30
 80113ee:	d0fa      	beq.n	80113e6 <_dtoa_r+0xb8e>
 80113f0:	e6d7      	b.n	80111a2 <_dtoa_r+0x94a>
 80113f2:	9a01      	ldr	r2, [sp, #4]
 80113f4:	429a      	cmp	r2, r3
 80113f6:	d184      	bne.n	8011302 <_dtoa_r+0xaaa>
 80113f8:	9b00      	ldr	r3, [sp, #0]
 80113fa:	3301      	adds	r3, #1
 80113fc:	9300      	str	r3, [sp, #0]
 80113fe:	2331      	movs	r3, #49	; 0x31
 8011400:	7013      	strb	r3, [r2, #0]
 8011402:	e6ce      	b.n	80111a2 <_dtoa_r+0x94a>
 8011404:	4b09      	ldr	r3, [pc, #36]	; (801142c <_dtoa_r+0xbd4>)
 8011406:	f7ff ba95 	b.w	8010934 <_dtoa_r+0xdc>
 801140a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801140c:	2b00      	cmp	r3, #0
 801140e:	f47f aa6e 	bne.w	80108ee <_dtoa_r+0x96>
 8011412:	4b07      	ldr	r3, [pc, #28]	; (8011430 <_dtoa_r+0xbd8>)
 8011414:	f7ff ba8e 	b.w	8010934 <_dtoa_r+0xdc>
 8011418:	9b02      	ldr	r3, [sp, #8]
 801141a:	2b00      	cmp	r3, #0
 801141c:	dcae      	bgt.n	801137c <_dtoa_r+0xb24>
 801141e:	9b06      	ldr	r3, [sp, #24]
 8011420:	2b02      	cmp	r3, #2
 8011422:	f73f aea8 	bgt.w	8011176 <_dtoa_r+0x91e>
 8011426:	e7a9      	b.n	801137c <_dtoa_r+0xb24>
 8011428:	0801438d 	.word	0x0801438d
 801142c:	080140fc 	.word	0x080140fc
 8011430:	08014325 	.word	0x08014325

08011434 <fiprintf>:
 8011434:	b40e      	push	{r1, r2, r3}
 8011436:	b503      	push	{r0, r1, lr}
 8011438:	4601      	mov	r1, r0
 801143a:	ab03      	add	r3, sp, #12
 801143c:	4805      	ldr	r0, [pc, #20]	; (8011454 <fiprintf+0x20>)
 801143e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011442:	6800      	ldr	r0, [r0, #0]
 8011444:	9301      	str	r3, [sp, #4]
 8011446:	f001 fa15 	bl	8012874 <_vfiprintf_r>
 801144a:	b002      	add	sp, #8
 801144c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011450:	b003      	add	sp, #12
 8011452:	4770      	bx	lr
 8011454:	20001384 	.word	0x20001384

08011458 <rshift>:
 8011458:	6903      	ldr	r3, [r0, #16]
 801145a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801145e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011462:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011466:	f100 0414 	add.w	r4, r0, #20
 801146a:	dd45      	ble.n	80114f8 <rshift+0xa0>
 801146c:	f011 011f 	ands.w	r1, r1, #31
 8011470:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011474:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011478:	d10c      	bne.n	8011494 <rshift+0x3c>
 801147a:	f100 0710 	add.w	r7, r0, #16
 801147e:	4629      	mov	r1, r5
 8011480:	42b1      	cmp	r1, r6
 8011482:	d334      	bcc.n	80114ee <rshift+0x96>
 8011484:	1a9b      	subs	r3, r3, r2
 8011486:	009b      	lsls	r3, r3, #2
 8011488:	1eea      	subs	r2, r5, #3
 801148a:	4296      	cmp	r6, r2
 801148c:	bf38      	it	cc
 801148e:	2300      	movcc	r3, #0
 8011490:	4423      	add	r3, r4
 8011492:	e015      	b.n	80114c0 <rshift+0x68>
 8011494:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011498:	f1c1 0820 	rsb	r8, r1, #32
 801149c:	40cf      	lsrs	r7, r1
 801149e:	f105 0e04 	add.w	lr, r5, #4
 80114a2:	46a1      	mov	r9, r4
 80114a4:	4576      	cmp	r6, lr
 80114a6:	46f4      	mov	ip, lr
 80114a8:	d815      	bhi.n	80114d6 <rshift+0x7e>
 80114aa:	1a9a      	subs	r2, r3, r2
 80114ac:	0092      	lsls	r2, r2, #2
 80114ae:	3a04      	subs	r2, #4
 80114b0:	3501      	adds	r5, #1
 80114b2:	42ae      	cmp	r6, r5
 80114b4:	bf38      	it	cc
 80114b6:	2200      	movcc	r2, #0
 80114b8:	18a3      	adds	r3, r4, r2
 80114ba:	50a7      	str	r7, [r4, r2]
 80114bc:	b107      	cbz	r7, 80114c0 <rshift+0x68>
 80114be:	3304      	adds	r3, #4
 80114c0:	1b1a      	subs	r2, r3, r4
 80114c2:	42a3      	cmp	r3, r4
 80114c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80114c8:	bf08      	it	eq
 80114ca:	2300      	moveq	r3, #0
 80114cc:	6102      	str	r2, [r0, #16]
 80114ce:	bf08      	it	eq
 80114d0:	6143      	streq	r3, [r0, #20]
 80114d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114d6:	f8dc c000 	ldr.w	ip, [ip]
 80114da:	fa0c fc08 	lsl.w	ip, ip, r8
 80114de:	ea4c 0707 	orr.w	r7, ip, r7
 80114e2:	f849 7b04 	str.w	r7, [r9], #4
 80114e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80114ea:	40cf      	lsrs	r7, r1
 80114ec:	e7da      	b.n	80114a4 <rshift+0x4c>
 80114ee:	f851 cb04 	ldr.w	ip, [r1], #4
 80114f2:	f847 cf04 	str.w	ip, [r7, #4]!
 80114f6:	e7c3      	b.n	8011480 <rshift+0x28>
 80114f8:	4623      	mov	r3, r4
 80114fa:	e7e1      	b.n	80114c0 <rshift+0x68>

080114fc <__hexdig_fun>:
 80114fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011500:	2b09      	cmp	r3, #9
 8011502:	d802      	bhi.n	801150a <__hexdig_fun+0xe>
 8011504:	3820      	subs	r0, #32
 8011506:	b2c0      	uxtb	r0, r0
 8011508:	4770      	bx	lr
 801150a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801150e:	2b05      	cmp	r3, #5
 8011510:	d801      	bhi.n	8011516 <__hexdig_fun+0x1a>
 8011512:	3847      	subs	r0, #71	; 0x47
 8011514:	e7f7      	b.n	8011506 <__hexdig_fun+0xa>
 8011516:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801151a:	2b05      	cmp	r3, #5
 801151c:	d801      	bhi.n	8011522 <__hexdig_fun+0x26>
 801151e:	3827      	subs	r0, #39	; 0x27
 8011520:	e7f1      	b.n	8011506 <__hexdig_fun+0xa>
 8011522:	2000      	movs	r0, #0
 8011524:	4770      	bx	lr
	...

08011528 <__gethex>:
 8011528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801152c:	ed2d 8b02 	vpush	{d8}
 8011530:	b089      	sub	sp, #36	; 0x24
 8011532:	ee08 0a10 	vmov	s16, r0
 8011536:	9304      	str	r3, [sp, #16]
 8011538:	4bb4      	ldr	r3, [pc, #720]	; (801180c <__gethex+0x2e4>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	9301      	str	r3, [sp, #4]
 801153e:	4618      	mov	r0, r3
 8011540:	468b      	mov	fp, r1
 8011542:	4690      	mov	r8, r2
 8011544:	f7ee fe6c 	bl	8000220 <strlen>
 8011548:	9b01      	ldr	r3, [sp, #4]
 801154a:	f8db 2000 	ldr.w	r2, [fp]
 801154e:	4403      	add	r3, r0
 8011550:	4682      	mov	sl, r0
 8011552:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011556:	9305      	str	r3, [sp, #20]
 8011558:	1c93      	adds	r3, r2, #2
 801155a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801155e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011562:	32fe      	adds	r2, #254	; 0xfe
 8011564:	18d1      	adds	r1, r2, r3
 8011566:	461f      	mov	r7, r3
 8011568:	f813 0b01 	ldrb.w	r0, [r3], #1
 801156c:	9100      	str	r1, [sp, #0]
 801156e:	2830      	cmp	r0, #48	; 0x30
 8011570:	d0f8      	beq.n	8011564 <__gethex+0x3c>
 8011572:	f7ff ffc3 	bl	80114fc <__hexdig_fun>
 8011576:	4604      	mov	r4, r0
 8011578:	2800      	cmp	r0, #0
 801157a:	d13a      	bne.n	80115f2 <__gethex+0xca>
 801157c:	9901      	ldr	r1, [sp, #4]
 801157e:	4652      	mov	r2, sl
 8011580:	4638      	mov	r0, r7
 8011582:	f001 fab1 	bl	8012ae8 <strncmp>
 8011586:	4605      	mov	r5, r0
 8011588:	2800      	cmp	r0, #0
 801158a:	d168      	bne.n	801165e <__gethex+0x136>
 801158c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011590:	eb07 060a 	add.w	r6, r7, sl
 8011594:	f7ff ffb2 	bl	80114fc <__hexdig_fun>
 8011598:	2800      	cmp	r0, #0
 801159a:	d062      	beq.n	8011662 <__gethex+0x13a>
 801159c:	4633      	mov	r3, r6
 801159e:	7818      	ldrb	r0, [r3, #0]
 80115a0:	2830      	cmp	r0, #48	; 0x30
 80115a2:	461f      	mov	r7, r3
 80115a4:	f103 0301 	add.w	r3, r3, #1
 80115a8:	d0f9      	beq.n	801159e <__gethex+0x76>
 80115aa:	f7ff ffa7 	bl	80114fc <__hexdig_fun>
 80115ae:	2301      	movs	r3, #1
 80115b0:	fab0 f480 	clz	r4, r0
 80115b4:	0964      	lsrs	r4, r4, #5
 80115b6:	4635      	mov	r5, r6
 80115b8:	9300      	str	r3, [sp, #0]
 80115ba:	463a      	mov	r2, r7
 80115bc:	4616      	mov	r6, r2
 80115be:	3201      	adds	r2, #1
 80115c0:	7830      	ldrb	r0, [r6, #0]
 80115c2:	f7ff ff9b 	bl	80114fc <__hexdig_fun>
 80115c6:	2800      	cmp	r0, #0
 80115c8:	d1f8      	bne.n	80115bc <__gethex+0x94>
 80115ca:	9901      	ldr	r1, [sp, #4]
 80115cc:	4652      	mov	r2, sl
 80115ce:	4630      	mov	r0, r6
 80115d0:	f001 fa8a 	bl	8012ae8 <strncmp>
 80115d4:	b980      	cbnz	r0, 80115f8 <__gethex+0xd0>
 80115d6:	b94d      	cbnz	r5, 80115ec <__gethex+0xc4>
 80115d8:	eb06 050a 	add.w	r5, r6, sl
 80115dc:	462a      	mov	r2, r5
 80115de:	4616      	mov	r6, r2
 80115e0:	3201      	adds	r2, #1
 80115e2:	7830      	ldrb	r0, [r6, #0]
 80115e4:	f7ff ff8a 	bl	80114fc <__hexdig_fun>
 80115e8:	2800      	cmp	r0, #0
 80115ea:	d1f8      	bne.n	80115de <__gethex+0xb6>
 80115ec:	1bad      	subs	r5, r5, r6
 80115ee:	00ad      	lsls	r5, r5, #2
 80115f0:	e004      	b.n	80115fc <__gethex+0xd4>
 80115f2:	2400      	movs	r4, #0
 80115f4:	4625      	mov	r5, r4
 80115f6:	e7e0      	b.n	80115ba <__gethex+0x92>
 80115f8:	2d00      	cmp	r5, #0
 80115fa:	d1f7      	bne.n	80115ec <__gethex+0xc4>
 80115fc:	7833      	ldrb	r3, [r6, #0]
 80115fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011602:	2b50      	cmp	r3, #80	; 0x50
 8011604:	d13b      	bne.n	801167e <__gethex+0x156>
 8011606:	7873      	ldrb	r3, [r6, #1]
 8011608:	2b2b      	cmp	r3, #43	; 0x2b
 801160a:	d02c      	beq.n	8011666 <__gethex+0x13e>
 801160c:	2b2d      	cmp	r3, #45	; 0x2d
 801160e:	d02e      	beq.n	801166e <__gethex+0x146>
 8011610:	1c71      	adds	r1, r6, #1
 8011612:	f04f 0900 	mov.w	r9, #0
 8011616:	7808      	ldrb	r0, [r1, #0]
 8011618:	f7ff ff70 	bl	80114fc <__hexdig_fun>
 801161c:	1e43      	subs	r3, r0, #1
 801161e:	b2db      	uxtb	r3, r3
 8011620:	2b18      	cmp	r3, #24
 8011622:	d82c      	bhi.n	801167e <__gethex+0x156>
 8011624:	f1a0 0210 	sub.w	r2, r0, #16
 8011628:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801162c:	f7ff ff66 	bl	80114fc <__hexdig_fun>
 8011630:	1e43      	subs	r3, r0, #1
 8011632:	b2db      	uxtb	r3, r3
 8011634:	2b18      	cmp	r3, #24
 8011636:	d91d      	bls.n	8011674 <__gethex+0x14c>
 8011638:	f1b9 0f00 	cmp.w	r9, #0
 801163c:	d000      	beq.n	8011640 <__gethex+0x118>
 801163e:	4252      	negs	r2, r2
 8011640:	4415      	add	r5, r2
 8011642:	f8cb 1000 	str.w	r1, [fp]
 8011646:	b1e4      	cbz	r4, 8011682 <__gethex+0x15a>
 8011648:	9b00      	ldr	r3, [sp, #0]
 801164a:	2b00      	cmp	r3, #0
 801164c:	bf14      	ite	ne
 801164e:	2700      	movne	r7, #0
 8011650:	2706      	moveq	r7, #6
 8011652:	4638      	mov	r0, r7
 8011654:	b009      	add	sp, #36	; 0x24
 8011656:	ecbd 8b02 	vpop	{d8}
 801165a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801165e:	463e      	mov	r6, r7
 8011660:	4625      	mov	r5, r4
 8011662:	2401      	movs	r4, #1
 8011664:	e7ca      	b.n	80115fc <__gethex+0xd4>
 8011666:	f04f 0900 	mov.w	r9, #0
 801166a:	1cb1      	adds	r1, r6, #2
 801166c:	e7d3      	b.n	8011616 <__gethex+0xee>
 801166e:	f04f 0901 	mov.w	r9, #1
 8011672:	e7fa      	b.n	801166a <__gethex+0x142>
 8011674:	230a      	movs	r3, #10
 8011676:	fb03 0202 	mla	r2, r3, r2, r0
 801167a:	3a10      	subs	r2, #16
 801167c:	e7d4      	b.n	8011628 <__gethex+0x100>
 801167e:	4631      	mov	r1, r6
 8011680:	e7df      	b.n	8011642 <__gethex+0x11a>
 8011682:	1bf3      	subs	r3, r6, r7
 8011684:	3b01      	subs	r3, #1
 8011686:	4621      	mov	r1, r4
 8011688:	2b07      	cmp	r3, #7
 801168a:	dc0b      	bgt.n	80116a4 <__gethex+0x17c>
 801168c:	ee18 0a10 	vmov	r0, s16
 8011690:	f000 fa94 	bl	8011bbc <_Balloc>
 8011694:	4604      	mov	r4, r0
 8011696:	b940      	cbnz	r0, 80116aa <__gethex+0x182>
 8011698:	4b5d      	ldr	r3, [pc, #372]	; (8011810 <__gethex+0x2e8>)
 801169a:	4602      	mov	r2, r0
 801169c:	21de      	movs	r1, #222	; 0xde
 801169e:	485d      	ldr	r0, [pc, #372]	; (8011814 <__gethex+0x2ec>)
 80116a0:	f7ff f830 	bl	8010704 <__assert_func>
 80116a4:	3101      	adds	r1, #1
 80116a6:	105b      	asrs	r3, r3, #1
 80116a8:	e7ee      	b.n	8011688 <__gethex+0x160>
 80116aa:	f100 0914 	add.w	r9, r0, #20
 80116ae:	f04f 0b00 	mov.w	fp, #0
 80116b2:	f1ca 0301 	rsb	r3, sl, #1
 80116b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80116ba:	f8cd b000 	str.w	fp, [sp]
 80116be:	9306      	str	r3, [sp, #24]
 80116c0:	42b7      	cmp	r7, r6
 80116c2:	d340      	bcc.n	8011746 <__gethex+0x21e>
 80116c4:	9802      	ldr	r0, [sp, #8]
 80116c6:	9b00      	ldr	r3, [sp, #0]
 80116c8:	f840 3b04 	str.w	r3, [r0], #4
 80116cc:	eba0 0009 	sub.w	r0, r0, r9
 80116d0:	1080      	asrs	r0, r0, #2
 80116d2:	0146      	lsls	r6, r0, #5
 80116d4:	6120      	str	r0, [r4, #16]
 80116d6:	4618      	mov	r0, r3
 80116d8:	f000 fb62 	bl	8011da0 <__hi0bits>
 80116dc:	1a30      	subs	r0, r6, r0
 80116de:	f8d8 6000 	ldr.w	r6, [r8]
 80116e2:	42b0      	cmp	r0, r6
 80116e4:	dd63      	ble.n	80117ae <__gethex+0x286>
 80116e6:	1b87      	subs	r7, r0, r6
 80116e8:	4639      	mov	r1, r7
 80116ea:	4620      	mov	r0, r4
 80116ec:	f000 ff06 	bl	80124fc <__any_on>
 80116f0:	4682      	mov	sl, r0
 80116f2:	b1a8      	cbz	r0, 8011720 <__gethex+0x1f8>
 80116f4:	1e7b      	subs	r3, r7, #1
 80116f6:	1159      	asrs	r1, r3, #5
 80116f8:	f003 021f 	and.w	r2, r3, #31
 80116fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011700:	f04f 0a01 	mov.w	sl, #1
 8011704:	fa0a f202 	lsl.w	r2, sl, r2
 8011708:	420a      	tst	r2, r1
 801170a:	d009      	beq.n	8011720 <__gethex+0x1f8>
 801170c:	4553      	cmp	r3, sl
 801170e:	dd05      	ble.n	801171c <__gethex+0x1f4>
 8011710:	1eb9      	subs	r1, r7, #2
 8011712:	4620      	mov	r0, r4
 8011714:	f000 fef2 	bl	80124fc <__any_on>
 8011718:	2800      	cmp	r0, #0
 801171a:	d145      	bne.n	80117a8 <__gethex+0x280>
 801171c:	f04f 0a02 	mov.w	sl, #2
 8011720:	4639      	mov	r1, r7
 8011722:	4620      	mov	r0, r4
 8011724:	f7ff fe98 	bl	8011458 <rshift>
 8011728:	443d      	add	r5, r7
 801172a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801172e:	42ab      	cmp	r3, r5
 8011730:	da4c      	bge.n	80117cc <__gethex+0x2a4>
 8011732:	ee18 0a10 	vmov	r0, s16
 8011736:	4621      	mov	r1, r4
 8011738:	f000 fa80 	bl	8011c3c <_Bfree>
 801173c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801173e:	2300      	movs	r3, #0
 8011740:	6013      	str	r3, [r2, #0]
 8011742:	27a3      	movs	r7, #163	; 0xa3
 8011744:	e785      	b.n	8011652 <__gethex+0x12a>
 8011746:	1e73      	subs	r3, r6, #1
 8011748:	9a05      	ldr	r2, [sp, #20]
 801174a:	9303      	str	r3, [sp, #12]
 801174c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011750:	4293      	cmp	r3, r2
 8011752:	d019      	beq.n	8011788 <__gethex+0x260>
 8011754:	f1bb 0f20 	cmp.w	fp, #32
 8011758:	d107      	bne.n	801176a <__gethex+0x242>
 801175a:	9b02      	ldr	r3, [sp, #8]
 801175c:	9a00      	ldr	r2, [sp, #0]
 801175e:	f843 2b04 	str.w	r2, [r3], #4
 8011762:	9302      	str	r3, [sp, #8]
 8011764:	2300      	movs	r3, #0
 8011766:	9300      	str	r3, [sp, #0]
 8011768:	469b      	mov	fp, r3
 801176a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801176e:	f7ff fec5 	bl	80114fc <__hexdig_fun>
 8011772:	9b00      	ldr	r3, [sp, #0]
 8011774:	f000 000f 	and.w	r0, r0, #15
 8011778:	fa00 f00b 	lsl.w	r0, r0, fp
 801177c:	4303      	orrs	r3, r0
 801177e:	9300      	str	r3, [sp, #0]
 8011780:	f10b 0b04 	add.w	fp, fp, #4
 8011784:	9b03      	ldr	r3, [sp, #12]
 8011786:	e00d      	b.n	80117a4 <__gethex+0x27c>
 8011788:	9b03      	ldr	r3, [sp, #12]
 801178a:	9a06      	ldr	r2, [sp, #24]
 801178c:	4413      	add	r3, r2
 801178e:	42bb      	cmp	r3, r7
 8011790:	d3e0      	bcc.n	8011754 <__gethex+0x22c>
 8011792:	4618      	mov	r0, r3
 8011794:	9901      	ldr	r1, [sp, #4]
 8011796:	9307      	str	r3, [sp, #28]
 8011798:	4652      	mov	r2, sl
 801179a:	f001 f9a5 	bl	8012ae8 <strncmp>
 801179e:	9b07      	ldr	r3, [sp, #28]
 80117a0:	2800      	cmp	r0, #0
 80117a2:	d1d7      	bne.n	8011754 <__gethex+0x22c>
 80117a4:	461e      	mov	r6, r3
 80117a6:	e78b      	b.n	80116c0 <__gethex+0x198>
 80117a8:	f04f 0a03 	mov.w	sl, #3
 80117ac:	e7b8      	b.n	8011720 <__gethex+0x1f8>
 80117ae:	da0a      	bge.n	80117c6 <__gethex+0x29e>
 80117b0:	1a37      	subs	r7, r6, r0
 80117b2:	4621      	mov	r1, r4
 80117b4:	ee18 0a10 	vmov	r0, s16
 80117b8:	463a      	mov	r2, r7
 80117ba:	f000 fc5b 	bl	8012074 <__lshift>
 80117be:	1bed      	subs	r5, r5, r7
 80117c0:	4604      	mov	r4, r0
 80117c2:	f100 0914 	add.w	r9, r0, #20
 80117c6:	f04f 0a00 	mov.w	sl, #0
 80117ca:	e7ae      	b.n	801172a <__gethex+0x202>
 80117cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80117d0:	42a8      	cmp	r0, r5
 80117d2:	dd72      	ble.n	80118ba <__gethex+0x392>
 80117d4:	1b45      	subs	r5, r0, r5
 80117d6:	42ae      	cmp	r6, r5
 80117d8:	dc36      	bgt.n	8011848 <__gethex+0x320>
 80117da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80117de:	2b02      	cmp	r3, #2
 80117e0:	d02a      	beq.n	8011838 <__gethex+0x310>
 80117e2:	2b03      	cmp	r3, #3
 80117e4:	d02c      	beq.n	8011840 <__gethex+0x318>
 80117e6:	2b01      	cmp	r3, #1
 80117e8:	d11c      	bne.n	8011824 <__gethex+0x2fc>
 80117ea:	42ae      	cmp	r6, r5
 80117ec:	d11a      	bne.n	8011824 <__gethex+0x2fc>
 80117ee:	2e01      	cmp	r6, #1
 80117f0:	d112      	bne.n	8011818 <__gethex+0x2f0>
 80117f2:	9a04      	ldr	r2, [sp, #16]
 80117f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80117f8:	6013      	str	r3, [r2, #0]
 80117fa:	2301      	movs	r3, #1
 80117fc:	6123      	str	r3, [r4, #16]
 80117fe:	f8c9 3000 	str.w	r3, [r9]
 8011802:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011804:	2762      	movs	r7, #98	; 0x62
 8011806:	601c      	str	r4, [r3, #0]
 8011808:	e723      	b.n	8011652 <__gethex+0x12a>
 801180a:	bf00      	nop
 801180c:	08014404 	.word	0x08014404
 8011810:	0801438d 	.word	0x0801438d
 8011814:	0801439e 	.word	0x0801439e
 8011818:	1e71      	subs	r1, r6, #1
 801181a:	4620      	mov	r0, r4
 801181c:	f000 fe6e 	bl	80124fc <__any_on>
 8011820:	2800      	cmp	r0, #0
 8011822:	d1e6      	bne.n	80117f2 <__gethex+0x2ca>
 8011824:	ee18 0a10 	vmov	r0, s16
 8011828:	4621      	mov	r1, r4
 801182a:	f000 fa07 	bl	8011c3c <_Bfree>
 801182e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011830:	2300      	movs	r3, #0
 8011832:	6013      	str	r3, [r2, #0]
 8011834:	2750      	movs	r7, #80	; 0x50
 8011836:	e70c      	b.n	8011652 <__gethex+0x12a>
 8011838:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801183a:	2b00      	cmp	r3, #0
 801183c:	d1f2      	bne.n	8011824 <__gethex+0x2fc>
 801183e:	e7d8      	b.n	80117f2 <__gethex+0x2ca>
 8011840:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011842:	2b00      	cmp	r3, #0
 8011844:	d1d5      	bne.n	80117f2 <__gethex+0x2ca>
 8011846:	e7ed      	b.n	8011824 <__gethex+0x2fc>
 8011848:	1e6f      	subs	r7, r5, #1
 801184a:	f1ba 0f00 	cmp.w	sl, #0
 801184e:	d131      	bne.n	80118b4 <__gethex+0x38c>
 8011850:	b127      	cbz	r7, 801185c <__gethex+0x334>
 8011852:	4639      	mov	r1, r7
 8011854:	4620      	mov	r0, r4
 8011856:	f000 fe51 	bl	80124fc <__any_on>
 801185a:	4682      	mov	sl, r0
 801185c:	117b      	asrs	r3, r7, #5
 801185e:	2101      	movs	r1, #1
 8011860:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011864:	f007 071f 	and.w	r7, r7, #31
 8011868:	fa01 f707 	lsl.w	r7, r1, r7
 801186c:	421f      	tst	r7, r3
 801186e:	4629      	mov	r1, r5
 8011870:	4620      	mov	r0, r4
 8011872:	bf18      	it	ne
 8011874:	f04a 0a02 	orrne.w	sl, sl, #2
 8011878:	1b76      	subs	r6, r6, r5
 801187a:	f7ff fded 	bl	8011458 <rshift>
 801187e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011882:	2702      	movs	r7, #2
 8011884:	f1ba 0f00 	cmp.w	sl, #0
 8011888:	d048      	beq.n	801191c <__gethex+0x3f4>
 801188a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801188e:	2b02      	cmp	r3, #2
 8011890:	d015      	beq.n	80118be <__gethex+0x396>
 8011892:	2b03      	cmp	r3, #3
 8011894:	d017      	beq.n	80118c6 <__gethex+0x39e>
 8011896:	2b01      	cmp	r3, #1
 8011898:	d109      	bne.n	80118ae <__gethex+0x386>
 801189a:	f01a 0f02 	tst.w	sl, #2
 801189e:	d006      	beq.n	80118ae <__gethex+0x386>
 80118a0:	f8d9 0000 	ldr.w	r0, [r9]
 80118a4:	ea4a 0a00 	orr.w	sl, sl, r0
 80118a8:	f01a 0f01 	tst.w	sl, #1
 80118ac:	d10e      	bne.n	80118cc <__gethex+0x3a4>
 80118ae:	f047 0710 	orr.w	r7, r7, #16
 80118b2:	e033      	b.n	801191c <__gethex+0x3f4>
 80118b4:	f04f 0a01 	mov.w	sl, #1
 80118b8:	e7d0      	b.n	801185c <__gethex+0x334>
 80118ba:	2701      	movs	r7, #1
 80118bc:	e7e2      	b.n	8011884 <__gethex+0x35c>
 80118be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118c0:	f1c3 0301 	rsb	r3, r3, #1
 80118c4:	9315      	str	r3, [sp, #84]	; 0x54
 80118c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d0f0      	beq.n	80118ae <__gethex+0x386>
 80118cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80118d0:	f104 0314 	add.w	r3, r4, #20
 80118d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80118d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80118dc:	f04f 0c00 	mov.w	ip, #0
 80118e0:	4618      	mov	r0, r3
 80118e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80118e6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80118ea:	d01c      	beq.n	8011926 <__gethex+0x3fe>
 80118ec:	3201      	adds	r2, #1
 80118ee:	6002      	str	r2, [r0, #0]
 80118f0:	2f02      	cmp	r7, #2
 80118f2:	f104 0314 	add.w	r3, r4, #20
 80118f6:	d13f      	bne.n	8011978 <__gethex+0x450>
 80118f8:	f8d8 2000 	ldr.w	r2, [r8]
 80118fc:	3a01      	subs	r2, #1
 80118fe:	42b2      	cmp	r2, r6
 8011900:	d10a      	bne.n	8011918 <__gethex+0x3f0>
 8011902:	1171      	asrs	r1, r6, #5
 8011904:	2201      	movs	r2, #1
 8011906:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801190a:	f006 061f 	and.w	r6, r6, #31
 801190e:	fa02 f606 	lsl.w	r6, r2, r6
 8011912:	421e      	tst	r6, r3
 8011914:	bf18      	it	ne
 8011916:	4617      	movne	r7, r2
 8011918:	f047 0720 	orr.w	r7, r7, #32
 801191c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801191e:	601c      	str	r4, [r3, #0]
 8011920:	9b04      	ldr	r3, [sp, #16]
 8011922:	601d      	str	r5, [r3, #0]
 8011924:	e695      	b.n	8011652 <__gethex+0x12a>
 8011926:	4299      	cmp	r1, r3
 8011928:	f843 cc04 	str.w	ip, [r3, #-4]
 801192c:	d8d8      	bhi.n	80118e0 <__gethex+0x3b8>
 801192e:	68a3      	ldr	r3, [r4, #8]
 8011930:	459b      	cmp	fp, r3
 8011932:	db19      	blt.n	8011968 <__gethex+0x440>
 8011934:	6861      	ldr	r1, [r4, #4]
 8011936:	ee18 0a10 	vmov	r0, s16
 801193a:	3101      	adds	r1, #1
 801193c:	f000 f93e 	bl	8011bbc <_Balloc>
 8011940:	4681      	mov	r9, r0
 8011942:	b918      	cbnz	r0, 801194c <__gethex+0x424>
 8011944:	4b1a      	ldr	r3, [pc, #104]	; (80119b0 <__gethex+0x488>)
 8011946:	4602      	mov	r2, r0
 8011948:	2184      	movs	r1, #132	; 0x84
 801194a:	e6a8      	b.n	801169e <__gethex+0x176>
 801194c:	6922      	ldr	r2, [r4, #16]
 801194e:	3202      	adds	r2, #2
 8011950:	f104 010c 	add.w	r1, r4, #12
 8011954:	0092      	lsls	r2, r2, #2
 8011956:	300c      	adds	r0, #12
 8011958:	f000 f916 	bl	8011b88 <memcpy>
 801195c:	4621      	mov	r1, r4
 801195e:	ee18 0a10 	vmov	r0, s16
 8011962:	f000 f96b 	bl	8011c3c <_Bfree>
 8011966:	464c      	mov	r4, r9
 8011968:	6923      	ldr	r3, [r4, #16]
 801196a:	1c5a      	adds	r2, r3, #1
 801196c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011970:	6122      	str	r2, [r4, #16]
 8011972:	2201      	movs	r2, #1
 8011974:	615a      	str	r2, [r3, #20]
 8011976:	e7bb      	b.n	80118f0 <__gethex+0x3c8>
 8011978:	6922      	ldr	r2, [r4, #16]
 801197a:	455a      	cmp	r2, fp
 801197c:	dd0b      	ble.n	8011996 <__gethex+0x46e>
 801197e:	2101      	movs	r1, #1
 8011980:	4620      	mov	r0, r4
 8011982:	f7ff fd69 	bl	8011458 <rshift>
 8011986:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801198a:	3501      	adds	r5, #1
 801198c:	42ab      	cmp	r3, r5
 801198e:	f6ff aed0 	blt.w	8011732 <__gethex+0x20a>
 8011992:	2701      	movs	r7, #1
 8011994:	e7c0      	b.n	8011918 <__gethex+0x3f0>
 8011996:	f016 061f 	ands.w	r6, r6, #31
 801199a:	d0fa      	beq.n	8011992 <__gethex+0x46a>
 801199c:	4453      	add	r3, sl
 801199e:	f1c6 0620 	rsb	r6, r6, #32
 80119a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80119a6:	f000 f9fb 	bl	8011da0 <__hi0bits>
 80119aa:	42b0      	cmp	r0, r6
 80119ac:	dbe7      	blt.n	801197e <__gethex+0x456>
 80119ae:	e7f0      	b.n	8011992 <__gethex+0x46a>
 80119b0:	0801438d 	.word	0x0801438d

080119b4 <L_shift>:
 80119b4:	f1c2 0208 	rsb	r2, r2, #8
 80119b8:	0092      	lsls	r2, r2, #2
 80119ba:	b570      	push	{r4, r5, r6, lr}
 80119bc:	f1c2 0620 	rsb	r6, r2, #32
 80119c0:	6843      	ldr	r3, [r0, #4]
 80119c2:	6804      	ldr	r4, [r0, #0]
 80119c4:	fa03 f506 	lsl.w	r5, r3, r6
 80119c8:	432c      	orrs	r4, r5
 80119ca:	40d3      	lsrs	r3, r2
 80119cc:	6004      	str	r4, [r0, #0]
 80119ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80119d2:	4288      	cmp	r0, r1
 80119d4:	d3f4      	bcc.n	80119c0 <L_shift+0xc>
 80119d6:	bd70      	pop	{r4, r5, r6, pc}

080119d8 <__match>:
 80119d8:	b530      	push	{r4, r5, lr}
 80119da:	6803      	ldr	r3, [r0, #0]
 80119dc:	3301      	adds	r3, #1
 80119de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80119e2:	b914      	cbnz	r4, 80119ea <__match+0x12>
 80119e4:	6003      	str	r3, [r0, #0]
 80119e6:	2001      	movs	r0, #1
 80119e8:	bd30      	pop	{r4, r5, pc}
 80119ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80119f2:	2d19      	cmp	r5, #25
 80119f4:	bf98      	it	ls
 80119f6:	3220      	addls	r2, #32
 80119f8:	42a2      	cmp	r2, r4
 80119fa:	d0f0      	beq.n	80119de <__match+0x6>
 80119fc:	2000      	movs	r0, #0
 80119fe:	e7f3      	b.n	80119e8 <__match+0x10>

08011a00 <__hexnan>:
 8011a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a04:	680b      	ldr	r3, [r1, #0]
 8011a06:	115e      	asrs	r6, r3, #5
 8011a08:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011a0c:	f013 031f 	ands.w	r3, r3, #31
 8011a10:	b087      	sub	sp, #28
 8011a12:	bf18      	it	ne
 8011a14:	3604      	addne	r6, #4
 8011a16:	2500      	movs	r5, #0
 8011a18:	1f37      	subs	r7, r6, #4
 8011a1a:	4690      	mov	r8, r2
 8011a1c:	6802      	ldr	r2, [r0, #0]
 8011a1e:	9301      	str	r3, [sp, #4]
 8011a20:	4682      	mov	sl, r0
 8011a22:	f846 5c04 	str.w	r5, [r6, #-4]
 8011a26:	46b9      	mov	r9, r7
 8011a28:	463c      	mov	r4, r7
 8011a2a:	9502      	str	r5, [sp, #8]
 8011a2c:	46ab      	mov	fp, r5
 8011a2e:	7851      	ldrb	r1, [r2, #1]
 8011a30:	1c53      	adds	r3, r2, #1
 8011a32:	9303      	str	r3, [sp, #12]
 8011a34:	b341      	cbz	r1, 8011a88 <__hexnan+0x88>
 8011a36:	4608      	mov	r0, r1
 8011a38:	9205      	str	r2, [sp, #20]
 8011a3a:	9104      	str	r1, [sp, #16]
 8011a3c:	f7ff fd5e 	bl	80114fc <__hexdig_fun>
 8011a40:	2800      	cmp	r0, #0
 8011a42:	d14f      	bne.n	8011ae4 <__hexnan+0xe4>
 8011a44:	9904      	ldr	r1, [sp, #16]
 8011a46:	9a05      	ldr	r2, [sp, #20]
 8011a48:	2920      	cmp	r1, #32
 8011a4a:	d818      	bhi.n	8011a7e <__hexnan+0x7e>
 8011a4c:	9b02      	ldr	r3, [sp, #8]
 8011a4e:	459b      	cmp	fp, r3
 8011a50:	dd13      	ble.n	8011a7a <__hexnan+0x7a>
 8011a52:	454c      	cmp	r4, r9
 8011a54:	d206      	bcs.n	8011a64 <__hexnan+0x64>
 8011a56:	2d07      	cmp	r5, #7
 8011a58:	dc04      	bgt.n	8011a64 <__hexnan+0x64>
 8011a5a:	462a      	mov	r2, r5
 8011a5c:	4649      	mov	r1, r9
 8011a5e:	4620      	mov	r0, r4
 8011a60:	f7ff ffa8 	bl	80119b4 <L_shift>
 8011a64:	4544      	cmp	r4, r8
 8011a66:	d950      	bls.n	8011b0a <__hexnan+0x10a>
 8011a68:	2300      	movs	r3, #0
 8011a6a:	f1a4 0904 	sub.w	r9, r4, #4
 8011a6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011a72:	f8cd b008 	str.w	fp, [sp, #8]
 8011a76:	464c      	mov	r4, r9
 8011a78:	461d      	mov	r5, r3
 8011a7a:	9a03      	ldr	r2, [sp, #12]
 8011a7c:	e7d7      	b.n	8011a2e <__hexnan+0x2e>
 8011a7e:	2929      	cmp	r1, #41	; 0x29
 8011a80:	d156      	bne.n	8011b30 <__hexnan+0x130>
 8011a82:	3202      	adds	r2, #2
 8011a84:	f8ca 2000 	str.w	r2, [sl]
 8011a88:	f1bb 0f00 	cmp.w	fp, #0
 8011a8c:	d050      	beq.n	8011b30 <__hexnan+0x130>
 8011a8e:	454c      	cmp	r4, r9
 8011a90:	d206      	bcs.n	8011aa0 <__hexnan+0xa0>
 8011a92:	2d07      	cmp	r5, #7
 8011a94:	dc04      	bgt.n	8011aa0 <__hexnan+0xa0>
 8011a96:	462a      	mov	r2, r5
 8011a98:	4649      	mov	r1, r9
 8011a9a:	4620      	mov	r0, r4
 8011a9c:	f7ff ff8a 	bl	80119b4 <L_shift>
 8011aa0:	4544      	cmp	r4, r8
 8011aa2:	d934      	bls.n	8011b0e <__hexnan+0x10e>
 8011aa4:	f1a8 0204 	sub.w	r2, r8, #4
 8011aa8:	4623      	mov	r3, r4
 8011aaa:	f853 1b04 	ldr.w	r1, [r3], #4
 8011aae:	f842 1f04 	str.w	r1, [r2, #4]!
 8011ab2:	429f      	cmp	r7, r3
 8011ab4:	d2f9      	bcs.n	8011aaa <__hexnan+0xaa>
 8011ab6:	1b3b      	subs	r3, r7, r4
 8011ab8:	f023 0303 	bic.w	r3, r3, #3
 8011abc:	3304      	adds	r3, #4
 8011abe:	3401      	adds	r4, #1
 8011ac0:	3e03      	subs	r6, #3
 8011ac2:	42b4      	cmp	r4, r6
 8011ac4:	bf88      	it	hi
 8011ac6:	2304      	movhi	r3, #4
 8011ac8:	4443      	add	r3, r8
 8011aca:	2200      	movs	r2, #0
 8011acc:	f843 2b04 	str.w	r2, [r3], #4
 8011ad0:	429f      	cmp	r7, r3
 8011ad2:	d2fb      	bcs.n	8011acc <__hexnan+0xcc>
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	b91b      	cbnz	r3, 8011ae0 <__hexnan+0xe0>
 8011ad8:	4547      	cmp	r7, r8
 8011ada:	d127      	bne.n	8011b2c <__hexnan+0x12c>
 8011adc:	2301      	movs	r3, #1
 8011ade:	603b      	str	r3, [r7, #0]
 8011ae0:	2005      	movs	r0, #5
 8011ae2:	e026      	b.n	8011b32 <__hexnan+0x132>
 8011ae4:	3501      	adds	r5, #1
 8011ae6:	2d08      	cmp	r5, #8
 8011ae8:	f10b 0b01 	add.w	fp, fp, #1
 8011aec:	dd06      	ble.n	8011afc <__hexnan+0xfc>
 8011aee:	4544      	cmp	r4, r8
 8011af0:	d9c3      	bls.n	8011a7a <__hexnan+0x7a>
 8011af2:	2300      	movs	r3, #0
 8011af4:	f844 3c04 	str.w	r3, [r4, #-4]
 8011af8:	2501      	movs	r5, #1
 8011afa:	3c04      	subs	r4, #4
 8011afc:	6822      	ldr	r2, [r4, #0]
 8011afe:	f000 000f 	and.w	r0, r0, #15
 8011b02:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011b06:	6022      	str	r2, [r4, #0]
 8011b08:	e7b7      	b.n	8011a7a <__hexnan+0x7a>
 8011b0a:	2508      	movs	r5, #8
 8011b0c:	e7b5      	b.n	8011a7a <__hexnan+0x7a>
 8011b0e:	9b01      	ldr	r3, [sp, #4]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d0df      	beq.n	8011ad4 <__hexnan+0xd4>
 8011b14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b18:	f1c3 0320 	rsb	r3, r3, #32
 8011b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8011b20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011b24:	401a      	ands	r2, r3
 8011b26:	f846 2c04 	str.w	r2, [r6, #-4]
 8011b2a:	e7d3      	b.n	8011ad4 <__hexnan+0xd4>
 8011b2c:	3f04      	subs	r7, #4
 8011b2e:	e7d1      	b.n	8011ad4 <__hexnan+0xd4>
 8011b30:	2004      	movs	r0, #4
 8011b32:	b007      	add	sp, #28
 8011b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b38 <_gettimeofday_r>:
 8011b38:	b538      	push	{r3, r4, r5, lr}
 8011b3a:	4d07      	ldr	r5, [pc, #28]	; (8011b58 <_gettimeofday_r+0x20>)
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	4604      	mov	r4, r0
 8011b40:	4608      	mov	r0, r1
 8011b42:	4611      	mov	r1, r2
 8011b44:	602b      	str	r3, [r5, #0]
 8011b46:	f001 fc1b 	bl	8013380 <_gettimeofday>
 8011b4a:	1c43      	adds	r3, r0, #1
 8011b4c:	d102      	bne.n	8011b54 <_gettimeofday_r+0x1c>
 8011b4e:	682b      	ldr	r3, [r5, #0]
 8011b50:	b103      	cbz	r3, 8011b54 <_gettimeofday_r+0x1c>
 8011b52:	6023      	str	r3, [r4, #0]
 8011b54:	bd38      	pop	{r3, r4, r5, pc}
 8011b56:	bf00      	nop
 8011b58:	20014004 	.word	0x20014004

08011b5c <_localeconv_r>:
 8011b5c:	4800      	ldr	r0, [pc, #0]	; (8011b60 <_localeconv_r+0x4>)
 8011b5e:	4770      	bx	lr
 8011b60:	200014dc 	.word	0x200014dc

08011b64 <__ascii_mbtowc>:
 8011b64:	b082      	sub	sp, #8
 8011b66:	b901      	cbnz	r1, 8011b6a <__ascii_mbtowc+0x6>
 8011b68:	a901      	add	r1, sp, #4
 8011b6a:	b142      	cbz	r2, 8011b7e <__ascii_mbtowc+0x1a>
 8011b6c:	b14b      	cbz	r3, 8011b82 <__ascii_mbtowc+0x1e>
 8011b6e:	7813      	ldrb	r3, [r2, #0]
 8011b70:	600b      	str	r3, [r1, #0]
 8011b72:	7812      	ldrb	r2, [r2, #0]
 8011b74:	1e10      	subs	r0, r2, #0
 8011b76:	bf18      	it	ne
 8011b78:	2001      	movne	r0, #1
 8011b7a:	b002      	add	sp, #8
 8011b7c:	4770      	bx	lr
 8011b7e:	4610      	mov	r0, r2
 8011b80:	e7fb      	b.n	8011b7a <__ascii_mbtowc+0x16>
 8011b82:	f06f 0001 	mvn.w	r0, #1
 8011b86:	e7f8      	b.n	8011b7a <__ascii_mbtowc+0x16>

08011b88 <memcpy>:
 8011b88:	440a      	add	r2, r1
 8011b8a:	4291      	cmp	r1, r2
 8011b8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011b90:	d100      	bne.n	8011b94 <memcpy+0xc>
 8011b92:	4770      	bx	lr
 8011b94:	b510      	push	{r4, lr}
 8011b96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b9e:	4291      	cmp	r1, r2
 8011ba0:	d1f9      	bne.n	8011b96 <memcpy+0xe>
 8011ba2:	bd10      	pop	{r4, pc}

08011ba4 <__malloc_lock>:
 8011ba4:	4801      	ldr	r0, [pc, #4]	; (8011bac <__malloc_lock+0x8>)
 8011ba6:	f001 ba41 	b.w	801302c <__retarget_lock_acquire_recursive>
 8011baa:	bf00      	nop
 8011bac:	20014008 	.word	0x20014008

08011bb0 <__malloc_unlock>:
 8011bb0:	4801      	ldr	r0, [pc, #4]	; (8011bb8 <__malloc_unlock+0x8>)
 8011bb2:	f001 ba3c 	b.w	801302e <__retarget_lock_release_recursive>
 8011bb6:	bf00      	nop
 8011bb8:	20014008 	.word	0x20014008

08011bbc <_Balloc>:
 8011bbc:	b570      	push	{r4, r5, r6, lr}
 8011bbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011bc0:	4604      	mov	r4, r0
 8011bc2:	460d      	mov	r5, r1
 8011bc4:	b976      	cbnz	r6, 8011be4 <_Balloc+0x28>
 8011bc6:	2010      	movs	r0, #16
 8011bc8:	f7fc fec2 	bl	800e950 <malloc>
 8011bcc:	4602      	mov	r2, r0
 8011bce:	6260      	str	r0, [r4, #36]	; 0x24
 8011bd0:	b920      	cbnz	r0, 8011bdc <_Balloc+0x20>
 8011bd2:	4b18      	ldr	r3, [pc, #96]	; (8011c34 <_Balloc+0x78>)
 8011bd4:	4818      	ldr	r0, [pc, #96]	; (8011c38 <_Balloc+0x7c>)
 8011bd6:	2166      	movs	r1, #102	; 0x66
 8011bd8:	f7fe fd94 	bl	8010704 <__assert_func>
 8011bdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011be0:	6006      	str	r6, [r0, #0]
 8011be2:	60c6      	str	r6, [r0, #12]
 8011be4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011be6:	68f3      	ldr	r3, [r6, #12]
 8011be8:	b183      	cbz	r3, 8011c0c <_Balloc+0x50>
 8011bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011bec:	68db      	ldr	r3, [r3, #12]
 8011bee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011bf2:	b9b8      	cbnz	r0, 8011c24 <_Balloc+0x68>
 8011bf4:	2101      	movs	r1, #1
 8011bf6:	fa01 f605 	lsl.w	r6, r1, r5
 8011bfa:	1d72      	adds	r2, r6, #5
 8011bfc:	0092      	lsls	r2, r2, #2
 8011bfe:	4620      	mov	r0, r4
 8011c00:	f000 fc9d 	bl	801253e <_calloc_r>
 8011c04:	b160      	cbz	r0, 8011c20 <_Balloc+0x64>
 8011c06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011c0a:	e00e      	b.n	8011c2a <_Balloc+0x6e>
 8011c0c:	2221      	movs	r2, #33	; 0x21
 8011c0e:	2104      	movs	r1, #4
 8011c10:	4620      	mov	r0, r4
 8011c12:	f000 fc94 	bl	801253e <_calloc_r>
 8011c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c18:	60f0      	str	r0, [r6, #12]
 8011c1a:	68db      	ldr	r3, [r3, #12]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d1e4      	bne.n	8011bea <_Balloc+0x2e>
 8011c20:	2000      	movs	r0, #0
 8011c22:	bd70      	pop	{r4, r5, r6, pc}
 8011c24:	6802      	ldr	r2, [r0, #0]
 8011c26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011c30:	e7f7      	b.n	8011c22 <_Balloc+0x66>
 8011c32:	bf00      	nop
 8011c34:	08014125 	.word	0x08014125
 8011c38:	08014418 	.word	0x08014418

08011c3c <_Bfree>:
 8011c3c:	b570      	push	{r4, r5, r6, lr}
 8011c3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011c40:	4605      	mov	r5, r0
 8011c42:	460c      	mov	r4, r1
 8011c44:	b976      	cbnz	r6, 8011c64 <_Bfree+0x28>
 8011c46:	2010      	movs	r0, #16
 8011c48:	f7fc fe82 	bl	800e950 <malloc>
 8011c4c:	4602      	mov	r2, r0
 8011c4e:	6268      	str	r0, [r5, #36]	; 0x24
 8011c50:	b920      	cbnz	r0, 8011c5c <_Bfree+0x20>
 8011c52:	4b09      	ldr	r3, [pc, #36]	; (8011c78 <_Bfree+0x3c>)
 8011c54:	4809      	ldr	r0, [pc, #36]	; (8011c7c <_Bfree+0x40>)
 8011c56:	218a      	movs	r1, #138	; 0x8a
 8011c58:	f7fe fd54 	bl	8010704 <__assert_func>
 8011c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011c60:	6006      	str	r6, [r0, #0]
 8011c62:	60c6      	str	r6, [r0, #12]
 8011c64:	b13c      	cbz	r4, 8011c76 <_Bfree+0x3a>
 8011c66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011c68:	6862      	ldr	r2, [r4, #4]
 8011c6a:	68db      	ldr	r3, [r3, #12]
 8011c6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011c70:	6021      	str	r1, [r4, #0]
 8011c72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011c76:	bd70      	pop	{r4, r5, r6, pc}
 8011c78:	08014125 	.word	0x08014125
 8011c7c:	08014418 	.word	0x08014418

08011c80 <__multadd>:
 8011c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c84:	690d      	ldr	r5, [r1, #16]
 8011c86:	4607      	mov	r7, r0
 8011c88:	460c      	mov	r4, r1
 8011c8a:	461e      	mov	r6, r3
 8011c8c:	f101 0c14 	add.w	ip, r1, #20
 8011c90:	2000      	movs	r0, #0
 8011c92:	f8dc 3000 	ldr.w	r3, [ip]
 8011c96:	b299      	uxth	r1, r3
 8011c98:	fb02 6101 	mla	r1, r2, r1, r6
 8011c9c:	0c1e      	lsrs	r6, r3, #16
 8011c9e:	0c0b      	lsrs	r3, r1, #16
 8011ca0:	fb02 3306 	mla	r3, r2, r6, r3
 8011ca4:	b289      	uxth	r1, r1
 8011ca6:	3001      	adds	r0, #1
 8011ca8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011cac:	4285      	cmp	r5, r0
 8011cae:	f84c 1b04 	str.w	r1, [ip], #4
 8011cb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011cb6:	dcec      	bgt.n	8011c92 <__multadd+0x12>
 8011cb8:	b30e      	cbz	r6, 8011cfe <__multadd+0x7e>
 8011cba:	68a3      	ldr	r3, [r4, #8]
 8011cbc:	42ab      	cmp	r3, r5
 8011cbe:	dc19      	bgt.n	8011cf4 <__multadd+0x74>
 8011cc0:	6861      	ldr	r1, [r4, #4]
 8011cc2:	4638      	mov	r0, r7
 8011cc4:	3101      	adds	r1, #1
 8011cc6:	f7ff ff79 	bl	8011bbc <_Balloc>
 8011cca:	4680      	mov	r8, r0
 8011ccc:	b928      	cbnz	r0, 8011cda <__multadd+0x5a>
 8011cce:	4602      	mov	r2, r0
 8011cd0:	4b0c      	ldr	r3, [pc, #48]	; (8011d04 <__multadd+0x84>)
 8011cd2:	480d      	ldr	r0, [pc, #52]	; (8011d08 <__multadd+0x88>)
 8011cd4:	21b5      	movs	r1, #181	; 0xb5
 8011cd6:	f7fe fd15 	bl	8010704 <__assert_func>
 8011cda:	6922      	ldr	r2, [r4, #16]
 8011cdc:	3202      	adds	r2, #2
 8011cde:	f104 010c 	add.w	r1, r4, #12
 8011ce2:	0092      	lsls	r2, r2, #2
 8011ce4:	300c      	adds	r0, #12
 8011ce6:	f7ff ff4f 	bl	8011b88 <memcpy>
 8011cea:	4621      	mov	r1, r4
 8011cec:	4638      	mov	r0, r7
 8011cee:	f7ff ffa5 	bl	8011c3c <_Bfree>
 8011cf2:	4644      	mov	r4, r8
 8011cf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011cf8:	3501      	adds	r5, #1
 8011cfa:	615e      	str	r6, [r3, #20]
 8011cfc:	6125      	str	r5, [r4, #16]
 8011cfe:	4620      	mov	r0, r4
 8011d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d04:	0801438d 	.word	0x0801438d
 8011d08:	08014418 	.word	0x08014418

08011d0c <__s2b>:
 8011d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d10:	460c      	mov	r4, r1
 8011d12:	4615      	mov	r5, r2
 8011d14:	461f      	mov	r7, r3
 8011d16:	2209      	movs	r2, #9
 8011d18:	3308      	adds	r3, #8
 8011d1a:	4606      	mov	r6, r0
 8011d1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d20:	2100      	movs	r1, #0
 8011d22:	2201      	movs	r2, #1
 8011d24:	429a      	cmp	r2, r3
 8011d26:	db09      	blt.n	8011d3c <__s2b+0x30>
 8011d28:	4630      	mov	r0, r6
 8011d2a:	f7ff ff47 	bl	8011bbc <_Balloc>
 8011d2e:	b940      	cbnz	r0, 8011d42 <__s2b+0x36>
 8011d30:	4602      	mov	r2, r0
 8011d32:	4b19      	ldr	r3, [pc, #100]	; (8011d98 <__s2b+0x8c>)
 8011d34:	4819      	ldr	r0, [pc, #100]	; (8011d9c <__s2b+0x90>)
 8011d36:	21ce      	movs	r1, #206	; 0xce
 8011d38:	f7fe fce4 	bl	8010704 <__assert_func>
 8011d3c:	0052      	lsls	r2, r2, #1
 8011d3e:	3101      	adds	r1, #1
 8011d40:	e7f0      	b.n	8011d24 <__s2b+0x18>
 8011d42:	9b08      	ldr	r3, [sp, #32]
 8011d44:	6143      	str	r3, [r0, #20]
 8011d46:	2d09      	cmp	r5, #9
 8011d48:	f04f 0301 	mov.w	r3, #1
 8011d4c:	6103      	str	r3, [r0, #16]
 8011d4e:	dd16      	ble.n	8011d7e <__s2b+0x72>
 8011d50:	f104 0909 	add.w	r9, r4, #9
 8011d54:	46c8      	mov	r8, r9
 8011d56:	442c      	add	r4, r5
 8011d58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011d5c:	4601      	mov	r1, r0
 8011d5e:	3b30      	subs	r3, #48	; 0x30
 8011d60:	220a      	movs	r2, #10
 8011d62:	4630      	mov	r0, r6
 8011d64:	f7ff ff8c 	bl	8011c80 <__multadd>
 8011d68:	45a0      	cmp	r8, r4
 8011d6a:	d1f5      	bne.n	8011d58 <__s2b+0x4c>
 8011d6c:	f1a5 0408 	sub.w	r4, r5, #8
 8011d70:	444c      	add	r4, r9
 8011d72:	1b2d      	subs	r5, r5, r4
 8011d74:	1963      	adds	r3, r4, r5
 8011d76:	42bb      	cmp	r3, r7
 8011d78:	db04      	blt.n	8011d84 <__s2b+0x78>
 8011d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d7e:	340a      	adds	r4, #10
 8011d80:	2509      	movs	r5, #9
 8011d82:	e7f6      	b.n	8011d72 <__s2b+0x66>
 8011d84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011d88:	4601      	mov	r1, r0
 8011d8a:	3b30      	subs	r3, #48	; 0x30
 8011d8c:	220a      	movs	r2, #10
 8011d8e:	4630      	mov	r0, r6
 8011d90:	f7ff ff76 	bl	8011c80 <__multadd>
 8011d94:	e7ee      	b.n	8011d74 <__s2b+0x68>
 8011d96:	bf00      	nop
 8011d98:	0801438d 	.word	0x0801438d
 8011d9c:	08014418 	.word	0x08014418

08011da0 <__hi0bits>:
 8011da0:	0c03      	lsrs	r3, r0, #16
 8011da2:	041b      	lsls	r3, r3, #16
 8011da4:	b9d3      	cbnz	r3, 8011ddc <__hi0bits+0x3c>
 8011da6:	0400      	lsls	r0, r0, #16
 8011da8:	2310      	movs	r3, #16
 8011daa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011dae:	bf04      	itt	eq
 8011db0:	0200      	lsleq	r0, r0, #8
 8011db2:	3308      	addeq	r3, #8
 8011db4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011db8:	bf04      	itt	eq
 8011dba:	0100      	lsleq	r0, r0, #4
 8011dbc:	3304      	addeq	r3, #4
 8011dbe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011dc2:	bf04      	itt	eq
 8011dc4:	0080      	lsleq	r0, r0, #2
 8011dc6:	3302      	addeq	r3, #2
 8011dc8:	2800      	cmp	r0, #0
 8011dca:	db05      	blt.n	8011dd8 <__hi0bits+0x38>
 8011dcc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011dd0:	f103 0301 	add.w	r3, r3, #1
 8011dd4:	bf08      	it	eq
 8011dd6:	2320      	moveq	r3, #32
 8011dd8:	4618      	mov	r0, r3
 8011dda:	4770      	bx	lr
 8011ddc:	2300      	movs	r3, #0
 8011dde:	e7e4      	b.n	8011daa <__hi0bits+0xa>

08011de0 <__lo0bits>:
 8011de0:	6803      	ldr	r3, [r0, #0]
 8011de2:	f013 0207 	ands.w	r2, r3, #7
 8011de6:	4601      	mov	r1, r0
 8011de8:	d00b      	beq.n	8011e02 <__lo0bits+0x22>
 8011dea:	07da      	lsls	r2, r3, #31
 8011dec:	d423      	bmi.n	8011e36 <__lo0bits+0x56>
 8011dee:	0798      	lsls	r0, r3, #30
 8011df0:	bf49      	itett	mi
 8011df2:	085b      	lsrmi	r3, r3, #1
 8011df4:	089b      	lsrpl	r3, r3, #2
 8011df6:	2001      	movmi	r0, #1
 8011df8:	600b      	strmi	r3, [r1, #0]
 8011dfa:	bf5c      	itt	pl
 8011dfc:	600b      	strpl	r3, [r1, #0]
 8011dfe:	2002      	movpl	r0, #2
 8011e00:	4770      	bx	lr
 8011e02:	b298      	uxth	r0, r3
 8011e04:	b9a8      	cbnz	r0, 8011e32 <__lo0bits+0x52>
 8011e06:	0c1b      	lsrs	r3, r3, #16
 8011e08:	2010      	movs	r0, #16
 8011e0a:	b2da      	uxtb	r2, r3
 8011e0c:	b90a      	cbnz	r2, 8011e12 <__lo0bits+0x32>
 8011e0e:	3008      	adds	r0, #8
 8011e10:	0a1b      	lsrs	r3, r3, #8
 8011e12:	071a      	lsls	r2, r3, #28
 8011e14:	bf04      	itt	eq
 8011e16:	091b      	lsreq	r3, r3, #4
 8011e18:	3004      	addeq	r0, #4
 8011e1a:	079a      	lsls	r2, r3, #30
 8011e1c:	bf04      	itt	eq
 8011e1e:	089b      	lsreq	r3, r3, #2
 8011e20:	3002      	addeq	r0, #2
 8011e22:	07da      	lsls	r2, r3, #31
 8011e24:	d403      	bmi.n	8011e2e <__lo0bits+0x4e>
 8011e26:	085b      	lsrs	r3, r3, #1
 8011e28:	f100 0001 	add.w	r0, r0, #1
 8011e2c:	d005      	beq.n	8011e3a <__lo0bits+0x5a>
 8011e2e:	600b      	str	r3, [r1, #0]
 8011e30:	4770      	bx	lr
 8011e32:	4610      	mov	r0, r2
 8011e34:	e7e9      	b.n	8011e0a <__lo0bits+0x2a>
 8011e36:	2000      	movs	r0, #0
 8011e38:	4770      	bx	lr
 8011e3a:	2020      	movs	r0, #32
 8011e3c:	4770      	bx	lr
	...

08011e40 <__i2b>:
 8011e40:	b510      	push	{r4, lr}
 8011e42:	460c      	mov	r4, r1
 8011e44:	2101      	movs	r1, #1
 8011e46:	f7ff feb9 	bl	8011bbc <_Balloc>
 8011e4a:	4602      	mov	r2, r0
 8011e4c:	b928      	cbnz	r0, 8011e5a <__i2b+0x1a>
 8011e4e:	4b05      	ldr	r3, [pc, #20]	; (8011e64 <__i2b+0x24>)
 8011e50:	4805      	ldr	r0, [pc, #20]	; (8011e68 <__i2b+0x28>)
 8011e52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011e56:	f7fe fc55 	bl	8010704 <__assert_func>
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	6144      	str	r4, [r0, #20]
 8011e5e:	6103      	str	r3, [r0, #16]
 8011e60:	bd10      	pop	{r4, pc}
 8011e62:	bf00      	nop
 8011e64:	0801438d 	.word	0x0801438d
 8011e68:	08014418 	.word	0x08014418

08011e6c <__multiply>:
 8011e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e70:	4691      	mov	r9, r2
 8011e72:	690a      	ldr	r2, [r1, #16]
 8011e74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	bfb8      	it	lt
 8011e7c:	460b      	movlt	r3, r1
 8011e7e:	460c      	mov	r4, r1
 8011e80:	bfbc      	itt	lt
 8011e82:	464c      	movlt	r4, r9
 8011e84:	4699      	movlt	r9, r3
 8011e86:	6927      	ldr	r7, [r4, #16]
 8011e88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011e8c:	68a3      	ldr	r3, [r4, #8]
 8011e8e:	6861      	ldr	r1, [r4, #4]
 8011e90:	eb07 060a 	add.w	r6, r7, sl
 8011e94:	42b3      	cmp	r3, r6
 8011e96:	b085      	sub	sp, #20
 8011e98:	bfb8      	it	lt
 8011e9a:	3101      	addlt	r1, #1
 8011e9c:	f7ff fe8e 	bl	8011bbc <_Balloc>
 8011ea0:	b930      	cbnz	r0, 8011eb0 <__multiply+0x44>
 8011ea2:	4602      	mov	r2, r0
 8011ea4:	4b44      	ldr	r3, [pc, #272]	; (8011fb8 <__multiply+0x14c>)
 8011ea6:	4845      	ldr	r0, [pc, #276]	; (8011fbc <__multiply+0x150>)
 8011ea8:	f240 115d 	movw	r1, #349	; 0x15d
 8011eac:	f7fe fc2a 	bl	8010704 <__assert_func>
 8011eb0:	f100 0514 	add.w	r5, r0, #20
 8011eb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011eb8:	462b      	mov	r3, r5
 8011eba:	2200      	movs	r2, #0
 8011ebc:	4543      	cmp	r3, r8
 8011ebe:	d321      	bcc.n	8011f04 <__multiply+0x98>
 8011ec0:	f104 0314 	add.w	r3, r4, #20
 8011ec4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011ec8:	f109 0314 	add.w	r3, r9, #20
 8011ecc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011ed0:	9202      	str	r2, [sp, #8]
 8011ed2:	1b3a      	subs	r2, r7, r4
 8011ed4:	3a15      	subs	r2, #21
 8011ed6:	f022 0203 	bic.w	r2, r2, #3
 8011eda:	3204      	adds	r2, #4
 8011edc:	f104 0115 	add.w	r1, r4, #21
 8011ee0:	428f      	cmp	r7, r1
 8011ee2:	bf38      	it	cc
 8011ee4:	2204      	movcc	r2, #4
 8011ee6:	9201      	str	r2, [sp, #4]
 8011ee8:	9a02      	ldr	r2, [sp, #8]
 8011eea:	9303      	str	r3, [sp, #12]
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d80c      	bhi.n	8011f0a <__multiply+0x9e>
 8011ef0:	2e00      	cmp	r6, #0
 8011ef2:	dd03      	ble.n	8011efc <__multiply+0x90>
 8011ef4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d05a      	beq.n	8011fb2 <__multiply+0x146>
 8011efc:	6106      	str	r6, [r0, #16]
 8011efe:	b005      	add	sp, #20
 8011f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f04:	f843 2b04 	str.w	r2, [r3], #4
 8011f08:	e7d8      	b.n	8011ebc <__multiply+0x50>
 8011f0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8011f0e:	f1ba 0f00 	cmp.w	sl, #0
 8011f12:	d024      	beq.n	8011f5e <__multiply+0xf2>
 8011f14:	f104 0e14 	add.w	lr, r4, #20
 8011f18:	46a9      	mov	r9, r5
 8011f1a:	f04f 0c00 	mov.w	ip, #0
 8011f1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011f22:	f8d9 1000 	ldr.w	r1, [r9]
 8011f26:	fa1f fb82 	uxth.w	fp, r2
 8011f2a:	b289      	uxth	r1, r1
 8011f2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8011f30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011f34:	f8d9 2000 	ldr.w	r2, [r9]
 8011f38:	4461      	add	r1, ip
 8011f3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011f3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8011f42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011f46:	b289      	uxth	r1, r1
 8011f48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011f4c:	4577      	cmp	r7, lr
 8011f4e:	f849 1b04 	str.w	r1, [r9], #4
 8011f52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011f56:	d8e2      	bhi.n	8011f1e <__multiply+0xb2>
 8011f58:	9a01      	ldr	r2, [sp, #4]
 8011f5a:	f845 c002 	str.w	ip, [r5, r2]
 8011f5e:	9a03      	ldr	r2, [sp, #12]
 8011f60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011f64:	3304      	adds	r3, #4
 8011f66:	f1b9 0f00 	cmp.w	r9, #0
 8011f6a:	d020      	beq.n	8011fae <__multiply+0x142>
 8011f6c:	6829      	ldr	r1, [r5, #0]
 8011f6e:	f104 0c14 	add.w	ip, r4, #20
 8011f72:	46ae      	mov	lr, r5
 8011f74:	f04f 0a00 	mov.w	sl, #0
 8011f78:	f8bc b000 	ldrh.w	fp, [ip]
 8011f7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011f80:	fb09 220b 	mla	r2, r9, fp, r2
 8011f84:	4492      	add	sl, r2
 8011f86:	b289      	uxth	r1, r1
 8011f88:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011f8c:	f84e 1b04 	str.w	r1, [lr], #4
 8011f90:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011f94:	f8be 1000 	ldrh.w	r1, [lr]
 8011f98:	0c12      	lsrs	r2, r2, #16
 8011f9a:	fb09 1102 	mla	r1, r9, r2, r1
 8011f9e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011fa2:	4567      	cmp	r7, ip
 8011fa4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011fa8:	d8e6      	bhi.n	8011f78 <__multiply+0x10c>
 8011faa:	9a01      	ldr	r2, [sp, #4]
 8011fac:	50a9      	str	r1, [r5, r2]
 8011fae:	3504      	adds	r5, #4
 8011fb0:	e79a      	b.n	8011ee8 <__multiply+0x7c>
 8011fb2:	3e01      	subs	r6, #1
 8011fb4:	e79c      	b.n	8011ef0 <__multiply+0x84>
 8011fb6:	bf00      	nop
 8011fb8:	0801438d 	.word	0x0801438d
 8011fbc:	08014418 	.word	0x08014418

08011fc0 <__pow5mult>:
 8011fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fc4:	4615      	mov	r5, r2
 8011fc6:	f012 0203 	ands.w	r2, r2, #3
 8011fca:	4606      	mov	r6, r0
 8011fcc:	460f      	mov	r7, r1
 8011fce:	d007      	beq.n	8011fe0 <__pow5mult+0x20>
 8011fd0:	4c25      	ldr	r4, [pc, #148]	; (8012068 <__pow5mult+0xa8>)
 8011fd2:	3a01      	subs	r2, #1
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011fda:	f7ff fe51 	bl	8011c80 <__multadd>
 8011fde:	4607      	mov	r7, r0
 8011fe0:	10ad      	asrs	r5, r5, #2
 8011fe2:	d03d      	beq.n	8012060 <__pow5mult+0xa0>
 8011fe4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011fe6:	b97c      	cbnz	r4, 8012008 <__pow5mult+0x48>
 8011fe8:	2010      	movs	r0, #16
 8011fea:	f7fc fcb1 	bl	800e950 <malloc>
 8011fee:	4602      	mov	r2, r0
 8011ff0:	6270      	str	r0, [r6, #36]	; 0x24
 8011ff2:	b928      	cbnz	r0, 8012000 <__pow5mult+0x40>
 8011ff4:	4b1d      	ldr	r3, [pc, #116]	; (801206c <__pow5mult+0xac>)
 8011ff6:	481e      	ldr	r0, [pc, #120]	; (8012070 <__pow5mult+0xb0>)
 8011ff8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011ffc:	f7fe fb82 	bl	8010704 <__assert_func>
 8012000:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012004:	6004      	str	r4, [r0, #0]
 8012006:	60c4      	str	r4, [r0, #12]
 8012008:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801200c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012010:	b94c      	cbnz	r4, 8012026 <__pow5mult+0x66>
 8012012:	f240 2171 	movw	r1, #625	; 0x271
 8012016:	4630      	mov	r0, r6
 8012018:	f7ff ff12 	bl	8011e40 <__i2b>
 801201c:	2300      	movs	r3, #0
 801201e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012022:	4604      	mov	r4, r0
 8012024:	6003      	str	r3, [r0, #0]
 8012026:	f04f 0900 	mov.w	r9, #0
 801202a:	07eb      	lsls	r3, r5, #31
 801202c:	d50a      	bpl.n	8012044 <__pow5mult+0x84>
 801202e:	4639      	mov	r1, r7
 8012030:	4622      	mov	r2, r4
 8012032:	4630      	mov	r0, r6
 8012034:	f7ff ff1a 	bl	8011e6c <__multiply>
 8012038:	4639      	mov	r1, r7
 801203a:	4680      	mov	r8, r0
 801203c:	4630      	mov	r0, r6
 801203e:	f7ff fdfd 	bl	8011c3c <_Bfree>
 8012042:	4647      	mov	r7, r8
 8012044:	106d      	asrs	r5, r5, #1
 8012046:	d00b      	beq.n	8012060 <__pow5mult+0xa0>
 8012048:	6820      	ldr	r0, [r4, #0]
 801204a:	b938      	cbnz	r0, 801205c <__pow5mult+0x9c>
 801204c:	4622      	mov	r2, r4
 801204e:	4621      	mov	r1, r4
 8012050:	4630      	mov	r0, r6
 8012052:	f7ff ff0b 	bl	8011e6c <__multiply>
 8012056:	6020      	str	r0, [r4, #0]
 8012058:	f8c0 9000 	str.w	r9, [r0]
 801205c:	4604      	mov	r4, r0
 801205e:	e7e4      	b.n	801202a <__pow5mult+0x6a>
 8012060:	4638      	mov	r0, r7
 8012062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012066:	bf00      	nop
 8012068:	08014568 	.word	0x08014568
 801206c:	08014125 	.word	0x08014125
 8012070:	08014418 	.word	0x08014418

08012074 <__lshift>:
 8012074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012078:	460c      	mov	r4, r1
 801207a:	6849      	ldr	r1, [r1, #4]
 801207c:	6923      	ldr	r3, [r4, #16]
 801207e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012082:	68a3      	ldr	r3, [r4, #8]
 8012084:	4607      	mov	r7, r0
 8012086:	4691      	mov	r9, r2
 8012088:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801208c:	f108 0601 	add.w	r6, r8, #1
 8012090:	42b3      	cmp	r3, r6
 8012092:	db0b      	blt.n	80120ac <__lshift+0x38>
 8012094:	4638      	mov	r0, r7
 8012096:	f7ff fd91 	bl	8011bbc <_Balloc>
 801209a:	4605      	mov	r5, r0
 801209c:	b948      	cbnz	r0, 80120b2 <__lshift+0x3e>
 801209e:	4602      	mov	r2, r0
 80120a0:	4b2a      	ldr	r3, [pc, #168]	; (801214c <__lshift+0xd8>)
 80120a2:	482b      	ldr	r0, [pc, #172]	; (8012150 <__lshift+0xdc>)
 80120a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80120a8:	f7fe fb2c 	bl	8010704 <__assert_func>
 80120ac:	3101      	adds	r1, #1
 80120ae:	005b      	lsls	r3, r3, #1
 80120b0:	e7ee      	b.n	8012090 <__lshift+0x1c>
 80120b2:	2300      	movs	r3, #0
 80120b4:	f100 0114 	add.w	r1, r0, #20
 80120b8:	f100 0210 	add.w	r2, r0, #16
 80120bc:	4618      	mov	r0, r3
 80120be:	4553      	cmp	r3, sl
 80120c0:	db37      	blt.n	8012132 <__lshift+0xbe>
 80120c2:	6920      	ldr	r0, [r4, #16]
 80120c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80120c8:	f104 0314 	add.w	r3, r4, #20
 80120cc:	f019 091f 	ands.w	r9, r9, #31
 80120d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80120d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80120d8:	d02f      	beq.n	801213a <__lshift+0xc6>
 80120da:	f1c9 0e20 	rsb	lr, r9, #32
 80120de:	468a      	mov	sl, r1
 80120e0:	f04f 0c00 	mov.w	ip, #0
 80120e4:	681a      	ldr	r2, [r3, #0]
 80120e6:	fa02 f209 	lsl.w	r2, r2, r9
 80120ea:	ea42 020c 	orr.w	r2, r2, ip
 80120ee:	f84a 2b04 	str.w	r2, [sl], #4
 80120f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80120f6:	4298      	cmp	r0, r3
 80120f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80120fc:	d8f2      	bhi.n	80120e4 <__lshift+0x70>
 80120fe:	1b03      	subs	r3, r0, r4
 8012100:	3b15      	subs	r3, #21
 8012102:	f023 0303 	bic.w	r3, r3, #3
 8012106:	3304      	adds	r3, #4
 8012108:	f104 0215 	add.w	r2, r4, #21
 801210c:	4290      	cmp	r0, r2
 801210e:	bf38      	it	cc
 8012110:	2304      	movcc	r3, #4
 8012112:	f841 c003 	str.w	ip, [r1, r3]
 8012116:	f1bc 0f00 	cmp.w	ip, #0
 801211a:	d001      	beq.n	8012120 <__lshift+0xac>
 801211c:	f108 0602 	add.w	r6, r8, #2
 8012120:	3e01      	subs	r6, #1
 8012122:	4638      	mov	r0, r7
 8012124:	612e      	str	r6, [r5, #16]
 8012126:	4621      	mov	r1, r4
 8012128:	f7ff fd88 	bl	8011c3c <_Bfree>
 801212c:	4628      	mov	r0, r5
 801212e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012132:	f842 0f04 	str.w	r0, [r2, #4]!
 8012136:	3301      	adds	r3, #1
 8012138:	e7c1      	b.n	80120be <__lshift+0x4a>
 801213a:	3904      	subs	r1, #4
 801213c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012140:	f841 2f04 	str.w	r2, [r1, #4]!
 8012144:	4298      	cmp	r0, r3
 8012146:	d8f9      	bhi.n	801213c <__lshift+0xc8>
 8012148:	e7ea      	b.n	8012120 <__lshift+0xac>
 801214a:	bf00      	nop
 801214c:	0801438d 	.word	0x0801438d
 8012150:	08014418 	.word	0x08014418

08012154 <__mcmp>:
 8012154:	b530      	push	{r4, r5, lr}
 8012156:	6902      	ldr	r2, [r0, #16]
 8012158:	690c      	ldr	r4, [r1, #16]
 801215a:	1b12      	subs	r2, r2, r4
 801215c:	d10e      	bne.n	801217c <__mcmp+0x28>
 801215e:	f100 0314 	add.w	r3, r0, #20
 8012162:	3114      	adds	r1, #20
 8012164:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012168:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801216c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012170:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012174:	42a5      	cmp	r5, r4
 8012176:	d003      	beq.n	8012180 <__mcmp+0x2c>
 8012178:	d305      	bcc.n	8012186 <__mcmp+0x32>
 801217a:	2201      	movs	r2, #1
 801217c:	4610      	mov	r0, r2
 801217e:	bd30      	pop	{r4, r5, pc}
 8012180:	4283      	cmp	r3, r0
 8012182:	d3f3      	bcc.n	801216c <__mcmp+0x18>
 8012184:	e7fa      	b.n	801217c <__mcmp+0x28>
 8012186:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801218a:	e7f7      	b.n	801217c <__mcmp+0x28>

0801218c <__mdiff>:
 801218c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012190:	460c      	mov	r4, r1
 8012192:	4606      	mov	r6, r0
 8012194:	4611      	mov	r1, r2
 8012196:	4620      	mov	r0, r4
 8012198:	4690      	mov	r8, r2
 801219a:	f7ff ffdb 	bl	8012154 <__mcmp>
 801219e:	1e05      	subs	r5, r0, #0
 80121a0:	d110      	bne.n	80121c4 <__mdiff+0x38>
 80121a2:	4629      	mov	r1, r5
 80121a4:	4630      	mov	r0, r6
 80121a6:	f7ff fd09 	bl	8011bbc <_Balloc>
 80121aa:	b930      	cbnz	r0, 80121ba <__mdiff+0x2e>
 80121ac:	4b3a      	ldr	r3, [pc, #232]	; (8012298 <__mdiff+0x10c>)
 80121ae:	4602      	mov	r2, r0
 80121b0:	f240 2132 	movw	r1, #562	; 0x232
 80121b4:	4839      	ldr	r0, [pc, #228]	; (801229c <__mdiff+0x110>)
 80121b6:	f7fe faa5 	bl	8010704 <__assert_func>
 80121ba:	2301      	movs	r3, #1
 80121bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80121c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121c4:	bfa4      	itt	ge
 80121c6:	4643      	movge	r3, r8
 80121c8:	46a0      	movge	r8, r4
 80121ca:	4630      	mov	r0, r6
 80121cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80121d0:	bfa6      	itte	ge
 80121d2:	461c      	movge	r4, r3
 80121d4:	2500      	movge	r5, #0
 80121d6:	2501      	movlt	r5, #1
 80121d8:	f7ff fcf0 	bl	8011bbc <_Balloc>
 80121dc:	b920      	cbnz	r0, 80121e8 <__mdiff+0x5c>
 80121de:	4b2e      	ldr	r3, [pc, #184]	; (8012298 <__mdiff+0x10c>)
 80121e0:	4602      	mov	r2, r0
 80121e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80121e6:	e7e5      	b.n	80121b4 <__mdiff+0x28>
 80121e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80121ec:	6926      	ldr	r6, [r4, #16]
 80121ee:	60c5      	str	r5, [r0, #12]
 80121f0:	f104 0914 	add.w	r9, r4, #20
 80121f4:	f108 0514 	add.w	r5, r8, #20
 80121f8:	f100 0e14 	add.w	lr, r0, #20
 80121fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012200:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012204:	f108 0210 	add.w	r2, r8, #16
 8012208:	46f2      	mov	sl, lr
 801220a:	2100      	movs	r1, #0
 801220c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012210:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012214:	fa1f f883 	uxth.w	r8, r3
 8012218:	fa11 f18b 	uxtah	r1, r1, fp
 801221c:	0c1b      	lsrs	r3, r3, #16
 801221e:	eba1 0808 	sub.w	r8, r1, r8
 8012222:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012226:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801222a:	fa1f f888 	uxth.w	r8, r8
 801222e:	1419      	asrs	r1, r3, #16
 8012230:	454e      	cmp	r6, r9
 8012232:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012236:	f84a 3b04 	str.w	r3, [sl], #4
 801223a:	d8e7      	bhi.n	801220c <__mdiff+0x80>
 801223c:	1b33      	subs	r3, r6, r4
 801223e:	3b15      	subs	r3, #21
 8012240:	f023 0303 	bic.w	r3, r3, #3
 8012244:	3304      	adds	r3, #4
 8012246:	3415      	adds	r4, #21
 8012248:	42a6      	cmp	r6, r4
 801224a:	bf38      	it	cc
 801224c:	2304      	movcc	r3, #4
 801224e:	441d      	add	r5, r3
 8012250:	4473      	add	r3, lr
 8012252:	469e      	mov	lr, r3
 8012254:	462e      	mov	r6, r5
 8012256:	4566      	cmp	r6, ip
 8012258:	d30e      	bcc.n	8012278 <__mdiff+0xec>
 801225a:	f10c 0203 	add.w	r2, ip, #3
 801225e:	1b52      	subs	r2, r2, r5
 8012260:	f022 0203 	bic.w	r2, r2, #3
 8012264:	3d03      	subs	r5, #3
 8012266:	45ac      	cmp	ip, r5
 8012268:	bf38      	it	cc
 801226a:	2200      	movcc	r2, #0
 801226c:	441a      	add	r2, r3
 801226e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012272:	b17b      	cbz	r3, 8012294 <__mdiff+0x108>
 8012274:	6107      	str	r7, [r0, #16]
 8012276:	e7a3      	b.n	80121c0 <__mdiff+0x34>
 8012278:	f856 8b04 	ldr.w	r8, [r6], #4
 801227c:	fa11 f288 	uxtah	r2, r1, r8
 8012280:	1414      	asrs	r4, r2, #16
 8012282:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012286:	b292      	uxth	r2, r2
 8012288:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801228c:	f84e 2b04 	str.w	r2, [lr], #4
 8012290:	1421      	asrs	r1, r4, #16
 8012292:	e7e0      	b.n	8012256 <__mdiff+0xca>
 8012294:	3f01      	subs	r7, #1
 8012296:	e7ea      	b.n	801226e <__mdiff+0xe2>
 8012298:	0801438d 	.word	0x0801438d
 801229c:	08014418 	.word	0x08014418

080122a0 <__ulp>:
 80122a0:	b082      	sub	sp, #8
 80122a2:	ed8d 0b00 	vstr	d0, [sp]
 80122a6:	9b01      	ldr	r3, [sp, #4]
 80122a8:	4912      	ldr	r1, [pc, #72]	; (80122f4 <__ulp+0x54>)
 80122aa:	4019      	ands	r1, r3
 80122ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80122b0:	2900      	cmp	r1, #0
 80122b2:	dd05      	ble.n	80122c0 <__ulp+0x20>
 80122b4:	2200      	movs	r2, #0
 80122b6:	460b      	mov	r3, r1
 80122b8:	ec43 2b10 	vmov	d0, r2, r3
 80122bc:	b002      	add	sp, #8
 80122be:	4770      	bx	lr
 80122c0:	4249      	negs	r1, r1
 80122c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80122c6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80122ca:	f04f 0200 	mov.w	r2, #0
 80122ce:	f04f 0300 	mov.w	r3, #0
 80122d2:	da04      	bge.n	80122de <__ulp+0x3e>
 80122d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80122d8:	fa41 f300 	asr.w	r3, r1, r0
 80122dc:	e7ec      	b.n	80122b8 <__ulp+0x18>
 80122de:	f1a0 0114 	sub.w	r1, r0, #20
 80122e2:	291e      	cmp	r1, #30
 80122e4:	bfda      	itte	le
 80122e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80122ea:	fa20 f101 	lsrle.w	r1, r0, r1
 80122ee:	2101      	movgt	r1, #1
 80122f0:	460a      	mov	r2, r1
 80122f2:	e7e1      	b.n	80122b8 <__ulp+0x18>
 80122f4:	7ff00000 	.word	0x7ff00000

080122f8 <__b2d>:
 80122f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122fa:	6905      	ldr	r5, [r0, #16]
 80122fc:	f100 0714 	add.w	r7, r0, #20
 8012300:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012304:	1f2e      	subs	r6, r5, #4
 8012306:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801230a:	4620      	mov	r0, r4
 801230c:	f7ff fd48 	bl	8011da0 <__hi0bits>
 8012310:	f1c0 0320 	rsb	r3, r0, #32
 8012314:	280a      	cmp	r0, #10
 8012316:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012394 <__b2d+0x9c>
 801231a:	600b      	str	r3, [r1, #0]
 801231c:	dc14      	bgt.n	8012348 <__b2d+0x50>
 801231e:	f1c0 0e0b 	rsb	lr, r0, #11
 8012322:	fa24 f10e 	lsr.w	r1, r4, lr
 8012326:	42b7      	cmp	r7, r6
 8012328:	ea41 030c 	orr.w	r3, r1, ip
 801232c:	bf34      	ite	cc
 801232e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012332:	2100      	movcs	r1, #0
 8012334:	3015      	adds	r0, #21
 8012336:	fa04 f000 	lsl.w	r0, r4, r0
 801233a:	fa21 f10e 	lsr.w	r1, r1, lr
 801233e:	ea40 0201 	orr.w	r2, r0, r1
 8012342:	ec43 2b10 	vmov	d0, r2, r3
 8012346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012348:	42b7      	cmp	r7, r6
 801234a:	bf3a      	itte	cc
 801234c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012350:	f1a5 0608 	subcc.w	r6, r5, #8
 8012354:	2100      	movcs	r1, #0
 8012356:	380b      	subs	r0, #11
 8012358:	d017      	beq.n	801238a <__b2d+0x92>
 801235a:	f1c0 0c20 	rsb	ip, r0, #32
 801235e:	fa04 f500 	lsl.w	r5, r4, r0
 8012362:	42be      	cmp	r6, r7
 8012364:	fa21 f40c 	lsr.w	r4, r1, ip
 8012368:	ea45 0504 	orr.w	r5, r5, r4
 801236c:	bf8c      	ite	hi
 801236e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012372:	2400      	movls	r4, #0
 8012374:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012378:	fa01 f000 	lsl.w	r0, r1, r0
 801237c:	fa24 f40c 	lsr.w	r4, r4, ip
 8012380:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012384:	ea40 0204 	orr.w	r2, r0, r4
 8012388:	e7db      	b.n	8012342 <__b2d+0x4a>
 801238a:	ea44 030c 	orr.w	r3, r4, ip
 801238e:	460a      	mov	r2, r1
 8012390:	e7d7      	b.n	8012342 <__b2d+0x4a>
 8012392:	bf00      	nop
 8012394:	3ff00000 	.word	0x3ff00000

08012398 <__d2b>:
 8012398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801239c:	4689      	mov	r9, r1
 801239e:	2101      	movs	r1, #1
 80123a0:	ec57 6b10 	vmov	r6, r7, d0
 80123a4:	4690      	mov	r8, r2
 80123a6:	f7ff fc09 	bl	8011bbc <_Balloc>
 80123aa:	4604      	mov	r4, r0
 80123ac:	b930      	cbnz	r0, 80123bc <__d2b+0x24>
 80123ae:	4602      	mov	r2, r0
 80123b0:	4b25      	ldr	r3, [pc, #148]	; (8012448 <__d2b+0xb0>)
 80123b2:	4826      	ldr	r0, [pc, #152]	; (801244c <__d2b+0xb4>)
 80123b4:	f240 310a 	movw	r1, #778	; 0x30a
 80123b8:	f7fe f9a4 	bl	8010704 <__assert_func>
 80123bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80123c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80123c4:	bb35      	cbnz	r5, 8012414 <__d2b+0x7c>
 80123c6:	2e00      	cmp	r6, #0
 80123c8:	9301      	str	r3, [sp, #4]
 80123ca:	d028      	beq.n	801241e <__d2b+0x86>
 80123cc:	4668      	mov	r0, sp
 80123ce:	9600      	str	r6, [sp, #0]
 80123d0:	f7ff fd06 	bl	8011de0 <__lo0bits>
 80123d4:	9900      	ldr	r1, [sp, #0]
 80123d6:	b300      	cbz	r0, 801241a <__d2b+0x82>
 80123d8:	9a01      	ldr	r2, [sp, #4]
 80123da:	f1c0 0320 	rsb	r3, r0, #32
 80123de:	fa02 f303 	lsl.w	r3, r2, r3
 80123e2:	430b      	orrs	r3, r1
 80123e4:	40c2      	lsrs	r2, r0
 80123e6:	6163      	str	r3, [r4, #20]
 80123e8:	9201      	str	r2, [sp, #4]
 80123ea:	9b01      	ldr	r3, [sp, #4]
 80123ec:	61a3      	str	r3, [r4, #24]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	bf14      	ite	ne
 80123f2:	2202      	movne	r2, #2
 80123f4:	2201      	moveq	r2, #1
 80123f6:	6122      	str	r2, [r4, #16]
 80123f8:	b1d5      	cbz	r5, 8012430 <__d2b+0x98>
 80123fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80123fe:	4405      	add	r5, r0
 8012400:	f8c9 5000 	str.w	r5, [r9]
 8012404:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012408:	f8c8 0000 	str.w	r0, [r8]
 801240c:	4620      	mov	r0, r4
 801240e:	b003      	add	sp, #12
 8012410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012414:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012418:	e7d5      	b.n	80123c6 <__d2b+0x2e>
 801241a:	6161      	str	r1, [r4, #20]
 801241c:	e7e5      	b.n	80123ea <__d2b+0x52>
 801241e:	a801      	add	r0, sp, #4
 8012420:	f7ff fcde 	bl	8011de0 <__lo0bits>
 8012424:	9b01      	ldr	r3, [sp, #4]
 8012426:	6163      	str	r3, [r4, #20]
 8012428:	2201      	movs	r2, #1
 801242a:	6122      	str	r2, [r4, #16]
 801242c:	3020      	adds	r0, #32
 801242e:	e7e3      	b.n	80123f8 <__d2b+0x60>
 8012430:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012434:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012438:	f8c9 0000 	str.w	r0, [r9]
 801243c:	6918      	ldr	r0, [r3, #16]
 801243e:	f7ff fcaf 	bl	8011da0 <__hi0bits>
 8012442:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012446:	e7df      	b.n	8012408 <__d2b+0x70>
 8012448:	0801438d 	.word	0x0801438d
 801244c:	08014418 	.word	0x08014418

08012450 <__ratio>:
 8012450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012454:	4688      	mov	r8, r1
 8012456:	4669      	mov	r1, sp
 8012458:	4681      	mov	r9, r0
 801245a:	f7ff ff4d 	bl	80122f8 <__b2d>
 801245e:	a901      	add	r1, sp, #4
 8012460:	4640      	mov	r0, r8
 8012462:	ec55 4b10 	vmov	r4, r5, d0
 8012466:	f7ff ff47 	bl	80122f8 <__b2d>
 801246a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801246e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012472:	eba3 0c02 	sub.w	ip, r3, r2
 8012476:	e9dd 3200 	ldrd	r3, r2, [sp]
 801247a:	1a9b      	subs	r3, r3, r2
 801247c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012480:	ec51 0b10 	vmov	r0, r1, d0
 8012484:	2b00      	cmp	r3, #0
 8012486:	bfd6      	itet	le
 8012488:	460a      	movle	r2, r1
 801248a:	462a      	movgt	r2, r5
 801248c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012490:	468b      	mov	fp, r1
 8012492:	462f      	mov	r7, r5
 8012494:	bfd4      	ite	le
 8012496:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801249a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801249e:	4620      	mov	r0, r4
 80124a0:	ee10 2a10 	vmov	r2, s0
 80124a4:	465b      	mov	r3, fp
 80124a6:	4639      	mov	r1, r7
 80124a8:	f7ee f9f8 	bl	800089c <__aeabi_ddiv>
 80124ac:	ec41 0b10 	vmov	d0, r0, r1
 80124b0:	b003      	add	sp, #12
 80124b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080124b6 <__copybits>:
 80124b6:	3901      	subs	r1, #1
 80124b8:	b570      	push	{r4, r5, r6, lr}
 80124ba:	1149      	asrs	r1, r1, #5
 80124bc:	6914      	ldr	r4, [r2, #16]
 80124be:	3101      	adds	r1, #1
 80124c0:	f102 0314 	add.w	r3, r2, #20
 80124c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80124c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80124cc:	1f05      	subs	r5, r0, #4
 80124ce:	42a3      	cmp	r3, r4
 80124d0:	d30c      	bcc.n	80124ec <__copybits+0x36>
 80124d2:	1aa3      	subs	r3, r4, r2
 80124d4:	3b11      	subs	r3, #17
 80124d6:	f023 0303 	bic.w	r3, r3, #3
 80124da:	3211      	adds	r2, #17
 80124dc:	42a2      	cmp	r2, r4
 80124de:	bf88      	it	hi
 80124e0:	2300      	movhi	r3, #0
 80124e2:	4418      	add	r0, r3
 80124e4:	2300      	movs	r3, #0
 80124e6:	4288      	cmp	r0, r1
 80124e8:	d305      	bcc.n	80124f6 <__copybits+0x40>
 80124ea:	bd70      	pop	{r4, r5, r6, pc}
 80124ec:	f853 6b04 	ldr.w	r6, [r3], #4
 80124f0:	f845 6f04 	str.w	r6, [r5, #4]!
 80124f4:	e7eb      	b.n	80124ce <__copybits+0x18>
 80124f6:	f840 3b04 	str.w	r3, [r0], #4
 80124fa:	e7f4      	b.n	80124e6 <__copybits+0x30>

080124fc <__any_on>:
 80124fc:	f100 0214 	add.w	r2, r0, #20
 8012500:	6900      	ldr	r0, [r0, #16]
 8012502:	114b      	asrs	r3, r1, #5
 8012504:	4298      	cmp	r0, r3
 8012506:	b510      	push	{r4, lr}
 8012508:	db11      	blt.n	801252e <__any_on+0x32>
 801250a:	dd0a      	ble.n	8012522 <__any_on+0x26>
 801250c:	f011 011f 	ands.w	r1, r1, #31
 8012510:	d007      	beq.n	8012522 <__any_on+0x26>
 8012512:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012516:	fa24 f001 	lsr.w	r0, r4, r1
 801251a:	fa00 f101 	lsl.w	r1, r0, r1
 801251e:	428c      	cmp	r4, r1
 8012520:	d10b      	bne.n	801253a <__any_on+0x3e>
 8012522:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012526:	4293      	cmp	r3, r2
 8012528:	d803      	bhi.n	8012532 <__any_on+0x36>
 801252a:	2000      	movs	r0, #0
 801252c:	bd10      	pop	{r4, pc}
 801252e:	4603      	mov	r3, r0
 8012530:	e7f7      	b.n	8012522 <__any_on+0x26>
 8012532:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012536:	2900      	cmp	r1, #0
 8012538:	d0f5      	beq.n	8012526 <__any_on+0x2a>
 801253a:	2001      	movs	r0, #1
 801253c:	e7f6      	b.n	801252c <__any_on+0x30>

0801253e <_calloc_r>:
 801253e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012540:	fba1 2402 	umull	r2, r4, r1, r2
 8012544:	b94c      	cbnz	r4, 801255a <_calloc_r+0x1c>
 8012546:	4611      	mov	r1, r2
 8012548:	9201      	str	r2, [sp, #4]
 801254a:	f7fc fa85 	bl	800ea58 <_malloc_r>
 801254e:	9a01      	ldr	r2, [sp, #4]
 8012550:	4605      	mov	r5, r0
 8012552:	b930      	cbnz	r0, 8012562 <_calloc_r+0x24>
 8012554:	4628      	mov	r0, r5
 8012556:	b003      	add	sp, #12
 8012558:	bd30      	pop	{r4, r5, pc}
 801255a:	220c      	movs	r2, #12
 801255c:	6002      	str	r2, [r0, #0]
 801255e:	2500      	movs	r5, #0
 8012560:	e7f8      	b.n	8012554 <_calloc_r+0x16>
 8012562:	4621      	mov	r1, r4
 8012564:	f7fc fa04 	bl	800e970 <memset>
 8012568:	e7f4      	b.n	8012554 <_calloc_r+0x16>

0801256a <__ssputs_r>:
 801256a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801256e:	688e      	ldr	r6, [r1, #8]
 8012570:	429e      	cmp	r6, r3
 8012572:	4682      	mov	sl, r0
 8012574:	460c      	mov	r4, r1
 8012576:	4690      	mov	r8, r2
 8012578:	461f      	mov	r7, r3
 801257a:	d838      	bhi.n	80125ee <__ssputs_r+0x84>
 801257c:	898a      	ldrh	r2, [r1, #12]
 801257e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012582:	d032      	beq.n	80125ea <__ssputs_r+0x80>
 8012584:	6825      	ldr	r5, [r4, #0]
 8012586:	6909      	ldr	r1, [r1, #16]
 8012588:	eba5 0901 	sub.w	r9, r5, r1
 801258c:	6965      	ldr	r5, [r4, #20]
 801258e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012592:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012596:	3301      	adds	r3, #1
 8012598:	444b      	add	r3, r9
 801259a:	106d      	asrs	r5, r5, #1
 801259c:	429d      	cmp	r5, r3
 801259e:	bf38      	it	cc
 80125a0:	461d      	movcc	r5, r3
 80125a2:	0553      	lsls	r3, r2, #21
 80125a4:	d531      	bpl.n	801260a <__ssputs_r+0xa0>
 80125a6:	4629      	mov	r1, r5
 80125a8:	f7fc fa56 	bl	800ea58 <_malloc_r>
 80125ac:	4606      	mov	r6, r0
 80125ae:	b950      	cbnz	r0, 80125c6 <__ssputs_r+0x5c>
 80125b0:	230c      	movs	r3, #12
 80125b2:	f8ca 3000 	str.w	r3, [sl]
 80125b6:	89a3      	ldrh	r3, [r4, #12]
 80125b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80125bc:	81a3      	strh	r3, [r4, #12]
 80125be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80125c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125c6:	6921      	ldr	r1, [r4, #16]
 80125c8:	464a      	mov	r2, r9
 80125ca:	f7ff fadd 	bl	8011b88 <memcpy>
 80125ce:	89a3      	ldrh	r3, [r4, #12]
 80125d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80125d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125d8:	81a3      	strh	r3, [r4, #12]
 80125da:	6126      	str	r6, [r4, #16]
 80125dc:	6165      	str	r5, [r4, #20]
 80125de:	444e      	add	r6, r9
 80125e0:	eba5 0509 	sub.w	r5, r5, r9
 80125e4:	6026      	str	r6, [r4, #0]
 80125e6:	60a5      	str	r5, [r4, #8]
 80125e8:	463e      	mov	r6, r7
 80125ea:	42be      	cmp	r6, r7
 80125ec:	d900      	bls.n	80125f0 <__ssputs_r+0x86>
 80125ee:	463e      	mov	r6, r7
 80125f0:	6820      	ldr	r0, [r4, #0]
 80125f2:	4632      	mov	r2, r6
 80125f4:	4641      	mov	r1, r8
 80125f6:	f000 fd81 	bl	80130fc <memmove>
 80125fa:	68a3      	ldr	r3, [r4, #8]
 80125fc:	1b9b      	subs	r3, r3, r6
 80125fe:	60a3      	str	r3, [r4, #8]
 8012600:	6823      	ldr	r3, [r4, #0]
 8012602:	4433      	add	r3, r6
 8012604:	6023      	str	r3, [r4, #0]
 8012606:	2000      	movs	r0, #0
 8012608:	e7db      	b.n	80125c2 <__ssputs_r+0x58>
 801260a:	462a      	mov	r2, r5
 801260c:	f000 fd90 	bl	8013130 <_realloc_r>
 8012610:	4606      	mov	r6, r0
 8012612:	2800      	cmp	r0, #0
 8012614:	d1e1      	bne.n	80125da <__ssputs_r+0x70>
 8012616:	6921      	ldr	r1, [r4, #16]
 8012618:	4650      	mov	r0, sl
 801261a:	f7fc f9b1 	bl	800e980 <_free_r>
 801261e:	e7c7      	b.n	80125b0 <__ssputs_r+0x46>

08012620 <_svfiprintf_r>:
 8012620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012624:	4698      	mov	r8, r3
 8012626:	898b      	ldrh	r3, [r1, #12]
 8012628:	061b      	lsls	r3, r3, #24
 801262a:	b09d      	sub	sp, #116	; 0x74
 801262c:	4607      	mov	r7, r0
 801262e:	460d      	mov	r5, r1
 8012630:	4614      	mov	r4, r2
 8012632:	d50e      	bpl.n	8012652 <_svfiprintf_r+0x32>
 8012634:	690b      	ldr	r3, [r1, #16]
 8012636:	b963      	cbnz	r3, 8012652 <_svfiprintf_r+0x32>
 8012638:	2140      	movs	r1, #64	; 0x40
 801263a:	f7fc fa0d 	bl	800ea58 <_malloc_r>
 801263e:	6028      	str	r0, [r5, #0]
 8012640:	6128      	str	r0, [r5, #16]
 8012642:	b920      	cbnz	r0, 801264e <_svfiprintf_r+0x2e>
 8012644:	230c      	movs	r3, #12
 8012646:	603b      	str	r3, [r7, #0]
 8012648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801264c:	e0d1      	b.n	80127f2 <_svfiprintf_r+0x1d2>
 801264e:	2340      	movs	r3, #64	; 0x40
 8012650:	616b      	str	r3, [r5, #20]
 8012652:	2300      	movs	r3, #0
 8012654:	9309      	str	r3, [sp, #36]	; 0x24
 8012656:	2320      	movs	r3, #32
 8012658:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801265c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012660:	2330      	movs	r3, #48	; 0x30
 8012662:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801280c <_svfiprintf_r+0x1ec>
 8012666:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801266a:	f04f 0901 	mov.w	r9, #1
 801266e:	4623      	mov	r3, r4
 8012670:	469a      	mov	sl, r3
 8012672:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012676:	b10a      	cbz	r2, 801267c <_svfiprintf_r+0x5c>
 8012678:	2a25      	cmp	r2, #37	; 0x25
 801267a:	d1f9      	bne.n	8012670 <_svfiprintf_r+0x50>
 801267c:	ebba 0b04 	subs.w	fp, sl, r4
 8012680:	d00b      	beq.n	801269a <_svfiprintf_r+0x7a>
 8012682:	465b      	mov	r3, fp
 8012684:	4622      	mov	r2, r4
 8012686:	4629      	mov	r1, r5
 8012688:	4638      	mov	r0, r7
 801268a:	f7ff ff6e 	bl	801256a <__ssputs_r>
 801268e:	3001      	adds	r0, #1
 8012690:	f000 80aa 	beq.w	80127e8 <_svfiprintf_r+0x1c8>
 8012694:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012696:	445a      	add	r2, fp
 8012698:	9209      	str	r2, [sp, #36]	; 0x24
 801269a:	f89a 3000 	ldrb.w	r3, [sl]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	f000 80a2 	beq.w	80127e8 <_svfiprintf_r+0x1c8>
 80126a4:	2300      	movs	r3, #0
 80126a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80126aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126ae:	f10a 0a01 	add.w	sl, sl, #1
 80126b2:	9304      	str	r3, [sp, #16]
 80126b4:	9307      	str	r3, [sp, #28]
 80126b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80126ba:	931a      	str	r3, [sp, #104]	; 0x68
 80126bc:	4654      	mov	r4, sl
 80126be:	2205      	movs	r2, #5
 80126c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126c4:	4851      	ldr	r0, [pc, #324]	; (801280c <_svfiprintf_r+0x1ec>)
 80126c6:	f7ed fdb3 	bl	8000230 <memchr>
 80126ca:	9a04      	ldr	r2, [sp, #16]
 80126cc:	b9d8      	cbnz	r0, 8012706 <_svfiprintf_r+0xe6>
 80126ce:	06d0      	lsls	r0, r2, #27
 80126d0:	bf44      	itt	mi
 80126d2:	2320      	movmi	r3, #32
 80126d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80126d8:	0711      	lsls	r1, r2, #28
 80126da:	bf44      	itt	mi
 80126dc:	232b      	movmi	r3, #43	; 0x2b
 80126de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80126e2:	f89a 3000 	ldrb.w	r3, [sl]
 80126e6:	2b2a      	cmp	r3, #42	; 0x2a
 80126e8:	d015      	beq.n	8012716 <_svfiprintf_r+0xf6>
 80126ea:	9a07      	ldr	r2, [sp, #28]
 80126ec:	4654      	mov	r4, sl
 80126ee:	2000      	movs	r0, #0
 80126f0:	f04f 0c0a 	mov.w	ip, #10
 80126f4:	4621      	mov	r1, r4
 80126f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80126fa:	3b30      	subs	r3, #48	; 0x30
 80126fc:	2b09      	cmp	r3, #9
 80126fe:	d94e      	bls.n	801279e <_svfiprintf_r+0x17e>
 8012700:	b1b0      	cbz	r0, 8012730 <_svfiprintf_r+0x110>
 8012702:	9207      	str	r2, [sp, #28]
 8012704:	e014      	b.n	8012730 <_svfiprintf_r+0x110>
 8012706:	eba0 0308 	sub.w	r3, r0, r8
 801270a:	fa09 f303 	lsl.w	r3, r9, r3
 801270e:	4313      	orrs	r3, r2
 8012710:	9304      	str	r3, [sp, #16]
 8012712:	46a2      	mov	sl, r4
 8012714:	e7d2      	b.n	80126bc <_svfiprintf_r+0x9c>
 8012716:	9b03      	ldr	r3, [sp, #12]
 8012718:	1d19      	adds	r1, r3, #4
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	9103      	str	r1, [sp, #12]
 801271e:	2b00      	cmp	r3, #0
 8012720:	bfbb      	ittet	lt
 8012722:	425b      	neglt	r3, r3
 8012724:	f042 0202 	orrlt.w	r2, r2, #2
 8012728:	9307      	strge	r3, [sp, #28]
 801272a:	9307      	strlt	r3, [sp, #28]
 801272c:	bfb8      	it	lt
 801272e:	9204      	strlt	r2, [sp, #16]
 8012730:	7823      	ldrb	r3, [r4, #0]
 8012732:	2b2e      	cmp	r3, #46	; 0x2e
 8012734:	d10c      	bne.n	8012750 <_svfiprintf_r+0x130>
 8012736:	7863      	ldrb	r3, [r4, #1]
 8012738:	2b2a      	cmp	r3, #42	; 0x2a
 801273a:	d135      	bne.n	80127a8 <_svfiprintf_r+0x188>
 801273c:	9b03      	ldr	r3, [sp, #12]
 801273e:	1d1a      	adds	r2, r3, #4
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	9203      	str	r2, [sp, #12]
 8012744:	2b00      	cmp	r3, #0
 8012746:	bfb8      	it	lt
 8012748:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801274c:	3402      	adds	r4, #2
 801274e:	9305      	str	r3, [sp, #20]
 8012750:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801281c <_svfiprintf_r+0x1fc>
 8012754:	7821      	ldrb	r1, [r4, #0]
 8012756:	2203      	movs	r2, #3
 8012758:	4650      	mov	r0, sl
 801275a:	f7ed fd69 	bl	8000230 <memchr>
 801275e:	b140      	cbz	r0, 8012772 <_svfiprintf_r+0x152>
 8012760:	2340      	movs	r3, #64	; 0x40
 8012762:	eba0 000a 	sub.w	r0, r0, sl
 8012766:	fa03 f000 	lsl.w	r0, r3, r0
 801276a:	9b04      	ldr	r3, [sp, #16]
 801276c:	4303      	orrs	r3, r0
 801276e:	3401      	adds	r4, #1
 8012770:	9304      	str	r3, [sp, #16]
 8012772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012776:	4826      	ldr	r0, [pc, #152]	; (8012810 <_svfiprintf_r+0x1f0>)
 8012778:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801277c:	2206      	movs	r2, #6
 801277e:	f7ed fd57 	bl	8000230 <memchr>
 8012782:	2800      	cmp	r0, #0
 8012784:	d038      	beq.n	80127f8 <_svfiprintf_r+0x1d8>
 8012786:	4b23      	ldr	r3, [pc, #140]	; (8012814 <_svfiprintf_r+0x1f4>)
 8012788:	bb1b      	cbnz	r3, 80127d2 <_svfiprintf_r+0x1b2>
 801278a:	9b03      	ldr	r3, [sp, #12]
 801278c:	3307      	adds	r3, #7
 801278e:	f023 0307 	bic.w	r3, r3, #7
 8012792:	3308      	adds	r3, #8
 8012794:	9303      	str	r3, [sp, #12]
 8012796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012798:	4433      	add	r3, r6
 801279a:	9309      	str	r3, [sp, #36]	; 0x24
 801279c:	e767      	b.n	801266e <_svfiprintf_r+0x4e>
 801279e:	fb0c 3202 	mla	r2, ip, r2, r3
 80127a2:	460c      	mov	r4, r1
 80127a4:	2001      	movs	r0, #1
 80127a6:	e7a5      	b.n	80126f4 <_svfiprintf_r+0xd4>
 80127a8:	2300      	movs	r3, #0
 80127aa:	3401      	adds	r4, #1
 80127ac:	9305      	str	r3, [sp, #20]
 80127ae:	4619      	mov	r1, r3
 80127b0:	f04f 0c0a 	mov.w	ip, #10
 80127b4:	4620      	mov	r0, r4
 80127b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127ba:	3a30      	subs	r2, #48	; 0x30
 80127bc:	2a09      	cmp	r2, #9
 80127be:	d903      	bls.n	80127c8 <_svfiprintf_r+0x1a8>
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d0c5      	beq.n	8012750 <_svfiprintf_r+0x130>
 80127c4:	9105      	str	r1, [sp, #20]
 80127c6:	e7c3      	b.n	8012750 <_svfiprintf_r+0x130>
 80127c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80127cc:	4604      	mov	r4, r0
 80127ce:	2301      	movs	r3, #1
 80127d0:	e7f0      	b.n	80127b4 <_svfiprintf_r+0x194>
 80127d2:	ab03      	add	r3, sp, #12
 80127d4:	9300      	str	r3, [sp, #0]
 80127d6:	462a      	mov	r2, r5
 80127d8:	4b0f      	ldr	r3, [pc, #60]	; (8012818 <_svfiprintf_r+0x1f8>)
 80127da:	a904      	add	r1, sp, #16
 80127dc:	4638      	mov	r0, r7
 80127de:	f7fc fa4f 	bl	800ec80 <_printf_float>
 80127e2:	1c42      	adds	r2, r0, #1
 80127e4:	4606      	mov	r6, r0
 80127e6:	d1d6      	bne.n	8012796 <_svfiprintf_r+0x176>
 80127e8:	89ab      	ldrh	r3, [r5, #12]
 80127ea:	065b      	lsls	r3, r3, #25
 80127ec:	f53f af2c 	bmi.w	8012648 <_svfiprintf_r+0x28>
 80127f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80127f2:	b01d      	add	sp, #116	; 0x74
 80127f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127f8:	ab03      	add	r3, sp, #12
 80127fa:	9300      	str	r3, [sp, #0]
 80127fc:	462a      	mov	r2, r5
 80127fe:	4b06      	ldr	r3, [pc, #24]	; (8012818 <_svfiprintf_r+0x1f8>)
 8012800:	a904      	add	r1, sp, #16
 8012802:	4638      	mov	r0, r7
 8012804:	f7fc fce0 	bl	800f1c8 <_printf_i>
 8012808:	e7eb      	b.n	80127e2 <_svfiprintf_r+0x1c2>
 801280a:	bf00      	nop
 801280c:	08014574 	.word	0x08014574
 8012810:	0801457e 	.word	0x0801457e
 8012814:	0800ec81 	.word	0x0800ec81
 8012818:	0801256b 	.word	0x0801256b
 801281c:	0801457a 	.word	0x0801457a

08012820 <__sfputc_r>:
 8012820:	6893      	ldr	r3, [r2, #8]
 8012822:	3b01      	subs	r3, #1
 8012824:	2b00      	cmp	r3, #0
 8012826:	b410      	push	{r4}
 8012828:	6093      	str	r3, [r2, #8]
 801282a:	da08      	bge.n	801283e <__sfputc_r+0x1e>
 801282c:	6994      	ldr	r4, [r2, #24]
 801282e:	42a3      	cmp	r3, r4
 8012830:	db01      	blt.n	8012836 <__sfputc_r+0x16>
 8012832:	290a      	cmp	r1, #10
 8012834:	d103      	bne.n	801283e <__sfputc_r+0x1e>
 8012836:	f85d 4b04 	ldr.w	r4, [sp], #4
 801283a:	f000 b969 	b.w	8012b10 <__swbuf_r>
 801283e:	6813      	ldr	r3, [r2, #0]
 8012840:	1c58      	adds	r0, r3, #1
 8012842:	6010      	str	r0, [r2, #0]
 8012844:	7019      	strb	r1, [r3, #0]
 8012846:	4608      	mov	r0, r1
 8012848:	f85d 4b04 	ldr.w	r4, [sp], #4
 801284c:	4770      	bx	lr

0801284e <__sfputs_r>:
 801284e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012850:	4606      	mov	r6, r0
 8012852:	460f      	mov	r7, r1
 8012854:	4614      	mov	r4, r2
 8012856:	18d5      	adds	r5, r2, r3
 8012858:	42ac      	cmp	r4, r5
 801285a:	d101      	bne.n	8012860 <__sfputs_r+0x12>
 801285c:	2000      	movs	r0, #0
 801285e:	e007      	b.n	8012870 <__sfputs_r+0x22>
 8012860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012864:	463a      	mov	r2, r7
 8012866:	4630      	mov	r0, r6
 8012868:	f7ff ffda 	bl	8012820 <__sfputc_r>
 801286c:	1c43      	adds	r3, r0, #1
 801286e:	d1f3      	bne.n	8012858 <__sfputs_r+0xa>
 8012870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012874 <_vfiprintf_r>:
 8012874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012878:	460d      	mov	r5, r1
 801287a:	b09d      	sub	sp, #116	; 0x74
 801287c:	4614      	mov	r4, r2
 801287e:	4698      	mov	r8, r3
 8012880:	4606      	mov	r6, r0
 8012882:	b118      	cbz	r0, 801288c <_vfiprintf_r+0x18>
 8012884:	6983      	ldr	r3, [r0, #24]
 8012886:	b90b      	cbnz	r3, 801288c <_vfiprintf_r+0x18>
 8012888:	f000 fb32 	bl	8012ef0 <__sinit>
 801288c:	4b89      	ldr	r3, [pc, #548]	; (8012ab4 <_vfiprintf_r+0x240>)
 801288e:	429d      	cmp	r5, r3
 8012890:	d11b      	bne.n	80128ca <_vfiprintf_r+0x56>
 8012892:	6875      	ldr	r5, [r6, #4]
 8012894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012896:	07d9      	lsls	r1, r3, #31
 8012898:	d405      	bmi.n	80128a6 <_vfiprintf_r+0x32>
 801289a:	89ab      	ldrh	r3, [r5, #12]
 801289c:	059a      	lsls	r2, r3, #22
 801289e:	d402      	bmi.n	80128a6 <_vfiprintf_r+0x32>
 80128a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128a2:	f000 fbc3 	bl	801302c <__retarget_lock_acquire_recursive>
 80128a6:	89ab      	ldrh	r3, [r5, #12]
 80128a8:	071b      	lsls	r3, r3, #28
 80128aa:	d501      	bpl.n	80128b0 <_vfiprintf_r+0x3c>
 80128ac:	692b      	ldr	r3, [r5, #16]
 80128ae:	b9eb      	cbnz	r3, 80128ec <_vfiprintf_r+0x78>
 80128b0:	4629      	mov	r1, r5
 80128b2:	4630      	mov	r0, r6
 80128b4:	f000 f98c 	bl	8012bd0 <__swsetup_r>
 80128b8:	b1c0      	cbz	r0, 80128ec <_vfiprintf_r+0x78>
 80128ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80128bc:	07dc      	lsls	r4, r3, #31
 80128be:	d50e      	bpl.n	80128de <_vfiprintf_r+0x6a>
 80128c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128c4:	b01d      	add	sp, #116	; 0x74
 80128c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128ca:	4b7b      	ldr	r3, [pc, #492]	; (8012ab8 <_vfiprintf_r+0x244>)
 80128cc:	429d      	cmp	r5, r3
 80128ce:	d101      	bne.n	80128d4 <_vfiprintf_r+0x60>
 80128d0:	68b5      	ldr	r5, [r6, #8]
 80128d2:	e7df      	b.n	8012894 <_vfiprintf_r+0x20>
 80128d4:	4b79      	ldr	r3, [pc, #484]	; (8012abc <_vfiprintf_r+0x248>)
 80128d6:	429d      	cmp	r5, r3
 80128d8:	bf08      	it	eq
 80128da:	68f5      	ldreq	r5, [r6, #12]
 80128dc:	e7da      	b.n	8012894 <_vfiprintf_r+0x20>
 80128de:	89ab      	ldrh	r3, [r5, #12]
 80128e0:	0598      	lsls	r0, r3, #22
 80128e2:	d4ed      	bmi.n	80128c0 <_vfiprintf_r+0x4c>
 80128e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128e6:	f000 fba2 	bl	801302e <__retarget_lock_release_recursive>
 80128ea:	e7e9      	b.n	80128c0 <_vfiprintf_r+0x4c>
 80128ec:	2300      	movs	r3, #0
 80128ee:	9309      	str	r3, [sp, #36]	; 0x24
 80128f0:	2320      	movs	r3, #32
 80128f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80128f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80128fa:	2330      	movs	r3, #48	; 0x30
 80128fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012ac0 <_vfiprintf_r+0x24c>
 8012900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012904:	f04f 0901 	mov.w	r9, #1
 8012908:	4623      	mov	r3, r4
 801290a:	469a      	mov	sl, r3
 801290c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012910:	b10a      	cbz	r2, 8012916 <_vfiprintf_r+0xa2>
 8012912:	2a25      	cmp	r2, #37	; 0x25
 8012914:	d1f9      	bne.n	801290a <_vfiprintf_r+0x96>
 8012916:	ebba 0b04 	subs.w	fp, sl, r4
 801291a:	d00b      	beq.n	8012934 <_vfiprintf_r+0xc0>
 801291c:	465b      	mov	r3, fp
 801291e:	4622      	mov	r2, r4
 8012920:	4629      	mov	r1, r5
 8012922:	4630      	mov	r0, r6
 8012924:	f7ff ff93 	bl	801284e <__sfputs_r>
 8012928:	3001      	adds	r0, #1
 801292a:	f000 80aa 	beq.w	8012a82 <_vfiprintf_r+0x20e>
 801292e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012930:	445a      	add	r2, fp
 8012932:	9209      	str	r2, [sp, #36]	; 0x24
 8012934:	f89a 3000 	ldrb.w	r3, [sl]
 8012938:	2b00      	cmp	r3, #0
 801293a:	f000 80a2 	beq.w	8012a82 <_vfiprintf_r+0x20e>
 801293e:	2300      	movs	r3, #0
 8012940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012948:	f10a 0a01 	add.w	sl, sl, #1
 801294c:	9304      	str	r3, [sp, #16]
 801294e:	9307      	str	r3, [sp, #28]
 8012950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012954:	931a      	str	r3, [sp, #104]	; 0x68
 8012956:	4654      	mov	r4, sl
 8012958:	2205      	movs	r2, #5
 801295a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801295e:	4858      	ldr	r0, [pc, #352]	; (8012ac0 <_vfiprintf_r+0x24c>)
 8012960:	f7ed fc66 	bl	8000230 <memchr>
 8012964:	9a04      	ldr	r2, [sp, #16]
 8012966:	b9d8      	cbnz	r0, 80129a0 <_vfiprintf_r+0x12c>
 8012968:	06d1      	lsls	r1, r2, #27
 801296a:	bf44      	itt	mi
 801296c:	2320      	movmi	r3, #32
 801296e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012972:	0713      	lsls	r3, r2, #28
 8012974:	bf44      	itt	mi
 8012976:	232b      	movmi	r3, #43	; 0x2b
 8012978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801297c:	f89a 3000 	ldrb.w	r3, [sl]
 8012980:	2b2a      	cmp	r3, #42	; 0x2a
 8012982:	d015      	beq.n	80129b0 <_vfiprintf_r+0x13c>
 8012984:	9a07      	ldr	r2, [sp, #28]
 8012986:	4654      	mov	r4, sl
 8012988:	2000      	movs	r0, #0
 801298a:	f04f 0c0a 	mov.w	ip, #10
 801298e:	4621      	mov	r1, r4
 8012990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012994:	3b30      	subs	r3, #48	; 0x30
 8012996:	2b09      	cmp	r3, #9
 8012998:	d94e      	bls.n	8012a38 <_vfiprintf_r+0x1c4>
 801299a:	b1b0      	cbz	r0, 80129ca <_vfiprintf_r+0x156>
 801299c:	9207      	str	r2, [sp, #28]
 801299e:	e014      	b.n	80129ca <_vfiprintf_r+0x156>
 80129a0:	eba0 0308 	sub.w	r3, r0, r8
 80129a4:	fa09 f303 	lsl.w	r3, r9, r3
 80129a8:	4313      	orrs	r3, r2
 80129aa:	9304      	str	r3, [sp, #16]
 80129ac:	46a2      	mov	sl, r4
 80129ae:	e7d2      	b.n	8012956 <_vfiprintf_r+0xe2>
 80129b0:	9b03      	ldr	r3, [sp, #12]
 80129b2:	1d19      	adds	r1, r3, #4
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	9103      	str	r1, [sp, #12]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	bfbb      	ittet	lt
 80129bc:	425b      	neglt	r3, r3
 80129be:	f042 0202 	orrlt.w	r2, r2, #2
 80129c2:	9307      	strge	r3, [sp, #28]
 80129c4:	9307      	strlt	r3, [sp, #28]
 80129c6:	bfb8      	it	lt
 80129c8:	9204      	strlt	r2, [sp, #16]
 80129ca:	7823      	ldrb	r3, [r4, #0]
 80129cc:	2b2e      	cmp	r3, #46	; 0x2e
 80129ce:	d10c      	bne.n	80129ea <_vfiprintf_r+0x176>
 80129d0:	7863      	ldrb	r3, [r4, #1]
 80129d2:	2b2a      	cmp	r3, #42	; 0x2a
 80129d4:	d135      	bne.n	8012a42 <_vfiprintf_r+0x1ce>
 80129d6:	9b03      	ldr	r3, [sp, #12]
 80129d8:	1d1a      	adds	r2, r3, #4
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	9203      	str	r2, [sp, #12]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	bfb8      	it	lt
 80129e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80129e6:	3402      	adds	r4, #2
 80129e8:	9305      	str	r3, [sp, #20]
 80129ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012ad0 <_vfiprintf_r+0x25c>
 80129ee:	7821      	ldrb	r1, [r4, #0]
 80129f0:	2203      	movs	r2, #3
 80129f2:	4650      	mov	r0, sl
 80129f4:	f7ed fc1c 	bl	8000230 <memchr>
 80129f8:	b140      	cbz	r0, 8012a0c <_vfiprintf_r+0x198>
 80129fa:	2340      	movs	r3, #64	; 0x40
 80129fc:	eba0 000a 	sub.w	r0, r0, sl
 8012a00:	fa03 f000 	lsl.w	r0, r3, r0
 8012a04:	9b04      	ldr	r3, [sp, #16]
 8012a06:	4303      	orrs	r3, r0
 8012a08:	3401      	adds	r4, #1
 8012a0a:	9304      	str	r3, [sp, #16]
 8012a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a10:	482c      	ldr	r0, [pc, #176]	; (8012ac4 <_vfiprintf_r+0x250>)
 8012a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012a16:	2206      	movs	r2, #6
 8012a18:	f7ed fc0a 	bl	8000230 <memchr>
 8012a1c:	2800      	cmp	r0, #0
 8012a1e:	d03f      	beq.n	8012aa0 <_vfiprintf_r+0x22c>
 8012a20:	4b29      	ldr	r3, [pc, #164]	; (8012ac8 <_vfiprintf_r+0x254>)
 8012a22:	bb1b      	cbnz	r3, 8012a6c <_vfiprintf_r+0x1f8>
 8012a24:	9b03      	ldr	r3, [sp, #12]
 8012a26:	3307      	adds	r3, #7
 8012a28:	f023 0307 	bic.w	r3, r3, #7
 8012a2c:	3308      	adds	r3, #8
 8012a2e:	9303      	str	r3, [sp, #12]
 8012a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a32:	443b      	add	r3, r7
 8012a34:	9309      	str	r3, [sp, #36]	; 0x24
 8012a36:	e767      	b.n	8012908 <_vfiprintf_r+0x94>
 8012a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a3c:	460c      	mov	r4, r1
 8012a3e:	2001      	movs	r0, #1
 8012a40:	e7a5      	b.n	801298e <_vfiprintf_r+0x11a>
 8012a42:	2300      	movs	r3, #0
 8012a44:	3401      	adds	r4, #1
 8012a46:	9305      	str	r3, [sp, #20]
 8012a48:	4619      	mov	r1, r3
 8012a4a:	f04f 0c0a 	mov.w	ip, #10
 8012a4e:	4620      	mov	r0, r4
 8012a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a54:	3a30      	subs	r2, #48	; 0x30
 8012a56:	2a09      	cmp	r2, #9
 8012a58:	d903      	bls.n	8012a62 <_vfiprintf_r+0x1ee>
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d0c5      	beq.n	80129ea <_vfiprintf_r+0x176>
 8012a5e:	9105      	str	r1, [sp, #20]
 8012a60:	e7c3      	b.n	80129ea <_vfiprintf_r+0x176>
 8012a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a66:	4604      	mov	r4, r0
 8012a68:	2301      	movs	r3, #1
 8012a6a:	e7f0      	b.n	8012a4e <_vfiprintf_r+0x1da>
 8012a6c:	ab03      	add	r3, sp, #12
 8012a6e:	9300      	str	r3, [sp, #0]
 8012a70:	462a      	mov	r2, r5
 8012a72:	4b16      	ldr	r3, [pc, #88]	; (8012acc <_vfiprintf_r+0x258>)
 8012a74:	a904      	add	r1, sp, #16
 8012a76:	4630      	mov	r0, r6
 8012a78:	f7fc f902 	bl	800ec80 <_printf_float>
 8012a7c:	4607      	mov	r7, r0
 8012a7e:	1c78      	adds	r0, r7, #1
 8012a80:	d1d6      	bne.n	8012a30 <_vfiprintf_r+0x1bc>
 8012a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a84:	07d9      	lsls	r1, r3, #31
 8012a86:	d405      	bmi.n	8012a94 <_vfiprintf_r+0x220>
 8012a88:	89ab      	ldrh	r3, [r5, #12]
 8012a8a:	059a      	lsls	r2, r3, #22
 8012a8c:	d402      	bmi.n	8012a94 <_vfiprintf_r+0x220>
 8012a8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a90:	f000 facd 	bl	801302e <__retarget_lock_release_recursive>
 8012a94:	89ab      	ldrh	r3, [r5, #12]
 8012a96:	065b      	lsls	r3, r3, #25
 8012a98:	f53f af12 	bmi.w	80128c0 <_vfiprintf_r+0x4c>
 8012a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a9e:	e711      	b.n	80128c4 <_vfiprintf_r+0x50>
 8012aa0:	ab03      	add	r3, sp, #12
 8012aa2:	9300      	str	r3, [sp, #0]
 8012aa4:	462a      	mov	r2, r5
 8012aa6:	4b09      	ldr	r3, [pc, #36]	; (8012acc <_vfiprintf_r+0x258>)
 8012aa8:	a904      	add	r1, sp, #16
 8012aaa:	4630      	mov	r0, r6
 8012aac:	f7fc fb8c 	bl	800f1c8 <_printf_i>
 8012ab0:	e7e4      	b.n	8012a7c <_vfiprintf_r+0x208>
 8012ab2:	bf00      	nop
 8012ab4:	080145a8 	.word	0x080145a8
 8012ab8:	080145c8 	.word	0x080145c8
 8012abc:	08014588 	.word	0x08014588
 8012ac0:	08014574 	.word	0x08014574
 8012ac4:	0801457e 	.word	0x0801457e
 8012ac8:	0800ec81 	.word	0x0800ec81
 8012acc:	0801284f 	.word	0x0801284f
 8012ad0:	0801457a 	.word	0x0801457a
 8012ad4:	00000000 	.word	0x00000000

08012ad8 <nan>:
 8012ad8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012ae0 <nan+0x8>
 8012adc:	4770      	bx	lr
 8012ade:	bf00      	nop
 8012ae0:	00000000 	.word	0x00000000
 8012ae4:	7ff80000 	.word	0x7ff80000

08012ae8 <strncmp>:
 8012ae8:	b510      	push	{r4, lr}
 8012aea:	b17a      	cbz	r2, 8012b0c <strncmp+0x24>
 8012aec:	4603      	mov	r3, r0
 8012aee:	3901      	subs	r1, #1
 8012af0:	1884      	adds	r4, r0, r2
 8012af2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012af6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012afa:	4290      	cmp	r0, r2
 8012afc:	d101      	bne.n	8012b02 <strncmp+0x1a>
 8012afe:	42a3      	cmp	r3, r4
 8012b00:	d101      	bne.n	8012b06 <strncmp+0x1e>
 8012b02:	1a80      	subs	r0, r0, r2
 8012b04:	bd10      	pop	{r4, pc}
 8012b06:	2800      	cmp	r0, #0
 8012b08:	d1f3      	bne.n	8012af2 <strncmp+0xa>
 8012b0a:	e7fa      	b.n	8012b02 <strncmp+0x1a>
 8012b0c:	4610      	mov	r0, r2
 8012b0e:	e7f9      	b.n	8012b04 <strncmp+0x1c>

08012b10 <__swbuf_r>:
 8012b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b12:	460e      	mov	r6, r1
 8012b14:	4614      	mov	r4, r2
 8012b16:	4605      	mov	r5, r0
 8012b18:	b118      	cbz	r0, 8012b22 <__swbuf_r+0x12>
 8012b1a:	6983      	ldr	r3, [r0, #24]
 8012b1c:	b90b      	cbnz	r3, 8012b22 <__swbuf_r+0x12>
 8012b1e:	f000 f9e7 	bl	8012ef0 <__sinit>
 8012b22:	4b21      	ldr	r3, [pc, #132]	; (8012ba8 <__swbuf_r+0x98>)
 8012b24:	429c      	cmp	r4, r3
 8012b26:	d12b      	bne.n	8012b80 <__swbuf_r+0x70>
 8012b28:	686c      	ldr	r4, [r5, #4]
 8012b2a:	69a3      	ldr	r3, [r4, #24]
 8012b2c:	60a3      	str	r3, [r4, #8]
 8012b2e:	89a3      	ldrh	r3, [r4, #12]
 8012b30:	071a      	lsls	r2, r3, #28
 8012b32:	d52f      	bpl.n	8012b94 <__swbuf_r+0x84>
 8012b34:	6923      	ldr	r3, [r4, #16]
 8012b36:	b36b      	cbz	r3, 8012b94 <__swbuf_r+0x84>
 8012b38:	6923      	ldr	r3, [r4, #16]
 8012b3a:	6820      	ldr	r0, [r4, #0]
 8012b3c:	1ac0      	subs	r0, r0, r3
 8012b3e:	6963      	ldr	r3, [r4, #20]
 8012b40:	b2f6      	uxtb	r6, r6
 8012b42:	4283      	cmp	r3, r0
 8012b44:	4637      	mov	r7, r6
 8012b46:	dc04      	bgt.n	8012b52 <__swbuf_r+0x42>
 8012b48:	4621      	mov	r1, r4
 8012b4a:	4628      	mov	r0, r5
 8012b4c:	f000 f93c 	bl	8012dc8 <_fflush_r>
 8012b50:	bb30      	cbnz	r0, 8012ba0 <__swbuf_r+0x90>
 8012b52:	68a3      	ldr	r3, [r4, #8]
 8012b54:	3b01      	subs	r3, #1
 8012b56:	60a3      	str	r3, [r4, #8]
 8012b58:	6823      	ldr	r3, [r4, #0]
 8012b5a:	1c5a      	adds	r2, r3, #1
 8012b5c:	6022      	str	r2, [r4, #0]
 8012b5e:	701e      	strb	r6, [r3, #0]
 8012b60:	6963      	ldr	r3, [r4, #20]
 8012b62:	3001      	adds	r0, #1
 8012b64:	4283      	cmp	r3, r0
 8012b66:	d004      	beq.n	8012b72 <__swbuf_r+0x62>
 8012b68:	89a3      	ldrh	r3, [r4, #12]
 8012b6a:	07db      	lsls	r3, r3, #31
 8012b6c:	d506      	bpl.n	8012b7c <__swbuf_r+0x6c>
 8012b6e:	2e0a      	cmp	r6, #10
 8012b70:	d104      	bne.n	8012b7c <__swbuf_r+0x6c>
 8012b72:	4621      	mov	r1, r4
 8012b74:	4628      	mov	r0, r5
 8012b76:	f000 f927 	bl	8012dc8 <_fflush_r>
 8012b7a:	b988      	cbnz	r0, 8012ba0 <__swbuf_r+0x90>
 8012b7c:	4638      	mov	r0, r7
 8012b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b80:	4b0a      	ldr	r3, [pc, #40]	; (8012bac <__swbuf_r+0x9c>)
 8012b82:	429c      	cmp	r4, r3
 8012b84:	d101      	bne.n	8012b8a <__swbuf_r+0x7a>
 8012b86:	68ac      	ldr	r4, [r5, #8]
 8012b88:	e7cf      	b.n	8012b2a <__swbuf_r+0x1a>
 8012b8a:	4b09      	ldr	r3, [pc, #36]	; (8012bb0 <__swbuf_r+0xa0>)
 8012b8c:	429c      	cmp	r4, r3
 8012b8e:	bf08      	it	eq
 8012b90:	68ec      	ldreq	r4, [r5, #12]
 8012b92:	e7ca      	b.n	8012b2a <__swbuf_r+0x1a>
 8012b94:	4621      	mov	r1, r4
 8012b96:	4628      	mov	r0, r5
 8012b98:	f000 f81a 	bl	8012bd0 <__swsetup_r>
 8012b9c:	2800      	cmp	r0, #0
 8012b9e:	d0cb      	beq.n	8012b38 <__swbuf_r+0x28>
 8012ba0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012ba4:	e7ea      	b.n	8012b7c <__swbuf_r+0x6c>
 8012ba6:	bf00      	nop
 8012ba8:	080145a8 	.word	0x080145a8
 8012bac:	080145c8 	.word	0x080145c8
 8012bb0:	08014588 	.word	0x08014588

08012bb4 <__ascii_wctomb>:
 8012bb4:	b149      	cbz	r1, 8012bca <__ascii_wctomb+0x16>
 8012bb6:	2aff      	cmp	r2, #255	; 0xff
 8012bb8:	bf85      	ittet	hi
 8012bba:	238a      	movhi	r3, #138	; 0x8a
 8012bbc:	6003      	strhi	r3, [r0, #0]
 8012bbe:	700a      	strbls	r2, [r1, #0]
 8012bc0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012bc4:	bf98      	it	ls
 8012bc6:	2001      	movls	r0, #1
 8012bc8:	4770      	bx	lr
 8012bca:	4608      	mov	r0, r1
 8012bcc:	4770      	bx	lr
	...

08012bd0 <__swsetup_r>:
 8012bd0:	4b32      	ldr	r3, [pc, #200]	; (8012c9c <__swsetup_r+0xcc>)
 8012bd2:	b570      	push	{r4, r5, r6, lr}
 8012bd4:	681d      	ldr	r5, [r3, #0]
 8012bd6:	4606      	mov	r6, r0
 8012bd8:	460c      	mov	r4, r1
 8012bda:	b125      	cbz	r5, 8012be6 <__swsetup_r+0x16>
 8012bdc:	69ab      	ldr	r3, [r5, #24]
 8012bde:	b913      	cbnz	r3, 8012be6 <__swsetup_r+0x16>
 8012be0:	4628      	mov	r0, r5
 8012be2:	f000 f985 	bl	8012ef0 <__sinit>
 8012be6:	4b2e      	ldr	r3, [pc, #184]	; (8012ca0 <__swsetup_r+0xd0>)
 8012be8:	429c      	cmp	r4, r3
 8012bea:	d10f      	bne.n	8012c0c <__swsetup_r+0x3c>
 8012bec:	686c      	ldr	r4, [r5, #4]
 8012bee:	89a3      	ldrh	r3, [r4, #12]
 8012bf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012bf4:	0719      	lsls	r1, r3, #28
 8012bf6:	d42c      	bmi.n	8012c52 <__swsetup_r+0x82>
 8012bf8:	06dd      	lsls	r5, r3, #27
 8012bfa:	d411      	bmi.n	8012c20 <__swsetup_r+0x50>
 8012bfc:	2309      	movs	r3, #9
 8012bfe:	6033      	str	r3, [r6, #0]
 8012c00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012c04:	81a3      	strh	r3, [r4, #12]
 8012c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c0a:	e03e      	b.n	8012c8a <__swsetup_r+0xba>
 8012c0c:	4b25      	ldr	r3, [pc, #148]	; (8012ca4 <__swsetup_r+0xd4>)
 8012c0e:	429c      	cmp	r4, r3
 8012c10:	d101      	bne.n	8012c16 <__swsetup_r+0x46>
 8012c12:	68ac      	ldr	r4, [r5, #8]
 8012c14:	e7eb      	b.n	8012bee <__swsetup_r+0x1e>
 8012c16:	4b24      	ldr	r3, [pc, #144]	; (8012ca8 <__swsetup_r+0xd8>)
 8012c18:	429c      	cmp	r4, r3
 8012c1a:	bf08      	it	eq
 8012c1c:	68ec      	ldreq	r4, [r5, #12]
 8012c1e:	e7e6      	b.n	8012bee <__swsetup_r+0x1e>
 8012c20:	0758      	lsls	r0, r3, #29
 8012c22:	d512      	bpl.n	8012c4a <__swsetup_r+0x7a>
 8012c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c26:	b141      	cbz	r1, 8012c3a <__swsetup_r+0x6a>
 8012c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c2c:	4299      	cmp	r1, r3
 8012c2e:	d002      	beq.n	8012c36 <__swsetup_r+0x66>
 8012c30:	4630      	mov	r0, r6
 8012c32:	f7fb fea5 	bl	800e980 <_free_r>
 8012c36:	2300      	movs	r3, #0
 8012c38:	6363      	str	r3, [r4, #52]	; 0x34
 8012c3a:	89a3      	ldrh	r3, [r4, #12]
 8012c3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012c40:	81a3      	strh	r3, [r4, #12]
 8012c42:	2300      	movs	r3, #0
 8012c44:	6063      	str	r3, [r4, #4]
 8012c46:	6923      	ldr	r3, [r4, #16]
 8012c48:	6023      	str	r3, [r4, #0]
 8012c4a:	89a3      	ldrh	r3, [r4, #12]
 8012c4c:	f043 0308 	orr.w	r3, r3, #8
 8012c50:	81a3      	strh	r3, [r4, #12]
 8012c52:	6923      	ldr	r3, [r4, #16]
 8012c54:	b94b      	cbnz	r3, 8012c6a <__swsetup_r+0x9a>
 8012c56:	89a3      	ldrh	r3, [r4, #12]
 8012c58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c60:	d003      	beq.n	8012c6a <__swsetup_r+0x9a>
 8012c62:	4621      	mov	r1, r4
 8012c64:	4630      	mov	r0, r6
 8012c66:	f000 fa09 	bl	801307c <__smakebuf_r>
 8012c6a:	89a0      	ldrh	r0, [r4, #12]
 8012c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c70:	f010 0301 	ands.w	r3, r0, #1
 8012c74:	d00a      	beq.n	8012c8c <__swsetup_r+0xbc>
 8012c76:	2300      	movs	r3, #0
 8012c78:	60a3      	str	r3, [r4, #8]
 8012c7a:	6963      	ldr	r3, [r4, #20]
 8012c7c:	425b      	negs	r3, r3
 8012c7e:	61a3      	str	r3, [r4, #24]
 8012c80:	6923      	ldr	r3, [r4, #16]
 8012c82:	b943      	cbnz	r3, 8012c96 <__swsetup_r+0xc6>
 8012c84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012c88:	d1ba      	bne.n	8012c00 <__swsetup_r+0x30>
 8012c8a:	bd70      	pop	{r4, r5, r6, pc}
 8012c8c:	0781      	lsls	r1, r0, #30
 8012c8e:	bf58      	it	pl
 8012c90:	6963      	ldrpl	r3, [r4, #20]
 8012c92:	60a3      	str	r3, [r4, #8]
 8012c94:	e7f4      	b.n	8012c80 <__swsetup_r+0xb0>
 8012c96:	2000      	movs	r0, #0
 8012c98:	e7f7      	b.n	8012c8a <__swsetup_r+0xba>
 8012c9a:	bf00      	nop
 8012c9c:	20001384 	.word	0x20001384
 8012ca0:	080145a8 	.word	0x080145a8
 8012ca4:	080145c8 	.word	0x080145c8
 8012ca8:	08014588 	.word	0x08014588

08012cac <abort>:
 8012cac:	b508      	push	{r3, lr}
 8012cae:	2006      	movs	r0, #6
 8012cb0:	f000 fa96 	bl	80131e0 <raise>
 8012cb4:	2001      	movs	r0, #1
 8012cb6:	f7f1 fb85 	bl	80043c4 <_exit>
	...

08012cbc <__sflush_r>:
 8012cbc:	898a      	ldrh	r2, [r1, #12]
 8012cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cc2:	4605      	mov	r5, r0
 8012cc4:	0710      	lsls	r0, r2, #28
 8012cc6:	460c      	mov	r4, r1
 8012cc8:	d458      	bmi.n	8012d7c <__sflush_r+0xc0>
 8012cca:	684b      	ldr	r3, [r1, #4]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	dc05      	bgt.n	8012cdc <__sflush_r+0x20>
 8012cd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	dc02      	bgt.n	8012cdc <__sflush_r+0x20>
 8012cd6:	2000      	movs	r0, #0
 8012cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012cde:	2e00      	cmp	r6, #0
 8012ce0:	d0f9      	beq.n	8012cd6 <__sflush_r+0x1a>
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012ce8:	682f      	ldr	r7, [r5, #0]
 8012cea:	602b      	str	r3, [r5, #0]
 8012cec:	d032      	beq.n	8012d54 <__sflush_r+0x98>
 8012cee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012cf0:	89a3      	ldrh	r3, [r4, #12]
 8012cf2:	075a      	lsls	r2, r3, #29
 8012cf4:	d505      	bpl.n	8012d02 <__sflush_r+0x46>
 8012cf6:	6863      	ldr	r3, [r4, #4]
 8012cf8:	1ac0      	subs	r0, r0, r3
 8012cfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012cfc:	b10b      	cbz	r3, 8012d02 <__sflush_r+0x46>
 8012cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012d00:	1ac0      	subs	r0, r0, r3
 8012d02:	2300      	movs	r3, #0
 8012d04:	4602      	mov	r2, r0
 8012d06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d08:	6a21      	ldr	r1, [r4, #32]
 8012d0a:	4628      	mov	r0, r5
 8012d0c:	47b0      	blx	r6
 8012d0e:	1c43      	adds	r3, r0, #1
 8012d10:	89a3      	ldrh	r3, [r4, #12]
 8012d12:	d106      	bne.n	8012d22 <__sflush_r+0x66>
 8012d14:	6829      	ldr	r1, [r5, #0]
 8012d16:	291d      	cmp	r1, #29
 8012d18:	d82c      	bhi.n	8012d74 <__sflush_r+0xb8>
 8012d1a:	4a2a      	ldr	r2, [pc, #168]	; (8012dc4 <__sflush_r+0x108>)
 8012d1c:	40ca      	lsrs	r2, r1
 8012d1e:	07d6      	lsls	r6, r2, #31
 8012d20:	d528      	bpl.n	8012d74 <__sflush_r+0xb8>
 8012d22:	2200      	movs	r2, #0
 8012d24:	6062      	str	r2, [r4, #4]
 8012d26:	04d9      	lsls	r1, r3, #19
 8012d28:	6922      	ldr	r2, [r4, #16]
 8012d2a:	6022      	str	r2, [r4, #0]
 8012d2c:	d504      	bpl.n	8012d38 <__sflush_r+0x7c>
 8012d2e:	1c42      	adds	r2, r0, #1
 8012d30:	d101      	bne.n	8012d36 <__sflush_r+0x7a>
 8012d32:	682b      	ldr	r3, [r5, #0]
 8012d34:	b903      	cbnz	r3, 8012d38 <__sflush_r+0x7c>
 8012d36:	6560      	str	r0, [r4, #84]	; 0x54
 8012d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d3a:	602f      	str	r7, [r5, #0]
 8012d3c:	2900      	cmp	r1, #0
 8012d3e:	d0ca      	beq.n	8012cd6 <__sflush_r+0x1a>
 8012d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d44:	4299      	cmp	r1, r3
 8012d46:	d002      	beq.n	8012d4e <__sflush_r+0x92>
 8012d48:	4628      	mov	r0, r5
 8012d4a:	f7fb fe19 	bl	800e980 <_free_r>
 8012d4e:	2000      	movs	r0, #0
 8012d50:	6360      	str	r0, [r4, #52]	; 0x34
 8012d52:	e7c1      	b.n	8012cd8 <__sflush_r+0x1c>
 8012d54:	6a21      	ldr	r1, [r4, #32]
 8012d56:	2301      	movs	r3, #1
 8012d58:	4628      	mov	r0, r5
 8012d5a:	47b0      	blx	r6
 8012d5c:	1c41      	adds	r1, r0, #1
 8012d5e:	d1c7      	bne.n	8012cf0 <__sflush_r+0x34>
 8012d60:	682b      	ldr	r3, [r5, #0]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d0c4      	beq.n	8012cf0 <__sflush_r+0x34>
 8012d66:	2b1d      	cmp	r3, #29
 8012d68:	d001      	beq.n	8012d6e <__sflush_r+0xb2>
 8012d6a:	2b16      	cmp	r3, #22
 8012d6c:	d101      	bne.n	8012d72 <__sflush_r+0xb6>
 8012d6e:	602f      	str	r7, [r5, #0]
 8012d70:	e7b1      	b.n	8012cd6 <__sflush_r+0x1a>
 8012d72:	89a3      	ldrh	r3, [r4, #12]
 8012d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d78:	81a3      	strh	r3, [r4, #12]
 8012d7a:	e7ad      	b.n	8012cd8 <__sflush_r+0x1c>
 8012d7c:	690f      	ldr	r7, [r1, #16]
 8012d7e:	2f00      	cmp	r7, #0
 8012d80:	d0a9      	beq.n	8012cd6 <__sflush_r+0x1a>
 8012d82:	0793      	lsls	r3, r2, #30
 8012d84:	680e      	ldr	r6, [r1, #0]
 8012d86:	bf08      	it	eq
 8012d88:	694b      	ldreq	r3, [r1, #20]
 8012d8a:	600f      	str	r7, [r1, #0]
 8012d8c:	bf18      	it	ne
 8012d8e:	2300      	movne	r3, #0
 8012d90:	eba6 0807 	sub.w	r8, r6, r7
 8012d94:	608b      	str	r3, [r1, #8]
 8012d96:	f1b8 0f00 	cmp.w	r8, #0
 8012d9a:	dd9c      	ble.n	8012cd6 <__sflush_r+0x1a>
 8012d9c:	6a21      	ldr	r1, [r4, #32]
 8012d9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012da0:	4643      	mov	r3, r8
 8012da2:	463a      	mov	r2, r7
 8012da4:	4628      	mov	r0, r5
 8012da6:	47b0      	blx	r6
 8012da8:	2800      	cmp	r0, #0
 8012daa:	dc06      	bgt.n	8012dba <__sflush_r+0xfe>
 8012dac:	89a3      	ldrh	r3, [r4, #12]
 8012dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012db2:	81a3      	strh	r3, [r4, #12]
 8012db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012db8:	e78e      	b.n	8012cd8 <__sflush_r+0x1c>
 8012dba:	4407      	add	r7, r0
 8012dbc:	eba8 0800 	sub.w	r8, r8, r0
 8012dc0:	e7e9      	b.n	8012d96 <__sflush_r+0xda>
 8012dc2:	bf00      	nop
 8012dc4:	20400001 	.word	0x20400001

08012dc8 <_fflush_r>:
 8012dc8:	b538      	push	{r3, r4, r5, lr}
 8012dca:	690b      	ldr	r3, [r1, #16]
 8012dcc:	4605      	mov	r5, r0
 8012dce:	460c      	mov	r4, r1
 8012dd0:	b913      	cbnz	r3, 8012dd8 <_fflush_r+0x10>
 8012dd2:	2500      	movs	r5, #0
 8012dd4:	4628      	mov	r0, r5
 8012dd6:	bd38      	pop	{r3, r4, r5, pc}
 8012dd8:	b118      	cbz	r0, 8012de2 <_fflush_r+0x1a>
 8012dda:	6983      	ldr	r3, [r0, #24]
 8012ddc:	b90b      	cbnz	r3, 8012de2 <_fflush_r+0x1a>
 8012dde:	f000 f887 	bl	8012ef0 <__sinit>
 8012de2:	4b14      	ldr	r3, [pc, #80]	; (8012e34 <_fflush_r+0x6c>)
 8012de4:	429c      	cmp	r4, r3
 8012de6:	d11b      	bne.n	8012e20 <_fflush_r+0x58>
 8012de8:	686c      	ldr	r4, [r5, #4]
 8012dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d0ef      	beq.n	8012dd2 <_fflush_r+0xa>
 8012df2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012df4:	07d0      	lsls	r0, r2, #31
 8012df6:	d404      	bmi.n	8012e02 <_fflush_r+0x3a>
 8012df8:	0599      	lsls	r1, r3, #22
 8012dfa:	d402      	bmi.n	8012e02 <_fflush_r+0x3a>
 8012dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012dfe:	f000 f915 	bl	801302c <__retarget_lock_acquire_recursive>
 8012e02:	4628      	mov	r0, r5
 8012e04:	4621      	mov	r1, r4
 8012e06:	f7ff ff59 	bl	8012cbc <__sflush_r>
 8012e0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e0c:	07da      	lsls	r2, r3, #31
 8012e0e:	4605      	mov	r5, r0
 8012e10:	d4e0      	bmi.n	8012dd4 <_fflush_r+0xc>
 8012e12:	89a3      	ldrh	r3, [r4, #12]
 8012e14:	059b      	lsls	r3, r3, #22
 8012e16:	d4dd      	bmi.n	8012dd4 <_fflush_r+0xc>
 8012e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e1a:	f000 f908 	bl	801302e <__retarget_lock_release_recursive>
 8012e1e:	e7d9      	b.n	8012dd4 <_fflush_r+0xc>
 8012e20:	4b05      	ldr	r3, [pc, #20]	; (8012e38 <_fflush_r+0x70>)
 8012e22:	429c      	cmp	r4, r3
 8012e24:	d101      	bne.n	8012e2a <_fflush_r+0x62>
 8012e26:	68ac      	ldr	r4, [r5, #8]
 8012e28:	e7df      	b.n	8012dea <_fflush_r+0x22>
 8012e2a:	4b04      	ldr	r3, [pc, #16]	; (8012e3c <_fflush_r+0x74>)
 8012e2c:	429c      	cmp	r4, r3
 8012e2e:	bf08      	it	eq
 8012e30:	68ec      	ldreq	r4, [r5, #12]
 8012e32:	e7da      	b.n	8012dea <_fflush_r+0x22>
 8012e34:	080145a8 	.word	0x080145a8
 8012e38:	080145c8 	.word	0x080145c8
 8012e3c:	08014588 	.word	0x08014588

08012e40 <std>:
 8012e40:	2300      	movs	r3, #0
 8012e42:	b510      	push	{r4, lr}
 8012e44:	4604      	mov	r4, r0
 8012e46:	e9c0 3300 	strd	r3, r3, [r0]
 8012e4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e4e:	6083      	str	r3, [r0, #8]
 8012e50:	8181      	strh	r1, [r0, #12]
 8012e52:	6643      	str	r3, [r0, #100]	; 0x64
 8012e54:	81c2      	strh	r2, [r0, #14]
 8012e56:	6183      	str	r3, [r0, #24]
 8012e58:	4619      	mov	r1, r3
 8012e5a:	2208      	movs	r2, #8
 8012e5c:	305c      	adds	r0, #92	; 0x5c
 8012e5e:	f7fb fd87 	bl	800e970 <memset>
 8012e62:	4b05      	ldr	r3, [pc, #20]	; (8012e78 <std+0x38>)
 8012e64:	6263      	str	r3, [r4, #36]	; 0x24
 8012e66:	4b05      	ldr	r3, [pc, #20]	; (8012e7c <std+0x3c>)
 8012e68:	62a3      	str	r3, [r4, #40]	; 0x28
 8012e6a:	4b05      	ldr	r3, [pc, #20]	; (8012e80 <std+0x40>)
 8012e6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e6e:	4b05      	ldr	r3, [pc, #20]	; (8012e84 <std+0x44>)
 8012e70:	6224      	str	r4, [r4, #32]
 8012e72:	6323      	str	r3, [r4, #48]	; 0x30
 8012e74:	bd10      	pop	{r4, pc}
 8012e76:	bf00      	nop
 8012e78:	08013219 	.word	0x08013219
 8012e7c:	0801323b 	.word	0x0801323b
 8012e80:	08013273 	.word	0x08013273
 8012e84:	08013297 	.word	0x08013297

08012e88 <_cleanup_r>:
 8012e88:	4901      	ldr	r1, [pc, #4]	; (8012e90 <_cleanup_r+0x8>)
 8012e8a:	f000 b8af 	b.w	8012fec <_fwalk_reent>
 8012e8e:	bf00      	nop
 8012e90:	08012dc9 	.word	0x08012dc9

08012e94 <__sfmoreglue>:
 8012e94:	b570      	push	{r4, r5, r6, lr}
 8012e96:	2268      	movs	r2, #104	; 0x68
 8012e98:	1e4d      	subs	r5, r1, #1
 8012e9a:	4355      	muls	r5, r2
 8012e9c:	460e      	mov	r6, r1
 8012e9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012ea2:	f7fb fdd9 	bl	800ea58 <_malloc_r>
 8012ea6:	4604      	mov	r4, r0
 8012ea8:	b140      	cbz	r0, 8012ebc <__sfmoreglue+0x28>
 8012eaa:	2100      	movs	r1, #0
 8012eac:	e9c0 1600 	strd	r1, r6, [r0]
 8012eb0:	300c      	adds	r0, #12
 8012eb2:	60a0      	str	r0, [r4, #8]
 8012eb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012eb8:	f7fb fd5a 	bl	800e970 <memset>
 8012ebc:	4620      	mov	r0, r4
 8012ebe:	bd70      	pop	{r4, r5, r6, pc}

08012ec0 <__sfp_lock_acquire>:
 8012ec0:	4801      	ldr	r0, [pc, #4]	; (8012ec8 <__sfp_lock_acquire+0x8>)
 8012ec2:	f000 b8b3 	b.w	801302c <__retarget_lock_acquire_recursive>
 8012ec6:	bf00      	nop
 8012ec8:	20014009 	.word	0x20014009

08012ecc <__sfp_lock_release>:
 8012ecc:	4801      	ldr	r0, [pc, #4]	; (8012ed4 <__sfp_lock_release+0x8>)
 8012ece:	f000 b8ae 	b.w	801302e <__retarget_lock_release_recursive>
 8012ed2:	bf00      	nop
 8012ed4:	20014009 	.word	0x20014009

08012ed8 <__sinit_lock_acquire>:
 8012ed8:	4801      	ldr	r0, [pc, #4]	; (8012ee0 <__sinit_lock_acquire+0x8>)
 8012eda:	f000 b8a7 	b.w	801302c <__retarget_lock_acquire_recursive>
 8012ede:	bf00      	nop
 8012ee0:	2001400a 	.word	0x2001400a

08012ee4 <__sinit_lock_release>:
 8012ee4:	4801      	ldr	r0, [pc, #4]	; (8012eec <__sinit_lock_release+0x8>)
 8012ee6:	f000 b8a2 	b.w	801302e <__retarget_lock_release_recursive>
 8012eea:	bf00      	nop
 8012eec:	2001400a 	.word	0x2001400a

08012ef0 <__sinit>:
 8012ef0:	b510      	push	{r4, lr}
 8012ef2:	4604      	mov	r4, r0
 8012ef4:	f7ff fff0 	bl	8012ed8 <__sinit_lock_acquire>
 8012ef8:	69a3      	ldr	r3, [r4, #24]
 8012efa:	b11b      	cbz	r3, 8012f04 <__sinit+0x14>
 8012efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f00:	f7ff bff0 	b.w	8012ee4 <__sinit_lock_release>
 8012f04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012f08:	6523      	str	r3, [r4, #80]	; 0x50
 8012f0a:	4b13      	ldr	r3, [pc, #76]	; (8012f58 <__sinit+0x68>)
 8012f0c:	4a13      	ldr	r2, [pc, #76]	; (8012f5c <__sinit+0x6c>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	62a2      	str	r2, [r4, #40]	; 0x28
 8012f12:	42a3      	cmp	r3, r4
 8012f14:	bf04      	itt	eq
 8012f16:	2301      	moveq	r3, #1
 8012f18:	61a3      	streq	r3, [r4, #24]
 8012f1a:	4620      	mov	r0, r4
 8012f1c:	f000 f820 	bl	8012f60 <__sfp>
 8012f20:	6060      	str	r0, [r4, #4]
 8012f22:	4620      	mov	r0, r4
 8012f24:	f000 f81c 	bl	8012f60 <__sfp>
 8012f28:	60a0      	str	r0, [r4, #8]
 8012f2a:	4620      	mov	r0, r4
 8012f2c:	f000 f818 	bl	8012f60 <__sfp>
 8012f30:	2200      	movs	r2, #0
 8012f32:	60e0      	str	r0, [r4, #12]
 8012f34:	2104      	movs	r1, #4
 8012f36:	6860      	ldr	r0, [r4, #4]
 8012f38:	f7ff ff82 	bl	8012e40 <std>
 8012f3c:	68a0      	ldr	r0, [r4, #8]
 8012f3e:	2201      	movs	r2, #1
 8012f40:	2109      	movs	r1, #9
 8012f42:	f7ff ff7d 	bl	8012e40 <std>
 8012f46:	68e0      	ldr	r0, [r4, #12]
 8012f48:	2202      	movs	r2, #2
 8012f4a:	2112      	movs	r1, #18
 8012f4c:	f7ff ff78 	bl	8012e40 <std>
 8012f50:	2301      	movs	r3, #1
 8012f52:	61a3      	str	r3, [r4, #24]
 8012f54:	e7d2      	b.n	8012efc <__sinit+0xc>
 8012f56:	bf00      	nop
 8012f58:	080140e8 	.word	0x080140e8
 8012f5c:	08012e89 	.word	0x08012e89

08012f60 <__sfp>:
 8012f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f62:	4607      	mov	r7, r0
 8012f64:	f7ff ffac 	bl	8012ec0 <__sfp_lock_acquire>
 8012f68:	4b1e      	ldr	r3, [pc, #120]	; (8012fe4 <__sfp+0x84>)
 8012f6a:	681e      	ldr	r6, [r3, #0]
 8012f6c:	69b3      	ldr	r3, [r6, #24]
 8012f6e:	b913      	cbnz	r3, 8012f76 <__sfp+0x16>
 8012f70:	4630      	mov	r0, r6
 8012f72:	f7ff ffbd 	bl	8012ef0 <__sinit>
 8012f76:	3648      	adds	r6, #72	; 0x48
 8012f78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012f7c:	3b01      	subs	r3, #1
 8012f7e:	d503      	bpl.n	8012f88 <__sfp+0x28>
 8012f80:	6833      	ldr	r3, [r6, #0]
 8012f82:	b30b      	cbz	r3, 8012fc8 <__sfp+0x68>
 8012f84:	6836      	ldr	r6, [r6, #0]
 8012f86:	e7f7      	b.n	8012f78 <__sfp+0x18>
 8012f88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012f8c:	b9d5      	cbnz	r5, 8012fc4 <__sfp+0x64>
 8012f8e:	4b16      	ldr	r3, [pc, #88]	; (8012fe8 <__sfp+0x88>)
 8012f90:	60e3      	str	r3, [r4, #12]
 8012f92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012f96:	6665      	str	r5, [r4, #100]	; 0x64
 8012f98:	f000 f847 	bl	801302a <__retarget_lock_init_recursive>
 8012f9c:	f7ff ff96 	bl	8012ecc <__sfp_lock_release>
 8012fa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012fa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012fa8:	6025      	str	r5, [r4, #0]
 8012faa:	61a5      	str	r5, [r4, #24]
 8012fac:	2208      	movs	r2, #8
 8012fae:	4629      	mov	r1, r5
 8012fb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012fb4:	f7fb fcdc 	bl	800e970 <memset>
 8012fb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012fbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012fc0:	4620      	mov	r0, r4
 8012fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fc4:	3468      	adds	r4, #104	; 0x68
 8012fc6:	e7d9      	b.n	8012f7c <__sfp+0x1c>
 8012fc8:	2104      	movs	r1, #4
 8012fca:	4638      	mov	r0, r7
 8012fcc:	f7ff ff62 	bl	8012e94 <__sfmoreglue>
 8012fd0:	4604      	mov	r4, r0
 8012fd2:	6030      	str	r0, [r6, #0]
 8012fd4:	2800      	cmp	r0, #0
 8012fd6:	d1d5      	bne.n	8012f84 <__sfp+0x24>
 8012fd8:	f7ff ff78 	bl	8012ecc <__sfp_lock_release>
 8012fdc:	230c      	movs	r3, #12
 8012fde:	603b      	str	r3, [r7, #0]
 8012fe0:	e7ee      	b.n	8012fc0 <__sfp+0x60>
 8012fe2:	bf00      	nop
 8012fe4:	080140e8 	.word	0x080140e8
 8012fe8:	ffff0001 	.word	0xffff0001

08012fec <_fwalk_reent>:
 8012fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ff0:	4606      	mov	r6, r0
 8012ff2:	4688      	mov	r8, r1
 8012ff4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012ff8:	2700      	movs	r7, #0
 8012ffa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012ffe:	f1b9 0901 	subs.w	r9, r9, #1
 8013002:	d505      	bpl.n	8013010 <_fwalk_reent+0x24>
 8013004:	6824      	ldr	r4, [r4, #0]
 8013006:	2c00      	cmp	r4, #0
 8013008:	d1f7      	bne.n	8012ffa <_fwalk_reent+0xe>
 801300a:	4638      	mov	r0, r7
 801300c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013010:	89ab      	ldrh	r3, [r5, #12]
 8013012:	2b01      	cmp	r3, #1
 8013014:	d907      	bls.n	8013026 <_fwalk_reent+0x3a>
 8013016:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801301a:	3301      	adds	r3, #1
 801301c:	d003      	beq.n	8013026 <_fwalk_reent+0x3a>
 801301e:	4629      	mov	r1, r5
 8013020:	4630      	mov	r0, r6
 8013022:	47c0      	blx	r8
 8013024:	4307      	orrs	r7, r0
 8013026:	3568      	adds	r5, #104	; 0x68
 8013028:	e7e9      	b.n	8012ffe <_fwalk_reent+0x12>

0801302a <__retarget_lock_init_recursive>:
 801302a:	4770      	bx	lr

0801302c <__retarget_lock_acquire_recursive>:
 801302c:	4770      	bx	lr

0801302e <__retarget_lock_release_recursive>:
 801302e:	4770      	bx	lr

08013030 <__swhatbuf_r>:
 8013030:	b570      	push	{r4, r5, r6, lr}
 8013032:	460e      	mov	r6, r1
 8013034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013038:	2900      	cmp	r1, #0
 801303a:	b096      	sub	sp, #88	; 0x58
 801303c:	4614      	mov	r4, r2
 801303e:	461d      	mov	r5, r3
 8013040:	da08      	bge.n	8013054 <__swhatbuf_r+0x24>
 8013042:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013046:	2200      	movs	r2, #0
 8013048:	602a      	str	r2, [r5, #0]
 801304a:	061a      	lsls	r2, r3, #24
 801304c:	d410      	bmi.n	8013070 <__swhatbuf_r+0x40>
 801304e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013052:	e00e      	b.n	8013072 <__swhatbuf_r+0x42>
 8013054:	466a      	mov	r2, sp
 8013056:	f000 f945 	bl	80132e4 <_fstat_r>
 801305a:	2800      	cmp	r0, #0
 801305c:	dbf1      	blt.n	8013042 <__swhatbuf_r+0x12>
 801305e:	9a01      	ldr	r2, [sp, #4]
 8013060:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013064:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013068:	425a      	negs	r2, r3
 801306a:	415a      	adcs	r2, r3
 801306c:	602a      	str	r2, [r5, #0]
 801306e:	e7ee      	b.n	801304e <__swhatbuf_r+0x1e>
 8013070:	2340      	movs	r3, #64	; 0x40
 8013072:	2000      	movs	r0, #0
 8013074:	6023      	str	r3, [r4, #0]
 8013076:	b016      	add	sp, #88	; 0x58
 8013078:	bd70      	pop	{r4, r5, r6, pc}
	...

0801307c <__smakebuf_r>:
 801307c:	898b      	ldrh	r3, [r1, #12]
 801307e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013080:	079d      	lsls	r5, r3, #30
 8013082:	4606      	mov	r6, r0
 8013084:	460c      	mov	r4, r1
 8013086:	d507      	bpl.n	8013098 <__smakebuf_r+0x1c>
 8013088:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801308c:	6023      	str	r3, [r4, #0]
 801308e:	6123      	str	r3, [r4, #16]
 8013090:	2301      	movs	r3, #1
 8013092:	6163      	str	r3, [r4, #20]
 8013094:	b002      	add	sp, #8
 8013096:	bd70      	pop	{r4, r5, r6, pc}
 8013098:	ab01      	add	r3, sp, #4
 801309a:	466a      	mov	r2, sp
 801309c:	f7ff ffc8 	bl	8013030 <__swhatbuf_r>
 80130a0:	9900      	ldr	r1, [sp, #0]
 80130a2:	4605      	mov	r5, r0
 80130a4:	4630      	mov	r0, r6
 80130a6:	f7fb fcd7 	bl	800ea58 <_malloc_r>
 80130aa:	b948      	cbnz	r0, 80130c0 <__smakebuf_r+0x44>
 80130ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130b0:	059a      	lsls	r2, r3, #22
 80130b2:	d4ef      	bmi.n	8013094 <__smakebuf_r+0x18>
 80130b4:	f023 0303 	bic.w	r3, r3, #3
 80130b8:	f043 0302 	orr.w	r3, r3, #2
 80130bc:	81a3      	strh	r3, [r4, #12]
 80130be:	e7e3      	b.n	8013088 <__smakebuf_r+0xc>
 80130c0:	4b0d      	ldr	r3, [pc, #52]	; (80130f8 <__smakebuf_r+0x7c>)
 80130c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80130c4:	89a3      	ldrh	r3, [r4, #12]
 80130c6:	6020      	str	r0, [r4, #0]
 80130c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130cc:	81a3      	strh	r3, [r4, #12]
 80130ce:	9b00      	ldr	r3, [sp, #0]
 80130d0:	6163      	str	r3, [r4, #20]
 80130d2:	9b01      	ldr	r3, [sp, #4]
 80130d4:	6120      	str	r0, [r4, #16]
 80130d6:	b15b      	cbz	r3, 80130f0 <__smakebuf_r+0x74>
 80130d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130dc:	4630      	mov	r0, r6
 80130de:	f000 f913 	bl	8013308 <_isatty_r>
 80130e2:	b128      	cbz	r0, 80130f0 <__smakebuf_r+0x74>
 80130e4:	89a3      	ldrh	r3, [r4, #12]
 80130e6:	f023 0303 	bic.w	r3, r3, #3
 80130ea:	f043 0301 	orr.w	r3, r3, #1
 80130ee:	81a3      	strh	r3, [r4, #12]
 80130f0:	89a0      	ldrh	r0, [r4, #12]
 80130f2:	4305      	orrs	r5, r0
 80130f4:	81a5      	strh	r5, [r4, #12]
 80130f6:	e7cd      	b.n	8013094 <__smakebuf_r+0x18>
 80130f8:	08012e89 	.word	0x08012e89

080130fc <memmove>:
 80130fc:	4288      	cmp	r0, r1
 80130fe:	b510      	push	{r4, lr}
 8013100:	eb01 0402 	add.w	r4, r1, r2
 8013104:	d902      	bls.n	801310c <memmove+0x10>
 8013106:	4284      	cmp	r4, r0
 8013108:	4623      	mov	r3, r4
 801310a:	d807      	bhi.n	801311c <memmove+0x20>
 801310c:	1e43      	subs	r3, r0, #1
 801310e:	42a1      	cmp	r1, r4
 8013110:	d008      	beq.n	8013124 <memmove+0x28>
 8013112:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013116:	f803 2f01 	strb.w	r2, [r3, #1]!
 801311a:	e7f8      	b.n	801310e <memmove+0x12>
 801311c:	4402      	add	r2, r0
 801311e:	4601      	mov	r1, r0
 8013120:	428a      	cmp	r2, r1
 8013122:	d100      	bne.n	8013126 <memmove+0x2a>
 8013124:	bd10      	pop	{r4, pc}
 8013126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801312a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801312e:	e7f7      	b.n	8013120 <memmove+0x24>

08013130 <_realloc_r>:
 8013130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013134:	4680      	mov	r8, r0
 8013136:	4614      	mov	r4, r2
 8013138:	460e      	mov	r6, r1
 801313a:	b921      	cbnz	r1, 8013146 <_realloc_r+0x16>
 801313c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013140:	4611      	mov	r1, r2
 8013142:	f7fb bc89 	b.w	800ea58 <_malloc_r>
 8013146:	b92a      	cbnz	r2, 8013154 <_realloc_r+0x24>
 8013148:	f7fb fc1a 	bl	800e980 <_free_r>
 801314c:	4625      	mov	r5, r4
 801314e:	4628      	mov	r0, r5
 8013150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013154:	f000 f8fa 	bl	801334c <_malloc_usable_size_r>
 8013158:	4284      	cmp	r4, r0
 801315a:	4607      	mov	r7, r0
 801315c:	d802      	bhi.n	8013164 <_realloc_r+0x34>
 801315e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013162:	d812      	bhi.n	801318a <_realloc_r+0x5a>
 8013164:	4621      	mov	r1, r4
 8013166:	4640      	mov	r0, r8
 8013168:	f7fb fc76 	bl	800ea58 <_malloc_r>
 801316c:	4605      	mov	r5, r0
 801316e:	2800      	cmp	r0, #0
 8013170:	d0ed      	beq.n	801314e <_realloc_r+0x1e>
 8013172:	42bc      	cmp	r4, r7
 8013174:	4622      	mov	r2, r4
 8013176:	4631      	mov	r1, r6
 8013178:	bf28      	it	cs
 801317a:	463a      	movcs	r2, r7
 801317c:	f7fe fd04 	bl	8011b88 <memcpy>
 8013180:	4631      	mov	r1, r6
 8013182:	4640      	mov	r0, r8
 8013184:	f7fb fbfc 	bl	800e980 <_free_r>
 8013188:	e7e1      	b.n	801314e <_realloc_r+0x1e>
 801318a:	4635      	mov	r5, r6
 801318c:	e7df      	b.n	801314e <_realloc_r+0x1e>

0801318e <_raise_r>:
 801318e:	291f      	cmp	r1, #31
 8013190:	b538      	push	{r3, r4, r5, lr}
 8013192:	4604      	mov	r4, r0
 8013194:	460d      	mov	r5, r1
 8013196:	d904      	bls.n	80131a2 <_raise_r+0x14>
 8013198:	2316      	movs	r3, #22
 801319a:	6003      	str	r3, [r0, #0]
 801319c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80131a0:	bd38      	pop	{r3, r4, r5, pc}
 80131a2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80131a4:	b112      	cbz	r2, 80131ac <_raise_r+0x1e>
 80131a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80131aa:	b94b      	cbnz	r3, 80131c0 <_raise_r+0x32>
 80131ac:	4620      	mov	r0, r4
 80131ae:	f000 f831 	bl	8013214 <_getpid_r>
 80131b2:	462a      	mov	r2, r5
 80131b4:	4601      	mov	r1, r0
 80131b6:	4620      	mov	r0, r4
 80131b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131bc:	f000 b818 	b.w	80131f0 <_kill_r>
 80131c0:	2b01      	cmp	r3, #1
 80131c2:	d00a      	beq.n	80131da <_raise_r+0x4c>
 80131c4:	1c59      	adds	r1, r3, #1
 80131c6:	d103      	bne.n	80131d0 <_raise_r+0x42>
 80131c8:	2316      	movs	r3, #22
 80131ca:	6003      	str	r3, [r0, #0]
 80131cc:	2001      	movs	r0, #1
 80131ce:	e7e7      	b.n	80131a0 <_raise_r+0x12>
 80131d0:	2400      	movs	r4, #0
 80131d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80131d6:	4628      	mov	r0, r5
 80131d8:	4798      	blx	r3
 80131da:	2000      	movs	r0, #0
 80131dc:	e7e0      	b.n	80131a0 <_raise_r+0x12>
	...

080131e0 <raise>:
 80131e0:	4b02      	ldr	r3, [pc, #8]	; (80131ec <raise+0xc>)
 80131e2:	4601      	mov	r1, r0
 80131e4:	6818      	ldr	r0, [r3, #0]
 80131e6:	f7ff bfd2 	b.w	801318e <_raise_r>
 80131ea:	bf00      	nop
 80131ec:	20001384 	.word	0x20001384

080131f0 <_kill_r>:
 80131f0:	b538      	push	{r3, r4, r5, lr}
 80131f2:	4d07      	ldr	r5, [pc, #28]	; (8013210 <_kill_r+0x20>)
 80131f4:	2300      	movs	r3, #0
 80131f6:	4604      	mov	r4, r0
 80131f8:	4608      	mov	r0, r1
 80131fa:	4611      	mov	r1, r2
 80131fc:	602b      	str	r3, [r5, #0]
 80131fe:	f7f1 f8d9 	bl	80043b4 <_kill>
 8013202:	1c43      	adds	r3, r0, #1
 8013204:	d102      	bne.n	801320c <_kill_r+0x1c>
 8013206:	682b      	ldr	r3, [r5, #0]
 8013208:	b103      	cbz	r3, 801320c <_kill_r+0x1c>
 801320a:	6023      	str	r3, [r4, #0]
 801320c:	bd38      	pop	{r3, r4, r5, pc}
 801320e:	bf00      	nop
 8013210:	20014004 	.word	0x20014004

08013214 <_getpid_r>:
 8013214:	f7f1 b8cc 	b.w	80043b0 <_getpid>

08013218 <__sread>:
 8013218:	b510      	push	{r4, lr}
 801321a:	460c      	mov	r4, r1
 801321c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013220:	f000 f89c 	bl	801335c <_read_r>
 8013224:	2800      	cmp	r0, #0
 8013226:	bfab      	itete	ge
 8013228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801322a:	89a3      	ldrhlt	r3, [r4, #12]
 801322c:	181b      	addge	r3, r3, r0
 801322e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013232:	bfac      	ite	ge
 8013234:	6563      	strge	r3, [r4, #84]	; 0x54
 8013236:	81a3      	strhlt	r3, [r4, #12]
 8013238:	bd10      	pop	{r4, pc}

0801323a <__swrite>:
 801323a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801323e:	461f      	mov	r7, r3
 8013240:	898b      	ldrh	r3, [r1, #12]
 8013242:	05db      	lsls	r3, r3, #23
 8013244:	4605      	mov	r5, r0
 8013246:	460c      	mov	r4, r1
 8013248:	4616      	mov	r6, r2
 801324a:	d505      	bpl.n	8013258 <__swrite+0x1e>
 801324c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013250:	2302      	movs	r3, #2
 8013252:	2200      	movs	r2, #0
 8013254:	f000 f868 	bl	8013328 <_lseek_r>
 8013258:	89a3      	ldrh	r3, [r4, #12]
 801325a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801325e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013262:	81a3      	strh	r3, [r4, #12]
 8013264:	4632      	mov	r2, r6
 8013266:	463b      	mov	r3, r7
 8013268:	4628      	mov	r0, r5
 801326a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801326e:	f000 b817 	b.w	80132a0 <_write_r>

08013272 <__sseek>:
 8013272:	b510      	push	{r4, lr}
 8013274:	460c      	mov	r4, r1
 8013276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801327a:	f000 f855 	bl	8013328 <_lseek_r>
 801327e:	1c43      	adds	r3, r0, #1
 8013280:	89a3      	ldrh	r3, [r4, #12]
 8013282:	bf15      	itete	ne
 8013284:	6560      	strne	r0, [r4, #84]	; 0x54
 8013286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801328a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801328e:	81a3      	strheq	r3, [r4, #12]
 8013290:	bf18      	it	ne
 8013292:	81a3      	strhne	r3, [r4, #12]
 8013294:	bd10      	pop	{r4, pc}

08013296 <__sclose>:
 8013296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801329a:	f000 b813 	b.w	80132c4 <_close_r>
	...

080132a0 <_write_r>:
 80132a0:	b538      	push	{r3, r4, r5, lr}
 80132a2:	4d07      	ldr	r5, [pc, #28]	; (80132c0 <_write_r+0x20>)
 80132a4:	4604      	mov	r4, r0
 80132a6:	4608      	mov	r0, r1
 80132a8:	4611      	mov	r1, r2
 80132aa:	2200      	movs	r2, #0
 80132ac:	602a      	str	r2, [r5, #0]
 80132ae:	461a      	mov	r2, r3
 80132b0:	f7f1 f89e 	bl	80043f0 <_write>
 80132b4:	1c43      	adds	r3, r0, #1
 80132b6:	d102      	bne.n	80132be <_write_r+0x1e>
 80132b8:	682b      	ldr	r3, [r5, #0]
 80132ba:	b103      	cbz	r3, 80132be <_write_r+0x1e>
 80132bc:	6023      	str	r3, [r4, #0]
 80132be:	bd38      	pop	{r3, r4, r5, pc}
 80132c0:	20014004 	.word	0x20014004

080132c4 <_close_r>:
 80132c4:	b538      	push	{r3, r4, r5, lr}
 80132c6:	4d06      	ldr	r5, [pc, #24]	; (80132e0 <_close_r+0x1c>)
 80132c8:	2300      	movs	r3, #0
 80132ca:	4604      	mov	r4, r0
 80132cc:	4608      	mov	r0, r1
 80132ce:	602b      	str	r3, [r5, #0]
 80132d0:	f7f1 f89c 	bl	800440c <_close>
 80132d4:	1c43      	adds	r3, r0, #1
 80132d6:	d102      	bne.n	80132de <_close_r+0x1a>
 80132d8:	682b      	ldr	r3, [r5, #0]
 80132da:	b103      	cbz	r3, 80132de <_close_r+0x1a>
 80132dc:	6023      	str	r3, [r4, #0]
 80132de:	bd38      	pop	{r3, r4, r5, pc}
 80132e0:	20014004 	.word	0x20014004

080132e4 <_fstat_r>:
 80132e4:	b538      	push	{r3, r4, r5, lr}
 80132e6:	4d07      	ldr	r5, [pc, #28]	; (8013304 <_fstat_r+0x20>)
 80132e8:	2300      	movs	r3, #0
 80132ea:	4604      	mov	r4, r0
 80132ec:	4608      	mov	r0, r1
 80132ee:	4611      	mov	r1, r2
 80132f0:	602b      	str	r3, [r5, #0]
 80132f2:	f7f1 f88e 	bl	8004412 <_fstat>
 80132f6:	1c43      	adds	r3, r0, #1
 80132f8:	d102      	bne.n	8013300 <_fstat_r+0x1c>
 80132fa:	682b      	ldr	r3, [r5, #0]
 80132fc:	b103      	cbz	r3, 8013300 <_fstat_r+0x1c>
 80132fe:	6023      	str	r3, [r4, #0]
 8013300:	bd38      	pop	{r3, r4, r5, pc}
 8013302:	bf00      	nop
 8013304:	20014004 	.word	0x20014004

08013308 <_isatty_r>:
 8013308:	b538      	push	{r3, r4, r5, lr}
 801330a:	4d06      	ldr	r5, [pc, #24]	; (8013324 <_isatty_r+0x1c>)
 801330c:	2300      	movs	r3, #0
 801330e:	4604      	mov	r4, r0
 8013310:	4608      	mov	r0, r1
 8013312:	602b      	str	r3, [r5, #0]
 8013314:	f7f1 f882 	bl	800441c <_isatty>
 8013318:	1c43      	adds	r3, r0, #1
 801331a:	d102      	bne.n	8013322 <_isatty_r+0x1a>
 801331c:	682b      	ldr	r3, [r5, #0]
 801331e:	b103      	cbz	r3, 8013322 <_isatty_r+0x1a>
 8013320:	6023      	str	r3, [r4, #0]
 8013322:	bd38      	pop	{r3, r4, r5, pc}
 8013324:	20014004 	.word	0x20014004

08013328 <_lseek_r>:
 8013328:	b538      	push	{r3, r4, r5, lr}
 801332a:	4d07      	ldr	r5, [pc, #28]	; (8013348 <_lseek_r+0x20>)
 801332c:	4604      	mov	r4, r0
 801332e:	4608      	mov	r0, r1
 8013330:	4611      	mov	r1, r2
 8013332:	2200      	movs	r2, #0
 8013334:	602a      	str	r2, [r5, #0]
 8013336:	461a      	mov	r2, r3
 8013338:	f7f1 f872 	bl	8004420 <_lseek>
 801333c:	1c43      	adds	r3, r0, #1
 801333e:	d102      	bne.n	8013346 <_lseek_r+0x1e>
 8013340:	682b      	ldr	r3, [r5, #0]
 8013342:	b103      	cbz	r3, 8013346 <_lseek_r+0x1e>
 8013344:	6023      	str	r3, [r4, #0]
 8013346:	bd38      	pop	{r3, r4, r5, pc}
 8013348:	20014004 	.word	0x20014004

0801334c <_malloc_usable_size_r>:
 801334c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013350:	1f18      	subs	r0, r3, #4
 8013352:	2b00      	cmp	r3, #0
 8013354:	bfbc      	itt	lt
 8013356:	580b      	ldrlt	r3, [r1, r0]
 8013358:	18c0      	addlt	r0, r0, r3
 801335a:	4770      	bx	lr

0801335c <_read_r>:
 801335c:	b538      	push	{r3, r4, r5, lr}
 801335e:	4d07      	ldr	r5, [pc, #28]	; (801337c <_read_r+0x20>)
 8013360:	4604      	mov	r4, r0
 8013362:	4608      	mov	r0, r1
 8013364:	4611      	mov	r1, r2
 8013366:	2200      	movs	r2, #0
 8013368:	602a      	str	r2, [r5, #0]
 801336a:	461a      	mov	r2, r3
 801336c:	f7f1 f830 	bl	80043d0 <_read>
 8013370:	1c43      	adds	r3, r0, #1
 8013372:	d102      	bne.n	801337a <_read_r+0x1e>
 8013374:	682b      	ldr	r3, [r5, #0]
 8013376:	b103      	cbz	r3, 801337a <_read_r+0x1e>
 8013378:	6023      	str	r3, [r4, #0]
 801337a:	bd38      	pop	{r3, r4, r5, pc}
 801337c:	20014004 	.word	0x20014004

08013380 <_gettimeofday>:
 8013380:	4b02      	ldr	r3, [pc, #8]	; (801338c <_gettimeofday+0xc>)
 8013382:	2258      	movs	r2, #88	; 0x58
 8013384:	601a      	str	r2, [r3, #0]
 8013386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801338a:	4770      	bx	lr
 801338c:	20014004 	.word	0x20014004

08013390 <_init>:
 8013390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013392:	bf00      	nop
 8013394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013396:	bc08      	pop	{r3}
 8013398:	469e      	mov	lr, r3
 801339a:	4770      	bx	lr

0801339c <_fini>:
 801339c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801339e:	bf00      	nop
 80133a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133a2:	bc08      	pop	{r3}
 80133a4:	469e      	mov	lr, r3
 80133a6:	4770      	bx	lr
