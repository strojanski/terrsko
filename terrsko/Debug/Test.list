
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f590  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001184  0800f770  0800f770  0001f770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108f4  080108f4  00030584  2**0
                  CONTENTS
  4 .ARM          00000008  080108f4  080108f4  000208f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108fc  080108fc  00030584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108fc  080108fc  000208fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010900  08010900  00020900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000584  20000000  08010904  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002394  20000584  08010e88  00030584  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002918  08010e88  00032918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030584  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f486  00000000  00000000  000305b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000903e  00000000  00000000  0007fa3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00035a3e  00000000  00000000  00088a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e28  00000000  00000000  000be4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003310  00000000  00000000  000c12e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000389b2  00000000  00000000  000c45f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00053300  00000000  00000000  000fcfa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013fa30  00000000  00000000  001502a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0028fcd2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000090d8  00000000  00000000  0028fd24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000584 	.word	0x20000584
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f758 	.word	0x0800f758

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000588 	.word	0x20000588
 800021c:	0800f758 	.word	0x0800f758

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001048:	b510      	push	{r4, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800104c:	2400      	movs	r4, #0
 800104e:	9409      	str	r4, [sp, #36]	; 0x24
 8001050:	940a      	str	r4, [sp, #40]	; 0x28
 8001052:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8001054:	2220      	movs	r2, #32
 8001056:	4621      	mov	r1, r4
 8001058:	a801      	add	r0, sp, #4
 800105a:	f009 ff11 	bl	800ae80 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800105e:	4820      	ldr	r0, [pc, #128]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001060:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001064:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001066:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800106a:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106c:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106e:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 8001070:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001072:	6144      	str	r4, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001074:	2304      	movs	r3, #4
 8001076:	6183      	str	r3, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001078:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800107a:	7744      	strb	r4, [r0, #29]
  hadc1.Init.NbrOfConversion = 1;
 800107c:	2301      	movs	r3, #1
 800107e:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001080:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001084:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001086:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001088:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800108c:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800108e:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001092:	f002 f86f 	bl	8003174 <HAL_ADC_Init>
 8001096:	b9c8      	cbnz	r0, 80010cc <MX_ADC1_Init+0x84>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001098:	2300      	movs	r3, #0
 800109a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800109c:	a909      	add	r1, sp, #36	; 0x24
 800109e:	4810      	ldr	r0, [pc, #64]	; (80010e0 <MX_ADC1_Init+0x98>)
 80010a0:	f002 fd9a 	bl	8003bd8 <HAL_ADCEx_MultiModeConfigChannel>
 80010a4:	b9a8      	cbnz	r0, 80010d2 <MX_ADC1_Init+0x8a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_ADC1_Init+0x9c>)
 80010a8:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010aa:	2306      	movs	r3, #6
 80010ac:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ae:	2300      	movs	r3, #0
 80010b0:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b2:	227f      	movs	r2, #127	; 0x7f
 80010b4:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010b6:	2204      	movs	r2, #4
 80010b8:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 80010ba:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010bc:	eb0d 0102 	add.w	r1, sp, r2
 80010c0:	4807      	ldr	r0, [pc, #28]	; (80010e0 <MX_ADC1_Init+0x98>)
 80010c2:	f002 fa05 	bl	80034d0 <HAL_ADC_ConfigChannel>
 80010c6:	b938      	cbnz	r0, 80010d8 <MX_ADC1_Init+0x90>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c8:	b00c      	add	sp, #48	; 0x30
 80010ca:	bd10      	pop	{r4, pc}
    Error_Handler();
 80010cc:	f000 fef2 	bl	8001eb4 <Error_Handler>
 80010d0:	e7e2      	b.n	8001098 <MX_ADC1_Init+0x50>
    Error_Handler();
 80010d2:	f000 feef 	bl	8001eb4 <Error_Handler>
 80010d6:	e7e6      	b.n	80010a6 <MX_ADC1_Init+0x5e>
    Error_Handler();
 80010d8:	f000 feec 	bl	8001eb4 <Error_Handler>
}
 80010dc:	e7f4      	b.n	80010c8 <MX_ADC1_Init+0x80>
 80010de:	bf00      	nop
 80010e0:	200005ac 	.word	0x200005ac
 80010e4:	08600004 	.word	0x08600004

080010e8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010e8:	b500      	push	{lr}
 80010ea:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ec:	2220      	movs	r2, #32
 80010ee:	2100      	movs	r1, #0
 80010f0:	4668      	mov	r0, sp
 80010f2:	f009 fec5 	bl	800ae80 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010f6:	481b      	ldr	r0, [pc, #108]	; (8001164 <MX_ADC2_Init+0x7c>)
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <MX_ADC2_Init+0x80>)
 80010fa:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010fc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001100:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001102:	2300      	movs	r3, #0
 8001104:	6083      	str	r3, [r0, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001106:	60c3      	str	r3, [r0, #12]
  hadc2.Init.GainCompensation = 0;
 8001108:	6103      	str	r3, [r0, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800110a:	6143      	str	r3, [r0, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800110c:	2204      	movs	r2, #4
 800110e:	6182      	str	r2, [r0, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001110:	7703      	strb	r3, [r0, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001112:	7743      	strb	r3, [r0, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001114:	2201      	movs	r2, #1
 8001116:	6202      	str	r2, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001118:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800111c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111e:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001120:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001124:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001126:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800112a:	f002 f823 	bl	8003174 <HAL_ADC_Init>
 800112e:	b990      	cbnz	r0, 8001156 <MX_ADC2_Init+0x6e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_ADC2_Init+0x84>)
 8001132:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001134:	2306      	movs	r3, #6
 8001136:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001138:	2300      	movs	r3, #0
 800113a:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800113c:	227f      	movs	r2, #127	; 0x7f
 800113e:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001140:	2204      	movs	r2, #4
 8001142:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 8001144:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001146:	4669      	mov	r1, sp
 8001148:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_ADC2_Init+0x7c>)
 800114a:	f002 f9c1 	bl	80034d0 <HAL_ADC_ConfigChannel>
 800114e:	b928      	cbnz	r0, 800115c <MX_ADC2_Init+0x74>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001150:	b009      	add	sp, #36	; 0x24
 8001152:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001156:	f000 fead 	bl	8001eb4 <Error_Handler>
 800115a:	e7e9      	b.n	8001130 <MX_ADC2_Init+0x48>
    Error_Handler();
 800115c:	f000 feaa 	bl	8001eb4 <Error_Handler>
}
 8001160:	e7f6      	b.n	8001150 <MX_ADC2_Init+0x68>
 8001162:	bf00      	nop
 8001164:	20000618 	.word	0x20000618
 8001168:	50000100 	.word	0x50000100
 800116c:	14f00020 	.word	0x14f00020

08001170 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001170:	b510      	push	{r4, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001174:	2400      	movs	r4, #0
 8001176:	9409      	str	r4, [sp, #36]	; 0x24
 8001178:	940a      	str	r4, [sp, #40]	; 0x28
 800117a:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 800117c:	2220      	movs	r2, #32
 800117e:	4621      	mov	r1, r4
 8001180:	a801      	add	r0, sp, #4
 8001182:	f009 fe7d 	bl	800ae80 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001186:	481f      	ldr	r0, [pc, #124]	; (8001204 <MX_ADC3_Init+0x94>)
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <MX_ADC3_Init+0x98>)
 800118a:	6003      	str	r3, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800118c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001190:	6043      	str	r3, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001192:	6084      	str	r4, [r0, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001194:	60c4      	str	r4, [r0, #12]
  hadc3.Init.GainCompensation = 0;
 8001196:	6104      	str	r4, [r0, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001198:	6144      	str	r4, [r0, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119a:	2304      	movs	r3, #4
 800119c:	6183      	str	r3, [r0, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800119e:	7704      	strb	r4, [r0, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011a0:	7744      	strb	r4, [r0, #29]
  hadc3.Init.NbrOfConversion = 1;
 80011a2:	2301      	movs	r3, #1
 80011a4:	6203      	str	r3, [r0, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011a6:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011aa:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ac:	6304      	str	r4, [r0, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011ae:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b2:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80011b4:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011b8:	f001 ffdc 	bl	8003174 <HAL_ADC_Init>
 80011bc:	b9c8      	cbnz	r0, 80011f2 <MX_ADC3_Init+0x82>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011be:	2300      	movs	r3, #0
 80011c0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011c2:	a909      	add	r1, sp, #36	; 0x24
 80011c4:	480f      	ldr	r0, [pc, #60]	; (8001204 <MX_ADC3_Init+0x94>)
 80011c6:	f002 fd07 	bl	8003bd8 <HAL_ADCEx_MultiModeConfigChannel>
 80011ca:	b9a8      	cbnz	r0, 80011f8 <MX_ADC3_Init+0x88>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_ADC3_Init+0x9c>)
 80011ce:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d0:	2306      	movs	r3, #6
 80011d2:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011d4:	2300      	movs	r3, #0
 80011d6:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011d8:	227f      	movs	r2, #127	; 0x7f
 80011da:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011dc:	2204      	movs	r2, #4
 80011de:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 80011e0:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011e2:	eb0d 0102 	add.w	r1, sp, r2
 80011e6:	4807      	ldr	r0, [pc, #28]	; (8001204 <MX_ADC3_Init+0x94>)
 80011e8:	f002 f972 	bl	80034d0 <HAL_ADC_ConfigChannel>
 80011ec:	b938      	cbnz	r0, 80011fe <MX_ADC3_Init+0x8e>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011ee:	b00c      	add	sp, #48	; 0x30
 80011f0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80011f2:	f000 fe5f 	bl	8001eb4 <Error_Handler>
 80011f6:	e7e2      	b.n	80011be <MX_ADC3_Init+0x4e>
    Error_Handler();
 80011f8:	f000 fe5c 	bl	8001eb4 <Error_Handler>
 80011fc:	e7e6      	b.n	80011cc <MX_ADC3_Init+0x5c>
    Error_Handler();
 80011fe:	f000 fe59 	bl	8001eb4 <Error_Handler>
}
 8001202:	e7f4      	b.n	80011ee <MX_ADC3_Init+0x7e>
 8001204:	20000684 	.word	0x20000684
 8001208:	50000400 	.word	0x50000400
 800120c:	21800100 	.word	0x21800100

08001210 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8001210:	b500      	push	{lr}
 8001212:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001214:	2220      	movs	r2, #32
 8001216:	2100      	movs	r1, #0
 8001218:	4668      	mov	r0, sp
 800121a:	f009 fe31 	bl	800ae80 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800121e:	4822      	ldr	r0, [pc, #136]	; (80012a8 <MX_ADC4_Init+0x98>)
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <MX_ADC4_Init+0x9c>)
 8001222:	6003      	str	r3, [r0, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001224:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001228:	6043      	str	r3, [r0, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800122a:	2300      	movs	r3, #0
 800122c:	6083      	str	r3, [r0, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122e:	60c3      	str	r3, [r0, #12]
  hadc4.Init.GainCompensation = 0;
 8001230:	6103      	str	r3, [r0, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001232:	2201      	movs	r2, #1
 8001234:	6142      	str	r2, [r0, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001236:	2104      	movs	r1, #4
 8001238:	6181      	str	r1, [r0, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800123a:	7703      	strb	r3, [r0, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 800123c:	7742      	strb	r2, [r0, #29]
  hadc4.Init.NbrOfConversion = 2;
 800123e:	2102      	movs	r1, #2
 8001240:	6201      	str	r1, [r0, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001242:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001246:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001248:	6303      	str	r3, [r0, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800124a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800124e:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001250:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001254:	f001 ff8e 	bl	8003174 <HAL_ADC_Init>
 8001258:	b9e0      	cbnz	r0, 8001294 <MX_ADC4_Init+0x84>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_ADC4_Init+0xa0>)
 800125c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800125e:	2306      	movs	r3, #6
 8001260:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001262:	2307      	movs	r3, #7
 8001264:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001266:	237f      	movs	r3, #127	; 0x7f
 8001268:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800126a:	2304      	movs	r3, #4
 800126c:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001272:	4669      	mov	r1, sp
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <MX_ADC4_Init+0x98>)
 8001276:	f002 f92b 	bl	80034d0 <HAL_ADC_ConfigChannel>
 800127a:	b970      	cbnz	r0, 800129a <MX_ADC4_Init+0x8a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <MX_ADC4_Init+0xa4>)
 800127e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001280:	230c      	movs	r3, #12
 8001282:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001284:	4669      	mov	r1, sp
 8001286:	4808      	ldr	r0, [pc, #32]	; (80012a8 <MX_ADC4_Init+0x98>)
 8001288:	f002 f922 	bl	80034d0 <HAL_ADC_ConfigChannel>
 800128c:	b940      	cbnz	r0, 80012a0 <MX_ADC4_Init+0x90>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800128e:	b009      	add	sp, #36	; 0x24
 8001290:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001294:	f000 fe0e 	bl	8001eb4 <Error_Handler>
 8001298:	e7df      	b.n	800125a <MX_ADC4_Init+0x4a>
    Error_Handler();
 800129a:	f000 fe0b 	bl	8001eb4 <Error_Handler>
 800129e:	e7ed      	b.n	800127c <MX_ADC4_Init+0x6c>
    Error_Handler();
 80012a0:	f000 fe08 	bl	8001eb4 <Error_Handler>
}
 80012a4:	e7f3      	b.n	800128e <MX_ADC4_Init+0x7e>
 80012a6:	bf00      	nop
 80012a8:	200006f0 	.word	0x200006f0
 80012ac:	50000500 	.word	0x50000500
 80012b0:	10c00010 	.word	0x10c00010
 80012b4:	14f00020 	.word	0x14f00020

080012b8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012b8:	b530      	push	{r4, r5, lr}
 80012ba:	b0a7      	sub	sp, #156	; 0x9c
 80012bc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	2100      	movs	r1, #0
 80012c0:	9121      	str	r1, [sp, #132]	; 0x84
 80012c2:	9122      	str	r1, [sp, #136]	; 0x88
 80012c4:	9123      	str	r1, [sp, #140]	; 0x8c
 80012c6:	9124      	str	r1, [sp, #144]	; 0x90
 80012c8:	9125      	str	r1, [sp, #148]	; 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ca:	2254      	movs	r2, #84	; 0x54
 80012cc:	a80c      	add	r0, sp, #48	; 0x30
 80012ce:	f009 fdd7 	bl	800ae80 <memset>
  if(adcHandle->Instance==ADC1)
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d8:	d00c      	beq.n	80012f4 <HAL_ADC_MspInit+0x3c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 80012da:	4a96      	ldr	r2, [pc, #600]	; (8001534 <HAL_ADC_MspInit+0x27c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d03d      	beq.n	800135c <HAL_ADC_MspInit+0xa4>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 80012e0:	4a95      	ldr	r2, [pc, #596]	; (8001538 <HAL_ADC_MspInit+0x280>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	f000 80a2 	beq.w	800142c <HAL_ADC_MspInit+0x174>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC4)
 80012e8:	4a94      	ldr	r2, [pc, #592]	; (800153c <HAL_ADC_MspInit+0x284>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	f000 80d2 	beq.w	8001494 <HAL_ADC_MspInit+0x1dc>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 80012f0:	b027      	add	sp, #156	; 0x9c
 80012f2:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012f8:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012fe:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001300:	a80c      	add	r0, sp, #48	; 0x30
 8001302:	f005 fca1 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 8001306:	b9d8      	cbnz	r0, 8001340 <HAL_ADC_MspInit+0x88>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001308:	4a8d      	ldr	r2, [pc, #564]	; (8001540 <HAL_ADC_MspInit+0x288>)
 800130a:	6813      	ldr	r3, [r2, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001310:	2b01      	cmp	r3, #1
 8001312:	d018      	beq.n	8001346 <HAL_ADC_MspInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b8b      	ldr	r3, [pc, #556]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 8001316:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001318:	f042 0201 	orr.w	r2, r2, #1
 800131c:	64da      	str	r2, [r3, #76]	; 0x4c
 800131e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AD0_Pin|AD1_Pin|AD2_Pin|AD3_Pin;
 8001328:	230f      	movs	r3, #15
 800132a:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132c:	2303      	movs	r3, #3
 800132e:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	a921      	add	r1, sp, #132	; 0x84
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f003 fa6b 	bl	8004814 <HAL_GPIO_Init>
 800133e:	e7d7      	b.n	80012f0 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001340:	f000 fdb8 	bl	8001eb4 <Error_Handler>
 8001344:	e7e0      	b.n	8001308 <HAL_ADC_MspInit+0x50>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001346:	4b7f      	ldr	r3, [pc, #508]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 8001348:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800134a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800134e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	9b01      	ldr	r3, [sp, #4]
 800135a:	e7db      	b.n	8001314 <HAL_ADC_MspInit+0x5c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800135c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001360:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001362:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001366:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001368:	a80c      	add	r0, sp, #48	; 0x30
 800136a:	f005 fc6d 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 800136e:	2800      	cmp	r0, #0
 8001370:	d14e      	bne.n	8001410 <HAL_ADC_MspInit+0x158>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001372:	4a73      	ldr	r2, [pc, #460]	; (8001540 <HAL_ADC_MspInit+0x288>)
 8001374:	6813      	ldr	r3, [r2, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800137a:	2b01      	cmp	r3, #1
 800137c:	d04b      	beq.n	8001416 <HAL_ADC_MspInit+0x15e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800137e:	4b71      	ldr	r3, [pc, #452]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 8001380:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001382:	f042 0220 	orr.w	r2, r2, #32
 8001386:	64da      	str	r2, [r3, #76]	; 0x4c
 8001388:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800138a:	f002 0220 	and.w	r2, r2, #32
 800138e:	9204      	str	r2, [sp, #16]
 8001390:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001394:	f042 0201 	orr.w	r2, r2, #1
 8001398:	64da      	str	r2, [r3, #76]	; 0x4c
 800139a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800139c:	f002 0201 	and.w	r2, r2, #1
 80013a0:	9205      	str	r2, [sp, #20]
 80013a2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013a6:	f042 0204 	orr.w	r2, r2, #4
 80013aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80013ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013ae:	f002 0204 	and.w	r2, r2, #4
 80013b2:	9206      	str	r2, [sp, #24]
 80013b4:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013b8:	f042 0202 	orr.w	r2, r2, #2
 80013bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80013be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	9307      	str	r3, [sp, #28]
 80013c6:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = AD5_Pin;
 80013c8:	2302      	movs	r3, #2
 80013ca:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013cc:	2503      	movs	r5, #3
 80013ce:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2400      	movs	r4, #0
 80013d2:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD5_GPIO_Port, &GPIO_InitStruct);
 80013d4:	a921      	add	r1, sp, #132	; 0x84
 80013d6:	485c      	ldr	r0, [pc, #368]	; (8001548 <HAL_ADC_MspInit+0x290>)
 80013d8:	f003 fa1c 	bl	8004814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD8_Pin;
 80013dc:	2320      	movs	r3, #32
 80013de:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e0:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD8_GPIO_Port, &GPIO_InitStruct);
 80013e4:	a921      	add	r1, sp, #132	; 0x84
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ea:	f003 fa13 	bl	8004814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD4_Pin|AD6_Pin;
 80013ee:	2330      	movs	r3, #48	; 0x30
 80013f0:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f2:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f6:	a921      	add	r1, sp, #132	; 0x84
 80013f8:	4854      	ldr	r0, [pc, #336]	; (800154c <HAL_ADC_MspInit+0x294>)
 80013fa:	f003 fa0b 	bl	8004814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD7_Pin;
 80013fe:	2304      	movs	r3, #4
 8001400:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001402:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD7_GPIO_Port, &GPIO_InitStruct);
 8001406:	a921      	add	r1, sp, #132	; 0x84
 8001408:	4851      	ldr	r0, [pc, #324]	; (8001550 <HAL_ADC_MspInit+0x298>)
 800140a:	f003 fa03 	bl	8004814 <HAL_GPIO_Init>
 800140e:	e76f      	b.n	80012f0 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001410:	f000 fd50 	bl	8001eb4 <Error_Handler>
 8001414:	e7ad      	b.n	8001372 <HAL_ADC_MspInit+0xba>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001416:	4b4b      	ldr	r3, [pc, #300]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 8001418:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800141a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800141e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001426:	9303      	str	r3, [sp, #12]
 8001428:	9b03      	ldr	r3, [sp, #12]
 800142a:	e7a8      	b.n	800137e <HAL_ADC_MspInit+0xc6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800142c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001430:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001432:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001436:	931e      	str	r3, [sp, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001438:	a80c      	add	r0, sp, #48	; 0x30
 800143a:	f005 fc05 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 800143e:	b9d8      	cbnz	r0, 8001478 <HAL_ADC_MspInit+0x1c0>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001440:	4a44      	ldr	r2, [pc, #272]	; (8001554 <HAL_ADC_MspInit+0x29c>)
 8001442:	6813      	ldr	r3, [r2, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001448:	2b01      	cmp	r3, #1
 800144a:	d018      	beq.n	800147e <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800144c:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 800144e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001450:	f042 0208 	orr.w	r2, r2, #8
 8001454:	64da      	str	r2, [r3, #76]	; 0x4c
 8001456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	9309      	str	r3, [sp, #36]	; 0x24
 800145e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = AD9_Pin|AD10_Pin|AD11_Pin;
 8001460:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001464:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001466:	2303      	movs	r3, #3
 8001468:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146e:	a921      	add	r1, sp, #132	; 0x84
 8001470:	4839      	ldr	r0, [pc, #228]	; (8001558 <HAL_ADC_MspInit+0x2a0>)
 8001472:	f003 f9cf 	bl	8004814 <HAL_GPIO_Init>
 8001476:	e73b      	b.n	80012f0 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001478:	f000 fd1c 	bl	8001eb4 <Error_Handler>
 800147c:	e7e0      	b.n	8001440 <HAL_ADC_MspInit+0x188>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800147e:	4b31      	ldr	r3, [pc, #196]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 8001480:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001486:	64da      	str	r2, [r3, #76]	; 0x4c
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148e:	9308      	str	r3, [sp, #32]
 8001490:	9b08      	ldr	r3, [sp, #32]
 8001492:	e7db      	b.n	800144c <HAL_ADC_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001498:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800149a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800149e:	931e      	str	r3, [sp, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a0:	a80c      	add	r0, sp, #48	; 0x30
 80014a2:	f005 fbd1 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 80014a6:	2800      	cmp	r0, #0
 80014a8:	d133      	bne.n	8001512 <HAL_ADC_MspInit+0x25a>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014aa:	4a2a      	ldr	r2, [pc, #168]	; (8001554 <HAL_ADC_MspInit+0x29c>)
 80014ac:	6813      	ldr	r3, [r2, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d030      	beq.n	8001518 <HAL_ADC_MspInit+0x260>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	4b23      	ldr	r3, [pc, #140]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 80014b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ba:	f042 0202 	orr.w	r2, r2, #2
 80014be:	64da      	str	r2, [r3, #76]	; 0x4c
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80014c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80014ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014ce:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d0:	2303      	movs	r3, #3
 80014d2:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2500      	movs	r5, #0
 80014d6:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	a921      	add	r1, sp, #132	; 0x84
 80014da:	481d      	ldr	r0, [pc, #116]	; (8001550 <HAL_ADC_MspInit+0x298>)
 80014dc:	f003 f99a 	bl	8004814 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel5;
 80014e0:	481e      	ldr	r0, [pc, #120]	; (800155c <HAL_ADC_MspInit+0x2a4>)
 80014e2:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <HAL_ADC_MspInit+0x2a8>)
 80014e4:	6003      	str	r3, [r0, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80014e6:	2326      	movs	r3, #38	; 0x26
 80014e8:	6043      	str	r3, [r0, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ea:	6085      	str	r5, [r0, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ec:	60c5      	str	r5, [r0, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	6103      	str	r3, [r0, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f6:	6143      	str	r3, [r0, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014fc:	6183      	str	r3, [r0, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80014fe:	2320      	movs	r3, #32
 8001500:	61c3      	str	r3, [r0, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8001502:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001504:	f002 fea0 	bl	8004248 <HAL_DMA_Init>
 8001508:	b988      	cbnz	r0, 800152e <HAL_ADC_MspInit+0x276>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_ADC_MspInit+0x2a4>)
 800150c:	6563      	str	r3, [r4, #84]	; 0x54
 800150e:	629c      	str	r4, [r3, #40]	; 0x28
}
 8001510:	e6ee      	b.n	80012f0 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001512:	f000 fccf 	bl	8001eb4 <Error_Handler>
 8001516:	e7c8      	b.n	80014aa <HAL_ADC_MspInit+0x1f2>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 800151a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800151c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001520:	64da      	str	r2, [r3, #76]	; 0x4c
 8001522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001528:	930a      	str	r3, [sp, #40]	; 0x28
 800152a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800152c:	e7c3      	b.n	80014b6 <HAL_ADC_MspInit+0x1fe>
      Error_Handler();
 800152e:	f000 fcc1 	bl	8001eb4 <Error_Handler>
 8001532:	e7ea      	b.n	800150a <HAL_ADC_MspInit+0x252>
 8001534:	50000100 	.word	0x50000100
 8001538:	50000400 	.word	0x50000400
 800153c:	50000500 	.word	0x50000500
 8001540:	200005a4 	.word	0x200005a4
 8001544:	40021000 	.word	0x40021000
 8001548:	48001400 	.word	0x48001400
 800154c:	48000800 	.word	0x48000800
 8001550:	48000400 	.word	0x48000400
 8001554:	200005a8 	.word	0x200005a8
 8001558:	48000c00 	.word	0x48000c00
 800155c:	2000075c 	.word	0x2000075c
 8001560:	40020058 	.word	0x40020058

08001564 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001564:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001566:	4808      	ldr	r0, [pc, #32]	; (8001588 <MX_CRC_Init+0x24>)
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_CRC_Init+0x28>)
 800156a:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001570:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001572:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001574:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001576:	2301      	movs	r3, #1
 8001578:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800157a:	f002 fc83 	bl	8003e84 <HAL_CRC_Init>
 800157e:	b900      	cbnz	r0, 8001582 <MX_CRC_Init+0x1e>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001580:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001582:	f000 fc97 	bl	8001eb4 <Error_Handler>
}
 8001586:	e7fb      	b.n	8001580 <MX_CRC_Init+0x1c>
 8001588:	200007bc 	.word	0x200007bc
 800158c:	40023000 	.word	0x40023000

08001590 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8001590:	6802      	ldr	r2, [r0, #0]
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_CRC_MspInit+0x28>)
 8001594:	429a      	cmp	r2, r3
 8001596:	d000      	beq.n	800159a <HAL_CRC_MspInit+0xa>
 8001598:	4770      	bx	lr
{
 800159a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800159c:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80015a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015a6:	649a      	str	r2, [r3, #72]	; 0x48
 80015a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80015b2:	b002      	add	sp, #8
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023000 	.word	0x40023000

080015bc <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DAC_HandleTypeDef hdac2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80015bc:	b500      	push	{lr}
 80015be:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015c0:	2230      	movs	r2, #48	; 0x30
 80015c2:	2100      	movs	r1, #0
 80015c4:	4668      	mov	r0, sp
 80015c6:	f009 fc5b 	bl	800ae80 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015ca:	4811      	ldr	r0, [pc, #68]	; (8001610 <MX_DAC1_Init+0x54>)
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_DAC1_Init+0x58>)
 80015ce:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015d0:	f002 fccf 	bl	8003f72 <HAL_DAC_Init>
 80015d4:	b9a8      	cbnz	r0, 8001602 <MX_DAC1_Init+0x46>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80015d6:	2302      	movs	r3, #2
 80015d8:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80015da:	2200      	movs	r2, #0
 80015dc:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80015e0:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015e4:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015e6:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80015e8:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015ea:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80015ec:	2301      	movs	r3, #1
 80015ee:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015f0:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015f2:	4669      	mov	r1, sp
 80015f4:	4806      	ldr	r0, [pc, #24]	; (8001610 <MX_DAC1_Init+0x54>)
 80015f6:	f002 fccf 	bl	8003f98 <HAL_DAC_ConfigChannel>
 80015fa:	b928      	cbnz	r0, 8001608 <MX_DAC1_Init+0x4c>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80015fc:	b00d      	add	sp, #52	; 0x34
 80015fe:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001602:	f000 fc57 	bl	8001eb4 <Error_Handler>
 8001606:	e7e6      	b.n	80015d6 <MX_DAC1_Init+0x1a>
    Error_Handler();
 8001608:	f000 fc54 	bl	8001eb4 <Error_Handler>
}
 800160c:	e7f6      	b.n	80015fc <MX_DAC1_Init+0x40>
 800160e:	bf00      	nop
 8001610:	200007e0 	.word	0x200007e0
 8001614:	50000800 	.word	0x50000800

08001618 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001618:	b500      	push	{lr}
 800161a:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800161c:	2230      	movs	r2, #48	; 0x30
 800161e:	2100      	movs	r1, #0
 8001620:	4668      	mov	r0, sp
 8001622:	f009 fc2d 	bl	800ae80 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001626:	4811      	ldr	r0, [pc, #68]	; (800166c <MX_DAC2_Init+0x54>)
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_DAC2_Init+0x58>)
 800162a:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800162c:	f002 fca1 	bl	8003f72 <HAL_DAC_Init>
 8001630:	b9a8      	cbnz	r0, 800165e <MX_DAC2_Init+0x46>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001632:	2302      	movs	r3, #2
 8001634:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001636:	2200      	movs	r2, #0
 8001638:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800163c:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001640:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001642:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001644:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001646:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001648:	2301      	movs	r3, #1
 800164a:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800164c:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800164e:	4669      	mov	r1, sp
 8001650:	4806      	ldr	r0, [pc, #24]	; (800166c <MX_DAC2_Init+0x54>)
 8001652:	f002 fca1 	bl	8003f98 <HAL_DAC_ConfigChannel>
 8001656:	b928      	cbnz	r0, 8001664 <MX_DAC2_Init+0x4c>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001658:	b00d      	add	sp, #52	; 0x34
 800165a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800165e:	f000 fc29 	bl	8001eb4 <Error_Handler>
 8001662:	e7e6      	b.n	8001632 <MX_DAC2_Init+0x1a>
    Error_Handler();
 8001664:	f000 fc26 	bl	8001eb4 <Error_Handler>
}
 8001668:	e7f6      	b.n	8001658 <MX_DAC2_Init+0x40>
 800166a:	bf00      	nop
 800166c:	200007f4 	.word	0x200007f4
 8001670:	50000c00 	.word	0x50000c00

08001674 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001674:	b500      	push	{lr}
 8001676:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	2300      	movs	r3, #0
 800167a:	9305      	str	r3, [sp, #20]
 800167c:	9306      	str	r3, [sp, #24]
 800167e:	9307      	str	r3, [sp, #28]
 8001680:	9308      	str	r3, [sp, #32]
 8001682:	9309      	str	r3, [sp, #36]	; 0x24
  if(dacHandle->Instance==DAC1)
 8001684:	6803      	ldr	r3, [r0, #0]
 8001686:	4a21      	ldr	r2, [pc, #132]	; (800170c <HAL_DAC_MspInit+0x98>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d005      	beq.n	8001698 <HAL_DAC_MspInit+0x24>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
  else if(dacHandle->Instance==DAC2)
 800168c:	4a20      	ldr	r2, [pc, #128]	; (8001710 <HAL_DAC_MspInit+0x9c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d01f      	beq.n	80016d2 <HAL_DAC_MspInit+0x5e>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8001692:	b00b      	add	sp, #44	; 0x2c
 8001694:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <HAL_DAC_MspInit+0xa0>)
 800169a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800169c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80016a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016a4:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80016a8:	9201      	str	r2, [sp, #4]
 80016aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	9302      	str	r3, [sp, #8]
 80016bc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DAC1_Pin;
 80016be:	2310      	movs	r3, #16
 80016c0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c2:	2303      	movs	r3, #3
 80016c4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(DAC1_GPIO_Port, &GPIO_InitStruct);
 80016c6:	a905      	add	r1, sp, #20
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016cc:	f003 f8a2 	bl	8004814 <HAL_GPIO_Init>
 80016d0:	e7df      	b.n	8001692 <HAL_DAC_MspInit+0x1e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_DAC_MspInit+0xa0>)
 80016d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80016da:	64da      	str	r2, [r3, #76]	; 0x4c
 80016dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016de:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80016e2:	9203      	str	r2, [sp, #12]
 80016e4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016e8:	f042 0201 	orr.w	r2, r2, #1
 80016ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	9304      	str	r3, [sp, #16]
 80016f6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = DAC2_Pin;
 80016f8:	2340      	movs	r3, #64	; 0x40
 80016fa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fc:	2303      	movs	r3, #3
 80016fe:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(DAC2_GPIO_Port, &GPIO_InitStruct);
 8001700:	a905      	add	r1, sp, #20
 8001702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001706:	f003 f885 	bl	8004814 <HAL_GPIO_Init>
}
 800170a:	e7c2      	b.n	8001692 <HAL_DAC_MspInit+0x1e>
 800170c:	50000800 	.word	0x50000800
 8001710:	50000c00 	.word	0x50000c00
 8001714:	40021000 	.word	0x40021000

08001718 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
void MX_DMA_Init(void)
{
 8001718:	b500      	push	{lr}
 800171a:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800171c:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <MX_DMA_Init+0xc4>)
 800171e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001720:	f042 0204 	orr.w	r2, r2, #4
 8001724:	649a      	str	r2, [r3, #72]	; 0x48
 8001726:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001728:	f002 0204 	and.w	r2, r2, #4
 800172c:	9200      	str	r2, [sp, #0]
 800172e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001730:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	649a      	str	r2, [r3, #72]	; 0x48
 8001738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	9b01      	ldr	r3, [sp, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8001742:	4827      	ldr	r0, [pc, #156]	; (80017e0 <MX_DMA_Init+0xc8>)
 8001744:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <MX_DMA_Init+0xcc>)
 8001746:	6003      	str	r3, [r0, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_MEM2MEM;
 8001748:	2300      	movs	r3, #0
 800174a:	6043      	str	r3, [r0, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800174c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001750:	6082      	str	r2, [r0, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8001752:	2240      	movs	r2, #64	; 0x40
 8001754:	60c2      	str	r2, [r0, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_DISABLE;
 8001756:	6103      	str	r3, [r0, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175c:	6142      	str	r2, [r0, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800175e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001762:	6182      	str	r2, [r0, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8001764:	61c3      	str	r3, [r0, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_HIGH;
 8001766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176a:	6203      	str	r3, [r0, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 800176c:	f002 fd6c 	bl	8004248 <HAL_DMA_Init>
 8001770:	bb88      	cbnz	r0, 80017d6 <MX_DMA_Init+0xbe>
    Error_Handler();
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	4611      	mov	r1, r2
 8001776:	200b      	movs	r0, #11
 8001778:	f002 fb2a 	bl	8003dd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800177c:	200b      	movs	r0, #11
 800177e:	f002 fb5f 	bl	8003e40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	4611      	mov	r1, r2
 8001786:	200d      	movs	r0, #13
 8001788:	f002 fb22 	bl	8003dd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800178c:	200d      	movs	r0, #13
 800178e:	f002 fb57 	bl	8003e40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	4611      	mov	r1, r2
 8001796:	200e      	movs	r0, #14
 8001798:	f002 fb1a 	bl	8003dd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800179c:	200e      	movs	r0, #14
 800179e:	f002 fb4f 	bl	8003e40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	4611      	mov	r1, r2
 80017a6:	200f      	movs	r0, #15
 80017a8:	f002 fb12 	bl	8003dd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80017ac:	200f      	movs	r0, #15
 80017ae:	f002 fb47 	bl	8003e40 <HAL_NVIC_EnableIRQ>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b2:	490d      	ldr	r1, [pc, #52]	; (80017e8 <MX_DMA_Init+0xd0>)
 80017b4:	68cb      	ldr	r3, [r1, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <MX_DMA_Init+0xd4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80017c2:	6018      	str	r0, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	68c9      	ldr	r1, [r1, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c6:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017ce:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);

}
 80017d0:	b003      	add	sp, #12
 80017d2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80017d6:	f000 fb6d 	bl	8001eb4 <Error_Handler>
 80017da:	e7ca      	b.n	8001772 <MX_DMA_Init+0x5a>
 80017dc:	40021000 	.word	0x40021000
 80017e0:	20000808 	.word	0x20000808
 80017e4:	40020008 	.word	0x40020008
 80017e8:	e000ed00 	.word	0xe000ed00
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80017f0:	b508      	push	{r3, lr}
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80017f2:	480f      	ldr	r0, [pc, #60]	; (8001830 <MX_FDCAN2_Init+0x40>)
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_FDCAN2_Init+0x44>)
 80017f6:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	6043      	str	r3, [r0, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80017fc:	6083      	str	r3, [r0, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80017fe:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001800:	7403      	strb	r3, [r0, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001802:	7443      	strb	r3, [r0, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001804:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001806:	2210      	movs	r2, #16
 8001808:	6142      	str	r2, [r0, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800180a:	2201      	movs	r2, #1
 800180c:	6182      	str	r2, [r0, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800180e:	2102      	movs	r1, #2
 8001810:	61c1      	str	r1, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001812:	6201      	str	r1, [r0, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001814:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001816:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001818:	62c2      	str	r2, [r0, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800181a:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800181c:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 800181e:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001820:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001822:	f002 ff0d 	bl	8004640 <HAL_FDCAN_Init>
 8001826:	b900      	cbnz	r0, 800182a <MX_FDCAN2_Init+0x3a>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001828:	bd08      	pop	{r3, pc}
    Error_Handler();
 800182a:	f000 fb43 	bl	8001eb4 <Error_Handler>
}
 800182e:	e7fb      	b.n	8001828 <MX_FDCAN2_Init+0x38>
 8001830:	20000868 	.word	0x20000868
 8001834:	40006800 	.word	0x40006800

08001838 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001838:	b510      	push	{r4, lr}
 800183a:	b09c      	sub	sp, #112	; 0x70
 800183c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	2100      	movs	r1, #0
 8001840:	9117      	str	r1, [sp, #92]	; 0x5c
 8001842:	9118      	str	r1, [sp, #96]	; 0x60
 8001844:	9119      	str	r1, [sp, #100]	; 0x64
 8001846:	911a      	str	r1, [sp, #104]	; 0x68
 8001848:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800184a:	2254      	movs	r2, #84	; 0x54
 800184c:	a802      	add	r0, sp, #8
 800184e:	f009 fb17 	bl	800ae80 <memset>
  if(fdcanHandle->Instance==FDCAN2)
 8001852:	6822      	ldr	r2, [r4, #0]
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_FDCAN_MspInit+0x84>)
 8001856:	429a      	cmp	r2, r3
 8001858:	d001      	beq.n	800185e <HAL_FDCAN_MspInit+0x26>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 800185a:	b01c      	add	sp, #112	; 0x70
 800185c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800185e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001862:	9302      	str	r3, [sp, #8]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001864:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001868:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800186a:	a802      	add	r0, sp, #8
 800186c:	f005 f9ec 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 8001870:	bb08      	cbnz	r0, 80018b6 <HAL_FDCAN_MspInit+0x7e>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <HAL_FDCAN_MspInit+0x88>)
 8001874:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001876:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800187a:	659a      	str	r2, [r3, #88]	; 0x58
 800187c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800187e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001882:	9200      	str	r2, [sp, #0]
 8001884:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001888:	f042 0202 	orr.w	r2, r2, #2
 800188c:	64da      	str	r2, [r3, #76]	; 0x4c
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 8001898:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800189c:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80018a8:	2309      	movs	r3, #9
 80018aa:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	a917      	add	r1, sp, #92	; 0x5c
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <HAL_FDCAN_MspInit+0x8c>)
 80018b0:	f002 ffb0 	bl	8004814 <HAL_GPIO_Init>
}
 80018b4:	e7d1      	b.n	800185a <HAL_FDCAN_MspInit+0x22>
      Error_Handler();
 80018b6:	f000 fafd 	bl	8001eb4 <Error_Handler>
 80018ba:	e7da      	b.n	8001872 <HAL_FDCAN_MspInit+0x3a>
 80018bc:	40006800 	.word	0x40006800
 80018c0:	40021000 	.word	0x40021000
 80018c4:	48000400 	.word	0x48000400

080018c8 <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80018c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ca:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	2300      	movs	r3, #0
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	9302      	str	r3, [sp, #8]
 80018d2:	9303      	str	r3, [sp, #12]
 80018d4:	9304      	str	r3, [sp, #16]
 80018d6:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <HAL_FMC_MspInit+0x7c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	b10b      	cbz	r3, 80018e2 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80018de:	b007      	add	sp, #28
 80018e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_FMC_MspInit+0x7c>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_FMC_MspInit+0x80>)
 80018ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ec:	f042 0201 	orr.w	r2, r2, #1
 80018f0:	651a      	str	r2, [r3, #80]	; 0x50
 80018f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80018fc:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001900:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2602      	movs	r6, #2
 8001904:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2503      	movs	r5, #3
 8001908:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800190a:	240c      	movs	r4, #12
 800190c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800190e:	a901      	add	r1, sp, #4
 8001910:	480e      	ldr	r0, [pc, #56]	; (800194c <HAL_FMC_MspInit+0x84>)
 8001912:	f002 ff7f 	bl	8004814 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001916:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800191a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2700      	movs	r7, #0
 8001920:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001922:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001924:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001926:	a901      	add	r1, sp, #4
 8001928:	4809      	ldr	r0, [pc, #36]	; (8001950 <HAL_FMC_MspInit+0x88>)
 800192a:	f002 ff73 	bl	8004814 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 800192e:	2320      	movs	r3, #32
 8001930:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001938:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 800193a:	a901      	add	r1, sp, #4
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <HAL_FMC_MspInit+0x8c>)
 800193e:	f002 ff69 	bl	8004814 <HAL_GPIO_Init>
 8001942:	e7cc      	b.n	80018de <HAL_FMC_MspInit+0x16>
 8001944:	200008cc 	.word	0x200008cc
 8001948:	40021000 	.word	0x40021000
 800194c:	48001000 	.word	0x48001000
 8001950:	48000c00 	.word	0x48000c00
 8001954:	48001800 	.word	0x48001800

08001958 <MX_FMC_Init>:
{
 8001958:	b510      	push	{r4, lr}
 800195a:	b088      	sub	sp, #32
  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800195c:	2220      	movs	r2, #32
 800195e:	2100      	movs	r1, #0
 8001960:	4668      	mov	r0, sp
 8001962:	f009 fa8d 	bl	800ae80 <memset>
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001966:	4818      	ldr	r0, [pc, #96]	; (80019c8 <MX_FMC_Init+0x70>)
 8001968:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800196c:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800196e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001972:	6043      	str	r3, [r0, #4]
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001974:	2200      	movs	r2, #0
 8001976:	6082      	str	r2, [r0, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001978:	60c2      	str	r2, [r0, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800197a:	6102      	str	r2, [r0, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800197c:	2110      	movs	r1, #16
 800197e:	6141      	str	r1, [r0, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001980:	6182      	str	r2, [r0, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001982:	61c2      	str	r2, [r0, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001984:	6202      	str	r2, [r0, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198a:	6243      	str	r3, [r0, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800198c:	6282      	str	r2, [r0, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800198e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001990:	6302      	str	r2, [r0, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001992:	6342      	str	r2, [r0, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001994:	6382      	str	r2, [r0, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001996:	63c2      	str	r2, [r0, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8001998:	6442      	str	r2, [r0, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800199a:	6402      	str	r2, [r0, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 800199c:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
  Timing.AddressSetupTime = 1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	9300      	str	r3, [sp, #0]
  Timing.AddressHoldTime = 15;
 80019a4:	240f      	movs	r4, #15
 80019a6:	9401      	str	r4, [sp, #4]
  Timing.DataSetupTime = 1;
 80019a8:	9302      	str	r3, [sp, #8]
  Timing.DataHoldTime = 1;
 80019aa:	9303      	str	r3, [sp, #12]
  Timing.BusTurnAroundDuration = 1;
 80019ac:	9304      	str	r3, [sp, #16]
  Timing.CLKDivision = 16;
 80019ae:	9105      	str	r1, [sp, #20]
  Timing.DataLatency = 17;
 80019b0:	2311      	movs	r3, #17
 80019b2:	9306      	str	r3, [sp, #24]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80019b4:	4669      	mov	r1, sp
 80019b6:	f005 fb77 	bl	80070a8 <HAL_SRAM_Init>
 80019ba:	b908      	cbnz	r0, 80019c0 <MX_FMC_Init+0x68>
}
 80019bc:	b008      	add	sp, #32
 80019be:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80019c0:	f000 fa78 	bl	8001eb4 <Error_Handler>
}
 80019c4:	e7fa      	b.n	80019bc <MX_FMC_Init+0x64>
 80019c6:	bf00      	nop
 80019c8:	200008d0 	.word	0x200008d0

080019cc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80019cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80019ce:	f7ff ff7b 	bl	80018c8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80019d2:	bd08      	pop	{r3, pc}

080019d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019d8:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	2400      	movs	r4, #0
 80019dc:	9407      	str	r4, [sp, #28]
 80019de:	9408      	str	r4, [sp, #32]
 80019e0:	9409      	str	r4, [sp, #36]	; 0x24
 80019e2:	940a      	str	r4, [sp, #40]	; 0x28
 80019e4:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e6:	4b71      	ldr	r3, [pc, #452]	; (8001bac <MX_GPIO_Init+0x1d8>)
 80019e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019ea:	f042 0210 	orr.w	r2, r2, #16
 80019ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80019f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019f2:	f002 0210 	and.w	r2, r2, #16
 80019f6:	9200      	str	r2, [sp, #0]
 80019f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019fc:	f042 0204 	orr.w	r2, r2, #4
 8001a00:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a04:	f002 0204 	and.w	r2, r2, #4
 8001a08:	9201      	str	r2, [sp, #4]
 8001a0a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a0e:	f042 0220 	orr.w	r2, r2, #32
 8001a12:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a16:	f002 0220 	and.w	r2, r2, #32
 8001a1a:	9202      	str	r2, [sp, #8]
 8001a1c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a20:	f042 0201 	orr.w	r2, r2, #1
 8001a24:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a28:	f002 0201 	and.w	r2, r2, #1
 8001a2c:	9203      	str	r2, [sp, #12]
 8001a2e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a32:	f042 0202 	orr.w	r2, r2, #2
 8001a36:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a3a:	f002 0202 	and.w	r2, r2, #2
 8001a3e:	9204      	str	r2, [sp, #16]
 8001a40:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a44:	f042 0208 	orr.w	r2, r2, #8
 8001a48:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a4c:	f002 0208 	and.w	r2, r2, #8
 8001a50:	9205      	str	r2, [sp, #20]
 8001a52:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a5a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a62:	9306      	str	r3, [sp, #24]
 8001a64:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin|LED3_Pin|LED0_Pin
 8001a66:	f8df a150 	ldr.w	sl, [pc, #336]	; 8001bb8 <MX_GPIO_Init+0x1e4>
 8001a6a:	4622      	mov	r2, r4
 8001a6c:	f640 013c 	movw	r1, #2108	; 0x83c
 8001a70:	4650      	mov	r0, sl
 8001a72:	f002 ffb9 	bl	80049e8 <HAL_GPIO_WritePin>
                          |ARDUINO_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);
 8001a76:	4f4e      	ldr	r7, [pc, #312]	; (8001bb0 <MX_GPIO_Init+0x1dc>)
 8001a78:	4622      	mov	r2, r4
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	4638      	mov	r0, r7
 8001a7e:	f002 ffb3 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8001a82:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8001bbc <MX_GPIO_Init+0x1e8>
 8001a86:	4622      	mov	r2, r4
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	4648      	mov	r0, r9
 8001a8c:	f002 ffac 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001a90:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8001bc0 <MX_GPIO_Init+0x1ec>
 8001a94:	4622      	mov	r2, r4
 8001a96:	2108      	movs	r1, #8
 8001a98:	4640      	mov	r0, r8
 8001a9a:	f002 ffa5 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIN_SLP_Pin|LCD_BKLT_Pin, GPIO_PIN_RESET);
 8001a9e:	f8df b124 	ldr.w	fp, [pc, #292]	; 8001bc4 <MX_GPIO_Init+0x1f0>
 8001aa2:	4622      	mov	r2, r4
 8001aa4:	2160      	movs	r1, #96	; 0x60
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f002 ff9e 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001aac:	4e41      	ldr	r6, [pc, #260]	; (8001bb4 <MX_GPIO_Init+0x1e0>)
 8001aae:	4622      	mov	r2, r4
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	4630      	mov	r0, r6
 8001ab4:	f002 ff98 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2102      	movs	r1, #2
 8001abc:	4630      	mov	r0, r6
 8001abe:	f002 ff93 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = JOY_BTN_Pin|BTN_OK_Pin;
 8001ac2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001ac6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aca:	2501      	movs	r5, #1
 8001acc:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ace:	a907      	add	r1, sp, #28
 8001ad0:	4638      	mov	r0, r7
 8001ad2:	f002 fe9f 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_ESC_Pin;
 8001ad6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ada:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001adc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ae0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae2:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(BTN_ESC_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	a907      	add	r1, sp, #28
 8001ae6:	4638      	mov	r0, r7
 8001ae8:	f002 fe94 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|ARDUINO_CS_Pin;
 8001aec:	f640 0338 	movw	r3, #2104	; 0x838
 8001af0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af2:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001af8:	a907      	add	r1, sp, #28
 8001afa:	4650      	mov	r0, sl
 8001afc:	f002 fe8a 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
 8001b00:	230f      	movs	r3, #15
 8001b02:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b04:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0a:	a907      	add	r1, sp, #28
 8001b0c:	4638      	mov	r0, r7
 8001b0e:	f002 fe81 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8001b12:	2304      	movs	r3, #4
 8001b14:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b16:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	a907      	add	r1, sp, #28
 8001b20:	4650      	mov	r0, sl
 8001b22:	f002 fe77 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_DOWN_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 8001b26:	f240 1343 	movw	r3, #323	; 0x143
 8001b2a:	9307      	str	r3, [sp, #28]
//  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b30:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b32:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b34:	a907      	add	r1, sp, #28
 8001b36:	4648      	mov	r0, r9
 8001b38:	f002 fe6c 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b40:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8001b46:	a907      	add	r1, sp, #28
 8001b48:	4648      	mov	r0, r9
 8001b4a:	f002 fe63 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001b4e:	2308      	movs	r3, #8
 8001b50:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001b58:	a907      	add	r1, sp, #28
 8001b5a:	4640      	mov	r0, r8
 8001b5c:	f002 fe5a 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_PENIRQ_Pin;
 8001b60:	2340      	movs	r3, #64	; 0x40
 8001b62:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b64:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_PENIRQ_GPIO_Port, &GPIO_InitStruct);
 8001b68:	a907      	add	r1, sp, #28
 8001b6a:	4640      	mov	r0, r8
 8001b6c:	f002 fe52 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LIN_SLP_Pin|LCD_BKLT_Pin;
 8001b70:	2360      	movs	r3, #96	; 0x60
 8001b72:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	a907      	add	r1, sp, #28
 8001b7c:	4658      	mov	r0, fp
 8001b7e:	f002 fe49 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001b82:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b84:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8001b8a:	a907      	add	r1, sp, #28
 8001b8c:	4630      	mov	r0, r6
 8001b8e:	f002 fe41 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8001b92:	2302      	movs	r3, #2
 8001b94:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b96:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b98:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b9a:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8001b9c:	a907      	add	r1, sp, #28
 8001b9e:	4630      	mov	r0, r6
 8001ba0:	f002 fe38 	bl	8004814 <HAL_GPIO_Init>

}
 8001ba4:	b00d      	add	sp, #52	; 0x34
 8001ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	48000800 	.word	0x48000800
 8001bb4:	48001000 	.word	0x48001000
 8001bb8:	48001400 	.word	0x48001400
 8001bbc:	48001800 	.word	0x48001800
 8001bc0:	48000c00 	.word	0x48000c00
 8001bc4:	48000400 	.word	0x48000400

08001bc8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001bc8:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bca:	4812      	ldr	r0, [pc, #72]	; (8001c14 <MX_I2C1_Init+0x4c>)
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001bce:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10902A95;
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <MX_I2C1_Init+0x54>)
 8001bd2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bd8:	2201      	movs	r2, #1
 8001bda:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bdc:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bde:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001be0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001be2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001be4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001be6:	f002 ff56 	bl	8004a96 <HAL_I2C_Init>
 8001bea:	b950      	cbnz	r0, 8001c02 <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bec:	2100      	movs	r1, #0
 8001bee:	4809      	ldr	r0, [pc, #36]	; (8001c14 <MX_I2C1_Init+0x4c>)
 8001bf0:	f003 fabb 	bl	800516a <HAL_I2CEx_ConfigAnalogFilter>
 8001bf4:	b940      	cbnz	r0, 8001c08 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 5) != HAL_OK)
 8001bf6:	2105      	movs	r1, #5
 8001bf8:	4806      	ldr	r0, [pc, #24]	; (8001c14 <MX_I2C1_Init+0x4c>)
 8001bfa:	f003 fae4 	bl	80051c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001bfe:	b930      	cbnz	r0, 8001c0e <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c00:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001c02:	f000 f957 	bl	8001eb4 <Error_Handler>
 8001c06:	e7f1      	b.n	8001bec <MX_I2C1_Init+0x24>
    Error_Handler();
 8001c08:	f000 f954 	bl	8001eb4 <Error_Handler>
 8001c0c:	e7f3      	b.n	8001bf6 <MX_I2C1_Init+0x2e>
    Error_Handler();
 8001c0e:	f000 f951 	bl	8001eb4 <Error_Handler>
}
 8001c12:	e7f5      	b.n	8001c00 <MX_I2C1_Init+0x38>
 8001c14:	200009e8 	.word	0x200009e8
 8001c18:	40005400 	.word	0x40005400
 8001c1c:	10902a95 	.word	0x10902a95

08001c20 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c20:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c22:	4815      	ldr	r0, [pc, #84]	; (8001c78 <MX_I2C2_Init+0x58>)
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_I2C2_Init+0x5c>)
 8001c26:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x60505F8C;
 8001c28:	f103 5301 	add.w	r3, r3, #541065216	; 0x20400000
 8001c2c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001c30:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 8001c34:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c3e:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c40:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c42:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c44:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c46:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c48:	f002 ff25 	bl	8004a96 <HAL_I2C_Init>
 8001c4c:	b950      	cbnz	r0, 8001c64 <MX_I2C2_Init+0x44>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4809      	ldr	r0, [pc, #36]	; (8001c78 <MX_I2C2_Init+0x58>)
 8001c52:	f003 fa8a 	bl	800516a <HAL_I2CEx_ConfigAnalogFilter>
 8001c56:	b940      	cbnz	r0, 8001c6a <MX_I2C2_Init+0x4a>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4807      	ldr	r0, [pc, #28]	; (8001c78 <MX_I2C2_Init+0x58>)
 8001c5c:	f003 fab3 	bl	80051c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001c60:	b930      	cbnz	r0, 8001c70 <MX_I2C2_Init+0x50>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c62:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001c64:	f000 f926 	bl	8001eb4 <Error_Handler>
 8001c68:	e7f1      	b.n	8001c4e <MX_I2C2_Init+0x2e>
    Error_Handler();
 8001c6a:	f000 f923 	bl	8001eb4 <Error_Handler>
 8001c6e:	e7f3      	b.n	8001c58 <MX_I2C2_Init+0x38>
    Error_Handler();
 8001c70:	f000 f920 	bl	8001eb4 <Error_Handler>
}
 8001c74:	e7f5      	b.n	8001c62 <MX_I2C2_Init+0x42>
 8001c76:	bf00      	nop
 8001c78:	20000a34 	.word	0x20000a34
 8001c7c:	40005800 	.word	0x40005800

08001c80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c84:	b0a1      	sub	sp, #132	; 0x84
 8001c86:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	2100      	movs	r1, #0
 8001c8a:	911b      	str	r1, [sp, #108]	; 0x6c
 8001c8c:	911c      	str	r1, [sp, #112]	; 0x70
 8001c8e:	911d      	str	r1, [sp, #116]	; 0x74
 8001c90:	911e      	str	r1, [sp, #120]	; 0x78
 8001c92:	911f      	str	r1, [sp, #124]	; 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c94:	2254      	movs	r2, #84	; 0x54
 8001c96:	a806      	add	r0, sp, #24
 8001c98:	f009 f8f2 	bl	800ae80 <memset>
  if(i2cHandle->Instance==I2C1)
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	4a5d      	ldr	r2, [pc, #372]	; (8001e14 <HAL_I2C_MspInit+0x194>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d006      	beq.n	8001cb2 <HAL_I2C_MspInit+0x32>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 8001ca4:	4a5c      	ldr	r2, [pc, #368]	; (8001e18 <HAL_I2C_MspInit+0x198>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	f000 8086 	beq.w	8001db8 <HAL_I2C_MspInit+0x138>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001cac:	b021      	add	sp, #132	; 0x84
 8001cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cb2:	2340      	movs	r3, #64	; 0x40
 8001cb4:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb6:	a806      	add	r0, sp, #24
 8001cb8:	f004 ffc6 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 8001cbc:	2800      	cmp	r0, #0
 8001cbe:	d172      	bne.n	8001da6 <HAL_I2C_MspInit+0x126>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc0:	4e56      	ldr	r6, [pc, #344]	; (8001e1c <HAL_I2C_MspInit+0x19c>)
 8001cc2:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	64f3      	str	r3, [r6, #76]	; 0x4c
 8001cca:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001cd6:	f043 0302 	orr.w	r3, r3, #2
 8001cda:	64f3      	str	r3, [r6, #76]	; 0x4c
 8001cdc:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	9302      	str	r3, [sp, #8]
 8001ce4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cea:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cec:	f04f 0912 	mov.w	r9, #18
 8001cf0:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2500      	movs	r5, #0
 8001cf6:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	951e      	str	r5, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cfa:	f04f 0804 	mov.w	r8, #4
 8001cfe:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	a91b      	add	r1, sp, #108	; 0x6c
 8001d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d08:	f002 fd84 	bl	8004814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d0c:	2780      	movs	r7, #128	; 0x80
 8001d0e:	971b      	str	r7, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d10:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	951e      	str	r5, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d18:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1c:	a91b      	add	r1, sp, #108	; 0x6c
 8001d1e:	4840      	ldr	r0, [pc, #256]	; (8001e20 <HAL_I2C_MspInit+0x1a0>)
 8001d20:	f002 fd78 	bl	8004814 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d24:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001d26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d2a:	65b3      	str	r3, [r6, #88]	; 0x58
 8001d2c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d32:	9303      	str	r3, [sp, #12]
 8001d34:	9b03      	ldr	r3, [sp, #12]
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8001d36:	483b      	ldr	r0, [pc, #236]	; (8001e24 <HAL_I2C_MspInit+0x1a4>)
 8001d38:	4b3b      	ldr	r3, [pc, #236]	; (8001e28 <HAL_I2C_MspInit+0x1a8>)
 8001d3a:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001d3c:	2310      	movs	r3, #16
 8001d3e:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d40:	6085      	str	r5, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d42:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d44:	6107      	str	r7, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d46:	6145      	str	r5, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d48:	6185      	str	r5, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001d4a:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d4c:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001d4e:	f002 fa7b 	bl	8004248 <HAL_DMA_Init>
 8001d52:	bb58      	cbnz	r0, 8001dac <HAL_I2C_MspInit+0x12c>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001d54:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <HAL_I2C_MspInit+0x1a4>)
 8001d56:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001d58:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8001d5a:	4834      	ldr	r0, [pc, #208]	; (8001e2c <HAL_I2C_MspInit+0x1ac>)
 8001d5c:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <HAL_I2C_MspInit+0x1b0>)
 8001d5e:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001d60:	2311      	movs	r3, #17
 8001d62:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d64:	2310      	movs	r3, #16
 8001d66:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d6c:	2280      	movs	r2, #128	; 0x80
 8001d6e:	6102      	str	r2, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d70:	6143      	str	r3, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d72:	6183      	str	r3, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001d74:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d76:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001d78:	f002 fa66 	bl	8004248 <HAL_DMA_Init>
 8001d7c:	b9c8      	cbnz	r0, 8001db2 <HAL_I2C_MspInit+0x132>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001d7e:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <HAL_I2C_MspInit+0x1ac>)
 8001d80:	63a3      	str	r3, [r4, #56]	; 0x38
 8001d82:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	4611      	mov	r1, r2
 8001d88:	201f      	movs	r0, #31
 8001d8a:	f002 f821 	bl	8003dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d8e:	201f      	movs	r0, #31
 8001d90:	f002 f856 	bl	8003e40 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	4611      	mov	r1, r2
 8001d98:	2020      	movs	r0, #32
 8001d9a:	f002 f819 	bl	8003dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001d9e:	2020      	movs	r0, #32
 8001da0:	f002 f84e 	bl	8003e40 <HAL_NVIC_EnableIRQ>
 8001da4:	e782      	b.n	8001cac <HAL_I2C_MspInit+0x2c>
      Error_Handler();
 8001da6:	f000 f885 	bl	8001eb4 <Error_Handler>
 8001daa:	e789      	b.n	8001cc0 <HAL_I2C_MspInit+0x40>
      Error_Handler();
 8001dac:	f000 f882 	bl	8001eb4 <Error_Handler>
 8001db0:	e7d0      	b.n	8001d54 <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 8001db2:	f000 f87f 	bl	8001eb4 <Error_Handler>
 8001db6:	e7e2      	b.n	8001d7e <HAL_I2C_MspInit+0xfe>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dbc:	a806      	add	r0, sp, #24
 8001dbe:	f004 ff43 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 8001dc2:	bb18      	cbnz	r0, 8001e0c <HAL_I2C_MspInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc4:	4c15      	ldr	r4, [pc, #84]	; (8001e1c <HAL_I2C_MspInit+0x19c>)
 8001dc6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001dce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	9304      	str	r3, [sp, #16]
 8001dd6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dd8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ddc:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dde:	2312      	movs	r3, #18
 8001de0:	931c      	str	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001de2:	2301      	movs	r3, #1
 8001de4:	931d      	str	r3, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	931e      	str	r3, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001dea:	2304      	movs	r3, #4
 8001dec:	931f      	str	r3, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dee:	a91b      	add	r1, sp, #108	; 0x6c
 8001df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df4:	f002 fd0e 	bl	8004814 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001df8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001dfa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dfe:	65a3      	str	r3, [r4, #88]	; 0x58
 8001e00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e06:	9305      	str	r3, [sp, #20]
 8001e08:	9b05      	ldr	r3, [sp, #20]
}
 8001e0a:	e74f      	b.n	8001cac <HAL_I2C_MspInit+0x2c>
      Error_Handler();
 8001e0c:	f000 f852 	bl	8001eb4 <Error_Handler>
 8001e10:	e7d8      	b.n	8001dc4 <HAL_I2C_MspInit+0x144>
 8001e12:	bf00      	nop
 8001e14:	40005400 	.word	0x40005400
 8001e18:	40005800 	.word	0x40005800
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	48000400 	.word	0x48000400
 8001e24:	20000928 	.word	0x20000928
 8001e28:	40020030 	.word	0x40020030
 8001e2c:	20000988 	.word	0x20000988
 8001e30:	40020044 	.word	0x40020044

08001e34 <joystick_init>:
 */
#include "joystick.h"

void joystick_init(joystick_t *joystick)
{
	joystick->raw_min.x = 640;
 8001e34:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001e38:	6003      	str	r3, [r0, #0]
	joystick->raw_max.x = 3070;
 8001e3a:	f640 33fe 	movw	r3, #3070	; 0xbfe
 8001e3e:	6083      	str	r3, [r0, #8]
	joystick->raw_min.y = 733;
 8001e40:	f240 23dd 	movw	r3, #733	; 0x2dd
 8001e44:	6043      	str	r3, [r0, #4]
	joystick->raw_max.y = 3185;
 8001e46:	f640 4371 	movw	r3, #3185	; 0xc71
 8001e4a:	60c3      	str	r3, [r0, #12]
	joystick->out_max.x = 90;
 8001e4c:	235a      	movs	r3, #90	; 0x5a
 8001e4e:	6103      	str	r3, [r0, #16]
	joystick->out_max.y = 90;
 8001e50:	6143      	str	r3, [r0, #20]


	joystick->x_k = (float) joystick->out_max.x / (joystick->raw_max.x - joystick->raw_min.x);
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <joystick_init+0x34>)
 8001e54:	6183      	str	r3, [r0, #24]
	joystick->y_k = (float) joystick->out_max.y / (joystick->raw_max.y - joystick->raw_min.y);
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <joystick_init+0x38>)
 8001e58:	61c3      	str	r3, [r0, #28]
	joystick->n.x = (joystick->raw_max.x+joystick->raw_min.x)/2;
 8001e5a:	f240 733f 	movw	r3, #1855	; 0x73f
 8001e5e:	6203      	str	r3, [r0, #32]
	joystick->n.y = (joystick->raw_max.y+joystick->raw_min.y)/2;
 8001e60:	f240 73a7 	movw	r3, #1959	; 0x7a7
 8001e64:	6243      	str	r3, [r0, #36]	; 0x24

}
 8001e66:	4770      	bx	lr
 8001e68:	3d17b426 	.word	0x3d17b426
 8001e6c:	3d1657b3 	.word	0x3d1657b3

08001e70 <joystick_get>:

void joystick_get(coord_t *raw, coord_t *out, joystick_t *joystick)
{
 8001e70:	b410      	push	{r4}
	out->x = joystick->x_k*(raw->x-joystick->n.x);
 8001e72:	ed92 7a06 	vldr	s14, [r2, #24]
 8001e76:	6803      	ldr	r3, [r0, #0]
 8001e78:	6a14      	ldr	r4, [r2, #32]
 8001e7a:	1b1b      	subs	r3, r3, r4
 8001e7c:	ee07 3a90 	vmov	s15, r3
 8001e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e8c:	edc1 7a00 	vstr	s15, [r1]
	out->y = -joystick->y_k*(raw->y-joystick->n.y);
 8001e90:	ed92 7a07 	vldr	s14, [r2, #28]
 8001e94:	6843      	ldr	r3, [r0, #4]
 8001e96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea2:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8001ea6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eaa:	edc1 7a01 	vstr	s15, [r1, #4]
}
 8001eae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb6:	e7fe      	b.n	8001eb6 <Error_Handler+0x2>

08001eb8 <SystemClock_Config>:
{
 8001eb8:	b500      	push	{lr}
 8001eba:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ebc:	2238      	movs	r2, #56	; 0x38
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	a806      	add	r0, sp, #24
 8001ec2:	f008 ffdd 	bl	800ae80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	9001      	str	r0, [sp, #4]
 8001eca:	9002      	str	r0, [sp, #8]
 8001ecc:	9003      	str	r0, [sp, #12]
 8001ece:	9004      	str	r0, [sp, #16]
 8001ed0:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001ed2:	f004 f99d 	bl	8006210 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001ed6:	2321      	movs	r3, #33	; 0x21
 8001ed8:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001eda:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ede:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ee8:	2103      	movs	r1, #3
 8001eea:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001eec:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8001eee:	222a      	movs	r2, #42	; 0x2a
 8001ef0:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ef2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8001ef4:	2206      	movs	r2, #6
 8001ef6:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ef8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001efa:	a806      	add	r0, sp, #24
 8001efc:	f004 fac6 	bl	800648c <HAL_RCC_OscConfig>
 8001f00:	b980      	cbnz	r0, 8001f24 <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f02:	230f      	movs	r3, #15
 8001f04:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f06:	2303      	movs	r3, #3
 8001f08:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f0e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f10:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f12:	2104      	movs	r1, #4
 8001f14:	eb0d 0001 	add.w	r0, sp, r1
 8001f18:	f004 fd70 	bl	80069fc <HAL_RCC_ClockConfig>
 8001f1c:	b920      	cbnz	r0, 8001f28 <SystemClock_Config+0x70>
}
 8001f1e:	b015      	add	sp, #84	; 0x54
 8001f20:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001f24:	f7ff ffc6 	bl	8001eb4 <Error_Handler>
    Error_Handler();
 8001f28:	f7ff ffc4 	bl	8001eb4 <Error_Handler>

08001f2c <main>:
{
 8001f2c:	b500      	push	{lr}
 8001f2e:	b08f      	sub	sp, #60	; 0x3c
	coord_t joystick_raw	=	{0,0};
 8001f30:	2300      	movs	r3, #0
 8001f32:	930c      	str	r3, [sp, #48]	; 0x30
 8001f34:	930d      	str	r3, [sp, #52]	; 0x34
	coord_t joystick_new	=	{0,0};
 8001f36:	930a      	str	r3, [sp, #40]	; 0x28
 8001f38:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_Init();
 8001f3a:	f001 f8e5 	bl	8003108 <HAL_Init>
  SystemClock_Config();
 8001f3e:	f7ff ffbb 	bl	8001eb8 <SystemClock_Config>
  MX_GPIO_Init();
 8001f42:	f7ff fd47 	bl	80019d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001f46:	f7ff f87f 	bl	8001048 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001f4a:	f7ff f8cd 	bl	80010e8 <MX_ADC2_Init>
  MX_FMC_Init();
 8001f4e:	f7ff fd03 	bl	8001958 <MX_FMC_Init>
  MX_I2C2_Init();
 8001f52:	f7ff fe65 	bl	8001c20 <MX_I2C2_Init>
  MX_UART4_Init();
 8001f56:	f000 fd6f 	bl	8002a38 <MX_UART4_Init>
  MX_UART5_Init();
 8001f5a:	f000 fda1 	bl	8002aa0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001f5e:	f000 fdd3 	bl	8002b08 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001f62:	f000 fecb 	bl	8002cfc <MX_USART2_UART_Init>
  MX_QUADSPI1_Init();
 8001f66:	f000 f867 	bl	8002038 <MX_QUADSPI1_Init>
  MX_SPI1_Init();
 8001f6a:	f000 f8ef 	bl	800214c <MX_SPI1_Init>
  MX_TIM5_Init();
 8001f6e:	f000 fb25 	bl	80025bc <MX_TIM5_Init>
  MX_TIM8_Init();
 8001f72:	f000 fb99 	bl	80026a8 <MX_TIM8_Init>
  MX_TIM20_Init();
 8001f76:	f000 fcb7 	bl	80028e8 <MX_TIM20_Init>
  MX_ADC3_Init();
 8001f7a:	f7ff f8f9 	bl	8001170 <MX_ADC3_Init>
  MX_DAC1_Init();
 8001f7e:	f7ff fb1d 	bl	80015bc <MX_DAC1_Init>
  MX_DAC2_Init();
 8001f82:	f7ff fb49 	bl	8001618 <MX_DAC2_Init>
  MX_FDCAN2_Init();
 8001f86:	f7ff fc33 	bl	80017f0 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8001f8a:	f7ff fe1d 	bl	8001bc8 <MX_I2C1_Init>
  MX_TIM15_Init();
 8001f8e:	f000 fc33 	bl	80027f8 <MX_TIM15_Init>
  MX_USART3_UART_Init();
 8001f92:	f000 fee7 	bl	8002d64 <MX_USART3_UART_Init>
  MX_USB_Device_Init();
 8001f96:	f008 fced 	bl	800a974 <MX_USB_Device_Init>
  MX_DMA_Init();
 8001f9a:	f7ff fbbd 	bl	8001718 <MX_DMA_Init>
  MX_CRC_Init();
 8001f9e:	f7ff fae1 	bl	8001564 <MX_CRC_Init>
  MX_ADC4_Init();	//bug workaround: https://community.st.com/s/question/0D50X0000BVnBhASQV/bug-report-dma-and-adc-initialization-order-changed-in-stm32f4-hal-v1241-causing-incorrect-adc-operation
 8001fa2:	f7ff f935 	bl	8001210 <MX_ADC4_Init>
	LCD_Init();
 8001fa6:	f007 fbff 	bl	80097a8 <LCD_Init>
	LCD_UG_init();
 8001faa:	f007 fd71 	bl	8009a90 <LCD_UG_init>
	coord* guysko_position = malloc(sizeof(coord));
 8001fae:	2004      	movs	r0, #4
 8001fb0:	f008 ff5e 	bl	800ae70 <malloc>
 8001fb4:	4602      	mov	r2, r0
	guysko_position->x = 50;
 8001fb6:	2332      	movs	r3, #50	; 0x32
 8001fb8:	8003      	strh	r3, [r0, #0]
	guysko_position->y = 150;
 8001fba:	2396      	movs	r3, #150	; 0x96
 8001fbc:	7083      	strb	r3, [r0, #2]
	guysko* player = new_guysko(100, RIGHT, guysko_position);
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	2064      	movs	r0, #100	; 0x64
 8001fc2:	f000 ffef 	bl	8002fa4 <new_guysko>
	draw_guysko(player);
 8001fc6:	f001 f809 	bl	8002fdc <draw_guysko>
  joystick_init(&joystick);
 8001fca:	4668      	mov	r0, sp
 8001fcc:	f7ff ff32 	bl	8001e34 <joystick_init>
  HAL_ADC_Start_DMA(&hadc4, &joystick_raw, 2);
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	a90c      	add	r1, sp, #48	; 0x30
 8001fd4:	4815      	ldr	r0, [pc, #84]	; (800202c <main+0x100>)
 8001fd6:	f001 fd63 	bl	8003aa0 <HAL_ADC_Start_DMA>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 2);
 8001fda:	2202      	movs	r2, #2
 8001fdc:	2101      	movs	r1, #1
 8001fde:	2006      	movs	r0, #6
 8001fe0:	f001 fef6 	bl	8003dd0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001fe4:	2006      	movs	r0, #6
 8001fe6:	f001 ff2b 	bl	8003e40 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 2);
 8001fea:	2202      	movs	r2, #2
 8001fec:	2101      	movs	r1, #1
 8001fee:	2007      	movs	r0, #7
 8001ff0:	f001 feee 	bl	8003dd0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001ff4:	2007      	movs	r0, #7
 8001ff6:	f001 ff23 	bl	8003e40 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 2);
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	200a      	movs	r0, #10
 8002000:	f001 fee6 	bl	8003dd0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002004:	2017      	movs	r0, #23
 8002006:	f001 ff1b 	bl	8003e40 <HAL_NVIC_EnableIRQ>
  	cycle = false;
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <main+0x104>)
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED0_GPIO_Port, 	LED0_Pin);
 8002010:	2104      	movs	r1, #4
 8002012:	4808      	ldr	r0, [pc, #32]	; (8002034 <main+0x108>)
 8002014:	f002 fced 	bl	80049f2 <HAL_GPIO_TogglePin>
  	while (!cycle) {
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <main+0x104>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f4      	bne.n	800200a <main+0xde>
			joystick_get(&joystick_raw, &joystick_new, &joystick);
 8002020:	466a      	mov	r2, sp
 8002022:	a90a      	add	r1, sp, #40	; 0x28
 8002024:	a80c      	add	r0, sp, #48	; 0x30
 8002026:	f7ff ff23 	bl	8001e70 <joystick_get>
 800202a:	e7f5      	b.n	8002018 <main+0xec>
 800202c:	200006f0 	.word	0x200006f0
 8002030:	20000a80 	.word	0x20000a80
 8002034:	48001400 	.word	0x48001400

08002038 <MX_QUADSPI1_Init>:

QSPI_HandleTypeDef hqspi1;

/* QUADSPI1 init function */
void MX_QUADSPI1_Init(void)
{
 8002038:	b508      	push	{r3, lr}
  /* USER CODE END QUADSPI1_Init 0 */

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  hqspi1.Instance = QUADSPI;
 800203a:	480a      	ldr	r0, [pc, #40]	; (8002064 <MX_QUADSPI1_Init+0x2c>)
 800203c:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <MX_QUADSPI1_Init+0x30>)
 800203e:	6003      	str	r3, [r0, #0]
  hqspi1.Init.ClockPrescaler = 255;
 8002040:	23ff      	movs	r3, #255	; 0xff
 8002042:	6043      	str	r3, [r0, #4]
  hqspi1.Init.FifoThreshold = 1;
 8002044:	2201      	movs	r2, #1
 8002046:	6082      	str	r2, [r0, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002048:	2300      	movs	r3, #0
 800204a:	60c3      	str	r3, [r0, #12]
  hqspi1.Init.FlashSize = 1;
 800204c:	6102      	str	r2, [r0, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800204e:	6143      	str	r3, [r0, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002050:	6183      	str	r3, [r0, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_1;
 8002052:	61c3      	str	r3, [r0, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002054:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 8002056:	f004 f995 	bl	8006384 <HAL_QSPI_Init>
 800205a:	b900      	cbnz	r0, 800205e <MX_QUADSPI1_Init+0x26>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 800205c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800205e:	f7ff ff29 	bl	8001eb4 <Error_Handler>
}
 8002062:	e7fb      	b.n	800205c <MX_QUADSPI1_Init+0x24>
 8002064:	20000a84 	.word	0x20000a84
 8002068:	a0001000 	.word	0xa0001000

0800206c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800206c:	b570      	push	{r4, r5, r6, lr}
 800206e:	b09e      	sub	sp, #120	; 0x78
 8002070:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002072:	2100      	movs	r1, #0
 8002074:	9119      	str	r1, [sp, #100]	; 0x64
 8002076:	911a      	str	r1, [sp, #104]	; 0x68
 8002078:	911b      	str	r1, [sp, #108]	; 0x6c
 800207a:	911c      	str	r1, [sp, #112]	; 0x70
 800207c:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800207e:	2254      	movs	r2, #84	; 0x54
 8002080:	a804      	add	r0, sp, #16
 8002082:	f008 fefd 	bl	800ae80 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8002086:	6822      	ldr	r2, [r4, #0]
 8002088:	4b2c      	ldr	r3, [pc, #176]	; (800213c <HAL_QSPI_MspInit+0xd0>)
 800208a:	429a      	cmp	r2, r3
 800208c:	d001      	beq.n	8002092 <HAL_QSPI_MspInit+0x26>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800208e:	b01e      	add	sp, #120	; 0x78
 8002090:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8002092:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002096:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002098:	a804      	add	r0, sp, #16
 800209a:	f004 fdd5 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 800209e:	2800      	cmp	r0, #0
 80020a0:	d148      	bne.n	8002134 <HAL_QSPI_MspInit+0xc8>
    __HAL_RCC_QSPI_CLK_ENABLE();
 80020a2:	4b27      	ldr	r3, [pc, #156]	; (8002140 <HAL_QSPI_MspInit+0xd4>)
 80020a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020aa:	651a      	str	r2, [r3, #80]	; 0x50
 80020ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ae:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80020b2:	9200      	str	r2, [sp, #0]
 80020b4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020b8:	f042 0201 	orr.w	r2, r2, #1
 80020bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80020be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020c0:	f002 0201 	and.w	r2, r2, #1
 80020c4:	9201      	str	r2, [sp, #4]
 80020c6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ca:	f042 0202 	orr.w	r2, r2, #2
 80020ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80020d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020d2:	f002 0202 	and.w	r2, r2, #2
 80020d6:	9202      	str	r2, [sp, #8]
 80020d8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020dc:	f042 0220 	orr.w	r2, r2, #32
 80020e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80020e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	9303      	str	r3, [sp, #12]
 80020ea:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = QSPI_IO2_Pin;
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2602      	movs	r6, #2
 80020f2:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2400      	movs	r4, #0
 80020f6:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f8:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80020fa:	250a      	movs	r5, #10
 80020fc:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(QSPI_IO2_GPIO_Port, &GPIO_InitStruct);
 80020fe:	a919      	add	r1, sp, #100	; 0x64
 8002100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002104:	f002 fb86 	bl	8004814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_IO1_Pin|QSPI_IO0_Pin|QSPI_CLK_Pin|QSPI_NCS_Pin;
 8002108:	f640 4303 	movw	r3, #3075	; 0xc03
 800210c:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002114:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	a919      	add	r1, sp, #100	; 0x64
 8002118:	480a      	ldr	r0, [pc, #40]	; (8002144 <HAL_QSPI_MspInit+0xd8>)
 800211a:	f002 fb7b 	bl	8004814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_IO3_Pin;
 800211e:	2340      	movs	r3, #64	; 0x40
 8002120:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002128:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(QSPI_IO3_GPIO_Port, &GPIO_InitStruct);
 800212a:	a919      	add	r1, sp, #100	; 0x64
 800212c:	4806      	ldr	r0, [pc, #24]	; (8002148 <HAL_QSPI_MspInit+0xdc>)
 800212e:	f002 fb71 	bl	8004814 <HAL_GPIO_Init>
}
 8002132:	e7ac      	b.n	800208e <HAL_QSPI_MspInit+0x22>
      Error_Handler();
 8002134:	f7ff febe 	bl	8001eb4 <Error_Handler>
 8002138:	e7b3      	b.n	80020a2 <HAL_QSPI_MspInit+0x36>
 800213a:	bf00      	nop
 800213c:	a0001000 	.word	0xa0001000
 8002140:	40021000 	.word	0x40021000
 8002144:	48000400 	.word	0x48000400
 8002148:	48001400 	.word	0x48001400

0800214c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800214c:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800214e:	4810      	ldr	r0, [pc, #64]	; (8002190 <MX_SPI1_Init+0x44>)
 8002150:	4b10      	ldr	r3, [pc, #64]	; (8002194 <MX_SPI1_Init+0x48>)
 8002152:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002154:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002158:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800215a:	2300      	movs	r3, #0
 800215c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800215e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002162:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002164:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002166:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800216c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800216e:	2228      	movs	r2, #40	; 0x28
 8002170:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002172:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002174:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002176:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002178:	2207      	movs	r2, #7
 800217a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800217c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800217e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002180:	f004 ff1e 	bl	8006fc0 <HAL_SPI_Init>
 8002184:	b900      	cbnz	r0, 8002188 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002186:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002188:	f7ff fe94 	bl	8001eb4 <Error_Handler>
}
 800218c:	e7fb      	b.n	8002186 <MX_SPI1_Init+0x3a>
 800218e:	bf00      	nop
 8002190:	20000ad0 	.word	0x20000ad0
 8002194:	40013000 	.word	0x40013000

08002198 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002198:	b500      	push	{lr}
 800219a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	2300      	movs	r3, #0
 800219e:	9303      	str	r3, [sp, #12]
 80021a0:	9304      	str	r3, [sp, #16]
 80021a2:	9305      	str	r3, [sp, #20]
 80021a4:	9306      	str	r3, [sp, #24]
 80021a6:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 80021a8:	6802      	ldr	r2, [r0, #0]
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_SPI_MspInit+0x5c>)
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d002      	beq.n	80021b6 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80021b0:	b009      	add	sp, #36	; 0x24
 80021b2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021b6:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80021ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021c0:	661a      	str	r2, [r3, #96]	; 0x60
 80021c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80021c8:	9201      	str	r2, [sp, #4]
 80021ca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021da:	9302      	str	r3, [sp, #8]
 80021dc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80021de:	231c      	movs	r3, #28
 80021e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021e6:	2305      	movs	r3, #5
 80021e8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021ea:	a903      	add	r1, sp, #12
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <HAL_SPI_MspInit+0x60>)
 80021ee:	f002 fb11 	bl	8004814 <HAL_GPIO_Init>
}
 80021f2:	e7dd      	b.n	80021b0 <HAL_SPI_MspInit+0x18>
 80021f4:	40013000 	.word	0x40013000
 80021f8:	48001800 	.word	0x48001800

080021fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021fc:	b500      	push	{lr}
 80021fe:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_MspInit+0x34>)
 8002202:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002204:	f042 0201 	orr.w	r2, r2, #1
 8002208:	661a      	str	r2, [r3, #96]	; 0x60
 800220a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800220c:	f002 0201 	and.w	r2, r2, #1
 8002210:	9200      	str	r2, [sp, #0]
 8002212:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002214:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002216:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800221a:	659a      	str	r2, [r3, #88]	; 0x58
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002226:	f004 f879 	bl	800631c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800222a:	b003      	add	sp, #12
 800222c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002230:	40021000 	.word	0x40021000

08002234 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <NMI_Handler>

08002236 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002236:	e7fe      	b.n	8002236 <HardFault_Handler>

08002238 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <MemManage_Handler>

0800223a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <BusFault_Handler>

0800223c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800223c:	e7fe      	b.n	800223c <UsageFault_Handler>

0800223e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223e:	4770      	bx	lr

08002240 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002240:	4770      	bx	lr

08002242 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002242:	4770      	bx	lr

08002244 <SysTick_Handler>:
  */
volatile	uint8_t	milliseconds 	= 1;
extern bool cycle;

void SysTick_Handler(void)
{
 8002244:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002246:	f000 ff6f 	bl	8003128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  	// Here the frame rate of TERRSKO is set to values of 10 to 100 FPS
    if (milliseconds >= FPS_10) {
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <SysTick_Handler+0x28>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b63      	cmp	r3, #99	; 0x63
 8002252:	d904      	bls.n	800225e <SysTick_Handler+0x1a>
    	milliseconds = 1;
 8002254:	2301      	movs	r3, #1
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <SysTick_Handler+0x28>)
 8002258:	7013      	strb	r3, [r2, #0]
    	cycle = true;
 800225a:	4a05      	ldr	r2, [pc, #20]	; (8002270 <SysTick_Handler+0x2c>)
 800225c:	7013      	strb	r3, [r2, #0]
    }
    milliseconds++;
 800225e:	4a03      	ldr	r2, [pc, #12]	; (800226c <SysTick_Handler+0x28>)
 8002260:	7813      	ldrb	r3, [r2, #0]
 8002262:	3301      	adds	r3, #1
 8002264:	b2db      	uxtb	r3, r3
 8002266:	7013      	strb	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002268:	bd08      	pop	{r3, pc}
 800226a:	bf00      	nop
 800226c:	20000000 	.word	0x20000000
 8002270:	20000a80 	.word	0x20000a80

08002274 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002274:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 8002276:	4802      	ldr	r0, [pc, #8]	; (8002280 <DMA1_Channel1_IRQHandler+0xc>)
 8002278:	f002 f937 	bl	80044ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800227c:	bd08      	pop	{r3, pc}
 800227e:	bf00      	nop
 8002280:	20000808 	.word	0x20000808

08002284 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002284:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002286:	4802      	ldr	r0, [pc, #8]	; (8002290 <DMA1_Channel3_IRQHandler+0xc>)
 8002288:	f002 f92f 	bl	80044ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800228c:	bd08      	pop	{r3, pc}
 800228e:	bf00      	nop
 8002290:	20000928 	.word	0x20000928

08002294 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002294:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002296:	4802      	ldr	r0, [pc, #8]	; (80022a0 <DMA1_Channel4_IRQHandler+0xc>)
 8002298:	f002 f927 	bl	80044ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800229c:	bd08      	pop	{r3, pc}
 800229e:	bf00      	nop
 80022a0:	20000988 	.word	0x20000988

080022a4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80022a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80022a6:	4802      	ldr	r0, [pc, #8]	; (80022b0 <DMA1_Channel5_IRQHandler+0xc>)
 80022a8:	f002 f91f 	bl	80044ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80022ac:	bd08      	pop	{r3, pc}
 80022ae:	bf00      	nop
 80022b0:	2000075c 	.word	0x2000075c

080022b4 <DMA1_Channel6_IRQHandler>:
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80022b4:	4770      	bx	lr

080022b6 <DMA1_Channel7_IRQHandler>:
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80022b6:	4770      	bx	lr

080022b8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80022b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80022ba:	4802      	ldr	r0, [pc, #8]	; (80022c4 <USB_LP_IRQHandler+0xc>)
 80022bc:	f003 fd65 	bl	8005d8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80022c0:	bd08      	pop	{r3, pc}
 80022c2:	bf00      	nop
 80022c4:	200023f4 	.word	0x200023f4

080022c8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80022c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80022ca:	4802      	ldr	r0, [pc, #8]	; (80022d4 <I2C1_EV_IRQHandler+0xc>)
 80022cc:	f002 fc41 	bl	8004b52 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80022d0:	bd08      	pop	{r3, pc}
 80022d2:	bf00      	nop
 80022d4:	200009e8 	.word	0x200009e8

080022d8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80022d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80022da:	4802      	ldr	r0, [pc, #8]	; (80022e4 <I2C1_ER_IRQHandler+0xc>)
 80022dc:	f002 ff03 	bl	80050e6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80022e0:	bd08      	pop	{r3, pc}
 80022e2:	bf00      	nop
 80022e4:	200009e8 	.word	0x200009e8

080022e8 <EXTI0_IRQHandler>:
//	}
//}
/*	TIM2 IS READY FOR ACTIVITY IN FREQUENCY: 1HZ */

void EXTI0_IRQHandler() {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0)) {
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <EXTI0_IRQHandler+0x18>)
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	f013 0f01 	tst.w	r3, #1
 80022f0:	d002      	beq.n	80022f8 <EXTI0_IRQHandler+0x10>
			act_up = true;
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <EXTI0_IRQHandler+0x1c>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80022f8:	4b01      	ldr	r3, [pc, #4]	; (8002300 <EXTI0_IRQHandler+0x18>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	615a      	str	r2, [r3, #20]
}
 80022fe:	4770      	bx	lr
 8002300:	40010400 	.word	0x40010400
 8002304:	200005a3 	.word	0x200005a3

08002308 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler() {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1)) {
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <EXTI1_IRQHandler+0x18>)
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	f013 0f02 	tst.w	r3, #2
 8002310:	d002      	beq.n	8002318 <EXTI1_IRQHandler+0x10>
		act_left = true;
 8002312:	4b04      	ldr	r3, [pc, #16]	; (8002324 <EXTI1_IRQHandler+0x1c>)
 8002314:	2201      	movs	r2, #1
 8002316:	701a      	strb	r2, [r3, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 8002318:	4b01      	ldr	r3, [pc, #4]	; (8002320 <EXTI1_IRQHandler+0x18>)
 800231a:	2202      	movs	r2, #2
 800231c:	615a      	str	r2, [r3, #20]
}
 800231e:	4770      	bx	lr
 8002320:	40010400 	.word	0x40010400
 8002324:	200005a1 	.word	0x200005a1

08002328 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler() {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6)) {
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <EXTI9_5_IRQHandler+0x30>)
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002330:	d002      	beq.n	8002338 <EXTI9_5_IRQHandler+0x10>
		act_down = true;
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <EXTI9_5_IRQHandler+0x34>)
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
	}
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8)) {
 8002338:	4b07      	ldr	r3, [pc, #28]	; (8002358 <EXTI9_5_IRQHandler+0x30>)
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002340:	d002      	beq.n	8002348 <EXTI9_5_IRQHandler+0x20>
		act_right = true;
 8002342:	4b07      	ldr	r3, [pc, #28]	; (8002360 <EXTI9_5_IRQHandler+0x38>)
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <EXTI9_5_IRQHandler+0x30>)
 800234a:	2240      	movs	r2, #64	; 0x40
 800234c:	615a      	str	r2, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 800234e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002352:	615a      	str	r2, [r3, #20]
}
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40010400 	.word	0x40010400
 800235c:	200005a0 	.word	0x200005a0
 8002360:	200005a2 	.word	0x200005a2

08002364 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002364:	2001      	movs	r0, #1
 8002366:	4770      	bx	lr

08002368 <_kill>:

int _kill(int pid, int sig)
{
 8002368:	b508      	push	{r3, lr}
	errno = EINVAL;
 800236a:	f008 fd57 	bl	800ae1c <__errno>
 800236e:	2316      	movs	r3, #22
 8002370:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002376:	bd08      	pop	{r3, pc}

08002378 <_exit>:

void _exit (int status)
{
 8002378:	b508      	push	{r3, lr}
	_kill(status, -1);
 800237a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800237e:	f7ff fff3 	bl	8002368 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002382:	e7fe      	b.n	8002382 <_exit+0xa>

08002384 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002384:	b570      	push	{r4, r5, r6, lr}
 8002386:	460c      	mov	r4, r1
 8002388:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238a:	2500      	movs	r5, #0
 800238c:	e006      	b.n	800239c <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800238e:	f3af 8000 	nop.w
 8002392:	4621      	mov	r1, r4
 8002394:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002398:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800239a:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239c:	42b5      	cmp	r5, r6
 800239e:	dbf6      	blt.n	800238e <_read+0xa>
	}

return len;
}
 80023a0:	4630      	mov	r0, r6
 80023a2:	bd70      	pop	{r4, r5, r6, pc}

080023a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023a4:	b570      	push	{r4, r5, r6, lr}
 80023a6:	460c      	mov	r4, r1
 80023a8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023aa:	2500      	movs	r5, #0
 80023ac:	e004      	b.n	80023b8 <_write+0x14>
	{
		__io_putchar(*ptr++);
 80023ae:	f814 0b01 	ldrb.w	r0, [r4], #1
 80023b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b6:	3501      	adds	r5, #1
 80023b8:	42b5      	cmp	r5, r6
 80023ba:	dbf8      	blt.n	80023ae <_write+0xa>
	}
	return len;
}
 80023bc:	4630      	mov	r0, r6
 80023be:	bd70      	pop	{r4, r5, r6, pc}

080023c0 <_close>:

int _close(int file)
{
	return -1;
}
 80023c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023c4:	4770      	bx	lr

080023c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80023c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ca:	604b      	str	r3, [r1, #4]
	return 0;
}
 80023cc:	2000      	movs	r0, #0
 80023ce:	4770      	bx	lr

080023d0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80023d0:	2001      	movs	r0, #1
 80023d2:	4770      	bx	lr

080023d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80023d4:	2000      	movs	r0, #0
 80023d6:	4770      	bx	lr

080023d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023d8:	b510      	push	{r4, lr}
 80023da:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023dc:	4a0c      	ldr	r2, [pc, #48]	; (8002410 <_sbrk+0x38>)
 80023de:	490d      	ldr	r1, [pc, #52]	; (8002414 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e0:	480d      	ldr	r0, [pc, #52]	; (8002418 <_sbrk+0x40>)
 80023e2:	6800      	ldr	r0, [r0, #0]
 80023e4:	b140      	cbz	r0, 80023f8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023e6:	480c      	ldr	r0, [pc, #48]	; (8002418 <_sbrk+0x40>)
 80023e8:	6800      	ldr	r0, [r0, #0]
 80023ea:	4403      	add	r3, r0
 80023ec:	1a52      	subs	r2, r2, r1
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d806      	bhi.n	8002400 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80023f2:	4a09      	ldr	r2, [pc, #36]	; (8002418 <_sbrk+0x40>)
 80023f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80023f6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80023f8:	4807      	ldr	r0, [pc, #28]	; (8002418 <_sbrk+0x40>)
 80023fa:	4c08      	ldr	r4, [pc, #32]	; (800241c <_sbrk+0x44>)
 80023fc:	6004      	str	r4, [r0, #0]
 80023fe:	e7f2      	b.n	80023e6 <_sbrk+0xe>
    errno = ENOMEM;
 8002400:	f008 fd0c 	bl	800ae1c <__errno>
 8002404:	230c      	movs	r3, #12
 8002406:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800240c:	e7f3      	b.n	80023f6 <_sbrk+0x1e>
 800240e:	bf00      	nop
 8002410:	20020000 	.word	0x20020000
 8002414:	00000400 	.word	0x00000400
 8002418:	20000b34 	.word	0x20000b34
 800241c:	20002918 	.word	0x20002918

08002420 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002420:	4a03      	ldr	r2, [pc, #12]	; (8002430 <SystemInit+0x10>)
 8002422:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002426:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800242a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800242e:	4770      	bx	lr
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim20);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002434:	b084      	sub	sp, #16

  if(tim_baseHandle->Instance==TIM5)
 8002436:	6803      	ldr	r3, [r0, #0]
 8002438:	4a1c      	ldr	r2, [pc, #112]	; (80024ac <HAL_TIM_Base_MspInit+0x78>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d013      	beq.n	8002466 <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 800243e:	4a1c      	ldr	r2, [pc, #112]	; (80024b0 <HAL_TIM_Base_MspInit+0x7c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d01c      	beq.n	800247e <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM15)
 8002444:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <HAL_TIM_Base_MspInit+0x80>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d024      	beq.n	8002494 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM20)
 800244a:	4a1b      	ldr	r2, [pc, #108]	; (80024b8 <HAL_TIM_Base_MspInit+0x84>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d114      	bne.n	800247a <HAL_TIM_Base_MspInit+0x46>
  {
  /* USER CODE BEGIN TIM20_MspInit 0 */

  /* USER CODE END TIM20_MspInit 0 */
    /* TIM20 clock enable */
    __HAL_RCC_TIM20_CLK_ENABLE();
 8002450:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <HAL_TIM_Base_MspInit+0x88>)
 8002452:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002454:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002458:	661a      	str	r2, [r3, #96]	; 0x60
 800245a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002460:	9303      	str	r3, [sp, #12]
 8002462:	9b03      	ldr	r3, [sp, #12]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8002464:	e009      	b.n	800247a <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_TIM_Base_MspInit+0x88>)
 8002468:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800246a:	f042 0208 	orr.w	r2, r2, #8
 800246e:	659a      	str	r2, [r3, #88]	; 0x58
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	9b00      	ldr	r3, [sp, #0]
}
 800247a:	b004      	add	sp, #16
 800247c:	4770      	bx	lr
    __HAL_RCC_TIM8_CLK_ENABLE();
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <HAL_TIM_Base_MspInit+0x88>)
 8002480:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002482:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002486:	661a      	str	r2, [r3, #96]	; 0x60
 8002488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800248a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	9b01      	ldr	r3, [sp, #4]
 8002492:	e7f2      	b.n	800247a <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002494:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_TIM_Base_MspInit+0x88>)
 8002496:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002498:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800249c:	661a      	str	r2, [r3, #96]	; 0x60
 800249e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a4:	9302      	str	r3, [sp, #8]
 80024a6:	9b02      	ldr	r3, [sp, #8]
 80024a8:	e7e7      	b.n	800247a <HAL_TIM_Base_MspInit+0x46>
 80024aa:	bf00      	nop
 80024ac:	40000c00 	.word	0x40000c00
 80024b0:	40013400 	.word	0x40013400
 80024b4:	40014000 	.word	0x40014000
 80024b8:	40015000 	.word	0x40015000
 80024bc:	40021000 	.word	0x40021000

080024c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024c0:	b500      	push	{lr}
 80024c2:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	2300      	movs	r3, #0
 80024c6:	9305      	str	r3, [sp, #20]
 80024c8:	9306      	str	r3, [sp, #24]
 80024ca:	9307      	str	r3, [sp, #28]
 80024cc:	9308      	str	r3, [sp, #32]
 80024ce:	9309      	str	r3, [sp, #36]	; 0x24
  if(timHandle->Instance==TIM5)
 80024d0:	6803      	ldr	r3, [r0, #0]
 80024d2:	4a33      	ldr	r2, [pc, #204]	; (80025a0 <HAL_TIM_MspPostInit+0xe0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00b      	beq.n	80024f0 <HAL_TIM_MspPostInit+0x30>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 80024d8:	4a32      	ldr	r2, [pc, #200]	; (80025a4 <HAL_TIM_MspPostInit+0xe4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d01e      	beq.n	800251c <HAL_TIM_MspPostInit+0x5c>

  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM15)
 80024de:	4a32      	ldr	r2, [pc, #200]	; (80025a8 <HAL_TIM_MspPostInit+0xe8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d031      	beq.n	8002548 <HAL_TIM_MspPostInit+0x88>

  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM20)
 80024e4:	4a31      	ldr	r2, [pc, #196]	; (80025ac <HAL_TIM_MspPostInit+0xec>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d044      	beq.n	8002574 <HAL_TIM_MspPostInit+0xb4>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 80024ea:	b00b      	add	sp, #44	; 0x2c
 80024ec:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024f0:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <HAL_TIM_MspPostInit+0xf0>)
 80024f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024f4:	f042 0220 	orr.w	r2, r2, #32
 80024f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80024fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	9301      	str	r3, [sp, #4]
 8002502:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM2_Pin|PWM3_Pin|PWM4_Pin;
 8002504:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002508:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 800250e:	2306      	movs	r3, #6
 8002510:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002512:	a905      	add	r1, sp, #20
 8002514:	4827      	ldr	r0, [pc, #156]	; (80025b4 <HAL_TIM_MspPostInit+0xf4>)
 8002516:	f002 f97d 	bl	8004814 <HAL_GPIO_Init>
 800251a:	e7e6      	b.n	80024ea <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_TIM_MspPostInit+0xf0>)
 800251e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002520:	f042 0204 	orr.w	r2, r2, #4
 8002524:	64da      	str	r2, [r3, #76]	; 0x4c
 8002526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	9302      	str	r3, [sp, #8]
 800252e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM10_Pin|PWM11_Pin|PWM12_Pin|PWM13_Pin;
 8002530:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002534:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800253a:	2304      	movs	r3, #4
 800253c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253e:	a905      	add	r1, sp, #20
 8002540:	481d      	ldr	r0, [pc, #116]	; (80025b8 <HAL_TIM_MspPostInit+0xf8>)
 8002542:	f002 f967 	bl	8004814 <HAL_GPIO_Init>
 8002546:	e7d0      	b.n	80024ea <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_TIM_MspPostInit+0xf0>)
 800254a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800254c:	f042 0220 	orr.w	r2, r2, #32
 8002550:	64da      	str	r2, [r3, #76]	; 0x4c
 8002552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002554:	f003 0320 	and.w	r3, r3, #32
 8002558:	9303      	str	r3, [sp, #12]
 800255a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = PWM5_Pin;
 800255c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002560:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002562:	2302      	movs	r3, #2
 8002564:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
 8002566:	2303      	movs	r3, #3
 8002568:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(PWM5_GPIO_Port, &GPIO_InitStruct);
 800256a:	a905      	add	r1, sp, #20
 800256c:	4811      	ldr	r0, [pc, #68]	; (80025b4 <HAL_TIM_MspPostInit+0xf4>)
 800256e:	f002 f951 	bl	8004814 <HAL_GPIO_Init>
 8002572:	e7ba      	b.n	80024ea <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002574:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <HAL_TIM_MspPostInit+0xf0>)
 8002576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002578:	f042 0220 	orr.w	r2, r2, #32
 800257c:	64da      	str	r2, [r3, #76]	; 0x4c
 800257e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	9304      	str	r3, [sp, #16]
 8002586:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = PWM6_Pin|PWM7_Pin|PWM8_Pin|PWM9_Pin;
 8002588:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800258c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 8002592:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002594:	a905      	add	r1, sp, #20
 8002596:	4807      	ldr	r0, [pc, #28]	; (80025b4 <HAL_TIM_MspPostInit+0xf4>)
 8002598:	f002 f93c 	bl	8004814 <HAL_GPIO_Init>
}
 800259c:	e7a5      	b.n	80024ea <HAL_TIM_MspPostInit+0x2a>
 800259e:	bf00      	nop
 80025a0:	40000c00 	.word	0x40000c00
 80025a4:	40013400 	.word	0x40013400
 80025a8:	40014000 	.word	0x40014000
 80025ac:	40015000 	.word	0x40015000
 80025b0:	40021000 	.word	0x40021000
 80025b4:	48001400 	.word	0x48001400
 80025b8:	48000800 	.word	0x48000800

080025bc <MX_TIM5_Init>:
{
 80025bc:	b500      	push	{lr}
 80025be:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c0:	2300      	movs	r3, #0
 80025c2:	930a      	str	r3, [sp, #40]	; 0x28
 80025c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80025c6:	930c      	str	r3, [sp, #48]	; 0x30
 80025c8:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ca:	9307      	str	r3, [sp, #28]
 80025cc:	9308      	str	r3, [sp, #32]
 80025ce:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	9302      	str	r3, [sp, #8]
 80025d6:	9303      	str	r3, [sp, #12]
 80025d8:	9304      	str	r3, [sp, #16]
 80025da:	9305      	str	r3, [sp, #20]
 80025dc:	9306      	str	r3, [sp, #24]
  htim5.Instance = TIM5;
 80025de:	4830      	ldr	r0, [pc, #192]	; (80026a0 <MX_TIM5_Init+0xe4>)
 80025e0:	4a30      	ldr	r2, [pc, #192]	; (80026a4 <MX_TIM5_Init+0xe8>)
 80025e2:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 10;
 80025e4:	220a      	movs	r2, #10
 80025e6:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e8:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 10000;
 80025ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80025ee:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f0:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025f6:	f004 ff8b 	bl	8007510 <HAL_TIM_Base_Init>
 80025fa:	2800      	cmp	r0, #0
 80025fc:	d13a      	bne.n	8002674 <MX_TIM5_Init+0xb8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002602:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002604:	a90a      	add	r1, sp, #40	; 0x28
 8002606:	4826      	ldr	r0, [pc, #152]	; (80026a0 <MX_TIM5_Init+0xe4>)
 8002608:	f005 f8da 	bl	80077c0 <HAL_TIM_ConfigClockSource>
 800260c:	2800      	cmp	r0, #0
 800260e:	d134      	bne.n	800267a <MX_TIM5_Init+0xbe>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002610:	4823      	ldr	r0, [pc, #140]	; (80026a0 <MX_TIM5_Init+0xe4>)
 8002612:	f004 ffad 	bl	8007570 <HAL_TIM_PWM_Init>
 8002616:	2800      	cmp	r0, #0
 8002618:	d132      	bne.n	8002680 <MX_TIM5_Init+0xc4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800261e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002620:	a907      	add	r1, sp, #28
 8002622:	481f      	ldr	r0, [pc, #124]	; (80026a0 <MX_TIM5_Init+0xe4>)
 8002624:	f005 f976 	bl	8007914 <HAL_TIMEx_MasterConfigSynchronization>
 8002628:	bb68      	cbnz	r0, 8002686 <MX_TIM5_Init+0xca>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800262a:	2360      	movs	r3, #96	; 0x60
 800262c:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 200;
 800262e:	23c8      	movs	r3, #200	; 0xc8
 8002630:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002632:	2300      	movs	r3, #0
 8002634:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002636:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002638:	2204      	movs	r2, #4
 800263a:	4669      	mov	r1, sp
 800263c:	4818      	ldr	r0, [pc, #96]	; (80026a0 <MX_TIM5_Init+0xe4>)
 800263e:	f005 f815 	bl	800766c <HAL_TIM_PWM_ConfigChannel>
 8002642:	bb18      	cbnz	r0, 800268c <MX_TIM5_Init+0xd0>
  sConfigOC.Pulse = 400;
 8002644:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002648:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800264a:	2208      	movs	r2, #8
 800264c:	4669      	mov	r1, sp
 800264e:	4814      	ldr	r0, [pc, #80]	; (80026a0 <MX_TIM5_Init+0xe4>)
 8002650:	f005 f80c 	bl	800766c <HAL_TIM_PWM_ConfigChannel>
 8002654:	b9e8      	cbnz	r0, 8002692 <MX_TIM5_Init+0xd6>
  sConfigOC.Pulse = 600;
 8002656:	f44f 7316 	mov.w	r3, #600	; 0x258
 800265a:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800265c:	220c      	movs	r2, #12
 800265e:	4669      	mov	r1, sp
 8002660:	480f      	ldr	r0, [pc, #60]	; (80026a0 <MX_TIM5_Init+0xe4>)
 8002662:	f005 f803 	bl	800766c <HAL_TIM_PWM_ConfigChannel>
 8002666:	b9b8      	cbnz	r0, 8002698 <MX_TIM5_Init+0xdc>
  HAL_TIM_MspPostInit(&htim5);
 8002668:	480d      	ldr	r0, [pc, #52]	; (80026a0 <MX_TIM5_Init+0xe4>)
 800266a:	f7ff ff29 	bl	80024c0 <HAL_TIM_MspPostInit>
}
 800266e:	b00f      	add	sp, #60	; 0x3c
 8002670:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002674:	f7ff fc1e 	bl	8001eb4 <Error_Handler>
 8002678:	e7c1      	b.n	80025fe <MX_TIM5_Init+0x42>
    Error_Handler();
 800267a:	f7ff fc1b 	bl	8001eb4 <Error_Handler>
 800267e:	e7c7      	b.n	8002610 <MX_TIM5_Init+0x54>
    Error_Handler();
 8002680:	f7ff fc18 	bl	8001eb4 <Error_Handler>
 8002684:	e7c9      	b.n	800261a <MX_TIM5_Init+0x5e>
    Error_Handler();
 8002686:	f7ff fc15 	bl	8001eb4 <Error_Handler>
 800268a:	e7ce      	b.n	800262a <MX_TIM5_Init+0x6e>
    Error_Handler();
 800268c:	f7ff fc12 	bl	8001eb4 <Error_Handler>
 8002690:	e7d8      	b.n	8002644 <MX_TIM5_Init+0x88>
    Error_Handler();
 8002692:	f7ff fc0f 	bl	8001eb4 <Error_Handler>
 8002696:	e7de      	b.n	8002656 <MX_TIM5_Init+0x9a>
    Error_Handler();
 8002698:	f7ff fc0c 	bl	8001eb4 <Error_Handler>
 800269c:	e7e4      	b.n	8002668 <MX_TIM5_Init+0xac>
 800269e:	bf00      	nop
 80026a0:	20000bd0 	.word	0x20000bd0
 80026a4:	40000c00 	.word	0x40000c00

080026a8 <MX_TIM8_Init>:
{
 80026a8:	b510      	push	{r4, lr}
 80026aa:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ac:	2400      	movs	r4, #0
 80026ae:	9418      	str	r4, [sp, #96]	; 0x60
 80026b0:	9419      	str	r4, [sp, #100]	; 0x64
 80026b2:	941a      	str	r4, [sp, #104]	; 0x68
 80026b4:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b6:	9415      	str	r4, [sp, #84]	; 0x54
 80026b8:	9416      	str	r4, [sp, #88]	; 0x58
 80026ba:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026bc:	940e      	str	r4, [sp, #56]	; 0x38
 80026be:	940f      	str	r4, [sp, #60]	; 0x3c
 80026c0:	9410      	str	r4, [sp, #64]	; 0x40
 80026c2:	9411      	str	r4, [sp, #68]	; 0x44
 80026c4:	9412      	str	r4, [sp, #72]	; 0x48
 80026c6:	9413      	str	r4, [sp, #76]	; 0x4c
 80026c8:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026ca:	2234      	movs	r2, #52	; 0x34
 80026cc:	4621      	mov	r1, r4
 80026ce:	a801      	add	r0, sp, #4
 80026d0:	f008 fbd6 	bl	800ae80 <memset>
  htim8.Instance = TIM8;
 80026d4:	4846      	ldr	r0, [pc, #280]	; (80027f0 <MX_TIM8_Init+0x148>)
 80026d6:	4b47      	ldr	r3, [pc, #284]	; (80027f4 <MX_TIM8_Init+0x14c>)
 80026d8:	6003      	str	r3, [r0, #0]
  htim8.Init.Prescaler = 0;
 80026da:	6044      	str	r4, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026dc:	6084      	str	r4, [r0, #8]
  htim8.Init.Period = 65535;
 80026de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026e2:	60c3      	str	r3, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e4:	6104      	str	r4, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 80026e6:	6144      	str	r4, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e8:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80026ea:	f004 ff11 	bl	8007510 <HAL_TIM_Base_Init>
 80026ee:	2800      	cmp	r0, #0
 80026f0:	d162      	bne.n	80027b8 <MX_TIM8_Init+0x110>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f6:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80026f8:	a918      	add	r1, sp, #96	; 0x60
 80026fa:	483d      	ldr	r0, [pc, #244]	; (80027f0 <MX_TIM8_Init+0x148>)
 80026fc:	f005 f860 	bl	80077c0 <HAL_TIM_ConfigClockSource>
 8002700:	2800      	cmp	r0, #0
 8002702:	d15c      	bne.n	80027be <MX_TIM8_Init+0x116>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002704:	483a      	ldr	r0, [pc, #232]	; (80027f0 <MX_TIM8_Init+0x148>)
 8002706:	f004 ff33 	bl	8007570 <HAL_TIM_PWM_Init>
 800270a:	2800      	cmp	r0, #0
 800270c:	d15a      	bne.n	80027c4 <MX_TIM8_Init+0x11c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002712:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002714:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002716:	a915      	add	r1, sp, #84	; 0x54
 8002718:	4835      	ldr	r0, [pc, #212]	; (80027f0 <MX_TIM8_Init+0x148>)
 800271a:	f005 f8fb 	bl	8007914 <HAL_TIMEx_MasterConfigSynchronization>
 800271e:	2800      	cmp	r0, #0
 8002720:	d153      	bne.n	80027ca <MX_TIM8_Init+0x122>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002722:	2360      	movs	r3, #96	; 0x60
 8002724:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 1000;
 8002726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800272a:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800272c:	2200      	movs	r2, #0
 800272e:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002730:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002732:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002734:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002736:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002738:	a90e      	add	r1, sp, #56	; 0x38
 800273a:	482d      	ldr	r0, [pc, #180]	; (80027f0 <MX_TIM8_Init+0x148>)
 800273c:	f004 ff96 	bl	800766c <HAL_TIM_PWM_ConfigChannel>
 8002740:	2800      	cmp	r0, #0
 8002742:	d145      	bne.n	80027d0 <MX_TIM8_Init+0x128>
  sConfigOC.Pulse = 2000;
 8002744:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002748:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800274a:	2204      	movs	r2, #4
 800274c:	a90e      	add	r1, sp, #56	; 0x38
 800274e:	4828      	ldr	r0, [pc, #160]	; (80027f0 <MX_TIM8_Init+0x148>)
 8002750:	f004 ff8c 	bl	800766c <HAL_TIM_PWM_ConfigChannel>
 8002754:	2800      	cmp	r0, #0
 8002756:	d13e      	bne.n	80027d6 <MX_TIM8_Init+0x12e>
  sConfigOC.Pulse = 4000;
 8002758:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800275c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800275e:	2208      	movs	r2, #8
 8002760:	a90e      	add	r1, sp, #56	; 0x38
 8002762:	4823      	ldr	r0, [pc, #140]	; (80027f0 <MX_TIM8_Init+0x148>)
 8002764:	f004 ff82 	bl	800766c <HAL_TIM_PWM_ConfigChannel>
 8002768:	2800      	cmp	r0, #0
 800276a:	d137      	bne.n	80027dc <MX_TIM8_Init+0x134>
  sConfigOC.Pulse = 8000;
 800276c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8002770:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002772:	220c      	movs	r2, #12
 8002774:	a90e      	add	r1, sp, #56	; 0x38
 8002776:	481e      	ldr	r0, [pc, #120]	; (80027f0 <MX_TIM8_Init+0x148>)
 8002778:	f004 ff78 	bl	800766c <HAL_TIM_PWM_ConfigChannel>
 800277c:	2800      	cmp	r0, #0
 800277e:	d130      	bne.n	80027e2 <MX_TIM8_Init+0x13a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002784:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002786:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002788:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800278a:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800278c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002790:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002792:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002794:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002796:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002798:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800279c:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800279e:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80027a0:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027a2:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80027a4:	a901      	add	r1, sp, #4
 80027a6:	4812      	ldr	r0, [pc, #72]	; (80027f0 <MX_TIM8_Init+0x148>)
 80027a8:	f005 f90a 	bl	80079c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80027ac:	b9e0      	cbnz	r0, 80027e8 <MX_TIM8_Init+0x140>
  HAL_TIM_MspPostInit(&htim8);
 80027ae:	4810      	ldr	r0, [pc, #64]	; (80027f0 <MX_TIM8_Init+0x148>)
 80027b0:	f7ff fe86 	bl	80024c0 <HAL_TIM_MspPostInit>
}
 80027b4:	b01c      	add	sp, #112	; 0x70
 80027b6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80027b8:	f7ff fb7c 	bl	8001eb4 <Error_Handler>
 80027bc:	e799      	b.n	80026f2 <MX_TIM8_Init+0x4a>
    Error_Handler();
 80027be:	f7ff fb79 	bl	8001eb4 <Error_Handler>
 80027c2:	e79f      	b.n	8002704 <MX_TIM8_Init+0x5c>
    Error_Handler();
 80027c4:	f7ff fb76 	bl	8001eb4 <Error_Handler>
 80027c8:	e7a1      	b.n	800270e <MX_TIM8_Init+0x66>
    Error_Handler();
 80027ca:	f7ff fb73 	bl	8001eb4 <Error_Handler>
 80027ce:	e7a8      	b.n	8002722 <MX_TIM8_Init+0x7a>
    Error_Handler();
 80027d0:	f7ff fb70 	bl	8001eb4 <Error_Handler>
 80027d4:	e7b6      	b.n	8002744 <MX_TIM8_Init+0x9c>
    Error_Handler();
 80027d6:	f7ff fb6d 	bl	8001eb4 <Error_Handler>
 80027da:	e7bd      	b.n	8002758 <MX_TIM8_Init+0xb0>
    Error_Handler();
 80027dc:	f7ff fb6a 	bl	8001eb4 <Error_Handler>
 80027e0:	e7c4      	b.n	800276c <MX_TIM8_Init+0xc4>
    Error_Handler();
 80027e2:	f7ff fb67 	bl	8001eb4 <Error_Handler>
 80027e6:	e7cb      	b.n	8002780 <MX_TIM8_Init+0xd8>
    Error_Handler();
 80027e8:	f7ff fb64 	bl	8001eb4 <Error_Handler>
 80027ec:	e7df      	b.n	80027ae <MX_TIM8_Init+0x106>
 80027ee:	bf00      	nop
 80027f0:	20000c1c 	.word	0x20000c1c
 80027f4:	40013400 	.word	0x40013400

080027f8 <MX_TIM15_Init>:
{
 80027f8:	b510      	push	{r4, lr}
 80027fa:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027fc:	2400      	movs	r4, #0
 80027fe:	9418      	str	r4, [sp, #96]	; 0x60
 8002800:	9419      	str	r4, [sp, #100]	; 0x64
 8002802:	941a      	str	r4, [sp, #104]	; 0x68
 8002804:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002806:	9415      	str	r4, [sp, #84]	; 0x54
 8002808:	9416      	str	r4, [sp, #88]	; 0x58
 800280a:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 800280c:	940e      	str	r4, [sp, #56]	; 0x38
 800280e:	940f      	str	r4, [sp, #60]	; 0x3c
 8002810:	9410      	str	r4, [sp, #64]	; 0x40
 8002812:	9411      	str	r4, [sp, #68]	; 0x44
 8002814:	9412      	str	r4, [sp, #72]	; 0x48
 8002816:	9413      	str	r4, [sp, #76]	; 0x4c
 8002818:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800281a:	2234      	movs	r2, #52	; 0x34
 800281c:	4621      	mov	r1, r4
 800281e:	a801      	add	r0, sp, #4
 8002820:	f008 fb2e 	bl	800ae80 <memset>
  htim15.Instance = TIM15;
 8002824:	482e      	ldr	r0, [pc, #184]	; (80028e0 <MX_TIM15_Init+0xe8>)
 8002826:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <MX_TIM15_Init+0xec>)
 8002828:	6003      	str	r3, [r0, #0]
  htim15.Init.Prescaler = 0;
 800282a:	6044      	str	r4, [r0, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800282c:	6084      	str	r4, [r0, #8]
  htim15.Init.Period = 32768;
 800282e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002832:	60c3      	str	r3, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002834:	6104      	str	r4, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 8002836:	6144      	str	r4, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002838:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800283a:	f004 fe69 	bl	8007510 <HAL_TIM_Base_Init>
 800283e:	2800      	cmp	r0, #0
 8002840:	d13c      	bne.n	80028bc <MX_TIM15_Init+0xc4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002846:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002848:	a918      	add	r1, sp, #96	; 0x60
 800284a:	4825      	ldr	r0, [pc, #148]	; (80028e0 <MX_TIM15_Init+0xe8>)
 800284c:	f004 ffb8 	bl	80077c0 <HAL_TIM_ConfigClockSource>
 8002850:	2800      	cmp	r0, #0
 8002852:	d136      	bne.n	80028c2 <MX_TIM15_Init+0xca>
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002854:	4822      	ldr	r0, [pc, #136]	; (80028e0 <MX_TIM15_Init+0xe8>)
 8002856:	f004 fe8b 	bl	8007570 <HAL_TIM_PWM_Init>
 800285a:	2800      	cmp	r0, #0
 800285c:	d134      	bne.n	80028c8 <MX_TIM15_Init+0xd0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002862:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002864:	a915      	add	r1, sp, #84	; 0x54
 8002866:	481e      	ldr	r0, [pc, #120]	; (80028e0 <MX_TIM15_Init+0xe8>)
 8002868:	f005 f854 	bl	8007914 <HAL_TIMEx_MasterConfigSynchronization>
 800286c:	2800      	cmp	r0, #0
 800286e:	d12e      	bne.n	80028ce <MX_TIM15_Init+0xd6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002870:	2360      	movs	r3, #96	; 0x60
 8002872:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 16000;
 8002874:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8002878:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800287a:	2300      	movs	r3, #0
 800287c:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800287e:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002880:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002882:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002884:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002886:	2204      	movs	r2, #4
 8002888:	a90e      	add	r1, sp, #56	; 0x38
 800288a:	4815      	ldr	r0, [pc, #84]	; (80028e0 <MX_TIM15_Init+0xe8>)
 800288c:	f004 feee 	bl	800766c <HAL_TIM_PWM_ConfigChannel>
 8002890:	bb00      	cbnz	r0, 80028d4 <MX_TIM15_Init+0xdc>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002892:	2300      	movs	r3, #0
 8002894:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002896:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002898:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800289a:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800289c:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800289e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028a2:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80028a4:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028a6:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80028a8:	a901      	add	r1, sp, #4
 80028aa:	480d      	ldr	r0, [pc, #52]	; (80028e0 <MX_TIM15_Init+0xe8>)
 80028ac:	f005 f888 	bl	80079c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80028b0:	b998      	cbnz	r0, 80028da <MX_TIM15_Init+0xe2>
  HAL_TIM_MspPostInit(&htim15);
 80028b2:	480b      	ldr	r0, [pc, #44]	; (80028e0 <MX_TIM15_Init+0xe8>)
 80028b4:	f7ff fe04 	bl	80024c0 <HAL_TIM_MspPostInit>
}
 80028b8:	b01c      	add	sp, #112	; 0x70
 80028ba:	bd10      	pop	{r4, pc}
    Error_Handler();
 80028bc:	f7ff fafa 	bl	8001eb4 <Error_Handler>
 80028c0:	e7bf      	b.n	8002842 <MX_TIM15_Init+0x4a>
    Error_Handler();
 80028c2:	f7ff faf7 	bl	8001eb4 <Error_Handler>
 80028c6:	e7c5      	b.n	8002854 <MX_TIM15_Init+0x5c>
    Error_Handler();
 80028c8:	f7ff faf4 	bl	8001eb4 <Error_Handler>
 80028cc:	e7c7      	b.n	800285e <MX_TIM15_Init+0x66>
    Error_Handler();
 80028ce:	f7ff faf1 	bl	8001eb4 <Error_Handler>
 80028d2:	e7cd      	b.n	8002870 <MX_TIM15_Init+0x78>
    Error_Handler();
 80028d4:	f7ff faee 	bl	8001eb4 <Error_Handler>
 80028d8:	e7db      	b.n	8002892 <MX_TIM15_Init+0x9a>
    Error_Handler();
 80028da:	f7ff faeb 	bl	8001eb4 <Error_Handler>
 80028de:	e7e8      	b.n	80028b2 <MX_TIM15_Init+0xba>
 80028e0:	20000b38 	.word	0x20000b38
 80028e4:	40014000 	.word	0x40014000

080028e8 <MX_TIM20_Init>:
{
 80028e8:	b510      	push	{r4, lr}
 80028ea:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ec:	2400      	movs	r4, #0
 80028ee:	9418      	str	r4, [sp, #96]	; 0x60
 80028f0:	9419      	str	r4, [sp, #100]	; 0x64
 80028f2:	941a      	str	r4, [sp, #104]	; 0x68
 80028f4:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028f6:	9415      	str	r4, [sp, #84]	; 0x54
 80028f8:	9416      	str	r4, [sp, #88]	; 0x58
 80028fa:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028fc:	940e      	str	r4, [sp, #56]	; 0x38
 80028fe:	940f      	str	r4, [sp, #60]	; 0x3c
 8002900:	9410      	str	r4, [sp, #64]	; 0x40
 8002902:	9411      	str	r4, [sp, #68]	; 0x44
 8002904:	9412      	str	r4, [sp, #72]	; 0x48
 8002906:	9413      	str	r4, [sp, #76]	; 0x4c
 8002908:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800290a:	2234      	movs	r2, #52	; 0x34
 800290c:	4621      	mov	r1, r4
 800290e:	a801      	add	r0, sp, #4
 8002910:	f008 fab6 	bl	800ae80 <memset>
  htim20.Instance = TIM20;
 8002914:	4846      	ldr	r0, [pc, #280]	; (8002a30 <MX_TIM20_Init+0x148>)
 8002916:	4b47      	ldr	r3, [pc, #284]	; (8002a34 <MX_TIM20_Init+0x14c>)
 8002918:	6003      	str	r3, [r0, #0]
  htim20.Init.Prescaler = 0;
 800291a:	6044      	str	r4, [r0, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 800291c:	6084      	str	r4, [r0, #8]
  htim20.Init.Period = 16000;
 800291e:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8002922:	60c3      	str	r3, [r0, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002924:	6104      	str	r4, [r0, #16]
  htim20.Init.RepetitionCounter = 0;
 8002926:	6144      	str	r4, [r0, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002928:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 800292a:	f004 fdf1 	bl	8007510 <HAL_TIM_Base_Init>
 800292e:	2800      	cmp	r0, #0
 8002930:	d162      	bne.n	80029f8 <MX_TIM20_Init+0x110>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002936:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8002938:	a918      	add	r1, sp, #96	; 0x60
 800293a:	483d      	ldr	r0, [pc, #244]	; (8002a30 <MX_TIM20_Init+0x148>)
 800293c:	f004 ff40 	bl	80077c0 <HAL_TIM_ConfigClockSource>
 8002940:	2800      	cmp	r0, #0
 8002942:	d15c      	bne.n	80029fe <MX_TIM20_Init+0x116>
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8002944:	483a      	ldr	r0, [pc, #232]	; (8002a30 <MX_TIM20_Init+0x148>)
 8002946:	f004 fe13 	bl	8007570 <HAL_TIM_PWM_Init>
 800294a:	2800      	cmp	r0, #0
 800294c:	d15a      	bne.n	8002a04 <MX_TIM20_Init+0x11c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002952:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002954:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8002956:	a915      	add	r1, sp, #84	; 0x54
 8002958:	4835      	ldr	r0, [pc, #212]	; (8002a30 <MX_TIM20_Init+0x148>)
 800295a:	f004 ffdb 	bl	8007914 <HAL_TIMEx_MasterConfigSynchronization>
 800295e:	2800      	cmp	r0, #0
 8002960:	d153      	bne.n	8002a0a <MX_TIM20_Init+0x122>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002962:	2360      	movs	r3, #96	; 0x60
 8002964:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 8000;
 8002966:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800296a:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800296c:	2200      	movs	r2, #0
 800296e:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002970:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002972:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002974:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002976:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002978:	a90e      	add	r1, sp, #56	; 0x38
 800297a:	482d      	ldr	r0, [pc, #180]	; (8002a30 <MX_TIM20_Init+0x148>)
 800297c:	f004 fe76 	bl	800766c <HAL_TIM_PWM_ConfigChannel>
 8002980:	2800      	cmp	r0, #0
 8002982:	d145      	bne.n	8002a10 <MX_TIM20_Init+0x128>
  sConfigOC.Pulse = 10000;
 8002984:	f242 7310 	movw	r3, #10000	; 0x2710
 8002988:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800298a:	2204      	movs	r2, #4
 800298c:	a90e      	add	r1, sp, #56	; 0x38
 800298e:	4828      	ldr	r0, [pc, #160]	; (8002a30 <MX_TIM20_Init+0x148>)
 8002990:	f004 fe6c 	bl	800766c <HAL_TIM_PWM_ConfigChannel>
 8002994:	2800      	cmp	r0, #0
 8002996:	d13e      	bne.n	8002a16 <MX_TIM20_Init+0x12e>
  sConfigOC.Pulse = 12000;
 8002998:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800299c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800299e:	2208      	movs	r2, #8
 80029a0:	a90e      	add	r1, sp, #56	; 0x38
 80029a2:	4823      	ldr	r0, [pc, #140]	; (8002a30 <MX_TIM20_Init+0x148>)
 80029a4:	f004 fe62 	bl	800766c <HAL_TIM_PWM_ConfigChannel>
 80029a8:	2800      	cmp	r0, #0
 80029aa:	d137      	bne.n	8002a1c <MX_TIM20_Init+0x134>
  sConfigOC.Pulse = 15000;
 80029ac:	f643 2398 	movw	r3, #15000	; 0x3a98
 80029b0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029b2:	220c      	movs	r2, #12
 80029b4:	a90e      	add	r1, sp, #56	; 0x38
 80029b6:	481e      	ldr	r0, [pc, #120]	; (8002a30 <MX_TIM20_Init+0x148>)
 80029b8:	f004 fe58 	bl	800766c <HAL_TIM_PWM_ConfigChannel>
 80029bc:	2800      	cmp	r0, #0
 80029be:	d130      	bne.n	8002a22 <MX_TIM20_Init+0x13a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029c4:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029c6:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029c8:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029ca:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029d0:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80029d2:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80029d4:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80029d6:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80029d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029dc:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80029de:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80029e0:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029e2:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 80029e4:	a901      	add	r1, sp, #4
 80029e6:	4812      	ldr	r0, [pc, #72]	; (8002a30 <MX_TIM20_Init+0x148>)
 80029e8:	f004 ffea 	bl	80079c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80029ec:	b9e0      	cbnz	r0, 8002a28 <MX_TIM20_Init+0x140>
  HAL_TIM_MspPostInit(&htim20);
 80029ee:	4810      	ldr	r0, [pc, #64]	; (8002a30 <MX_TIM20_Init+0x148>)
 80029f0:	f7ff fd66 	bl	80024c0 <HAL_TIM_MspPostInit>
}
 80029f4:	b01c      	add	sp, #112	; 0x70
 80029f6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80029f8:	f7ff fa5c 	bl	8001eb4 <Error_Handler>
 80029fc:	e799      	b.n	8002932 <MX_TIM20_Init+0x4a>
    Error_Handler();
 80029fe:	f7ff fa59 	bl	8001eb4 <Error_Handler>
 8002a02:	e79f      	b.n	8002944 <MX_TIM20_Init+0x5c>
    Error_Handler();
 8002a04:	f7ff fa56 	bl	8001eb4 <Error_Handler>
 8002a08:	e7a1      	b.n	800294e <MX_TIM20_Init+0x66>
    Error_Handler();
 8002a0a:	f7ff fa53 	bl	8001eb4 <Error_Handler>
 8002a0e:	e7a8      	b.n	8002962 <MX_TIM20_Init+0x7a>
    Error_Handler();
 8002a10:	f7ff fa50 	bl	8001eb4 <Error_Handler>
 8002a14:	e7b6      	b.n	8002984 <MX_TIM20_Init+0x9c>
    Error_Handler();
 8002a16:	f7ff fa4d 	bl	8001eb4 <Error_Handler>
 8002a1a:	e7bd      	b.n	8002998 <MX_TIM20_Init+0xb0>
    Error_Handler();
 8002a1c:	f7ff fa4a 	bl	8001eb4 <Error_Handler>
 8002a20:	e7c4      	b.n	80029ac <MX_TIM20_Init+0xc4>
    Error_Handler();
 8002a22:	f7ff fa47 	bl	8001eb4 <Error_Handler>
 8002a26:	e7cb      	b.n	80029c0 <MX_TIM20_Init+0xd8>
    Error_Handler();
 8002a28:	f7ff fa44 	bl	8001eb4 <Error_Handler>
 8002a2c:	e7df      	b.n	80029ee <MX_TIM20_Init+0x106>
 8002a2e:	bf00      	nop
 8002a30:	20000b84 	.word	0x20000b84
 8002a34:	40015000 	.word	0x40015000

08002a38 <MX_UART4_Init>:
UART_HandleTypeDef huart3;


/* UART4 init function */
void MX_UART4_Init(void)
{
 8002a38:	b508      	push	{r3, lr}
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002a3a:	4817      	ldr	r0, [pc, #92]	; (8002a98 <MX_UART4_Init+0x60>)
 8002a3c:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <MX_UART4_Init+0x64>)
 8002a3e:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8002a40:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002a44:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002a46:	2300      	movs	r3, #0
 8002a48:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002a4a:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002a4c:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002a4e:	220c      	movs	r2, #12
 8002a50:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a52:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a54:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a56:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a58:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a5a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002a5c:	f005 faeb 	bl	8008036 <HAL_UART_Init>
 8002a60:	b970      	cbnz	r0, 8002a80 <MX_UART4_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a62:	2100      	movs	r1, #0
 8002a64:	480c      	ldr	r0, [pc, #48]	; (8002a98 <MX_UART4_Init+0x60>)
 8002a66:	f005 fb5e 	bl	8008126 <HAL_UARTEx_SetTxFifoThreshold>
 8002a6a:	b960      	cbnz	r0, 8002a86 <MX_UART4_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	480a      	ldr	r0, [pc, #40]	; (8002a98 <MX_UART4_Init+0x60>)
 8002a70:	f005 fb7e 	bl	8008170 <HAL_UARTEx_SetRxFifoThreshold>
 8002a74:	b950      	cbnz	r0, 8002a8c <MX_UART4_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002a76:	4808      	ldr	r0, [pc, #32]	; (8002a98 <MX_UART4_Init+0x60>)
 8002a78:	f005 fb36 	bl	80080e8 <HAL_UARTEx_DisableFifoMode>
 8002a7c:	b948      	cbnz	r0, 8002a92 <MX_UART4_Init+0x5a>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002a7e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002a80:	f7ff fa18 	bl	8001eb4 <Error_Handler>
 8002a84:	e7ed      	b.n	8002a62 <MX_UART4_Init+0x2a>
    Error_Handler();
 8002a86:	f7ff fa15 	bl	8001eb4 <Error_Handler>
 8002a8a:	e7ef      	b.n	8002a6c <MX_UART4_Init+0x34>
    Error_Handler();
 8002a8c:	f7ff fa12 	bl	8001eb4 <Error_Handler>
 8002a90:	e7f1      	b.n	8002a76 <MX_UART4_Init+0x3e>
    Error_Handler();
 8002a92:	f7ff fa0f 	bl	8001eb4 <Error_Handler>
}
 8002a96:	e7f2      	b.n	8002a7e <MX_UART4_Init+0x46>
 8002a98:	20000d88 	.word	0x20000d88
 8002a9c:	40004c00 	.word	0x40004c00

08002aa0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002aa0:	b508      	push	{r3, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002aa2:	4817      	ldr	r0, [pc, #92]	; (8002b00 <MX_UART5_Init+0x60>)
 8002aa4:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <MX_UART5_Init+0x64>)
 8002aa6:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 8002aa8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002aac:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002ab2:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002ab4:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002ab6:	220c      	movs	r2, #12
 8002ab8:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aba:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002abc:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002abe:	6203      	str	r3, [r0, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ac0:	6243      	str	r3, [r0, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ac2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002ac4:	f005 fab7 	bl	8008036 <HAL_UART_Init>
 8002ac8:	b970      	cbnz	r0, 8002ae8 <MX_UART5_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aca:	2100      	movs	r1, #0
 8002acc:	480c      	ldr	r0, [pc, #48]	; (8002b00 <MX_UART5_Init+0x60>)
 8002ace:	f005 fb2a 	bl	8008126 <HAL_UARTEx_SetTxFifoThreshold>
 8002ad2:	b960      	cbnz	r0, 8002aee <MX_UART5_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	480a      	ldr	r0, [pc, #40]	; (8002b00 <MX_UART5_Init+0x60>)
 8002ad8:	f005 fb4a 	bl	8008170 <HAL_UARTEx_SetRxFifoThreshold>
 8002adc:	b950      	cbnz	r0, 8002af4 <MX_UART5_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002ade:	4808      	ldr	r0, [pc, #32]	; (8002b00 <MX_UART5_Init+0x60>)
 8002ae0:	f005 fb02 	bl	80080e8 <HAL_UARTEx_DisableFifoMode>
 8002ae4:	b948      	cbnz	r0, 8002afa <MX_UART5_Init+0x5a>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002ae6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002ae8:	f7ff f9e4 	bl	8001eb4 <Error_Handler>
 8002aec:	e7ed      	b.n	8002aca <MX_UART5_Init+0x2a>
    Error_Handler();
 8002aee:	f7ff f9e1 	bl	8001eb4 <Error_Handler>
 8002af2:	e7ef      	b.n	8002ad4 <MX_UART5_Init+0x34>
    Error_Handler();
 8002af4:	f7ff f9de 	bl	8001eb4 <Error_Handler>
 8002af8:	e7f1      	b.n	8002ade <MX_UART5_Init+0x3e>
    Error_Handler();
 8002afa:	f7ff f9db 	bl	8001eb4 <Error_Handler>
}
 8002afe:	e7f2      	b.n	8002ae6 <MX_UART5_Init+0x46>
 8002b00:	20000e18 	.word	0x20000e18
 8002b04:	40005000 	.word	0x40005000

08002b08 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b08:	b570      	push	{r4, r5, r6, lr}
 8002b0a:	b0a6      	sub	sp, #152	; 0x98

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	2100      	movs	r1, #0
 8002b10:	a81e      	add	r0, sp, #120	; 0x78
 8002b12:	f008 f9b5 	bl	800ae80 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b16:	2100      	movs	r1, #0
 8002b18:	9118      	str	r1, [sp, #96]	; 0x60
 8002b1a:	9119      	str	r1, [sp, #100]	; 0x64
 8002b1c:	911a      	str	r1, [sp, #104]	; 0x68
 8002b1e:	911b      	str	r1, [sp, #108]	; 0x6c
 8002b20:	911c      	str	r1, [sp, #112]	; 0x70
 8002b22:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b24:	2254      	movs	r2, #84	; 0x54
 8002b26:	a803      	add	r0, sp, #12
 8002b28:	f008 f9aa 	bl	800ae80 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	9303      	str	r3, [sp, #12]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b30:	a803      	add	r0, sp, #12
 8002b32:	f004 f889 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 8002b36:	2800      	cmp	r0, #0
 8002b38:	f040 80d2 	bne.w	8002ce0 <MX_USART1_UART_Init+0x1d8>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002b3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ce8 <MX_USART1_UART_Init+0x1e0>)
 8002b3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b44:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002b46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b48:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002b4c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002b4e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b5a:	f002 0201 	and.w	r2, r2, #1
 8002b5e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8002b60:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b68:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b70:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002b72:	9b00      	ldr	r3, [sp, #0]
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOG);
  /**USART1 GPIO Configuration
  PA10   ------> USART1_RX
  PG9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b78:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b7a:	2602      	movs	r6, #2
 8002b7c:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002b7e:	2400      	movs	r4, #0
 8002b80:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b82:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b84:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002b86:	2507      	movs	r5, #7
 8002b88:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8a:	a918      	add	r1, sp, #96	; 0x60
 8002b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b90:	f005 fbdc 	bl	800834c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b98:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b9a:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002b9c:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b9e:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ba0:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002ba2:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ba4:	a918      	add	r1, sp, #96	; 0x60
 8002ba6:	4851      	ldr	r0, [pc, #324]	; (8002cec <MX_USART1_UART_Init+0x1e4>)
 8002ba8:	f005 fbd0 	bl	800834c <LL_GPIO_Init>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8002bac:	4b50      	ldr	r3, [pc, #320]	; (8002cf0 <MX_USART1_UART_Init+0x1e8>)
 8002bae:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8002bb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bb6:	f042 0218 	orr.w	r2, r2, #24
 8002bba:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8002bbe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002bc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bc4:	f022 0210 	bic.w	r2, r2, #16
 8002bc8:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8002bca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002bcc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002bd0:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8002bd2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002bd4:	f022 0220 	bic.w	r2, r2, #32
 8002bd8:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8002bda:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8002be2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002be4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002be8:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8002bea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002bec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002bf0:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8002bf2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002bf4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002bf8:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8002bfa:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8002bfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c02:	f042 0219 	orr.w	r2, r2, #25
 8002c06:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8002c0a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002c0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c12:	f022 0210 	bic.w	r2, r2, #16
 8002c16:	f042 0210 	orr.w	r2, r2, #16
 8002c1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8002c1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002c22:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8002c2a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002c2e:	f022 0220 	bic.w	r2, r2, #32
 8002c32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8002c36:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8002c42:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002c46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8002c4e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002c52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8002c5a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002c5e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8002c66:	941e      	str	r4, [sp, #120]	; 0x78
  USART_InitStruct.BaudRate = 115200;
 8002c68:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002c6c:	931f      	str	r3, [sp, #124]	; 0x7c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002c6e:	9420      	str	r4, [sp, #128]	; 0x80
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002c70:	9421      	str	r4, [sp, #132]	; 0x84
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002c72:	9422      	str	r4, [sp, #136]	; 0x88
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002c74:	230c      	movs	r3, #12
 8002c76:	9323      	str	r3, [sp, #140]	; 0x8c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002c78:	9424      	str	r4, [sp, #144]	; 0x90
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002c7a:	9425      	str	r4, [sp, #148]	; 0x94
  LL_USART_Init(USART1, &USART_InitStruct);
 8002c7c:	a91e      	add	r1, sp, #120	; 0x78
 8002c7e:	481d      	ldr	r0, [pc, #116]	; (8002cf4 <MX_USART1_UART_Init+0x1ec>)
 8002c80:	f005 fd7a 	bl	8008778 <LL_USART_Init>
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8002c84:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <MX_USART1_UART_Init+0x1f0>)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c86:	e853 2f00 	ldrex	r2, [r3]
 8002c8a:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	e843 2100 	strex	r1, r2, [r3]
 8002c92:	2900      	cmp	r1, #0
 8002c94:	d1f6      	bne.n	8002c84 <MX_USART1_UART_Init+0x17c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c96:	e853 2f00 	ldrex	r2, [r3]
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8002c9a:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9e:	e843 2100 	strex	r1, r2, [r3]
 8002ca2:	2900      	cmp	r1, #0
 8002ca4:	d1f7      	bne.n	8002c96 <MX_USART1_UART_Init+0x18e>
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8002ca6:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <MX_USART1_UART_Init+0x1ec>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002cae:	601a      	str	r2, [r3, #0]
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cbe:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <MX_USART1_UART_Init+0x1ec>)
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002cd0:	d0fa      	beq.n	8002cc8 <MX_USART1_UART_Init+0x1c0>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8002cd2:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <MX_USART1_UART_Init+0x1ec>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002cda:	d0f5      	beq.n	8002cc8 <MX_USART1_UART_Init+0x1c0>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cdc:	b026      	add	sp, #152	; 0x98
 8002cde:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8002ce0:	f7ff f8e8 	bl	8001eb4 <Error_Handler>
 8002ce4:	e72a      	b.n	8002b3c <MX_USART1_UART_Init+0x34>
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	48001800 	.word	0x48001800
 8002cf0:	40020000 	.word	0x40020000
 8002cf4:	40013800 	.word	0x40013800
 8002cf8:	40013808 	.word	0x40013808

08002cfc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002cfc:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cfe:	4817      	ldr	r0, [pc, #92]	; (8002d5c <MX_USART2_UART_Init+0x60>)
 8002d00:	4b17      	ldr	r3, [pc, #92]	; (8002d60 <MX_USART2_UART_Init+0x64>)
 8002d02:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002d04:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002d08:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d0e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d10:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d12:	220c      	movs	r2, #12
 8002d14:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d16:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d18:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d1a:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d1c:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d1e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d20:	f005 f989 	bl	8008036 <HAL_UART_Init>
 8002d24:	b970      	cbnz	r0, 8002d44 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d26:	2100      	movs	r1, #0
 8002d28:	480c      	ldr	r0, [pc, #48]	; (8002d5c <MX_USART2_UART_Init+0x60>)
 8002d2a:	f005 f9fc 	bl	8008126 <HAL_UARTEx_SetTxFifoThreshold>
 8002d2e:	b960      	cbnz	r0, 8002d4a <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d30:	2100      	movs	r1, #0
 8002d32:	480a      	ldr	r0, [pc, #40]	; (8002d5c <MX_USART2_UART_Init+0x60>)
 8002d34:	f005 fa1c 	bl	8008170 <HAL_UARTEx_SetRxFifoThreshold>
 8002d38:	b950      	cbnz	r0, 8002d50 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002d3a:	4808      	ldr	r0, [pc, #32]	; (8002d5c <MX_USART2_UART_Init+0x60>)
 8002d3c:	f005 f9d4 	bl	80080e8 <HAL_UARTEx_DisableFifoMode>
 8002d40:	b948      	cbnz	r0, 8002d56 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d42:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002d44:	f7ff f8b6 	bl	8001eb4 <Error_Handler>
 8002d48:	e7ed      	b.n	8002d26 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8002d4a:	f7ff f8b3 	bl	8001eb4 <Error_Handler>
 8002d4e:	e7ef      	b.n	8002d30 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8002d50:	f7ff f8b0 	bl	8001eb4 <Error_Handler>
 8002d54:	e7f1      	b.n	8002d3a <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8002d56:	f7ff f8ad 	bl	8001eb4 <Error_Handler>
}
 8002d5a:	e7f2      	b.n	8002d42 <MX_USART2_UART_Init+0x46>
 8002d5c:	20000c68 	.word	0x20000c68
 8002d60:	40004400 	.word	0x40004400

08002d64 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d64:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d66:	4817      	ldr	r0, [pc, #92]	; (8002dc4 <MX_USART3_UART_Init+0x60>)
 8002d68:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <MX_USART3_UART_Init+0x64>)
 8002d6a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8002d6c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002d70:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d72:	2300      	movs	r3, #0
 8002d74:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d76:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d78:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d7a:	220c      	movs	r2, #12
 8002d7c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d7e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d80:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d82:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d84:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d86:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d88:	f005 f955 	bl	8008036 <HAL_UART_Init>
 8002d8c:	b970      	cbnz	r0, 8002dac <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d8e:	2100      	movs	r1, #0
 8002d90:	480c      	ldr	r0, [pc, #48]	; (8002dc4 <MX_USART3_UART_Init+0x60>)
 8002d92:	f005 f9c8 	bl	8008126 <HAL_UARTEx_SetTxFifoThreshold>
 8002d96:	b960      	cbnz	r0, 8002db2 <MX_USART3_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d98:	2100      	movs	r1, #0
 8002d9a:	480a      	ldr	r0, [pc, #40]	; (8002dc4 <MX_USART3_UART_Init+0x60>)
 8002d9c:	f005 f9e8 	bl	8008170 <HAL_UARTEx_SetRxFifoThreshold>
 8002da0:	b950      	cbnz	r0, 8002db8 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002da2:	4808      	ldr	r0, [pc, #32]	; (8002dc4 <MX_USART3_UART_Init+0x60>)
 8002da4:	f005 f9a0 	bl	80080e8 <HAL_UARTEx_DisableFifoMode>
 8002da8:	b948      	cbnz	r0, 8002dbe <MX_USART3_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002daa:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002dac:	f7ff f882 	bl	8001eb4 <Error_Handler>
 8002db0:	e7ed      	b.n	8002d8e <MX_USART3_UART_Init+0x2a>
    Error_Handler();
 8002db2:	f7ff f87f 	bl	8001eb4 <Error_Handler>
 8002db6:	e7ef      	b.n	8002d98 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 8002db8:	f7ff f87c 	bl	8001eb4 <Error_Handler>
 8002dbc:	e7f1      	b.n	8002da2 <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 8002dbe:	f7ff f879 	bl	8001eb4 <Error_Handler>
}
 8002dc2:	e7f2      	b.n	8002daa <MX_USART3_UART_Init+0x46>
 8002dc4:	20000cf8 	.word	0x20000cf8
 8002dc8:	40004800 	.word	0x40004800

08002dcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	b0a4      	sub	sp, #144	; 0x90
 8002dd0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	911f      	str	r1, [sp, #124]	; 0x7c
 8002dd6:	9120      	str	r1, [sp, #128]	; 0x80
 8002dd8:	9121      	str	r1, [sp, #132]	; 0x84
 8002dda:	9122      	str	r1, [sp, #136]	; 0x88
 8002ddc:	9123      	str	r1, [sp, #140]	; 0x8c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dde:	2254      	movs	r2, #84	; 0x54
 8002de0:	a80a      	add	r0, sp, #40	; 0x28
 8002de2:	f008 f84d 	bl	800ae80 <memset>
  if(uartHandle->Instance==UART4)
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	4a66      	ldr	r2, [pc, #408]	; (8002f84 <HAL_UART_MspInit+0x1b8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00b      	beq.n	8002e06 <HAL_UART_MspInit+0x3a>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART5)
 8002dee:	4a66      	ldr	r2, [pc, #408]	; (8002f88 <HAL_UART_MspInit+0x1bc>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d033      	beq.n	8002e5c <HAL_UART_MspInit+0x90>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002df4:	4a65      	ldr	r2, [pc, #404]	; (8002f8c <HAL_UART_MspInit+0x1c0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d06f      	beq.n	8002eda <HAL_UART_MspInit+0x10e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8002dfa:	4a65      	ldr	r2, [pc, #404]	; (8002f90 <HAL_UART_MspInit+0x1c4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	f000 8096 	beq.w	8002f2e <HAL_UART_MspInit+0x162>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002e02:	b024      	add	sp, #144	; 0x90
 8002e04:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002e06:	2308      	movs	r3, #8
 8002e08:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e0a:	a80a      	add	r0, sp, #40	; 0x28
 8002e0c:	f003 ff1c 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 8002e10:	bb08      	cbnz	r0, 8002e56 <HAL_UART_MspInit+0x8a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e12:	4b60      	ldr	r3, [pc, #384]	; (8002f94 <HAL_UART_MspInit+0x1c8>)
 8002e14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e16:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002e1a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e1e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002e22:	9201      	str	r2, [sp, #4]
 8002e24:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e28:	f042 0204 	orr.w	r2, r2, #4
 8002e2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	9302      	str	r3, [sp, #8]
 8002e36:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e38:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e3c:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e46:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002e48:	2305      	movs	r3, #5
 8002e4a:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e4c:	a91f      	add	r1, sp, #124	; 0x7c
 8002e4e:	4852      	ldr	r0, [pc, #328]	; (8002f98 <HAL_UART_MspInit+0x1cc>)
 8002e50:	f001 fce0 	bl	8004814 <HAL_GPIO_Init>
 8002e54:	e7d5      	b.n	8002e02 <HAL_UART_MspInit+0x36>
      Error_Handler();
 8002e56:	f7ff f82d 	bl	8001eb4 <Error_Handler>
 8002e5a:	e7da      	b.n	8002e12 <HAL_UART_MspInit+0x46>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e60:	a80a      	add	r0, sp, #40	; 0x28
 8002e62:	f003 fef1 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 8002e66:	2800      	cmp	r0, #0
 8002e68:	d134      	bne.n	8002ed4 <HAL_UART_MspInit+0x108>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002e6a:	4b4a      	ldr	r3, [pc, #296]	; (8002f94 <HAL_UART_MspInit+0x1c8>)
 8002e6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e6e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e72:	659a      	str	r2, [r3, #88]	; 0x58
 8002e74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e76:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e7a:	9203      	str	r2, [sp, #12]
 8002e7c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e80:	f042 0204 	orr.w	r2, r2, #4
 8002e84:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e88:	f002 0204 	and.w	r2, r2, #4
 8002e8c:	9204      	str	r2, [sp, #16]
 8002e8e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e92:	f042 0208 	orr.w	r2, r2, #8
 8002e96:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	9305      	str	r3, [sp, #20]
 8002ea0:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = LIN_TX_Pin;
 8002ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea6:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2602      	movs	r6, #2
 8002eaa:	9620      	str	r6, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2400      	movs	r4, #0
 8002eae:	9421      	str	r4, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb0:	9422      	str	r4, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002eb2:	2505      	movs	r5, #5
 8002eb4:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(LIN_TX_GPIO_Port, &GPIO_InitStruct);
 8002eb6:	a91f      	add	r1, sp, #124	; 0x7c
 8002eb8:	4837      	ldr	r0, [pc, #220]	; (8002f98 <HAL_UART_MspInit+0x1cc>)
 8002eba:	f001 fcab 	bl	8004814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIN_RX_Pin;
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	9620      	str	r6, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	9421      	str	r4, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec6:	9422      	str	r4, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002ec8:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(LIN_RX_GPIO_Port, &GPIO_InitStruct);
 8002eca:	a91f      	add	r1, sp, #124	; 0x7c
 8002ecc:	4833      	ldr	r0, [pc, #204]	; (8002f9c <HAL_UART_MspInit+0x1d0>)
 8002ece:	f001 fca1 	bl	8004814 <HAL_GPIO_Init>
 8002ed2:	e796      	b.n	8002e02 <HAL_UART_MspInit+0x36>
      Error_Handler();
 8002ed4:	f7fe ffee 	bl	8001eb4 <Error_Handler>
 8002ed8:	e7c7      	b.n	8002e6a <HAL_UART_MspInit+0x9e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002eda:	2302      	movs	r3, #2
 8002edc:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ede:	a80a      	add	r0, sp, #40	; 0x28
 8002ee0:	f003 feb2 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 8002ee4:	bb00      	cbnz	r0, 8002f28 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ee6:	4b2b      	ldr	r3, [pc, #172]	; (8002f94 <HAL_UART_MspInit+0x1c8>)
 8002ee8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002eea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002eee:	659a      	str	r2, [r3, #88]	; 0x58
 8002ef0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ef2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002ef6:	9206      	str	r2, [sp, #24]
 8002ef8:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002efc:	f042 0202 	orr.w	r2, r2, #2
 8002f00:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	9307      	str	r3, [sp, #28]
 8002f0a:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002f0c:	2318      	movs	r3, #24
 8002f0e:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f10:	2302      	movs	r3, #2
 8002f12:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f18:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f1a:	2307      	movs	r3, #7
 8002f1c:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f1e:	a91f      	add	r1, sp, #124	; 0x7c
 8002f20:	481f      	ldr	r0, [pc, #124]	; (8002fa0 <HAL_UART_MspInit+0x1d4>)
 8002f22:	f001 fc77 	bl	8004814 <HAL_GPIO_Init>
 8002f26:	e76c      	b.n	8002e02 <HAL_UART_MspInit+0x36>
      Error_Handler();
 8002f28:	f7fe ffc4 	bl	8001eb4 <Error_Handler>
 8002f2c:	e7db      	b.n	8002ee6 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f2e:	2304      	movs	r3, #4
 8002f30:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f32:	a80a      	add	r0, sp, #40	; 0x28
 8002f34:	f003 fe88 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 8002f38:	bb08      	cbnz	r0, 8002f7e <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f3a:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <HAL_UART_MspInit+0x1c8>)
 8002f3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f3e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002f42:	659a      	str	r2, [r3, #88]	; 0x58
 8002f44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f46:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002f4a:	9208      	str	r2, [sp, #32]
 8002f4c:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f50:	f042 0202 	orr.w	r2, r2, #2
 8002f54:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8002f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f64:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f66:	2302      	movs	r3, #2
 8002f68:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6e:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f70:	2307      	movs	r3, #7
 8002f72:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f74:	a91f      	add	r1, sp, #124	; 0x7c
 8002f76:	480a      	ldr	r0, [pc, #40]	; (8002fa0 <HAL_UART_MspInit+0x1d4>)
 8002f78:	f001 fc4c 	bl	8004814 <HAL_GPIO_Init>
}
 8002f7c:	e741      	b.n	8002e02 <HAL_UART_MspInit+0x36>
      Error_Handler();
 8002f7e:	f7fe ff99 	bl	8001eb4 <Error_Handler>
 8002f82:	e7da      	b.n	8002f3a <HAL_UART_MspInit+0x16e>
 8002f84:	40004c00 	.word	0x40004c00
 8002f88:	40005000 	.word	0x40005000
 8002f8c:	40004400 	.word	0x40004400
 8002f90:	40004800 	.word	0x40004800
 8002f94:	40021000 	.word	0x40021000
 8002f98:	48000800 	.word	0x48000800
 8002f9c:	48000c00 	.word	0x48000c00
 8002fa0:	48000400 	.word	0x48000400

08002fa4 <new_guysko>:

	return vel;
}

// function "new_guysko" initializes guysko with its properties
guysko* new_guysko(uint8_t life_points, bool direction, coord* position) {
 8002fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa6:	4606      	mov	r6, r0
 8002fa8:	460f      	mov	r7, r1
 8002faa:	4615      	mov	r5, r2
	guysko* player = malloc(sizeof(guysko));
 8002fac:	200c      	movs	r0, #12
 8002fae:	f007 ff5f 	bl	800ae70 <malloc>
 8002fb2:	4604      	mov	r4, r0

	player->life_points = life_points;
 8002fb4:	7006      	strb	r6, [r0, #0]

	player->frame 			= 0;
 8002fb6:	2600      	movs	r6, #0
 8002fb8:	7046      	strb	r6, [r0, #1]
	player->direction 	= direction;
 8002fba:	7087      	strb	r7, [r0, #2]

	player->position 		= malloc(sizeof(position));
 8002fbc:	2004      	movs	r0, #4
 8002fbe:	f007 ff57 	bl	800ae70 <malloc>
 8002fc2:	6060      	str	r0, [r4, #4]
	player->position->x = position->x;
 8002fc4:	882b      	ldrh	r3, [r5, #0]
 8002fc6:	8003      	strh	r3, [r0, #0]
	player->position->y = position->y;
 8002fc8:	78ab      	ldrb	r3, [r5, #2]
 8002fca:	7083      	strb	r3, [r0, #2]

	player->vel 				= malloc(sizeof(velocity));
 8002fcc:	2004      	movs	r0, #4
 8002fce:	f007 ff4f 	bl	800ae70 <malloc>
 8002fd2:	60a0      	str	r0, [r4, #8]
	player->vel->x 			= 0;
 8002fd4:	8006      	strh	r6, [r0, #0]
	player->vel->y 			= 0;
 8002fd6:	8046      	strh	r6, [r0, #2]
	return player;
}
 8002fd8:	4620      	mov	r0, r4
 8002fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002fdc <draw_guysko>:

void draw_guysko (guysko* player) {
 8002fdc:	b570      	push	{r4, r5, r6, lr}
 8002fde:	4606      	mov	r6, r0
	int index = 0;
	if (player->frame == 0) {
 8002fe0:	7843      	ldrb	r3, [r0, #1]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d034      	beq.n	8003050 <draw_guysko+0x74>
				int place_y = index / 12;
				index++;
				UG_DrawPixel(place_x + draw_startPoint_x, place_y + draw_startPoint_y, (guysko_right_pos0[i] * 256 + guysko_right_pos0[i + 1]));
			}
	}
	player->frame++;
 8002fe6:	7873      	ldrb	r3, [r6, #1]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	7073      	strb	r3, [r6, #1]
	player->frame %= 3;
 8002fee:	4a1a      	ldr	r2, [pc, #104]	; (8003058 <draw_guysko+0x7c>)
 8002ff0:	fba2 1203 	umull	r1, r2, r2, r3
 8002ff4:	f002 01fe 	and.w	r1, r2, #254	; 0xfe
 8002ff8:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	7073      	strb	r3, [r6, #1]
}
 8003000:	bd70      	pop	{r4, r5, r6, pc}
				uint8_t draw_startPoint_x = player->position->x - 12;
 8003002:	6872      	ldr	r2, [r6, #4]
 8003004:	7810      	ldrb	r0, [r2, #0]
 8003006:	f1a0 030c 	sub.w	r3, r0, #12
				uint8_t draw_startPoint_y = player->position->y - 23;
 800300a:	7891      	ldrb	r1, [r2, #2]
 800300c:	3917      	subs	r1, #23
				int place_x = index % 12;
 800300e:	4a13      	ldr	r2, [pc, #76]	; (800305c <draw_guysko+0x80>)
 8003010:	fb82 0205 	smull	r0, r2, r2, r5
 8003014:	17e8      	asrs	r0, r5, #31
 8003016:	ebc0 0062 	rsb	r0, r0, r2, asr #1
 800301a:	4602      	mov	r2, r0
 800301c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003020:	eba5 0080 	sub.w	r0, r5, r0, lsl #2
				index++;
 8003024:	3501      	adds	r5, #1
				UG_DrawPixel(place_x + draw_startPoint_x, place_y + draw_startPoint_y, (guysko_right_pos0[i] * 256 + guysko_right_pos0[i + 1]));
 8003026:	fa50 f083 	uxtab	r0, r0, r3
 800302a:	fa52 f181 	uxtab	r1, r2, r1
 800302e:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <draw_guysko+0x84>)
 8003030:	f813 c004 	ldrb.w	ip, [r3, r4]
 8003034:	1c62      	adds	r2, r4, #1
 8003036:	5c9a      	ldrb	r2, [r3, r2]
 8003038:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 800303c:	b292      	uxth	r2, r2
 800303e:	b209      	sxth	r1, r1
 8003040:	b200      	sxth	r0, r0
 8003042:	f006 fda1 	bl	8009b88 <UG_DrawPixel>
		for (int i = 0; i < GUYSKO_IMG_SIZE; i += 2) {
 8003046:	3402      	adds	r4, #2
 8003048:	f5b4 7f0a 	cmp.w	r4, #552	; 0x228
 800304c:	dbd9      	blt.n	8003002 <draw_guysko+0x26>
 800304e:	e7ca      	b.n	8002fe6 <draw_guysko+0xa>
 8003050:	2400      	movs	r4, #0
	int index = 0;
 8003052:	4625      	mov	r5, r4
 8003054:	e7f8      	b.n	8003048 <draw_guysko+0x6c>
 8003056:	bf00      	nop
 8003058:	aaaaaaab 	.word	0xaaaaaaab
 800305c:	2aaaaaab 	.word	0x2aaaaaab
 8003060:	20000008 	.word	0x20000008

08003064 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003064:	480d      	ldr	r0, [pc, #52]	; (800309c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003066:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003068:	480d      	ldr	r0, [pc, #52]	; (80030a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800306a:	490e      	ldr	r1, [pc, #56]	; (80030a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800306c:	4a0e      	ldr	r2, [pc, #56]	; (80030a8 <LoopForever+0xe>)
  movs r3, #0
 800306e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003070:	e002      	b.n	8003078 <LoopCopyDataInit>

08003072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003076:	3304      	adds	r3, #4

08003078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800307a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800307c:	d3f9      	bcc.n	8003072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800307e:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003080:	4c0b      	ldr	r4, [pc, #44]	; (80030b0 <LoopForever+0x16>)
  movs r3, #0
 8003082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003084:	e001      	b.n	800308a <LoopFillZerobss>

08003086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003088:	3204      	adds	r2, #4

0800308a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800308a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800308c:	d3fb      	bcc.n	8003086 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800308e:	f7ff f9c7 	bl	8002420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003092:	f007 fec9 	bl	800ae28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003096:	f7fe ff49 	bl	8001f2c <main>

0800309a <LoopForever>:

LoopForever:
    b LoopForever
 800309a:	e7fe      	b.n	800309a <LoopForever>
  ldr   r0, =_estack
 800309c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a4:	20000584 	.word	0x20000584
  ldr r2, =_sidata
 80030a8:	08010904 	.word	0x08010904
  ldr r2, =_sbss
 80030ac:	20000584 	.word	0x20000584
  ldr r4, =_ebss
 80030b0:	20002918 	.word	0x20002918

080030b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030b4:	e7fe      	b.n	80030b4 <ADC1_2_IRQHandler>
	...

080030b8 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80030b8:	4b10      	ldr	r3, [pc, #64]	; (80030fc <HAL_InitTick+0x44>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	b90b      	cbnz	r3, 80030c2 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80030be:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80030c0:	4770      	bx	lr
{
 80030c2:	b510      	push	{r4, lr}
 80030c4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80030c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ce:	4a0c      	ldr	r2, [pc, #48]	; (8003100 <HAL_InitTick+0x48>)
 80030d0:	6810      	ldr	r0, [r2, #0]
 80030d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80030d6:	f000 fec1 	bl	8003e5c <HAL_SYSTICK_Config>
 80030da:	b968      	cbnz	r0, 80030f8 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030dc:	2c0f      	cmp	r4, #15
 80030de:	d901      	bls.n	80030e4 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80030e0:	2001      	movs	r0, #1
 80030e2:	e00a      	b.n	80030fa <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030e4:	2200      	movs	r2, #0
 80030e6:	4621      	mov	r1, r4
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030ec:	f000 fe70 	bl	8003dd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030f0:	4b04      	ldr	r3, [pc, #16]	; (8003104 <HAL_InitTick+0x4c>)
 80030f2:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80030f4:	2000      	movs	r0, #0
 80030f6:	e000      	b.n	80030fa <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80030f8:	2001      	movs	r0, #1
}
 80030fa:	bd10      	pop	{r4, pc}
 80030fc:	20000230 	.word	0x20000230
 8003100:	20000004 	.word	0x20000004
 8003104:	20000234 	.word	0x20000234

08003108 <HAL_Init>:
{
 8003108:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800310a:	2003      	movs	r0, #3
 800310c:	f000 fe4e 	bl	8003dac <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003110:	2000      	movs	r0, #0
 8003112:	f7ff ffd1 	bl	80030b8 <HAL_InitTick>
 8003116:	b110      	cbz	r0, 800311e <HAL_Init+0x16>
    status = HAL_ERROR;
 8003118:	2401      	movs	r4, #1
}
 800311a:	4620      	mov	r0, r4
 800311c:	bd10      	pop	{r4, pc}
 800311e:	4604      	mov	r4, r0
    HAL_MspInit();
 8003120:	f7ff f86c 	bl	80021fc <HAL_MspInit>
 8003124:	e7f9      	b.n	800311a <HAL_Init+0x12>
	...

08003128 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003128:	4a03      	ldr	r2, [pc, #12]	; (8003138 <HAL_IncTick+0x10>)
 800312a:	6813      	ldr	r3, [r2, #0]
 800312c:	4903      	ldr	r1, [pc, #12]	; (800313c <HAL_IncTick+0x14>)
 800312e:	6809      	ldr	r1, [r1, #0]
 8003130:	440b      	add	r3, r1
 8003132:	6013      	str	r3, [r2, #0]
}
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000ea8 	.word	0x20000ea8
 800313c:	20000230 	.word	0x20000230

08003140 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003140:	4b01      	ldr	r3, [pc, #4]	; (8003148 <HAL_GetTick+0x8>)
 8003142:	6818      	ldr	r0, [r3, #0]
}
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000ea8 	.word	0x20000ea8

0800314c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800314c:	b538      	push	{r3, r4, r5, lr}
 800314e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003150:	f7ff fff6 	bl	8003140 <HAL_GetTick>
 8003154:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003156:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800315a:	d002      	beq.n	8003162 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <HAL_Delay+0x24>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003162:	f7ff ffed 	bl	8003140 <HAL_GetTick>
 8003166:	1b40      	subs	r0, r0, r5
 8003168:	42a0      	cmp	r0, r4
 800316a:	d3fa      	bcc.n	8003162 <HAL_Delay+0x16>
  {
  }
}
 800316c:	bd38      	pop	{r3, r4, r5, pc}
 800316e:	bf00      	nop
 8003170:	20000230 	.word	0x20000230

08003174 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003174:	b530      	push	{r4, r5, lr}
 8003176:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003178:	2300      	movs	r3, #0
 800317a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800317c:	2800      	cmp	r0, #0
 800317e:	f000 8138 	beq.w	80033f2 <HAL_ADC_Init+0x27e>
 8003182:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003184:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003186:	b313      	cbz	r3, 80031ce <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003188:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8003190:	d005      	beq.n	800319e <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8003198:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800319c:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800319e:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031a0:	6893      	ldr	r3, [r2, #8]
 80031a2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80031a6:	d11f      	bne.n	80031e8 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 80031a8:	6893      	ldr	r3, [r2, #8]
 80031aa:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80031ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b6:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031b8:	4b8f      	ldr	r3, [pc, #572]	; (80033f8 <HAL_ADC_Init+0x284>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	099b      	lsrs	r3, r3, #6
 80031be:	4a8f      	ldr	r2, [pc, #572]	; (80033fc <HAL_ADC_Init+0x288>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	099b      	lsrs	r3, r3, #6
 80031c6:	3301      	adds	r3, #1
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80031cc:	e009      	b.n	80031e2 <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 80031ce:	f7fe f873 	bl	80012b8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80031d2:	2300      	movs	r3, #0
 80031d4:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80031d6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80031da:	e7d5      	b.n	8003188 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80031dc:	9b01      	ldr	r3, [sp, #4]
 80031de:	3b01      	subs	r3, #1
 80031e0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80031e2:	9b01      	ldr	r3, [sp, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f9      	bne.n	80031dc <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031e8:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031ea:	6893      	ldr	r3, [r2, #8]
 80031ec:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80031f0:	d13d      	bne.n	800326e <HAL_ADC_Init+0xfa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80031f4:	f043 0310 	orr.w	r3, r3, #16
 80031f8:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031fa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003202:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003204:	6893      	ldr	r3, [r2, #8]
 8003206:	f013 0304 	ands.w	r3, r3, #4
 800320a:	d000      	beq.n	800320e <HAL_ADC_Init+0x9a>
 800320c:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800320e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003210:	f011 0f10 	tst.w	r1, #16
 8003214:	f040 80e6 	bne.w	80033e4 <HAL_ADC_Init+0x270>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003218:	2b00      	cmp	r3, #0
 800321a:	f040 80e3 	bne.w	80033e4 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800321e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003220:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800322a:	6893      	ldr	r3, [r2, #8]
 800322c:	f013 0f01 	tst.w	r3, #1
 8003230:	d13e      	bne.n	80032b0 <HAL_ADC_Init+0x13c>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003232:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003236:	d01c      	beq.n	8003272 <HAL_ADC_Init+0xfe>
 8003238:	4b71      	ldr	r3, [pc, #452]	; (8003400 <HAL_ADC_Init+0x28c>)
 800323a:	429a      	cmp	r2, r3
 800323c:	d019      	beq.n	8003272 <HAL_ADC_Init+0xfe>
 800323e:	4b71      	ldr	r3, [pc, #452]	; (8003404 <HAL_ADC_Init+0x290>)
 8003240:	6899      	ldr	r1, [r3, #8]
 8003242:	f011 0101 	ands.w	r1, r1, #1
 8003246:	d000      	beq.n	800324a <HAL_ADC_Init+0xd6>
 8003248:	2101      	movs	r1, #1
 800324a:	4b6f      	ldr	r3, [pc, #444]	; (8003408 <HAL_ADC_Init+0x294>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f013 0301 	ands.w	r3, r3, #1
 8003252:	d000      	beq.n	8003256 <HAL_ADC_Init+0xe2>
 8003254:	2301      	movs	r3, #1
 8003256:	430b      	orrs	r3, r1
 8003258:	496c      	ldr	r1, [pc, #432]	; (800340c <HAL_ADC_Init+0x298>)
 800325a:	6889      	ldr	r1, [r1, #8]
 800325c:	f011 0101 	ands.w	r1, r1, #1
 8003260:	d000      	beq.n	8003264 <HAL_ADC_Init+0xf0>
 8003262:	2101      	movs	r1, #1
 8003264:	430b      	orrs	r3, r1
 8003266:	bf0c      	ite	eq
 8003268:	2301      	moveq	r3, #1
 800326a:	2300      	movne	r3, #0
 800326c:	e012      	b.n	8003294 <HAL_ADC_Init+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800326e:	2000      	movs	r0, #0
 8003270:	e7c8      	b.n	8003204 <HAL_ADC_Init+0x90>
 8003272:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f013 0301 	ands.w	r3, r3, #1
 800327c:	d000      	beq.n	8003280 <HAL_ADC_Init+0x10c>
 800327e:	2301      	movs	r3, #1
 8003280:	495f      	ldr	r1, [pc, #380]	; (8003400 <HAL_ADC_Init+0x28c>)
 8003282:	6889      	ldr	r1, [r1, #8]
 8003284:	f011 0101 	ands.w	r1, r1, #1
 8003288:	d000      	beq.n	800328c <HAL_ADC_Init+0x118>
 800328a:	2101      	movs	r1, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800328c:	430b      	orrs	r3, r1
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b163      	cbz	r3, 80032b0 <HAL_ADC_Init+0x13c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003296:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800329a:	d072      	beq.n	8003382 <HAL_ADC_Init+0x20e>
 800329c:	4b58      	ldr	r3, [pc, #352]	; (8003400 <HAL_ADC_Init+0x28c>)
 800329e:	429a      	cmp	r2, r3
 80032a0:	d06d      	beq.n	800337e <HAL_ADC_Init+0x20a>
 80032a2:	495b      	ldr	r1, [pc, #364]	; (8003410 <HAL_ADC_Init+0x29c>)
 80032a4:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80032a6:	688a      	ldr	r2, [r1, #8]
 80032a8:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80032ac:	4313      	orrs	r3, r2
 80032ae:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032b0:	7f62      	ldrb	r2, [r4, #29]
                hadc->Init.Overrun                                                     |
 80032b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032b4:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 80032b8:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 80032ba:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 80032bc:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 80032be:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032c0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032c8:	2a01      	cmp	r2, #1
 80032ca:	d05c      	beq.n	8003386 <HAL_ADC_Init+0x212>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80032ce:	b122      	cbz	r2, 80032da <HAL_ADC_Init+0x166>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032d0:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80032d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80032d6:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032d8:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80032da:	6821      	ldr	r1, [r4, #0]
 80032dc:	68cd      	ldr	r5, [r1, #12]
 80032de:	4a4d      	ldr	r2, [pc, #308]	; (8003414 <HAL_ADC_Init+0x2a0>)
 80032e0:	402a      	ands	r2, r5
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60cb      	str	r3, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80032e6:	6822      	ldr	r2, [r4, #0]
 80032e8:	6913      	ldr	r3, [r2, #16]
 80032ea:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80032ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032f0:	430b      	orrs	r3, r1
 80032f2:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032f4:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032f6:	688b      	ldr	r3, [r1, #8]
 80032f8:	f013 0304 	ands.w	r3, r3, #4
 80032fc:	d000      	beq.n	8003300 <HAL_ADC_Init+0x18c>
 80032fe:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003300:	688a      	ldr	r2, [r1, #8]
 8003302:	f012 0208 	ands.w	r2, r2, #8
 8003306:	d000      	beq.n	800330a <HAL_ADC_Init+0x196>
 8003308:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800330a:	bb4b      	cbnz	r3, 8003360 <HAL_ADC_Init+0x1ec>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800330c:	bb42      	cbnz	r2, 8003360 <HAL_ADC_Init+0x1ec>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800330e:	7f22      	ldrb	r2, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003310:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003314:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003316:	ea43 3282 	orr.w	r2, r3, r2, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800331a:	68cb      	ldr	r3, [r1, #12]
 800331c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003320:	f023 0302 	bic.w	r3, r3, #2
 8003324:	4313      	orrs	r3, r2
 8003326:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003328:	6923      	ldr	r3, [r4, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d030      	beq.n	8003390 <HAL_ADC_Init+0x21c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800332e:	6822      	ldr	r2, [r4, #0]
 8003330:	6913      	ldr	r3, [r2, #16]
 8003332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003336:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003338:	6822      	ldr	r2, [r4, #0]
 800333a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800333e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003342:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003346:	6921      	ldr	r1, [r4, #16]
 8003348:	430b      	orrs	r3, r1
 800334a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800334e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003352:	2b01      	cmp	r3, #1
 8003354:	d02b      	beq.n	80033ae <HAL_ADC_Init+0x23a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003356:	6822      	ldr	r2, [r4, #0]
 8003358:	6913      	ldr	r3, [r2, #16]
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003360:	6963      	ldr	r3, [r4, #20]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d035      	beq.n	80033d2 <HAL_ADC_Init+0x25e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003366:	6822      	ldr	r2, [r4, #0]
 8003368:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800336a:	f023 030f 	bic.w	r3, r3, #15
 800336e:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003370:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003372:	f023 0303 	bic.w	r3, r3, #3
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800337c:	e037      	b.n	80033ee <HAL_ADC_Init+0x27a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800337e:	4926      	ldr	r1, [pc, #152]	; (8003418 <HAL_ADC_Init+0x2a4>)
 8003380:	e790      	b.n	80032a4 <HAL_ADC_Init+0x130>
 8003382:	4925      	ldr	r1, [pc, #148]	; (8003418 <HAL_ADC_Init+0x2a4>)
 8003384:	e78e      	b.n	80032a4 <HAL_ADC_Init+0x130>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003386:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003388:	3a01      	subs	r2, #1
 800338a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800338e:	e79d      	b.n	80032cc <HAL_ADC_Init+0x158>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003390:	6822      	ldr	r2, [r4, #0]
 8003392:	6913      	ldr	r3, [r2, #16]
 8003394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003398:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800339a:	6822      	ldr	r2, [r4, #0]
 800339c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80033a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033a8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80033ac:	e7cf      	b.n	800334e <HAL_ADC_Init+0x1da>
        MODIFY_REG(hadc->Instance->CFGR2,
 80033ae:	6821      	ldr	r1, [r4, #0]
 80033b0:	690b      	ldr	r3, [r1, #16]
 80033b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80033b6:	f023 0304 	bic.w	r3, r3, #4
 80033ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80033bc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80033be:	432a      	orrs	r2, r5
 80033c0:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80033c2:	432a      	orrs	r2, r5
 80033c4:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80033c6:	432a      	orrs	r2, r5
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	610b      	str	r3, [r1, #16]
 80033d0:	e7c6      	b.n	8003360 <HAL_ADC_Init+0x1ec>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033d2:	6821      	ldr	r1, [r4, #0]
 80033d4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80033d6:	f023 030f 	bic.w	r3, r3, #15
 80033da:	6a22      	ldr	r2, [r4, #32]
 80033dc:	3a01      	subs	r2, #1
 80033de:	4313      	orrs	r3, r2
 80033e0:	630b      	str	r3, [r1, #48]	; 0x30
 80033e2:	e7c5      	b.n	8003370 <HAL_ADC_Init+0x1fc>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80033e6:	f043 0310 	orr.w	r3, r3, #16
 80033ea:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033ec:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 80033ee:	b003      	add	sp, #12
 80033f0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80033f2:	2001      	movs	r0, #1
 80033f4:	e7fb      	b.n	80033ee <HAL_ADC_Init+0x27a>
 80033f6:	bf00      	nop
 80033f8:	20000004 	.word	0x20000004
 80033fc:	053e2d63 	.word	0x053e2d63
 8003400:	50000100 	.word	0x50000100
 8003404:	50000400 	.word	0x50000400
 8003408:	50000500 	.word	0x50000500
 800340c:	50000600 	.word	0x50000600
 8003410:	50000700 	.word	0x50000700
 8003414:	fff04007 	.word	0xfff04007
 8003418:	50000300 	.word	0x50000300

0800341c <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800341c:	4770      	bx	lr

0800341e <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800341e:	4770      	bx	lr

08003420 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003420:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003422:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003424:	f7ff fffb 	bl	800341e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003428:	bd08      	pop	{r3, pc}

0800342a <HAL_ADC_ErrorCallback>:
}
 800342a:	4770      	bx	lr

0800342c <ADC_DMAConvCplt>:
{
 800342c:	b508      	push	{r3, lr}
 800342e:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003430:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003432:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003434:	f012 0f50 	tst.w	r2, #80	; 0x50
 8003438:	d130      	bne.n	800349c <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800343a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800343c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003440:	65c3      	str	r3, [r0, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003442:	6803      	ldr	r3, [r0, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	f012 0f08 	tst.w	r2, #8
 800344a:	d014      	beq.n	8003476 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8003452:	d120      	bne.n	8003496 <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800345a:	d11c      	bne.n	8003496 <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800345c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800345e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003462:	65c3      	str	r3, [r0, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003464:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003466:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800346a:	d114      	bne.n	8003496 <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800346c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	65c3      	str	r3, [r0, #92]	; 0x5c
 8003474:	e00f      	b.n	8003496 <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f013 0f02 	tst.w	r3, #2
 800347c:	d10b      	bne.n	8003496 <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800347e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003484:	65c3      	str	r3, [r0, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003486:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003488:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800348c:	d103      	bne.n	8003496 <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800348e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8003496:	f7ff ffc1 	bl	800341c <HAL_ADC_ConvCpltCallback>
}
 800349a:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800349c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800349e:	f012 0f10 	tst.w	r2, #16
 80034a2:	d104      	bne.n	80034ae <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034a4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80034a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034a8:	4618      	mov	r0, r3
 80034aa:	4790      	blx	r2
}
 80034ac:	e7f5      	b.n	800349a <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 80034ae:	f7ff ffbc 	bl	800342a <HAL_ADC_ErrorCallback>
 80034b2:	e7f2      	b.n	800349a <ADC_DMAConvCplt+0x6e>

080034b4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80034b4:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034b6:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034b8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80034ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034be:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034c0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80034c2:	f043 0304 	orr.w	r3, r3, #4
 80034c6:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034c8:	f7ff ffaf 	bl	800342a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034cc:	bd08      	pop	{r3, pc}
	...

080034d0 <HAL_ADC_ConfigChannel>:
{
 80034d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034d2:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80034d4:	2200      	movs	r2, #0
 80034d6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80034d8:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 80034dc:	2a01      	cmp	r2, #1
 80034de:	f000 8284 	beq.w	80039ea <HAL_ADC_ConfigChannel+0x51a>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2201      	movs	r2, #1
 80034e6:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034ea:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034ec:	68a8      	ldr	r0, [r5, #8]
 80034ee:	f010 0f04 	tst.w	r0, #4
 80034f2:	d009      	beq.n	8003508 <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034f6:	f042 0220 	orr.w	r2, r2, #32
 80034fa:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80034fc:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8003504:	b003      	add	sp, #12
 8003506:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003508:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800350a:	3530      	adds	r5, #48	; 0x30
 800350c:	0a22      	lsrs	r2, r4, #8
 800350e:	0092      	lsls	r2, r2, #2
 8003510:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8003514:	58a8      	ldr	r0, [r5, r2]
 8003516:	f004 0e1f 	and.w	lr, r4, #31
 800351a:	241f      	movs	r4, #31
 800351c:	fa04 f40e 	lsl.w	r4, r4, lr
 8003520:	ea20 0004 	bic.w	r0, r0, r4
 8003524:	680c      	ldr	r4, [r1, #0]
 8003526:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 800352a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800352e:	ea40 000c 	orr.w	r0, r0, ip
 8003532:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003534:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003536:	6882      	ldr	r2, [r0, #8]
 8003538:	f012 0204 	ands.w	r2, r2, #4
 800353c:	d000      	beq.n	8003540 <HAL_ADC_ConfigChannel+0x70>
 800353e:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003540:	6884      	ldr	r4, [r0, #8]
 8003542:	f014 0408 	ands.w	r4, r4, #8
 8003546:	d000      	beq.n	800354a <HAL_ADC_ConfigChannel+0x7a>
 8003548:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800354a:	2a00      	cmp	r2, #0
 800354c:	d150      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x120>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800354e:	2c00      	cmp	r4, #0
 8003550:	d14e      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x120>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003552:	688f      	ldr	r7, [r1, #8]
 8003554:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 8003558:	f000 8086 	beq.w	8003668 <HAL_ADC_ConfigChannel+0x198>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800355c:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800355e:	3014      	adds	r0, #20
 8003560:	0e72      	lsrs	r2, r6, #25
 8003562:	0092      	lsls	r2, r2, #2
 8003564:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8003568:	5885      	ldr	r5, [r0, r2]
 800356a:	f3c6 5e04 	ubfx	lr, r6, #20, #5
 800356e:	f04f 0c07 	mov.w	ip, #7
 8003572:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003576:	ea25 0c0c 	bic.w	ip, r5, ip
 800357a:	fa07 f50e 	lsl.w	r5, r7, lr
 800357e:	ea4c 0505 	orr.w	r5, ip, r5
 8003582:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003584:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003586:	6942      	ldr	r2, [r0, #20]
 8003588:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800358c:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800358e:	694d      	ldr	r5, [r1, #20]
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	68c2      	ldr	r2, [r0, #12]
 8003594:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003598:	0052      	lsls	r2, r2, #1
 800359a:	fa05 f202 	lsl.w	r2, r5, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800359e:	690e      	ldr	r6, [r1, #16]
 80035a0:	2e04      	cmp	r6, #4
 80035a2:	d079      	beq.n	8003698 <HAL_ADC_ConfigChannel+0x1c8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035a4:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 80035a6:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80035aa:	4dae      	ldr	r5, [pc, #696]	; (8003864 <HAL_ADC_ConfigChannel+0x394>)
 80035ac:	403d      	ands	r5, r7
 80035ae:	680f      	ldr	r7, [r1, #0]
 80035b0:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 80035b4:	433a      	orrs	r2, r7
 80035b6:	4315      	orrs	r5, r2
 80035b8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80035bc:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	690e      	ldr	r6, [r1, #16]
 80035c4:	6988      	ldr	r0, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035c6:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 80035c8:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 80035cc:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 80035d0:	4328      	orrs	r0, r5
 80035d2:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	690d      	ldr	r5, [r1, #16]
 80035da:	7f08      	ldrb	r0, [r1, #28]
 80035dc:	2801      	cmp	r0, #1
 80035de:	d058      	beq.n	8003692 <HAL_ADC_ConfigChannel+0x1c2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035e0:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 80035e2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80035e6:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 80035ea:	4304      	orrs	r4, r0
 80035ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035f0:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035f2:	6890      	ldr	r0, [r2, #8]
 80035f4:	f010 0f01 	tst.w	r0, #1
 80035f8:	d112      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x150>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80035fa:	6808      	ldr	r0, [r1, #0]
 80035fc:	68cd      	ldr	r5, [r1, #12]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80035fe:	4c9a      	ldr	r4, [pc, #616]	; (8003868 <HAL_ADC_ConfigChannel+0x398>)
 8003600:	42a5      	cmp	r5, r4
 8003602:	f000 80b1 	beq.w	8003768 <HAL_ADC_ConfigChannel+0x298>
    CLEAR_BIT(ADCx->DIFSEL,
 8003606:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 800360a:	f3c0 0012 	ubfx	r0, r0, #0, #19
 800360e:	ea24 0000 	bic.w	r0, r4, r0
 8003612:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003616:	68c8      	ldr	r0, [r1, #12]
 8003618:	4a93      	ldr	r2, [pc, #588]	; (8003868 <HAL_ADC_ConfigChannel+0x398>)
 800361a:	4290      	cmp	r0, r2
 800361c:	f000 80ac 	beq.w	8003778 <HAL_ADC_ConfigChannel+0x2a8>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003620:	680a      	ldr	r2, [r1, #0]
 8003622:	4992      	ldr	r1, [pc, #584]	; (800386c <HAL_ADC_ConfigChannel+0x39c>)
 8003624:	420a      	tst	r2, r1
 8003626:	f000 81da 	beq.w	80039de <HAL_ADC_ConfigChannel+0x50e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800362a:	6819      	ldr	r1, [r3, #0]
 800362c:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003630:	f000 8173 	beq.w	800391a <HAL_ADC_ConfigChannel+0x44a>
 8003634:	488e      	ldr	r0, [pc, #568]	; (8003870 <HAL_ADC_ConfigChannel+0x3a0>)
 8003636:	4281      	cmp	r1, r0
 8003638:	f000 816c 	beq.w	8003914 <HAL_ADC_ConfigChannel+0x444>
 800363c:	488d      	ldr	r0, [pc, #564]	; (8003874 <HAL_ADC_ConfigChannel+0x3a4>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800363e:	6880      	ldr	r0, [r0, #8]
 8003640:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003644:	4d8c      	ldr	r5, [pc, #560]	; (8003878 <HAL_ADC_ConfigChannel+0x3a8>)
 8003646:	42aa      	cmp	r2, r5
 8003648:	f000 8169 	beq.w	800391e <HAL_ADC_ConfigChannel+0x44e>
 800364c:	4d8b      	ldr	r5, [pc, #556]	; (800387c <HAL_ADC_ConfigChannel+0x3ac>)
 800364e:	42aa      	cmp	r2, r5
 8003650:	f000 8165 	beq.w	800391e <HAL_ADC_ConfigChannel+0x44e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003654:	4d8a      	ldr	r5, [pc, #552]	; (8003880 <HAL_ADC_ConfigChannel+0x3b0>)
 8003656:	42aa      	cmp	r2, r5
 8003658:	f000 8194 	beq.w	8003984 <HAL_ADC_ConfigChannel+0x4b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800365c:	4d89      	ldr	r5, [pc, #548]	; (8003884 <HAL_ADC_ConfigChannel+0x3b4>)
 800365e:	42aa      	cmp	r2, r5
 8003660:	f000 81a8 	beq.w	80039b4 <HAL_ADC_ConfigChannel+0x4e4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003664:	2000      	movs	r0, #0
 8003666:	e74a      	b.n	80034fe <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003668:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800366a:	3014      	adds	r0, #20
 800366c:	0e6a      	lsrs	r2, r5, #25
 800366e:	0092      	lsls	r2, r2, #2
 8003670:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8003674:	5886      	ldr	r6, [r0, r2]
 8003676:	f3c5 5504 	ubfx	r5, r5, #20, #5
 800367a:	2707      	movs	r7, #7
 800367c:	fa07 f505 	lsl.w	r5, r7, r5
 8003680:	ea26 0505 	bic.w	r5, r6, r5
 8003684:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003686:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003688:	6942      	ldr	r2, [r0, #20]
 800368a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800368e:	6142      	str	r2, [r0, #20]
}
 8003690:	e77d      	b.n	800358e <HAL_ADC_ConfigChannel+0xbe>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003692:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8003696:	e7a3      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x110>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003698:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800369a:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800369c:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036a0:	680a      	ldr	r2, [r1, #0]
 80036a2:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80036a6:	bb85      	cbnz	r5, 800370a <HAL_ADC_ConfigChannel+0x23a>
 80036a8:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036ac:	4294      	cmp	r4, r2
 80036ae:	d034      	beq.n	800371a <HAL_ADC_ConfigChannel+0x24a>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036b0:	681c      	ldr	r4, [r3, #0]
 80036b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036b4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80036b6:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036ba:	680a      	ldr	r2, [r1, #0]
 80036bc:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80036c0:	bb85      	cbnz	r5, 8003724 <HAL_ADC_ConfigChannel+0x254>
 80036c2:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036c6:	4290      	cmp	r0, r2
 80036c8:	d034      	beq.n	8003734 <HAL_ADC_ConfigChannel+0x264>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036ca:	681c      	ldr	r4, [r3, #0]
 80036cc:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80036ce:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80036d0:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036d4:	680a      	ldr	r2, [r1, #0]
 80036d6:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80036da:	bb85      	cbnz	r5, 800373e <HAL_ADC_ConfigChannel+0x26e>
 80036dc:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036e0:	4290      	cmp	r0, r2
 80036e2:	d034      	beq.n	800374e <HAL_ADC_ConfigChannel+0x27e>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036e4:	681c      	ldr	r4, [r3, #0]
 80036e6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80036e8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80036ea:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036ee:	680a      	ldr	r2, [r1, #0]
 80036f0:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80036f4:	bb85      	cbnz	r5, 8003758 <HAL_ADC_ConfigChannel+0x288>
 80036f6:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036fa:	4290      	cmp	r0, r2
 80036fc:	f47f af78 	bne.w	80035f0 <HAL_ADC_ConfigChannel+0x120>
  MODIFY_REG(*preg,
 8003700:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003702:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003706:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 8003708:	e772      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x120>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800370e:	b112      	cbz	r2, 8003716 <HAL_ADC_ConfigChannel+0x246>
  return __builtin_clz(value);
 8003710:	fab2 f282 	clz	r2, r2
 8003714:	e7ca      	b.n	80036ac <HAL_ADC_ConfigChannel+0x1dc>
    return 32U;
 8003716:	2220      	movs	r2, #32
 8003718:	e7c8      	b.n	80036ac <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(*preg,
 800371a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800371c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003720:	6602      	str	r2, [r0, #96]	; 0x60
}
 8003722:	e7c5      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003728:	b112      	cbz	r2, 8003730 <HAL_ADC_ConfigChannel+0x260>
  return __builtin_clz(value);
 800372a:	fab2 f282 	clz	r2, r2
 800372e:	e7ca      	b.n	80036c6 <HAL_ADC_ConfigChannel+0x1f6>
    return 32U;
 8003730:	2220      	movs	r2, #32
 8003732:	e7c8      	b.n	80036c6 <HAL_ADC_ConfigChannel+0x1f6>
  MODIFY_REG(*preg,
 8003734:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003736:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800373a:	6662      	str	r2, [r4, #100]	; 0x64
}
 800373c:	e7c5      	b.n	80036ca <HAL_ADC_ConfigChannel+0x1fa>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003742:	b112      	cbz	r2, 800374a <HAL_ADC_ConfigChannel+0x27a>
  return __builtin_clz(value);
 8003744:	fab2 f282 	clz	r2, r2
 8003748:	e7ca      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x210>
    return 32U;
 800374a:	2220      	movs	r2, #32
 800374c:	e7c8      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x210>
  MODIFY_REG(*preg,
 800374e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8003750:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003754:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8003756:	e7c5      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800375c:	b112      	cbz	r2, 8003764 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 800375e:	fab2 f282 	clz	r2, r2
 8003762:	e7ca      	b.n	80036fa <HAL_ADC_ConfigChannel+0x22a>
    return 32U;
 8003764:	2220      	movs	r2, #32
 8003766:	e7c8      	b.n	80036fa <HAL_ADC_ConfigChannel+0x22a>
    SET_BIT(ADCx->DIFSEL,
 8003768:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 800376c:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8003770:	4320      	orrs	r0, r4
 8003772:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 8003776:	e74e      	b.n	8003616 <HAL_ADC_ConfigChannel+0x146>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003778:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800377a:	680a      	ldr	r2, [r1, #0]
 800377c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003780:	2d00      	cmp	r5, #0
 8003782:	d138      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x326>
 8003784:	0e90      	lsrs	r0, r2, #26
 8003786:	3001      	adds	r0, #1
 8003788:	f000 001f 	and.w	r0, r0, #31
 800378c:	2809      	cmp	r0, #9
 800378e:	bf8c      	ite	hi
 8003790:	2000      	movhi	r0, #0
 8003792:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003794:	2800      	cmp	r0, #0
 8003796:	d077      	beq.n	8003888 <HAL_ADC_ConfigChannel+0x3b8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003798:	2d00      	cmp	r5, #0
 800379a:	d13b      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x344>
 800379c:	0e90      	lsrs	r0, r2, #26
 800379e:	3001      	adds	r0, #1
 80037a0:	0680      	lsls	r0, r0, #26
 80037a2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80037a6:	2d00      	cmp	r5, #0
 80037a8:	d140      	bne.n	800382c <HAL_ADC_ConfigChannel+0x35c>
 80037aa:	0e96      	lsrs	r6, r2, #26
 80037ac:	3601      	adds	r6, #1
 80037ae:	f006 071f 	and.w	r7, r6, #31
 80037b2:	2601      	movs	r6, #1
 80037b4:	40be      	lsls	r6, r7
 80037b6:	4330      	orrs	r0, r6
 80037b8:	2d00      	cmp	r5, #0
 80037ba:	d145      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x378>
 80037bc:	0e92      	lsrs	r2, r2, #26
 80037be:	3201      	adds	r2, #1
 80037c0:	f002 021f 	and.w	r2, r2, #31
 80037c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80037c8:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037ca:	4302      	orrs	r2, r0
 80037cc:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037ce:	f104 0614 	add.w	r6, r4, #20
 80037d2:	0e55      	lsrs	r5, r2, #25
 80037d4:	00ad      	lsls	r5, r5, #2
 80037d6:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 80037da:	5974      	ldr	r4, [r6, r5]
 80037dc:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80037e0:	f04f 0c07 	mov.w	ip, #7
 80037e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80037e8:	ea24 0c0c 	bic.w	ip, r4, ip
 80037ec:	4090      	lsls	r0, r2
 80037ee:	ea4c 0000 	orr.w	r0, ip, r0
 80037f2:	5170      	str	r0, [r6, r5]
}
 80037f4:	e714      	b.n	8003620 <HAL_ADC_ConfigChannel+0x150>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80037fa:	b148      	cbz	r0, 8003810 <HAL_ADC_ConfigChannel+0x340>
  return __builtin_clz(value);
 80037fc:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003800:	3001      	adds	r0, #1
 8003802:	f000 001f 	and.w	r0, r0, #31
 8003806:	2809      	cmp	r0, #9
 8003808:	bf8c      	ite	hi
 800380a:	2000      	movhi	r0, #0
 800380c:	2001      	movls	r0, #1
 800380e:	e7c1      	b.n	8003794 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8003810:	2020      	movs	r0, #32
 8003812:	e7f5      	b.n	8003800 <HAL_ADC_ConfigChannel+0x330>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003818:	b130      	cbz	r0, 8003828 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800381a:	fab0 f080 	clz	r0, r0
 800381e:	3001      	adds	r0, #1
 8003820:	0680      	lsls	r0, r0, #26
 8003822:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003826:	e7be      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x2d6>
    return 32U;
 8003828:	2020      	movs	r0, #32
 800382a:	e7f8      	b.n	800381e <HAL_ADC_ConfigChannel+0x34e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8003830:	b146      	cbz	r6, 8003844 <HAL_ADC_ConfigChannel+0x374>
  return __builtin_clz(value);
 8003832:	fab6 f686 	clz	r6, r6
 8003836:	3601      	adds	r6, #1
 8003838:	f006 061f 	and.w	r6, r6, #31
 800383c:	2701      	movs	r7, #1
 800383e:	fa07 f606 	lsl.w	r6, r7, r6
 8003842:	e7b8      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x2e6>
    return 32U;
 8003844:	2620      	movs	r6, #32
 8003846:	e7f6      	b.n	8003836 <HAL_ADC_ConfigChannel+0x366>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800384c:	b142      	cbz	r2, 8003860 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800384e:	fab2 f282 	clz	r2, r2
 8003852:	3201      	adds	r2, #1
 8003854:	f002 021f 	and.w	r2, r2, #31
 8003858:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800385c:	0512      	lsls	r2, r2, #20
 800385e:	e7b4      	b.n	80037ca <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003860:	2220      	movs	r2, #32
 8003862:	e7f6      	b.n	8003852 <HAL_ADC_ConfigChannel+0x382>
 8003864:	03fff000 	.word	0x03fff000
 8003868:	407f0000 	.word	0x407f0000
 800386c:	80080000 	.word	0x80080000
 8003870:	50000100 	.word	0x50000100
 8003874:	50000700 	.word	0x50000700
 8003878:	c3210000 	.word	0xc3210000
 800387c:	90c00010 	.word	0x90c00010
 8003880:	c7520000 	.word	0xc7520000
 8003884:	cb840000 	.word	0xcb840000
 8003888:	b9cd      	cbnz	r5, 80038be <HAL_ADC_ConfigChannel+0x3ee>
 800388a:	0e90      	lsrs	r0, r2, #26
 800388c:	3001      	adds	r0, #1
 800388e:	0680      	lsls	r0, r0, #26
 8003890:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003894:	b9fd      	cbnz	r5, 80038d6 <HAL_ADC_ConfigChannel+0x406>
 8003896:	0e96      	lsrs	r6, r2, #26
 8003898:	3601      	adds	r6, #1
 800389a:	f006 071f 	and.w	r7, r6, #31
 800389e:	2601      	movs	r6, #1
 80038a0:	40be      	lsls	r6, r7
 80038a2:	4330      	orrs	r0, r6
 80038a4:	bb2d      	cbnz	r5, 80038f2 <HAL_ADC_ConfigChannel+0x422>
 80038a6:	0e92      	lsrs	r2, r2, #26
 80038a8:	3201      	adds	r2, #1
 80038aa:	f002 021f 	and.w	r2, r2, #31
 80038ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80038b2:	3a1e      	subs	r2, #30
 80038b4:	0512      	lsls	r2, r2, #20
 80038b6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038ba:	4302      	orrs	r2, r0
 80038bc:	e786      	b.n	80037cc <HAL_ADC_ConfigChannel+0x2fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038be:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80038c2:	b130      	cbz	r0, 80038d2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80038c4:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038c8:	3001      	adds	r0, #1
 80038ca:	0680      	lsls	r0, r0, #26
 80038cc:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80038d0:	e7e0      	b.n	8003894 <HAL_ADC_ConfigChannel+0x3c4>
    return 32U;
 80038d2:	2020      	movs	r0, #32
 80038d4:	e7f8      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80038da:	b146      	cbz	r6, 80038ee <HAL_ADC_ConfigChannel+0x41e>
  return __builtin_clz(value);
 80038dc:	fab6 f686 	clz	r6, r6
 80038e0:	3601      	adds	r6, #1
 80038e2:	f006 061f 	and.w	r6, r6, #31
 80038e6:	2701      	movs	r7, #1
 80038e8:	fa07 f606 	lsl.w	r6, r7, r6
 80038ec:	e7d9      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x3d2>
    return 32U;
 80038ee:	2620      	movs	r6, #32
 80038f0:	e7f6      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x410>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80038f6:	b15a      	cbz	r2, 8003910 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 80038f8:	fab2 f282 	clz	r2, r2
 80038fc:	3201      	adds	r2, #1
 80038fe:	f002 021f 	and.w	r2, r2, #31
 8003902:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003906:	3a1e      	subs	r2, #30
 8003908:	0512      	lsls	r2, r2, #20
 800390a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800390e:	e7d4      	b.n	80038ba <HAL_ADC_ConfigChannel+0x3ea>
    return 32U;
 8003910:	2220      	movs	r2, #32
 8003912:	e7f3      	b.n	80038fc <HAL_ADC_ConfigChannel+0x42c>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003914:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8003918:	e691      	b.n	800363e <HAL_ADC_ConfigChannel+0x16e>
 800391a:	4835      	ldr	r0, [pc, #212]	; (80039f0 <HAL_ADC_ConfigChannel+0x520>)
 800391c:	e68f      	b.n	800363e <HAL_ADC_ConfigChannel+0x16e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800391e:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8003922:	f47f ae97 	bne.w	8003654 <HAL_ADC_ConfigChannel+0x184>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003926:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800392a:	d004      	beq.n	8003936 <HAL_ADC_ConfigChannel+0x466>
 800392c:	4a31      	ldr	r2, [pc, #196]	; (80039f4 <HAL_ADC_ConfigChannel+0x524>)
 800392e:	4291      	cmp	r1, r2
 8003930:	d001      	beq.n	8003936 <HAL_ADC_ConfigChannel+0x466>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003932:	2000      	movs	r0, #0
 8003934:	e5e3      	b.n	80034fe <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003936:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800393a:	d019      	beq.n	8003970 <HAL_ADC_ConfigChannel+0x4a0>
 800393c:	4a2e      	ldr	r2, [pc, #184]	; (80039f8 <HAL_ADC_ConfigChannel+0x528>)
 800393e:	4291      	cmp	r1, r2
 8003940:	d014      	beq.n	800396c <HAL_ADC_ConfigChannel+0x49c>
 8003942:	492e      	ldr	r1, [pc, #184]	; (80039fc <HAL_ADC_ConfigChannel+0x52c>)
 8003944:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003948:	688a      	ldr	r2, [r1, #8]
 800394a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800394e:	4314      	orrs	r4, r2
 8003950:	608c      	str	r4, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003952:	4a2b      	ldr	r2, [pc, #172]	; (8003a00 <HAL_ADC_ConfigChannel+0x530>)
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	0992      	lsrs	r2, r2, #6
 8003958:	492a      	ldr	r1, [pc, #168]	; (8003a04 <HAL_ADC_ConfigChannel+0x534>)
 800395a:	fba1 1202 	umull	r1, r2, r1, r2
 800395e:	0992      	lsrs	r2, r2, #6
 8003960:	3201      	adds	r2, #1
 8003962:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003966:	0092      	lsls	r2, r2, #2
 8003968:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800396a:	e006      	b.n	800397a <HAL_ADC_ConfigChannel+0x4aa>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800396c:	4920      	ldr	r1, [pc, #128]	; (80039f0 <HAL_ADC_ConfigChannel+0x520>)
 800396e:	e7e9      	b.n	8003944 <HAL_ADC_ConfigChannel+0x474>
 8003970:	491f      	ldr	r1, [pc, #124]	; (80039f0 <HAL_ADC_ConfigChannel+0x520>)
 8003972:	e7e7      	b.n	8003944 <HAL_ADC_ConfigChannel+0x474>
            wait_loop_index--;
 8003974:	9a01      	ldr	r2, [sp, #4]
 8003976:	3a01      	subs	r2, #1
 8003978:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800397a:	9a01      	ldr	r2, [sp, #4]
 800397c:	2a00      	cmp	r2, #0
 800397e:	d1f9      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x4a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003980:	2000      	movs	r0, #0
 8003982:	e5bc      	b.n	80034fe <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003984:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8003988:	f47f ae68 	bne.w	800365c <HAL_ADC_ConfigChannel+0x18c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800398c:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003990:	d00e      	beq.n	80039b0 <HAL_ADC_ConfigChannel+0x4e0>
 8003992:	4a19      	ldr	r2, [pc, #100]	; (80039f8 <HAL_ADC_ConfigChannel+0x528>)
 8003994:	4291      	cmp	r1, r2
 8003996:	d009      	beq.n	80039ac <HAL_ADC_ConfigChannel+0x4dc>
 8003998:	4918      	ldr	r1, [pc, #96]	; (80039fc <HAL_ADC_ConfigChannel+0x52c>)
 800399a:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 800399e:	688a      	ldr	r2, [r1, #8]
 80039a0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80039a4:	4314      	orrs	r4, r2
 80039a6:	608c      	str	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039a8:	2000      	movs	r0, #0
}
 80039aa:	e5a8      	b.n	80034fe <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039ac:	4910      	ldr	r1, [pc, #64]	; (80039f0 <HAL_ADC_ConfigChannel+0x520>)
 80039ae:	e7f4      	b.n	800399a <HAL_ADC_ConfigChannel+0x4ca>
 80039b0:	490f      	ldr	r1, [pc, #60]	; (80039f0 <HAL_ADC_ConfigChannel+0x520>)
 80039b2:	e7f2      	b.n	800399a <HAL_ADC_ConfigChannel+0x4ca>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039b4:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80039b8:	d113      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x512>
        if (ADC_VREFINT_INSTANCE(hadc))
 80039ba:	4a0f      	ldr	r2, [pc, #60]	; (80039f8 <HAL_ADC_ConfigChannel+0x528>)
 80039bc:	4291      	cmp	r1, r2
 80039be:	d012      	beq.n	80039e6 <HAL_ADC_ConfigChannel+0x516>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039c0:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80039c4:	d009      	beq.n	80039da <HAL_ADC_ConfigChannel+0x50a>
 80039c6:	480d      	ldr	r0, [pc, #52]	; (80039fc <HAL_ADC_ConfigChannel+0x52c>)
 80039c8:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80039cc:	6881      	ldr	r1, [r0, #8]
 80039ce:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80039d2:	430a      	orrs	r2, r1
 80039d4:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039d6:	2000      	movs	r0, #0
}
 80039d8:	e591      	b.n	80034fe <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039da:	4805      	ldr	r0, [pc, #20]	; (80039f0 <HAL_ADC_ConfigChannel+0x520>)
 80039dc:	e7f4      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x4f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039de:	2000      	movs	r0, #0
 80039e0:	e58d      	b.n	80034fe <HAL_ADC_ConfigChannel+0x2e>
 80039e2:	2000      	movs	r0, #0
 80039e4:	e58b      	b.n	80034fe <HAL_ADC_ConfigChannel+0x2e>
 80039e6:	2000      	movs	r0, #0
 80039e8:	e589      	b.n	80034fe <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 80039ea:	2002      	movs	r0, #2
 80039ec:	e58a      	b.n	8003504 <HAL_ADC_ConfigChannel+0x34>
 80039ee:	bf00      	nop
 80039f0:	50000300 	.word	0x50000300
 80039f4:	50000600 	.word	0x50000600
 80039f8:	50000100 	.word	0x50000100
 80039fc:	50000700 	.word	0x50000700
 8003a00:	20000004 	.word	0x20000004
 8003a04:	053e2d63 	.word	0x053e2d63

08003a08 <ADC_Enable>:
{
 8003a08:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a0a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	f012 0f01 	tst.w	r2, #1
 8003a12:	d140      	bne.n	8003a96 <ADC_Enable+0x8e>
 8003a14:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a16:	6899      	ldr	r1, [r3, #8]
 8003a18:	4a20      	ldr	r2, [pc, #128]	; (8003a9c <ADC_Enable+0x94>)
 8003a1a:	4211      	tst	r1, r2
 8003a1c:	d009      	beq.n	8003a32 <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003a20:	f043 0310 	orr.w	r3, r3, #16
 8003a24:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a26:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 8003a2e:	2001      	movs	r0, #1
 8003a30:	e032      	b.n	8003a98 <ADC_Enable+0x90>
  MODIFY_REG(ADCx->CR,
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a38:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003a3c:	f042 0201 	orr.w	r2, r2, #1
 8003a40:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003a42:	f7ff fb7d 	bl	8003140 <HAL_GetTick>
 8003a46:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	f012 0f01 	tst.w	r2, #1
 8003a50:	d11f      	bne.n	8003a92 <ADC_Enable+0x8a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	f012 0f01 	tst.w	r2, #1
 8003a58:	d107      	bne.n	8003a6a <ADC_Enable+0x62>
  MODIFY_REG(ADCx->CR,
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a60:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003a64:	f042 0201 	orr.w	r2, r2, #1
 8003a68:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a6a:	f7ff fb69 	bl	8003140 <HAL_GetTick>
 8003a6e:	1b43      	subs	r3, r0, r5
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d9e9      	bls.n	8003a48 <ADC_Enable+0x40>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f013 0f01 	tst.w	r3, #1
 8003a7c:	d1e4      	bne.n	8003a48 <ADC_Enable+0x40>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a7e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003a80:	f043 0310 	orr.w	r3, r3, #16
 8003a84:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a86:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8003a8e:	2001      	movs	r0, #1
 8003a90:	e002      	b.n	8003a98 <ADC_Enable+0x90>
  return HAL_OK;
 8003a92:	2000      	movs	r0, #0
 8003a94:	e000      	b.n	8003a98 <ADC_Enable+0x90>
 8003a96:	2000      	movs	r0, #0
}
 8003a98:	bd38      	pop	{r3, r4, r5, pc}
 8003a9a:	bf00      	nop
 8003a9c:	8000003f 	.word	0x8000003f

08003aa0 <HAL_ADC_Start_DMA>:
{
 8003aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	460f      	mov	r7, r1
 8003aa8:	4690      	mov	r8, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003aaa:	6800      	ldr	r0, [r0, #0]
 8003aac:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003ab0:	d021      	beq.n	8003af6 <HAL_ADC_Start_DMA+0x56>
 8003ab2:	4b42      	ldr	r3, [pc, #264]	; (8003bbc <HAL_ADC_Start_DMA+0x11c>)
 8003ab4:	4298      	cmp	r0, r3
 8003ab6:	d01b      	beq.n	8003af0 <HAL_ADC_Start_DMA+0x50>
 8003ab8:	4b41      	ldr	r3, [pc, #260]	; (8003bc0 <HAL_ADC_Start_DMA+0x120>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003aba:	689e      	ldr	r6, [r3, #8]
 8003abc:	f006 061f 	and.w	r6, r6, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ac0:	6885      	ldr	r5, [r0, #8]
 8003ac2:	f015 0f04 	tst.w	r5, #4
 8003ac6:	d174      	bne.n	8003bb2 <HAL_ADC_Start_DMA+0x112>
    __HAL_LOCK(hadc);
 8003ac8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d073      	beq.n	8003bb8 <HAL_ADC_Start_DMA+0x118>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_ADC_Start_DMA+0x124>)
 8003ad8:	4298      	cmp	r0, r3
 8003ada:	d00e      	beq.n	8003afa <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003adc:	b16e      	cbz	r6, 8003afa <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ade:	2e05      	cmp	r6, #5
 8003ae0:	d00b      	beq.n	8003afa <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ae2:	2e09      	cmp	r6, #9
 8003ae4:	d009      	beq.n	8003afa <HAL_ADC_Start_DMA+0x5a>
      __HAL_UNLOCK(hadc);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8003aec:	2001      	movs	r0, #1
 8003aee:	e061      	b.n	8003bb4 <HAL_ADC_Start_DMA+0x114>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003af0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003af4:	e7e1      	b.n	8003aba <HAL_ADC_Start_DMA+0x1a>
 8003af6:	4b34      	ldr	r3, [pc, #208]	; (8003bc8 <HAL_ADC_Start_DMA+0x128>)
 8003af8:	e7df      	b.n	8003aba <HAL_ADC_Start_DMA+0x1a>
      tmp_hal_status = ADC_Enable(hadc);
 8003afa:	4620      	mov	r0, r4
 8003afc:	f7ff ff84 	bl	8003a08 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d152      	bne.n	8003baa <HAL_ADC_Start_DMA+0x10a>
        ADC_STATE_CLR_SET(hadc->State,
 8003b04:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b12:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	4a29      	ldr	r2, [pc, #164]	; (8003bbc <HAL_ADC_Start_DMA+0x11c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d040      	beq.n	8003b9e <HAL_ADC_Start_DMA+0xfe>
 8003b1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d039      	beq.n	8003b98 <HAL_ADC_Start_DMA+0xf8>
 8003b24:	461a      	mov	r2, r3
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d000      	beq.n	8003b2c <HAL_ADC_Start_DMA+0x8c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b2a:	b91e      	cbnz	r6, 8003b34 <HAL_ADC_Start_DMA+0x94>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b2c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b2e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003b32:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003b34:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b36:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003b3a:	d033      	beq.n	8003ba4 <HAL_ADC_Start_DMA+0x104>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b3c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003b3e:	f023 0306 	bic.w	r3, r3, #6
 8003b42:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b46:	4a21      	ldr	r2, [pc, #132]	; (8003bcc <HAL_ADC_Start_DMA+0x12c>)
 8003b48:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b4c:	4a20      	ldr	r2, [pc, #128]	; (8003bd0 <HAL_ADC_Start_DMA+0x130>)
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b52:	4a20      	ldr	r2, [pc, #128]	; (8003bd4 <HAL_ADC_Start_DMA+0x134>)
 8003b54:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	221c      	movs	r2, #28
 8003b5a:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b62:	6822      	ldr	r2, [r4, #0]
 8003b64:	6853      	ldr	r3, [r2, #4]
 8003b66:	f043 0310 	orr.w	r3, r3, #16
 8003b6a:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003b6c:	6822      	ldr	r2, [r4, #0]
 8003b6e:	68d3      	ldr	r3, [r2, #12]
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b76:	6821      	ldr	r1, [r4, #0]
 8003b78:	4643      	mov	r3, r8
 8003b7a:	463a      	mov	r2, r7
 8003b7c:	3140      	adds	r1, #64	; 0x40
 8003b7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b80:	f000 fc2a 	bl	80043d8 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b84:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003b86:	6893      	ldr	r3, [r2, #8]
 8003b88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b90:	f043 0304 	orr.w	r3, r3, #4
 8003b94:	6093      	str	r3, [r2, #8]
}
 8003b96:	e00d      	b.n	8003bb4 <HAL_ADC_Start_DMA+0x114>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b98:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003b9c:	e7c3      	b.n	8003b26 <HAL_ADC_Start_DMA+0x86>
 8003b9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003ba2:	e7c0      	b.n	8003b26 <HAL_ADC_Start_DMA+0x86>
          ADC_CLEAR_ERRORCODE(hadc);
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	6623      	str	r3, [r4, #96]	; 0x60
 8003ba8:	e7cc      	b.n	8003b44 <HAL_ADC_Start_DMA+0xa4>
        __HAL_UNLOCK(hadc);
 8003baa:	2300      	movs	r3, #0
 8003bac:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8003bb0:	e000      	b.n	8003bb4 <HAL_ADC_Start_DMA+0x114>
    tmp_hal_status = HAL_BUSY;
 8003bb2:	2002      	movs	r0, #2
}
 8003bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 8003bb8:	2002      	movs	r0, #2
 8003bba:	e7fb      	b.n	8003bb4 <HAL_ADC_Start_DMA+0x114>
 8003bbc:	50000100 	.word	0x50000100
 8003bc0:	50000700 	.word	0x50000700
 8003bc4:	50000600 	.word	0x50000600
 8003bc8:	50000300 	.word	0x50000300
 8003bcc:	0800342d 	.word	0x0800342d
 8003bd0:	08003421 	.word	0x08003421
 8003bd4:	080034b5 	.word	0x080034b5

08003bd8 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bd8:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8003bdc:	2a01      	cmp	r2, #1
 8003bde:	f000 80d6 	beq.w	8003d8e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
{
 8003be2:	b410      	push	{r4}
 8003be4:	b09d      	sub	sp, #116	; 0x74
 8003be6:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003be8:	2201      	movs	r2, #1
 8003bea:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003bf2:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003bf4:	6800      	ldr	r0, [r0, #0]
 8003bf6:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003bfa:	d047      	beq.n	8003c8c <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8003bfc:	4a65      	ldr	r2, [pc, #404]	; (8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003bfe:	4290      	cmp	r0, r2
 8003c00:	d047      	beq.n	8003c92 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8003c02:	2200      	movs	r2, #0
 8003c04:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8003c06:	9a01      	ldr	r2, [sp, #4]
 8003c08:	2a00      	cmp	r2, #0
 8003c0a:	d046      	beq.n	8003c9a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c0c:	6892      	ldr	r2, [r2, #8]
 8003c0e:	f012 0204 	ands.w	r2, r2, #4
 8003c12:	d000      	beq.n	8003c16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c14:	2201      	movs	r2, #1
 8003c16:	6884      	ldr	r4, [r0, #8]
 8003c18:	f014 0f04 	tst.w	r4, #4
 8003c1c:	f040 80a7 	bne.w	8003d6e <HAL_ADCEx_MultiModeConfigChannel+0x196>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c20:	2a00      	cmp	r2, #0
 8003c22:	f040 80a4 	bne.w	8003d6e <HAL_ADCEx_MultiModeConfigChannel+0x196>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c26:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003c2a:	d042      	beq.n	8003cb2 <HAL_ADCEx_MultiModeConfigChannel+0xda>
 8003c2c:	4a5a      	ldr	r2, [pc, #360]	; (8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c2e:	4290      	cmp	r0, r2
 8003c30:	d03c      	beq.n	8003cac <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8003c32:	4a5a      	ldr	r2, [pc, #360]	; (8003d9c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c34:	6808      	ldr	r0, [r1, #0]
 8003c36:	2800      	cmp	r0, #0
 8003c38:	d05c      	beq.n	8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c3a:	6890      	ldr	r0, [r2, #8]
 8003c3c:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8003c40:	684c      	ldr	r4, [r1, #4]
 8003c42:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8003c46:	ea44 344c 	orr.w	r4, r4, ip, lsl #13
 8003c4a:	4320      	orrs	r0, r4
 8003c4c:	6090      	str	r0, [r2, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003c54:	d02f      	beq.n	8003cb6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
 8003c56:	4c50      	ldr	r4, [pc, #320]	; (8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c58:	42a0      	cmp	r0, r4
 8003c5a:	d02c      	beq.n	8003cb6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c5c:	484d      	ldr	r0, [pc, #308]	; (8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003c5e:	6884      	ldr	r4, [r0, #8]
 8003c60:	f014 0401 	ands.w	r4, r4, #1
 8003c64:	d000      	beq.n	8003c68 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8003c66:	2401      	movs	r4, #1
 8003c68:	484d      	ldr	r0, [pc, #308]	; (8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8003c6a:	6880      	ldr	r0, [r0, #8]
 8003c6c:	f010 0001 	ands.w	r0, r0, #1
 8003c70:	d000      	beq.n	8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8003c72:	2001      	movs	r0, #1
 8003c74:	4320      	orrs	r0, r4
 8003c76:	4c4b      	ldr	r4, [pc, #300]	; (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003c78:	68a4      	ldr	r4, [r4, #8]
 8003c7a:	f014 0401 	ands.w	r4, r4, #1
 8003c7e:	d000      	beq.n	8003c82 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8003c80:	2401      	movs	r4, #1
 8003c82:	4320      	orrs	r0, r4
 8003c84:	bf0c      	ite	eq
 8003c86:	2001      	moveq	r0, #1
 8003c88:	2000      	movne	r0, #0
 8003c8a:	e025      	b.n	8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c8c:	4a42      	ldr	r2, [pc, #264]	; (8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c8e:	9201      	str	r2, [sp, #4]
 8003c90:	e7b9      	b.n	8003c06 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8003c92:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003c96:	9201      	str	r2, [sp, #4]
 8003c98:	e7b5      	b.n	8003c06 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c9c:	f042 0220 	orr.w	r2, r2, #32
 8003ca0:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 8003ca8:	2001      	movs	r0, #1
 8003caa:	e068      	b.n	8003d7e <HAL_ADCEx_MultiModeConfigChannel+0x1a6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003cac:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8003cb0:	e7c0      	b.n	8003c34 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8003cb2:	4a3d      	ldr	r2, [pc, #244]	; (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003cb4:	e7be      	b.n	8003c34 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8003cb6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003cba:	6880      	ldr	r0, [r0, #8]
 8003cbc:	f010 0001 	ands.w	r0, r0, #1
 8003cc0:	d000      	beq.n	8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8003cc2:	2001      	movs	r0, #1
 8003cc4:	4c34      	ldr	r4, [pc, #208]	; (8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003cc6:	68a4      	ldr	r4, [r4, #8]
 8003cc8:	f014 0401 	ands.w	r4, r4, #1
 8003ccc:	d000      	beq.n	8003cd0 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8003cce:	2401      	movs	r4, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cd0:	4320      	orrs	r0, r4
 8003cd2:	bf0c      	ite	eq
 8003cd4:	2001      	moveq	r0, #1
 8003cd6:	2000      	movne	r0, #0
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d054      	beq.n	8003d86 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003cdc:	6890      	ldr	r0, [r2, #8]
 8003cde:	f420 6071 	bic.w	r0, r0, #3856	; 0xf10
 8003ce2:	f020 000f 	bic.w	r0, r0, #15
 8003ce6:	680c      	ldr	r4, [r1, #0]
 8003ce8:	6889      	ldr	r1, [r1, #8]
 8003cea:	4321      	orrs	r1, r4
 8003cec:	4308      	orrs	r0, r1
 8003cee:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	e041      	b.n	8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003cf4:	6891      	ldr	r1, [r2, #8]
 8003cf6:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8003cfa:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cfc:	6819      	ldr	r1, [r3, #0]
 8003cfe:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003d02:	d01a      	beq.n	8003d3a <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8003d04:	4824      	ldr	r0, [pc, #144]	; (8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003d06:	4281      	cmp	r1, r0
 8003d08:	d017      	beq.n	8003d3a <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8003d0a:	4922      	ldr	r1, [pc, #136]	; (8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003d0c:	6888      	ldr	r0, [r1, #8]
 8003d0e:	f010 0001 	ands.w	r0, r0, #1
 8003d12:	d000      	beq.n	8003d16 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003d14:	2001      	movs	r0, #1
 8003d16:	4922      	ldr	r1, [pc, #136]	; (8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8003d18:	6889      	ldr	r1, [r1, #8]
 8003d1a:	f011 0101 	ands.w	r1, r1, #1
 8003d1e:	d000      	beq.n	8003d22 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8003d20:	2101      	movs	r1, #1
 8003d22:	4301      	orrs	r1, r0
 8003d24:	481f      	ldr	r0, [pc, #124]	; (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003d26:	6880      	ldr	r0, [r0, #8]
 8003d28:	f010 0001 	ands.w	r0, r0, #1
 8003d2c:	d000      	beq.n	8003d30 <HAL_ADCEx_MultiModeConfigChannel+0x158>
 8003d2e:	2001      	movs	r0, #1
 8003d30:	4301      	orrs	r1, r0
 8003d32:	bf0c      	ite	eq
 8003d34:	2101      	moveq	r1, #1
 8003d36:	2100      	movne	r1, #0
 8003d38:	e010      	b.n	8003d5c <HAL_ADCEx_MultiModeConfigChannel+0x184>
 8003d3a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8003d3e:	6889      	ldr	r1, [r1, #8]
 8003d40:	f011 0101 	ands.w	r1, r1, #1
 8003d44:	d000      	beq.n	8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003d46:	2101      	movs	r1, #1
 8003d48:	4813      	ldr	r0, [pc, #76]	; (8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003d4a:	6880      	ldr	r0, [r0, #8]
 8003d4c:	f010 0001 	ands.w	r0, r0, #1
 8003d50:	d000      	beq.n	8003d54 <HAL_ADCEx_MultiModeConfigChannel+0x17c>
 8003d52:	2001      	movs	r0, #1
 8003d54:	4301      	orrs	r1, r0
 8003d56:	bf0c      	ite	eq
 8003d58:	2101      	moveq	r1, #1
 8003d5a:	2100      	movne	r1, #0
 8003d5c:	b1a9      	cbz	r1, 8003d8a <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d5e:	6891      	ldr	r1, [r2, #8]
 8003d60:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8003d64:	f021 010f 	bic.w	r1, r1, #15
 8003d68:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	e004      	b.n	8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d70:	f042 0220 	orr.w	r2, r2, #32
 8003d74:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d76:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003d7e:	b01d      	add	sp, #116	; 0x74
 8003d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d84:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d86:	2000      	movs	r0, #0
 8003d88:	e7f6      	b.n	8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	e7f4      	b.n	8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  __HAL_LOCK(hadc);
 8003d8e:	2002      	movs	r0, #2
}
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	50000400 	.word	0x50000400
 8003d98:	50000100 	.word	0x50000100
 8003d9c:	50000700 	.word	0x50000700
 8003da0:	50000500 	.word	0x50000500
 8003da4:	50000600 	.word	0x50000600
 8003da8:	50000300 	.word	0x50000300

08003dac <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dac:	4a07      	ldr	r2, [pc, #28]	; (8003dcc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003dae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003db0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003db4:	041b      	lsls	r3, r3, #16
 8003db6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003db8:	0200      	lsls	r0, r0, #8
 8003dba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dbe:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003dc8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003dca:	4770      	bx	lr
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dd0:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd2:	4b19      	ldr	r3, [pc, #100]	; (8003e38 <HAL_NVIC_SetPriority+0x68>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dda:	f1c3 0c07 	rsb	ip, r3, #7
 8003dde:	f1bc 0f04 	cmp.w	ip, #4
 8003de2:	bf28      	it	cs
 8003de4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003de8:	f103 0e04 	add.w	lr, r3, #4
 8003dec:	f1be 0f06 	cmp.w	lr, #6
 8003df0:	d918      	bls.n	8003e24 <HAL_NVIC_SetPriority+0x54>
 8003df2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8003df8:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003dfc:	ea21 010c 	bic.w	r1, r1, ip
 8003e00:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e02:	fa0e f303 	lsl.w	r3, lr, r3
 8003e06:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e0a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003e0c:	2800      	cmp	r0, #0
 8003e0e:	db0b      	blt.n	8003e28 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e10:	0109      	lsls	r1, r1, #4
 8003e12:	b2c9      	uxtb	r1, r1
 8003e14:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003e18:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003e1c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003e20:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e24:	2300      	movs	r3, #0
 8003e26:	e7e5      	b.n	8003df4 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e28:	f000 000f 	and.w	r0, r0, #15
 8003e2c:	0109      	lsls	r1, r1, #4
 8003e2e:	b2c9      	uxtb	r1, r1
 8003e30:	4b02      	ldr	r3, [pc, #8]	; (8003e3c <HAL_NVIC_SetPriority+0x6c>)
 8003e32:	5419      	strb	r1, [r3, r0]
 8003e34:	e7f4      	b.n	8003e20 <HAL_NVIC_SetPriority+0x50>
 8003e36:	bf00      	nop
 8003e38:	e000ed00 	.word	0xe000ed00
 8003e3c:	e000ed14 	.word	0xe000ed14

08003e40 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e40:	2800      	cmp	r0, #0
 8003e42:	db07      	blt.n	8003e54 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e44:	f000 021f 	and.w	r2, r0, #31
 8003e48:	0940      	lsrs	r0, r0, #5
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	4093      	lsls	r3, r2
 8003e4e:	4a02      	ldr	r2, [pc, #8]	; (8003e58 <HAL_NVIC_EnableIRQ+0x18>)
 8003e50:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	e000e100 	.word	0xe000e100

08003e5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e5c:	3801      	subs	r0, #1
 8003e5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003e62:	d20b      	bcs.n	8003e7c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003e68:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6a:	4a05      	ldr	r2, [pc, #20]	; (8003e80 <HAL_SYSTICK_Config+0x24>)
 8003e6c:	21f0      	movs	r1, #240	; 0xf0
 8003e6e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e72:	2000      	movs	r0, #0
 8003e74:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e76:	2207      	movs	r2, #7
 8003e78:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e7a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003e7c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003e7e:	4770      	bx	lr
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003e84:	2800      	cmp	r0, #0
 8003e86:	d038      	beq.n	8003efa <HAL_CRC_Init+0x76>
{
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003e8c:	7f43      	ldrb	r3, [r0, #29]
 8003e8e:	b31b      	cbz	r3, 8003ed8 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003e90:	2302      	movs	r3, #2
 8003e92:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003e94:	7923      	ldrb	r3, [r4, #4]
 8003e96:	bb1b      	cbnz	r3, 8003ee0 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	4a19      	ldr	r2, [pc, #100]	; (8003f00 <HAL_CRC_Init+0x7c>)
 8003e9c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003e9e:	6822      	ldr	r2, [r4, #0]
 8003ea0:	6893      	ldr	r3, [r2, #8]
 8003ea2:	f023 0318 	bic.w	r3, r3, #24
 8003ea6:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003ea8:	7963      	ldrb	r3, [r4, #5]
 8003eaa:	bb13      	cbnz	r3, 8003ef2 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003eb2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003eb4:	6822      	ldr	r2, [r4, #0]
 8003eb6:	6893      	ldr	r3, [r2, #8]
 8003eb8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003ebc:	6961      	ldr	r1, [r4, #20]
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003ec2:	6822      	ldr	r2, [r4, #0]
 8003ec4:	6893      	ldr	r3, [r2, #8]
 8003ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eca:	69a1      	ldr	r1, [r4, #24]
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8003ed4:	2000      	movs	r0, #0
}
 8003ed6:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8003ed8:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8003eda:	f7fd fb59 	bl	8001590 <HAL_CRC_MspInit>
 8003ede:	e7d7      	b.n	8003e90 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003ee0:	68e2      	ldr	r2, [r4, #12]
 8003ee2:	68a1      	ldr	r1, [r4, #8]
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	f000 f80d 	bl	8003f04 <HAL_CRCEx_Polynomial_Set>
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d0dc      	beq.n	8003ea8 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8003eee:	2001      	movs	r0, #1
 8003ef0:	e7f1      	b.n	8003ed6 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	6922      	ldr	r2, [r4, #16]
 8003ef6:	611a      	str	r2, [r3, #16]
 8003ef8:	e7dc      	b.n	8003eb4 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8003efa:	2001      	movs	r0, #1
}
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	04c11db7 	.word	0x04c11db7

08003f04 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003f04:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003f06:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003f08:	461c      	mov	r4, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b134      	cbz	r4, 8003f1c <HAL_CRCEx_Polynomial_Set+0x18>
 8003f0e:	f003 0c1f 	and.w	ip, r3, #31
 8003f12:	fa21 fc0c 	lsr.w	ip, r1, ip
 8003f16:	f01c 0f01 	tst.w	ip, #1
 8003f1a:	d0f5      	beq.n	8003f08 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8003f1c:	2a18      	cmp	r2, #24
 8003f1e:	d822      	bhi.n	8003f66 <HAL_CRCEx_Polynomial_Set+0x62>
 8003f20:	e8df f002 	tbb	[pc, r2]
 8003f24:	2121210f 	.word	0x2121210f
 8003f28:	21212121 	.word	0x21212121
 8003f2c:	2121211d 	.word	0x2121211d
 8003f30:	21212121 	.word	0x21212121
 8003f34:	21212119 	.word	0x21212119
 8003f38:	21212121 	.word	0x21212121
 8003f3c:	0d          	.byte	0x0d
 8003f3d:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003f3e:	2b06      	cmp	r3, #6
 8003f40:	d815      	bhi.n	8003f6e <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003f42:	6803      	ldr	r3, [r0, #0]
 8003f44:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003f46:	6801      	ldr	r1, [r0, #0]
 8003f48:	688b      	ldr	r3, [r1, #8]
 8003f4a:	f023 0318 	bic.w	r3, r3, #24
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	608a      	str	r2, [r1, #8]
 8003f52:	2000      	movs	r0, #0
 8003f54:	e008      	b.n	8003f68 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 8003f56:	2b07      	cmp	r3, #7
 8003f58:	d9f3      	bls.n	8003f42 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	e004      	b.n	8003f68 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 8003f5e:	2b0f      	cmp	r3, #15
 8003f60:	d9ef      	bls.n	8003f42 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8003f62:	2001      	movs	r0, #1
 8003f64:	e000      	b.n	8003f68 <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 8003f66:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 8003f68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f6c:	4770      	bx	lr
        status =   HAL_ERROR;
 8003f6e:	2001      	movs	r0, #1
 8003f70:	e7fa      	b.n	8003f68 <HAL_CRCEx_Polynomial_Set+0x64>

08003f72 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8003f72:	b170      	cbz	r0, 8003f92 <HAL_DAC_Init+0x20>
{
 8003f74:	b510      	push	{r4, lr}
 8003f76:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003f78:	7903      	ldrb	r3, [r0, #4]
 8003f7a:	b133      	cbz	r3, 8003f8a <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f80:	2000      	movs	r0, #0
 8003f82:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f84:	2301      	movs	r3, #1
 8003f86:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8003f88:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8003f8a:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8003f8c:	f7fd fb72 	bl	8001674 <HAL_DAC_MspInit>
 8003f90:	e7f4      	b.n	8003f7c <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8003f92:	2001      	movs	r0, #1
}
 8003f94:	4770      	bx	lr
	...

08003f98 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f98:	7943      	ldrb	r3, [r0, #5]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	f000 80f4 	beq.w	8004188 <HAL_DAC_ConfigChannel+0x1f0>
{
 8003fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	460e      	mov	r6, r1
 8003fa8:	4615      	mov	r5, r2
  __HAL_LOCK(hdac);
 8003faa:	2301      	movs	r3, #1
 8003fac:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003fb2:	688b      	ldr	r3, [r1, #8]
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d017      	beq.n	8003fe8 <HAL_DAC_ConfigChannel+0x50>
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003fb8:	69f3      	ldr	r3, [r6, #28]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d05e      	beq.n	800407c <HAL_DAC_ConfigChannel+0xe4>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003fc2:	f005 0510 	and.w	r5, r5, #16
 8003fc6:	2307      	movs	r3, #7
 8003fc8:	40ab      	lsls	r3, r5
 8003fca:	ea27 0703 	bic.w	r7, r7, r3
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003fce:	69b3      	ldr	r3, [r6, #24]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d060      	beq.n	8004096 <HAL_DAC_ConfigChannel+0xfe>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	f000 80bd 	beq.w	8004154 <HAL_DAC_ConfigChannel+0x1bc>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003fda:	6973      	ldr	r3, [r6, #20]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f040 80bc 	bne.w	800415a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003fe2:	f04f 0801 	mov.w	r8, #1
 8003fe6:	e058      	b.n	800409a <HAL_DAC_ConfigChannel+0x102>
    tickstart = HAL_GetTick();
 8003fe8:	f7ff f8aa 	bl	8003140 <HAL_GetTick>
 8003fec:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8003fee:	b17d      	cbz	r5, 8004010 <HAL_DAC_ConfigChannel+0x78>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	da3a      	bge.n	800406e <HAL_DAC_ConfigChannel+0xd6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ff8:	f7ff f8a2 	bl	8003140 <HAL_GetTick>
 8003ffc:	1bc0      	subs	r0, r0, r7
 8003ffe:	2801      	cmp	r0, #1
 8004000:	d9f6      	bls.n	8003ff0 <HAL_DAC_ConfigChannel+0x58>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004002:	6923      	ldr	r3, [r4, #16]
 8004004:	f043 0308 	orr.w	r3, r3, #8
 8004008:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800400a:	2003      	movs	r0, #3
 800400c:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 800400e:	e09f      	b.n	8004150 <HAL_DAC_ConfigChannel+0x1b8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004014:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004018:	d00b      	beq.n	8004032 <HAL_DAC_ConfigChannel+0x9a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800401a:	f7ff f891 	bl	8003140 <HAL_GetTick>
 800401e:	1bc0      	subs	r0, r0, r7
 8004020:	2801      	cmp	r0, #1
 8004022:	d9f5      	bls.n	8004010 <HAL_DAC_ConfigChannel+0x78>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004024:	6923      	ldr	r3, [r4, #16]
 8004026:	f043 0308 	orr.w	r3, r3, #8
 800402a:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800402c:	2003      	movs	r0, #3
 800402e:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8004030:	e08e      	b.n	8004150 <HAL_DAC_ConfigChannel+0x1b8>
      HAL_Delay(1);
 8004032:	2001      	movs	r0, #1
 8004034:	f7ff f88a 	bl	800314c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004038:	6823      	ldr	r3, [r4, #0]
 800403a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800403e:	6820      	ldr	r0, [r4, #0]
 8004040:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004042:	f005 0110 	and.w	r1, r5, #16
 8004046:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800404a:	408b      	lsls	r3, r1
 800404c:	ea22 0203 	bic.w	r2, r2, r3
 8004050:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004052:	408b      	lsls	r3, r1
 8004054:	431a      	orrs	r2, r3
 8004056:	6482      	str	r2, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004058:	6820      	ldr	r0, [r4, #0]
 800405a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800405c:	22ff      	movs	r2, #255	; 0xff
 800405e:	408a      	lsls	r2, r1
 8004060:	ea23 0302 	bic.w	r3, r3, r2
 8004064:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004066:	408a      	lsls	r2, r1
 8004068:	4313      	orrs	r3, r2
 800406a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800406c:	e7a4      	b.n	8003fb8 <HAL_DAC_ConfigChannel+0x20>
      HAL_Delay(1U);
 800406e:	2001      	movs	r0, #1
 8004070:	f7ff f86c 	bl	800314c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8004078:	645a      	str	r2, [r3, #68]	; 0x44
 800407a:	e7e0      	b.n	800403e <HAL_DAC_ConfigChannel+0xa6>
    tmpreg1 = hdac->Instance->CCR;
 800407c:	6821      	ldr	r1, [r4, #0]
 800407e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004080:	f005 0010 	and.w	r0, r5, #16
 8004084:	231f      	movs	r3, #31
 8004086:	4083      	lsls	r3, r0
 8004088:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800408c:	6a33      	ldr	r3, [r6, #32]
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800408e:	4083      	lsls	r3, r0
 8004090:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 8004092:	638b      	str	r3, [r1, #56]	; 0x38
 8004094:	e793      	b.n	8003fbe <HAL_DAC_ConfigChannel+0x26>
    connectOnChip = 0x00000000UL;
 8004096:	f04f 0800 	mov.w	r8, #0
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800409a:	68b3      	ldr	r3, [r6, #8]
 800409c:	6972      	ldr	r2, [r6, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	ea43 0308 	orr.w	r3, r3, r8
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80040a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040a8:	40aa      	lsls	r2, r5
 80040aa:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80040ae:	7932      	ldrb	r2, [r6, #4]
 80040b0:	2a01      	cmp	r2, #1
 80040b2:	d055      	beq.n	8004160 <HAL_DAC_ConfigChannel+0x1c8>
 80040b4:	f04f 0800 	mov.w	r8, #0
 80040b8:	ea48 0303 	orr.w	r3, r8, r3
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80040bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c0:	40aa      	lsls	r2, r5
 80040c2:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80040c6:	7972      	ldrb	r2, [r6, #5]
 80040c8:	2a01      	cmp	r2, #1
 80040ca:	d04c      	beq.n	8004166 <HAL_DAC_ConfigChannel+0x1ce>
 80040cc:	f04f 0800 	mov.w	r8, #0
 80040d0:	ea48 0803 	orr.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80040d4:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80040d8:	6833      	ldr	r3, [r6, #0]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d046      	beq.n	800416c <HAL_DAC_ConfigChannel+0x1d4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80040de:	431f      	orrs	r7, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80040e0:	fa08 f805 	lsl.w	r8, r8, r5
 80040e4:	ea48 0707 	orr.w	r7, r8, r7
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80040ec:	6821      	ldr	r1, [r4, #0]
 80040ee:	680b      	ldr	r3, [r1, #0]
 80040f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040f4:	40aa      	lsls	r2, r5
 80040f6:	ea23 0302 	bic.w	r3, r3, r2
 80040fa:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80040fc:	6821      	ldr	r1, [r4, #0]
 80040fe:	680b      	ldr	r3, [r1, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004100:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004104:	40aa      	lsls	r2, r5
 8004106:	ea23 0202 	bic.w	r2, r3, r2
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800410a:	68f3      	ldr	r3, [r6, #12]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800410c:	40ab      	lsls	r3, r5
 800410e:	4313      	orrs	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004110:	600b      	str	r3, [r1, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004112:	6821      	ldr	r1, [r4, #0]
 8004114:	680b      	ldr	r3, [r1, #0]
 8004116:	22c0      	movs	r2, #192	; 0xc0
 8004118:	40aa      	lsls	r2, r5
 800411a:	ea23 0302 	bic.w	r3, r3, r2
 800411e:	600b      	str	r3, [r1, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004120:	68f2      	ldr	r2, [r6, #12]
 8004122:	f3c2 0383 	ubfx	r3, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004126:	6932      	ldr	r2, [r6, #16]
 8004128:	0892      	lsrs	r2, r2, #2
 800412a:	0212      	lsls	r2, r2, #8
 800412c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8004130:	431a      	orrs	r2, r3
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004132:	6820      	ldr	r0, [r4, #0]
 8004134:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004136:	f640 710f 	movw	r1, #3855	; 0xf0f
 800413a:	40a9      	lsls	r1, r5
 800413c:	ea23 0301 	bic.w	r3, r3, r1
 8004140:	fa02 f505 	lsl.w	r5, r2, r5
 8004144:	431d      	orrs	r5, r3
 8004146:	6605      	str	r5, [r0, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004148:	2301      	movs	r3, #1
 800414a:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800414c:	2000      	movs	r0, #0
 800414e:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8004150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8004154:	f04f 0801 	mov.w	r8, #1
 8004158:	e79f      	b.n	800409a <HAL_DAC_ConfigChannel+0x102>
      connectOnChip = 0x00000000UL;
 800415a:	f04f 0800 	mov.w	r8, #0
 800415e:	e79c      	b.n	800409a <HAL_DAC_ConfigChannel+0x102>
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004160:	f44f 7880 	mov.w	r8, #256	; 0x100
 8004164:	e7a8      	b.n	80040b8 <HAL_DAC_ConfigChannel+0x120>
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004166:	f44f 7800 	mov.w	r8, #512	; 0x200
 800416a:	e7b1      	b.n	80040d0 <HAL_DAC_ConfigChannel+0x138>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800416c:	f002 fd42 	bl	8006bf4 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004170:	4b06      	ldr	r3, [pc, #24]	; (800418c <HAL_DAC_ConfigChannel+0x1f4>)
 8004172:	4298      	cmp	r0, r3
 8004174:	d902      	bls.n	800417c <HAL_DAC_ConfigChannel+0x1e4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004176:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800417a:	e7b1      	b.n	80040e0 <HAL_DAC_ConfigChannel+0x148>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800417c:	4b04      	ldr	r3, [pc, #16]	; (8004190 <HAL_DAC_ConfigChannel+0x1f8>)
 800417e:	4298      	cmp	r0, r3
 8004180:	d9ae      	bls.n	80040e0 <HAL_DAC_ConfigChannel+0x148>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004182:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8004186:	e7ab      	b.n	80040e0 <HAL_DAC_ConfigChannel+0x148>
  __HAL_LOCK(hdac);
 8004188:	2002      	movs	r0, #2
}
 800418a:	4770      	bx	lr
 800418c:	09896800 	.word	0x09896800
 8004190:	04c4b400 	.word	0x04c4b400

08004194 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004194:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004196:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8004198:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800419a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800419c:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800419e:	b114      	cbz	r4, 80041a6 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041a0:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80041a2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80041a4:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041a6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80041a8:	f004 0c1f 	and.w	ip, r4, #31
 80041ac:	2401      	movs	r4, #1
 80041ae:	fa04 f40c 	lsl.w	r4, r4, ip
 80041b2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80041b4:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041b6:	6804      	ldr	r4, [r0, #0]
 80041b8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041ba:	6883      	ldr	r3, [r0, #8]
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d005      	beq.n	80041cc <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80041c0:	6803      	ldr	r3, [r0, #0]
 80041c2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80041c4:	6803      	ldr	r3, [r0, #0]
 80041c6:	60da      	str	r2, [r3, #12]
  }
}
 80041c8:	bc30      	pop	{r4, r5}
 80041ca:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80041cc:	6803      	ldr	r3, [r0, #0]
 80041ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80041d0:	6803      	ldr	r3, [r0, #0]
 80041d2:	60d9      	str	r1, [r3, #12]
 80041d4:	e7f8      	b.n	80041c8 <DMA_SetConfig+0x34>
	...

080041d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80041d8:	6803      	ldr	r3, [r0, #0]
 80041da:	4a0c      	ldr	r2, [pc, #48]	; (800420c <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d813      	bhi.n	8004208 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80041e0:	490b      	ldr	r1, [pc, #44]	; (8004210 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	3b08      	subs	r3, #8
 80041e6:	4a0b      	ldr	r2, [pc, #44]	; (8004214 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 80041e8:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80041ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80041ee:	f022 0203 	bic.w	r2, r2, #3
 80041f2:	440a      	add	r2, r1
 80041f4:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041f6:	4a08      	ldr	r2, [pc, #32]	; (8004218 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 80041f8:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80041fa:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80041fe:	2201      	movs	r2, #1
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	6503      	str	r3, [r0, #80]	; 0x50
}
 8004206:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004208:	4904      	ldr	r1, [pc, #16]	; (800421c <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 800420a:	e7ea      	b.n	80041e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 800420c:	40020407 	.word	0x40020407
 8004210:	40020800 	.word	0x40020800
 8004214:	cccccccd 	.word	0xcccccccd
 8004218:	40020880 	.word	0x40020880
 800421c:	40020820 	.word	0x40020820

08004220 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004220:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004222:	4a07      	ldr	r2, [pc, #28]	; (8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8004224:	441a      	add	r2, r3
 8004226:	0092      	lsls	r2, r2, #2
 8004228:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800422a:	4a06      	ldr	r2, [pc, #24]	; (8004244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 800422c:	6582      	str	r2, [r0, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800422e:	3b01      	subs	r3, #1
 8004230:	f003 031f 	and.w	r3, r3, #31
 8004234:	2201      	movs	r2, #1
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	1000823f 	.word	0x1000823f
 8004244:	40020940 	.word	0x40020940

08004248 <HAL_DMA_Init>:
  if (hdma == NULL)
 8004248:	2800      	cmp	r0, #0
 800424a:	d05b      	beq.n	8004304 <HAL_DMA_Init+0xbc>
{
 800424c:	b510      	push	{r4, lr}
 800424e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004250:	6801      	ldr	r1, [r0, #0]
 8004252:	4b2d      	ldr	r3, [pc, #180]	; (8004308 <HAL_DMA_Init+0xc0>)
 8004254:	4299      	cmp	r1, r3
 8004256:	d83d      	bhi.n	80042d4 <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004258:	4b2c      	ldr	r3, [pc, #176]	; (800430c <HAL_DMA_Init+0xc4>)
 800425a:	440b      	add	r3, r1
 800425c:	4a2c      	ldr	r2, [pc, #176]	; (8004310 <HAL_DMA_Init+0xc8>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	091b      	lsrs	r3, r3, #4
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004268:	4b2a      	ldr	r3, [pc, #168]	; (8004314 <HAL_DMA_Init+0xcc>)
 800426a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800426c:	2302      	movs	r3, #2
 800426e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8004272:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004274:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8004278:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 800427c:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800427e:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8004280:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004282:	6920      	ldr	r0, [r4, #16]
 8004284:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004286:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004288:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800428a:	69a0      	ldr	r0, [r4, #24]
 800428c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800428e:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004290:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004292:	6a20      	ldr	r0, [r4, #32]
 8004294:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8004296:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8004298:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800429a:	4620      	mov	r0, r4
 800429c:	f7ff ff9c 	bl	80041d8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80042a0:	68a3      	ldr	r3, [r4, #8]
 80042a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042a6:	d020      	beq.n	80042ea <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80042a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80042aa:	7922      	ldrb	r2, [r4, #4]
 80042ac:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80042b0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80042b2:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80042b4:	6863      	ldr	r3, [r4, #4]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	2b03      	cmp	r3, #3
 80042ba:	d919      	bls.n	80042f0 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80042c0:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80042c2:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042c4:	2000      	movs	r0, #0
 80042c6:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80042c8:	2301      	movs	r3, #1
 80042ca:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 80042ce:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80042d2:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80042d4:	4b10      	ldr	r3, [pc, #64]	; (8004318 <HAL_DMA_Init+0xd0>)
 80042d6:	440b      	add	r3, r1
 80042d8:	4a0d      	ldr	r2, [pc, #52]	; (8004310 <HAL_DMA_Init+0xc8>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	091b      	lsrs	r3, r3, #4
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80042e4:	4b0d      	ldr	r3, [pc, #52]	; (800431c <HAL_DMA_Init+0xd4>)
 80042e6:	6403      	str	r3, [r0, #64]	; 0x40
 80042e8:	e7c0      	b.n	800426c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80042ea:	2300      	movs	r3, #0
 80042ec:	6063      	str	r3, [r4, #4]
 80042ee:	e7db      	b.n	80042a8 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042f0:	4620      	mov	r0, r4
 80042f2:	f7ff ff95 	bl	8004220 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80042f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004300:	605a      	str	r2, [r3, #4]
 8004302:	e7df      	b.n	80042c4 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8004304:	2001      	movs	r0, #1
}
 8004306:	4770      	bx	lr
 8004308:	40020407 	.word	0x40020407
 800430c:	bffdfff8 	.word	0xbffdfff8
 8004310:	cccccccd 	.word	0xcccccccd
 8004314:	40020000 	.word	0x40020000
 8004318:	bffdfbf8 	.word	0xbffdfbf8
 800431c:	40020400 	.word	0x40020400

08004320 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8004320:	2800      	cmp	r0, #0
 8004322:	d04b      	beq.n	80043bc <HAL_DMA_DeInit+0x9c>
{
 8004324:	b538      	push	{r3, r4, r5, lr}
 8004326:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8004328:	6802      	ldr	r2, [r0, #0]
 800432a:	6813      	ldr	r3, [r2, #0]
 800432c:	f023 0301 	bic.w	r3, r3, #1
 8004330:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004332:	6802      	ldr	r2, [r0, #0]
 8004334:	4b22      	ldr	r3, [pc, #136]	; (80043c0 <HAL_DMA_DeInit+0xa0>)
 8004336:	429a      	cmp	r2, r3
 8004338:	d82c      	bhi.n	8004394 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800433a:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <HAL_DMA_DeInit+0xa4>)
 800433c:	4413      	add	r3, r2
 800433e:	4922      	ldr	r1, [pc, #136]	; (80043c8 <HAL_DMA_DeInit+0xa8>)
 8004340:	fba1 1303 	umull	r1, r3, r1, r3
 8004344:	091b      	lsrs	r3, r3, #4
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800434a:	4b20      	ldr	r3, [pc, #128]	; (80043cc <HAL_DMA_DeInit+0xac>)
 800434c:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR  = 0;
 800434e:	2500      	movs	r5, #0
 8004350:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004352:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004354:	f003 021f 	and.w	r2, r3, #31
 8004358:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800435a:	2301      	movs	r3, #1
 800435c:	4093      	lsls	r3, r2
 800435e:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004360:	4620      	mov	r0, r4
 8004362:	f7ff ff39 	bl	80041d8 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0;
 8004366:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004368:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800436a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800436c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800436e:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004370:	6863      	ldr	r3, [r4, #4]
 8004372:	3b01      	subs	r3, #1
 8004374:	2b03      	cmp	r3, #3
 8004376:	d918      	bls.n	80043aa <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8004378:	2000      	movs	r0, #0
 800437a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800437c:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800437e:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8004380:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004382:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004384:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004386:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004388:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800438a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800438e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8004392:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004394:	4b0e      	ldr	r3, [pc, #56]	; (80043d0 <HAL_DMA_DeInit+0xb0>)
 8004396:	4413      	add	r3, r2
 8004398:	490b      	ldr	r1, [pc, #44]	; (80043c8 <HAL_DMA_DeInit+0xa8>)
 800439a:	fba1 1303 	umull	r1, r3, r1, r3
 800439e:	091b      	lsrs	r3, r3, #4
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <HAL_DMA_DeInit+0xb4>)
 80043a6:	6403      	str	r3, [r0, #64]	; 0x40
 80043a8:	e7d1      	b.n	800434e <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043aa:	4620      	mov	r0, r4
 80043ac:	f7ff ff38 	bl	8004220 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043b2:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043b6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80043b8:	605a      	str	r2, [r3, #4]
 80043ba:	e7dd      	b.n	8004378 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 80043bc:	2001      	movs	r0, #1
}
 80043be:	4770      	bx	lr
 80043c0:	40020407 	.word	0x40020407
 80043c4:	bffdfff8 	.word	0xbffdfff8
 80043c8:	cccccccd 	.word	0xcccccccd
 80043cc:	40020000 	.word	0x40020000
 80043d0:	bffdfbf8 	.word	0xbffdfbf8
 80043d4:	40020400 	.word	0x40020400

080043d8 <HAL_DMA_Start_IT>:
{
 80043d8:	b538      	push	{r3, r4, r5, lr}
 80043da:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80043dc:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80043e0:	2801      	cmp	r0, #1
 80043e2:	d041      	beq.n	8004468 <HAL_DMA_Start_IT+0x90>
 80043e4:	2001      	movs	r0, #1
 80043e6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80043ea:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 80043ee:	b2c0      	uxtb	r0, r0
 80043f0:	2801      	cmp	r0, #1
 80043f2:	d004      	beq.n	80043fe <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 80043f4:	2300      	movs	r3, #0
 80043f6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 80043fa:	2002      	movs	r0, #2
}
 80043fc:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80043fe:	2002      	movs	r0, #2
 8004400:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004404:	2000      	movs	r0, #0
 8004406:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004408:	6825      	ldr	r5, [r4, #0]
 800440a:	6828      	ldr	r0, [r5, #0]
 800440c:	f020 0001 	bic.w	r0, r0, #1
 8004410:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004412:	4620      	mov	r0, r4
 8004414:	f7ff febe 	bl	8004194 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004418:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800441a:	b1d3      	cbz	r3, 8004452 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800441c:	6822      	ldr	r2, [r4, #0]
 800441e:	6813      	ldr	r3, [r2, #0]
 8004420:	f043 030e 	orr.w	r3, r3, #14
 8004424:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004426:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800442e:	d003      	beq.n	8004438 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004436:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8004438:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800443a:	b11b      	cbz	r3, 8004444 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004442:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004444:	6822      	ldr	r2, [r4, #0]
 8004446:	6813      	ldr	r3, [r2, #0]
 8004448:	f043 0301 	orr.w	r3, r3, #1
 800444c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800444e:	2000      	movs	r0, #0
 8004450:	e7d4      	b.n	80043fc <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004452:	6822      	ldr	r2, [r4, #0]
 8004454:	6813      	ldr	r3, [r2, #0]
 8004456:	f023 0304 	bic.w	r3, r3, #4
 800445a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800445c:	6822      	ldr	r2, [r4, #0]
 800445e:	6813      	ldr	r3, [r2, #0]
 8004460:	f043 030a 	orr.w	r3, r3, #10
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	e7de      	b.n	8004426 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8004468:	2002      	movs	r0, #2
 800446a:	e7c7      	b.n	80043fc <HAL_DMA_Start_IT+0x24>

0800446c <HAL_DMA_Abort_IT>:
{
 800446c:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800446e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d009      	beq.n	800448c <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004478:	2304      	movs	r3, #4
 800447a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800447c:	2301      	movs	r3, #1
 800447e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004482:	2200      	movs	r2, #0
 8004484:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    status = HAL_ERROR;
 8004488:	4618      	mov	r0, r3
}
 800448a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800448c:	6802      	ldr	r2, [r0, #0]
 800448e:	6813      	ldr	r3, [r2, #0]
 8004490:	f023 030e 	bic.w	r3, r3, #14
 8004494:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004496:	6802      	ldr	r2, [r0, #0]
 8004498:	6813      	ldr	r3, [r2, #0]
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044a0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80044a2:	6813      	ldr	r3, [r2, #0]
 80044a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044a8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80044ac:	f003 021f 	and.w	r2, r3, #31
 80044b0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80044b2:	2301      	movs	r3, #1
 80044b4:	4093      	lsls	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044b8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80044ba:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80044bc:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80044be:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80044c0:	b133      	cbz	r3, 80044d0 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044c8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044ca:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80044cc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80044ce:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80044d0:	2301      	movs	r3, #1
 80044d2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80044d6:	2300      	movs	r3, #0
 80044d8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80044dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80044de:	b113      	cbz	r3, 80044e6 <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 80044e0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80044e2:	2000      	movs	r0, #0
 80044e4:	e7d1      	b.n	800448a <HAL_DMA_Abort_IT+0x1e>
 80044e6:	2000      	movs	r0, #0
 80044e8:	e7cf      	b.n	800448a <HAL_DMA_Abort_IT+0x1e>

080044ea <HAL_DMA_IRQHandler>:
{
 80044ea:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80044ee:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80044f0:	6804      	ldr	r4, [r0, #0]
 80044f2:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80044f4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80044f6:	f003 031f 	and.w	r3, r3, #31
 80044fa:	2204      	movs	r2, #4
 80044fc:	409a      	lsls	r2, r3
 80044fe:	420a      	tst	r2, r1
 8004500:	d015      	beq.n	800452e <HAL_DMA_IRQHandler+0x44>
 8004502:	f015 0f04 	tst.w	r5, #4
 8004506:	d012      	beq.n	800452e <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004508:	6823      	ldr	r3, [r4, #0]
 800450a:	f013 0f20 	tst.w	r3, #32
 800450e:	d103      	bne.n	8004518 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	f023 0304 	bic.w	r3, r3, #4
 8004516:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004518:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800451a:	f003 021f 	and.w	r2, r3, #31
 800451e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004520:	2304      	movs	r3, #4
 8004522:	4093      	lsls	r3, r2
 8004524:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8004526:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004528:	b103      	cbz	r3, 800452c <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 800452a:	4798      	blx	r3
}
 800452c:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800452e:	2202      	movs	r2, #2
 8004530:	409a      	lsls	r2, r3
 8004532:	420a      	tst	r2, r1
 8004534:	d01c      	beq.n	8004570 <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 8004536:	f015 0f02 	tst.w	r5, #2
 800453a:	d019      	beq.n	8004570 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	f013 0f20 	tst.w	r3, #32
 8004542:	d106      	bne.n	8004552 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	f023 030a 	bic.w	r3, r3, #10
 800454a:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800454c:	2301      	movs	r3, #1
 800454e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004552:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004554:	f003 021f 	and.w	r2, r3, #31
 8004558:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800455a:	2302      	movs	r3, #2
 800455c:	4093      	lsls	r3, r2
 800455e:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004560:	2300      	movs	r3, #0
 8004562:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8004566:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0df      	beq.n	800452c <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 800456c:	4798      	blx	r3
 800456e:	e7dd      	b.n	800452c <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004570:	2208      	movs	r2, #8
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	420b      	tst	r3, r1
 8004578:	d0d8      	beq.n	800452c <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 800457a:	f015 0f08 	tst.w	r5, #8
 800457e:	d0d5      	beq.n	800452c <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	f023 030e 	bic.w	r3, r3, #14
 8004586:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004588:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004590:	2201      	movs	r2, #1
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004598:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800459a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800459e:	2300      	movs	r3, #0
 80045a0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80045a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0c0      	beq.n	800452c <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80045aa:	4798      	blx	r3
  return;
 80045ac:	e7be      	b.n	800452c <HAL_DMA_IRQHandler+0x42>

080045ae <HAL_DMA_GetState>:
  return hdma->State;
 80045ae:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 80045b2:	4770      	bx	lr

080045b4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80045b4:	b410      	push	{r4}
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80045b6:	6802      	ldr	r2, [r0, #0]
 80045b8:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <FDCAN_CalcultateRamBlockAddresses+0x7c>)
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d028      	beq.n	8004610 <FDCAN_CalcultateRamBlockAddresses+0x5c>
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80045be:	491d      	ldr	r1, [pc, #116]	; (8004634 <FDCAN_CalcultateRamBlockAddresses+0x80>)
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80045c0:	4b1d      	ldr	r3, [pc, #116]	; (8004638 <FDCAN_CalcultateRamBlockAddresses+0x84>)
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d026      	beq.n	8004614 <FDCAN_CalcultateRamBlockAddresses+0x60>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80045c6:	6401      	str	r1, [r0, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80045c8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80045cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045d0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80045d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80045d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80045da:	f101 0370 	add.w	r3, r1, #112	; 0x70
 80045de:	6443      	str	r3, [r0, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80045e0:	6802      	ldr	r2, [r0, #0]
 80045e2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80045e6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80045ea:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80045ec:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80045f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80045f4:	f101 03b0 	add.w	r3, r1, #176	; 0xb0
 80045f8:	6483      	str	r3, [r0, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80045fa:	f501 73c4 	add.w	r3, r1, #392	; 0x188
 80045fe:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004600:	f501 7318 	add.w	r3, r1, #608	; 0x260
 8004604:	6503      	str	r3, [r0, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004606:	f501 731e 	add.w	r3, r1, #632	; 0x278
 800460a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800460c:	460b      	mov	r3, r1
 800460e:	e007      	b.n	8004620 <FDCAN_CalcultateRamBlockAddresses+0x6c>
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004610:	490a      	ldr	r1, [pc, #40]	; (800463c <FDCAN_CalcultateRamBlockAddresses+0x88>)
 8004612:	e7d5      	b.n	80045c0 <FDCAN_CalcultateRamBlockAddresses+0xc>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004614:	f501 61d4 	add.w	r1, r1, #1696	; 0x6a0
 8004618:	e7d5      	b.n	80045c6 <FDCAN_CalcultateRamBlockAddresses+0x12>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800461a:	2200      	movs	r2, #0
 800461c:	f843 2b04 	str.w	r2, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004620:	f501 7254 	add.w	r2, r1, #848	; 0x350
 8004624:	429a      	cmp	r2, r3
 8004626:	d8f8      	bhi.n	800461a <FDCAN_CalcultateRamBlockAddresses+0x66>
  }
}
 8004628:	f85d 4b04 	ldr.w	r4, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40006800 	.word	0x40006800
 8004634:	4000a400 	.word	0x4000a400
 8004638:	40006c00 	.word	0x40006c00
 800463c:	4000a750 	.word	0x4000a750

08004640 <HAL_FDCAN_Init>:
  if (hfdcan == NULL)
 8004640:	2800      	cmp	r0, #0
 8004642:	f000 80e3 	beq.w	800480c <HAL_FDCAN_Init+0x1cc>
{
 8004646:	b538      	push	{r3, r4, r5, lr}
 8004648:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800464a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800464e:	b1d3      	cbz	r3, 8004686 <HAL_FDCAN_Init+0x46>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004650:	6822      	ldr	r2, [r4, #0]
 8004652:	6993      	ldr	r3, [r2, #24]
 8004654:	f023 0310 	bic.w	r3, r3, #16
 8004658:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 800465a:	f7fe fd71 	bl	8003140 <HAL_GetTick>
 800465e:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	699a      	ldr	r2, [r3, #24]
 8004664:	f012 0f08 	tst.w	r2, #8
 8004668:	d012      	beq.n	8004690 <HAL_FDCAN_Init+0x50>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800466a:	f7fe fd69 	bl	8003140 <HAL_GetTick>
 800466e:	1b40      	subs	r0, r0, r5
 8004670:	280a      	cmp	r0, #10
 8004672:	d9f5      	bls.n	8004660 <HAL_FDCAN_Init+0x20>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004674:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800467c:	2303      	movs	r3, #3
 800467e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8004682:	2001      	movs	r0, #1
}
 8004684:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8004686:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 800468a:	f7fd f8d5 	bl	8001838 <HAL_FDCAN_MspInit>
 800468e:	e7df      	b.n	8004650 <HAL_FDCAN_Init+0x10>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004690:	699a      	ldr	r2, [r3, #24]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8004698:	f7fe fd52 	bl	8003140 <HAL_GetTick>
 800469c:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	699a      	ldr	r2, [r3, #24]
 80046a2:	f012 0f01 	tst.w	r2, #1
 80046a6:	d10d      	bne.n	80046c4 <HAL_FDCAN_Init+0x84>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80046a8:	f7fe fd4a 	bl	8003140 <HAL_GetTick>
 80046ac:	1b40      	subs	r0, r0, r5
 80046ae:	280a      	cmp	r0, #10
 80046b0:	d9f5      	bls.n	800469e <HAL_FDCAN_Init+0x5e>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80046b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80046ba:	2303      	movs	r3, #3
 80046bc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80046c0:	2001      	movs	r0, #1
 80046c2:	e7df      	b.n	8004684 <HAL_FDCAN_Init+0x44>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	f042 0202 	orr.w	r2, r2, #2
 80046ca:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 80046cc:	6822      	ldr	r2, [r4, #0]
 80046ce:	4b50      	ldr	r3, [pc, #320]	; (8004810 <HAL_FDCAN_Init+0x1d0>)
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d042      	beq.n	800475a <HAL_FDCAN_Init+0x11a>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80046d4:	7c23      	ldrb	r3, [r4, #16]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d045      	beq.n	8004766 <HAL_FDCAN_Init+0x126>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80046da:	6822      	ldr	r2, [r4, #0]
 80046dc:	6993      	ldr	r3, [r2, #24]
 80046de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046e2:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 80046e4:	7c63      	ldrb	r3, [r4, #17]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d043      	beq.n	8004772 <HAL_FDCAN_Init+0x132>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80046ea:	6822      	ldr	r2, [r4, #0]
 80046ec:	6993      	ldr	r3, [r2, #24]
 80046ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046f2:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 80046f4:	7ca3      	ldrb	r3, [r4, #18]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d041      	beq.n	800477e <HAL_FDCAN_Init+0x13e>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80046fa:	6822      	ldr	r2, [r4, #0]
 80046fc:	6993      	ldr	r3, [r2, #24]
 80046fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004702:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004704:	6822      	ldr	r2, [r4, #0]
 8004706:	6993      	ldr	r3, [r2, #24]
 8004708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470c:	68a1      	ldr	r1, [r4, #8]
 800470e:	430b      	orrs	r3, r1
 8004710:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004712:	6822      	ldr	r2, [r4, #0]
 8004714:	6993      	ldr	r3, [r2, #24]
 8004716:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 800471a:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800471c:	6822      	ldr	r2, [r4, #0]
 800471e:	6913      	ldr	r3, [r2, #16]
 8004720:	f023 0310 	bic.w	r3, r3, #16
 8004724:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004726:	68e3      	ldr	r3, [r4, #12]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d02e      	beq.n	800478a <HAL_FDCAN_Init+0x14a>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800472c:	2b00      	cmp	r3, #0
 800472e:	d031      	beq.n	8004794 <HAL_FDCAN_Init+0x154>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004730:	2b02      	cmp	r3, #2
 8004732:	d054      	beq.n	80047de <HAL_FDCAN_Init+0x19e>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004734:	6822      	ldr	r2, [r4, #0]
 8004736:	6993      	ldr	r3, [r2, #24]
 8004738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473c:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800473e:	6822      	ldr	r2, [r4, #0]
 8004740:	6913      	ldr	r3, [r2, #16]
 8004742:	f043 0310 	orr.w	r3, r3, #16
 8004746:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004748:	68e3      	ldr	r3, [r4, #12]
 800474a:	2b03      	cmp	r3, #3
 800474c:	d122      	bne.n	8004794 <HAL_FDCAN_Init+0x154>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800474e:	6822      	ldr	r2, [r4, #0]
 8004750:	6993      	ldr	r3, [r2, #24]
 8004752:	f043 0320 	orr.w	r3, r3, #32
 8004756:	6193      	str	r3, [r2, #24]
 8004758:	e01c      	b.n	8004794 <HAL_FDCAN_Init+0x154>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800475a:	6862      	ldr	r2, [r4, #4]
 800475c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004760:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8004764:	e7b6      	b.n	80046d4 <HAL_FDCAN_Init+0x94>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004766:	6822      	ldr	r2, [r4, #0]
 8004768:	6993      	ldr	r3, [r2, #24]
 800476a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800476e:	6193      	str	r3, [r2, #24]
 8004770:	e7b8      	b.n	80046e4 <HAL_FDCAN_Init+0xa4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004772:	6822      	ldr	r2, [r4, #0]
 8004774:	6993      	ldr	r3, [r2, #24]
 8004776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800477a:	6193      	str	r3, [r2, #24]
 800477c:	e7ba      	b.n	80046f4 <HAL_FDCAN_Init+0xb4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800477e:	6822      	ldr	r2, [r4, #0]
 8004780:	6993      	ldr	r3, [r2, #24]
 8004782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004786:	6193      	str	r3, [r2, #24]
 8004788:	e7bc      	b.n	8004704 <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800478a:	6822      	ldr	r2, [r4, #0]
 800478c:	6993      	ldr	r3, [r2, #24]
 800478e:	f043 0304 	orr.w	r3, r3, #4
 8004792:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004794:	69a3      	ldr	r3, [r4, #24]
 8004796:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004798:	69e3      	ldr	r3, [r4, #28]
 800479a:	3b01      	subs	r3, #1
 800479c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800479e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047a2:	6a22      	ldr	r2, [r4, #32]
 80047a4:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047a6:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80047a8:	6962      	ldr	r2, [r4, #20]
 80047aa:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047ac:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047b2:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80047b4:	68a3      	ldr	r3, [r4, #8]
 80047b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ba:	d016      	beq.n	80047ea <HAL_FDCAN_Init+0x1aa>
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80047bc:	6822      	ldr	r2, [r4, #0]
 80047be:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80047c2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80047c4:	430b      	orrs	r3, r1
 80047c6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80047ca:	4620      	mov	r0, r4
 80047cc:	f7ff fef2 	bl	80045b4 <FDCAN_CalcultateRamBlockAddresses>
  hfdcan->LatestTxFifoQRequest = 0U;
 80047d0:	2000      	movs	r0, #0
 80047d2:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80047d4:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return HAL_OK;
 80047dc:	e752      	b.n	8004684 <HAL_FDCAN_Init+0x44>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80047de:	6822      	ldr	r2, [r4, #0]
 80047e0:	6993      	ldr	r3, [r2, #24]
 80047e2:	f043 0320 	orr.w	r3, r3, #32
 80047e6:	6193      	str	r3, [r2, #24]
 80047e8:	e7d4      	b.n	8004794 <HAL_FDCAN_Init+0x154>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80047ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047ec:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80047ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80047f0:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80047f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80047f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80047f8:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80047fa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80047fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004800:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004802:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004804:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004808:	60cb      	str	r3, [r1, #12]
 800480a:	e7d7      	b.n	80047bc <HAL_FDCAN_Init+0x17c>
    return HAL_ERROR;
 800480c:	2001      	movs	r0, #1
}
 800480e:	4770      	bx	lr
 8004810:	40006400 	.word	0x40006400

08004814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004816:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8004818:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800481a:	e062      	b.n	80048e2 <HAL_GPIO_Init+0xce>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800481c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800481e:	005e      	lsls	r6, r3, #1
 8004820:	2403      	movs	r4, #3
 8004822:	40b4      	lsls	r4, r6
 8004824:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004828:	68cc      	ldr	r4, [r1, #12]
 800482a:	40b4      	lsls	r4, r6
 800482c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800482e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004830:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004832:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004836:	684c      	ldr	r4, [r1, #4]
 8004838:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800483c:	409c      	lsls	r4, r3
 800483e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8004842:	6044      	str	r4, [r0, #4]
 8004844:	e05e      	b.n	8004904 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004846:	08dd      	lsrs	r5, r3, #3
 8004848:	3508      	adds	r5, #8
 800484a:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800484e:	f003 0407 	and.w	r4, r3, #7
 8004852:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004856:	240f      	movs	r4, #15
 8004858:	fa04 f40c 	lsl.w	r4, r4, ip
 800485c:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004860:	690c      	ldr	r4, [r1, #16]
 8004862:	fa04 f40c 	lsl.w	r4, r4, ip
 8004866:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 800486a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800486e:	e060      	b.n	8004932 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004870:	2405      	movs	r4, #5
 8004872:	e000      	b.n	8004876 <HAL_GPIO_Init+0x62>
 8004874:	2400      	movs	r4, #0
 8004876:	fa04 f40e 	lsl.w	r4, r4, lr
 800487a:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800487c:	f10c 0c02 	add.w	ip, ip, #2
 8004880:	4d55      	ldr	r5, [pc, #340]	; (80049d8 <HAL_GPIO_Init+0x1c4>)
 8004882:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004886:	4c55      	ldr	r4, [pc, #340]	; (80049dc <HAL_GPIO_Init+0x1c8>)
 8004888:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800488a:	43d4      	mvns	r4, r2
 800488c:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004890:	684f      	ldr	r7, [r1, #4]
 8004892:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8004896:	d001      	beq.n	800489c <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8004898:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800489c:	4d4f      	ldr	r5, [pc, #316]	; (80049dc <HAL_GPIO_Init+0x1c8>)
 800489e:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 80048a0:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80048a2:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048a6:	684f      	ldr	r7, [r1, #4]
 80048a8:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 80048ac:	d001      	beq.n	80048b2 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 80048ae:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80048b2:	4d4a      	ldr	r5, [pc, #296]	; (80049dc <HAL_GPIO_Init+0x1c8>)
 80048b4:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 80048b6:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80048b8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048bc:	684f      	ldr	r7, [r1, #4]
 80048be:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80048c2:	d001      	beq.n	80048c8 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 80048c4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80048c8:	4d44      	ldr	r5, [pc, #272]	; (80049dc <HAL_GPIO_Init+0x1c8>)
 80048ca:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80048cc:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80048ce:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048d0:	684e      	ldr	r6, [r1, #4]
 80048d2:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80048d6:	d001      	beq.n	80048dc <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 80048d8:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 80048dc:	4a3f      	ldr	r2, [pc, #252]	; (80049dc <HAL_GPIO_Init+0x1c8>)
 80048de:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 80048e0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048e2:	680a      	ldr	r2, [r1, #0]
 80048e4:	fa32 f403 	lsrs.w	r4, r2, r3
 80048e8:	d074      	beq.n	80049d4 <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048ea:	f04f 0c01 	mov.w	ip, #1
 80048ee:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80048f2:	ea1c 0202 	ands.w	r2, ip, r2
 80048f6:	d0f3      	beq.n	80048e0 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048f8:	684c      	ldr	r4, [r1, #4]
 80048fa:	f004 0403 	and.w	r4, r4, #3
 80048fe:	3c01      	subs	r4, #1
 8004900:	2c01      	cmp	r4, #1
 8004902:	d98b      	bls.n	800481c <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004904:	684c      	ldr	r4, [r1, #4]
 8004906:	f004 0403 	and.w	r4, r4, #3
 800490a:	2c03      	cmp	r4, #3
 800490c:	d00c      	beq.n	8004928 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800490e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004910:	005d      	lsls	r5, r3, #1
 8004912:	f04f 0c03 	mov.w	ip, #3
 8004916:	fa0c fc05 	lsl.w	ip, ip, r5
 800491a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800491e:	688c      	ldr	r4, [r1, #8]
 8004920:	40ac      	lsls	r4, r5
 8004922:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8004926:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004928:	684c      	ldr	r4, [r1, #4]
 800492a:	f004 0403 	and.w	r4, r4, #3
 800492e:	2c02      	cmp	r4, #2
 8004930:	d089      	beq.n	8004846 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8004932:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004934:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004938:	f04f 0c03 	mov.w	ip, #3
 800493c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004940:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004944:	684c      	ldr	r4, [r1, #4]
 8004946:	f004 0403 	and.w	r4, r4, #3
 800494a:	fa04 f40e 	lsl.w	r4, r4, lr
 800494e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8004952:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004954:	684c      	ldr	r4, [r1, #4]
 8004956:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800495a:	d0c1      	beq.n	80048e0 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800495c:	4c20      	ldr	r4, [pc, #128]	; (80049e0 <HAL_GPIO_Init+0x1cc>)
 800495e:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8004960:	f045 0501 	orr.w	r5, r5, #1
 8004964:	6625      	str	r5, [r4, #96]	; 0x60
 8004966:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8004968:	f004 0401 	and.w	r4, r4, #1
 800496c:	9401      	str	r4, [sp, #4]
 800496e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004970:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004974:	f10c 0502 	add.w	r5, ip, #2
 8004978:	4c17      	ldr	r4, [pc, #92]	; (80049d8 <HAL_GPIO_Init+0x1c4>)
 800497a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800497e:	f003 0403 	and.w	r4, r3, #3
 8004982:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004986:	240f      	movs	r4, #15
 8004988:	fa04 f40e 	lsl.w	r4, r4, lr
 800498c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004990:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004994:	f43f af6e 	beq.w	8004874 <HAL_GPIO_Init+0x60>
 8004998:	4c12      	ldr	r4, [pc, #72]	; (80049e4 <HAL_GPIO_Init+0x1d0>)
 800499a:	42a0      	cmp	r0, r4
 800499c:	d012      	beq.n	80049c4 <HAL_GPIO_Init+0x1b0>
 800499e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80049a2:	42a0      	cmp	r0, r4
 80049a4:	d010      	beq.n	80049c8 <HAL_GPIO_Init+0x1b4>
 80049a6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80049aa:	42a0      	cmp	r0, r4
 80049ac:	d00e      	beq.n	80049cc <HAL_GPIO_Init+0x1b8>
 80049ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80049b2:	42a0      	cmp	r0, r4
 80049b4:	d00c      	beq.n	80049d0 <HAL_GPIO_Init+0x1bc>
 80049b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80049ba:	42a0      	cmp	r0, r4
 80049bc:	f43f af58 	beq.w	8004870 <HAL_GPIO_Init+0x5c>
 80049c0:	2406      	movs	r4, #6
 80049c2:	e758      	b.n	8004876 <HAL_GPIO_Init+0x62>
 80049c4:	2401      	movs	r4, #1
 80049c6:	e756      	b.n	8004876 <HAL_GPIO_Init+0x62>
 80049c8:	2402      	movs	r4, #2
 80049ca:	e754      	b.n	8004876 <HAL_GPIO_Init+0x62>
 80049cc:	2403      	movs	r4, #3
 80049ce:	e752      	b.n	8004876 <HAL_GPIO_Init+0x62>
 80049d0:	2404      	movs	r4, #4
 80049d2:	e750      	b.n	8004876 <HAL_GPIO_Init+0x62>
  }
}
 80049d4:	b003      	add	sp, #12
 80049d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d8:	40010000 	.word	0x40010000
 80049dc:	40010400 	.word	0x40010400
 80049e0:	40021000 	.word	0x40021000
 80049e4:	48000400 	.word	0x48000400

080049e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049e8:	b10a      	cbz	r2, 80049ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049ea:	6181      	str	r1, [r0, #24]
 80049ec:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049ee:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80049f0:	4770      	bx	lr

080049f2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049f2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049f4:	ea01 0203 	and.w	r2, r1, r3
 80049f8:	ea21 0103 	bic.w	r1, r1, r3
 80049fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004a00:	6181      	str	r1, [r0, #24]
}
 8004a02:	4770      	bx	lr

08004a04 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a04:	6803      	ldr	r3, [r0, #0]
 8004a06:	699a      	ldr	r2, [r3, #24]
 8004a08:	f012 0f02 	tst.w	r2, #2
 8004a0c:	d001      	beq.n	8004a12 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a0e:	2200      	movs	r2, #0
 8004a10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a12:	6803      	ldr	r3, [r0, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	f012 0f01 	tst.w	r2, #1
 8004a1a:	d103      	bne.n	8004a24 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	619a      	str	r2, [r3, #24]
  }
}
 8004a24:	4770      	bx	lr

08004a26 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004a26:	f011 0f01 	tst.w	r1, #1
 8004a2a:	d009      	beq.n	8004a40 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a2c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004a30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a34:	2b28      	cmp	r3, #40	; 0x28
 8004a36:	d001      	beq.n	8004a3c <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a38:	23f2      	movs	r3, #242	; 0xf2
 8004a3a:	e002      	b.n	8004a42 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004a3c:	2342      	movs	r3, #66	; 0x42
 8004a3e:	e000      	b.n	8004a42 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8004a40:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004a42:	f011 0f02 	tst.w	r1, #2
 8004a46:	d009      	beq.n	8004a5c <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004a48:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a4c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004a50:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8004a54:	2a28      	cmp	r2, #40	; 0x28
 8004a56:	d010      	beq.n	8004a7a <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a58:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004a5c:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8004a60:	d10d      	bne.n	8004a7e <I2C_Disable_IRQ+0x58>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004a62:	2910      	cmp	r1, #16
 8004a64:	d00e      	beq.n	8004a84 <I2C_Disable_IRQ+0x5e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004a66:	2920      	cmp	r1, #32
 8004a68:	d00f      	beq.n	8004a8a <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004a6a:	2940      	cmp	r1, #64	; 0x40
 8004a6c:	d010      	beq.n	8004a90 <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004a6e:	6801      	ldr	r1, [r0, #0]
 8004a70:	680a      	ldr	r2, [r1, #0]
 8004a72:	ea22 0303 	bic.w	r3, r2, r3
 8004a76:	600b      	str	r3, [r1, #0]
}
 8004a78:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004a7a:	4663      	mov	r3, ip
 8004a7c:	e7ee      	b.n	8004a5c <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a7e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004a82:	e7ee      	b.n	8004a62 <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004a84:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004a88:	e7ed      	b.n	8004a66 <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 8004a8a:	f043 0320 	orr.w	r3, r3, #32
 8004a8e:	e7ec      	b.n	8004a6a <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 8004a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a94:	e7eb      	b.n	8004a6e <I2C_Disable_IRQ+0x48>

08004a96 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004a96:	2800      	cmp	r0, #0
 8004a98:	d059      	beq.n	8004b4e <HAL_I2C_Init+0xb8>
{
 8004a9a:	b510      	push	{r4, lr}
 8004a9c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a9e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d043      	beq.n	8004b2e <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004aa6:	2324      	movs	r3, #36	; 0x24
 8004aa8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004aac:	6822      	ldr	r2, [r4, #0]
 8004aae:	6813      	ldr	r3, [r2, #0]
 8004ab0:	f023 0301 	bic.w	r3, r3, #1
 8004ab4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ab6:	6863      	ldr	r3, [r4, #4]
 8004ab8:	6822      	ldr	r2, [r4, #0]
 8004aba:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004abe:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ac0:	6822      	ldr	r2, [r4, #0]
 8004ac2:	6893      	ldr	r3, [r2, #8]
 8004ac4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ac8:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004aca:	68e3      	ldr	r3, [r4, #12]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d033      	beq.n	8004b38 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ad0:	68a3      	ldr	r3, [r4, #8]
 8004ad2:	6822      	ldr	r2, [r4, #0]
 8004ad4:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8004ad8:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ada:	68e3      	ldr	r3, [r4, #12]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d031      	beq.n	8004b44 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ae0:	6822      	ldr	r2, [r4, #0]
 8004ae2:	6853      	ldr	r3, [r2, #4]
 8004ae4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aec:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004aee:	6822      	ldr	r2, [r4, #0]
 8004af0:	68d3      	ldr	r3, [r2, #12]
 8004af2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004af6:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004af8:	6923      	ldr	r3, [r4, #16]
 8004afa:	6962      	ldr	r2, [r4, #20]
 8004afc:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004afe:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b00:	6822      	ldr	r2, [r4, #0]
 8004b02:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004b06:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b08:	69e3      	ldr	r3, [r4, #28]
 8004b0a:	6a21      	ldr	r1, [r4, #32]
 8004b0c:	6822      	ldr	r2, [r4, #0]
 8004b0e:	430b      	orrs	r3, r1
 8004b10:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004b12:	6822      	ldr	r2, [r4, #0]
 8004b14:	6813      	ldr	r3, [r2, #0]
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b20:	2320      	movs	r3, #32
 8004b22:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b26:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b28:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004b2c:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004b2e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004b32:	f7fd f8a5 	bl	8001c80 <HAL_I2C_MspInit>
 8004b36:	e7b6      	b.n	8004aa6 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b38:	68a3      	ldr	r3, [r4, #8]
 8004b3a:	6822      	ldr	r2, [r4, #0]
 8004b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b40:	6093      	str	r3, [r2, #8]
 8004b42:	e7ca      	b.n	8004ada <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b4a:	605a      	str	r2, [r3, #4]
 8004b4c:	e7c8      	b.n	8004ae0 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8004b4e:	2001      	movs	r0, #1
}
 8004b50:	4770      	bx	lr

08004b52 <HAL_I2C_EV_IRQHandler>:
{
 8004b52:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004b54:	6803      	ldr	r3, [r0, #0]
 8004b56:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004b58:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8004b5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004b5c:	b103      	cbz	r3, 8004b60 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8004b5e:	4798      	blx	r3
}
 8004b60:	bd08      	pop	{r3, pc}

08004b62 <HAL_I2C_SlaveTxCpltCallback>:
}
 8004b62:	4770      	bx	lr

08004b64 <HAL_I2C_SlaveRxCpltCallback>:
}
 8004b64:	4770      	bx	lr

08004b66 <I2C_ITSlaveSeqCplt>:
{
 8004b66:	b510      	push	{r4, lr}
 8004b68:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004b6a:	6803      	ldr	r3, [r0, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b6e:	2100      	movs	r1, #0
 8004b70:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004b74:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004b78:	d00e      	beq.n	8004b98 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b80:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004b82:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b29      	cmp	r3, #41	; 0x29
 8004b8a:	d00d      	beq.n	8004ba8 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b8c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b2a      	cmp	r3, #42	; 0x2a
 8004b94:	d018      	beq.n	8004bc8 <I2C_ITSlaveSeqCplt+0x62>
}
 8004b96:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004b98:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004b9c:	d0f1      	beq.n	8004b82 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	e7ec      	b.n	8004b82 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ba8:	2328      	movs	r3, #40	; 0x28
 8004baa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bae:	2321      	movs	r3, #33	; 0x21
 8004bb0:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f7ff ff36 	bl	8004a26 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	f7ff ffce 	bl	8004b62 <HAL_I2C_SlaveTxCpltCallback>
 8004bc6:	e7e6      	b.n	8004b96 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004bc8:	2328      	movs	r3, #40	; 0x28
 8004bca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bce:	2322      	movs	r3, #34	; 0x22
 8004bd0:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004bd2:	2102      	movs	r1, #2
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	f7ff ff26 	bl	8004a26 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004be0:	4620      	mov	r0, r4
 8004be2:	f7ff ffbf 	bl	8004b64 <HAL_I2C_SlaveRxCpltCallback>
}
 8004be6:	e7d6      	b.n	8004b96 <I2C_ITSlaveSeqCplt+0x30>

08004be8 <HAL_I2C_AddrCallback>:
}
 8004be8:	4770      	bx	lr

08004bea <I2C_ITAddrCplt>:
{
 8004bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bec:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004bf2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bf6:	2b28      	cmp	r3, #40	; 0x28
 8004bf8:	d006      	beq.n	8004c08 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004bfa:	6803      	ldr	r3, [r0, #0]
 8004bfc:	2208      	movs	r2, #8
 8004bfe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004c00:	2300      	movs	r3, #0
 8004c02:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8004c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8004c08:	6803      	ldr	r3, [r0, #0]
 8004c0a:	699e      	ldr	r6, [r3, #24]
 8004c0c:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004c10:	699a      	ldr	r2, [r3, #24]
 8004c12:	0c12      	lsrs	r2, r2, #16
 8004c14:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004c1e:	68df      	ldr	r7, [r3, #12]
 8004c20:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c24:	68c1      	ldr	r1, [r0, #12]
 8004c26:	2902      	cmp	r1, #2
 8004c28:	d122      	bne.n	8004c70 <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004c2a:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8004c2e:	f015 0f06 	tst.w	r5, #6
 8004c32:	d110      	bne.n	8004c56 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8004c34:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004c36:	3101      	adds	r1, #1
 8004c38:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004c3a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004c3c:	2902      	cmp	r1, #2
 8004c3e:	d1e2      	bne.n	8004c06 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8004c40:	2100      	movs	r1, #0
 8004c42:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c44:	2008      	movs	r0, #8
 8004c46:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8004c48:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c4c:	4631      	mov	r1, r6
 8004c4e:	4620      	mov	r0, r4
 8004c50:	f7ff ffca 	bl	8004be8 <HAL_I2C_AddrCallback>
 8004c54:	e7d7      	b.n	8004c06 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004c56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c5a:	f7ff fee4 	bl	8004a26 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c64:	463a      	mov	r2, r7
 8004c66:	4631      	mov	r1, r6
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f7ff ffbd 	bl	8004be8 <HAL_I2C_AddrCallback>
 8004c6e:	e7ca      	b.n	8004c06 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004c70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c74:	f7ff fed7 	bl	8004a26 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c7e:	462a      	mov	r2, r5
 8004c80:	4631      	mov	r1, r6
 8004c82:	4620      	mov	r0, r4
 8004c84:	f7ff ffb0 	bl	8004be8 <HAL_I2C_AddrCallback>
 8004c88:	e7bd      	b.n	8004c06 <I2C_ITAddrCplt+0x1c>

08004c8a <HAL_I2C_ListenCpltCallback>:
}
 8004c8a:	4770      	bx	lr

08004c8c <I2C_ITListenCplt>:
{
 8004c8c:	b510      	push	{r4, lr}
 8004c8e:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c90:	4b17      	ldr	r3, [pc, #92]	; (8004cf0 <I2C_ITListenCplt+0x64>)
 8004c92:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c94:	2300      	movs	r3, #0
 8004c96:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c9e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004ca2:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004ca4:	f011 0f04 	tst.w	r1, #4
 8004ca8:	d013      	beq.n	8004cd2 <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004caa:	6803      	ldr	r3, [r0, #0]
 8004cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004cb0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004cb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8004cb8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8004cba:	b153      	cbz	r3, 8004cd2 <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8004cc0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004ccc:	f043 0304 	orr.w	r3, r3, #4
 8004cd0:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004cd2:	f248 0103 	movw	r1, #32771	; 0x8003
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	f7ff fea5 	bl	8004a26 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	2210      	movs	r2, #16
 8004ce0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f7ff ffce 	bl	8004c8a <HAL_I2C_ListenCpltCallback>
}
 8004cee:	bd10      	pop	{r4, pc}
 8004cf0:	ffff0000 	.word	0xffff0000

08004cf4 <HAL_I2C_ErrorCallback>:
}
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_I2C_AbortCpltCallback>:
}
 8004cf6:	4770      	bx	lr

08004cf8 <I2C_TreatErrorCallback>:
{
 8004cf8:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cfa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b60      	cmp	r3, #96	; 0x60
 8004d02:	d006      	beq.n	8004d12 <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d04:	2300      	movs	r3, #0
 8004d06:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d08:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004d0c:	f7ff fff2 	bl	8004cf4 <HAL_I2C_ErrorCallback>
}
 8004d10:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004d12:	2320      	movs	r3, #32
 8004d14:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d1c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d20:	f7ff ffe9 	bl	8004cf6 <HAL_I2C_AbortCpltCallback>
 8004d24:	e7f4      	b.n	8004d10 <I2C_TreatErrorCallback+0x18>
	...

08004d28 <I2C_ITError>:
{
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004d2c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d30:	2000      	movs	r0, #0
 8004d32:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d36:	4a3b      	ldr	r2, [pc, #236]	; (8004e24 <I2C_ITError+0xfc>)
 8004d38:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004d3a:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8004d3c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004d42:	3b28      	subs	r3, #40	; 0x28
 8004d44:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d819      	bhi.n	8004d7e <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d4a:	2103      	movs	r1, #3
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f7ff fe6a 	bl	8004a26 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004d52:	2328      	movs	r3, #40	; 0x28
 8004d54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004d58:	4b33      	ldr	r3, [pc, #204]	; (8004e28 <I2C_ITError+0x100>)
 8004d5a:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8004d5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004d5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d60:	b11a      	cbz	r2, 8004d6a <I2C_ITError+0x42>
 8004d62:	2b11      	cmp	r3, #17
 8004d64:	d01b      	beq.n	8004d9e <I2C_ITError+0x76>
 8004d66:	2b21      	cmp	r3, #33	; 0x21
 8004d68:	d019      	beq.n	8004d9e <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004d6a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004d6c:	b11a      	cbz	r2, 8004d76 <I2C_ITError+0x4e>
 8004d6e:	2b12      	cmp	r3, #18
 8004d70:	d036      	beq.n	8004de0 <I2C_ITError+0xb8>
 8004d72:	2b22      	cmp	r3, #34	; 0x22
 8004d74:	d034      	beq.n	8004de0 <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 8004d76:	4620      	mov	r0, r4
 8004d78:	f7ff ffbe 	bl	8004cf8 <I2C_TreatErrorCallback>
}
 8004d7c:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d7e:	f248 0103 	movw	r1, #32771	; 0x8003
 8004d82:	4620      	mov	r0, r4
 8004d84:	f7ff fe4f 	bl	8004a26 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004d88:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b60      	cmp	r3, #96	; 0x60
 8004d90:	d002      	beq.n	8004d98 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 8004d92:	2320      	movs	r3, #32
 8004d94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	6363      	str	r3, [r4, #52]	; 0x34
 8004d9c:	e7de      	b.n	8004d5c <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004da6:	d003      	beq.n	8004db0 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dae:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004db0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004db2:	f7ff fbfc 	bl	80045ae <HAL_DMA_GetState>
 8004db6:	2801      	cmp	r0, #1
 8004db8:	d00e      	beq.n	8004dd8 <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004dba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004dbc:	4a1b      	ldr	r2, [pc, #108]	; (8004e2c <I2C_ITError+0x104>)
 8004dbe:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004dc6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004dc8:	f7ff fb50 	bl	800446c <HAL_DMA_Abort_IT>
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	d0d5      	beq.n	8004d7c <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004dd0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004dd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004dd4:	4798      	blx	r3
 8004dd6:	e7d1      	b.n	8004d7c <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f7ff ff8d 	bl	8004cf8 <I2C_TreatErrorCallback>
 8004dde:	e7cd      	b.n	8004d7c <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004de8:	d003      	beq.n	8004df2 <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004df0:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004df2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004df4:	f7ff fbdb 	bl	80045ae <HAL_DMA_GetState>
 8004df8:	2801      	cmp	r0, #1
 8004dfa:	d00e      	beq.n	8004e1a <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004dfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004dfe:	4a0b      	ldr	r2, [pc, #44]	; (8004e2c <I2C_ITError+0x104>)
 8004e00:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8004e02:	2300      	movs	r3, #0
 8004e04:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e08:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004e0a:	f7ff fb2f 	bl	800446c <HAL_DMA_Abort_IT>
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	d0b4      	beq.n	8004d7c <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004e14:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004e16:	4798      	blx	r3
 8004e18:	e7b0      	b.n	8004d7c <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f7ff ff6c 	bl	8004cf8 <I2C_TreatErrorCallback>
 8004e20:	e7ac      	b.n	8004d7c <I2C_ITError+0x54>
 8004e22:	bf00      	nop
 8004e24:	ffff0000 	.word	0xffff0000
 8004e28:	08004f99 	.word	0x08004f99
 8004e2c:	08005151 	.word	0x08005151

08004e30 <I2C_ITSlaveCplt>:
{
 8004e30:	b570      	push	{r4, r5, r6, lr}
 8004e32:	4604      	mov	r4, r0
 8004e34:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004e36:	6802      	ldr	r2, [r0, #0]
 8004e38:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e3a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004e3e:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e40:	2120      	movs	r1, #32
 8004e42:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e44:	2b21      	cmp	r3, #33	; 0x21
 8004e46:	d00d      	beq.n	8004e64 <I2C_ITSlaveCplt+0x34>
 8004e48:	2b29      	cmp	r3, #41	; 0x29
 8004e4a:	d00b      	beq.n	8004e64 <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e4c:	2b22      	cmp	r3, #34	; 0x22
 8004e4e:	d001      	beq.n	8004e54 <I2C_ITSlaveCplt+0x24>
 8004e50:	2b2a      	cmp	r3, #42	; 0x2a
 8004e52:	d10e      	bne.n	8004e72 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004e54:	f248 0102 	movw	r1, #32770	; 0x8002
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f7ff fde4 	bl	8004a26 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e5e:	2322      	movs	r3, #34	; 0x22
 8004e60:	6323      	str	r3, [r4, #48]	; 0x30
 8004e62:	e006      	b.n	8004e72 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004e64:	f248 0101 	movw	r1, #32769	; 0x8001
 8004e68:	4620      	mov	r0, r4
 8004e6a:	f7ff fddc 	bl	8004a26 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e6e:	2321      	movs	r3, #33	; 0x21
 8004e70:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004e72:	6822      	ldr	r2, [r4, #0]
 8004e74:	6853      	ldr	r3, [r2, #4]
 8004e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e7a:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8004e7c:	6822      	ldr	r2, [r4, #0]
 8004e7e:	6853      	ldr	r3, [r2, #4]
 8004e80:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004e84:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004e88:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004e8c:	f023 0301 	bic.w	r3, r3, #1
 8004e90:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8004e92:	4620      	mov	r0, r4
 8004e94:	f7ff fdb6 	bl	8004a04 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004e98:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8004e9c:	d040      	beq.n	8004f20 <I2C_ITSlaveCplt+0xf0>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004e9e:	6822      	ldr	r2, [r4, #0]
 8004ea0:	6813      	ldr	r3, [r2, #0]
 8004ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ea6:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8004ea8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004eaa:	b11b      	cbz	r3, 8004eb4 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004eb4:	f015 0f04 	tst.w	r5, #4
 8004eb8:	d011      	beq.n	8004ede <I2C_ITSlaveCplt+0xae>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004eba:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ec4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ec8:	3301      	adds	r3, #1
 8004eca:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8004ecc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004ece:	b133      	cbz	r3, 8004ede <I2C_ITSlaveCplt+0xae>
      hi2c->XferSize--;
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004ed4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8004ede:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	b11b      	cbz	r3, 8004eec <I2C_ITSlaveCplt+0xbc>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ee4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004ee6:	f043 0304 	orr.w	r3, r3, #4
 8004eea:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eec:	2300      	movs	r3, #0
 8004eee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004ef2:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ef4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004ef6:	bb1b      	cbnz	r3, 8004f40 <I2C_ITSlaveCplt+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004ef8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004efa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004efe:	d12d      	bne.n	8004f5c <I2C_ITSlaveCplt+0x12c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f00:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b22      	cmp	r3, #34	; 0x22
 8004f08:	d038      	beq.n	8004f7c <I2C_ITSlaveCplt+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004f0a:	2320      	movs	r3, #32
 8004f0c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f10:	2300      	movs	r3, #0
 8004f12:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f14:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f7ff fe22 	bl	8004b62 <HAL_I2C_SlaveTxCpltCallback>
}
 8004f1e:	e02c      	b.n	8004f7a <I2C_ITSlaveCplt+0x14a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004f20:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8004f24:	d0c6      	beq.n	8004eb4 <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f26:	6822      	ldr	r2, [r4, #0]
 8004f28:	6813      	ldr	r3, [r2, #0]
 8004f2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f2e:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8004f30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0be      	beq.n	8004eb4 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004f3e:	e7b9      	b.n	8004eb4 <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f40:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004f42:	4620      	mov	r0, r4
 8004f44:	f7ff fef0 	bl	8004d28 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f48:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b28      	cmp	r3, #40	; 0x28
 8004f50:	d113      	bne.n	8004f7a <I2C_ITSlaveCplt+0x14a>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004f52:	4629      	mov	r1, r5
 8004f54:	4620      	mov	r0, r4
 8004f56:	f7ff fe99 	bl	8004c8c <I2C_ITListenCplt>
 8004f5a:	e00e      	b.n	8004f7a <I2C_ITSlaveCplt+0x14a>
    I2C_ITSlaveSeqCplt(hi2c);
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	f7ff fe02 	bl	8004b66 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f62:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <I2C_ITSlaveCplt+0x164>)
 8004f64:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004f66:	2320      	movs	r3, #32
 8004f68:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f70:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f74:	4620      	mov	r0, r4
 8004f76:	f7ff fe88 	bl	8004c8a <HAL_I2C_ListenCpltCallback>
}
 8004f7a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004f7c:	2320      	movs	r3, #32
 8004f7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f82:	2300      	movs	r3, #0
 8004f84:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f86:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f7ff fdea 	bl	8004b64 <HAL_I2C_SlaveRxCpltCallback>
 8004f90:	e7f3      	b.n	8004f7a <I2C_ITSlaveCplt+0x14a>
 8004f92:	bf00      	nop
 8004f94:	ffff0000 	.word	0xffff0000

08004f98 <I2C_Slave_ISR_IT>:
{
 8004f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8004f9a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8004f9c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	f000 809e 	beq.w	80050e2 <I2C_Slave_ISR_IT+0x14a>
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	460d      	mov	r5, r1
 8004faa:	4616      	mov	r6, r2
 8004fac:	2301      	movs	r3, #1
 8004fae:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004fb2:	f011 0f20 	tst.w	r1, #32
 8004fb6:	d002      	beq.n	8004fbe <I2C_Slave_ISR_IT+0x26>
 8004fb8:	f012 0f20 	tst.w	r2, #32
 8004fbc:	d119      	bne.n	8004ff2 <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004fbe:	f015 0f10 	tst.w	r5, #16
 8004fc2:	d03e      	beq.n	8005042 <I2C_Slave_ISR_IT+0xaa>
 8004fc4:	f016 0f10 	tst.w	r6, #16
 8004fc8:	d03b      	beq.n	8005042 <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 8004fca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	bb43      	cbnz	r3, 8005022 <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004fd0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b28      	cmp	r3, #40	; 0x28
 8004fd8:	d00e      	beq.n	8004ff8 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004fda:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b29      	cmp	r3, #41	; 0x29
 8004fe2:	d011      	beq.n	8005008 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	2210      	movs	r2, #16
 8004fe8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8004fea:	2000      	movs	r0, #0
 8004fec:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8004ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004ff2:	f7ff ff1d 	bl	8004e30 <I2C_ITSlaveCplt>
 8004ff6:	e7e2      	b.n	8004fbe <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004ff8:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8004ffc:	d1ed      	bne.n	8004fda <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ffe:	4629      	mov	r1, r5
 8005000:	4620      	mov	r0, r4
 8005002:	f7ff fe43 	bl	8004c8c <I2C_ITListenCplt>
 8005006:	e7f0      	b.n	8004fea <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005008:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 800500c:	d0ea      	beq.n	8004fe4 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	2210      	movs	r2, #16
 8005012:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8005014:	4620      	mov	r0, r4
 8005016:	f7ff fcf5 	bl	8004a04 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 800501a:	4620      	mov	r0, r4
 800501c:	f7ff fda3 	bl	8004b66 <I2C_ITSlaveSeqCplt>
 8005020:	e7e3      	b.n	8004fea <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	2210      	movs	r2, #16
 8005026:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005028:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800502a:	f043 0304 	orr.w	r3, r3, #4
 800502e:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005030:	b117      	cbz	r7, 8005038 <I2C_Slave_ISR_IT+0xa0>
 8005032:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8005036:	d1d8      	bne.n	8004fea <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005038:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800503a:	4620      	mov	r0, r4
 800503c:	f7ff fe74 	bl	8004d28 <I2C_ITError>
 8005040:	e7d3      	b.n	8004fea <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005042:	f015 0f04 	tst.w	r5, #4
 8005046:	d01f      	beq.n	8005088 <I2C_Slave_ISR_IT+0xf0>
 8005048:	f016 0f04 	tst.w	r6, #4
 800504c:	d01c      	beq.n	8005088 <I2C_Slave_ISR_IT+0xf0>
    if (hi2c->XferCount > 0U)
 800504e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005050:	b29b      	uxth	r3, r3
 8005052:	b173      	cbz	r3, 8005072 <I2C_Slave_ISR_IT+0xda>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800505a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800505c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800505e:	3301      	adds	r3, #1
 8005060:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005062:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005064:	3b01      	subs	r3, #1
 8005066:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005068:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29b      	uxth	r3, r3
 8005070:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8005072:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1b7      	bne.n	8004fea <I2C_Slave_ISR_IT+0x52>
 800507a:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 800507e:	d0b4      	beq.n	8004fea <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8005080:	4620      	mov	r0, r4
 8005082:	f7ff fd70 	bl	8004b66 <I2C_ITSlaveSeqCplt>
 8005086:	e7b0      	b.n	8004fea <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005088:	f015 0f08 	tst.w	r5, #8
 800508c:	d002      	beq.n	8005094 <I2C_Slave_ISR_IT+0xfc>
 800508e:	f016 0f08 	tst.w	r6, #8
 8005092:	d118      	bne.n	80050c6 <I2C_Slave_ISR_IT+0x12e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005094:	f015 0f02 	tst.w	r5, #2
 8005098:	d0a7      	beq.n	8004fea <I2C_Slave_ISR_IT+0x52>
 800509a:	f016 0f02 	tst.w	r6, #2
 800509e:	d0a4      	beq.n	8004fea <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 80050a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	b1a3      	cbz	r3, 80050d0 <I2C_Slave_ISR_IT+0x138>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	7812      	ldrb	r2, [r2, #0]
 80050ac:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80050ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050b0:	3301      	adds	r3, #1
 80050b2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80050b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80050be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80050c0:	3b01      	subs	r3, #1
 80050c2:	8523      	strh	r3, [r4, #40]	; 0x28
 80050c4:	e791      	b.n	8004fea <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80050c6:	4629      	mov	r1, r5
 80050c8:	4620      	mov	r0, r4
 80050ca:	f7ff fd8e 	bl	8004bea <I2C_ITAddrCplt>
 80050ce:	e78c      	b.n	8004fea <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80050d0:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 80050d4:	d001      	beq.n	80050da <I2C_Slave_ISR_IT+0x142>
 80050d6:	2f00      	cmp	r7, #0
 80050d8:	d187      	bne.n	8004fea <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 80050da:	4620      	mov	r0, r4
 80050dc:	f7ff fd43 	bl	8004b66 <I2C_ITSlaveSeqCplt>
 80050e0:	e783      	b.n	8004fea <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 80050e2:	2002      	movs	r0, #2
 80050e4:	e784      	b.n	8004ff0 <I2C_Slave_ISR_IT+0x58>

080050e6 <HAL_I2C_ER_IRQHandler>:
{
 80050e6:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80050e8:	6802      	ldr	r2, [r0, #0]
 80050ea:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80050ec:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80050ee:	f413 7f80 	tst.w	r3, #256	; 0x100
 80050f2:	d009      	beq.n	8005108 <HAL_I2C_ER_IRQHandler+0x22>
 80050f4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80050f8:	d006      	beq.n	8005108 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80050fa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80050fc:	f044 0401 	orr.w	r4, r4, #1
 8005100:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005102:	f44f 7480 	mov.w	r4, #256	; 0x100
 8005106:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005108:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800510c:	d00a      	beq.n	8005124 <HAL_I2C_ER_IRQHandler+0x3e>
 800510e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005112:	d007      	beq.n	8005124 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005114:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005116:	f042 0208 	orr.w	r2, r2, #8
 800511a:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800511c:	6802      	ldr	r2, [r0, #0]
 800511e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005122:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005124:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005128:	d00a      	beq.n	8005140 <HAL_I2C_ER_IRQHandler+0x5a>
 800512a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800512e:	d007      	beq.n	8005140 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005130:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005132:	f043 0302 	orr.w	r3, r3, #2
 8005136:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005138:	6803      	ldr	r3, [r0, #0]
 800513a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800513e:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8005140:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005142:	f011 0f0b 	tst.w	r1, #11
 8005146:	d100      	bne.n	800514a <HAL_I2C_ER_IRQHandler+0x64>
}
 8005148:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 800514a:	f7ff fded 	bl	8004d28 <I2C_ITError>
}
 800514e:	e7fb      	b.n	8005148 <HAL_I2C_ER_IRQHandler+0x62>

08005150 <I2C_DMAAbort>:
{
 8005150:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005152:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 8005154:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005156:	b10b      	cbz	r3, 800515c <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005158:	2200      	movs	r2, #0
 800515a:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 800515c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800515e:	b10b      	cbz	r3, 8005164 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005160:	2200      	movs	r2, #0
 8005162:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 8005164:	f7ff fdc8 	bl	8004cf8 <I2C_TreatErrorCallback>
}
 8005168:	bd08      	pop	{r3, pc}

0800516a <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800516a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b20      	cmp	r3, #32
 8005172:	d124      	bne.n	80051be <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005174:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005178:	2b01      	cmp	r3, #1
 800517a:	d022      	beq.n	80051c2 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800517c:	2301      	movs	r3, #1
 800517e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005182:	2324      	movs	r3, #36	; 0x24
 8005184:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005188:	6802      	ldr	r2, [r0, #0]
 800518a:	6813      	ldr	r3, [r2, #0]
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005192:	6802      	ldr	r2, [r0, #0]
 8005194:	6813      	ldr	r3, [r2, #0]
 8005196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800519a:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800519c:	6802      	ldr	r2, [r0, #0]
 800519e:	6813      	ldr	r3, [r2, #0]
 80051a0:	4319      	orrs	r1, r3
 80051a2:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051a4:	6802      	ldr	r2, [r0, #0]
 80051a6:	6813      	ldr	r3, [r2, #0]
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051ae:	2320      	movs	r3, #32
 80051b0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051b4:	2300      	movs	r3, #0
 80051b6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80051ba:	4618      	mov	r0, r3
 80051bc:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80051be:	2002      	movs	r0, #2
 80051c0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80051c2:	2002      	movs	r0, #2
  }
}
 80051c4:	4770      	bx	lr

080051c6 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b20      	cmp	r3, #32
 80051ce:	d122      	bne.n	8005216 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051d0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d020      	beq.n	800521a <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80051d8:	2301      	movs	r3, #1
 80051da:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051de:	2324      	movs	r3, #36	; 0x24
 80051e0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051e4:	6802      	ldr	r2, [r0, #0]
 80051e6:	6813      	ldr	r3, [r2, #0]
 80051e8:	f023 0301 	bic.w	r3, r3, #1
 80051ec:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051ee:	6802      	ldr	r2, [r0, #0]
 80051f0:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051f6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051fa:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051fc:	6802      	ldr	r2, [r0, #0]
 80051fe:	6813      	ldr	r3, [r2, #0]
 8005200:	f043 0301 	orr.w	r3, r3, #1
 8005204:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005206:	2320      	movs	r3, #32
 8005208:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800520c:	2300      	movs	r3, #0
 800520e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005212:	4618      	mov	r0, r3
 8005214:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005216:	2002      	movs	r0, #2
 8005218:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800521a:	2002      	movs	r0, #2
  }
}
 800521c:	4770      	bx	lr

0800521e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800521e:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005220:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005224:	d043      	beq.n	80052ae <HAL_PCD_EP_DB_Receive+0x90>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005226:	6804      	ldr	r4, [r0, #0]
 8005228:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800522c:	f891 c000 	ldrb.w	ip, [r1]
 8005230:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 8005234:	fa1e f383 	uxtah	r3, lr, r3
 8005238:	4423      	add	r3, r4
 800523a:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 800523e:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8005242:	698b      	ldr	r3, [r1, #24]
 8005244:	42a3      	cmp	r3, r4
 8005246:	d328      	bcc.n	800529a <HAL_PCD_EP_DB_Receive+0x7c>
    {
      ep->xfer_len -= count;
 8005248:	1b1b      	subs	r3, r3, r4
 800524a:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 800524c:	698b      	ldr	r3, [r1, #24]
 800524e:	b97b      	cbnz	r3, 8005270 <HAL_PCD_EP_DB_Receive+0x52>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005250:	6805      	ldr	r5, [r0, #0]
 8005252:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8005256:	b29b      	uxth	r3, r3
 8005258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800525c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005260:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800526c:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005270:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005274:	d00e      	beq.n	8005294 <HAL_PCD_EP_DB_Receive+0x76>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005276:	6802      	ldr	r2, [r0, #0]
 8005278:	780d      	ldrb	r5, [r1, #0]
 800527a:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 800527e:	b29b      	uxth	r3, r3
 8005280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800528c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005290:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 8005294:	b924      	cbnz	r4, 80052a0 <HAL_PCD_EP_DB_Receive+0x82>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 8005296:	4620      	mov	r0, r4
 8005298:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	618b      	str	r3, [r1, #24]
 800529e:	e7d5      	b.n	800524c <HAL_PCD_EP_DB_Receive+0x2e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80052a0:	4623      	mov	r3, r4
 80052a2:	890a      	ldrh	r2, [r1, #8]
 80052a4:	6949      	ldr	r1, [r1, #20]
 80052a6:	6800      	ldr	r0, [r0, #0]
 80052a8:	f004 fa1d 	bl	80096e6 <USB_ReadPMA>
 80052ac:	e7f3      	b.n	8005296 <HAL_PCD_EP_DB_Receive+0x78>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80052ae:	6804      	ldr	r4, [r0, #0]
 80052b0:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80052b4:	f891 c000 	ldrb.w	ip, [r1]
 80052b8:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 80052bc:	fa1e f383 	uxtah	r3, lr, r3
 80052c0:	4423      	add	r3, r4
 80052c2:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	; 0x406
 80052c6:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 80052ca:	698b      	ldr	r3, [r1, #24]
 80052cc:	42a3      	cmp	r3, r4
 80052ce:	d32f      	bcc.n	8005330 <HAL_PCD_EP_DB_Receive+0x112>
      ep->xfer_len -= count;
 80052d0:	1b1b      	subs	r3, r3, r4
 80052d2:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 80052d4:	698b      	ldr	r3, [r1, #24]
 80052d6:	b97b      	cbnz	r3, 80052f8 <HAL_PCD_EP_DB_Receive+0xda>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80052d8:	6805      	ldr	r5, [r0, #0]
 80052da:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f4:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80052f8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80052fc:	d10f      	bne.n	800531e <HAL_PCD_EP_DB_Receive+0x100>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80052fe:	6802      	ldr	r2, [r0, #0]
 8005300:	f891 c000 	ldrb.w	ip, [r1]
 8005304:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8005308:	b29b      	uxth	r3, r3
 800530a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005316:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800531a:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 800531e:	2c00      	cmp	r4, #0
 8005320:	d0b9      	beq.n	8005296 <HAL_PCD_EP_DB_Receive+0x78>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005322:	4623      	mov	r3, r4
 8005324:	894a      	ldrh	r2, [r1, #10]
 8005326:	6949      	ldr	r1, [r1, #20]
 8005328:	6800      	ldr	r0, [r0, #0]
 800532a:	f004 f9dc 	bl	80096e6 <USB_ReadPMA>
 800532e:	e7b2      	b.n	8005296 <HAL_PCD_EP_DB_Receive+0x78>
      ep->xfer_len = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	618b      	str	r3, [r1, #24]
 8005334:	e7ce      	b.n	80052d4 <HAL_PCD_EP_DB_Receive+0xb6>

08005336 <HAL_PCD_Init>:
  if (hpcd == NULL)
 8005336:	2800      	cmp	r0, #0
 8005338:	d06d      	beq.n	8005416 <HAL_PCD_Init+0xe0>
{
 800533a:	b530      	push	{r4, r5, lr}
 800533c:	b087      	sub	sp, #28
 800533e:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005340:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8005344:	b13b      	cbz	r3, 8005356 <HAL_PCD_Init+0x20>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8005346:	2303      	movs	r3, #3
 8005348:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 800534c:	6820      	ldr	r0, [r4, #0]
 800534e:	f003 faa8 	bl	80088a2 <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005352:	2300      	movs	r3, #0
 8005354:	e01f      	b.n	8005396 <HAL_PCD_Init+0x60>
    hpcd->Lock = HAL_UNLOCKED;
 8005356:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 800535a:	f005 fc05 	bl	800ab68 <HAL_PCD_MspInit>
 800535e:	e7f2      	b.n	8005346 <HAL_PCD_Init+0x10>
    hpcd->IN_ep[i].is_in = 1U;
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005366:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800536a:	2001      	movs	r0, #1
 800536c:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 800536e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005372:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005376:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800537a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800537e:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005380:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8005384:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8005388:	2000      	movs	r0, #0
 800538a:	f88c 0003 	strb.w	r0, [ip, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 800538e:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005390:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8005392:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005394:	b2d3      	uxtb	r3, r2
 8005396:	6860      	ldr	r0, [r4, #4]
 8005398:	4283      	cmp	r3, r0
 800539a:	d3e1      	bcc.n	8005360 <HAL_PCD_Init+0x2a>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800539c:	2300      	movs	r3, #0
 800539e:	e016      	b.n	80053ce <HAL_PCD_Init+0x98>
    hpcd->OUT_ep[i].is_in = 0U;
 80053a0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80053a4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80053a8:	2100      	movs	r1, #0
 80053aa:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80053ae:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053b2:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80053b6:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053ba:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053be:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80053c2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80053c6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053ca:	3301      	adds	r3, #1
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	4298      	cmp	r0, r3
 80053d0:	d8e6      	bhi.n	80053a0 <HAL_PCD_Init+0x6a>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80053d2:	46a4      	mov	ip, r4
 80053d4:	f85c 5b10 	ldr.w	r5, [ip], #16
 80053d8:	46ee      	mov	lr, sp
 80053da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80053de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80053e2:	f8dc 3000 	ldr.w	r3, [ip]
 80053e6:	f8ce 3000 	str.w	r3, [lr]
 80053ea:	1d23      	adds	r3, r4, #4
 80053ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053ee:	4628      	mov	r0, r5
 80053f0:	f003 fa61 	bl	80088b6 <USB_DevInit>
  hpcd->USB_Address = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80053fa:	2301      	movs	r3, #1
 80053fc:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 8005400:	69e3      	ldr	r3, [r4, #28]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d002      	beq.n	800540c <HAL_PCD_Init+0xd6>
  return HAL_OK;
 8005406:	2000      	movs	r0, #0
}
 8005408:	b007      	add	sp, #28
 800540a:	bd30      	pop	{r4, r5, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800540c:	4620      	mov	r0, r4
 800540e:	f000 fee8 	bl	80061e2 <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 8005412:	2000      	movs	r0, #0
 8005414:	e7f8      	b.n	8005408 <HAL_PCD_Init+0xd2>
    return HAL_ERROR;
 8005416:	2001      	movs	r0, #1
}
 8005418:	4770      	bx	lr

0800541a <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 800541a:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800541e:	2b01      	cmp	r3, #1
 8005420:	d00e      	beq.n	8005440 <HAL_PCD_Start+0x26>
{
 8005422:	b510      	push	{r4, lr}
 8005424:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005426:	2301      	movs	r3, #1
 8005428:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800542c:	6800      	ldr	r0, [r0, #0]
 800542e:	f003 fa2f 	bl	8008890 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005432:	6820      	ldr	r0, [r4, #0]
 8005434:	f003 fd84 	bl	8008f40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005438:	2000      	movs	r0, #0
 800543a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800543e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8005440:	2002      	movs	r0, #2
}
 8005442:	4770      	bx	lr

08005444 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005444:	b570      	push	{r4, r5, r6, lr}
 8005446:	4605      	mov	r5, r0
 8005448:	460c      	mov	r4, r1
 800544a:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800544c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005450:	f000 8109 	beq.w	8005666 <HAL_PCD_EP_DB_Transmit+0x222>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005454:	6802      	ldr	r2, [r0, #0]
 8005456:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800545a:	7809      	ldrb	r1, [r1, #0]
 800545c:	00c8      	lsls	r0, r1, #3
 800545e:	fa10 f383 	uxtah	r3, r0, r3
 8005462:	4413      	add	r3, r2
 8005464:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8005468:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 800546c:	69a3      	ldr	r3, [r4, #24]
 800546e:	4293      	cmp	r3, r2
 8005470:	d951      	bls.n	8005516 <HAL_PCD_EP_DB_Transmit+0xd2>
    {
      ep->xfer_len -= TxPctSize;
 8005472:	1a9b      	subs	r3, r3, r2
 8005474:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005476:	69a3      	ldr	r3, [r4, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d168      	bne.n	800554e <HAL_PCD_EP_DB_Transmit+0x10a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800547c:	7863      	ldrb	r3, [r4, #1]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d14c      	bne.n	800551c <HAL_PCD_EP_DB_Transmit+0xd8>
 8005482:	682a      	ldr	r2, [r5, #0]
 8005484:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005488:	fa12 f383 	uxtah	r3, r2, r3
 800548c:	4403      	add	r3, r0
 800548e:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8005492:	b292      	uxth	r2, r2
 8005494:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005498:	b292      	uxth	r2, r2
 800549a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800549e:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80054a2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80054a6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80054aa:	b292      	uxth	r2, r2
 80054ac:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054b0:	6829      	ldr	r1, [r5, #0]
 80054b2:	7862      	ldrb	r2, [r4, #1]
 80054b4:	2a00      	cmp	r2, #0
 80054b6:	d13d      	bne.n	8005534 <HAL_PCD_EP_DB_Transmit+0xf0>
 80054b8:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80054bc:	fa11 f383 	uxtah	r3, r1, r3
 80054c0:	7822      	ldrb	r2, [r4, #0]
 80054c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054c6:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80054ca:	b292      	uxth	r2, r2
 80054cc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80054d0:	b292      	uxth	r2, r2
 80054d2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80054d6:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80054da:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80054de:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80054e2:	b292      	uxth	r2, r2
 80054e4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80054e8:	7821      	ldrb	r1, [r4, #0]
 80054ea:	4628      	mov	r0, r5
 80054ec:	f005 fb80 	bl	800abf0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80054f0:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80054f4:	d040      	beq.n	8005578 <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80054f6:	682a      	ldr	r2, [r5, #0]
 80054f8:	7821      	ldrb	r1, [r4, #0]
 80054fa:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800550c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005510:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8005514:	e030      	b.n	8005578 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	61a3      	str	r3, [r4, #24]
 800551a:	e7ac      	b.n	8005476 <HAL_PCD_EP_DB_Transmit+0x32>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800551c:	2b01      	cmp	r3, #1
 800551e:	d1c7      	bne.n	80054b0 <HAL_PCD_EP_DB_Transmit+0x6c>
 8005520:	682a      	ldr	r2, [r5, #0]
 8005522:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005526:	fa12 f383 	uxtah	r3, r2, r3
 800552a:	4403      	add	r3, r0
 800552c:	2200      	movs	r2, #0
 800552e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8005532:	e7bd      	b.n	80054b0 <HAL_PCD_EP_DB_Transmit+0x6c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005534:	2a01      	cmp	r2, #1
 8005536:	d1d7      	bne.n	80054e8 <HAL_PCD_EP_DB_Transmit+0xa4>
 8005538:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 800553c:	fa11 f383 	uxtah	r3, r1, r3
 8005540:	7821      	ldrb	r1, [r4, #0]
 8005542:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005546:	2200      	movs	r2, #0
 8005548:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800554c:	e7cc      	b.n	80054e8 <HAL_PCD_EP_DB_Transmit+0xa4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800554e:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8005552:	d00d      	beq.n	8005570 <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005554:	6828      	ldr	r0, [r5, #0]
 8005556:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800555a:	b29b      	uxth	r3, r3
 800555c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005564:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005570:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005574:	2b01      	cmp	r3, #1
 8005576:	d012      	beq.n	800559e <HAL_PCD_EP_DB_Transmit+0x15a>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005578:	682a      	ldr	r2, [r5, #0]
 800557a:	7821      	ldrb	r1, [r4, #0]
 800557c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8005580:	b29b      	uxth	r3, r3
 8005582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800558e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005596:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 800559a:	2000      	movs	r0, #0
 800559c:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 800559e:	6963      	ldr	r3, [r4, #20]
 80055a0:	4413      	add	r3, r2
 80055a2:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 80055a4:	69e3      	ldr	r3, [r4, #28]
 80055a6:	4413      	add	r3, r2
 80055a8:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 80055aa:	6a21      	ldr	r1, [r4, #32]
 80055ac:	6923      	ldr	r3, [r4, #16]
 80055ae:	4299      	cmp	r1, r3
 80055b0:	d31b      	bcc.n	80055ea <HAL_PCD_EP_DB_Transmit+0x1a6>
          ep->xfer_len_db -= len;
 80055b2:	1ac9      	subs	r1, r1, r3
 80055b4:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80055b6:	7862      	ldrb	r2, [r4, #1]
 80055b8:	2a00      	cmp	r2, #0
 80055ba:	d13f      	bne.n	800563c <HAL_PCD_EP_DB_Transmit+0x1f8>
 80055bc:	6829      	ldr	r1, [r5, #0]
 80055be:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80055c2:	fa11 f282 	uxtah	r2, r1, r2
 80055c6:	7821      	ldrb	r1, [r4, #0]
 80055c8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80055cc:	2b3e      	cmp	r3, #62	; 0x3e
 80055ce:	d918      	bls.n	8005602 <HAL_PCD_EP_DB_Transmit+0x1be>
 80055d0:	0959      	lsrs	r1, r3, #5
 80055d2:	f013 0f1f 	tst.w	r3, #31
 80055d6:	d100      	bne.n	80055da <HAL_PCD_EP_DB_Transmit+0x196>
 80055d8:	3901      	subs	r1, #1
 80055da:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80055de:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80055e2:	b289      	uxth	r1, r1
 80055e4:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80055e8:	e02a      	b.n	8005640 <HAL_PCD_EP_DB_Transmit+0x1fc>
        else if (ep->xfer_len_db == 0U)
 80055ea:	b921      	cbnz	r1, 80055f6 <HAL_PCD_EP_DB_Transmit+0x1b2>
          ep->xfer_fill_db = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 80055f2:	4613      	mov	r3, r2
 80055f4:	e7df      	b.n	80055b6 <HAL_PCD_EP_DB_Transmit+0x172>
          ep->xfer_fill_db = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 80055fc:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 80055fe:	460b      	mov	r3, r1
 8005600:	e7d9      	b.n	80055b6 <HAL_PCD_EP_DB_Transmit+0x172>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005602:	b98b      	cbnz	r3, 8005628 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8005604:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8005608:	b289      	uxth	r1, r1
 800560a:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800560e:	b289      	uxth	r1, r1
 8005610:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8005614:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8005618:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800561c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005620:	b289      	uxth	r1, r1
 8005622:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8005626:	e00b      	b.n	8005640 <HAL_PCD_EP_DB_Transmit+0x1fc>
 8005628:	0859      	lsrs	r1, r3, #1
 800562a:	f013 0f01 	tst.w	r3, #1
 800562e:	d000      	beq.n	8005632 <HAL_PCD_EP_DB_Transmit+0x1ee>
 8005630:	3101      	adds	r1, #1
 8005632:	0289      	lsls	r1, r1, #10
 8005634:	b289      	uxth	r1, r1
 8005636:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800563a:	e001      	b.n	8005640 <HAL_PCD_EP_DB_Transmit+0x1fc>
 800563c:	2a01      	cmp	r2, #1
 800563e:	d006      	beq.n	800564e <HAL_PCD_EP_DB_Transmit+0x20a>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005640:	b29b      	uxth	r3, r3
 8005642:	8922      	ldrh	r2, [r4, #8]
 8005644:	6961      	ldr	r1, [r4, #20]
 8005646:	6828      	ldr	r0, [r5, #0]
 8005648:	f003 fc89 	bl	8008f5e <USB_WritePMA>
 800564c:	e794      	b.n	8005578 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800564e:	6829      	ldr	r1, [r5, #0]
 8005650:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8005654:	fa11 f282 	uxtah	r2, r1, r2
 8005658:	7821      	ldrb	r1, [r4, #0]
 800565a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800565e:	b299      	uxth	r1, r3
 8005660:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8005664:	e7ec      	b.n	8005640 <HAL_PCD_EP_DB_Transmit+0x1fc>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005666:	6802      	ldr	r2, [r0, #0]
 8005668:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800566c:	7809      	ldrb	r1, [r1, #0]
 800566e:	00c8      	lsls	r0, r1, #3
 8005670:	fa10 f383 	uxtah	r3, r0, r3
 8005674:	4413      	add	r3, r2
 8005676:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800567a:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 800567e:	69a3      	ldr	r3, [r4, #24]
 8005680:	4293      	cmp	r3, r2
 8005682:	d352      	bcc.n	800572a <HAL_PCD_EP_DB_Transmit+0x2e6>
      ep->xfer_len -= TxPctSize;
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8005688:	69a3      	ldr	r3, [r4, #24]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d169      	bne.n	8005762 <HAL_PCD_EP_DB_Transmit+0x31e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800568e:	7863      	ldrb	r3, [r4, #1]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d14d      	bne.n	8005730 <HAL_PCD_EP_DB_Transmit+0x2ec>
 8005694:	682a      	ldr	r2, [r5, #0]
 8005696:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800569a:	fa12 f383 	uxtah	r3, r2, r3
 800569e:	4418      	add	r0, r3
 80056a0:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 80056b0:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 80056b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056bc:	b29b      	uxth	r3, r3
 80056be:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056c2:	6829      	ldr	r1, [r5, #0]
 80056c4:	7862      	ldrb	r2, [r4, #1]
 80056c6:	2a00      	cmp	r2, #0
 80056c8:	d13e      	bne.n	8005748 <HAL_PCD_EP_DB_Transmit+0x304>
 80056ca:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80056ce:	fa11 f383 	uxtah	r3, r1, r3
 80056d2:	7822      	ldrb	r2, [r4, #0]
 80056d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056d8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80056dc:	b292      	uxth	r2, r2
 80056de:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80056e2:	b292      	uxth	r2, r2
 80056e4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80056e8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80056ec:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80056f0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80056f4:	b292      	uxth	r2, r2
 80056f6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056fa:	7821      	ldrb	r1, [r4, #0]
 80056fc:	4628      	mov	r0, r5
 80056fe:	f005 fa77 	bl	800abf0 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005702:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8005706:	f47f af37 	bne.w	8005578 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800570a:	682a      	ldr	r2, [r5, #0]
 800570c:	7821      	ldrb	r1, [r4, #0]
 800570e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005724:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8005728:	e726      	b.n	8005578 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	61a3      	str	r3, [r4, #24]
 800572e:	e7ab      	b.n	8005688 <HAL_PCD_EP_DB_Transmit+0x244>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005730:	2b01      	cmp	r3, #1
 8005732:	d1c6      	bne.n	80056c2 <HAL_PCD_EP_DB_Transmit+0x27e>
 8005734:	682a      	ldr	r2, [r5, #0]
 8005736:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800573a:	fa12 f383 	uxtah	r3, r2, r3
 800573e:	4418      	add	r0, r3
 8005740:	2300      	movs	r3, #0
 8005742:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 8005746:	e7bc      	b.n	80056c2 <HAL_PCD_EP_DB_Transmit+0x27e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005748:	2a01      	cmp	r2, #1
 800574a:	d1d6      	bne.n	80056fa <HAL_PCD_EP_DB_Transmit+0x2b6>
 800574c:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8005750:	fa11 f383 	uxtah	r3, r1, r3
 8005754:	7821      	ldrb	r1, [r4, #0]
 8005756:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800575a:	2200      	movs	r2, #0
 800575c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005760:	e7cb      	b.n	80056fa <HAL_PCD_EP_DB_Transmit+0x2b6>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005762:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8005766:	d10d      	bne.n	8005784 <HAL_PCD_EP_DB_Transmit+0x340>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005768:	6828      	ldr	r0, [r5, #0]
 800576a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800576e:	b29b      	uxth	r3, r3
 8005770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800577c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005780:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8005784:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005788:	2b01      	cmp	r3, #1
 800578a:	f47f aef5 	bne.w	8005578 <HAL_PCD_EP_DB_Transmit+0x134>
        ep->xfer_buff += TxPctSize;
 800578e:	6963      	ldr	r3, [r4, #20]
 8005790:	4413      	add	r3, r2
 8005792:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8005794:	69e3      	ldr	r3, [r4, #28]
 8005796:	4413      	add	r3, r2
 8005798:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 800579a:	6a21      	ldr	r1, [r4, #32]
 800579c:	6923      	ldr	r3, [r4, #16]
 800579e:	4299      	cmp	r1, r3
 80057a0:	d31b      	bcc.n	80057da <HAL_PCD_EP_DB_Transmit+0x396>
          ep->xfer_len_db -= len;
 80057a2:	1ac9      	subs	r1, r1, r3
 80057a4:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80057a6:	6829      	ldr	r1, [r5, #0]
 80057a8:	7862      	ldrb	r2, [r4, #1]
 80057aa:	2a00      	cmp	r2, #0
 80057ac:	d13e      	bne.n	800582c <HAL_PCD_EP_DB_Transmit+0x3e8>
 80057ae:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80057b2:	fa11 f282 	uxtah	r2, r1, r2
 80057b6:	7821      	ldrb	r1, [r4, #0]
 80057b8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80057bc:	2b3e      	cmp	r3, #62	; 0x3e
 80057be:	d918      	bls.n	80057f2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 80057c0:	0959      	lsrs	r1, r3, #5
 80057c2:	f013 0f1f 	tst.w	r3, #31
 80057c6:	d100      	bne.n	80057ca <HAL_PCD_EP_DB_Transmit+0x386>
 80057c8:	3901      	subs	r1, #1
 80057ca:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80057ce:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80057d2:	b289      	uxth	r1, r1
 80057d4:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 80057d8:	e02a      	b.n	8005830 <HAL_PCD_EP_DB_Transmit+0x3ec>
        else if (ep->xfer_len_db == 0U)
 80057da:	b921      	cbnz	r1, 80057e6 <HAL_PCD_EP_DB_Transmit+0x3a2>
          ep->xfer_fill_db = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 80057e2:	4613      	mov	r3, r2
 80057e4:	e7df      	b.n	80057a6 <HAL_PCD_EP_DB_Transmit+0x362>
          ep->xfer_len_db = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 80057ea:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 80057ee:	460b      	mov	r3, r1
 80057f0:	e7d9      	b.n	80057a6 <HAL_PCD_EP_DB_Transmit+0x362>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80057f2:	b98b      	cbnz	r3, 8005818 <HAL_PCD_EP_DB_Transmit+0x3d4>
 80057f4:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 80057f8:	b289      	uxth	r1, r1
 80057fa:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80057fe:	b289      	uxth	r1, r1
 8005800:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8005804:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8005808:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800580c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005810:	b289      	uxth	r1, r1
 8005812:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8005816:	e00b      	b.n	8005830 <HAL_PCD_EP_DB_Transmit+0x3ec>
 8005818:	0859      	lsrs	r1, r3, #1
 800581a:	f013 0f01 	tst.w	r3, #1
 800581e:	d000      	beq.n	8005822 <HAL_PCD_EP_DB_Transmit+0x3de>
 8005820:	3101      	adds	r1, #1
 8005822:	0289      	lsls	r1, r1, #10
 8005824:	b289      	uxth	r1, r1
 8005826:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 800582a:	e001      	b.n	8005830 <HAL_PCD_EP_DB_Transmit+0x3ec>
 800582c:	2a01      	cmp	r2, #1
 800582e:	d006      	beq.n	800583e <HAL_PCD_EP_DB_Transmit+0x3fa>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005830:	b29b      	uxth	r3, r3
 8005832:	8962      	ldrh	r2, [r4, #10]
 8005834:	6961      	ldr	r1, [r4, #20]
 8005836:	6828      	ldr	r0, [r5, #0]
 8005838:	f003 fb91 	bl	8008f5e <USB_WritePMA>
 800583c:	e69c      	b.n	8005578 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800583e:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8005842:	fa11 f282 	uxtah	r2, r1, r2
 8005846:	7821      	ldrb	r1, [r4, #0]
 8005848:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800584c:	b299      	uxth	r1, r3
 800584e:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8005852:	e7ed      	b.n	8005830 <HAL_PCD_EP_DB_Transmit+0x3ec>

08005854 <PCD_EP_ISR_Handler>:
{
 8005854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005858:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800585a:	e0ca      	b.n	80059f2 <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800585c:	8803      	ldrh	r3, [r0, #0]
 800585e:	b29b      	uxth	r3, r3
 8005860:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800586c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005870:	b29b      	uxth	r3, r3
 8005872:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005874:	6829      	ldr	r1, [r5, #0]
 8005876:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 800587a:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800587e:	00d2      	lsls	r2, r2, #3
 8005880:	fa12 f383 	uxtah	r3, r2, r3
 8005884:	440b      	add	r3, r1
 8005886:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800588a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800588e:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8005890:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8005892:	4413      	add	r3, r2
 8005894:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005896:	2100      	movs	r1, #0
 8005898:	4628      	mov	r0, r5
 800589a:	f005 f9a9 	bl	800abf0 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800589e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 80a5 	beq.w	80059f2 <PCD_EP_ISR_Handler+0x19e>
 80058a8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f040 80a1 	bne.w	80059f2 <PCD_EP_ISR_Handler+0x19e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80058b0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80058b4:	682a      	ldr	r2, [r5, #0]
 80058b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ba:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 80058c4:	e095      	b.n	80059f2 <PCD_EP_ISR_Handler+0x19e>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80058c6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80058ca:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 80058ce:	00d2      	lsls	r2, r2, #3
 80058d0:	fa12 f383 	uxtah	r3, r2, r3
 80058d4:	4403      	add	r3, r0
 80058d6:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80058da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058de:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80058e2:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 80058e6:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 80058ea:	f003 fefc 	bl	80096e6 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80058ee:	682a      	ldr	r2, [r5, #0]
 80058f0:	8813      	ldrh	r3, [r2, #0]
 80058f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f6:	051b      	lsls	r3, r3, #20
 80058f8:	0d1b      	lsrs	r3, r3, #20
 80058fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058fe:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8005900:	4628      	mov	r0, r5
 8005902:	f005 f961 	bl	800abc8 <HAL_PCD_SetupStageCallback>
 8005906:	e074      	b.n	80059f2 <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005908:	b989      	cbnz	r1, 800592e <PCD_EP_ISR_Handler+0xda>
 800590a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800590e:	b292      	uxth	r2, r2
 8005910:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005914:	b292      	uxth	r2, r2
 8005916:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800591a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800591e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005922:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005926:	b292      	uxth	r2, r2
 8005928:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800592c:	e0bf      	b.n	8005aae <PCD_EP_ISR_Handler+0x25a>
 800592e:	084a      	lsrs	r2, r1, #1
 8005930:	f011 0f01 	tst.w	r1, #1
 8005934:	d000      	beq.n	8005938 <PCD_EP_ISR_Handler+0xe4>
 8005936:	3201      	adds	r2, #1
 8005938:	0292      	lsls	r2, r2, #10
 800593a:	b292      	uxth	r2, r2
 800593c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005940:	e0b5      	b.n	8005aae <PCD_EP_ISR_Handler+0x25a>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005942:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8005946:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005948:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800594c:	f040 80be 	bne.w	8005acc <PCD_EP_ISR_Handler+0x278>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005950:	f016 0f80 	tst.w	r6, #128	; 0x80
 8005954:	d04d      	beq.n	80059f2 <PCD_EP_ISR_Handler+0x19e>
        ep = &hpcd->IN_ep[epindex];
 8005956:	1c62      	adds	r2, r4, #1
 8005958:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800595c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005960:	6828      	ldr	r0, [r5, #0]
 8005962:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8005966:	b29b      	uxth	r3, r3
 8005968:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800596c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005978:	b29b      	uxth	r3, r3
 800597a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->type != EP_TYPE_BULK)
 800597e:	78cb      	ldrb	r3, [r1, #3]
 8005980:	2b02      	cmp	r3, #2
 8005982:	f000 81a7 	beq.w	8005cd4 <PCD_EP_ISR_Handler+0x480>
          ep->xfer_len = 0U;
 8005986:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800598a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800598e:	2200      	movs	r2, #0
 8005990:	641a      	str	r2, [r3, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8005992:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005996:	b323      	cbz	r3, 80059e2 <PCD_EP_ISR_Handler+0x18e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005998:	f016 0f40 	tst.w	r6, #64	; 0x40
 800599c:	f000 8163 	beq.w	8005c66 <PCD_EP_ISR_Handler+0x412>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059a0:	784b      	ldrb	r3, [r1, #1]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f040 814c 	bne.w	8005c40 <PCD_EP_ISR_Handler+0x3ec>
 80059a8:	682a      	ldr	r2, [r5, #0]
 80059aa:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80059ae:	fa12 f383 	uxtah	r3, r2, r3
 80059b2:	1c62      	adds	r2, r4, #1
 80059b4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80059b8:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 80059bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059c0:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80059c4:	b292      	uxth	r2, r2
 80059c6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80059ca:	b292      	uxth	r2, r2
 80059cc:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80059d0:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80059d4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80059d8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80059dc:	b292      	uxth	r2, r2
 80059de:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80059e2:	3401      	adds	r4, #1
 80059e4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80059e8:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 80059ec:	4628      	mov	r0, r5
 80059ee:	f005 f8ff 	bl	800abf0 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80059f2:	6828      	ldr	r0, [r5, #0]
 80059f4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80059f8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80059fc:	f000 81ae 	beq.w	8005d5c <PCD_EP_ISR_Handler+0x508>
    wIstr = hpcd->Instance->ISTR;
 8005a00:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8005a04:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8005a06:	f014 040f 	ands.w	r4, r4, #15
 8005a0a:	d19a      	bne.n	8005942 <PCD_EP_ISR_Handler+0xee>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005a0c:	f013 0f10 	tst.w	r3, #16
 8005a10:	f43f af24 	beq.w	800585c <PCD_EP_ISR_Handler+0x8>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005a14:	8803      	ldrh	r3, [r0, #0]
 8005a16:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005a18:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005a1c:	f47f af53 	bne.w	80058c6 <PCD_EP_ISR_Handler+0x72>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005a20:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005a24:	d0e5      	beq.n	80059f2 <PCD_EP_ISR_Handler+0x19e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a26:	8803      	ldrh	r3, [r0, #0]
 8005a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2c:	051b      	lsls	r3, r3, #20
 8005a2e:	0d1b      	lsrs	r3, r3, #20
 8005a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a34:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a36:	6828      	ldr	r0, [r5, #0]
 8005a38:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005a3c:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8005a40:	00d2      	lsls	r2, r2, #3
 8005a42:	fa12 f383 	uxtah	r3, r2, r3
 8005a46:	4403      	add	r3, r0
 8005a48:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8005a4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a50:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005a54:	b18b      	cbz	r3, 8005a7a <PCD_EP_ISR_Handler+0x226>
 8005a56:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 8005a5a:	b171      	cbz	r1, 8005a7a <PCD_EP_ISR_Handler+0x226>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005a5c:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8005a60:	f003 fe41 	bl	80096e6 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8005a64:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 8005a68:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005a72:	2100      	movs	r1, #0
 8005a74:	4628      	mov	r0, r5
 8005a76:	f005 f8af 	bl	800abd8 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005a7a:	682b      	ldr	r3, [r5, #0]
 8005a7c:	881a      	ldrh	r2, [r3, #0]
 8005a7e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005a82:	d1b6      	bne.n	80059f2 <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005a84:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005a88:	fa13 f382 	uxtah	r3, r3, r2
 8005a8c:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 8005a90:	293e      	cmp	r1, #62	; 0x3e
 8005a92:	f67f af39 	bls.w	8005908 <PCD_EP_ISR_Handler+0xb4>
 8005a96:	094a      	lsrs	r2, r1, #5
 8005a98:	f011 0f1f 	tst.w	r1, #31
 8005a9c:	d100      	bne.n	8005aa0 <PCD_EP_ISR_Handler+0x24c>
 8005a9e:	3a01      	subs	r2, #1
 8005aa0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8005aa4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005aa8:	b292      	uxth	r2, r2
 8005aaa:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005aae:	682a      	ldr	r2, [r5, #0]
 8005ab0:	8813      	ldrh	r3, [r2, #0]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005abc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac8:	8013      	strh	r3, [r2, #0]
 8005aca:	e792      	b.n	80059f2 <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005acc:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8005ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad4:	051b      	lsls	r3, r3, #20
 8005ad6:	0d1b      	lsrs	r3, r3, #20
 8005ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005adc:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8005ae0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005ae4:	00c9      	lsls	r1, r1, #3
 8005ae6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005aea:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 8005aee:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005af2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005af6:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d140      	bne.n	8005b80 <PCD_EP_ISR_Handler+0x32c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005afe:	6828      	ldr	r0, [r5, #0]
 8005b00:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005b04:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005b08:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005b0c:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8005b10:	00d2      	lsls	r2, r2, #3
 8005b12:	fa12 f383 	uxtah	r3, r2, r3
 8005b16:	4403      	add	r3, r0
 8005b18:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8005b1c:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8005b20:	bb17      	cbnz	r7, 8005b68 <PCD_EP_ISR_Handler+0x314>
        ep->xfer_count += count;
 8005b22:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005b26:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005b2a:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8005b2e:	443a      	add	r2, r7
 8005b30:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8005b34:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8005b38:	443a      	add	r2, r7
 8005b3a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005b3e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8005b42:	b13b      	cbz	r3, 8005b54 <PCD_EP_ISR_Handler+0x300>
 8005b44:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005b48:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005b4c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8005b50:	429f      	cmp	r7, r3
 8005b52:	d270      	bcs.n	8005c36 <PCD_EP_ISR_Handler+0x3e2>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005b54:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005b58:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005b5c:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8005b60:	4628      	mov	r0, r5
 8005b62:	f005 f839 	bl	800abd8 <HAL_PCD_DataOutStageCallback>
 8005b66:	e6f3      	b.n	8005950 <PCD_EP_ISR_Handler+0xfc>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005b68:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005b6c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005b70:	463b      	mov	r3, r7
 8005b72:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8005b76:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005b7a:	f003 fdb4 	bl	80096e6 <USB_ReadPMA>
 8005b7e:	e7d0      	b.n	8005b22 <PCD_EP_ISR_Handler+0x2ce>
          if (ep->type == EP_TYPE_BULK)
 8005b80:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005b84:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005b88:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d033      	beq.n	8005bf8 <PCD_EP_ISR_Handler+0x3a4>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005b90:	6829      	ldr	r1, [r5, #0]
 8005b92:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005b96:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005b9a:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8005b9e:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bb4:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005bb8:	6828      	ldr	r0, [r5, #0]
 8005bba:	f892 3168 	ldrb.w	r3, [r2, #360]	; 0x168
 8005bbe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005bc2:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005bc6:	d01e      	beq.n	8005c06 <PCD_EP_ISR_Handler+0x3b2>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005bc8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	fa13 f382 	uxtah	r3, r3, r2
 8005bd2:	4403      	add	r3, r0
 8005bd4:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	; 0x402
 8005bd8:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8005bdc:	2f00      	cmp	r7, #0
 8005bde:	d0a0      	beq.n	8005b22 <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005be0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005be4:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005be8:	463b      	mov	r3, r7
 8005bea:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8005bee:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005bf2:	f003 fd78 	bl	80096e6 <USB_ReadPMA>
 8005bf6:	e794      	b.n	8005b22 <PCD_EP_ISR_Handler+0x2ce>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005bf8:	4632      	mov	r2, r6
 8005bfa:	4641      	mov	r1, r8
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	f7ff fb0e 	bl	800521e <HAL_PCD_EP_DB_Receive>
 8005c02:	4607      	mov	r7, r0
 8005c04:	e78d      	b.n	8005b22 <PCD_EP_ISR_Handler+0x2ce>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c06:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	fa13 f382 	uxtah	r3, r3, r2
 8005c10:	4403      	add	r3, r0
 8005c12:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8005c16:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8005c1a:	2f00      	cmp	r7, #0
 8005c1c:	d081      	beq.n	8005b22 <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005c1e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005c22:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005c26:	463b      	mov	r3, r7
 8005c28:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8005c2c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005c30:	f003 fd59 	bl	80096e6 <USB_ReadPMA>
 8005c34:	e775      	b.n	8005b22 <PCD_EP_ISR_Handler+0x2ce>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005c36:	4641      	mov	r1, r8
 8005c38:	6828      	ldr	r0, [r5, #0]
 8005c3a:	f003 f9a4 	bl	8008f86 <USB_EPStartXfer>
 8005c3e:	e687      	b.n	8005950 <PCD_EP_ISR_Handler+0xfc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	f47f aece 	bne.w	80059e2 <PCD_EP_ISR_Handler+0x18e>
 8005c46:	682a      	ldr	r2, [r5, #0]
 8005c48:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005c4c:	fa12 f383 	uxtah	r3, r2, r3
 8005c50:	1c62      	adds	r2, r4, #1
 8005c52:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005c56:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8005c5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8005c64:	e6bd      	b.n	80059e2 <PCD_EP_ISR_Handler+0x18e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c66:	6829      	ldr	r1, [r5, #0]
 8005c68:	1c63      	adds	r3, r4, #1
 8005c6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c6e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005c72:	785a      	ldrb	r2, [r3, #1]
 8005c74:	b9e2      	cbnz	r2, 8005cb0 <PCD_EP_ISR_Handler+0x45c>
 8005c76:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8005c7a:	fa11 f383 	uxtah	r3, r1, r3
 8005c7e:	1c62      	adds	r2, r4, #1
 8005c80:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005c84:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8005c88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c8c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005c90:	b292      	uxth	r2, r2
 8005c92:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005c96:	b292      	uxth	r2, r2
 8005c98:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005c9c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005ca0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005ca4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005ca8:	b292      	uxth	r2, r2
 8005caa:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005cae:	e698      	b.n	80059e2 <PCD_EP_ISR_Handler+0x18e>
 8005cb0:	2a01      	cmp	r2, #1
 8005cb2:	f47f ae96 	bne.w	80059e2 <PCD_EP_ISR_Handler+0x18e>
 8005cb6:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8005cba:	fa11 f383 	uxtah	r3, r1, r3
 8005cbe:	1c62      	adds	r2, r4, #1
 8005cc0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005cc4:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8005cc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005cd2:	e686      	b.n	80059e2 <PCD_EP_ISR_Handler+0x18e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005cd4:	f416 7f80 	tst.w	r6, #256	; 0x100
 8005cd8:	d13b      	bne.n	8005d52 <PCD_EP_ISR_Handler+0x4fe>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005cda:	6828      	ldr	r0, [r5, #0]
 8005cdc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005ce0:	1c62      	adds	r2, r4, #1
 8005ce2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005ce6:	f815 6032 	ldrb.w	r6, [r5, r2, lsl #3]
 8005cea:	00f2      	lsls	r2, r6, #3
 8005cec:	fa12 f383 	uxtah	r3, r2, r3
 8005cf0:	4403      	add	r3, r0
 8005cf2:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8005cf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 8005cfa:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005cfe:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005d02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d910      	bls.n	8005d2a <PCD_EP_ISR_Handler+0x4d6>
              ep->xfer_len -= TxPctSize;
 8005d08:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 8005d0c:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 8005d10:	1ad2      	subs	r2, r2, r3
 8005d12:	643a      	str	r2, [r7, #64]	; 0x40
            if (ep->xfer_len == 0U)
 8005d14:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005d18:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005d1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d1e:	b95a      	cbnz	r2, 8005d38 <PCD_EP_ISR_Handler+0x4e4>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d20:	4631      	mov	r1, r6
 8005d22:	4628      	mov	r0, r5
 8005d24:	f004 ff64 	bl	800abf0 <HAL_PCD_DataInStageCallback>
 8005d28:	e663      	b.n	80059f2 <PCD_EP_ISR_Handler+0x19e>
              ep->xfer_len = 0U;
 8005d2a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005d2e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005d32:	2700      	movs	r7, #0
 8005d34:	6417      	str	r7, [r2, #64]	; 0x40
 8005d36:	e7ed      	b.n	8005d14 <PCD_EP_ISR_Handler+0x4c0>
              ep->xfer_buff += TxPctSize;
 8005d38:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005d3c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005d40:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8005d42:	441e      	add	r6, r3
 8005d44:	63d6      	str	r6, [r2, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8005d46:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8005d48:	4423      	add	r3, r4
 8005d4a:	6453      	str	r3, [r2, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d4c:	f003 f91b 	bl	8008f86 <USB_EPStartXfer>
 8005d50:	e64f      	b.n	80059f2 <PCD_EP_ISR_Handler+0x19e>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005d52:	4632      	mov	r2, r6
 8005d54:	4628      	mov	r0, r5
 8005d56:	f7ff fb75 	bl	8005444 <HAL_PCD_EP_DB_Transmit>
 8005d5a:	e64a      	b.n	80059f2 <PCD_EP_ISR_Handler+0x19e>
}
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d62 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8005d62:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d00d      	beq.n	8005d86 <HAL_PCD_SetAddress+0x24>
{
 8005d6a:	b510      	push	{r4, lr}
 8005d6c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005d6e:	2301      	movs	r3, #1
 8005d70:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005d74:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005d78:	6800      	ldr	r0, [r0, #0]
 8005d7a:	f003 f8db 	bl	8008f34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005d7e:	2000      	movs	r0, #0
 8005d80:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005d84:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8005d86:	2002      	movs	r0, #2
}
 8005d88:	4770      	bx	lr

08005d8a <HAL_PCD_IRQHandler>:
{
 8005d8a:	b510      	push	{r4, lr}
 8005d8c:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005d8e:	6800      	ldr	r0, [r0, #0]
 8005d90:	f003 f8e1 	bl	8008f56 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005d94:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8005d98:	d123      	bne.n	8005de2 <HAL_PCD_IRQHandler+0x58>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005d9a:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8005d9e:	d124      	bne.n	8005dea <HAL_PCD_IRQHandler+0x60>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005da0:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8005da4:	d132      	bne.n	8005e0c <HAL_PCD_IRQHandler+0x82>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005da6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8005daa:	d139      	bne.n	8005e20 <HAL_PCD_IRQHandler+0x96>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005dac:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8005db0:	d140      	bne.n	8005e34 <HAL_PCD_IRQHandler+0xaa>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005db2:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8005db6:	d167      	bne.n	8005e88 <HAL_PCD_IRQHandler+0xfe>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005db8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005dbc:	f040 8081 	bne.w	8005ec2 <HAL_PCD_IRQHandler+0x138>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005dc0:	f410 7f00 	tst.w	r0, #512	; 0x200
 8005dc4:	f040 80ad 	bne.w	8005f22 <HAL_PCD_IRQHandler+0x198>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005dc8:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005dcc:	d027      	beq.n	8005e1e <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005dce:	6822      	ldr	r2, [r4, #0]
 8005dd0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8005de0:	e01d      	b.n	8005e1e <HAL_PCD_IRQHandler+0x94>
    (void)PCD_EP_ISR_Handler(hpcd);
 8005de2:	4620      	mov	r0, r4
 8005de4:	f7ff fd36 	bl	8005854 <PCD_EP_ISR_Handler>
    return;
 8005de8:	e019      	b.n	8005e1e <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005dea:	6822      	ldr	r2, [r4, #0]
 8005dec:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f004 ff08 	bl	800ac12 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005e02:	2100      	movs	r1, #0
 8005e04:	4620      	mov	r0, r4
 8005e06:	f7ff ffac 	bl	8005d62 <HAL_PCD_SetAddress>
    return;
 8005e0a:	e008      	b.n	8005e1e <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005e0c:	6822      	ldr	r2, [r4, #0]
 8005e0e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8005e1e:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005e20:	6822      	ldr	r2, [r4, #0]
 8005e22:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8005e32:	e7f4      	b.n	8005e1e <HAL_PCD_IRQHandler+0x94>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005e34:	6822      	ldr	r2, [r4, #0]
 8005e36:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f023 0304 	bic.w	r3, r3, #4
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005e46:	6822      	ldr	r2, [r4, #0]
 8005e48:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f023 0308 	bic.w	r3, r3, #8
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8005e58:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d00c      	beq.n	8005e7a <HAL_PCD_IRQHandler+0xf0>
    HAL_PCD_ResumeCallback(hpcd);
 8005e60:	4620      	mov	r0, r4
 8005e62:	f004 fef9 	bl	800ac58 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005e66:	6822      	ldr	r2, [r4, #0]
 8005e68:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8005e78:	e7d1      	b.n	8005e1e <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005e80:	4620      	mov	r0, r4
 8005e82:	f004 ffa1 	bl	800adc8 <HAL_PCDEx_LPM_Callback>
 8005e86:	e7eb      	b.n	8005e60 <HAL_PCD_IRQHandler+0xd6>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005e88:	6822      	ldr	r2, [r4, #0]
 8005e8a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f043 0308 	orr.w	r3, r3, #8
 8005e94:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005e98:	6822      	ldr	r2, [r4, #0]
 8005e9a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005eaa:	6822      	ldr	r2, [r4, #0]
 8005eac:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	f043 0304 	orr.w	r3, r3, #4
 8005eb6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f004 febc 	bl	800ac38 <HAL_PCD_SuspendCallback>
    return;
 8005ec0:	e7ad      	b.n	8005e1e <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005ec2:	6822      	ldr	r2, [r4, #0]
 8005ec4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005ed4:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8005ed8:	b9fb      	cbnz	r3, 8005f1a <HAL_PCD_IRQHandler+0x190>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005eda:	6822      	ldr	r2, [r4, #0]
 8005edc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	f043 0304 	orr.w	r3, r3, #4
 8005ee6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005eea:	6822      	ldr	r2, [r4, #0]
 8005eec:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f043 0308 	orr.w	r3, r3, #8
 8005ef6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8005efa:	2101      	movs	r1, #1
 8005efc:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005f06:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8005f0a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8005f0e:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005f12:	4620      	mov	r0, r4
 8005f14:	f004 ff58 	bl	800adc8 <HAL_PCDEx_LPM_Callback>
 8005f18:	e781      	b.n	8005e1e <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_SuspendCallback(hpcd);
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	f004 fe8c 	bl	800ac38 <HAL_PCD_SuspendCallback>
    return;
 8005f20:	e77d      	b.n	8005e1e <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005f22:	6822      	ldr	r2, [r4, #0]
 8005f24:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8005f34:	4620      	mov	r0, r4
 8005f36:	f004 fe66 	bl	800ac06 <HAL_PCD_SOFCallback>
    return;
 8005f3a:	e770      	b.n	8005e1e <HAL_PCD_IRQHandler+0x94>

08005f3c <HAL_PCD_EP_Open>:
{
 8005f3c:	b510      	push	{r4, lr}
 8005f3e:	4604      	mov	r4, r0
 8005f40:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8005f42:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005f46:	d12a      	bne.n	8005f9e <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f48:	f001 0007 	and.w	r0, r1, #7
 8005f4c:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8005f50:	00c9      	lsls	r1, r1, #3
 8005f52:	f501 7eb4 	add.w	lr, r1, #360	; 0x168
 8005f56:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 8005f5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f5e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8005f62:	f04f 0e00 	mov.w	lr, #0
 8005f66:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f6a:	f00c 0c07 	and.w	ip, ip, #7
 8005f6e:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 8005f72:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8005f74:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8005f76:	784a      	ldrb	r2, [r1, #1]
 8005f78:	b10a      	cbz	r2, 8005f7e <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8005f7a:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d019      	beq.n	8005fb6 <HAL_PCD_EP_Open+0x7a>
  __HAL_LOCK(hpcd);
 8005f82:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d018      	beq.n	8005fbc <HAL_PCD_EP_Open+0x80>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f90:	6820      	ldr	r0, [r4, #0]
 8005f92:	f002 fca1 	bl	80088d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f96:	2000      	movs	r0, #0
 8005f98:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005f9c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f9e:	f001 0007 	and.w	r0, r1, #7
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8005fa8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 8005fac:	f04f 0e01 	mov.w	lr, #1
 8005fb0:	f881 e001 	strb.w	lr, [r1, #1]
 8005fb4:	e7d9      	b.n	8005f6a <HAL_PCD_EP_Open+0x2e>
    ep->data_pid_start = 0U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	710b      	strb	r3, [r1, #4]
 8005fba:	e7e2      	b.n	8005f82 <HAL_PCD_EP_Open+0x46>
  __HAL_LOCK(hpcd);
 8005fbc:	2002      	movs	r0, #2
 8005fbe:	e7ed      	b.n	8005f9c <HAL_PCD_EP_Open+0x60>

08005fc0 <HAL_PCD_EP_Close>:
{
 8005fc0:	b510      	push	{r4, lr}
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8005fc6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005fca:	d11f      	bne.n	800600c <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fcc:	f001 0207 	and.w	r2, r1, #7
 8005fd0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005fd4:	00c9      	lsls	r1, r1, #3
 8005fd6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005fda:	4401      	add	r1, r0
    ep->is_in = 0U;
 8005fdc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005fe0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8005ff0:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d013      	beq.n	8006020 <HAL_PCD_EP_Close+0x60>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ffe:	6820      	ldr	r0, [r4, #0]
 8006000:	f002 fe37 	bl	8008c72 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006004:	2000      	movs	r0, #0
 8006006:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800600a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800600c:	f001 0207 	and.w	r2, r1, #7
 8006010:	3201      	adds	r2, #1
 8006012:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8006016:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800601a:	2001      	movs	r0, #1
 800601c:	7048      	strb	r0, [r1, #1]
 800601e:	e7e4      	b.n	8005fea <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8006020:	2002      	movs	r0, #2
 8006022:	e7f2      	b.n	800600a <HAL_PCD_EP_Close+0x4a>

08006024 <HAL_PCD_EP_Receive>:
{
 8006024:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006026:	f001 0407 	and.w	r4, r1, #7
 800602a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800602e:	00c9      	lsls	r1, r1, #3
 8006030:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8006034:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8006036:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 800603a:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800603e:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 8006042:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
  ep->is_in = 0U;
 800604c:	f88c 3169 	strb.w	r3, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8006050:	f88c 4168 	strb.w	r4, [ip, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006054:	b924      	cbnz	r4, 8006060 <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006056:	6800      	ldr	r0, [r0, #0]
 8006058:	f002 ff95 	bl	8008f86 <USB_EPStartXfer>
}
 800605c:	2000      	movs	r0, #0
 800605e:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006060:	6800      	ldr	r0, [r0, #0]
 8006062:	f002 ff90 	bl	8008f86 <USB_EPStartXfer>
 8006066:	e7f9      	b.n	800605c <HAL_PCD_EP_Receive+0x38>

08006068 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006068:	f001 0107 	and.w	r1, r1, #7
 800606c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006070:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8006074:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8006078:	4770      	bx	lr

0800607a <HAL_PCD_EP_Transmit>:
{
 800607a:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800607c:	f001 0407 	and.w	r4, r1, #7
 8006080:	f104 0c01 	add.w	ip, r4, #1
 8006084:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8006088:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 800608c:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
 8006090:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8006094:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
  ep->xfer_len = len;
 8006098:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 800609c:	2201      	movs	r2, #1
 800609e:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
  ep->xfer_len_db = len;
 80060a2:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
  ep->xfer_count = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44
  ep->is_in = 1U;
 80060ac:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060ae:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80060b2:	f800 403c 	strb.w	r4, [r0, ip, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060b6:	b924      	cbnz	r4, 80060c2 <HAL_PCD_EP_Transmit+0x48>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80060b8:	6800      	ldr	r0, [r0, #0]
 80060ba:	f002 ff64 	bl	8008f86 <USB_EPStartXfer>
}
 80060be:	2000      	movs	r0, #0
 80060c0:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060c2:	6800      	ldr	r0, [r0, #0]
 80060c4:	f002 ff5f 	bl	8008f86 <USB_EPStartXfer>
 80060c8:	e7f9      	b.n	80060be <HAL_PCD_EP_Transmit+0x44>

080060ca <HAL_PCD_EP_SetStall>:
{
 80060ca:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80060cc:	f001 0207 	and.w	r2, r1, #7
 80060d0:	6841      	ldr	r1, [r0, #4]
 80060d2:	428a      	cmp	r2, r1
 80060d4:	d82a      	bhi.n	800612c <HAL_PCD_EP_SetStall+0x62>
{
 80060d6:	b510      	push	{r4, lr}
 80060d8:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80060da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80060de:	d11d      	bne.n	800611c <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 80060e0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80060e4:	00c9      	lsls	r1, r1, #3
 80060e6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80060ea:	4401      	add	r1, r0
    ep->is_in = 0U;
 80060ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80060f0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80060f4:	2000      	movs	r0, #0
 80060f6:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 80060fa:	2301      	movs	r3, #1
 80060fc:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060fe:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8006100:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8006104:	2b01      	cmp	r3, #1
 8006106:	d013      	beq.n	8006130 <HAL_PCD_EP_SetStall+0x66>
 8006108:	2301      	movs	r3, #1
 800610a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800610e:	6820      	ldr	r0, [r4, #0]
 8006110:	f002 fe9a 	bl	8008e48 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8006114:	2000      	movs	r0, #0
 8006116:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800611a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800611c:	1c53      	adds	r3, r2, #1
 800611e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006122:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8006126:	2001      	movs	r0, #1
 8006128:	7048      	strb	r0, [r1, #1]
 800612a:	e7e6      	b.n	80060fa <HAL_PCD_EP_SetStall+0x30>
    return HAL_ERROR;
 800612c:	2001      	movs	r0, #1
}
 800612e:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8006130:	2002      	movs	r0, #2
 8006132:	e7f2      	b.n	800611a <HAL_PCD_EP_SetStall+0x50>

08006134 <HAL_PCD_EP_ClrStall>:
{
 8006134:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006136:	f001 010f 	and.w	r1, r1, #15
 800613a:	6842      	ldr	r2, [r0, #4]
 800613c:	4291      	cmp	r1, r2
 800613e:	d830      	bhi.n	80061a2 <HAL_PCD_EP_ClrStall+0x6e>
{
 8006140:	b510      	push	{r4, lr}
 8006142:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8006144:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006148:	d121      	bne.n	800618e <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800614a:	f003 0207 	and.w	r2, r3, #7
 800614e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8006152:	00c9      	lsls	r1, r1, #3
 8006154:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8006158:	4401      	add	r1, r0
    ep->is_in = 0U;
 800615a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800615e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8006162:	2000      	movs	r0, #0
 8006164:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8006168:	2200      	movs	r2, #0
 800616a:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8006172:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8006176:	2b01      	cmp	r3, #1
 8006178:	d015      	beq.n	80061a6 <HAL_PCD_EP_ClrStall+0x72>
 800617a:	2301      	movs	r3, #1
 800617c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006180:	6820      	ldr	r0, [r4, #0]
 8006182:	f002 fe86 	bl	8008e92 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006186:	2000      	movs	r0, #0
 8006188:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800618c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800618e:	f003 0207 	and.w	r2, r3, #7
 8006192:	3201      	adds	r2, #1
 8006194:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8006198:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800619c:	2001      	movs	r0, #1
 800619e:	7048      	strb	r0, [r1, #1]
 80061a0:	e7e2      	b.n	8006168 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 80061a2:	2001      	movs	r0, #1
}
 80061a4:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80061a6:	2002      	movs	r0, #2
 80061a8:	e7f0      	b.n	800618c <HAL_PCD_EP_ClrStall+0x58>

080061aa <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80061aa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80061ae:	d00b      	beq.n	80061c8 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061b0:	f001 0107 	and.w	r1, r1, #7
 80061b4:	3101      	adds	r1, #1
 80061b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80061ba:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80061be:	b952      	cbnz	r2, 80061d6 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80061c0:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80061c2:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80061c4:	2000      	movs	r0, #0
 80061c6:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80061c8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80061cc:	00c9      	lsls	r1, r1, #3
 80061ce:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80061d2:	4401      	add	r1, r0
 80061d4:	e7f3      	b.n	80061be <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 80061d6:	2201      	movs	r2, #1
 80061d8:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80061da:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80061dc:	0c1b      	lsrs	r3, r3, #16
 80061de:	814b      	strh	r3, [r1, #10]
 80061e0:	e7f0      	b.n	80061c4 <HAL_PCDEx_PMAConfig+0x1a>

080061e2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80061e2:	4603      	mov	r3, r0

  USB_TypeDef *USBx = hpcd->Instance;
 80061e4:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 80061e6:	2101      	movs	r1, #1
 80061e8:	f8c0 12e8 	str.w	r1, [r0, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80061ec:	2000      	movs	r0, #0
 80061ee:	f883 02e0 	strb.w	r0, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80061f2:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	430b      	orrs	r3, r1
 80061fa:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80061fe:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8006202:	b29b      	uxth	r3, r3
 8006204:	f043 0302 	orr.w	r3, r3, #2
 8006208:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800620c:	4770      	bx	lr
	...

08006210 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006210:	2800      	cmp	r0, #0
 8006212:	d136      	bne.n	8006282 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006214:	4b3e      	ldr	r3, [pc, #248]	; (8006310 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800621c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006220:	d008      	beq.n	8006234 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006222:	4a3b      	ldr	r2, [pc, #236]	; (8006310 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006224:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800622c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006230:	2000      	movs	r0, #0
 8006232:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006234:	4a36      	ldr	r2, [pc, #216]	; (8006310 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006236:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800623a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800623e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006242:	6813      	ldr	r3, [r2, #0]
 8006244:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800624c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800624e:	4b31      	ldr	r3, [pc, #196]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2232      	movs	r2, #50	; 0x32
 8006254:	fb02 f303 	mul.w	r3, r2, r3
 8006258:	4a2f      	ldr	r2, [pc, #188]	; (8006318 <HAL_PWREx_ControlVoltageScaling+0x108>)
 800625a:	fba2 2303 	umull	r2, r3, r2, r3
 800625e:	0c9b      	lsrs	r3, r3, #18
 8006260:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006262:	e000      	b.n	8006266 <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8006264:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006266:	4a2a      	ldr	r2, [pc, #168]	; (8006310 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006268:	6952      	ldr	r2, [r2, #20]
 800626a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800626e:	d001      	beq.n	8006274 <HAL_PWREx_ControlVoltageScaling+0x64>
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1f7      	bne.n	8006264 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006274:	4b26      	ldr	r3, [pc, #152]	; (8006310 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800627c:	d144      	bne.n	8006308 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 800627e:	2000      	movs	r0, #0
 8006280:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006282:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006286:	d008      	beq.n	800629a <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006288:	4a21      	ldr	r2, [pc, #132]	; (8006310 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800628a:	6813      	ldr	r3, [r2, #0]
 800628c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006290:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006294:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8006296:	2000      	movs	r0, #0
 8006298:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800629a:	4b1d      	ldr	r3, [pc, #116]	; (8006310 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a6:	d008      	beq.n	80062ba <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062a8:	4a19      	ldr	r2, [pc, #100]	; (8006310 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80062aa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80062ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062b2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 80062b6:	2000      	movs	r0, #0
 80062b8:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062ba:	4a15      	ldr	r2, [pc, #84]	; (8006310 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80062bc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80062c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062c8:	6813      	ldr	r3, [r2, #0]
 80062ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80062ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062d2:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062d4:	4b0f      	ldr	r3, [pc, #60]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0x104>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2232      	movs	r2, #50	; 0x32
 80062da:	fb02 f303 	mul.w	r3, r2, r3
 80062de:	4a0e      	ldr	r2, [pc, #56]	; (8006318 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80062e0:	fba2 2303 	umull	r2, r3, r2, r3
 80062e4:	0c9b      	lsrs	r3, r3, #18
 80062e6:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062e8:	e000      	b.n	80062ec <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 80062ea:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062ec:	4a08      	ldr	r2, [pc, #32]	; (8006310 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80062ee:	6952      	ldr	r2, [r2, #20]
 80062f0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80062f4:	d001      	beq.n	80062fa <HAL_PWREx_ControlVoltageScaling+0xea>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f7      	bne.n	80062ea <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80062fa:	4b05      	ldr	r3, [pc, #20]	; (8006310 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006302:	d103      	bne.n	800630c <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8006304:	2000      	movs	r0, #0
 8006306:	4770      	bx	lr
        return HAL_TIMEOUT;
 8006308:	2003      	movs	r0, #3
 800630a:	4770      	bx	lr
        return HAL_TIMEOUT;
 800630c:	2003      	movs	r0, #3
}
 800630e:	4770      	bx	lr
 8006310:	40007000 	.word	0x40007000
 8006314:	20000004 	.word	0x20000004
 8006318:	431bde83 	.word	0x431bde83

0800631c <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800631c:	4a02      	ldr	r2, [pc, #8]	; (8006328 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800631e:	6893      	ldr	r3, [r2, #8]
 8006320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006324:	6093      	str	r3, [r2, #8]
}
 8006326:	4770      	bx	lr
 8006328:	40007000 	.word	0x40007000

0800632c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800632c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006330:	4605      	mov	r5, r0
 8006332:	460f      	mov	r7, r1
 8006334:	4616      	mov	r6, r2
 8006336:	4699      	mov	r9, r3
 8006338:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800633c:	682c      	ldr	r4, [r5, #0]
 800633e:	68a4      	ldr	r4, [r4, #8]
 8006340:	423c      	tst	r4, r7
 8006342:	bf14      	ite	ne
 8006344:	f04f 0c01 	movne.w	ip, #1
 8006348:	f04f 0c00 	moveq.w	ip, #0
 800634c:	45b4      	cmp	ip, r6
 800634e:	d014      	beq.n	800637a <QSPI_WaitFlagStateUntilTimeout+0x4e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006350:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8006354:	d0f2      	beq.n	800633c <QSPI_WaitFlagStateUntilTimeout+0x10>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006356:	f7fc fef3 	bl	8003140 <HAL_GetTick>
 800635a:	eba0 0009 	sub.w	r0, r0, r9
 800635e:	4540      	cmp	r0, r8
 8006360:	d802      	bhi.n	8006368 <QSPI_WaitFlagStateUntilTimeout+0x3c>
 8006362:	f1b8 0f00 	cmp.w	r8, #0
 8006366:	d1e9      	bne.n	800633c <QSPI_WaitFlagStateUntilTimeout+0x10>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006368:	2304      	movs	r3, #4
 800636a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800636e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006370:	f043 0301 	orr.w	r3, r3, #1
 8006374:	646b      	str	r3, [r5, #68]	; 0x44

        return HAL_ERROR;
 8006376:	2001      	movs	r0, #1
 8006378:	e000      	b.n	800637c <QSPI_WaitFlagStateUntilTimeout+0x50>
      }
    }
  }
  return HAL_OK;
 800637a:	2000      	movs	r0, #0
}
 800637c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006380 <HAL_QSPI_SetTimeout>:
  hqspi->Timeout = Timeout;
 8006380:	6481      	str	r1, [r0, #72]	; 0x48
}
 8006382:	4770      	bx	lr

08006384 <HAL_QSPI_Init>:
{
 8006384:	b570      	push	{r4, r5, r6, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800638a:	f7fc fed9 	bl	8003140 <HAL_GetTick>
  if(hqspi == NULL)
 800638e:	2c00      	cmp	r4, #0
 8006390:	d04c      	beq.n	800642c <HAL_QSPI_Init+0xa8>
 8006392:	4606      	mov	r6, r0
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006394:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006398:	2b00      	cmp	r3, #0
 800639a:	d03c      	beq.n	8006416 <HAL_QSPI_Init+0x92>
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800639c:	6825      	ldr	r5, [r4, #0]
 800639e:	682a      	ldr	r2, [r5, #0]
 80063a0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80063a4:	68a1      	ldr	r1, [r4, #8]
 80063a6:	3901      	subs	r1, #1
 80063a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80063ac:	602a      	str	r2, [r5, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80063ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	4633      	mov	r3, r6
 80063b4:	2200      	movs	r2, #0
 80063b6:	2120      	movs	r1, #32
 80063b8:	4620      	mov	r0, r4
 80063ba:	f7ff ffb7 	bl	800632c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80063be:	bb28      	cbnz	r0, 800640c <HAL_QSPI_Init+0x88>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80063c0:	6821      	ldr	r1, [r4, #0]
 80063c2:	680b      	ldr	r3, [r1, #0]
 80063c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80063c8:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80063cc:	6865      	ldr	r5, [r4, #4]
 80063ce:	68e2      	ldr	r2, [r4, #12]
 80063d0:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 80063d4:	69e5      	ldr	r5, [r4, #28]
 80063d6:	432a      	orrs	r2, r5
 80063d8:	6a25      	ldr	r5, [r4, #32]
 80063da:	432a      	orrs	r2, r5
 80063dc:	4313      	orrs	r3, r2
 80063de:	600b      	str	r3, [r1, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80063e0:	6821      	ldr	r1, [r4, #0]
 80063e2:	684a      	ldr	r2, [r1, #4]
 80063e4:	4b12      	ldr	r3, [pc, #72]	; (8006430 <HAL_QSPI_Init+0xac>)
 80063e6:	4013      	ands	r3, r2
 80063e8:	6925      	ldr	r5, [r4, #16]
 80063ea:	6962      	ldr	r2, [r4, #20]
 80063ec:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80063f0:	69a5      	ldr	r5, [r4, #24]
 80063f2:	432a      	orrs	r2, r5
 80063f4:	4313      	orrs	r3, r2
 80063f6:	604b      	str	r3, [r1, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80063f8:	6822      	ldr	r2, [r4, #0]
 80063fa:	6813      	ldr	r3, [r2, #0]
 80063fc:	f043 0301 	orr.w	r3, r3, #1
 8006400:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006402:	2300      	movs	r3, #0
 8006404:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8006406:	2301      	movs	r3, #1
 8006408:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800640c:	2300      	movs	r3, #0
 800640e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006412:	b002      	add	sp, #8
 8006414:	bd70      	pop	{r4, r5, r6, pc}
    hqspi->Lock = HAL_UNLOCKED;
 8006416:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 800641a:	4620      	mov	r0, r4
 800641c:	f7fb fe26 	bl	800206c <HAL_QSPI_MspInit>
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006420:	f241 3188 	movw	r1, #5000	; 0x1388
 8006424:	4620      	mov	r0, r4
 8006426:	f7ff ffab 	bl	8006380 <HAL_QSPI_SetTimeout>
 800642a:	e7b7      	b.n	800639c <HAL_QSPI_Init+0x18>
    return HAL_ERROR;
 800642c:	2001      	movs	r0, #1
 800642e:	e7f0      	b.n	8006412 <HAL_QSPI_Init+0x8e>
 8006430:	ffe0f8fe 	.word	0xffe0f8fe

08006434 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006434:	4b12      	ldr	r3, [pc, #72]	; (8006480 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8006436:	68da      	ldr	r2, [r3, #12]
 8006438:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800643c:	68d8      	ldr	r0, [r3, #12]
 800643e:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8006442:	1c43      	adds	r3, r0, #1

  switch (pllsource)
 8006444:	2a03      	cmp	r2, #3
 8006446:	d011      	beq.n	800646c <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006448:	480e      	ldr	r0, [pc, #56]	; (8006484 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 800644a:	fbb0 f0f3 	udiv	r0, r0, r3
 800644e:	4b0c      	ldr	r3, [pc, #48]	; (8006480 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8006456:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800645a:	4b09      	ldr	r3, [pc, #36]	; (8006480 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8006462:	3301      	adds	r3, #1
 8006464:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 8006466:	fbb0 f0f3 	udiv	r0, r0, r3
 800646a:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800646c:	4806      	ldr	r0, [pc, #24]	; (8006488 <RCC_GetSysClockFreqFromPLLSource+0x54>)
 800646e:	fbb0 f0f3 	udiv	r0, r0, r3
 8006472:	4b03      	ldr	r3, [pc, #12]	; (8006480 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800647a:	fb03 f000 	mul.w	r0, r3, r0
    break;
 800647e:	e7ec      	b.n	800645a <RCC_GetSysClockFreqFromPLLSource+0x26>
 8006480:	40021000 	.word	0x40021000
 8006484:	00f42400 	.word	0x00f42400
 8006488:	007a1200 	.word	0x007a1200

0800648c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800648c:	2800      	cmp	r0, #0
 800648e:	f000 8254 	beq.w	800693a <HAL_RCC_OscConfig+0x4ae>
{
 8006492:	b570      	push	{r4, r5, r6, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006498:	6803      	ldr	r3, [r0, #0]
 800649a:	f013 0f01 	tst.w	r3, #1
 800649e:	d037      	beq.n	8006510 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064a0:	4aa4      	ldr	r2, [pc, #656]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 80064a2:	6893      	ldr	r3, [r2, #8]
 80064a4:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064a8:	68d2      	ldr	r2, [r2, #12]
 80064aa:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80064ae:	2b0c      	cmp	r3, #12
 80064b0:	d023      	beq.n	80064fa <HAL_RCC_OscConfig+0x6e>
 80064b2:	2b08      	cmp	r3, #8
 80064b4:	d023      	beq.n	80064fe <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064b6:	6863      	ldr	r3, [r4, #4]
 80064b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064bc:	d04e      	beq.n	800655c <HAL_RCC_OscConfig+0xd0>
 80064be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064c2:	d051      	beq.n	8006568 <HAL_RCC_OscConfig+0xdc>
 80064c4:	4b9b      	ldr	r3, [pc, #620]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80064d4:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064d6:	6863      	ldr	r3, [r4, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d052      	beq.n	8006582 <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 80064dc:	f7fc fe30 	bl	8003140 <HAL_GetTick>
 80064e0:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064e2:	4b94      	ldr	r3, [pc, #592]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80064ea:	d111      	bne.n	8006510 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064ec:	f7fc fe28 	bl	8003140 <HAL_GetTick>
 80064f0:	1b40      	subs	r0, r0, r5
 80064f2:	2864      	cmp	r0, #100	; 0x64
 80064f4:	d9f5      	bls.n	80064e2 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 80064f6:	2003      	movs	r0, #3
 80064f8:	e228      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80064fa:	2a03      	cmp	r2, #3
 80064fc:	d1d9      	bne.n	80064b2 <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064fe:	4b8d      	ldr	r3, [pc, #564]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006506:	d003      	beq.n	8006510 <HAL_RCC_OscConfig+0x84>
 8006508:	6863      	ldr	r3, [r4, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 8217 	beq.w	800693e <HAL_RCC_OscConfig+0x4b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	f013 0f02 	tst.w	r3, #2
 8006516:	d05d      	beq.n	80065d4 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006518:	4a86      	ldr	r2, [pc, #536]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 800651a:	6893      	ldr	r3, [r2, #8]
 800651c:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006520:	68d2      	ldr	r2, [r2, #12]
 8006522:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006526:	2b0c      	cmp	r3, #12
 8006528:	d03a      	beq.n	80065a0 <HAL_RCC_OscConfig+0x114>
 800652a:	2b04      	cmp	r3, #4
 800652c:	d03a      	beq.n	80065a4 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800652e:	68e3      	ldr	r3, [r4, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d075      	beq.n	8006620 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8006534:	4a7f      	ldr	r2, [pc, #508]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 8006536:	6813      	ldr	r3, [r2, #0]
 8006538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800653c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800653e:	f7fc fdff 	bl	8003140 <HAL_GetTick>
 8006542:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006544:	4b7b      	ldr	r3, [pc, #492]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800654c:	d15f      	bne.n	800660e <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800654e:	f7fc fdf7 	bl	8003140 <HAL_GetTick>
 8006552:	1b40      	subs	r0, r0, r5
 8006554:	2802      	cmp	r0, #2
 8006556:	d9f5      	bls.n	8006544 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 8006558:	2003      	movs	r0, #3
 800655a:	e1f7      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800655c:	4a75      	ldr	r2, [pc, #468]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 800655e:	6813      	ldr	r3, [r2, #0]
 8006560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	e7b6      	b.n	80064d6 <HAL_RCC_OscConfig+0x4a>
 8006568:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800656c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	e7a9      	b.n	80064d6 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8006582:	f7fc fddd 	bl	8003140 <HAL_GetTick>
 8006586:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006588:	4b6a      	ldr	r3, [pc, #424]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006590:	d0be      	beq.n	8006510 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006592:	f7fc fdd5 	bl	8003140 <HAL_GetTick>
 8006596:	1b40      	subs	r0, r0, r5
 8006598:	2864      	cmp	r0, #100	; 0x64
 800659a:	d9f5      	bls.n	8006588 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 800659c:	2003      	movs	r0, #3
 800659e:	e1d5      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80065a0:	2a02      	cmp	r2, #2
 80065a2:	d1c2      	bne.n	800652a <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065a4:	4b63      	ldr	r3, [pc, #396]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80065ac:	d003      	beq.n	80065b6 <HAL_RCC_OscConfig+0x12a>
 80065ae:	68e3      	ldr	r3, [r4, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 81c6 	beq.w	8006942 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b6:	4a5f      	ldr	r2, [pc, #380]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 80065b8:	6853      	ldr	r3, [r2, #4]
 80065ba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80065be:	6921      	ldr	r1, [r4, #16]
 80065c0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80065c4:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80065c6:	4b5c      	ldr	r3, [pc, #368]	; (8006738 <HAL_RCC_OscConfig+0x2ac>)
 80065c8:	6818      	ldr	r0, [r3, #0]
 80065ca:	f7fc fd75 	bl	80030b8 <HAL_InitTick>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	f040 81b9 	bne.w	8006946 <HAL_RCC_OscConfig+0x4ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	f013 0f08 	tst.w	r3, #8
 80065da:	d04c      	beq.n	8006676 <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065dc:	6963      	ldr	r3, [r4, #20]
 80065de:	b39b      	cbz	r3, 8006648 <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 80065e0:	4a54      	ldr	r2, [pc, #336]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 80065e2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80065e6:	f043 0301 	orr.w	r3, r3, #1
 80065ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80065ee:	f7fc fda7 	bl	8003140 <HAL_GetTick>
 80065f2:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80065f4:	4b4f      	ldr	r3, [pc, #316]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 80065f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065fa:	f013 0f02 	tst.w	r3, #2
 80065fe:	d13a      	bne.n	8006676 <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006600:	f7fc fd9e 	bl	8003140 <HAL_GetTick>
 8006604:	1b40      	subs	r0, r0, r5
 8006606:	2802      	cmp	r0, #2
 8006608:	d9f4      	bls.n	80065f4 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 800660a:	2003      	movs	r0, #3
 800660c:	e19e      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800660e:	4a49      	ldr	r2, [pc, #292]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 8006610:	6853      	ldr	r3, [r2, #4]
 8006612:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006616:	6921      	ldr	r1, [r4, #16]
 8006618:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800661c:	6053      	str	r3, [r2, #4]
 800661e:	e7d9      	b.n	80065d4 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8006620:	4a44      	ldr	r2, [pc, #272]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 8006622:	6813      	ldr	r3, [r2, #0]
 8006624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006628:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800662a:	f7fc fd89 	bl	8003140 <HAL_GetTick>
 800662e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006630:	4b40      	ldr	r3, [pc, #256]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006638:	d0cc      	beq.n	80065d4 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800663a:	f7fc fd81 	bl	8003140 <HAL_GetTick>
 800663e:	1b40      	subs	r0, r0, r5
 8006640:	2802      	cmp	r0, #2
 8006642:	d9f5      	bls.n	8006630 <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8006644:	2003      	movs	r0, #3
 8006646:	e181      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_LSI_DISABLE();
 8006648:	4a3a      	ldr	r2, [pc, #232]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 800664a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800664e:	f023 0301 	bic.w	r3, r3, #1
 8006652:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006656:	f7fc fd73 	bl	8003140 <HAL_GetTick>
 800665a:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800665c:	4b35      	ldr	r3, [pc, #212]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 800665e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006662:	f013 0f02 	tst.w	r3, #2
 8006666:	d006      	beq.n	8006676 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006668:	f7fc fd6a 	bl	8003140 <HAL_GetTick>
 800666c:	1b40      	subs	r0, r0, r5
 800666e:	2802      	cmp	r0, #2
 8006670:	d9f4      	bls.n	800665c <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 8006672:	2003      	movs	r0, #3
 8006674:	e16a      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	f013 0f04 	tst.w	r3, #4
 800667c:	f000 8081 	beq.w	8006782 <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006680:	4b2c      	ldr	r3, [pc, #176]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 8006682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006684:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006688:	d136      	bne.n	80066f8 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800668a:	4b2a      	ldr	r3, [pc, #168]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 800668c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800668e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006692:	659a      	str	r2, [r3, #88]	; 0x58
 8006694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800669a:	9301      	str	r3, [sp, #4]
 800669c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800669e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066a0:	4b26      	ldr	r3, [pc, #152]	; (800673c <HAL_RCC_OscConfig+0x2b0>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80066a8:	d028      	beq.n	80066fc <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066aa:	68a3      	ldr	r3, [r4, #8]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d039      	beq.n	8006724 <HAL_RCC_OscConfig+0x298>
 80066b0:	2b05      	cmp	r3, #5
 80066b2:	d045      	beq.n	8006740 <HAL_RCC_OscConfig+0x2b4>
 80066b4:	4b1f      	ldr	r3, [pc, #124]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 80066b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80066ba:	f022 0201 	bic.w	r2, r2, #1
 80066be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80066c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80066c6:	f022 0204 	bic.w	r2, r2, #4
 80066ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066ce:	68a3      	ldr	r3, [r4, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d043      	beq.n	800675c <HAL_RCC_OscConfig+0x2d0>
      tickstart = HAL_GetTick();
 80066d4:	f7fc fd34 	bl	8003140 <HAL_GetTick>
 80066d8:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066da:	4b16      	ldr	r3, [pc, #88]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 80066dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e0:	f013 0f02 	tst.w	r3, #2
 80066e4:	d14c      	bne.n	8006780 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e6:	f7fc fd2b 	bl	8003140 <HAL_GetTick>
 80066ea:	1b80      	subs	r0, r0, r6
 80066ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80066f0:	4298      	cmp	r0, r3
 80066f2:	d9f2      	bls.n	80066da <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 80066f4:	2003      	movs	r0, #3
 80066f6:	e129      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
    FlagStatus       pwrclkchanged = RESET;
 80066f8:	2500      	movs	r5, #0
 80066fa:	e7d1      	b.n	80066a0 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066fc:	4a0f      	ldr	r2, [pc, #60]	; (800673c <HAL_RCC_OscConfig+0x2b0>)
 80066fe:	6813      	ldr	r3, [r2, #0]
 8006700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006704:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006706:	f7fc fd1b 	bl	8003140 <HAL_GetTick>
 800670a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <HAL_RCC_OscConfig+0x2b0>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006714:	d1c9      	bne.n	80066aa <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006716:	f7fc fd13 	bl	8003140 <HAL_GetTick>
 800671a:	1b80      	subs	r0, r0, r6
 800671c:	2802      	cmp	r0, #2
 800671e:	d9f5      	bls.n	800670c <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 8006720:	2003      	movs	r0, #3
 8006722:	e113      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006724:	4a03      	ldr	r2, [pc, #12]	; (8006734 <HAL_RCC_OscConfig+0x2a8>)
 8006726:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800672a:	f043 0301 	orr.w	r3, r3, #1
 800672e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006732:	e7cc      	b.n	80066ce <HAL_RCC_OscConfig+0x242>
 8006734:	40021000 	.word	0x40021000
 8006738:	20000234 	.word	0x20000234
 800673c:	40007000 	.word	0x40007000
 8006740:	4b8a      	ldr	r3, [pc, #552]	; (800696c <HAL_RCC_OscConfig+0x4e0>)
 8006742:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006746:	f042 0204 	orr.w	r2, r2, #4
 800674a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800674e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006752:	f042 0201 	orr.w	r2, r2, #1
 8006756:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800675a:	e7b8      	b.n	80066ce <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 800675c:	f7fc fcf0 	bl	8003140 <HAL_GetTick>
 8006760:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006762:	4b82      	ldr	r3, [pc, #520]	; (800696c <HAL_RCC_OscConfig+0x4e0>)
 8006764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006768:	f013 0f02 	tst.w	r3, #2
 800676c:	d008      	beq.n	8006780 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800676e:	f7fc fce7 	bl	8003140 <HAL_GetTick>
 8006772:	1b80      	subs	r0, r0, r6
 8006774:	f241 3388 	movw	r3, #5000	; 0x1388
 8006778:	4298      	cmp	r0, r3
 800677a:	d9f2      	bls.n	8006762 <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 800677c:	2003      	movs	r0, #3
 800677e:	e0e5      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
    if (pwrclkchanged == SET)
 8006780:	b9e5      	cbnz	r5, 80067bc <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	f013 0f20 	tst.w	r3, #32
 8006788:	d035      	beq.n	80067f6 <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800678a:	69a3      	ldr	r3, [r4, #24]
 800678c:	b1e3      	cbz	r3, 80067c8 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 800678e:	4a77      	ldr	r2, [pc, #476]	; (800696c <HAL_RCC_OscConfig+0x4e0>)
 8006790:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8006794:	f043 0301 	orr.w	r3, r3, #1
 8006798:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800679c:	f7fc fcd0 	bl	8003140 <HAL_GetTick>
 80067a0:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80067a2:	4b72      	ldr	r3, [pc, #456]	; (800696c <HAL_RCC_OscConfig+0x4e0>)
 80067a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067a8:	f013 0f02 	tst.w	r3, #2
 80067ac:	d123      	bne.n	80067f6 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067ae:	f7fc fcc7 	bl	8003140 <HAL_GetTick>
 80067b2:	1b40      	subs	r0, r0, r5
 80067b4:	2802      	cmp	r0, #2
 80067b6:	d9f4      	bls.n	80067a2 <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 80067b8:	2003      	movs	r0, #3
 80067ba:	e0c7      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 80067bc:	4a6b      	ldr	r2, [pc, #428]	; (800696c <HAL_RCC_OscConfig+0x4e0>)
 80067be:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80067c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067c4:	6593      	str	r3, [r2, #88]	; 0x58
 80067c6:	e7dc      	b.n	8006782 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 80067c8:	4a68      	ldr	r2, [pc, #416]	; (800696c <HAL_RCC_OscConfig+0x4e0>)
 80067ca:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80067ce:	f023 0301 	bic.w	r3, r3, #1
 80067d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80067d6:	f7fc fcb3 	bl	8003140 <HAL_GetTick>
 80067da:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80067dc:	4b63      	ldr	r3, [pc, #396]	; (800696c <HAL_RCC_OscConfig+0x4e0>)
 80067de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067e2:	f013 0f02 	tst.w	r3, #2
 80067e6:	d006      	beq.n	80067f6 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067e8:	f7fc fcaa 	bl	8003140 <HAL_GetTick>
 80067ec:	1b40      	subs	r0, r0, r5
 80067ee:	2802      	cmp	r0, #2
 80067f0:	d9f4      	bls.n	80067dc <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 80067f2:	2003      	movs	r0, #3
 80067f4:	e0aa      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80067f6:	69e3      	ldr	r3, [r4, #28]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 80a6 	beq.w	800694a <HAL_RCC_OscConfig+0x4be>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067fe:	4a5b      	ldr	r2, [pc, #364]	; (800696c <HAL_RCC_OscConfig+0x4e0>)
 8006800:	6892      	ldr	r2, [r2, #8]
 8006802:	f002 020c 	and.w	r2, r2, #12
 8006806:	2a0c      	cmp	r2, #12
 8006808:	d069      	beq.n	80068de <HAL_RCC_OscConfig+0x452>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800680a:	2b02      	cmp	r3, #2
 800680c:	d01d      	beq.n	800684a <HAL_RCC_OscConfig+0x3be>
        __HAL_RCC_PLL_DISABLE();
 800680e:	4b57      	ldr	r3, [pc, #348]	; (800696c <HAL_RCC_OscConfig+0x4e0>)
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006816:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	f022 0203 	bic.w	r2, r2, #3
 800681e:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006820:	68da      	ldr	r2, [r3, #12]
 8006822:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8006826:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800682a:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 800682c:	f7fc fc88 	bl	8003140 <HAL_GetTick>
 8006830:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006832:	4b4e      	ldr	r3, [pc, #312]	; (800696c <HAL_RCC_OscConfig+0x4e0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800683a:	d04e      	beq.n	80068da <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800683c:	f7fc fc80 	bl	8003140 <HAL_GetTick>
 8006840:	1b00      	subs	r0, r0, r4
 8006842:	2802      	cmp	r0, #2
 8006844:	d9f5      	bls.n	8006832 <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 8006846:	2003      	movs	r0, #3
 8006848:	e080      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_DISABLE();
 800684a:	4a48      	ldr	r2, [pc, #288]	; (800696c <HAL_RCC_OscConfig+0x4e0>)
 800684c:	6813      	ldr	r3, [r2, #0]
 800684e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006852:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006854:	f7fc fc74 	bl	8003140 <HAL_GetTick>
 8006858:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800685a:	4b44      	ldr	r3, [pc, #272]	; (800696c <HAL_RCC_OscConfig+0x4e0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006862:	d006      	beq.n	8006872 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006864:	f7fc fc6c 	bl	8003140 <HAL_GetTick>
 8006868:	1b40      	subs	r0, r0, r5
 800686a:	2802      	cmp	r0, #2
 800686c:	d9f5      	bls.n	800685a <HAL_RCC_OscConfig+0x3ce>
            return HAL_TIMEOUT;
 800686e:	2003      	movs	r0, #3
 8006870:	e06c      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006872:	4a3e      	ldr	r2, [pc, #248]	; (800696c <HAL_RCC_OscConfig+0x4e0>)
 8006874:	68d3      	ldr	r3, [r2, #12]
 8006876:	493e      	ldr	r1, [pc, #248]	; (8006970 <HAL_RCC_OscConfig+0x4e4>)
 8006878:	4019      	ands	r1, r3
 800687a:	6a23      	ldr	r3, [r4, #32]
 800687c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800687e:	3801      	subs	r0, #1
 8006880:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8006884:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006886:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800688a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800688c:	0840      	lsrs	r0, r0, #1
 800688e:	3801      	subs	r0, #1
 8006890:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8006894:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006896:	0840      	lsrs	r0, r0, #1
 8006898:	3801      	subs	r0, #1
 800689a:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800689e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80068a0:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 80068a4:	430b      	orrs	r3, r1
 80068a6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 80068a8:	6813      	ldr	r3, [r2, #0]
 80068aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068ae:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068b0:	68d3      	ldr	r3, [r2, #12]
 80068b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068b6:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80068b8:	f7fc fc42 	bl	8003140 <HAL_GetTick>
 80068bc:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068be:	4b2b      	ldr	r3, [pc, #172]	; (800696c <HAL_RCC_OscConfig+0x4e0>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80068c6:	d106      	bne.n	80068d6 <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c8:	f7fc fc3a 	bl	8003140 <HAL_GetTick>
 80068cc:	1b00      	subs	r0, r0, r4
 80068ce:	2802      	cmp	r0, #2
 80068d0:	d9f5      	bls.n	80068be <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 80068d2:	2003      	movs	r0, #3
 80068d4:	e03a      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 80068d6:	2000      	movs	r0, #0
 80068d8:	e038      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
 80068da:	2000      	movs	r0, #0
 80068dc:	e036      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d036      	beq.n	8006950 <HAL_RCC_OscConfig+0x4c4>
      temp_pllckcfg = RCC->PLLCFGR;
 80068e2:	4b22      	ldr	r3, [pc, #136]	; (800696c <HAL_RCC_OscConfig+0x4e0>)
 80068e4:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068e6:	f003 0103 	and.w	r1, r3, #3
 80068ea:	6a22      	ldr	r2, [r4, #32]
 80068ec:	4291      	cmp	r1, r2
 80068ee:	d131      	bne.n	8006954 <HAL_RCC_OscConfig+0x4c8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80068f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80068f6:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068f8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80068fc:	d12c      	bne.n	8006958 <HAL_RCC_OscConfig+0x4cc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80068fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006902:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006904:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006908:	d128      	bne.n	800695c <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800690a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800690e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006910:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8006914:	d124      	bne.n	8006960 <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006916:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800691a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800691c:	0852      	lsrs	r2, r2, #1
 800691e:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006920:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8006924:	d11e      	bne.n	8006964 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006926:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800692a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800692c:	0852      	lsrs	r2, r2, #1
 800692e:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006930:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8006934:	d118      	bne.n	8006968 <HAL_RCC_OscConfig+0x4dc>
  return HAL_OK;
 8006936:	2000      	movs	r0, #0
 8006938:	e008      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
    return HAL_ERROR;
 800693a:	2001      	movs	r0, #1
}
 800693c:	4770      	bx	lr
        return HAL_ERROR;
 800693e:	2001      	movs	r0, #1
 8006940:	e004      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8006942:	2001      	movs	r0, #1
 8006944:	e002      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
          return HAL_ERROR;
 8006946:	2001      	movs	r0, #1
 8006948:	e000      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 800694a:	2000      	movs	r0, #0
}
 800694c:	b002      	add	sp, #8
 800694e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8006950:	2001      	movs	r0, #1
 8006952:	e7fb      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8006954:	2001      	movs	r0, #1
 8006956:	e7f9      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
 8006958:	2001      	movs	r0, #1
 800695a:	e7f7      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
 800695c:	2001      	movs	r0, #1
 800695e:	e7f5      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
 8006960:	2001      	movs	r0, #1
 8006962:	e7f3      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
 8006964:	2001      	movs	r0, #1
 8006966:	e7f1      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
 8006968:	2001      	movs	r0, #1
 800696a:	e7ef      	b.n	800694c <HAL_RCC_OscConfig+0x4c0>
 800696c:	40021000 	.word	0x40021000
 8006970:	019f800c 	.word	0x019f800c

08006974 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006974:	4b1e      	ldr	r3, [pc, #120]	; (80069f0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 030c 	and.w	r3, r3, #12
 800697c:	2b04      	cmp	r3, #4
 800697e:	d033      	beq.n	80069e8 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006980:	4b1b      	ldr	r3, [pc, #108]	; (80069f0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f003 030c 	and.w	r3, r3, #12
 8006988:	2b08      	cmp	r3, #8
 800698a:	d02f      	beq.n	80069ec <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800698c:	4b18      	ldr	r3, [pc, #96]	; (80069f0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f003 030c 	and.w	r3, r3, #12
 8006994:	2b0c      	cmp	r3, #12
 8006996:	d001      	beq.n	800699c <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 8006998:	2000      	movs	r0, #0
}
 800699a:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800699c:	4b14      	ldr	r3, [pc, #80]	; (80069f0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80069a4:	68d8      	ldr	r0, [r3, #12]
 80069a6:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80069aa:	1c43      	adds	r3, r0, #1
    switch (pllsource)
 80069ac:	2a03      	cmp	r2, #3
 80069ae:	d011      	beq.n	80069d4 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069b0:	4810      	ldr	r0, [pc, #64]	; (80069f4 <HAL_RCC_GetSysClockFreq+0x80>)
 80069b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80069b6:	4b0e      	ldr	r3, [pc, #56]	; (80069f0 <HAL_RCC_GetSysClockFreq+0x7c>)
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80069be:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069c2:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <HAL_RCC_GetSysClockFreq+0x7c>)
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80069ca:	3301      	adds	r3, #1
 80069cc:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80069ce:	fbb0 f0f3 	udiv	r0, r0, r3
 80069d2:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069d4:	4808      	ldr	r0, [pc, #32]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x84>)
 80069d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80069da:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <HAL_RCC_GetSysClockFreq+0x7c>)
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80069e2:	fb03 f000 	mul.w	r0, r3, r0
      break;
 80069e6:	e7ec      	b.n	80069c2 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 80069e8:	4802      	ldr	r0, [pc, #8]	; (80069f4 <HAL_RCC_GetSysClockFreq+0x80>)
 80069ea:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80069ec:	4802      	ldr	r0, [pc, #8]	; (80069f8 <HAL_RCC_GetSysClockFreq+0x84>)
 80069ee:	4770      	bx	lr
 80069f0:	40021000 	.word	0x40021000
 80069f4:	00f42400 	.word	0x00f42400
 80069f8:	007a1200 	.word	0x007a1200

080069fc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80069fc:	2800      	cmp	r0, #0
 80069fe:	f000 80e6 	beq.w	8006bce <HAL_RCC_ClockConfig+0x1d2>
{
 8006a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a04:	460c      	mov	r4, r1
 8006a06:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a08:	4b74      	ldr	r3, [pc, #464]	; (8006bdc <HAL_RCC_ClockConfig+0x1e0>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 030f 	and.w	r3, r3, #15
 8006a10:	428b      	cmp	r3, r1
 8006a12:	d20b      	bcs.n	8006a2c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a14:	4a71      	ldr	r2, [pc, #452]	; (8006bdc <HAL_RCC_ClockConfig+0x1e0>)
 8006a16:	6813      	ldr	r3, [r2, #0]
 8006a18:	f023 030f 	bic.w	r3, r3, #15
 8006a1c:	430b      	orrs	r3, r1
 8006a1e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a20:	6813      	ldr	r3, [r2, #0]
 8006a22:	f003 030f 	and.w	r3, r3, #15
 8006a26:	428b      	cmp	r3, r1
 8006a28:	f040 80d3 	bne.w	8006bd2 <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a2c:	682e      	ldr	r6, [r5, #0]
 8006a2e:	f016 0601 	ands.w	r6, r6, #1
 8006a32:	d05f      	beq.n	8006af4 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a34:	686b      	ldr	r3, [r5, #4]
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d02f      	beq.n	8006a9a <HAL_RCC_ClockConfig+0x9e>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d04d      	beq.n	8006ada <HAL_RCC_ClockConfig+0xde>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a3e:	4b68      	ldr	r3, [pc, #416]	; (8006be0 <HAL_RCC_ClockConfig+0x1e4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006a46:	f000 80c6 	beq.w	8006bd6 <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006a4a:	f7ff ff93 	bl	8006974 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8006a4e:	4b65      	ldr	r3, [pc, #404]	; (8006be4 <HAL_RCC_ClockConfig+0x1e8>)
 8006a50:	4298      	cmp	r0, r3
 8006a52:	d94d      	bls.n	8006af0 <HAL_RCC_ClockConfig+0xf4>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a54:	4a62      	ldr	r2, [pc, #392]	; (8006be0 <HAL_RCC_ClockConfig+0x1e4>)
 8006a56:	6893      	ldr	r3, [r2, #8]
 8006a58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006a62:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a64:	4a5e      	ldr	r2, [pc, #376]	; (8006be0 <HAL_RCC_ClockConfig+0x1e4>)
 8006a66:	6893      	ldr	r3, [r2, #8]
 8006a68:	f023 0303 	bic.w	r3, r3, #3
 8006a6c:	6869      	ldr	r1, [r5, #4]
 8006a6e:	430b      	orrs	r3, r1
 8006a70:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8006a72:	f7fc fb65 	bl	8003140 <HAL_GetTick>
 8006a76:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a78:	4b59      	ldr	r3, [pc, #356]	; (8006be0 <HAL_RCC_ClockConfig+0x1e4>)
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f003 030c 	and.w	r3, r3, #12
 8006a80:	686a      	ldr	r2, [r5, #4]
 8006a82:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006a86:	d035      	beq.n	8006af4 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a88:	f7fc fb5a 	bl	8003140 <HAL_GetTick>
 8006a8c:	1bc0      	subs	r0, r0, r7
 8006a8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a92:	4298      	cmp	r0, r3
 8006a94:	d9f0      	bls.n	8006a78 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8006a96:	2003      	movs	r0, #3
 8006a98:	e078      	b.n	8006b8c <HAL_RCC_ClockConfig+0x190>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a9a:	4b51      	ldr	r3, [pc, #324]	; (8006be0 <HAL_RCC_ClockConfig+0x1e4>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006aa2:	d101      	bne.n	8006aa8 <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8006aa4:	2001      	movs	r0, #1
 8006aa6:	e071      	b.n	8006b8c <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006aa8:	f7ff fcc4 	bl	8006434 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8006aac:	4b4d      	ldr	r3, [pc, #308]	; (8006be4 <HAL_RCC_ClockConfig+0x1e8>)
 8006aae:	4298      	cmp	r0, r3
 8006ab0:	d91a      	bls.n	8006ae8 <HAL_RCC_ClockConfig+0xec>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006ab2:	4b4b      	ldr	r3, [pc, #300]	; (8006be0 <HAL_RCC_ClockConfig+0x1e4>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8006aba:	d005      	beq.n	8006ac8 <HAL_RCC_ClockConfig+0xcc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006abc:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006abe:	f016 0602 	ands.w	r6, r6, #2
 8006ac2:	d0cf      	beq.n	8006a64 <HAL_RCC_ClockConfig+0x68>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006ac4:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006ac6:	b98b      	cbnz	r3, 8006aec <HAL_RCC_ClockConfig+0xf0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006ac8:	4a45      	ldr	r2, [pc, #276]	; (8006be0 <HAL_RCC_ClockConfig+0x1e4>)
 8006aca:	6893      	ldr	r3, [r2, #8]
 8006acc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006ad6:	2680      	movs	r6, #128	; 0x80
 8006ad8:	e7c4      	b.n	8006a64 <HAL_RCC_ClockConfig+0x68>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ada:	4b41      	ldr	r3, [pc, #260]	; (8006be0 <HAL_RCC_ClockConfig+0x1e4>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006ae2:	d1b2      	bne.n	8006a4a <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	e051      	b.n	8006b8c <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006ae8:	2600      	movs	r6, #0
 8006aea:	e7bb      	b.n	8006a64 <HAL_RCC_ClockConfig+0x68>
 8006aec:	2600      	movs	r6, #0
 8006aee:	e7b9      	b.n	8006a64 <HAL_RCC_ClockConfig+0x68>
 8006af0:	2600      	movs	r6, #0
 8006af2:	e7b7      	b.n	8006a64 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006af4:	682b      	ldr	r3, [r5, #0]
 8006af6:	f013 0f02 	tst.w	r3, #2
 8006afa:	d048      	beq.n	8006b8e <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006afc:	f013 0f04 	tst.w	r3, #4
 8006b00:	d004      	beq.n	8006b0c <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b02:	4a37      	ldr	r2, [pc, #220]	; (8006be0 <HAL_RCC_ClockConfig+0x1e4>)
 8006b04:	6893      	ldr	r3, [r2, #8]
 8006b06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006b0a:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b0c:	682b      	ldr	r3, [r5, #0]
 8006b0e:	f013 0f08 	tst.w	r3, #8
 8006b12:	d006      	beq.n	8006b22 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006b14:	4a32      	ldr	r2, [pc, #200]	; (8006be0 <HAL_RCC_ClockConfig+0x1e4>)
 8006b16:	6893      	ldr	r3, [r2, #8]
 8006b18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006b1c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006b20:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b22:	4a2f      	ldr	r2, [pc, #188]	; (8006be0 <HAL_RCC_ClockConfig+0x1e4>)
 8006b24:	6893      	ldr	r3, [r2, #8]
 8006b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b2a:	68a9      	ldr	r1, [r5, #8]
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b30:	4b2a      	ldr	r3, [pc, #168]	; (8006bdc <HAL_RCC_ClockConfig+0x1e0>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 030f 	and.w	r3, r3, #15
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	d830      	bhi.n	8006b9e <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	f013 0f04 	tst.w	r3, #4
 8006b42:	d006      	beq.n	8006b52 <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b44:	4a26      	ldr	r2, [pc, #152]	; (8006be0 <HAL_RCC_ClockConfig+0x1e4>)
 8006b46:	6893      	ldr	r3, [r2, #8]
 8006b48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006b4c:	68e9      	ldr	r1, [r5, #12]
 8006b4e:	430b      	orrs	r3, r1
 8006b50:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b52:	682b      	ldr	r3, [r5, #0]
 8006b54:	f013 0f08 	tst.w	r3, #8
 8006b58:	d007      	beq.n	8006b6a <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b5a:	4a21      	ldr	r2, [pc, #132]	; (8006be0 <HAL_RCC_ClockConfig+0x1e4>)
 8006b5c:	6893      	ldr	r3, [r2, #8]
 8006b5e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006b62:	6929      	ldr	r1, [r5, #16]
 8006b64:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006b68:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b6a:	f7ff ff03 	bl	8006974 <HAL_RCC_GetSysClockFreq>
 8006b6e:	4b1c      	ldr	r3, [pc, #112]	; (8006be0 <HAL_RCC_ClockConfig+0x1e4>)
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006b76:	4a1c      	ldr	r2, [pc, #112]	; (8006be8 <HAL_RCC_ClockConfig+0x1ec>)
 8006b78:	5cd3      	ldrb	r3, [r2, r3]
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	40d8      	lsrs	r0, r3
 8006b80:	4b1a      	ldr	r3, [pc, #104]	; (8006bec <HAL_RCC_ClockConfig+0x1f0>)
 8006b82:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8006b84:	4b1a      	ldr	r3, [pc, #104]	; (8006bf0 <HAL_RCC_ClockConfig+0x1f4>)
 8006b86:	6818      	ldr	r0, [r3, #0]
 8006b88:	f7fc fa96 	bl	80030b8 <HAL_InitTick>
}
 8006b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 8006b8e:	2e80      	cmp	r6, #128	; 0x80
 8006b90:	d1ce      	bne.n	8006b30 <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006b92:	4a13      	ldr	r2, [pc, #76]	; (8006be0 <HAL_RCC_ClockConfig+0x1e4>)
 8006b94:	6893      	ldr	r3, [r2, #8]
 8006b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b9a:	6093      	str	r3, [r2, #8]
 8006b9c:	e7c8      	b.n	8006b30 <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b9e:	4a0f      	ldr	r2, [pc, #60]	; (8006bdc <HAL_RCC_ClockConfig+0x1e0>)
 8006ba0:	6813      	ldr	r3, [r2, #0]
 8006ba2:	f023 030f 	bic.w	r3, r3, #15
 8006ba6:	4323      	orrs	r3, r4
 8006ba8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006baa:	f7fc fac9 	bl	8003140 <HAL_GetTick>
 8006bae:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bb0:	4b0a      	ldr	r3, [pc, #40]	; (8006bdc <HAL_RCC_ClockConfig+0x1e0>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 030f 	and.w	r3, r3, #15
 8006bb8:	42a3      	cmp	r3, r4
 8006bba:	d0bf      	beq.n	8006b3c <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bbc:	f7fc fac0 	bl	8003140 <HAL_GetTick>
 8006bc0:	1b80      	subs	r0, r0, r6
 8006bc2:	f241 3388 	movw	r3, #5000	; 0x1388
 8006bc6:	4298      	cmp	r0, r3
 8006bc8:	d9f2      	bls.n	8006bb0 <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 8006bca:	2003      	movs	r0, #3
 8006bcc:	e7de      	b.n	8006b8c <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 8006bce:	2001      	movs	r0, #1
}
 8006bd0:	4770      	bx	lr
      return HAL_ERROR;
 8006bd2:	2001      	movs	r0, #1
 8006bd4:	e7da      	b.n	8006b8c <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 8006bd6:	2001      	movs	r0, #1
 8006bd8:	e7d8      	b.n	8006b8c <HAL_RCC_ClockConfig+0x190>
 8006bda:	bf00      	nop
 8006bdc:	40022000 	.word	0x40022000
 8006be0:	40021000 	.word	0x40021000
 8006be4:	04c4b400 	.word	0x04c4b400
 8006be8:	0800f770 	.word	0x0800f770
 8006bec:	20000004 	.word	0x20000004
 8006bf0:	20000234 	.word	0x20000234

08006bf4 <HAL_RCC_GetHCLKFreq>:
}
 8006bf4:	4b01      	ldr	r3, [pc, #4]	; (8006bfc <HAL_RCC_GetHCLKFreq+0x8>)
 8006bf6:	6818      	ldr	r0, [r3, #0]
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	20000004 	.word	0x20000004

08006c00 <HAL_RCC_GetPCLK1Freq>:
{
 8006c00:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006c02:	f7ff fff7 	bl	8006bf4 <HAL_RCC_GetHCLKFreq>
 8006c06:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006c0e:	4a04      	ldr	r2, [pc, #16]	; (8006c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c10:	5cd3      	ldrb	r3, [r2, r3]
 8006c12:	f003 031f 	and.w	r3, r3, #31
}
 8006c16:	40d8      	lsrs	r0, r3
 8006c18:	bd08      	pop	{r3, pc}
 8006c1a:	bf00      	nop
 8006c1c:	40021000 	.word	0x40021000
 8006c20:	0800f780 	.word	0x0800f780

08006c24 <HAL_RCC_GetPCLK2Freq>:
{
 8006c24:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006c26:	f7ff ffe5 	bl	8006bf4 <HAL_RCC_GetHCLKFreq>
 8006c2a:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006c32:	4a04      	ldr	r2, [pc, #16]	; (8006c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c34:	5cd3      	ldrb	r3, [r2, r3]
 8006c36:	f003 031f 	and.w	r3, r3, #31
}
 8006c3a:	40d8      	lsrs	r0, r3
 8006c3c:	bd08      	pop	{r3, pc}
 8006c3e:	bf00      	nop
 8006c40:	40021000 	.word	0x40021000
 8006c44:	0800f780 	.word	0x0800f780

08006c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c4e:	6803      	ldr	r3, [r0, #0]
 8006c50:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8006c54:	d06e      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xec>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c56:	4b35      	ldr	r3, [pc, #212]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c5a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006c5e:	d11e      	bne.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c60:	4b32      	ldr	r3, [pc, #200]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006c62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006c68:	659a      	str	r2, [r3, #88]	; 0x58
 8006c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c70:	9301      	str	r3, [sp, #4]
 8006c72:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006c74:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c76:	4a2e      	ldr	r2, [pc, #184]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006c78:	6813      	ldr	r3, [r2, #0]
 8006c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c80:	f7fc fa5e 	bl	8003140 <HAL_GetTick>
 8006c84:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c86:	4b2a      	ldr	r3, [pc, #168]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006c8e:	d108      	bne.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c90:	f7fc fa56 	bl	8003140 <HAL_GetTick>
 8006c94:	1b40      	subs	r0, r0, r5
 8006c96:	2802      	cmp	r0, #2
 8006c98:	d9f5      	bls.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 8006c9a:	2503      	movs	r5, #3
 8006c9c:	e002      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 8006c9e:	2600      	movs	r6, #0
 8006ca0:	e7e9      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ca2:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8006ca4:	bb45      	cbnz	r5, 8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ca6:	4b21      	ldr	r3, [pc, #132]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006cac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006cb0:	d015      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x96>
 8006cb2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d012      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006cb8:	4a1c      	ldr	r2, [pc, #112]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006cba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cc2:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8006cc6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8006cca:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cce:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8006cd2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006cd6:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006cda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006cde:	f013 0f01 	tst.w	r3, #1
 8006ce2:	d110      	bne.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 8006ce4:	b945      	cbnz	r5, 8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ce6:	4a11      	ldr	r2, [pc, #68]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006ce8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cf0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006cf2:	430b      	orrs	r3, r1
 8006cf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cf8:	b1ee      	cbz	r6, 8006d36 <HAL_RCCEx_PeriphCLKConfig+0xee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cfa:	4a0c      	ldr	r2, [pc, #48]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006cfc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d02:	6593      	str	r3, [r2, #88]	; 0x58
 8006d04:	e017      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 8006d06:	f7fc fa1b 	bl	8003140 <HAL_GetTick>
 8006d0a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d0c:	4b07      	ldr	r3, [pc, #28]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d12:	f013 0f02 	tst.w	r3, #2
 8006d16:	d1e5      	bne.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d18:	f7fc fa12 	bl	8003140 <HAL_GetTick>
 8006d1c:	1bc0      	subs	r0, r0, r7
 8006d1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d22:	4298      	cmp	r0, r3
 8006d24:	d9f2      	bls.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 8006d26:	2503      	movs	r5, #3
 8006d28:	e7dc      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8006d2a:	bf00      	nop
 8006d2c:	40021000 	.word	0x40021000
 8006d30:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d34:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	f013 0f01 	tst.w	r3, #1
 8006d3c:	d008      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d3e:	4a9f      	ldr	r2, [pc, #636]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d40:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006d44:	f023 0303 	bic.w	r3, r3, #3
 8006d48:	6861      	ldr	r1, [r4, #4]
 8006d4a:	430b      	orrs	r3, r1
 8006d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	f013 0f02 	tst.w	r3, #2
 8006d56:	d008      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d58:	4a98      	ldr	r2, [pc, #608]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d5a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006d5e:	f023 030c 	bic.w	r3, r3, #12
 8006d62:	68a1      	ldr	r1, [r4, #8]
 8006d64:	430b      	orrs	r3, r1
 8006d66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	f013 0f04 	tst.w	r3, #4
 8006d70:	d008      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d72:	4a92      	ldr	r2, [pc, #584]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d74:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006d78:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006d7c:	68e1      	ldr	r1, [r4, #12]
 8006d7e:	430b      	orrs	r3, r1
 8006d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	f013 0f08 	tst.w	r3, #8
 8006d8a:	d008      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006d8c:	4a8b      	ldr	r2, [pc, #556]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d8e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006d92:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d96:	6921      	ldr	r1, [r4, #16]
 8006d98:	430b      	orrs	r3, r1
 8006d9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	f013 0f10 	tst.w	r3, #16
 8006da4:	d008      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006da6:	4a85      	ldr	r2, [pc, #532]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006da8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db0:	6961      	ldr	r1, [r4, #20]
 8006db2:	430b      	orrs	r3, r1
 8006db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	f013 0f20 	tst.w	r3, #32
 8006dbe:	d008      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006dc0:	4a7e      	ldr	r2, [pc, #504]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dc2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006dc6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006dca:	69a1      	ldr	r1, [r4, #24]
 8006dcc:	430b      	orrs	r3, r1
 8006dce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006dd8:	d008      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006dda:	4a78      	ldr	r2, [pc, #480]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ddc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006de0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006de4:	69e1      	ldr	r1, [r4, #28]
 8006de6:	430b      	orrs	r3, r1
 8006de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006df2:	d008      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006df4:	4a71      	ldr	r2, [pc, #452]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006df6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006dfa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006dfe:	6a21      	ldr	r1, [r4, #32]
 8006e00:	430b      	orrs	r3, r1
 8006e02:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006e0c:	d008      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e0e:	4a6b      	ldr	r2, [pc, #428]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e10:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006e14:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006e18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006e1a:	430b      	orrs	r3, r1
 8006e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006e26:	d008      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e28:	4a64      	ldr	r2, [pc, #400]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e2a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8006e2e:	f023 0303 	bic.w	r3, r3, #3
 8006e32:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006e34:	430b      	orrs	r3, r1
 8006e36:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006e40:	d008      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e42:	4a5e      	ldr	r2, [pc, #376]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e44:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006e48:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8006e4c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006e4e:	430b      	orrs	r3, r1
 8006e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006e5a:	d00c      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e5c:	4a57      	ldr	r2, [pc, #348]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006e62:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006e66:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006e68:	430b      	orrs	r3, r1
 8006e6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006e6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e74:	d079      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006e7c:	d00c      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006e7e:	4a4f      	ldr	r2, [pc, #316]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e80:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006e84:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e8a:	430b      	orrs	r3, r1
 8006e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006e90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e96:	d06d      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006e9e:	d00c      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ea0:	4a46      	ldr	r2, [pc, #280]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ea2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006ea6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8006eaa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006eac:	430b      	orrs	r3, r1
 8006eae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006eb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006eb8:	d061      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x336>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006ec0:	d00c      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ec2:	4a3e      	ldr	r2, [pc, #248]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ec4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006ec8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8006ecc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006ece:	430b      	orrs	r3, r1
 8006ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ed4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006ed6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006eda:	d055      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x340>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006ee2:	d00c      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ee4:	4a35      	ldr	r2, [pc, #212]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ee6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006eea:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8006eee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006efc:	d049      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006f04:	d00c      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006f06:	4a2d      	ldr	r2, [pc, #180]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f08:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006f0c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006f10:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006f12:	430b      	orrs	r3, r1
 8006f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006f18:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006f1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f1e:	d03d      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x354>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006f26:	d00c      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006f28:	4a24      	ldr	r2, [pc, #144]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006f2e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006f32:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006f34:	430b      	orrs	r3, r1
 8006f36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006f3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f40:	d031      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8006f48:	d00c      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f4a:	4a1c      	ldr	r2, [pc, #112]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f4c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8006f50:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006f54:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006f56:	430b      	orrs	r3, r1
 8006f58:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006f5c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006f5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f62:	d025      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
  }

#endif /* QUADSPI */

  return status;
}
 8006f64:	4628      	mov	r0, r5
 8006f66:	b003      	add	sp, #12
 8006f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f6a:	68d3      	ldr	r3, [r2, #12]
 8006f6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f70:	60d3      	str	r3, [r2, #12]
 8006f72:	e780      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f74:	68d3      	ldr	r3, [r2, #12]
 8006f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f7a:	60d3      	str	r3, [r2, #12]
 8006f7c:	e78c      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f7e:	68d3      	ldr	r3, [r2, #12]
 8006f80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f84:	60d3      	str	r3, [r2, #12]
 8006f86:	e798      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f88:	68d3      	ldr	r3, [r2, #12]
 8006f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f8e:	60d3      	str	r3, [r2, #12]
 8006f90:	e7a4      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f92:	68d3      	ldr	r3, [r2, #12]
 8006f94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f98:	60d3      	str	r3, [r2, #12]
 8006f9a:	e7b0      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006f9c:	68d3      	ldr	r3, [r2, #12]
 8006f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa2:	60d3      	str	r3, [r2, #12]
 8006fa4:	e7bc      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006fa6:	68d3      	ldr	r3, [r2, #12]
 8006fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fac:	60d3      	str	r3, [r2, #12]
 8006fae:	e7c8      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fb0:	68d3      	ldr	r3, [r2, #12]
 8006fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fb6:	60d3      	str	r3, [r2, #12]
 8006fb8:	e7d4      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006fba:	bf00      	nop
 8006fbc:	40021000 	.word	0x40021000

08006fc0 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d06f      	beq.n	80070a4 <HAL_SPI_Init+0xe4>
{
 8006fc4:	b510      	push	{r4, lr}
 8006fc6:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006fc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006fca:	b933      	cbnz	r3, 8006fda <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fcc:	6843      	ldr	r3, [r0, #4]
 8006fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fd2:	d005      	beq.n	8006fe0 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	61c3      	str	r3, [r0, #28]
 8006fd8:	e002      	b.n	8006fe0 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fde:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fe4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d052      	beq.n	8007092 <HAL_SPI_Init+0xd2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fec:	2302      	movs	r3, #2
 8006fee:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ff2:	6822      	ldr	r2, [r4, #0]
 8006ff4:	6813      	ldr	r3, [r2, #0]
 8006ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ffa:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ffc:	68e3      	ldr	r3, [r4, #12]
 8006ffe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007002:	d94c      	bls.n	800709e <HAL_SPI_Init+0xde>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007004:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007006:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800700a:	d004      	beq.n	8007016 <HAL_SPI_Init+0x56>
 800700c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007010:	d001      	beq.n	8007016 <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007012:	2300      	movs	r3, #0
 8007014:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007016:	6863      	ldr	r3, [r4, #4]
 8007018:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800701c:	68a1      	ldr	r1, [r4, #8]
 800701e:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8007022:	430b      	orrs	r3, r1
 8007024:	6921      	ldr	r1, [r4, #16]
 8007026:	f001 0102 	and.w	r1, r1, #2
 800702a:	430b      	orrs	r3, r1
 800702c:	6961      	ldr	r1, [r4, #20]
 800702e:	f001 0101 	and.w	r1, r1, #1
 8007032:	430b      	orrs	r3, r1
 8007034:	69a1      	ldr	r1, [r4, #24]
 8007036:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800703a:	430b      	orrs	r3, r1
 800703c:	69e1      	ldr	r1, [r4, #28]
 800703e:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8007042:	430b      	orrs	r3, r1
 8007044:	6a21      	ldr	r1, [r4, #32]
 8007046:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800704a:	430b      	orrs	r3, r1
 800704c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800704e:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8007052:	6820      	ldr	r0, [r4, #0]
 8007054:	430b      	orrs	r3, r1
 8007056:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007058:	8b63      	ldrh	r3, [r4, #26]
 800705a:	f003 0304 	and.w	r3, r3, #4
 800705e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007060:	f001 0110 	and.w	r1, r1, #16
 8007064:	430b      	orrs	r3, r1
 8007066:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007068:	f001 0108 	and.w	r1, r1, #8
 800706c:	430b      	orrs	r3, r1
 800706e:	68e1      	ldr	r1, [r4, #12]
 8007070:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8007074:	430b      	orrs	r3, r1
 8007076:	6821      	ldr	r1, [r4, #0]
 8007078:	4313      	orrs	r3, r2
 800707a:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800707c:	6822      	ldr	r2, [r4, #0]
 800707e:	69d3      	ldr	r3, [r2, #28]
 8007080:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007084:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007086:	2000      	movs	r0, #0
 8007088:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800708a:	2301      	movs	r3, #1
 800708c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8007090:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8007092:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8007096:	4620      	mov	r0, r4
 8007098:	f7fb f87e 	bl	8002198 <HAL_SPI_MspInit>
 800709c:	e7a6      	b.n	8006fec <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800709e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80070a2:	e7b0      	b.n	8007006 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 80070a4:	2001      	movs	r0, #1
}
 80070a6:	4770      	bx	lr

080070a8 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80070a8:	b340      	cbz	r0, 80070fc <HAL_SRAM_Init+0x54>
{
 80070aa:	b570      	push	{r4, r5, r6, lr}
 80070ac:	460e      	mov	r6, r1
 80070ae:	4615      	mov	r5, r2
 80070b0:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80070b2:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80070b6:	b1e3      	cbz	r3, 80070f2 <HAL_SRAM_Init+0x4a>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80070b8:	4621      	mov	r1, r4
 80070ba:	f851 0b08 	ldr.w	r0, [r1], #8
 80070be:	f001 f87d 	bl	80081bc <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80070c2:	68a2      	ldr	r2, [r4, #8]
 80070c4:	4631      	mov	r1, r6
 80070c6:	6820      	ldr	r0, [r4, #0]
 80070c8:	f001 f8e8 	bl	800829c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80070cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80070ce:	68a2      	ldr	r2, [r4, #8]
 80070d0:	4629      	mov	r1, r5
 80070d2:	6860      	ldr	r0, [r4, #4]
 80070d4:	f001 f915 	bl	8008302 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80070d8:	6822      	ldr	r2, [r4, #0]
 80070da:	68a1      	ldr	r1, [r4, #8]
 80070dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070e0:	f043 0301 	orr.w	r3, r3, #1
 80070e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80070e8:	2301      	movs	r3, #1
 80070ea:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 80070ee:	2000      	movs	r0, #0
}
 80070f0:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 80070f2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SRAM_MspInit(hsram);
 80070f6:	f7fa fc69 	bl	80019cc <HAL_SRAM_MspInit>
 80070fa:	e7dd      	b.n	80070b8 <HAL_SRAM_Init+0x10>
    return HAL_ERROR;
 80070fc:	2001      	movs	r0, #1
}
 80070fe:	4770      	bx	lr

08007100 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007100:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007102:	6a03      	ldr	r3, [r0, #32]
 8007104:	f023 0301 	bic.w	r3, r3, #1
 8007108:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800710c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800710e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007110:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007114:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007118:	680c      	ldr	r4, [r1, #0]
 800711a:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800711c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007120:	688c      	ldr	r4, [r1, #8]
 8007122:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007124:	4c21      	ldr	r4, [pc, #132]	; (80071ac <TIM_OC1_SetConfig+0xac>)
 8007126:	42a0      	cmp	r0, r4
 8007128:	d013      	beq.n	8007152 <TIM_OC1_SetConfig+0x52>
 800712a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800712e:	42a0      	cmp	r0, r4
 8007130:	d00f      	beq.n	8007152 <TIM_OC1_SetConfig+0x52>
 8007132:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8007136:	42a0      	cmp	r0, r4
 8007138:	d00b      	beq.n	8007152 <TIM_OC1_SetConfig+0x52>
 800713a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800713e:	42a0      	cmp	r0, r4
 8007140:	d007      	beq.n	8007152 <TIM_OC1_SetConfig+0x52>
 8007142:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007146:	42a0      	cmp	r0, r4
 8007148:	d003      	beq.n	8007152 <TIM_OC1_SetConfig+0x52>
 800714a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800714e:	42a0      	cmp	r0, r4
 8007150:	d105      	bne.n	800715e <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007152:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007156:	68cc      	ldr	r4, [r1, #12]
 8007158:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800715a:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800715e:	4c13      	ldr	r4, [pc, #76]	; (80071ac <TIM_OC1_SetConfig+0xac>)
 8007160:	42a0      	cmp	r0, r4
 8007162:	d013      	beq.n	800718c <TIM_OC1_SetConfig+0x8c>
 8007164:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007168:	42a0      	cmp	r0, r4
 800716a:	d00f      	beq.n	800718c <TIM_OC1_SetConfig+0x8c>
 800716c:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8007170:	42a0      	cmp	r0, r4
 8007172:	d00b      	beq.n	800718c <TIM_OC1_SetConfig+0x8c>
 8007174:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007178:	42a0      	cmp	r0, r4
 800717a:	d007      	beq.n	800718c <TIM_OC1_SetConfig+0x8c>
 800717c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007180:	42a0      	cmp	r0, r4
 8007182:	d003      	beq.n	800718c <TIM_OC1_SetConfig+0x8c>
 8007184:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007188:	42a0      	cmp	r0, r4
 800718a:	d107      	bne.n	800719c <TIM_OC1_SetConfig+0x9c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800718c:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007190:	694c      	ldr	r4, [r1, #20]
 8007192:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007196:	698d      	ldr	r5, [r1, #24]
 8007198:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800719c:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800719e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071a0:	684a      	ldr	r2, [r1, #4]
 80071a2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a4:	6203      	str	r3, [r0, #32]
}
 80071a6:	bc30      	pop	{r4, r5}
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	40012c00 	.word	0x40012c00

080071b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071b0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071b2:	6a03      	ldr	r3, [r0, #32]
 80071b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071b8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071bc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071be:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80071c4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071c8:	680d      	ldr	r5, [r1, #0]
 80071ca:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071d0:	688d      	ldr	r5, [r1, #8]
 80071d2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071d6:	4d1c      	ldr	r5, [pc, #112]	; (8007248 <TIM_OC3_SetConfig+0x98>)
 80071d8:	42a8      	cmp	r0, r5
 80071da:	d007      	beq.n	80071ec <TIM_OC3_SetConfig+0x3c>
 80071dc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80071e0:	42a8      	cmp	r0, r5
 80071e2:	d003      	beq.n	80071ec <TIM_OC3_SetConfig+0x3c>
 80071e4:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80071e8:	42a8      	cmp	r0, r5
 80071ea:	d106      	bne.n	80071fa <TIM_OC3_SetConfig+0x4a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071f0:	68cd      	ldr	r5, [r1, #12]
 80071f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071fa:	4d13      	ldr	r5, [pc, #76]	; (8007248 <TIM_OC3_SetConfig+0x98>)
 80071fc:	42a8      	cmp	r0, r5
 80071fe:	d013      	beq.n	8007228 <TIM_OC3_SetConfig+0x78>
 8007200:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007204:	42a8      	cmp	r0, r5
 8007206:	d00f      	beq.n	8007228 <TIM_OC3_SetConfig+0x78>
 8007208:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800720c:	42a8      	cmp	r0, r5
 800720e:	d00b      	beq.n	8007228 <TIM_OC3_SetConfig+0x78>
 8007210:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007214:	42a8      	cmp	r0, r5
 8007216:	d007      	beq.n	8007228 <TIM_OC3_SetConfig+0x78>
 8007218:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800721c:	42a8      	cmp	r0, r5
 800721e:	d003      	beq.n	8007228 <TIM_OC3_SetConfig+0x78>
 8007220:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007224:	42a8      	cmp	r0, r5
 8007226:	d107      	bne.n	8007238 <TIM_OC3_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007228:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800722c:	694c      	ldr	r4, [r1, #20]
 800722e:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007232:	698c      	ldr	r4, [r1, #24]
 8007234:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007238:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800723a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800723c:	684a      	ldr	r2, [r1, #4]
 800723e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007240:	6203      	str	r3, [r0, #32]
}
 8007242:	bc30      	pop	{r4, r5}
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	40012c00 	.word	0x40012c00

0800724c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800724c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800724e:	6a03      	ldr	r3, [r0, #32]
 8007250:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007254:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007256:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007258:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800725a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800725c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007260:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007264:	680d      	ldr	r5, [r1, #0]
 8007266:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800726a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800726e:	688d      	ldr	r5, [r1, #8]
 8007270:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007274:	4d1b      	ldr	r5, [pc, #108]	; (80072e4 <TIM_OC4_SetConfig+0x98>)
 8007276:	42a8      	cmp	r0, r5
 8007278:	d007      	beq.n	800728a <TIM_OC4_SetConfig+0x3e>
 800727a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800727e:	42a8      	cmp	r0, r5
 8007280:	d003      	beq.n	800728a <TIM_OC4_SetConfig+0x3e>
 8007282:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8007286:	42a8      	cmp	r0, r5
 8007288:	d106      	bne.n	8007298 <TIM_OC4_SetConfig+0x4c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800728a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800728e:	68cd      	ldr	r5, [r1, #12]
 8007290:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007298:	4d12      	ldr	r5, [pc, #72]	; (80072e4 <TIM_OC4_SetConfig+0x98>)
 800729a:	42a8      	cmp	r0, r5
 800729c:	d013      	beq.n	80072c6 <TIM_OC4_SetConfig+0x7a>
 800729e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80072a2:	42a8      	cmp	r0, r5
 80072a4:	d00f      	beq.n	80072c6 <TIM_OC4_SetConfig+0x7a>
 80072a6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80072aa:	42a8      	cmp	r0, r5
 80072ac:	d00b      	beq.n	80072c6 <TIM_OC4_SetConfig+0x7a>
 80072ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80072b2:	42a8      	cmp	r0, r5
 80072b4:	d007      	beq.n	80072c6 <TIM_OC4_SetConfig+0x7a>
 80072b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80072ba:	42a8      	cmp	r0, r5
 80072bc:	d003      	beq.n	80072c6 <TIM_OC4_SetConfig+0x7a>
 80072be:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80072c2:	42a8      	cmp	r0, r5
 80072c4:	d107      	bne.n	80072d6 <TIM_OC4_SetConfig+0x8a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80072c6:	f424 4c40 	bic.w	ip, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072ca:	694c      	ldr	r4, [r1, #20]
 80072cc:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80072d0:	698c      	ldr	r4, [r1, #24]
 80072d2:	ea4c 1484 	orr.w	r4, ip, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072d8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072da:	684a      	ldr	r2, [r1, #4]
 80072dc:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072de:	6203      	str	r3, [r0, #32]
}
 80072e0:	bc30      	pop	{r4, r5}
 80072e2:	4770      	bx	lr
 80072e4:	40012c00 	.word	0x40012c00

080072e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80072e8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80072ea:	6a03      	ldr	r3, [r0, #32]
 80072ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072f0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072f2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072f6:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80072f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80072fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007300:	680d      	ldr	r5, [r1, #0]
 8007302:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007304:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007308:	688d      	ldr	r5, [r1, #8]
 800730a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800730e:	4d11      	ldr	r5, [pc, #68]	; (8007354 <TIM_OC5_SetConfig+0x6c>)
 8007310:	42a8      	cmp	r0, r5
 8007312:	d013      	beq.n	800733c <TIM_OC5_SetConfig+0x54>
 8007314:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007318:	42a8      	cmp	r0, r5
 800731a:	d00f      	beq.n	800733c <TIM_OC5_SetConfig+0x54>
 800731c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007320:	42a8      	cmp	r0, r5
 8007322:	d00b      	beq.n	800733c <TIM_OC5_SetConfig+0x54>
 8007324:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007328:	42a8      	cmp	r0, r5
 800732a:	d007      	beq.n	800733c <TIM_OC5_SetConfig+0x54>
 800732c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007330:	42a8      	cmp	r0, r5
 8007332:	d003      	beq.n	800733c <TIM_OC5_SetConfig+0x54>
 8007334:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007338:	42a8      	cmp	r0, r5
 800733a:	d104      	bne.n	8007346 <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800733c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007340:	694d      	ldr	r5, [r1, #20]
 8007342:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007346:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007348:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800734a:	684a      	ldr	r2, [r1, #4]
 800734c:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800734e:	6203      	str	r3, [r0, #32]
}
 8007350:	bc30      	pop	{r4, r5}
 8007352:	4770      	bx	lr
 8007354:	40012c00 	.word	0x40012c00

08007358 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007358:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800735a:	6a03      	ldr	r3, [r0, #32]
 800735c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007360:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007362:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007364:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007366:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007368:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800736c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007370:	680d      	ldr	r5, [r1, #0]
 8007372:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007376:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800737a:	688d      	ldr	r5, [r1, #8]
 800737c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007380:	4d11      	ldr	r5, [pc, #68]	; (80073c8 <TIM_OC6_SetConfig+0x70>)
 8007382:	42a8      	cmp	r0, r5
 8007384:	d013      	beq.n	80073ae <TIM_OC6_SetConfig+0x56>
 8007386:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800738a:	42a8      	cmp	r0, r5
 800738c:	d00f      	beq.n	80073ae <TIM_OC6_SetConfig+0x56>
 800738e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007392:	42a8      	cmp	r0, r5
 8007394:	d00b      	beq.n	80073ae <TIM_OC6_SetConfig+0x56>
 8007396:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800739a:	42a8      	cmp	r0, r5
 800739c:	d007      	beq.n	80073ae <TIM_OC6_SetConfig+0x56>
 800739e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80073a2:	42a8      	cmp	r0, r5
 80073a4:	d003      	beq.n	80073ae <TIM_OC6_SetConfig+0x56>
 80073a6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80073aa:	42a8      	cmp	r0, r5
 80073ac:	d104      	bne.n	80073b8 <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80073ae:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80073b2:	694d      	ldr	r5, [r1, #20]
 80073b4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073ba:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80073bc:	684a      	ldr	r2, [r1, #4]
 80073be:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073c0:	6203      	str	r3, [r0, #32]
}
 80073c2:	bc30      	pop	{r4, r5}
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	40012c00 	.word	0x40012c00

080073cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073cc:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073ce:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073d0:	6a04      	ldr	r4, [r0, #32]
 80073d2:	f024 0401 	bic.w	r4, r4, #1
 80073d6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073d8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073da:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073de:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073e2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80073e6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073e8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80073ea:	6203      	str	r3, [r0, #32]
}
 80073ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073f2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073f4:	6a04      	ldr	r4, [r0, #32]
 80073f6:	f024 0410 	bic.w	r4, r4, #16
 80073fa:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073fc:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80073fe:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007400:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007404:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007408:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800740c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007410:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007412:	6203      	str	r3, [r0, #32]
}
 8007414:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007418:	4770      	bx	lr

0800741a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800741a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800741c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007424:	430b      	orrs	r3, r1
 8007426:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800742a:	6083      	str	r3, [r0, #8]
}
 800742c:	4770      	bx	lr

0800742e <HAL_TIM_PWM_MspInit>:
}
 800742e:	4770      	bx	lr

08007430 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8007430:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007432:	4a36      	ldr	r2, [pc, #216]	; (800750c <TIM_Base_SetConfig+0xdc>)
 8007434:	4290      	cmp	r0, r2
 8007436:	d016      	beq.n	8007466 <TIM_Base_SetConfig+0x36>
 8007438:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800743c:	d013      	beq.n	8007466 <TIM_Base_SetConfig+0x36>
 800743e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007442:	4290      	cmp	r0, r2
 8007444:	d00f      	beq.n	8007466 <TIM_Base_SetConfig+0x36>
 8007446:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800744a:	4290      	cmp	r0, r2
 800744c:	d00b      	beq.n	8007466 <TIM_Base_SetConfig+0x36>
 800744e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007452:	4290      	cmp	r0, r2
 8007454:	d007      	beq.n	8007466 <TIM_Base_SetConfig+0x36>
 8007456:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800745a:	4290      	cmp	r0, r2
 800745c:	d003      	beq.n	8007466 <TIM_Base_SetConfig+0x36>
 800745e:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8007462:	4290      	cmp	r0, r2
 8007464:	d103      	bne.n	800746e <TIM_Base_SetConfig+0x3e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800746a:	684a      	ldr	r2, [r1, #4]
 800746c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800746e:	4a27      	ldr	r2, [pc, #156]	; (800750c <TIM_Base_SetConfig+0xdc>)
 8007470:	4290      	cmp	r0, r2
 8007472:	d022      	beq.n	80074ba <TIM_Base_SetConfig+0x8a>
 8007474:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007478:	d01f      	beq.n	80074ba <TIM_Base_SetConfig+0x8a>
 800747a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800747e:	4290      	cmp	r0, r2
 8007480:	d01b      	beq.n	80074ba <TIM_Base_SetConfig+0x8a>
 8007482:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007486:	4290      	cmp	r0, r2
 8007488:	d017      	beq.n	80074ba <TIM_Base_SetConfig+0x8a>
 800748a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800748e:	4290      	cmp	r0, r2
 8007490:	d013      	beq.n	80074ba <TIM_Base_SetConfig+0x8a>
 8007492:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007496:	4290      	cmp	r0, r2
 8007498:	d00f      	beq.n	80074ba <TIM_Base_SetConfig+0x8a>
 800749a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800749e:	4290      	cmp	r0, r2
 80074a0:	d00b      	beq.n	80074ba <TIM_Base_SetConfig+0x8a>
 80074a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074a6:	4290      	cmp	r0, r2
 80074a8:	d007      	beq.n	80074ba <TIM_Base_SetConfig+0x8a>
 80074aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074ae:	4290      	cmp	r0, r2
 80074b0:	d003      	beq.n	80074ba <TIM_Base_SetConfig+0x8a>
 80074b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074b6:	4290      	cmp	r0, r2
 80074b8:	d103      	bne.n	80074c2 <TIM_Base_SetConfig+0x92>
    tmpcr1 &= ~TIM_CR1_CKD;
 80074ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074be:	68ca      	ldr	r2, [r1, #12]
 80074c0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074c6:	694a      	ldr	r2, [r1, #20]
 80074c8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80074ca:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074cc:	688b      	ldr	r3, [r1, #8]
 80074ce:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80074d0:	680b      	ldr	r3, [r1, #0]
 80074d2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074d4:	4b0d      	ldr	r3, [pc, #52]	; (800750c <TIM_Base_SetConfig+0xdc>)
 80074d6:	4298      	cmp	r0, r3
 80074d8:	d013      	beq.n	8007502 <TIM_Base_SetConfig+0xd2>
 80074da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074de:	4298      	cmp	r0, r3
 80074e0:	d00f      	beq.n	8007502 <TIM_Base_SetConfig+0xd2>
 80074e2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80074e6:	4298      	cmp	r0, r3
 80074e8:	d00b      	beq.n	8007502 <TIM_Base_SetConfig+0xd2>
 80074ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074ee:	4298      	cmp	r0, r3
 80074f0:	d007      	beq.n	8007502 <TIM_Base_SetConfig+0xd2>
 80074f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074f6:	4298      	cmp	r0, r3
 80074f8:	d003      	beq.n	8007502 <TIM_Base_SetConfig+0xd2>
 80074fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fe:	4298      	cmp	r0, r3
 8007500:	d101      	bne.n	8007506 <TIM_Base_SetConfig+0xd6>
    TIMx->RCR = Structure->RepetitionCounter;
 8007502:	690b      	ldr	r3, [r1, #16]
 8007504:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007506:	2301      	movs	r3, #1
 8007508:	6143      	str	r3, [r0, #20]
}
 800750a:	4770      	bx	lr
 800750c:	40012c00 	.word	0x40012c00

08007510 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007510:	b360      	cbz	r0, 800756c <HAL_TIM_Base_Init+0x5c>
{
 8007512:	b510      	push	{r4, lr}
 8007514:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007516:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800751a:	b313      	cbz	r3, 8007562 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800751c:	2302      	movs	r3, #2
 800751e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007522:	4621      	mov	r1, r4
 8007524:	f851 0b04 	ldr.w	r0, [r1], #4
 8007528:	f7ff ff82 	bl	8007430 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800752c:	2301      	movs	r3, #1
 800752e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007532:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007536:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800753a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800753e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007542:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800754a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800754e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007552:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007556:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800755a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800755e:	2000      	movs	r0, #0
}
 8007560:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007562:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007566:	f7fa ff65 	bl	8002434 <HAL_TIM_Base_MspInit>
 800756a:	e7d7      	b.n	800751c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800756c:	2001      	movs	r0, #1
}
 800756e:	4770      	bx	lr

08007570 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007570:	b360      	cbz	r0, 80075cc <HAL_TIM_PWM_Init+0x5c>
{
 8007572:	b510      	push	{r4, lr}
 8007574:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007576:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800757a:	b313      	cbz	r3, 80075c2 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800757c:	2302      	movs	r3, #2
 800757e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007582:	4621      	mov	r1, r4
 8007584:	f851 0b04 	ldr.w	r0, [r1], #4
 8007588:	f7ff ff52 	bl	8007430 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800758c:	2301      	movs	r3, #1
 800758e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007592:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007596:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800759a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800759e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80075a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80075ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075b2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80075b6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80075ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80075be:	2000      	movs	r0, #0
}
 80075c0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80075c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80075c6:	f7ff ff32 	bl	800742e <HAL_TIM_PWM_MspInit>
 80075ca:	e7d7      	b.n	800757c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80075cc:	2001      	movs	r0, #1
}
 80075ce:	4770      	bx	lr

080075d0 <TIM_OC2_SetConfig>:
{
 80075d0:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075d2:	6a03      	ldr	r3, [r0, #32]
 80075d4:	f023 0310 	bic.w	r3, r3, #16
 80075d8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80075da:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80075dc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80075de:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075e0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80075e4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075e8:	680d      	ldr	r5, [r1, #0]
 80075ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80075ee:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075f2:	688d      	ldr	r5, [r1, #8]
 80075f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075f8:	4d1b      	ldr	r5, [pc, #108]	; (8007668 <TIM_OC2_SetConfig+0x98>)
 80075fa:	42a8      	cmp	r0, r5
 80075fc:	d007      	beq.n	800760e <TIM_OC2_SetConfig+0x3e>
 80075fe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007602:	42a8      	cmp	r0, r5
 8007604:	d003      	beq.n	800760e <TIM_OC2_SetConfig+0x3e>
 8007606:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800760a:	42a8      	cmp	r0, r5
 800760c:	d106      	bne.n	800761c <TIM_OC2_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC2NP;
 800760e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007612:	68cd      	ldr	r5, [r1, #12]
 8007614:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800761c:	4d12      	ldr	r5, [pc, #72]	; (8007668 <TIM_OC2_SetConfig+0x98>)
 800761e:	42a8      	cmp	r0, r5
 8007620:	d013      	beq.n	800764a <TIM_OC2_SetConfig+0x7a>
 8007622:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007626:	42a8      	cmp	r0, r5
 8007628:	d00f      	beq.n	800764a <TIM_OC2_SetConfig+0x7a>
 800762a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800762e:	42a8      	cmp	r0, r5
 8007630:	d00b      	beq.n	800764a <TIM_OC2_SetConfig+0x7a>
 8007632:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007636:	42a8      	cmp	r0, r5
 8007638:	d007      	beq.n	800764a <TIM_OC2_SetConfig+0x7a>
 800763a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800763e:	42a8      	cmp	r0, r5
 8007640:	d003      	beq.n	800764a <TIM_OC2_SetConfig+0x7a>
 8007642:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007646:	42a8      	cmp	r0, r5
 8007648:	d107      	bne.n	800765a <TIM_OC2_SetConfig+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800764a:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800764e:	694c      	ldr	r4, [r1, #20]
 8007650:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007654:	698c      	ldr	r4, [r1, #24]
 8007656:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800765a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800765c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800765e:	684a      	ldr	r2, [r1, #4]
 8007660:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007662:	6203      	str	r3, [r0, #32]
}
 8007664:	bc30      	pop	{r4, r5}
 8007666:	4770      	bx	lr
 8007668:	40012c00 	.word	0x40012c00

0800766c <HAL_TIM_PWM_ConfigChannel>:
{
 800766c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800766e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007672:	2b01      	cmp	r3, #1
 8007674:	f000 8095 	beq.w	80077a2 <HAL_TIM_PWM_ConfigChannel+0x136>
 8007678:	4604      	mov	r4, r0
 800767a:	460d      	mov	r5, r1
 800767c:	2301      	movs	r3, #1
 800767e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8007682:	2a14      	cmp	r2, #20
 8007684:	f200 8088 	bhi.w	8007798 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8007688:	e8df f002 	tbb	[pc, r2]
 800768c:	8686860b 	.word	0x8686860b
 8007690:	8686861f 	.word	0x8686861f
 8007694:	86868634 	.word	0x86868634
 8007698:	86868648 	.word	0x86868648
 800769c:	8686865d 	.word	0x8686865d
 80076a0:	71          	.byte	0x71
 80076a1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076a2:	6800      	ldr	r0, [r0, #0]
 80076a4:	f7ff fd2c 	bl	8007100 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076a8:	6822      	ldr	r2, [r4, #0]
 80076aa:	6993      	ldr	r3, [r2, #24]
 80076ac:	f043 0308 	orr.w	r3, r3, #8
 80076b0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076b2:	6822      	ldr	r2, [r4, #0]
 80076b4:	6993      	ldr	r3, [r2, #24]
 80076b6:	f023 0304 	bic.w	r3, r3, #4
 80076ba:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076bc:	6822      	ldr	r2, [r4, #0]
 80076be:	6993      	ldr	r3, [r2, #24]
 80076c0:	6929      	ldr	r1, [r5, #16]
 80076c2:	430b      	orrs	r3, r1
 80076c4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80076c6:	2000      	movs	r0, #0
      break;
 80076c8:	e067      	b.n	800779a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076ca:	6800      	ldr	r0, [r0, #0]
 80076cc:	f7ff ff80 	bl	80075d0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076d0:	6822      	ldr	r2, [r4, #0]
 80076d2:	6993      	ldr	r3, [r2, #24]
 80076d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80076d8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076da:	6822      	ldr	r2, [r4, #0]
 80076dc:	6993      	ldr	r3, [r2, #24]
 80076de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076e2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076e4:	6822      	ldr	r2, [r4, #0]
 80076e6:	6993      	ldr	r3, [r2, #24]
 80076e8:	6929      	ldr	r1, [r5, #16]
 80076ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80076ee:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80076f0:	2000      	movs	r0, #0
      break;
 80076f2:	e052      	b.n	800779a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076f4:	6800      	ldr	r0, [r0, #0]
 80076f6:	f7ff fd5b 	bl	80071b0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076fa:	6822      	ldr	r2, [r4, #0]
 80076fc:	69d3      	ldr	r3, [r2, #28]
 80076fe:	f043 0308 	orr.w	r3, r3, #8
 8007702:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007704:	6822      	ldr	r2, [r4, #0]
 8007706:	69d3      	ldr	r3, [r2, #28]
 8007708:	f023 0304 	bic.w	r3, r3, #4
 800770c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800770e:	6822      	ldr	r2, [r4, #0]
 8007710:	69d3      	ldr	r3, [r2, #28]
 8007712:	6929      	ldr	r1, [r5, #16]
 8007714:	430b      	orrs	r3, r1
 8007716:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007718:	2000      	movs	r0, #0
      break;
 800771a:	e03e      	b.n	800779a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800771c:	6800      	ldr	r0, [r0, #0]
 800771e:	f7ff fd95 	bl	800724c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007722:	6822      	ldr	r2, [r4, #0]
 8007724:	69d3      	ldr	r3, [r2, #28]
 8007726:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800772a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800772c:	6822      	ldr	r2, [r4, #0]
 800772e:	69d3      	ldr	r3, [r2, #28]
 8007730:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007734:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007736:	6822      	ldr	r2, [r4, #0]
 8007738:	69d3      	ldr	r3, [r2, #28]
 800773a:	6929      	ldr	r1, [r5, #16]
 800773c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007740:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007742:	2000      	movs	r0, #0
      break;
 8007744:	e029      	b.n	800779a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007746:	6800      	ldr	r0, [r0, #0]
 8007748:	f7ff fdce 	bl	80072e8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800774c:	6822      	ldr	r2, [r4, #0]
 800774e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007750:	f043 0308 	orr.w	r3, r3, #8
 8007754:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007756:	6822      	ldr	r2, [r4, #0]
 8007758:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800775a:	f023 0304 	bic.w	r3, r3, #4
 800775e:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007760:	6822      	ldr	r2, [r4, #0]
 8007762:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007764:	6929      	ldr	r1, [r5, #16]
 8007766:	430b      	orrs	r3, r1
 8007768:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 800776a:	2000      	movs	r0, #0
      break;
 800776c:	e015      	b.n	800779a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800776e:	6800      	ldr	r0, [r0, #0]
 8007770:	f7ff fdf2 	bl	8007358 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007774:	6822      	ldr	r2, [r4, #0]
 8007776:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007778:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800777c:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800777e:	6822      	ldr	r2, [r4, #0]
 8007780:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007782:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007786:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007788:	6822      	ldr	r2, [r4, #0]
 800778a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800778c:	6929      	ldr	r1, [r5, #16]
 800778e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007792:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8007794:	2000      	movs	r0, #0
      break;
 8007796:	e000      	b.n	800779a <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8007798:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800779a:	2300      	movs	r3, #0
 800779c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80077a0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80077a2:	2002      	movs	r0, #2
 80077a4:	e7fc      	b.n	80077a0 <HAL_TIM_PWM_ConfigChannel+0x134>

080077a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077a6:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077a8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077aa:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077ae:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80077b2:	430a      	orrs	r2, r1
 80077b4:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077b8:	6082      	str	r2, [r0, #8]
}
 80077ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80077c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	f000 809b 	beq.w	8007900 <HAL_TIM_ConfigClockSource+0x140>
{
 80077ca:	b510      	push	{r4, lr}
 80077cc:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80077ce:	2301      	movs	r3, #1
 80077d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80077d4:	2302      	movs	r3, #2
 80077d6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80077da:	6802      	ldr	r2, [r0, #0]
 80077dc:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077de:	4b49      	ldr	r3, [pc, #292]	; (8007904 <HAL_TIM_ConfigClockSource+0x144>)
 80077e0:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80077e2:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80077e4:	680b      	ldr	r3, [r1, #0]
 80077e6:	2b70      	cmp	r3, #112	; 0x70
 80077e8:	d061      	beq.n	80078ae <HAL_TIM_ConfigClockSource+0xee>
 80077ea:	d831      	bhi.n	8007850 <HAL_TIM_ConfigClockSource+0x90>
 80077ec:	2b50      	cmp	r3, #80	; 0x50
 80077ee:	d078      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x122>
 80077f0:	d90c      	bls.n	800780c <HAL_TIM_ConfigClockSource+0x4c>
 80077f2:	2b60      	cmp	r3, #96	; 0x60
 80077f4:	d12a      	bne.n	800784c <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077f6:	68ca      	ldr	r2, [r1, #12]
 80077f8:	6849      	ldr	r1, [r1, #4]
 80077fa:	6820      	ldr	r0, [r4, #0]
 80077fc:	f7ff fdf9 	bl	80073f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007800:	2160      	movs	r1, #96	; 0x60
 8007802:	6820      	ldr	r0, [r4, #0]
 8007804:	f7ff fe09 	bl	800741a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007808:	2000      	movs	r0, #0
      break;
 800780a:	e038      	b.n	800787e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800780c:	2b40      	cmp	r3, #64	; 0x40
 800780e:	d10a      	bne.n	8007826 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007810:	68ca      	ldr	r2, [r1, #12]
 8007812:	6849      	ldr	r1, [r1, #4]
 8007814:	6820      	ldr	r0, [r4, #0]
 8007816:	f7ff fdd9 	bl	80073cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800781a:	2140      	movs	r1, #64	; 0x40
 800781c:	6820      	ldr	r0, [r4, #0]
 800781e:	f7ff fdfc 	bl	800741a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007822:	2000      	movs	r0, #0
      break;
 8007824:	e02b      	b.n	800787e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8007826:	d867      	bhi.n	80078f8 <HAL_TIM_ConfigClockSource+0x138>
 8007828:	2b20      	cmp	r3, #32
 800782a:	d007      	beq.n	800783c <HAL_TIM_ConfigClockSource+0x7c>
 800782c:	d903      	bls.n	8007836 <HAL_TIM_ConfigClockSource+0x76>
 800782e:	2b30      	cmp	r3, #48	; 0x30
 8007830:	d004      	beq.n	800783c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8007832:	2001      	movs	r0, #1
 8007834:	e023      	b.n	800787e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8007836:	b10b      	cbz	r3, 800783c <HAL_TIM_ConfigClockSource+0x7c>
 8007838:	2b10      	cmp	r3, #16
 800783a:	d105      	bne.n	8007848 <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800783c:	4619      	mov	r1, r3
 800783e:	6820      	ldr	r0, [r4, #0]
 8007840:	f7ff fdeb 	bl	800741a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007844:	2000      	movs	r0, #0
      break;
 8007846:	e01a      	b.n	800787e <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8007848:	2001      	movs	r0, #1
 800784a:	e018      	b.n	800787e <HAL_TIM_ConfigClockSource+0xbe>
 800784c:	2001      	movs	r0, #1
 800784e:	e016      	b.n	800787e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8007850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007854:	d038      	beq.n	80078c8 <HAL_TIM_ConfigClockSource+0x108>
 8007856:	d90e      	bls.n	8007876 <HAL_TIM_ConfigClockSource+0xb6>
 8007858:	4a2b      	ldr	r2, [pc, #172]	; (8007908 <HAL_TIM_ConfigClockSource+0x148>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d0ee      	beq.n	800783c <HAL_TIM_ConfigClockSource+0x7c>
 800785e:	d915      	bls.n	800788c <HAL_TIM_ConfigClockSource+0xcc>
 8007860:	4a2a      	ldr	r2, [pc, #168]	; (800790c <HAL_TIM_ConfigClockSource+0x14c>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d0ea      	beq.n	800783c <HAL_TIM_ConfigClockSource+0x7c>
 8007866:	3210      	adds	r2, #16
 8007868:	4293      	cmp	r3, r2
 800786a:	d0e7      	beq.n	800783c <HAL_TIM_ConfigClockSource+0x7c>
 800786c:	3a20      	subs	r2, #32
 800786e:	4293      	cmp	r3, r2
 8007870:	d0e4      	beq.n	800783c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8007872:	2001      	movs	r0, #1
 8007874:	e003      	b.n	800787e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8007876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800787a:	d13f      	bne.n	80078fc <HAL_TIM_ConfigClockSource+0x13c>
 800787c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800787e:	2301      	movs	r3, #1
 8007880:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007884:	2300      	movs	r3, #0
 8007886:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800788a:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800788c:	3a20      	subs	r2, #32
 800788e:	4293      	cmp	r3, r2
 8007890:	d0d4      	beq.n	800783c <HAL_TIM_ConfigClockSource+0x7c>
 8007892:	d904      	bls.n	800789e <HAL_TIM_ConfigClockSource+0xde>
 8007894:	4a1e      	ldr	r2, [pc, #120]	; (8007910 <HAL_TIM_ConfigClockSource+0x150>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d0d0      	beq.n	800783c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800789a:	2001      	movs	r0, #1
 800789c:	e7ef      	b.n	800787e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800789e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078a2:	d0cb      	beq.n	800783c <HAL_TIM_ConfigClockSource+0x7c>
 80078a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80078a8:	d0c8      	beq.n	800783c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 80078aa:	2001      	movs	r0, #1
 80078ac:	e7e7      	b.n	800787e <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 80078ae:	68cb      	ldr	r3, [r1, #12]
 80078b0:	684a      	ldr	r2, [r1, #4]
 80078b2:	6889      	ldr	r1, [r1, #8]
 80078b4:	6820      	ldr	r0, [r4, #0]
 80078b6:	f7ff ff76 	bl	80077a6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80078ba:	6822      	ldr	r2, [r4, #0]
 80078bc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80078c2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80078c4:	2000      	movs	r0, #0
      break;
 80078c6:	e7da      	b.n	800787e <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 80078c8:	68cb      	ldr	r3, [r1, #12]
 80078ca:	684a      	ldr	r2, [r1, #4]
 80078cc:	6889      	ldr	r1, [r1, #8]
 80078ce:	6820      	ldr	r0, [r4, #0]
 80078d0:	f7ff ff69 	bl	80077a6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078d4:	6822      	ldr	r2, [r4, #0]
 80078d6:	6893      	ldr	r3, [r2, #8]
 80078d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078dc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80078de:	2000      	movs	r0, #0
      break;
 80078e0:	e7cd      	b.n	800787e <HAL_TIM_ConfigClockSource+0xbe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078e2:	68ca      	ldr	r2, [r1, #12]
 80078e4:	6849      	ldr	r1, [r1, #4]
 80078e6:	6820      	ldr	r0, [r4, #0]
 80078e8:	f7ff fd70 	bl	80073cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078ec:	2150      	movs	r1, #80	; 0x50
 80078ee:	6820      	ldr	r0, [r4, #0]
 80078f0:	f7ff fd93 	bl	800741a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80078f4:	2000      	movs	r0, #0
      break;
 80078f6:	e7c2      	b.n	800787e <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 80078f8:	2001      	movs	r0, #1
 80078fa:	e7c0      	b.n	800787e <HAL_TIM_ConfigClockSource+0xbe>
 80078fc:	2001      	movs	r0, #1
 80078fe:	e7be      	b.n	800787e <HAL_TIM_ConfigClockSource+0xbe>
  __HAL_LOCK(htim);
 8007900:	2002      	movs	r0, #2
}
 8007902:	4770      	bx	lr
 8007904:	ffce0088 	.word	0xffce0088
 8007908:	00100040 	.word	0x00100040
 800790c:	00100060 	.word	0x00100060
 8007910:	00100030 	.word	0x00100030

08007914 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007914:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007918:	2b01      	cmp	r3, #1
 800791a:	d04c      	beq.n	80079b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
{
 800791c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800791e:	2301      	movs	r3, #1
 8007920:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007924:	2302      	movs	r3, #2
 8007926:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800792a:	6802      	ldr	r2, [r0, #0]
 800792c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800792e:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007930:	4d22      	ldr	r5, [pc, #136]	; (80079bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007932:	42aa      	cmp	r2, r5
 8007934:	d007      	beq.n	8007946 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8007936:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800793a:	42aa      	cmp	r2, r5
 800793c:	d003      	beq.n	8007946 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800793e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8007942:	42aa      	cmp	r2, r5
 8007944:	d103      	bne.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007946:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800794a:	684d      	ldr	r5, [r1, #4]
 800794c:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800794e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007956:	680d      	ldr	r5, [r1, #0]
 8007958:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800795a:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800795c:	6803      	ldr	r3, [r0, #0]
 800795e:	4a17      	ldr	r2, [pc, #92]	; (80079bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d01a      	beq.n	800799a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007968:	d017      	beq.n	800799a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800796a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800796e:	4293      	cmp	r3, r2
 8007970:	d013      	beq.n	800799a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007972:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007976:	4293      	cmp	r3, r2
 8007978:	d00f      	beq.n	800799a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800797a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800797e:	4293      	cmp	r3, r2
 8007980:	d00b      	beq.n	800799a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007982:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007986:	4293      	cmp	r3, r2
 8007988:	d007      	beq.n	800799a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800798a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800798e:	4293      	cmp	r3, r2
 8007990:	d003      	beq.n	800799a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007992:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007996:	4293      	cmp	r3, r2
 8007998:	d104      	bne.n	80079a4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800799a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800799e:	688a      	ldr	r2, [r1, #8]
 80079a0:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079a2:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079a4:	2301      	movs	r3, #1
 80079a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079aa:	2300      	movs	r3, #0
 80079ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80079b0:	4618      	mov	r0, r3
}
 80079b2:	bc30      	pop	{r4, r5}
 80079b4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80079b6:	2002      	movs	r0, #2
}
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	40012c00 	.word	0x40012c00

080079c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80079c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d060      	beq.n	8007a8a <HAL_TIMEx_ConfigBreakDeadTime+0xca>
{
 80079c8:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80079ca:	2301      	movs	r3, #1
 80079cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80079d0:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80079d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079d6:	688a      	ldr	r2, [r1, #8]
 80079d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079de:	684a      	ldr	r2, [r1, #4]
 80079e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80079e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079e6:	680a      	ldr	r2, [r1, #0]
 80079e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80079ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079ee:	690a      	ldr	r2, [r1, #16]
 80079f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80079f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079f6:	694a      	ldr	r2, [r1, #20]
 80079f8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80079fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079fe:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8007a00:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007a02:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8007a06:	698a      	ldr	r2, [r1, #24]
 8007a08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007a0c:	6802      	ldr	r2, [r0, #0]
 8007a0e:	4c20      	ldr	r4, [pc, #128]	; (8007a90 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8007a10:	42a2      	cmp	r2, r4
 8007a12:	d007      	beq.n	8007a24 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007a14:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007a18:	42a2      	cmp	r2, r4
 8007a1a:	d003      	beq.n	8007a24 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007a1c:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8007a20:	42a2      	cmp	r2, r4
 8007a22:	d103      	bne.n	8007a2c <HAL_TIMEx_ConfigBreakDeadTime+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a28:	69cc      	ldr	r4, [r1, #28]
 8007a2a:	4323      	orrs	r3, r4
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007a2c:	4c18      	ldr	r4, [pc, #96]	; (8007a90 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8007a2e:	42a2      	cmp	r2, r4
 8007a30:	d007      	beq.n	8007a42 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8007a32:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007a36:	42a2      	cmp	r2, r4
 8007a38:	d003      	beq.n	8007a42 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8007a3a:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8007a3e:	42a2      	cmp	r2, r4
 8007a40:	d11b      	bne.n	8007a7a <HAL_TIMEx_ConfigBreakDeadTime+0xba>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a46:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8007a48:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a50:	6a0c      	ldr	r4, [r1, #32]
 8007a52:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a54:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007a58:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8007a5a:	4323      	orrs	r3, r4

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007a5c:	4c0c      	ldr	r4, [pc, #48]	; (8007a90 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8007a5e:	42a2      	cmp	r2, r4
 8007a60:	d007      	beq.n	8007a72 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8007a62:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007a66:	42a2      	cmp	r2, r4
 8007a68:	d003      	beq.n	8007a72 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8007a6a:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8007a6e:	42a2      	cmp	r2, r4
 8007a70:	d103      	bne.n	8007a7a <HAL_TIMEx_ConfigBreakDeadTime+0xba>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007a72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a76:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8007a78:	430b      	orrs	r3, r1
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a7a:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8007a82:	4618      	mov	r0, r3
}
 8007a84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a88:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007a8a:	2002      	movs	r0, #2
}
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	40012c00 	.word	0x40012c00

08007a94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a94:	b570      	push	{r4, r5, r6, lr}
 8007a96:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a98:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a9a:	6883      	ldr	r3, [r0, #8]
 8007a9c:	6902      	ldr	r2, [r0, #16]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	6942      	ldr	r2, [r0, #20]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	69c2      	ldr	r2, [r0, #28]
 8007aa6:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007aa8:	6808      	ldr	r0, [r1, #0]
 8007aaa:	4a96      	ldr	r2, [pc, #600]	; (8007d04 <UART_SetConfig+0x270>)
 8007aac:	4002      	ands	r2, r0
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ab2:	6822      	ldr	r2, [r4, #0]
 8007ab4:	6853      	ldr	r3, [r2, #4]
 8007ab6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007aba:	68e1      	ldr	r1, [r4, #12]
 8007abc:	430b      	orrs	r3, r1
 8007abe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ac0:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ac2:	6822      	ldr	r2, [r4, #0]
 8007ac4:	4b90      	ldr	r3, [pc, #576]	; (8007d08 <UART_SetConfig+0x274>)
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d001      	beq.n	8007ace <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007aca:	6a23      	ldr	r3, [r4, #32]
 8007acc:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ace:	6893      	ldr	r3, [r2, #8]
 8007ad0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007ad4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007ad8:	430b      	orrs	r3, r1
 8007ada:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007adc:	6822      	ldr	r2, [r4, #0]
 8007ade:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007ae0:	f023 030f 	bic.w	r3, r3, #15
 8007ae4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007ae6:	430b      	orrs	r3, r1
 8007ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	4a87      	ldr	r2, [pc, #540]	; (8007d0c <UART_SetConfig+0x278>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d010      	beq.n	8007b14 <UART_SetConfig+0x80>
 8007af2:	4a87      	ldr	r2, [pc, #540]	; (8007d10 <UART_SetConfig+0x27c>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d021      	beq.n	8007b3c <UART_SetConfig+0xa8>
 8007af8:	4a86      	ldr	r2, [pc, #536]	; (8007d14 <UART_SetConfig+0x280>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d037      	beq.n	8007b6e <UART_SetConfig+0xda>
 8007afe:	4a86      	ldr	r2, [pc, #536]	; (8007d18 <UART_SetConfig+0x284>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d05c      	beq.n	8007bbe <UART_SetConfig+0x12a>
 8007b04:	4a85      	ldr	r2, [pc, #532]	; (8007d1c <UART_SetConfig+0x288>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d06b      	beq.n	8007be2 <UART_SetConfig+0x14e>
 8007b0a:	4a7f      	ldr	r2, [pc, #508]	; (8007d08 <UART_SetConfig+0x274>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d07d      	beq.n	8007c0c <UART_SetConfig+0x178>
 8007b10:	2210      	movs	r2, #16
 8007b12:	e03a      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007b14:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8007b18:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007b1c:	f002 0203 	and.w	r2, r2, #3
 8007b20:	2a03      	cmp	r2, #3
 8007b22:	d809      	bhi.n	8007b38 <UART_SetConfig+0xa4>
 8007b24:	e8df f002 	tbb	[pc, r2]
 8007b28:	06870402 	.word	0x06870402
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	e02c      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007b30:	2204      	movs	r2, #4
 8007b32:	e02a      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007b34:	2208      	movs	r2, #8
 8007b36:	e028      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007b38:	2210      	movs	r2, #16
 8007b3a:	e026      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007b3c:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8007b40:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007b44:	f002 020c 	and.w	r2, r2, #12
 8007b48:	2a0c      	cmp	r2, #12
 8007b4a:	d80e      	bhi.n	8007b6a <UART_SetConfig+0xd6>
 8007b4c:	e8df f002 	tbb	[pc, r2]
 8007b50:	0d0d0d07 	.word	0x0d0d0d07
 8007b54:	0d0d0d09 	.word	0x0d0d0d09
 8007b58:	0d0d0d75 	.word	0x0d0d0d75
 8007b5c:	0b          	.byte	0x0b
 8007b5d:	00          	.byte	0x00
 8007b5e:	2200      	movs	r2, #0
 8007b60:	e013      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007b62:	2204      	movs	r2, #4
 8007b64:	e011      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007b66:	2208      	movs	r2, #8
 8007b68:	e00f      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007b6a:	2210      	movs	r2, #16
 8007b6c:	e00d      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007b6e:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8007b72:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007b76:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8007b7a:	2a20      	cmp	r2, #32
 8007b7c:	d05f      	beq.n	8007c3e <UART_SetConfig+0x1aa>
 8007b7e:	d81a      	bhi.n	8007bb6 <UART_SetConfig+0x122>
 8007b80:	2a00      	cmp	r2, #0
 8007b82:	d05e      	beq.n	8007c42 <UART_SetConfig+0x1ae>
 8007b84:	2a10      	cmp	r2, #16
 8007b86:	d15e      	bne.n	8007c46 <UART_SetConfig+0x1b2>
 8007b88:	2204      	movs	r2, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b8a:	495f      	ldr	r1, [pc, #380]	; (8007d08 <UART_SetConfig+0x274>)
 8007b8c:	428b      	cmp	r3, r1
 8007b8e:	d076      	beq.n	8007c7e <UART_SetConfig+0x1ea>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b90:	69e0      	ldr	r0, [r4, #28]
 8007b92:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007b96:	f000 80c9 	beq.w	8007d2c <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b9a:	2a08      	cmp	r2, #8
 8007b9c:	f200 8134 	bhi.w	8007e08 <UART_SetConfig+0x374>
 8007ba0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007ba4:	011900f7 	.word	0x011900f7
 8007ba8:	013200f5 	.word	0x013200f5
 8007bac:	0132011c 	.word	0x0132011c
 8007bb0:	01320132 	.word	0x01320132
 8007bb4:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bb6:	2a30      	cmp	r2, #48	; 0x30
 8007bb8:	d147      	bne.n	8007c4a <UART_SetConfig+0x1b6>
 8007bba:	2208      	movs	r2, #8
 8007bbc:	e7e5      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007bbe:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8007bc2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007bc6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8007bca:	2a80      	cmp	r2, #128	; 0x80
 8007bcc:	d03f      	beq.n	8007c4e <UART_SetConfig+0x1ba>
 8007bce:	d804      	bhi.n	8007bda <UART_SetConfig+0x146>
 8007bd0:	b3fa      	cbz	r2, 8007c52 <UART_SetConfig+0x1be>
 8007bd2:	2a40      	cmp	r2, #64	; 0x40
 8007bd4:	d13f      	bne.n	8007c56 <UART_SetConfig+0x1c2>
 8007bd6:	2204      	movs	r2, #4
 8007bd8:	e7d7      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007bda:	2ac0      	cmp	r2, #192	; 0xc0
 8007bdc:	d13d      	bne.n	8007c5a <UART_SetConfig+0x1c6>
 8007bde:	2208      	movs	r2, #8
 8007be0:	e7d3      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007be2:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8007be6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007bea:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8007bee:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007bf2:	d034      	beq.n	8007c5e <UART_SetConfig+0x1ca>
 8007bf4:	d805      	bhi.n	8007c02 <UART_SetConfig+0x16e>
 8007bf6:	b3a2      	cbz	r2, 8007c62 <UART_SetConfig+0x1ce>
 8007bf8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007bfc:	d133      	bne.n	8007c66 <UART_SetConfig+0x1d2>
 8007bfe:	2204      	movs	r2, #4
 8007c00:	e7c3      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c02:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007c06:	d130      	bne.n	8007c6a <UART_SetConfig+0x1d6>
 8007c08:	2208      	movs	r2, #8
 8007c0a:	e7be      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c0c:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8007c10:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007c14:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8007c18:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007c1c:	d027      	beq.n	8007c6e <UART_SetConfig+0x1da>
 8007c1e:	d805      	bhi.n	8007c2c <UART_SetConfig+0x198>
 8007c20:	b33a      	cbz	r2, 8007c72 <UART_SetConfig+0x1de>
 8007c22:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007c26:	d126      	bne.n	8007c76 <UART_SetConfig+0x1e2>
 8007c28:	2204      	movs	r2, #4
 8007c2a:	e7ae      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c2c:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8007c30:	d123      	bne.n	8007c7a <UART_SetConfig+0x1e6>
 8007c32:	2208      	movs	r2, #8
 8007c34:	e7a9      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c36:	2202      	movs	r2, #2
 8007c38:	e7a7      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	e7a5      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c3e:	2202      	movs	r2, #2
 8007c40:	e7a3      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c42:	2200      	movs	r2, #0
 8007c44:	e7a1      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c46:	2210      	movs	r2, #16
 8007c48:	e79f      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c4a:	2210      	movs	r2, #16
 8007c4c:	e79d      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c4e:	2202      	movs	r2, #2
 8007c50:	e79b      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c52:	2200      	movs	r2, #0
 8007c54:	e799      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c56:	2210      	movs	r2, #16
 8007c58:	e797      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c5a:	2210      	movs	r2, #16
 8007c5c:	e795      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c5e:	2202      	movs	r2, #2
 8007c60:	e793      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c62:	2200      	movs	r2, #0
 8007c64:	e791      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c66:	2210      	movs	r2, #16
 8007c68:	e78f      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c6a:	2210      	movs	r2, #16
 8007c6c:	e78d      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c6e:	2202      	movs	r2, #2
 8007c70:	e78b      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c72:	2200      	movs	r2, #0
 8007c74:	e789      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c76:	2210      	movs	r2, #16
 8007c78:	e787      	b.n	8007b8a <UART_SetConfig+0xf6>
 8007c7a:	2210      	movs	r2, #16
 8007c7c:	e785      	b.n	8007b8a <UART_SetConfig+0xf6>
    switch (clocksource)
 8007c7e:	2a08      	cmp	r2, #8
 8007c80:	f200 80b2 	bhi.w	8007de8 <UART_SetConfig+0x354>
 8007c84:	e8df f002 	tbb	[pc, r2]
 8007c88:	b03bb008 	.word	0xb03bb008
 8007c8c:	b0b0b038 	.word	0xb0b0b038
 8007c90:	05          	.byte	0x05
 8007c91:	00          	.byte	0x00
 8007c92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007c96:	e004      	b.n	8007ca2 <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c98:	f7fe ffb2 	bl	8006c00 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	f000 80a5 	beq.w	8007dec <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ca2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007ca4:	4b1e      	ldr	r3, [pc, #120]	; (8007d20 <UART_SetConfig+0x28c>)
 8007ca6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007caa:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cae:	6865      	ldr	r5, [r4, #4]
 8007cb0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007cb4:	4299      	cmp	r1, r3
 8007cb6:	f200 809b 	bhi.w	8007df0 <UART_SetConfig+0x35c>
 8007cba:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007cbe:	f200 8099 	bhi.w	8007df4 <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cc2:	2600      	movs	r6, #0
 8007cc4:	4633      	mov	r3, r6
 8007cc6:	4631      	mov	r1, r6
 8007cc8:	f7f9 f806 	bl	8000cd8 <__aeabi_uldivmod>
 8007ccc:	0209      	lsls	r1, r1, #8
 8007cce:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007cd2:	0200      	lsls	r0, r0, #8
 8007cd4:	086b      	lsrs	r3, r5, #1
 8007cd6:	18c0      	adds	r0, r0, r3
 8007cd8:	462a      	mov	r2, r5
 8007cda:	4633      	mov	r3, r6
 8007cdc:	f141 0100 	adc.w	r1, r1, #0
 8007ce0:	f7f8 fffa 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ce4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8007ce8:	4b0e      	ldr	r3, [pc, #56]	; (8007d24 <UART_SetConfig+0x290>)
 8007cea:	429a      	cmp	r2, r3
 8007cec:	f200 8084 	bhi.w	8007df8 <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 8007cf0:	6823      	ldr	r3, [r4, #0]
 8007cf2:	60d8      	str	r0, [r3, #12]
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	e065      	b.n	8007dc4 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 8007cf8:	f7fe fe3c 	bl	8006974 <HAL_RCC_GetSysClockFreq>
        break;
 8007cfc:	e7ce      	b.n	8007c9c <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 8007cfe:	480a      	ldr	r0, [pc, #40]	; (8007d28 <UART_SetConfig+0x294>)
 8007d00:	e7cf      	b.n	8007ca2 <UART_SetConfig+0x20e>
 8007d02:	bf00      	nop
 8007d04:	cfff69f3 	.word	0xcfff69f3
 8007d08:	40008000 	.word	0x40008000
 8007d0c:	40013800 	.word	0x40013800
 8007d10:	40004400 	.word	0x40004400
 8007d14:	40004800 	.word	0x40004800
 8007d18:	40004c00 	.word	0x40004c00
 8007d1c:	40005000 	.word	0x40005000
 8007d20:	0800f788 	.word	0x0800f788
 8007d24:	000ffcff 	.word	0x000ffcff
 8007d28:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8007d2c:	2a08      	cmp	r2, #8
 8007d2e:	d865      	bhi.n	8007dfc <UART_SetConfig+0x368>
 8007d30:	e8df f002 	tbb	[pc, r2]
 8007d34:	64052707 	.word	0x64052707
 8007d38:	6464642a 	.word	0x6464642a
 8007d3c:	0b          	.byte	0x0b
 8007d3d:	00          	.byte	0x00
 8007d3e:	4835      	ldr	r0, [pc, #212]	; (8007e14 <UART_SetConfig+0x380>)
 8007d40:	e003      	b.n	8007d4a <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d42:	f7fe ff5d 	bl	8006c00 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d05a      	beq.n	8007e00 <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007d4c:	4b32      	ldr	r3, [pc, #200]	; (8007e18 <UART_SetConfig+0x384>)
 8007d4e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007d52:	fbb0 f0f3 	udiv	r0, r0, r3
 8007d56:	6862      	ldr	r2, [r4, #4]
 8007d58:	0853      	lsrs	r3, r2, #1
 8007d5a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8007d5e:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d62:	f1a0 0210 	sub.w	r2, r0, #16
 8007d66:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d84a      	bhi.n	8007e04 <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d6e:	b283      	uxth	r3, r0
 8007d70:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d74:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8007d78:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8007d7a:	6823      	ldr	r3, [r4, #0]
 8007d7c:	60d8      	str	r0, [r3, #12]
 8007d7e:	2000      	movs	r0, #0
 8007d80:	e020      	b.n	8007dc4 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d82:	f7fe ff4f 	bl	8006c24 <HAL_RCC_GetPCLK2Freq>
        break;
 8007d86:	e7de      	b.n	8007d46 <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 8007d88:	f7fe fdf4 	bl	8006974 <HAL_RCC_GetSysClockFreq>
        break;
 8007d8c:	e7db      	b.n	8007d46 <UART_SetConfig+0x2b2>
    switch (clocksource)
 8007d8e:	4821      	ldr	r0, [pc, #132]	; (8007e14 <UART_SetConfig+0x380>)
 8007d90:	e003      	b.n	8007d9a <UART_SetConfig+0x306>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d92:	f7fe ff35 	bl	8006c00 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d038      	beq.n	8007e0c <UART_SetConfig+0x378>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007d9c:	4b1e      	ldr	r3, [pc, #120]	; (8007e18 <UART_SetConfig+0x384>)
 8007d9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007da2:	fbb0 f0f3 	udiv	r0, r0, r3
 8007da6:	6863      	ldr	r3, [r4, #4]
 8007da8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007dac:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007db0:	f1a0 0210 	sub.w	r2, r0, #16
 8007db4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d829      	bhi.n	8007e10 <UART_SetConfig+0x37c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	b280      	uxth	r0, r0
 8007dc0:	60d8      	str	r0, [r3, #12]
 8007dc2:	2000      	movs	r0, #0
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007dca:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8007dd2:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 8007dd4:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dd6:	f7fe ff25 	bl	8006c24 <HAL_RCC_GetPCLK2Freq>
        break;
 8007dda:	e7dc      	b.n	8007d96 <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 8007ddc:	f7fe fdca 	bl	8006974 <HAL_RCC_GetSysClockFreq>
        break;
 8007de0:	e7d9      	b.n	8007d96 <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 8007de2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007de6:	e7d8      	b.n	8007d9a <UART_SetConfig+0x306>
    switch (clocksource)
 8007de8:	2001      	movs	r0, #1
 8007dea:	e7eb      	b.n	8007dc4 <UART_SetConfig+0x330>
 8007dec:	2000      	movs	r0, #0
 8007dee:	e7e9      	b.n	8007dc4 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8007df0:	2001      	movs	r0, #1
 8007df2:	e7e7      	b.n	8007dc4 <UART_SetConfig+0x330>
 8007df4:	2001      	movs	r0, #1
 8007df6:	e7e5      	b.n	8007dc4 <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 8007df8:	2001      	movs	r0, #1
 8007dfa:	e7e3      	b.n	8007dc4 <UART_SetConfig+0x330>
    switch (clocksource)
 8007dfc:	2001      	movs	r0, #1
 8007dfe:	e7e1      	b.n	8007dc4 <UART_SetConfig+0x330>
 8007e00:	2000      	movs	r0, #0
 8007e02:	e7df      	b.n	8007dc4 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8007e04:	2001      	movs	r0, #1
 8007e06:	e7dd      	b.n	8007dc4 <UART_SetConfig+0x330>
    switch (clocksource)
 8007e08:	2001      	movs	r0, #1
 8007e0a:	e7db      	b.n	8007dc4 <UART_SetConfig+0x330>
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	e7d9      	b.n	8007dc4 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8007e10:	2001      	movs	r0, #1
 8007e12:	e7d7      	b.n	8007dc4 <UART_SetConfig+0x330>
 8007e14:	00f42400 	.word	0x00f42400
 8007e18:	0800f788 	.word	0x0800f788

08007e1c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e1e:	f013 0f01 	tst.w	r3, #1
 8007e22:	d006      	beq.n	8007e32 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e24:	6802      	ldr	r2, [r0, #0]
 8007e26:	6853      	ldr	r3, [r2, #4]
 8007e28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e2c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007e2e:	430b      	orrs	r3, r1
 8007e30:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e32:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e34:	f013 0f02 	tst.w	r3, #2
 8007e38:	d006      	beq.n	8007e48 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e3a:	6802      	ldr	r2, [r0, #0]
 8007e3c:	6853      	ldr	r3, [r2, #4]
 8007e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e42:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007e44:	430b      	orrs	r3, r1
 8007e46:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e48:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e4a:	f013 0f04 	tst.w	r3, #4
 8007e4e:	d006      	beq.n	8007e5e <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e50:	6802      	ldr	r2, [r0, #0]
 8007e52:	6853      	ldr	r3, [r2, #4]
 8007e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e58:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007e5a:	430b      	orrs	r3, r1
 8007e5c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e60:	f013 0f08 	tst.w	r3, #8
 8007e64:	d006      	beq.n	8007e74 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e66:	6802      	ldr	r2, [r0, #0]
 8007e68:	6853      	ldr	r3, [r2, #4]
 8007e6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e6e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007e70:	430b      	orrs	r3, r1
 8007e72:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e74:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e76:	f013 0f10 	tst.w	r3, #16
 8007e7a:	d006      	beq.n	8007e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e7c:	6802      	ldr	r2, [r0, #0]
 8007e7e:	6893      	ldr	r3, [r2, #8]
 8007e80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e84:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007e86:	430b      	orrs	r3, r1
 8007e88:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e8a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e8c:	f013 0f20 	tst.w	r3, #32
 8007e90:	d006      	beq.n	8007ea0 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e92:	6802      	ldr	r2, [r0, #0]
 8007e94:	6893      	ldr	r3, [r2, #8]
 8007e96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e9a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007e9c:	430b      	orrs	r3, r1
 8007e9e:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ea0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007ea2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007ea6:	d00a      	beq.n	8007ebe <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ea8:	6802      	ldr	r2, [r0, #0]
 8007eaa:	6853      	ldr	r3, [r2, #4]
 8007eac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007eb0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007eb2:	430b      	orrs	r3, r1
 8007eb4:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007eb6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007eb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ebc:	d00b      	beq.n	8007ed6 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ebe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007ec0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ec4:	d006      	beq.n	8007ed4 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ec6:	6802      	ldr	r2, [r0, #0]
 8007ec8:	6853      	ldr	r3, [r2, #4]
 8007eca:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007ece:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007ed0:	430b      	orrs	r3, r1
 8007ed2:	6053      	str	r3, [r2, #4]
  }
}
 8007ed4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ed6:	6802      	ldr	r2, [r0, #0]
 8007ed8:	6853      	ldr	r3, [r2, #4]
 8007eda:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007ede:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007ee0:	430b      	orrs	r3, r1
 8007ee2:	6053      	str	r3, [r2, #4]
 8007ee4:	e7eb      	b.n	8007ebe <UART_AdvFeatureConfig+0xa2>

08007ee6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ee6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eea:	4605      	mov	r5, r0
 8007eec:	460f      	mov	r7, r1
 8007eee:	4616      	mov	r6, r2
 8007ef0:	4699      	mov	r9, r3
 8007ef2:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef6:	682c      	ldr	r4, [r5, #0]
 8007ef8:	69e4      	ldr	r4, [r4, #28]
 8007efa:	ea37 0304 	bics.w	r3, r7, r4
 8007efe:	bf0c      	ite	eq
 8007f00:	f04f 0c01 	moveq.w	ip, #1
 8007f04:	f04f 0c00 	movne.w	ip, #0
 8007f08:	45b4      	cmp	ip, r6
 8007f0a:	d157      	bne.n	8007fbc <UART_WaitOnFlagUntilTimeout+0xd6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f0c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8007f10:	d0f1      	beq.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f12:	f7fb f915 	bl	8003140 <HAL_GetTick>
 8007f16:	eba0 0009 	sub.w	r0, r0, r9
 8007f1a:	4540      	cmp	r0, r8
 8007f1c:	d82f      	bhi.n	8007f7e <UART_WaitOnFlagUntilTimeout+0x98>
 8007f1e:	f1b8 0f00 	cmp.w	r8, #0
 8007f22:	d02c      	beq.n	8007f7e <UART_WaitOnFlagUntilTimeout+0x98>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f24:	682b      	ldr	r3, [r5, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	f012 0f04 	tst.w	r2, #4
 8007f2c:	d0e3      	beq.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f2e:	69da      	ldr	r2, [r3, #28]
 8007f30:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007f34:	d0df      	beq.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f3a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f3c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3e:	e852 3f00 	ldrex	r3, [r2]
 8007f42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f46:	e842 3100 	strex	r1, r3, [r2]
 8007f4a:	2900      	cmp	r1, #0
 8007f4c:	d1f6      	bne.n	8007f3c <UART_WaitOnFlagUntilTimeout+0x56>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	f102 0308 	add.w	r3, r2, #8
 8007f54:	e853 3f00 	ldrex	r3, [r3]
 8007f58:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5c:	3208      	adds	r2, #8
 8007f5e:	e842 3100 	strex	r1, r3, [r2]
 8007f62:	2900      	cmp	r1, #0
 8007f64:	d1f3      	bne.n	8007f4e <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 8007f66:	2320      	movs	r3, #32
 8007f68:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007f6c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f70:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f74:	2300      	movs	r3, #0
 8007f76:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80

          return HAL_TIMEOUT;
 8007f7a:	2003      	movs	r0, #3
 8007f7c:	e01f      	b.n	8007fbe <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f7e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f80:	e852 3f00 	ldrex	r3, [r2]
 8007f84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f88:	e842 3100 	strex	r1, r3, [r2]
 8007f8c:	2900      	cmp	r1, #0
 8007f8e:	d1f6      	bne.n	8007f7e <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f90:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f92:	f102 0308 	add.w	r3, r2, #8
 8007f96:	e853 3f00 	ldrex	r3, [r3]
 8007f9a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	3208      	adds	r2, #8
 8007fa0:	e842 3100 	strex	r1, r3, [r2]
 8007fa4:	2900      	cmp	r1, #0
 8007fa6:	d1f3      	bne.n	8007f90 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8007fa8:	2320      	movs	r3, #32
 8007faa:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007fae:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8007fb8:	2003      	movs	r0, #3
 8007fba:	e000      	b.n	8007fbe <UART_WaitOnFlagUntilTimeout+0xd8>
        }
      }
    }
  }
  return HAL_OK;
 8007fbc:	2000      	movs	r0, #0
}
 8007fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007fc2 <UART_CheckIdleState>:
{
 8007fc2:	b530      	push	{r4, r5, lr}
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8007fce:	f7fb f8b7 	bl	8003140 <HAL_GetTick>
 8007fd2:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fd4:	6822      	ldr	r2, [r4, #0]
 8007fd6:	6812      	ldr	r2, [r2, #0]
 8007fd8:	f012 0f08 	tst.w	r2, #8
 8007fdc:	d10f      	bne.n	8007ffe <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f013 0f04 	tst.w	r3, #4
 8007fe6:	d118      	bne.n	800801a <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8007fe8:	2320      	movs	r3, #32
 8007fea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007fee:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8007ff6:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007ffa:	b003      	add	sp, #12
 8007ffc:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ffe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	4603      	mov	r3, r0
 8008006:	2200      	movs	r2, #0
 8008008:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800800c:	4620      	mov	r0, r4
 800800e:	f7ff ff6a 	bl	8007ee6 <UART_WaitOnFlagUntilTimeout>
 8008012:	2800      	cmp	r0, #0
 8008014:	d0e3      	beq.n	8007fde <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8008016:	2003      	movs	r0, #3
 8008018:	e7ef      	b.n	8007ffa <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800801a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	462b      	mov	r3, r5
 8008022:	2200      	movs	r2, #0
 8008024:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008028:	4620      	mov	r0, r4
 800802a:	f7ff ff5c 	bl	8007ee6 <UART_WaitOnFlagUntilTimeout>
 800802e:	2800      	cmp	r0, #0
 8008030:	d0da      	beq.n	8007fe8 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8008032:	2003      	movs	r0, #3
 8008034:	e7e1      	b.n	8007ffa <UART_CheckIdleState+0x38>

08008036 <HAL_UART_Init>:
  if (huart == NULL)
 8008036:	b378      	cbz	r0, 8008098 <HAL_UART_Init+0x62>
{
 8008038:	b510      	push	{r4, lr}
 800803a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800803c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8008040:	b30b      	cbz	r3, 8008086 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8008042:	2324      	movs	r3, #36	; 0x24
 8008044:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8008048:	6822      	ldr	r2, [r4, #0]
 800804a:	6813      	ldr	r3, [r2, #0]
 800804c:	f023 0301 	bic.w	r3, r3, #1
 8008050:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008052:	4620      	mov	r0, r4
 8008054:	f7ff fd1e 	bl	8007a94 <UART_SetConfig>
 8008058:	2801      	cmp	r0, #1
 800805a:	d013      	beq.n	8008084 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800805c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800805e:	b9bb      	cbnz	r3, 8008090 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008060:	6822      	ldr	r2, [r4, #0]
 8008062:	6853      	ldr	r3, [r2, #4]
 8008064:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008068:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800806a:	6822      	ldr	r2, [r4, #0]
 800806c:	6893      	ldr	r3, [r2, #8]
 800806e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8008072:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8008074:	6822      	ldr	r2, [r4, #0]
 8008076:	6813      	ldr	r3, [r2, #0]
 8008078:	f043 0301 	orr.w	r3, r3, #1
 800807c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800807e:	4620      	mov	r0, r4
 8008080:	f7ff ff9f 	bl	8007fc2 <UART_CheckIdleState>
}
 8008084:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8008086:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800808a:	f7fa fe9f 	bl	8002dcc <HAL_UART_MspInit>
 800808e:	e7d8      	b.n	8008042 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8008090:	4620      	mov	r0, r4
 8008092:	f7ff fec3 	bl	8007e1c <UART_AdvFeatureConfig>
 8008096:	e7e3      	b.n	8008060 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8008098:	2001      	movs	r0, #1
}
 800809a:	4770      	bx	lr

0800809c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800809c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800809e:	b92b      	cbnz	r3, 80080ac <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80080a0:	2301      	movs	r3, #1
 80080a2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80080a6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 80080aa:	4770      	bx	lr
{
 80080ac:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080ae:	6803      	ldr	r3, [r0, #0]
 80080b0:	689a      	ldr	r2, [r3, #8]
 80080b2:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080b6:	6899      	ldr	r1, [r3, #8]
 80080b8:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080ba:	4d09      	ldr	r5, [pc, #36]	; (80080e0 <UARTEx_SetNbDataToProcess+0x44>)
 80080bc:	5c6b      	ldrb	r3, [r5, r1]
 80080be:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080c0:	4c08      	ldr	r4, [pc, #32]	; (80080e4 <UARTEx_SetNbDataToProcess+0x48>)
 80080c2:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080c4:	fb93 f3f1 	sdiv	r3, r3, r1
 80080c8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080cc:	5cab      	ldrb	r3, [r5, r2]
 80080ce:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080d0:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80080d6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80080da:	bc30      	pop	{r4, r5}
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	0800f7a8 	.word	0x0800f7a8
 80080e4:	0800f7a0 	.word	0x0800f7a0

080080e8 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80080e8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d018      	beq.n	8008122 <HAL_UARTEx_DisableFifoMode+0x3a>
 80080f0:	2301      	movs	r3, #1
 80080f2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80080f6:	2324      	movs	r3, #36	; 0x24
 80080f8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080fc:	6803      	ldr	r3, [r0, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008100:	6819      	ldr	r1, [r3, #0]
 8008102:	f021 0101 	bic.w	r1, r1, #1
 8008106:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008108:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800810c:	2300      	movs	r3, #0
 800810e:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008110:	6801      	ldr	r1, [r0, #0]
 8008112:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008114:	2220      	movs	r2, #32
 8008116:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800811a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800811e:	4618      	mov	r0, r3
 8008120:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008122:	2002      	movs	r0, #2
}
 8008124:	4770      	bx	lr

08008126 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8008126:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008128:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800812c:	2b01      	cmp	r3, #1
 800812e:	d01d      	beq.n	800816c <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8008130:	4604      	mov	r4, r0
 8008132:	2301      	movs	r3, #1
 8008134:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008138:	2324      	movs	r3, #36	; 0x24
 800813a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800813e:	6803      	ldr	r3, [r0, #0]
 8008140:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	f022 0201 	bic.w	r2, r2, #1
 8008148:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800814a:	6802      	ldr	r2, [r0, #0]
 800814c:	6893      	ldr	r3, [r2, #8]
 800814e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8008152:	4319      	orrs	r1, r3
 8008154:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008156:	f7ff ffa1 	bl	800809c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800815e:	2320      	movs	r3, #32
 8008160:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008164:	2000      	movs	r0, #0
 8008166:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800816a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800816c:	2002      	movs	r0, #2
 800816e:	e7fc      	b.n	800816a <HAL_UARTEx_SetTxFifoThreshold+0x44>

08008170 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8008170:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008172:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008176:	2b01      	cmp	r3, #1
 8008178:	d01d      	beq.n	80081b6 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800817a:	4604      	mov	r4, r0
 800817c:	2301      	movs	r3, #1
 800817e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008182:	2324      	movs	r3, #36	; 0x24
 8008184:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008188:	6803      	ldr	r3, [r0, #0]
 800818a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	f022 0201 	bic.w	r2, r2, #1
 8008192:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008194:	6802      	ldr	r2, [r0, #0]
 8008196:	6893      	ldr	r3, [r2, #8]
 8008198:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800819c:	4319      	orrs	r1, r3
 800819e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80081a0:	f7ff ff7c 	bl	800809c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80081a8:	2320      	movs	r3, #32
 80081aa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80081ae:	2000      	movs	r0, #0
 80081b0:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80081b4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80081b6:	2002      	movs	r0, #2
 80081b8:	e7fc      	b.n	80081b4 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

080081bc <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80081bc:	b430      	push	{r4, r5}
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80081be:	680a      	ldr	r2, [r1, #0]
 80081c0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80081c4:	f023 0301 	bic.w	r3, r3, #1
 80081c8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80081cc:	688b      	ldr	r3, [r1, #8]
 80081ce:	2b08      	cmp	r3, #8
 80081d0:	d036      	beq.n	8008240 <FMC_NORSRAM_Init+0x84>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80081d2:	2400      	movs	r4, #0
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80081d4:	684a      	ldr	r2, [r1, #4]
  btcr_reg = (flashaccess                   | \
 80081d6:	4322      	orrs	r2, r4
              Init->DataAddressMux          | \
 80081d8:	4313      	orrs	r3, r2
              Init->MemoryType              | \
              Init->MemoryDataWidth         | \
 80081da:	68ca      	ldr	r2, [r1, #12]
              Init->MemoryType              | \
 80081dc:	4313      	orrs	r3, r2
              Init->BurstAccessMode         | \
 80081de:	690a      	ldr	r2, [r1, #16]
              Init->MemoryDataWidth         | \
 80081e0:	4313      	orrs	r3, r2
              Init->WaitSignalPolarity      | \
 80081e2:	694a      	ldr	r2, [r1, #20]
              Init->BurstAccessMode         | \
 80081e4:	4313      	orrs	r3, r2
              Init->WaitSignalActive        | \
 80081e6:	698a      	ldr	r2, [r1, #24]
              Init->WaitSignalPolarity      | \
 80081e8:	4313      	orrs	r3, r2
              Init->WriteOperation          | \
 80081ea:	69ca      	ldr	r2, [r1, #28]
              Init->WaitSignalActive        | \
 80081ec:	4313      	orrs	r3, r2
              Init->WaitSignal              | \
 80081ee:	6a0a      	ldr	r2, [r1, #32]
              Init->WriteOperation          | \
 80081f0:	4313      	orrs	r3, r2
              Init->ExtendedMode            | \
 80081f2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
              Init->WaitSignal              | \
 80081f4:	4313      	orrs	r3, r2
              Init->AsynchronousWait        | \
 80081f6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
              Init->ExtendedMode            | \
 80081f8:	4313      	orrs	r3, r2
              Init->WriteBurst);
 80081fa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80081fc:	4313      	orrs	r3, r2

  btcr_reg |= Init->ContinuousClock;
 80081fe:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8008200:	4313      	orrs	r3, r2
  btcr_reg |= Init->WriteFifo;
 8008202:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8008204:	431a      	orrs	r2, r3
  btcr_reg |= Init->NBLSetupTime;
 8008206:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8008208:	431a      	orrs	r2, r3
  btcr_reg |= Init->PageSize;
 800820a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800820c:	431a      	orrs	r2, r3
  mask |= FMC_BCR1_CCLKEN;
  mask |= FMC_BCR1_WFDIS;
  mask |= FMC_BCRx_NBLSET;
  mask |= FMC_BCRx_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800820e:	680c      	ldr	r4, [r1, #0]
 8008210:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8008214:	4b20      	ldr	r3, [pc, #128]	; (8008298 <FMC_NORSRAM_Init+0xdc>)
 8008216:	402b      	ands	r3, r5
 8008218:	4313      	orrs	r3, r2
 800821a:	f840 3024 	str.w	r3, [r0, r4, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800821e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008224:	d00e      	beq.n	8008244 <FMC_NORSRAM_Init+0x88>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8008226:	680b      	ldr	r3, [r1, #0]
 8008228:	b11b      	cbz	r3, 8008232 <FMC_NORSRAM_Init+0x76>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800822a:	6803      	ldr	r3, [r0, #0]
 800822c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800822e:	4313      	orrs	r3, r2
 8008230:	6003      	str	r3, [r0, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 8008232:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 8008236:	2b01      	cmp	r3, #1
 8008238:	d00d      	beq.n	8008256 <FMC_NORSRAM_Init+0x9a>
        break;
    }
  }

  return HAL_OK;
}
 800823a:	2000      	movs	r0, #0
 800823c:	bc30      	pop	{r4, r5}
 800823e:	4770      	bx	lr
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008240:	2440      	movs	r4, #64	; 0x40
 8008242:	e7c7      	b.n	80081d4 <FMC_NORSRAM_Init+0x18>
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008244:	680a      	ldr	r2, [r1, #0]
 8008246:	2a00      	cmp	r2, #0
 8008248:	d0ed      	beq.n	8008226 <FMC_NORSRAM_Init+0x6a>
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800824a:	6802      	ldr	r2, [r0, #0]
 800824c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008250:	4313      	orrs	r3, r2
 8008252:	6003      	str	r3, [r0, #0]
 8008254:	e7e7      	b.n	8008226 <FMC_NORSRAM_Init+0x6a>
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8008256:	6a03      	ldr	r3, [r0, #32]
 8008258:	0c1b      	lsrs	r3, r3, #16
 800825a:	041b      	lsls	r3, r3, #16
 800825c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800825e:	4313      	orrs	r3, r2
 8008260:	6203      	str	r3, [r0, #32]
    switch (Init->NSBank)
 8008262:	680b      	ldr	r3, [r1, #0]
 8008264:	2b02      	cmp	r3, #2
 8008266:	d00c      	beq.n	8008282 <FMC_NORSRAM_Init+0xc6>
 8008268:	2b04      	cmp	r3, #4
 800826a:	d00f      	beq.n	800828c <FMC_NORSRAM_Init+0xd0>
 800826c:	b123      	cbz	r3, 8008278 <FMC_NORSRAM_Init+0xbc>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800826e:	6a03      	ldr	r3, [r0, #32]
 8008270:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008274:	6203      	str	r3, [r0, #32]
        break;
 8008276:	e7e0      	b.n	800823a <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 8008278:	6a03      	ldr	r3, [r0, #32]
 800827a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800827e:	6203      	str	r3, [r0, #32]
        break;
 8008280:	e7db      	b.n	800823a <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 8008282:	6a03      	ldr	r3, [r0, #32]
 8008284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008288:	6203      	str	r3, [r0, #32]
        break;
 800828a:	e7d6      	b.n	800823a <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800828c:	6a03      	ldr	r3, [r0, #32]
 800828e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008292:	6203      	str	r3, [r0, #32]
        break;
 8008294:	e7d1      	b.n	800823a <FMC_NORSRAM_Init+0x7e>
 8008296:	bf00      	nop
 8008298:	ff000480 	.word	0xff000480

0800829c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800829c:	b410      	push	{r4}
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800829e:	3201      	adds	r2, #1
 80082a0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80082a4:	680b      	ldr	r3, [r1, #0]
 80082a6:	684c      	ldr	r4, [r1, #4]
 80082a8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80082ac:	688c      	ldr	r4, [r1, #8]
 80082ae:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80082b2:	68cc      	ldr	r4, [r1, #12]
 80082b4:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 80082b8:	690c      	ldr	r4, [r1, #16]
 80082ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80082be:	694c      	ldr	r4, [r1, #20]
 80082c0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 80082c4:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 80082c8:	698c      	ldr	r4, [r1, #24]
 80082ca:	f1a4 0c02 	sub.w	ip, r4, #2
 80082ce:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80082d2:	69cc      	ldr	r4, [r1, #28]
 80082d4:	4323      	orrs	r3, r4
 80082d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80082da:	6803      	ldr	r3, [r0, #0]
 80082dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80082e0:	d00b      	beq.n	80082fa <FMC_NORSRAM_Timing_Init+0x5e>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80082e2:	6843      	ldr	r3, [r0, #4]
 80082e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80082e8:	694a      	ldr	r2, [r1, #20]
 80082ea:	3a01      	subs	r2, #1
 80082ec:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80082f0:	6843      	ldr	r3, [r0, #4]
 80082f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80082f6:	4313      	orrs	r3, r2
 80082f8:	6043      	str	r3, [r0, #4]
  }

  return HAL_OK;
}
 80082fa:	2000      	movs	r0, #0
 80082fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008300:	4770      	bx	lr

08008302 <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8008302:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008306:	d005      	beq.n	8008314 <FMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008308:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800830c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8008310:	2000      	movs	r0, #0
 8008312:	4770      	bx	lr
{
 8008314:	b410      	push	{r4}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008316:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800831a:	f003 6c7f 	and.w	ip, r3, #267386880	; 0xff00000
 800831e:	680b      	ldr	r3, [r1, #0]
 8008320:	684c      	ldr	r4, [r1, #4]
 8008322:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8008326:	688c      	ldr	r4, [r1, #8]
 8008328:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800832c:	68cc      	ldr	r4, [r1, #12]
 800832e:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 8008332:	69cc      	ldr	r4, [r1, #28]
 8008334:	4323      	orrs	r3, r4
 8008336:	6909      	ldr	r1, [r1, #16]
 8008338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800833c:	ea4c 0303 	orr.w	r3, ip, r3
 8008340:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8008344:	2000      	movs	r0, #0
 8008346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800834a:	4770      	bx	lr

0800834c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800834c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800834e:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008350:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8008354:	b112      	cbz	r2, 800835c <LL_GPIO_Init+0x10>
  return __builtin_clz(value);
 8008356:	fab2 f282 	clz	r2, r2
 800835a:	e04e      	b.n	80083fa <LL_GPIO_Init+0xae>
    return 32U;
 800835c:	2220      	movs	r2, #32

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800835e:	e04c      	b.n	80083fa <LL_GPIO_Init+0xae>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008360:	688e      	ldr	r6, [r1, #8]
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8008362:	6885      	ldr	r5, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008364:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8008368:	b1e4      	cbz	r4, 80083a4 <LL_GPIO_Init+0x58>
  return __builtin_clz(value);
 800836a:	fab4 f484 	clz	r4, r4
 800836e:	0064      	lsls	r4, r4, #1
 8008370:	f04f 0c03 	mov.w	ip, #3
 8008374:	fa0c f404 	lsl.w	r4, ip, r4
 8008378:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800837c:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8008380:	b194      	cbz	r4, 80083a8 <LL_GPIO_Init+0x5c>
  return __builtin_clz(value);
 8008382:	fab4 f484 	clz	r4, r4
 8008386:	0064      	lsls	r4, r4, #1
 8008388:	fa06 f404 	lsl.w	r4, r6, r4
 800838c:	432c      	orrs	r4, r5
 800838e:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008390:	680d      	ldr	r5, [r1, #0]
 8008392:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008394:	6844      	ldr	r4, [r0, #4]
 8008396:	ea24 0405 	bic.w	r4, r4, r5
 800839a:	fb06 f505 	mul.w	r5, r6, r5
 800839e:	432c      	orrs	r4, r5
 80083a0:	6044      	str	r4, [r0, #4]
}
 80083a2:	e039      	b.n	8008418 <LL_GPIO_Init+0xcc>
    return 32U;
 80083a4:	2420      	movs	r4, #32
 80083a6:	e7e2      	b.n	800836e <LL_GPIO_Init+0x22>
 80083a8:	2420      	movs	r4, #32
 80083aa:	e7ec      	b.n	8008386 <LL_GPIO_Init+0x3a>
 80083ac:	2420      	movs	r4, #32
 80083ae:	e03b      	b.n	8008428 <LL_GPIO_Init+0xdc>
 80083b0:	2420      	movs	r4, #32
 80083b2:	e046      	b.n	8008442 <LL_GPIO_Init+0xf6>
 80083b4:	2420      	movs	r4, #32
 80083b6:	e056      	b.n	8008466 <LL_GPIO_Init+0x11a>
 80083b8:	2420      	movs	r4, #32
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80083ba:	00a4      	lsls	r4, r4, #2
 80083bc:	fa06 f404 	lsl.w	r4, r6, r4
 80083c0:	432c      	orrs	r4, r5
 80083c2:	6204      	str	r4, [r0, #32]
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80083c4:	684e      	ldr	r6, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80083c6:	6805      	ldr	r5, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083c8:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 80083cc:	2c00      	cmp	r4, #0
 80083ce:	d075      	beq.n	80084bc <LL_GPIO_Init+0x170>
  return __builtin_clz(value);
 80083d0:	fab4 f484 	clz	r4, r4
 80083d4:	0064      	lsls	r4, r4, #1
 80083d6:	f04f 0c03 	mov.w	ip, #3
 80083da:	fa0c f404 	lsl.w	r4, ip, r4
 80083de:	ea25 0404 	bic.w	r4, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083e2:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d06a      	beq.n	80084c0 <LL_GPIO_Init+0x174>
  return __builtin_clz(value);
 80083ea:	fab3 f383 	clz	r3, r3
 80083ee:	005b      	lsls	r3, r3, #1
 80083f0:	fa06 f303 	lsl.w	r3, r6, r3
 80083f4:	4323      	orrs	r3, r4
 80083f6:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 80083f8:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80083fa:	680b      	ldr	r3, [r1, #0]
 80083fc:	fa33 f402 	lsrs.w	r4, r3, r2
 8008400:	d060      	beq.n	80084c4 <LL_GPIO_Init+0x178>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8008402:	f04f 0c01 	mov.w	ip, #1
 8008406:	fa0c fc02 	lsl.w	ip, ip, r2
    if (currentpin != 0x00u)
 800840a:	ea1c 0303 	ands.w	r3, ip, r3
 800840e:	d0f3      	beq.n	80083f8 <LL_GPIO_Init+0xac>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008410:	684c      	ldr	r4, [r1, #4]
 8008412:	3c01      	subs	r4, #1
 8008414:	2c01      	cmp	r4, #1
 8008416:	d9a3      	bls.n	8008360 <LL_GPIO_Init+0x14>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008418:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800841a:	68c5      	ldr	r5, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800841c:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8008420:	2c00      	cmp	r4, #0
 8008422:	d0c3      	beq.n	80083ac <LL_GPIO_Init+0x60>
  return __builtin_clz(value);
 8008424:	fab4 f484 	clz	r4, r4
 8008428:	0064      	lsls	r4, r4, #1
 800842a:	f04f 0c03 	mov.w	ip, #3
 800842e:	fa0c f404 	lsl.w	r4, ip, r4
 8008432:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008436:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800843a:	2c00      	cmp	r4, #0
 800843c:	d0b8      	beq.n	80083b0 <LL_GPIO_Init+0x64>
  return __builtin_clz(value);
 800843e:	fab4 f484 	clz	r4, r4
 8008442:	0064      	lsls	r4, r4, #1
 8008444:	fa06 f404 	lsl.w	r4, r6, r4
 8008448:	432c      	orrs	r4, r5
 800844a:	60c4      	str	r4, [r0, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800844c:	684c      	ldr	r4, [r1, #4]
 800844e:	2c02      	cmp	r4, #2
 8008450:	d1b8      	bne.n	80083c4 <LL_GPIO_Init+0x78>
        if (currentpin < LL_GPIO_PIN_8)
 8008452:	2bff      	cmp	r3, #255	; 0xff
 8008454:	d814      	bhi.n	8008480 <LL_GPIO_Init+0x134>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008456:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008458:	6a05      	ldr	r5, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800845a:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800845e:	2c00      	cmp	r4, #0
 8008460:	d0a8      	beq.n	80083b4 <LL_GPIO_Init+0x68>
  return __builtin_clz(value);
 8008462:	fab4 f484 	clz	r4, r4
 8008466:	00a4      	lsls	r4, r4, #2
 8008468:	270f      	movs	r7, #15
 800846a:	fa07 f404 	lsl.w	r4, r7, r4
 800846e:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008472:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8008476:	2c00      	cmp	r4, #0
 8008478:	d09e      	beq.n	80083b8 <LL_GPIO_Init+0x6c>
  return __builtin_clz(value);
 800847a:	fab4 f484 	clz	r4, r4
 800847e:	e79c      	b.n	80083ba <LL_GPIO_Init+0x6e>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008480:	694f      	ldr	r7, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008482:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008484:	0a1c      	lsrs	r4, r3, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008486:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800848a:	b19d      	cbz	r5, 80084b4 <LL_GPIO_Init+0x168>
  return __builtin_clz(value);
 800848c:	fab5 f585 	clz	r5, r5
 8008490:	00ad      	lsls	r5, r5, #2
 8008492:	f04f 0c0f 	mov.w	ip, #15
 8008496:	fa0c f505 	lsl.w	r5, ip, r5
 800849a:	ea26 0505 	bic.w	r5, r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800849e:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80084a2:	b14c      	cbz	r4, 80084b8 <LL_GPIO_Init+0x16c>
  return __builtin_clz(value);
 80084a4:	fab4 f484 	clz	r4, r4
 80084a8:	00a4      	lsls	r4, r4, #2
 80084aa:	fa07 f404 	lsl.w	r4, r7, r4
 80084ae:	432c      	orrs	r4, r5
 80084b0:	6244      	str	r4, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80084b2:	e787      	b.n	80083c4 <LL_GPIO_Init+0x78>
    return 32U;
 80084b4:	2520      	movs	r5, #32
 80084b6:	e7eb      	b.n	8008490 <LL_GPIO_Init+0x144>
 80084b8:	2420      	movs	r4, #32
 80084ba:	e7f5      	b.n	80084a8 <LL_GPIO_Init+0x15c>
 80084bc:	2420      	movs	r4, #32
 80084be:	e789      	b.n	80083d4 <LL_GPIO_Init+0x88>
 80084c0:	2320      	movs	r3, #32
 80084c2:	e794      	b.n	80083ee <LL_GPIO_Init+0xa2>
  }
  return (SUCCESS);
}
 80084c4:	2000      	movs	r0, #0
 80084c6:	bcf0      	pop	{r4, r5, r6, r7}
 80084c8:	4770      	bx	lr
	...

080084cc <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80084cc:	4b04      	ldr	r3, [pc, #16]	; (80084e0 <RCC_GetHCLKClockFreq+0x14>)
 80084ce:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80084d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80084d4:	4a03      	ldr	r2, [pc, #12]	; (80084e4 <RCC_GetHCLKClockFreq+0x18>)
 80084d6:	5cd3      	ldrb	r3, [r2, r3]
 80084d8:	f003 031f 	and.w	r3, r3, #31
}
 80084dc:	40d8      	lsrs	r0, r3
 80084de:	4770      	bx	lr
 80084e0:	40021000 	.word	0x40021000
 80084e4:	0800f770 	.word	0x0800f770

080084e8 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80084e8:	4b04      	ldr	r3, [pc, #16]	; (80084fc <RCC_GetPCLK1ClockFreq+0x14>)
 80084ea:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80084ec:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80084f0:	4a03      	ldr	r2, [pc, #12]	; (8008500 <RCC_GetPCLK1ClockFreq+0x18>)
 80084f2:	5cd3      	ldrb	r3, [r2, r3]
 80084f4:	f003 031f 	and.w	r3, r3, #31
}
 80084f8:	40d8      	lsrs	r0, r3
 80084fa:	4770      	bx	lr
 80084fc:	40021000 	.word	0x40021000
 8008500:	0800f780 	.word	0x0800f780

08008504 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008504:	4b04      	ldr	r3, [pc, #16]	; (8008518 <RCC_GetPCLK2ClockFreq+0x14>)
 8008506:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8008508:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800850c:	4a03      	ldr	r2, [pc, #12]	; (800851c <RCC_GetPCLK2ClockFreq+0x18>)
 800850e:	5cd3      	ldrb	r3, [r2, r3]
 8008510:	f003 031f 	and.w	r3, r3, #31
}
 8008514:	40d8      	lsrs	r0, r3
 8008516:	4770      	bx	lr
 8008518:	40021000 	.word	0x40021000
 800851c:	0800f780 	.word	0x0800f780

08008520 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008520:	4b0e      	ldr	r3, [pc, #56]	; (800855c <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8008528:	2b03      	cmp	r3, #3
 800852a:	d014      	beq.n	8008556 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800852c:	480c      	ldr	r0, [pc, #48]	; (8008560 <RCC_PLL_GetFreqDomain_SYS+0x40>)
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800852e:	4a0b      	ldr	r2, [pc, #44]	; (800855c <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8008530:	68d3      	ldr	r3, [r2, #12]
 8008532:	f3c3 2306 	ubfx	r3, r3, #8, #7

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008536:	fb03 f000 	mul.w	r0, r3, r0
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800853a:	68d3      	ldr	r3, [r2, #12]
 800853c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008540:	3301      	adds	r3, #1
 8008542:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008546:	68d3      	ldr	r3, [r2, #12]
 8008548:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800854c:	3301      	adds	r3, #1
 800854e:	005b      	lsls	r3, r3, #1
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8008550:	fbb0 f0f3 	udiv	r0, r0, r3
 8008554:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 8008556:	4803      	ldr	r0, [pc, #12]	; (8008564 <RCC_PLL_GetFreqDomain_SYS+0x44>)
 8008558:	e7e9      	b.n	800852e <RCC_PLL_GetFreqDomain_SYS+0xe>
 800855a:	bf00      	nop
 800855c:	40021000 	.word	0x40021000
 8008560:	00f42400 	.word	0x00f42400
 8008564:	007a1200 	.word	0x007a1200

08008568 <RCC_GetSystemClockFreq>:
{
 8008568:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800856a:	4b07      	ldr	r3, [pc, #28]	; (8008588 <RCC_GetSystemClockFreq+0x20>)
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8008572:	2b08      	cmp	r3, #8
 8008574:	d004      	beq.n	8008580 <RCC_GetSystemClockFreq+0x18>
 8008576:	2b0c      	cmp	r3, #12
 8008578:	d104      	bne.n	8008584 <RCC_GetSystemClockFreq+0x1c>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800857a:	f7ff ffd1 	bl	8008520 <RCC_PLL_GetFreqDomain_SYS>
      break;
 800857e:	e002      	b.n	8008586 <RCC_GetSystemClockFreq+0x1e>
      frequency = HSE_VALUE;
 8008580:	4802      	ldr	r0, [pc, #8]	; (800858c <RCC_GetSystemClockFreq+0x24>)
 8008582:	e000      	b.n	8008586 <RCC_GetSystemClockFreq+0x1e>
  switch (LL_RCC_GetSysClkSource())
 8008584:	4802      	ldr	r0, [pc, #8]	; (8008590 <RCC_GetSystemClockFreq+0x28>)
}
 8008586:	bd08      	pop	{r3, pc}
 8008588:	40021000 	.word	0x40021000
 800858c:	007a1200 	.word	0x007a1200
 8008590:	00f42400 	.word	0x00f42400

08008594 <LL_RCC_GetUSARTClockFreq>:
{
 8008594:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8008596:	2803      	cmp	r0, #3
 8008598:	d005      	beq.n	80085a6 <LL_RCC_GetUSARTClockFreq+0x12>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800859a:	280c      	cmp	r0, #12
 800859c:	d02c      	beq.n	80085f8 <LL_RCC_GetUSARTClockFreq+0x64>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800859e:	2830      	cmp	r0, #48	; 0x30
 80085a0:	d053      	beq.n	800864a <LL_RCC_GetUSARTClockFreq+0xb6>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80085a2:	2000      	movs	r0, #0
}
 80085a4:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80085a6:	4b3d      	ldr	r3, [pc, #244]	; (800869c <LL_RCC_GetUSARTClockFreq+0x108>)
 80085a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ac:	4003      	ands	r3, r0
 80085ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80085b2:	4b3b      	ldr	r3, [pc, #236]	; (80086a0 <LL_RCC_GetUSARTClockFreq+0x10c>)
 80085b4:	4298      	cmp	r0, r3
 80085b6:	d00f      	beq.n	80085d8 <LL_RCC_GetUSARTClockFreq+0x44>
 80085b8:	f1b0 1f03 	cmp.w	r0, #196611	; 0x30003
 80085bc:	d013      	beq.n	80085e6 <LL_RCC_GetUSARTClockFreq+0x52>
 80085be:	3b01      	subs	r3, #1
 80085c0:	4298      	cmp	r0, r3
 80085c2:	d006      	beq.n	80085d2 <LL_RCC_GetUSARTClockFreq+0x3e>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80085c4:	f7ff ffd0 	bl	8008568 <RCC_GetSystemClockFreq>
 80085c8:	f7ff ff80 	bl	80084cc <RCC_GetHCLKClockFreq>
 80085cc:	f7ff ff9a 	bl	8008504 <RCC_GetPCLK2ClockFreq>
        break;
 80085d0:	e7e8      	b.n	80085a4 <LL_RCC_GetUSARTClockFreq+0x10>
        usart_frequency = RCC_GetSystemClockFreq();
 80085d2:	f7ff ffc9 	bl	8008568 <RCC_GetSystemClockFreq>
        break;
 80085d6:	e7e5      	b.n	80085a4 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80085d8:	4b30      	ldr	r3, [pc, #192]	; (800869c <LL_RCC_GetUSARTClockFreq+0x108>)
 80085da:	6818      	ldr	r0, [r3, #0]
 80085dc:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80085e0:	d0e0      	beq.n	80085a4 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = HSI_VALUE;
 80085e2:	4830      	ldr	r0, [pc, #192]	; (80086a4 <LL_RCC_GetUSARTClockFreq+0x110>)
 80085e4:	e7de      	b.n	80085a4 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80085e6:	4b2d      	ldr	r3, [pc, #180]	; (800869c <LL_RCC_GetUSARTClockFreq+0x108>)
 80085e8:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80085ec:	f010 0002 	ands.w	r0, r0, #2
 80085f0:	d0d8      	beq.n	80085a4 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = LSE_VALUE;
 80085f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80085f6:	e7d5      	b.n	80085a4 <LL_RCC_GetUSARTClockFreq+0x10>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80085f8:	4b28      	ldr	r3, [pc, #160]	; (800869c <LL_RCC_GetUSARTClockFreq+0x108>)
 80085fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085fe:	4003      	ands	r3, r0
 8008600:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8008604:	4b28      	ldr	r3, [pc, #160]	; (80086a8 <LL_RCC_GetUSARTClockFreq+0x114>)
 8008606:	4298      	cmp	r0, r3
 8008608:	d00f      	beq.n	800862a <LL_RCC_GetUSARTClockFreq+0x96>
 800860a:	f1b0 1f0c 	cmp.w	r0, #786444	; 0xc000c
 800860e:	d013      	beq.n	8008638 <LL_RCC_GetUSARTClockFreq+0xa4>
 8008610:	3b04      	subs	r3, #4
 8008612:	4298      	cmp	r0, r3
 8008614:	d006      	beq.n	8008624 <LL_RCC_GetUSARTClockFreq+0x90>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008616:	f7ff ffa7 	bl	8008568 <RCC_GetSystemClockFreq>
 800861a:	f7ff ff57 	bl	80084cc <RCC_GetHCLKClockFreq>
 800861e:	f7ff ff63 	bl	80084e8 <RCC_GetPCLK1ClockFreq>
        break;
 8008622:	e7bf      	b.n	80085a4 <LL_RCC_GetUSARTClockFreq+0x10>
        usart_frequency = RCC_GetSystemClockFreq();
 8008624:	f7ff ffa0 	bl	8008568 <RCC_GetSystemClockFreq>
        break;
 8008628:	e7bc      	b.n	80085a4 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800862a:	4b1c      	ldr	r3, [pc, #112]	; (800869c <LL_RCC_GetUSARTClockFreq+0x108>)
 800862c:	6818      	ldr	r0, [r3, #0]
 800862e:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8008632:	d0b7      	beq.n	80085a4 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = HSI_VALUE;
 8008634:	481b      	ldr	r0, [pc, #108]	; (80086a4 <LL_RCC_GetUSARTClockFreq+0x110>)
 8008636:	e7b5      	b.n	80085a4 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008638:	4b18      	ldr	r3, [pc, #96]	; (800869c <LL_RCC_GetUSARTClockFreq+0x108>)
 800863a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800863e:	f010 0002 	ands.w	r0, r0, #2
 8008642:	d0af      	beq.n	80085a4 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = LSE_VALUE;
 8008644:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008648:	e7ac      	b.n	80085a4 <LL_RCC_GetUSARTClockFreq+0x10>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800864a:	4b14      	ldr	r3, [pc, #80]	; (800869c <LL_RCC_GetUSARTClockFreq+0x108>)
 800864c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008650:	4003      	ands	r3, r0
 8008652:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8008656:	4b15      	ldr	r3, [pc, #84]	; (80086ac <LL_RCC_GetUSARTClockFreq+0x118>)
 8008658:	4298      	cmp	r0, r3
 800865a:	d00f      	beq.n	800867c <LL_RCC_GetUSARTClockFreq+0xe8>
 800865c:	f1b0 1f30 	cmp.w	r0, #3145776	; 0x300030
 8008660:	d013      	beq.n	800868a <LL_RCC_GetUSARTClockFreq+0xf6>
 8008662:	3b10      	subs	r3, #16
 8008664:	4298      	cmp	r0, r3
 8008666:	d006      	beq.n	8008676 <LL_RCC_GetUSARTClockFreq+0xe2>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008668:	f7ff ff7e 	bl	8008568 <RCC_GetSystemClockFreq>
 800866c:	f7ff ff2e 	bl	80084cc <RCC_GetHCLKClockFreq>
 8008670:	f7ff ff3a 	bl	80084e8 <RCC_GetPCLK1ClockFreq>
          break;
 8008674:	e796      	b.n	80085a4 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = RCC_GetSystemClockFreq();
 8008676:	f7ff ff77 	bl	8008568 <RCC_GetSystemClockFreq>
          break;
 800867a:	e793      	b.n	80085a4 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800867c:	4b07      	ldr	r3, [pc, #28]	; (800869c <LL_RCC_GetUSARTClockFreq+0x108>)
 800867e:	6818      	ldr	r0, [r3, #0]
 8008680:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8008684:	d08e      	beq.n	80085a4 <LL_RCC_GetUSARTClockFreq+0x10>
            usart_frequency = HSI_VALUE;
 8008686:	4807      	ldr	r0, [pc, #28]	; (80086a4 <LL_RCC_GetUSARTClockFreq+0x110>)
 8008688:	e78c      	b.n	80085a4 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800868a:	4b04      	ldr	r3, [pc, #16]	; (800869c <LL_RCC_GetUSARTClockFreq+0x108>)
 800868c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8008690:	f010 0002 	ands.w	r0, r0, #2
 8008694:	d086      	beq.n	80085a4 <LL_RCC_GetUSARTClockFreq+0x10>
            usart_frequency = LSE_VALUE;
 8008696:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return usart_frequency;
 800869a:	e783      	b.n	80085a4 <LL_RCC_GetUSARTClockFreq+0x10>
 800869c:	40021000 	.word	0x40021000
 80086a0:	00030002 	.word	0x00030002
 80086a4:	00f42400 	.word	0x00f42400
 80086a8:	000c0008 	.word	0x000c0008
 80086ac:	00300020 	.word	0x00300020

080086b0 <LL_RCC_GetUARTClockFreq>:
{
 80086b0:	b510      	push	{r4, lr}
 80086b2:	4604      	mov	r4, r0
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80086b4:	28c0      	cmp	r0, #192	; 0xc0
 80086b6:	d004      	beq.n	80086c2 <LL_RCC_GetUARTClockFreq+0x12>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80086b8:	2000      	movs	r0, #0
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80086ba:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 80086be:	d029      	beq.n	8008714 <LL_RCC_GetUARTClockFreq+0x64>
}
 80086c0:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80086c2:	4b29      	ldr	r3, [pc, #164]	; (8008768 <LL_RCC_GetUARTClockFreq+0xb8>)
 80086c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086c8:	4003      	ands	r3, r0
 80086ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80086ce:	4a27      	ldr	r2, [pc, #156]	; (800876c <LL_RCC_GetUARTClockFreq+0xbc>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d00f      	beq.n	80086f4 <LL_RCC_GetUARTClockFreq+0x44>
 80086d4:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80086d8:	d013      	beq.n	8008702 <LL_RCC_GetUARTClockFreq+0x52>
 80086da:	3a40      	subs	r2, #64	; 0x40
 80086dc:	4293      	cmp	r3, r2
 80086de:	d006      	beq.n	80086ee <LL_RCC_GetUARTClockFreq+0x3e>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80086e0:	f7ff ff42 	bl	8008568 <RCC_GetSystemClockFreq>
 80086e4:	f7ff fef2 	bl	80084cc <RCC_GetHCLKClockFreq>
 80086e8:	f7ff fefe 	bl	80084e8 <RCC_GetPCLK1ClockFreq>
        break;
 80086ec:	e7e5      	b.n	80086ba <LL_RCC_GetUARTClockFreq+0xa>
        uart_frequency = RCC_GetSystemClockFreq();
 80086ee:	f7ff ff3b 	bl	8008568 <RCC_GetSystemClockFreq>
        break;
 80086f2:	e7e2      	b.n	80086ba <LL_RCC_GetUARTClockFreq+0xa>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80086f4:	4b1c      	ldr	r3, [pc, #112]	; (8008768 <LL_RCC_GetUARTClockFreq+0xb8>)
 80086f6:	6818      	ldr	r0, [r3, #0]
 80086f8:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80086fc:	d0dd      	beq.n	80086ba <LL_RCC_GetUARTClockFreq+0xa>
          uart_frequency = HSI_VALUE;
 80086fe:	481c      	ldr	r0, [pc, #112]	; (8008770 <LL_RCC_GetUARTClockFreq+0xc0>)
 8008700:	e7db      	b.n	80086ba <LL_RCC_GetUARTClockFreq+0xa>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008702:	4b19      	ldr	r3, [pc, #100]	; (8008768 <LL_RCC_GetUARTClockFreq+0xb8>)
 8008704:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8008708:	f010 0002 	ands.w	r0, r0, #2
 800870c:	d0d5      	beq.n	80086ba <LL_RCC_GetUARTClockFreq+0xa>
          uart_frequency = LSE_VALUE;
 800870e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008712:	e7d2      	b.n	80086ba <LL_RCC_GetUARTClockFreq+0xa>
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8008714:	4b14      	ldr	r3, [pc, #80]	; (8008768 <LL_RCC_GetUARTClockFreq+0xb8>)
 8008716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800871a:	4023      	ands	r3, r4
 800871c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8008720:	4b14      	ldr	r3, [pc, #80]	; (8008774 <LL_RCC_GetUARTClockFreq+0xc4>)
 8008722:	429c      	cmp	r4, r3
 8008724:	d010      	beq.n	8008748 <LL_RCC_GetUARTClockFreq+0x98>
 8008726:	f1b4 2f03 	cmp.w	r4, #50332416	; 0x3000300
 800872a:	d014      	beq.n	8008756 <LL_RCC_GetUARTClockFreq+0xa6>
 800872c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008730:	429c      	cmp	r4, r3
 8008732:	d006      	beq.n	8008742 <LL_RCC_GetUARTClockFreq+0x92>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008734:	f7ff ff18 	bl	8008568 <RCC_GetSystemClockFreq>
 8008738:	f7ff fec8 	bl	80084cc <RCC_GetHCLKClockFreq>
 800873c:	f7ff fed4 	bl	80084e8 <RCC_GetPCLK1ClockFreq>
        break;
 8008740:	e7be      	b.n	80086c0 <LL_RCC_GetUARTClockFreq+0x10>
        uart_frequency = RCC_GetSystemClockFreq();
 8008742:	f7ff ff11 	bl	8008568 <RCC_GetSystemClockFreq>
        break;
 8008746:	e7bb      	b.n	80086c0 <LL_RCC_GetUARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008748:	4b07      	ldr	r3, [pc, #28]	; (8008768 <LL_RCC_GetUARTClockFreq+0xb8>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008750:	d0b6      	beq.n	80086c0 <LL_RCC_GetUARTClockFreq+0x10>
          uart_frequency = HSI_VALUE;
 8008752:	4807      	ldr	r0, [pc, #28]	; (8008770 <LL_RCC_GetUARTClockFreq+0xc0>)
 8008754:	e7b4      	b.n	80086c0 <LL_RCC_GetUARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008756:	4b04      	ldr	r3, [pc, #16]	; (8008768 <LL_RCC_GetUARTClockFreq+0xb8>)
 8008758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800875c:	f013 0f02 	tst.w	r3, #2
 8008760:	d0ae      	beq.n	80086c0 <LL_RCC_GetUARTClockFreq+0x10>
          uart_frequency = LSE_VALUE;
 8008762:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return uart_frequency;
 8008766:	e7ab      	b.n	80086c0 <LL_RCC_GetUARTClockFreq+0x10>
 8008768:	40021000 	.word	0x40021000
 800876c:	00c00080 	.word	0x00c00080
 8008770:	00f42400 	.word	0x00f42400
 8008774:	03000200 	.word	0x03000200

08008778 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8008778:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800877a:	6803      	ldr	r3, [r0, #0]
 800877c:	f013 0f01 	tst.w	r3, #1
 8008780:	d175      	bne.n	800886e <LL_USART_Init+0xf6>
 8008782:	4604      	mov	r4, r0
 8008784:	460d      	mov	r5, r1
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8008786:	6803      	ldr	r3, [r0, #0]
 8008788:	4a3a      	ldr	r2, [pc, #232]	; (8008874 <LL_USART_Init+0xfc>)
 800878a:	401a      	ands	r2, r3
 800878c:	688b      	ldr	r3, [r1, #8]
 800878e:	6909      	ldr	r1, [r1, #16]
 8008790:	430b      	orrs	r3, r1
 8008792:	6969      	ldr	r1, [r5, #20]
 8008794:	430b      	orrs	r3, r1
 8008796:	69e9      	ldr	r1, [r5, #28]
 8008798:	430b      	orrs	r3, r1
 800879a:	4313      	orrs	r3, r2
 800879c:	6003      	str	r3, [r0, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800879e:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80087a0:	6842      	ldr	r2, [r0, #4]
 80087a2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80087a6:	4313      	orrs	r3, r2
 80087a8:	6043      	str	r3, [r0, #4]
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80087aa:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80087ac:	6882      	ldr	r2, [r0, #8]
 80087ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80087b2:	4313      	orrs	r3, r2
 80087b4:	6083      	str	r3, [r0, #8]

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80087b6:	4b30      	ldr	r3, [pc, #192]	; (8008878 <LL_USART_Init+0x100>)
 80087b8:	4298      	cmp	r0, r3
 80087ba:	d013      	beq.n	80087e4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 80087bc:	4b2f      	ldr	r3, [pc, #188]	; (800887c <LL_USART_Init+0x104>)
 80087be:	4298      	cmp	r0, r3
 80087c0:	d019      	beq.n	80087f6 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
    }
    else if (USARTx == USART3)
 80087c2:	4b2f      	ldr	r3, [pc, #188]	; (8008880 <LL_USART_Init+0x108>)
 80087c4:	4298      	cmp	r0, r3
 80087c6:	d01a      	beq.n	80087fe <LL_USART_Init+0x86>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
    }
#if defined(UART4)
    else if (USARTx == UART4)
 80087c8:	4b2e      	ldr	r3, [pc, #184]	; (8008884 <LL_USART_Init+0x10c>)
 80087ca:	4298      	cmp	r0, r3
 80087cc:	d01b      	beq.n	8008806 <LL_USART_Init+0x8e>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80087ce:	4b2e      	ldr	r3, [pc, #184]	; (8008888 <LL_USART_Init+0x110>)
 80087d0:	4298      	cmp	r0, r3
 80087d2:	d01c      	beq.n	800880e <LL_USART_Init+0x96>
  ErrorStatus status = ERROR;
 80087d4:	2001      	movs	r0, #1
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80087d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80087d8:	f022 020f 	bic.w	r2, r2, #15
 80087dc:	882b      	ldrh	r3, [r5, #0]
 80087de:	4313      	orrs	r3, r2
 80087e0:	62e3      	str	r3, [r4, #44]	; 0x2c
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80087e4:	2003      	movs	r0, #3
 80087e6:	f7ff fed5 	bl	8008594 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d03d      	beq.n	800886a <LL_USART_Init+0xf2>
        && (USART_InitStruct->BaudRate != 0U))
 80087ee:	686a      	ldr	r2, [r5, #4]
 80087f0:	b992      	cbnz	r2, 8008818 <LL_USART_Init+0xa0>
  ErrorStatus status = ERROR;
 80087f2:	2001      	movs	r0, #1
 80087f4:	e7ef      	b.n	80087d6 <LL_USART_Init+0x5e>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80087f6:	200c      	movs	r0, #12
 80087f8:	f7ff fecc 	bl	8008594 <LL_RCC_GetUSARTClockFreq>
 80087fc:	e7f5      	b.n	80087ea <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80087fe:	2030      	movs	r0, #48	; 0x30
 8008800:	f7ff fec8 	bl	8008594 <LL_RCC_GetUSARTClockFreq>
 8008804:	e7f1      	b.n	80087ea <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8008806:	20c0      	movs	r0, #192	; 0xc0
 8008808:	f7ff ff52 	bl	80086b0 <LL_RCC_GetUARTClockFreq>
 800880c:	e7ed      	b.n	80087ea <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800880e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8008812:	f7ff ff4d 	bl	80086b0 <LL_RCC_GetUARTClockFreq>
 8008816:	e7e8      	b.n	80087ea <LL_USART_Init+0x72>
      LL_USART_SetBaudRate(USARTx,
 8008818:	682b      	ldr	r3, [r5, #0]
 800881a:	69e9      	ldr	r1, [r5, #28]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800881c:	2b0b      	cmp	r3, #11
 800881e:	d80f      	bhi.n	8008840 <LL_USART_Init+0xc8>
  else if (BaudRate == 0U)
 8008820:	b172      	cbz	r2, 8008840 <LL_USART_Init+0xc8>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8008822:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008826:	d00d      	beq.n	8008844 <LL_USART_Init+0xcc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8008828:	b2db      	uxtb	r3, r3
 800882a:	4918      	ldr	r1, [pc, #96]	; (800888c <LL_USART_Init+0x114>)
 800882c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008830:	fbb0 f3f3 	udiv	r3, r0, r3
 8008834:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008838:	fbb3 f3f2 	udiv	r3, r3, r2
 800883c:	b29b      	uxth	r3, r3
 800883e:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 8008840:	2000      	movs	r0, #0
}
 8008842:	e7c8      	b.n	80087d6 <LL_USART_Init+0x5e>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8008844:	b2db      	uxtb	r3, r3
 8008846:	4911      	ldr	r1, [pc, #68]	; (800888c <LL_USART_Init+0x114>)
 8008848:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800884c:	fbb0 f0f3 	udiv	r0, r0, r3
 8008850:	0853      	lsrs	r3, r2, #1
 8008852:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8008856:	fbb0 f3f2 	udiv	r3, r0, r2
    brrtemp = usartdiv & 0xFFF0U;
 800885a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800885e:	401a      	ands	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008860:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8008864:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 8008866:	60e3      	str	r3, [r4, #12]
 8008868:	e7ea      	b.n	8008840 <LL_USART_Init+0xc8>
  ErrorStatus status = ERROR;
 800886a:	2001      	movs	r0, #1
 800886c:	e7b3      	b.n	80087d6 <LL_USART_Init+0x5e>
 800886e:	2001      	movs	r0, #1
 8008870:	e7b7      	b.n	80087e2 <LL_USART_Init+0x6a>
 8008872:	bf00      	nop
 8008874:	efff69f3 	.word	0xefff69f3
 8008878:	40013800 	.word	0x40013800
 800887c:	40004400 	.word	0x40004400
 8008880:	40004800 	.word	0x40004800
 8008884:	40004c00 	.word	0x40004c00
 8008888:	40005000 	.word	0x40005000
 800888c:	0800f7b0 	.word	0x0800f7b0

08008890 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008890:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008892:	2000      	movs	r0, #0
 8008894:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008898:	f64b 7280 	movw	r2, #49024	; 0xbf80
 800889c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 80088a0:	4770      	bx	lr

080088a2 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80088a2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80088a6:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 80088aa:	045b      	lsls	r3, r3, #17
 80088ac:	0c5b      	lsrs	r3, r3, #17
 80088ae:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80088b2:	2000      	movs	r0, #0
 80088b4:	4770      	bx	lr

080088b6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80088b6:	b084      	sub	sp, #16
 80088b8:	4684      	mov	ip, r0
 80088ba:	a801      	add	r0, sp, #4
 80088bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80088c0:	2301      	movs	r3, #1
 80088c2:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80088c6:	2000      	movs	r0, #0
 80088c8:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80088cc:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80088d0:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 80088d4:	b004      	add	sp, #16
 80088d6:	4770      	bx	lr

080088d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088d8:	b510      	push	{r4, lr}
 80088da:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80088dc:	780a      	ldrb	r2, [r1, #0]
 80088de:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
 80088e2:	fa1f fc8c 	uxth.w	ip, ip
 80088e6:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 80088ea:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 80088ee:	fa1f fc8c 	uxth.w	ip, ip

  /* initialize Endpoint */
  switch (ep->type)
 80088f2:	78c8      	ldrb	r0, [r1, #3]
 80088f4:	2803      	cmp	r0, #3
 80088f6:	d862      	bhi.n	80089be <USB_ActivateEndpoint+0xe6>
 80088f8:	e8df f000 	tbb	[pc, r0]
 80088fc:	59025d56 	.word	0x59025d56
 8008900:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008902:	f248 0e80 	movw	lr, #32896	; 0x8080
 8008906:	ea4c 0c0e 	orr.w	ip, ip, lr
 800890a:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800890e:	f891 c000 	ldrb.w	ip, [r1]
 8008912:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8008916:	b212      	sxth	r2, r2
 8008918:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800891c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008920:	ea4c 0202 	orr.w	r2, ip, r2
 8008924:	b292      	uxth	r2, r2
 8008926:	ea42 020e 	orr.w	r2, r2, lr
 800892a:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 800892e:	7b0a      	ldrb	r2, [r1, #12]
 8008930:	2a00      	cmp	r2, #0
 8008932:	f040 80c2 	bne.w	8008aba <USB_ActivateEndpoint+0x1e2>
  {
    if (ep->is_in != 0U)
 8008936:	784a      	ldrb	r2, [r1, #1]
 8008938:	2a00      	cmp	r2, #0
 800893a:	d051      	beq.n	80089e0 <USB_ActivateEndpoint+0x108>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800893c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8008940:	fa13 f282 	uxtah	r2, r3, r2
 8008944:	780c      	ldrb	r4, [r1, #0]
 8008946:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800894a:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 800894e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008952:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008956:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800895a:	780c      	ldrb	r4, [r1, #0]
 800895c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008960:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008964:	d00c      	beq.n	8008980 <USB_ActivateEndpoint+0xa8>
 8008966:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800896a:	b292      	uxth	r2, r2
 800896c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008970:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008974:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008978:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800897c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8008980:	78ca      	ldrb	r2, [r1, #3]
 8008982:	2a01      	cmp	r2, #1
 8008984:	d01d      	beq.n	80089c2 <USB_ActivateEndpoint+0xea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008986:	7809      	ldrb	r1, [r1, #0]
 8008988:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800898c:	b292      	uxth	r2, r2
 800898e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008996:	f082 0220 	eor.w	r2, r2, #32
 800899a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800899e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80089a2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80089a6:	e066      	b.n	8008a76 <USB_ActivateEndpoint+0x19e>
      wEpRegVal |= USB_EP_CONTROL;
 80089a8:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
      break;
 80089ac:	e7a9      	b.n	8008902 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_INTERRUPT;
 80089ae:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80089b2:	2000      	movs	r0, #0
      break;
 80089b4:	e7a5      	b.n	8008902 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80089b6:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 80089ba:	2000      	movs	r0, #0
      break;
 80089bc:	e7a1      	b.n	8008902 <USB_ActivateEndpoint+0x2a>
      ret = HAL_ERROR;
 80089be:	2001      	movs	r0, #1
 80089c0:	e79f      	b.n	8008902 <USB_ActivateEndpoint+0x2a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089c2:	7809      	ldrb	r1, [r1, #0]
 80089c4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80089c8:	b292      	uxth	r2, r2
 80089ca:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80089ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80089da:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80089de:	e04a      	b.n	8008a76 <USB_ActivateEndpoint+0x19e>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80089e0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80089e4:	fa13 f282 	uxtah	r2, r3, r2
 80089e8:	780c      	ldrb	r4, [r1, #0]
 80089ea:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80089ee:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 80089f2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80089f6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80089fa:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80089fe:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8008a02:	fa13 f282 	uxtah	r2, r3, r2
 8008a06:	780c      	ldrb	r4, [r1, #0]
 8008a08:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008a0c:	690c      	ldr	r4, [r1, #16]
 8008a0e:	2c3e      	cmp	r4, #62	; 0x3e
 8008a10:	d932      	bls.n	8008a78 <USB_ActivateEndpoint+0x1a0>
 8008a12:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 8008a16:	f014 0f1f 	tst.w	r4, #31
 8008a1a:	d101      	bne.n	8008a20 <USB_ActivateEndpoint+0x148>
 8008a1c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008a20:	ea6f 6ccc 	mvn.w	ip, ip, lsl #27
 8008a24:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 8008a28:	fa1f fc8c 	uxth.w	ip, ip
 8008a2c:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a30:	780c      	ldrb	r4, [r1, #0]
 8008a32:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008a36:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8008a3a:	d00c      	beq.n	8008a56 <USB_ActivateEndpoint+0x17e>
 8008a3c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008a40:	b292      	uxth	r2, r2
 8008a42:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008a46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008a4a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008a4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a52:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a56:	7809      	ldrb	r1, [r1, #0]
 8008a58:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008a5c:	b292      	uxth	r2, r2
 8008a5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008a66:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8008a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a72:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8008a76:	bd10      	pop	{r4, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008a78:	b98c      	cbnz	r4, 8008a9e <USB_ActivateEndpoint+0x1c6>
 8008a7a:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8008a7e:	b2a4      	uxth	r4, r4
 8008a80:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8008a84:	b2a4      	uxth	r4, r4
 8008a86:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8008a8a:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8008a8e:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8008a92:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8008a96:	b2a4      	uxth	r4, r4
 8008a98:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8008a9c:	e7c8      	b.n	8008a30 <USB_ActivateEndpoint+0x158>
 8008a9e:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8008aa2:	f014 0f01 	tst.w	r4, #1
 8008aa6:	d001      	beq.n	8008aac <USB_ActivateEndpoint+0x1d4>
 8008aa8:	f10c 0c01 	add.w	ip, ip, #1
 8008aac:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8008ab0:	fa1f fc8c 	uxth.w	ip, ip
 8008ab4:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
 8008ab8:	e7ba      	b.n	8008a30 <USB_ActivateEndpoint+0x158>
    if (ep->type == EP_TYPE_BULK)
 8008aba:	78ca      	ldrb	r2, [r1, #3]
 8008abc:	2a02      	cmp	r2, #2
 8008abe:	d072      	beq.n	8008ba6 <USB_ActivateEndpoint+0x2ce>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008ac0:	780c      	ldrb	r4, [r1, #0]
 8008ac2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008ac6:	b292      	uxth	r2, r2
 8008ac8:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8008acc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008ad0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ad4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ad8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008adc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8008ae0:	fa13 f282 	uxtah	r2, r3, r2
 8008ae4:	f891 c000 	ldrb.w	ip, [r1]
 8008ae8:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8008aec:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8008af0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008af4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008af8:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
 8008afc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8008b00:	fa13 f282 	uxtah	r2, r3, r2
 8008b04:	f891 c000 	ldrb.w	ip, [r1]
 8008b08:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8008b0c:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8008b10:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008b14:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008b18:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404
    if (ep->is_in == 0U)
 8008b1c:	784a      	ldrb	r2, [r1, #1]
 8008b1e:	2a00      	cmp	r2, #0
 8008b20:	d150      	bne.n	8008bc4 <USB_ActivateEndpoint+0x2ec>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b22:	780c      	ldrb	r4, [r1, #0]
 8008b24:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008b28:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8008b2c:	d00c      	beq.n	8008b48 <USB_ActivateEndpoint+0x270>
 8008b2e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008b32:	b292      	uxth	r2, r2
 8008b34:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008b38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008b3c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008b40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008b44:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b48:	780c      	ldrb	r4, [r1, #0]
 8008b4a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008b4e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008b52:	d00c      	beq.n	8008b6e <USB_ActivateEndpoint+0x296>
 8008b54:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008b58:	b292      	uxth	r2, r2
 8008b5a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008b5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008b62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b66:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008b6a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b6e:	f891 c000 	ldrb.w	ip, [r1]
 8008b72:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8008b76:	b292      	uxth	r2, r2
 8008b78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008b7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008b80:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8008b84:	f248 0480 	movw	r4, #32896	; 0x8080
 8008b88:	4322      	orrs	r2, r4
 8008b8a:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b8e:	7809      	ldrb	r1, [r1, #0]
 8008b90:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008b94:	b292      	uxth	r2, r2
 8008b96:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b9e:	4322      	orrs	r2, r4
 8008ba0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8008ba4:	e767      	b.n	8008a76 <USB_ActivateEndpoint+0x19e>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008ba6:	780c      	ldrb	r4, [r1, #0]
 8008ba8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008bac:	b292      	uxth	r2, r2
 8008bae:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008bb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008bb6:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8008bba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008bbe:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8008bc2:	e78b      	b.n	8008adc <USB_ActivateEndpoint+0x204>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008bc4:	780c      	ldrb	r4, [r1, #0]
 8008bc6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008bca:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8008bce:	d00c      	beq.n	8008bea <USB_ActivateEndpoint+0x312>
 8008bd0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008bd4:	b292      	uxth	r2, r2
 8008bd6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008bda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008bde:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008be2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008be6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bea:	780c      	ldrb	r4, [r1, #0]
 8008bec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008bf0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008bf4:	d00c      	beq.n	8008c10 <USB_ActivateEndpoint+0x338>
 8008bf6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008bfa:	b292      	uxth	r2, r2
 8008bfc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008c00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008c04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c08:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008c0c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8008c10:	78ca      	ldrb	r2, [r1, #3]
 8008c12:	2a01      	cmp	r2, #1
 8008c14:	d01e      	beq.n	8008c54 <USB_ActivateEndpoint+0x37c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c16:	780c      	ldrb	r4, [r1, #0]
 8008c18:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008c1c:	b292      	uxth	r2, r2
 8008c1e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c26:	f082 0220 	eor.w	r2, r2, #32
 8008c2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c32:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c36:	7809      	ldrb	r1, [r1, #0]
 8008c38:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008c3c:	b292      	uxth	r2, r2
 8008c3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008c42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c4e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8008c52:	e710      	b.n	8008a76 <USB_ActivateEndpoint+0x19e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c54:	780c      	ldrb	r4, [r1, #0]
 8008c56:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008c5a:	b292      	uxth	r2, r2
 8008c5c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c6c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8008c70:	e7e1      	b.n	8008c36 <USB_ActivateEndpoint+0x35e>

08008c72 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8008c72:	7b0b      	ldrb	r3, [r1, #12]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d146      	bne.n	8008d06 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8008c78:	784b      	ldrb	r3, [r1, #1]
 8008c7a:	b313      	cbz	r3, 8008cc2 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c7c:	780a      	ldrb	r2, [r1, #0]
 8008c7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008c82:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008c86:	d00c      	beq.n	8008ca2 <USB_DeactivateEndpoint+0x30>
 8008c88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c9e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ca2:	780a      	ldrb	r2, [r1, #0]
 8008ca4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cc2:	780a      	ldrb	r2, [r1, #0]
 8008cc4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008cc8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008ccc:	d00c      	beq.n	8008ce8 <USB_DeactivateEndpoint+0x76>
 8008cce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ce8:	780a      	ldrb	r2, [r1, #0]
 8008cea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d00:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008d04:	e7db      	b.n	8008cbe <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8008d06:	784b      	ldrb	r3, [r1, #1]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d14e      	bne.n	8008daa <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d0c:	780a      	ldrb	r2, [r1, #0]
 8008d0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008d12:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008d16:	d00c      	beq.n	8008d32 <USB_DeactivateEndpoint+0xc0>
 8008d18:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d2e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d32:	780a      	ldrb	r2, [r1, #0]
 8008d34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008d38:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008d3c:	d00c      	beq.n	8008d58 <USB_DeactivateEndpoint+0xe6>
 8008d3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d54:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8008d58:	780a      	ldrb	r2, [r1, #0]
 8008d5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d70:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d74:	780b      	ldrb	r3, [r1, #0]
 8008d76:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008d7a:	b292      	uxth	r2, r2
 8008d7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008d80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008d84:	f248 0c80 	movw	ip, #32896	; 0x8080
 8008d88:	ea42 020c 	orr.w	r2, r2, ip
 8008d8c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d90:	780a      	ldrb	r2, [r1, #0]
 8008d92:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008da0:	ea43 030c 	orr.w	r3, r3, ip
 8008da4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008da8:	e789      	b.n	8008cbe <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008daa:	780a      	ldrb	r2, [r1, #0]
 8008dac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008db0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008db4:	d00c      	beq.n	8008dd0 <USB_DeactivateEndpoint+0x15e>
 8008db6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dcc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008dd0:	780a      	ldrb	r2, [r1, #0]
 8008dd2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008dd6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008dda:	d00c      	beq.n	8008df6 <USB_DeactivateEndpoint+0x184>
 8008ddc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008df2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8008df6:	780a      	ldrb	r2, [r1, #0]
 8008df8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e0e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e12:	780b      	ldrb	r3, [r1, #0]
 8008e14:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008e18:	b292      	uxth	r2, r2
 8008e1a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e22:	f248 0c80 	movw	ip, #32896	; 0x8080
 8008e26:	ea42 020c 	orr.w	r2, r2, ip
 8008e2a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e2e:	780a      	ldrb	r2, [r1, #0]
 8008e30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3e:	ea43 030c 	orr.w	r3, r3, ip
 8008e42:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008e46:	e73a      	b.n	8008cbe <USB_DeactivateEndpoint+0x4c>

08008e48 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8008e48:	784b      	ldrb	r3, [r1, #1]
 8008e4a:	b18b      	cbz	r3, 8008e70 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008e4c:	780a      	ldrb	r2, [r1, #0]
 8008e4e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e5c:	f083 0310 	eor.w	r3, r3, #16
 8008e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e68:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008e70:	780a      	ldrb	r2, [r1, #0]
 8008e72:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e8c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008e90:	e7ec      	b.n	8008e6c <USB_EPSetStall+0x24>

08008e92 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8008e92:	7b0b      	ldrb	r3, [r1, #12]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d14b      	bne.n	8008f30 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8008e98:	784b      	ldrb	r3, [r1, #1]
 8008e9a:	b333      	cbz	r3, 8008eea <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e9c:	780a      	ldrb	r2, [r1, #0]
 8008e9e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008ea2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008ea6:	d00c      	beq.n	8008ec2 <USB_EPClearStall+0x30>
 8008ea8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ebe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8008ec2:	78cb      	ldrb	r3, [r1, #3]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d033      	beq.n	8008f30 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008ec8:	780a      	ldrb	r2, [r1, #0]
 8008eca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ed8:	f083 0320 	eor.w	r3, r3, #32
 8008edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008ee8:	e022      	b.n	8008f30 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008eea:	780a      	ldrb	r2, [r1, #0]
 8008eec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008ef0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008ef4:	d00c      	beq.n	8008f10 <USB_EPClearStall+0x7e>
 8008ef6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f0c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f10:	780a      	ldrb	r2, [r1, #0]
 8008f12:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f20:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f2c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8008f30:	2000      	movs	r0, #0
 8008f32:	4770      	bx	lr

08008f34 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8008f34:	b911      	cbnz	r1, 8008f3c <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008f36:	2380      	movs	r3, #128	; 0x80
 8008f38:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	4770      	bx	lr

08008f40 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008f40:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8008f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8008f52:	2000      	movs	r0, #0
 8008f54:	4770      	bx	lr

08008f56 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008f56:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8008f5a:	b280      	uxth	r0, r0
 8008f5c:	4770      	bx	lr

08008f5e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f5e:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f60:	1c5c      	adds	r4, r3, #1
 8008f62:	0864      	lsrs	r4, r4, #1
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f64:	4402      	add	r2, r0
 8008f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8008f6a:	e007      	b.n	8008f7c <USB_WritePMA+0x1e>
  {
    temp1 = *pBuf;
 8008f6c:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008f6e:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8008f70:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008f74:	f822 3b02 	strh.w	r3, [r2], #2

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008f78:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8008f7a:	3c01      	subs	r4, #1
 8008f7c:	2c00      	cmp	r4, #0
 8008f7e:	d1f5      	bne.n	8008f6c <USB_WritePMA+0xe>
  }
}
 8008f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <USB_EPStartXfer>:
{
 8008f86:	b570      	push	{r4, r5, r6, lr}
 8008f88:	4605      	mov	r5, r0
 8008f8a:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8008f8c:	784a      	ldrb	r2, [r1, #1]
 8008f8e:	2a01      	cmp	r2, #1
 8008f90:	d032      	beq.n	8008ff8 <USB_EPStartXfer+0x72>
    if (ep->doublebuffer == 0U)
 8008f92:	7b0b      	ldrb	r3, [r1, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f040 8283 	bne.w	80094a0 <USB_EPStartXfer+0x51a>
      if (ep->xfer_len > ep->maxpacket)
 8008f9a:	698b      	ldr	r3, [r1, #24]
 8008f9c:	690a      	ldr	r2, [r1, #16]
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	f240 825d 	bls.w	800945e <USB_EPStartXfer+0x4d8>
        ep->xfer_len -= len;
 8008fa4:	1a9b      	subs	r3, r3, r2
 8008fa6:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008fa8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8008fac:	fa15 f383 	uxtah	r3, r5, r3
 8008fb0:	7821      	ldrb	r1, [r4, #0]
 8008fb2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008fb6:	2a3e      	cmp	r2, #62	; 0x3e
 8008fb8:	f240 8255 	bls.w	8009466 <USB_EPStartXfer+0x4e0>
 8008fbc:	0951      	lsrs	r1, r2, #5
 8008fbe:	f012 0f1f 	tst.w	r2, #31
 8008fc2:	d100      	bne.n	8008fc6 <USB_EPStartXfer+0x40>
 8008fc4:	3901      	subs	r1, #1
 8008fc6:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8008fca:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8008fce:	b289      	uxth	r1, r1
 8008fd0:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008fd4:	7822      	ldrb	r2, [r4, #0]
 8008fd6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fe4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff0:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8008ff4:	2000      	movs	r0, #0
}
 8008ff6:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 8008ff8:	698e      	ldr	r6, [r1, #24]
 8008ffa:	6909      	ldr	r1, [r1, #16]
 8008ffc:	428e      	cmp	r6, r1
 8008ffe:	d900      	bls.n	8009002 <USB_EPStartXfer+0x7c>
      len = ep->maxpacket;
 8009000:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 8009002:	7b23      	ldrb	r3, [r4, #12]
 8009004:	b32b      	cbz	r3, 8009052 <USB_EPStartXfer+0xcc>
      if (ep->type == EP_TYPE_BULK)
 8009006:	78e3      	ldrb	r3, [r4, #3]
 8009008:	2b02      	cmp	r3, #2
 800900a:	d044      	beq.n	8009096 <USB_EPStartXfer+0x110>
        ep->xfer_len_db -= len;
 800900c:	6a23      	ldr	r3, [r4, #32]
 800900e:	1b9b      	subs	r3, r3, r6
 8009010:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009012:	7823      	ldrb	r3, [r4, #0]
 8009014:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
 8009018:	f011 0f40 	tst.w	r1, #64	; 0x40
 800901c:	f000 81dc 	beq.w	80093d8 <USB_EPStartXfer+0x452>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009020:	2a00      	cmp	r2, #0
 8009022:	f040 81c9 	bne.w	80093b8 <USB_EPStartXfer+0x432>
 8009026:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800902a:	fa15 f282 	uxtah	r2, r5, r2
 800902e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009032:	2e3e      	cmp	r6, #62	; 0x3e
 8009034:	f240 81a3 	bls.w	800937e <USB_EPStartXfer+0x3f8>
 8009038:	0972      	lsrs	r2, r6, #5
 800903a:	f016 0f1f 	tst.w	r6, #31
 800903e:	d100      	bne.n	8009042 <USB_EPStartXfer+0xbc>
 8009040:	3a01      	subs	r2, #1
 8009042:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8009046:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800904a:	b292      	uxth	r2, r2
 800904c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009050:	e1bb      	b.n	80093ca <USB_EPStartXfer+0x444>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009052:	b2b6      	uxth	r6, r6
 8009054:	4633      	mov	r3, r6
 8009056:	88e2      	ldrh	r2, [r4, #6]
 8009058:	6961      	ldr	r1, [r4, #20]
 800905a:	4628      	mov	r0, r5
 800905c:	f7ff ff7f 	bl	8008f5e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009060:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8009064:	fa15 f383 	uxtah	r3, r5, r3
 8009068:	7822      	ldrb	r2, [r4, #0]
 800906a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800906e:	f8a3 6402 	strh.w	r6, [r3, #1026]	; 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009072:	7822      	ldrb	r2, [r4, #0]
 8009074:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8009078:	b29b      	uxth	r3, r3
 800907a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800907e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009082:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8009086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800908a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800908e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8009092:	2000      	movs	r0, #0
 8009094:	e7af      	b.n	8008ff6 <USB_EPStartXfer+0x70>
        if (ep->xfer_len_db > ep->maxpacket)
 8009096:	6a23      	ldr	r3, [r4, #32]
 8009098:	4299      	cmp	r1, r3
 800909a:	f080 8152 	bcs.w	8009342 <USB_EPStartXfer+0x3bc>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800909e:	7822      	ldrb	r2, [r4, #0]
 80090a0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80090b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090b6:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 80090ba:	6a23      	ldr	r3, [r4, #32]
 80090bc:	1b9b      	subs	r3, r3, r6
 80090be:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80090c0:	7823      	ldrb	r3, [r4, #0]
 80090c2:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 80090c6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80090ca:	f000 809d 	beq.w	8009208 <USB_EPStartXfer+0x282>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090ce:	7862      	ldrb	r2, [r4, #1]
 80090d0:	bb8a      	cbnz	r2, 8009136 <USB_EPStartXfer+0x1b0>
 80090d2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80090d6:	fa15 f282 	uxtah	r2, r5, r2
 80090da:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80090de:	2e3e      	cmp	r6, #62	; 0x3e
 80090e0:	d90c      	bls.n	80090fc <USB_EPStartXfer+0x176>
 80090e2:	0972      	lsrs	r2, r6, #5
 80090e4:	f016 0f1f 	tst.w	r6, #31
 80090e8:	d100      	bne.n	80090ec <USB_EPStartXfer+0x166>
 80090ea:	3a01      	subs	r2, #1
 80090ec:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80090f0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80090f4:	b292      	uxth	r2, r2
 80090f6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80090fa:	e01e      	b.n	800913a <USB_EPStartXfer+0x1b4>
 80090fc:	b98e      	cbnz	r6, 8009122 <USB_EPStartXfer+0x19c>
 80090fe:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009102:	b292      	uxth	r2, r2
 8009104:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009108:	b292      	uxth	r2, r2
 800910a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800910e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009112:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009116:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800911a:	b292      	uxth	r2, r2
 800911c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009120:	e00b      	b.n	800913a <USB_EPStartXfer+0x1b4>
 8009122:	0872      	lsrs	r2, r6, #1
 8009124:	f016 0f01 	tst.w	r6, #1
 8009128:	d000      	beq.n	800912c <USB_EPStartXfer+0x1a6>
 800912a:	3201      	adds	r2, #1
 800912c:	0292      	lsls	r2, r2, #10
 800912e:	b292      	uxth	r2, r2
 8009130:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009134:	e001      	b.n	800913a <USB_EPStartXfer+0x1b4>
 8009136:	2a01      	cmp	r2, #1
 8009138:	d027      	beq.n	800918a <USB_EPStartXfer+0x204>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800913a:	b2b3      	uxth	r3, r6
 800913c:	8962      	ldrh	r2, [r4, #10]
 800913e:	6961      	ldr	r1, [r4, #20]
 8009140:	4628      	mov	r0, r5
 8009142:	f7ff ff0c 	bl	8008f5e <USB_WritePMA>
            ep->xfer_buff += len;
 8009146:	6963      	ldr	r3, [r4, #20]
 8009148:	4433      	add	r3, r6
 800914a:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800914c:	6a23      	ldr	r3, [r4, #32]
 800914e:	6922      	ldr	r2, [r4, #16]
 8009150:	4293      	cmp	r3, r2
 8009152:	d924      	bls.n	800919e <USB_EPStartXfer+0x218>
              ep->xfer_len_db -= len;
 8009154:	1b9b      	subs	r3, r3, r6
 8009156:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009158:	7863      	ldrb	r3, [r4, #1]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d140      	bne.n	80091e0 <USB_EPStartXfer+0x25a>
 800915e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8009162:	fa15 f383 	uxtah	r3, r5, r3
 8009166:	7822      	ldrb	r2, [r4, #0]
 8009168:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800916c:	2e3e      	cmp	r6, #62	; 0x3e
 800916e:	d91a      	bls.n	80091a6 <USB_EPStartXfer+0x220>
 8009170:	0972      	lsrs	r2, r6, #5
 8009172:	f016 0f1f 	tst.w	r6, #31
 8009176:	d100      	bne.n	800917a <USB_EPStartXfer+0x1f4>
 8009178:	3a01      	subs	r2, #1
 800917a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800917e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009182:	b292      	uxth	r2, r2
 8009184:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009188:	e02c      	b.n	80091e4 <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800918a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800918e:	fa15 f282 	uxtah	r2, r5, r2
 8009192:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009196:	b2b2      	uxth	r2, r6
 8009198:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800919c:	e7cd      	b.n	800913a <USB_EPStartXfer+0x1b4>
              ep->xfer_len_db = 0U;
 800919e:	2200      	movs	r2, #0
 80091a0:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 80091a2:	461e      	mov	r6, r3
 80091a4:	e7d8      	b.n	8009158 <USB_EPStartXfer+0x1d2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80091a6:	b98e      	cbnz	r6, 80091cc <USB_EPStartXfer+0x246>
 80091a8:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80091ac:	b292      	uxth	r2, r2
 80091ae:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80091b2:	b292      	uxth	r2, r2
 80091b4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80091b8:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80091bc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80091c0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80091c4:	b292      	uxth	r2, r2
 80091c6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80091ca:	e00b      	b.n	80091e4 <USB_EPStartXfer+0x25e>
 80091cc:	0872      	lsrs	r2, r6, #1
 80091ce:	f016 0f01 	tst.w	r6, #1
 80091d2:	d000      	beq.n	80091d6 <USB_EPStartXfer+0x250>
 80091d4:	3201      	adds	r2, #1
 80091d6:	0292      	lsls	r2, r2, #10
 80091d8:	b292      	uxth	r2, r2
 80091da:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80091de:	e001      	b.n	80091e4 <USB_EPStartXfer+0x25e>
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d006      	beq.n	80091f2 <USB_EPStartXfer+0x26c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091e4:	b2b3      	uxth	r3, r6
 80091e6:	8922      	ldrh	r2, [r4, #8]
 80091e8:	6961      	ldr	r1, [r4, #20]
 80091ea:	4628      	mov	r0, r5
 80091ec:	f7ff feb7 	bl	8008f5e <USB_WritePMA>
 80091f0:	e73f      	b.n	8009072 <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80091f2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80091f6:	fa15 f383 	uxtah	r3, r5, r3
 80091fa:	7822      	ldrb	r2, [r4, #0]
 80091fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009200:	b2b2      	uxth	r2, r6
 8009202:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009206:	e7ed      	b.n	80091e4 <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009208:	7862      	ldrb	r2, [r4, #1]
 800920a:	bb8a      	cbnz	r2, 8009270 <USB_EPStartXfer+0x2ea>
 800920c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8009210:	fa15 f282 	uxtah	r2, r5, r2
 8009214:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009218:	2e3e      	cmp	r6, #62	; 0x3e
 800921a:	d90c      	bls.n	8009236 <USB_EPStartXfer+0x2b0>
 800921c:	0972      	lsrs	r2, r6, #5
 800921e:	f016 0f1f 	tst.w	r6, #31
 8009222:	d100      	bne.n	8009226 <USB_EPStartXfer+0x2a0>
 8009224:	3a01      	subs	r2, #1
 8009226:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800922a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800922e:	b292      	uxth	r2, r2
 8009230:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009234:	e01e      	b.n	8009274 <USB_EPStartXfer+0x2ee>
 8009236:	b98e      	cbnz	r6, 800925c <USB_EPStartXfer+0x2d6>
 8009238:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800923c:	b292      	uxth	r2, r2
 800923e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009242:	b292      	uxth	r2, r2
 8009244:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009248:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800924c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009250:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009254:	b292      	uxth	r2, r2
 8009256:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800925a:	e00b      	b.n	8009274 <USB_EPStartXfer+0x2ee>
 800925c:	0872      	lsrs	r2, r6, #1
 800925e:	f016 0f01 	tst.w	r6, #1
 8009262:	d000      	beq.n	8009266 <USB_EPStartXfer+0x2e0>
 8009264:	3201      	adds	r2, #1
 8009266:	0292      	lsls	r2, r2, #10
 8009268:	b292      	uxth	r2, r2
 800926a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800926e:	e001      	b.n	8009274 <USB_EPStartXfer+0x2ee>
 8009270:	2a01      	cmp	r2, #1
 8009272:	d027      	beq.n	80092c4 <USB_EPStartXfer+0x33e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009274:	b2b3      	uxth	r3, r6
 8009276:	8922      	ldrh	r2, [r4, #8]
 8009278:	6961      	ldr	r1, [r4, #20]
 800927a:	4628      	mov	r0, r5
 800927c:	f7ff fe6f 	bl	8008f5e <USB_WritePMA>
            ep->xfer_buff += len;
 8009280:	6963      	ldr	r3, [r4, #20]
 8009282:	4433      	add	r3, r6
 8009284:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8009286:	6a23      	ldr	r3, [r4, #32]
 8009288:	6922      	ldr	r2, [r4, #16]
 800928a:	4293      	cmp	r3, r2
 800928c:	d924      	bls.n	80092d8 <USB_EPStartXfer+0x352>
              ep->xfer_len_db -= len;
 800928e:	1b9b      	subs	r3, r3, r6
 8009290:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009292:	7863      	ldrb	r3, [r4, #1]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d140      	bne.n	800931a <USB_EPStartXfer+0x394>
 8009298:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800929c:	fa15 f383 	uxtah	r3, r5, r3
 80092a0:	7822      	ldrb	r2, [r4, #0]
 80092a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092a6:	2e3e      	cmp	r6, #62	; 0x3e
 80092a8:	d91a      	bls.n	80092e0 <USB_EPStartXfer+0x35a>
 80092aa:	0972      	lsrs	r2, r6, #5
 80092ac:	f016 0f1f 	tst.w	r6, #31
 80092b0:	d100      	bne.n	80092b4 <USB_EPStartXfer+0x32e>
 80092b2:	3a01      	subs	r2, #1
 80092b4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80092b8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80092bc:	b292      	uxth	r2, r2
 80092be:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80092c2:	e02c      	b.n	800931e <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80092c4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80092c8:	fa15 f282 	uxtah	r2, r5, r2
 80092cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80092d0:	b2b2      	uxth	r2, r6
 80092d2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80092d6:	e7cd      	b.n	8009274 <USB_EPStartXfer+0x2ee>
              ep->xfer_len_db = 0U;
 80092d8:	2200      	movs	r2, #0
 80092da:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 80092dc:	461e      	mov	r6, r3
 80092de:	e7d8      	b.n	8009292 <USB_EPStartXfer+0x30c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80092e0:	b98e      	cbnz	r6, 8009306 <USB_EPStartXfer+0x380>
 80092e2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80092e6:	b292      	uxth	r2, r2
 80092e8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80092ec:	b292      	uxth	r2, r2
 80092ee:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80092f2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80092f6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80092fa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80092fe:	b292      	uxth	r2, r2
 8009300:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009304:	e00b      	b.n	800931e <USB_EPStartXfer+0x398>
 8009306:	0872      	lsrs	r2, r6, #1
 8009308:	f016 0f01 	tst.w	r6, #1
 800930c:	d000      	beq.n	8009310 <USB_EPStartXfer+0x38a>
 800930e:	3201      	adds	r2, #1
 8009310:	0292      	lsls	r2, r2, #10
 8009312:	b292      	uxth	r2, r2
 8009314:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009318:	e001      	b.n	800931e <USB_EPStartXfer+0x398>
 800931a:	2b01      	cmp	r3, #1
 800931c:	d006      	beq.n	800932c <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800931e:	b2b3      	uxth	r3, r6
 8009320:	8962      	ldrh	r2, [r4, #10]
 8009322:	6961      	ldr	r1, [r4, #20]
 8009324:	4628      	mov	r0, r5
 8009326:	f7ff fe1a 	bl	8008f5e <USB_WritePMA>
 800932a:	e6a2      	b.n	8009072 <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800932c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8009330:	fa15 f383 	uxtah	r3, r5, r3
 8009334:	7822      	ldrb	r2, [r4, #0]
 8009336:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800933a:	b2b2      	uxth	r2, r6
 800933c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009340:	e7ed      	b.n	800931e <USB_EPStartXfer+0x398>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009342:	7821      	ldrb	r1, [r4, #0]
 8009344:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 8009348:	b292      	uxth	r2, r2
 800934a:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800934e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009356:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800935a:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800935e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8009362:	fa15 f282 	uxtah	r2, r5, r2
 8009366:	7821      	ldrb	r1, [r4, #0]
 8009368:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800936c:	b29b      	uxth	r3, r3
 800936e:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009372:	8922      	ldrh	r2, [r4, #8]
 8009374:	6961      	ldr	r1, [r4, #20]
 8009376:	4628      	mov	r0, r5
 8009378:	f7ff fdf1 	bl	8008f5e <USB_WritePMA>
 800937c:	e679      	b.n	8009072 <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800937e:	b98e      	cbnz	r6, 80093a4 <USB_EPStartXfer+0x41e>
 8009380:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009384:	b292      	uxth	r2, r2
 8009386:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800938a:	b292      	uxth	r2, r2
 800938c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009390:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009394:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009398:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800939c:	b292      	uxth	r2, r2
 800939e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80093a2:	e012      	b.n	80093ca <USB_EPStartXfer+0x444>
 80093a4:	0872      	lsrs	r2, r6, #1
 80093a6:	f016 0f01 	tst.w	r6, #1
 80093aa:	d000      	beq.n	80093ae <USB_EPStartXfer+0x428>
 80093ac:	3201      	adds	r2, #1
 80093ae:	0292      	lsls	r2, r2, #10
 80093b0:	b292      	uxth	r2, r2
 80093b2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80093b6:	e008      	b.n	80093ca <USB_EPStartXfer+0x444>
 80093b8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80093bc:	fa15 f282 	uxtah	r2, r5, r2
 80093c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80093c4:	b2b2      	uxth	r2, r6
 80093c6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093ca:	b2b3      	uxth	r3, r6
 80093cc:	8962      	ldrh	r2, [r4, #10]
 80093ce:	6961      	ldr	r1, [r4, #20]
 80093d0:	4628      	mov	r0, r5
 80093d2:	f7ff fdc4 	bl	8008f5e <USB_WritePMA>
 80093d6:	e64c      	b.n	8009072 <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80093d8:	bb8a      	cbnz	r2, 800943e <USB_EPStartXfer+0x4b8>
 80093da:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80093de:	fa15 f282 	uxtah	r2, r5, r2
 80093e2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80093e6:	2e3e      	cmp	r6, #62	; 0x3e
 80093e8:	d90c      	bls.n	8009404 <USB_EPStartXfer+0x47e>
 80093ea:	0972      	lsrs	r2, r6, #5
 80093ec:	f016 0f1f 	tst.w	r6, #31
 80093f0:	d100      	bne.n	80093f4 <USB_EPStartXfer+0x46e>
 80093f2:	3a01      	subs	r2, #1
 80093f4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80093f8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80093fc:	b292      	uxth	r2, r2
 80093fe:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009402:	e025      	b.n	8009450 <USB_EPStartXfer+0x4ca>
 8009404:	b98e      	cbnz	r6, 800942a <USB_EPStartXfer+0x4a4>
 8009406:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800940a:	b292      	uxth	r2, r2
 800940c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009410:	b292      	uxth	r2, r2
 8009412:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009416:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800941a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800941e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009422:	b292      	uxth	r2, r2
 8009424:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009428:	e012      	b.n	8009450 <USB_EPStartXfer+0x4ca>
 800942a:	0872      	lsrs	r2, r6, #1
 800942c:	f016 0f01 	tst.w	r6, #1
 8009430:	d000      	beq.n	8009434 <USB_EPStartXfer+0x4ae>
 8009432:	3201      	adds	r2, #1
 8009434:	0292      	lsls	r2, r2, #10
 8009436:	b292      	uxth	r2, r2
 8009438:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800943c:	e008      	b.n	8009450 <USB_EPStartXfer+0x4ca>
 800943e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8009442:	fa15 f282 	uxtah	r2, r5, r2
 8009446:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800944a:	b2b2      	uxth	r2, r6
 800944c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009450:	b2b3      	uxth	r3, r6
 8009452:	8922      	ldrh	r2, [r4, #8]
 8009454:	6961      	ldr	r1, [r4, #20]
 8009456:	4628      	mov	r0, r5
 8009458:	f7ff fd81 	bl	8008f5e <USB_WritePMA>
 800945c:	e609      	b.n	8009072 <USB_EPStartXfer+0xec>
        ep->xfer_len = 0U;
 800945e:	2200      	movs	r2, #0
 8009460:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 8009462:	461a      	mov	r2, r3
 8009464:	e5a0      	b.n	8008fa8 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009466:	b98a      	cbnz	r2, 800948c <USB_EPStartXfer+0x506>
 8009468:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800946c:	b292      	uxth	r2, r2
 800946e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009472:	b292      	uxth	r2, r2
 8009474:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009478:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800947c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009480:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009484:	b292      	uxth	r2, r2
 8009486:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800948a:	e5a3      	b.n	8008fd4 <USB_EPStartXfer+0x4e>
 800948c:	0851      	lsrs	r1, r2, #1
 800948e:	f012 0f01 	tst.w	r2, #1
 8009492:	d000      	beq.n	8009496 <USB_EPStartXfer+0x510>
 8009494:	3101      	adds	r1, #1
 8009496:	0289      	lsls	r1, r1, #10
 8009498:	b289      	uxth	r1, r1
 800949a:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 800949e:	e599      	b.n	8008fd4 <USB_EPStartXfer+0x4e>
      if (ep->type == EP_TYPE_BULK)
 80094a0:	78cb      	ldrb	r3, [r1, #3]
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d03b      	beq.n	800951e <USB_EPStartXfer+0x598>
      else if (ep->type == EP_TYPE_ISOC)
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	f040 811b 	bne.w	80096e2 <USB_EPStartXfer+0x75c>
        if (ep->xfer_len > ep->maxpacket)
 80094ac:	6989      	ldr	r1, [r1, #24]
 80094ae:	6923      	ldr	r3, [r4, #16]
 80094b0:	4299      	cmp	r1, r3
 80094b2:	f240 80ca 	bls.w	800964a <USB_EPStartXfer+0x6c4>
          ep->xfer_len -= len;
 80094b6:	1ac9      	subs	r1, r1, r3
 80094b8:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80094ba:	b9aa      	cbnz	r2, 80094e8 <USB_EPStartXfer+0x562>
 80094bc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80094c0:	fa15 f282 	uxtah	r2, r5, r2
 80094c4:	7821      	ldrb	r1, [r4, #0]
 80094c6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80094ca:	2b3e      	cmp	r3, #62	; 0x3e
 80094cc:	f240 80c1 	bls.w	8009652 <USB_EPStartXfer+0x6cc>
 80094d0:	0959      	lsrs	r1, r3, #5
 80094d2:	f013 0f1f 	tst.w	r3, #31
 80094d6:	d100      	bne.n	80094da <USB_EPStartXfer+0x554>
 80094d8:	3901      	subs	r1, #1
 80094da:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80094de:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80094e2:	b289      	uxth	r1, r1
 80094e4:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80094e8:	7862      	ldrb	r2, [r4, #1]
 80094ea:	2a00      	cmp	r2, #0
 80094ec:	f040 80eb 	bne.w	80096c6 <USB_EPStartXfer+0x740>
 80094f0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80094f4:	fa15 f282 	uxtah	r2, r5, r2
 80094f8:	7821      	ldrb	r1, [r4, #0]
 80094fa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80094fe:	2b3e      	cmp	r3, #62	; 0x3e
 8009500:	f240 80c4 	bls.w	800968c <USB_EPStartXfer+0x706>
 8009504:	0959      	lsrs	r1, r3, #5
 8009506:	f013 0f1f 	tst.w	r3, #31
 800950a:	d100      	bne.n	800950e <USB_EPStartXfer+0x588>
 800950c:	3901      	subs	r1, #1
 800950e:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 8009512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009516:	b29b      	uxth	r3, r3
 8009518:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800951c:	e55a      	b.n	8008fd4 <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800951e:	b9aa      	cbnz	r2, 800954c <USB_EPStartXfer+0x5c6>
 8009520:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009524:	fa10 f383 	uxtah	r3, r0, r3
 8009528:	780a      	ldrb	r2, [r1, #0]
 800952a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800952e:	6909      	ldr	r1, [r1, #16]
 8009530:	293e      	cmp	r1, #62	; 0x3e
 8009532:	d925      	bls.n	8009580 <USB_EPStartXfer+0x5fa>
 8009534:	094a      	lsrs	r2, r1, #5
 8009536:	f011 0f1f 	tst.w	r1, #31
 800953a:	d100      	bne.n	800953e <USB_EPStartXfer+0x5b8>
 800953c:	3a01      	subs	r2, #1
 800953e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8009542:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009546:	b292      	uxth	r2, r2
 8009548:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800954c:	7863      	ldrb	r3, [r4, #1]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d150      	bne.n	80095f4 <USB_EPStartXfer+0x66e>
 8009552:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8009556:	fa15 f383 	uxtah	r3, r5, r3
 800955a:	7822      	ldrb	r2, [r4, #0]
 800955c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009560:	6921      	ldr	r1, [r4, #16]
 8009562:	293e      	cmp	r1, #62	; 0x3e
 8009564:	d929      	bls.n	80095ba <USB_EPStartXfer+0x634>
 8009566:	094a      	lsrs	r2, r1, #5
 8009568:	f011 0f1f 	tst.w	r1, #31
 800956c:	d100      	bne.n	8009570 <USB_EPStartXfer+0x5ea>
 800956e:	3a01      	subs	r2, #1
 8009570:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8009574:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009578:	b292      	uxth	r2, r2
 800957a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800957e:	e03b      	b.n	80095f8 <USB_EPStartXfer+0x672>
 8009580:	b989      	cbnz	r1, 80095a6 <USB_EPStartXfer+0x620>
 8009582:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8009586:	b292      	uxth	r2, r2
 8009588:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800958c:	b292      	uxth	r2, r2
 800958e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009592:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8009596:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800959a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800959e:	b292      	uxth	r2, r2
 80095a0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80095a4:	e7d2      	b.n	800954c <USB_EPStartXfer+0x5c6>
 80095a6:	084a      	lsrs	r2, r1, #1
 80095a8:	f011 0f01 	tst.w	r1, #1
 80095ac:	d000      	beq.n	80095b0 <USB_EPStartXfer+0x62a>
 80095ae:	3201      	adds	r2, #1
 80095b0:	0292      	lsls	r2, r2, #10
 80095b2:	b292      	uxth	r2, r2
 80095b4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80095b8:	e7c8      	b.n	800954c <USB_EPStartXfer+0x5c6>
 80095ba:	b989      	cbnz	r1, 80095e0 <USB_EPStartXfer+0x65a>
 80095bc:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80095c0:	b292      	uxth	r2, r2
 80095c2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80095c6:	b292      	uxth	r2, r2
 80095c8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80095cc:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80095d0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80095d4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80095d8:	b292      	uxth	r2, r2
 80095da:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80095de:	e00b      	b.n	80095f8 <USB_EPStartXfer+0x672>
 80095e0:	084a      	lsrs	r2, r1, #1
 80095e2:	f011 0f01 	tst.w	r1, #1
 80095e6:	d000      	beq.n	80095ea <USB_EPStartXfer+0x664>
 80095e8:	3201      	adds	r2, #1
 80095ea:	0292      	lsls	r2, r2, #10
 80095ec:	b292      	uxth	r2, r2
 80095ee:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80095f2:	e001      	b.n	80095f8 <USB_EPStartXfer+0x672>
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d01d      	beq.n	8009634 <USB_EPStartXfer+0x6ae>
        if (ep->xfer_count != 0U)
 80095f8:	69e3      	ldr	r3, [r4, #28]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f43f acea 	beq.w	8008fd4 <USB_EPStartXfer+0x4e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009600:	7822      	ldrb	r2, [r4, #0]
 8009602:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009606:	f244 0340 	movw	r3, #16448	; 0x4040
 800960a:	ea03 0001 	and.w	r0, r3, r1
 800960e:	438b      	bics	r3, r1
 8009610:	d002      	beq.n	8009618 <USB_EPStartXfer+0x692>
 8009612:	2800      	cmp	r0, #0
 8009614:	f47f acde 	bne.w	8008fd4 <USB_EPStartXfer+0x4e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009618:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800961c:	b29b      	uxth	r3, r3
 800961e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800962a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800962e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8009632:	e4cf      	b.n	8008fd4 <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009634:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8009638:	fa15 f383 	uxtah	r3, r5, r3
 800963c:	7822      	ldrb	r2, [r4, #0]
 800963e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009642:	8a22      	ldrh	r2, [r4, #16]
 8009644:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009648:	e7d6      	b.n	80095f8 <USB_EPStartXfer+0x672>
          ep->xfer_len = 0U;
 800964a:	2300      	movs	r3, #0
 800964c:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 800964e:	460b      	mov	r3, r1
 8009650:	e733      	b.n	80094ba <USB_EPStartXfer+0x534>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009652:	b98b      	cbnz	r3, 8009678 <USB_EPStartXfer+0x6f2>
 8009654:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8009658:	b289      	uxth	r1, r1
 800965a:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800965e:	b289      	uxth	r1, r1
 8009660:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8009664:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8009668:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800966c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8009670:	b289      	uxth	r1, r1
 8009672:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8009676:	e737      	b.n	80094e8 <USB_EPStartXfer+0x562>
 8009678:	0859      	lsrs	r1, r3, #1
 800967a:	f013 0f01 	tst.w	r3, #1
 800967e:	d000      	beq.n	8009682 <USB_EPStartXfer+0x6fc>
 8009680:	3101      	adds	r1, #1
 8009682:	0289      	lsls	r1, r1, #10
 8009684:	b289      	uxth	r1, r1
 8009686:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800968a:	e72d      	b.n	80094e8 <USB_EPStartXfer+0x562>
 800968c:	b98b      	cbnz	r3, 80096b2 <USB_EPStartXfer+0x72c>
 800968e:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 8009692:	b29b      	uxth	r3, r3
 8009694:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009698:	b29b      	uxth	r3, r3
 800969a:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800969e:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 80096a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 80096b0:	e490      	b.n	8008fd4 <USB_EPStartXfer+0x4e>
 80096b2:	0859      	lsrs	r1, r3, #1
 80096b4:	f013 0f01 	tst.w	r3, #1
 80096b8:	d000      	beq.n	80096bc <USB_EPStartXfer+0x736>
 80096ba:	3101      	adds	r1, #1
 80096bc:	028b      	lsls	r3, r1, #10
 80096be:	b29b      	uxth	r3, r3
 80096c0:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 80096c4:	e486      	b.n	8008fd4 <USB_EPStartXfer+0x4e>
 80096c6:	2a01      	cmp	r2, #1
 80096c8:	f47f ac84 	bne.w	8008fd4 <USB_EPStartXfer+0x4e>
 80096cc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80096d0:	fa15 f282 	uxtah	r2, r5, r2
 80096d4:	7821      	ldrb	r1, [r4, #0]
 80096d6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80096da:	b29b      	uxth	r3, r3
 80096dc:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 80096e0:	e478      	b.n	8008fd4 <USB_EPStartXfer+0x4e>
        return HAL_ERROR;
 80096e2:	2001      	movs	r0, #1
 80096e4:	e487      	b.n	8008ff6 <USB_EPStartXfer+0x70>

080096e6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80096e6:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 80096e8:	085c      	lsrs	r4, r3, #1
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80096ea:	4410      	add	r0, r2
 80096ec:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 80096f0:	e007      	b.n	8009702 <USB_ReadPMA+0x1c>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80096f2:	f830 2b02 	ldrh.w	r2, [r0], #2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80096f6:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80096f8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80096fc:	704a      	strb	r2, [r1, #1]
    pBuf++;
 80096fe:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8009700:	3c01      	subs	r4, #1
 8009702:	2c00      	cmp	r4, #0
 8009704:	d1f5      	bne.n	80096f2 <USB_ReadPMA+0xc>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009706:	f013 0f01 	tst.w	r3, #1
 800970a:	d001      	beq.n	8009710 <USB_ReadPMA+0x2a>
  {
    temp = *pdwVal;
 800970c:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800970e:	700b      	strb	r3, [r1, #0]
  }
}
 8009710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009714:	4770      	bx	lr
	...

08009718 <LCD_IO_Init>:
/*!
 * @brief Nizkonivojska inicializacija zaslona
 * @internal
 */
static void LCD_IO_Init()
{
 8009718:	b538      	push	{r3, r4, r5, lr}
	LCD_RST_LOW();
 800971a:	4c05      	ldr	r4, [pc, #20]	; (8009730 <LCD_IO_Init+0x18>)
 800971c:	2508      	movs	r5, #8
 800971e:	62a5      	str	r5, [r4, #40]	; 0x28
	HAL_Delay(120);
 8009720:	2078      	movs	r0, #120	; 0x78
 8009722:	f7f9 fd13 	bl	800314c <HAL_Delay>
	LCD_RST_HIGH();
 8009726:	61a5      	str	r5, [r4, #24]
	HAL_Delay(120);
 8009728:	2078      	movs	r0, #120	; 0x78
 800972a:	f7f9 fd0f 	bl	800314c <HAL_Delay>
}
 800972e:	bd38      	pop	{r3, r4, r5, pc}
 8009730:	48000c00 	.word	0x48000c00

08009734 <LCD_SetBacklight>:
 * @param state logična vrednost
 */

void LCD_SetBacklight(uint8_t state)
{
	if (state == 1)
 8009734:	2801      	cmp	r0, #1
 8009736:	d003      	beq.n	8009740 <LCD_SetBacklight+0xc>
		LCD_BCKL_ON();
	else
		LCD_BCKL_OFF();
 8009738:	4b03      	ldr	r3, [pc, #12]	; (8009748 <LCD_SetBacklight+0x14>)
 800973a:	2240      	movs	r2, #64	; 0x40
 800973c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800973e:	4770      	bx	lr
		LCD_BCKL_ON();
 8009740:	4b01      	ldr	r3, [pc, #4]	; (8009748 <LCD_SetBacklight+0x14>)
 8009742:	2240      	movs	r2, #64	; 0x40
 8009744:	619a      	str	r2, [r3, #24]
 8009746:	4770      	bx	lr
 8009748:	48000400 	.word	0x48000400

0800974c <LCD_FillRect>:
 *
 * Funkcija izbere želeno območje, potem pa tolikokrat pošlje izbrano barvo,
 * kolikor slikovnih točk je potrebnih.
 */
void LCD_FillRect(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint16_t c)
{
 800974c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009750:	4607      	mov	r7, r0
 8009752:	4688      	mov	r8, r1
 8009754:	4615      	mov	r5, r2
 8009756:	461e      	mov	r6, r3
	uint32_t max_count   = ILI9341_GetParam(LCD_AREA);     /* Št. vseh pikslov     */
 8009758:	2002      	movs	r0, #2
 800975a:	f000 f967 	bl	8009a2c <ILI9341_GetParam>
 800975e:	4604      	mov	r4, r0
	uint32_t pixel_count = w*h;  /* Dejansko št. pikslov */
 8009760:	fb06 f305 	mul.w	r3, r6, r5

	if(pixel_count > max_count)
 8009764:	4298      	cmp	r0, r3
 8009766:	d300      	bcc.n	800976a <LCD_FillRect+0x1e>
	uint32_t pixel_count = w*h;  /* Dejansko št. pikslov */
 8009768:	461c      	mov	r4, r3
		pixel_count = max_count;

	// Izbor koordinat piksla
	ILI9341_SetDisplayWindow(x, y, w, h);
 800976a:	4633      	mov	r3, r6
 800976c:	462a      	mov	r2, r5
 800976e:	4641      	mov	r1, r8
 8009770:	4638      	mov	r0, r7
 8009772:	f000 f87d 	bl	8009870 <ILI9341_SetDisplayWindow>

#ifdef ILI9341_USEDMA
	ILI9341_SendRepeatedDataDMA(c, pixel_count);
 8009776:	4621      	mov	r1, r4
 8009778:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800977c:	f000 f910 	bl	80099a0 <ILI9341_SendRepeatedDataDMA>
#else
	ILI9341_SendRepeatedData(c, pixel_count);
#endif

}
 8009780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009784 <LCD_ClearScreen>:

/*!
 * @brief Počisti zaslon (prebarvaj s črno barvo)
 */
void LCD_ClearScreen()
{
 8009784:	b510      	push	{r4, lr}
 8009786:	b082      	sub	sp, #8
    LCD_FillRect(0, 0, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT), 0);
 8009788:	2000      	movs	r0, #0
 800978a:	f000 f94f 	bl	8009a2c <ILI9341_GetParam>
 800978e:	4604      	mov	r4, r0
 8009790:	2001      	movs	r0, #1
 8009792:	f000 f94b 	bl	8009a2c <ILI9341_GetParam>
 8009796:	4603      	mov	r3, r0
 8009798:	2000      	movs	r0, #0
 800979a:	9000      	str	r0, [sp, #0]
 800979c:	4622      	mov	r2, r4
 800979e:	4601      	mov	r1, r0
 80097a0:	f7ff ffd4 	bl	800974c <LCD_FillRect>
}
 80097a4:	b002      	add	sp, #8
 80097a6:	bd10      	pop	{r4, pc}

080097a8 <LCD_Init>:
{
 80097a8:	b508      	push	{r3, lr}
	LCD_IO_Init();
 80097aa:	f7ff ffb5 	bl	8009718 <LCD_IO_Init>
	ILI9341_Init(ILI9341_COLORSPACE_RBG565, ILI9341_MISKO_ROTATE_0);
 80097ae:	2103      	movs	r1, #3
 80097b0:	2055      	movs	r0, #85	; 0x55
 80097b2:	f000 f8ab 	bl	800990c <ILI9341_Init>
	ILI9341_DisplayOn();
 80097b6:	f000 f92d 	bl	8009a14 <ILI9341_DisplayOn>
	LCD_ClearScreen();
 80097ba:	f7ff ffe3 	bl	8009784 <LCD_ClearScreen>
	ILI9341_WaitTransfer();
 80097be:	f000 f815 	bl	80097ec <ILI9341_WaitTransfer>
	LCD_SetBacklight(1);
 80097c2:	2001      	movs	r0, #1
 80097c4:	f7ff ffb6 	bl	8009734 <LCD_SetBacklight>
}
 80097c8:	bd08      	pop	{r3, pc}
	...

080097cc <ILI9341_SendData>:
 */
void ILI9341_SendData(LCD_IO_Data_t *data, uint32_t length)
{
	uint8_t increment = LCD_IO_DATA_WRITE_CYCLES;

	for (uint32_t i = 0; i < (length/increment); i += increment)
 80097cc:	2300      	movs	r3, #0
 80097ce:	e007      	b.n	80097e0 <ILI9341_SendData+0x14>
		FMC_BANK1_WriteData(data[i]);
 80097d0:	f830 c013 	ldrh.w	ip, [r0, r3, lsl #1]
	*(LCD_IO_Data_t *)(FMC_BANK1_MEM) = data;
 80097d4:	4a04      	ldr	r2, [pc, #16]	; (80097e8 <ILI9341_SendData+0x1c>)
 80097d6:	f8a2 c000 	strh.w	ip, [r2]
  __ASM volatile ("dsb 0xF":::"memory");
 80097da:	f3bf 8f4f 	dsb	sy
	for (uint32_t i = 0; i < (length/increment); i += increment)
 80097de:	3301      	adds	r3, #1
 80097e0:	428b      	cmp	r3, r1
 80097e2:	d3f5      	bcc.n	80097d0 <ILI9341_SendData+0x4>
}
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	60010000 	.word	0x60010000

080097ec <ILI9341_WaitTransfer>:
#endif
}

//! @brief Počakaj na prenos podatka FSMC->Ili9341.
void ILI9341_WaitTransfer()
{
 80097ec:	b508      	push	{r3, lr}
#ifdef ILI9341_USEDMA
	while (HAL_DMA_GetState(&hLCDDMA) != HAL_DMA_STATE_READY);
 80097ee:	4803      	ldr	r0, [pc, #12]	; (80097fc <ILI9341_WaitTransfer+0x10>)
 80097f0:	f7fa fedd 	bl	80045ae <HAL_DMA_GetState>
 80097f4:	2801      	cmp	r0, #1
 80097f6:	d1fa      	bne.n	80097ee <ILI9341_WaitTransfer+0x2>
#endif
}
 80097f8:	bd08      	pop	{r3, pc}
 80097fa:	bf00      	nop
 80097fc:	20000808 	.word	0x20000808

08009800 <ILI9341_SetAddress>:
{
 8009800:	b510      	push	{r4, lr}
 8009802:	4604      	mov	r4, r0
	ILI9341_WaitTransfer();
 8009804:	f7ff fff2 	bl	80097ec <ILI9341_WaitTransfer>
	FMC_BANK1_SetAddress(*address);
 8009808:	8822      	ldrh	r2, [r4, #0]
	*(LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 800980a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800980e:	801a      	strh	r2, [r3, #0]
 8009810:	f3bf 8f4f 	dsb	sy
}
 8009814:	bd10      	pop	{r4, pc}
	...

08009818 <ILI9341_SetOrientation>:
{
 8009818:	b510      	push	{r4, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	4604      	mov	r4, r0
	ILI9341_Data_t command   = ILI9341_MAC; /* Memory Access Control */
 800981e:	2336      	movs	r3, #54	; 0x36
 8009820:	f8ad 3006 	strh.w	r3, [sp, #6]
	ILI9341_Data_t parameter = (ILI9341_Data_t)orientations[orientation];
 8009824:	4b10      	ldr	r3, [pc, #64]	; (8009868 <ILI9341_SetOrientation+0x50>)
 8009826:	f833 3020 	ldrh.w	r3, [r3, r0, lsl #2]
 800982a:	f8ad 3004 	strh.w	r3, [sp, #4]
	ILI9341_SetAddress(&command);
 800982e:	f10d 0006 	add.w	r0, sp, #6
 8009832:	f7ff ffe5 	bl	8009800 <ILI9341_SetAddress>
	ILI9341_SendData(&parameter, 1);
 8009836:	2101      	movs	r1, #1
 8009838:	a801      	add	r0, sp, #4
 800983a:	f7ff ffc7 	bl	80097cc <ILI9341_SendData>
	switch (orientation) {
 800983e:	b144      	cbz	r4, 8009852 <ILI9341_SetOrientation+0x3a>
 8009840:	2c03      	cmp	r4, #3
 8009842:	d006      	beq.n	8009852 <ILI9341_SetOrientation+0x3a>
		LCD.width  = ILI9341_WIDTH;
 8009844:	4b09      	ldr	r3, [pc, #36]	; (800986c <ILI9341_SetOrientation+0x54>)
 8009846:	22f0      	movs	r2, #240	; 0xf0
 8009848:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_HEIGHT;
 800984a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800984e:	605a      	str	r2, [r3, #4]
		break;
 8009850:	e005      	b.n	800985e <ILI9341_SetOrientation+0x46>
		LCD.width  = ILI9341_HEIGHT;
 8009852:	4b06      	ldr	r3, [pc, #24]	; (800986c <ILI9341_SetOrientation+0x54>)
 8009854:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009858:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_WIDTH;
 800985a:	22f0      	movs	r2, #240	; 0xf0
 800985c:	605a      	str	r2, [r3, #4]
	LCD.orientation = orientation;
 800985e:	4b03      	ldr	r3, [pc, #12]	; (800986c <ILI9341_SetOrientation+0x54>)
 8009860:	609c      	str	r4, [r3, #8]
}
 8009862:	b002      	add	sp, #8
 8009864:	bd10      	pop	{r4, pc}
 8009866:	bf00      	nop
 8009868:	0800f7e0 	.word	0x0800f7e0
 800986c:	20000eac 	.word	0x20000eac

08009870 <ILI9341_SetDisplayWindow>:
{
 8009870:	b530      	push	{r4, r5, lr}
 8009872:	b085      	sub	sp, #20
 8009874:	460c      	mov	r4, r1
 8009876:	461d      	mov	r5, r3
	command = ILI9341_CASET;
 8009878:	232a      	movs	r3, #42	; 0x2a
 800987a:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = (ILI9341_Data_t)(Xpos >> 8U);
 800987e:	f3c0 230f 	ubfx	r3, r0, #8, #16
 8009882:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter[1] = (ILI9341_Data_t)(Xpos & 0xFFU);
 8009886:	b2c3      	uxtb	r3, r0
 8009888:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter[2] = (ILI9341_Data_t)((Xpos + Width - 1U) >> 8U);
 800988c:	1883      	adds	r3, r0, r2
 800988e:	3b01      	subs	r3, #1
 8009890:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8009894:	f8ad 3008 	strh.w	r3, [sp, #8]
	parameter[3] = (ILI9341_Data_t)((Xpos + Width - 1U) & 0xFFU);
 8009898:	fa12 f080 	uxtah	r0, r2, r0
 800989c:	b280      	uxth	r0, r0
 800989e:	3801      	subs	r0, #1
 80098a0:	b2c0      	uxtb	r0, r0
 80098a2:	f8ad 000a 	strh.w	r0, [sp, #10]
	ILI9341_SetAddress(&command);
 80098a6:	f10d 000e 	add.w	r0, sp, #14
 80098aa:	f7ff ffa9 	bl	8009800 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 80098ae:	2104      	movs	r1, #4
 80098b0:	eb0d 0001 	add.w	r0, sp, r1
 80098b4:	f7ff ff8a 	bl	80097cc <ILI9341_SendData>
	command = ILI9341_RASET;
 80098b8:	232b      	movs	r3, #43	; 0x2b
 80098ba:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter [0] = (ILI9341_Data_t)(Ypos >> 8U);
 80098be:	f3c4 230f 	ubfx	r3, r4, #8, #16
 80098c2:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter [1] = (ILI9341_Data_t)(Ypos & 0xFFU);
 80098c6:	b2e3      	uxtb	r3, r4
 80098c8:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter [2] = (ILI9341_Data_t)((Ypos + Height - 1U) >> 8U);
 80098cc:	1962      	adds	r2, r4, r5
 80098ce:	3a01      	subs	r2, #1
 80098d0:	f3c2 220f 	ubfx	r2, r2, #8, #16
 80098d4:	f8ad 2008 	strh.w	r2, [sp, #8]
	parameter [3] = (ILI9341_Data_t)((Ypos + Height - 1U) & 0xFFU);
 80098d8:	fa15 f484 	uxtah	r4, r5, r4
 80098dc:	b2a4      	uxth	r4, r4
 80098de:	3c01      	subs	r4, #1
 80098e0:	b2e4      	uxtb	r4, r4
 80098e2:	f8ad 400a 	strh.w	r4, [sp, #10]
	ILI9341_SetAddress(&command);
 80098e6:	f10d 000e 	add.w	r0, sp, #14
 80098ea:	f7ff ff89 	bl	8009800 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 80098ee:	2104      	movs	r1, #4
 80098f0:	eb0d 0001 	add.w	r0, sp, r1
 80098f4:	f7ff ff6a 	bl	80097cc <ILI9341_SendData>
	command = ILI9341_GRAM;
 80098f8:	232c      	movs	r3, #44	; 0x2c
 80098fa:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 80098fe:	f10d 000e 	add.w	r0, sp, #14
 8009902:	f7ff ff7d 	bl	8009800 <ILI9341_SetAddress>
}
 8009906:	b005      	add	sp, #20
 8009908:	bd30      	pop	{r4, r5, pc}
	...

0800990c <ILI9341_Init>:
{
 800990c:	b510      	push	{r4, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	4604      	mov	r4, r0
	ILI9341_SetOrientation(orientation);
 8009912:	4608      	mov	r0, r1
 8009914:	f7ff ff80 	bl	8009818 <ILI9341_SetOrientation>
	ILI9341_SetDisplayWindow(0U, 0U, LCD.width, LCD.height);
 8009918:	4a20      	ldr	r2, [pc, #128]	; (800999c <ILI9341_Init+0x90>)
 800991a:	6853      	ldr	r3, [r2, #4]
 800991c:	6812      	ldr	r2, [r2, #0]
 800991e:	2100      	movs	r1, #0
 8009920:	4608      	mov	r0, r1
 8009922:	f7ff ffa5 	bl	8009870 <ILI9341_SetDisplayWindow>
	command = ILI9341_SLEEP_OUT;
 8009926:	2311      	movs	r3, #17
 8009928:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 800992c:	f10d 000e 	add.w	r0, sp, #14
 8009930:	f7ff ff66 	bl	8009800 <ILI9341_SetAddress>
	HAL_Delay(200);
 8009934:	20c8      	movs	r0, #200	; 0xc8
 8009936:	f7f9 fc09 	bl	800314c <HAL_Delay>
	command = ILI9341_NORMAL_MODE_ON;
 800993a:	2313      	movs	r3, #19
 800993c:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 8009940:	f10d 000e 	add.w	r0, sp, #14
 8009944:	f7ff ff5c 	bl	8009800 <ILI9341_SetAddress>
	HAL_Delay(100);
 8009948:	2064      	movs	r0, #100	; 0x64
 800994a:	f7f9 fbff 	bl	800314c <HAL_Delay>
	command = ILI9341_PIXEL_FORMAT;
 800994e:	233a      	movs	r3, #58	; 0x3a
 8009950:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = color_space;
 8009954:	f8ad 4004 	strh.w	r4, [sp, #4]
	ILI9341_SetAddress(&command);
 8009958:	f10d 000e 	add.w	r0, sp, #14
 800995c:	f7ff ff50 	bl	8009800 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 1);
 8009960:	2101      	movs	r1, #1
 8009962:	a801      	add	r0, sp, #4
 8009964:	f7ff ff32 	bl	80097cc <ILI9341_SendData>
	HAL_Delay(100);
 8009968:	2064      	movs	r0, #100	; 0x64
 800996a:	f7f9 fbef 	bl	800314c <HAL_Delay>
	command = ILI9341_INTERFACE;
 800996e:	23f6      	movs	r3, #246	; 0xf6
 8009970:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = 0x49;
 8009974:	2349      	movs	r3, #73	; 0x49
 8009976:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter[1] = 0;
 800997a:	2300      	movs	r3, #0
 800997c:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter[2] = 0x20;
 8009980:	2320      	movs	r3, #32
 8009982:	f8ad 3008 	strh.w	r3, [sp, #8]
	ILI9341_SetAddress(&command);
 8009986:	f10d 000e 	add.w	r0, sp, #14
 800998a:	f7ff ff39 	bl	8009800 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 3);
 800998e:	2103      	movs	r1, #3
 8009990:	a801      	add	r0, sp, #4
 8009992:	f7ff ff1b 	bl	80097cc <ILI9341_SendData>
}
 8009996:	b004      	add	sp, #16
 8009998:	bd10      	pop	{r4, pc}
 800999a:	bf00      	nop
 800999c:	20000eac 	.word	0x20000eac

080099a0 <ILI9341_SendRepeatedDataDMA>:
{
 80099a0:	b530      	push	{r4, r5, lr}
 80099a2:	b083      	sub	sp, #12
 80099a4:	460c      	mov	r4, r1
 80099a6:	f8ad 0006 	strh.w	r0, [sp, #6]
	switch (hLCDDMA.Init.PeriphDataAlignment)
 80099aa:	4b18      	ldr	r3, [pc, #96]	; (8009a0c <ILI9341_SendRepeatedDataDMA+0x6c>)
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	b17b      	cbz	r3, 80099d0 <ILI9341_SendRepeatedDataDMA+0x30>
 80099b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099b4:	d100      	bne.n	80099b8 <ILI9341_SendRepeatedDataDMA+0x18>
			len = (num_copies / (2*LCD_IO_DATA_WRITE_CYCLES));
 80099b6:	084c      	lsrs	r4, r1, #1
	ILI9341_WaitTransfer();
 80099b8:	f7ff ff18 	bl	80097ec <ILI9341_WaitTransfer>
	HAL_DMA_DeInit(&hLCDDMA);
 80099bc:	4d13      	ldr	r5, [pc, #76]	; (8009a0c <ILI9341_SendRepeatedDataDMA+0x6c>)
 80099be:	4628      	mov	r0, r5
 80099c0:	f7fa fcae 	bl	8004320 <HAL_DMA_DeInit>
	hLCDDMA.Init.PeriphInc = DMA_PINC_DISABLE;	// dont increment source address
 80099c4:	2300      	movs	r3, #0
 80099c6:	60eb      	str	r3, [r5, #12]
	HAL_DMA_Init(&hLCDDMA);
 80099c8:	4628      	mov	r0, r5
 80099ca:	f7fa fc3d 	bl	8004248 <HAL_DMA_Init>
 80099ce:	e00e      	b.n	80099ee <ILI9341_SendRepeatedDataDMA+0x4e>
			len = 2*num_copies/LCD_IO_DATA_WRITE_CYCLES;
 80099d0:	004c      	lsls	r4, r1, #1
			break;
 80099d2:	e7f1      	b.n	80099b8 <ILI9341_SendRepeatedDataDMA+0x18>
			len -= 65535;
 80099d4:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
 80099d8:	3cff      	subs	r4, #255	; 0xff
			transfer = 65535;
 80099da:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t) &data, (uint32_t)FMC_BANK1_MEM, transfer) != HAL_OK) return 1;
 80099de:	4a0c      	ldr	r2, [pc, #48]	; (8009a10 <ILI9341_SendRepeatedDataDMA+0x70>)
 80099e0:	f10d 0106 	add.w	r1, sp, #6
 80099e4:	4809      	ldr	r0, [pc, #36]	; (8009a0c <ILI9341_SendRepeatedDataDMA+0x6c>)
 80099e6:	f7fa fcf7 	bl	80043d8 <HAL_DMA_Start_IT>
 80099ea:	b960      	cbnz	r0, 8009a06 <ILI9341_SendRepeatedDataDMA+0x66>
	while (len);
 80099ec:	b134      	cbz	r4, 80099fc <ILI9341_SendRepeatedDataDMA+0x5c>
		ILI9341_WaitTransfer();
 80099ee:	f7ff fefd 	bl	80097ec <ILI9341_WaitTransfer>
		if (len > 65535)
 80099f2:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80099f6:	d2ed      	bcs.n	80099d4 <ILI9341_SendRepeatedDataDMA+0x34>
		if (transfer == 0) return 1;
 80099f8:	b914      	cbnz	r4, 8009a00 <ILI9341_SendRepeatedDataDMA+0x60>
 80099fa:	2001      	movs	r0, #1
}
 80099fc:	b003      	add	sp, #12
 80099fe:	bd30      	pop	{r4, r5, pc}
			transfer = len;
 8009a00:	4623      	mov	r3, r4
			len = 0;
 8009a02:	2400      	movs	r4, #0
 8009a04:	e7eb      	b.n	80099de <ILI9341_SendRepeatedDataDMA+0x3e>
		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t) &data, (uint32_t)FMC_BANK1_MEM, transfer) != HAL_OK) return 1;
 8009a06:	2001      	movs	r0, #1
 8009a08:	e7f8      	b.n	80099fc <ILI9341_SendRepeatedDataDMA+0x5c>
 8009a0a:	bf00      	nop
 8009a0c:	20000808 	.word	0x20000808
 8009a10:	60010000 	.word	0x60010000

08009a14 <ILI9341_DisplayOn>:

//! @brief Strojno omogoči zaslon
void ILI9341_DisplayOn()
{
 8009a14:	b500      	push	{lr}
 8009a16:	b083      	sub	sp, #12
	ILI9341_Data_t command = ILI9341_DISPLAY_ON;
 8009a18:	2329      	movs	r3, #41	; 0x29
 8009a1a:	f8ad 3006 	strh.w	r3, [sp, #6]
	ILI9341_SetAddress(&command);
 8009a1e:	f10d 0006 	add.w	r0, sp, #6
 8009a22:	f7ff feed 	bl	8009800 <ILI9341_SetAddress>
}
 8009a26:	b003      	add	sp, #12
 8009a28:	f85d fb04 	ldr.w	pc, [sp], #4

08009a2c <ILI9341_GetParam>:
 */
uint32_t ILI9341_GetParam(LCD_Param_t param)
{
	uint32_t value = 0;

	switch (param) {
 8009a2c:	2803      	cmp	r0, #3
 8009a2e:	d803      	bhi.n	8009a38 <ILI9341_GetParam+0xc>
 8009a30:	e8df f000 	tbb	[pc, r0]
 8009a34:	0a0d0704 	.word	0x0a0d0704
 8009a38:	2000      	movs	r0, #0
 8009a3a:	4770      	bx	lr
	case LCD_WIDTH:
		value = LCD.width;
 8009a3c:	4b05      	ldr	r3, [pc, #20]	; (8009a54 <ILI9341_GetParam+0x28>)
 8009a3e:	6818      	ldr	r0, [r3, #0]
		break;
 8009a40:	4770      	bx	lr
	case LCD_HEIGHT:
		value = LCD.height;
 8009a42:	4b04      	ldr	r3, [pc, #16]	; (8009a54 <ILI9341_GetParam+0x28>)
 8009a44:	6858      	ldr	r0, [r3, #4]
		break;
 8009a46:	4770      	bx	lr
	case LCD_AREA:
		value = ILI9341_AREA;
		break;
	case LCD_ORIENTATION:
		value = LCD.orientation;
 8009a48:	4b02      	ldr	r3, [pc, #8]	; (8009a54 <ILI9341_GetParam+0x28>)
 8009a4a:	6898      	ldr	r0, [r3, #8]
		break;
 8009a4c:	4770      	bx	lr
		value = ILI9341_AREA;
 8009a4e:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
	default:
		break;
	}

	return value;
}
 8009a52:	4770      	bx	lr
 8009a54:	20000eac 	.word	0x20000eac

08009a58 <UserPixelSetFunction>:


#include "lcd_ugui.h"

void UserPixelSetFunction(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 8009a58:	b500      	push	{lr}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	f8ad 2006 	strh.w	r2, [sp, #6]
	ILI9341_SetDisplayWindow(x, y, 1, 1);
 8009a60:	2301      	movs	r3, #1
 8009a62:	461a      	mov	r2, r3
 8009a64:	f7ff ff04 	bl	8009870 <ILI9341_SetDisplayWindow>
	ILI9341_SendData((LCD_IO_Data_t *)&c, 1);
 8009a68:	2101      	movs	r1, #1
 8009a6a:	f10d 0006 	add.w	r0, sp, #6
 8009a6e:	f7ff fead 	bl	80097cc <ILI9341_SendData>
}
 8009a72:	b003      	add	sp, #12
 8009a74:	f85d fb04 	ldr.w	pc, [sp], #4

08009a78 <_HW_FillFrame_>:

UG_RESULT _HW_FillFrame_(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 8009a78:	b510      	push	{r4, lr}
 8009a7a:	b082      	sub	sp, #8
	LCD_FillRect(x1, y1, x2-x1, y2-y1, c);
 8009a7c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8009a80:	9400      	str	r4, [sp, #0]
 8009a82:	1a5b      	subs	r3, r3, r1
 8009a84:	1a12      	subs	r2, r2, r0
 8009a86:	f7ff fe61 	bl	800974c <LCD_FillRect>
	return UG_RESULT_OK;
}
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	b002      	add	sp, #8
 8009a8e:	bd10      	pop	{r4, pc}

08009a90 <LCD_UG_init>:


UG_GUI gui;

UG_S16 LCD_UG_init(void)
{
 8009a90:	b510      	push	{r4, lr}
	UG_Init(&gui, UserPixelSetFunction, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT));
 8009a92:	2000      	movs	r0, #0
 8009a94:	f7ff ffca 	bl	8009a2c <ILI9341_GetParam>
 8009a98:	4604      	mov	r4, r0
 8009a9a:	2001      	movs	r0, #1
 8009a9c:	f7ff ffc6 	bl	8009a2c <ILI9341_GetParam>
 8009aa0:	b203      	sxth	r3, r0
 8009aa2:	b222      	sxth	r2, r4
 8009aa4:	490b      	ldr	r1, [pc, #44]	; (8009ad4 <LCD_UG_init+0x44>)
 8009aa6:	480c      	ldr	r0, [pc, #48]	; (8009ad8 <LCD_UG_init+0x48>)
 8009aa8:	f000 f81c 	bl	8009ae4 <UG_Init>
	UG_DriverRegister(DRIVER_FILL_FRAME, (void *)_HW_FillFrame_);
 8009aac:	490b      	ldr	r1, [pc, #44]	; (8009adc <LCD_UG_init+0x4c>)
 8009aae:	2001      	movs	r0, #1
 8009ab0:	f000 f882 	bl	8009bb8 <UG_DriverRegister>
	UG_DriverEnable(DRIVER_FILL_FRAME);
 8009ab4:	2001      	movs	r0, #1
 8009ab6:	f000 f88d 	bl	8009bd4 <UG_DriverEnable>

	UG_FontSelect(&FONT_8X12);
 8009aba:	4809      	ldr	r0, [pc, #36]	; (8009ae0 <LCD_UG_init+0x50>)
 8009abc:	f000 f852 	bl	8009b64 <UG_FontSelect>
	UG_SetForecolor(C_WHITE);
 8009ac0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009ac4:	f000 f868 	bl	8009b98 <UG_SetForecolor>
	UG_SetBackcolor(C_BLACK);
 8009ac8:	2000      	movs	r0, #0
 8009aca:	f000 f86d 	bl	8009ba8 <UG_SetBackcolor>
	return 0;
}
 8009ace:	2000      	movs	r0, #0
 8009ad0:	bd10      	pop	{r4, pc}
 8009ad2:	bf00      	nop
 8009ad4:	08009a59 	.word	0x08009a59
 8009ad8:	20000eb8 	.word	0x20000eb8
 8009adc:	08009a79 	.word	0x08009a79
 8009ae0:	0800f7f0 	.word	0x0800f7f0

08009ae4 <UG_Init>:

UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 8009ae4:	6001      	str	r1, [r0, #0]
   g->x_dim = x;
 8009ae6:	8082      	strh	r2, [r0, #4]
   g->y_dim = y;
 8009ae8:	80c3      	strh	r3, [r0, #6]
   g->console.x_start = 4;
 8009aea:	2104      	movs	r1, #4
 8009aec:	8401      	strh	r1, [r0, #32]
   g->console.y_start = 4;
 8009aee:	8441      	strh	r1, [r0, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 8009af0:	b292      	uxth	r2, r2
 8009af2:	3a04      	subs	r2, #4
 8009af4:	b292      	uxth	r2, r2
 8009af6:	3a01      	subs	r2, #1
 8009af8:	b212      	sxth	r2, r2
 8009afa:	8482      	strh	r2, [r0, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	3b04      	subs	r3, #4
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	3b01      	subs	r3, #1
 8009b04:	b21b      	sxth	r3, r3
 8009b06:	84c3      	strh	r3, [r0, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 8009b08:	8382      	strh	r2, [r0, #28]
   g->console.y_pos = g->console.y_end;
 8009b0a:	83c3      	strh	r3, [r0, #30]
   g->char_h_space = 1;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   g->char_v_space = 1;
 8009b12:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
   g->font.p = NULL;
 8009b16:	2300      	movs	r3, #0
 8009b18:	62c3      	str	r3, [r0, #44]	; 0x2c
   g->font.char_height = 0;
 8009b1a:	8683      	strh	r3, [r0, #52]	; 0x34
   g->font.char_width = 0;
 8009b1c:	8643      	strh	r3, [r0, #50]	; 0x32
   g->font.start_char = 0;
 8009b1e:	86c3      	strh	r3, [r0, #54]	; 0x36
   g->font.end_char = 0;
 8009b20:	8703      	strh	r3, [r0, #56]	; 0x38
   g->font.widths = NULL;
 8009b22:	63c3      	str	r3, [r0, #60]	; 0x3c
   #ifdef USE_COLOR_RGB888
   g->desktop_color = 0x5E8BEf;
   #endif
   #ifdef USE_COLOR_RGB565
   g->desktop_color = 0x5C5D;
 8009b24:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8009b28:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
   #endif
   g->fore_color = C_WHITE;
 8009b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b30:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
   g->back_color = C_BLACK;
 8009b34:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
   g->next_window = NULL;
 8009b38:	6103      	str	r3, [r0, #16]
   g->active_window = NULL;
 8009b3a:	6143      	str	r3, [r0, #20]
   g->last_window = NULL;
 8009b3c:	6183      	str	r3, [r0, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8009b3e:	e008      	b.n	8009b52 <UG_Init+0x6e>
   {
      g->driver[i].driver = NULL;
 8009b40:	f103 0209 	add.w	r2, r3, #9
 8009b44:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8009b48:	2100      	movs	r1, #0
 8009b4a:	6051      	str	r1, [r2, #4]
      g->driver[i].state = 0;
 8009b4c:	7211      	strb	r1, [r2, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8009b4e:	3301      	adds	r3, #1
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d9f4      	bls.n	8009b40 <UG_Init+0x5c>
   }

   gui = g;
 8009b56:	4b02      	ldr	r3, [pc, #8]	; (8009b60 <UG_Init+0x7c>)
 8009b58:	6018      	str	r0, [r3, #0]
   return 1;
}
 8009b5a:	2001      	movs	r0, #1
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	20000f1c 	.word	0x20000f1c

08009b64 <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 8009b64:	b500      	push	{lr}
   gui->font = *font;
 8009b66:	4b07      	ldr	r3, [pc, #28]	; (8009b84 <UG_FontSelect+0x20>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f103 0c2c 	add.w	ip, r3, #44	; 0x2c
 8009b6e:	4686      	mov	lr, r0
 8009b70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009b74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009b78:	f8de 3000 	ldr.w	r3, [lr]
 8009b7c:	f8cc 3000 	str.w	r3, [ip]
}
 8009b80:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b84:	20000f1c 	.word	0x20000f1c

08009b88 <UG_DrawPixel>:
   UG_DrawArc(x1+r, y2-r, r, 0x30, c);
   UG_DrawArc(x2-r, y2-r, r, 0xC0, c);
}

void UG_DrawPixel( UG_S16 x0, UG_S16 y0, UG_COLOR c )
{
 8009b88:	b508      	push	{r3, lr}
   gui->pset(x0,y0,c);
 8009b8a:	4b02      	ldr	r3, [pc, #8]	; (8009b94 <UG_DrawPixel+0xc>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4798      	blx	r3
}
 8009b92:	bd08      	pop	{r3, pc}
 8009b94:	20000f1c 	.word	0x20000f1c

08009b98 <UG_SetForecolor>:
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
   gui->fore_color = c;
 8009b98:	4b02      	ldr	r3, [pc, #8]	; (8009ba4 <UG_SetForecolor+0xc>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
}
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	20000f1c 	.word	0x20000f1c

08009ba8 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
   gui->back_color = c;
 8009ba8:	4b02      	ldr	r3, [pc, #8]	; (8009bb4 <UG_SetBackcolor+0xc>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
}
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	20000f1c 	.word	0x20000f1c

08009bb8 <UG_DriverRegister>:
/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8009bb8:	2802      	cmp	r0, #2
 8009bba:	d807      	bhi.n	8009bcc <UG_DriverRegister+0x14>

   gui->driver[type].driver = driver;
 8009bbc:	4b04      	ldr	r3, [pc, #16]	; (8009bd0 <UG_DriverRegister+0x18>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	3009      	adds	r0, #9
 8009bc2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8009bc6:	6041      	str	r1, [r0, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	7203      	strb	r3, [r0, #8]
}
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	20000f1c 	.word	0x20000f1c

08009bd4 <UG_DriverEnable>:

void UG_DriverEnable( UG_U8 type )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8009bd4:	2802      	cmp	r0, #2
 8009bd6:	d80f      	bhi.n	8009bf8 <UG_DriverEnable+0x24>
   if ( gui->driver[type].state & DRIVER_REGISTERED )
 8009bd8:	4b08      	ldr	r3, [pc, #32]	; (8009bfc <UG_DriverEnable+0x28>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	f100 0309 	add.w	r3, r0, #9
 8009be0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009be4:	7a1b      	ldrb	r3, [r3, #8]
 8009be6:	f013 0f01 	tst.w	r3, #1
 8009bea:	d005      	beq.n	8009bf8 <UG_DriverEnable+0x24>
   {
      gui->driver[type].state |= DRIVER_ENABLED;
 8009bec:	3009      	adds	r0, #9
 8009bee:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8009bf2:	f043 0302 	orr.w	r3, r3, #2
 8009bf6:	7203      	strb	r3, [r0, #8]
   }
}
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	20000f1c 	.word	0x20000f1c

08009c00 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c00:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c02:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8009c06:	b184      	cbz	r4, 8009c2a <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009c08:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8009c0c:	b17b      	cbz	r3, 8009c2e <USBD_CDC_EP0_RxReady+0x2e>
 8009c0e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8009c12:	28ff      	cmp	r0, #255	; 0xff
 8009c14:	d00d      	beq.n	8009c32 <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8009c20:	23ff      	movs	r3, #255	; 0xff
 8009c22:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009c26:	2000      	movs	r0, #0
}
 8009c28:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8009c2a:	2003      	movs	r0, #3
 8009c2c:	e7fc      	b.n	8009c28 <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 8009c2e:	2000      	movs	r0, #0
 8009c30:	e7fa      	b.n	8009c28 <USBD_CDC_EP0_RxReady+0x28>
 8009c32:	2000      	movs	r0, #0
 8009c34:	e7f8      	b.n	8009c28 <USBD_CDC_EP0_RxReady+0x28>
	...

08009c38 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009c38:	2343      	movs	r3, #67	; 0x43
 8009c3a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8009c3c:	4800      	ldr	r0, [pc, #0]	; (8009c40 <USBD_CDC_GetFSCfgDesc+0x8>)
 8009c3e:	4770      	bx	lr
 8009c40:	20000270 	.word	0x20000270

08009c44 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009c44:	2343      	movs	r3, #67	; 0x43
 8009c46:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8009c48:	4800      	ldr	r0, [pc, #0]	; (8009c4c <USBD_CDC_GetHSCfgDesc+0x8>)
 8009c4a:	4770      	bx	lr
 8009c4c:	200002b4 	.word	0x200002b4

08009c50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009c50:	2343      	movs	r3, #67	; 0x43
 8009c52:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8009c54:	4800      	ldr	r0, [pc, #0]	; (8009c58 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8009c56:	4770      	bx	lr
 8009c58:	20000304 	.word	0x20000304

08009c5c <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009c5c:	230a      	movs	r3, #10
 8009c5e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8009c60:	4800      	ldr	r0, [pc, #0]	; (8009c64 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8009c62:	4770      	bx	lr
 8009c64:	200002f8 	.word	0x200002f8

08009c68 <USBD_CDC_DataOut>:
{
 8009c68:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c6a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8009c6e:	b175      	cbz	r5, 8009c8e <USBD_CDC_DataOut+0x26>
 8009c70:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009c72:	f001 f8a3 	bl	800adbc <USBD_LL_GetRxDataSize>
 8009c76:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009c7a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8009c84:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8009c88:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8009c8a:	2000      	movs	r0, #0
}
 8009c8c:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8009c8e:	2003      	movs	r0, #3
 8009c90:	e7fc      	b.n	8009c8c <USBD_CDC_DataOut+0x24>

08009c92 <USBD_CDC_DataIn>:
{
 8009c92:	b510      	push	{r4, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009c94:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 8009c98:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8009c9c:	b353      	cbz	r3, 8009cf4 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009c9e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8009ca2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009ca6:	6992      	ldr	r2, [r2, #24]
 8009ca8:	b14a      	cbz	r2, 8009cbe <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009caa:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8009cae:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 8009cb2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009cb4:	fbb2 fcf4 	udiv	ip, r2, r4
 8009cb8:	fb04 221c 	mls	r2, r4, ip, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009cbc:	b172      	cbz	r2, 8009cdc <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009cc4:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8009cc8:	6914      	ldr	r4, [r2, #16]
 8009cca:	b1ac      	cbz	r4, 8009cf8 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009ccc:	460a      	mov	r2, r1
 8009cce:	f503 7104 	add.w	r1, r3, #528	; 0x210
 8009cd2:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8009cd6:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 8009cd8:	2000      	movs	r0, #0
}
 8009cda:	bd10      	pop	{r4, pc}
    pdev->ep_in[epnum].total_length = 0U;
 8009cdc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8009ce0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009ce4:	2400      	movs	r4, #0
 8009ce6:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009ce8:	4623      	mov	r3, r4
 8009cea:	4622      	mov	r2, r4
 8009cec:	f001 f856 	bl	800ad9c <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8009cf0:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009cf2:	e7f2      	b.n	8009cda <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 8009cf4:	2003      	movs	r0, #3
 8009cf6:	e7f0      	b.n	8009cda <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	e7ee      	b.n	8009cda <USBD_CDC_DataIn+0x48>

08009cfc <USBD_CDC_Setup>:
{
 8009cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cfe:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d00:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8009d04:	2300      	movs	r3, #0
 8009d06:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8009d0a:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 8009d0e:	2e00      	cmp	r6, #0
 8009d10:	d06c      	beq.n	8009dec <USBD_CDC_Setup+0xf0>
 8009d12:	4607      	mov	r7, r0
 8009d14:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d16:	780b      	ldrb	r3, [r1, #0]
 8009d18:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8009d1c:	d02a      	beq.n	8009d74 <USBD_CDC_Setup+0x78>
 8009d1e:	2d20      	cmp	r5, #32
 8009d20:	d15e      	bne.n	8009de0 <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 8009d22:	88ca      	ldrh	r2, [r1, #6]
 8009d24:	b1f2      	cbz	r2, 8009d64 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 8009d26:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009d2a:	d00f      	beq.n	8009d4c <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d2c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	4631      	mov	r1, r6
 8009d34:	7860      	ldrb	r0, [r4, #1]
 8009d36:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009d38:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009d3a:	2a07      	cmp	r2, #7
 8009d3c:	bf28      	it	cs
 8009d3e:	2207      	movcs	r2, #7
 8009d40:	4631      	mov	r1, r6
 8009d42:	4638      	mov	r0, r7
 8009d44:	f000 fdd4 	bl	800a8f0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8009d48:	2500      	movs	r5, #0
 8009d4a:	e04c      	b.n	8009de6 <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 8009d4c:	784b      	ldrb	r3, [r1, #1]
 8009d4e:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009d52:	798b      	ldrb	r3, [r1, #6]
 8009d54:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009d58:	88ca      	ldrh	r2, [r1, #6]
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	f000 fddd 	bl	800a91a <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8009d60:	2500      	movs	r5, #0
 8009d62:	e040      	b.n	8009de6 <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d64:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	7848      	ldrb	r0, [r1, #1]
 8009d6e:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8009d70:	2500      	movs	r5, #0
 8009d72:	e038      	b.n	8009de6 <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 8009d74:	784e      	ldrb	r6, [r1, #1]
 8009d76:	2e0b      	cmp	r6, #11
 8009d78:	d82e      	bhi.n	8009dd8 <USBD_CDC_Setup+0xdc>
 8009d7a:	e8df f006 	tbb	[pc, r6]
 8009d7e:	3406      	.short	0x3406
 8009d80:	2d2d2d2d 	.word	0x2d2d2d2d
 8009d84:	2d2d2d2d 	.word	0x2d2d2d2d
 8009d88:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d8a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	2b03      	cmp	r3, #3
 8009d92:	d003      	beq.n	8009d9c <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 8009d94:	f000 fa72 	bl	800a27c <USBD_CtlError>
            ret = USBD_FAIL;
 8009d98:	2503      	movs	r5, #3
 8009d9a:	e024      	b.n	8009de6 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009d9c:	2202      	movs	r2, #2
 8009d9e:	a901      	add	r1, sp, #4
 8009da0:	f000 fda6 	bl	800a8f0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8009da4:	4635      	mov	r5, r6
 8009da6:	e01e      	b.n	8009de6 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009da8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	2b03      	cmp	r3, #3
 8009db0:	d003      	beq.n	8009dba <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 8009db2:	f000 fa63 	bl	800a27c <USBD_CtlError>
            ret = USBD_FAIL;
 8009db6:	2503      	movs	r5, #3
 8009db8:	e015      	b.n	8009de6 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f10d 0107 	add.w	r1, sp, #7
 8009dc0:	f000 fd96 	bl	800a8f0 <USBD_CtlSendData>
 8009dc4:	e00f      	b.n	8009de6 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009dc6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	2b03      	cmp	r3, #3
 8009dce:	d00a      	beq.n	8009de6 <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 8009dd0:	f000 fa54 	bl	800a27c <USBD_CtlError>
            ret = USBD_FAIL;
 8009dd4:	2503      	movs	r5, #3
 8009dd6:	e006      	b.n	8009de6 <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 8009dd8:	f000 fa50 	bl	800a27c <USBD_CtlError>
          ret = USBD_FAIL;
 8009ddc:	2503      	movs	r5, #3
          break;
 8009dde:	e002      	b.n	8009de6 <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 8009de0:	f000 fa4c 	bl	800a27c <USBD_CtlError>
      ret = USBD_FAIL;
 8009de4:	2503      	movs	r5, #3
}
 8009de6:	4628      	mov	r0, r5
 8009de8:	b003      	add	sp, #12
 8009dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8009dec:	2503      	movs	r5, #3
 8009dee:	e7fa      	b.n	8009de6 <USBD_CDC_Setup+0xea>

08009df0 <USBD_CDC_DeInit>:
{
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009df4:	2181      	movs	r1, #129	; 0x81
 8009df6:	f000 ff9a 	bl	800ad2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009dfa:	2500      	movs	r5, #0
 8009dfc:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009dfe:	2101      	movs	r1, #1
 8009e00:	4620      	mov	r0, r4
 8009e02:	f000 ff94 	bl	800ad2e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009e06:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009e0a:	2182      	movs	r1, #130	; 0x82
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	f000 ff8e 	bl	800ad2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009e12:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009e16:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 8009e1a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8009e1e:	b14b      	cbz	r3, 8009e34 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009e20:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009e28:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8009e2c:	f000 fff4 	bl	800ae18 <USBD_static_free>
    pdev->pClassData = NULL;
 8009e30:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8009e34:	2000      	movs	r0, #0
 8009e36:	bd38      	pop	{r3, r4, r5, pc}

08009e38 <USBD_CDC_Init>:
{
 8009e38:	b570      	push	{r4, r5, r6, lr}
 8009e3a:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009e3c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009e40:	f000 ffe6 	bl	800ae10 <USBD_static_malloc>
  if (hcdc == NULL)
 8009e44:	b3b8      	cbz	r0, 8009eb6 <USBD_CDC_Init+0x7e>
 8009e46:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 8009e48:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e4c:	7c23      	ldrb	r3, [r4, #16]
 8009e4e:	bbbb      	cbnz	r3, 8009ec0 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e54:	2202      	movs	r2, #2
 8009e56:	2181      	movs	r1, #129	; 0x81
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f000 ff5d 	bl	800ad18 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009e5e:	2501      	movs	r5, #1
 8009e60:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e66:	2202      	movs	r2, #2
 8009e68:	4629      	mov	r1, r5
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f000 ff54 	bl	800ad18 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009e70:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009e74:	2310      	movs	r3, #16
 8009e76:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009e7a:	2308      	movs	r3, #8
 8009e7c:	2203      	movs	r2, #3
 8009e7e:	2182      	movs	r1, #130	; 0x82
 8009e80:	4620      	mov	r0, r4
 8009e82:	f000 ff49 	bl	800ad18 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009e86:	2301      	movs	r3, #1
 8009e88:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009e8c:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4798      	blx	r3
  hcdc->TxState = 0U;
 8009e94:	2300      	movs	r3, #0
 8009e96:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 8009e9a:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e9e:	7c25      	ldrb	r5, [r4, #16]
 8009ea0:	bb15      	cbnz	r5, 8009ee8 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ea6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8009eaa:	2101      	movs	r1, #1
 8009eac:	4620      	mov	r0, r4
 8009eae:	f000 ff7d 	bl	800adac <USBD_LL_PrepareReceive>
}
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009ebc:	2502      	movs	r5, #2
 8009ebe:	e7f8      	b.n	8009eb2 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009ec0:	2340      	movs	r3, #64	; 0x40
 8009ec2:	2202      	movs	r2, #2
 8009ec4:	2181      	movs	r1, #129	; 0x81
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f000 ff26 	bl	800ad18 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009ecc:	2501      	movs	r5, #1
 8009ece:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009ed0:	2340      	movs	r3, #64	; 0x40
 8009ed2:	2202      	movs	r2, #2
 8009ed4:	4629      	mov	r1, r5
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f000 ff1e 	bl	800ad18 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009edc:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009ee0:	2310      	movs	r3, #16
 8009ee2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8009ee6:	e7c8      	b.n	8009e7a <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ee8:	2340      	movs	r3, #64	; 0x40
 8009eea:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8009eee:	2101      	movs	r1, #1
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f000 ff5b 	bl	800adac <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8009ef6:	2500      	movs	r5, #0
 8009ef8:	e7db      	b.n	8009eb2 <USBD_CDC_Init+0x7a>

08009efa <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8009efa:	b119      	cbz	r1, 8009f04 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8009efc:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009f00:	2000      	movs	r0, #0
 8009f02:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8009f04:	2003      	movs	r0, #3
}
 8009f06:	4770      	bx	lr

08009f08 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f08:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8009f0c:	b12b      	cbz	r3, 8009f1a <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8009f0e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009f12:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009f16:	2000      	movs	r0, #0
 8009f18:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8009f1a:	2003      	movs	r0, #3
}
 8009f1c:	4770      	bx	lr

08009f1e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f1e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8009f22:	b11b      	cbz	r3, 8009f2c <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8009f24:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009f28:	2000      	movs	r0, #0
 8009f2a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8009f2c:	2003      	movs	r0, #3
}
 8009f2e:	4770      	bx	lr

08009f30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009f30:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f32:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8009f36:	b192      	cbz	r2, 8009f5e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f38:	7c04      	ldrb	r4, [r0, #16]
 8009f3a:	b944      	cbnz	r4, 8009f4e <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f40:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8009f44:	2101      	movs	r1, #1
 8009f46:	f000 ff31 	bl	800adac <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f4e:	2340      	movs	r3, #64	; 0x40
 8009f50:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8009f54:	2101      	movs	r1, #1
 8009f56:	f000 ff29 	bl	800adac <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8009f5a:	2400      	movs	r4, #0
 8009f5c:	e7f5      	b.n	8009f4a <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8009f5e:	2403      	movs	r4, #3
 8009f60:	e7f3      	b.n	8009f4a <USBD_CDC_ReceivePacket+0x1a>

08009f62 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f62:	b198      	cbz	r0, 8009f8c <USBD_Init+0x2a>
{
 8009f64:	b508      	push	{r3, lr}
 8009f66:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009f68:	2000      	movs	r0, #0
 8009f6a:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009f6e:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009f72:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009f76:	b109      	cbz	r1, 8009f7c <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8009f78:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f7c:	2101      	movs	r1, #1
 8009f7e:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8009f82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009f84:	4618      	mov	r0, r3
 8009f86:	f000 fe7b 	bl	800ac80 <USBD_LL_Init>

  return ret;
}
 8009f8a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8009f8c:	2003      	movs	r0, #3
}
 8009f8e:	4770      	bx	lr

08009f90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009f90:	b510      	push	{r4, lr}
 8009f92:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8009f94:	2300      	movs	r3, #0
 8009f96:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8009f9a:	b161      	cbz	r1, 8009fb6 <USBD_RegisterClass+0x26>
 8009f9c:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009f9e:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009fa2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8009fa4:	b14b      	cbz	r3, 8009fba <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009fa6:	f10d 0006 	add.w	r0, sp, #6
 8009faa:	4798      	blx	r3
 8009fac:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009fb0:	2000      	movs	r0, #0
}
 8009fb2:	b002      	add	sp, #8
 8009fb4:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8009fb6:	2003      	movs	r0, #3
 8009fb8:	e7fb      	b.n	8009fb2 <USBD_RegisterClass+0x22>
  return USBD_OK;
 8009fba:	2000      	movs	r0, #0
 8009fbc:	e7f9      	b.n	8009fb2 <USBD_RegisterClass+0x22>

08009fbe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009fbe:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009fc0:	f000 fea2 	bl	800ad08 <USBD_LL_Start>
}
 8009fc4:	bd08      	pop	{r3, pc}

08009fc6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fc6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8009fc8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8009fcc:	b113      	cbz	r3, 8009fd4 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4798      	blx	r3
  }

  return ret;
}
 8009fd2:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009fd4:	2003      	movs	r0, #3
 8009fd6:	e7fc      	b.n	8009fd2 <USBD_SetClassConfig+0xc>

08009fd8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fd8:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009fda:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8009fde:	b10b      	cbz	r3, 8009fe4 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	4798      	blx	r3
  }

  return USBD_OK;
}
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	bd08      	pop	{r3, pc}

08009fe8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009fe8:	b538      	push	{r3, r4, r5, lr}
 8009fea:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009fec:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	f000 f92f 	bl	800a254 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009ffc:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800a000:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a004:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800a008:	f001 031f 	and.w	r3, r1, #31
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d00d      	beq.n	800a02c <USBD_LL_SetupStage+0x44>
 800a010:	2b02      	cmp	r3, #2
 800a012:	d010      	beq.n	800a036 <USBD_LL_SetupStage+0x4e>
 800a014:	b12b      	cbz	r3, 800a022 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a016:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800a01a:	4620      	mov	r0, r4
 800a01c:	f000 fe8f 	bl	800ad3e <USBD_LL_StallEP>
      break;
 800a020:	e003      	b.n	800a02a <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a022:	4629      	mov	r1, r5
 800a024:	4620      	mov	r0, r4
 800a026:	f000 fae4 	bl	800a5f2 <USBD_StdDevReq>
  }

  return ret;
}
 800a02a:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a02c:	4629      	mov	r1, r5
 800a02e:	4620      	mov	r0, r4
 800a030:	f000 fb17 	bl	800a662 <USBD_StdItfReq>
      break;
 800a034:	e7f9      	b.n	800a02a <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a036:	4629      	mov	r1, r5
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 fb46 	bl	800a6ca <USBD_StdEPReq>
      break;
 800a03e:	e7f4      	b.n	800a02a <USBD_LL_SetupStage+0x42>

0800a040 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a040:	b538      	push	{r3, r4, r5, lr}
 800a042:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a044:	460d      	mov	r5, r1
 800a046:	bb41      	cbnz	r1, 800a09a <USBD_LL_DataOutStage+0x5a>
 800a048:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a04a:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800a04e:	2a03      	cmp	r2, #3
 800a050:	d001      	beq.n	800a056 <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 800a052:	4608      	mov	r0, r1
}
 800a054:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800a056:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 800a05a:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800a05e:	4291      	cmp	r1, r2
 800a060:	d809      	bhi.n	800a076 <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a062:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a066:	b2db      	uxtb	r3, r3
 800a068:	2b03      	cmp	r3, #3
 800a06a:	d00f      	beq.n	800a08c <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 800a06c:	4620      	mov	r0, r4
 800a06e:	f000 fc6b 	bl	800a948 <USBD_CtlSendStatus>
  return USBD_OK;
 800a072:	4628      	mov	r0, r5
 800a074:	e7ee      	b.n	800a054 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800a076:	1a89      	subs	r1, r1, r2
 800a078:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a07c:	428a      	cmp	r2, r1
 800a07e:	bf28      	it	cs
 800a080:	460a      	movcs	r2, r1
 800a082:	4619      	mov	r1, r3
 800a084:	f000 fc58 	bl	800a938 <USBD_CtlContinueRx>
  return USBD_OK;
 800a088:	4628      	mov	r0, r5
 800a08a:	e7e3      	b.n	800a054 <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 800a08c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d0ea      	beq.n	800a06c <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 800a096:	4798      	blx	r3
 800a098:	e7e8      	b.n	800a06c <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a09a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	2b03      	cmp	r3, #3
 800a0a2:	d001      	beq.n	800a0a8 <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 800a0a4:	2000      	movs	r0, #0
 800a0a6:	e7d5      	b.n	800a054 <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 800a0a8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a0ac:	699b      	ldr	r3, [r3, #24]
 800a0ae:	b10b      	cbz	r3, 800a0b4 <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a0b0:	4798      	blx	r3
        if (ret != USBD_OK)
 800a0b2:	e7cf      	b.n	800a054 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	e7cd      	b.n	800a054 <USBD_LL_DataOutStage+0x14>

0800a0b8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a0b8:	b538      	push	{r3, r4, r5, lr}
 800a0ba:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a0bc:	460d      	mov	r5, r1
 800a0be:	2900      	cmp	r1, #0
 800a0c0:	d14a      	bne.n	800a158 <USBD_LL_DataInStage+0xa0>
 800a0c2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a0c4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800a0c8:	2a02      	cmp	r2, #2
 800a0ca:	d005      	beq.n	800a0d8 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a0cc:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d03c      	beq.n	800a14e <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 800a0d4:	4628      	mov	r0, r5
}
 800a0d6:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800a0d8:	69c2      	ldr	r2, [r0, #28]
 800a0da:	6a01      	ldr	r1, [r0, #32]
 800a0dc:	428a      	cmp	r2, r1
 800a0de:	d80e      	bhi.n	800a0fe <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 800a0e0:	428a      	cmp	r2, r1
 800a0e2:	d018      	beq.n	800a116 <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0e4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b03      	cmp	r3, #3
 800a0ec:	d027      	beq.n	800a13e <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0ee:	2180      	movs	r1, #128	; 0x80
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f000 fe24 	bl	800ad3e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f000 fc31 	bl	800a95e <USBD_CtlReceiveStatus>
 800a0fc:	e7e6      	b.n	800a0cc <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800a0fe:	1a52      	subs	r2, r2, r1
 800a100:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a102:	4619      	mov	r1, r3
 800a104:	f000 fc01 	bl	800a90a <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a108:	2300      	movs	r3, #0
 800a10a:	461a      	mov	r2, r3
 800a10c:	4619      	mov	r1, r3
 800a10e:	4620      	mov	r0, r4
 800a110:	f000 fe4c 	bl	800adac <USBD_LL_PrepareReceive>
 800a114:	e7da      	b.n	800a0cc <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800a116:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800a118:	4299      	cmp	r1, r3
 800a11a:	d8e3      	bhi.n	800a0e4 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 800a11c:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a120:	4293      	cmp	r3, r2
 800a122:	d2df      	bcs.n	800a0e4 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a124:	2200      	movs	r2, #0
 800a126:	4611      	mov	r1, r2
 800a128:	f000 fbef 	bl	800a90a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a12c:	2100      	movs	r1, #0
 800a12e:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a132:	460b      	mov	r3, r1
 800a134:	460a      	mov	r2, r1
 800a136:	4620      	mov	r0, r4
 800a138:	f000 fe38 	bl	800adac <USBD_LL_PrepareReceive>
 800a13c:	e7c6      	b.n	800a0cc <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 800a13e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d0d2      	beq.n	800a0ee <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 800a148:	4620      	mov	r0, r4
 800a14a:	4798      	blx	r3
 800a14c:	e7cf      	b.n	800a0ee <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 800a14e:	2300      	movs	r3, #0
 800a150:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 800a154:	4628      	mov	r0, r5
 800a156:	e7be      	b.n	800a0d6 <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a158:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d001      	beq.n	800a166 <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 800a162:	2000      	movs	r0, #0
 800a164:	e7b7      	b.n	800a0d6 <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 800a166:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a16a:	695b      	ldr	r3, [r3, #20]
 800a16c:	b10b      	cbz	r3, 800a172 <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a16e:	4798      	blx	r3
        if (ret != USBD_OK)
 800a170:	e7b1      	b.n	800a0d6 <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 800a172:	2000      	movs	r0, #0
 800a174:	e7af      	b.n	800a0d6 <USBD_LL_DataInStage+0x1e>

0800a176 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a176:	2301      	movs	r3, #1
 800a178:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a17c:	2300      	movs	r3, #0
 800a17e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800a182:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800a184:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a188:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a18c:	b1f3      	cbz	r3, 800a1cc <USBD_LL_Reset+0x56>
{
 800a18e:	b570      	push	{r4, r5, r6, lr}
 800a190:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800a192:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800a196:	b11a      	cbz	r2, 800a1a0 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	b10b      	cbz	r3, 800a1a0 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a19c:	2100      	movs	r1, #0
 800a19e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1a0:	2340      	movs	r3, #64	; 0x40
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	4611      	mov	r1, r2
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f000 fdb6 	bl	800ad18 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a1ac:	2601      	movs	r6, #1
 800a1ae:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a1b2:	2540      	movs	r5, #64	; 0x40
 800a1b4:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1b8:	462b      	mov	r3, r5
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	2180      	movs	r1, #128	; 0x80
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f000 fdaa 	bl	800ad18 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a1c4:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a1c6:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800a1c8:	2000      	movs	r0, #0
}
 800a1ca:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800a1cc:	2003      	movs	r0, #3
}
 800a1ce:	4770      	bx	lr

0800a1d0 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800a1d0:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	4770      	bx	lr

0800a1d6 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800a1d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a1e0:	2304      	movs	r3, #4
 800a1e2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800a1e6:	2000      	movs	r0, #0
 800a1e8:	4770      	bx	lr

0800a1ea <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a1ea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	d001      	beq.n	800a1f8 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800a1f8:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800a202:	e7f7      	b.n	800a1f4 <USBD_LL_Resume+0xa>

0800a204 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800a204:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800a208:	b162      	cbz	r2, 800a224 <USBD_LL_SOF+0x20>
{
 800a20a:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a20c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a210:	b2db      	uxtb	r3, r3
 800a212:	2b03      	cmp	r3, #3
 800a214:	d001      	beq.n	800a21a <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800a216:	2000      	movs	r0, #0
}
 800a218:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800a21a:	69d3      	ldr	r3, [r2, #28]
 800a21c:	b123      	cbz	r3, 800a228 <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 800a21e:	4798      	blx	r3
  return USBD_OK;
 800a220:	2000      	movs	r0, #0
 800a222:	e7f9      	b.n	800a218 <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 800a224:	2003      	movs	r0, #3
}
 800a226:	4770      	bx	lr
  return USBD_OK;
 800a228:	2000      	movs	r0, #0
 800a22a:	e7f5      	b.n	800a218 <USBD_LL_SOF+0x14>

0800a22c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a22c:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800a22e:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800a230:	e002      	b.n	800a238 <USBD_GetLen+0xc>
  {
    len++;
 800a232:	3001      	adds	r0, #1
 800a234:	b2c0      	uxtb	r0, r0
    pbuff++;
 800a236:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800a238:	781a      	ldrb	r2, [r3, #0]
 800a23a:	2a00      	cmp	r2, #0
 800a23c:	d1f9      	bne.n	800a232 <USBD_GetLen+0x6>
  }

  return len;
}
 800a23e:	4770      	bx	lr

0800a240 <USBD_SetFeature>:
{
 800a240:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a242:	884b      	ldrh	r3, [r1, #2]
 800a244:	2b01      	cmp	r3, #1
 800a246:	d000      	beq.n	800a24a <USBD_SetFeature+0xa>
}
 800a248:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800a24a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a24e:	f000 fb7b 	bl	800a948 <USBD_CtlSendStatus>
}
 800a252:	e7f9      	b.n	800a248 <USBD_SetFeature+0x8>

0800a254 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800a254:	780b      	ldrb	r3, [r1, #0]
 800a256:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800a258:	784b      	ldrb	r3, [r1, #1]
 800a25a:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800a25c:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800a25e:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a260:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800a264:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800a266:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800a268:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a26a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800a26e:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800a270:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800a272:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a274:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800a278:	80c3      	strh	r3, [r0, #6]
}
 800a27a:	4770      	bx	lr

0800a27c <USBD_CtlError>:
{
 800a27c:	b510      	push	{r4, lr}
 800a27e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a280:	2180      	movs	r1, #128	; 0x80
 800a282:	f000 fd5c 	bl	800ad3e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a286:	2100      	movs	r1, #0
 800a288:	4620      	mov	r0, r4
 800a28a:	f000 fd58 	bl	800ad3e <USBD_LL_StallEP>
}
 800a28e:	bd10      	pop	{r4, pc}

0800a290 <USBD_GetDescriptor>:
{
 800a290:	b530      	push	{r4, r5, lr}
 800a292:	b083      	sub	sp, #12
 800a294:	4604      	mov	r4, r0
 800a296:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800a298:	2300      	movs	r3, #0
 800a29a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800a29e:	884a      	ldrh	r2, [r1, #2]
 800a2a0:	0a13      	lsrs	r3, r2, #8
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	2b0e      	cmp	r3, #14
 800a2a6:	f200 80bc 	bhi.w	800a422 <USBD_GetDescriptor+0x192>
 800a2aa:	e8df f003 	tbb	[pc, r3]
 800a2ae:	3015      	.short	0x3015
 800a2b0:	9ebaba44 	.word	0x9ebaba44
 800a2b4:	bababaab 	.word	0xbababaab
 800a2b8:	babababa 	.word	0xbabababa
 800a2bc:	08          	.byte	0x08
 800a2bd:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a2be:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a2c2:	69db      	ldr	r3, [r3, #28]
 800a2c4:	b123      	cbz	r3, 800a2d0 <USBD_GetDescriptor+0x40>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a2c6:	f10d 0106 	add.w	r1, sp, #6
 800a2ca:	7c00      	ldrb	r0, [r0, #16]
 800a2cc:	4798      	blx	r3
  if (err != 0U)
 800a2ce:	e00a      	b.n	800a2e6 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800a2d0:	4629      	mov	r1, r5
 800a2d2:	f7ff ffd3 	bl	800a27c <USBD_CtlError>
  if (err != 0U)
 800a2d6:	e018      	b.n	800a30a <USBD_GetDescriptor+0x7a>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a2d8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f10d 0106 	add.w	r1, sp, #6
 800a2e2:	7c00      	ldrb	r0, [r0, #16]
 800a2e4:	4798      	blx	r3
  if (req->wLength != 0U)
 800a2e6:	88ea      	ldrh	r2, [r5, #6]
 800a2e8:	2a00      	cmp	r2, #0
 800a2ea:	f000 80a3 	beq.w	800a434 <USBD_GetDescriptor+0x1a4>
    if (len != 0U)
 800a2ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f000 8099 	beq.w	800a42a <USBD_GetDescriptor+0x19a>
      len = MIN(len, req->wLength);
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	bf28      	it	cs
 800a2fc:	461a      	movcs	r2, r3
 800a2fe:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a302:	4601      	mov	r1, r0
 800a304:	4620      	mov	r0, r4
 800a306:	f000 faf3 	bl	800a8f0 <USBD_CtlSendData>
}
 800a30a:	b003      	add	sp, #12
 800a30c:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a30e:	7c03      	ldrb	r3, [r0, #16]
 800a310:	b943      	cbnz	r3, 800a324 <USBD_GetDescriptor+0x94>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a312:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a318:	f10d 0006 	add.w	r0, sp, #6
 800a31c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a31e:	2302      	movs	r3, #2
 800a320:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a322:	e7e0      	b.n	800a2e6 <USBD_GetDescriptor+0x56>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a324:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32a:	f10d 0006 	add.w	r0, sp, #6
 800a32e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a330:	2302      	movs	r3, #2
 800a332:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a334:	e7d7      	b.n	800a2e6 <USBD_GetDescriptor+0x56>
      switch ((uint8_t)(req->wValue))
 800a336:	b2d2      	uxtb	r2, r2
 800a338:	2a05      	cmp	r2, #5
 800a33a:	d852      	bhi.n	800a3e2 <USBD_GetDescriptor+0x152>
 800a33c:	e8df f002 	tbb	[pc, r2]
 800a340:	2a1d1003 	.word	0x2a1d1003
 800a344:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a346:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	b123      	cbz	r3, 800a358 <USBD_GetDescriptor+0xc8>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a34e:	f10d 0106 	add.w	r1, sp, #6
 800a352:	7c00      	ldrb	r0, [r0, #16]
 800a354:	4798      	blx	r3
  if (err != 0U)
 800a356:	e7c6      	b.n	800a2e6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a358:	4629      	mov	r1, r5
 800a35a:	f7ff ff8f 	bl	800a27c <USBD_CtlError>
  if (err != 0U)
 800a35e:	e7d4      	b.n	800a30a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a360:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	b123      	cbz	r3, 800a372 <USBD_GetDescriptor+0xe2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a368:	f10d 0106 	add.w	r1, sp, #6
 800a36c:	7c00      	ldrb	r0, [r0, #16]
 800a36e:	4798      	blx	r3
  if (err != 0U)
 800a370:	e7b9      	b.n	800a2e6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a372:	4629      	mov	r1, r5
 800a374:	f7ff ff82 	bl	800a27c <USBD_CtlError>
  if (err != 0U)
 800a378:	e7c7      	b.n	800a30a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a37a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	b123      	cbz	r3, 800a38c <USBD_GetDescriptor+0xfc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a382:	f10d 0106 	add.w	r1, sp, #6
 800a386:	7c00      	ldrb	r0, [r0, #16]
 800a388:	4798      	blx	r3
  if (err != 0U)
 800a38a:	e7ac      	b.n	800a2e6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a38c:	4629      	mov	r1, r5
 800a38e:	f7ff ff75 	bl	800a27c <USBD_CtlError>
  if (err != 0U)
 800a392:	e7ba      	b.n	800a30a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a394:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	b123      	cbz	r3, 800a3a6 <USBD_GetDescriptor+0x116>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a39c:	f10d 0106 	add.w	r1, sp, #6
 800a3a0:	7c00      	ldrb	r0, [r0, #16]
 800a3a2:	4798      	blx	r3
  if (err != 0U)
 800a3a4:	e79f      	b.n	800a2e6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a3a6:	4629      	mov	r1, r5
 800a3a8:	f7ff ff68 	bl	800a27c <USBD_CtlError>
  if (err != 0U)
 800a3ac:	e7ad      	b.n	800a30a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a3ae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a3b2:	695b      	ldr	r3, [r3, #20]
 800a3b4:	b123      	cbz	r3, 800a3c0 <USBD_GetDescriptor+0x130>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a3b6:	f10d 0106 	add.w	r1, sp, #6
 800a3ba:	7c00      	ldrb	r0, [r0, #16]
 800a3bc:	4798      	blx	r3
  if (err != 0U)
 800a3be:	e792      	b.n	800a2e6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a3c0:	4629      	mov	r1, r5
 800a3c2:	f7ff ff5b 	bl	800a27c <USBD_CtlError>
  if (err != 0U)
 800a3c6:	e7a0      	b.n	800a30a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a3c8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a3cc:	699b      	ldr	r3, [r3, #24]
 800a3ce:	b123      	cbz	r3, 800a3da <USBD_GetDescriptor+0x14a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a3d0:	f10d 0106 	add.w	r1, sp, #6
 800a3d4:	7c00      	ldrb	r0, [r0, #16]
 800a3d6:	4798      	blx	r3
  if (err != 0U)
 800a3d8:	e785      	b.n	800a2e6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a3da:	4629      	mov	r1, r5
 800a3dc:	f7ff ff4e 	bl	800a27c <USBD_CtlError>
  if (err != 0U)
 800a3e0:	e793      	b.n	800a30a <USBD_GetDescriptor+0x7a>
          USBD_CtlError(pdev, req);
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	f7ff ff4a 	bl	800a27c <USBD_CtlError>
  if (err != 0U)
 800a3e8:	e78f      	b.n	800a30a <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3ea:	7c03      	ldrb	r3, [r0, #16]
 800a3ec:	b933      	cbnz	r3, 800a3fc <USBD_GetDescriptor+0x16c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a3ee:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a3f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f4:	f10d 0006 	add.w	r0, sp, #6
 800a3f8:	4798      	blx	r3
  if (err != 0U)
 800a3fa:	e774      	b.n	800a2e6 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	f7ff ff3d 	bl	800a27c <USBD_CtlError>
  if (err != 0U)
 800a402:	e782      	b.n	800a30a <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a404:	7c03      	ldrb	r3, [r0, #16]
 800a406:	b943      	cbnz	r3, 800a41a <USBD_GetDescriptor+0x18a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a408:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40e:	f10d 0006 	add.w	r0, sp, #6
 800a412:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a414:	2307      	movs	r3, #7
 800a416:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a418:	e765      	b.n	800a2e6 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800a41a:	4629      	mov	r1, r5
 800a41c:	f7ff ff2e 	bl	800a27c <USBD_CtlError>
  if (err != 0U)
 800a420:	e773      	b.n	800a30a <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 800a422:	4629      	mov	r1, r5
 800a424:	f7ff ff2a 	bl	800a27c <USBD_CtlError>
    return;
 800a428:	e76f      	b.n	800a30a <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 800a42a:	4629      	mov	r1, r5
 800a42c:	4620      	mov	r0, r4
 800a42e:	f7ff ff25 	bl	800a27c <USBD_CtlError>
 800a432:	e76a      	b.n	800a30a <USBD_GetDescriptor+0x7a>
    (void)USBD_CtlSendStatus(pdev);
 800a434:	4620      	mov	r0, r4
 800a436:	f000 fa87 	bl	800a948 <USBD_CtlSendStatus>
 800a43a:	e766      	b.n	800a30a <USBD_GetDescriptor+0x7a>

0800a43c <USBD_SetAddress>:
{
 800a43c:	b538      	push	{r3, r4, r5, lr}
 800a43e:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a440:	888b      	ldrh	r3, [r1, #4]
 800a442:	b9fb      	cbnz	r3, 800a484 <USBD_SetAddress+0x48>
 800a444:	88cb      	ldrh	r3, [r1, #6]
 800a446:	b9eb      	cbnz	r3, 800a484 <USBD_SetAddress+0x48>
 800a448:	884b      	ldrh	r3, [r1, #2]
 800a44a:	2b7f      	cmp	r3, #127	; 0x7f
 800a44c:	d81a      	bhi.n	800a484 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a44e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a452:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a456:	b2db      	uxtb	r3, r3
 800a458:	2b03      	cmp	r3, #3
 800a45a:	d00c      	beq.n	800a476 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 800a45c:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a460:	4629      	mov	r1, r5
 800a462:	f000 fc93 	bl	800ad8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a466:	4620      	mov	r0, r4
 800a468:	f000 fa6e 	bl	800a948 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800a46c:	b135      	cbz	r5, 800a47c <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a46e:	2302      	movs	r3, #2
 800a470:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800a474:	e009      	b.n	800a48a <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 800a476:	f7ff ff01 	bl	800a27c <USBD_CtlError>
 800a47a:	e006      	b.n	800a48a <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a47c:	2301      	movs	r3, #1
 800a47e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800a482:	e002      	b.n	800a48a <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 800a484:	4620      	mov	r0, r4
 800a486:	f7ff fef9 	bl	800a27c <USBD_CtlError>
}
 800a48a:	bd38      	pop	{r3, r4, r5, pc}

0800a48c <USBD_SetConfig>:
{
 800a48c:	b570      	push	{r4, r5, r6, lr}
 800a48e:	4604      	mov	r4, r0
 800a490:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800a492:	788d      	ldrb	r5, [r1, #2]
 800a494:	4b2e      	ldr	r3, [pc, #184]	; (800a550 <USBD_SetConfig+0xc4>)
 800a496:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a498:	2d01      	cmp	r5, #1
 800a49a:	d810      	bhi.n	800a4be <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800a49c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	d00f      	beq.n	800a4c6 <USBD_SetConfig+0x3a>
 800a4a6:	2b03      	cmp	r3, #3
 800a4a8:	d023      	beq.n	800a4f2 <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 800a4aa:	f7ff fee7 	bl	800a27c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4ae:	4b28      	ldr	r3, [pc, #160]	; (800a550 <USBD_SetConfig+0xc4>)
 800a4b0:	7819      	ldrb	r1, [r3, #0]
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f7ff fd90 	bl	8009fd8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a4b8:	2503      	movs	r5, #3
}
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800a4be:	f7ff fedd 	bl	800a27c <USBD_CtlError>
    return USBD_FAIL;
 800a4c2:	2503      	movs	r5, #3
 800a4c4:	e7f9      	b.n	800a4ba <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800a4c6:	b18d      	cbz	r5, 800a4ec <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 800a4c8:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	f7ff fd7b 	bl	8009fc6 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	b120      	cbz	r0, 800a4de <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 800a4d4:	4631      	mov	r1, r6
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f7ff fed0 	bl	800a27c <USBD_CtlError>
 800a4dc:	e7ed      	b.n	800a4ba <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800a4de:	4620      	mov	r0, r4
 800a4e0:	f000 fa32 	bl	800a948 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800a4ea:	e7e6      	b.n	800a4ba <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800a4ec:	f000 fa2c 	bl	800a948 <USBD_CtlSendStatus>
 800a4f0:	e7e3      	b.n	800a4ba <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800a4f2:	b1cd      	cbz	r5, 800a528 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 800a4f4:	6841      	ldr	r1, [r0, #4]
 800a4f6:	428d      	cmp	r5, r1
 800a4f8:	d025      	beq.n	800a546 <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4fa:	b2c9      	uxtb	r1, r1
 800a4fc:	f7ff fd6c 	bl	8009fd8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a500:	4b13      	ldr	r3, [pc, #76]	; (800a550 <USBD_SetConfig+0xc4>)
 800a502:	7819      	ldrb	r1, [r3, #0]
 800a504:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a506:	4620      	mov	r0, r4
 800a508:	f7ff fd5d 	bl	8009fc6 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a50c:	4605      	mov	r5, r0
 800a50e:	b1b0      	cbz	r0, 800a53e <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 800a510:	4631      	mov	r1, r6
 800a512:	4620      	mov	r0, r4
 800a514:	f7ff feb2 	bl	800a27c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a518:	7921      	ldrb	r1, [r4, #4]
 800a51a:	4620      	mov	r0, r4
 800a51c:	f7ff fd5c 	bl	8009fd8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a520:	2302      	movs	r3, #2
 800a522:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800a526:	e7c8      	b.n	800a4ba <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a528:	2302      	movs	r3, #2
 800a52a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a52e:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a530:	4629      	mov	r1, r5
 800a532:	f7ff fd51 	bl	8009fd8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a536:	4620      	mov	r0, r4
 800a538:	f000 fa06 	bl	800a948 <USBD_CtlSendStatus>
 800a53c:	e7bd      	b.n	800a4ba <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800a53e:	4620      	mov	r0, r4
 800a540:	f000 fa02 	bl	800a948 <USBD_CtlSendStatus>
 800a544:	e7b9      	b.n	800a4ba <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800a546:	f000 f9ff 	bl	800a948 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800a54a:	2500      	movs	r5, #0
 800a54c:	e7b5      	b.n	800a4ba <USBD_SetConfig+0x2e>
 800a54e:	bf00      	nop
 800a550:	20000f20 	.word	0x20000f20

0800a554 <USBD_GetConfig>:
{
 800a554:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800a556:	88cb      	ldrh	r3, [r1, #6]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d10b      	bne.n	800a574 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800a55c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a560:	b2db      	uxtb	r3, r3
 800a562:	2b02      	cmp	r3, #2
 800a564:	d909      	bls.n	800a57a <USBD_GetConfig+0x26>
 800a566:	2b03      	cmp	r3, #3
 800a568:	d109      	bne.n	800a57e <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a56a:	2201      	movs	r2, #1
 800a56c:	1d01      	adds	r1, r0, #4
 800a56e:	f000 f9bf 	bl	800a8f0 <USBD_CtlSendData>
        break;
 800a572:	e001      	b.n	800a578 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800a574:	f7ff fe82 	bl	800a27c <USBD_CtlError>
}
 800a578:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800a57a:	b25b      	sxtb	r3, r3
 800a57c:	b913      	cbnz	r3, 800a584 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 800a57e:	f7ff fe7d 	bl	800a27c <USBD_CtlError>
}
 800a582:	e7f9      	b.n	800a578 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 800a584:	4601      	mov	r1, r0
 800a586:	2300      	movs	r3, #0
 800a588:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a58c:	2201      	movs	r2, #1
 800a58e:	f000 f9af 	bl	800a8f0 <USBD_CtlSendData>
        break;
 800a592:	e7f1      	b.n	800a578 <USBD_GetConfig+0x24>

0800a594 <USBD_GetStatus>:
{
 800a594:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800a596:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a59a:	3b01      	subs	r3, #1
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	d812      	bhi.n	800a5c6 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800a5a0:	88cb      	ldrh	r3, [r1, #6]
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d10c      	bne.n	800a5c0 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800a5aa:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800a5ae:	b10b      	cbz	r3, 800a5b4 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a5b4:	2202      	movs	r2, #2
 800a5b6:	f100 010c 	add.w	r1, r0, #12
 800a5ba:	f000 f999 	bl	800a8f0 <USBD_CtlSendData>
}
 800a5be:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800a5c0:	f7ff fe5c 	bl	800a27c <USBD_CtlError>
        break;
 800a5c4:	e7fb      	b.n	800a5be <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800a5c6:	f7ff fe59 	bl	800a27c <USBD_CtlError>
}
 800a5ca:	e7f8      	b.n	800a5be <USBD_GetStatus+0x2a>

0800a5cc <USBD_ClrFeature>:
{
 800a5cc:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800a5ce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	2b02      	cmp	r3, #2
 800a5d6:	d809      	bhi.n	800a5ec <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5d8:	884b      	ldrh	r3, [r1, #2]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d000      	beq.n	800a5e0 <USBD_ClrFeature+0x14>
}
 800a5de:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a5e6:	f000 f9af 	bl	800a948 <USBD_CtlSendStatus>
 800a5ea:	e7f8      	b.n	800a5de <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800a5ec:	f7ff fe46 	bl	800a27c <USBD_CtlError>
}
 800a5f0:	e7f5      	b.n	800a5de <USBD_ClrFeature+0x12>

0800a5f2 <USBD_StdDevReq>:
{
 800a5f2:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5f4:	780c      	ldrb	r4, [r1, #0]
 800a5f6:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800a5fa:	2c20      	cmp	r4, #32
 800a5fc:	d006      	beq.n	800a60c <USBD_StdDevReq+0x1a>
 800a5fe:	2c40      	cmp	r4, #64	; 0x40
 800a600:	d004      	beq.n	800a60c <USBD_StdDevReq+0x1a>
 800a602:	b154      	cbz	r4, 800a61a <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 800a604:	f7ff fe3a 	bl	800a27c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a608:	2400      	movs	r4, #0
      break;
 800a60a:	e004      	b.n	800a616 <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a60c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	4798      	blx	r3
 800a614:	4604      	mov	r4, r0
}
 800a616:	4620      	mov	r0, r4
 800a618:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800a61a:	784d      	ldrb	r5, [r1, #1]
 800a61c:	2d09      	cmp	r5, #9
 800a61e:	d81d      	bhi.n	800a65c <USBD_StdDevReq+0x6a>
 800a620:	e8df f005 	tbb	[pc, r5]
 800a624:	161c1912 	.word	0x161c1912
 800a628:	1c05081c 	.word	0x1c05081c
 800a62c:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800a62e:	f7ff fe2f 	bl	800a290 <USBD_GetDescriptor>
          break;
 800a632:	e7f0      	b.n	800a616 <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 800a634:	f7ff ff02 	bl	800a43c <USBD_SetAddress>
          break;
 800a638:	e7ed      	b.n	800a616 <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 800a63a:	f7ff ff27 	bl	800a48c <USBD_SetConfig>
 800a63e:	4604      	mov	r4, r0
          break;
 800a640:	e7e9      	b.n	800a616 <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 800a642:	f7ff ff87 	bl	800a554 <USBD_GetConfig>
          break;
 800a646:	e7e6      	b.n	800a616 <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 800a648:	f7ff ffa4 	bl	800a594 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800a64c:	462c      	mov	r4, r5
          break;
 800a64e:	e7e2      	b.n	800a616 <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 800a650:	f7ff fdf6 	bl	800a240 <USBD_SetFeature>
          break;
 800a654:	e7df      	b.n	800a616 <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 800a656:	f7ff ffb9 	bl	800a5cc <USBD_ClrFeature>
          break;
 800a65a:	e7dc      	b.n	800a616 <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 800a65c:	f7ff fe0e 	bl	800a27c <USBD_CtlError>
          break;
 800a660:	e7d9      	b.n	800a616 <USBD_StdDevReq+0x24>

0800a662 <USBD_StdItfReq>:
{
 800a662:	b570      	push	{r4, r5, r6, lr}
 800a664:	4605      	mov	r5, r0
 800a666:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a668:	780b      	ldrb	r3, [r1, #0]
 800a66a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a66e:	2b20      	cmp	r3, #32
 800a670:	d007      	beq.n	800a682 <USBD_StdItfReq+0x20>
 800a672:	2b40      	cmp	r3, #64	; 0x40
 800a674:	d005      	beq.n	800a682 <USBD_StdItfReq+0x20>
 800a676:	b123      	cbz	r3, 800a682 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800a678:	f7ff fe00 	bl	800a27c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a67c:	2600      	movs	r6, #0
}
 800a67e:	4630      	mov	r0, r6
 800a680:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800a682:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800a686:	3b01      	subs	r3, #1
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d818      	bhi.n	800a6be <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a68c:	7923      	ldrb	r3, [r4, #4]
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d80f      	bhi.n	800a6b2 <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a692:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	4621      	mov	r1, r4
 800a69a:	4628      	mov	r0, r5
 800a69c:	4798      	blx	r3
 800a69e:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a6a0:	88e3      	ldrh	r3, [r4, #6]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1eb      	bne.n	800a67e <USBD_StdItfReq+0x1c>
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	d1e9      	bne.n	800a67e <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	f000 f94c 	bl	800a948 <USBD_CtlSendStatus>
 800a6b0:	e7e5      	b.n	800a67e <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 800a6b2:	4621      	mov	r1, r4
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	f7ff fde1 	bl	800a27c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ba:	2600      	movs	r6, #0
 800a6bc:	e7df      	b.n	800a67e <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 800a6be:	4621      	mov	r1, r4
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	f7ff fddb 	bl	800a27c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a6c6:	2600      	movs	r6, #0
          break;
 800a6c8:	e7d9      	b.n	800a67e <USBD_StdItfReq+0x1c>

0800a6ca <USBD_StdEPReq>:
{
 800a6ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6cc:	4606      	mov	r6, r0
 800a6ce:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800a6d0:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6d2:	780c      	ldrb	r4, [r1, #0]
 800a6d4:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800a6d8:	2c20      	cmp	r4, #32
 800a6da:	d008      	beq.n	800a6ee <USBD_StdEPReq+0x24>
 800a6dc:	b2d9      	uxtb	r1, r3
 800a6de:	2c40      	cmp	r4, #64	; 0x40
 800a6e0:	d005      	beq.n	800a6ee <USBD_StdEPReq+0x24>
 800a6e2:	b16c      	cbz	r4, 800a700 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 800a6e4:	4629      	mov	r1, r5
 800a6e6:	f7ff fdc9 	bl	800a27c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ea:	2400      	movs	r4, #0
      break;
 800a6ec:	e006      	b.n	800a6fc <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6ee:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	4629      	mov	r1, r5
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	4798      	blx	r3
 800a6fa:	4604      	mov	r4, r0
}
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 800a700:	786f      	ldrb	r7, [r5, #1]
 800a702:	2f01      	cmp	r7, #1
 800a704:	d02f      	beq.n	800a766 <USBD_StdEPReq+0x9c>
 800a706:	2f03      	cmp	r7, #3
 800a708:	d005      	beq.n	800a716 <USBD_StdEPReq+0x4c>
 800a70a:	2f00      	cmp	r7, #0
 800a70c:	d059      	beq.n	800a7c2 <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 800a70e:	4629      	mov	r1, r5
 800a710:	f7ff fdb4 	bl	800a27c <USBD_CtlError>
          break;
 800a714:	e7f2      	b.n	800a6fc <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800a716:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	d005      	beq.n	800a72c <USBD_StdEPReq+0x62>
 800a720:	2b03      	cmp	r3, #3
 800a722:	d012      	beq.n	800a74a <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 800a724:	4629      	mov	r1, r5
 800a726:	f7ff fda9 	bl	800a27c <USBD_CtlError>
              break;
 800a72a:	e7e7      	b.n	800a6fc <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a72c:	b109      	cbz	r1, 800a732 <USBD_StdEPReq+0x68>
 800a72e:	2980      	cmp	r1, #128	; 0x80
 800a730:	d104      	bne.n	800a73c <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 800a732:	4629      	mov	r1, r5
 800a734:	4630      	mov	r0, r6
 800a736:	f7ff fda1 	bl	800a27c <USBD_CtlError>
 800a73a:	e7df      	b.n	800a6fc <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a73c:	f000 faff 	bl	800ad3e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a740:	2180      	movs	r1, #128	; 0x80
 800a742:	4630      	mov	r0, r6
 800a744:	f000 fafb 	bl	800ad3e <USBD_LL_StallEP>
 800a748:	e7d8      	b.n	800a6fc <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a74a:	886b      	ldrh	r3, [r5, #2]
 800a74c:	b923      	cbnz	r3, 800a758 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a74e:	b119      	cbz	r1, 800a758 <USBD_StdEPReq+0x8e>
 800a750:	2980      	cmp	r1, #128	; 0x80
 800a752:	d001      	beq.n	800a758 <USBD_StdEPReq+0x8e>
 800a754:	88eb      	ldrh	r3, [r5, #6]
 800a756:	b11b      	cbz	r3, 800a760 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 800a758:	4630      	mov	r0, r6
 800a75a:	f000 f8f5 	bl	800a948 <USBD_CtlSendStatus>
              break;
 800a75e:	e7cd      	b.n	800a6fc <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a760:	f000 faed 	bl	800ad3e <USBD_LL_StallEP>
 800a764:	e7f8      	b.n	800a758 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 800a766:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d005      	beq.n	800a77c <USBD_StdEPReq+0xb2>
 800a770:	2b03      	cmp	r3, #3
 800a772:	d012      	beq.n	800a79a <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 800a774:	4629      	mov	r1, r5
 800a776:	f7ff fd81 	bl	800a27c <USBD_CtlError>
              break;
 800a77a:	e7bf      	b.n	800a6fc <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a77c:	b109      	cbz	r1, 800a782 <USBD_StdEPReq+0xb8>
 800a77e:	2980      	cmp	r1, #128	; 0x80
 800a780:	d104      	bne.n	800a78c <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 800a782:	4629      	mov	r1, r5
 800a784:	4630      	mov	r0, r6
 800a786:	f7ff fd79 	bl	800a27c <USBD_CtlError>
 800a78a:	e7b7      	b.n	800a6fc <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a78c:	f000 fad7 	bl	800ad3e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a790:	2180      	movs	r1, #128	; 0x80
 800a792:	4630      	mov	r0, r6
 800a794:	f000 fad3 	bl	800ad3e <USBD_LL_StallEP>
 800a798:	e7b0      	b.n	800a6fc <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a79a:	886b      	ldrh	r3, [r5, #2]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1ad      	bne.n	800a6fc <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 800a7a0:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800a7a4:	d10a      	bne.n	800a7bc <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	f000 f8ce 	bl	800a948 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a7ac:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	4629      	mov	r1, r5
 800a7b4:	4630      	mov	r0, r6
 800a7b6:	4798      	blx	r3
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	e79f      	b.n	800a6fc <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a7bc:	f000 fac7 	bl	800ad4e <USBD_LL_ClearStallEP>
 800a7c0:	e7f1      	b.n	800a7a6 <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 800a7c2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800a7c6:	b2d2      	uxtb	r2, r2
 800a7c8:	2a02      	cmp	r2, #2
 800a7ca:	d006      	beq.n	800a7da <USBD_StdEPReq+0x110>
 800a7cc:	2a03      	cmp	r2, #3
 800a7ce:	d029      	beq.n	800a824 <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	f7ff fd53 	bl	800a27c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a7d6:	463c      	mov	r4, r7
              break;
 800a7d8:	e790      	b.n	800a6fc <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7da:	b109      	cbz	r1, 800a7e0 <USBD_StdEPReq+0x116>
 800a7dc:	2980      	cmp	r1, #128	; 0x80
 800a7de:	d113      	bne.n	800a808 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a7e4:	d115      	bne.n	800a812 <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7e6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7ea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a7ee:	0089      	lsls	r1, r1, #2
 800a7f0:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800a7f4:	4431      	add	r1, r6
 800a7f6:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a7fc:	2202      	movs	r2, #2
 800a7fe:	4630      	mov	r0, r6
 800a800:	f000 f876 	bl	800a8f0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a804:	463c      	mov	r4, r7
              break;
 800a806:	e779      	b.n	800a6fc <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 800a808:	4629      	mov	r1, r5
 800a80a:	f7ff fd37 	bl	800a27c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a80e:	463c      	mov	r4, r7
                break;
 800a810:	e774      	b.n	800a6fc <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a812:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a816:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a81a:	0089      	lsls	r1, r1, #2
 800a81c:	3110      	adds	r1, #16
 800a81e:	4431      	add	r1, r6
 800a820:	3104      	adds	r1, #4
 800a822:	e7e9      	b.n	800a7f8 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 800a824:	b25b      	sxtb	r3, r3
 800a826:	2b00      	cmp	r3, #0
 800a828:	db1f      	blt.n	800a86a <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a82a:	f001 020f 	and.w	r2, r1, #15
 800a82e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a832:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a836:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800a83a:	b322      	cbz	r2, 800a886 <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	db27      	blt.n	800a890 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a840:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a844:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a848:	009c      	lsls	r4, r3, #2
 800a84a:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 800a84e:	4434      	add	r4, r6
 800a850:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a852:	b109      	cbz	r1, 800a858 <USBD_StdEPReq+0x18e>
 800a854:	2980      	cmp	r1, #128	; 0x80
 800a856:	d124      	bne.n	800a8a2 <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 800a858:	2300      	movs	r3, #0
 800a85a:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a85c:	2202      	movs	r2, #2
 800a85e:	4621      	mov	r1, r4
 800a860:	4630      	mov	r0, r6
 800a862:	f000 f845 	bl	800a8f0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a866:	463c      	mov	r4, r7
              break;
 800a868:	e748      	b.n	800a6fc <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a86a:	f001 020f 	and.w	r2, r1, #15
 800a86e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a872:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a876:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800a878:	2a00      	cmp	r2, #0
 800a87a:	d1df      	bne.n	800a83c <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 800a87c:	4629      	mov	r1, r5
 800a87e:	f7ff fcfd 	bl	800a27c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a882:	463c      	mov	r4, r7
                  break;
 800a884:	e73a      	b.n	800a6fc <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 800a886:	4629      	mov	r1, r5
 800a888:	f7ff fcf8 	bl	800a27c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a88c:	463c      	mov	r4, r7
                  break;
 800a88e:	e735      	b.n	800a6fc <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a890:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800a894:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a898:	009c      	lsls	r4, r3, #2
 800a89a:	3410      	adds	r4, #16
 800a89c:	4434      	add	r4, r6
 800a89e:	3404      	adds	r4, #4
 800a8a0:	e7d7      	b.n	800a852 <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	f000 fa5b 	bl	800ad5e <USBD_LL_IsStallEP>
 800a8a8:	b110      	cbz	r0, 800a8b0 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	6023      	str	r3, [r4, #0]
 800a8ae:	e7d5      	b.n	800a85c <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	6023      	str	r3, [r4, #0]
 800a8b4:	e7d2      	b.n	800a85c <USBD_StdEPReq+0x192>

0800a8b6 <USBD_GetString>:
  if (desc == NULL)
 800a8b6:	b1d0      	cbz	r0, 800a8ee <USBD_GetString+0x38>
{
 800a8b8:	b570      	push	{r4, r5, r6, lr}
 800a8ba:	460d      	mov	r5, r1
 800a8bc:	4616      	mov	r6, r2
 800a8be:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a8c0:	f7ff fcb4 	bl	800a22c <USBD_GetLen>
 800a8c4:	1c43      	adds	r3, r0, #1
 800a8c6:	005b      	lsls	r3, r3, #1
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800a8cc:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a8ce:	2303      	movs	r3, #3
 800a8d0:	706b      	strb	r3, [r5, #1]
  idx++;
 800a8d2:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800a8d4:	e007      	b.n	800a8e6 <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 800a8d6:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800a8d8:	3401      	adds	r4, #1
    idx++;
 800a8da:	1c5a      	adds	r2, r3, #1
 800a8dc:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800a8de:	2100      	movs	r1, #0
 800a8e0:	54a9      	strb	r1, [r5, r2]
    idx++;
 800a8e2:	3302      	adds	r3, #2
 800a8e4:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800a8e6:	7822      	ldrb	r2, [r4, #0]
 800a8e8:	2a00      	cmp	r2, #0
 800a8ea:	d1f4      	bne.n	800a8d6 <USBD_GetString+0x20>
}
 800a8ec:	bd70      	pop	{r4, r5, r6, pc}
 800a8ee:	4770      	bx	lr

0800a8f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a8f0:	b508      	push	{r3, lr}
 800a8f2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a8f4:	2202      	movs	r2, #2
 800a8f6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a8fa:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a8fc:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8fe:	460a      	mov	r2, r1
 800a900:	2100      	movs	r1, #0
 800a902:	f000 fa4b 	bl	800ad9c <USBD_LL_Transmit>

  return USBD_OK;
}
 800a906:	2000      	movs	r0, #0
 800a908:	bd08      	pop	{r3, pc}

0800a90a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a90a:	b508      	push	{r3, lr}
 800a90c:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a90e:	460a      	mov	r2, r1
 800a910:	2100      	movs	r1, #0
 800a912:	f000 fa43 	bl	800ad9c <USBD_LL_Transmit>

  return USBD_OK;
}
 800a916:	2000      	movs	r0, #0
 800a918:	bd08      	pop	{r3, pc}

0800a91a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a91a:	b508      	push	{r3, lr}
 800a91c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a91e:	2203      	movs	r2, #3
 800a920:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a924:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a928:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a92c:	460a      	mov	r2, r1
 800a92e:	2100      	movs	r1, #0
 800a930:	f000 fa3c 	bl	800adac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a934:	2000      	movs	r0, #0
 800a936:	bd08      	pop	{r3, pc}

0800a938 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a938:	b508      	push	{r3, lr}
 800a93a:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a93c:	460a      	mov	r2, r1
 800a93e:	2100      	movs	r1, #0
 800a940:	f000 fa34 	bl	800adac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a944:	2000      	movs	r0, #0
 800a946:	bd08      	pop	{r3, pc}

0800a948 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a948:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a94a:	2204      	movs	r2, #4
 800a94c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a950:	2300      	movs	r3, #0
 800a952:	461a      	mov	r2, r3
 800a954:	4619      	mov	r1, r3
 800a956:	f000 fa21 	bl	800ad9c <USBD_LL_Transmit>

  return USBD_OK;
}
 800a95a:	2000      	movs	r0, #0
 800a95c:	bd08      	pop	{r3, pc}

0800a95e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a95e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a960:	2205      	movs	r2, #5
 800a962:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a966:	2300      	movs	r3, #0
 800a968:	461a      	mov	r2, r3
 800a96a:	4619      	mov	r1, r3
 800a96c:	f000 fa1e 	bl	800adac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a970:	2000      	movs	r0, #0
 800a972:	bd08      	pop	{r3, pc}

0800a974 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a974:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a976:	2200      	movs	r2, #0
 800a978:	490f      	ldr	r1, [pc, #60]	; (800a9b8 <MX_USB_Device_Init+0x44>)
 800a97a:	4810      	ldr	r0, [pc, #64]	; (800a9bc <MX_USB_Device_Init+0x48>)
 800a97c:	f7ff faf1 	bl	8009f62 <USBD_Init>
 800a980:	b970      	cbnz	r0, 800a9a0 <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a982:	490f      	ldr	r1, [pc, #60]	; (800a9c0 <MX_USB_Device_Init+0x4c>)
 800a984:	480d      	ldr	r0, [pc, #52]	; (800a9bc <MX_USB_Device_Init+0x48>)
 800a986:	f7ff fb03 	bl	8009f90 <USBD_RegisterClass>
 800a98a:	b960      	cbnz	r0, 800a9a6 <MX_USB_Device_Init+0x32>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a98c:	490d      	ldr	r1, [pc, #52]	; (800a9c4 <MX_USB_Device_Init+0x50>)
 800a98e:	480b      	ldr	r0, [pc, #44]	; (800a9bc <MX_USB_Device_Init+0x48>)
 800a990:	f7ff fab3 	bl	8009efa <USBD_CDC_RegisterInterface>
 800a994:	b950      	cbnz	r0, 800a9ac <MX_USB_Device_Init+0x38>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a996:	4809      	ldr	r0, [pc, #36]	; (800a9bc <MX_USB_Device_Init+0x48>)
 800a998:	f7ff fb11 	bl	8009fbe <USBD_Start>
 800a99c:	b948      	cbnz	r0, 800a9b2 <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a99e:	bd08      	pop	{r3, pc}
    Error_Handler();
 800a9a0:	f7f7 fa88 	bl	8001eb4 <Error_Handler>
 800a9a4:	e7ed      	b.n	800a982 <MX_USB_Device_Init+0xe>
    Error_Handler();
 800a9a6:	f7f7 fa85 	bl	8001eb4 <Error_Handler>
 800a9aa:	e7ef      	b.n	800a98c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a9ac:	f7f7 fa82 	bl	8001eb4 <Error_Handler>
 800a9b0:	e7f1      	b.n	800a996 <MX_USB_Device_Init+0x22>
    Error_Handler();
 800a9b2:	f7f7 fa7f 	bl	8001eb4 <Error_Handler>
}
 800a9b6:	e7f2      	b.n	800a99e <MX_USB_Device_Init+0x2a>
 800a9b8:	2000035c 	.word	0x2000035c
 800a9bc:	20000f24 	.word	0x20000f24
 800a9c0:	20000238 	.word	0x20000238
 800a9c4:	20000348 	.word	0x20000348

0800a9c8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	4770      	bx	lr

0800a9cc <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	4770      	bx	lr

0800a9d0 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	4770      	bx	lr

0800a9d4 <CDC_Receive_FS>:
{
 800a9d4:	b510      	push	{r4, lr}
 800a9d6:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a9d8:	4c04      	ldr	r4, [pc, #16]	; (800a9ec <CDC_Receive_FS+0x18>)
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f7ff fa9f 	bl	8009f1e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f7ff faa5 	bl	8009f30 <USBD_CDC_ReceivePacket>
}
 800a9e6:	2000      	movs	r0, #0
 800a9e8:	bd10      	pop	{r4, pc}
 800a9ea:	bf00      	nop
 800a9ec:	20000f24 	.word	0x20000f24

0800a9f0 <CDC_Init_FS>:
{
 800a9f0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a9f2:	4c06      	ldr	r4, [pc, #24]	; (800aa0c <CDC_Init_FS+0x1c>)
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	4906      	ldr	r1, [pc, #24]	; (800aa10 <CDC_Init_FS+0x20>)
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f7ff fa85 	bl	8009f08 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a9fe:	4905      	ldr	r1, [pc, #20]	; (800aa14 <CDC_Init_FS+0x24>)
 800aa00:	4620      	mov	r0, r4
 800aa02:	f7ff fa8c 	bl	8009f1e <USBD_CDC_SetRxBuffer>
}
 800aa06:	2000      	movs	r0, #0
 800aa08:	bd10      	pop	{r4, pc}
 800aa0a:	bf00      	nop
 800aa0c:	20000f24 	.word	0x20000f24
 800aa10:	200019f4 	.word	0x200019f4
 800aa14:	200011f4 	.word	0x200011f4

0800aa18 <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800aa18:	2312      	movs	r3, #18
 800aa1a:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 800aa1c:	4800      	ldr	r0, [pc, #0]	; (800aa20 <USBD_CDC_DeviceDescriptor+0x8>)
 800aa1e:	4770      	bx	lr
 800aa20:	2000037c 	.word	0x2000037c

0800aa24 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa24:	2304      	movs	r3, #4
 800aa26:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800aa28:	4800      	ldr	r0, [pc, #0]	; (800aa2c <USBD_CDC_LangIDStrDescriptor+0x8>)
 800aa2a:	4770      	bx	lr
 800aa2c:	20000390 	.word	0x20000390

0800aa30 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800aa30:	2300      	movs	r3, #0
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d21e      	bcs.n	800aa74 <IntToUnicode+0x44>
{
 800aa36:	b500      	push	{lr}
 800aa38:	e010      	b.n	800aa5c <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa3a:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 800aa3e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 800aa42:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800aa44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800aa48:	f10c 0c01 	add.w	ip, ip, #1
 800aa4c:	f04f 0e00 	mov.w	lr, #0
 800aa50:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 800aa54:	3301      	adds	r3, #1
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d209      	bcs.n	800aa70 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 800aa5c:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 800aa60:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 800aa64:	d2e9      	bcs.n	800aa3a <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800aa66:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800aa6a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800aa6e:	e7e8      	b.n	800aa42 <IntToUnicode+0x12>
  }
}
 800aa70:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa74:	4770      	bx	lr
	...

0800aa78 <Get_SerialNum>:
{
 800aa78:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa7a:	4b0b      	ldr	r3, [pc, #44]	; (800aaa8 <Get_SerialNum+0x30>)
 800aa7c:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aa80:	f8d3 4594 	ldr.w	r4, [r3, #1428]	; 0x594
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa84:	f8d3 3598 	ldr.w	r3, [r3, #1432]	; 0x598
  if (deviceserial0 != 0)
 800aa88:	18c0      	adds	r0, r0, r3
 800aa8a:	d100      	bne.n	800aa8e <Get_SerialNum+0x16>
}
 800aa8c:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa8e:	4d07      	ldr	r5, [pc, #28]	; (800aaac <Get_SerialNum+0x34>)
 800aa90:	2208      	movs	r2, #8
 800aa92:	1ca9      	adds	r1, r5, #2
 800aa94:	f7ff ffcc 	bl	800aa30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa98:	2204      	movs	r2, #4
 800aa9a:	f105 0112 	add.w	r1, r5, #18
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f7ff ffc6 	bl	800aa30 <IntToUnicode>
}
 800aaa4:	e7f2      	b.n	800aa8c <Get_SerialNum+0x14>
 800aaa6:	bf00      	nop
 800aaa8:	1fff7000 	.word	0x1fff7000
 800aaac:	20000394 	.word	0x20000394

0800aab0 <USBD_CDC_SerialStrDescriptor>:
{
 800aab0:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800aab2:	231a      	movs	r3, #26
 800aab4:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800aab6:	f7ff ffdf 	bl	800aa78 <Get_SerialNum>
}
 800aaba:	4801      	ldr	r0, [pc, #4]	; (800aac0 <USBD_CDC_SerialStrDescriptor+0x10>)
 800aabc:	bd08      	pop	{r3, pc}
 800aabe:	bf00      	nop
 800aac0:	20000394 	.word	0x20000394

0800aac4 <USBD_CDC_ProductStrDescriptor>:
{
 800aac4:	b508      	push	{r3, lr}
 800aac6:	460a      	mov	r2, r1
  if(speed == 0)
 800aac8:	b928      	cbnz	r0, 800aad6 <USBD_CDC_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800aaca:	4905      	ldr	r1, [pc, #20]	; (800aae0 <USBD_CDC_ProductStrDescriptor+0x1c>)
 800aacc:	4805      	ldr	r0, [pc, #20]	; (800aae4 <USBD_CDC_ProductStrDescriptor+0x20>)
 800aace:	f7ff fef2 	bl	800a8b6 <USBD_GetString>
}
 800aad2:	4803      	ldr	r0, [pc, #12]	; (800aae0 <USBD_CDC_ProductStrDescriptor+0x1c>)
 800aad4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800aad6:	4902      	ldr	r1, [pc, #8]	; (800aae0 <USBD_CDC_ProductStrDescriptor+0x1c>)
 800aad8:	4802      	ldr	r0, [pc, #8]	; (800aae4 <USBD_CDC_ProductStrDescriptor+0x20>)
 800aada:	f7ff feec 	bl	800a8b6 <USBD_GetString>
 800aade:	e7f8      	b.n	800aad2 <USBD_CDC_ProductStrDescriptor+0xe>
 800aae0:	200021f4 	.word	0x200021f4
 800aae4:	08010404 	.word	0x08010404

0800aae8 <USBD_CDC_ManufacturerStrDescriptor>:
{
 800aae8:	b510      	push	{r4, lr}
 800aaea:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aaec:	4c03      	ldr	r4, [pc, #12]	; (800aafc <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 800aaee:	4621      	mov	r1, r4
 800aaf0:	4803      	ldr	r0, [pc, #12]	; (800ab00 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 800aaf2:	f7ff fee0 	bl	800a8b6 <USBD_GetString>
}
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	bd10      	pop	{r4, pc}
 800aafa:	bf00      	nop
 800aafc:	200021f4 	.word	0x200021f4
 800ab00:	0801041c 	.word	0x0801041c

0800ab04 <USBD_CDC_ConfigStrDescriptor>:
{
 800ab04:	b508      	push	{r3, lr}
 800ab06:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800ab08:	b928      	cbnz	r0, 800ab16 <USBD_CDC_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ab0a:	4905      	ldr	r1, [pc, #20]	; (800ab20 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800ab0c:	4805      	ldr	r0, [pc, #20]	; (800ab24 <USBD_CDC_ConfigStrDescriptor+0x20>)
 800ab0e:	f7ff fed2 	bl	800a8b6 <USBD_GetString>
}
 800ab12:	4803      	ldr	r0, [pc, #12]	; (800ab20 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800ab14:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ab16:	4902      	ldr	r1, [pc, #8]	; (800ab20 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800ab18:	4802      	ldr	r0, [pc, #8]	; (800ab24 <USBD_CDC_ConfigStrDescriptor+0x20>)
 800ab1a:	f7ff fecc 	bl	800a8b6 <USBD_GetString>
 800ab1e:	e7f8      	b.n	800ab12 <USBD_CDC_ConfigStrDescriptor+0xe>
 800ab20:	200021f4 	.word	0x200021f4
 800ab24:	08010430 	.word	0x08010430

0800ab28 <USBD_CDC_InterfaceStrDescriptor>:
{
 800ab28:	b508      	push	{r3, lr}
 800ab2a:	460a      	mov	r2, r1
  if(speed == 0)
 800ab2c:	b928      	cbnz	r0, 800ab3a <USBD_CDC_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ab2e:	4905      	ldr	r1, [pc, #20]	; (800ab44 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800ab30:	4805      	ldr	r0, [pc, #20]	; (800ab48 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 800ab32:	f7ff fec0 	bl	800a8b6 <USBD_GetString>
}
 800ab36:	4803      	ldr	r0, [pc, #12]	; (800ab44 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800ab38:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ab3a:	4902      	ldr	r1, [pc, #8]	; (800ab44 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800ab3c:	4802      	ldr	r0, [pc, #8]	; (800ab48 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 800ab3e:	f7ff feba 	bl	800a8b6 <USBD_GetString>
 800ab42:	e7f8      	b.n	800ab36 <USBD_CDC_InterfaceStrDescriptor+0xe>
 800ab44:	200021f4 	.word	0x200021f4
 800ab48:	0801043c 	.word	0x0801043c

0800ab4c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800ab4c:	2803      	cmp	r0, #3
 800ab4e:	d805      	bhi.n	800ab5c <USBD_Get_USB_Status+0x10>
 800ab50:	e8df f000 	tbb	[pc, r0]
 800ab54:	05020405 	.word	0x05020405
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab58:	2001      	movs	r0, #1
    break;
 800ab5a:	4770      	bx	lr
      usb_status = USBD_FAIL;
 800ab5c:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800ab5e:	4770      	bx	lr

0800ab60 <SystemClockConfig_Resume>:
{
 800ab60:	b508      	push	{r3, lr}
  SystemClock_Config();
 800ab62:	f7f7 f9a9 	bl	8001eb8 <SystemClock_Config>
}
 800ab66:	bd08      	pop	{r3, pc}

0800ab68 <HAL_PCD_MspInit>:
{
 800ab68:	b510      	push	{r4, lr}
 800ab6a:	b096      	sub	sp, #88	; 0x58
 800ab6c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ab6e:	2254      	movs	r2, #84	; 0x54
 800ab70:	2100      	movs	r1, #0
 800ab72:	a801      	add	r0, sp, #4
 800ab74:	f000 f984 	bl	800ae80 <memset>
  if(pcdHandle->Instance==USB)
 800ab78:	6822      	ldr	r2, [r4, #0]
 800ab7a:	4b11      	ldr	r3, [pc, #68]	; (800abc0 <HAL_PCD_MspInit+0x58>)
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d001      	beq.n	800ab84 <HAL_PCD_MspInit+0x1c>
}
 800ab80:	b016      	add	sp, #88	; 0x58
 800ab82:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ab84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab88:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ab8a:	a801      	add	r0, sp, #4
 800ab8c:	f7fc f85c 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 800ab90:	b990      	cbnz	r0, 800abb8 <HAL_PCD_MspInit+0x50>
    __HAL_RCC_USB_CLK_ENABLE();
 800ab92:	4b0c      	ldr	r3, [pc, #48]	; (800abc4 <HAL_PCD_MspInit+0x5c>)
 800ab94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ab96:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800ab9a:	659a      	str	r2, [r3, #88]	; 0x58
 800ab9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800aba6:	2200      	movs	r2, #0
 800aba8:	4611      	mov	r1, r2
 800abaa:	2014      	movs	r0, #20
 800abac:	f7f9 f910 	bl	8003dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800abb0:	2014      	movs	r0, #20
 800abb2:	f7f9 f945 	bl	8003e40 <HAL_NVIC_EnableIRQ>
}
 800abb6:	e7e3      	b.n	800ab80 <HAL_PCD_MspInit+0x18>
      Error_Handler();
 800abb8:	f7f7 f97c 	bl	8001eb4 <Error_Handler>
 800abbc:	e7e9      	b.n	800ab92 <HAL_PCD_MspInit+0x2a>
 800abbe:	bf00      	nop
 800abc0:	40005c00 	.word	0x40005c00
 800abc4:	40021000 	.word	0x40021000

0800abc8 <HAL_PCD_SetupStageCallback>:
{
 800abc8:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800abca:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800abce:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800abd2:	f7ff fa09 	bl	8009fe8 <USBD_LL_SetupStage>
}
 800abd6:	bd08      	pop	{r3, pc}

0800abd8 <HAL_PCD_DataOutStageCallback>:
{
 800abd8:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800abda:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800abde:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800abe2:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800abe6:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800abea:	f7ff fa29 	bl	800a040 <USBD_LL_DataOutStage>
}
 800abee:	bd08      	pop	{r3, pc}

0800abf0 <HAL_PCD_DataInStageCallback>:
{
 800abf0:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800abf2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800abf6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800abfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abfc:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800ac00:	f7ff fa5a 	bl	800a0b8 <USBD_LL_DataInStage>
}
 800ac04:	bd08      	pop	{r3, pc}

0800ac06 <HAL_PCD_SOFCallback>:
{
 800ac06:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ac08:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800ac0c:	f7ff fafa 	bl	800a204 <USBD_LL_SOF>
}
 800ac10:	bd08      	pop	{r3, pc}

0800ac12 <HAL_PCD_ResetCallback>:
{
 800ac12:	b510      	push	{r4, lr}
 800ac14:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ac16:	6883      	ldr	r3, [r0, #8]
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	d109      	bne.n	800ac30 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ac1c:	2101      	movs	r1, #1
 800ac1e:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800ac22:	f7ff fad5 	bl	800a1d0 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ac26:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800ac2a:	f7ff faa4 	bl	800a176 <USBD_LL_Reset>
}
 800ac2e:	bd10      	pop	{r4, pc}
    Error_Handler();
 800ac30:	f7f7 f940 	bl	8001eb4 <Error_Handler>
 800ac34:	e7f2      	b.n	800ac1c <HAL_PCD_ResetCallback+0xa>
	...

0800ac38 <HAL_PCD_SuspendCallback>:
{
 800ac38:	b510      	push	{r4, lr}
 800ac3a:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ac3c:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800ac40:	f7ff fac9 	bl	800a1d6 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800ac44:	69a3      	ldr	r3, [r4, #24]
 800ac46:	b123      	cbz	r3, 800ac52 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac48:	4a02      	ldr	r2, [pc, #8]	; (800ac54 <HAL_PCD_SuspendCallback+0x1c>)
 800ac4a:	6913      	ldr	r3, [r2, #16]
 800ac4c:	f043 0306 	orr.w	r3, r3, #6
 800ac50:	6113      	str	r3, [r2, #16]
}
 800ac52:	bd10      	pop	{r4, pc}
 800ac54:	e000ed00 	.word	0xe000ed00

0800ac58 <HAL_PCD_ResumeCallback>:
{
 800ac58:	b510      	push	{r4, lr}
 800ac5a:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800ac5c:	6983      	ldr	r3, [r0, #24]
 800ac5e:	b923      	cbnz	r3, 800ac6a <HAL_PCD_ResumeCallback+0x12>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ac60:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800ac64:	f7ff fac1 	bl	800a1ea <USBD_LL_Resume>
}
 800ac68:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac6a:	4a04      	ldr	r2, [pc, #16]	; (800ac7c <HAL_PCD_ResumeCallback+0x24>)
 800ac6c:	6913      	ldr	r3, [r2, #16]
 800ac6e:	f023 0306 	bic.w	r3, r3, #6
 800ac72:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ac74:	f7ff ff74 	bl	800ab60 <SystemClockConfig_Resume>
 800ac78:	e7f2      	b.n	800ac60 <HAL_PCD_ResumeCallback+0x8>
 800ac7a:	bf00      	nop
 800ac7c:	e000ed00 	.word	0xe000ed00

0800ac80 <USBD_LL_Init>:
{
 800ac80:	b510      	push	{r4, lr}
 800ac82:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800ac84:	481e      	ldr	r0, [pc, #120]	; (800ad00 <USBD_LL_Init+0x80>)
 800ac86:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800ac8a:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Instance = USB;
 800ac8e:	4b1d      	ldr	r3, [pc, #116]	; (800ad04 <USBD_LL_Init+0x84>)
 800ac90:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ac92:	2308      	movs	r3, #8
 800ac94:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ac96:	2302      	movs	r3, #2
 800ac98:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ac9a:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800aca0:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800aca2:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800aca4:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aca6:	f7fa fb46 	bl	8005336 <HAL_PCD_Init>
 800acaa:	bb30      	cbnz	r0, 800acfa <USBD_LL_Init+0x7a>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800acac:	2318      	movs	r3, #24
 800acae:	2200      	movs	r2, #0
 800acb0:	4611      	mov	r1, r2
 800acb2:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800acb6:	f7fb fa78 	bl	80061aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800acba:	2358      	movs	r3, #88	; 0x58
 800acbc:	2200      	movs	r2, #0
 800acbe:	2180      	movs	r1, #128	; 0x80
 800acc0:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800acc4:	f7fb fa71 	bl	80061aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800acc8:	23c0      	movs	r3, #192	; 0xc0
 800acca:	2200      	movs	r2, #0
 800accc:	2181      	movs	r1, #129	; 0x81
 800acce:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800acd2:	f7fb fa6a 	bl	80061aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800acd6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800acda:	2200      	movs	r2, #0
 800acdc:	2101      	movs	r1, #1
 800acde:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800ace2:	f7fb fa62 	bl	80061aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ace6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acea:	2200      	movs	r2, #0
 800acec:	2182      	movs	r1, #130	; 0x82
 800acee:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800acf2:	f7fb fa5a 	bl	80061aa <HAL_PCDEx_PMAConfig>
}
 800acf6:	2000      	movs	r0, #0
 800acf8:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800acfa:	f7f7 f8db 	bl	8001eb4 <Error_Handler>
 800acfe:	e7d5      	b.n	800acac <USBD_LL_Init+0x2c>
 800ad00:	200023f4 	.word	0x200023f4
 800ad04:	40005c00 	.word	0x40005c00

0800ad08 <USBD_LL_Start>:
{
 800ad08:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800ad0a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ad0e:	f7fa fb84 	bl	800541a <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad12:	f7ff ff1b 	bl	800ab4c <USBD_Get_USB_Status>
}
 800ad16:	bd08      	pop	{r3, pc}

0800ad18 <USBD_LL_OpenEP>:
{
 800ad18:	b508      	push	{r3, lr}
 800ad1a:	4694      	mov	ip, r2
 800ad1c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad1e:	4663      	mov	r3, ip
 800ad20:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ad24:	f7fb f90a 	bl	8005f3c <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad28:	f7ff ff10 	bl	800ab4c <USBD_Get_USB_Status>
}
 800ad2c:	bd08      	pop	{r3, pc}

0800ad2e <USBD_LL_CloseEP>:
{
 800ad2e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad30:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ad34:	f7fb f944 	bl	8005fc0 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad38:	f7ff ff08 	bl	800ab4c <USBD_Get_USB_Status>
}
 800ad3c:	bd08      	pop	{r3, pc}

0800ad3e <USBD_LL_StallEP>:
{
 800ad3e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad40:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ad44:	f7fb f9c1 	bl	80060ca <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad48:	f7ff ff00 	bl	800ab4c <USBD_Get_USB_Status>
}
 800ad4c:	bd08      	pop	{r3, pc}

0800ad4e <USBD_LL_ClearStallEP>:
{
 800ad4e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad50:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ad54:	f7fb f9ee 	bl	8006134 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad58:	f7ff fef8 	bl	800ab4c <USBD_Get_USB_Status>
}
 800ad5c:	bd08      	pop	{r3, pc}

0800ad5e <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad5e:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800ad62:	f011 0f80 	tst.w	r1, #128	; 0x80
 800ad66:	d108      	bne.n	800ad7a <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad68:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800ad6c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ad70:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ad74:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800ad78:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad7a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800ad7e:	3101      	adds	r1, #1
 800ad80:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ad84:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ad88:	7888      	ldrb	r0, [r1, #2]
 800ad8a:	4770      	bx	lr

0800ad8c <USBD_LL_SetUSBAddress>:
{
 800ad8c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad8e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ad92:	f7fa ffe6 	bl	8005d62 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad96:	f7ff fed9 	bl	800ab4c <USBD_Get_USB_Status>
}
 800ad9a:	bd08      	pop	{r3, pc}

0800ad9c <USBD_LL_Transmit>:
{
 800ad9c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad9e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ada2:	f7fb f96a 	bl	800607a <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ada6:	f7ff fed1 	bl	800ab4c <USBD_Get_USB_Status>
}
 800adaa:	bd08      	pop	{r3, pc}

0800adac <USBD_LL_PrepareReceive>:
{
 800adac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800adae:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800adb2:	f7fb f937 	bl	8006024 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800adb6:	f7ff fec9 	bl	800ab4c <USBD_Get_USB_Status>
}
 800adba:	bd08      	pop	{r3, pc}

0800adbc <USBD_LL_GetRxDataSize>:
{
 800adbc:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800adbe:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800adc2:	f7fb f951 	bl	8006068 <HAL_PCD_EP_GetRxCount>
}
 800adc6:	bd08      	pop	{r3, pc}

0800adc8 <HAL_PCDEx_LPM_Callback>:
{
 800adc8:	b510      	push	{r4, lr}
 800adca:	4604      	mov	r4, r0
  switch (msg)
 800adcc:	b111      	cbz	r1, 800add4 <HAL_PCDEx_LPM_Callback+0xc>
 800adce:	2901      	cmp	r1, #1
 800add0:	d00f      	beq.n	800adf2 <HAL_PCDEx_LPM_Callback+0x2a>
}
 800add2:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 800add4:	6983      	ldr	r3, [r0, #24]
 800add6:	b923      	cbnz	r3, 800ade2 <HAL_PCDEx_LPM_Callback+0x1a>
    USBD_LL_Resume(hpcd->pData);
 800add8:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800addc:	f7ff fa05 	bl	800a1ea <USBD_LL_Resume>
    break;
 800ade0:	e7f7      	b.n	800add2 <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 800ade2:	f7ff febd 	bl	800ab60 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ade6:	4a09      	ldr	r2, [pc, #36]	; (800ae0c <HAL_PCDEx_LPM_Callback+0x44>)
 800ade8:	6913      	ldr	r3, [r2, #16]
 800adea:	f023 0306 	bic.w	r3, r3, #6
 800adee:	6113      	str	r3, [r2, #16]
 800adf0:	e7f2      	b.n	800add8 <HAL_PCDEx_LPM_Callback+0x10>
    USBD_LL_Suspend(hpcd->pData);
 800adf2:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800adf6:	f7ff f9ee 	bl	800a1d6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800adfa:	69a3      	ldr	r3, [r4, #24]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d0e8      	beq.n	800add2 <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae00:	4a02      	ldr	r2, [pc, #8]	; (800ae0c <HAL_PCDEx_LPM_Callback+0x44>)
 800ae02:	6913      	ldr	r3, [r2, #16]
 800ae04:	f043 0306 	orr.w	r3, r3, #6
 800ae08:	6113      	str	r3, [r2, #16]
}
 800ae0a:	e7e2      	b.n	800add2 <HAL_PCDEx_LPM_Callback+0xa>
 800ae0c:	e000ed00 	.word	0xe000ed00

0800ae10 <USBD_static_malloc>:
}
 800ae10:	4800      	ldr	r0, [pc, #0]	; (800ae14 <USBD_static_malloc+0x4>)
 800ae12:	4770      	bx	lr
 800ae14:	200026e8 	.word	0x200026e8

0800ae18 <USBD_static_free>:
}
 800ae18:	4770      	bx	lr
	...

0800ae1c <__errno>:
 800ae1c:	4b01      	ldr	r3, [pc, #4]	; (800ae24 <__errno+0x8>)
 800ae1e:	6818      	ldr	r0, [r3, #0]
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	200003b0 	.word	0x200003b0

0800ae28 <__libc_init_array>:
 800ae28:	b570      	push	{r4, r5, r6, lr}
 800ae2a:	4d0d      	ldr	r5, [pc, #52]	; (800ae60 <__libc_init_array+0x38>)
 800ae2c:	4c0d      	ldr	r4, [pc, #52]	; (800ae64 <__libc_init_array+0x3c>)
 800ae2e:	1b64      	subs	r4, r4, r5
 800ae30:	10a4      	asrs	r4, r4, #2
 800ae32:	2600      	movs	r6, #0
 800ae34:	42a6      	cmp	r6, r4
 800ae36:	d109      	bne.n	800ae4c <__libc_init_array+0x24>
 800ae38:	4d0b      	ldr	r5, [pc, #44]	; (800ae68 <__libc_init_array+0x40>)
 800ae3a:	4c0c      	ldr	r4, [pc, #48]	; (800ae6c <__libc_init_array+0x44>)
 800ae3c:	f004 fc8c 	bl	800f758 <_init>
 800ae40:	1b64      	subs	r4, r4, r5
 800ae42:	10a4      	asrs	r4, r4, #2
 800ae44:	2600      	movs	r6, #0
 800ae46:	42a6      	cmp	r6, r4
 800ae48:	d105      	bne.n	800ae56 <__libc_init_array+0x2e>
 800ae4a:	bd70      	pop	{r4, r5, r6, pc}
 800ae4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae50:	4798      	blx	r3
 800ae52:	3601      	adds	r6, #1
 800ae54:	e7ee      	b.n	800ae34 <__libc_init_array+0xc>
 800ae56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae5a:	4798      	blx	r3
 800ae5c:	3601      	adds	r6, #1
 800ae5e:	e7f2      	b.n	800ae46 <__libc_init_array+0x1e>
 800ae60:	080108fc 	.word	0x080108fc
 800ae64:	080108fc 	.word	0x080108fc
 800ae68:	080108fc 	.word	0x080108fc
 800ae6c:	08010900 	.word	0x08010900

0800ae70 <malloc>:
 800ae70:	4b02      	ldr	r3, [pc, #8]	; (800ae7c <malloc+0xc>)
 800ae72:	4601      	mov	r1, r0
 800ae74:	6818      	ldr	r0, [r3, #0]
 800ae76:	f000 b877 	b.w	800af68 <_malloc_r>
 800ae7a:	bf00      	nop
 800ae7c:	200003b0 	.word	0x200003b0

0800ae80 <memset>:
 800ae80:	4402      	add	r2, r0
 800ae82:	4603      	mov	r3, r0
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d100      	bne.n	800ae8a <memset+0xa>
 800ae88:	4770      	bx	lr
 800ae8a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae8e:	e7f9      	b.n	800ae84 <memset+0x4>

0800ae90 <_free_r>:
 800ae90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae92:	2900      	cmp	r1, #0
 800ae94:	d044      	beq.n	800af20 <_free_r+0x90>
 800ae96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae9a:	9001      	str	r0, [sp, #4]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f1a1 0404 	sub.w	r4, r1, #4
 800aea2:	bfb8      	it	lt
 800aea4:	18e4      	addlt	r4, r4, r3
 800aea6:	f003 f83d 	bl	800df24 <__malloc_lock>
 800aeaa:	4a1e      	ldr	r2, [pc, #120]	; (800af24 <_free_r+0x94>)
 800aeac:	9801      	ldr	r0, [sp, #4]
 800aeae:	6813      	ldr	r3, [r2, #0]
 800aeb0:	b933      	cbnz	r3, 800aec0 <_free_r+0x30>
 800aeb2:	6063      	str	r3, [r4, #4]
 800aeb4:	6014      	str	r4, [r2, #0]
 800aeb6:	b003      	add	sp, #12
 800aeb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aebc:	f003 b838 	b.w	800df30 <__malloc_unlock>
 800aec0:	42a3      	cmp	r3, r4
 800aec2:	d908      	bls.n	800aed6 <_free_r+0x46>
 800aec4:	6825      	ldr	r5, [r4, #0]
 800aec6:	1961      	adds	r1, r4, r5
 800aec8:	428b      	cmp	r3, r1
 800aeca:	bf01      	itttt	eq
 800aecc:	6819      	ldreq	r1, [r3, #0]
 800aece:	685b      	ldreq	r3, [r3, #4]
 800aed0:	1949      	addeq	r1, r1, r5
 800aed2:	6021      	streq	r1, [r4, #0]
 800aed4:	e7ed      	b.n	800aeb2 <_free_r+0x22>
 800aed6:	461a      	mov	r2, r3
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	b10b      	cbz	r3, 800aee0 <_free_r+0x50>
 800aedc:	42a3      	cmp	r3, r4
 800aede:	d9fa      	bls.n	800aed6 <_free_r+0x46>
 800aee0:	6811      	ldr	r1, [r2, #0]
 800aee2:	1855      	adds	r5, r2, r1
 800aee4:	42a5      	cmp	r5, r4
 800aee6:	d10b      	bne.n	800af00 <_free_r+0x70>
 800aee8:	6824      	ldr	r4, [r4, #0]
 800aeea:	4421      	add	r1, r4
 800aeec:	1854      	adds	r4, r2, r1
 800aeee:	42a3      	cmp	r3, r4
 800aef0:	6011      	str	r1, [r2, #0]
 800aef2:	d1e0      	bne.n	800aeb6 <_free_r+0x26>
 800aef4:	681c      	ldr	r4, [r3, #0]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	6053      	str	r3, [r2, #4]
 800aefa:	4421      	add	r1, r4
 800aefc:	6011      	str	r1, [r2, #0]
 800aefe:	e7da      	b.n	800aeb6 <_free_r+0x26>
 800af00:	d902      	bls.n	800af08 <_free_r+0x78>
 800af02:	230c      	movs	r3, #12
 800af04:	6003      	str	r3, [r0, #0]
 800af06:	e7d6      	b.n	800aeb6 <_free_r+0x26>
 800af08:	6825      	ldr	r5, [r4, #0]
 800af0a:	1961      	adds	r1, r4, r5
 800af0c:	428b      	cmp	r3, r1
 800af0e:	bf04      	itt	eq
 800af10:	6819      	ldreq	r1, [r3, #0]
 800af12:	685b      	ldreq	r3, [r3, #4]
 800af14:	6063      	str	r3, [r4, #4]
 800af16:	bf04      	itt	eq
 800af18:	1949      	addeq	r1, r1, r5
 800af1a:	6021      	streq	r1, [r4, #0]
 800af1c:	6054      	str	r4, [r2, #4]
 800af1e:	e7ca      	b.n	800aeb6 <_free_r+0x26>
 800af20:	b003      	add	sp, #12
 800af22:	bd30      	pop	{r4, r5, pc}
 800af24:	20002908 	.word	0x20002908

0800af28 <sbrk_aligned>:
 800af28:	b570      	push	{r4, r5, r6, lr}
 800af2a:	4e0e      	ldr	r6, [pc, #56]	; (800af64 <sbrk_aligned+0x3c>)
 800af2c:	460c      	mov	r4, r1
 800af2e:	6831      	ldr	r1, [r6, #0]
 800af30:	4605      	mov	r5, r0
 800af32:	b911      	cbnz	r1, 800af3a <sbrk_aligned+0x12>
 800af34:	f000 ff06 	bl	800bd44 <_sbrk_r>
 800af38:	6030      	str	r0, [r6, #0]
 800af3a:	4621      	mov	r1, r4
 800af3c:	4628      	mov	r0, r5
 800af3e:	f000 ff01 	bl	800bd44 <_sbrk_r>
 800af42:	1c43      	adds	r3, r0, #1
 800af44:	d00a      	beq.n	800af5c <sbrk_aligned+0x34>
 800af46:	1cc4      	adds	r4, r0, #3
 800af48:	f024 0403 	bic.w	r4, r4, #3
 800af4c:	42a0      	cmp	r0, r4
 800af4e:	d007      	beq.n	800af60 <sbrk_aligned+0x38>
 800af50:	1a21      	subs	r1, r4, r0
 800af52:	4628      	mov	r0, r5
 800af54:	f000 fef6 	bl	800bd44 <_sbrk_r>
 800af58:	3001      	adds	r0, #1
 800af5a:	d101      	bne.n	800af60 <sbrk_aligned+0x38>
 800af5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800af60:	4620      	mov	r0, r4
 800af62:	bd70      	pop	{r4, r5, r6, pc}
 800af64:	2000290c 	.word	0x2000290c

0800af68 <_malloc_r>:
 800af68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af6c:	1ccd      	adds	r5, r1, #3
 800af6e:	f025 0503 	bic.w	r5, r5, #3
 800af72:	3508      	adds	r5, #8
 800af74:	2d0c      	cmp	r5, #12
 800af76:	bf38      	it	cc
 800af78:	250c      	movcc	r5, #12
 800af7a:	2d00      	cmp	r5, #0
 800af7c:	4607      	mov	r7, r0
 800af7e:	db01      	blt.n	800af84 <_malloc_r+0x1c>
 800af80:	42a9      	cmp	r1, r5
 800af82:	d905      	bls.n	800af90 <_malloc_r+0x28>
 800af84:	230c      	movs	r3, #12
 800af86:	603b      	str	r3, [r7, #0]
 800af88:	2600      	movs	r6, #0
 800af8a:	4630      	mov	r0, r6
 800af8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af90:	4e2e      	ldr	r6, [pc, #184]	; (800b04c <_malloc_r+0xe4>)
 800af92:	f002 ffc7 	bl	800df24 <__malloc_lock>
 800af96:	6833      	ldr	r3, [r6, #0]
 800af98:	461c      	mov	r4, r3
 800af9a:	bb34      	cbnz	r4, 800afea <_malloc_r+0x82>
 800af9c:	4629      	mov	r1, r5
 800af9e:	4638      	mov	r0, r7
 800afa0:	f7ff ffc2 	bl	800af28 <sbrk_aligned>
 800afa4:	1c43      	adds	r3, r0, #1
 800afa6:	4604      	mov	r4, r0
 800afa8:	d14d      	bne.n	800b046 <_malloc_r+0xde>
 800afaa:	6834      	ldr	r4, [r6, #0]
 800afac:	4626      	mov	r6, r4
 800afae:	2e00      	cmp	r6, #0
 800afb0:	d140      	bne.n	800b034 <_malloc_r+0xcc>
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	4631      	mov	r1, r6
 800afb6:	4638      	mov	r0, r7
 800afb8:	eb04 0803 	add.w	r8, r4, r3
 800afbc:	f000 fec2 	bl	800bd44 <_sbrk_r>
 800afc0:	4580      	cmp	r8, r0
 800afc2:	d13a      	bne.n	800b03a <_malloc_r+0xd2>
 800afc4:	6821      	ldr	r1, [r4, #0]
 800afc6:	3503      	adds	r5, #3
 800afc8:	1a6d      	subs	r5, r5, r1
 800afca:	f025 0503 	bic.w	r5, r5, #3
 800afce:	3508      	adds	r5, #8
 800afd0:	2d0c      	cmp	r5, #12
 800afd2:	bf38      	it	cc
 800afd4:	250c      	movcc	r5, #12
 800afd6:	4629      	mov	r1, r5
 800afd8:	4638      	mov	r0, r7
 800afda:	f7ff ffa5 	bl	800af28 <sbrk_aligned>
 800afde:	3001      	adds	r0, #1
 800afe0:	d02b      	beq.n	800b03a <_malloc_r+0xd2>
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	442b      	add	r3, r5
 800afe6:	6023      	str	r3, [r4, #0]
 800afe8:	e00e      	b.n	800b008 <_malloc_r+0xa0>
 800afea:	6822      	ldr	r2, [r4, #0]
 800afec:	1b52      	subs	r2, r2, r5
 800afee:	d41e      	bmi.n	800b02e <_malloc_r+0xc6>
 800aff0:	2a0b      	cmp	r2, #11
 800aff2:	d916      	bls.n	800b022 <_malloc_r+0xba>
 800aff4:	1961      	adds	r1, r4, r5
 800aff6:	42a3      	cmp	r3, r4
 800aff8:	6025      	str	r5, [r4, #0]
 800affa:	bf18      	it	ne
 800affc:	6059      	strne	r1, [r3, #4]
 800affe:	6863      	ldr	r3, [r4, #4]
 800b000:	bf08      	it	eq
 800b002:	6031      	streq	r1, [r6, #0]
 800b004:	5162      	str	r2, [r4, r5]
 800b006:	604b      	str	r3, [r1, #4]
 800b008:	4638      	mov	r0, r7
 800b00a:	f104 060b 	add.w	r6, r4, #11
 800b00e:	f002 ff8f 	bl	800df30 <__malloc_unlock>
 800b012:	f026 0607 	bic.w	r6, r6, #7
 800b016:	1d23      	adds	r3, r4, #4
 800b018:	1af2      	subs	r2, r6, r3
 800b01a:	d0b6      	beq.n	800af8a <_malloc_r+0x22>
 800b01c:	1b9b      	subs	r3, r3, r6
 800b01e:	50a3      	str	r3, [r4, r2]
 800b020:	e7b3      	b.n	800af8a <_malloc_r+0x22>
 800b022:	6862      	ldr	r2, [r4, #4]
 800b024:	42a3      	cmp	r3, r4
 800b026:	bf0c      	ite	eq
 800b028:	6032      	streq	r2, [r6, #0]
 800b02a:	605a      	strne	r2, [r3, #4]
 800b02c:	e7ec      	b.n	800b008 <_malloc_r+0xa0>
 800b02e:	4623      	mov	r3, r4
 800b030:	6864      	ldr	r4, [r4, #4]
 800b032:	e7b2      	b.n	800af9a <_malloc_r+0x32>
 800b034:	4634      	mov	r4, r6
 800b036:	6876      	ldr	r6, [r6, #4]
 800b038:	e7b9      	b.n	800afae <_malloc_r+0x46>
 800b03a:	230c      	movs	r3, #12
 800b03c:	603b      	str	r3, [r7, #0]
 800b03e:	4638      	mov	r0, r7
 800b040:	f002 ff76 	bl	800df30 <__malloc_unlock>
 800b044:	e7a1      	b.n	800af8a <_malloc_r+0x22>
 800b046:	6025      	str	r5, [r4, #0]
 800b048:	e7de      	b.n	800b008 <_malloc_r+0xa0>
 800b04a:	bf00      	nop
 800b04c:	20002908 	.word	0x20002908

0800b050 <__cvt>:
 800b050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b054:	ec55 4b10 	vmov	r4, r5, d0
 800b058:	2d00      	cmp	r5, #0
 800b05a:	460e      	mov	r6, r1
 800b05c:	4619      	mov	r1, r3
 800b05e:	462b      	mov	r3, r5
 800b060:	bfbb      	ittet	lt
 800b062:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b066:	461d      	movlt	r5, r3
 800b068:	2300      	movge	r3, #0
 800b06a:	232d      	movlt	r3, #45	; 0x2d
 800b06c:	700b      	strb	r3, [r1, #0]
 800b06e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b070:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b074:	4691      	mov	r9, r2
 800b076:	f023 0820 	bic.w	r8, r3, #32
 800b07a:	bfbc      	itt	lt
 800b07c:	4622      	movlt	r2, r4
 800b07e:	4614      	movlt	r4, r2
 800b080:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b084:	d005      	beq.n	800b092 <__cvt+0x42>
 800b086:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b08a:	d100      	bne.n	800b08e <__cvt+0x3e>
 800b08c:	3601      	adds	r6, #1
 800b08e:	2102      	movs	r1, #2
 800b090:	e000      	b.n	800b094 <__cvt+0x44>
 800b092:	2103      	movs	r1, #3
 800b094:	ab03      	add	r3, sp, #12
 800b096:	9301      	str	r3, [sp, #4]
 800b098:	ab02      	add	r3, sp, #8
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	ec45 4b10 	vmov	d0, r4, r5
 800b0a0:	4653      	mov	r3, sl
 800b0a2:	4632      	mov	r2, r6
 800b0a4:	f001 fdbc 	bl	800cc20 <_dtoa_r>
 800b0a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b0ac:	4607      	mov	r7, r0
 800b0ae:	d102      	bne.n	800b0b6 <__cvt+0x66>
 800b0b0:	f019 0f01 	tst.w	r9, #1
 800b0b4:	d022      	beq.n	800b0fc <__cvt+0xac>
 800b0b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b0ba:	eb07 0906 	add.w	r9, r7, r6
 800b0be:	d110      	bne.n	800b0e2 <__cvt+0x92>
 800b0c0:	783b      	ldrb	r3, [r7, #0]
 800b0c2:	2b30      	cmp	r3, #48	; 0x30
 800b0c4:	d10a      	bne.n	800b0dc <__cvt+0x8c>
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	f7f5 fd23 	bl	8000b18 <__aeabi_dcmpeq>
 800b0d2:	b918      	cbnz	r0, 800b0dc <__cvt+0x8c>
 800b0d4:	f1c6 0601 	rsb	r6, r6, #1
 800b0d8:	f8ca 6000 	str.w	r6, [sl]
 800b0dc:	f8da 3000 	ldr.w	r3, [sl]
 800b0e0:	4499      	add	r9, r3
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	f7f5 fd15 	bl	8000b18 <__aeabi_dcmpeq>
 800b0ee:	b108      	cbz	r0, 800b0f4 <__cvt+0xa4>
 800b0f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b0f4:	2230      	movs	r2, #48	; 0x30
 800b0f6:	9b03      	ldr	r3, [sp, #12]
 800b0f8:	454b      	cmp	r3, r9
 800b0fa:	d307      	bcc.n	800b10c <__cvt+0xbc>
 800b0fc:	9b03      	ldr	r3, [sp, #12]
 800b0fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b100:	1bdb      	subs	r3, r3, r7
 800b102:	4638      	mov	r0, r7
 800b104:	6013      	str	r3, [r2, #0]
 800b106:	b004      	add	sp, #16
 800b108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b10c:	1c59      	adds	r1, r3, #1
 800b10e:	9103      	str	r1, [sp, #12]
 800b110:	701a      	strb	r2, [r3, #0]
 800b112:	e7f0      	b.n	800b0f6 <__cvt+0xa6>

0800b114 <__exponent>:
 800b114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b116:	4603      	mov	r3, r0
 800b118:	2900      	cmp	r1, #0
 800b11a:	bfb8      	it	lt
 800b11c:	4249      	neglt	r1, r1
 800b11e:	f803 2b02 	strb.w	r2, [r3], #2
 800b122:	bfb4      	ite	lt
 800b124:	222d      	movlt	r2, #45	; 0x2d
 800b126:	222b      	movge	r2, #43	; 0x2b
 800b128:	2909      	cmp	r1, #9
 800b12a:	7042      	strb	r2, [r0, #1]
 800b12c:	dd2a      	ble.n	800b184 <__exponent+0x70>
 800b12e:	f10d 0407 	add.w	r4, sp, #7
 800b132:	46a4      	mov	ip, r4
 800b134:	270a      	movs	r7, #10
 800b136:	46a6      	mov	lr, r4
 800b138:	460a      	mov	r2, r1
 800b13a:	fb91 f6f7 	sdiv	r6, r1, r7
 800b13e:	fb07 1516 	mls	r5, r7, r6, r1
 800b142:	3530      	adds	r5, #48	; 0x30
 800b144:	2a63      	cmp	r2, #99	; 0x63
 800b146:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b14a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b14e:	4631      	mov	r1, r6
 800b150:	dcf1      	bgt.n	800b136 <__exponent+0x22>
 800b152:	3130      	adds	r1, #48	; 0x30
 800b154:	f1ae 0502 	sub.w	r5, lr, #2
 800b158:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b15c:	1c44      	adds	r4, r0, #1
 800b15e:	4629      	mov	r1, r5
 800b160:	4561      	cmp	r1, ip
 800b162:	d30a      	bcc.n	800b17a <__exponent+0x66>
 800b164:	f10d 0209 	add.w	r2, sp, #9
 800b168:	eba2 020e 	sub.w	r2, r2, lr
 800b16c:	4565      	cmp	r5, ip
 800b16e:	bf88      	it	hi
 800b170:	2200      	movhi	r2, #0
 800b172:	4413      	add	r3, r2
 800b174:	1a18      	subs	r0, r3, r0
 800b176:	b003      	add	sp, #12
 800b178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b17a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b17e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b182:	e7ed      	b.n	800b160 <__exponent+0x4c>
 800b184:	2330      	movs	r3, #48	; 0x30
 800b186:	3130      	adds	r1, #48	; 0x30
 800b188:	7083      	strb	r3, [r0, #2]
 800b18a:	70c1      	strb	r1, [r0, #3]
 800b18c:	1d03      	adds	r3, r0, #4
 800b18e:	e7f1      	b.n	800b174 <__exponent+0x60>

0800b190 <_printf_float>:
 800b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b194:	ed2d 8b02 	vpush	{d8}
 800b198:	b08d      	sub	sp, #52	; 0x34
 800b19a:	460c      	mov	r4, r1
 800b19c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b1a0:	4616      	mov	r6, r2
 800b1a2:	461f      	mov	r7, r3
 800b1a4:	4605      	mov	r5, r0
 800b1a6:	f002 fe99 	bl	800dedc <_localeconv_r>
 800b1aa:	f8d0 a000 	ldr.w	sl, [r0]
 800b1ae:	4650      	mov	r0, sl
 800b1b0:	f7f5 f836 	bl	8000220 <strlen>
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	9305      	str	r3, [sp, #20]
 800b1bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b1c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b1c4:	3307      	adds	r3, #7
 800b1c6:	f023 0307 	bic.w	r3, r3, #7
 800b1ca:	f103 0208 	add.w	r2, r3, #8
 800b1ce:	f8c8 2000 	str.w	r2, [r8]
 800b1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b1da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b1de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1e2:	9307      	str	r3, [sp, #28]
 800b1e4:	f8cd 8018 	str.w	r8, [sp, #24]
 800b1e8:	ee08 0a10 	vmov	s16, r0
 800b1ec:	4b9f      	ldr	r3, [pc, #636]	; (800b46c <_printf_float+0x2dc>)
 800b1ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1f6:	f7f5 fcc1 	bl	8000b7c <__aeabi_dcmpun>
 800b1fa:	bb88      	cbnz	r0, 800b260 <_printf_float+0xd0>
 800b1fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b200:	4b9a      	ldr	r3, [pc, #616]	; (800b46c <_printf_float+0x2dc>)
 800b202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b206:	f7f5 fc9b 	bl	8000b40 <__aeabi_dcmple>
 800b20a:	bb48      	cbnz	r0, 800b260 <_printf_float+0xd0>
 800b20c:	2200      	movs	r2, #0
 800b20e:	2300      	movs	r3, #0
 800b210:	4640      	mov	r0, r8
 800b212:	4649      	mov	r1, r9
 800b214:	f7f5 fc8a 	bl	8000b2c <__aeabi_dcmplt>
 800b218:	b110      	cbz	r0, 800b220 <_printf_float+0x90>
 800b21a:	232d      	movs	r3, #45	; 0x2d
 800b21c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b220:	4b93      	ldr	r3, [pc, #588]	; (800b470 <_printf_float+0x2e0>)
 800b222:	4894      	ldr	r0, [pc, #592]	; (800b474 <_printf_float+0x2e4>)
 800b224:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b228:	bf94      	ite	ls
 800b22a:	4698      	movls	r8, r3
 800b22c:	4680      	movhi	r8, r0
 800b22e:	2303      	movs	r3, #3
 800b230:	6123      	str	r3, [r4, #16]
 800b232:	9b05      	ldr	r3, [sp, #20]
 800b234:	f023 0204 	bic.w	r2, r3, #4
 800b238:	6022      	str	r2, [r4, #0]
 800b23a:	f04f 0900 	mov.w	r9, #0
 800b23e:	9700      	str	r7, [sp, #0]
 800b240:	4633      	mov	r3, r6
 800b242:	aa0b      	add	r2, sp, #44	; 0x2c
 800b244:	4621      	mov	r1, r4
 800b246:	4628      	mov	r0, r5
 800b248:	f000 f9d8 	bl	800b5fc <_printf_common>
 800b24c:	3001      	adds	r0, #1
 800b24e:	f040 8090 	bne.w	800b372 <_printf_float+0x1e2>
 800b252:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b256:	b00d      	add	sp, #52	; 0x34
 800b258:	ecbd 8b02 	vpop	{d8}
 800b25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b260:	4642      	mov	r2, r8
 800b262:	464b      	mov	r3, r9
 800b264:	4640      	mov	r0, r8
 800b266:	4649      	mov	r1, r9
 800b268:	f7f5 fc88 	bl	8000b7c <__aeabi_dcmpun>
 800b26c:	b140      	cbz	r0, 800b280 <_printf_float+0xf0>
 800b26e:	464b      	mov	r3, r9
 800b270:	2b00      	cmp	r3, #0
 800b272:	bfbc      	itt	lt
 800b274:	232d      	movlt	r3, #45	; 0x2d
 800b276:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b27a:	487f      	ldr	r0, [pc, #508]	; (800b478 <_printf_float+0x2e8>)
 800b27c:	4b7f      	ldr	r3, [pc, #508]	; (800b47c <_printf_float+0x2ec>)
 800b27e:	e7d1      	b.n	800b224 <_printf_float+0x94>
 800b280:	6863      	ldr	r3, [r4, #4]
 800b282:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b286:	9206      	str	r2, [sp, #24]
 800b288:	1c5a      	adds	r2, r3, #1
 800b28a:	d13f      	bne.n	800b30c <_printf_float+0x17c>
 800b28c:	2306      	movs	r3, #6
 800b28e:	6063      	str	r3, [r4, #4]
 800b290:	9b05      	ldr	r3, [sp, #20]
 800b292:	6861      	ldr	r1, [r4, #4]
 800b294:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b298:	2300      	movs	r3, #0
 800b29a:	9303      	str	r3, [sp, #12]
 800b29c:	ab0a      	add	r3, sp, #40	; 0x28
 800b29e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b2a2:	ab09      	add	r3, sp, #36	; 0x24
 800b2a4:	ec49 8b10 	vmov	d0, r8, r9
 800b2a8:	9300      	str	r3, [sp, #0]
 800b2aa:	6022      	str	r2, [r4, #0]
 800b2ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	f7ff fecd 	bl	800b050 <__cvt>
 800b2b6:	9b06      	ldr	r3, [sp, #24]
 800b2b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2ba:	2b47      	cmp	r3, #71	; 0x47
 800b2bc:	4680      	mov	r8, r0
 800b2be:	d108      	bne.n	800b2d2 <_printf_float+0x142>
 800b2c0:	1cc8      	adds	r0, r1, #3
 800b2c2:	db02      	blt.n	800b2ca <_printf_float+0x13a>
 800b2c4:	6863      	ldr	r3, [r4, #4]
 800b2c6:	4299      	cmp	r1, r3
 800b2c8:	dd41      	ble.n	800b34e <_printf_float+0x1be>
 800b2ca:	f1ab 0b02 	sub.w	fp, fp, #2
 800b2ce:	fa5f fb8b 	uxtb.w	fp, fp
 800b2d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b2d6:	d820      	bhi.n	800b31a <_printf_float+0x18a>
 800b2d8:	3901      	subs	r1, #1
 800b2da:	465a      	mov	r2, fp
 800b2dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b2e0:	9109      	str	r1, [sp, #36]	; 0x24
 800b2e2:	f7ff ff17 	bl	800b114 <__exponent>
 800b2e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2e8:	1813      	adds	r3, r2, r0
 800b2ea:	2a01      	cmp	r2, #1
 800b2ec:	4681      	mov	r9, r0
 800b2ee:	6123      	str	r3, [r4, #16]
 800b2f0:	dc02      	bgt.n	800b2f8 <_printf_float+0x168>
 800b2f2:	6822      	ldr	r2, [r4, #0]
 800b2f4:	07d2      	lsls	r2, r2, #31
 800b2f6:	d501      	bpl.n	800b2fc <_printf_float+0x16c>
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	6123      	str	r3, [r4, #16]
 800b2fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b300:	2b00      	cmp	r3, #0
 800b302:	d09c      	beq.n	800b23e <_printf_float+0xae>
 800b304:	232d      	movs	r3, #45	; 0x2d
 800b306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b30a:	e798      	b.n	800b23e <_printf_float+0xae>
 800b30c:	9a06      	ldr	r2, [sp, #24]
 800b30e:	2a47      	cmp	r2, #71	; 0x47
 800b310:	d1be      	bne.n	800b290 <_printf_float+0x100>
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1bc      	bne.n	800b290 <_printf_float+0x100>
 800b316:	2301      	movs	r3, #1
 800b318:	e7b9      	b.n	800b28e <_printf_float+0xfe>
 800b31a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b31e:	d118      	bne.n	800b352 <_printf_float+0x1c2>
 800b320:	2900      	cmp	r1, #0
 800b322:	6863      	ldr	r3, [r4, #4]
 800b324:	dd0b      	ble.n	800b33e <_printf_float+0x1ae>
 800b326:	6121      	str	r1, [r4, #16]
 800b328:	b913      	cbnz	r3, 800b330 <_printf_float+0x1a0>
 800b32a:	6822      	ldr	r2, [r4, #0]
 800b32c:	07d0      	lsls	r0, r2, #31
 800b32e:	d502      	bpl.n	800b336 <_printf_float+0x1a6>
 800b330:	3301      	adds	r3, #1
 800b332:	440b      	add	r3, r1
 800b334:	6123      	str	r3, [r4, #16]
 800b336:	65a1      	str	r1, [r4, #88]	; 0x58
 800b338:	f04f 0900 	mov.w	r9, #0
 800b33c:	e7de      	b.n	800b2fc <_printf_float+0x16c>
 800b33e:	b913      	cbnz	r3, 800b346 <_printf_float+0x1b6>
 800b340:	6822      	ldr	r2, [r4, #0]
 800b342:	07d2      	lsls	r2, r2, #31
 800b344:	d501      	bpl.n	800b34a <_printf_float+0x1ba>
 800b346:	3302      	adds	r3, #2
 800b348:	e7f4      	b.n	800b334 <_printf_float+0x1a4>
 800b34a:	2301      	movs	r3, #1
 800b34c:	e7f2      	b.n	800b334 <_printf_float+0x1a4>
 800b34e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b354:	4299      	cmp	r1, r3
 800b356:	db05      	blt.n	800b364 <_printf_float+0x1d4>
 800b358:	6823      	ldr	r3, [r4, #0]
 800b35a:	6121      	str	r1, [r4, #16]
 800b35c:	07d8      	lsls	r0, r3, #31
 800b35e:	d5ea      	bpl.n	800b336 <_printf_float+0x1a6>
 800b360:	1c4b      	adds	r3, r1, #1
 800b362:	e7e7      	b.n	800b334 <_printf_float+0x1a4>
 800b364:	2900      	cmp	r1, #0
 800b366:	bfd4      	ite	le
 800b368:	f1c1 0202 	rsble	r2, r1, #2
 800b36c:	2201      	movgt	r2, #1
 800b36e:	4413      	add	r3, r2
 800b370:	e7e0      	b.n	800b334 <_printf_float+0x1a4>
 800b372:	6823      	ldr	r3, [r4, #0]
 800b374:	055a      	lsls	r2, r3, #21
 800b376:	d407      	bmi.n	800b388 <_printf_float+0x1f8>
 800b378:	6923      	ldr	r3, [r4, #16]
 800b37a:	4642      	mov	r2, r8
 800b37c:	4631      	mov	r1, r6
 800b37e:	4628      	mov	r0, r5
 800b380:	47b8      	blx	r7
 800b382:	3001      	adds	r0, #1
 800b384:	d12c      	bne.n	800b3e0 <_printf_float+0x250>
 800b386:	e764      	b.n	800b252 <_printf_float+0xc2>
 800b388:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b38c:	f240 80e0 	bls.w	800b550 <_printf_float+0x3c0>
 800b390:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b394:	2200      	movs	r2, #0
 800b396:	2300      	movs	r3, #0
 800b398:	f7f5 fbbe 	bl	8000b18 <__aeabi_dcmpeq>
 800b39c:	2800      	cmp	r0, #0
 800b39e:	d034      	beq.n	800b40a <_printf_float+0x27a>
 800b3a0:	4a37      	ldr	r2, [pc, #220]	; (800b480 <_printf_float+0x2f0>)
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	4631      	mov	r1, r6
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	47b8      	blx	r7
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	f43f af51 	beq.w	800b252 <_printf_float+0xc2>
 800b3b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	db02      	blt.n	800b3be <_printf_float+0x22e>
 800b3b8:	6823      	ldr	r3, [r4, #0]
 800b3ba:	07d8      	lsls	r0, r3, #31
 800b3bc:	d510      	bpl.n	800b3e0 <_printf_float+0x250>
 800b3be:	ee18 3a10 	vmov	r3, s16
 800b3c2:	4652      	mov	r2, sl
 800b3c4:	4631      	mov	r1, r6
 800b3c6:	4628      	mov	r0, r5
 800b3c8:	47b8      	blx	r7
 800b3ca:	3001      	adds	r0, #1
 800b3cc:	f43f af41 	beq.w	800b252 <_printf_float+0xc2>
 800b3d0:	f04f 0800 	mov.w	r8, #0
 800b3d4:	f104 091a 	add.w	r9, r4, #26
 800b3d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	4543      	cmp	r3, r8
 800b3de:	dc09      	bgt.n	800b3f4 <_printf_float+0x264>
 800b3e0:	6823      	ldr	r3, [r4, #0]
 800b3e2:	079b      	lsls	r3, r3, #30
 800b3e4:	f100 8105 	bmi.w	800b5f2 <_printf_float+0x462>
 800b3e8:	68e0      	ldr	r0, [r4, #12]
 800b3ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3ec:	4298      	cmp	r0, r3
 800b3ee:	bfb8      	it	lt
 800b3f0:	4618      	movlt	r0, r3
 800b3f2:	e730      	b.n	800b256 <_printf_float+0xc6>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	464a      	mov	r2, r9
 800b3f8:	4631      	mov	r1, r6
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	47b8      	blx	r7
 800b3fe:	3001      	adds	r0, #1
 800b400:	f43f af27 	beq.w	800b252 <_printf_float+0xc2>
 800b404:	f108 0801 	add.w	r8, r8, #1
 800b408:	e7e6      	b.n	800b3d8 <_printf_float+0x248>
 800b40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	dc39      	bgt.n	800b484 <_printf_float+0x2f4>
 800b410:	4a1b      	ldr	r2, [pc, #108]	; (800b480 <_printf_float+0x2f0>)
 800b412:	2301      	movs	r3, #1
 800b414:	4631      	mov	r1, r6
 800b416:	4628      	mov	r0, r5
 800b418:	47b8      	blx	r7
 800b41a:	3001      	adds	r0, #1
 800b41c:	f43f af19 	beq.w	800b252 <_printf_float+0xc2>
 800b420:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b424:	4313      	orrs	r3, r2
 800b426:	d102      	bne.n	800b42e <_printf_float+0x29e>
 800b428:	6823      	ldr	r3, [r4, #0]
 800b42a:	07d9      	lsls	r1, r3, #31
 800b42c:	d5d8      	bpl.n	800b3e0 <_printf_float+0x250>
 800b42e:	ee18 3a10 	vmov	r3, s16
 800b432:	4652      	mov	r2, sl
 800b434:	4631      	mov	r1, r6
 800b436:	4628      	mov	r0, r5
 800b438:	47b8      	blx	r7
 800b43a:	3001      	adds	r0, #1
 800b43c:	f43f af09 	beq.w	800b252 <_printf_float+0xc2>
 800b440:	f04f 0900 	mov.w	r9, #0
 800b444:	f104 0a1a 	add.w	sl, r4, #26
 800b448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b44a:	425b      	negs	r3, r3
 800b44c:	454b      	cmp	r3, r9
 800b44e:	dc01      	bgt.n	800b454 <_printf_float+0x2c4>
 800b450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b452:	e792      	b.n	800b37a <_printf_float+0x1ea>
 800b454:	2301      	movs	r3, #1
 800b456:	4652      	mov	r2, sl
 800b458:	4631      	mov	r1, r6
 800b45a:	4628      	mov	r0, r5
 800b45c:	47b8      	blx	r7
 800b45e:	3001      	adds	r0, #1
 800b460:	f43f aef7 	beq.w	800b252 <_printf_float+0xc2>
 800b464:	f109 0901 	add.w	r9, r9, #1
 800b468:	e7ee      	b.n	800b448 <_printf_float+0x2b8>
 800b46a:	bf00      	nop
 800b46c:	7fefffff 	.word	0x7fefffff
 800b470:	08010450 	.word	0x08010450
 800b474:	08010454 	.word	0x08010454
 800b478:	0801045c 	.word	0x0801045c
 800b47c:	08010458 	.word	0x08010458
 800b480:	08010460 	.word	0x08010460
 800b484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b486:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b488:	429a      	cmp	r2, r3
 800b48a:	bfa8      	it	ge
 800b48c:	461a      	movge	r2, r3
 800b48e:	2a00      	cmp	r2, #0
 800b490:	4691      	mov	r9, r2
 800b492:	dc37      	bgt.n	800b504 <_printf_float+0x374>
 800b494:	f04f 0b00 	mov.w	fp, #0
 800b498:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b49c:	f104 021a 	add.w	r2, r4, #26
 800b4a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b4a2:	9305      	str	r3, [sp, #20]
 800b4a4:	eba3 0309 	sub.w	r3, r3, r9
 800b4a8:	455b      	cmp	r3, fp
 800b4aa:	dc33      	bgt.n	800b514 <_printf_float+0x384>
 800b4ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	db3b      	blt.n	800b52c <_printf_float+0x39c>
 800b4b4:	6823      	ldr	r3, [r4, #0]
 800b4b6:	07da      	lsls	r2, r3, #31
 800b4b8:	d438      	bmi.n	800b52c <_printf_float+0x39c>
 800b4ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4bc:	9a05      	ldr	r2, [sp, #20]
 800b4be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4c0:	1a9a      	subs	r2, r3, r2
 800b4c2:	eba3 0901 	sub.w	r9, r3, r1
 800b4c6:	4591      	cmp	r9, r2
 800b4c8:	bfa8      	it	ge
 800b4ca:	4691      	movge	r9, r2
 800b4cc:	f1b9 0f00 	cmp.w	r9, #0
 800b4d0:	dc35      	bgt.n	800b53e <_printf_float+0x3ae>
 800b4d2:	f04f 0800 	mov.w	r8, #0
 800b4d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4da:	f104 0a1a 	add.w	sl, r4, #26
 800b4de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4e2:	1a9b      	subs	r3, r3, r2
 800b4e4:	eba3 0309 	sub.w	r3, r3, r9
 800b4e8:	4543      	cmp	r3, r8
 800b4ea:	f77f af79 	ble.w	800b3e0 <_printf_float+0x250>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	4652      	mov	r2, sl
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	47b8      	blx	r7
 800b4f8:	3001      	adds	r0, #1
 800b4fa:	f43f aeaa 	beq.w	800b252 <_printf_float+0xc2>
 800b4fe:	f108 0801 	add.w	r8, r8, #1
 800b502:	e7ec      	b.n	800b4de <_printf_float+0x34e>
 800b504:	4613      	mov	r3, r2
 800b506:	4631      	mov	r1, r6
 800b508:	4642      	mov	r2, r8
 800b50a:	4628      	mov	r0, r5
 800b50c:	47b8      	blx	r7
 800b50e:	3001      	adds	r0, #1
 800b510:	d1c0      	bne.n	800b494 <_printf_float+0x304>
 800b512:	e69e      	b.n	800b252 <_printf_float+0xc2>
 800b514:	2301      	movs	r3, #1
 800b516:	4631      	mov	r1, r6
 800b518:	4628      	mov	r0, r5
 800b51a:	9205      	str	r2, [sp, #20]
 800b51c:	47b8      	blx	r7
 800b51e:	3001      	adds	r0, #1
 800b520:	f43f ae97 	beq.w	800b252 <_printf_float+0xc2>
 800b524:	9a05      	ldr	r2, [sp, #20]
 800b526:	f10b 0b01 	add.w	fp, fp, #1
 800b52a:	e7b9      	b.n	800b4a0 <_printf_float+0x310>
 800b52c:	ee18 3a10 	vmov	r3, s16
 800b530:	4652      	mov	r2, sl
 800b532:	4631      	mov	r1, r6
 800b534:	4628      	mov	r0, r5
 800b536:	47b8      	blx	r7
 800b538:	3001      	adds	r0, #1
 800b53a:	d1be      	bne.n	800b4ba <_printf_float+0x32a>
 800b53c:	e689      	b.n	800b252 <_printf_float+0xc2>
 800b53e:	9a05      	ldr	r2, [sp, #20]
 800b540:	464b      	mov	r3, r9
 800b542:	4442      	add	r2, r8
 800b544:	4631      	mov	r1, r6
 800b546:	4628      	mov	r0, r5
 800b548:	47b8      	blx	r7
 800b54a:	3001      	adds	r0, #1
 800b54c:	d1c1      	bne.n	800b4d2 <_printf_float+0x342>
 800b54e:	e680      	b.n	800b252 <_printf_float+0xc2>
 800b550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b552:	2a01      	cmp	r2, #1
 800b554:	dc01      	bgt.n	800b55a <_printf_float+0x3ca>
 800b556:	07db      	lsls	r3, r3, #31
 800b558:	d538      	bpl.n	800b5cc <_printf_float+0x43c>
 800b55a:	2301      	movs	r3, #1
 800b55c:	4642      	mov	r2, r8
 800b55e:	4631      	mov	r1, r6
 800b560:	4628      	mov	r0, r5
 800b562:	47b8      	blx	r7
 800b564:	3001      	adds	r0, #1
 800b566:	f43f ae74 	beq.w	800b252 <_printf_float+0xc2>
 800b56a:	ee18 3a10 	vmov	r3, s16
 800b56e:	4652      	mov	r2, sl
 800b570:	4631      	mov	r1, r6
 800b572:	4628      	mov	r0, r5
 800b574:	47b8      	blx	r7
 800b576:	3001      	adds	r0, #1
 800b578:	f43f ae6b 	beq.w	800b252 <_printf_float+0xc2>
 800b57c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b580:	2200      	movs	r2, #0
 800b582:	2300      	movs	r3, #0
 800b584:	f7f5 fac8 	bl	8000b18 <__aeabi_dcmpeq>
 800b588:	b9d8      	cbnz	r0, 800b5c2 <_printf_float+0x432>
 800b58a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b58c:	f108 0201 	add.w	r2, r8, #1
 800b590:	3b01      	subs	r3, #1
 800b592:	4631      	mov	r1, r6
 800b594:	4628      	mov	r0, r5
 800b596:	47b8      	blx	r7
 800b598:	3001      	adds	r0, #1
 800b59a:	d10e      	bne.n	800b5ba <_printf_float+0x42a>
 800b59c:	e659      	b.n	800b252 <_printf_float+0xc2>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	4652      	mov	r2, sl
 800b5a2:	4631      	mov	r1, r6
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	47b8      	blx	r7
 800b5a8:	3001      	adds	r0, #1
 800b5aa:	f43f ae52 	beq.w	800b252 <_printf_float+0xc2>
 800b5ae:	f108 0801 	add.w	r8, r8, #1
 800b5b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	4543      	cmp	r3, r8
 800b5b8:	dcf1      	bgt.n	800b59e <_printf_float+0x40e>
 800b5ba:	464b      	mov	r3, r9
 800b5bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b5c0:	e6dc      	b.n	800b37c <_printf_float+0x1ec>
 800b5c2:	f04f 0800 	mov.w	r8, #0
 800b5c6:	f104 0a1a 	add.w	sl, r4, #26
 800b5ca:	e7f2      	b.n	800b5b2 <_printf_float+0x422>
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	4642      	mov	r2, r8
 800b5d0:	e7df      	b.n	800b592 <_printf_float+0x402>
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	464a      	mov	r2, r9
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	4628      	mov	r0, r5
 800b5da:	47b8      	blx	r7
 800b5dc:	3001      	adds	r0, #1
 800b5de:	f43f ae38 	beq.w	800b252 <_printf_float+0xc2>
 800b5e2:	f108 0801 	add.w	r8, r8, #1
 800b5e6:	68e3      	ldr	r3, [r4, #12]
 800b5e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5ea:	1a5b      	subs	r3, r3, r1
 800b5ec:	4543      	cmp	r3, r8
 800b5ee:	dcf0      	bgt.n	800b5d2 <_printf_float+0x442>
 800b5f0:	e6fa      	b.n	800b3e8 <_printf_float+0x258>
 800b5f2:	f04f 0800 	mov.w	r8, #0
 800b5f6:	f104 0919 	add.w	r9, r4, #25
 800b5fa:	e7f4      	b.n	800b5e6 <_printf_float+0x456>

0800b5fc <_printf_common>:
 800b5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b600:	4616      	mov	r6, r2
 800b602:	4699      	mov	r9, r3
 800b604:	688a      	ldr	r2, [r1, #8]
 800b606:	690b      	ldr	r3, [r1, #16]
 800b608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b60c:	4293      	cmp	r3, r2
 800b60e:	bfb8      	it	lt
 800b610:	4613      	movlt	r3, r2
 800b612:	6033      	str	r3, [r6, #0]
 800b614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b618:	4607      	mov	r7, r0
 800b61a:	460c      	mov	r4, r1
 800b61c:	b10a      	cbz	r2, 800b622 <_printf_common+0x26>
 800b61e:	3301      	adds	r3, #1
 800b620:	6033      	str	r3, [r6, #0]
 800b622:	6823      	ldr	r3, [r4, #0]
 800b624:	0699      	lsls	r1, r3, #26
 800b626:	bf42      	ittt	mi
 800b628:	6833      	ldrmi	r3, [r6, #0]
 800b62a:	3302      	addmi	r3, #2
 800b62c:	6033      	strmi	r3, [r6, #0]
 800b62e:	6825      	ldr	r5, [r4, #0]
 800b630:	f015 0506 	ands.w	r5, r5, #6
 800b634:	d106      	bne.n	800b644 <_printf_common+0x48>
 800b636:	f104 0a19 	add.w	sl, r4, #25
 800b63a:	68e3      	ldr	r3, [r4, #12]
 800b63c:	6832      	ldr	r2, [r6, #0]
 800b63e:	1a9b      	subs	r3, r3, r2
 800b640:	42ab      	cmp	r3, r5
 800b642:	dc26      	bgt.n	800b692 <_printf_common+0x96>
 800b644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b648:	1e13      	subs	r3, r2, #0
 800b64a:	6822      	ldr	r2, [r4, #0]
 800b64c:	bf18      	it	ne
 800b64e:	2301      	movne	r3, #1
 800b650:	0692      	lsls	r2, r2, #26
 800b652:	d42b      	bmi.n	800b6ac <_printf_common+0xb0>
 800b654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b658:	4649      	mov	r1, r9
 800b65a:	4638      	mov	r0, r7
 800b65c:	47c0      	blx	r8
 800b65e:	3001      	adds	r0, #1
 800b660:	d01e      	beq.n	800b6a0 <_printf_common+0xa4>
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	68e5      	ldr	r5, [r4, #12]
 800b666:	6832      	ldr	r2, [r6, #0]
 800b668:	f003 0306 	and.w	r3, r3, #6
 800b66c:	2b04      	cmp	r3, #4
 800b66e:	bf08      	it	eq
 800b670:	1aad      	subeq	r5, r5, r2
 800b672:	68a3      	ldr	r3, [r4, #8]
 800b674:	6922      	ldr	r2, [r4, #16]
 800b676:	bf0c      	ite	eq
 800b678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b67c:	2500      	movne	r5, #0
 800b67e:	4293      	cmp	r3, r2
 800b680:	bfc4      	itt	gt
 800b682:	1a9b      	subgt	r3, r3, r2
 800b684:	18ed      	addgt	r5, r5, r3
 800b686:	2600      	movs	r6, #0
 800b688:	341a      	adds	r4, #26
 800b68a:	42b5      	cmp	r5, r6
 800b68c:	d11a      	bne.n	800b6c4 <_printf_common+0xc8>
 800b68e:	2000      	movs	r0, #0
 800b690:	e008      	b.n	800b6a4 <_printf_common+0xa8>
 800b692:	2301      	movs	r3, #1
 800b694:	4652      	mov	r2, sl
 800b696:	4649      	mov	r1, r9
 800b698:	4638      	mov	r0, r7
 800b69a:	47c0      	blx	r8
 800b69c:	3001      	adds	r0, #1
 800b69e:	d103      	bne.n	800b6a8 <_printf_common+0xac>
 800b6a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a8:	3501      	adds	r5, #1
 800b6aa:	e7c6      	b.n	800b63a <_printf_common+0x3e>
 800b6ac:	18e1      	adds	r1, r4, r3
 800b6ae:	1c5a      	adds	r2, r3, #1
 800b6b0:	2030      	movs	r0, #48	; 0x30
 800b6b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6b6:	4422      	add	r2, r4
 800b6b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6c0:	3302      	adds	r3, #2
 800b6c2:	e7c7      	b.n	800b654 <_printf_common+0x58>
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	4622      	mov	r2, r4
 800b6c8:	4649      	mov	r1, r9
 800b6ca:	4638      	mov	r0, r7
 800b6cc:	47c0      	blx	r8
 800b6ce:	3001      	adds	r0, #1
 800b6d0:	d0e6      	beq.n	800b6a0 <_printf_common+0xa4>
 800b6d2:	3601      	adds	r6, #1
 800b6d4:	e7d9      	b.n	800b68a <_printf_common+0x8e>
	...

0800b6d8 <_printf_i>:
 800b6d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6dc:	7e0f      	ldrb	r7, [r1, #24]
 800b6de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b6e0:	2f78      	cmp	r7, #120	; 0x78
 800b6e2:	4691      	mov	r9, r2
 800b6e4:	4680      	mov	r8, r0
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	469a      	mov	sl, r3
 800b6ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b6ee:	d807      	bhi.n	800b700 <_printf_i+0x28>
 800b6f0:	2f62      	cmp	r7, #98	; 0x62
 800b6f2:	d80a      	bhi.n	800b70a <_printf_i+0x32>
 800b6f4:	2f00      	cmp	r7, #0
 800b6f6:	f000 80d8 	beq.w	800b8aa <_printf_i+0x1d2>
 800b6fa:	2f58      	cmp	r7, #88	; 0x58
 800b6fc:	f000 80a3 	beq.w	800b846 <_printf_i+0x16e>
 800b700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b708:	e03a      	b.n	800b780 <_printf_i+0xa8>
 800b70a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b70e:	2b15      	cmp	r3, #21
 800b710:	d8f6      	bhi.n	800b700 <_printf_i+0x28>
 800b712:	a101      	add	r1, pc, #4	; (adr r1, 800b718 <_printf_i+0x40>)
 800b714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b718:	0800b771 	.word	0x0800b771
 800b71c:	0800b785 	.word	0x0800b785
 800b720:	0800b701 	.word	0x0800b701
 800b724:	0800b701 	.word	0x0800b701
 800b728:	0800b701 	.word	0x0800b701
 800b72c:	0800b701 	.word	0x0800b701
 800b730:	0800b785 	.word	0x0800b785
 800b734:	0800b701 	.word	0x0800b701
 800b738:	0800b701 	.word	0x0800b701
 800b73c:	0800b701 	.word	0x0800b701
 800b740:	0800b701 	.word	0x0800b701
 800b744:	0800b891 	.word	0x0800b891
 800b748:	0800b7b5 	.word	0x0800b7b5
 800b74c:	0800b873 	.word	0x0800b873
 800b750:	0800b701 	.word	0x0800b701
 800b754:	0800b701 	.word	0x0800b701
 800b758:	0800b8b3 	.word	0x0800b8b3
 800b75c:	0800b701 	.word	0x0800b701
 800b760:	0800b7b5 	.word	0x0800b7b5
 800b764:	0800b701 	.word	0x0800b701
 800b768:	0800b701 	.word	0x0800b701
 800b76c:	0800b87b 	.word	0x0800b87b
 800b770:	682b      	ldr	r3, [r5, #0]
 800b772:	1d1a      	adds	r2, r3, #4
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	602a      	str	r2, [r5, #0]
 800b778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b77c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b780:	2301      	movs	r3, #1
 800b782:	e0a3      	b.n	800b8cc <_printf_i+0x1f4>
 800b784:	6820      	ldr	r0, [r4, #0]
 800b786:	6829      	ldr	r1, [r5, #0]
 800b788:	0606      	lsls	r6, r0, #24
 800b78a:	f101 0304 	add.w	r3, r1, #4
 800b78e:	d50a      	bpl.n	800b7a6 <_printf_i+0xce>
 800b790:	680e      	ldr	r6, [r1, #0]
 800b792:	602b      	str	r3, [r5, #0]
 800b794:	2e00      	cmp	r6, #0
 800b796:	da03      	bge.n	800b7a0 <_printf_i+0xc8>
 800b798:	232d      	movs	r3, #45	; 0x2d
 800b79a:	4276      	negs	r6, r6
 800b79c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7a0:	485e      	ldr	r0, [pc, #376]	; (800b91c <_printf_i+0x244>)
 800b7a2:	230a      	movs	r3, #10
 800b7a4:	e019      	b.n	800b7da <_printf_i+0x102>
 800b7a6:	680e      	ldr	r6, [r1, #0]
 800b7a8:	602b      	str	r3, [r5, #0]
 800b7aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b7ae:	bf18      	it	ne
 800b7b0:	b236      	sxthne	r6, r6
 800b7b2:	e7ef      	b.n	800b794 <_printf_i+0xbc>
 800b7b4:	682b      	ldr	r3, [r5, #0]
 800b7b6:	6820      	ldr	r0, [r4, #0]
 800b7b8:	1d19      	adds	r1, r3, #4
 800b7ba:	6029      	str	r1, [r5, #0]
 800b7bc:	0601      	lsls	r1, r0, #24
 800b7be:	d501      	bpl.n	800b7c4 <_printf_i+0xec>
 800b7c0:	681e      	ldr	r6, [r3, #0]
 800b7c2:	e002      	b.n	800b7ca <_printf_i+0xf2>
 800b7c4:	0646      	lsls	r6, r0, #25
 800b7c6:	d5fb      	bpl.n	800b7c0 <_printf_i+0xe8>
 800b7c8:	881e      	ldrh	r6, [r3, #0]
 800b7ca:	4854      	ldr	r0, [pc, #336]	; (800b91c <_printf_i+0x244>)
 800b7cc:	2f6f      	cmp	r7, #111	; 0x6f
 800b7ce:	bf0c      	ite	eq
 800b7d0:	2308      	moveq	r3, #8
 800b7d2:	230a      	movne	r3, #10
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7da:	6865      	ldr	r5, [r4, #4]
 800b7dc:	60a5      	str	r5, [r4, #8]
 800b7de:	2d00      	cmp	r5, #0
 800b7e0:	bfa2      	ittt	ge
 800b7e2:	6821      	ldrge	r1, [r4, #0]
 800b7e4:	f021 0104 	bicge.w	r1, r1, #4
 800b7e8:	6021      	strge	r1, [r4, #0]
 800b7ea:	b90e      	cbnz	r6, 800b7f0 <_printf_i+0x118>
 800b7ec:	2d00      	cmp	r5, #0
 800b7ee:	d04d      	beq.n	800b88c <_printf_i+0x1b4>
 800b7f0:	4615      	mov	r5, r2
 800b7f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b7f6:	fb03 6711 	mls	r7, r3, r1, r6
 800b7fa:	5dc7      	ldrb	r7, [r0, r7]
 800b7fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b800:	4637      	mov	r7, r6
 800b802:	42bb      	cmp	r3, r7
 800b804:	460e      	mov	r6, r1
 800b806:	d9f4      	bls.n	800b7f2 <_printf_i+0x11a>
 800b808:	2b08      	cmp	r3, #8
 800b80a:	d10b      	bne.n	800b824 <_printf_i+0x14c>
 800b80c:	6823      	ldr	r3, [r4, #0]
 800b80e:	07de      	lsls	r6, r3, #31
 800b810:	d508      	bpl.n	800b824 <_printf_i+0x14c>
 800b812:	6923      	ldr	r3, [r4, #16]
 800b814:	6861      	ldr	r1, [r4, #4]
 800b816:	4299      	cmp	r1, r3
 800b818:	bfde      	ittt	le
 800b81a:	2330      	movle	r3, #48	; 0x30
 800b81c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b820:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b824:	1b52      	subs	r2, r2, r5
 800b826:	6122      	str	r2, [r4, #16]
 800b828:	f8cd a000 	str.w	sl, [sp]
 800b82c:	464b      	mov	r3, r9
 800b82e:	aa03      	add	r2, sp, #12
 800b830:	4621      	mov	r1, r4
 800b832:	4640      	mov	r0, r8
 800b834:	f7ff fee2 	bl	800b5fc <_printf_common>
 800b838:	3001      	adds	r0, #1
 800b83a:	d14c      	bne.n	800b8d6 <_printf_i+0x1fe>
 800b83c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b840:	b004      	add	sp, #16
 800b842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b846:	4835      	ldr	r0, [pc, #212]	; (800b91c <_printf_i+0x244>)
 800b848:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b84c:	6829      	ldr	r1, [r5, #0]
 800b84e:	6823      	ldr	r3, [r4, #0]
 800b850:	f851 6b04 	ldr.w	r6, [r1], #4
 800b854:	6029      	str	r1, [r5, #0]
 800b856:	061d      	lsls	r5, r3, #24
 800b858:	d514      	bpl.n	800b884 <_printf_i+0x1ac>
 800b85a:	07df      	lsls	r7, r3, #31
 800b85c:	bf44      	itt	mi
 800b85e:	f043 0320 	orrmi.w	r3, r3, #32
 800b862:	6023      	strmi	r3, [r4, #0]
 800b864:	b91e      	cbnz	r6, 800b86e <_printf_i+0x196>
 800b866:	6823      	ldr	r3, [r4, #0]
 800b868:	f023 0320 	bic.w	r3, r3, #32
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	2310      	movs	r3, #16
 800b870:	e7b0      	b.n	800b7d4 <_printf_i+0xfc>
 800b872:	6823      	ldr	r3, [r4, #0]
 800b874:	f043 0320 	orr.w	r3, r3, #32
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	2378      	movs	r3, #120	; 0x78
 800b87c:	4828      	ldr	r0, [pc, #160]	; (800b920 <_printf_i+0x248>)
 800b87e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b882:	e7e3      	b.n	800b84c <_printf_i+0x174>
 800b884:	0659      	lsls	r1, r3, #25
 800b886:	bf48      	it	mi
 800b888:	b2b6      	uxthmi	r6, r6
 800b88a:	e7e6      	b.n	800b85a <_printf_i+0x182>
 800b88c:	4615      	mov	r5, r2
 800b88e:	e7bb      	b.n	800b808 <_printf_i+0x130>
 800b890:	682b      	ldr	r3, [r5, #0]
 800b892:	6826      	ldr	r6, [r4, #0]
 800b894:	6961      	ldr	r1, [r4, #20]
 800b896:	1d18      	adds	r0, r3, #4
 800b898:	6028      	str	r0, [r5, #0]
 800b89a:	0635      	lsls	r5, r6, #24
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	d501      	bpl.n	800b8a4 <_printf_i+0x1cc>
 800b8a0:	6019      	str	r1, [r3, #0]
 800b8a2:	e002      	b.n	800b8aa <_printf_i+0x1d2>
 800b8a4:	0670      	lsls	r0, r6, #25
 800b8a6:	d5fb      	bpl.n	800b8a0 <_printf_i+0x1c8>
 800b8a8:	8019      	strh	r1, [r3, #0]
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	6123      	str	r3, [r4, #16]
 800b8ae:	4615      	mov	r5, r2
 800b8b0:	e7ba      	b.n	800b828 <_printf_i+0x150>
 800b8b2:	682b      	ldr	r3, [r5, #0]
 800b8b4:	1d1a      	adds	r2, r3, #4
 800b8b6:	602a      	str	r2, [r5, #0]
 800b8b8:	681d      	ldr	r5, [r3, #0]
 800b8ba:	6862      	ldr	r2, [r4, #4]
 800b8bc:	2100      	movs	r1, #0
 800b8be:	4628      	mov	r0, r5
 800b8c0:	f7f4 fcb6 	bl	8000230 <memchr>
 800b8c4:	b108      	cbz	r0, 800b8ca <_printf_i+0x1f2>
 800b8c6:	1b40      	subs	r0, r0, r5
 800b8c8:	6060      	str	r0, [r4, #4]
 800b8ca:	6863      	ldr	r3, [r4, #4]
 800b8cc:	6123      	str	r3, [r4, #16]
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8d4:	e7a8      	b.n	800b828 <_printf_i+0x150>
 800b8d6:	6923      	ldr	r3, [r4, #16]
 800b8d8:	462a      	mov	r2, r5
 800b8da:	4649      	mov	r1, r9
 800b8dc:	4640      	mov	r0, r8
 800b8de:	47d0      	blx	sl
 800b8e0:	3001      	adds	r0, #1
 800b8e2:	d0ab      	beq.n	800b83c <_printf_i+0x164>
 800b8e4:	6823      	ldr	r3, [r4, #0]
 800b8e6:	079b      	lsls	r3, r3, #30
 800b8e8:	d413      	bmi.n	800b912 <_printf_i+0x23a>
 800b8ea:	68e0      	ldr	r0, [r4, #12]
 800b8ec:	9b03      	ldr	r3, [sp, #12]
 800b8ee:	4298      	cmp	r0, r3
 800b8f0:	bfb8      	it	lt
 800b8f2:	4618      	movlt	r0, r3
 800b8f4:	e7a4      	b.n	800b840 <_printf_i+0x168>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	4632      	mov	r2, r6
 800b8fa:	4649      	mov	r1, r9
 800b8fc:	4640      	mov	r0, r8
 800b8fe:	47d0      	blx	sl
 800b900:	3001      	adds	r0, #1
 800b902:	d09b      	beq.n	800b83c <_printf_i+0x164>
 800b904:	3501      	adds	r5, #1
 800b906:	68e3      	ldr	r3, [r4, #12]
 800b908:	9903      	ldr	r1, [sp, #12]
 800b90a:	1a5b      	subs	r3, r3, r1
 800b90c:	42ab      	cmp	r3, r5
 800b90e:	dcf2      	bgt.n	800b8f6 <_printf_i+0x21e>
 800b910:	e7eb      	b.n	800b8ea <_printf_i+0x212>
 800b912:	2500      	movs	r5, #0
 800b914:	f104 0619 	add.w	r6, r4, #25
 800b918:	e7f5      	b.n	800b906 <_printf_i+0x22e>
 800b91a:	bf00      	nop
 800b91c:	08010462 	.word	0x08010462
 800b920:	08010473 	.word	0x08010473

0800b924 <_scanf_float>:
 800b924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b928:	b087      	sub	sp, #28
 800b92a:	4617      	mov	r7, r2
 800b92c:	9303      	str	r3, [sp, #12]
 800b92e:	688b      	ldr	r3, [r1, #8]
 800b930:	1e5a      	subs	r2, r3, #1
 800b932:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b936:	bf83      	ittte	hi
 800b938:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b93c:	195b      	addhi	r3, r3, r5
 800b93e:	9302      	strhi	r3, [sp, #8]
 800b940:	2300      	movls	r3, #0
 800b942:	bf86      	itte	hi
 800b944:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b948:	608b      	strhi	r3, [r1, #8]
 800b94a:	9302      	strls	r3, [sp, #8]
 800b94c:	680b      	ldr	r3, [r1, #0]
 800b94e:	468b      	mov	fp, r1
 800b950:	2500      	movs	r5, #0
 800b952:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b956:	f84b 3b1c 	str.w	r3, [fp], #28
 800b95a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b95e:	4680      	mov	r8, r0
 800b960:	460c      	mov	r4, r1
 800b962:	465e      	mov	r6, fp
 800b964:	46aa      	mov	sl, r5
 800b966:	46a9      	mov	r9, r5
 800b968:	9501      	str	r5, [sp, #4]
 800b96a:	68a2      	ldr	r2, [r4, #8]
 800b96c:	b152      	cbz	r2, 800b984 <_scanf_float+0x60>
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	2b4e      	cmp	r3, #78	; 0x4e
 800b974:	d864      	bhi.n	800ba40 <_scanf_float+0x11c>
 800b976:	2b40      	cmp	r3, #64	; 0x40
 800b978:	d83c      	bhi.n	800b9f4 <_scanf_float+0xd0>
 800b97a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b97e:	b2c8      	uxtb	r0, r1
 800b980:	280e      	cmp	r0, #14
 800b982:	d93a      	bls.n	800b9fa <_scanf_float+0xd6>
 800b984:	f1b9 0f00 	cmp.w	r9, #0
 800b988:	d003      	beq.n	800b992 <_scanf_float+0x6e>
 800b98a:	6823      	ldr	r3, [r4, #0]
 800b98c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b996:	f1ba 0f01 	cmp.w	sl, #1
 800b99a:	f200 8113 	bhi.w	800bbc4 <_scanf_float+0x2a0>
 800b99e:	455e      	cmp	r6, fp
 800b9a0:	f200 8105 	bhi.w	800bbae <_scanf_float+0x28a>
 800b9a4:	2501      	movs	r5, #1
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	b007      	add	sp, #28
 800b9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b9b2:	2a0d      	cmp	r2, #13
 800b9b4:	d8e6      	bhi.n	800b984 <_scanf_float+0x60>
 800b9b6:	a101      	add	r1, pc, #4	; (adr r1, 800b9bc <_scanf_float+0x98>)
 800b9b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b9bc:	0800bafb 	.word	0x0800bafb
 800b9c0:	0800b985 	.word	0x0800b985
 800b9c4:	0800b985 	.word	0x0800b985
 800b9c8:	0800b985 	.word	0x0800b985
 800b9cc:	0800bb5b 	.word	0x0800bb5b
 800b9d0:	0800bb33 	.word	0x0800bb33
 800b9d4:	0800b985 	.word	0x0800b985
 800b9d8:	0800b985 	.word	0x0800b985
 800b9dc:	0800bb09 	.word	0x0800bb09
 800b9e0:	0800b985 	.word	0x0800b985
 800b9e4:	0800b985 	.word	0x0800b985
 800b9e8:	0800b985 	.word	0x0800b985
 800b9ec:	0800b985 	.word	0x0800b985
 800b9f0:	0800bac1 	.word	0x0800bac1
 800b9f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b9f8:	e7db      	b.n	800b9b2 <_scanf_float+0x8e>
 800b9fa:	290e      	cmp	r1, #14
 800b9fc:	d8c2      	bhi.n	800b984 <_scanf_float+0x60>
 800b9fe:	a001      	add	r0, pc, #4	; (adr r0, 800ba04 <_scanf_float+0xe0>)
 800ba00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ba04:	0800bab3 	.word	0x0800bab3
 800ba08:	0800b985 	.word	0x0800b985
 800ba0c:	0800bab3 	.word	0x0800bab3
 800ba10:	0800bb47 	.word	0x0800bb47
 800ba14:	0800b985 	.word	0x0800b985
 800ba18:	0800ba61 	.word	0x0800ba61
 800ba1c:	0800ba9d 	.word	0x0800ba9d
 800ba20:	0800ba9d 	.word	0x0800ba9d
 800ba24:	0800ba9d 	.word	0x0800ba9d
 800ba28:	0800ba9d 	.word	0x0800ba9d
 800ba2c:	0800ba9d 	.word	0x0800ba9d
 800ba30:	0800ba9d 	.word	0x0800ba9d
 800ba34:	0800ba9d 	.word	0x0800ba9d
 800ba38:	0800ba9d 	.word	0x0800ba9d
 800ba3c:	0800ba9d 	.word	0x0800ba9d
 800ba40:	2b6e      	cmp	r3, #110	; 0x6e
 800ba42:	d809      	bhi.n	800ba58 <_scanf_float+0x134>
 800ba44:	2b60      	cmp	r3, #96	; 0x60
 800ba46:	d8b2      	bhi.n	800b9ae <_scanf_float+0x8a>
 800ba48:	2b54      	cmp	r3, #84	; 0x54
 800ba4a:	d077      	beq.n	800bb3c <_scanf_float+0x218>
 800ba4c:	2b59      	cmp	r3, #89	; 0x59
 800ba4e:	d199      	bne.n	800b984 <_scanf_float+0x60>
 800ba50:	2d07      	cmp	r5, #7
 800ba52:	d197      	bne.n	800b984 <_scanf_float+0x60>
 800ba54:	2508      	movs	r5, #8
 800ba56:	e029      	b.n	800baac <_scanf_float+0x188>
 800ba58:	2b74      	cmp	r3, #116	; 0x74
 800ba5a:	d06f      	beq.n	800bb3c <_scanf_float+0x218>
 800ba5c:	2b79      	cmp	r3, #121	; 0x79
 800ba5e:	e7f6      	b.n	800ba4e <_scanf_float+0x12a>
 800ba60:	6821      	ldr	r1, [r4, #0]
 800ba62:	05c8      	lsls	r0, r1, #23
 800ba64:	d51a      	bpl.n	800ba9c <_scanf_float+0x178>
 800ba66:	9b02      	ldr	r3, [sp, #8]
 800ba68:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ba6c:	6021      	str	r1, [r4, #0]
 800ba6e:	f109 0901 	add.w	r9, r9, #1
 800ba72:	b11b      	cbz	r3, 800ba7c <_scanf_float+0x158>
 800ba74:	3b01      	subs	r3, #1
 800ba76:	3201      	adds	r2, #1
 800ba78:	9302      	str	r3, [sp, #8]
 800ba7a:	60a2      	str	r2, [r4, #8]
 800ba7c:	68a3      	ldr	r3, [r4, #8]
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	60a3      	str	r3, [r4, #8]
 800ba82:	6923      	ldr	r3, [r4, #16]
 800ba84:	3301      	adds	r3, #1
 800ba86:	6123      	str	r3, [r4, #16]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	607b      	str	r3, [r7, #4]
 800ba90:	f340 8084 	ble.w	800bb9c <_scanf_float+0x278>
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	3301      	adds	r3, #1
 800ba98:	603b      	str	r3, [r7, #0]
 800ba9a:	e766      	b.n	800b96a <_scanf_float+0x46>
 800ba9c:	eb1a 0f05 	cmn.w	sl, r5
 800baa0:	f47f af70 	bne.w	800b984 <_scanf_float+0x60>
 800baa4:	6822      	ldr	r2, [r4, #0]
 800baa6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800baaa:	6022      	str	r2, [r4, #0]
 800baac:	f806 3b01 	strb.w	r3, [r6], #1
 800bab0:	e7e4      	b.n	800ba7c <_scanf_float+0x158>
 800bab2:	6822      	ldr	r2, [r4, #0]
 800bab4:	0610      	lsls	r0, r2, #24
 800bab6:	f57f af65 	bpl.w	800b984 <_scanf_float+0x60>
 800baba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800babe:	e7f4      	b.n	800baaa <_scanf_float+0x186>
 800bac0:	f1ba 0f00 	cmp.w	sl, #0
 800bac4:	d10e      	bne.n	800bae4 <_scanf_float+0x1c0>
 800bac6:	f1b9 0f00 	cmp.w	r9, #0
 800baca:	d10e      	bne.n	800baea <_scanf_float+0x1c6>
 800bacc:	6822      	ldr	r2, [r4, #0]
 800bace:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bad2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bad6:	d108      	bne.n	800baea <_scanf_float+0x1c6>
 800bad8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800badc:	6022      	str	r2, [r4, #0]
 800bade:	f04f 0a01 	mov.w	sl, #1
 800bae2:	e7e3      	b.n	800baac <_scanf_float+0x188>
 800bae4:	f1ba 0f02 	cmp.w	sl, #2
 800bae8:	d055      	beq.n	800bb96 <_scanf_float+0x272>
 800baea:	2d01      	cmp	r5, #1
 800baec:	d002      	beq.n	800baf4 <_scanf_float+0x1d0>
 800baee:	2d04      	cmp	r5, #4
 800baf0:	f47f af48 	bne.w	800b984 <_scanf_float+0x60>
 800baf4:	3501      	adds	r5, #1
 800baf6:	b2ed      	uxtb	r5, r5
 800baf8:	e7d8      	b.n	800baac <_scanf_float+0x188>
 800bafa:	f1ba 0f01 	cmp.w	sl, #1
 800bafe:	f47f af41 	bne.w	800b984 <_scanf_float+0x60>
 800bb02:	f04f 0a02 	mov.w	sl, #2
 800bb06:	e7d1      	b.n	800baac <_scanf_float+0x188>
 800bb08:	b97d      	cbnz	r5, 800bb2a <_scanf_float+0x206>
 800bb0a:	f1b9 0f00 	cmp.w	r9, #0
 800bb0e:	f47f af3c 	bne.w	800b98a <_scanf_float+0x66>
 800bb12:	6822      	ldr	r2, [r4, #0]
 800bb14:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bb18:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bb1c:	f47f af39 	bne.w	800b992 <_scanf_float+0x6e>
 800bb20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bb24:	6022      	str	r2, [r4, #0]
 800bb26:	2501      	movs	r5, #1
 800bb28:	e7c0      	b.n	800baac <_scanf_float+0x188>
 800bb2a:	2d03      	cmp	r5, #3
 800bb2c:	d0e2      	beq.n	800baf4 <_scanf_float+0x1d0>
 800bb2e:	2d05      	cmp	r5, #5
 800bb30:	e7de      	b.n	800baf0 <_scanf_float+0x1cc>
 800bb32:	2d02      	cmp	r5, #2
 800bb34:	f47f af26 	bne.w	800b984 <_scanf_float+0x60>
 800bb38:	2503      	movs	r5, #3
 800bb3a:	e7b7      	b.n	800baac <_scanf_float+0x188>
 800bb3c:	2d06      	cmp	r5, #6
 800bb3e:	f47f af21 	bne.w	800b984 <_scanf_float+0x60>
 800bb42:	2507      	movs	r5, #7
 800bb44:	e7b2      	b.n	800baac <_scanf_float+0x188>
 800bb46:	6822      	ldr	r2, [r4, #0]
 800bb48:	0591      	lsls	r1, r2, #22
 800bb4a:	f57f af1b 	bpl.w	800b984 <_scanf_float+0x60>
 800bb4e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bb52:	6022      	str	r2, [r4, #0]
 800bb54:	f8cd 9004 	str.w	r9, [sp, #4]
 800bb58:	e7a8      	b.n	800baac <_scanf_float+0x188>
 800bb5a:	6822      	ldr	r2, [r4, #0]
 800bb5c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bb60:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bb64:	d006      	beq.n	800bb74 <_scanf_float+0x250>
 800bb66:	0550      	lsls	r0, r2, #21
 800bb68:	f57f af0c 	bpl.w	800b984 <_scanf_float+0x60>
 800bb6c:	f1b9 0f00 	cmp.w	r9, #0
 800bb70:	f43f af0f 	beq.w	800b992 <_scanf_float+0x6e>
 800bb74:	0591      	lsls	r1, r2, #22
 800bb76:	bf58      	it	pl
 800bb78:	9901      	ldrpl	r1, [sp, #4]
 800bb7a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bb7e:	bf58      	it	pl
 800bb80:	eba9 0101 	subpl.w	r1, r9, r1
 800bb84:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bb88:	bf58      	it	pl
 800bb8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bb8e:	6022      	str	r2, [r4, #0]
 800bb90:	f04f 0900 	mov.w	r9, #0
 800bb94:	e78a      	b.n	800baac <_scanf_float+0x188>
 800bb96:	f04f 0a03 	mov.w	sl, #3
 800bb9a:	e787      	b.n	800baac <_scanf_float+0x188>
 800bb9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bba0:	4639      	mov	r1, r7
 800bba2:	4640      	mov	r0, r8
 800bba4:	4798      	blx	r3
 800bba6:	2800      	cmp	r0, #0
 800bba8:	f43f aedf 	beq.w	800b96a <_scanf_float+0x46>
 800bbac:	e6ea      	b.n	800b984 <_scanf_float+0x60>
 800bbae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bbb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bbb6:	463a      	mov	r2, r7
 800bbb8:	4640      	mov	r0, r8
 800bbba:	4798      	blx	r3
 800bbbc:	6923      	ldr	r3, [r4, #16]
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	6123      	str	r3, [r4, #16]
 800bbc2:	e6ec      	b.n	800b99e <_scanf_float+0x7a>
 800bbc4:	1e6b      	subs	r3, r5, #1
 800bbc6:	2b06      	cmp	r3, #6
 800bbc8:	d825      	bhi.n	800bc16 <_scanf_float+0x2f2>
 800bbca:	2d02      	cmp	r5, #2
 800bbcc:	d836      	bhi.n	800bc3c <_scanf_float+0x318>
 800bbce:	455e      	cmp	r6, fp
 800bbd0:	f67f aee8 	bls.w	800b9a4 <_scanf_float+0x80>
 800bbd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bbd8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bbdc:	463a      	mov	r2, r7
 800bbde:	4640      	mov	r0, r8
 800bbe0:	4798      	blx	r3
 800bbe2:	6923      	ldr	r3, [r4, #16]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	6123      	str	r3, [r4, #16]
 800bbe8:	e7f1      	b.n	800bbce <_scanf_float+0x2aa>
 800bbea:	9802      	ldr	r0, [sp, #8]
 800bbec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bbf0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800bbf4:	9002      	str	r0, [sp, #8]
 800bbf6:	463a      	mov	r2, r7
 800bbf8:	4640      	mov	r0, r8
 800bbfa:	4798      	blx	r3
 800bbfc:	6923      	ldr	r3, [r4, #16]
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	6123      	str	r3, [r4, #16]
 800bc02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bc06:	fa5f fa8a 	uxtb.w	sl, sl
 800bc0a:	f1ba 0f02 	cmp.w	sl, #2
 800bc0e:	d1ec      	bne.n	800bbea <_scanf_float+0x2c6>
 800bc10:	3d03      	subs	r5, #3
 800bc12:	b2ed      	uxtb	r5, r5
 800bc14:	1b76      	subs	r6, r6, r5
 800bc16:	6823      	ldr	r3, [r4, #0]
 800bc18:	05da      	lsls	r2, r3, #23
 800bc1a:	d52f      	bpl.n	800bc7c <_scanf_float+0x358>
 800bc1c:	055b      	lsls	r3, r3, #21
 800bc1e:	d510      	bpl.n	800bc42 <_scanf_float+0x31e>
 800bc20:	455e      	cmp	r6, fp
 800bc22:	f67f aebf 	bls.w	800b9a4 <_scanf_float+0x80>
 800bc26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc2e:	463a      	mov	r2, r7
 800bc30:	4640      	mov	r0, r8
 800bc32:	4798      	blx	r3
 800bc34:	6923      	ldr	r3, [r4, #16]
 800bc36:	3b01      	subs	r3, #1
 800bc38:	6123      	str	r3, [r4, #16]
 800bc3a:	e7f1      	b.n	800bc20 <_scanf_float+0x2fc>
 800bc3c:	46aa      	mov	sl, r5
 800bc3e:	9602      	str	r6, [sp, #8]
 800bc40:	e7df      	b.n	800bc02 <_scanf_float+0x2de>
 800bc42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bc46:	6923      	ldr	r3, [r4, #16]
 800bc48:	2965      	cmp	r1, #101	; 0x65
 800bc4a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800bc4e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800bc52:	6123      	str	r3, [r4, #16]
 800bc54:	d00c      	beq.n	800bc70 <_scanf_float+0x34c>
 800bc56:	2945      	cmp	r1, #69	; 0x45
 800bc58:	d00a      	beq.n	800bc70 <_scanf_float+0x34c>
 800bc5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc5e:	463a      	mov	r2, r7
 800bc60:	4640      	mov	r0, r8
 800bc62:	4798      	blx	r3
 800bc64:	6923      	ldr	r3, [r4, #16]
 800bc66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bc6a:	3b01      	subs	r3, #1
 800bc6c:	1eb5      	subs	r5, r6, #2
 800bc6e:	6123      	str	r3, [r4, #16]
 800bc70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc74:	463a      	mov	r2, r7
 800bc76:	4640      	mov	r0, r8
 800bc78:	4798      	blx	r3
 800bc7a:	462e      	mov	r6, r5
 800bc7c:	6825      	ldr	r5, [r4, #0]
 800bc7e:	f015 0510 	ands.w	r5, r5, #16
 800bc82:	d159      	bne.n	800bd38 <_scanf_float+0x414>
 800bc84:	7035      	strb	r5, [r6, #0]
 800bc86:	6823      	ldr	r3, [r4, #0]
 800bc88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bc8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc90:	d11b      	bne.n	800bcca <_scanf_float+0x3a6>
 800bc92:	9b01      	ldr	r3, [sp, #4]
 800bc94:	454b      	cmp	r3, r9
 800bc96:	eba3 0209 	sub.w	r2, r3, r9
 800bc9a:	d123      	bne.n	800bce4 <_scanf_float+0x3c0>
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	4659      	mov	r1, fp
 800bca0:	4640      	mov	r0, r8
 800bca2:	f000 fea7 	bl	800c9f4 <_strtod_r>
 800bca6:	6822      	ldr	r2, [r4, #0]
 800bca8:	9b03      	ldr	r3, [sp, #12]
 800bcaa:	f012 0f02 	tst.w	r2, #2
 800bcae:	ec57 6b10 	vmov	r6, r7, d0
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	d021      	beq.n	800bcfa <_scanf_float+0x3d6>
 800bcb6:	9903      	ldr	r1, [sp, #12]
 800bcb8:	1d1a      	adds	r2, r3, #4
 800bcba:	600a      	str	r2, [r1, #0]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	e9c3 6700 	strd	r6, r7, [r3]
 800bcc2:	68e3      	ldr	r3, [r4, #12]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	60e3      	str	r3, [r4, #12]
 800bcc8:	e66d      	b.n	800b9a6 <_scanf_float+0x82>
 800bcca:	9b04      	ldr	r3, [sp, #16]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d0e5      	beq.n	800bc9c <_scanf_float+0x378>
 800bcd0:	9905      	ldr	r1, [sp, #20]
 800bcd2:	230a      	movs	r3, #10
 800bcd4:	462a      	mov	r2, r5
 800bcd6:	3101      	adds	r1, #1
 800bcd8:	4640      	mov	r0, r8
 800bcda:	f000 ff13 	bl	800cb04 <_strtol_r>
 800bcde:	9b04      	ldr	r3, [sp, #16]
 800bce0:	9e05      	ldr	r6, [sp, #20]
 800bce2:	1ac2      	subs	r2, r0, r3
 800bce4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bce8:	429e      	cmp	r6, r3
 800bcea:	bf28      	it	cs
 800bcec:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bcf0:	4912      	ldr	r1, [pc, #72]	; (800bd3c <_scanf_float+0x418>)
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	f000 f83c 	bl	800bd70 <siprintf>
 800bcf8:	e7d0      	b.n	800bc9c <_scanf_float+0x378>
 800bcfa:	9903      	ldr	r1, [sp, #12]
 800bcfc:	f012 0f04 	tst.w	r2, #4
 800bd00:	f103 0204 	add.w	r2, r3, #4
 800bd04:	600a      	str	r2, [r1, #0]
 800bd06:	d1d9      	bne.n	800bcbc <_scanf_float+0x398>
 800bd08:	f8d3 8000 	ldr.w	r8, [r3]
 800bd0c:	ee10 2a10 	vmov	r2, s0
 800bd10:	ee10 0a10 	vmov	r0, s0
 800bd14:	463b      	mov	r3, r7
 800bd16:	4639      	mov	r1, r7
 800bd18:	f7f4 ff30 	bl	8000b7c <__aeabi_dcmpun>
 800bd1c:	b128      	cbz	r0, 800bd2a <_scanf_float+0x406>
 800bd1e:	4808      	ldr	r0, [pc, #32]	; (800bd40 <_scanf_float+0x41c>)
 800bd20:	f000 f820 	bl	800bd64 <nanf>
 800bd24:	ed88 0a00 	vstr	s0, [r8]
 800bd28:	e7cb      	b.n	800bcc2 <_scanf_float+0x39e>
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	4639      	mov	r1, r7
 800bd2e:	f7f4 ff83 	bl	8000c38 <__aeabi_d2f>
 800bd32:	f8c8 0000 	str.w	r0, [r8]
 800bd36:	e7c4      	b.n	800bcc2 <_scanf_float+0x39e>
 800bd38:	2500      	movs	r5, #0
 800bd3a:	e634      	b.n	800b9a6 <_scanf_float+0x82>
 800bd3c:	08010484 	.word	0x08010484
 800bd40:	08010890 	.word	0x08010890

0800bd44 <_sbrk_r>:
 800bd44:	b538      	push	{r3, r4, r5, lr}
 800bd46:	4d06      	ldr	r5, [pc, #24]	; (800bd60 <_sbrk_r+0x1c>)
 800bd48:	2300      	movs	r3, #0
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	4608      	mov	r0, r1
 800bd4e:	602b      	str	r3, [r5, #0]
 800bd50:	f7f6 fb42 	bl	80023d8 <_sbrk>
 800bd54:	1c43      	adds	r3, r0, #1
 800bd56:	d102      	bne.n	800bd5e <_sbrk_r+0x1a>
 800bd58:	682b      	ldr	r3, [r5, #0]
 800bd5a:	b103      	cbz	r3, 800bd5e <_sbrk_r+0x1a>
 800bd5c:	6023      	str	r3, [r4, #0]
 800bd5e:	bd38      	pop	{r3, r4, r5, pc}
 800bd60:	20002910 	.word	0x20002910

0800bd64 <nanf>:
 800bd64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bd6c <nanf+0x8>
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	7fc00000 	.word	0x7fc00000

0800bd70 <siprintf>:
 800bd70:	b40e      	push	{r1, r2, r3}
 800bd72:	b500      	push	{lr}
 800bd74:	b09c      	sub	sp, #112	; 0x70
 800bd76:	ab1d      	add	r3, sp, #116	; 0x74
 800bd78:	9002      	str	r0, [sp, #8]
 800bd7a:	9006      	str	r0, [sp, #24]
 800bd7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd80:	4809      	ldr	r0, [pc, #36]	; (800bda8 <siprintf+0x38>)
 800bd82:	9107      	str	r1, [sp, #28]
 800bd84:	9104      	str	r1, [sp, #16]
 800bd86:	4909      	ldr	r1, [pc, #36]	; (800bdac <siprintf+0x3c>)
 800bd88:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd8c:	9105      	str	r1, [sp, #20]
 800bd8e:	6800      	ldr	r0, [r0, #0]
 800bd90:	9301      	str	r3, [sp, #4]
 800bd92:	a902      	add	r1, sp, #8
 800bd94:	f002 fe04 	bl	800e9a0 <_svfiprintf_r>
 800bd98:	9b02      	ldr	r3, [sp, #8]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	701a      	strb	r2, [r3, #0]
 800bd9e:	b01c      	add	sp, #112	; 0x70
 800bda0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bda4:	b003      	add	sp, #12
 800bda6:	4770      	bx	lr
 800bda8:	200003b0 	.word	0x200003b0
 800bdac:	ffff0208 	.word	0xffff0208

0800bdb0 <sulp>:
 800bdb0:	b570      	push	{r4, r5, r6, lr}
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	460d      	mov	r5, r1
 800bdb6:	ec45 4b10 	vmov	d0, r4, r5
 800bdba:	4616      	mov	r6, r2
 800bdbc:	f002 fc30 	bl	800e620 <__ulp>
 800bdc0:	ec51 0b10 	vmov	r0, r1, d0
 800bdc4:	b17e      	cbz	r6, 800bde6 <sulp+0x36>
 800bdc6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bdca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	dd09      	ble.n	800bde6 <sulp+0x36>
 800bdd2:	051b      	lsls	r3, r3, #20
 800bdd4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bdd8:	2400      	movs	r4, #0
 800bdda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bdde:	4622      	mov	r2, r4
 800bde0:	462b      	mov	r3, r5
 800bde2:	f7f4 fc31 	bl	8000648 <__aeabi_dmul>
 800bde6:	bd70      	pop	{r4, r5, r6, pc}

0800bde8 <_strtod_l>:
 800bde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdec:	ed2d 8b02 	vpush	{d8}
 800bdf0:	b09d      	sub	sp, #116	; 0x74
 800bdf2:	461f      	mov	r7, r3
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	9318      	str	r3, [sp, #96]	; 0x60
 800bdf8:	4ba2      	ldr	r3, [pc, #648]	; (800c084 <_strtod_l+0x29c>)
 800bdfa:	9213      	str	r2, [sp, #76]	; 0x4c
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	9305      	str	r3, [sp, #20]
 800be00:	4604      	mov	r4, r0
 800be02:	4618      	mov	r0, r3
 800be04:	4688      	mov	r8, r1
 800be06:	f7f4 fa0b 	bl	8000220 <strlen>
 800be0a:	f04f 0a00 	mov.w	sl, #0
 800be0e:	4605      	mov	r5, r0
 800be10:	f04f 0b00 	mov.w	fp, #0
 800be14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800be18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be1a:	781a      	ldrb	r2, [r3, #0]
 800be1c:	2a2b      	cmp	r2, #43	; 0x2b
 800be1e:	d04e      	beq.n	800bebe <_strtod_l+0xd6>
 800be20:	d83b      	bhi.n	800be9a <_strtod_l+0xb2>
 800be22:	2a0d      	cmp	r2, #13
 800be24:	d834      	bhi.n	800be90 <_strtod_l+0xa8>
 800be26:	2a08      	cmp	r2, #8
 800be28:	d834      	bhi.n	800be94 <_strtod_l+0xac>
 800be2a:	2a00      	cmp	r2, #0
 800be2c:	d03e      	beq.n	800beac <_strtod_l+0xc4>
 800be2e:	2300      	movs	r3, #0
 800be30:	930a      	str	r3, [sp, #40]	; 0x28
 800be32:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800be34:	7833      	ldrb	r3, [r6, #0]
 800be36:	2b30      	cmp	r3, #48	; 0x30
 800be38:	f040 80b0 	bne.w	800bf9c <_strtod_l+0x1b4>
 800be3c:	7873      	ldrb	r3, [r6, #1]
 800be3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800be42:	2b58      	cmp	r3, #88	; 0x58
 800be44:	d168      	bne.n	800bf18 <_strtod_l+0x130>
 800be46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be48:	9301      	str	r3, [sp, #4]
 800be4a:	ab18      	add	r3, sp, #96	; 0x60
 800be4c:	9702      	str	r7, [sp, #8]
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	4a8d      	ldr	r2, [pc, #564]	; (800c088 <_strtod_l+0x2a0>)
 800be52:	ab19      	add	r3, sp, #100	; 0x64
 800be54:	a917      	add	r1, sp, #92	; 0x5c
 800be56:	4620      	mov	r0, r4
 800be58:	f001 fd38 	bl	800d8cc <__gethex>
 800be5c:	f010 0707 	ands.w	r7, r0, #7
 800be60:	4605      	mov	r5, r0
 800be62:	d005      	beq.n	800be70 <_strtod_l+0x88>
 800be64:	2f06      	cmp	r7, #6
 800be66:	d12c      	bne.n	800bec2 <_strtod_l+0xda>
 800be68:	3601      	adds	r6, #1
 800be6a:	2300      	movs	r3, #0
 800be6c:	9617      	str	r6, [sp, #92]	; 0x5c
 800be6e:	930a      	str	r3, [sp, #40]	; 0x28
 800be70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be72:	2b00      	cmp	r3, #0
 800be74:	f040 8590 	bne.w	800c998 <_strtod_l+0xbb0>
 800be78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be7a:	b1eb      	cbz	r3, 800beb8 <_strtod_l+0xd0>
 800be7c:	4652      	mov	r2, sl
 800be7e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800be82:	ec43 2b10 	vmov	d0, r2, r3
 800be86:	b01d      	add	sp, #116	; 0x74
 800be88:	ecbd 8b02 	vpop	{d8}
 800be8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be90:	2a20      	cmp	r2, #32
 800be92:	d1cc      	bne.n	800be2e <_strtod_l+0x46>
 800be94:	3301      	adds	r3, #1
 800be96:	9317      	str	r3, [sp, #92]	; 0x5c
 800be98:	e7be      	b.n	800be18 <_strtod_l+0x30>
 800be9a:	2a2d      	cmp	r2, #45	; 0x2d
 800be9c:	d1c7      	bne.n	800be2e <_strtod_l+0x46>
 800be9e:	2201      	movs	r2, #1
 800bea0:	920a      	str	r2, [sp, #40]	; 0x28
 800bea2:	1c5a      	adds	r2, r3, #1
 800bea4:	9217      	str	r2, [sp, #92]	; 0x5c
 800bea6:	785b      	ldrb	r3, [r3, #1]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d1c2      	bne.n	800be32 <_strtod_l+0x4a>
 800beac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800beae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	f040 856e 	bne.w	800c994 <_strtod_l+0xbac>
 800beb8:	4652      	mov	r2, sl
 800beba:	465b      	mov	r3, fp
 800bebc:	e7e1      	b.n	800be82 <_strtod_l+0x9a>
 800bebe:	2200      	movs	r2, #0
 800bec0:	e7ee      	b.n	800bea0 <_strtod_l+0xb8>
 800bec2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bec4:	b13a      	cbz	r2, 800bed6 <_strtod_l+0xee>
 800bec6:	2135      	movs	r1, #53	; 0x35
 800bec8:	a81a      	add	r0, sp, #104	; 0x68
 800beca:	f002 fcb4 	bl	800e836 <__copybits>
 800bece:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bed0:	4620      	mov	r0, r4
 800bed2:	f002 f873 	bl	800dfbc <_Bfree>
 800bed6:	3f01      	subs	r7, #1
 800bed8:	2f04      	cmp	r7, #4
 800beda:	d806      	bhi.n	800beea <_strtod_l+0x102>
 800bedc:	e8df f007 	tbb	[pc, r7]
 800bee0:	1714030a 	.word	0x1714030a
 800bee4:	0a          	.byte	0x0a
 800bee5:	00          	.byte	0x00
 800bee6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800beea:	0728      	lsls	r0, r5, #28
 800beec:	d5c0      	bpl.n	800be70 <_strtod_l+0x88>
 800beee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bef2:	e7bd      	b.n	800be70 <_strtod_l+0x88>
 800bef4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800bef8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800befa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800befe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bf02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bf06:	e7f0      	b.n	800beea <_strtod_l+0x102>
 800bf08:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c08c <_strtod_l+0x2a4>
 800bf0c:	e7ed      	b.n	800beea <_strtod_l+0x102>
 800bf0e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bf12:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bf16:	e7e8      	b.n	800beea <_strtod_l+0x102>
 800bf18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf1a:	1c5a      	adds	r2, r3, #1
 800bf1c:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf1e:	785b      	ldrb	r3, [r3, #1]
 800bf20:	2b30      	cmp	r3, #48	; 0x30
 800bf22:	d0f9      	beq.n	800bf18 <_strtod_l+0x130>
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d0a3      	beq.n	800be70 <_strtod_l+0x88>
 800bf28:	2301      	movs	r3, #1
 800bf2a:	f04f 0900 	mov.w	r9, #0
 800bf2e:	9304      	str	r3, [sp, #16]
 800bf30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf32:	9308      	str	r3, [sp, #32]
 800bf34:	f8cd 901c 	str.w	r9, [sp, #28]
 800bf38:	464f      	mov	r7, r9
 800bf3a:	220a      	movs	r2, #10
 800bf3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800bf3e:	7806      	ldrb	r6, [r0, #0]
 800bf40:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bf44:	b2d9      	uxtb	r1, r3
 800bf46:	2909      	cmp	r1, #9
 800bf48:	d92a      	bls.n	800bfa0 <_strtod_l+0x1b8>
 800bf4a:	9905      	ldr	r1, [sp, #20]
 800bf4c:	462a      	mov	r2, r5
 800bf4e:	f002 fe2f 	bl	800ebb0 <strncmp>
 800bf52:	b398      	cbz	r0, 800bfbc <_strtod_l+0x1d4>
 800bf54:	2000      	movs	r0, #0
 800bf56:	4632      	mov	r2, r6
 800bf58:	463d      	mov	r5, r7
 800bf5a:	9005      	str	r0, [sp, #20]
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2a65      	cmp	r2, #101	; 0x65
 800bf60:	d001      	beq.n	800bf66 <_strtod_l+0x17e>
 800bf62:	2a45      	cmp	r2, #69	; 0x45
 800bf64:	d118      	bne.n	800bf98 <_strtod_l+0x1b0>
 800bf66:	b91d      	cbnz	r5, 800bf70 <_strtod_l+0x188>
 800bf68:	9a04      	ldr	r2, [sp, #16]
 800bf6a:	4302      	orrs	r2, r0
 800bf6c:	d09e      	beq.n	800beac <_strtod_l+0xc4>
 800bf6e:	2500      	movs	r5, #0
 800bf70:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800bf74:	f108 0201 	add.w	r2, r8, #1
 800bf78:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf7a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800bf7e:	2a2b      	cmp	r2, #43	; 0x2b
 800bf80:	d075      	beq.n	800c06e <_strtod_l+0x286>
 800bf82:	2a2d      	cmp	r2, #45	; 0x2d
 800bf84:	d07b      	beq.n	800c07e <_strtod_l+0x296>
 800bf86:	f04f 0c00 	mov.w	ip, #0
 800bf8a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bf8e:	2909      	cmp	r1, #9
 800bf90:	f240 8082 	bls.w	800c098 <_strtod_l+0x2b0>
 800bf94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bf98:	2600      	movs	r6, #0
 800bf9a:	e09d      	b.n	800c0d8 <_strtod_l+0x2f0>
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	e7c4      	b.n	800bf2a <_strtod_l+0x142>
 800bfa0:	2f08      	cmp	r7, #8
 800bfa2:	bfd8      	it	le
 800bfa4:	9907      	ldrle	r1, [sp, #28]
 800bfa6:	f100 0001 	add.w	r0, r0, #1
 800bfaa:	bfda      	itte	le
 800bfac:	fb02 3301 	mlale	r3, r2, r1, r3
 800bfb0:	9307      	strle	r3, [sp, #28]
 800bfb2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800bfb6:	3701      	adds	r7, #1
 800bfb8:	9017      	str	r0, [sp, #92]	; 0x5c
 800bfba:	e7bf      	b.n	800bf3c <_strtod_l+0x154>
 800bfbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bfbe:	195a      	adds	r2, r3, r5
 800bfc0:	9217      	str	r2, [sp, #92]	; 0x5c
 800bfc2:	5d5a      	ldrb	r2, [r3, r5]
 800bfc4:	2f00      	cmp	r7, #0
 800bfc6:	d037      	beq.n	800c038 <_strtod_l+0x250>
 800bfc8:	9005      	str	r0, [sp, #20]
 800bfca:	463d      	mov	r5, r7
 800bfcc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bfd0:	2b09      	cmp	r3, #9
 800bfd2:	d912      	bls.n	800bffa <_strtod_l+0x212>
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	e7c2      	b.n	800bf5e <_strtod_l+0x176>
 800bfd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bfda:	1c5a      	adds	r2, r3, #1
 800bfdc:	9217      	str	r2, [sp, #92]	; 0x5c
 800bfde:	785a      	ldrb	r2, [r3, #1]
 800bfe0:	3001      	adds	r0, #1
 800bfe2:	2a30      	cmp	r2, #48	; 0x30
 800bfe4:	d0f8      	beq.n	800bfd8 <_strtod_l+0x1f0>
 800bfe6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bfea:	2b08      	cmp	r3, #8
 800bfec:	f200 84d9 	bhi.w	800c9a2 <_strtod_l+0xbba>
 800bff0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bff2:	9005      	str	r0, [sp, #20]
 800bff4:	2000      	movs	r0, #0
 800bff6:	9308      	str	r3, [sp, #32]
 800bff8:	4605      	mov	r5, r0
 800bffa:	3a30      	subs	r2, #48	; 0x30
 800bffc:	f100 0301 	add.w	r3, r0, #1
 800c000:	d014      	beq.n	800c02c <_strtod_l+0x244>
 800c002:	9905      	ldr	r1, [sp, #20]
 800c004:	4419      	add	r1, r3
 800c006:	9105      	str	r1, [sp, #20]
 800c008:	462b      	mov	r3, r5
 800c00a:	eb00 0e05 	add.w	lr, r0, r5
 800c00e:	210a      	movs	r1, #10
 800c010:	4573      	cmp	r3, lr
 800c012:	d113      	bne.n	800c03c <_strtod_l+0x254>
 800c014:	182b      	adds	r3, r5, r0
 800c016:	2b08      	cmp	r3, #8
 800c018:	f105 0501 	add.w	r5, r5, #1
 800c01c:	4405      	add	r5, r0
 800c01e:	dc1c      	bgt.n	800c05a <_strtod_l+0x272>
 800c020:	9907      	ldr	r1, [sp, #28]
 800c022:	230a      	movs	r3, #10
 800c024:	fb03 2301 	mla	r3, r3, r1, r2
 800c028:	9307      	str	r3, [sp, #28]
 800c02a:	2300      	movs	r3, #0
 800c02c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c02e:	1c51      	adds	r1, r2, #1
 800c030:	9117      	str	r1, [sp, #92]	; 0x5c
 800c032:	7852      	ldrb	r2, [r2, #1]
 800c034:	4618      	mov	r0, r3
 800c036:	e7c9      	b.n	800bfcc <_strtod_l+0x1e4>
 800c038:	4638      	mov	r0, r7
 800c03a:	e7d2      	b.n	800bfe2 <_strtod_l+0x1fa>
 800c03c:	2b08      	cmp	r3, #8
 800c03e:	dc04      	bgt.n	800c04a <_strtod_l+0x262>
 800c040:	9e07      	ldr	r6, [sp, #28]
 800c042:	434e      	muls	r6, r1
 800c044:	9607      	str	r6, [sp, #28]
 800c046:	3301      	adds	r3, #1
 800c048:	e7e2      	b.n	800c010 <_strtod_l+0x228>
 800c04a:	f103 0c01 	add.w	ip, r3, #1
 800c04e:	f1bc 0f10 	cmp.w	ip, #16
 800c052:	bfd8      	it	le
 800c054:	fb01 f909 	mulle.w	r9, r1, r9
 800c058:	e7f5      	b.n	800c046 <_strtod_l+0x25e>
 800c05a:	2d10      	cmp	r5, #16
 800c05c:	bfdc      	itt	le
 800c05e:	230a      	movle	r3, #10
 800c060:	fb03 2909 	mlale	r9, r3, r9, r2
 800c064:	e7e1      	b.n	800c02a <_strtod_l+0x242>
 800c066:	2300      	movs	r3, #0
 800c068:	9305      	str	r3, [sp, #20]
 800c06a:	2301      	movs	r3, #1
 800c06c:	e77c      	b.n	800bf68 <_strtod_l+0x180>
 800c06e:	f04f 0c00 	mov.w	ip, #0
 800c072:	f108 0202 	add.w	r2, r8, #2
 800c076:	9217      	str	r2, [sp, #92]	; 0x5c
 800c078:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c07c:	e785      	b.n	800bf8a <_strtod_l+0x1a2>
 800c07e:	f04f 0c01 	mov.w	ip, #1
 800c082:	e7f6      	b.n	800c072 <_strtod_l+0x28a>
 800c084:	080106d8 	.word	0x080106d8
 800c088:	0801048c 	.word	0x0801048c
 800c08c:	7ff00000 	.word	0x7ff00000
 800c090:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c092:	1c51      	adds	r1, r2, #1
 800c094:	9117      	str	r1, [sp, #92]	; 0x5c
 800c096:	7852      	ldrb	r2, [r2, #1]
 800c098:	2a30      	cmp	r2, #48	; 0x30
 800c09a:	d0f9      	beq.n	800c090 <_strtod_l+0x2a8>
 800c09c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c0a0:	2908      	cmp	r1, #8
 800c0a2:	f63f af79 	bhi.w	800bf98 <_strtod_l+0x1b0>
 800c0a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c0aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c0ac:	9206      	str	r2, [sp, #24]
 800c0ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c0b0:	1c51      	adds	r1, r2, #1
 800c0b2:	9117      	str	r1, [sp, #92]	; 0x5c
 800c0b4:	7852      	ldrb	r2, [r2, #1]
 800c0b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c0ba:	2e09      	cmp	r6, #9
 800c0bc:	d937      	bls.n	800c12e <_strtod_l+0x346>
 800c0be:	9e06      	ldr	r6, [sp, #24]
 800c0c0:	1b89      	subs	r1, r1, r6
 800c0c2:	2908      	cmp	r1, #8
 800c0c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c0c8:	dc02      	bgt.n	800c0d0 <_strtod_l+0x2e8>
 800c0ca:	4576      	cmp	r6, lr
 800c0cc:	bfa8      	it	ge
 800c0ce:	4676      	movge	r6, lr
 800c0d0:	f1bc 0f00 	cmp.w	ip, #0
 800c0d4:	d000      	beq.n	800c0d8 <_strtod_l+0x2f0>
 800c0d6:	4276      	negs	r6, r6
 800c0d8:	2d00      	cmp	r5, #0
 800c0da:	d14d      	bne.n	800c178 <_strtod_l+0x390>
 800c0dc:	9904      	ldr	r1, [sp, #16]
 800c0de:	4301      	orrs	r1, r0
 800c0e0:	f47f aec6 	bne.w	800be70 <_strtod_l+0x88>
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f47f aee1 	bne.w	800beac <_strtod_l+0xc4>
 800c0ea:	2a69      	cmp	r2, #105	; 0x69
 800c0ec:	d027      	beq.n	800c13e <_strtod_l+0x356>
 800c0ee:	dc24      	bgt.n	800c13a <_strtod_l+0x352>
 800c0f0:	2a49      	cmp	r2, #73	; 0x49
 800c0f2:	d024      	beq.n	800c13e <_strtod_l+0x356>
 800c0f4:	2a4e      	cmp	r2, #78	; 0x4e
 800c0f6:	f47f aed9 	bne.w	800beac <_strtod_l+0xc4>
 800c0fa:	499f      	ldr	r1, [pc, #636]	; (800c378 <_strtod_l+0x590>)
 800c0fc:	a817      	add	r0, sp, #92	; 0x5c
 800c0fe:	f001 fe3d 	bl	800dd7c <__match>
 800c102:	2800      	cmp	r0, #0
 800c104:	f43f aed2 	beq.w	800beac <_strtod_l+0xc4>
 800c108:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	2b28      	cmp	r3, #40	; 0x28
 800c10e:	d12d      	bne.n	800c16c <_strtod_l+0x384>
 800c110:	499a      	ldr	r1, [pc, #616]	; (800c37c <_strtod_l+0x594>)
 800c112:	aa1a      	add	r2, sp, #104	; 0x68
 800c114:	a817      	add	r0, sp, #92	; 0x5c
 800c116:	f001 fe45 	bl	800dda4 <__hexnan>
 800c11a:	2805      	cmp	r0, #5
 800c11c:	d126      	bne.n	800c16c <_strtod_l+0x384>
 800c11e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c120:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c124:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c128:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c12c:	e6a0      	b.n	800be70 <_strtod_l+0x88>
 800c12e:	210a      	movs	r1, #10
 800c130:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c134:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c138:	e7b9      	b.n	800c0ae <_strtod_l+0x2c6>
 800c13a:	2a6e      	cmp	r2, #110	; 0x6e
 800c13c:	e7db      	b.n	800c0f6 <_strtod_l+0x30e>
 800c13e:	4990      	ldr	r1, [pc, #576]	; (800c380 <_strtod_l+0x598>)
 800c140:	a817      	add	r0, sp, #92	; 0x5c
 800c142:	f001 fe1b 	bl	800dd7c <__match>
 800c146:	2800      	cmp	r0, #0
 800c148:	f43f aeb0 	beq.w	800beac <_strtod_l+0xc4>
 800c14c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c14e:	498d      	ldr	r1, [pc, #564]	; (800c384 <_strtod_l+0x59c>)
 800c150:	3b01      	subs	r3, #1
 800c152:	a817      	add	r0, sp, #92	; 0x5c
 800c154:	9317      	str	r3, [sp, #92]	; 0x5c
 800c156:	f001 fe11 	bl	800dd7c <__match>
 800c15a:	b910      	cbnz	r0, 800c162 <_strtod_l+0x37a>
 800c15c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c15e:	3301      	adds	r3, #1
 800c160:	9317      	str	r3, [sp, #92]	; 0x5c
 800c162:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c394 <_strtod_l+0x5ac>
 800c166:	f04f 0a00 	mov.w	sl, #0
 800c16a:	e681      	b.n	800be70 <_strtod_l+0x88>
 800c16c:	4886      	ldr	r0, [pc, #536]	; (800c388 <_strtod_l+0x5a0>)
 800c16e:	f002 fd17 	bl	800eba0 <nan>
 800c172:	ec5b ab10 	vmov	sl, fp, d0
 800c176:	e67b      	b.n	800be70 <_strtod_l+0x88>
 800c178:	9b05      	ldr	r3, [sp, #20]
 800c17a:	9807      	ldr	r0, [sp, #28]
 800c17c:	1af3      	subs	r3, r6, r3
 800c17e:	2f00      	cmp	r7, #0
 800c180:	bf08      	it	eq
 800c182:	462f      	moveq	r7, r5
 800c184:	2d10      	cmp	r5, #16
 800c186:	9306      	str	r3, [sp, #24]
 800c188:	46a8      	mov	r8, r5
 800c18a:	bfa8      	it	ge
 800c18c:	f04f 0810 	movge.w	r8, #16
 800c190:	f7f4 f9e0 	bl	8000554 <__aeabi_ui2d>
 800c194:	2d09      	cmp	r5, #9
 800c196:	4682      	mov	sl, r0
 800c198:	468b      	mov	fp, r1
 800c19a:	dd13      	ble.n	800c1c4 <_strtod_l+0x3dc>
 800c19c:	4b7b      	ldr	r3, [pc, #492]	; (800c38c <_strtod_l+0x5a4>)
 800c19e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c1a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c1a6:	f7f4 fa4f 	bl	8000648 <__aeabi_dmul>
 800c1aa:	4682      	mov	sl, r0
 800c1ac:	4648      	mov	r0, r9
 800c1ae:	468b      	mov	fp, r1
 800c1b0:	f7f4 f9d0 	bl	8000554 <__aeabi_ui2d>
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	4650      	mov	r0, sl
 800c1ba:	4659      	mov	r1, fp
 800c1bc:	f7f4 f88e 	bl	80002dc <__adddf3>
 800c1c0:	4682      	mov	sl, r0
 800c1c2:	468b      	mov	fp, r1
 800c1c4:	2d0f      	cmp	r5, #15
 800c1c6:	dc38      	bgt.n	800c23a <_strtod_l+0x452>
 800c1c8:	9b06      	ldr	r3, [sp, #24]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	f43f ae50 	beq.w	800be70 <_strtod_l+0x88>
 800c1d0:	dd24      	ble.n	800c21c <_strtod_l+0x434>
 800c1d2:	2b16      	cmp	r3, #22
 800c1d4:	dc0b      	bgt.n	800c1ee <_strtod_l+0x406>
 800c1d6:	496d      	ldr	r1, [pc, #436]	; (800c38c <_strtod_l+0x5a4>)
 800c1d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c1dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1e0:	4652      	mov	r2, sl
 800c1e2:	465b      	mov	r3, fp
 800c1e4:	f7f4 fa30 	bl	8000648 <__aeabi_dmul>
 800c1e8:	4682      	mov	sl, r0
 800c1ea:	468b      	mov	fp, r1
 800c1ec:	e640      	b.n	800be70 <_strtod_l+0x88>
 800c1ee:	9a06      	ldr	r2, [sp, #24]
 800c1f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	db20      	blt.n	800c23a <_strtod_l+0x452>
 800c1f8:	4c64      	ldr	r4, [pc, #400]	; (800c38c <_strtod_l+0x5a4>)
 800c1fa:	f1c5 050f 	rsb	r5, r5, #15
 800c1fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c202:	4652      	mov	r2, sl
 800c204:	465b      	mov	r3, fp
 800c206:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c20a:	f7f4 fa1d 	bl	8000648 <__aeabi_dmul>
 800c20e:	9b06      	ldr	r3, [sp, #24]
 800c210:	1b5d      	subs	r5, r3, r5
 800c212:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c216:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c21a:	e7e3      	b.n	800c1e4 <_strtod_l+0x3fc>
 800c21c:	9b06      	ldr	r3, [sp, #24]
 800c21e:	3316      	adds	r3, #22
 800c220:	db0b      	blt.n	800c23a <_strtod_l+0x452>
 800c222:	9b05      	ldr	r3, [sp, #20]
 800c224:	1b9e      	subs	r6, r3, r6
 800c226:	4b59      	ldr	r3, [pc, #356]	; (800c38c <_strtod_l+0x5a4>)
 800c228:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c22c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c230:	4650      	mov	r0, sl
 800c232:	4659      	mov	r1, fp
 800c234:	f7f4 fb32 	bl	800089c <__aeabi_ddiv>
 800c238:	e7d6      	b.n	800c1e8 <_strtod_l+0x400>
 800c23a:	9b06      	ldr	r3, [sp, #24]
 800c23c:	eba5 0808 	sub.w	r8, r5, r8
 800c240:	4498      	add	r8, r3
 800c242:	f1b8 0f00 	cmp.w	r8, #0
 800c246:	dd74      	ble.n	800c332 <_strtod_l+0x54a>
 800c248:	f018 030f 	ands.w	r3, r8, #15
 800c24c:	d00a      	beq.n	800c264 <_strtod_l+0x47c>
 800c24e:	494f      	ldr	r1, [pc, #316]	; (800c38c <_strtod_l+0x5a4>)
 800c250:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c254:	4652      	mov	r2, sl
 800c256:	465b      	mov	r3, fp
 800c258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c25c:	f7f4 f9f4 	bl	8000648 <__aeabi_dmul>
 800c260:	4682      	mov	sl, r0
 800c262:	468b      	mov	fp, r1
 800c264:	f038 080f 	bics.w	r8, r8, #15
 800c268:	d04f      	beq.n	800c30a <_strtod_l+0x522>
 800c26a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c26e:	dd22      	ble.n	800c2b6 <_strtod_l+0x4ce>
 800c270:	2500      	movs	r5, #0
 800c272:	462e      	mov	r6, r5
 800c274:	9507      	str	r5, [sp, #28]
 800c276:	9505      	str	r5, [sp, #20]
 800c278:	2322      	movs	r3, #34	; 0x22
 800c27a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c394 <_strtod_l+0x5ac>
 800c27e:	6023      	str	r3, [r4, #0]
 800c280:	f04f 0a00 	mov.w	sl, #0
 800c284:	9b07      	ldr	r3, [sp, #28]
 800c286:	2b00      	cmp	r3, #0
 800c288:	f43f adf2 	beq.w	800be70 <_strtod_l+0x88>
 800c28c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c28e:	4620      	mov	r0, r4
 800c290:	f001 fe94 	bl	800dfbc <_Bfree>
 800c294:	9905      	ldr	r1, [sp, #20]
 800c296:	4620      	mov	r0, r4
 800c298:	f001 fe90 	bl	800dfbc <_Bfree>
 800c29c:	4631      	mov	r1, r6
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f001 fe8c 	bl	800dfbc <_Bfree>
 800c2a4:	9907      	ldr	r1, [sp, #28]
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	f001 fe88 	bl	800dfbc <_Bfree>
 800c2ac:	4629      	mov	r1, r5
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f001 fe84 	bl	800dfbc <_Bfree>
 800c2b4:	e5dc      	b.n	800be70 <_strtod_l+0x88>
 800c2b6:	4b36      	ldr	r3, [pc, #216]	; (800c390 <_strtod_l+0x5a8>)
 800c2b8:	9304      	str	r3, [sp, #16]
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c2c0:	4650      	mov	r0, sl
 800c2c2:	4659      	mov	r1, fp
 800c2c4:	4699      	mov	r9, r3
 800c2c6:	f1b8 0f01 	cmp.w	r8, #1
 800c2ca:	dc21      	bgt.n	800c310 <_strtod_l+0x528>
 800c2cc:	b10b      	cbz	r3, 800c2d2 <_strtod_l+0x4ea>
 800c2ce:	4682      	mov	sl, r0
 800c2d0:	468b      	mov	fp, r1
 800c2d2:	4b2f      	ldr	r3, [pc, #188]	; (800c390 <_strtod_l+0x5a8>)
 800c2d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c2d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c2dc:	4652      	mov	r2, sl
 800c2de:	465b      	mov	r3, fp
 800c2e0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c2e4:	f7f4 f9b0 	bl	8000648 <__aeabi_dmul>
 800c2e8:	4b2a      	ldr	r3, [pc, #168]	; (800c394 <_strtod_l+0x5ac>)
 800c2ea:	460a      	mov	r2, r1
 800c2ec:	400b      	ands	r3, r1
 800c2ee:	492a      	ldr	r1, [pc, #168]	; (800c398 <_strtod_l+0x5b0>)
 800c2f0:	428b      	cmp	r3, r1
 800c2f2:	4682      	mov	sl, r0
 800c2f4:	d8bc      	bhi.n	800c270 <_strtod_l+0x488>
 800c2f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c2fa:	428b      	cmp	r3, r1
 800c2fc:	bf86      	itte	hi
 800c2fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c39c <_strtod_l+0x5b4>
 800c302:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800c306:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c30a:	2300      	movs	r3, #0
 800c30c:	9304      	str	r3, [sp, #16]
 800c30e:	e084      	b.n	800c41a <_strtod_l+0x632>
 800c310:	f018 0f01 	tst.w	r8, #1
 800c314:	d005      	beq.n	800c322 <_strtod_l+0x53a>
 800c316:	9b04      	ldr	r3, [sp, #16]
 800c318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31c:	f7f4 f994 	bl	8000648 <__aeabi_dmul>
 800c320:	2301      	movs	r3, #1
 800c322:	9a04      	ldr	r2, [sp, #16]
 800c324:	3208      	adds	r2, #8
 800c326:	f109 0901 	add.w	r9, r9, #1
 800c32a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c32e:	9204      	str	r2, [sp, #16]
 800c330:	e7c9      	b.n	800c2c6 <_strtod_l+0x4de>
 800c332:	d0ea      	beq.n	800c30a <_strtod_l+0x522>
 800c334:	f1c8 0800 	rsb	r8, r8, #0
 800c338:	f018 020f 	ands.w	r2, r8, #15
 800c33c:	d00a      	beq.n	800c354 <_strtod_l+0x56c>
 800c33e:	4b13      	ldr	r3, [pc, #76]	; (800c38c <_strtod_l+0x5a4>)
 800c340:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c344:	4650      	mov	r0, sl
 800c346:	4659      	mov	r1, fp
 800c348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34c:	f7f4 faa6 	bl	800089c <__aeabi_ddiv>
 800c350:	4682      	mov	sl, r0
 800c352:	468b      	mov	fp, r1
 800c354:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c358:	d0d7      	beq.n	800c30a <_strtod_l+0x522>
 800c35a:	f1b8 0f1f 	cmp.w	r8, #31
 800c35e:	dd1f      	ble.n	800c3a0 <_strtod_l+0x5b8>
 800c360:	2500      	movs	r5, #0
 800c362:	462e      	mov	r6, r5
 800c364:	9507      	str	r5, [sp, #28]
 800c366:	9505      	str	r5, [sp, #20]
 800c368:	2322      	movs	r3, #34	; 0x22
 800c36a:	f04f 0a00 	mov.w	sl, #0
 800c36e:	f04f 0b00 	mov.w	fp, #0
 800c372:	6023      	str	r3, [r4, #0]
 800c374:	e786      	b.n	800c284 <_strtod_l+0x49c>
 800c376:	bf00      	nop
 800c378:	0801045d 	.word	0x0801045d
 800c37c:	080104a0 	.word	0x080104a0
 800c380:	08010455 	.word	0x08010455
 800c384:	080105e4 	.word	0x080105e4
 800c388:	08010890 	.word	0x08010890
 800c38c:	08010770 	.word	0x08010770
 800c390:	08010748 	.word	0x08010748
 800c394:	7ff00000 	.word	0x7ff00000
 800c398:	7ca00000 	.word	0x7ca00000
 800c39c:	7fefffff 	.word	0x7fefffff
 800c3a0:	f018 0310 	ands.w	r3, r8, #16
 800c3a4:	bf18      	it	ne
 800c3a6:	236a      	movne	r3, #106	; 0x6a
 800c3a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c758 <_strtod_l+0x970>
 800c3ac:	9304      	str	r3, [sp, #16]
 800c3ae:	4650      	mov	r0, sl
 800c3b0:	4659      	mov	r1, fp
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	f018 0f01 	tst.w	r8, #1
 800c3b8:	d004      	beq.n	800c3c4 <_strtod_l+0x5dc>
 800c3ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c3be:	f7f4 f943 	bl	8000648 <__aeabi_dmul>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c3c8:	f109 0908 	add.w	r9, r9, #8
 800c3cc:	d1f2      	bne.n	800c3b4 <_strtod_l+0x5cc>
 800c3ce:	b10b      	cbz	r3, 800c3d4 <_strtod_l+0x5ec>
 800c3d0:	4682      	mov	sl, r0
 800c3d2:	468b      	mov	fp, r1
 800c3d4:	9b04      	ldr	r3, [sp, #16]
 800c3d6:	b1c3      	cbz	r3, 800c40a <_strtod_l+0x622>
 800c3d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c3dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	4659      	mov	r1, fp
 800c3e4:	dd11      	ble.n	800c40a <_strtod_l+0x622>
 800c3e6:	2b1f      	cmp	r3, #31
 800c3e8:	f340 8124 	ble.w	800c634 <_strtod_l+0x84c>
 800c3ec:	2b34      	cmp	r3, #52	; 0x34
 800c3ee:	bfde      	ittt	le
 800c3f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c3f4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800c3f8:	fa03 f202 	lslle.w	r2, r3, r2
 800c3fc:	f04f 0a00 	mov.w	sl, #0
 800c400:	bfcc      	ite	gt
 800c402:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c406:	ea02 0b01 	andle.w	fp, r2, r1
 800c40a:	2200      	movs	r2, #0
 800c40c:	2300      	movs	r3, #0
 800c40e:	4650      	mov	r0, sl
 800c410:	4659      	mov	r1, fp
 800c412:	f7f4 fb81 	bl	8000b18 <__aeabi_dcmpeq>
 800c416:	2800      	cmp	r0, #0
 800c418:	d1a2      	bne.n	800c360 <_strtod_l+0x578>
 800c41a:	9b07      	ldr	r3, [sp, #28]
 800c41c:	9300      	str	r3, [sp, #0]
 800c41e:	9908      	ldr	r1, [sp, #32]
 800c420:	462b      	mov	r3, r5
 800c422:	463a      	mov	r2, r7
 800c424:	4620      	mov	r0, r4
 800c426:	f001 fe31 	bl	800e08c <__s2b>
 800c42a:	9007      	str	r0, [sp, #28]
 800c42c:	2800      	cmp	r0, #0
 800c42e:	f43f af1f 	beq.w	800c270 <_strtod_l+0x488>
 800c432:	9b05      	ldr	r3, [sp, #20]
 800c434:	1b9e      	subs	r6, r3, r6
 800c436:	9b06      	ldr	r3, [sp, #24]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	bfb4      	ite	lt
 800c43c:	4633      	movlt	r3, r6
 800c43e:	2300      	movge	r3, #0
 800c440:	930c      	str	r3, [sp, #48]	; 0x30
 800c442:	9b06      	ldr	r3, [sp, #24]
 800c444:	2500      	movs	r5, #0
 800c446:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c44a:	9312      	str	r3, [sp, #72]	; 0x48
 800c44c:	462e      	mov	r6, r5
 800c44e:	9b07      	ldr	r3, [sp, #28]
 800c450:	4620      	mov	r0, r4
 800c452:	6859      	ldr	r1, [r3, #4]
 800c454:	f001 fd72 	bl	800df3c <_Balloc>
 800c458:	9005      	str	r0, [sp, #20]
 800c45a:	2800      	cmp	r0, #0
 800c45c:	f43f af0c 	beq.w	800c278 <_strtod_l+0x490>
 800c460:	9b07      	ldr	r3, [sp, #28]
 800c462:	691a      	ldr	r2, [r3, #16]
 800c464:	3202      	adds	r2, #2
 800c466:	f103 010c 	add.w	r1, r3, #12
 800c46a:	0092      	lsls	r2, r2, #2
 800c46c:	300c      	adds	r0, #12
 800c46e:	f001 fd4b 	bl	800df08 <memcpy>
 800c472:	ec4b ab10 	vmov	d0, sl, fp
 800c476:	aa1a      	add	r2, sp, #104	; 0x68
 800c478:	a919      	add	r1, sp, #100	; 0x64
 800c47a:	4620      	mov	r0, r4
 800c47c:	f002 f94c 	bl	800e718 <__d2b>
 800c480:	ec4b ab18 	vmov	d8, sl, fp
 800c484:	9018      	str	r0, [sp, #96]	; 0x60
 800c486:	2800      	cmp	r0, #0
 800c488:	f43f aef6 	beq.w	800c278 <_strtod_l+0x490>
 800c48c:	2101      	movs	r1, #1
 800c48e:	4620      	mov	r0, r4
 800c490:	f001 fe96 	bl	800e1c0 <__i2b>
 800c494:	4606      	mov	r6, r0
 800c496:	2800      	cmp	r0, #0
 800c498:	f43f aeee 	beq.w	800c278 <_strtod_l+0x490>
 800c49c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c49e:	9904      	ldr	r1, [sp, #16]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	bfab      	itete	ge
 800c4a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c4a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c4a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c4aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c4ae:	bfac      	ite	ge
 800c4b0:	eb03 0902 	addge.w	r9, r3, r2
 800c4b4:	1ad7      	sublt	r7, r2, r3
 800c4b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c4b8:	eba3 0801 	sub.w	r8, r3, r1
 800c4bc:	4490      	add	r8, r2
 800c4be:	4ba1      	ldr	r3, [pc, #644]	; (800c744 <_strtod_l+0x95c>)
 800c4c0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c4c4:	4598      	cmp	r8, r3
 800c4c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c4ca:	f280 80c7 	bge.w	800c65c <_strtod_l+0x874>
 800c4ce:	eba3 0308 	sub.w	r3, r3, r8
 800c4d2:	2b1f      	cmp	r3, #31
 800c4d4:	eba2 0203 	sub.w	r2, r2, r3
 800c4d8:	f04f 0101 	mov.w	r1, #1
 800c4dc:	f300 80b1 	bgt.w	800c642 <_strtod_l+0x85a>
 800c4e0:	fa01 f303 	lsl.w	r3, r1, r3
 800c4e4:	930d      	str	r3, [sp, #52]	; 0x34
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	9308      	str	r3, [sp, #32]
 800c4ea:	eb09 0802 	add.w	r8, r9, r2
 800c4ee:	9b04      	ldr	r3, [sp, #16]
 800c4f0:	45c1      	cmp	r9, r8
 800c4f2:	4417      	add	r7, r2
 800c4f4:	441f      	add	r7, r3
 800c4f6:	464b      	mov	r3, r9
 800c4f8:	bfa8      	it	ge
 800c4fa:	4643      	movge	r3, r8
 800c4fc:	42bb      	cmp	r3, r7
 800c4fe:	bfa8      	it	ge
 800c500:	463b      	movge	r3, r7
 800c502:	2b00      	cmp	r3, #0
 800c504:	bfc2      	ittt	gt
 800c506:	eba8 0803 	subgt.w	r8, r8, r3
 800c50a:	1aff      	subgt	r7, r7, r3
 800c50c:	eba9 0903 	subgt.w	r9, r9, r3
 800c510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c512:	2b00      	cmp	r3, #0
 800c514:	dd17      	ble.n	800c546 <_strtod_l+0x75e>
 800c516:	4631      	mov	r1, r6
 800c518:	461a      	mov	r2, r3
 800c51a:	4620      	mov	r0, r4
 800c51c:	f001 ff10 	bl	800e340 <__pow5mult>
 800c520:	4606      	mov	r6, r0
 800c522:	2800      	cmp	r0, #0
 800c524:	f43f aea8 	beq.w	800c278 <_strtod_l+0x490>
 800c528:	4601      	mov	r1, r0
 800c52a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c52c:	4620      	mov	r0, r4
 800c52e:	f001 fe5d 	bl	800e1ec <__multiply>
 800c532:	900b      	str	r0, [sp, #44]	; 0x2c
 800c534:	2800      	cmp	r0, #0
 800c536:	f43f ae9f 	beq.w	800c278 <_strtod_l+0x490>
 800c53a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c53c:	4620      	mov	r0, r4
 800c53e:	f001 fd3d 	bl	800dfbc <_Bfree>
 800c542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c544:	9318      	str	r3, [sp, #96]	; 0x60
 800c546:	f1b8 0f00 	cmp.w	r8, #0
 800c54a:	f300 808c 	bgt.w	800c666 <_strtod_l+0x87e>
 800c54e:	9b06      	ldr	r3, [sp, #24]
 800c550:	2b00      	cmp	r3, #0
 800c552:	dd08      	ble.n	800c566 <_strtod_l+0x77e>
 800c554:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c556:	9905      	ldr	r1, [sp, #20]
 800c558:	4620      	mov	r0, r4
 800c55a:	f001 fef1 	bl	800e340 <__pow5mult>
 800c55e:	9005      	str	r0, [sp, #20]
 800c560:	2800      	cmp	r0, #0
 800c562:	f43f ae89 	beq.w	800c278 <_strtod_l+0x490>
 800c566:	2f00      	cmp	r7, #0
 800c568:	dd08      	ble.n	800c57c <_strtod_l+0x794>
 800c56a:	9905      	ldr	r1, [sp, #20]
 800c56c:	463a      	mov	r2, r7
 800c56e:	4620      	mov	r0, r4
 800c570:	f001 ff40 	bl	800e3f4 <__lshift>
 800c574:	9005      	str	r0, [sp, #20]
 800c576:	2800      	cmp	r0, #0
 800c578:	f43f ae7e 	beq.w	800c278 <_strtod_l+0x490>
 800c57c:	f1b9 0f00 	cmp.w	r9, #0
 800c580:	dd08      	ble.n	800c594 <_strtod_l+0x7ac>
 800c582:	4631      	mov	r1, r6
 800c584:	464a      	mov	r2, r9
 800c586:	4620      	mov	r0, r4
 800c588:	f001 ff34 	bl	800e3f4 <__lshift>
 800c58c:	4606      	mov	r6, r0
 800c58e:	2800      	cmp	r0, #0
 800c590:	f43f ae72 	beq.w	800c278 <_strtod_l+0x490>
 800c594:	9a05      	ldr	r2, [sp, #20]
 800c596:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c598:	4620      	mov	r0, r4
 800c59a:	f001 ffb7 	bl	800e50c <__mdiff>
 800c59e:	4605      	mov	r5, r0
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	f43f ae69 	beq.w	800c278 <_strtod_l+0x490>
 800c5a6:	68c3      	ldr	r3, [r0, #12]
 800c5a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	60c3      	str	r3, [r0, #12]
 800c5ae:	4631      	mov	r1, r6
 800c5b0:	f001 ff90 	bl	800e4d4 <__mcmp>
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	da60      	bge.n	800c67a <_strtod_l+0x892>
 800c5b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5ba:	ea53 030a 	orrs.w	r3, r3, sl
 800c5be:	f040 8082 	bne.w	800c6c6 <_strtod_l+0x8de>
 800c5c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d17d      	bne.n	800c6c6 <_strtod_l+0x8de>
 800c5ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c5ce:	0d1b      	lsrs	r3, r3, #20
 800c5d0:	051b      	lsls	r3, r3, #20
 800c5d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c5d6:	d976      	bls.n	800c6c6 <_strtod_l+0x8de>
 800c5d8:	696b      	ldr	r3, [r5, #20]
 800c5da:	b913      	cbnz	r3, 800c5e2 <_strtod_l+0x7fa>
 800c5dc:	692b      	ldr	r3, [r5, #16]
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	dd71      	ble.n	800c6c6 <_strtod_l+0x8de>
 800c5e2:	4629      	mov	r1, r5
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f001 ff04 	bl	800e3f4 <__lshift>
 800c5ec:	4631      	mov	r1, r6
 800c5ee:	4605      	mov	r5, r0
 800c5f0:	f001 ff70 	bl	800e4d4 <__mcmp>
 800c5f4:	2800      	cmp	r0, #0
 800c5f6:	dd66      	ble.n	800c6c6 <_strtod_l+0x8de>
 800c5f8:	9904      	ldr	r1, [sp, #16]
 800c5fa:	4a53      	ldr	r2, [pc, #332]	; (800c748 <_strtod_l+0x960>)
 800c5fc:	465b      	mov	r3, fp
 800c5fe:	2900      	cmp	r1, #0
 800c600:	f000 8081 	beq.w	800c706 <_strtod_l+0x91e>
 800c604:	ea02 010b 	and.w	r1, r2, fp
 800c608:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c60c:	dc7b      	bgt.n	800c706 <_strtod_l+0x91e>
 800c60e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c612:	f77f aea9 	ble.w	800c368 <_strtod_l+0x580>
 800c616:	4b4d      	ldr	r3, [pc, #308]	; (800c74c <_strtod_l+0x964>)
 800c618:	4650      	mov	r0, sl
 800c61a:	4659      	mov	r1, fp
 800c61c:	2200      	movs	r2, #0
 800c61e:	f7f4 f813 	bl	8000648 <__aeabi_dmul>
 800c622:	460b      	mov	r3, r1
 800c624:	4303      	orrs	r3, r0
 800c626:	bf08      	it	eq
 800c628:	2322      	moveq	r3, #34	; 0x22
 800c62a:	4682      	mov	sl, r0
 800c62c:	468b      	mov	fp, r1
 800c62e:	bf08      	it	eq
 800c630:	6023      	streq	r3, [r4, #0]
 800c632:	e62b      	b.n	800c28c <_strtod_l+0x4a4>
 800c634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c638:	fa02 f303 	lsl.w	r3, r2, r3
 800c63c:	ea03 0a0a 	and.w	sl, r3, sl
 800c640:	e6e3      	b.n	800c40a <_strtod_l+0x622>
 800c642:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c646:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c64a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c64e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c652:	fa01 f308 	lsl.w	r3, r1, r8
 800c656:	9308      	str	r3, [sp, #32]
 800c658:	910d      	str	r1, [sp, #52]	; 0x34
 800c65a:	e746      	b.n	800c4ea <_strtod_l+0x702>
 800c65c:	2300      	movs	r3, #0
 800c65e:	9308      	str	r3, [sp, #32]
 800c660:	2301      	movs	r3, #1
 800c662:	930d      	str	r3, [sp, #52]	; 0x34
 800c664:	e741      	b.n	800c4ea <_strtod_l+0x702>
 800c666:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c668:	4642      	mov	r2, r8
 800c66a:	4620      	mov	r0, r4
 800c66c:	f001 fec2 	bl	800e3f4 <__lshift>
 800c670:	9018      	str	r0, [sp, #96]	; 0x60
 800c672:	2800      	cmp	r0, #0
 800c674:	f47f af6b 	bne.w	800c54e <_strtod_l+0x766>
 800c678:	e5fe      	b.n	800c278 <_strtod_l+0x490>
 800c67a:	465f      	mov	r7, fp
 800c67c:	d16e      	bne.n	800c75c <_strtod_l+0x974>
 800c67e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c680:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c684:	b342      	cbz	r2, 800c6d8 <_strtod_l+0x8f0>
 800c686:	4a32      	ldr	r2, [pc, #200]	; (800c750 <_strtod_l+0x968>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d128      	bne.n	800c6de <_strtod_l+0x8f6>
 800c68c:	9b04      	ldr	r3, [sp, #16]
 800c68e:	4651      	mov	r1, sl
 800c690:	b1eb      	cbz	r3, 800c6ce <_strtod_l+0x8e6>
 800c692:	4b2d      	ldr	r3, [pc, #180]	; (800c748 <_strtod_l+0x960>)
 800c694:	403b      	ands	r3, r7
 800c696:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c69a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c69e:	d819      	bhi.n	800c6d4 <_strtod_l+0x8ec>
 800c6a0:	0d1b      	lsrs	r3, r3, #20
 800c6a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c6a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c6aa:	4299      	cmp	r1, r3
 800c6ac:	d117      	bne.n	800c6de <_strtod_l+0x8f6>
 800c6ae:	4b29      	ldr	r3, [pc, #164]	; (800c754 <_strtod_l+0x96c>)
 800c6b0:	429f      	cmp	r7, r3
 800c6b2:	d102      	bne.n	800c6ba <_strtod_l+0x8d2>
 800c6b4:	3101      	adds	r1, #1
 800c6b6:	f43f addf 	beq.w	800c278 <_strtod_l+0x490>
 800c6ba:	4b23      	ldr	r3, [pc, #140]	; (800c748 <_strtod_l+0x960>)
 800c6bc:	403b      	ands	r3, r7
 800c6be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c6c2:	f04f 0a00 	mov.w	sl, #0
 800c6c6:	9b04      	ldr	r3, [sp, #16]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1a4      	bne.n	800c616 <_strtod_l+0x82e>
 800c6cc:	e5de      	b.n	800c28c <_strtod_l+0x4a4>
 800c6ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6d2:	e7ea      	b.n	800c6aa <_strtod_l+0x8c2>
 800c6d4:	4613      	mov	r3, r2
 800c6d6:	e7e8      	b.n	800c6aa <_strtod_l+0x8c2>
 800c6d8:	ea53 030a 	orrs.w	r3, r3, sl
 800c6dc:	d08c      	beq.n	800c5f8 <_strtod_l+0x810>
 800c6de:	9b08      	ldr	r3, [sp, #32]
 800c6e0:	b1db      	cbz	r3, 800c71a <_strtod_l+0x932>
 800c6e2:	423b      	tst	r3, r7
 800c6e4:	d0ef      	beq.n	800c6c6 <_strtod_l+0x8de>
 800c6e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6e8:	9a04      	ldr	r2, [sp, #16]
 800c6ea:	4650      	mov	r0, sl
 800c6ec:	4659      	mov	r1, fp
 800c6ee:	b1c3      	cbz	r3, 800c722 <_strtod_l+0x93a>
 800c6f0:	f7ff fb5e 	bl	800bdb0 <sulp>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	ec51 0b18 	vmov	r0, r1, d8
 800c6fc:	f7f3 fdee 	bl	80002dc <__adddf3>
 800c700:	4682      	mov	sl, r0
 800c702:	468b      	mov	fp, r1
 800c704:	e7df      	b.n	800c6c6 <_strtod_l+0x8de>
 800c706:	4013      	ands	r3, r2
 800c708:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c70c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c710:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c714:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c718:	e7d5      	b.n	800c6c6 <_strtod_l+0x8de>
 800c71a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c71c:	ea13 0f0a 	tst.w	r3, sl
 800c720:	e7e0      	b.n	800c6e4 <_strtod_l+0x8fc>
 800c722:	f7ff fb45 	bl	800bdb0 <sulp>
 800c726:	4602      	mov	r2, r0
 800c728:	460b      	mov	r3, r1
 800c72a:	ec51 0b18 	vmov	r0, r1, d8
 800c72e:	f7f3 fdd3 	bl	80002d8 <__aeabi_dsub>
 800c732:	2200      	movs	r2, #0
 800c734:	2300      	movs	r3, #0
 800c736:	4682      	mov	sl, r0
 800c738:	468b      	mov	fp, r1
 800c73a:	f7f4 f9ed 	bl	8000b18 <__aeabi_dcmpeq>
 800c73e:	2800      	cmp	r0, #0
 800c740:	d0c1      	beq.n	800c6c6 <_strtod_l+0x8de>
 800c742:	e611      	b.n	800c368 <_strtod_l+0x580>
 800c744:	fffffc02 	.word	0xfffffc02
 800c748:	7ff00000 	.word	0x7ff00000
 800c74c:	39500000 	.word	0x39500000
 800c750:	000fffff 	.word	0x000fffff
 800c754:	7fefffff 	.word	0x7fefffff
 800c758:	080104b8 	.word	0x080104b8
 800c75c:	4631      	mov	r1, r6
 800c75e:	4628      	mov	r0, r5
 800c760:	f002 f836 	bl	800e7d0 <__ratio>
 800c764:	ec59 8b10 	vmov	r8, r9, d0
 800c768:	ee10 0a10 	vmov	r0, s0
 800c76c:	2200      	movs	r2, #0
 800c76e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c772:	4649      	mov	r1, r9
 800c774:	f7f4 f9e4 	bl	8000b40 <__aeabi_dcmple>
 800c778:	2800      	cmp	r0, #0
 800c77a:	d07a      	beq.n	800c872 <_strtod_l+0xa8a>
 800c77c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d04a      	beq.n	800c818 <_strtod_l+0xa30>
 800c782:	4b95      	ldr	r3, [pc, #596]	; (800c9d8 <_strtod_l+0xbf0>)
 800c784:	2200      	movs	r2, #0
 800c786:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c78a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c9d8 <_strtod_l+0xbf0>
 800c78e:	f04f 0800 	mov.w	r8, #0
 800c792:	4b92      	ldr	r3, [pc, #584]	; (800c9dc <_strtod_l+0xbf4>)
 800c794:	403b      	ands	r3, r7
 800c796:	930d      	str	r3, [sp, #52]	; 0x34
 800c798:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c79a:	4b91      	ldr	r3, [pc, #580]	; (800c9e0 <_strtod_l+0xbf8>)
 800c79c:	429a      	cmp	r2, r3
 800c79e:	f040 80b0 	bne.w	800c902 <_strtod_l+0xb1a>
 800c7a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c7a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c7aa:	ec4b ab10 	vmov	d0, sl, fp
 800c7ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c7b2:	f001 ff35 	bl	800e620 <__ulp>
 800c7b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c7ba:	ec53 2b10 	vmov	r2, r3, d0
 800c7be:	f7f3 ff43 	bl	8000648 <__aeabi_dmul>
 800c7c2:	4652      	mov	r2, sl
 800c7c4:	465b      	mov	r3, fp
 800c7c6:	f7f3 fd89 	bl	80002dc <__adddf3>
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	4983      	ldr	r1, [pc, #524]	; (800c9dc <_strtod_l+0xbf4>)
 800c7ce:	4a85      	ldr	r2, [pc, #532]	; (800c9e4 <_strtod_l+0xbfc>)
 800c7d0:	4019      	ands	r1, r3
 800c7d2:	4291      	cmp	r1, r2
 800c7d4:	4682      	mov	sl, r0
 800c7d6:	d960      	bls.n	800c89a <_strtod_l+0xab2>
 800c7d8:	ee18 3a90 	vmov	r3, s17
 800c7dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d104      	bne.n	800c7ee <_strtod_l+0xa06>
 800c7e4:	ee18 3a10 	vmov	r3, s16
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	f43f ad45 	beq.w	800c278 <_strtod_l+0x490>
 800c7ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c9f0 <_strtod_l+0xc08>
 800c7f2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c7f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c7f8:	4620      	mov	r0, r4
 800c7fa:	f001 fbdf 	bl	800dfbc <_Bfree>
 800c7fe:	9905      	ldr	r1, [sp, #20]
 800c800:	4620      	mov	r0, r4
 800c802:	f001 fbdb 	bl	800dfbc <_Bfree>
 800c806:	4631      	mov	r1, r6
 800c808:	4620      	mov	r0, r4
 800c80a:	f001 fbd7 	bl	800dfbc <_Bfree>
 800c80e:	4629      	mov	r1, r5
 800c810:	4620      	mov	r0, r4
 800c812:	f001 fbd3 	bl	800dfbc <_Bfree>
 800c816:	e61a      	b.n	800c44e <_strtod_l+0x666>
 800c818:	f1ba 0f00 	cmp.w	sl, #0
 800c81c:	d11b      	bne.n	800c856 <_strtod_l+0xa6e>
 800c81e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c822:	b9f3      	cbnz	r3, 800c862 <_strtod_l+0xa7a>
 800c824:	4b6c      	ldr	r3, [pc, #432]	; (800c9d8 <_strtod_l+0xbf0>)
 800c826:	2200      	movs	r2, #0
 800c828:	4640      	mov	r0, r8
 800c82a:	4649      	mov	r1, r9
 800c82c:	f7f4 f97e 	bl	8000b2c <__aeabi_dcmplt>
 800c830:	b9d0      	cbnz	r0, 800c868 <_strtod_l+0xa80>
 800c832:	4640      	mov	r0, r8
 800c834:	4649      	mov	r1, r9
 800c836:	4b6c      	ldr	r3, [pc, #432]	; (800c9e8 <_strtod_l+0xc00>)
 800c838:	2200      	movs	r2, #0
 800c83a:	f7f3 ff05 	bl	8000648 <__aeabi_dmul>
 800c83e:	4680      	mov	r8, r0
 800c840:	4689      	mov	r9, r1
 800c842:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c846:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c84a:	9315      	str	r3, [sp, #84]	; 0x54
 800c84c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c850:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c854:	e79d      	b.n	800c792 <_strtod_l+0x9aa>
 800c856:	f1ba 0f01 	cmp.w	sl, #1
 800c85a:	d102      	bne.n	800c862 <_strtod_l+0xa7a>
 800c85c:	2f00      	cmp	r7, #0
 800c85e:	f43f ad83 	beq.w	800c368 <_strtod_l+0x580>
 800c862:	4b62      	ldr	r3, [pc, #392]	; (800c9ec <_strtod_l+0xc04>)
 800c864:	2200      	movs	r2, #0
 800c866:	e78e      	b.n	800c786 <_strtod_l+0x99e>
 800c868:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c9e8 <_strtod_l+0xc00>
 800c86c:	f04f 0800 	mov.w	r8, #0
 800c870:	e7e7      	b.n	800c842 <_strtod_l+0xa5a>
 800c872:	4b5d      	ldr	r3, [pc, #372]	; (800c9e8 <_strtod_l+0xc00>)
 800c874:	4640      	mov	r0, r8
 800c876:	4649      	mov	r1, r9
 800c878:	2200      	movs	r2, #0
 800c87a:	f7f3 fee5 	bl	8000648 <__aeabi_dmul>
 800c87e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c880:	4680      	mov	r8, r0
 800c882:	4689      	mov	r9, r1
 800c884:	b933      	cbnz	r3, 800c894 <_strtod_l+0xaac>
 800c886:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c88a:	900e      	str	r0, [sp, #56]	; 0x38
 800c88c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c88e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c892:	e7dd      	b.n	800c850 <_strtod_l+0xa68>
 800c894:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c898:	e7f9      	b.n	800c88e <_strtod_l+0xaa6>
 800c89a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c89e:	9b04      	ldr	r3, [sp, #16]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1a8      	bne.n	800c7f6 <_strtod_l+0xa0e>
 800c8a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c8a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8aa:	0d1b      	lsrs	r3, r3, #20
 800c8ac:	051b      	lsls	r3, r3, #20
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d1a1      	bne.n	800c7f6 <_strtod_l+0xa0e>
 800c8b2:	4640      	mov	r0, r8
 800c8b4:	4649      	mov	r1, r9
 800c8b6:	f7f4 fa27 	bl	8000d08 <__aeabi_d2lz>
 800c8ba:	f7f3 fe97 	bl	80005ec <__aeabi_l2d>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	4640      	mov	r0, r8
 800c8c4:	4649      	mov	r1, r9
 800c8c6:	f7f3 fd07 	bl	80002d8 <__aeabi_dsub>
 800c8ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8d0:	ea43 030a 	orr.w	r3, r3, sl
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	4680      	mov	r8, r0
 800c8d8:	4689      	mov	r9, r1
 800c8da:	d055      	beq.n	800c988 <_strtod_l+0xba0>
 800c8dc:	a336      	add	r3, pc, #216	; (adr r3, 800c9b8 <_strtod_l+0xbd0>)
 800c8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e2:	f7f4 f923 	bl	8000b2c <__aeabi_dcmplt>
 800c8e6:	2800      	cmp	r0, #0
 800c8e8:	f47f acd0 	bne.w	800c28c <_strtod_l+0x4a4>
 800c8ec:	a334      	add	r3, pc, #208	; (adr r3, 800c9c0 <_strtod_l+0xbd8>)
 800c8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f2:	4640      	mov	r0, r8
 800c8f4:	4649      	mov	r1, r9
 800c8f6:	f7f4 f937 	bl	8000b68 <__aeabi_dcmpgt>
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	f43f af7b 	beq.w	800c7f6 <_strtod_l+0xa0e>
 800c900:	e4c4      	b.n	800c28c <_strtod_l+0x4a4>
 800c902:	9b04      	ldr	r3, [sp, #16]
 800c904:	b333      	cbz	r3, 800c954 <_strtod_l+0xb6c>
 800c906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c908:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c90c:	d822      	bhi.n	800c954 <_strtod_l+0xb6c>
 800c90e:	a32e      	add	r3, pc, #184	; (adr r3, 800c9c8 <_strtod_l+0xbe0>)
 800c910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c914:	4640      	mov	r0, r8
 800c916:	4649      	mov	r1, r9
 800c918:	f7f4 f912 	bl	8000b40 <__aeabi_dcmple>
 800c91c:	b1a0      	cbz	r0, 800c948 <_strtod_l+0xb60>
 800c91e:	4649      	mov	r1, r9
 800c920:	4640      	mov	r0, r8
 800c922:	f7f4 f969 	bl	8000bf8 <__aeabi_d2uiz>
 800c926:	2801      	cmp	r0, #1
 800c928:	bf38      	it	cc
 800c92a:	2001      	movcc	r0, #1
 800c92c:	f7f3 fe12 	bl	8000554 <__aeabi_ui2d>
 800c930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c932:	4680      	mov	r8, r0
 800c934:	4689      	mov	r9, r1
 800c936:	bb23      	cbnz	r3, 800c982 <_strtod_l+0xb9a>
 800c938:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c93c:	9010      	str	r0, [sp, #64]	; 0x40
 800c93e:	9311      	str	r3, [sp, #68]	; 0x44
 800c940:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c944:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c94a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c94c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c950:	1a9b      	subs	r3, r3, r2
 800c952:	9309      	str	r3, [sp, #36]	; 0x24
 800c954:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c958:	eeb0 0a48 	vmov.f32	s0, s16
 800c95c:	eef0 0a68 	vmov.f32	s1, s17
 800c960:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c964:	f001 fe5c 	bl	800e620 <__ulp>
 800c968:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c96c:	ec53 2b10 	vmov	r2, r3, d0
 800c970:	f7f3 fe6a 	bl	8000648 <__aeabi_dmul>
 800c974:	ec53 2b18 	vmov	r2, r3, d8
 800c978:	f7f3 fcb0 	bl	80002dc <__adddf3>
 800c97c:	4682      	mov	sl, r0
 800c97e:	468b      	mov	fp, r1
 800c980:	e78d      	b.n	800c89e <_strtod_l+0xab6>
 800c982:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c986:	e7db      	b.n	800c940 <_strtod_l+0xb58>
 800c988:	a311      	add	r3, pc, #68	; (adr r3, 800c9d0 <_strtod_l+0xbe8>)
 800c98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98e:	f7f4 f8cd 	bl	8000b2c <__aeabi_dcmplt>
 800c992:	e7b2      	b.n	800c8fa <_strtod_l+0xb12>
 800c994:	2300      	movs	r3, #0
 800c996:	930a      	str	r3, [sp, #40]	; 0x28
 800c998:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c99a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c99c:	6013      	str	r3, [r2, #0]
 800c99e:	f7ff ba6b 	b.w	800be78 <_strtod_l+0x90>
 800c9a2:	2a65      	cmp	r2, #101	; 0x65
 800c9a4:	f43f ab5f 	beq.w	800c066 <_strtod_l+0x27e>
 800c9a8:	2a45      	cmp	r2, #69	; 0x45
 800c9aa:	f43f ab5c 	beq.w	800c066 <_strtod_l+0x27e>
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	f7ff bb94 	b.w	800c0dc <_strtod_l+0x2f4>
 800c9b4:	f3af 8000 	nop.w
 800c9b8:	94a03595 	.word	0x94a03595
 800c9bc:	3fdfffff 	.word	0x3fdfffff
 800c9c0:	35afe535 	.word	0x35afe535
 800c9c4:	3fe00000 	.word	0x3fe00000
 800c9c8:	ffc00000 	.word	0xffc00000
 800c9cc:	41dfffff 	.word	0x41dfffff
 800c9d0:	94a03595 	.word	0x94a03595
 800c9d4:	3fcfffff 	.word	0x3fcfffff
 800c9d8:	3ff00000 	.word	0x3ff00000
 800c9dc:	7ff00000 	.word	0x7ff00000
 800c9e0:	7fe00000 	.word	0x7fe00000
 800c9e4:	7c9fffff 	.word	0x7c9fffff
 800c9e8:	3fe00000 	.word	0x3fe00000
 800c9ec:	bff00000 	.word	0xbff00000
 800c9f0:	7fefffff 	.word	0x7fefffff

0800c9f4 <_strtod_r>:
 800c9f4:	4b01      	ldr	r3, [pc, #4]	; (800c9fc <_strtod_r+0x8>)
 800c9f6:	f7ff b9f7 	b.w	800bde8 <_strtod_l>
 800c9fa:	bf00      	nop
 800c9fc:	20000418 	.word	0x20000418

0800ca00 <_strtol_l.constprop.0>:
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca06:	d001      	beq.n	800ca0c <_strtol_l.constprop.0+0xc>
 800ca08:	2b24      	cmp	r3, #36	; 0x24
 800ca0a:	d906      	bls.n	800ca1a <_strtol_l.constprop.0+0x1a>
 800ca0c:	f7fe fa06 	bl	800ae1c <__errno>
 800ca10:	2316      	movs	r3, #22
 800ca12:	6003      	str	r3, [r0, #0]
 800ca14:	2000      	movs	r0, #0
 800ca16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca1a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cb00 <_strtol_l.constprop.0+0x100>
 800ca1e:	460d      	mov	r5, r1
 800ca20:	462e      	mov	r6, r5
 800ca22:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca26:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ca2a:	f017 0708 	ands.w	r7, r7, #8
 800ca2e:	d1f7      	bne.n	800ca20 <_strtol_l.constprop.0+0x20>
 800ca30:	2c2d      	cmp	r4, #45	; 0x2d
 800ca32:	d132      	bne.n	800ca9a <_strtol_l.constprop.0+0x9a>
 800ca34:	782c      	ldrb	r4, [r5, #0]
 800ca36:	2701      	movs	r7, #1
 800ca38:	1cb5      	adds	r5, r6, #2
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d05b      	beq.n	800caf6 <_strtol_l.constprop.0+0xf6>
 800ca3e:	2b10      	cmp	r3, #16
 800ca40:	d109      	bne.n	800ca56 <_strtol_l.constprop.0+0x56>
 800ca42:	2c30      	cmp	r4, #48	; 0x30
 800ca44:	d107      	bne.n	800ca56 <_strtol_l.constprop.0+0x56>
 800ca46:	782c      	ldrb	r4, [r5, #0]
 800ca48:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ca4c:	2c58      	cmp	r4, #88	; 0x58
 800ca4e:	d14d      	bne.n	800caec <_strtol_l.constprop.0+0xec>
 800ca50:	786c      	ldrb	r4, [r5, #1]
 800ca52:	2310      	movs	r3, #16
 800ca54:	3502      	adds	r5, #2
 800ca56:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ca5a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ca5e:	f04f 0c00 	mov.w	ip, #0
 800ca62:	fbb8 f9f3 	udiv	r9, r8, r3
 800ca66:	4666      	mov	r6, ip
 800ca68:	fb03 8a19 	mls	sl, r3, r9, r8
 800ca6c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ca70:	f1be 0f09 	cmp.w	lr, #9
 800ca74:	d816      	bhi.n	800caa4 <_strtol_l.constprop.0+0xa4>
 800ca76:	4674      	mov	r4, lr
 800ca78:	42a3      	cmp	r3, r4
 800ca7a:	dd24      	ble.n	800cac6 <_strtol_l.constprop.0+0xc6>
 800ca7c:	f1bc 0f00 	cmp.w	ip, #0
 800ca80:	db1e      	blt.n	800cac0 <_strtol_l.constprop.0+0xc0>
 800ca82:	45b1      	cmp	r9, r6
 800ca84:	d31c      	bcc.n	800cac0 <_strtol_l.constprop.0+0xc0>
 800ca86:	d101      	bne.n	800ca8c <_strtol_l.constprop.0+0x8c>
 800ca88:	45a2      	cmp	sl, r4
 800ca8a:	db19      	blt.n	800cac0 <_strtol_l.constprop.0+0xc0>
 800ca8c:	fb06 4603 	mla	r6, r6, r3, r4
 800ca90:	f04f 0c01 	mov.w	ip, #1
 800ca94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca98:	e7e8      	b.n	800ca6c <_strtol_l.constprop.0+0x6c>
 800ca9a:	2c2b      	cmp	r4, #43	; 0x2b
 800ca9c:	bf04      	itt	eq
 800ca9e:	782c      	ldrbeq	r4, [r5, #0]
 800caa0:	1cb5      	addeq	r5, r6, #2
 800caa2:	e7ca      	b.n	800ca3a <_strtol_l.constprop.0+0x3a>
 800caa4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800caa8:	f1be 0f19 	cmp.w	lr, #25
 800caac:	d801      	bhi.n	800cab2 <_strtol_l.constprop.0+0xb2>
 800caae:	3c37      	subs	r4, #55	; 0x37
 800cab0:	e7e2      	b.n	800ca78 <_strtol_l.constprop.0+0x78>
 800cab2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cab6:	f1be 0f19 	cmp.w	lr, #25
 800caba:	d804      	bhi.n	800cac6 <_strtol_l.constprop.0+0xc6>
 800cabc:	3c57      	subs	r4, #87	; 0x57
 800cabe:	e7db      	b.n	800ca78 <_strtol_l.constprop.0+0x78>
 800cac0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800cac4:	e7e6      	b.n	800ca94 <_strtol_l.constprop.0+0x94>
 800cac6:	f1bc 0f00 	cmp.w	ip, #0
 800caca:	da05      	bge.n	800cad8 <_strtol_l.constprop.0+0xd8>
 800cacc:	2322      	movs	r3, #34	; 0x22
 800cace:	6003      	str	r3, [r0, #0]
 800cad0:	4646      	mov	r6, r8
 800cad2:	b942      	cbnz	r2, 800cae6 <_strtol_l.constprop.0+0xe6>
 800cad4:	4630      	mov	r0, r6
 800cad6:	e79e      	b.n	800ca16 <_strtol_l.constprop.0+0x16>
 800cad8:	b107      	cbz	r7, 800cadc <_strtol_l.constprop.0+0xdc>
 800cada:	4276      	negs	r6, r6
 800cadc:	2a00      	cmp	r2, #0
 800cade:	d0f9      	beq.n	800cad4 <_strtol_l.constprop.0+0xd4>
 800cae0:	f1bc 0f00 	cmp.w	ip, #0
 800cae4:	d000      	beq.n	800cae8 <_strtol_l.constprop.0+0xe8>
 800cae6:	1e69      	subs	r1, r5, #1
 800cae8:	6011      	str	r1, [r2, #0]
 800caea:	e7f3      	b.n	800cad4 <_strtol_l.constprop.0+0xd4>
 800caec:	2430      	movs	r4, #48	; 0x30
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d1b1      	bne.n	800ca56 <_strtol_l.constprop.0+0x56>
 800caf2:	2308      	movs	r3, #8
 800caf4:	e7af      	b.n	800ca56 <_strtol_l.constprop.0+0x56>
 800caf6:	2c30      	cmp	r4, #48	; 0x30
 800caf8:	d0a5      	beq.n	800ca46 <_strtol_l.constprop.0+0x46>
 800cafa:	230a      	movs	r3, #10
 800cafc:	e7ab      	b.n	800ca56 <_strtol_l.constprop.0+0x56>
 800cafe:	bf00      	nop
 800cb00:	080104e1 	.word	0x080104e1

0800cb04 <_strtol_r>:
 800cb04:	f7ff bf7c 	b.w	800ca00 <_strtol_l.constprop.0>

0800cb08 <quorem>:
 800cb08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb0c:	6903      	ldr	r3, [r0, #16]
 800cb0e:	690c      	ldr	r4, [r1, #16]
 800cb10:	42a3      	cmp	r3, r4
 800cb12:	4607      	mov	r7, r0
 800cb14:	f2c0 8081 	blt.w	800cc1a <quorem+0x112>
 800cb18:	3c01      	subs	r4, #1
 800cb1a:	f101 0814 	add.w	r8, r1, #20
 800cb1e:	f100 0514 	add.w	r5, r0, #20
 800cb22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb26:	9301      	str	r3, [sp, #4]
 800cb28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb30:	3301      	adds	r3, #1
 800cb32:	429a      	cmp	r2, r3
 800cb34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cb38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb3c:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb40:	d331      	bcc.n	800cba6 <quorem+0x9e>
 800cb42:	f04f 0e00 	mov.w	lr, #0
 800cb46:	4640      	mov	r0, r8
 800cb48:	46ac      	mov	ip, r5
 800cb4a:	46f2      	mov	sl, lr
 800cb4c:	f850 2b04 	ldr.w	r2, [r0], #4
 800cb50:	b293      	uxth	r3, r2
 800cb52:	fb06 e303 	mla	r3, r6, r3, lr
 800cb56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	ebaa 0303 	sub.w	r3, sl, r3
 800cb60:	f8dc a000 	ldr.w	sl, [ip]
 800cb64:	0c12      	lsrs	r2, r2, #16
 800cb66:	fa13 f38a 	uxtah	r3, r3, sl
 800cb6a:	fb06 e202 	mla	r2, r6, r2, lr
 800cb6e:	9300      	str	r3, [sp, #0]
 800cb70:	9b00      	ldr	r3, [sp, #0]
 800cb72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cb76:	b292      	uxth	r2, r2
 800cb78:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cb7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb80:	f8bd 3000 	ldrh.w	r3, [sp]
 800cb84:	4581      	cmp	r9, r0
 800cb86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb8a:	f84c 3b04 	str.w	r3, [ip], #4
 800cb8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cb92:	d2db      	bcs.n	800cb4c <quorem+0x44>
 800cb94:	f855 300b 	ldr.w	r3, [r5, fp]
 800cb98:	b92b      	cbnz	r3, 800cba6 <quorem+0x9e>
 800cb9a:	9b01      	ldr	r3, [sp, #4]
 800cb9c:	3b04      	subs	r3, #4
 800cb9e:	429d      	cmp	r5, r3
 800cba0:	461a      	mov	r2, r3
 800cba2:	d32e      	bcc.n	800cc02 <quorem+0xfa>
 800cba4:	613c      	str	r4, [r7, #16]
 800cba6:	4638      	mov	r0, r7
 800cba8:	f001 fc94 	bl	800e4d4 <__mcmp>
 800cbac:	2800      	cmp	r0, #0
 800cbae:	db24      	blt.n	800cbfa <quorem+0xf2>
 800cbb0:	3601      	adds	r6, #1
 800cbb2:	4628      	mov	r0, r5
 800cbb4:	f04f 0c00 	mov.w	ip, #0
 800cbb8:	f858 2b04 	ldr.w	r2, [r8], #4
 800cbbc:	f8d0 e000 	ldr.w	lr, [r0]
 800cbc0:	b293      	uxth	r3, r2
 800cbc2:	ebac 0303 	sub.w	r3, ip, r3
 800cbc6:	0c12      	lsrs	r2, r2, #16
 800cbc8:	fa13 f38e 	uxtah	r3, r3, lr
 800cbcc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cbd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbda:	45c1      	cmp	r9, r8
 800cbdc:	f840 3b04 	str.w	r3, [r0], #4
 800cbe0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cbe4:	d2e8      	bcs.n	800cbb8 <quorem+0xb0>
 800cbe6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbee:	b922      	cbnz	r2, 800cbfa <quorem+0xf2>
 800cbf0:	3b04      	subs	r3, #4
 800cbf2:	429d      	cmp	r5, r3
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	d30a      	bcc.n	800cc0e <quorem+0x106>
 800cbf8:	613c      	str	r4, [r7, #16]
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	b003      	add	sp, #12
 800cbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc02:	6812      	ldr	r2, [r2, #0]
 800cc04:	3b04      	subs	r3, #4
 800cc06:	2a00      	cmp	r2, #0
 800cc08:	d1cc      	bne.n	800cba4 <quorem+0x9c>
 800cc0a:	3c01      	subs	r4, #1
 800cc0c:	e7c7      	b.n	800cb9e <quorem+0x96>
 800cc0e:	6812      	ldr	r2, [r2, #0]
 800cc10:	3b04      	subs	r3, #4
 800cc12:	2a00      	cmp	r2, #0
 800cc14:	d1f0      	bne.n	800cbf8 <quorem+0xf0>
 800cc16:	3c01      	subs	r4, #1
 800cc18:	e7eb      	b.n	800cbf2 <quorem+0xea>
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	e7ee      	b.n	800cbfc <quorem+0xf4>
	...

0800cc20 <_dtoa_r>:
 800cc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc24:	ed2d 8b04 	vpush	{d8-d9}
 800cc28:	ec57 6b10 	vmov	r6, r7, d0
 800cc2c:	b093      	sub	sp, #76	; 0x4c
 800cc2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cc30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cc34:	9106      	str	r1, [sp, #24]
 800cc36:	ee10 aa10 	vmov	sl, s0
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	9209      	str	r2, [sp, #36]	; 0x24
 800cc3e:	930c      	str	r3, [sp, #48]	; 0x30
 800cc40:	46bb      	mov	fp, r7
 800cc42:	b975      	cbnz	r5, 800cc62 <_dtoa_r+0x42>
 800cc44:	2010      	movs	r0, #16
 800cc46:	f7fe f913 	bl	800ae70 <malloc>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	6260      	str	r0, [r4, #36]	; 0x24
 800cc4e:	b920      	cbnz	r0, 800cc5a <_dtoa_r+0x3a>
 800cc50:	4ba7      	ldr	r3, [pc, #668]	; (800cef0 <_dtoa_r+0x2d0>)
 800cc52:	21ea      	movs	r1, #234	; 0xea
 800cc54:	48a7      	ldr	r0, [pc, #668]	; (800cef4 <_dtoa_r+0x2d4>)
 800cc56:	f001 ffcd 	bl	800ebf4 <__assert_func>
 800cc5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cc5e:	6005      	str	r5, [r0, #0]
 800cc60:	60c5      	str	r5, [r0, #12]
 800cc62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc64:	6819      	ldr	r1, [r3, #0]
 800cc66:	b151      	cbz	r1, 800cc7e <_dtoa_r+0x5e>
 800cc68:	685a      	ldr	r2, [r3, #4]
 800cc6a:	604a      	str	r2, [r1, #4]
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	4093      	lsls	r3, r2
 800cc70:	608b      	str	r3, [r1, #8]
 800cc72:	4620      	mov	r0, r4
 800cc74:	f001 f9a2 	bl	800dfbc <_Bfree>
 800cc78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	601a      	str	r2, [r3, #0]
 800cc7e:	1e3b      	subs	r3, r7, #0
 800cc80:	bfaa      	itet	ge
 800cc82:	2300      	movge	r3, #0
 800cc84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cc88:	f8c8 3000 	strge.w	r3, [r8]
 800cc8c:	4b9a      	ldr	r3, [pc, #616]	; (800cef8 <_dtoa_r+0x2d8>)
 800cc8e:	bfbc      	itt	lt
 800cc90:	2201      	movlt	r2, #1
 800cc92:	f8c8 2000 	strlt.w	r2, [r8]
 800cc96:	ea33 030b 	bics.w	r3, r3, fp
 800cc9a:	d11b      	bne.n	800ccd4 <_dtoa_r+0xb4>
 800cc9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc9e:	f242 730f 	movw	r3, #9999	; 0x270f
 800cca2:	6013      	str	r3, [r2, #0]
 800cca4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cca8:	4333      	orrs	r3, r6
 800ccaa:	f000 8592 	beq.w	800d7d2 <_dtoa_r+0xbb2>
 800ccae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccb0:	b963      	cbnz	r3, 800cccc <_dtoa_r+0xac>
 800ccb2:	4b92      	ldr	r3, [pc, #584]	; (800cefc <_dtoa_r+0x2dc>)
 800ccb4:	e022      	b.n	800ccfc <_dtoa_r+0xdc>
 800ccb6:	4b92      	ldr	r3, [pc, #584]	; (800cf00 <_dtoa_r+0x2e0>)
 800ccb8:	9301      	str	r3, [sp, #4]
 800ccba:	3308      	adds	r3, #8
 800ccbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ccbe:	6013      	str	r3, [r2, #0]
 800ccc0:	9801      	ldr	r0, [sp, #4]
 800ccc2:	b013      	add	sp, #76	; 0x4c
 800ccc4:	ecbd 8b04 	vpop	{d8-d9}
 800ccc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cccc:	4b8b      	ldr	r3, [pc, #556]	; (800cefc <_dtoa_r+0x2dc>)
 800ccce:	9301      	str	r3, [sp, #4]
 800ccd0:	3303      	adds	r3, #3
 800ccd2:	e7f3      	b.n	800ccbc <_dtoa_r+0x9c>
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	4650      	mov	r0, sl
 800ccda:	4659      	mov	r1, fp
 800ccdc:	f7f3 ff1c 	bl	8000b18 <__aeabi_dcmpeq>
 800cce0:	ec4b ab19 	vmov	d9, sl, fp
 800cce4:	4680      	mov	r8, r0
 800cce6:	b158      	cbz	r0, 800cd00 <_dtoa_r+0xe0>
 800cce8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ccea:	2301      	movs	r3, #1
 800ccec:	6013      	str	r3, [r2, #0]
 800ccee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	f000 856b 	beq.w	800d7cc <_dtoa_r+0xbac>
 800ccf6:	4883      	ldr	r0, [pc, #524]	; (800cf04 <_dtoa_r+0x2e4>)
 800ccf8:	6018      	str	r0, [r3, #0]
 800ccfa:	1e43      	subs	r3, r0, #1
 800ccfc:	9301      	str	r3, [sp, #4]
 800ccfe:	e7df      	b.n	800ccc0 <_dtoa_r+0xa0>
 800cd00:	ec4b ab10 	vmov	d0, sl, fp
 800cd04:	aa10      	add	r2, sp, #64	; 0x40
 800cd06:	a911      	add	r1, sp, #68	; 0x44
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f001 fd05 	bl	800e718 <__d2b>
 800cd0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cd12:	ee08 0a10 	vmov	s16, r0
 800cd16:	2d00      	cmp	r5, #0
 800cd18:	f000 8084 	beq.w	800ce24 <_dtoa_r+0x204>
 800cd1c:	ee19 3a90 	vmov	r3, s19
 800cd20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cd28:	4656      	mov	r6, sl
 800cd2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cd2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cd32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cd36:	4b74      	ldr	r3, [pc, #464]	; (800cf08 <_dtoa_r+0x2e8>)
 800cd38:	2200      	movs	r2, #0
 800cd3a:	4630      	mov	r0, r6
 800cd3c:	4639      	mov	r1, r7
 800cd3e:	f7f3 facb 	bl	80002d8 <__aeabi_dsub>
 800cd42:	a365      	add	r3, pc, #404	; (adr r3, 800ced8 <_dtoa_r+0x2b8>)
 800cd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd48:	f7f3 fc7e 	bl	8000648 <__aeabi_dmul>
 800cd4c:	a364      	add	r3, pc, #400	; (adr r3, 800cee0 <_dtoa_r+0x2c0>)
 800cd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd52:	f7f3 fac3 	bl	80002dc <__adddf3>
 800cd56:	4606      	mov	r6, r0
 800cd58:	4628      	mov	r0, r5
 800cd5a:	460f      	mov	r7, r1
 800cd5c:	f7f3 fc0a 	bl	8000574 <__aeabi_i2d>
 800cd60:	a361      	add	r3, pc, #388	; (adr r3, 800cee8 <_dtoa_r+0x2c8>)
 800cd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd66:	f7f3 fc6f 	bl	8000648 <__aeabi_dmul>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	4630      	mov	r0, r6
 800cd70:	4639      	mov	r1, r7
 800cd72:	f7f3 fab3 	bl	80002dc <__adddf3>
 800cd76:	4606      	mov	r6, r0
 800cd78:	460f      	mov	r7, r1
 800cd7a:	f7f3 ff15 	bl	8000ba8 <__aeabi_d2iz>
 800cd7e:	2200      	movs	r2, #0
 800cd80:	9000      	str	r0, [sp, #0]
 800cd82:	2300      	movs	r3, #0
 800cd84:	4630      	mov	r0, r6
 800cd86:	4639      	mov	r1, r7
 800cd88:	f7f3 fed0 	bl	8000b2c <__aeabi_dcmplt>
 800cd8c:	b150      	cbz	r0, 800cda4 <_dtoa_r+0x184>
 800cd8e:	9800      	ldr	r0, [sp, #0]
 800cd90:	f7f3 fbf0 	bl	8000574 <__aeabi_i2d>
 800cd94:	4632      	mov	r2, r6
 800cd96:	463b      	mov	r3, r7
 800cd98:	f7f3 febe 	bl	8000b18 <__aeabi_dcmpeq>
 800cd9c:	b910      	cbnz	r0, 800cda4 <_dtoa_r+0x184>
 800cd9e:	9b00      	ldr	r3, [sp, #0]
 800cda0:	3b01      	subs	r3, #1
 800cda2:	9300      	str	r3, [sp, #0]
 800cda4:	9b00      	ldr	r3, [sp, #0]
 800cda6:	2b16      	cmp	r3, #22
 800cda8:	d85a      	bhi.n	800ce60 <_dtoa_r+0x240>
 800cdaa:	9a00      	ldr	r2, [sp, #0]
 800cdac:	4b57      	ldr	r3, [pc, #348]	; (800cf0c <_dtoa_r+0x2ec>)
 800cdae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb6:	ec51 0b19 	vmov	r0, r1, d9
 800cdba:	f7f3 feb7 	bl	8000b2c <__aeabi_dcmplt>
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	d050      	beq.n	800ce64 <_dtoa_r+0x244>
 800cdc2:	9b00      	ldr	r3, [sp, #0]
 800cdc4:	3b01      	subs	r3, #1
 800cdc6:	9300      	str	r3, [sp, #0]
 800cdc8:	2300      	movs	r3, #0
 800cdca:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cdce:	1b5d      	subs	r5, r3, r5
 800cdd0:	1e6b      	subs	r3, r5, #1
 800cdd2:	9305      	str	r3, [sp, #20]
 800cdd4:	bf45      	ittet	mi
 800cdd6:	f1c5 0301 	rsbmi	r3, r5, #1
 800cdda:	9304      	strmi	r3, [sp, #16]
 800cddc:	2300      	movpl	r3, #0
 800cdde:	2300      	movmi	r3, #0
 800cde0:	bf4c      	ite	mi
 800cde2:	9305      	strmi	r3, [sp, #20]
 800cde4:	9304      	strpl	r3, [sp, #16]
 800cde6:	9b00      	ldr	r3, [sp, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	db3d      	blt.n	800ce68 <_dtoa_r+0x248>
 800cdec:	9b05      	ldr	r3, [sp, #20]
 800cdee:	9a00      	ldr	r2, [sp, #0]
 800cdf0:	920a      	str	r2, [sp, #40]	; 0x28
 800cdf2:	4413      	add	r3, r2
 800cdf4:	9305      	str	r3, [sp, #20]
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	9307      	str	r3, [sp, #28]
 800cdfa:	9b06      	ldr	r3, [sp, #24]
 800cdfc:	2b09      	cmp	r3, #9
 800cdfe:	f200 8089 	bhi.w	800cf14 <_dtoa_r+0x2f4>
 800ce02:	2b05      	cmp	r3, #5
 800ce04:	bfc4      	itt	gt
 800ce06:	3b04      	subgt	r3, #4
 800ce08:	9306      	strgt	r3, [sp, #24]
 800ce0a:	9b06      	ldr	r3, [sp, #24]
 800ce0c:	f1a3 0302 	sub.w	r3, r3, #2
 800ce10:	bfcc      	ite	gt
 800ce12:	2500      	movgt	r5, #0
 800ce14:	2501      	movle	r5, #1
 800ce16:	2b03      	cmp	r3, #3
 800ce18:	f200 8087 	bhi.w	800cf2a <_dtoa_r+0x30a>
 800ce1c:	e8df f003 	tbb	[pc, r3]
 800ce20:	59383a2d 	.word	0x59383a2d
 800ce24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ce28:	441d      	add	r5, r3
 800ce2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ce2e:	2b20      	cmp	r3, #32
 800ce30:	bfc1      	itttt	gt
 800ce32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ce36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ce3a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ce3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ce42:	bfda      	itte	le
 800ce44:	f1c3 0320 	rsble	r3, r3, #32
 800ce48:	fa06 f003 	lslle.w	r0, r6, r3
 800ce4c:	4318      	orrgt	r0, r3
 800ce4e:	f7f3 fb81 	bl	8000554 <__aeabi_ui2d>
 800ce52:	2301      	movs	r3, #1
 800ce54:	4606      	mov	r6, r0
 800ce56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ce5a:	3d01      	subs	r5, #1
 800ce5c:	930e      	str	r3, [sp, #56]	; 0x38
 800ce5e:	e76a      	b.n	800cd36 <_dtoa_r+0x116>
 800ce60:	2301      	movs	r3, #1
 800ce62:	e7b2      	b.n	800cdca <_dtoa_r+0x1aa>
 800ce64:	900b      	str	r0, [sp, #44]	; 0x2c
 800ce66:	e7b1      	b.n	800cdcc <_dtoa_r+0x1ac>
 800ce68:	9b04      	ldr	r3, [sp, #16]
 800ce6a:	9a00      	ldr	r2, [sp, #0]
 800ce6c:	1a9b      	subs	r3, r3, r2
 800ce6e:	9304      	str	r3, [sp, #16]
 800ce70:	4253      	negs	r3, r2
 800ce72:	9307      	str	r3, [sp, #28]
 800ce74:	2300      	movs	r3, #0
 800ce76:	930a      	str	r3, [sp, #40]	; 0x28
 800ce78:	e7bf      	b.n	800cdfa <_dtoa_r+0x1da>
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	9308      	str	r3, [sp, #32]
 800ce7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	dc55      	bgt.n	800cf30 <_dtoa_r+0x310>
 800ce84:	2301      	movs	r3, #1
 800ce86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	9209      	str	r2, [sp, #36]	; 0x24
 800ce8e:	e00c      	b.n	800ceaa <_dtoa_r+0x28a>
 800ce90:	2301      	movs	r3, #1
 800ce92:	e7f3      	b.n	800ce7c <_dtoa_r+0x25c>
 800ce94:	2300      	movs	r3, #0
 800ce96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce98:	9308      	str	r3, [sp, #32]
 800ce9a:	9b00      	ldr	r3, [sp, #0]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	9302      	str	r3, [sp, #8]
 800cea0:	3301      	adds	r3, #1
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	9303      	str	r3, [sp, #12]
 800cea6:	bfb8      	it	lt
 800cea8:	2301      	movlt	r3, #1
 800ceaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ceac:	2200      	movs	r2, #0
 800ceae:	6042      	str	r2, [r0, #4]
 800ceb0:	2204      	movs	r2, #4
 800ceb2:	f102 0614 	add.w	r6, r2, #20
 800ceb6:	429e      	cmp	r6, r3
 800ceb8:	6841      	ldr	r1, [r0, #4]
 800ceba:	d93d      	bls.n	800cf38 <_dtoa_r+0x318>
 800cebc:	4620      	mov	r0, r4
 800cebe:	f001 f83d 	bl	800df3c <_Balloc>
 800cec2:	9001      	str	r0, [sp, #4]
 800cec4:	2800      	cmp	r0, #0
 800cec6:	d13b      	bne.n	800cf40 <_dtoa_r+0x320>
 800cec8:	4b11      	ldr	r3, [pc, #68]	; (800cf10 <_dtoa_r+0x2f0>)
 800ceca:	4602      	mov	r2, r0
 800cecc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ced0:	e6c0      	b.n	800cc54 <_dtoa_r+0x34>
 800ced2:	2301      	movs	r3, #1
 800ced4:	e7df      	b.n	800ce96 <_dtoa_r+0x276>
 800ced6:	bf00      	nop
 800ced8:	636f4361 	.word	0x636f4361
 800cedc:	3fd287a7 	.word	0x3fd287a7
 800cee0:	8b60c8b3 	.word	0x8b60c8b3
 800cee4:	3fc68a28 	.word	0x3fc68a28
 800cee8:	509f79fb 	.word	0x509f79fb
 800ceec:	3fd34413 	.word	0x3fd34413
 800cef0:	080105ee 	.word	0x080105ee
 800cef4:	08010605 	.word	0x08010605
 800cef8:	7ff00000 	.word	0x7ff00000
 800cefc:	080105ea 	.word	0x080105ea
 800cf00:	080105e1 	.word	0x080105e1
 800cf04:	08010461 	.word	0x08010461
 800cf08:	3ff80000 	.word	0x3ff80000
 800cf0c:	08010770 	.word	0x08010770
 800cf10:	08010660 	.word	0x08010660
 800cf14:	2501      	movs	r5, #1
 800cf16:	2300      	movs	r3, #0
 800cf18:	9306      	str	r3, [sp, #24]
 800cf1a:	9508      	str	r5, [sp, #32]
 800cf1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cf24:	2200      	movs	r2, #0
 800cf26:	2312      	movs	r3, #18
 800cf28:	e7b0      	b.n	800ce8c <_dtoa_r+0x26c>
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	9308      	str	r3, [sp, #32]
 800cf2e:	e7f5      	b.n	800cf1c <_dtoa_r+0x2fc>
 800cf30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cf36:	e7b8      	b.n	800ceaa <_dtoa_r+0x28a>
 800cf38:	3101      	adds	r1, #1
 800cf3a:	6041      	str	r1, [r0, #4]
 800cf3c:	0052      	lsls	r2, r2, #1
 800cf3e:	e7b8      	b.n	800ceb2 <_dtoa_r+0x292>
 800cf40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf42:	9a01      	ldr	r2, [sp, #4]
 800cf44:	601a      	str	r2, [r3, #0]
 800cf46:	9b03      	ldr	r3, [sp, #12]
 800cf48:	2b0e      	cmp	r3, #14
 800cf4a:	f200 809d 	bhi.w	800d088 <_dtoa_r+0x468>
 800cf4e:	2d00      	cmp	r5, #0
 800cf50:	f000 809a 	beq.w	800d088 <_dtoa_r+0x468>
 800cf54:	9b00      	ldr	r3, [sp, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	dd32      	ble.n	800cfc0 <_dtoa_r+0x3a0>
 800cf5a:	4ab7      	ldr	r2, [pc, #732]	; (800d238 <_dtoa_r+0x618>)
 800cf5c:	f003 030f 	and.w	r3, r3, #15
 800cf60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cf64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf68:	9b00      	ldr	r3, [sp, #0]
 800cf6a:	05d8      	lsls	r0, r3, #23
 800cf6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cf70:	d516      	bpl.n	800cfa0 <_dtoa_r+0x380>
 800cf72:	4bb2      	ldr	r3, [pc, #712]	; (800d23c <_dtoa_r+0x61c>)
 800cf74:	ec51 0b19 	vmov	r0, r1, d9
 800cf78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf7c:	f7f3 fc8e 	bl	800089c <__aeabi_ddiv>
 800cf80:	f007 070f 	and.w	r7, r7, #15
 800cf84:	4682      	mov	sl, r0
 800cf86:	468b      	mov	fp, r1
 800cf88:	2503      	movs	r5, #3
 800cf8a:	4eac      	ldr	r6, [pc, #688]	; (800d23c <_dtoa_r+0x61c>)
 800cf8c:	b957      	cbnz	r7, 800cfa4 <_dtoa_r+0x384>
 800cf8e:	4642      	mov	r2, r8
 800cf90:	464b      	mov	r3, r9
 800cf92:	4650      	mov	r0, sl
 800cf94:	4659      	mov	r1, fp
 800cf96:	f7f3 fc81 	bl	800089c <__aeabi_ddiv>
 800cf9a:	4682      	mov	sl, r0
 800cf9c:	468b      	mov	fp, r1
 800cf9e:	e028      	b.n	800cff2 <_dtoa_r+0x3d2>
 800cfa0:	2502      	movs	r5, #2
 800cfa2:	e7f2      	b.n	800cf8a <_dtoa_r+0x36a>
 800cfa4:	07f9      	lsls	r1, r7, #31
 800cfa6:	d508      	bpl.n	800cfba <_dtoa_r+0x39a>
 800cfa8:	4640      	mov	r0, r8
 800cfaa:	4649      	mov	r1, r9
 800cfac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cfb0:	f7f3 fb4a 	bl	8000648 <__aeabi_dmul>
 800cfb4:	3501      	adds	r5, #1
 800cfb6:	4680      	mov	r8, r0
 800cfb8:	4689      	mov	r9, r1
 800cfba:	107f      	asrs	r7, r7, #1
 800cfbc:	3608      	adds	r6, #8
 800cfbe:	e7e5      	b.n	800cf8c <_dtoa_r+0x36c>
 800cfc0:	f000 809b 	beq.w	800d0fa <_dtoa_r+0x4da>
 800cfc4:	9b00      	ldr	r3, [sp, #0]
 800cfc6:	4f9d      	ldr	r7, [pc, #628]	; (800d23c <_dtoa_r+0x61c>)
 800cfc8:	425e      	negs	r6, r3
 800cfca:	4b9b      	ldr	r3, [pc, #620]	; (800d238 <_dtoa_r+0x618>)
 800cfcc:	f006 020f 	and.w	r2, r6, #15
 800cfd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd8:	ec51 0b19 	vmov	r0, r1, d9
 800cfdc:	f7f3 fb34 	bl	8000648 <__aeabi_dmul>
 800cfe0:	1136      	asrs	r6, r6, #4
 800cfe2:	4682      	mov	sl, r0
 800cfe4:	468b      	mov	fp, r1
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	2502      	movs	r5, #2
 800cfea:	2e00      	cmp	r6, #0
 800cfec:	d17a      	bne.n	800d0e4 <_dtoa_r+0x4c4>
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1d3      	bne.n	800cf9a <_dtoa_r+0x37a>
 800cff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	f000 8082 	beq.w	800d0fe <_dtoa_r+0x4de>
 800cffa:	4b91      	ldr	r3, [pc, #580]	; (800d240 <_dtoa_r+0x620>)
 800cffc:	2200      	movs	r2, #0
 800cffe:	4650      	mov	r0, sl
 800d000:	4659      	mov	r1, fp
 800d002:	f7f3 fd93 	bl	8000b2c <__aeabi_dcmplt>
 800d006:	2800      	cmp	r0, #0
 800d008:	d079      	beq.n	800d0fe <_dtoa_r+0x4de>
 800d00a:	9b03      	ldr	r3, [sp, #12]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d076      	beq.n	800d0fe <_dtoa_r+0x4de>
 800d010:	9b02      	ldr	r3, [sp, #8]
 800d012:	2b00      	cmp	r3, #0
 800d014:	dd36      	ble.n	800d084 <_dtoa_r+0x464>
 800d016:	9b00      	ldr	r3, [sp, #0]
 800d018:	4650      	mov	r0, sl
 800d01a:	4659      	mov	r1, fp
 800d01c:	1e5f      	subs	r7, r3, #1
 800d01e:	2200      	movs	r2, #0
 800d020:	4b88      	ldr	r3, [pc, #544]	; (800d244 <_dtoa_r+0x624>)
 800d022:	f7f3 fb11 	bl	8000648 <__aeabi_dmul>
 800d026:	9e02      	ldr	r6, [sp, #8]
 800d028:	4682      	mov	sl, r0
 800d02a:	468b      	mov	fp, r1
 800d02c:	3501      	adds	r5, #1
 800d02e:	4628      	mov	r0, r5
 800d030:	f7f3 faa0 	bl	8000574 <__aeabi_i2d>
 800d034:	4652      	mov	r2, sl
 800d036:	465b      	mov	r3, fp
 800d038:	f7f3 fb06 	bl	8000648 <__aeabi_dmul>
 800d03c:	4b82      	ldr	r3, [pc, #520]	; (800d248 <_dtoa_r+0x628>)
 800d03e:	2200      	movs	r2, #0
 800d040:	f7f3 f94c 	bl	80002dc <__adddf3>
 800d044:	46d0      	mov	r8, sl
 800d046:	46d9      	mov	r9, fp
 800d048:	4682      	mov	sl, r0
 800d04a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d04e:	2e00      	cmp	r6, #0
 800d050:	d158      	bne.n	800d104 <_dtoa_r+0x4e4>
 800d052:	4b7e      	ldr	r3, [pc, #504]	; (800d24c <_dtoa_r+0x62c>)
 800d054:	2200      	movs	r2, #0
 800d056:	4640      	mov	r0, r8
 800d058:	4649      	mov	r1, r9
 800d05a:	f7f3 f93d 	bl	80002d8 <__aeabi_dsub>
 800d05e:	4652      	mov	r2, sl
 800d060:	465b      	mov	r3, fp
 800d062:	4680      	mov	r8, r0
 800d064:	4689      	mov	r9, r1
 800d066:	f7f3 fd7f 	bl	8000b68 <__aeabi_dcmpgt>
 800d06a:	2800      	cmp	r0, #0
 800d06c:	f040 8295 	bne.w	800d59a <_dtoa_r+0x97a>
 800d070:	4652      	mov	r2, sl
 800d072:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d076:	4640      	mov	r0, r8
 800d078:	4649      	mov	r1, r9
 800d07a:	f7f3 fd57 	bl	8000b2c <__aeabi_dcmplt>
 800d07e:	2800      	cmp	r0, #0
 800d080:	f040 8289 	bne.w	800d596 <_dtoa_r+0x976>
 800d084:	ec5b ab19 	vmov	sl, fp, d9
 800d088:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	f2c0 8148 	blt.w	800d320 <_dtoa_r+0x700>
 800d090:	9a00      	ldr	r2, [sp, #0]
 800d092:	2a0e      	cmp	r2, #14
 800d094:	f300 8144 	bgt.w	800d320 <_dtoa_r+0x700>
 800d098:	4b67      	ldr	r3, [pc, #412]	; (800d238 <_dtoa_r+0x618>)
 800d09a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d09e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d0a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	f280 80d5 	bge.w	800d254 <_dtoa_r+0x634>
 800d0aa:	9b03      	ldr	r3, [sp, #12]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f300 80d1 	bgt.w	800d254 <_dtoa_r+0x634>
 800d0b2:	f040 826f 	bne.w	800d594 <_dtoa_r+0x974>
 800d0b6:	4b65      	ldr	r3, [pc, #404]	; (800d24c <_dtoa_r+0x62c>)
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	4640      	mov	r0, r8
 800d0bc:	4649      	mov	r1, r9
 800d0be:	f7f3 fac3 	bl	8000648 <__aeabi_dmul>
 800d0c2:	4652      	mov	r2, sl
 800d0c4:	465b      	mov	r3, fp
 800d0c6:	f7f3 fd45 	bl	8000b54 <__aeabi_dcmpge>
 800d0ca:	9e03      	ldr	r6, [sp, #12]
 800d0cc:	4637      	mov	r7, r6
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	f040 8245 	bne.w	800d55e <_dtoa_r+0x93e>
 800d0d4:	9d01      	ldr	r5, [sp, #4]
 800d0d6:	2331      	movs	r3, #49	; 0x31
 800d0d8:	f805 3b01 	strb.w	r3, [r5], #1
 800d0dc:	9b00      	ldr	r3, [sp, #0]
 800d0de:	3301      	adds	r3, #1
 800d0e0:	9300      	str	r3, [sp, #0]
 800d0e2:	e240      	b.n	800d566 <_dtoa_r+0x946>
 800d0e4:	07f2      	lsls	r2, r6, #31
 800d0e6:	d505      	bpl.n	800d0f4 <_dtoa_r+0x4d4>
 800d0e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0ec:	f7f3 faac 	bl	8000648 <__aeabi_dmul>
 800d0f0:	3501      	adds	r5, #1
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	1076      	asrs	r6, r6, #1
 800d0f6:	3708      	adds	r7, #8
 800d0f8:	e777      	b.n	800cfea <_dtoa_r+0x3ca>
 800d0fa:	2502      	movs	r5, #2
 800d0fc:	e779      	b.n	800cff2 <_dtoa_r+0x3d2>
 800d0fe:	9f00      	ldr	r7, [sp, #0]
 800d100:	9e03      	ldr	r6, [sp, #12]
 800d102:	e794      	b.n	800d02e <_dtoa_r+0x40e>
 800d104:	9901      	ldr	r1, [sp, #4]
 800d106:	4b4c      	ldr	r3, [pc, #304]	; (800d238 <_dtoa_r+0x618>)
 800d108:	4431      	add	r1, r6
 800d10a:	910d      	str	r1, [sp, #52]	; 0x34
 800d10c:	9908      	ldr	r1, [sp, #32]
 800d10e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d112:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d116:	2900      	cmp	r1, #0
 800d118:	d043      	beq.n	800d1a2 <_dtoa_r+0x582>
 800d11a:	494d      	ldr	r1, [pc, #308]	; (800d250 <_dtoa_r+0x630>)
 800d11c:	2000      	movs	r0, #0
 800d11e:	f7f3 fbbd 	bl	800089c <__aeabi_ddiv>
 800d122:	4652      	mov	r2, sl
 800d124:	465b      	mov	r3, fp
 800d126:	f7f3 f8d7 	bl	80002d8 <__aeabi_dsub>
 800d12a:	9d01      	ldr	r5, [sp, #4]
 800d12c:	4682      	mov	sl, r0
 800d12e:	468b      	mov	fp, r1
 800d130:	4649      	mov	r1, r9
 800d132:	4640      	mov	r0, r8
 800d134:	f7f3 fd38 	bl	8000ba8 <__aeabi_d2iz>
 800d138:	4606      	mov	r6, r0
 800d13a:	f7f3 fa1b 	bl	8000574 <__aeabi_i2d>
 800d13e:	4602      	mov	r2, r0
 800d140:	460b      	mov	r3, r1
 800d142:	4640      	mov	r0, r8
 800d144:	4649      	mov	r1, r9
 800d146:	f7f3 f8c7 	bl	80002d8 <__aeabi_dsub>
 800d14a:	3630      	adds	r6, #48	; 0x30
 800d14c:	f805 6b01 	strb.w	r6, [r5], #1
 800d150:	4652      	mov	r2, sl
 800d152:	465b      	mov	r3, fp
 800d154:	4680      	mov	r8, r0
 800d156:	4689      	mov	r9, r1
 800d158:	f7f3 fce8 	bl	8000b2c <__aeabi_dcmplt>
 800d15c:	2800      	cmp	r0, #0
 800d15e:	d163      	bne.n	800d228 <_dtoa_r+0x608>
 800d160:	4642      	mov	r2, r8
 800d162:	464b      	mov	r3, r9
 800d164:	4936      	ldr	r1, [pc, #216]	; (800d240 <_dtoa_r+0x620>)
 800d166:	2000      	movs	r0, #0
 800d168:	f7f3 f8b6 	bl	80002d8 <__aeabi_dsub>
 800d16c:	4652      	mov	r2, sl
 800d16e:	465b      	mov	r3, fp
 800d170:	f7f3 fcdc 	bl	8000b2c <__aeabi_dcmplt>
 800d174:	2800      	cmp	r0, #0
 800d176:	f040 80b5 	bne.w	800d2e4 <_dtoa_r+0x6c4>
 800d17a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d17c:	429d      	cmp	r5, r3
 800d17e:	d081      	beq.n	800d084 <_dtoa_r+0x464>
 800d180:	4b30      	ldr	r3, [pc, #192]	; (800d244 <_dtoa_r+0x624>)
 800d182:	2200      	movs	r2, #0
 800d184:	4650      	mov	r0, sl
 800d186:	4659      	mov	r1, fp
 800d188:	f7f3 fa5e 	bl	8000648 <__aeabi_dmul>
 800d18c:	4b2d      	ldr	r3, [pc, #180]	; (800d244 <_dtoa_r+0x624>)
 800d18e:	4682      	mov	sl, r0
 800d190:	468b      	mov	fp, r1
 800d192:	4640      	mov	r0, r8
 800d194:	4649      	mov	r1, r9
 800d196:	2200      	movs	r2, #0
 800d198:	f7f3 fa56 	bl	8000648 <__aeabi_dmul>
 800d19c:	4680      	mov	r8, r0
 800d19e:	4689      	mov	r9, r1
 800d1a0:	e7c6      	b.n	800d130 <_dtoa_r+0x510>
 800d1a2:	4650      	mov	r0, sl
 800d1a4:	4659      	mov	r1, fp
 800d1a6:	f7f3 fa4f 	bl	8000648 <__aeabi_dmul>
 800d1aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1ac:	9d01      	ldr	r5, [sp, #4]
 800d1ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1b0:	4682      	mov	sl, r0
 800d1b2:	468b      	mov	fp, r1
 800d1b4:	4649      	mov	r1, r9
 800d1b6:	4640      	mov	r0, r8
 800d1b8:	f7f3 fcf6 	bl	8000ba8 <__aeabi_d2iz>
 800d1bc:	4606      	mov	r6, r0
 800d1be:	f7f3 f9d9 	bl	8000574 <__aeabi_i2d>
 800d1c2:	3630      	adds	r6, #48	; 0x30
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	4640      	mov	r0, r8
 800d1ca:	4649      	mov	r1, r9
 800d1cc:	f7f3 f884 	bl	80002d8 <__aeabi_dsub>
 800d1d0:	f805 6b01 	strb.w	r6, [r5], #1
 800d1d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1d6:	429d      	cmp	r5, r3
 800d1d8:	4680      	mov	r8, r0
 800d1da:	4689      	mov	r9, r1
 800d1dc:	f04f 0200 	mov.w	r2, #0
 800d1e0:	d124      	bne.n	800d22c <_dtoa_r+0x60c>
 800d1e2:	4b1b      	ldr	r3, [pc, #108]	; (800d250 <_dtoa_r+0x630>)
 800d1e4:	4650      	mov	r0, sl
 800d1e6:	4659      	mov	r1, fp
 800d1e8:	f7f3 f878 	bl	80002dc <__adddf3>
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	4640      	mov	r0, r8
 800d1f2:	4649      	mov	r1, r9
 800d1f4:	f7f3 fcb8 	bl	8000b68 <__aeabi_dcmpgt>
 800d1f8:	2800      	cmp	r0, #0
 800d1fa:	d173      	bne.n	800d2e4 <_dtoa_r+0x6c4>
 800d1fc:	4652      	mov	r2, sl
 800d1fe:	465b      	mov	r3, fp
 800d200:	4913      	ldr	r1, [pc, #76]	; (800d250 <_dtoa_r+0x630>)
 800d202:	2000      	movs	r0, #0
 800d204:	f7f3 f868 	bl	80002d8 <__aeabi_dsub>
 800d208:	4602      	mov	r2, r0
 800d20a:	460b      	mov	r3, r1
 800d20c:	4640      	mov	r0, r8
 800d20e:	4649      	mov	r1, r9
 800d210:	f7f3 fc8c 	bl	8000b2c <__aeabi_dcmplt>
 800d214:	2800      	cmp	r0, #0
 800d216:	f43f af35 	beq.w	800d084 <_dtoa_r+0x464>
 800d21a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d21c:	1e6b      	subs	r3, r5, #1
 800d21e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d220:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d224:	2b30      	cmp	r3, #48	; 0x30
 800d226:	d0f8      	beq.n	800d21a <_dtoa_r+0x5fa>
 800d228:	9700      	str	r7, [sp, #0]
 800d22a:	e049      	b.n	800d2c0 <_dtoa_r+0x6a0>
 800d22c:	4b05      	ldr	r3, [pc, #20]	; (800d244 <_dtoa_r+0x624>)
 800d22e:	f7f3 fa0b 	bl	8000648 <__aeabi_dmul>
 800d232:	4680      	mov	r8, r0
 800d234:	4689      	mov	r9, r1
 800d236:	e7bd      	b.n	800d1b4 <_dtoa_r+0x594>
 800d238:	08010770 	.word	0x08010770
 800d23c:	08010748 	.word	0x08010748
 800d240:	3ff00000 	.word	0x3ff00000
 800d244:	40240000 	.word	0x40240000
 800d248:	401c0000 	.word	0x401c0000
 800d24c:	40140000 	.word	0x40140000
 800d250:	3fe00000 	.word	0x3fe00000
 800d254:	9d01      	ldr	r5, [sp, #4]
 800d256:	4656      	mov	r6, sl
 800d258:	465f      	mov	r7, fp
 800d25a:	4642      	mov	r2, r8
 800d25c:	464b      	mov	r3, r9
 800d25e:	4630      	mov	r0, r6
 800d260:	4639      	mov	r1, r7
 800d262:	f7f3 fb1b 	bl	800089c <__aeabi_ddiv>
 800d266:	f7f3 fc9f 	bl	8000ba8 <__aeabi_d2iz>
 800d26a:	4682      	mov	sl, r0
 800d26c:	f7f3 f982 	bl	8000574 <__aeabi_i2d>
 800d270:	4642      	mov	r2, r8
 800d272:	464b      	mov	r3, r9
 800d274:	f7f3 f9e8 	bl	8000648 <__aeabi_dmul>
 800d278:	4602      	mov	r2, r0
 800d27a:	460b      	mov	r3, r1
 800d27c:	4630      	mov	r0, r6
 800d27e:	4639      	mov	r1, r7
 800d280:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d284:	f7f3 f828 	bl	80002d8 <__aeabi_dsub>
 800d288:	f805 6b01 	strb.w	r6, [r5], #1
 800d28c:	9e01      	ldr	r6, [sp, #4]
 800d28e:	9f03      	ldr	r7, [sp, #12]
 800d290:	1bae      	subs	r6, r5, r6
 800d292:	42b7      	cmp	r7, r6
 800d294:	4602      	mov	r2, r0
 800d296:	460b      	mov	r3, r1
 800d298:	d135      	bne.n	800d306 <_dtoa_r+0x6e6>
 800d29a:	f7f3 f81f 	bl	80002dc <__adddf3>
 800d29e:	4642      	mov	r2, r8
 800d2a0:	464b      	mov	r3, r9
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	460f      	mov	r7, r1
 800d2a6:	f7f3 fc5f 	bl	8000b68 <__aeabi_dcmpgt>
 800d2aa:	b9d0      	cbnz	r0, 800d2e2 <_dtoa_r+0x6c2>
 800d2ac:	4642      	mov	r2, r8
 800d2ae:	464b      	mov	r3, r9
 800d2b0:	4630      	mov	r0, r6
 800d2b2:	4639      	mov	r1, r7
 800d2b4:	f7f3 fc30 	bl	8000b18 <__aeabi_dcmpeq>
 800d2b8:	b110      	cbz	r0, 800d2c0 <_dtoa_r+0x6a0>
 800d2ba:	f01a 0f01 	tst.w	sl, #1
 800d2be:	d110      	bne.n	800d2e2 <_dtoa_r+0x6c2>
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	ee18 1a10 	vmov	r1, s16
 800d2c6:	f000 fe79 	bl	800dfbc <_Bfree>
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	9800      	ldr	r0, [sp, #0]
 800d2ce:	702b      	strb	r3, [r5, #0]
 800d2d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d2d2:	3001      	adds	r0, #1
 800d2d4:	6018      	str	r0, [r3, #0]
 800d2d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f43f acf1 	beq.w	800ccc0 <_dtoa_r+0xa0>
 800d2de:	601d      	str	r5, [r3, #0]
 800d2e0:	e4ee      	b.n	800ccc0 <_dtoa_r+0xa0>
 800d2e2:	9f00      	ldr	r7, [sp, #0]
 800d2e4:	462b      	mov	r3, r5
 800d2e6:	461d      	mov	r5, r3
 800d2e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2ec:	2a39      	cmp	r2, #57	; 0x39
 800d2ee:	d106      	bne.n	800d2fe <_dtoa_r+0x6de>
 800d2f0:	9a01      	ldr	r2, [sp, #4]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d1f7      	bne.n	800d2e6 <_dtoa_r+0x6c6>
 800d2f6:	9901      	ldr	r1, [sp, #4]
 800d2f8:	2230      	movs	r2, #48	; 0x30
 800d2fa:	3701      	adds	r7, #1
 800d2fc:	700a      	strb	r2, [r1, #0]
 800d2fe:	781a      	ldrb	r2, [r3, #0]
 800d300:	3201      	adds	r2, #1
 800d302:	701a      	strb	r2, [r3, #0]
 800d304:	e790      	b.n	800d228 <_dtoa_r+0x608>
 800d306:	4ba6      	ldr	r3, [pc, #664]	; (800d5a0 <_dtoa_r+0x980>)
 800d308:	2200      	movs	r2, #0
 800d30a:	f7f3 f99d 	bl	8000648 <__aeabi_dmul>
 800d30e:	2200      	movs	r2, #0
 800d310:	2300      	movs	r3, #0
 800d312:	4606      	mov	r6, r0
 800d314:	460f      	mov	r7, r1
 800d316:	f7f3 fbff 	bl	8000b18 <__aeabi_dcmpeq>
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d09d      	beq.n	800d25a <_dtoa_r+0x63a>
 800d31e:	e7cf      	b.n	800d2c0 <_dtoa_r+0x6a0>
 800d320:	9a08      	ldr	r2, [sp, #32]
 800d322:	2a00      	cmp	r2, #0
 800d324:	f000 80d7 	beq.w	800d4d6 <_dtoa_r+0x8b6>
 800d328:	9a06      	ldr	r2, [sp, #24]
 800d32a:	2a01      	cmp	r2, #1
 800d32c:	f300 80ba 	bgt.w	800d4a4 <_dtoa_r+0x884>
 800d330:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d332:	2a00      	cmp	r2, #0
 800d334:	f000 80b2 	beq.w	800d49c <_dtoa_r+0x87c>
 800d338:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d33c:	9e07      	ldr	r6, [sp, #28]
 800d33e:	9d04      	ldr	r5, [sp, #16]
 800d340:	9a04      	ldr	r2, [sp, #16]
 800d342:	441a      	add	r2, r3
 800d344:	9204      	str	r2, [sp, #16]
 800d346:	9a05      	ldr	r2, [sp, #20]
 800d348:	2101      	movs	r1, #1
 800d34a:	441a      	add	r2, r3
 800d34c:	4620      	mov	r0, r4
 800d34e:	9205      	str	r2, [sp, #20]
 800d350:	f000 ff36 	bl	800e1c0 <__i2b>
 800d354:	4607      	mov	r7, r0
 800d356:	2d00      	cmp	r5, #0
 800d358:	dd0c      	ble.n	800d374 <_dtoa_r+0x754>
 800d35a:	9b05      	ldr	r3, [sp, #20]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	dd09      	ble.n	800d374 <_dtoa_r+0x754>
 800d360:	42ab      	cmp	r3, r5
 800d362:	9a04      	ldr	r2, [sp, #16]
 800d364:	bfa8      	it	ge
 800d366:	462b      	movge	r3, r5
 800d368:	1ad2      	subs	r2, r2, r3
 800d36a:	9204      	str	r2, [sp, #16]
 800d36c:	9a05      	ldr	r2, [sp, #20]
 800d36e:	1aed      	subs	r5, r5, r3
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	9305      	str	r3, [sp, #20]
 800d374:	9b07      	ldr	r3, [sp, #28]
 800d376:	b31b      	cbz	r3, 800d3c0 <_dtoa_r+0x7a0>
 800d378:	9b08      	ldr	r3, [sp, #32]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	f000 80af 	beq.w	800d4de <_dtoa_r+0x8be>
 800d380:	2e00      	cmp	r6, #0
 800d382:	dd13      	ble.n	800d3ac <_dtoa_r+0x78c>
 800d384:	4639      	mov	r1, r7
 800d386:	4632      	mov	r2, r6
 800d388:	4620      	mov	r0, r4
 800d38a:	f000 ffd9 	bl	800e340 <__pow5mult>
 800d38e:	ee18 2a10 	vmov	r2, s16
 800d392:	4601      	mov	r1, r0
 800d394:	4607      	mov	r7, r0
 800d396:	4620      	mov	r0, r4
 800d398:	f000 ff28 	bl	800e1ec <__multiply>
 800d39c:	ee18 1a10 	vmov	r1, s16
 800d3a0:	4680      	mov	r8, r0
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	f000 fe0a 	bl	800dfbc <_Bfree>
 800d3a8:	ee08 8a10 	vmov	s16, r8
 800d3ac:	9b07      	ldr	r3, [sp, #28]
 800d3ae:	1b9a      	subs	r2, r3, r6
 800d3b0:	d006      	beq.n	800d3c0 <_dtoa_r+0x7a0>
 800d3b2:	ee18 1a10 	vmov	r1, s16
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	f000 ffc2 	bl	800e340 <__pow5mult>
 800d3bc:	ee08 0a10 	vmov	s16, r0
 800d3c0:	2101      	movs	r1, #1
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f000 fefc 	bl	800e1c0 <__i2b>
 800d3c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	4606      	mov	r6, r0
 800d3ce:	f340 8088 	ble.w	800d4e2 <_dtoa_r+0x8c2>
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	4601      	mov	r1, r0
 800d3d6:	4620      	mov	r0, r4
 800d3d8:	f000 ffb2 	bl	800e340 <__pow5mult>
 800d3dc:	9b06      	ldr	r3, [sp, #24]
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	4606      	mov	r6, r0
 800d3e2:	f340 8081 	ble.w	800d4e8 <_dtoa_r+0x8c8>
 800d3e6:	f04f 0800 	mov.w	r8, #0
 800d3ea:	6933      	ldr	r3, [r6, #16]
 800d3ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d3f0:	6918      	ldr	r0, [r3, #16]
 800d3f2:	f000 fe95 	bl	800e120 <__hi0bits>
 800d3f6:	f1c0 0020 	rsb	r0, r0, #32
 800d3fa:	9b05      	ldr	r3, [sp, #20]
 800d3fc:	4418      	add	r0, r3
 800d3fe:	f010 001f 	ands.w	r0, r0, #31
 800d402:	f000 8092 	beq.w	800d52a <_dtoa_r+0x90a>
 800d406:	f1c0 0320 	rsb	r3, r0, #32
 800d40a:	2b04      	cmp	r3, #4
 800d40c:	f340 808a 	ble.w	800d524 <_dtoa_r+0x904>
 800d410:	f1c0 001c 	rsb	r0, r0, #28
 800d414:	9b04      	ldr	r3, [sp, #16]
 800d416:	4403      	add	r3, r0
 800d418:	9304      	str	r3, [sp, #16]
 800d41a:	9b05      	ldr	r3, [sp, #20]
 800d41c:	4403      	add	r3, r0
 800d41e:	4405      	add	r5, r0
 800d420:	9305      	str	r3, [sp, #20]
 800d422:	9b04      	ldr	r3, [sp, #16]
 800d424:	2b00      	cmp	r3, #0
 800d426:	dd07      	ble.n	800d438 <_dtoa_r+0x818>
 800d428:	ee18 1a10 	vmov	r1, s16
 800d42c:	461a      	mov	r2, r3
 800d42e:	4620      	mov	r0, r4
 800d430:	f000 ffe0 	bl	800e3f4 <__lshift>
 800d434:	ee08 0a10 	vmov	s16, r0
 800d438:	9b05      	ldr	r3, [sp, #20]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	dd05      	ble.n	800d44a <_dtoa_r+0x82a>
 800d43e:	4631      	mov	r1, r6
 800d440:	461a      	mov	r2, r3
 800d442:	4620      	mov	r0, r4
 800d444:	f000 ffd6 	bl	800e3f4 <__lshift>
 800d448:	4606      	mov	r6, r0
 800d44a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d06e      	beq.n	800d52e <_dtoa_r+0x90e>
 800d450:	ee18 0a10 	vmov	r0, s16
 800d454:	4631      	mov	r1, r6
 800d456:	f001 f83d 	bl	800e4d4 <__mcmp>
 800d45a:	2800      	cmp	r0, #0
 800d45c:	da67      	bge.n	800d52e <_dtoa_r+0x90e>
 800d45e:	9b00      	ldr	r3, [sp, #0]
 800d460:	3b01      	subs	r3, #1
 800d462:	ee18 1a10 	vmov	r1, s16
 800d466:	9300      	str	r3, [sp, #0]
 800d468:	220a      	movs	r2, #10
 800d46a:	2300      	movs	r3, #0
 800d46c:	4620      	mov	r0, r4
 800d46e:	f000 fdc7 	bl	800e000 <__multadd>
 800d472:	9b08      	ldr	r3, [sp, #32]
 800d474:	ee08 0a10 	vmov	s16, r0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f000 81b1 	beq.w	800d7e0 <_dtoa_r+0xbc0>
 800d47e:	2300      	movs	r3, #0
 800d480:	4639      	mov	r1, r7
 800d482:	220a      	movs	r2, #10
 800d484:	4620      	mov	r0, r4
 800d486:	f000 fdbb 	bl	800e000 <__multadd>
 800d48a:	9b02      	ldr	r3, [sp, #8]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	4607      	mov	r7, r0
 800d490:	f300 808e 	bgt.w	800d5b0 <_dtoa_r+0x990>
 800d494:	9b06      	ldr	r3, [sp, #24]
 800d496:	2b02      	cmp	r3, #2
 800d498:	dc51      	bgt.n	800d53e <_dtoa_r+0x91e>
 800d49a:	e089      	b.n	800d5b0 <_dtoa_r+0x990>
 800d49c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d49e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d4a2:	e74b      	b.n	800d33c <_dtoa_r+0x71c>
 800d4a4:	9b03      	ldr	r3, [sp, #12]
 800d4a6:	1e5e      	subs	r6, r3, #1
 800d4a8:	9b07      	ldr	r3, [sp, #28]
 800d4aa:	42b3      	cmp	r3, r6
 800d4ac:	bfbf      	itttt	lt
 800d4ae:	9b07      	ldrlt	r3, [sp, #28]
 800d4b0:	9607      	strlt	r6, [sp, #28]
 800d4b2:	1af2      	sublt	r2, r6, r3
 800d4b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d4b6:	bfb6      	itet	lt
 800d4b8:	189b      	addlt	r3, r3, r2
 800d4ba:	1b9e      	subge	r6, r3, r6
 800d4bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d4be:	9b03      	ldr	r3, [sp, #12]
 800d4c0:	bfb8      	it	lt
 800d4c2:	2600      	movlt	r6, #0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	bfb7      	itett	lt
 800d4c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d4cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d4d0:	1a9d      	sublt	r5, r3, r2
 800d4d2:	2300      	movlt	r3, #0
 800d4d4:	e734      	b.n	800d340 <_dtoa_r+0x720>
 800d4d6:	9e07      	ldr	r6, [sp, #28]
 800d4d8:	9d04      	ldr	r5, [sp, #16]
 800d4da:	9f08      	ldr	r7, [sp, #32]
 800d4dc:	e73b      	b.n	800d356 <_dtoa_r+0x736>
 800d4de:	9a07      	ldr	r2, [sp, #28]
 800d4e0:	e767      	b.n	800d3b2 <_dtoa_r+0x792>
 800d4e2:	9b06      	ldr	r3, [sp, #24]
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	dc18      	bgt.n	800d51a <_dtoa_r+0x8fa>
 800d4e8:	f1ba 0f00 	cmp.w	sl, #0
 800d4ec:	d115      	bne.n	800d51a <_dtoa_r+0x8fa>
 800d4ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4f2:	b993      	cbnz	r3, 800d51a <_dtoa_r+0x8fa>
 800d4f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d4f8:	0d1b      	lsrs	r3, r3, #20
 800d4fa:	051b      	lsls	r3, r3, #20
 800d4fc:	b183      	cbz	r3, 800d520 <_dtoa_r+0x900>
 800d4fe:	9b04      	ldr	r3, [sp, #16]
 800d500:	3301      	adds	r3, #1
 800d502:	9304      	str	r3, [sp, #16]
 800d504:	9b05      	ldr	r3, [sp, #20]
 800d506:	3301      	adds	r3, #1
 800d508:	9305      	str	r3, [sp, #20]
 800d50a:	f04f 0801 	mov.w	r8, #1
 800d50e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d510:	2b00      	cmp	r3, #0
 800d512:	f47f af6a 	bne.w	800d3ea <_dtoa_r+0x7ca>
 800d516:	2001      	movs	r0, #1
 800d518:	e76f      	b.n	800d3fa <_dtoa_r+0x7da>
 800d51a:	f04f 0800 	mov.w	r8, #0
 800d51e:	e7f6      	b.n	800d50e <_dtoa_r+0x8ee>
 800d520:	4698      	mov	r8, r3
 800d522:	e7f4      	b.n	800d50e <_dtoa_r+0x8ee>
 800d524:	f43f af7d 	beq.w	800d422 <_dtoa_r+0x802>
 800d528:	4618      	mov	r0, r3
 800d52a:	301c      	adds	r0, #28
 800d52c:	e772      	b.n	800d414 <_dtoa_r+0x7f4>
 800d52e:	9b03      	ldr	r3, [sp, #12]
 800d530:	2b00      	cmp	r3, #0
 800d532:	dc37      	bgt.n	800d5a4 <_dtoa_r+0x984>
 800d534:	9b06      	ldr	r3, [sp, #24]
 800d536:	2b02      	cmp	r3, #2
 800d538:	dd34      	ble.n	800d5a4 <_dtoa_r+0x984>
 800d53a:	9b03      	ldr	r3, [sp, #12]
 800d53c:	9302      	str	r3, [sp, #8]
 800d53e:	9b02      	ldr	r3, [sp, #8]
 800d540:	b96b      	cbnz	r3, 800d55e <_dtoa_r+0x93e>
 800d542:	4631      	mov	r1, r6
 800d544:	2205      	movs	r2, #5
 800d546:	4620      	mov	r0, r4
 800d548:	f000 fd5a 	bl	800e000 <__multadd>
 800d54c:	4601      	mov	r1, r0
 800d54e:	4606      	mov	r6, r0
 800d550:	ee18 0a10 	vmov	r0, s16
 800d554:	f000 ffbe 	bl	800e4d4 <__mcmp>
 800d558:	2800      	cmp	r0, #0
 800d55a:	f73f adbb 	bgt.w	800d0d4 <_dtoa_r+0x4b4>
 800d55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d560:	9d01      	ldr	r5, [sp, #4]
 800d562:	43db      	mvns	r3, r3
 800d564:	9300      	str	r3, [sp, #0]
 800d566:	f04f 0800 	mov.w	r8, #0
 800d56a:	4631      	mov	r1, r6
 800d56c:	4620      	mov	r0, r4
 800d56e:	f000 fd25 	bl	800dfbc <_Bfree>
 800d572:	2f00      	cmp	r7, #0
 800d574:	f43f aea4 	beq.w	800d2c0 <_dtoa_r+0x6a0>
 800d578:	f1b8 0f00 	cmp.w	r8, #0
 800d57c:	d005      	beq.n	800d58a <_dtoa_r+0x96a>
 800d57e:	45b8      	cmp	r8, r7
 800d580:	d003      	beq.n	800d58a <_dtoa_r+0x96a>
 800d582:	4641      	mov	r1, r8
 800d584:	4620      	mov	r0, r4
 800d586:	f000 fd19 	bl	800dfbc <_Bfree>
 800d58a:	4639      	mov	r1, r7
 800d58c:	4620      	mov	r0, r4
 800d58e:	f000 fd15 	bl	800dfbc <_Bfree>
 800d592:	e695      	b.n	800d2c0 <_dtoa_r+0x6a0>
 800d594:	2600      	movs	r6, #0
 800d596:	4637      	mov	r7, r6
 800d598:	e7e1      	b.n	800d55e <_dtoa_r+0x93e>
 800d59a:	9700      	str	r7, [sp, #0]
 800d59c:	4637      	mov	r7, r6
 800d59e:	e599      	b.n	800d0d4 <_dtoa_r+0x4b4>
 800d5a0:	40240000 	.word	0x40240000
 800d5a4:	9b08      	ldr	r3, [sp, #32]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	f000 80ca 	beq.w	800d740 <_dtoa_r+0xb20>
 800d5ac:	9b03      	ldr	r3, [sp, #12]
 800d5ae:	9302      	str	r3, [sp, #8]
 800d5b0:	2d00      	cmp	r5, #0
 800d5b2:	dd05      	ble.n	800d5c0 <_dtoa_r+0x9a0>
 800d5b4:	4639      	mov	r1, r7
 800d5b6:	462a      	mov	r2, r5
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	f000 ff1b 	bl	800e3f4 <__lshift>
 800d5be:	4607      	mov	r7, r0
 800d5c0:	f1b8 0f00 	cmp.w	r8, #0
 800d5c4:	d05b      	beq.n	800d67e <_dtoa_r+0xa5e>
 800d5c6:	6879      	ldr	r1, [r7, #4]
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	f000 fcb7 	bl	800df3c <_Balloc>
 800d5ce:	4605      	mov	r5, r0
 800d5d0:	b928      	cbnz	r0, 800d5de <_dtoa_r+0x9be>
 800d5d2:	4b87      	ldr	r3, [pc, #540]	; (800d7f0 <_dtoa_r+0xbd0>)
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d5da:	f7ff bb3b 	b.w	800cc54 <_dtoa_r+0x34>
 800d5de:	693a      	ldr	r2, [r7, #16]
 800d5e0:	3202      	adds	r2, #2
 800d5e2:	0092      	lsls	r2, r2, #2
 800d5e4:	f107 010c 	add.w	r1, r7, #12
 800d5e8:	300c      	adds	r0, #12
 800d5ea:	f000 fc8d 	bl	800df08 <memcpy>
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	4629      	mov	r1, r5
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	f000 fefe 	bl	800e3f4 <__lshift>
 800d5f8:	9b01      	ldr	r3, [sp, #4]
 800d5fa:	f103 0901 	add.w	r9, r3, #1
 800d5fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d602:	4413      	add	r3, r2
 800d604:	9305      	str	r3, [sp, #20]
 800d606:	f00a 0301 	and.w	r3, sl, #1
 800d60a:	46b8      	mov	r8, r7
 800d60c:	9304      	str	r3, [sp, #16]
 800d60e:	4607      	mov	r7, r0
 800d610:	4631      	mov	r1, r6
 800d612:	ee18 0a10 	vmov	r0, s16
 800d616:	f7ff fa77 	bl	800cb08 <quorem>
 800d61a:	4641      	mov	r1, r8
 800d61c:	9002      	str	r0, [sp, #8]
 800d61e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d622:	ee18 0a10 	vmov	r0, s16
 800d626:	f000 ff55 	bl	800e4d4 <__mcmp>
 800d62a:	463a      	mov	r2, r7
 800d62c:	9003      	str	r0, [sp, #12]
 800d62e:	4631      	mov	r1, r6
 800d630:	4620      	mov	r0, r4
 800d632:	f000 ff6b 	bl	800e50c <__mdiff>
 800d636:	68c2      	ldr	r2, [r0, #12]
 800d638:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800d63c:	4605      	mov	r5, r0
 800d63e:	bb02      	cbnz	r2, 800d682 <_dtoa_r+0xa62>
 800d640:	4601      	mov	r1, r0
 800d642:	ee18 0a10 	vmov	r0, s16
 800d646:	f000 ff45 	bl	800e4d4 <__mcmp>
 800d64a:	4602      	mov	r2, r0
 800d64c:	4629      	mov	r1, r5
 800d64e:	4620      	mov	r0, r4
 800d650:	9207      	str	r2, [sp, #28]
 800d652:	f000 fcb3 	bl	800dfbc <_Bfree>
 800d656:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d65a:	ea43 0102 	orr.w	r1, r3, r2
 800d65e:	9b04      	ldr	r3, [sp, #16]
 800d660:	430b      	orrs	r3, r1
 800d662:	464d      	mov	r5, r9
 800d664:	d10f      	bne.n	800d686 <_dtoa_r+0xa66>
 800d666:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d66a:	d02a      	beq.n	800d6c2 <_dtoa_r+0xaa2>
 800d66c:	9b03      	ldr	r3, [sp, #12]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	dd02      	ble.n	800d678 <_dtoa_r+0xa58>
 800d672:	9b02      	ldr	r3, [sp, #8]
 800d674:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d678:	f88b a000 	strb.w	sl, [fp]
 800d67c:	e775      	b.n	800d56a <_dtoa_r+0x94a>
 800d67e:	4638      	mov	r0, r7
 800d680:	e7ba      	b.n	800d5f8 <_dtoa_r+0x9d8>
 800d682:	2201      	movs	r2, #1
 800d684:	e7e2      	b.n	800d64c <_dtoa_r+0xa2c>
 800d686:	9b03      	ldr	r3, [sp, #12]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	db04      	blt.n	800d696 <_dtoa_r+0xa76>
 800d68c:	9906      	ldr	r1, [sp, #24]
 800d68e:	430b      	orrs	r3, r1
 800d690:	9904      	ldr	r1, [sp, #16]
 800d692:	430b      	orrs	r3, r1
 800d694:	d122      	bne.n	800d6dc <_dtoa_r+0xabc>
 800d696:	2a00      	cmp	r2, #0
 800d698:	ddee      	ble.n	800d678 <_dtoa_r+0xa58>
 800d69a:	ee18 1a10 	vmov	r1, s16
 800d69e:	2201      	movs	r2, #1
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f000 fea7 	bl	800e3f4 <__lshift>
 800d6a6:	4631      	mov	r1, r6
 800d6a8:	ee08 0a10 	vmov	s16, r0
 800d6ac:	f000 ff12 	bl	800e4d4 <__mcmp>
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	dc03      	bgt.n	800d6bc <_dtoa_r+0xa9c>
 800d6b4:	d1e0      	bne.n	800d678 <_dtoa_r+0xa58>
 800d6b6:	f01a 0f01 	tst.w	sl, #1
 800d6ba:	d0dd      	beq.n	800d678 <_dtoa_r+0xa58>
 800d6bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d6c0:	d1d7      	bne.n	800d672 <_dtoa_r+0xa52>
 800d6c2:	2339      	movs	r3, #57	; 0x39
 800d6c4:	f88b 3000 	strb.w	r3, [fp]
 800d6c8:	462b      	mov	r3, r5
 800d6ca:	461d      	mov	r5, r3
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d6d2:	2a39      	cmp	r2, #57	; 0x39
 800d6d4:	d071      	beq.n	800d7ba <_dtoa_r+0xb9a>
 800d6d6:	3201      	adds	r2, #1
 800d6d8:	701a      	strb	r2, [r3, #0]
 800d6da:	e746      	b.n	800d56a <_dtoa_r+0x94a>
 800d6dc:	2a00      	cmp	r2, #0
 800d6de:	dd07      	ble.n	800d6f0 <_dtoa_r+0xad0>
 800d6e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d6e4:	d0ed      	beq.n	800d6c2 <_dtoa_r+0xaa2>
 800d6e6:	f10a 0301 	add.w	r3, sl, #1
 800d6ea:	f88b 3000 	strb.w	r3, [fp]
 800d6ee:	e73c      	b.n	800d56a <_dtoa_r+0x94a>
 800d6f0:	9b05      	ldr	r3, [sp, #20]
 800d6f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d6f6:	4599      	cmp	r9, r3
 800d6f8:	d047      	beq.n	800d78a <_dtoa_r+0xb6a>
 800d6fa:	ee18 1a10 	vmov	r1, s16
 800d6fe:	2300      	movs	r3, #0
 800d700:	220a      	movs	r2, #10
 800d702:	4620      	mov	r0, r4
 800d704:	f000 fc7c 	bl	800e000 <__multadd>
 800d708:	45b8      	cmp	r8, r7
 800d70a:	ee08 0a10 	vmov	s16, r0
 800d70e:	f04f 0300 	mov.w	r3, #0
 800d712:	f04f 020a 	mov.w	r2, #10
 800d716:	4641      	mov	r1, r8
 800d718:	4620      	mov	r0, r4
 800d71a:	d106      	bne.n	800d72a <_dtoa_r+0xb0a>
 800d71c:	f000 fc70 	bl	800e000 <__multadd>
 800d720:	4680      	mov	r8, r0
 800d722:	4607      	mov	r7, r0
 800d724:	f109 0901 	add.w	r9, r9, #1
 800d728:	e772      	b.n	800d610 <_dtoa_r+0x9f0>
 800d72a:	f000 fc69 	bl	800e000 <__multadd>
 800d72e:	4639      	mov	r1, r7
 800d730:	4680      	mov	r8, r0
 800d732:	2300      	movs	r3, #0
 800d734:	220a      	movs	r2, #10
 800d736:	4620      	mov	r0, r4
 800d738:	f000 fc62 	bl	800e000 <__multadd>
 800d73c:	4607      	mov	r7, r0
 800d73e:	e7f1      	b.n	800d724 <_dtoa_r+0xb04>
 800d740:	9b03      	ldr	r3, [sp, #12]
 800d742:	9302      	str	r3, [sp, #8]
 800d744:	9d01      	ldr	r5, [sp, #4]
 800d746:	ee18 0a10 	vmov	r0, s16
 800d74a:	4631      	mov	r1, r6
 800d74c:	f7ff f9dc 	bl	800cb08 <quorem>
 800d750:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d754:	9b01      	ldr	r3, [sp, #4]
 800d756:	f805 ab01 	strb.w	sl, [r5], #1
 800d75a:	1aea      	subs	r2, r5, r3
 800d75c:	9b02      	ldr	r3, [sp, #8]
 800d75e:	4293      	cmp	r3, r2
 800d760:	dd09      	ble.n	800d776 <_dtoa_r+0xb56>
 800d762:	ee18 1a10 	vmov	r1, s16
 800d766:	2300      	movs	r3, #0
 800d768:	220a      	movs	r2, #10
 800d76a:	4620      	mov	r0, r4
 800d76c:	f000 fc48 	bl	800e000 <__multadd>
 800d770:	ee08 0a10 	vmov	s16, r0
 800d774:	e7e7      	b.n	800d746 <_dtoa_r+0xb26>
 800d776:	9b02      	ldr	r3, [sp, #8]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	bfc8      	it	gt
 800d77c:	461d      	movgt	r5, r3
 800d77e:	9b01      	ldr	r3, [sp, #4]
 800d780:	bfd8      	it	le
 800d782:	2501      	movle	r5, #1
 800d784:	441d      	add	r5, r3
 800d786:	f04f 0800 	mov.w	r8, #0
 800d78a:	ee18 1a10 	vmov	r1, s16
 800d78e:	2201      	movs	r2, #1
 800d790:	4620      	mov	r0, r4
 800d792:	f000 fe2f 	bl	800e3f4 <__lshift>
 800d796:	4631      	mov	r1, r6
 800d798:	ee08 0a10 	vmov	s16, r0
 800d79c:	f000 fe9a 	bl	800e4d4 <__mcmp>
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	dc91      	bgt.n	800d6c8 <_dtoa_r+0xaa8>
 800d7a4:	d102      	bne.n	800d7ac <_dtoa_r+0xb8c>
 800d7a6:	f01a 0f01 	tst.w	sl, #1
 800d7aa:	d18d      	bne.n	800d6c8 <_dtoa_r+0xaa8>
 800d7ac:	462b      	mov	r3, r5
 800d7ae:	461d      	mov	r5, r3
 800d7b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7b4:	2a30      	cmp	r2, #48	; 0x30
 800d7b6:	d0fa      	beq.n	800d7ae <_dtoa_r+0xb8e>
 800d7b8:	e6d7      	b.n	800d56a <_dtoa_r+0x94a>
 800d7ba:	9a01      	ldr	r2, [sp, #4]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d184      	bne.n	800d6ca <_dtoa_r+0xaaa>
 800d7c0:	9b00      	ldr	r3, [sp, #0]
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	9300      	str	r3, [sp, #0]
 800d7c6:	2331      	movs	r3, #49	; 0x31
 800d7c8:	7013      	strb	r3, [r2, #0]
 800d7ca:	e6ce      	b.n	800d56a <_dtoa_r+0x94a>
 800d7cc:	4b09      	ldr	r3, [pc, #36]	; (800d7f4 <_dtoa_r+0xbd4>)
 800d7ce:	f7ff ba95 	b.w	800ccfc <_dtoa_r+0xdc>
 800d7d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f47f aa6e 	bne.w	800ccb6 <_dtoa_r+0x96>
 800d7da:	4b07      	ldr	r3, [pc, #28]	; (800d7f8 <_dtoa_r+0xbd8>)
 800d7dc:	f7ff ba8e 	b.w	800ccfc <_dtoa_r+0xdc>
 800d7e0:	9b02      	ldr	r3, [sp, #8]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	dcae      	bgt.n	800d744 <_dtoa_r+0xb24>
 800d7e6:	9b06      	ldr	r3, [sp, #24]
 800d7e8:	2b02      	cmp	r3, #2
 800d7ea:	f73f aea8 	bgt.w	800d53e <_dtoa_r+0x91e>
 800d7ee:	e7a9      	b.n	800d744 <_dtoa_r+0xb24>
 800d7f0:	08010660 	.word	0x08010660
 800d7f4:	08010460 	.word	0x08010460
 800d7f8:	080105e1 	.word	0x080105e1

0800d7fc <rshift>:
 800d7fc:	6903      	ldr	r3, [r0, #16]
 800d7fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d802:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d806:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d80a:	f100 0414 	add.w	r4, r0, #20
 800d80e:	dd45      	ble.n	800d89c <rshift+0xa0>
 800d810:	f011 011f 	ands.w	r1, r1, #31
 800d814:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d818:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d81c:	d10c      	bne.n	800d838 <rshift+0x3c>
 800d81e:	f100 0710 	add.w	r7, r0, #16
 800d822:	4629      	mov	r1, r5
 800d824:	42b1      	cmp	r1, r6
 800d826:	d334      	bcc.n	800d892 <rshift+0x96>
 800d828:	1a9b      	subs	r3, r3, r2
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	1eea      	subs	r2, r5, #3
 800d82e:	4296      	cmp	r6, r2
 800d830:	bf38      	it	cc
 800d832:	2300      	movcc	r3, #0
 800d834:	4423      	add	r3, r4
 800d836:	e015      	b.n	800d864 <rshift+0x68>
 800d838:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d83c:	f1c1 0820 	rsb	r8, r1, #32
 800d840:	40cf      	lsrs	r7, r1
 800d842:	f105 0e04 	add.w	lr, r5, #4
 800d846:	46a1      	mov	r9, r4
 800d848:	4576      	cmp	r6, lr
 800d84a:	46f4      	mov	ip, lr
 800d84c:	d815      	bhi.n	800d87a <rshift+0x7e>
 800d84e:	1a9a      	subs	r2, r3, r2
 800d850:	0092      	lsls	r2, r2, #2
 800d852:	3a04      	subs	r2, #4
 800d854:	3501      	adds	r5, #1
 800d856:	42ae      	cmp	r6, r5
 800d858:	bf38      	it	cc
 800d85a:	2200      	movcc	r2, #0
 800d85c:	18a3      	adds	r3, r4, r2
 800d85e:	50a7      	str	r7, [r4, r2]
 800d860:	b107      	cbz	r7, 800d864 <rshift+0x68>
 800d862:	3304      	adds	r3, #4
 800d864:	1b1a      	subs	r2, r3, r4
 800d866:	42a3      	cmp	r3, r4
 800d868:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d86c:	bf08      	it	eq
 800d86e:	2300      	moveq	r3, #0
 800d870:	6102      	str	r2, [r0, #16]
 800d872:	bf08      	it	eq
 800d874:	6143      	streq	r3, [r0, #20]
 800d876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d87a:	f8dc c000 	ldr.w	ip, [ip]
 800d87e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d882:	ea4c 0707 	orr.w	r7, ip, r7
 800d886:	f849 7b04 	str.w	r7, [r9], #4
 800d88a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d88e:	40cf      	lsrs	r7, r1
 800d890:	e7da      	b.n	800d848 <rshift+0x4c>
 800d892:	f851 cb04 	ldr.w	ip, [r1], #4
 800d896:	f847 cf04 	str.w	ip, [r7, #4]!
 800d89a:	e7c3      	b.n	800d824 <rshift+0x28>
 800d89c:	4623      	mov	r3, r4
 800d89e:	e7e1      	b.n	800d864 <rshift+0x68>

0800d8a0 <__hexdig_fun>:
 800d8a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d8a4:	2b09      	cmp	r3, #9
 800d8a6:	d802      	bhi.n	800d8ae <__hexdig_fun+0xe>
 800d8a8:	3820      	subs	r0, #32
 800d8aa:	b2c0      	uxtb	r0, r0
 800d8ac:	4770      	bx	lr
 800d8ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d8b2:	2b05      	cmp	r3, #5
 800d8b4:	d801      	bhi.n	800d8ba <__hexdig_fun+0x1a>
 800d8b6:	3847      	subs	r0, #71	; 0x47
 800d8b8:	e7f7      	b.n	800d8aa <__hexdig_fun+0xa>
 800d8ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d8be:	2b05      	cmp	r3, #5
 800d8c0:	d801      	bhi.n	800d8c6 <__hexdig_fun+0x26>
 800d8c2:	3827      	subs	r0, #39	; 0x27
 800d8c4:	e7f1      	b.n	800d8aa <__hexdig_fun+0xa>
 800d8c6:	2000      	movs	r0, #0
 800d8c8:	4770      	bx	lr
	...

0800d8cc <__gethex>:
 800d8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8d0:	ed2d 8b02 	vpush	{d8}
 800d8d4:	b089      	sub	sp, #36	; 0x24
 800d8d6:	ee08 0a10 	vmov	s16, r0
 800d8da:	9304      	str	r3, [sp, #16]
 800d8dc:	4bb4      	ldr	r3, [pc, #720]	; (800dbb0 <__gethex+0x2e4>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	9301      	str	r3, [sp, #4]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	468b      	mov	fp, r1
 800d8e6:	4690      	mov	r8, r2
 800d8e8:	f7f2 fc9a 	bl	8000220 <strlen>
 800d8ec:	9b01      	ldr	r3, [sp, #4]
 800d8ee:	f8db 2000 	ldr.w	r2, [fp]
 800d8f2:	4403      	add	r3, r0
 800d8f4:	4682      	mov	sl, r0
 800d8f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d8fa:	9305      	str	r3, [sp, #20]
 800d8fc:	1c93      	adds	r3, r2, #2
 800d8fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d902:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d906:	32fe      	adds	r2, #254	; 0xfe
 800d908:	18d1      	adds	r1, r2, r3
 800d90a:	461f      	mov	r7, r3
 800d90c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d910:	9100      	str	r1, [sp, #0]
 800d912:	2830      	cmp	r0, #48	; 0x30
 800d914:	d0f8      	beq.n	800d908 <__gethex+0x3c>
 800d916:	f7ff ffc3 	bl	800d8a0 <__hexdig_fun>
 800d91a:	4604      	mov	r4, r0
 800d91c:	2800      	cmp	r0, #0
 800d91e:	d13a      	bne.n	800d996 <__gethex+0xca>
 800d920:	9901      	ldr	r1, [sp, #4]
 800d922:	4652      	mov	r2, sl
 800d924:	4638      	mov	r0, r7
 800d926:	f001 f943 	bl	800ebb0 <strncmp>
 800d92a:	4605      	mov	r5, r0
 800d92c:	2800      	cmp	r0, #0
 800d92e:	d168      	bne.n	800da02 <__gethex+0x136>
 800d930:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d934:	eb07 060a 	add.w	r6, r7, sl
 800d938:	f7ff ffb2 	bl	800d8a0 <__hexdig_fun>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	d062      	beq.n	800da06 <__gethex+0x13a>
 800d940:	4633      	mov	r3, r6
 800d942:	7818      	ldrb	r0, [r3, #0]
 800d944:	2830      	cmp	r0, #48	; 0x30
 800d946:	461f      	mov	r7, r3
 800d948:	f103 0301 	add.w	r3, r3, #1
 800d94c:	d0f9      	beq.n	800d942 <__gethex+0x76>
 800d94e:	f7ff ffa7 	bl	800d8a0 <__hexdig_fun>
 800d952:	2301      	movs	r3, #1
 800d954:	fab0 f480 	clz	r4, r0
 800d958:	0964      	lsrs	r4, r4, #5
 800d95a:	4635      	mov	r5, r6
 800d95c:	9300      	str	r3, [sp, #0]
 800d95e:	463a      	mov	r2, r7
 800d960:	4616      	mov	r6, r2
 800d962:	3201      	adds	r2, #1
 800d964:	7830      	ldrb	r0, [r6, #0]
 800d966:	f7ff ff9b 	bl	800d8a0 <__hexdig_fun>
 800d96a:	2800      	cmp	r0, #0
 800d96c:	d1f8      	bne.n	800d960 <__gethex+0x94>
 800d96e:	9901      	ldr	r1, [sp, #4]
 800d970:	4652      	mov	r2, sl
 800d972:	4630      	mov	r0, r6
 800d974:	f001 f91c 	bl	800ebb0 <strncmp>
 800d978:	b980      	cbnz	r0, 800d99c <__gethex+0xd0>
 800d97a:	b94d      	cbnz	r5, 800d990 <__gethex+0xc4>
 800d97c:	eb06 050a 	add.w	r5, r6, sl
 800d980:	462a      	mov	r2, r5
 800d982:	4616      	mov	r6, r2
 800d984:	3201      	adds	r2, #1
 800d986:	7830      	ldrb	r0, [r6, #0]
 800d988:	f7ff ff8a 	bl	800d8a0 <__hexdig_fun>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	d1f8      	bne.n	800d982 <__gethex+0xb6>
 800d990:	1bad      	subs	r5, r5, r6
 800d992:	00ad      	lsls	r5, r5, #2
 800d994:	e004      	b.n	800d9a0 <__gethex+0xd4>
 800d996:	2400      	movs	r4, #0
 800d998:	4625      	mov	r5, r4
 800d99a:	e7e0      	b.n	800d95e <__gethex+0x92>
 800d99c:	2d00      	cmp	r5, #0
 800d99e:	d1f7      	bne.n	800d990 <__gethex+0xc4>
 800d9a0:	7833      	ldrb	r3, [r6, #0]
 800d9a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d9a6:	2b50      	cmp	r3, #80	; 0x50
 800d9a8:	d13b      	bne.n	800da22 <__gethex+0x156>
 800d9aa:	7873      	ldrb	r3, [r6, #1]
 800d9ac:	2b2b      	cmp	r3, #43	; 0x2b
 800d9ae:	d02c      	beq.n	800da0a <__gethex+0x13e>
 800d9b0:	2b2d      	cmp	r3, #45	; 0x2d
 800d9b2:	d02e      	beq.n	800da12 <__gethex+0x146>
 800d9b4:	1c71      	adds	r1, r6, #1
 800d9b6:	f04f 0900 	mov.w	r9, #0
 800d9ba:	7808      	ldrb	r0, [r1, #0]
 800d9bc:	f7ff ff70 	bl	800d8a0 <__hexdig_fun>
 800d9c0:	1e43      	subs	r3, r0, #1
 800d9c2:	b2db      	uxtb	r3, r3
 800d9c4:	2b18      	cmp	r3, #24
 800d9c6:	d82c      	bhi.n	800da22 <__gethex+0x156>
 800d9c8:	f1a0 0210 	sub.w	r2, r0, #16
 800d9cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d9d0:	f7ff ff66 	bl	800d8a0 <__hexdig_fun>
 800d9d4:	1e43      	subs	r3, r0, #1
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	2b18      	cmp	r3, #24
 800d9da:	d91d      	bls.n	800da18 <__gethex+0x14c>
 800d9dc:	f1b9 0f00 	cmp.w	r9, #0
 800d9e0:	d000      	beq.n	800d9e4 <__gethex+0x118>
 800d9e2:	4252      	negs	r2, r2
 800d9e4:	4415      	add	r5, r2
 800d9e6:	f8cb 1000 	str.w	r1, [fp]
 800d9ea:	b1e4      	cbz	r4, 800da26 <__gethex+0x15a>
 800d9ec:	9b00      	ldr	r3, [sp, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	bf14      	ite	ne
 800d9f2:	2700      	movne	r7, #0
 800d9f4:	2706      	moveq	r7, #6
 800d9f6:	4638      	mov	r0, r7
 800d9f8:	b009      	add	sp, #36	; 0x24
 800d9fa:	ecbd 8b02 	vpop	{d8}
 800d9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da02:	463e      	mov	r6, r7
 800da04:	4625      	mov	r5, r4
 800da06:	2401      	movs	r4, #1
 800da08:	e7ca      	b.n	800d9a0 <__gethex+0xd4>
 800da0a:	f04f 0900 	mov.w	r9, #0
 800da0e:	1cb1      	adds	r1, r6, #2
 800da10:	e7d3      	b.n	800d9ba <__gethex+0xee>
 800da12:	f04f 0901 	mov.w	r9, #1
 800da16:	e7fa      	b.n	800da0e <__gethex+0x142>
 800da18:	230a      	movs	r3, #10
 800da1a:	fb03 0202 	mla	r2, r3, r2, r0
 800da1e:	3a10      	subs	r2, #16
 800da20:	e7d4      	b.n	800d9cc <__gethex+0x100>
 800da22:	4631      	mov	r1, r6
 800da24:	e7df      	b.n	800d9e6 <__gethex+0x11a>
 800da26:	1bf3      	subs	r3, r6, r7
 800da28:	3b01      	subs	r3, #1
 800da2a:	4621      	mov	r1, r4
 800da2c:	2b07      	cmp	r3, #7
 800da2e:	dc0b      	bgt.n	800da48 <__gethex+0x17c>
 800da30:	ee18 0a10 	vmov	r0, s16
 800da34:	f000 fa82 	bl	800df3c <_Balloc>
 800da38:	4604      	mov	r4, r0
 800da3a:	b940      	cbnz	r0, 800da4e <__gethex+0x182>
 800da3c:	4b5d      	ldr	r3, [pc, #372]	; (800dbb4 <__gethex+0x2e8>)
 800da3e:	4602      	mov	r2, r0
 800da40:	21de      	movs	r1, #222	; 0xde
 800da42:	485d      	ldr	r0, [pc, #372]	; (800dbb8 <__gethex+0x2ec>)
 800da44:	f001 f8d6 	bl	800ebf4 <__assert_func>
 800da48:	3101      	adds	r1, #1
 800da4a:	105b      	asrs	r3, r3, #1
 800da4c:	e7ee      	b.n	800da2c <__gethex+0x160>
 800da4e:	f100 0914 	add.w	r9, r0, #20
 800da52:	f04f 0b00 	mov.w	fp, #0
 800da56:	f1ca 0301 	rsb	r3, sl, #1
 800da5a:	f8cd 9008 	str.w	r9, [sp, #8]
 800da5e:	f8cd b000 	str.w	fp, [sp]
 800da62:	9306      	str	r3, [sp, #24]
 800da64:	42b7      	cmp	r7, r6
 800da66:	d340      	bcc.n	800daea <__gethex+0x21e>
 800da68:	9802      	ldr	r0, [sp, #8]
 800da6a:	9b00      	ldr	r3, [sp, #0]
 800da6c:	f840 3b04 	str.w	r3, [r0], #4
 800da70:	eba0 0009 	sub.w	r0, r0, r9
 800da74:	1080      	asrs	r0, r0, #2
 800da76:	0146      	lsls	r6, r0, #5
 800da78:	6120      	str	r0, [r4, #16]
 800da7a:	4618      	mov	r0, r3
 800da7c:	f000 fb50 	bl	800e120 <__hi0bits>
 800da80:	1a30      	subs	r0, r6, r0
 800da82:	f8d8 6000 	ldr.w	r6, [r8]
 800da86:	42b0      	cmp	r0, r6
 800da88:	dd63      	ble.n	800db52 <__gethex+0x286>
 800da8a:	1b87      	subs	r7, r0, r6
 800da8c:	4639      	mov	r1, r7
 800da8e:	4620      	mov	r0, r4
 800da90:	f000 fef4 	bl	800e87c <__any_on>
 800da94:	4682      	mov	sl, r0
 800da96:	b1a8      	cbz	r0, 800dac4 <__gethex+0x1f8>
 800da98:	1e7b      	subs	r3, r7, #1
 800da9a:	1159      	asrs	r1, r3, #5
 800da9c:	f003 021f 	and.w	r2, r3, #31
 800daa0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800daa4:	f04f 0a01 	mov.w	sl, #1
 800daa8:	fa0a f202 	lsl.w	r2, sl, r2
 800daac:	420a      	tst	r2, r1
 800daae:	d009      	beq.n	800dac4 <__gethex+0x1f8>
 800dab0:	4553      	cmp	r3, sl
 800dab2:	dd05      	ble.n	800dac0 <__gethex+0x1f4>
 800dab4:	1eb9      	subs	r1, r7, #2
 800dab6:	4620      	mov	r0, r4
 800dab8:	f000 fee0 	bl	800e87c <__any_on>
 800dabc:	2800      	cmp	r0, #0
 800dabe:	d145      	bne.n	800db4c <__gethex+0x280>
 800dac0:	f04f 0a02 	mov.w	sl, #2
 800dac4:	4639      	mov	r1, r7
 800dac6:	4620      	mov	r0, r4
 800dac8:	f7ff fe98 	bl	800d7fc <rshift>
 800dacc:	443d      	add	r5, r7
 800dace:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dad2:	42ab      	cmp	r3, r5
 800dad4:	da4c      	bge.n	800db70 <__gethex+0x2a4>
 800dad6:	ee18 0a10 	vmov	r0, s16
 800dada:	4621      	mov	r1, r4
 800dadc:	f000 fa6e 	bl	800dfbc <_Bfree>
 800dae0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dae2:	2300      	movs	r3, #0
 800dae4:	6013      	str	r3, [r2, #0]
 800dae6:	27a3      	movs	r7, #163	; 0xa3
 800dae8:	e785      	b.n	800d9f6 <__gethex+0x12a>
 800daea:	1e73      	subs	r3, r6, #1
 800daec:	9a05      	ldr	r2, [sp, #20]
 800daee:	9303      	str	r3, [sp, #12]
 800daf0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d019      	beq.n	800db2c <__gethex+0x260>
 800daf8:	f1bb 0f20 	cmp.w	fp, #32
 800dafc:	d107      	bne.n	800db0e <__gethex+0x242>
 800dafe:	9b02      	ldr	r3, [sp, #8]
 800db00:	9a00      	ldr	r2, [sp, #0]
 800db02:	f843 2b04 	str.w	r2, [r3], #4
 800db06:	9302      	str	r3, [sp, #8]
 800db08:	2300      	movs	r3, #0
 800db0a:	9300      	str	r3, [sp, #0]
 800db0c:	469b      	mov	fp, r3
 800db0e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800db12:	f7ff fec5 	bl	800d8a0 <__hexdig_fun>
 800db16:	9b00      	ldr	r3, [sp, #0]
 800db18:	f000 000f 	and.w	r0, r0, #15
 800db1c:	fa00 f00b 	lsl.w	r0, r0, fp
 800db20:	4303      	orrs	r3, r0
 800db22:	9300      	str	r3, [sp, #0]
 800db24:	f10b 0b04 	add.w	fp, fp, #4
 800db28:	9b03      	ldr	r3, [sp, #12]
 800db2a:	e00d      	b.n	800db48 <__gethex+0x27c>
 800db2c:	9b03      	ldr	r3, [sp, #12]
 800db2e:	9a06      	ldr	r2, [sp, #24]
 800db30:	4413      	add	r3, r2
 800db32:	42bb      	cmp	r3, r7
 800db34:	d3e0      	bcc.n	800daf8 <__gethex+0x22c>
 800db36:	4618      	mov	r0, r3
 800db38:	9901      	ldr	r1, [sp, #4]
 800db3a:	9307      	str	r3, [sp, #28]
 800db3c:	4652      	mov	r2, sl
 800db3e:	f001 f837 	bl	800ebb0 <strncmp>
 800db42:	9b07      	ldr	r3, [sp, #28]
 800db44:	2800      	cmp	r0, #0
 800db46:	d1d7      	bne.n	800daf8 <__gethex+0x22c>
 800db48:	461e      	mov	r6, r3
 800db4a:	e78b      	b.n	800da64 <__gethex+0x198>
 800db4c:	f04f 0a03 	mov.w	sl, #3
 800db50:	e7b8      	b.n	800dac4 <__gethex+0x1f8>
 800db52:	da0a      	bge.n	800db6a <__gethex+0x29e>
 800db54:	1a37      	subs	r7, r6, r0
 800db56:	4621      	mov	r1, r4
 800db58:	ee18 0a10 	vmov	r0, s16
 800db5c:	463a      	mov	r2, r7
 800db5e:	f000 fc49 	bl	800e3f4 <__lshift>
 800db62:	1bed      	subs	r5, r5, r7
 800db64:	4604      	mov	r4, r0
 800db66:	f100 0914 	add.w	r9, r0, #20
 800db6a:	f04f 0a00 	mov.w	sl, #0
 800db6e:	e7ae      	b.n	800dace <__gethex+0x202>
 800db70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800db74:	42a8      	cmp	r0, r5
 800db76:	dd72      	ble.n	800dc5e <__gethex+0x392>
 800db78:	1b45      	subs	r5, r0, r5
 800db7a:	42ae      	cmp	r6, r5
 800db7c:	dc36      	bgt.n	800dbec <__gethex+0x320>
 800db7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db82:	2b02      	cmp	r3, #2
 800db84:	d02a      	beq.n	800dbdc <__gethex+0x310>
 800db86:	2b03      	cmp	r3, #3
 800db88:	d02c      	beq.n	800dbe4 <__gethex+0x318>
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d11c      	bne.n	800dbc8 <__gethex+0x2fc>
 800db8e:	42ae      	cmp	r6, r5
 800db90:	d11a      	bne.n	800dbc8 <__gethex+0x2fc>
 800db92:	2e01      	cmp	r6, #1
 800db94:	d112      	bne.n	800dbbc <__gethex+0x2f0>
 800db96:	9a04      	ldr	r2, [sp, #16]
 800db98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db9c:	6013      	str	r3, [r2, #0]
 800db9e:	2301      	movs	r3, #1
 800dba0:	6123      	str	r3, [r4, #16]
 800dba2:	f8c9 3000 	str.w	r3, [r9]
 800dba6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dba8:	2762      	movs	r7, #98	; 0x62
 800dbaa:	601c      	str	r4, [r3, #0]
 800dbac:	e723      	b.n	800d9f6 <__gethex+0x12a>
 800dbae:	bf00      	nop
 800dbb0:	080106d8 	.word	0x080106d8
 800dbb4:	08010660 	.word	0x08010660
 800dbb8:	08010671 	.word	0x08010671
 800dbbc:	1e71      	subs	r1, r6, #1
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f000 fe5c 	bl	800e87c <__any_on>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	d1e6      	bne.n	800db96 <__gethex+0x2ca>
 800dbc8:	ee18 0a10 	vmov	r0, s16
 800dbcc:	4621      	mov	r1, r4
 800dbce:	f000 f9f5 	bl	800dfbc <_Bfree>
 800dbd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	6013      	str	r3, [r2, #0]
 800dbd8:	2750      	movs	r7, #80	; 0x50
 800dbda:	e70c      	b.n	800d9f6 <__gethex+0x12a>
 800dbdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d1f2      	bne.n	800dbc8 <__gethex+0x2fc>
 800dbe2:	e7d8      	b.n	800db96 <__gethex+0x2ca>
 800dbe4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d1d5      	bne.n	800db96 <__gethex+0x2ca>
 800dbea:	e7ed      	b.n	800dbc8 <__gethex+0x2fc>
 800dbec:	1e6f      	subs	r7, r5, #1
 800dbee:	f1ba 0f00 	cmp.w	sl, #0
 800dbf2:	d131      	bne.n	800dc58 <__gethex+0x38c>
 800dbf4:	b127      	cbz	r7, 800dc00 <__gethex+0x334>
 800dbf6:	4639      	mov	r1, r7
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	f000 fe3f 	bl	800e87c <__any_on>
 800dbfe:	4682      	mov	sl, r0
 800dc00:	117b      	asrs	r3, r7, #5
 800dc02:	2101      	movs	r1, #1
 800dc04:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800dc08:	f007 071f 	and.w	r7, r7, #31
 800dc0c:	fa01 f707 	lsl.w	r7, r1, r7
 800dc10:	421f      	tst	r7, r3
 800dc12:	4629      	mov	r1, r5
 800dc14:	4620      	mov	r0, r4
 800dc16:	bf18      	it	ne
 800dc18:	f04a 0a02 	orrne.w	sl, sl, #2
 800dc1c:	1b76      	subs	r6, r6, r5
 800dc1e:	f7ff fded 	bl	800d7fc <rshift>
 800dc22:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dc26:	2702      	movs	r7, #2
 800dc28:	f1ba 0f00 	cmp.w	sl, #0
 800dc2c:	d048      	beq.n	800dcc0 <__gethex+0x3f4>
 800dc2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc32:	2b02      	cmp	r3, #2
 800dc34:	d015      	beq.n	800dc62 <__gethex+0x396>
 800dc36:	2b03      	cmp	r3, #3
 800dc38:	d017      	beq.n	800dc6a <__gethex+0x39e>
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d109      	bne.n	800dc52 <__gethex+0x386>
 800dc3e:	f01a 0f02 	tst.w	sl, #2
 800dc42:	d006      	beq.n	800dc52 <__gethex+0x386>
 800dc44:	f8d9 0000 	ldr.w	r0, [r9]
 800dc48:	ea4a 0a00 	orr.w	sl, sl, r0
 800dc4c:	f01a 0f01 	tst.w	sl, #1
 800dc50:	d10e      	bne.n	800dc70 <__gethex+0x3a4>
 800dc52:	f047 0710 	orr.w	r7, r7, #16
 800dc56:	e033      	b.n	800dcc0 <__gethex+0x3f4>
 800dc58:	f04f 0a01 	mov.w	sl, #1
 800dc5c:	e7d0      	b.n	800dc00 <__gethex+0x334>
 800dc5e:	2701      	movs	r7, #1
 800dc60:	e7e2      	b.n	800dc28 <__gethex+0x35c>
 800dc62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc64:	f1c3 0301 	rsb	r3, r3, #1
 800dc68:	9315      	str	r3, [sp, #84]	; 0x54
 800dc6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d0f0      	beq.n	800dc52 <__gethex+0x386>
 800dc70:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dc74:	f104 0314 	add.w	r3, r4, #20
 800dc78:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dc7c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dc80:	f04f 0c00 	mov.w	ip, #0
 800dc84:	4618      	mov	r0, r3
 800dc86:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc8a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800dc8e:	d01c      	beq.n	800dcca <__gethex+0x3fe>
 800dc90:	3201      	adds	r2, #1
 800dc92:	6002      	str	r2, [r0, #0]
 800dc94:	2f02      	cmp	r7, #2
 800dc96:	f104 0314 	add.w	r3, r4, #20
 800dc9a:	d13f      	bne.n	800dd1c <__gethex+0x450>
 800dc9c:	f8d8 2000 	ldr.w	r2, [r8]
 800dca0:	3a01      	subs	r2, #1
 800dca2:	42b2      	cmp	r2, r6
 800dca4:	d10a      	bne.n	800dcbc <__gethex+0x3f0>
 800dca6:	1171      	asrs	r1, r6, #5
 800dca8:	2201      	movs	r2, #1
 800dcaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dcae:	f006 061f 	and.w	r6, r6, #31
 800dcb2:	fa02 f606 	lsl.w	r6, r2, r6
 800dcb6:	421e      	tst	r6, r3
 800dcb8:	bf18      	it	ne
 800dcba:	4617      	movne	r7, r2
 800dcbc:	f047 0720 	orr.w	r7, r7, #32
 800dcc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dcc2:	601c      	str	r4, [r3, #0]
 800dcc4:	9b04      	ldr	r3, [sp, #16]
 800dcc6:	601d      	str	r5, [r3, #0]
 800dcc8:	e695      	b.n	800d9f6 <__gethex+0x12a>
 800dcca:	4299      	cmp	r1, r3
 800dccc:	f843 cc04 	str.w	ip, [r3, #-4]
 800dcd0:	d8d8      	bhi.n	800dc84 <__gethex+0x3b8>
 800dcd2:	68a3      	ldr	r3, [r4, #8]
 800dcd4:	459b      	cmp	fp, r3
 800dcd6:	db19      	blt.n	800dd0c <__gethex+0x440>
 800dcd8:	6861      	ldr	r1, [r4, #4]
 800dcda:	ee18 0a10 	vmov	r0, s16
 800dcde:	3101      	adds	r1, #1
 800dce0:	f000 f92c 	bl	800df3c <_Balloc>
 800dce4:	4681      	mov	r9, r0
 800dce6:	b918      	cbnz	r0, 800dcf0 <__gethex+0x424>
 800dce8:	4b1a      	ldr	r3, [pc, #104]	; (800dd54 <__gethex+0x488>)
 800dcea:	4602      	mov	r2, r0
 800dcec:	2184      	movs	r1, #132	; 0x84
 800dcee:	e6a8      	b.n	800da42 <__gethex+0x176>
 800dcf0:	6922      	ldr	r2, [r4, #16]
 800dcf2:	3202      	adds	r2, #2
 800dcf4:	f104 010c 	add.w	r1, r4, #12
 800dcf8:	0092      	lsls	r2, r2, #2
 800dcfa:	300c      	adds	r0, #12
 800dcfc:	f000 f904 	bl	800df08 <memcpy>
 800dd00:	4621      	mov	r1, r4
 800dd02:	ee18 0a10 	vmov	r0, s16
 800dd06:	f000 f959 	bl	800dfbc <_Bfree>
 800dd0a:	464c      	mov	r4, r9
 800dd0c:	6923      	ldr	r3, [r4, #16]
 800dd0e:	1c5a      	adds	r2, r3, #1
 800dd10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dd14:	6122      	str	r2, [r4, #16]
 800dd16:	2201      	movs	r2, #1
 800dd18:	615a      	str	r2, [r3, #20]
 800dd1a:	e7bb      	b.n	800dc94 <__gethex+0x3c8>
 800dd1c:	6922      	ldr	r2, [r4, #16]
 800dd1e:	455a      	cmp	r2, fp
 800dd20:	dd0b      	ble.n	800dd3a <__gethex+0x46e>
 800dd22:	2101      	movs	r1, #1
 800dd24:	4620      	mov	r0, r4
 800dd26:	f7ff fd69 	bl	800d7fc <rshift>
 800dd2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd2e:	3501      	adds	r5, #1
 800dd30:	42ab      	cmp	r3, r5
 800dd32:	f6ff aed0 	blt.w	800dad6 <__gethex+0x20a>
 800dd36:	2701      	movs	r7, #1
 800dd38:	e7c0      	b.n	800dcbc <__gethex+0x3f0>
 800dd3a:	f016 061f 	ands.w	r6, r6, #31
 800dd3e:	d0fa      	beq.n	800dd36 <__gethex+0x46a>
 800dd40:	4453      	add	r3, sl
 800dd42:	f1c6 0620 	rsb	r6, r6, #32
 800dd46:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dd4a:	f000 f9e9 	bl	800e120 <__hi0bits>
 800dd4e:	42b0      	cmp	r0, r6
 800dd50:	dbe7      	blt.n	800dd22 <__gethex+0x456>
 800dd52:	e7f0      	b.n	800dd36 <__gethex+0x46a>
 800dd54:	08010660 	.word	0x08010660

0800dd58 <L_shift>:
 800dd58:	f1c2 0208 	rsb	r2, r2, #8
 800dd5c:	0092      	lsls	r2, r2, #2
 800dd5e:	b570      	push	{r4, r5, r6, lr}
 800dd60:	f1c2 0620 	rsb	r6, r2, #32
 800dd64:	6843      	ldr	r3, [r0, #4]
 800dd66:	6804      	ldr	r4, [r0, #0]
 800dd68:	fa03 f506 	lsl.w	r5, r3, r6
 800dd6c:	432c      	orrs	r4, r5
 800dd6e:	40d3      	lsrs	r3, r2
 800dd70:	6004      	str	r4, [r0, #0]
 800dd72:	f840 3f04 	str.w	r3, [r0, #4]!
 800dd76:	4288      	cmp	r0, r1
 800dd78:	d3f4      	bcc.n	800dd64 <L_shift+0xc>
 800dd7a:	bd70      	pop	{r4, r5, r6, pc}

0800dd7c <__match>:
 800dd7c:	b530      	push	{r4, r5, lr}
 800dd7e:	6803      	ldr	r3, [r0, #0]
 800dd80:	3301      	adds	r3, #1
 800dd82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd86:	b914      	cbnz	r4, 800dd8e <__match+0x12>
 800dd88:	6003      	str	r3, [r0, #0]
 800dd8a:	2001      	movs	r0, #1
 800dd8c:	bd30      	pop	{r4, r5, pc}
 800dd8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dd96:	2d19      	cmp	r5, #25
 800dd98:	bf98      	it	ls
 800dd9a:	3220      	addls	r2, #32
 800dd9c:	42a2      	cmp	r2, r4
 800dd9e:	d0f0      	beq.n	800dd82 <__match+0x6>
 800dda0:	2000      	movs	r0, #0
 800dda2:	e7f3      	b.n	800dd8c <__match+0x10>

0800dda4 <__hexnan>:
 800dda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dda8:	680b      	ldr	r3, [r1, #0]
 800ddaa:	115e      	asrs	r6, r3, #5
 800ddac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ddb0:	f013 031f 	ands.w	r3, r3, #31
 800ddb4:	b087      	sub	sp, #28
 800ddb6:	bf18      	it	ne
 800ddb8:	3604      	addne	r6, #4
 800ddba:	2500      	movs	r5, #0
 800ddbc:	1f37      	subs	r7, r6, #4
 800ddbe:	4690      	mov	r8, r2
 800ddc0:	6802      	ldr	r2, [r0, #0]
 800ddc2:	9301      	str	r3, [sp, #4]
 800ddc4:	4682      	mov	sl, r0
 800ddc6:	f846 5c04 	str.w	r5, [r6, #-4]
 800ddca:	46b9      	mov	r9, r7
 800ddcc:	463c      	mov	r4, r7
 800ddce:	9502      	str	r5, [sp, #8]
 800ddd0:	46ab      	mov	fp, r5
 800ddd2:	7851      	ldrb	r1, [r2, #1]
 800ddd4:	1c53      	adds	r3, r2, #1
 800ddd6:	9303      	str	r3, [sp, #12]
 800ddd8:	b341      	cbz	r1, 800de2c <__hexnan+0x88>
 800ddda:	4608      	mov	r0, r1
 800dddc:	9205      	str	r2, [sp, #20]
 800ddde:	9104      	str	r1, [sp, #16]
 800dde0:	f7ff fd5e 	bl	800d8a0 <__hexdig_fun>
 800dde4:	2800      	cmp	r0, #0
 800dde6:	d14f      	bne.n	800de88 <__hexnan+0xe4>
 800dde8:	9904      	ldr	r1, [sp, #16]
 800ddea:	9a05      	ldr	r2, [sp, #20]
 800ddec:	2920      	cmp	r1, #32
 800ddee:	d818      	bhi.n	800de22 <__hexnan+0x7e>
 800ddf0:	9b02      	ldr	r3, [sp, #8]
 800ddf2:	459b      	cmp	fp, r3
 800ddf4:	dd13      	ble.n	800de1e <__hexnan+0x7a>
 800ddf6:	454c      	cmp	r4, r9
 800ddf8:	d206      	bcs.n	800de08 <__hexnan+0x64>
 800ddfa:	2d07      	cmp	r5, #7
 800ddfc:	dc04      	bgt.n	800de08 <__hexnan+0x64>
 800ddfe:	462a      	mov	r2, r5
 800de00:	4649      	mov	r1, r9
 800de02:	4620      	mov	r0, r4
 800de04:	f7ff ffa8 	bl	800dd58 <L_shift>
 800de08:	4544      	cmp	r4, r8
 800de0a:	d950      	bls.n	800deae <__hexnan+0x10a>
 800de0c:	2300      	movs	r3, #0
 800de0e:	f1a4 0904 	sub.w	r9, r4, #4
 800de12:	f844 3c04 	str.w	r3, [r4, #-4]
 800de16:	f8cd b008 	str.w	fp, [sp, #8]
 800de1a:	464c      	mov	r4, r9
 800de1c:	461d      	mov	r5, r3
 800de1e:	9a03      	ldr	r2, [sp, #12]
 800de20:	e7d7      	b.n	800ddd2 <__hexnan+0x2e>
 800de22:	2929      	cmp	r1, #41	; 0x29
 800de24:	d156      	bne.n	800ded4 <__hexnan+0x130>
 800de26:	3202      	adds	r2, #2
 800de28:	f8ca 2000 	str.w	r2, [sl]
 800de2c:	f1bb 0f00 	cmp.w	fp, #0
 800de30:	d050      	beq.n	800ded4 <__hexnan+0x130>
 800de32:	454c      	cmp	r4, r9
 800de34:	d206      	bcs.n	800de44 <__hexnan+0xa0>
 800de36:	2d07      	cmp	r5, #7
 800de38:	dc04      	bgt.n	800de44 <__hexnan+0xa0>
 800de3a:	462a      	mov	r2, r5
 800de3c:	4649      	mov	r1, r9
 800de3e:	4620      	mov	r0, r4
 800de40:	f7ff ff8a 	bl	800dd58 <L_shift>
 800de44:	4544      	cmp	r4, r8
 800de46:	d934      	bls.n	800deb2 <__hexnan+0x10e>
 800de48:	f1a8 0204 	sub.w	r2, r8, #4
 800de4c:	4623      	mov	r3, r4
 800de4e:	f853 1b04 	ldr.w	r1, [r3], #4
 800de52:	f842 1f04 	str.w	r1, [r2, #4]!
 800de56:	429f      	cmp	r7, r3
 800de58:	d2f9      	bcs.n	800de4e <__hexnan+0xaa>
 800de5a:	1b3b      	subs	r3, r7, r4
 800de5c:	f023 0303 	bic.w	r3, r3, #3
 800de60:	3304      	adds	r3, #4
 800de62:	3401      	adds	r4, #1
 800de64:	3e03      	subs	r6, #3
 800de66:	42b4      	cmp	r4, r6
 800de68:	bf88      	it	hi
 800de6a:	2304      	movhi	r3, #4
 800de6c:	4443      	add	r3, r8
 800de6e:	2200      	movs	r2, #0
 800de70:	f843 2b04 	str.w	r2, [r3], #4
 800de74:	429f      	cmp	r7, r3
 800de76:	d2fb      	bcs.n	800de70 <__hexnan+0xcc>
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	b91b      	cbnz	r3, 800de84 <__hexnan+0xe0>
 800de7c:	4547      	cmp	r7, r8
 800de7e:	d127      	bne.n	800ded0 <__hexnan+0x12c>
 800de80:	2301      	movs	r3, #1
 800de82:	603b      	str	r3, [r7, #0]
 800de84:	2005      	movs	r0, #5
 800de86:	e026      	b.n	800ded6 <__hexnan+0x132>
 800de88:	3501      	adds	r5, #1
 800de8a:	2d08      	cmp	r5, #8
 800de8c:	f10b 0b01 	add.w	fp, fp, #1
 800de90:	dd06      	ble.n	800dea0 <__hexnan+0xfc>
 800de92:	4544      	cmp	r4, r8
 800de94:	d9c3      	bls.n	800de1e <__hexnan+0x7a>
 800de96:	2300      	movs	r3, #0
 800de98:	f844 3c04 	str.w	r3, [r4, #-4]
 800de9c:	2501      	movs	r5, #1
 800de9e:	3c04      	subs	r4, #4
 800dea0:	6822      	ldr	r2, [r4, #0]
 800dea2:	f000 000f 	and.w	r0, r0, #15
 800dea6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800deaa:	6022      	str	r2, [r4, #0]
 800deac:	e7b7      	b.n	800de1e <__hexnan+0x7a>
 800deae:	2508      	movs	r5, #8
 800deb0:	e7b5      	b.n	800de1e <__hexnan+0x7a>
 800deb2:	9b01      	ldr	r3, [sp, #4]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d0df      	beq.n	800de78 <__hexnan+0xd4>
 800deb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800debc:	f1c3 0320 	rsb	r3, r3, #32
 800dec0:	fa22 f303 	lsr.w	r3, r2, r3
 800dec4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dec8:	401a      	ands	r2, r3
 800deca:	f846 2c04 	str.w	r2, [r6, #-4]
 800dece:	e7d3      	b.n	800de78 <__hexnan+0xd4>
 800ded0:	3f04      	subs	r7, #4
 800ded2:	e7d1      	b.n	800de78 <__hexnan+0xd4>
 800ded4:	2004      	movs	r0, #4
 800ded6:	b007      	add	sp, #28
 800ded8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dedc <_localeconv_r>:
 800dedc:	4800      	ldr	r0, [pc, #0]	; (800dee0 <_localeconv_r+0x4>)
 800dede:	4770      	bx	lr
 800dee0:	20000508 	.word	0x20000508

0800dee4 <__ascii_mbtowc>:
 800dee4:	b082      	sub	sp, #8
 800dee6:	b901      	cbnz	r1, 800deea <__ascii_mbtowc+0x6>
 800dee8:	a901      	add	r1, sp, #4
 800deea:	b142      	cbz	r2, 800defe <__ascii_mbtowc+0x1a>
 800deec:	b14b      	cbz	r3, 800df02 <__ascii_mbtowc+0x1e>
 800deee:	7813      	ldrb	r3, [r2, #0]
 800def0:	600b      	str	r3, [r1, #0]
 800def2:	7812      	ldrb	r2, [r2, #0]
 800def4:	1e10      	subs	r0, r2, #0
 800def6:	bf18      	it	ne
 800def8:	2001      	movne	r0, #1
 800defa:	b002      	add	sp, #8
 800defc:	4770      	bx	lr
 800defe:	4610      	mov	r0, r2
 800df00:	e7fb      	b.n	800defa <__ascii_mbtowc+0x16>
 800df02:	f06f 0001 	mvn.w	r0, #1
 800df06:	e7f8      	b.n	800defa <__ascii_mbtowc+0x16>

0800df08 <memcpy>:
 800df08:	440a      	add	r2, r1
 800df0a:	4291      	cmp	r1, r2
 800df0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800df10:	d100      	bne.n	800df14 <memcpy+0xc>
 800df12:	4770      	bx	lr
 800df14:	b510      	push	{r4, lr}
 800df16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df1e:	4291      	cmp	r1, r2
 800df20:	d1f9      	bne.n	800df16 <memcpy+0xe>
 800df22:	bd10      	pop	{r4, pc}

0800df24 <__malloc_lock>:
 800df24:	4801      	ldr	r0, [pc, #4]	; (800df2c <__malloc_lock+0x8>)
 800df26:	f000 be96 	b.w	800ec56 <__retarget_lock_acquire_recursive>
 800df2a:	bf00      	nop
 800df2c:	20002914 	.word	0x20002914

0800df30 <__malloc_unlock>:
 800df30:	4801      	ldr	r0, [pc, #4]	; (800df38 <__malloc_unlock+0x8>)
 800df32:	f000 be91 	b.w	800ec58 <__retarget_lock_release_recursive>
 800df36:	bf00      	nop
 800df38:	20002914 	.word	0x20002914

0800df3c <_Balloc>:
 800df3c:	b570      	push	{r4, r5, r6, lr}
 800df3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800df40:	4604      	mov	r4, r0
 800df42:	460d      	mov	r5, r1
 800df44:	b976      	cbnz	r6, 800df64 <_Balloc+0x28>
 800df46:	2010      	movs	r0, #16
 800df48:	f7fc ff92 	bl	800ae70 <malloc>
 800df4c:	4602      	mov	r2, r0
 800df4e:	6260      	str	r0, [r4, #36]	; 0x24
 800df50:	b920      	cbnz	r0, 800df5c <_Balloc+0x20>
 800df52:	4b18      	ldr	r3, [pc, #96]	; (800dfb4 <_Balloc+0x78>)
 800df54:	4818      	ldr	r0, [pc, #96]	; (800dfb8 <_Balloc+0x7c>)
 800df56:	2166      	movs	r1, #102	; 0x66
 800df58:	f000 fe4c 	bl	800ebf4 <__assert_func>
 800df5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df60:	6006      	str	r6, [r0, #0]
 800df62:	60c6      	str	r6, [r0, #12]
 800df64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800df66:	68f3      	ldr	r3, [r6, #12]
 800df68:	b183      	cbz	r3, 800df8c <_Balloc+0x50>
 800df6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df6c:	68db      	ldr	r3, [r3, #12]
 800df6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df72:	b9b8      	cbnz	r0, 800dfa4 <_Balloc+0x68>
 800df74:	2101      	movs	r1, #1
 800df76:	fa01 f605 	lsl.w	r6, r1, r5
 800df7a:	1d72      	adds	r2, r6, #5
 800df7c:	0092      	lsls	r2, r2, #2
 800df7e:	4620      	mov	r0, r4
 800df80:	f000 fc9d 	bl	800e8be <_calloc_r>
 800df84:	b160      	cbz	r0, 800dfa0 <_Balloc+0x64>
 800df86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df8a:	e00e      	b.n	800dfaa <_Balloc+0x6e>
 800df8c:	2221      	movs	r2, #33	; 0x21
 800df8e:	2104      	movs	r1, #4
 800df90:	4620      	mov	r0, r4
 800df92:	f000 fc94 	bl	800e8be <_calloc_r>
 800df96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df98:	60f0      	str	r0, [r6, #12]
 800df9a:	68db      	ldr	r3, [r3, #12]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d1e4      	bne.n	800df6a <_Balloc+0x2e>
 800dfa0:	2000      	movs	r0, #0
 800dfa2:	bd70      	pop	{r4, r5, r6, pc}
 800dfa4:	6802      	ldr	r2, [r0, #0]
 800dfa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dfaa:	2300      	movs	r3, #0
 800dfac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dfb0:	e7f7      	b.n	800dfa2 <_Balloc+0x66>
 800dfb2:	bf00      	nop
 800dfb4:	080105ee 	.word	0x080105ee
 800dfb8:	080106ec 	.word	0x080106ec

0800dfbc <_Bfree>:
 800dfbc:	b570      	push	{r4, r5, r6, lr}
 800dfbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dfc0:	4605      	mov	r5, r0
 800dfc2:	460c      	mov	r4, r1
 800dfc4:	b976      	cbnz	r6, 800dfe4 <_Bfree+0x28>
 800dfc6:	2010      	movs	r0, #16
 800dfc8:	f7fc ff52 	bl	800ae70 <malloc>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	6268      	str	r0, [r5, #36]	; 0x24
 800dfd0:	b920      	cbnz	r0, 800dfdc <_Bfree+0x20>
 800dfd2:	4b09      	ldr	r3, [pc, #36]	; (800dff8 <_Bfree+0x3c>)
 800dfd4:	4809      	ldr	r0, [pc, #36]	; (800dffc <_Bfree+0x40>)
 800dfd6:	218a      	movs	r1, #138	; 0x8a
 800dfd8:	f000 fe0c 	bl	800ebf4 <__assert_func>
 800dfdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfe0:	6006      	str	r6, [r0, #0]
 800dfe2:	60c6      	str	r6, [r0, #12]
 800dfe4:	b13c      	cbz	r4, 800dff6 <_Bfree+0x3a>
 800dfe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dfe8:	6862      	ldr	r2, [r4, #4]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dff0:	6021      	str	r1, [r4, #0]
 800dff2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dff6:	bd70      	pop	{r4, r5, r6, pc}
 800dff8:	080105ee 	.word	0x080105ee
 800dffc:	080106ec 	.word	0x080106ec

0800e000 <__multadd>:
 800e000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e004:	690d      	ldr	r5, [r1, #16]
 800e006:	4607      	mov	r7, r0
 800e008:	460c      	mov	r4, r1
 800e00a:	461e      	mov	r6, r3
 800e00c:	f101 0c14 	add.w	ip, r1, #20
 800e010:	2000      	movs	r0, #0
 800e012:	f8dc 3000 	ldr.w	r3, [ip]
 800e016:	b299      	uxth	r1, r3
 800e018:	fb02 6101 	mla	r1, r2, r1, r6
 800e01c:	0c1e      	lsrs	r6, r3, #16
 800e01e:	0c0b      	lsrs	r3, r1, #16
 800e020:	fb02 3306 	mla	r3, r2, r6, r3
 800e024:	b289      	uxth	r1, r1
 800e026:	3001      	adds	r0, #1
 800e028:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e02c:	4285      	cmp	r5, r0
 800e02e:	f84c 1b04 	str.w	r1, [ip], #4
 800e032:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e036:	dcec      	bgt.n	800e012 <__multadd+0x12>
 800e038:	b30e      	cbz	r6, 800e07e <__multadd+0x7e>
 800e03a:	68a3      	ldr	r3, [r4, #8]
 800e03c:	42ab      	cmp	r3, r5
 800e03e:	dc19      	bgt.n	800e074 <__multadd+0x74>
 800e040:	6861      	ldr	r1, [r4, #4]
 800e042:	4638      	mov	r0, r7
 800e044:	3101      	adds	r1, #1
 800e046:	f7ff ff79 	bl	800df3c <_Balloc>
 800e04a:	4680      	mov	r8, r0
 800e04c:	b928      	cbnz	r0, 800e05a <__multadd+0x5a>
 800e04e:	4602      	mov	r2, r0
 800e050:	4b0c      	ldr	r3, [pc, #48]	; (800e084 <__multadd+0x84>)
 800e052:	480d      	ldr	r0, [pc, #52]	; (800e088 <__multadd+0x88>)
 800e054:	21b5      	movs	r1, #181	; 0xb5
 800e056:	f000 fdcd 	bl	800ebf4 <__assert_func>
 800e05a:	6922      	ldr	r2, [r4, #16]
 800e05c:	3202      	adds	r2, #2
 800e05e:	f104 010c 	add.w	r1, r4, #12
 800e062:	0092      	lsls	r2, r2, #2
 800e064:	300c      	adds	r0, #12
 800e066:	f7ff ff4f 	bl	800df08 <memcpy>
 800e06a:	4621      	mov	r1, r4
 800e06c:	4638      	mov	r0, r7
 800e06e:	f7ff ffa5 	bl	800dfbc <_Bfree>
 800e072:	4644      	mov	r4, r8
 800e074:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e078:	3501      	adds	r5, #1
 800e07a:	615e      	str	r6, [r3, #20]
 800e07c:	6125      	str	r5, [r4, #16]
 800e07e:	4620      	mov	r0, r4
 800e080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e084:	08010660 	.word	0x08010660
 800e088:	080106ec 	.word	0x080106ec

0800e08c <__s2b>:
 800e08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e090:	460c      	mov	r4, r1
 800e092:	4615      	mov	r5, r2
 800e094:	461f      	mov	r7, r3
 800e096:	2209      	movs	r2, #9
 800e098:	3308      	adds	r3, #8
 800e09a:	4606      	mov	r6, r0
 800e09c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e0a0:	2100      	movs	r1, #0
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	db09      	blt.n	800e0bc <__s2b+0x30>
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	f7ff ff47 	bl	800df3c <_Balloc>
 800e0ae:	b940      	cbnz	r0, 800e0c2 <__s2b+0x36>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	4b19      	ldr	r3, [pc, #100]	; (800e118 <__s2b+0x8c>)
 800e0b4:	4819      	ldr	r0, [pc, #100]	; (800e11c <__s2b+0x90>)
 800e0b6:	21ce      	movs	r1, #206	; 0xce
 800e0b8:	f000 fd9c 	bl	800ebf4 <__assert_func>
 800e0bc:	0052      	lsls	r2, r2, #1
 800e0be:	3101      	adds	r1, #1
 800e0c0:	e7f0      	b.n	800e0a4 <__s2b+0x18>
 800e0c2:	9b08      	ldr	r3, [sp, #32]
 800e0c4:	6143      	str	r3, [r0, #20]
 800e0c6:	2d09      	cmp	r5, #9
 800e0c8:	f04f 0301 	mov.w	r3, #1
 800e0cc:	6103      	str	r3, [r0, #16]
 800e0ce:	dd16      	ble.n	800e0fe <__s2b+0x72>
 800e0d0:	f104 0909 	add.w	r9, r4, #9
 800e0d4:	46c8      	mov	r8, r9
 800e0d6:	442c      	add	r4, r5
 800e0d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e0dc:	4601      	mov	r1, r0
 800e0de:	3b30      	subs	r3, #48	; 0x30
 800e0e0:	220a      	movs	r2, #10
 800e0e2:	4630      	mov	r0, r6
 800e0e4:	f7ff ff8c 	bl	800e000 <__multadd>
 800e0e8:	45a0      	cmp	r8, r4
 800e0ea:	d1f5      	bne.n	800e0d8 <__s2b+0x4c>
 800e0ec:	f1a5 0408 	sub.w	r4, r5, #8
 800e0f0:	444c      	add	r4, r9
 800e0f2:	1b2d      	subs	r5, r5, r4
 800e0f4:	1963      	adds	r3, r4, r5
 800e0f6:	42bb      	cmp	r3, r7
 800e0f8:	db04      	blt.n	800e104 <__s2b+0x78>
 800e0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0fe:	340a      	adds	r4, #10
 800e100:	2509      	movs	r5, #9
 800e102:	e7f6      	b.n	800e0f2 <__s2b+0x66>
 800e104:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e108:	4601      	mov	r1, r0
 800e10a:	3b30      	subs	r3, #48	; 0x30
 800e10c:	220a      	movs	r2, #10
 800e10e:	4630      	mov	r0, r6
 800e110:	f7ff ff76 	bl	800e000 <__multadd>
 800e114:	e7ee      	b.n	800e0f4 <__s2b+0x68>
 800e116:	bf00      	nop
 800e118:	08010660 	.word	0x08010660
 800e11c:	080106ec 	.word	0x080106ec

0800e120 <__hi0bits>:
 800e120:	0c03      	lsrs	r3, r0, #16
 800e122:	041b      	lsls	r3, r3, #16
 800e124:	b9d3      	cbnz	r3, 800e15c <__hi0bits+0x3c>
 800e126:	0400      	lsls	r0, r0, #16
 800e128:	2310      	movs	r3, #16
 800e12a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e12e:	bf04      	itt	eq
 800e130:	0200      	lsleq	r0, r0, #8
 800e132:	3308      	addeq	r3, #8
 800e134:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e138:	bf04      	itt	eq
 800e13a:	0100      	lsleq	r0, r0, #4
 800e13c:	3304      	addeq	r3, #4
 800e13e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e142:	bf04      	itt	eq
 800e144:	0080      	lsleq	r0, r0, #2
 800e146:	3302      	addeq	r3, #2
 800e148:	2800      	cmp	r0, #0
 800e14a:	db05      	blt.n	800e158 <__hi0bits+0x38>
 800e14c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e150:	f103 0301 	add.w	r3, r3, #1
 800e154:	bf08      	it	eq
 800e156:	2320      	moveq	r3, #32
 800e158:	4618      	mov	r0, r3
 800e15a:	4770      	bx	lr
 800e15c:	2300      	movs	r3, #0
 800e15e:	e7e4      	b.n	800e12a <__hi0bits+0xa>

0800e160 <__lo0bits>:
 800e160:	6803      	ldr	r3, [r0, #0]
 800e162:	f013 0207 	ands.w	r2, r3, #7
 800e166:	4601      	mov	r1, r0
 800e168:	d00b      	beq.n	800e182 <__lo0bits+0x22>
 800e16a:	07da      	lsls	r2, r3, #31
 800e16c:	d423      	bmi.n	800e1b6 <__lo0bits+0x56>
 800e16e:	0798      	lsls	r0, r3, #30
 800e170:	bf49      	itett	mi
 800e172:	085b      	lsrmi	r3, r3, #1
 800e174:	089b      	lsrpl	r3, r3, #2
 800e176:	2001      	movmi	r0, #1
 800e178:	600b      	strmi	r3, [r1, #0]
 800e17a:	bf5c      	itt	pl
 800e17c:	600b      	strpl	r3, [r1, #0]
 800e17e:	2002      	movpl	r0, #2
 800e180:	4770      	bx	lr
 800e182:	b298      	uxth	r0, r3
 800e184:	b9a8      	cbnz	r0, 800e1b2 <__lo0bits+0x52>
 800e186:	0c1b      	lsrs	r3, r3, #16
 800e188:	2010      	movs	r0, #16
 800e18a:	b2da      	uxtb	r2, r3
 800e18c:	b90a      	cbnz	r2, 800e192 <__lo0bits+0x32>
 800e18e:	3008      	adds	r0, #8
 800e190:	0a1b      	lsrs	r3, r3, #8
 800e192:	071a      	lsls	r2, r3, #28
 800e194:	bf04      	itt	eq
 800e196:	091b      	lsreq	r3, r3, #4
 800e198:	3004      	addeq	r0, #4
 800e19a:	079a      	lsls	r2, r3, #30
 800e19c:	bf04      	itt	eq
 800e19e:	089b      	lsreq	r3, r3, #2
 800e1a0:	3002      	addeq	r0, #2
 800e1a2:	07da      	lsls	r2, r3, #31
 800e1a4:	d403      	bmi.n	800e1ae <__lo0bits+0x4e>
 800e1a6:	085b      	lsrs	r3, r3, #1
 800e1a8:	f100 0001 	add.w	r0, r0, #1
 800e1ac:	d005      	beq.n	800e1ba <__lo0bits+0x5a>
 800e1ae:	600b      	str	r3, [r1, #0]
 800e1b0:	4770      	bx	lr
 800e1b2:	4610      	mov	r0, r2
 800e1b4:	e7e9      	b.n	800e18a <__lo0bits+0x2a>
 800e1b6:	2000      	movs	r0, #0
 800e1b8:	4770      	bx	lr
 800e1ba:	2020      	movs	r0, #32
 800e1bc:	4770      	bx	lr
	...

0800e1c0 <__i2b>:
 800e1c0:	b510      	push	{r4, lr}
 800e1c2:	460c      	mov	r4, r1
 800e1c4:	2101      	movs	r1, #1
 800e1c6:	f7ff feb9 	bl	800df3c <_Balloc>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	b928      	cbnz	r0, 800e1da <__i2b+0x1a>
 800e1ce:	4b05      	ldr	r3, [pc, #20]	; (800e1e4 <__i2b+0x24>)
 800e1d0:	4805      	ldr	r0, [pc, #20]	; (800e1e8 <__i2b+0x28>)
 800e1d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e1d6:	f000 fd0d 	bl	800ebf4 <__assert_func>
 800e1da:	2301      	movs	r3, #1
 800e1dc:	6144      	str	r4, [r0, #20]
 800e1de:	6103      	str	r3, [r0, #16]
 800e1e0:	bd10      	pop	{r4, pc}
 800e1e2:	bf00      	nop
 800e1e4:	08010660 	.word	0x08010660
 800e1e8:	080106ec 	.word	0x080106ec

0800e1ec <__multiply>:
 800e1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f0:	4691      	mov	r9, r2
 800e1f2:	690a      	ldr	r2, [r1, #16]
 800e1f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	bfb8      	it	lt
 800e1fc:	460b      	movlt	r3, r1
 800e1fe:	460c      	mov	r4, r1
 800e200:	bfbc      	itt	lt
 800e202:	464c      	movlt	r4, r9
 800e204:	4699      	movlt	r9, r3
 800e206:	6927      	ldr	r7, [r4, #16]
 800e208:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e20c:	68a3      	ldr	r3, [r4, #8]
 800e20e:	6861      	ldr	r1, [r4, #4]
 800e210:	eb07 060a 	add.w	r6, r7, sl
 800e214:	42b3      	cmp	r3, r6
 800e216:	b085      	sub	sp, #20
 800e218:	bfb8      	it	lt
 800e21a:	3101      	addlt	r1, #1
 800e21c:	f7ff fe8e 	bl	800df3c <_Balloc>
 800e220:	b930      	cbnz	r0, 800e230 <__multiply+0x44>
 800e222:	4602      	mov	r2, r0
 800e224:	4b44      	ldr	r3, [pc, #272]	; (800e338 <__multiply+0x14c>)
 800e226:	4845      	ldr	r0, [pc, #276]	; (800e33c <__multiply+0x150>)
 800e228:	f240 115d 	movw	r1, #349	; 0x15d
 800e22c:	f000 fce2 	bl	800ebf4 <__assert_func>
 800e230:	f100 0514 	add.w	r5, r0, #20
 800e234:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e238:	462b      	mov	r3, r5
 800e23a:	2200      	movs	r2, #0
 800e23c:	4543      	cmp	r3, r8
 800e23e:	d321      	bcc.n	800e284 <__multiply+0x98>
 800e240:	f104 0314 	add.w	r3, r4, #20
 800e244:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e248:	f109 0314 	add.w	r3, r9, #20
 800e24c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e250:	9202      	str	r2, [sp, #8]
 800e252:	1b3a      	subs	r2, r7, r4
 800e254:	3a15      	subs	r2, #21
 800e256:	f022 0203 	bic.w	r2, r2, #3
 800e25a:	3204      	adds	r2, #4
 800e25c:	f104 0115 	add.w	r1, r4, #21
 800e260:	428f      	cmp	r7, r1
 800e262:	bf38      	it	cc
 800e264:	2204      	movcc	r2, #4
 800e266:	9201      	str	r2, [sp, #4]
 800e268:	9a02      	ldr	r2, [sp, #8]
 800e26a:	9303      	str	r3, [sp, #12]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d80c      	bhi.n	800e28a <__multiply+0x9e>
 800e270:	2e00      	cmp	r6, #0
 800e272:	dd03      	ble.n	800e27c <__multiply+0x90>
 800e274:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d05a      	beq.n	800e332 <__multiply+0x146>
 800e27c:	6106      	str	r6, [r0, #16]
 800e27e:	b005      	add	sp, #20
 800e280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e284:	f843 2b04 	str.w	r2, [r3], #4
 800e288:	e7d8      	b.n	800e23c <__multiply+0x50>
 800e28a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e28e:	f1ba 0f00 	cmp.w	sl, #0
 800e292:	d024      	beq.n	800e2de <__multiply+0xf2>
 800e294:	f104 0e14 	add.w	lr, r4, #20
 800e298:	46a9      	mov	r9, r5
 800e29a:	f04f 0c00 	mov.w	ip, #0
 800e29e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e2a2:	f8d9 1000 	ldr.w	r1, [r9]
 800e2a6:	fa1f fb82 	uxth.w	fp, r2
 800e2aa:	b289      	uxth	r1, r1
 800e2ac:	fb0a 110b 	mla	r1, sl, fp, r1
 800e2b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e2b4:	f8d9 2000 	ldr.w	r2, [r9]
 800e2b8:	4461      	add	r1, ip
 800e2ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e2be:	fb0a c20b 	mla	r2, sl, fp, ip
 800e2c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e2c6:	b289      	uxth	r1, r1
 800e2c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e2cc:	4577      	cmp	r7, lr
 800e2ce:	f849 1b04 	str.w	r1, [r9], #4
 800e2d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e2d6:	d8e2      	bhi.n	800e29e <__multiply+0xb2>
 800e2d8:	9a01      	ldr	r2, [sp, #4]
 800e2da:	f845 c002 	str.w	ip, [r5, r2]
 800e2de:	9a03      	ldr	r2, [sp, #12]
 800e2e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e2e4:	3304      	adds	r3, #4
 800e2e6:	f1b9 0f00 	cmp.w	r9, #0
 800e2ea:	d020      	beq.n	800e32e <__multiply+0x142>
 800e2ec:	6829      	ldr	r1, [r5, #0]
 800e2ee:	f104 0c14 	add.w	ip, r4, #20
 800e2f2:	46ae      	mov	lr, r5
 800e2f4:	f04f 0a00 	mov.w	sl, #0
 800e2f8:	f8bc b000 	ldrh.w	fp, [ip]
 800e2fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e300:	fb09 220b 	mla	r2, r9, fp, r2
 800e304:	4492      	add	sl, r2
 800e306:	b289      	uxth	r1, r1
 800e308:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e30c:	f84e 1b04 	str.w	r1, [lr], #4
 800e310:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e314:	f8be 1000 	ldrh.w	r1, [lr]
 800e318:	0c12      	lsrs	r2, r2, #16
 800e31a:	fb09 1102 	mla	r1, r9, r2, r1
 800e31e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e322:	4567      	cmp	r7, ip
 800e324:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e328:	d8e6      	bhi.n	800e2f8 <__multiply+0x10c>
 800e32a:	9a01      	ldr	r2, [sp, #4]
 800e32c:	50a9      	str	r1, [r5, r2]
 800e32e:	3504      	adds	r5, #4
 800e330:	e79a      	b.n	800e268 <__multiply+0x7c>
 800e332:	3e01      	subs	r6, #1
 800e334:	e79c      	b.n	800e270 <__multiply+0x84>
 800e336:	bf00      	nop
 800e338:	08010660 	.word	0x08010660
 800e33c:	080106ec 	.word	0x080106ec

0800e340 <__pow5mult>:
 800e340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e344:	4615      	mov	r5, r2
 800e346:	f012 0203 	ands.w	r2, r2, #3
 800e34a:	4606      	mov	r6, r0
 800e34c:	460f      	mov	r7, r1
 800e34e:	d007      	beq.n	800e360 <__pow5mult+0x20>
 800e350:	4c25      	ldr	r4, [pc, #148]	; (800e3e8 <__pow5mult+0xa8>)
 800e352:	3a01      	subs	r2, #1
 800e354:	2300      	movs	r3, #0
 800e356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e35a:	f7ff fe51 	bl	800e000 <__multadd>
 800e35e:	4607      	mov	r7, r0
 800e360:	10ad      	asrs	r5, r5, #2
 800e362:	d03d      	beq.n	800e3e0 <__pow5mult+0xa0>
 800e364:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e366:	b97c      	cbnz	r4, 800e388 <__pow5mult+0x48>
 800e368:	2010      	movs	r0, #16
 800e36a:	f7fc fd81 	bl	800ae70 <malloc>
 800e36e:	4602      	mov	r2, r0
 800e370:	6270      	str	r0, [r6, #36]	; 0x24
 800e372:	b928      	cbnz	r0, 800e380 <__pow5mult+0x40>
 800e374:	4b1d      	ldr	r3, [pc, #116]	; (800e3ec <__pow5mult+0xac>)
 800e376:	481e      	ldr	r0, [pc, #120]	; (800e3f0 <__pow5mult+0xb0>)
 800e378:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e37c:	f000 fc3a 	bl	800ebf4 <__assert_func>
 800e380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e384:	6004      	str	r4, [r0, #0]
 800e386:	60c4      	str	r4, [r0, #12]
 800e388:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e38c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e390:	b94c      	cbnz	r4, 800e3a6 <__pow5mult+0x66>
 800e392:	f240 2171 	movw	r1, #625	; 0x271
 800e396:	4630      	mov	r0, r6
 800e398:	f7ff ff12 	bl	800e1c0 <__i2b>
 800e39c:	2300      	movs	r3, #0
 800e39e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e3a2:	4604      	mov	r4, r0
 800e3a4:	6003      	str	r3, [r0, #0]
 800e3a6:	f04f 0900 	mov.w	r9, #0
 800e3aa:	07eb      	lsls	r3, r5, #31
 800e3ac:	d50a      	bpl.n	800e3c4 <__pow5mult+0x84>
 800e3ae:	4639      	mov	r1, r7
 800e3b0:	4622      	mov	r2, r4
 800e3b2:	4630      	mov	r0, r6
 800e3b4:	f7ff ff1a 	bl	800e1ec <__multiply>
 800e3b8:	4639      	mov	r1, r7
 800e3ba:	4680      	mov	r8, r0
 800e3bc:	4630      	mov	r0, r6
 800e3be:	f7ff fdfd 	bl	800dfbc <_Bfree>
 800e3c2:	4647      	mov	r7, r8
 800e3c4:	106d      	asrs	r5, r5, #1
 800e3c6:	d00b      	beq.n	800e3e0 <__pow5mult+0xa0>
 800e3c8:	6820      	ldr	r0, [r4, #0]
 800e3ca:	b938      	cbnz	r0, 800e3dc <__pow5mult+0x9c>
 800e3cc:	4622      	mov	r2, r4
 800e3ce:	4621      	mov	r1, r4
 800e3d0:	4630      	mov	r0, r6
 800e3d2:	f7ff ff0b 	bl	800e1ec <__multiply>
 800e3d6:	6020      	str	r0, [r4, #0]
 800e3d8:	f8c0 9000 	str.w	r9, [r0]
 800e3dc:	4604      	mov	r4, r0
 800e3de:	e7e4      	b.n	800e3aa <__pow5mult+0x6a>
 800e3e0:	4638      	mov	r0, r7
 800e3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3e6:	bf00      	nop
 800e3e8:	08010838 	.word	0x08010838
 800e3ec:	080105ee 	.word	0x080105ee
 800e3f0:	080106ec 	.word	0x080106ec

0800e3f4 <__lshift>:
 800e3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3f8:	460c      	mov	r4, r1
 800e3fa:	6849      	ldr	r1, [r1, #4]
 800e3fc:	6923      	ldr	r3, [r4, #16]
 800e3fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e402:	68a3      	ldr	r3, [r4, #8]
 800e404:	4607      	mov	r7, r0
 800e406:	4691      	mov	r9, r2
 800e408:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e40c:	f108 0601 	add.w	r6, r8, #1
 800e410:	42b3      	cmp	r3, r6
 800e412:	db0b      	blt.n	800e42c <__lshift+0x38>
 800e414:	4638      	mov	r0, r7
 800e416:	f7ff fd91 	bl	800df3c <_Balloc>
 800e41a:	4605      	mov	r5, r0
 800e41c:	b948      	cbnz	r0, 800e432 <__lshift+0x3e>
 800e41e:	4602      	mov	r2, r0
 800e420:	4b2a      	ldr	r3, [pc, #168]	; (800e4cc <__lshift+0xd8>)
 800e422:	482b      	ldr	r0, [pc, #172]	; (800e4d0 <__lshift+0xdc>)
 800e424:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e428:	f000 fbe4 	bl	800ebf4 <__assert_func>
 800e42c:	3101      	adds	r1, #1
 800e42e:	005b      	lsls	r3, r3, #1
 800e430:	e7ee      	b.n	800e410 <__lshift+0x1c>
 800e432:	2300      	movs	r3, #0
 800e434:	f100 0114 	add.w	r1, r0, #20
 800e438:	f100 0210 	add.w	r2, r0, #16
 800e43c:	4618      	mov	r0, r3
 800e43e:	4553      	cmp	r3, sl
 800e440:	db37      	blt.n	800e4b2 <__lshift+0xbe>
 800e442:	6920      	ldr	r0, [r4, #16]
 800e444:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e448:	f104 0314 	add.w	r3, r4, #20
 800e44c:	f019 091f 	ands.w	r9, r9, #31
 800e450:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e454:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e458:	d02f      	beq.n	800e4ba <__lshift+0xc6>
 800e45a:	f1c9 0e20 	rsb	lr, r9, #32
 800e45e:	468a      	mov	sl, r1
 800e460:	f04f 0c00 	mov.w	ip, #0
 800e464:	681a      	ldr	r2, [r3, #0]
 800e466:	fa02 f209 	lsl.w	r2, r2, r9
 800e46a:	ea42 020c 	orr.w	r2, r2, ip
 800e46e:	f84a 2b04 	str.w	r2, [sl], #4
 800e472:	f853 2b04 	ldr.w	r2, [r3], #4
 800e476:	4298      	cmp	r0, r3
 800e478:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e47c:	d8f2      	bhi.n	800e464 <__lshift+0x70>
 800e47e:	1b03      	subs	r3, r0, r4
 800e480:	3b15      	subs	r3, #21
 800e482:	f023 0303 	bic.w	r3, r3, #3
 800e486:	3304      	adds	r3, #4
 800e488:	f104 0215 	add.w	r2, r4, #21
 800e48c:	4290      	cmp	r0, r2
 800e48e:	bf38      	it	cc
 800e490:	2304      	movcc	r3, #4
 800e492:	f841 c003 	str.w	ip, [r1, r3]
 800e496:	f1bc 0f00 	cmp.w	ip, #0
 800e49a:	d001      	beq.n	800e4a0 <__lshift+0xac>
 800e49c:	f108 0602 	add.w	r6, r8, #2
 800e4a0:	3e01      	subs	r6, #1
 800e4a2:	4638      	mov	r0, r7
 800e4a4:	612e      	str	r6, [r5, #16]
 800e4a6:	4621      	mov	r1, r4
 800e4a8:	f7ff fd88 	bl	800dfbc <_Bfree>
 800e4ac:	4628      	mov	r0, r5
 800e4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	e7c1      	b.n	800e43e <__lshift+0x4a>
 800e4ba:	3904      	subs	r1, #4
 800e4bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e4c4:	4298      	cmp	r0, r3
 800e4c6:	d8f9      	bhi.n	800e4bc <__lshift+0xc8>
 800e4c8:	e7ea      	b.n	800e4a0 <__lshift+0xac>
 800e4ca:	bf00      	nop
 800e4cc:	08010660 	.word	0x08010660
 800e4d0:	080106ec 	.word	0x080106ec

0800e4d4 <__mcmp>:
 800e4d4:	b530      	push	{r4, r5, lr}
 800e4d6:	6902      	ldr	r2, [r0, #16]
 800e4d8:	690c      	ldr	r4, [r1, #16]
 800e4da:	1b12      	subs	r2, r2, r4
 800e4dc:	d10e      	bne.n	800e4fc <__mcmp+0x28>
 800e4de:	f100 0314 	add.w	r3, r0, #20
 800e4e2:	3114      	adds	r1, #20
 800e4e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e4e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e4ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e4f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e4f4:	42a5      	cmp	r5, r4
 800e4f6:	d003      	beq.n	800e500 <__mcmp+0x2c>
 800e4f8:	d305      	bcc.n	800e506 <__mcmp+0x32>
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	4610      	mov	r0, r2
 800e4fe:	bd30      	pop	{r4, r5, pc}
 800e500:	4283      	cmp	r3, r0
 800e502:	d3f3      	bcc.n	800e4ec <__mcmp+0x18>
 800e504:	e7fa      	b.n	800e4fc <__mcmp+0x28>
 800e506:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e50a:	e7f7      	b.n	800e4fc <__mcmp+0x28>

0800e50c <__mdiff>:
 800e50c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e510:	460c      	mov	r4, r1
 800e512:	4606      	mov	r6, r0
 800e514:	4611      	mov	r1, r2
 800e516:	4620      	mov	r0, r4
 800e518:	4690      	mov	r8, r2
 800e51a:	f7ff ffdb 	bl	800e4d4 <__mcmp>
 800e51e:	1e05      	subs	r5, r0, #0
 800e520:	d110      	bne.n	800e544 <__mdiff+0x38>
 800e522:	4629      	mov	r1, r5
 800e524:	4630      	mov	r0, r6
 800e526:	f7ff fd09 	bl	800df3c <_Balloc>
 800e52a:	b930      	cbnz	r0, 800e53a <__mdiff+0x2e>
 800e52c:	4b3a      	ldr	r3, [pc, #232]	; (800e618 <__mdiff+0x10c>)
 800e52e:	4602      	mov	r2, r0
 800e530:	f240 2132 	movw	r1, #562	; 0x232
 800e534:	4839      	ldr	r0, [pc, #228]	; (800e61c <__mdiff+0x110>)
 800e536:	f000 fb5d 	bl	800ebf4 <__assert_func>
 800e53a:	2301      	movs	r3, #1
 800e53c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e544:	bfa4      	itt	ge
 800e546:	4643      	movge	r3, r8
 800e548:	46a0      	movge	r8, r4
 800e54a:	4630      	mov	r0, r6
 800e54c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e550:	bfa6      	itte	ge
 800e552:	461c      	movge	r4, r3
 800e554:	2500      	movge	r5, #0
 800e556:	2501      	movlt	r5, #1
 800e558:	f7ff fcf0 	bl	800df3c <_Balloc>
 800e55c:	b920      	cbnz	r0, 800e568 <__mdiff+0x5c>
 800e55e:	4b2e      	ldr	r3, [pc, #184]	; (800e618 <__mdiff+0x10c>)
 800e560:	4602      	mov	r2, r0
 800e562:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e566:	e7e5      	b.n	800e534 <__mdiff+0x28>
 800e568:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e56c:	6926      	ldr	r6, [r4, #16]
 800e56e:	60c5      	str	r5, [r0, #12]
 800e570:	f104 0914 	add.w	r9, r4, #20
 800e574:	f108 0514 	add.w	r5, r8, #20
 800e578:	f100 0e14 	add.w	lr, r0, #20
 800e57c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e580:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e584:	f108 0210 	add.w	r2, r8, #16
 800e588:	46f2      	mov	sl, lr
 800e58a:	2100      	movs	r1, #0
 800e58c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e590:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e594:	fa1f f883 	uxth.w	r8, r3
 800e598:	fa11 f18b 	uxtah	r1, r1, fp
 800e59c:	0c1b      	lsrs	r3, r3, #16
 800e59e:	eba1 0808 	sub.w	r8, r1, r8
 800e5a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e5a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e5aa:	fa1f f888 	uxth.w	r8, r8
 800e5ae:	1419      	asrs	r1, r3, #16
 800e5b0:	454e      	cmp	r6, r9
 800e5b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e5b6:	f84a 3b04 	str.w	r3, [sl], #4
 800e5ba:	d8e7      	bhi.n	800e58c <__mdiff+0x80>
 800e5bc:	1b33      	subs	r3, r6, r4
 800e5be:	3b15      	subs	r3, #21
 800e5c0:	f023 0303 	bic.w	r3, r3, #3
 800e5c4:	3304      	adds	r3, #4
 800e5c6:	3415      	adds	r4, #21
 800e5c8:	42a6      	cmp	r6, r4
 800e5ca:	bf38      	it	cc
 800e5cc:	2304      	movcc	r3, #4
 800e5ce:	441d      	add	r5, r3
 800e5d0:	4473      	add	r3, lr
 800e5d2:	469e      	mov	lr, r3
 800e5d4:	462e      	mov	r6, r5
 800e5d6:	4566      	cmp	r6, ip
 800e5d8:	d30e      	bcc.n	800e5f8 <__mdiff+0xec>
 800e5da:	f10c 0203 	add.w	r2, ip, #3
 800e5de:	1b52      	subs	r2, r2, r5
 800e5e0:	f022 0203 	bic.w	r2, r2, #3
 800e5e4:	3d03      	subs	r5, #3
 800e5e6:	45ac      	cmp	ip, r5
 800e5e8:	bf38      	it	cc
 800e5ea:	2200      	movcc	r2, #0
 800e5ec:	441a      	add	r2, r3
 800e5ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e5f2:	b17b      	cbz	r3, 800e614 <__mdiff+0x108>
 800e5f4:	6107      	str	r7, [r0, #16]
 800e5f6:	e7a3      	b.n	800e540 <__mdiff+0x34>
 800e5f8:	f856 8b04 	ldr.w	r8, [r6], #4
 800e5fc:	fa11 f288 	uxtah	r2, r1, r8
 800e600:	1414      	asrs	r4, r2, #16
 800e602:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e606:	b292      	uxth	r2, r2
 800e608:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e60c:	f84e 2b04 	str.w	r2, [lr], #4
 800e610:	1421      	asrs	r1, r4, #16
 800e612:	e7e0      	b.n	800e5d6 <__mdiff+0xca>
 800e614:	3f01      	subs	r7, #1
 800e616:	e7ea      	b.n	800e5ee <__mdiff+0xe2>
 800e618:	08010660 	.word	0x08010660
 800e61c:	080106ec 	.word	0x080106ec

0800e620 <__ulp>:
 800e620:	b082      	sub	sp, #8
 800e622:	ed8d 0b00 	vstr	d0, [sp]
 800e626:	9b01      	ldr	r3, [sp, #4]
 800e628:	4912      	ldr	r1, [pc, #72]	; (800e674 <__ulp+0x54>)
 800e62a:	4019      	ands	r1, r3
 800e62c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e630:	2900      	cmp	r1, #0
 800e632:	dd05      	ble.n	800e640 <__ulp+0x20>
 800e634:	2200      	movs	r2, #0
 800e636:	460b      	mov	r3, r1
 800e638:	ec43 2b10 	vmov	d0, r2, r3
 800e63c:	b002      	add	sp, #8
 800e63e:	4770      	bx	lr
 800e640:	4249      	negs	r1, r1
 800e642:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e646:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e64a:	f04f 0200 	mov.w	r2, #0
 800e64e:	f04f 0300 	mov.w	r3, #0
 800e652:	da04      	bge.n	800e65e <__ulp+0x3e>
 800e654:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e658:	fa41 f300 	asr.w	r3, r1, r0
 800e65c:	e7ec      	b.n	800e638 <__ulp+0x18>
 800e65e:	f1a0 0114 	sub.w	r1, r0, #20
 800e662:	291e      	cmp	r1, #30
 800e664:	bfda      	itte	le
 800e666:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e66a:	fa20 f101 	lsrle.w	r1, r0, r1
 800e66e:	2101      	movgt	r1, #1
 800e670:	460a      	mov	r2, r1
 800e672:	e7e1      	b.n	800e638 <__ulp+0x18>
 800e674:	7ff00000 	.word	0x7ff00000

0800e678 <__b2d>:
 800e678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e67a:	6905      	ldr	r5, [r0, #16]
 800e67c:	f100 0714 	add.w	r7, r0, #20
 800e680:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e684:	1f2e      	subs	r6, r5, #4
 800e686:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e68a:	4620      	mov	r0, r4
 800e68c:	f7ff fd48 	bl	800e120 <__hi0bits>
 800e690:	f1c0 0320 	rsb	r3, r0, #32
 800e694:	280a      	cmp	r0, #10
 800e696:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e714 <__b2d+0x9c>
 800e69a:	600b      	str	r3, [r1, #0]
 800e69c:	dc14      	bgt.n	800e6c8 <__b2d+0x50>
 800e69e:	f1c0 0e0b 	rsb	lr, r0, #11
 800e6a2:	fa24 f10e 	lsr.w	r1, r4, lr
 800e6a6:	42b7      	cmp	r7, r6
 800e6a8:	ea41 030c 	orr.w	r3, r1, ip
 800e6ac:	bf34      	ite	cc
 800e6ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e6b2:	2100      	movcs	r1, #0
 800e6b4:	3015      	adds	r0, #21
 800e6b6:	fa04 f000 	lsl.w	r0, r4, r0
 800e6ba:	fa21 f10e 	lsr.w	r1, r1, lr
 800e6be:	ea40 0201 	orr.w	r2, r0, r1
 800e6c2:	ec43 2b10 	vmov	d0, r2, r3
 800e6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6c8:	42b7      	cmp	r7, r6
 800e6ca:	bf3a      	itte	cc
 800e6cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e6d0:	f1a5 0608 	subcc.w	r6, r5, #8
 800e6d4:	2100      	movcs	r1, #0
 800e6d6:	380b      	subs	r0, #11
 800e6d8:	d017      	beq.n	800e70a <__b2d+0x92>
 800e6da:	f1c0 0c20 	rsb	ip, r0, #32
 800e6de:	fa04 f500 	lsl.w	r5, r4, r0
 800e6e2:	42be      	cmp	r6, r7
 800e6e4:	fa21 f40c 	lsr.w	r4, r1, ip
 800e6e8:	ea45 0504 	orr.w	r5, r5, r4
 800e6ec:	bf8c      	ite	hi
 800e6ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e6f2:	2400      	movls	r4, #0
 800e6f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e6f8:	fa01 f000 	lsl.w	r0, r1, r0
 800e6fc:	fa24 f40c 	lsr.w	r4, r4, ip
 800e700:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e704:	ea40 0204 	orr.w	r2, r0, r4
 800e708:	e7db      	b.n	800e6c2 <__b2d+0x4a>
 800e70a:	ea44 030c 	orr.w	r3, r4, ip
 800e70e:	460a      	mov	r2, r1
 800e710:	e7d7      	b.n	800e6c2 <__b2d+0x4a>
 800e712:	bf00      	nop
 800e714:	3ff00000 	.word	0x3ff00000

0800e718 <__d2b>:
 800e718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e71c:	4689      	mov	r9, r1
 800e71e:	2101      	movs	r1, #1
 800e720:	ec57 6b10 	vmov	r6, r7, d0
 800e724:	4690      	mov	r8, r2
 800e726:	f7ff fc09 	bl	800df3c <_Balloc>
 800e72a:	4604      	mov	r4, r0
 800e72c:	b930      	cbnz	r0, 800e73c <__d2b+0x24>
 800e72e:	4602      	mov	r2, r0
 800e730:	4b25      	ldr	r3, [pc, #148]	; (800e7c8 <__d2b+0xb0>)
 800e732:	4826      	ldr	r0, [pc, #152]	; (800e7cc <__d2b+0xb4>)
 800e734:	f240 310a 	movw	r1, #778	; 0x30a
 800e738:	f000 fa5c 	bl	800ebf4 <__assert_func>
 800e73c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e740:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e744:	bb35      	cbnz	r5, 800e794 <__d2b+0x7c>
 800e746:	2e00      	cmp	r6, #0
 800e748:	9301      	str	r3, [sp, #4]
 800e74a:	d028      	beq.n	800e79e <__d2b+0x86>
 800e74c:	4668      	mov	r0, sp
 800e74e:	9600      	str	r6, [sp, #0]
 800e750:	f7ff fd06 	bl	800e160 <__lo0bits>
 800e754:	9900      	ldr	r1, [sp, #0]
 800e756:	b300      	cbz	r0, 800e79a <__d2b+0x82>
 800e758:	9a01      	ldr	r2, [sp, #4]
 800e75a:	f1c0 0320 	rsb	r3, r0, #32
 800e75e:	fa02 f303 	lsl.w	r3, r2, r3
 800e762:	430b      	orrs	r3, r1
 800e764:	40c2      	lsrs	r2, r0
 800e766:	6163      	str	r3, [r4, #20]
 800e768:	9201      	str	r2, [sp, #4]
 800e76a:	9b01      	ldr	r3, [sp, #4]
 800e76c:	61a3      	str	r3, [r4, #24]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	bf14      	ite	ne
 800e772:	2202      	movne	r2, #2
 800e774:	2201      	moveq	r2, #1
 800e776:	6122      	str	r2, [r4, #16]
 800e778:	b1d5      	cbz	r5, 800e7b0 <__d2b+0x98>
 800e77a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e77e:	4405      	add	r5, r0
 800e780:	f8c9 5000 	str.w	r5, [r9]
 800e784:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e788:	f8c8 0000 	str.w	r0, [r8]
 800e78c:	4620      	mov	r0, r4
 800e78e:	b003      	add	sp, #12
 800e790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e794:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e798:	e7d5      	b.n	800e746 <__d2b+0x2e>
 800e79a:	6161      	str	r1, [r4, #20]
 800e79c:	e7e5      	b.n	800e76a <__d2b+0x52>
 800e79e:	a801      	add	r0, sp, #4
 800e7a0:	f7ff fcde 	bl	800e160 <__lo0bits>
 800e7a4:	9b01      	ldr	r3, [sp, #4]
 800e7a6:	6163      	str	r3, [r4, #20]
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	6122      	str	r2, [r4, #16]
 800e7ac:	3020      	adds	r0, #32
 800e7ae:	e7e3      	b.n	800e778 <__d2b+0x60>
 800e7b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e7b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e7b8:	f8c9 0000 	str.w	r0, [r9]
 800e7bc:	6918      	ldr	r0, [r3, #16]
 800e7be:	f7ff fcaf 	bl	800e120 <__hi0bits>
 800e7c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e7c6:	e7df      	b.n	800e788 <__d2b+0x70>
 800e7c8:	08010660 	.word	0x08010660
 800e7cc:	080106ec 	.word	0x080106ec

0800e7d0 <__ratio>:
 800e7d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7d4:	4688      	mov	r8, r1
 800e7d6:	4669      	mov	r1, sp
 800e7d8:	4681      	mov	r9, r0
 800e7da:	f7ff ff4d 	bl	800e678 <__b2d>
 800e7de:	a901      	add	r1, sp, #4
 800e7e0:	4640      	mov	r0, r8
 800e7e2:	ec55 4b10 	vmov	r4, r5, d0
 800e7e6:	f7ff ff47 	bl	800e678 <__b2d>
 800e7ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e7ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e7f2:	eba3 0c02 	sub.w	ip, r3, r2
 800e7f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e7fa:	1a9b      	subs	r3, r3, r2
 800e7fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e800:	ec51 0b10 	vmov	r0, r1, d0
 800e804:	2b00      	cmp	r3, #0
 800e806:	bfd6      	itet	le
 800e808:	460a      	movle	r2, r1
 800e80a:	462a      	movgt	r2, r5
 800e80c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e810:	468b      	mov	fp, r1
 800e812:	462f      	mov	r7, r5
 800e814:	bfd4      	ite	le
 800e816:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e81a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e81e:	4620      	mov	r0, r4
 800e820:	ee10 2a10 	vmov	r2, s0
 800e824:	465b      	mov	r3, fp
 800e826:	4639      	mov	r1, r7
 800e828:	f7f2 f838 	bl	800089c <__aeabi_ddiv>
 800e82c:	ec41 0b10 	vmov	d0, r0, r1
 800e830:	b003      	add	sp, #12
 800e832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e836 <__copybits>:
 800e836:	3901      	subs	r1, #1
 800e838:	b570      	push	{r4, r5, r6, lr}
 800e83a:	1149      	asrs	r1, r1, #5
 800e83c:	6914      	ldr	r4, [r2, #16]
 800e83e:	3101      	adds	r1, #1
 800e840:	f102 0314 	add.w	r3, r2, #20
 800e844:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e848:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e84c:	1f05      	subs	r5, r0, #4
 800e84e:	42a3      	cmp	r3, r4
 800e850:	d30c      	bcc.n	800e86c <__copybits+0x36>
 800e852:	1aa3      	subs	r3, r4, r2
 800e854:	3b11      	subs	r3, #17
 800e856:	f023 0303 	bic.w	r3, r3, #3
 800e85a:	3211      	adds	r2, #17
 800e85c:	42a2      	cmp	r2, r4
 800e85e:	bf88      	it	hi
 800e860:	2300      	movhi	r3, #0
 800e862:	4418      	add	r0, r3
 800e864:	2300      	movs	r3, #0
 800e866:	4288      	cmp	r0, r1
 800e868:	d305      	bcc.n	800e876 <__copybits+0x40>
 800e86a:	bd70      	pop	{r4, r5, r6, pc}
 800e86c:	f853 6b04 	ldr.w	r6, [r3], #4
 800e870:	f845 6f04 	str.w	r6, [r5, #4]!
 800e874:	e7eb      	b.n	800e84e <__copybits+0x18>
 800e876:	f840 3b04 	str.w	r3, [r0], #4
 800e87a:	e7f4      	b.n	800e866 <__copybits+0x30>

0800e87c <__any_on>:
 800e87c:	f100 0214 	add.w	r2, r0, #20
 800e880:	6900      	ldr	r0, [r0, #16]
 800e882:	114b      	asrs	r3, r1, #5
 800e884:	4298      	cmp	r0, r3
 800e886:	b510      	push	{r4, lr}
 800e888:	db11      	blt.n	800e8ae <__any_on+0x32>
 800e88a:	dd0a      	ble.n	800e8a2 <__any_on+0x26>
 800e88c:	f011 011f 	ands.w	r1, r1, #31
 800e890:	d007      	beq.n	800e8a2 <__any_on+0x26>
 800e892:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e896:	fa24 f001 	lsr.w	r0, r4, r1
 800e89a:	fa00 f101 	lsl.w	r1, r0, r1
 800e89e:	428c      	cmp	r4, r1
 800e8a0:	d10b      	bne.n	800e8ba <__any_on+0x3e>
 800e8a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d803      	bhi.n	800e8b2 <__any_on+0x36>
 800e8aa:	2000      	movs	r0, #0
 800e8ac:	bd10      	pop	{r4, pc}
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	e7f7      	b.n	800e8a2 <__any_on+0x26>
 800e8b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e8b6:	2900      	cmp	r1, #0
 800e8b8:	d0f5      	beq.n	800e8a6 <__any_on+0x2a>
 800e8ba:	2001      	movs	r0, #1
 800e8bc:	e7f6      	b.n	800e8ac <__any_on+0x30>

0800e8be <_calloc_r>:
 800e8be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8c0:	fba1 2402 	umull	r2, r4, r1, r2
 800e8c4:	b94c      	cbnz	r4, 800e8da <_calloc_r+0x1c>
 800e8c6:	4611      	mov	r1, r2
 800e8c8:	9201      	str	r2, [sp, #4]
 800e8ca:	f7fc fb4d 	bl	800af68 <_malloc_r>
 800e8ce:	9a01      	ldr	r2, [sp, #4]
 800e8d0:	4605      	mov	r5, r0
 800e8d2:	b930      	cbnz	r0, 800e8e2 <_calloc_r+0x24>
 800e8d4:	4628      	mov	r0, r5
 800e8d6:	b003      	add	sp, #12
 800e8d8:	bd30      	pop	{r4, r5, pc}
 800e8da:	220c      	movs	r2, #12
 800e8dc:	6002      	str	r2, [r0, #0]
 800e8de:	2500      	movs	r5, #0
 800e8e0:	e7f8      	b.n	800e8d4 <_calloc_r+0x16>
 800e8e2:	4621      	mov	r1, r4
 800e8e4:	f7fc facc 	bl	800ae80 <memset>
 800e8e8:	e7f4      	b.n	800e8d4 <_calloc_r+0x16>

0800e8ea <__ssputs_r>:
 800e8ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8ee:	688e      	ldr	r6, [r1, #8]
 800e8f0:	429e      	cmp	r6, r3
 800e8f2:	4682      	mov	sl, r0
 800e8f4:	460c      	mov	r4, r1
 800e8f6:	4690      	mov	r8, r2
 800e8f8:	461f      	mov	r7, r3
 800e8fa:	d838      	bhi.n	800e96e <__ssputs_r+0x84>
 800e8fc:	898a      	ldrh	r2, [r1, #12]
 800e8fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e902:	d032      	beq.n	800e96a <__ssputs_r+0x80>
 800e904:	6825      	ldr	r5, [r4, #0]
 800e906:	6909      	ldr	r1, [r1, #16]
 800e908:	eba5 0901 	sub.w	r9, r5, r1
 800e90c:	6965      	ldr	r5, [r4, #20]
 800e90e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e912:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e916:	3301      	adds	r3, #1
 800e918:	444b      	add	r3, r9
 800e91a:	106d      	asrs	r5, r5, #1
 800e91c:	429d      	cmp	r5, r3
 800e91e:	bf38      	it	cc
 800e920:	461d      	movcc	r5, r3
 800e922:	0553      	lsls	r3, r2, #21
 800e924:	d531      	bpl.n	800e98a <__ssputs_r+0xa0>
 800e926:	4629      	mov	r1, r5
 800e928:	f7fc fb1e 	bl	800af68 <_malloc_r>
 800e92c:	4606      	mov	r6, r0
 800e92e:	b950      	cbnz	r0, 800e946 <__ssputs_r+0x5c>
 800e930:	230c      	movs	r3, #12
 800e932:	f8ca 3000 	str.w	r3, [sl]
 800e936:	89a3      	ldrh	r3, [r4, #12]
 800e938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e93c:	81a3      	strh	r3, [r4, #12]
 800e93e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e946:	6921      	ldr	r1, [r4, #16]
 800e948:	464a      	mov	r2, r9
 800e94a:	f7ff fadd 	bl	800df08 <memcpy>
 800e94e:	89a3      	ldrh	r3, [r4, #12]
 800e950:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e958:	81a3      	strh	r3, [r4, #12]
 800e95a:	6126      	str	r6, [r4, #16]
 800e95c:	6165      	str	r5, [r4, #20]
 800e95e:	444e      	add	r6, r9
 800e960:	eba5 0509 	sub.w	r5, r5, r9
 800e964:	6026      	str	r6, [r4, #0]
 800e966:	60a5      	str	r5, [r4, #8]
 800e968:	463e      	mov	r6, r7
 800e96a:	42be      	cmp	r6, r7
 800e96c:	d900      	bls.n	800e970 <__ssputs_r+0x86>
 800e96e:	463e      	mov	r6, r7
 800e970:	6820      	ldr	r0, [r4, #0]
 800e972:	4632      	mov	r2, r6
 800e974:	4641      	mov	r1, r8
 800e976:	f000 f970 	bl	800ec5a <memmove>
 800e97a:	68a3      	ldr	r3, [r4, #8]
 800e97c:	1b9b      	subs	r3, r3, r6
 800e97e:	60a3      	str	r3, [r4, #8]
 800e980:	6823      	ldr	r3, [r4, #0]
 800e982:	4433      	add	r3, r6
 800e984:	6023      	str	r3, [r4, #0]
 800e986:	2000      	movs	r0, #0
 800e988:	e7db      	b.n	800e942 <__ssputs_r+0x58>
 800e98a:	462a      	mov	r2, r5
 800e98c:	f000 f97f 	bl	800ec8e <_realloc_r>
 800e990:	4606      	mov	r6, r0
 800e992:	2800      	cmp	r0, #0
 800e994:	d1e1      	bne.n	800e95a <__ssputs_r+0x70>
 800e996:	6921      	ldr	r1, [r4, #16]
 800e998:	4650      	mov	r0, sl
 800e99a:	f7fc fa79 	bl	800ae90 <_free_r>
 800e99e:	e7c7      	b.n	800e930 <__ssputs_r+0x46>

0800e9a0 <_svfiprintf_r>:
 800e9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9a4:	4698      	mov	r8, r3
 800e9a6:	898b      	ldrh	r3, [r1, #12]
 800e9a8:	061b      	lsls	r3, r3, #24
 800e9aa:	b09d      	sub	sp, #116	; 0x74
 800e9ac:	4607      	mov	r7, r0
 800e9ae:	460d      	mov	r5, r1
 800e9b0:	4614      	mov	r4, r2
 800e9b2:	d50e      	bpl.n	800e9d2 <_svfiprintf_r+0x32>
 800e9b4:	690b      	ldr	r3, [r1, #16]
 800e9b6:	b963      	cbnz	r3, 800e9d2 <_svfiprintf_r+0x32>
 800e9b8:	2140      	movs	r1, #64	; 0x40
 800e9ba:	f7fc fad5 	bl	800af68 <_malloc_r>
 800e9be:	6028      	str	r0, [r5, #0]
 800e9c0:	6128      	str	r0, [r5, #16]
 800e9c2:	b920      	cbnz	r0, 800e9ce <_svfiprintf_r+0x2e>
 800e9c4:	230c      	movs	r3, #12
 800e9c6:	603b      	str	r3, [r7, #0]
 800e9c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9cc:	e0d1      	b.n	800eb72 <_svfiprintf_r+0x1d2>
 800e9ce:	2340      	movs	r3, #64	; 0x40
 800e9d0:	616b      	str	r3, [r5, #20]
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	9309      	str	r3, [sp, #36]	; 0x24
 800e9d6:	2320      	movs	r3, #32
 800e9d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9e0:	2330      	movs	r3, #48	; 0x30
 800e9e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eb8c <_svfiprintf_r+0x1ec>
 800e9e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9ea:	f04f 0901 	mov.w	r9, #1
 800e9ee:	4623      	mov	r3, r4
 800e9f0:	469a      	mov	sl, r3
 800e9f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9f6:	b10a      	cbz	r2, 800e9fc <_svfiprintf_r+0x5c>
 800e9f8:	2a25      	cmp	r2, #37	; 0x25
 800e9fa:	d1f9      	bne.n	800e9f0 <_svfiprintf_r+0x50>
 800e9fc:	ebba 0b04 	subs.w	fp, sl, r4
 800ea00:	d00b      	beq.n	800ea1a <_svfiprintf_r+0x7a>
 800ea02:	465b      	mov	r3, fp
 800ea04:	4622      	mov	r2, r4
 800ea06:	4629      	mov	r1, r5
 800ea08:	4638      	mov	r0, r7
 800ea0a:	f7ff ff6e 	bl	800e8ea <__ssputs_r>
 800ea0e:	3001      	adds	r0, #1
 800ea10:	f000 80aa 	beq.w	800eb68 <_svfiprintf_r+0x1c8>
 800ea14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea16:	445a      	add	r2, fp
 800ea18:	9209      	str	r2, [sp, #36]	; 0x24
 800ea1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	f000 80a2 	beq.w	800eb68 <_svfiprintf_r+0x1c8>
 800ea24:	2300      	movs	r3, #0
 800ea26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea2e:	f10a 0a01 	add.w	sl, sl, #1
 800ea32:	9304      	str	r3, [sp, #16]
 800ea34:	9307      	str	r3, [sp, #28]
 800ea36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea3a:	931a      	str	r3, [sp, #104]	; 0x68
 800ea3c:	4654      	mov	r4, sl
 800ea3e:	2205      	movs	r2, #5
 800ea40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea44:	4851      	ldr	r0, [pc, #324]	; (800eb8c <_svfiprintf_r+0x1ec>)
 800ea46:	f7f1 fbf3 	bl	8000230 <memchr>
 800ea4a:	9a04      	ldr	r2, [sp, #16]
 800ea4c:	b9d8      	cbnz	r0, 800ea86 <_svfiprintf_r+0xe6>
 800ea4e:	06d0      	lsls	r0, r2, #27
 800ea50:	bf44      	itt	mi
 800ea52:	2320      	movmi	r3, #32
 800ea54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea58:	0711      	lsls	r1, r2, #28
 800ea5a:	bf44      	itt	mi
 800ea5c:	232b      	movmi	r3, #43	; 0x2b
 800ea5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea62:	f89a 3000 	ldrb.w	r3, [sl]
 800ea66:	2b2a      	cmp	r3, #42	; 0x2a
 800ea68:	d015      	beq.n	800ea96 <_svfiprintf_r+0xf6>
 800ea6a:	9a07      	ldr	r2, [sp, #28]
 800ea6c:	4654      	mov	r4, sl
 800ea6e:	2000      	movs	r0, #0
 800ea70:	f04f 0c0a 	mov.w	ip, #10
 800ea74:	4621      	mov	r1, r4
 800ea76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea7a:	3b30      	subs	r3, #48	; 0x30
 800ea7c:	2b09      	cmp	r3, #9
 800ea7e:	d94e      	bls.n	800eb1e <_svfiprintf_r+0x17e>
 800ea80:	b1b0      	cbz	r0, 800eab0 <_svfiprintf_r+0x110>
 800ea82:	9207      	str	r2, [sp, #28]
 800ea84:	e014      	b.n	800eab0 <_svfiprintf_r+0x110>
 800ea86:	eba0 0308 	sub.w	r3, r0, r8
 800ea8a:	fa09 f303 	lsl.w	r3, r9, r3
 800ea8e:	4313      	orrs	r3, r2
 800ea90:	9304      	str	r3, [sp, #16]
 800ea92:	46a2      	mov	sl, r4
 800ea94:	e7d2      	b.n	800ea3c <_svfiprintf_r+0x9c>
 800ea96:	9b03      	ldr	r3, [sp, #12]
 800ea98:	1d19      	adds	r1, r3, #4
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	9103      	str	r1, [sp, #12]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	bfbb      	ittet	lt
 800eaa2:	425b      	neglt	r3, r3
 800eaa4:	f042 0202 	orrlt.w	r2, r2, #2
 800eaa8:	9307      	strge	r3, [sp, #28]
 800eaaa:	9307      	strlt	r3, [sp, #28]
 800eaac:	bfb8      	it	lt
 800eaae:	9204      	strlt	r2, [sp, #16]
 800eab0:	7823      	ldrb	r3, [r4, #0]
 800eab2:	2b2e      	cmp	r3, #46	; 0x2e
 800eab4:	d10c      	bne.n	800ead0 <_svfiprintf_r+0x130>
 800eab6:	7863      	ldrb	r3, [r4, #1]
 800eab8:	2b2a      	cmp	r3, #42	; 0x2a
 800eaba:	d135      	bne.n	800eb28 <_svfiprintf_r+0x188>
 800eabc:	9b03      	ldr	r3, [sp, #12]
 800eabe:	1d1a      	adds	r2, r3, #4
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	9203      	str	r2, [sp, #12]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	bfb8      	it	lt
 800eac8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800eacc:	3402      	adds	r4, #2
 800eace:	9305      	str	r3, [sp, #20]
 800ead0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eb9c <_svfiprintf_r+0x1fc>
 800ead4:	7821      	ldrb	r1, [r4, #0]
 800ead6:	2203      	movs	r2, #3
 800ead8:	4650      	mov	r0, sl
 800eada:	f7f1 fba9 	bl	8000230 <memchr>
 800eade:	b140      	cbz	r0, 800eaf2 <_svfiprintf_r+0x152>
 800eae0:	2340      	movs	r3, #64	; 0x40
 800eae2:	eba0 000a 	sub.w	r0, r0, sl
 800eae6:	fa03 f000 	lsl.w	r0, r3, r0
 800eaea:	9b04      	ldr	r3, [sp, #16]
 800eaec:	4303      	orrs	r3, r0
 800eaee:	3401      	adds	r4, #1
 800eaf0:	9304      	str	r3, [sp, #16]
 800eaf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaf6:	4826      	ldr	r0, [pc, #152]	; (800eb90 <_svfiprintf_r+0x1f0>)
 800eaf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eafc:	2206      	movs	r2, #6
 800eafe:	f7f1 fb97 	bl	8000230 <memchr>
 800eb02:	2800      	cmp	r0, #0
 800eb04:	d038      	beq.n	800eb78 <_svfiprintf_r+0x1d8>
 800eb06:	4b23      	ldr	r3, [pc, #140]	; (800eb94 <_svfiprintf_r+0x1f4>)
 800eb08:	bb1b      	cbnz	r3, 800eb52 <_svfiprintf_r+0x1b2>
 800eb0a:	9b03      	ldr	r3, [sp, #12]
 800eb0c:	3307      	adds	r3, #7
 800eb0e:	f023 0307 	bic.w	r3, r3, #7
 800eb12:	3308      	adds	r3, #8
 800eb14:	9303      	str	r3, [sp, #12]
 800eb16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb18:	4433      	add	r3, r6
 800eb1a:	9309      	str	r3, [sp, #36]	; 0x24
 800eb1c:	e767      	b.n	800e9ee <_svfiprintf_r+0x4e>
 800eb1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb22:	460c      	mov	r4, r1
 800eb24:	2001      	movs	r0, #1
 800eb26:	e7a5      	b.n	800ea74 <_svfiprintf_r+0xd4>
 800eb28:	2300      	movs	r3, #0
 800eb2a:	3401      	adds	r4, #1
 800eb2c:	9305      	str	r3, [sp, #20]
 800eb2e:	4619      	mov	r1, r3
 800eb30:	f04f 0c0a 	mov.w	ip, #10
 800eb34:	4620      	mov	r0, r4
 800eb36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb3a:	3a30      	subs	r2, #48	; 0x30
 800eb3c:	2a09      	cmp	r2, #9
 800eb3e:	d903      	bls.n	800eb48 <_svfiprintf_r+0x1a8>
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d0c5      	beq.n	800ead0 <_svfiprintf_r+0x130>
 800eb44:	9105      	str	r1, [sp, #20]
 800eb46:	e7c3      	b.n	800ead0 <_svfiprintf_r+0x130>
 800eb48:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb4c:	4604      	mov	r4, r0
 800eb4e:	2301      	movs	r3, #1
 800eb50:	e7f0      	b.n	800eb34 <_svfiprintf_r+0x194>
 800eb52:	ab03      	add	r3, sp, #12
 800eb54:	9300      	str	r3, [sp, #0]
 800eb56:	462a      	mov	r2, r5
 800eb58:	4b0f      	ldr	r3, [pc, #60]	; (800eb98 <_svfiprintf_r+0x1f8>)
 800eb5a:	a904      	add	r1, sp, #16
 800eb5c:	4638      	mov	r0, r7
 800eb5e:	f7fc fb17 	bl	800b190 <_printf_float>
 800eb62:	1c42      	adds	r2, r0, #1
 800eb64:	4606      	mov	r6, r0
 800eb66:	d1d6      	bne.n	800eb16 <_svfiprintf_r+0x176>
 800eb68:	89ab      	ldrh	r3, [r5, #12]
 800eb6a:	065b      	lsls	r3, r3, #25
 800eb6c:	f53f af2c 	bmi.w	800e9c8 <_svfiprintf_r+0x28>
 800eb70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb72:	b01d      	add	sp, #116	; 0x74
 800eb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb78:	ab03      	add	r3, sp, #12
 800eb7a:	9300      	str	r3, [sp, #0]
 800eb7c:	462a      	mov	r2, r5
 800eb7e:	4b06      	ldr	r3, [pc, #24]	; (800eb98 <_svfiprintf_r+0x1f8>)
 800eb80:	a904      	add	r1, sp, #16
 800eb82:	4638      	mov	r0, r7
 800eb84:	f7fc fda8 	bl	800b6d8 <_printf_i>
 800eb88:	e7eb      	b.n	800eb62 <_svfiprintf_r+0x1c2>
 800eb8a:	bf00      	nop
 800eb8c:	08010844 	.word	0x08010844
 800eb90:	0801084e 	.word	0x0801084e
 800eb94:	0800b191 	.word	0x0800b191
 800eb98:	0800e8eb 	.word	0x0800e8eb
 800eb9c:	0801084a 	.word	0x0801084a

0800eba0 <nan>:
 800eba0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800eba8 <nan+0x8>
 800eba4:	4770      	bx	lr
 800eba6:	bf00      	nop
 800eba8:	00000000 	.word	0x00000000
 800ebac:	7ff80000 	.word	0x7ff80000

0800ebb0 <strncmp>:
 800ebb0:	b510      	push	{r4, lr}
 800ebb2:	b17a      	cbz	r2, 800ebd4 <strncmp+0x24>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	3901      	subs	r1, #1
 800ebb8:	1884      	adds	r4, r0, r2
 800ebba:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ebbe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ebc2:	4290      	cmp	r0, r2
 800ebc4:	d101      	bne.n	800ebca <strncmp+0x1a>
 800ebc6:	42a3      	cmp	r3, r4
 800ebc8:	d101      	bne.n	800ebce <strncmp+0x1e>
 800ebca:	1a80      	subs	r0, r0, r2
 800ebcc:	bd10      	pop	{r4, pc}
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	d1f3      	bne.n	800ebba <strncmp+0xa>
 800ebd2:	e7fa      	b.n	800ebca <strncmp+0x1a>
 800ebd4:	4610      	mov	r0, r2
 800ebd6:	e7f9      	b.n	800ebcc <strncmp+0x1c>

0800ebd8 <__ascii_wctomb>:
 800ebd8:	b149      	cbz	r1, 800ebee <__ascii_wctomb+0x16>
 800ebda:	2aff      	cmp	r2, #255	; 0xff
 800ebdc:	bf85      	ittet	hi
 800ebde:	238a      	movhi	r3, #138	; 0x8a
 800ebe0:	6003      	strhi	r3, [r0, #0]
 800ebe2:	700a      	strbls	r2, [r1, #0]
 800ebe4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ebe8:	bf98      	it	ls
 800ebea:	2001      	movls	r0, #1
 800ebec:	4770      	bx	lr
 800ebee:	4608      	mov	r0, r1
 800ebf0:	4770      	bx	lr
	...

0800ebf4 <__assert_func>:
 800ebf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ebf6:	4614      	mov	r4, r2
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	4b09      	ldr	r3, [pc, #36]	; (800ec20 <__assert_func+0x2c>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	4605      	mov	r5, r0
 800ec00:	68d8      	ldr	r0, [r3, #12]
 800ec02:	b14c      	cbz	r4, 800ec18 <__assert_func+0x24>
 800ec04:	4b07      	ldr	r3, [pc, #28]	; (800ec24 <__assert_func+0x30>)
 800ec06:	9100      	str	r1, [sp, #0]
 800ec08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec0c:	4906      	ldr	r1, [pc, #24]	; (800ec28 <__assert_func+0x34>)
 800ec0e:	462b      	mov	r3, r5
 800ec10:	f000 f80e 	bl	800ec30 <fiprintf>
 800ec14:	f000 fa84 	bl	800f120 <abort>
 800ec18:	4b04      	ldr	r3, [pc, #16]	; (800ec2c <__assert_func+0x38>)
 800ec1a:	461c      	mov	r4, r3
 800ec1c:	e7f3      	b.n	800ec06 <__assert_func+0x12>
 800ec1e:	bf00      	nop
 800ec20:	200003b0 	.word	0x200003b0
 800ec24:	08010855 	.word	0x08010855
 800ec28:	08010862 	.word	0x08010862
 800ec2c:	08010890 	.word	0x08010890

0800ec30 <fiprintf>:
 800ec30:	b40e      	push	{r1, r2, r3}
 800ec32:	b503      	push	{r0, r1, lr}
 800ec34:	4601      	mov	r1, r0
 800ec36:	ab03      	add	r3, sp, #12
 800ec38:	4805      	ldr	r0, [pc, #20]	; (800ec50 <fiprintf+0x20>)
 800ec3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec3e:	6800      	ldr	r0, [r0, #0]
 800ec40:	9301      	str	r3, [sp, #4]
 800ec42:	f000 f87d 	bl	800ed40 <_vfiprintf_r>
 800ec46:	b002      	add	sp, #8
 800ec48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec4c:	b003      	add	sp, #12
 800ec4e:	4770      	bx	lr
 800ec50:	200003b0 	.word	0x200003b0

0800ec54 <__retarget_lock_init_recursive>:
 800ec54:	4770      	bx	lr

0800ec56 <__retarget_lock_acquire_recursive>:
 800ec56:	4770      	bx	lr

0800ec58 <__retarget_lock_release_recursive>:
 800ec58:	4770      	bx	lr

0800ec5a <memmove>:
 800ec5a:	4288      	cmp	r0, r1
 800ec5c:	b510      	push	{r4, lr}
 800ec5e:	eb01 0402 	add.w	r4, r1, r2
 800ec62:	d902      	bls.n	800ec6a <memmove+0x10>
 800ec64:	4284      	cmp	r4, r0
 800ec66:	4623      	mov	r3, r4
 800ec68:	d807      	bhi.n	800ec7a <memmove+0x20>
 800ec6a:	1e43      	subs	r3, r0, #1
 800ec6c:	42a1      	cmp	r1, r4
 800ec6e:	d008      	beq.n	800ec82 <memmove+0x28>
 800ec70:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec74:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec78:	e7f8      	b.n	800ec6c <memmove+0x12>
 800ec7a:	4402      	add	r2, r0
 800ec7c:	4601      	mov	r1, r0
 800ec7e:	428a      	cmp	r2, r1
 800ec80:	d100      	bne.n	800ec84 <memmove+0x2a>
 800ec82:	bd10      	pop	{r4, pc}
 800ec84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec88:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec8c:	e7f7      	b.n	800ec7e <memmove+0x24>

0800ec8e <_realloc_r>:
 800ec8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec92:	4680      	mov	r8, r0
 800ec94:	4614      	mov	r4, r2
 800ec96:	460e      	mov	r6, r1
 800ec98:	b921      	cbnz	r1, 800eca4 <_realloc_r+0x16>
 800ec9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec9e:	4611      	mov	r1, r2
 800eca0:	f7fc b962 	b.w	800af68 <_malloc_r>
 800eca4:	b92a      	cbnz	r2, 800ecb2 <_realloc_r+0x24>
 800eca6:	f7fc f8f3 	bl	800ae90 <_free_r>
 800ecaa:	4625      	mov	r5, r4
 800ecac:	4628      	mov	r0, r5
 800ecae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecb2:	f000 fc59 	bl	800f568 <_malloc_usable_size_r>
 800ecb6:	4284      	cmp	r4, r0
 800ecb8:	4607      	mov	r7, r0
 800ecba:	d802      	bhi.n	800ecc2 <_realloc_r+0x34>
 800ecbc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ecc0:	d812      	bhi.n	800ece8 <_realloc_r+0x5a>
 800ecc2:	4621      	mov	r1, r4
 800ecc4:	4640      	mov	r0, r8
 800ecc6:	f7fc f94f 	bl	800af68 <_malloc_r>
 800ecca:	4605      	mov	r5, r0
 800eccc:	2800      	cmp	r0, #0
 800ecce:	d0ed      	beq.n	800ecac <_realloc_r+0x1e>
 800ecd0:	42bc      	cmp	r4, r7
 800ecd2:	4622      	mov	r2, r4
 800ecd4:	4631      	mov	r1, r6
 800ecd6:	bf28      	it	cs
 800ecd8:	463a      	movcs	r2, r7
 800ecda:	f7ff f915 	bl	800df08 <memcpy>
 800ecde:	4631      	mov	r1, r6
 800ece0:	4640      	mov	r0, r8
 800ece2:	f7fc f8d5 	bl	800ae90 <_free_r>
 800ece6:	e7e1      	b.n	800ecac <_realloc_r+0x1e>
 800ece8:	4635      	mov	r5, r6
 800ecea:	e7df      	b.n	800ecac <_realloc_r+0x1e>

0800ecec <__sfputc_r>:
 800ecec:	6893      	ldr	r3, [r2, #8]
 800ecee:	3b01      	subs	r3, #1
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	b410      	push	{r4}
 800ecf4:	6093      	str	r3, [r2, #8]
 800ecf6:	da08      	bge.n	800ed0a <__sfputc_r+0x1e>
 800ecf8:	6994      	ldr	r4, [r2, #24]
 800ecfa:	42a3      	cmp	r3, r4
 800ecfc:	db01      	blt.n	800ed02 <__sfputc_r+0x16>
 800ecfe:	290a      	cmp	r1, #10
 800ed00:	d103      	bne.n	800ed0a <__sfputc_r+0x1e>
 800ed02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed06:	f000 b94b 	b.w	800efa0 <__swbuf_r>
 800ed0a:	6813      	ldr	r3, [r2, #0]
 800ed0c:	1c58      	adds	r0, r3, #1
 800ed0e:	6010      	str	r0, [r2, #0]
 800ed10:	7019      	strb	r1, [r3, #0]
 800ed12:	4608      	mov	r0, r1
 800ed14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed18:	4770      	bx	lr

0800ed1a <__sfputs_r>:
 800ed1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed1c:	4606      	mov	r6, r0
 800ed1e:	460f      	mov	r7, r1
 800ed20:	4614      	mov	r4, r2
 800ed22:	18d5      	adds	r5, r2, r3
 800ed24:	42ac      	cmp	r4, r5
 800ed26:	d101      	bne.n	800ed2c <__sfputs_r+0x12>
 800ed28:	2000      	movs	r0, #0
 800ed2a:	e007      	b.n	800ed3c <__sfputs_r+0x22>
 800ed2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed30:	463a      	mov	r2, r7
 800ed32:	4630      	mov	r0, r6
 800ed34:	f7ff ffda 	bl	800ecec <__sfputc_r>
 800ed38:	1c43      	adds	r3, r0, #1
 800ed3a:	d1f3      	bne.n	800ed24 <__sfputs_r+0xa>
 800ed3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed40 <_vfiprintf_r>:
 800ed40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed44:	460d      	mov	r5, r1
 800ed46:	b09d      	sub	sp, #116	; 0x74
 800ed48:	4614      	mov	r4, r2
 800ed4a:	4698      	mov	r8, r3
 800ed4c:	4606      	mov	r6, r0
 800ed4e:	b118      	cbz	r0, 800ed58 <_vfiprintf_r+0x18>
 800ed50:	6983      	ldr	r3, [r0, #24]
 800ed52:	b90b      	cbnz	r3, 800ed58 <_vfiprintf_r+0x18>
 800ed54:	f000 fb06 	bl	800f364 <__sinit>
 800ed58:	4b89      	ldr	r3, [pc, #548]	; (800ef80 <_vfiprintf_r+0x240>)
 800ed5a:	429d      	cmp	r5, r3
 800ed5c:	d11b      	bne.n	800ed96 <_vfiprintf_r+0x56>
 800ed5e:	6875      	ldr	r5, [r6, #4]
 800ed60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed62:	07d9      	lsls	r1, r3, #31
 800ed64:	d405      	bmi.n	800ed72 <_vfiprintf_r+0x32>
 800ed66:	89ab      	ldrh	r3, [r5, #12]
 800ed68:	059a      	lsls	r2, r3, #22
 800ed6a:	d402      	bmi.n	800ed72 <_vfiprintf_r+0x32>
 800ed6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed6e:	f7ff ff72 	bl	800ec56 <__retarget_lock_acquire_recursive>
 800ed72:	89ab      	ldrh	r3, [r5, #12]
 800ed74:	071b      	lsls	r3, r3, #28
 800ed76:	d501      	bpl.n	800ed7c <_vfiprintf_r+0x3c>
 800ed78:	692b      	ldr	r3, [r5, #16]
 800ed7a:	b9eb      	cbnz	r3, 800edb8 <_vfiprintf_r+0x78>
 800ed7c:	4629      	mov	r1, r5
 800ed7e:	4630      	mov	r0, r6
 800ed80:	f000 f960 	bl	800f044 <__swsetup_r>
 800ed84:	b1c0      	cbz	r0, 800edb8 <_vfiprintf_r+0x78>
 800ed86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed88:	07dc      	lsls	r4, r3, #31
 800ed8a:	d50e      	bpl.n	800edaa <_vfiprintf_r+0x6a>
 800ed8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed90:	b01d      	add	sp, #116	; 0x74
 800ed92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed96:	4b7b      	ldr	r3, [pc, #492]	; (800ef84 <_vfiprintf_r+0x244>)
 800ed98:	429d      	cmp	r5, r3
 800ed9a:	d101      	bne.n	800eda0 <_vfiprintf_r+0x60>
 800ed9c:	68b5      	ldr	r5, [r6, #8]
 800ed9e:	e7df      	b.n	800ed60 <_vfiprintf_r+0x20>
 800eda0:	4b79      	ldr	r3, [pc, #484]	; (800ef88 <_vfiprintf_r+0x248>)
 800eda2:	429d      	cmp	r5, r3
 800eda4:	bf08      	it	eq
 800eda6:	68f5      	ldreq	r5, [r6, #12]
 800eda8:	e7da      	b.n	800ed60 <_vfiprintf_r+0x20>
 800edaa:	89ab      	ldrh	r3, [r5, #12]
 800edac:	0598      	lsls	r0, r3, #22
 800edae:	d4ed      	bmi.n	800ed8c <_vfiprintf_r+0x4c>
 800edb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edb2:	f7ff ff51 	bl	800ec58 <__retarget_lock_release_recursive>
 800edb6:	e7e9      	b.n	800ed8c <_vfiprintf_r+0x4c>
 800edb8:	2300      	movs	r3, #0
 800edba:	9309      	str	r3, [sp, #36]	; 0x24
 800edbc:	2320      	movs	r3, #32
 800edbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edc2:	f8cd 800c 	str.w	r8, [sp, #12]
 800edc6:	2330      	movs	r3, #48	; 0x30
 800edc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ef8c <_vfiprintf_r+0x24c>
 800edcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edd0:	f04f 0901 	mov.w	r9, #1
 800edd4:	4623      	mov	r3, r4
 800edd6:	469a      	mov	sl, r3
 800edd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eddc:	b10a      	cbz	r2, 800ede2 <_vfiprintf_r+0xa2>
 800edde:	2a25      	cmp	r2, #37	; 0x25
 800ede0:	d1f9      	bne.n	800edd6 <_vfiprintf_r+0x96>
 800ede2:	ebba 0b04 	subs.w	fp, sl, r4
 800ede6:	d00b      	beq.n	800ee00 <_vfiprintf_r+0xc0>
 800ede8:	465b      	mov	r3, fp
 800edea:	4622      	mov	r2, r4
 800edec:	4629      	mov	r1, r5
 800edee:	4630      	mov	r0, r6
 800edf0:	f7ff ff93 	bl	800ed1a <__sfputs_r>
 800edf4:	3001      	adds	r0, #1
 800edf6:	f000 80aa 	beq.w	800ef4e <_vfiprintf_r+0x20e>
 800edfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edfc:	445a      	add	r2, fp
 800edfe:	9209      	str	r2, [sp, #36]	; 0x24
 800ee00:	f89a 3000 	ldrb.w	r3, [sl]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	f000 80a2 	beq.w	800ef4e <_vfiprintf_r+0x20e>
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee14:	f10a 0a01 	add.w	sl, sl, #1
 800ee18:	9304      	str	r3, [sp, #16]
 800ee1a:	9307      	str	r3, [sp, #28]
 800ee1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee20:	931a      	str	r3, [sp, #104]	; 0x68
 800ee22:	4654      	mov	r4, sl
 800ee24:	2205      	movs	r2, #5
 800ee26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee2a:	4858      	ldr	r0, [pc, #352]	; (800ef8c <_vfiprintf_r+0x24c>)
 800ee2c:	f7f1 fa00 	bl	8000230 <memchr>
 800ee30:	9a04      	ldr	r2, [sp, #16]
 800ee32:	b9d8      	cbnz	r0, 800ee6c <_vfiprintf_r+0x12c>
 800ee34:	06d1      	lsls	r1, r2, #27
 800ee36:	bf44      	itt	mi
 800ee38:	2320      	movmi	r3, #32
 800ee3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee3e:	0713      	lsls	r3, r2, #28
 800ee40:	bf44      	itt	mi
 800ee42:	232b      	movmi	r3, #43	; 0x2b
 800ee44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee48:	f89a 3000 	ldrb.w	r3, [sl]
 800ee4c:	2b2a      	cmp	r3, #42	; 0x2a
 800ee4e:	d015      	beq.n	800ee7c <_vfiprintf_r+0x13c>
 800ee50:	9a07      	ldr	r2, [sp, #28]
 800ee52:	4654      	mov	r4, sl
 800ee54:	2000      	movs	r0, #0
 800ee56:	f04f 0c0a 	mov.w	ip, #10
 800ee5a:	4621      	mov	r1, r4
 800ee5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee60:	3b30      	subs	r3, #48	; 0x30
 800ee62:	2b09      	cmp	r3, #9
 800ee64:	d94e      	bls.n	800ef04 <_vfiprintf_r+0x1c4>
 800ee66:	b1b0      	cbz	r0, 800ee96 <_vfiprintf_r+0x156>
 800ee68:	9207      	str	r2, [sp, #28]
 800ee6a:	e014      	b.n	800ee96 <_vfiprintf_r+0x156>
 800ee6c:	eba0 0308 	sub.w	r3, r0, r8
 800ee70:	fa09 f303 	lsl.w	r3, r9, r3
 800ee74:	4313      	orrs	r3, r2
 800ee76:	9304      	str	r3, [sp, #16]
 800ee78:	46a2      	mov	sl, r4
 800ee7a:	e7d2      	b.n	800ee22 <_vfiprintf_r+0xe2>
 800ee7c:	9b03      	ldr	r3, [sp, #12]
 800ee7e:	1d19      	adds	r1, r3, #4
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	9103      	str	r1, [sp, #12]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	bfbb      	ittet	lt
 800ee88:	425b      	neglt	r3, r3
 800ee8a:	f042 0202 	orrlt.w	r2, r2, #2
 800ee8e:	9307      	strge	r3, [sp, #28]
 800ee90:	9307      	strlt	r3, [sp, #28]
 800ee92:	bfb8      	it	lt
 800ee94:	9204      	strlt	r2, [sp, #16]
 800ee96:	7823      	ldrb	r3, [r4, #0]
 800ee98:	2b2e      	cmp	r3, #46	; 0x2e
 800ee9a:	d10c      	bne.n	800eeb6 <_vfiprintf_r+0x176>
 800ee9c:	7863      	ldrb	r3, [r4, #1]
 800ee9e:	2b2a      	cmp	r3, #42	; 0x2a
 800eea0:	d135      	bne.n	800ef0e <_vfiprintf_r+0x1ce>
 800eea2:	9b03      	ldr	r3, [sp, #12]
 800eea4:	1d1a      	adds	r2, r3, #4
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	9203      	str	r2, [sp, #12]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	bfb8      	it	lt
 800eeae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800eeb2:	3402      	adds	r4, #2
 800eeb4:	9305      	str	r3, [sp, #20]
 800eeb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ef9c <_vfiprintf_r+0x25c>
 800eeba:	7821      	ldrb	r1, [r4, #0]
 800eebc:	2203      	movs	r2, #3
 800eebe:	4650      	mov	r0, sl
 800eec0:	f7f1 f9b6 	bl	8000230 <memchr>
 800eec4:	b140      	cbz	r0, 800eed8 <_vfiprintf_r+0x198>
 800eec6:	2340      	movs	r3, #64	; 0x40
 800eec8:	eba0 000a 	sub.w	r0, r0, sl
 800eecc:	fa03 f000 	lsl.w	r0, r3, r0
 800eed0:	9b04      	ldr	r3, [sp, #16]
 800eed2:	4303      	orrs	r3, r0
 800eed4:	3401      	adds	r4, #1
 800eed6:	9304      	str	r3, [sp, #16]
 800eed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eedc:	482c      	ldr	r0, [pc, #176]	; (800ef90 <_vfiprintf_r+0x250>)
 800eede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eee2:	2206      	movs	r2, #6
 800eee4:	f7f1 f9a4 	bl	8000230 <memchr>
 800eee8:	2800      	cmp	r0, #0
 800eeea:	d03f      	beq.n	800ef6c <_vfiprintf_r+0x22c>
 800eeec:	4b29      	ldr	r3, [pc, #164]	; (800ef94 <_vfiprintf_r+0x254>)
 800eeee:	bb1b      	cbnz	r3, 800ef38 <_vfiprintf_r+0x1f8>
 800eef0:	9b03      	ldr	r3, [sp, #12]
 800eef2:	3307      	adds	r3, #7
 800eef4:	f023 0307 	bic.w	r3, r3, #7
 800eef8:	3308      	adds	r3, #8
 800eefa:	9303      	str	r3, [sp, #12]
 800eefc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eefe:	443b      	add	r3, r7
 800ef00:	9309      	str	r3, [sp, #36]	; 0x24
 800ef02:	e767      	b.n	800edd4 <_vfiprintf_r+0x94>
 800ef04:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef08:	460c      	mov	r4, r1
 800ef0a:	2001      	movs	r0, #1
 800ef0c:	e7a5      	b.n	800ee5a <_vfiprintf_r+0x11a>
 800ef0e:	2300      	movs	r3, #0
 800ef10:	3401      	adds	r4, #1
 800ef12:	9305      	str	r3, [sp, #20]
 800ef14:	4619      	mov	r1, r3
 800ef16:	f04f 0c0a 	mov.w	ip, #10
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef20:	3a30      	subs	r2, #48	; 0x30
 800ef22:	2a09      	cmp	r2, #9
 800ef24:	d903      	bls.n	800ef2e <_vfiprintf_r+0x1ee>
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d0c5      	beq.n	800eeb6 <_vfiprintf_r+0x176>
 800ef2a:	9105      	str	r1, [sp, #20]
 800ef2c:	e7c3      	b.n	800eeb6 <_vfiprintf_r+0x176>
 800ef2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef32:	4604      	mov	r4, r0
 800ef34:	2301      	movs	r3, #1
 800ef36:	e7f0      	b.n	800ef1a <_vfiprintf_r+0x1da>
 800ef38:	ab03      	add	r3, sp, #12
 800ef3a:	9300      	str	r3, [sp, #0]
 800ef3c:	462a      	mov	r2, r5
 800ef3e:	4b16      	ldr	r3, [pc, #88]	; (800ef98 <_vfiprintf_r+0x258>)
 800ef40:	a904      	add	r1, sp, #16
 800ef42:	4630      	mov	r0, r6
 800ef44:	f7fc f924 	bl	800b190 <_printf_float>
 800ef48:	4607      	mov	r7, r0
 800ef4a:	1c78      	adds	r0, r7, #1
 800ef4c:	d1d6      	bne.n	800eefc <_vfiprintf_r+0x1bc>
 800ef4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef50:	07d9      	lsls	r1, r3, #31
 800ef52:	d405      	bmi.n	800ef60 <_vfiprintf_r+0x220>
 800ef54:	89ab      	ldrh	r3, [r5, #12]
 800ef56:	059a      	lsls	r2, r3, #22
 800ef58:	d402      	bmi.n	800ef60 <_vfiprintf_r+0x220>
 800ef5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef5c:	f7ff fe7c 	bl	800ec58 <__retarget_lock_release_recursive>
 800ef60:	89ab      	ldrh	r3, [r5, #12]
 800ef62:	065b      	lsls	r3, r3, #25
 800ef64:	f53f af12 	bmi.w	800ed8c <_vfiprintf_r+0x4c>
 800ef68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef6a:	e711      	b.n	800ed90 <_vfiprintf_r+0x50>
 800ef6c:	ab03      	add	r3, sp, #12
 800ef6e:	9300      	str	r3, [sp, #0]
 800ef70:	462a      	mov	r2, r5
 800ef72:	4b09      	ldr	r3, [pc, #36]	; (800ef98 <_vfiprintf_r+0x258>)
 800ef74:	a904      	add	r1, sp, #16
 800ef76:	4630      	mov	r0, r6
 800ef78:	f7fc fbae 	bl	800b6d8 <_printf_i>
 800ef7c:	e7e4      	b.n	800ef48 <_vfiprintf_r+0x208>
 800ef7e:	bf00      	nop
 800ef80:	080108b4 	.word	0x080108b4
 800ef84:	080108d4 	.word	0x080108d4
 800ef88:	08010894 	.word	0x08010894
 800ef8c:	08010844 	.word	0x08010844
 800ef90:	0801084e 	.word	0x0801084e
 800ef94:	0800b191 	.word	0x0800b191
 800ef98:	0800ed1b 	.word	0x0800ed1b
 800ef9c:	0801084a 	.word	0x0801084a

0800efa0 <__swbuf_r>:
 800efa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efa2:	460e      	mov	r6, r1
 800efa4:	4614      	mov	r4, r2
 800efa6:	4605      	mov	r5, r0
 800efa8:	b118      	cbz	r0, 800efb2 <__swbuf_r+0x12>
 800efaa:	6983      	ldr	r3, [r0, #24]
 800efac:	b90b      	cbnz	r3, 800efb2 <__swbuf_r+0x12>
 800efae:	f000 f9d9 	bl	800f364 <__sinit>
 800efb2:	4b21      	ldr	r3, [pc, #132]	; (800f038 <__swbuf_r+0x98>)
 800efb4:	429c      	cmp	r4, r3
 800efb6:	d12b      	bne.n	800f010 <__swbuf_r+0x70>
 800efb8:	686c      	ldr	r4, [r5, #4]
 800efba:	69a3      	ldr	r3, [r4, #24]
 800efbc:	60a3      	str	r3, [r4, #8]
 800efbe:	89a3      	ldrh	r3, [r4, #12]
 800efc0:	071a      	lsls	r2, r3, #28
 800efc2:	d52f      	bpl.n	800f024 <__swbuf_r+0x84>
 800efc4:	6923      	ldr	r3, [r4, #16]
 800efc6:	b36b      	cbz	r3, 800f024 <__swbuf_r+0x84>
 800efc8:	6923      	ldr	r3, [r4, #16]
 800efca:	6820      	ldr	r0, [r4, #0]
 800efcc:	1ac0      	subs	r0, r0, r3
 800efce:	6963      	ldr	r3, [r4, #20]
 800efd0:	b2f6      	uxtb	r6, r6
 800efd2:	4283      	cmp	r3, r0
 800efd4:	4637      	mov	r7, r6
 800efd6:	dc04      	bgt.n	800efe2 <__swbuf_r+0x42>
 800efd8:	4621      	mov	r1, r4
 800efda:	4628      	mov	r0, r5
 800efdc:	f000 f92e 	bl	800f23c <_fflush_r>
 800efe0:	bb30      	cbnz	r0, 800f030 <__swbuf_r+0x90>
 800efe2:	68a3      	ldr	r3, [r4, #8]
 800efe4:	3b01      	subs	r3, #1
 800efe6:	60a3      	str	r3, [r4, #8]
 800efe8:	6823      	ldr	r3, [r4, #0]
 800efea:	1c5a      	adds	r2, r3, #1
 800efec:	6022      	str	r2, [r4, #0]
 800efee:	701e      	strb	r6, [r3, #0]
 800eff0:	6963      	ldr	r3, [r4, #20]
 800eff2:	3001      	adds	r0, #1
 800eff4:	4283      	cmp	r3, r0
 800eff6:	d004      	beq.n	800f002 <__swbuf_r+0x62>
 800eff8:	89a3      	ldrh	r3, [r4, #12]
 800effa:	07db      	lsls	r3, r3, #31
 800effc:	d506      	bpl.n	800f00c <__swbuf_r+0x6c>
 800effe:	2e0a      	cmp	r6, #10
 800f000:	d104      	bne.n	800f00c <__swbuf_r+0x6c>
 800f002:	4621      	mov	r1, r4
 800f004:	4628      	mov	r0, r5
 800f006:	f000 f919 	bl	800f23c <_fflush_r>
 800f00a:	b988      	cbnz	r0, 800f030 <__swbuf_r+0x90>
 800f00c:	4638      	mov	r0, r7
 800f00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f010:	4b0a      	ldr	r3, [pc, #40]	; (800f03c <__swbuf_r+0x9c>)
 800f012:	429c      	cmp	r4, r3
 800f014:	d101      	bne.n	800f01a <__swbuf_r+0x7a>
 800f016:	68ac      	ldr	r4, [r5, #8]
 800f018:	e7cf      	b.n	800efba <__swbuf_r+0x1a>
 800f01a:	4b09      	ldr	r3, [pc, #36]	; (800f040 <__swbuf_r+0xa0>)
 800f01c:	429c      	cmp	r4, r3
 800f01e:	bf08      	it	eq
 800f020:	68ec      	ldreq	r4, [r5, #12]
 800f022:	e7ca      	b.n	800efba <__swbuf_r+0x1a>
 800f024:	4621      	mov	r1, r4
 800f026:	4628      	mov	r0, r5
 800f028:	f000 f80c 	bl	800f044 <__swsetup_r>
 800f02c:	2800      	cmp	r0, #0
 800f02e:	d0cb      	beq.n	800efc8 <__swbuf_r+0x28>
 800f030:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f034:	e7ea      	b.n	800f00c <__swbuf_r+0x6c>
 800f036:	bf00      	nop
 800f038:	080108b4 	.word	0x080108b4
 800f03c:	080108d4 	.word	0x080108d4
 800f040:	08010894 	.word	0x08010894

0800f044 <__swsetup_r>:
 800f044:	4b32      	ldr	r3, [pc, #200]	; (800f110 <__swsetup_r+0xcc>)
 800f046:	b570      	push	{r4, r5, r6, lr}
 800f048:	681d      	ldr	r5, [r3, #0]
 800f04a:	4606      	mov	r6, r0
 800f04c:	460c      	mov	r4, r1
 800f04e:	b125      	cbz	r5, 800f05a <__swsetup_r+0x16>
 800f050:	69ab      	ldr	r3, [r5, #24]
 800f052:	b913      	cbnz	r3, 800f05a <__swsetup_r+0x16>
 800f054:	4628      	mov	r0, r5
 800f056:	f000 f985 	bl	800f364 <__sinit>
 800f05a:	4b2e      	ldr	r3, [pc, #184]	; (800f114 <__swsetup_r+0xd0>)
 800f05c:	429c      	cmp	r4, r3
 800f05e:	d10f      	bne.n	800f080 <__swsetup_r+0x3c>
 800f060:	686c      	ldr	r4, [r5, #4]
 800f062:	89a3      	ldrh	r3, [r4, #12]
 800f064:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f068:	0719      	lsls	r1, r3, #28
 800f06a:	d42c      	bmi.n	800f0c6 <__swsetup_r+0x82>
 800f06c:	06dd      	lsls	r5, r3, #27
 800f06e:	d411      	bmi.n	800f094 <__swsetup_r+0x50>
 800f070:	2309      	movs	r3, #9
 800f072:	6033      	str	r3, [r6, #0]
 800f074:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f078:	81a3      	strh	r3, [r4, #12]
 800f07a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f07e:	e03e      	b.n	800f0fe <__swsetup_r+0xba>
 800f080:	4b25      	ldr	r3, [pc, #148]	; (800f118 <__swsetup_r+0xd4>)
 800f082:	429c      	cmp	r4, r3
 800f084:	d101      	bne.n	800f08a <__swsetup_r+0x46>
 800f086:	68ac      	ldr	r4, [r5, #8]
 800f088:	e7eb      	b.n	800f062 <__swsetup_r+0x1e>
 800f08a:	4b24      	ldr	r3, [pc, #144]	; (800f11c <__swsetup_r+0xd8>)
 800f08c:	429c      	cmp	r4, r3
 800f08e:	bf08      	it	eq
 800f090:	68ec      	ldreq	r4, [r5, #12]
 800f092:	e7e6      	b.n	800f062 <__swsetup_r+0x1e>
 800f094:	0758      	lsls	r0, r3, #29
 800f096:	d512      	bpl.n	800f0be <__swsetup_r+0x7a>
 800f098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f09a:	b141      	cbz	r1, 800f0ae <__swsetup_r+0x6a>
 800f09c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0a0:	4299      	cmp	r1, r3
 800f0a2:	d002      	beq.n	800f0aa <__swsetup_r+0x66>
 800f0a4:	4630      	mov	r0, r6
 800f0a6:	f7fb fef3 	bl	800ae90 <_free_r>
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	6363      	str	r3, [r4, #52]	; 0x34
 800f0ae:	89a3      	ldrh	r3, [r4, #12]
 800f0b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f0b4:	81a3      	strh	r3, [r4, #12]
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	6063      	str	r3, [r4, #4]
 800f0ba:	6923      	ldr	r3, [r4, #16]
 800f0bc:	6023      	str	r3, [r4, #0]
 800f0be:	89a3      	ldrh	r3, [r4, #12]
 800f0c0:	f043 0308 	orr.w	r3, r3, #8
 800f0c4:	81a3      	strh	r3, [r4, #12]
 800f0c6:	6923      	ldr	r3, [r4, #16]
 800f0c8:	b94b      	cbnz	r3, 800f0de <__swsetup_r+0x9a>
 800f0ca:	89a3      	ldrh	r3, [r4, #12]
 800f0cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f0d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0d4:	d003      	beq.n	800f0de <__swsetup_r+0x9a>
 800f0d6:	4621      	mov	r1, r4
 800f0d8:	4630      	mov	r0, r6
 800f0da:	f000 fa05 	bl	800f4e8 <__smakebuf_r>
 800f0de:	89a0      	ldrh	r0, [r4, #12]
 800f0e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0e4:	f010 0301 	ands.w	r3, r0, #1
 800f0e8:	d00a      	beq.n	800f100 <__swsetup_r+0xbc>
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	60a3      	str	r3, [r4, #8]
 800f0ee:	6963      	ldr	r3, [r4, #20]
 800f0f0:	425b      	negs	r3, r3
 800f0f2:	61a3      	str	r3, [r4, #24]
 800f0f4:	6923      	ldr	r3, [r4, #16]
 800f0f6:	b943      	cbnz	r3, 800f10a <__swsetup_r+0xc6>
 800f0f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f0fc:	d1ba      	bne.n	800f074 <__swsetup_r+0x30>
 800f0fe:	bd70      	pop	{r4, r5, r6, pc}
 800f100:	0781      	lsls	r1, r0, #30
 800f102:	bf58      	it	pl
 800f104:	6963      	ldrpl	r3, [r4, #20]
 800f106:	60a3      	str	r3, [r4, #8]
 800f108:	e7f4      	b.n	800f0f4 <__swsetup_r+0xb0>
 800f10a:	2000      	movs	r0, #0
 800f10c:	e7f7      	b.n	800f0fe <__swsetup_r+0xba>
 800f10e:	bf00      	nop
 800f110:	200003b0 	.word	0x200003b0
 800f114:	080108b4 	.word	0x080108b4
 800f118:	080108d4 	.word	0x080108d4
 800f11c:	08010894 	.word	0x08010894

0800f120 <abort>:
 800f120:	b508      	push	{r3, lr}
 800f122:	2006      	movs	r0, #6
 800f124:	f000 fa50 	bl	800f5c8 <raise>
 800f128:	2001      	movs	r0, #1
 800f12a:	f7f3 f925 	bl	8002378 <_exit>
	...

0800f130 <__sflush_r>:
 800f130:	898a      	ldrh	r2, [r1, #12]
 800f132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f136:	4605      	mov	r5, r0
 800f138:	0710      	lsls	r0, r2, #28
 800f13a:	460c      	mov	r4, r1
 800f13c:	d458      	bmi.n	800f1f0 <__sflush_r+0xc0>
 800f13e:	684b      	ldr	r3, [r1, #4]
 800f140:	2b00      	cmp	r3, #0
 800f142:	dc05      	bgt.n	800f150 <__sflush_r+0x20>
 800f144:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f146:	2b00      	cmp	r3, #0
 800f148:	dc02      	bgt.n	800f150 <__sflush_r+0x20>
 800f14a:	2000      	movs	r0, #0
 800f14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f152:	2e00      	cmp	r6, #0
 800f154:	d0f9      	beq.n	800f14a <__sflush_r+0x1a>
 800f156:	2300      	movs	r3, #0
 800f158:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f15c:	682f      	ldr	r7, [r5, #0]
 800f15e:	602b      	str	r3, [r5, #0]
 800f160:	d032      	beq.n	800f1c8 <__sflush_r+0x98>
 800f162:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f164:	89a3      	ldrh	r3, [r4, #12]
 800f166:	075a      	lsls	r2, r3, #29
 800f168:	d505      	bpl.n	800f176 <__sflush_r+0x46>
 800f16a:	6863      	ldr	r3, [r4, #4]
 800f16c:	1ac0      	subs	r0, r0, r3
 800f16e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f170:	b10b      	cbz	r3, 800f176 <__sflush_r+0x46>
 800f172:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f174:	1ac0      	subs	r0, r0, r3
 800f176:	2300      	movs	r3, #0
 800f178:	4602      	mov	r2, r0
 800f17a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f17c:	6a21      	ldr	r1, [r4, #32]
 800f17e:	4628      	mov	r0, r5
 800f180:	47b0      	blx	r6
 800f182:	1c43      	adds	r3, r0, #1
 800f184:	89a3      	ldrh	r3, [r4, #12]
 800f186:	d106      	bne.n	800f196 <__sflush_r+0x66>
 800f188:	6829      	ldr	r1, [r5, #0]
 800f18a:	291d      	cmp	r1, #29
 800f18c:	d82c      	bhi.n	800f1e8 <__sflush_r+0xb8>
 800f18e:	4a2a      	ldr	r2, [pc, #168]	; (800f238 <__sflush_r+0x108>)
 800f190:	40ca      	lsrs	r2, r1
 800f192:	07d6      	lsls	r6, r2, #31
 800f194:	d528      	bpl.n	800f1e8 <__sflush_r+0xb8>
 800f196:	2200      	movs	r2, #0
 800f198:	6062      	str	r2, [r4, #4]
 800f19a:	04d9      	lsls	r1, r3, #19
 800f19c:	6922      	ldr	r2, [r4, #16]
 800f19e:	6022      	str	r2, [r4, #0]
 800f1a0:	d504      	bpl.n	800f1ac <__sflush_r+0x7c>
 800f1a2:	1c42      	adds	r2, r0, #1
 800f1a4:	d101      	bne.n	800f1aa <__sflush_r+0x7a>
 800f1a6:	682b      	ldr	r3, [r5, #0]
 800f1a8:	b903      	cbnz	r3, 800f1ac <__sflush_r+0x7c>
 800f1aa:	6560      	str	r0, [r4, #84]	; 0x54
 800f1ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1ae:	602f      	str	r7, [r5, #0]
 800f1b0:	2900      	cmp	r1, #0
 800f1b2:	d0ca      	beq.n	800f14a <__sflush_r+0x1a>
 800f1b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1b8:	4299      	cmp	r1, r3
 800f1ba:	d002      	beq.n	800f1c2 <__sflush_r+0x92>
 800f1bc:	4628      	mov	r0, r5
 800f1be:	f7fb fe67 	bl	800ae90 <_free_r>
 800f1c2:	2000      	movs	r0, #0
 800f1c4:	6360      	str	r0, [r4, #52]	; 0x34
 800f1c6:	e7c1      	b.n	800f14c <__sflush_r+0x1c>
 800f1c8:	6a21      	ldr	r1, [r4, #32]
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	4628      	mov	r0, r5
 800f1ce:	47b0      	blx	r6
 800f1d0:	1c41      	adds	r1, r0, #1
 800f1d2:	d1c7      	bne.n	800f164 <__sflush_r+0x34>
 800f1d4:	682b      	ldr	r3, [r5, #0]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d0c4      	beq.n	800f164 <__sflush_r+0x34>
 800f1da:	2b1d      	cmp	r3, #29
 800f1dc:	d001      	beq.n	800f1e2 <__sflush_r+0xb2>
 800f1de:	2b16      	cmp	r3, #22
 800f1e0:	d101      	bne.n	800f1e6 <__sflush_r+0xb6>
 800f1e2:	602f      	str	r7, [r5, #0]
 800f1e4:	e7b1      	b.n	800f14a <__sflush_r+0x1a>
 800f1e6:	89a3      	ldrh	r3, [r4, #12]
 800f1e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1ec:	81a3      	strh	r3, [r4, #12]
 800f1ee:	e7ad      	b.n	800f14c <__sflush_r+0x1c>
 800f1f0:	690f      	ldr	r7, [r1, #16]
 800f1f2:	2f00      	cmp	r7, #0
 800f1f4:	d0a9      	beq.n	800f14a <__sflush_r+0x1a>
 800f1f6:	0793      	lsls	r3, r2, #30
 800f1f8:	680e      	ldr	r6, [r1, #0]
 800f1fa:	bf08      	it	eq
 800f1fc:	694b      	ldreq	r3, [r1, #20]
 800f1fe:	600f      	str	r7, [r1, #0]
 800f200:	bf18      	it	ne
 800f202:	2300      	movne	r3, #0
 800f204:	eba6 0807 	sub.w	r8, r6, r7
 800f208:	608b      	str	r3, [r1, #8]
 800f20a:	f1b8 0f00 	cmp.w	r8, #0
 800f20e:	dd9c      	ble.n	800f14a <__sflush_r+0x1a>
 800f210:	6a21      	ldr	r1, [r4, #32]
 800f212:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f214:	4643      	mov	r3, r8
 800f216:	463a      	mov	r2, r7
 800f218:	4628      	mov	r0, r5
 800f21a:	47b0      	blx	r6
 800f21c:	2800      	cmp	r0, #0
 800f21e:	dc06      	bgt.n	800f22e <__sflush_r+0xfe>
 800f220:	89a3      	ldrh	r3, [r4, #12]
 800f222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f226:	81a3      	strh	r3, [r4, #12]
 800f228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f22c:	e78e      	b.n	800f14c <__sflush_r+0x1c>
 800f22e:	4407      	add	r7, r0
 800f230:	eba8 0800 	sub.w	r8, r8, r0
 800f234:	e7e9      	b.n	800f20a <__sflush_r+0xda>
 800f236:	bf00      	nop
 800f238:	20400001 	.word	0x20400001

0800f23c <_fflush_r>:
 800f23c:	b538      	push	{r3, r4, r5, lr}
 800f23e:	690b      	ldr	r3, [r1, #16]
 800f240:	4605      	mov	r5, r0
 800f242:	460c      	mov	r4, r1
 800f244:	b913      	cbnz	r3, 800f24c <_fflush_r+0x10>
 800f246:	2500      	movs	r5, #0
 800f248:	4628      	mov	r0, r5
 800f24a:	bd38      	pop	{r3, r4, r5, pc}
 800f24c:	b118      	cbz	r0, 800f256 <_fflush_r+0x1a>
 800f24e:	6983      	ldr	r3, [r0, #24]
 800f250:	b90b      	cbnz	r3, 800f256 <_fflush_r+0x1a>
 800f252:	f000 f887 	bl	800f364 <__sinit>
 800f256:	4b14      	ldr	r3, [pc, #80]	; (800f2a8 <_fflush_r+0x6c>)
 800f258:	429c      	cmp	r4, r3
 800f25a:	d11b      	bne.n	800f294 <_fflush_r+0x58>
 800f25c:	686c      	ldr	r4, [r5, #4]
 800f25e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d0ef      	beq.n	800f246 <_fflush_r+0xa>
 800f266:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f268:	07d0      	lsls	r0, r2, #31
 800f26a:	d404      	bmi.n	800f276 <_fflush_r+0x3a>
 800f26c:	0599      	lsls	r1, r3, #22
 800f26e:	d402      	bmi.n	800f276 <_fflush_r+0x3a>
 800f270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f272:	f7ff fcf0 	bl	800ec56 <__retarget_lock_acquire_recursive>
 800f276:	4628      	mov	r0, r5
 800f278:	4621      	mov	r1, r4
 800f27a:	f7ff ff59 	bl	800f130 <__sflush_r>
 800f27e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f280:	07da      	lsls	r2, r3, #31
 800f282:	4605      	mov	r5, r0
 800f284:	d4e0      	bmi.n	800f248 <_fflush_r+0xc>
 800f286:	89a3      	ldrh	r3, [r4, #12]
 800f288:	059b      	lsls	r3, r3, #22
 800f28a:	d4dd      	bmi.n	800f248 <_fflush_r+0xc>
 800f28c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f28e:	f7ff fce3 	bl	800ec58 <__retarget_lock_release_recursive>
 800f292:	e7d9      	b.n	800f248 <_fflush_r+0xc>
 800f294:	4b05      	ldr	r3, [pc, #20]	; (800f2ac <_fflush_r+0x70>)
 800f296:	429c      	cmp	r4, r3
 800f298:	d101      	bne.n	800f29e <_fflush_r+0x62>
 800f29a:	68ac      	ldr	r4, [r5, #8]
 800f29c:	e7df      	b.n	800f25e <_fflush_r+0x22>
 800f29e:	4b04      	ldr	r3, [pc, #16]	; (800f2b0 <_fflush_r+0x74>)
 800f2a0:	429c      	cmp	r4, r3
 800f2a2:	bf08      	it	eq
 800f2a4:	68ec      	ldreq	r4, [r5, #12]
 800f2a6:	e7da      	b.n	800f25e <_fflush_r+0x22>
 800f2a8:	080108b4 	.word	0x080108b4
 800f2ac:	080108d4 	.word	0x080108d4
 800f2b0:	08010894 	.word	0x08010894

0800f2b4 <std>:
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	b510      	push	{r4, lr}
 800f2b8:	4604      	mov	r4, r0
 800f2ba:	e9c0 3300 	strd	r3, r3, [r0]
 800f2be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f2c2:	6083      	str	r3, [r0, #8]
 800f2c4:	8181      	strh	r1, [r0, #12]
 800f2c6:	6643      	str	r3, [r0, #100]	; 0x64
 800f2c8:	81c2      	strh	r2, [r0, #14]
 800f2ca:	6183      	str	r3, [r0, #24]
 800f2cc:	4619      	mov	r1, r3
 800f2ce:	2208      	movs	r2, #8
 800f2d0:	305c      	adds	r0, #92	; 0x5c
 800f2d2:	f7fb fdd5 	bl	800ae80 <memset>
 800f2d6:	4b05      	ldr	r3, [pc, #20]	; (800f2ec <std+0x38>)
 800f2d8:	6263      	str	r3, [r4, #36]	; 0x24
 800f2da:	4b05      	ldr	r3, [pc, #20]	; (800f2f0 <std+0x3c>)
 800f2dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800f2de:	4b05      	ldr	r3, [pc, #20]	; (800f2f4 <std+0x40>)
 800f2e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f2e2:	4b05      	ldr	r3, [pc, #20]	; (800f2f8 <std+0x44>)
 800f2e4:	6224      	str	r4, [r4, #32]
 800f2e6:	6323      	str	r3, [r4, #48]	; 0x30
 800f2e8:	bd10      	pop	{r4, pc}
 800f2ea:	bf00      	nop
 800f2ec:	0800f601 	.word	0x0800f601
 800f2f0:	0800f623 	.word	0x0800f623
 800f2f4:	0800f65b 	.word	0x0800f65b
 800f2f8:	0800f67f 	.word	0x0800f67f

0800f2fc <_cleanup_r>:
 800f2fc:	4901      	ldr	r1, [pc, #4]	; (800f304 <_cleanup_r+0x8>)
 800f2fe:	f000 b8af 	b.w	800f460 <_fwalk_reent>
 800f302:	bf00      	nop
 800f304:	0800f23d 	.word	0x0800f23d

0800f308 <__sfmoreglue>:
 800f308:	b570      	push	{r4, r5, r6, lr}
 800f30a:	2268      	movs	r2, #104	; 0x68
 800f30c:	1e4d      	subs	r5, r1, #1
 800f30e:	4355      	muls	r5, r2
 800f310:	460e      	mov	r6, r1
 800f312:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f316:	f7fb fe27 	bl	800af68 <_malloc_r>
 800f31a:	4604      	mov	r4, r0
 800f31c:	b140      	cbz	r0, 800f330 <__sfmoreglue+0x28>
 800f31e:	2100      	movs	r1, #0
 800f320:	e9c0 1600 	strd	r1, r6, [r0]
 800f324:	300c      	adds	r0, #12
 800f326:	60a0      	str	r0, [r4, #8]
 800f328:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f32c:	f7fb fda8 	bl	800ae80 <memset>
 800f330:	4620      	mov	r0, r4
 800f332:	bd70      	pop	{r4, r5, r6, pc}

0800f334 <__sfp_lock_acquire>:
 800f334:	4801      	ldr	r0, [pc, #4]	; (800f33c <__sfp_lock_acquire+0x8>)
 800f336:	f7ff bc8e 	b.w	800ec56 <__retarget_lock_acquire_recursive>
 800f33a:	bf00      	nop
 800f33c:	20002915 	.word	0x20002915

0800f340 <__sfp_lock_release>:
 800f340:	4801      	ldr	r0, [pc, #4]	; (800f348 <__sfp_lock_release+0x8>)
 800f342:	f7ff bc89 	b.w	800ec58 <__retarget_lock_release_recursive>
 800f346:	bf00      	nop
 800f348:	20002915 	.word	0x20002915

0800f34c <__sinit_lock_acquire>:
 800f34c:	4801      	ldr	r0, [pc, #4]	; (800f354 <__sinit_lock_acquire+0x8>)
 800f34e:	f7ff bc82 	b.w	800ec56 <__retarget_lock_acquire_recursive>
 800f352:	bf00      	nop
 800f354:	20002916 	.word	0x20002916

0800f358 <__sinit_lock_release>:
 800f358:	4801      	ldr	r0, [pc, #4]	; (800f360 <__sinit_lock_release+0x8>)
 800f35a:	f7ff bc7d 	b.w	800ec58 <__retarget_lock_release_recursive>
 800f35e:	bf00      	nop
 800f360:	20002916 	.word	0x20002916

0800f364 <__sinit>:
 800f364:	b510      	push	{r4, lr}
 800f366:	4604      	mov	r4, r0
 800f368:	f7ff fff0 	bl	800f34c <__sinit_lock_acquire>
 800f36c:	69a3      	ldr	r3, [r4, #24]
 800f36e:	b11b      	cbz	r3, 800f378 <__sinit+0x14>
 800f370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f374:	f7ff bff0 	b.w	800f358 <__sinit_lock_release>
 800f378:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f37c:	6523      	str	r3, [r4, #80]	; 0x50
 800f37e:	4b13      	ldr	r3, [pc, #76]	; (800f3cc <__sinit+0x68>)
 800f380:	4a13      	ldr	r2, [pc, #76]	; (800f3d0 <__sinit+0x6c>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	62a2      	str	r2, [r4, #40]	; 0x28
 800f386:	42a3      	cmp	r3, r4
 800f388:	bf04      	itt	eq
 800f38a:	2301      	moveq	r3, #1
 800f38c:	61a3      	streq	r3, [r4, #24]
 800f38e:	4620      	mov	r0, r4
 800f390:	f000 f820 	bl	800f3d4 <__sfp>
 800f394:	6060      	str	r0, [r4, #4]
 800f396:	4620      	mov	r0, r4
 800f398:	f000 f81c 	bl	800f3d4 <__sfp>
 800f39c:	60a0      	str	r0, [r4, #8]
 800f39e:	4620      	mov	r0, r4
 800f3a0:	f000 f818 	bl	800f3d4 <__sfp>
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	60e0      	str	r0, [r4, #12]
 800f3a8:	2104      	movs	r1, #4
 800f3aa:	6860      	ldr	r0, [r4, #4]
 800f3ac:	f7ff ff82 	bl	800f2b4 <std>
 800f3b0:	68a0      	ldr	r0, [r4, #8]
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	2109      	movs	r1, #9
 800f3b6:	f7ff ff7d 	bl	800f2b4 <std>
 800f3ba:	68e0      	ldr	r0, [r4, #12]
 800f3bc:	2202      	movs	r2, #2
 800f3be:	2112      	movs	r1, #18
 800f3c0:	f7ff ff78 	bl	800f2b4 <std>
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	61a3      	str	r3, [r4, #24]
 800f3c8:	e7d2      	b.n	800f370 <__sinit+0xc>
 800f3ca:	bf00      	nop
 800f3cc:	0801044c 	.word	0x0801044c
 800f3d0:	0800f2fd 	.word	0x0800f2fd

0800f3d4 <__sfp>:
 800f3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3d6:	4607      	mov	r7, r0
 800f3d8:	f7ff ffac 	bl	800f334 <__sfp_lock_acquire>
 800f3dc:	4b1e      	ldr	r3, [pc, #120]	; (800f458 <__sfp+0x84>)
 800f3de:	681e      	ldr	r6, [r3, #0]
 800f3e0:	69b3      	ldr	r3, [r6, #24]
 800f3e2:	b913      	cbnz	r3, 800f3ea <__sfp+0x16>
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	f7ff ffbd 	bl	800f364 <__sinit>
 800f3ea:	3648      	adds	r6, #72	; 0x48
 800f3ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f3f0:	3b01      	subs	r3, #1
 800f3f2:	d503      	bpl.n	800f3fc <__sfp+0x28>
 800f3f4:	6833      	ldr	r3, [r6, #0]
 800f3f6:	b30b      	cbz	r3, 800f43c <__sfp+0x68>
 800f3f8:	6836      	ldr	r6, [r6, #0]
 800f3fa:	e7f7      	b.n	800f3ec <__sfp+0x18>
 800f3fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f400:	b9d5      	cbnz	r5, 800f438 <__sfp+0x64>
 800f402:	4b16      	ldr	r3, [pc, #88]	; (800f45c <__sfp+0x88>)
 800f404:	60e3      	str	r3, [r4, #12]
 800f406:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f40a:	6665      	str	r5, [r4, #100]	; 0x64
 800f40c:	f7ff fc22 	bl	800ec54 <__retarget_lock_init_recursive>
 800f410:	f7ff ff96 	bl	800f340 <__sfp_lock_release>
 800f414:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f418:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f41c:	6025      	str	r5, [r4, #0]
 800f41e:	61a5      	str	r5, [r4, #24]
 800f420:	2208      	movs	r2, #8
 800f422:	4629      	mov	r1, r5
 800f424:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f428:	f7fb fd2a 	bl	800ae80 <memset>
 800f42c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f430:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f434:	4620      	mov	r0, r4
 800f436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f438:	3468      	adds	r4, #104	; 0x68
 800f43a:	e7d9      	b.n	800f3f0 <__sfp+0x1c>
 800f43c:	2104      	movs	r1, #4
 800f43e:	4638      	mov	r0, r7
 800f440:	f7ff ff62 	bl	800f308 <__sfmoreglue>
 800f444:	4604      	mov	r4, r0
 800f446:	6030      	str	r0, [r6, #0]
 800f448:	2800      	cmp	r0, #0
 800f44a:	d1d5      	bne.n	800f3f8 <__sfp+0x24>
 800f44c:	f7ff ff78 	bl	800f340 <__sfp_lock_release>
 800f450:	230c      	movs	r3, #12
 800f452:	603b      	str	r3, [r7, #0]
 800f454:	e7ee      	b.n	800f434 <__sfp+0x60>
 800f456:	bf00      	nop
 800f458:	0801044c 	.word	0x0801044c
 800f45c:	ffff0001 	.word	0xffff0001

0800f460 <_fwalk_reent>:
 800f460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f464:	4606      	mov	r6, r0
 800f466:	4688      	mov	r8, r1
 800f468:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f46c:	2700      	movs	r7, #0
 800f46e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f472:	f1b9 0901 	subs.w	r9, r9, #1
 800f476:	d505      	bpl.n	800f484 <_fwalk_reent+0x24>
 800f478:	6824      	ldr	r4, [r4, #0]
 800f47a:	2c00      	cmp	r4, #0
 800f47c:	d1f7      	bne.n	800f46e <_fwalk_reent+0xe>
 800f47e:	4638      	mov	r0, r7
 800f480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f484:	89ab      	ldrh	r3, [r5, #12]
 800f486:	2b01      	cmp	r3, #1
 800f488:	d907      	bls.n	800f49a <_fwalk_reent+0x3a>
 800f48a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f48e:	3301      	adds	r3, #1
 800f490:	d003      	beq.n	800f49a <_fwalk_reent+0x3a>
 800f492:	4629      	mov	r1, r5
 800f494:	4630      	mov	r0, r6
 800f496:	47c0      	blx	r8
 800f498:	4307      	orrs	r7, r0
 800f49a:	3568      	adds	r5, #104	; 0x68
 800f49c:	e7e9      	b.n	800f472 <_fwalk_reent+0x12>

0800f49e <__swhatbuf_r>:
 800f49e:	b570      	push	{r4, r5, r6, lr}
 800f4a0:	460e      	mov	r6, r1
 800f4a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4a6:	2900      	cmp	r1, #0
 800f4a8:	b096      	sub	sp, #88	; 0x58
 800f4aa:	4614      	mov	r4, r2
 800f4ac:	461d      	mov	r5, r3
 800f4ae:	da08      	bge.n	800f4c2 <__swhatbuf_r+0x24>
 800f4b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	602a      	str	r2, [r5, #0]
 800f4b8:	061a      	lsls	r2, r3, #24
 800f4ba:	d410      	bmi.n	800f4de <__swhatbuf_r+0x40>
 800f4bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4c0:	e00e      	b.n	800f4e0 <__swhatbuf_r+0x42>
 800f4c2:	466a      	mov	r2, sp
 800f4c4:	f000 f902 	bl	800f6cc <_fstat_r>
 800f4c8:	2800      	cmp	r0, #0
 800f4ca:	dbf1      	blt.n	800f4b0 <__swhatbuf_r+0x12>
 800f4cc:	9a01      	ldr	r2, [sp, #4]
 800f4ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f4d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f4d6:	425a      	negs	r2, r3
 800f4d8:	415a      	adcs	r2, r3
 800f4da:	602a      	str	r2, [r5, #0]
 800f4dc:	e7ee      	b.n	800f4bc <__swhatbuf_r+0x1e>
 800f4de:	2340      	movs	r3, #64	; 0x40
 800f4e0:	2000      	movs	r0, #0
 800f4e2:	6023      	str	r3, [r4, #0]
 800f4e4:	b016      	add	sp, #88	; 0x58
 800f4e6:	bd70      	pop	{r4, r5, r6, pc}

0800f4e8 <__smakebuf_r>:
 800f4e8:	898b      	ldrh	r3, [r1, #12]
 800f4ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f4ec:	079d      	lsls	r5, r3, #30
 800f4ee:	4606      	mov	r6, r0
 800f4f0:	460c      	mov	r4, r1
 800f4f2:	d507      	bpl.n	800f504 <__smakebuf_r+0x1c>
 800f4f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f4f8:	6023      	str	r3, [r4, #0]
 800f4fa:	6123      	str	r3, [r4, #16]
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	6163      	str	r3, [r4, #20]
 800f500:	b002      	add	sp, #8
 800f502:	bd70      	pop	{r4, r5, r6, pc}
 800f504:	ab01      	add	r3, sp, #4
 800f506:	466a      	mov	r2, sp
 800f508:	f7ff ffc9 	bl	800f49e <__swhatbuf_r>
 800f50c:	9900      	ldr	r1, [sp, #0]
 800f50e:	4605      	mov	r5, r0
 800f510:	4630      	mov	r0, r6
 800f512:	f7fb fd29 	bl	800af68 <_malloc_r>
 800f516:	b948      	cbnz	r0, 800f52c <__smakebuf_r+0x44>
 800f518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f51c:	059a      	lsls	r2, r3, #22
 800f51e:	d4ef      	bmi.n	800f500 <__smakebuf_r+0x18>
 800f520:	f023 0303 	bic.w	r3, r3, #3
 800f524:	f043 0302 	orr.w	r3, r3, #2
 800f528:	81a3      	strh	r3, [r4, #12]
 800f52a:	e7e3      	b.n	800f4f4 <__smakebuf_r+0xc>
 800f52c:	4b0d      	ldr	r3, [pc, #52]	; (800f564 <__smakebuf_r+0x7c>)
 800f52e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f530:	89a3      	ldrh	r3, [r4, #12]
 800f532:	6020      	str	r0, [r4, #0]
 800f534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f538:	81a3      	strh	r3, [r4, #12]
 800f53a:	9b00      	ldr	r3, [sp, #0]
 800f53c:	6163      	str	r3, [r4, #20]
 800f53e:	9b01      	ldr	r3, [sp, #4]
 800f540:	6120      	str	r0, [r4, #16]
 800f542:	b15b      	cbz	r3, 800f55c <__smakebuf_r+0x74>
 800f544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f548:	4630      	mov	r0, r6
 800f54a:	f000 f8d1 	bl	800f6f0 <_isatty_r>
 800f54e:	b128      	cbz	r0, 800f55c <__smakebuf_r+0x74>
 800f550:	89a3      	ldrh	r3, [r4, #12]
 800f552:	f023 0303 	bic.w	r3, r3, #3
 800f556:	f043 0301 	orr.w	r3, r3, #1
 800f55a:	81a3      	strh	r3, [r4, #12]
 800f55c:	89a0      	ldrh	r0, [r4, #12]
 800f55e:	4305      	orrs	r5, r0
 800f560:	81a5      	strh	r5, [r4, #12]
 800f562:	e7cd      	b.n	800f500 <__smakebuf_r+0x18>
 800f564:	0800f2fd 	.word	0x0800f2fd

0800f568 <_malloc_usable_size_r>:
 800f568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f56c:	1f18      	subs	r0, r3, #4
 800f56e:	2b00      	cmp	r3, #0
 800f570:	bfbc      	itt	lt
 800f572:	580b      	ldrlt	r3, [r1, r0]
 800f574:	18c0      	addlt	r0, r0, r3
 800f576:	4770      	bx	lr

0800f578 <_raise_r>:
 800f578:	291f      	cmp	r1, #31
 800f57a:	b538      	push	{r3, r4, r5, lr}
 800f57c:	4604      	mov	r4, r0
 800f57e:	460d      	mov	r5, r1
 800f580:	d904      	bls.n	800f58c <_raise_r+0x14>
 800f582:	2316      	movs	r3, #22
 800f584:	6003      	str	r3, [r0, #0]
 800f586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f58a:	bd38      	pop	{r3, r4, r5, pc}
 800f58c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f58e:	b112      	cbz	r2, 800f596 <_raise_r+0x1e>
 800f590:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f594:	b94b      	cbnz	r3, 800f5aa <_raise_r+0x32>
 800f596:	4620      	mov	r0, r4
 800f598:	f000 f830 	bl	800f5fc <_getpid_r>
 800f59c:	462a      	mov	r2, r5
 800f59e:	4601      	mov	r1, r0
 800f5a0:	4620      	mov	r0, r4
 800f5a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5a6:	f000 b817 	b.w	800f5d8 <_kill_r>
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d00a      	beq.n	800f5c4 <_raise_r+0x4c>
 800f5ae:	1c59      	adds	r1, r3, #1
 800f5b0:	d103      	bne.n	800f5ba <_raise_r+0x42>
 800f5b2:	2316      	movs	r3, #22
 800f5b4:	6003      	str	r3, [r0, #0]
 800f5b6:	2001      	movs	r0, #1
 800f5b8:	e7e7      	b.n	800f58a <_raise_r+0x12>
 800f5ba:	2400      	movs	r4, #0
 800f5bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	4798      	blx	r3
 800f5c4:	2000      	movs	r0, #0
 800f5c6:	e7e0      	b.n	800f58a <_raise_r+0x12>

0800f5c8 <raise>:
 800f5c8:	4b02      	ldr	r3, [pc, #8]	; (800f5d4 <raise+0xc>)
 800f5ca:	4601      	mov	r1, r0
 800f5cc:	6818      	ldr	r0, [r3, #0]
 800f5ce:	f7ff bfd3 	b.w	800f578 <_raise_r>
 800f5d2:	bf00      	nop
 800f5d4:	200003b0 	.word	0x200003b0

0800f5d8 <_kill_r>:
 800f5d8:	b538      	push	{r3, r4, r5, lr}
 800f5da:	4d07      	ldr	r5, [pc, #28]	; (800f5f8 <_kill_r+0x20>)
 800f5dc:	2300      	movs	r3, #0
 800f5de:	4604      	mov	r4, r0
 800f5e0:	4608      	mov	r0, r1
 800f5e2:	4611      	mov	r1, r2
 800f5e4:	602b      	str	r3, [r5, #0]
 800f5e6:	f7f2 febf 	bl	8002368 <_kill>
 800f5ea:	1c43      	adds	r3, r0, #1
 800f5ec:	d102      	bne.n	800f5f4 <_kill_r+0x1c>
 800f5ee:	682b      	ldr	r3, [r5, #0]
 800f5f0:	b103      	cbz	r3, 800f5f4 <_kill_r+0x1c>
 800f5f2:	6023      	str	r3, [r4, #0]
 800f5f4:	bd38      	pop	{r3, r4, r5, pc}
 800f5f6:	bf00      	nop
 800f5f8:	20002910 	.word	0x20002910

0800f5fc <_getpid_r>:
 800f5fc:	f7f2 beb2 	b.w	8002364 <_getpid>

0800f600 <__sread>:
 800f600:	b510      	push	{r4, lr}
 800f602:	460c      	mov	r4, r1
 800f604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f608:	f000 f894 	bl	800f734 <_read_r>
 800f60c:	2800      	cmp	r0, #0
 800f60e:	bfab      	itete	ge
 800f610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f612:	89a3      	ldrhlt	r3, [r4, #12]
 800f614:	181b      	addge	r3, r3, r0
 800f616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f61a:	bfac      	ite	ge
 800f61c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f61e:	81a3      	strhlt	r3, [r4, #12]
 800f620:	bd10      	pop	{r4, pc}

0800f622 <__swrite>:
 800f622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f626:	461f      	mov	r7, r3
 800f628:	898b      	ldrh	r3, [r1, #12]
 800f62a:	05db      	lsls	r3, r3, #23
 800f62c:	4605      	mov	r5, r0
 800f62e:	460c      	mov	r4, r1
 800f630:	4616      	mov	r6, r2
 800f632:	d505      	bpl.n	800f640 <__swrite+0x1e>
 800f634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f638:	2302      	movs	r3, #2
 800f63a:	2200      	movs	r2, #0
 800f63c:	f000 f868 	bl	800f710 <_lseek_r>
 800f640:	89a3      	ldrh	r3, [r4, #12]
 800f642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f64a:	81a3      	strh	r3, [r4, #12]
 800f64c:	4632      	mov	r2, r6
 800f64e:	463b      	mov	r3, r7
 800f650:	4628      	mov	r0, r5
 800f652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f656:	f000 b817 	b.w	800f688 <_write_r>

0800f65a <__sseek>:
 800f65a:	b510      	push	{r4, lr}
 800f65c:	460c      	mov	r4, r1
 800f65e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f662:	f000 f855 	bl	800f710 <_lseek_r>
 800f666:	1c43      	adds	r3, r0, #1
 800f668:	89a3      	ldrh	r3, [r4, #12]
 800f66a:	bf15      	itete	ne
 800f66c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f66e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f676:	81a3      	strheq	r3, [r4, #12]
 800f678:	bf18      	it	ne
 800f67a:	81a3      	strhne	r3, [r4, #12]
 800f67c:	bd10      	pop	{r4, pc}

0800f67e <__sclose>:
 800f67e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f682:	f000 b813 	b.w	800f6ac <_close_r>
	...

0800f688 <_write_r>:
 800f688:	b538      	push	{r3, r4, r5, lr}
 800f68a:	4d07      	ldr	r5, [pc, #28]	; (800f6a8 <_write_r+0x20>)
 800f68c:	4604      	mov	r4, r0
 800f68e:	4608      	mov	r0, r1
 800f690:	4611      	mov	r1, r2
 800f692:	2200      	movs	r2, #0
 800f694:	602a      	str	r2, [r5, #0]
 800f696:	461a      	mov	r2, r3
 800f698:	f7f2 fe84 	bl	80023a4 <_write>
 800f69c:	1c43      	adds	r3, r0, #1
 800f69e:	d102      	bne.n	800f6a6 <_write_r+0x1e>
 800f6a0:	682b      	ldr	r3, [r5, #0]
 800f6a2:	b103      	cbz	r3, 800f6a6 <_write_r+0x1e>
 800f6a4:	6023      	str	r3, [r4, #0]
 800f6a6:	bd38      	pop	{r3, r4, r5, pc}
 800f6a8:	20002910 	.word	0x20002910

0800f6ac <_close_r>:
 800f6ac:	b538      	push	{r3, r4, r5, lr}
 800f6ae:	4d06      	ldr	r5, [pc, #24]	; (800f6c8 <_close_r+0x1c>)
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	4604      	mov	r4, r0
 800f6b4:	4608      	mov	r0, r1
 800f6b6:	602b      	str	r3, [r5, #0]
 800f6b8:	f7f2 fe82 	bl	80023c0 <_close>
 800f6bc:	1c43      	adds	r3, r0, #1
 800f6be:	d102      	bne.n	800f6c6 <_close_r+0x1a>
 800f6c0:	682b      	ldr	r3, [r5, #0]
 800f6c2:	b103      	cbz	r3, 800f6c6 <_close_r+0x1a>
 800f6c4:	6023      	str	r3, [r4, #0]
 800f6c6:	bd38      	pop	{r3, r4, r5, pc}
 800f6c8:	20002910 	.word	0x20002910

0800f6cc <_fstat_r>:
 800f6cc:	b538      	push	{r3, r4, r5, lr}
 800f6ce:	4d07      	ldr	r5, [pc, #28]	; (800f6ec <_fstat_r+0x20>)
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	4604      	mov	r4, r0
 800f6d4:	4608      	mov	r0, r1
 800f6d6:	4611      	mov	r1, r2
 800f6d8:	602b      	str	r3, [r5, #0]
 800f6da:	f7f2 fe74 	bl	80023c6 <_fstat>
 800f6de:	1c43      	adds	r3, r0, #1
 800f6e0:	d102      	bne.n	800f6e8 <_fstat_r+0x1c>
 800f6e2:	682b      	ldr	r3, [r5, #0]
 800f6e4:	b103      	cbz	r3, 800f6e8 <_fstat_r+0x1c>
 800f6e6:	6023      	str	r3, [r4, #0]
 800f6e8:	bd38      	pop	{r3, r4, r5, pc}
 800f6ea:	bf00      	nop
 800f6ec:	20002910 	.word	0x20002910

0800f6f0 <_isatty_r>:
 800f6f0:	b538      	push	{r3, r4, r5, lr}
 800f6f2:	4d06      	ldr	r5, [pc, #24]	; (800f70c <_isatty_r+0x1c>)
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	4604      	mov	r4, r0
 800f6f8:	4608      	mov	r0, r1
 800f6fa:	602b      	str	r3, [r5, #0]
 800f6fc:	f7f2 fe68 	bl	80023d0 <_isatty>
 800f700:	1c43      	adds	r3, r0, #1
 800f702:	d102      	bne.n	800f70a <_isatty_r+0x1a>
 800f704:	682b      	ldr	r3, [r5, #0]
 800f706:	b103      	cbz	r3, 800f70a <_isatty_r+0x1a>
 800f708:	6023      	str	r3, [r4, #0]
 800f70a:	bd38      	pop	{r3, r4, r5, pc}
 800f70c:	20002910 	.word	0x20002910

0800f710 <_lseek_r>:
 800f710:	b538      	push	{r3, r4, r5, lr}
 800f712:	4d07      	ldr	r5, [pc, #28]	; (800f730 <_lseek_r+0x20>)
 800f714:	4604      	mov	r4, r0
 800f716:	4608      	mov	r0, r1
 800f718:	4611      	mov	r1, r2
 800f71a:	2200      	movs	r2, #0
 800f71c:	602a      	str	r2, [r5, #0]
 800f71e:	461a      	mov	r2, r3
 800f720:	f7f2 fe58 	bl	80023d4 <_lseek>
 800f724:	1c43      	adds	r3, r0, #1
 800f726:	d102      	bne.n	800f72e <_lseek_r+0x1e>
 800f728:	682b      	ldr	r3, [r5, #0]
 800f72a:	b103      	cbz	r3, 800f72e <_lseek_r+0x1e>
 800f72c:	6023      	str	r3, [r4, #0]
 800f72e:	bd38      	pop	{r3, r4, r5, pc}
 800f730:	20002910 	.word	0x20002910

0800f734 <_read_r>:
 800f734:	b538      	push	{r3, r4, r5, lr}
 800f736:	4d07      	ldr	r5, [pc, #28]	; (800f754 <_read_r+0x20>)
 800f738:	4604      	mov	r4, r0
 800f73a:	4608      	mov	r0, r1
 800f73c:	4611      	mov	r1, r2
 800f73e:	2200      	movs	r2, #0
 800f740:	602a      	str	r2, [r5, #0]
 800f742:	461a      	mov	r2, r3
 800f744:	f7f2 fe1e 	bl	8002384 <_read>
 800f748:	1c43      	adds	r3, r0, #1
 800f74a:	d102      	bne.n	800f752 <_read_r+0x1e>
 800f74c:	682b      	ldr	r3, [r5, #0]
 800f74e:	b103      	cbz	r3, 800f752 <_read_r+0x1e>
 800f750:	6023      	str	r3, [r4, #0]
 800f752:	bd38      	pop	{r3, r4, r5, pc}
 800f754:	20002910 	.word	0x20002910

0800f758 <_init>:
 800f758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f75a:	bf00      	nop
 800f75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f75e:	bc08      	pop	{r3}
 800f760:	469e      	mov	lr, r3
 800f762:	4770      	bx	lr

0800f764 <_fini>:
 800f764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f766:	bf00      	nop
 800f768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f76a:	bc08      	pop	{r3}
 800f76c:	469e      	mov	lr, r3
 800f76e:	4770      	bx	lr
