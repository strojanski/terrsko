
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f360  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001194  0800f540  0800f540  0001f540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106d4  080106d4  00030358  2**0
                  CONTENTS
  4 .ARM          00000008  080106d4  080106d4  000206d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106dc  080106dc  00030358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106dc  080106dc  000206dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080106e0  080106e0  000206e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  080106e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000238c  20000358  08010a3c  00030358  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200026e4  08010a3c  000326e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004e61a  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008ead  00000000  00000000  0007e9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00035c31  00000000  00000000  0008784f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e08  00000000  00000000  000bd480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003378  00000000  00000000  000c0288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038dd8  00000000  00000000  000c3600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000531ad  00000000  00000000  000fc3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001400ac  00000000  00000000  0014f585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0028f631  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009148  00000000  00000000  0028f684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000358 	.word	0x20000358
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f528 	.word	0x0800f528

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000035c 	.word	0x2000035c
 800021c:	0800f528 	.word	0x0800f528

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001048:	b510      	push	{r4, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800104c:	2400      	movs	r4, #0
 800104e:	9409      	str	r4, [sp, #36]	; 0x24
 8001050:	940a      	str	r4, [sp, #40]	; 0x28
 8001052:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8001054:	2220      	movs	r2, #32
 8001056:	4621      	mov	r1, r4
 8001058:	a801      	add	r0, sp, #4
 800105a:	f009 fdf7 	bl	800ac4c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800105e:	4820      	ldr	r0, [pc, #128]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001060:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001064:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001066:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800106a:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106c:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106e:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 8001070:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001072:	6144      	str	r4, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001074:	2304      	movs	r3, #4
 8001076:	6183      	str	r3, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001078:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800107a:	7744      	strb	r4, [r0, #29]
  hadc1.Init.NbrOfConversion = 1;
 800107c:	2301      	movs	r3, #1
 800107e:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001080:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001084:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001086:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001088:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800108c:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800108e:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001092:	f002 f867 	bl	8003164 <HAL_ADC_Init>
 8001096:	b9c8      	cbnz	r0, 80010cc <MX_ADC1_Init+0x84>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001098:	2300      	movs	r3, #0
 800109a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800109c:	a909      	add	r1, sp, #36	; 0x24
 800109e:	4810      	ldr	r0, [pc, #64]	; (80010e0 <MX_ADC1_Init+0x98>)
 80010a0:	f002 fc50 	bl	8003944 <HAL_ADCEx_MultiModeConfigChannel>
 80010a4:	b9a8      	cbnz	r0, 80010d2 <MX_ADC1_Init+0x8a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_ADC1_Init+0x9c>)
 80010a8:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010aa:	2306      	movs	r3, #6
 80010ac:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ae:	2300      	movs	r3, #0
 80010b0:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b2:	227f      	movs	r2, #127	; 0x7f
 80010b4:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010b6:	2204      	movs	r2, #4
 80010b8:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 80010ba:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010bc:	eb0d 0102 	add.w	r1, sp, r2
 80010c0:	4807      	ldr	r0, [pc, #28]	; (80010e0 <MX_ADC1_Init+0x98>)
 80010c2:	f002 f9a3 	bl	800340c <HAL_ADC_ConfigChannel>
 80010c6:	b938      	cbnz	r0, 80010d8 <MX_ADC1_Init+0x90>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c8:	b00c      	add	sp, #48	; 0x30
 80010ca:	bd10      	pop	{r4, pc}
    Error_Handler();
 80010cc:	f000 feb0 	bl	8001e30 <Error_Handler>
 80010d0:	e7e2      	b.n	8001098 <MX_ADC1_Init+0x50>
    Error_Handler();
 80010d2:	f000 fead 	bl	8001e30 <Error_Handler>
 80010d6:	e7e6      	b.n	80010a6 <MX_ADC1_Init+0x5e>
    Error_Handler();
 80010d8:	f000 feaa 	bl	8001e30 <Error_Handler>
}
 80010dc:	e7f4      	b.n	80010c8 <MX_ADC1_Init+0x80>
 80010de:	bf00      	nop
 80010e0:	2000037c 	.word	0x2000037c
 80010e4:	08600004 	.word	0x08600004

080010e8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010e8:	b500      	push	{lr}
 80010ea:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ec:	2220      	movs	r2, #32
 80010ee:	2100      	movs	r1, #0
 80010f0:	4668      	mov	r0, sp
 80010f2:	f009 fdab 	bl	800ac4c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010f6:	481b      	ldr	r0, [pc, #108]	; (8001164 <MX_ADC2_Init+0x7c>)
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <MX_ADC2_Init+0x80>)
 80010fa:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010fc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001100:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001102:	2300      	movs	r3, #0
 8001104:	6083      	str	r3, [r0, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001106:	60c3      	str	r3, [r0, #12]
  hadc2.Init.GainCompensation = 0;
 8001108:	6103      	str	r3, [r0, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800110a:	6143      	str	r3, [r0, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800110c:	2204      	movs	r2, #4
 800110e:	6182      	str	r2, [r0, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001110:	7703      	strb	r3, [r0, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001112:	7743      	strb	r3, [r0, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001114:	2201      	movs	r2, #1
 8001116:	6202      	str	r2, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001118:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800111c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111e:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001120:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001124:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001126:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800112a:	f002 f81b 	bl	8003164 <HAL_ADC_Init>
 800112e:	b990      	cbnz	r0, 8001156 <MX_ADC2_Init+0x6e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_ADC2_Init+0x84>)
 8001132:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001134:	2306      	movs	r3, #6
 8001136:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001138:	2300      	movs	r3, #0
 800113a:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800113c:	227f      	movs	r2, #127	; 0x7f
 800113e:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001140:	2204      	movs	r2, #4
 8001142:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 8001144:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001146:	4669      	mov	r1, sp
 8001148:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_ADC2_Init+0x7c>)
 800114a:	f002 f95f 	bl	800340c <HAL_ADC_ConfigChannel>
 800114e:	b928      	cbnz	r0, 800115c <MX_ADC2_Init+0x74>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001150:	b009      	add	sp, #36	; 0x24
 8001152:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001156:	f000 fe6b 	bl	8001e30 <Error_Handler>
 800115a:	e7e9      	b.n	8001130 <MX_ADC2_Init+0x48>
    Error_Handler();
 800115c:	f000 fe68 	bl	8001e30 <Error_Handler>
}
 8001160:	e7f6      	b.n	8001150 <MX_ADC2_Init+0x68>
 8001162:	bf00      	nop
 8001164:	200003e8 	.word	0x200003e8
 8001168:	50000100 	.word	0x50000100
 800116c:	14f00020 	.word	0x14f00020

08001170 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001170:	b510      	push	{r4, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001174:	2400      	movs	r4, #0
 8001176:	9409      	str	r4, [sp, #36]	; 0x24
 8001178:	940a      	str	r4, [sp, #40]	; 0x28
 800117a:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 800117c:	2220      	movs	r2, #32
 800117e:	4621      	mov	r1, r4
 8001180:	a801      	add	r0, sp, #4
 8001182:	f009 fd63 	bl	800ac4c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001186:	481f      	ldr	r0, [pc, #124]	; (8001204 <MX_ADC3_Init+0x94>)
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <MX_ADC3_Init+0x98>)
 800118a:	6003      	str	r3, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800118c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001190:	6043      	str	r3, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001192:	6084      	str	r4, [r0, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001194:	60c4      	str	r4, [r0, #12]
  hadc3.Init.GainCompensation = 0;
 8001196:	6104      	str	r4, [r0, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001198:	6144      	str	r4, [r0, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119a:	2304      	movs	r3, #4
 800119c:	6183      	str	r3, [r0, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800119e:	7704      	strb	r4, [r0, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011a0:	7744      	strb	r4, [r0, #29]
  hadc3.Init.NbrOfConversion = 1;
 80011a2:	2301      	movs	r3, #1
 80011a4:	6203      	str	r3, [r0, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011a6:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011aa:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ac:	6304      	str	r4, [r0, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011ae:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b2:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80011b4:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011b8:	f001 ffd4 	bl	8003164 <HAL_ADC_Init>
 80011bc:	b9c8      	cbnz	r0, 80011f2 <MX_ADC3_Init+0x82>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011be:	2300      	movs	r3, #0
 80011c0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011c2:	a909      	add	r1, sp, #36	; 0x24
 80011c4:	480f      	ldr	r0, [pc, #60]	; (8001204 <MX_ADC3_Init+0x94>)
 80011c6:	f002 fbbd 	bl	8003944 <HAL_ADCEx_MultiModeConfigChannel>
 80011ca:	b9a8      	cbnz	r0, 80011f8 <MX_ADC3_Init+0x88>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_ADC3_Init+0x9c>)
 80011ce:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d0:	2306      	movs	r3, #6
 80011d2:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011d4:	2300      	movs	r3, #0
 80011d6:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011d8:	227f      	movs	r2, #127	; 0x7f
 80011da:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011dc:	2204      	movs	r2, #4
 80011de:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 80011e0:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011e2:	eb0d 0102 	add.w	r1, sp, r2
 80011e6:	4807      	ldr	r0, [pc, #28]	; (8001204 <MX_ADC3_Init+0x94>)
 80011e8:	f002 f910 	bl	800340c <HAL_ADC_ConfigChannel>
 80011ec:	b938      	cbnz	r0, 80011fe <MX_ADC3_Init+0x8e>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011ee:	b00c      	add	sp, #48	; 0x30
 80011f0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80011f2:	f000 fe1d 	bl	8001e30 <Error_Handler>
 80011f6:	e7e2      	b.n	80011be <MX_ADC3_Init+0x4e>
    Error_Handler();
 80011f8:	f000 fe1a 	bl	8001e30 <Error_Handler>
 80011fc:	e7e6      	b.n	80011cc <MX_ADC3_Init+0x5c>
    Error_Handler();
 80011fe:	f000 fe17 	bl	8001e30 <Error_Handler>
}
 8001202:	e7f4      	b.n	80011ee <MX_ADC3_Init+0x7e>
 8001204:	20000454 	.word	0x20000454
 8001208:	50000400 	.word	0x50000400
 800120c:	21800100 	.word	0x21800100

08001210 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8001210:	b500      	push	{lr}
 8001212:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001214:	2220      	movs	r2, #32
 8001216:	2100      	movs	r1, #0
 8001218:	4668      	mov	r0, sp
 800121a:	f009 fd17 	bl	800ac4c <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800121e:	4822      	ldr	r0, [pc, #136]	; (80012a8 <MX_ADC4_Init+0x98>)
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <MX_ADC4_Init+0x9c>)
 8001222:	6003      	str	r3, [r0, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001224:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001228:	6043      	str	r3, [r0, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800122a:	2300      	movs	r3, #0
 800122c:	6083      	str	r3, [r0, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122e:	60c3      	str	r3, [r0, #12]
  hadc4.Init.GainCompensation = 0;
 8001230:	6103      	str	r3, [r0, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001232:	2201      	movs	r2, #1
 8001234:	6142      	str	r2, [r0, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001236:	2104      	movs	r1, #4
 8001238:	6181      	str	r1, [r0, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800123a:	7703      	strb	r3, [r0, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 800123c:	7742      	strb	r2, [r0, #29]
  hadc4.Init.NbrOfConversion = 2;
 800123e:	2102      	movs	r1, #2
 8001240:	6201      	str	r1, [r0, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001242:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001246:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001248:	6303      	str	r3, [r0, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800124a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800124e:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001250:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001254:	f001 ff86 	bl	8003164 <HAL_ADC_Init>
 8001258:	b9e0      	cbnz	r0, 8001294 <MX_ADC4_Init+0x84>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_ADC4_Init+0xa0>)
 800125c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800125e:	2306      	movs	r3, #6
 8001260:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001262:	2307      	movs	r3, #7
 8001264:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001266:	237f      	movs	r3, #127	; 0x7f
 8001268:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800126a:	2304      	movs	r3, #4
 800126c:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001272:	4669      	mov	r1, sp
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <MX_ADC4_Init+0x98>)
 8001276:	f002 f8c9 	bl	800340c <HAL_ADC_ConfigChannel>
 800127a:	b970      	cbnz	r0, 800129a <MX_ADC4_Init+0x8a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <MX_ADC4_Init+0xa4>)
 800127e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001280:	230c      	movs	r3, #12
 8001282:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001284:	4669      	mov	r1, sp
 8001286:	4808      	ldr	r0, [pc, #32]	; (80012a8 <MX_ADC4_Init+0x98>)
 8001288:	f002 f8c0 	bl	800340c <HAL_ADC_ConfigChannel>
 800128c:	b940      	cbnz	r0, 80012a0 <MX_ADC4_Init+0x90>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800128e:	b009      	add	sp, #36	; 0x24
 8001290:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001294:	f000 fdcc 	bl	8001e30 <Error_Handler>
 8001298:	e7df      	b.n	800125a <MX_ADC4_Init+0x4a>
    Error_Handler();
 800129a:	f000 fdc9 	bl	8001e30 <Error_Handler>
 800129e:	e7ed      	b.n	800127c <MX_ADC4_Init+0x6c>
    Error_Handler();
 80012a0:	f000 fdc6 	bl	8001e30 <Error_Handler>
}
 80012a4:	e7f3      	b.n	800128e <MX_ADC4_Init+0x7e>
 80012a6:	bf00      	nop
 80012a8:	200004c0 	.word	0x200004c0
 80012ac:	50000500 	.word	0x50000500
 80012b0:	10c00010 	.word	0x10c00010
 80012b4:	14f00020 	.word	0x14f00020

080012b8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012b8:	b530      	push	{r4, r5, lr}
 80012ba:	b0a7      	sub	sp, #156	; 0x9c
 80012bc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	2100      	movs	r1, #0
 80012c0:	9121      	str	r1, [sp, #132]	; 0x84
 80012c2:	9122      	str	r1, [sp, #136]	; 0x88
 80012c4:	9123      	str	r1, [sp, #140]	; 0x8c
 80012c6:	9124      	str	r1, [sp, #144]	; 0x90
 80012c8:	9125      	str	r1, [sp, #148]	; 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ca:	2254      	movs	r2, #84	; 0x54
 80012cc:	a80c      	add	r0, sp, #48	; 0x30
 80012ce:	f009 fcbd 	bl	800ac4c <memset>
  if(adcHandle->Instance==ADC1)
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d8:	d00c      	beq.n	80012f4 <HAL_ADC_MspInit+0x3c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 80012da:	4a96      	ldr	r2, [pc, #600]	; (8001534 <HAL_ADC_MspInit+0x27c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d03d      	beq.n	800135c <HAL_ADC_MspInit+0xa4>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 80012e0:	4a95      	ldr	r2, [pc, #596]	; (8001538 <HAL_ADC_MspInit+0x280>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	f000 80a2 	beq.w	800142c <HAL_ADC_MspInit+0x174>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC4)
 80012e8:	4a94      	ldr	r2, [pc, #592]	; (800153c <HAL_ADC_MspInit+0x284>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	f000 80d2 	beq.w	8001494 <HAL_ADC_MspInit+0x1dc>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 80012f0:	b027      	add	sp, #156	; 0x9c
 80012f2:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012f8:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012fe:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001300:	a80c      	add	r0, sp, #48	; 0x30
 8001302:	f005 fb4f 	bl	80069a4 <HAL_RCCEx_PeriphCLKConfig>
 8001306:	b9d8      	cbnz	r0, 8001340 <HAL_ADC_MspInit+0x88>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001308:	4a8d      	ldr	r2, [pc, #564]	; (8001540 <HAL_ADC_MspInit+0x288>)
 800130a:	6813      	ldr	r3, [r2, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001310:	2b01      	cmp	r3, #1
 8001312:	d018      	beq.n	8001346 <HAL_ADC_MspInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b8b      	ldr	r3, [pc, #556]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 8001316:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001318:	f042 0201 	orr.w	r2, r2, #1
 800131c:	64da      	str	r2, [r3, #76]	; 0x4c
 800131e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AD0_Pin|AD1_Pin|AD2_Pin|AD3_Pin;
 8001328:	230f      	movs	r3, #15
 800132a:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132c:	2303      	movs	r3, #3
 800132e:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	a921      	add	r1, sp, #132	; 0x84
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f003 f921 	bl	8004580 <HAL_GPIO_Init>
 800133e:	e7d7      	b.n	80012f0 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001340:	f000 fd76 	bl	8001e30 <Error_Handler>
 8001344:	e7e0      	b.n	8001308 <HAL_ADC_MspInit+0x50>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001346:	4b7f      	ldr	r3, [pc, #508]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 8001348:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800134a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800134e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	9b01      	ldr	r3, [sp, #4]
 800135a:	e7db      	b.n	8001314 <HAL_ADC_MspInit+0x5c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800135c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001360:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001362:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001366:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001368:	a80c      	add	r0, sp, #48	; 0x30
 800136a:	f005 fb1b 	bl	80069a4 <HAL_RCCEx_PeriphCLKConfig>
 800136e:	2800      	cmp	r0, #0
 8001370:	d14e      	bne.n	8001410 <HAL_ADC_MspInit+0x158>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001372:	4a73      	ldr	r2, [pc, #460]	; (8001540 <HAL_ADC_MspInit+0x288>)
 8001374:	6813      	ldr	r3, [r2, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800137a:	2b01      	cmp	r3, #1
 800137c:	d04b      	beq.n	8001416 <HAL_ADC_MspInit+0x15e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800137e:	4b71      	ldr	r3, [pc, #452]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 8001380:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001382:	f042 0220 	orr.w	r2, r2, #32
 8001386:	64da      	str	r2, [r3, #76]	; 0x4c
 8001388:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800138a:	f002 0220 	and.w	r2, r2, #32
 800138e:	9204      	str	r2, [sp, #16]
 8001390:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001394:	f042 0201 	orr.w	r2, r2, #1
 8001398:	64da      	str	r2, [r3, #76]	; 0x4c
 800139a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800139c:	f002 0201 	and.w	r2, r2, #1
 80013a0:	9205      	str	r2, [sp, #20]
 80013a2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013a6:	f042 0204 	orr.w	r2, r2, #4
 80013aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80013ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013ae:	f002 0204 	and.w	r2, r2, #4
 80013b2:	9206      	str	r2, [sp, #24]
 80013b4:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013b8:	f042 0202 	orr.w	r2, r2, #2
 80013bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80013be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	9307      	str	r3, [sp, #28]
 80013c6:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = AD5_Pin;
 80013c8:	2302      	movs	r3, #2
 80013ca:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013cc:	2503      	movs	r5, #3
 80013ce:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2400      	movs	r4, #0
 80013d2:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD5_GPIO_Port, &GPIO_InitStruct);
 80013d4:	a921      	add	r1, sp, #132	; 0x84
 80013d6:	485c      	ldr	r0, [pc, #368]	; (8001548 <HAL_ADC_MspInit+0x290>)
 80013d8:	f003 f8d2 	bl	8004580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD8_Pin;
 80013dc:	2320      	movs	r3, #32
 80013de:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e0:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD8_GPIO_Port, &GPIO_InitStruct);
 80013e4:	a921      	add	r1, sp, #132	; 0x84
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ea:	f003 f8c9 	bl	8004580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD4_Pin|AD6_Pin;
 80013ee:	2330      	movs	r3, #48	; 0x30
 80013f0:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f2:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f6:	a921      	add	r1, sp, #132	; 0x84
 80013f8:	4854      	ldr	r0, [pc, #336]	; (800154c <HAL_ADC_MspInit+0x294>)
 80013fa:	f003 f8c1 	bl	8004580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD7_Pin;
 80013fe:	2304      	movs	r3, #4
 8001400:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001402:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD7_GPIO_Port, &GPIO_InitStruct);
 8001406:	a921      	add	r1, sp, #132	; 0x84
 8001408:	4851      	ldr	r0, [pc, #324]	; (8001550 <HAL_ADC_MspInit+0x298>)
 800140a:	f003 f8b9 	bl	8004580 <HAL_GPIO_Init>
 800140e:	e76f      	b.n	80012f0 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001410:	f000 fd0e 	bl	8001e30 <Error_Handler>
 8001414:	e7ad      	b.n	8001372 <HAL_ADC_MspInit+0xba>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001416:	4b4b      	ldr	r3, [pc, #300]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 8001418:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800141a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800141e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001426:	9303      	str	r3, [sp, #12]
 8001428:	9b03      	ldr	r3, [sp, #12]
 800142a:	e7a8      	b.n	800137e <HAL_ADC_MspInit+0xc6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800142c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001430:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001432:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001436:	931e      	str	r3, [sp, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001438:	a80c      	add	r0, sp, #48	; 0x30
 800143a:	f005 fab3 	bl	80069a4 <HAL_RCCEx_PeriphCLKConfig>
 800143e:	b9d8      	cbnz	r0, 8001478 <HAL_ADC_MspInit+0x1c0>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001440:	4a44      	ldr	r2, [pc, #272]	; (8001554 <HAL_ADC_MspInit+0x29c>)
 8001442:	6813      	ldr	r3, [r2, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001448:	2b01      	cmp	r3, #1
 800144a:	d018      	beq.n	800147e <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800144c:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 800144e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001450:	f042 0208 	orr.w	r2, r2, #8
 8001454:	64da      	str	r2, [r3, #76]	; 0x4c
 8001456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	9309      	str	r3, [sp, #36]	; 0x24
 800145e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = AD9_Pin|AD10_Pin|AD11_Pin;
 8001460:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001464:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001466:	2303      	movs	r3, #3
 8001468:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146e:	a921      	add	r1, sp, #132	; 0x84
 8001470:	4839      	ldr	r0, [pc, #228]	; (8001558 <HAL_ADC_MspInit+0x2a0>)
 8001472:	f003 f885 	bl	8004580 <HAL_GPIO_Init>
 8001476:	e73b      	b.n	80012f0 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001478:	f000 fcda 	bl	8001e30 <Error_Handler>
 800147c:	e7e0      	b.n	8001440 <HAL_ADC_MspInit+0x188>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800147e:	4b31      	ldr	r3, [pc, #196]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 8001480:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001486:	64da      	str	r2, [r3, #76]	; 0x4c
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148e:	9308      	str	r3, [sp, #32]
 8001490:	9b08      	ldr	r3, [sp, #32]
 8001492:	e7db      	b.n	800144c <HAL_ADC_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001498:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800149a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800149e:	931e      	str	r3, [sp, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a0:	a80c      	add	r0, sp, #48	; 0x30
 80014a2:	f005 fa7f 	bl	80069a4 <HAL_RCCEx_PeriphCLKConfig>
 80014a6:	2800      	cmp	r0, #0
 80014a8:	d133      	bne.n	8001512 <HAL_ADC_MspInit+0x25a>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014aa:	4a2a      	ldr	r2, [pc, #168]	; (8001554 <HAL_ADC_MspInit+0x29c>)
 80014ac:	6813      	ldr	r3, [r2, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d030      	beq.n	8001518 <HAL_ADC_MspInit+0x260>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	4b23      	ldr	r3, [pc, #140]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 80014b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ba:	f042 0202 	orr.w	r2, r2, #2
 80014be:	64da      	str	r2, [r3, #76]	; 0x4c
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80014c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80014ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014ce:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d0:	2303      	movs	r3, #3
 80014d2:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2500      	movs	r5, #0
 80014d6:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	a921      	add	r1, sp, #132	; 0x84
 80014da:	481d      	ldr	r0, [pc, #116]	; (8001550 <HAL_ADC_MspInit+0x298>)
 80014dc:	f003 f850 	bl	8004580 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel5;
 80014e0:	481e      	ldr	r0, [pc, #120]	; (800155c <HAL_ADC_MspInit+0x2a4>)
 80014e2:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <HAL_ADC_MspInit+0x2a8>)
 80014e4:	6003      	str	r3, [r0, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80014e6:	2326      	movs	r3, #38	; 0x26
 80014e8:	6043      	str	r3, [r0, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ea:	6085      	str	r5, [r0, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ec:	60c5      	str	r5, [r0, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	6103      	str	r3, [r0, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f6:	6143      	str	r3, [r0, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014fc:	6183      	str	r3, [r0, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80014fe:	2320      	movs	r3, #32
 8001500:	61c3      	str	r3, [r0, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8001502:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001504:	f002 fd56 	bl	8003fb4 <HAL_DMA_Init>
 8001508:	b988      	cbnz	r0, 800152e <HAL_ADC_MspInit+0x276>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_ADC_MspInit+0x2a4>)
 800150c:	6563      	str	r3, [r4, #84]	; 0x54
 800150e:	629c      	str	r4, [r3, #40]	; 0x28
}
 8001510:	e6ee      	b.n	80012f0 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001512:	f000 fc8d 	bl	8001e30 <Error_Handler>
 8001516:	e7c8      	b.n	80014aa <HAL_ADC_MspInit+0x1f2>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 800151a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800151c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001520:	64da      	str	r2, [r3, #76]	; 0x4c
 8001522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001528:	930a      	str	r3, [sp, #40]	; 0x28
 800152a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800152c:	e7c3      	b.n	80014b6 <HAL_ADC_MspInit+0x1fe>
      Error_Handler();
 800152e:	f000 fc7f 	bl	8001e30 <Error_Handler>
 8001532:	e7ea      	b.n	800150a <HAL_ADC_MspInit+0x252>
 8001534:	50000100 	.word	0x50000100
 8001538:	50000400 	.word	0x50000400
 800153c:	50000500 	.word	0x50000500
 8001540:	20000374 	.word	0x20000374
 8001544:	40021000 	.word	0x40021000
 8001548:	48001400 	.word	0x48001400
 800154c:	48000800 	.word	0x48000800
 8001550:	48000400 	.word	0x48000400
 8001554:	20000378 	.word	0x20000378
 8001558:	48000c00 	.word	0x48000c00
 800155c:	2000052c 	.word	0x2000052c
 8001560:	40020058 	.word	0x40020058

08001564 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001564:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001566:	4808      	ldr	r0, [pc, #32]	; (8001588 <MX_CRC_Init+0x24>)
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_CRC_Init+0x28>)
 800156a:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001570:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001572:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001574:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001576:	2301      	movs	r3, #1
 8001578:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800157a:	f002 fb39 	bl	8003bf0 <HAL_CRC_Init>
 800157e:	b900      	cbnz	r0, 8001582 <MX_CRC_Init+0x1e>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001580:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001582:	f000 fc55 	bl	8001e30 <Error_Handler>
}
 8001586:	e7fb      	b.n	8001580 <MX_CRC_Init+0x1c>
 8001588:	2000058c 	.word	0x2000058c
 800158c:	40023000 	.word	0x40023000

08001590 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8001590:	6802      	ldr	r2, [r0, #0]
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_CRC_MspInit+0x28>)
 8001594:	429a      	cmp	r2, r3
 8001596:	d000      	beq.n	800159a <HAL_CRC_MspInit+0xa>
 8001598:	4770      	bx	lr
{
 800159a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800159c:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80015a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015a6:	649a      	str	r2, [r3, #72]	; 0x48
 80015a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80015b2:	b002      	add	sp, #8
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023000 	.word	0x40023000

080015bc <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DAC_HandleTypeDef hdac2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80015bc:	b500      	push	{lr}
 80015be:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015c0:	2230      	movs	r2, #48	; 0x30
 80015c2:	2100      	movs	r1, #0
 80015c4:	4668      	mov	r0, sp
 80015c6:	f009 fb41 	bl	800ac4c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015ca:	4811      	ldr	r0, [pc, #68]	; (8001610 <MX_DAC1_Init+0x54>)
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_DAC1_Init+0x58>)
 80015ce:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015d0:	f002 fb85 	bl	8003cde <HAL_DAC_Init>
 80015d4:	b9a8      	cbnz	r0, 8001602 <MX_DAC1_Init+0x46>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80015d6:	2302      	movs	r3, #2
 80015d8:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80015da:	2200      	movs	r2, #0
 80015dc:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80015e0:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015e4:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015e6:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80015e8:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015ea:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80015ec:	2301      	movs	r3, #1
 80015ee:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015f0:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015f2:	4669      	mov	r1, sp
 80015f4:	4806      	ldr	r0, [pc, #24]	; (8001610 <MX_DAC1_Init+0x54>)
 80015f6:	f002 fb85 	bl	8003d04 <HAL_DAC_ConfigChannel>
 80015fa:	b928      	cbnz	r0, 8001608 <MX_DAC1_Init+0x4c>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80015fc:	b00d      	add	sp, #52	; 0x34
 80015fe:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001602:	f000 fc15 	bl	8001e30 <Error_Handler>
 8001606:	e7e6      	b.n	80015d6 <MX_DAC1_Init+0x1a>
    Error_Handler();
 8001608:	f000 fc12 	bl	8001e30 <Error_Handler>
}
 800160c:	e7f6      	b.n	80015fc <MX_DAC1_Init+0x40>
 800160e:	bf00      	nop
 8001610:	200005b0 	.word	0x200005b0
 8001614:	50000800 	.word	0x50000800

08001618 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001618:	b500      	push	{lr}
 800161a:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800161c:	2230      	movs	r2, #48	; 0x30
 800161e:	2100      	movs	r1, #0
 8001620:	4668      	mov	r0, sp
 8001622:	f009 fb13 	bl	800ac4c <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001626:	4811      	ldr	r0, [pc, #68]	; (800166c <MX_DAC2_Init+0x54>)
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_DAC2_Init+0x58>)
 800162a:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800162c:	f002 fb57 	bl	8003cde <HAL_DAC_Init>
 8001630:	b9a8      	cbnz	r0, 800165e <MX_DAC2_Init+0x46>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001632:	2302      	movs	r3, #2
 8001634:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001636:	2200      	movs	r2, #0
 8001638:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800163c:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001640:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001642:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001644:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001646:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001648:	2301      	movs	r3, #1
 800164a:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800164c:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800164e:	4669      	mov	r1, sp
 8001650:	4806      	ldr	r0, [pc, #24]	; (800166c <MX_DAC2_Init+0x54>)
 8001652:	f002 fb57 	bl	8003d04 <HAL_DAC_ConfigChannel>
 8001656:	b928      	cbnz	r0, 8001664 <MX_DAC2_Init+0x4c>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001658:	b00d      	add	sp, #52	; 0x34
 800165a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800165e:	f000 fbe7 	bl	8001e30 <Error_Handler>
 8001662:	e7e6      	b.n	8001632 <MX_DAC2_Init+0x1a>
    Error_Handler();
 8001664:	f000 fbe4 	bl	8001e30 <Error_Handler>
}
 8001668:	e7f6      	b.n	8001658 <MX_DAC2_Init+0x40>
 800166a:	bf00      	nop
 800166c:	200005c4 	.word	0x200005c4
 8001670:	50000c00 	.word	0x50000c00

08001674 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001674:	b500      	push	{lr}
 8001676:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	2300      	movs	r3, #0
 800167a:	9305      	str	r3, [sp, #20]
 800167c:	9306      	str	r3, [sp, #24]
 800167e:	9307      	str	r3, [sp, #28]
 8001680:	9308      	str	r3, [sp, #32]
 8001682:	9309      	str	r3, [sp, #36]	; 0x24
  if(dacHandle->Instance==DAC1)
 8001684:	6803      	ldr	r3, [r0, #0]
 8001686:	4a21      	ldr	r2, [pc, #132]	; (800170c <HAL_DAC_MspInit+0x98>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d005      	beq.n	8001698 <HAL_DAC_MspInit+0x24>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
  else if(dacHandle->Instance==DAC2)
 800168c:	4a20      	ldr	r2, [pc, #128]	; (8001710 <HAL_DAC_MspInit+0x9c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d01f      	beq.n	80016d2 <HAL_DAC_MspInit+0x5e>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8001692:	b00b      	add	sp, #44	; 0x2c
 8001694:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <HAL_DAC_MspInit+0xa0>)
 800169a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800169c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80016a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016a4:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80016a8:	9201      	str	r2, [sp, #4]
 80016aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	9302      	str	r3, [sp, #8]
 80016bc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DAC1_Pin;
 80016be:	2310      	movs	r3, #16
 80016c0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c2:	2303      	movs	r3, #3
 80016c4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(DAC1_GPIO_Port, &GPIO_InitStruct);
 80016c6:	a905      	add	r1, sp, #20
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016cc:	f002 ff58 	bl	8004580 <HAL_GPIO_Init>
 80016d0:	e7df      	b.n	8001692 <HAL_DAC_MspInit+0x1e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_DAC_MspInit+0xa0>)
 80016d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80016da:	64da      	str	r2, [r3, #76]	; 0x4c
 80016dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016de:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80016e2:	9203      	str	r2, [sp, #12]
 80016e4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016e8:	f042 0201 	orr.w	r2, r2, #1
 80016ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	9304      	str	r3, [sp, #16]
 80016f6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = DAC2_Pin;
 80016f8:	2340      	movs	r3, #64	; 0x40
 80016fa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fc:	2303      	movs	r3, #3
 80016fe:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(DAC2_GPIO_Port, &GPIO_InitStruct);
 8001700:	a905      	add	r1, sp, #20
 8001702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001706:	f002 ff3b 	bl	8004580 <HAL_GPIO_Init>
}
 800170a:	e7c2      	b.n	8001692 <HAL_DAC_MspInit+0x1e>
 800170c:	50000800 	.word	0x50000800
 8001710:	50000c00 	.word	0x50000c00
 8001714:	40021000 	.word	0x40021000

08001718 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
void MX_DMA_Init(void)
{
 8001718:	b500      	push	{lr}
 800171a:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800171c:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <MX_DMA_Init+0xc4>)
 800171e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001720:	f042 0204 	orr.w	r2, r2, #4
 8001724:	649a      	str	r2, [r3, #72]	; 0x48
 8001726:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001728:	f002 0204 	and.w	r2, r2, #4
 800172c:	9200      	str	r2, [sp, #0]
 800172e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001730:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	649a      	str	r2, [r3, #72]	; 0x48
 8001738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	9b01      	ldr	r3, [sp, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8001742:	4827      	ldr	r0, [pc, #156]	; (80017e0 <MX_DMA_Init+0xc8>)
 8001744:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <MX_DMA_Init+0xcc>)
 8001746:	6003      	str	r3, [r0, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_MEM2MEM;
 8001748:	2300      	movs	r3, #0
 800174a:	6043      	str	r3, [r0, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800174c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001750:	6082      	str	r2, [r0, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8001752:	2240      	movs	r2, #64	; 0x40
 8001754:	60c2      	str	r2, [r0, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_DISABLE;
 8001756:	6103      	str	r3, [r0, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175c:	6142      	str	r2, [r0, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800175e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001762:	6182      	str	r2, [r0, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8001764:	61c3      	str	r3, [r0, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_HIGH;
 8001766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176a:	6203      	str	r3, [r0, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 800176c:	f002 fc22 	bl	8003fb4 <HAL_DMA_Init>
 8001770:	bb88      	cbnz	r0, 80017d6 <MX_DMA_Init+0xbe>
    Error_Handler();
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	4611      	mov	r1, r2
 8001776:	200b      	movs	r0, #11
 8001778:	f002 f9e0 	bl	8003b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800177c:	200b      	movs	r0, #11
 800177e:	f002 fa15 	bl	8003bac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	4611      	mov	r1, r2
 8001786:	200d      	movs	r0, #13
 8001788:	f002 f9d8 	bl	8003b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800178c:	200d      	movs	r0, #13
 800178e:	f002 fa0d 	bl	8003bac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	4611      	mov	r1, r2
 8001796:	200e      	movs	r0, #14
 8001798:	f002 f9d0 	bl	8003b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800179c:	200e      	movs	r0, #14
 800179e:	f002 fa05 	bl	8003bac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	4611      	mov	r1, r2
 80017a6:	200f      	movs	r0, #15
 80017a8:	f002 f9c8 	bl	8003b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80017ac:	200f      	movs	r0, #15
 80017ae:	f002 f9fd 	bl	8003bac <HAL_NVIC_EnableIRQ>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b2:	490d      	ldr	r1, [pc, #52]	; (80017e8 <MX_DMA_Init+0xd0>)
 80017b4:	68cb      	ldr	r3, [r1, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <MX_DMA_Init+0xd4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80017c2:	6018      	str	r0, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	68c9      	ldr	r1, [r1, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c6:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017ce:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);

}
 80017d0:	b003      	add	sp, #12
 80017d2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80017d6:	f000 fb2b 	bl	8001e30 <Error_Handler>
 80017da:	e7ca      	b.n	8001772 <MX_DMA_Init+0x5a>
 80017dc:	40021000 	.word	0x40021000
 80017e0:	200005d8 	.word	0x200005d8
 80017e4:	40020008 	.word	0x40020008
 80017e8:	e000ed00 	.word	0xe000ed00
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80017f0:	b508      	push	{r3, lr}
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80017f2:	480f      	ldr	r0, [pc, #60]	; (8001830 <MX_FDCAN2_Init+0x40>)
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_FDCAN2_Init+0x44>)
 80017f6:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	6043      	str	r3, [r0, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80017fc:	6083      	str	r3, [r0, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80017fe:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001800:	7403      	strb	r3, [r0, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001802:	7443      	strb	r3, [r0, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001804:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001806:	2210      	movs	r2, #16
 8001808:	6142      	str	r2, [r0, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800180a:	2201      	movs	r2, #1
 800180c:	6182      	str	r2, [r0, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800180e:	2102      	movs	r1, #2
 8001810:	61c1      	str	r1, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001812:	6201      	str	r1, [r0, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001814:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001816:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001818:	62c2      	str	r2, [r0, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800181a:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800181c:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 800181e:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001820:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001822:	f002 fdc3 	bl	80043ac <HAL_FDCAN_Init>
 8001826:	b900      	cbnz	r0, 800182a <MX_FDCAN2_Init+0x3a>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001828:	bd08      	pop	{r3, pc}
    Error_Handler();
 800182a:	f000 fb01 	bl	8001e30 <Error_Handler>
}
 800182e:	e7fb      	b.n	8001828 <MX_FDCAN2_Init+0x38>
 8001830:	20000638 	.word	0x20000638
 8001834:	40006800 	.word	0x40006800

08001838 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001838:	b510      	push	{r4, lr}
 800183a:	b09c      	sub	sp, #112	; 0x70
 800183c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	2100      	movs	r1, #0
 8001840:	9117      	str	r1, [sp, #92]	; 0x5c
 8001842:	9118      	str	r1, [sp, #96]	; 0x60
 8001844:	9119      	str	r1, [sp, #100]	; 0x64
 8001846:	911a      	str	r1, [sp, #104]	; 0x68
 8001848:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800184a:	2254      	movs	r2, #84	; 0x54
 800184c:	a802      	add	r0, sp, #8
 800184e:	f009 f9fd 	bl	800ac4c <memset>
  if(fdcanHandle->Instance==FDCAN2)
 8001852:	6822      	ldr	r2, [r4, #0]
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_FDCAN_MspInit+0x84>)
 8001856:	429a      	cmp	r2, r3
 8001858:	d001      	beq.n	800185e <HAL_FDCAN_MspInit+0x26>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 800185a:	b01c      	add	sp, #112	; 0x70
 800185c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800185e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001862:	9302      	str	r3, [sp, #8]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001864:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001868:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800186a:	a802      	add	r0, sp, #8
 800186c:	f005 f89a 	bl	80069a4 <HAL_RCCEx_PeriphCLKConfig>
 8001870:	bb08      	cbnz	r0, 80018b6 <HAL_FDCAN_MspInit+0x7e>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <HAL_FDCAN_MspInit+0x88>)
 8001874:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001876:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800187a:	659a      	str	r2, [r3, #88]	; 0x58
 800187c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800187e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001882:	9200      	str	r2, [sp, #0]
 8001884:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001888:	f042 0202 	orr.w	r2, r2, #2
 800188c:	64da      	str	r2, [r3, #76]	; 0x4c
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 8001898:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800189c:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80018a8:	2309      	movs	r3, #9
 80018aa:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	a917      	add	r1, sp, #92	; 0x5c
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <HAL_FDCAN_MspInit+0x8c>)
 80018b0:	f002 fe66 	bl	8004580 <HAL_GPIO_Init>
}
 80018b4:	e7d1      	b.n	800185a <HAL_FDCAN_MspInit+0x22>
      Error_Handler();
 80018b6:	f000 fabb 	bl	8001e30 <Error_Handler>
 80018ba:	e7da      	b.n	8001872 <HAL_FDCAN_MspInit+0x3a>
 80018bc:	40006800 	.word	0x40006800
 80018c0:	40021000 	.word	0x40021000
 80018c4:	48000400 	.word	0x48000400

080018c8 <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80018c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ca:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	2300      	movs	r3, #0
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	9302      	str	r3, [sp, #8]
 80018d2:	9303      	str	r3, [sp, #12]
 80018d4:	9304      	str	r3, [sp, #16]
 80018d6:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <HAL_FMC_MspInit+0x7c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	b10b      	cbz	r3, 80018e2 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80018de:	b007      	add	sp, #28
 80018e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_FMC_MspInit+0x7c>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_FMC_MspInit+0x80>)
 80018ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ec:	f042 0201 	orr.w	r2, r2, #1
 80018f0:	651a      	str	r2, [r3, #80]	; 0x50
 80018f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80018fc:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001900:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2602      	movs	r6, #2
 8001904:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2503      	movs	r5, #3
 8001908:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800190a:	240c      	movs	r4, #12
 800190c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800190e:	a901      	add	r1, sp, #4
 8001910:	480e      	ldr	r0, [pc, #56]	; (800194c <HAL_FMC_MspInit+0x84>)
 8001912:	f002 fe35 	bl	8004580 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001916:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800191a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2700      	movs	r7, #0
 8001920:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001922:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001924:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001926:	a901      	add	r1, sp, #4
 8001928:	4809      	ldr	r0, [pc, #36]	; (8001950 <HAL_FMC_MspInit+0x88>)
 800192a:	f002 fe29 	bl	8004580 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 800192e:	2320      	movs	r3, #32
 8001930:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001938:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 800193a:	a901      	add	r1, sp, #4
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <HAL_FMC_MspInit+0x8c>)
 800193e:	f002 fe1f 	bl	8004580 <HAL_GPIO_Init>
 8001942:	e7cc      	b.n	80018de <HAL_FMC_MspInit+0x16>
 8001944:	2000069c 	.word	0x2000069c
 8001948:	40021000 	.word	0x40021000
 800194c:	48001000 	.word	0x48001000
 8001950:	48000c00 	.word	0x48000c00
 8001954:	48001800 	.word	0x48001800

08001958 <MX_FMC_Init>:
{
 8001958:	b510      	push	{r4, lr}
 800195a:	b088      	sub	sp, #32
  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800195c:	2220      	movs	r2, #32
 800195e:	2100      	movs	r1, #0
 8001960:	4668      	mov	r0, sp
 8001962:	f009 f973 	bl	800ac4c <memset>
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001966:	4818      	ldr	r0, [pc, #96]	; (80019c8 <MX_FMC_Init+0x70>)
 8001968:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800196c:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800196e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001972:	6043      	str	r3, [r0, #4]
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001974:	2200      	movs	r2, #0
 8001976:	6082      	str	r2, [r0, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001978:	60c2      	str	r2, [r0, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800197a:	6102      	str	r2, [r0, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800197c:	2110      	movs	r1, #16
 800197e:	6141      	str	r1, [r0, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001980:	6182      	str	r2, [r0, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001982:	61c2      	str	r2, [r0, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001984:	6202      	str	r2, [r0, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198a:	6243      	str	r3, [r0, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800198c:	6282      	str	r2, [r0, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800198e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001990:	6302      	str	r2, [r0, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001992:	6342      	str	r2, [r0, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001994:	6382      	str	r2, [r0, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001996:	63c2      	str	r2, [r0, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8001998:	6442      	str	r2, [r0, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800199a:	6402      	str	r2, [r0, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 800199c:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
  Timing.AddressSetupTime = 1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	9300      	str	r3, [sp, #0]
  Timing.AddressHoldTime = 15;
 80019a4:	240f      	movs	r4, #15
 80019a6:	9401      	str	r4, [sp, #4]
  Timing.DataSetupTime = 1;
 80019a8:	9302      	str	r3, [sp, #8]
  Timing.DataHoldTime = 1;
 80019aa:	9303      	str	r3, [sp, #12]
  Timing.BusTurnAroundDuration = 1;
 80019ac:	9304      	str	r3, [sp, #16]
  Timing.CLKDivision = 16;
 80019ae:	9105      	str	r1, [sp, #20]
  Timing.DataLatency = 17;
 80019b0:	2311      	movs	r3, #17
 80019b2:	9306      	str	r3, [sp, #24]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80019b4:	4669      	mov	r1, sp
 80019b6:	f005 fa25 	bl	8006e04 <HAL_SRAM_Init>
 80019ba:	b908      	cbnz	r0, 80019c0 <MX_FMC_Init+0x68>
}
 80019bc:	b008      	add	sp, #32
 80019be:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80019c0:	f000 fa36 	bl	8001e30 <Error_Handler>
}
 80019c4:	e7fa      	b.n	80019bc <MX_FMC_Init+0x64>
 80019c6:	bf00      	nop
 80019c8:	200006a0 	.word	0x200006a0

080019cc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80019cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80019ce:	f7ff ff7b 	bl	80018c8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80019d2:	bd08      	pop	{r3, pc}

080019d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019d8:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	2400      	movs	r4, #0
 80019dc:	9407      	str	r4, [sp, #28]
 80019de:	9408      	str	r4, [sp, #32]
 80019e0:	9409      	str	r4, [sp, #36]	; 0x24
 80019e2:	940a      	str	r4, [sp, #40]	; 0x28
 80019e4:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e6:	4b70      	ldr	r3, [pc, #448]	; (8001ba8 <MX_GPIO_Init+0x1d4>)
 80019e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019ea:	f042 0210 	orr.w	r2, r2, #16
 80019ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80019f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019f2:	f002 0210 	and.w	r2, r2, #16
 80019f6:	9200      	str	r2, [sp, #0]
 80019f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019fc:	f042 0204 	orr.w	r2, r2, #4
 8001a00:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a04:	f002 0204 	and.w	r2, r2, #4
 8001a08:	9201      	str	r2, [sp, #4]
 8001a0a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a0e:	f042 0220 	orr.w	r2, r2, #32
 8001a12:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a16:	f002 0220 	and.w	r2, r2, #32
 8001a1a:	9202      	str	r2, [sp, #8]
 8001a1c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a20:	f042 0201 	orr.w	r2, r2, #1
 8001a24:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a28:	f002 0201 	and.w	r2, r2, #1
 8001a2c:	9203      	str	r2, [sp, #12]
 8001a2e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a32:	f042 0202 	orr.w	r2, r2, #2
 8001a36:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a3a:	f002 0202 	and.w	r2, r2, #2
 8001a3e:	9204      	str	r2, [sp, #16]
 8001a40:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a44:	f042 0208 	orr.w	r2, r2, #8
 8001a48:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a4c:	f002 0208 	and.w	r2, r2, #8
 8001a50:	9205      	str	r2, [sp, #20]
 8001a52:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a5a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a62:	9306      	str	r3, [sp, #24]
 8001a64:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin|LED3_Pin|LED0_Pin
 8001a66:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8001bb4 <MX_GPIO_Init+0x1e0>
 8001a6a:	4622      	mov	r2, r4
 8001a6c:	f640 013c 	movw	r1, #2108	; 0x83c
 8001a70:	4650      	mov	r0, sl
 8001a72:	f002 fe6f 	bl	8004754 <HAL_GPIO_WritePin>
                          |ARDUINO_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);
 8001a76:	4f4d      	ldr	r7, [pc, #308]	; (8001bac <MX_GPIO_Init+0x1d8>)
 8001a78:	4622      	mov	r2, r4
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	4638      	mov	r0, r7
 8001a7e:	f002 fe69 	bl	8004754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8001a82:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8001bb8 <MX_GPIO_Init+0x1e4>
 8001a86:	4622      	mov	r2, r4
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	4648      	mov	r0, r9
 8001a8c:	f002 fe62 	bl	8004754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001a90:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8001bbc <MX_GPIO_Init+0x1e8>
 8001a94:	4622      	mov	r2, r4
 8001a96:	2108      	movs	r1, #8
 8001a98:	4640      	mov	r0, r8
 8001a9a:	f002 fe5b 	bl	8004754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIN_SLP_Pin|LCD_BKLT_Pin, GPIO_PIN_RESET);
 8001a9e:	f8df b120 	ldr.w	fp, [pc, #288]	; 8001bc0 <MX_GPIO_Init+0x1ec>
 8001aa2:	4622      	mov	r2, r4
 8001aa4:	2160      	movs	r1, #96	; 0x60
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f002 fe54 	bl	8004754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001aac:	4e40      	ldr	r6, [pc, #256]	; (8001bb0 <MX_GPIO_Init+0x1dc>)
 8001aae:	4622      	mov	r2, r4
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	4630      	mov	r0, r6
 8001ab4:	f002 fe4e 	bl	8004754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2102      	movs	r1, #2
 8001abc:	4630      	mov	r0, r6
 8001abe:	f002 fe49 	bl	8004754 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = JOY_BTN_Pin|BTN_OK_Pin;
 8001ac2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001ac6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aca:	2501      	movs	r5, #1
 8001acc:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ace:	a907      	add	r1, sp, #28
 8001ad0:	4638      	mov	r0, r7
 8001ad2:	f002 fd55 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_ESC_Pin;
 8001ad6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ada:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001adc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ae0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae2:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(BTN_ESC_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	a907      	add	r1, sp, #28
 8001ae6:	4638      	mov	r0, r7
 8001ae8:	f002 fd4a 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|ARDUINO_CS_Pin;
 8001aec:	f640 0338 	movw	r3, #2104	; 0x838
 8001af0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af2:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001af8:	a907      	add	r1, sp, #28
 8001afa:	4650      	mov	r0, sl
 8001afc:	f002 fd40 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
 8001b00:	230f      	movs	r3, #15
 8001b02:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b04:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0a:	a907      	add	r1, sp, #28
 8001b0c:	4638      	mov	r0, r7
 8001b0e:	f002 fd37 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8001b12:	2304      	movs	r3, #4
 8001b14:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b16:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	a907      	add	r1, sp, #28
 8001b20:	4650      	mov	r0, sl
 8001b22:	f002 fd2d 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_DOWN_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 8001b26:	f240 1343 	movw	r3, #323	; 0x143
 8001b2a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2e:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b30:	a907      	add	r1, sp, #28
 8001b32:	4648      	mov	r0, r9
 8001b34:	f002 fd24 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8001b42:	a907      	add	r1, sp, #28
 8001b44:	4648      	mov	r0, r9
 8001b46:	f002 fd1b 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001b54:	a907      	add	r1, sp, #28
 8001b56:	4640      	mov	r0, r8
 8001b58:	f002 fd12 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_PENIRQ_Pin;
 8001b5c:	2340      	movs	r3, #64	; 0x40
 8001b5e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b60:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_PENIRQ_GPIO_Port, &GPIO_InitStruct);
 8001b64:	a907      	add	r1, sp, #28
 8001b66:	4640      	mov	r0, r8
 8001b68:	f002 fd0a 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LIN_SLP_Pin|LCD_BKLT_Pin;
 8001b6c:	2360      	movs	r3, #96	; 0x60
 8001b6e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b76:	a907      	add	r1, sp, #28
 8001b78:	4658      	mov	r0, fp
 8001b7a:	f002 fd01 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001b7e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b80:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8001b86:	a907      	add	r1, sp, #28
 8001b88:	4630      	mov	r0, r6
 8001b8a:	f002 fcf9 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b92:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b94:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b96:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8001b98:	a907      	add	r1, sp, #28
 8001b9a:	4630      	mov	r0, r6
 8001b9c:	f002 fcf0 	bl	8004580 <HAL_GPIO_Init>

}
 8001ba0:	b00d      	add	sp, #52	; 0x34
 8001ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	48000800 	.word	0x48000800
 8001bb0:	48001000 	.word	0x48001000
 8001bb4:	48001400 	.word	0x48001400
 8001bb8:	48001800 	.word	0x48001800
 8001bbc:	48000c00 	.word	0x48000c00
 8001bc0:	48000400 	.word	0x48000400

08001bc4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001bc4:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bc6:	4812      	ldr	r0, [pc, #72]	; (8001c10 <MX_I2C1_Init+0x4c>)
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001bca:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10902A95;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <MX_I2C1_Init+0x54>)
 8001bce:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bd8:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bda:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bdc:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bde:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001be0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001be2:	f002 fe05 	bl	80047f0 <HAL_I2C_Init>
 8001be6:	b950      	cbnz	r0, 8001bfe <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001be8:	2100      	movs	r1, #0
 8001bea:	4809      	ldr	r0, [pc, #36]	; (8001c10 <MX_I2C1_Init+0x4c>)
 8001bec:	f003 f96b 	bl	8004ec6 <HAL_I2CEx_ConfigAnalogFilter>
 8001bf0:	b940      	cbnz	r0, 8001c04 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 5) != HAL_OK)
 8001bf2:	2105      	movs	r1, #5
 8001bf4:	4806      	ldr	r0, [pc, #24]	; (8001c10 <MX_I2C1_Init+0x4c>)
 8001bf6:	f003 f994 	bl	8004f22 <HAL_I2CEx_ConfigDigitalFilter>
 8001bfa:	b930      	cbnz	r0, 8001c0a <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bfc:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001bfe:	f000 f917 	bl	8001e30 <Error_Handler>
 8001c02:	e7f1      	b.n	8001be8 <MX_I2C1_Init+0x24>
    Error_Handler();
 8001c04:	f000 f914 	bl	8001e30 <Error_Handler>
 8001c08:	e7f3      	b.n	8001bf2 <MX_I2C1_Init+0x2e>
    Error_Handler();
 8001c0a:	f000 f911 	bl	8001e30 <Error_Handler>
}
 8001c0e:	e7f5      	b.n	8001bfc <MX_I2C1_Init+0x38>
 8001c10:	200007b8 	.word	0x200007b8
 8001c14:	40005400 	.word	0x40005400
 8001c18:	10902a95 	.word	0x10902a95

08001c1c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c1c:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c1e:	4815      	ldr	r0, [pc, #84]	; (8001c74 <MX_I2C2_Init+0x58>)
 8001c20:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <MX_I2C2_Init+0x5c>)
 8001c22:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x60505F8C;
 8001c24:	f103 5301 	add.w	r3, r3, #541065216	; 0x20400000
 8001c28:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001c2c:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 8001c30:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c36:	2201      	movs	r2, #1
 8001c38:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c3a:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c3c:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c3e:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c40:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c42:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c44:	f002 fdd4 	bl	80047f0 <HAL_I2C_Init>
 8001c48:	b950      	cbnz	r0, 8001c60 <MX_I2C2_Init+0x44>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4809      	ldr	r0, [pc, #36]	; (8001c74 <MX_I2C2_Init+0x58>)
 8001c4e:	f003 f93a 	bl	8004ec6 <HAL_I2CEx_ConfigAnalogFilter>
 8001c52:	b940      	cbnz	r0, 8001c66 <MX_I2C2_Init+0x4a>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c54:	2100      	movs	r1, #0
 8001c56:	4807      	ldr	r0, [pc, #28]	; (8001c74 <MX_I2C2_Init+0x58>)
 8001c58:	f003 f963 	bl	8004f22 <HAL_I2CEx_ConfigDigitalFilter>
 8001c5c:	b930      	cbnz	r0, 8001c6c <MX_I2C2_Init+0x50>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c5e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001c60:	f000 f8e6 	bl	8001e30 <Error_Handler>
 8001c64:	e7f1      	b.n	8001c4a <MX_I2C2_Init+0x2e>
    Error_Handler();
 8001c66:	f000 f8e3 	bl	8001e30 <Error_Handler>
 8001c6a:	e7f3      	b.n	8001c54 <MX_I2C2_Init+0x38>
    Error_Handler();
 8001c6c:	f000 f8e0 	bl	8001e30 <Error_Handler>
}
 8001c70:	e7f5      	b.n	8001c5e <MX_I2C2_Init+0x42>
 8001c72:	bf00      	nop
 8001c74:	20000804 	.word	0x20000804
 8001c78:	40005800 	.word	0x40005800

08001c7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c80:	b0a1      	sub	sp, #132	; 0x84
 8001c82:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	2100      	movs	r1, #0
 8001c86:	911b      	str	r1, [sp, #108]	; 0x6c
 8001c88:	911c      	str	r1, [sp, #112]	; 0x70
 8001c8a:	911d      	str	r1, [sp, #116]	; 0x74
 8001c8c:	911e      	str	r1, [sp, #120]	; 0x78
 8001c8e:	911f      	str	r1, [sp, #124]	; 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c90:	2254      	movs	r2, #84	; 0x54
 8001c92:	a806      	add	r0, sp, #24
 8001c94:	f008 ffda 	bl	800ac4c <memset>
  if(i2cHandle->Instance==I2C1)
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	4a5d      	ldr	r2, [pc, #372]	; (8001e10 <HAL_I2C_MspInit+0x194>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d006      	beq.n	8001cae <HAL_I2C_MspInit+0x32>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 8001ca0:	4a5c      	ldr	r2, [pc, #368]	; (8001e14 <HAL_I2C_MspInit+0x198>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	f000 8086 	beq.w	8001db4 <HAL_I2C_MspInit+0x138>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001ca8:	b021      	add	sp, #132	; 0x84
 8001caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cae:	2340      	movs	r3, #64	; 0x40
 8001cb0:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb2:	a806      	add	r0, sp, #24
 8001cb4:	f004 fe76 	bl	80069a4 <HAL_RCCEx_PeriphCLKConfig>
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	d172      	bne.n	8001da2 <HAL_I2C_MspInit+0x126>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbc:	4e56      	ldr	r6, [pc, #344]	; (8001e18 <HAL_I2C_MspInit+0x19c>)
 8001cbe:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	64f3      	str	r3, [r6, #76]	; 0x4c
 8001cc6:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd0:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001cd2:	f043 0302 	orr.w	r3, r3, #2
 8001cd6:	64f3      	str	r3, [r6, #76]	; 0x4c
 8001cd8:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	9302      	str	r3, [sp, #8]
 8001ce0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ce6:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce8:	f04f 0912 	mov.w	r9, #18
 8001cec:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2500      	movs	r5, #0
 8001cf2:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	951e      	str	r5, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cf6:	f04f 0804 	mov.w	r8, #4
 8001cfa:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	a91b      	add	r1, sp, #108	; 0x6c
 8001d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d04:	f002 fc3c 	bl	8004580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d08:	2780      	movs	r7, #128	; 0x80
 8001d0a:	971b      	str	r7, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d0c:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	951e      	str	r5, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d14:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d18:	a91b      	add	r1, sp, #108	; 0x6c
 8001d1a:	4840      	ldr	r0, [pc, #256]	; (8001e1c <HAL_I2C_MspInit+0x1a0>)
 8001d1c:	f002 fc30 	bl	8004580 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d20:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001d22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d26:	65b3      	str	r3, [r6, #88]	; 0x58
 8001d28:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001d2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2e:	9303      	str	r3, [sp, #12]
 8001d30:	9b03      	ldr	r3, [sp, #12]
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8001d32:	483b      	ldr	r0, [pc, #236]	; (8001e20 <HAL_I2C_MspInit+0x1a4>)
 8001d34:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <HAL_I2C_MspInit+0x1a8>)
 8001d36:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001d38:	2310      	movs	r3, #16
 8001d3a:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d3c:	6085      	str	r5, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d3e:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d40:	6107      	str	r7, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d42:	6145      	str	r5, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d44:	6185      	str	r5, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001d46:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d48:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001d4a:	f002 f933 	bl	8003fb4 <HAL_DMA_Init>
 8001d4e:	bb58      	cbnz	r0, 8001da8 <HAL_I2C_MspInit+0x12c>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001d50:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <HAL_I2C_MspInit+0x1a4>)
 8001d52:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001d54:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8001d56:	4834      	ldr	r0, [pc, #208]	; (8001e28 <HAL_I2C_MspInit+0x1ac>)
 8001d58:	4b34      	ldr	r3, [pc, #208]	; (8001e2c <HAL_I2C_MspInit+0x1b0>)
 8001d5a:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001d5c:	2311      	movs	r3, #17
 8001d5e:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d60:	2310      	movs	r3, #16
 8001d62:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d68:	2280      	movs	r2, #128	; 0x80
 8001d6a:	6102      	str	r2, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d6c:	6143      	str	r3, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d6e:	6183      	str	r3, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001d70:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d72:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001d74:	f002 f91e 	bl	8003fb4 <HAL_DMA_Init>
 8001d78:	b9c8      	cbnz	r0, 8001dae <HAL_I2C_MspInit+0x132>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001d7a:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <HAL_I2C_MspInit+0x1ac>)
 8001d7c:	63a3      	str	r3, [r4, #56]	; 0x38
 8001d7e:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	4611      	mov	r1, r2
 8001d84:	201f      	movs	r0, #31
 8001d86:	f001 fed9 	bl	8003b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d8a:	201f      	movs	r0, #31
 8001d8c:	f001 ff0e 	bl	8003bac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	4611      	mov	r1, r2
 8001d94:	2020      	movs	r0, #32
 8001d96:	f001 fed1 	bl	8003b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001d9a:	2020      	movs	r0, #32
 8001d9c:	f001 ff06 	bl	8003bac <HAL_NVIC_EnableIRQ>
 8001da0:	e782      	b.n	8001ca8 <HAL_I2C_MspInit+0x2c>
      Error_Handler();
 8001da2:	f000 f845 	bl	8001e30 <Error_Handler>
 8001da6:	e789      	b.n	8001cbc <HAL_I2C_MspInit+0x40>
      Error_Handler();
 8001da8:	f000 f842 	bl	8001e30 <Error_Handler>
 8001dac:	e7d0      	b.n	8001d50 <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 8001dae:	f000 f83f 	bl	8001e30 <Error_Handler>
 8001db2:	e7e2      	b.n	8001d7a <HAL_I2C_MspInit+0xfe>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db8:	a806      	add	r0, sp, #24
 8001dba:	f004 fdf3 	bl	80069a4 <HAL_RCCEx_PeriphCLKConfig>
 8001dbe:	bb18      	cbnz	r0, 8001e08 <HAL_I2C_MspInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc0:	4c15      	ldr	r4, [pc, #84]	; (8001e18 <HAL_I2C_MspInit+0x19c>)
 8001dc2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001dca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	9304      	str	r3, [sp, #16]
 8001dd2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dd8:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dda:	2312      	movs	r3, #18
 8001ddc:	931c      	str	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dde:	2301      	movs	r3, #1
 8001de0:	931d      	str	r3, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	931e      	str	r3, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001de6:	2304      	movs	r3, #4
 8001de8:	931f      	str	r3, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	a91b      	add	r1, sp, #108	; 0x6c
 8001dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df0:	f002 fbc6 	bl	8004580 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001df4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001df6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dfa:	65a3      	str	r3, [r4, #88]	; 0x58
 8001dfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e02:	9305      	str	r3, [sp, #20]
 8001e04:	9b05      	ldr	r3, [sp, #20]
}
 8001e06:	e74f      	b.n	8001ca8 <HAL_I2C_MspInit+0x2c>
      Error_Handler();
 8001e08:	f000 f812 	bl	8001e30 <Error_Handler>
 8001e0c:	e7d8      	b.n	8001dc0 <HAL_I2C_MspInit+0x144>
 8001e0e:	bf00      	nop
 8001e10:	40005400 	.word	0x40005400
 8001e14:	40005800 	.word	0x40005800
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	48000400 	.word	0x48000400
 8001e20:	200006f8 	.word	0x200006f8
 8001e24:	40020030 	.word	0x40020030
 8001e28:	20000758 	.word	0x20000758
 8001e2c:	40020044 	.word	0x40020044

08001e30 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e30:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e32:	e7fe      	b.n	8001e32 <Error_Handler+0x2>

08001e34 <SystemClock_Config>:
{
 8001e34:	b500      	push	{lr}
 8001e36:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e38:	2238      	movs	r2, #56	; 0x38
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	a806      	add	r0, sp, #24
 8001e3e:	f008 ff05 	bl	800ac4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e42:	2000      	movs	r0, #0
 8001e44:	9001      	str	r0, [sp, #4]
 8001e46:	9002      	str	r0, [sp, #8]
 8001e48:	9003      	str	r0, [sp, #12]
 8001e4a:	9004      	str	r0, [sp, #16]
 8001e4c:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001e4e:	f004 f88d 	bl	8005f6c <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001e52:	2321      	movs	r3, #33	; 0x21
 8001e54:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001e56:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001e5a:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e60:	2302      	movs	r3, #2
 8001e62:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e64:	2103      	movs	r1, #3
 8001e66:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001e68:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8001e6a:	222a      	movs	r2, #42	; 0x2a
 8001e6c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e6e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8001e70:	2206      	movs	r2, #6
 8001e72:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e74:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e76:	a806      	add	r0, sp, #24
 8001e78:	f004 f9b6 	bl	80061e8 <HAL_RCC_OscConfig>
 8001e7c:	b980      	cbnz	r0, 8001ea0 <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e7e:	230f      	movs	r3, #15
 8001e80:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e82:	2303      	movs	r3, #3
 8001e84:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e86:	2300      	movs	r3, #0
 8001e88:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e8a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e8c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e8e:	2104      	movs	r1, #4
 8001e90:	eb0d 0001 	add.w	r0, sp, r1
 8001e94:	f004 fc60 	bl	8006758 <HAL_RCC_ClockConfig>
 8001e98:	b920      	cbnz	r0, 8001ea4 <SystemClock_Config+0x70>
}
 8001e9a:	b015      	add	sp, #84	; 0x54
 8001e9c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001ea0:	f7ff ffc6 	bl	8001e30 <Error_Handler>
    Error_Handler();
 8001ea4:	f7ff ffc4 	bl	8001e30 <Error_Handler>

08001ea8 <main>:
{
 8001ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eac:	b082      	sub	sp, #8
  HAL_Init();
 8001eae:	f001 f923 	bl	80030f8 <HAL_Init>
  SystemClock_Config();
 8001eb2:	f7ff ffbf 	bl	8001e34 <SystemClock_Config>
  MX_GPIO_Init();
 8001eb6:	f7ff fd8d 	bl	80019d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001eba:	f7ff f8c5 	bl	8001048 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001ebe:	f7ff f913 	bl	80010e8 <MX_ADC2_Init>
  MX_FMC_Init();
 8001ec2:	f7ff fd49 	bl	8001958 <MX_FMC_Init>
  MX_I2C2_Init();
 8001ec6:	f7ff fea9 	bl	8001c1c <MX_I2C2_Init>
  MX_UART4_Init();
 8001eca:	f000 fe0d 	bl	8002ae8 <MX_UART4_Init>
  MX_UART5_Init();
 8001ece:	f000 fe3f 	bl	8002b50 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001ed2:	f000 fe71 	bl	8002bb8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001ed6:	f000 ff69 	bl	8002dac <MX_USART2_UART_Init>
  MX_QUADSPI1_Init();
 8001eda:	f000 f957 	bl	800218c <MX_QUADSPI1_Init>
  MX_SPI1_Init();
 8001ede:	f000 f9df 	bl	80022a0 <MX_SPI1_Init>
  MX_TIM5_Init();
 8001ee2:	f000 fbc3 	bl	800266c <MX_TIM5_Init>
  MX_TIM8_Init();
 8001ee6:	f000 fc37 	bl	8002758 <MX_TIM8_Init>
  MX_TIM20_Init();
 8001eea:	f000 fd55 	bl	8002998 <MX_TIM20_Init>
  MX_ADC3_Init();
 8001eee:	f7ff f93f 	bl	8001170 <MX_ADC3_Init>
  MX_DAC1_Init();
 8001ef2:	f7ff fb63 	bl	80015bc <MX_DAC1_Init>
  MX_DAC2_Init();
 8001ef6:	f7ff fb8f 	bl	8001618 <MX_DAC2_Init>
  MX_FDCAN2_Init();
 8001efa:	f7ff fc79 	bl	80017f0 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8001efe:	f7ff fe61 	bl	8001bc4 <MX_I2C1_Init>
  MX_TIM15_Init();
 8001f02:	f000 fcd1 	bl	80028a8 <MX_TIM15_Init>
  MX_USART3_UART_Init();
 8001f06:	f000 ff85 	bl	8002e14 <MX_USART3_UART_Init>
  MX_USB_Device_Init();
 8001f0a:	f008 fc11 	bl	800a730 <MX_USB_Device_Init>
  MX_DMA_Init();
 8001f0e:	f7ff fc03 	bl	8001718 <MX_DMA_Init>
  MX_CRC_Init();
 8001f12:	f7ff fb27 	bl	8001564 <MX_CRC_Init>
  MX_ADC4_Init();	//bug workaround: https://community.st.com/s/question/0D50X0000BVnBhASQV/bug-report-dma-and-adc-initialization-order-changed-in-stm32f4-hal-v1241-causing-incorrect-adc-operation
 8001f16:	f7ff f97b 	bl	8001210 <MX_ADC4_Init>
  for (uint8_t i=0;i<3;i++)
 8001f1a:	2400      	movs	r4, #0
 8001f1c:	2c02      	cmp	r4, #2
 8001f1e:	d81e      	bhi.n	8001f5e <main+0xb6>
	  HAL_Delay(100);
 8001f20:	2064      	movs	r0, #100	; 0x64
 8001f22:	f001 f90b 	bl	800313c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 8001f26:	4e30      	ldr	r6, [pc, #192]	; (8001fe8 <main+0x140>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	213c      	movs	r1, #60	; 0x3c
 8001f2c:	4630      	mov	r0, r6
 8001f2e:	f002 fc11 	bl	8004754 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_SET);
 8001f32:	4d2e      	ldr	r5, [pc, #184]	; (8001fec <main+0x144>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	210f      	movs	r1, #15
 8001f38:	4628      	mov	r0, r5
 8001f3a:	f002 fc0b 	bl	8004754 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001f3e:	2064      	movs	r0, #100	; 0x64
 8001f40:	f001 f8fc 	bl	800313c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001f44:	2200      	movs	r2, #0
 8001f46:	213c      	movs	r1, #60	; 0x3c
 8001f48:	4630      	mov	r0, r6
 8001f4a:	f002 fc03 	bl	8004754 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	210f      	movs	r1, #15
 8001f52:	4628      	mov	r0, r5
 8001f54:	f002 fbfe 	bl	8004754 <HAL_GPIO_WritePin>
  for (uint8_t i=0;i<3;i++)
 8001f58:	3401      	adds	r4, #1
 8001f5a:	b2e4      	uxtb	r4, r4
 8001f5c:	e7de      	b.n	8001f1c <main+0x74>
  LCD_Init();
 8001f5e:	f007 fad1 	bl	8009504 <LCD_Init>
  LCD_UG_init();
 8001f62:	f007 fc43 	bl	80097ec <LCD_UG_init>
  main_character* player = new_main_character(5, 100, 1, 40, 10);
 8001f66:	230a      	movs	r3, #10
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2328      	movs	r3, #40	; 0x28
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2164      	movs	r1, #100	; 0x64
 8001f70:	2005      	movs	r0, #5
 8001f72:	f000 f841 	bl	8001ff8 <new_main_character>
 8001f76:	4680      	mov	r8, r0
 8001f78:	e033      	b.n	8001fe2 <main+0x13a>
			  destroyable* dirt = create_destroyable("dirt", 4*i, 4*j, BLOCK_WIDTH, NULL);
 8001f7a:	00aa      	lsls	r2, r5, #2
 8001f7c:	b292      	uxth	r2, r2
 8001f7e:	2300      	movs	r3, #0
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	2304      	movs	r3, #4
 8001f84:	4631      	mov	r1, r6
 8001f86:	481a      	ldr	r0, [pc, #104]	; (8001ff0 <main+0x148>)
 8001f88:	f000 f874 	bl	8002074 <create_destroyable>
 8001f8c:	4604      	mov	r4, r0
			  draw_dirt(dirt->block);
 8001f8e:	6840      	ldr	r0, [r0, #4]
 8001f90:	f000 f880 	bl	8002094 <draw_dirt>
			  free_destroyable(dirt);
 8001f94:	4620      	mov	r0, r4
 8001f96:	f000 f8ef 	bl	8002178 <free_destroyable>
		  for (int j = 45; j < 60; j++) {
 8001f9a:	3501      	adds	r5, #1
 8001f9c:	2d3b      	cmp	r5, #59	; 0x3b
 8001f9e:	ddec      	ble.n	8001f7a <main+0xd2>
	  for (int i = 0; i < 80; i++) {
 8001fa0:	3701      	adds	r7, #1
 8001fa2:	2f4f      	cmp	r7, #79	; 0x4f
 8001fa4:	dc12      	bgt.n	8001fcc <main+0x124>
		  destroyable* grass = create_destroyable("grass", 4*i, 4*44, BLOCK_WIDTH, NULL);
 8001fa6:	00be      	lsls	r6, r7, #2
 8001fa8:	b2b6      	uxth	r6, r6
 8001faa:	2300      	movs	r3, #0
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	2304      	movs	r3, #4
 8001fb0:	22b0      	movs	r2, #176	; 0xb0
 8001fb2:	4631      	mov	r1, r6
 8001fb4:	480f      	ldr	r0, [pc, #60]	; (8001ff4 <main+0x14c>)
 8001fb6:	f000 f85d 	bl	8002074 <create_destroyable>
 8001fba:	4604      	mov	r4, r0
		  draw_grass(grass->block);
 8001fbc:	6840      	ldr	r0, [r0, #4]
 8001fbe:	f000 f8a2 	bl	8002106 <draw_grass>
		  free_destroyable(grass);
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f000 f8d8 	bl	8002178 <free_destroyable>
		  for (int j = 45; j < 60; j++) {
 8001fc8:	252d      	movs	r5, #45	; 0x2d
 8001fca:	e7e7      	b.n	8001f9c <main+0xf4>
	  draw_main_character(player);
 8001fcc:	4640      	mov	r0, r8
 8001fce:	f000 f823 	bl	8002018 <draw_main_character>
	  move_main_character(player, 5, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2105      	movs	r1, #5
 8001fd6:	4640      	mov	r0, r8
 8001fd8:	f000 f834 	bl	8002044 <move_main_character>
	  HAL_Delay(100);
 8001fdc:	2064      	movs	r0, #100	; 0x64
 8001fde:	f001 f8ad 	bl	800313c <HAL_Delay>
	  for (int i = 0; i < 80; i++) {
 8001fe2:	2700      	movs	r7, #0
 8001fe4:	e7dd      	b.n	8001fa2 <main+0xfa>
 8001fe6:	bf00      	nop
 8001fe8:	48001400 	.word	0x48001400
 8001fec:	48000800 	.word	0x48000800
 8001ff0:	0800f548 	.word	0x0800f548
 8001ff4:	0800f540 	.word	0x0800f540

08001ff8 <new_main_character>:
	uint16_t y_pos;
} main_character;


// function "new_main_character" initializes main character with its properties
main_character* new_main_character(	uint8_t start_direction, uint8_t start_life_points, uint8_t start_level, uint16_t start_x_pos, uint16_t start_y_pos) {
 8001ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ffa:	4607      	mov	r7, r0
 8001ffc:	460e      	mov	r6, r1
 8001ffe:	4615      	mov	r5, r2
 8002000:	461c      	mov	r4, r3
	main_character* player = malloc(sizeof(main_character));
 8002002:	2008      	movs	r0, #8
 8002004:	f008 fe12 	bl	800ac2c <malloc>

	player->direction = start_direction;
 8002008:	7007      	strb	r7, [r0, #0]
	player->life_points = start_life_points;
 800200a:	7046      	strb	r6, [r0, #1]
	player->level = start_level;
 800200c:	7085      	strb	r5, [r0, #2]

	player->x_pos = start_x_pos;
 800200e:	8084      	strh	r4, [r0, #4]
	player->y_pos = start_y_pos;
 8002010:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8002014:	80c3      	strh	r3, [r0, #6]

	return player;
}
 8002016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002018 <draw_main_character>:

// function "draw_main_character" prints character based on it's direction and other properties
void draw_main_character(main_character* player) {
 8002018:	b500      	push	{lr}
 800201a:	b083      	sub	sp, #12
	UG_FillFrame(player->x_pos, player->y_pos, player->x_pos + 10, player->y_pos + 10, C_PURPLE);
 800201c:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8002020:	88c1      	ldrh	r1, [r0, #6]
 8002022:	f10c 020a 	add.w	r2, ip, #10
 8002026:	f101 030a 	add.w	r3, r1, #10
 800202a:	f248 0010 	movw	r0, #32784	; 0x8010
 800202e:	9000      	str	r0, [sp, #0]
 8002030:	b21b      	sxth	r3, r3
 8002032:	b212      	sxth	r2, r2
 8002034:	b209      	sxth	r1, r1
 8002036:	fa0f f08c 	sxth.w	r0, ip
 800203a:	f007 fc53 	bl	80098e4 <UG_FillFrame>
}
 800203e:	b003      	add	sp, #12
 8002040:	f85d fb04 	ldr.w	pc, [sp], #4

08002044 <move_main_character>:

// function "move_main_character" updates main_character x_pos and y_pos properties
void move_main_character(main_character* player, uint8_t x_move, uint8_t y_move) {
	player->x_pos += x_move;
 8002044:	8883      	ldrh	r3, [r0, #4]
 8002046:	4419      	add	r1, r3
 8002048:	8081      	strh	r1, [r0, #4]
	player->y_pos += y_move;
 800204a:	88c3      	ldrh	r3, [r0, #6]
 800204c:	441a      	add	r2, r3
 800204e:	80c2      	strh	r2, [r0, #6]
}
 8002050:	4770      	bx	lr

08002052 <create_block>:
	void* data;
} destroyable;


/* Creates block with given coordinates and width */
block* create_block(uint16_t x, uint16_t y, uint8_t width) {
 8002052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002054:	4607      	mov	r7, r0
 8002056:	460e      	mov	r6, r1
 8002058:	4615      	mov	r5, r2
	 block* block = malloc(sizeof(block));
 800205a:	2004      	movs	r0, #4
 800205c:	f008 fde6 	bl	800ac2c <malloc>
 8002060:	4604      	mov	r4, r0
	 block->pos = malloc(sizeof(coord));
 8002062:	2004      	movs	r0, #4
 8002064:	f008 fde2 	bl	800ac2c <malloc>
 8002068:	6020      	str	r0, [r4, #0]
	 block->pos->x = x;
 800206a:	8007      	strh	r7, [r0, #0]
	 block->pos->y = y;
 800206c:	8046      	strh	r6, [r0, #2]
	 block->width = width;
 800206e:	7125      	strb	r5, [r4, #4]

	 return block;
}
 8002070:	4620      	mov	r0, r4
 8002072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002074 <create_destroyable>:

// Create wrapper for block - destroyables
destroyable* create_destroyable(char* type, uint16_t x, uint16_t y, uint8_t width, void* data) {
 8002074:	b538      	push	{r3, r4, r5, lr}
 8002076:	4604      	mov	r4, r0
 8002078:	4608      	mov	r0, r1
 800207a:	4611      	mov	r1, r2
	block* block = create_block(x, y, width);
 800207c:	461a      	mov	r2, r3
 800207e:	f7ff ffe8 	bl	8002052 <create_block>
 8002082:	4605      	mov	r5, r0

	destroyable* destroyable = malloc(sizeof(destroyable));
 8002084:	2004      	movs	r0, #4
 8002086:	f008 fdd1 	bl	800ac2c <malloc>
	destroyable->block = block;
 800208a:	6045      	str	r5, [r0, #4]
	destroyable->type = type;
 800208c:	6004      	str	r4, [r0, #0]
	destroyable->data = data;
 800208e:	9a04      	ldr	r2, [sp, #16]
 8002090:	6082      	str	r2, [r0, #8]
	return destroyable;
}
 8002092:	bd38      	pop	{r3, r4, r5, pc}

08002094 <draw_dirt>:


// Draws block of dirt
void draw_dirt(block* block) {
 8002094:	b570      	push	{r4, r5, r6, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	4604      	mov	r4, r0
	//char* colors[2] = {"C_BROWN", "C_SADDLE_BROWN"};

	UG_FillFrame(block->pos->x - 2, block->pos->y - 2, block->pos->x, block->pos->y, C_BROWN);
 800209a:	6803      	ldr	r3, [r0, #0]
 800209c:	881a      	ldrh	r2, [r3, #0]
 800209e:	1e90      	subs	r0, r2, #2
 80020a0:	885b      	ldrh	r3, [r3, #2]
 80020a2:	1e99      	subs	r1, r3, #2
 80020a4:	f24a 1545 	movw	r5, #41285	; 0xa145
 80020a8:	9500      	str	r5, [sp, #0]
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	b212      	sxth	r2, r2
 80020ae:	b209      	sxth	r1, r1
 80020b0:	b200      	sxth	r0, r0
 80020b2:	f007 fc17 	bl	80098e4 <UG_FillFrame>
	UG_FillFrame(block->pos->x, block->pos->y - 2, block->pos->x+2, block->pos->y, C_BROWN);
 80020b6:	6823      	ldr	r3, [r4, #0]
 80020b8:	8818      	ldrh	r0, [r3, #0]
 80020ba:	885b      	ldrh	r3, [r3, #2]
 80020bc:	1e99      	subs	r1, r3, #2
 80020be:	1c82      	adds	r2, r0, #2
 80020c0:	9500      	str	r5, [sp, #0]
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	b212      	sxth	r2, r2
 80020c6:	b209      	sxth	r1, r1
 80020c8:	b200      	sxth	r0, r0
 80020ca:	f007 fc0b 	bl	80098e4 <UG_FillFrame>
	UG_FillFrame(block->pos->x-2, block->pos->y, block->pos->x, block->pos->y+2, C_SADDLE_BROWN);
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	881a      	ldrh	r2, [r3, #0]
 80020d2:	1e90      	subs	r0, r2, #2
 80020d4:	8859      	ldrh	r1, [r3, #2]
 80020d6:	1c8b      	adds	r3, r1, #2
 80020d8:	f648 2622 	movw	r6, #35362	; 0x8a22
 80020dc:	9600      	str	r6, [sp, #0]
 80020de:	b21b      	sxth	r3, r3
 80020e0:	b212      	sxth	r2, r2
 80020e2:	b209      	sxth	r1, r1
 80020e4:	b200      	sxth	r0, r0
 80020e6:	f007 fbfd 	bl	80098e4 <UG_FillFrame>
	UG_FillFrame(block->pos->x, block->pos->y, block->pos->x+2, block->pos->y+2, C_BROWN);
 80020ea:	6823      	ldr	r3, [r4, #0]
 80020ec:	8818      	ldrh	r0, [r3, #0]
 80020ee:	8859      	ldrh	r1, [r3, #2]
 80020f0:	1c82      	adds	r2, r0, #2
 80020f2:	1c8b      	adds	r3, r1, #2
 80020f4:	9500      	str	r5, [sp, #0]
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	b212      	sxth	r2, r2
 80020fa:	b209      	sxth	r1, r1
 80020fc:	b200      	sxth	r0, r0
 80020fe:	f007 fbf1 	bl	80098e4 <UG_FillFrame>
}
 8002102:	b002      	add	sp, #8
 8002104:	bd70      	pop	{r4, r5, r6, pc}

08002106 <draw_grass>:

// Draws block of grass
void draw_grass(block* block) {
 8002106:	b530      	push	{r4, r5, lr}
 8002108:	b083      	sub	sp, #12
 800210a:	4604      	mov	r4, r0
	//char* colors[2] = {"C_BROWN", "C_SADDLE_BROWN"};

	UG_FillFrame(block->pos->x - 2, block->pos->y - 2, block->pos->x, block->pos->y, C_GREEN);
 800210c:	6803      	ldr	r3, [r0, #0]
 800210e:	881a      	ldrh	r2, [r3, #0]
 8002110:	1e90      	subs	r0, r2, #2
 8002112:	885b      	ldrh	r3, [r3, #2]
 8002114:	1e99      	subs	r1, r3, #2
 8002116:	f44f 65fc 	mov.w	r5, #2016	; 0x7e0
 800211a:	9500      	str	r5, [sp, #0]
 800211c:	b21b      	sxth	r3, r3
 800211e:	b212      	sxth	r2, r2
 8002120:	b209      	sxth	r1, r1
 8002122:	b200      	sxth	r0, r0
 8002124:	f007 fbde 	bl	80098e4 <UG_FillFrame>
	UG_FillFrame(block->pos->x, block->pos->y - 2, block->pos->x+2, block->pos->y, C_GREEN);
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	8818      	ldrh	r0, [r3, #0]
 800212c:	885b      	ldrh	r3, [r3, #2]
 800212e:	1e99      	subs	r1, r3, #2
 8002130:	1c82      	adds	r2, r0, #2
 8002132:	9500      	str	r5, [sp, #0]
 8002134:	b21b      	sxth	r3, r3
 8002136:	b212      	sxth	r2, r2
 8002138:	b209      	sxth	r1, r1
 800213a:	b200      	sxth	r0, r0
 800213c:	f007 fbd2 	bl	80098e4 <UG_FillFrame>
	UG_FillFrame(block->pos->x-2, block->pos->y, block->pos->x, block->pos->y+2, C_DARK_GREEN);
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	881a      	ldrh	r2, [r3, #0]
 8002144:	1e90      	subs	r0, r2, #2
 8002146:	8859      	ldrh	r1, [r3, #2]
 8002148:	1c8b      	adds	r3, r1, #2
 800214a:	f44f 7548 	mov.w	r5, #800	; 0x320
 800214e:	9500      	str	r5, [sp, #0]
 8002150:	b21b      	sxth	r3, r3
 8002152:	b212      	sxth	r2, r2
 8002154:	b209      	sxth	r1, r1
 8002156:	b200      	sxth	r0, r0
 8002158:	f007 fbc4 	bl	80098e4 <UG_FillFrame>
	UG_FillFrame(block->pos->x, block->pos->y, block->pos->x+2, block->pos->y+2, C_DARK_GREEN);
 800215c:	6823      	ldr	r3, [r4, #0]
 800215e:	8818      	ldrh	r0, [r3, #0]
 8002160:	8859      	ldrh	r1, [r3, #2]
 8002162:	1c82      	adds	r2, r0, #2
 8002164:	1c8b      	adds	r3, r1, #2
 8002166:	9500      	str	r5, [sp, #0]
 8002168:	b21b      	sxth	r3, r3
 800216a:	b212      	sxth	r2, r2
 800216c:	b209      	sxth	r1, r1
 800216e:	b200      	sxth	r0, r0
 8002170:	f007 fbb8 	bl	80098e4 <UG_FillFrame>
}
 8002174:	b003      	add	sp, #12
 8002176:	bd30      	pop	{r4, r5, pc}

08002178 <free_destroyable>:
void draw_block(block* block) {
	int diff = floor(block->width/2);
	UG_FillFrame(block->pos->x - diff, block->pos->y - diff, block->pos->x + diff, block->pos->y + diff, C_RED);
}

void free_destroyable(destroyable* destroyable) {
 8002178:	b510      	push	{r4, lr}
 800217a:	4604      	mov	r4, r0
	free(destroyable->block);
 800217c:	6840      	ldr	r0, [r0, #4]
 800217e:	f008 fd5d 	bl	800ac3c <free>
	free(destroyable);
 8002182:	4620      	mov	r0, r4
 8002184:	f008 fd5a 	bl	800ac3c <free>
}
 8002188:	bd10      	pop	{r4, pc}
	...

0800218c <MX_QUADSPI1_Init>:

QSPI_HandleTypeDef hqspi1;

/* QUADSPI1 init function */
void MX_QUADSPI1_Init(void)
{
 800218c:	b508      	push	{r3, lr}
  /* USER CODE END QUADSPI1_Init 0 */

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  hqspi1.Instance = QUADSPI;
 800218e:	480a      	ldr	r0, [pc, #40]	; (80021b8 <MX_QUADSPI1_Init+0x2c>)
 8002190:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <MX_QUADSPI1_Init+0x30>)
 8002192:	6003      	str	r3, [r0, #0]
  hqspi1.Init.ClockPrescaler = 255;
 8002194:	23ff      	movs	r3, #255	; 0xff
 8002196:	6043      	str	r3, [r0, #4]
  hqspi1.Init.FifoThreshold = 1;
 8002198:	2201      	movs	r2, #1
 800219a:	6082      	str	r2, [r0, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800219c:	2300      	movs	r3, #0
 800219e:	60c3      	str	r3, [r0, #12]
  hqspi1.Init.FlashSize = 1;
 80021a0:	6102      	str	r2, [r0, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80021a2:	6143      	str	r3, [r0, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80021a4:	6183      	str	r3, [r0, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_1;
 80021a6:	61c3      	str	r3, [r0, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80021a8:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 80021aa:	f003 ff99 	bl	80060e0 <HAL_QSPI_Init>
 80021ae:	b900      	cbnz	r0, 80021b2 <MX_QUADSPI1_Init+0x26>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 80021b0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80021b2:	f7ff fe3d 	bl	8001e30 <Error_Handler>
}
 80021b6:	e7fb      	b.n	80021b0 <MX_QUADSPI1_Init+0x24>
 80021b8:	20000850 	.word	0x20000850
 80021bc:	a0001000 	.word	0xa0001000

080021c0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80021c0:	b570      	push	{r4, r5, r6, lr}
 80021c2:	b09e      	sub	sp, #120	; 0x78
 80021c4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c6:	2100      	movs	r1, #0
 80021c8:	9119      	str	r1, [sp, #100]	; 0x64
 80021ca:	911a      	str	r1, [sp, #104]	; 0x68
 80021cc:	911b      	str	r1, [sp, #108]	; 0x6c
 80021ce:	911c      	str	r1, [sp, #112]	; 0x70
 80021d0:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021d2:	2254      	movs	r2, #84	; 0x54
 80021d4:	a804      	add	r0, sp, #16
 80021d6:	f008 fd39 	bl	800ac4c <memset>
  if(qspiHandle->Instance==QUADSPI)
 80021da:	6822      	ldr	r2, [r4, #0]
 80021dc:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <HAL_QSPI_MspInit+0xd0>)
 80021de:	429a      	cmp	r2, r3
 80021e0:	d001      	beq.n	80021e6 <HAL_QSPI_MspInit+0x26>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80021e2:	b01e      	add	sp, #120	; 0x78
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80021e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021ea:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021ec:	a804      	add	r0, sp, #16
 80021ee:	f004 fbd9 	bl	80069a4 <HAL_RCCEx_PeriphCLKConfig>
 80021f2:	2800      	cmp	r0, #0
 80021f4:	d148      	bne.n	8002288 <HAL_QSPI_MspInit+0xc8>
    __HAL_RCC_QSPI_CLK_ENABLE();
 80021f6:	4b27      	ldr	r3, [pc, #156]	; (8002294 <HAL_QSPI_MspInit+0xd4>)
 80021f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021fe:	651a      	str	r2, [r3, #80]	; 0x50
 8002200:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002202:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002206:	9200      	str	r2, [sp, #0]
 8002208:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800220c:	f042 0201 	orr.w	r2, r2, #1
 8002210:	64da      	str	r2, [r3, #76]	; 0x4c
 8002212:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002214:	f002 0201 	and.w	r2, r2, #1
 8002218:	9201      	str	r2, [sp, #4]
 800221a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800221e:	f042 0202 	orr.w	r2, r2, #2
 8002222:	64da      	str	r2, [r3, #76]	; 0x4c
 8002224:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002226:	f002 0202 	and.w	r2, r2, #2
 800222a:	9202      	str	r2, [sp, #8]
 800222c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800222e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002230:	f042 0220 	orr.w	r2, r2, #32
 8002234:	64da      	str	r2, [r3, #76]	; 0x4c
 8002236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	9303      	str	r3, [sp, #12]
 800223e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = QSPI_IO2_Pin;
 8002240:	2380      	movs	r3, #128	; 0x80
 8002242:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2602      	movs	r6, #2
 8002246:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2400      	movs	r4, #0
 800224a:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800224e:	250a      	movs	r5, #10
 8002250:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(QSPI_IO2_GPIO_Port, &GPIO_InitStruct);
 8002252:	a919      	add	r1, sp, #100	; 0x64
 8002254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002258:	f002 f992 	bl	8004580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_IO1_Pin|QSPI_IO0_Pin|QSPI_CLK_Pin|QSPI_NCS_Pin;
 800225c:	f640 4303 	movw	r3, #3075	; 0xc03
 8002260:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002268:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226a:	a919      	add	r1, sp, #100	; 0x64
 800226c:	480a      	ldr	r0, [pc, #40]	; (8002298 <HAL_QSPI_MspInit+0xd8>)
 800226e:	f002 f987 	bl	8004580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_IO3_Pin;
 8002272:	2340      	movs	r3, #64	; 0x40
 8002274:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800227c:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(QSPI_IO3_GPIO_Port, &GPIO_InitStruct);
 800227e:	a919      	add	r1, sp, #100	; 0x64
 8002280:	4806      	ldr	r0, [pc, #24]	; (800229c <HAL_QSPI_MspInit+0xdc>)
 8002282:	f002 f97d 	bl	8004580 <HAL_GPIO_Init>
}
 8002286:	e7ac      	b.n	80021e2 <HAL_QSPI_MspInit+0x22>
      Error_Handler();
 8002288:	f7ff fdd2 	bl	8001e30 <Error_Handler>
 800228c:	e7b3      	b.n	80021f6 <HAL_QSPI_MspInit+0x36>
 800228e:	bf00      	nop
 8002290:	a0001000 	.word	0xa0001000
 8002294:	40021000 	.word	0x40021000
 8002298:	48000400 	.word	0x48000400
 800229c:	48001400 	.word	0x48001400

080022a0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80022a0:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80022a2:	4810      	ldr	r0, [pc, #64]	; (80022e4 <MX_SPI1_Init+0x44>)
 80022a4:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <MX_SPI1_Init+0x48>)
 80022a6:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022a8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80022ac:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022ae:	2300      	movs	r3, #0
 80022b0:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022b6:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022b8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022ba:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80022c2:	2228      	movs	r2, #40	; 0x28
 80022c4:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022c6:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022c8:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ca:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80022cc:	2207      	movs	r2, #7
 80022ce:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022d0:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80022d2:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022d4:	f004 fd22 	bl	8006d1c <HAL_SPI_Init>
 80022d8:	b900      	cbnz	r0, 80022dc <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022da:	bd08      	pop	{r3, pc}
    Error_Handler();
 80022dc:	f7ff fda8 	bl	8001e30 <Error_Handler>
}
 80022e0:	e7fb      	b.n	80022da <MX_SPI1_Init+0x3a>
 80022e2:	bf00      	nop
 80022e4:	2000089c 	.word	0x2000089c
 80022e8:	40013000 	.word	0x40013000

080022ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022ec:	b500      	push	{lr}
 80022ee:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	2300      	movs	r3, #0
 80022f2:	9303      	str	r3, [sp, #12]
 80022f4:	9304      	str	r3, [sp, #16]
 80022f6:	9305      	str	r3, [sp, #20]
 80022f8:	9306      	str	r3, [sp, #24]
 80022fa:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 80022fc:	6802      	ldr	r2, [r0, #0]
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_SPI_MspInit+0x5c>)
 8002300:	429a      	cmp	r2, r3
 8002302:	d002      	beq.n	800230a <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002304:	b009      	add	sp, #36	; 0x24
 8002306:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 800230a:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800230e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002310:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002314:	661a      	str	r2, [r3, #96]	; 0x60
 8002316:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002318:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800231c:	9201      	str	r2, [sp, #4]
 800231e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002320:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002326:	64da      	str	r2, [r3, #76]	; 0x4c
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232e:	9302      	str	r3, [sp, #8]
 8002330:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002332:	231c      	movs	r3, #28
 8002334:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800233a:	2305      	movs	r3, #5
 800233c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800233e:	a903      	add	r1, sp, #12
 8002340:	4802      	ldr	r0, [pc, #8]	; (800234c <HAL_SPI_MspInit+0x60>)
 8002342:	f002 f91d 	bl	8004580 <HAL_GPIO_Init>
}
 8002346:	e7dd      	b.n	8002304 <HAL_SPI_MspInit+0x18>
 8002348:	40013000 	.word	0x40013000
 800234c:	48001800 	.word	0x48001800

08002350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002350:	b500      	push	{lr}
 8002352:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_MspInit+0x34>)
 8002356:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002358:	f042 0201 	orr.w	r2, r2, #1
 800235c:	661a      	str	r2, [r3, #96]	; 0x60
 800235e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002360:	f002 0201 	and.w	r2, r2, #1
 8002364:	9200      	str	r2, [sp, #0]
 8002366:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002368:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800236a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800236e:	659a      	str	r2, [r3, #88]	; 0x58
 8002370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800237a:	f003 fe7d 	bl	8006078 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800237e:	b003      	add	sp, #12
 8002380:	f85d fb04 	ldr.w	pc, [sp], #4
 8002384:	40021000 	.word	0x40021000

08002388 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <NMI_Handler>

0800238a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800238a:	e7fe      	b.n	800238a <HardFault_Handler>

0800238c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800238c:	e7fe      	b.n	800238c <MemManage_Handler>

0800238e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800238e:	e7fe      	b.n	800238e <BusFault_Handler>

08002390 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <UsageFault_Handler>

08002392 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002392:	4770      	bx	lr

08002394 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002394:	4770      	bx	lr

08002396 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002396:	4770      	bx	lr

08002398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002398:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800239a:	f000 febd 	bl	8003118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800239e:	bd08      	pop	{r3, pc}

080023a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80023a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 80023a2:	4802      	ldr	r0, [pc, #8]	; (80023ac <DMA1_Channel1_IRQHandler+0xc>)
 80023a4:	f001 ff57 	bl	8004256 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80023a8:	bd08      	pop	{r3, pc}
 80023aa:	bf00      	nop
 80023ac:	200005d8 	.word	0x200005d8

080023b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80023b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80023b2:	4802      	ldr	r0, [pc, #8]	; (80023bc <DMA1_Channel3_IRQHandler+0xc>)
 80023b4:	f001 ff4f 	bl	8004256 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80023b8:	bd08      	pop	{r3, pc}
 80023ba:	bf00      	nop
 80023bc:	200006f8 	.word	0x200006f8

080023c0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80023c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80023c2:	4802      	ldr	r0, [pc, #8]	; (80023cc <DMA1_Channel4_IRQHandler+0xc>)
 80023c4:	f001 ff47 	bl	8004256 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80023c8:	bd08      	pop	{r3, pc}
 80023ca:	bf00      	nop
 80023cc:	20000758 	.word	0x20000758

080023d0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80023d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80023d2:	4802      	ldr	r0, [pc, #8]	; (80023dc <DMA1_Channel5_IRQHandler+0xc>)
 80023d4:	f001 ff3f 	bl	8004256 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80023d8:	bd08      	pop	{r3, pc}
 80023da:	bf00      	nop
 80023dc:	2000052c 	.word	0x2000052c

080023e0 <DMA1_Channel6_IRQHandler>:
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80023e0:	4770      	bx	lr

080023e2 <DMA1_Channel7_IRQHandler>:
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80023e2:	4770      	bx	lr

080023e4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80023e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80023e6:	4802      	ldr	r0, [pc, #8]	; (80023f0 <USB_LP_IRQHandler+0xc>)
 80023e8:	f003 fb7d 	bl	8005ae6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80023ec:	bd08      	pop	{r3, pc}
 80023ee:	bf00      	nop
 80023f0:	200021c0 	.word	0x200021c0

080023f4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80023f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80023f6:	4802      	ldr	r0, [pc, #8]	; (8002400 <I2C1_EV_IRQHandler+0xc>)
 80023f8:	f002 fa58 	bl	80048ac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80023fc:	bd08      	pop	{r3, pc}
 80023fe:	bf00      	nop
 8002400:	200007b8 	.word	0x200007b8

08002404 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002404:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002406:	4802      	ldr	r0, [pc, #8]	; (8002410 <I2C1_ER_IRQHandler+0xc>)
 8002408:	f002 fd1b 	bl	8004e42 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800240c:	bd08      	pop	{r3, pc}
 800240e:	bf00      	nop
 8002410:	200007b8 	.word	0x200007b8

08002414 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002414:	2001      	movs	r0, #1
 8002416:	4770      	bx	lr

08002418 <_kill>:

int _kill(int pid, int sig)
{
 8002418:	b508      	push	{r3, lr}
	errno = EINVAL;
 800241a:	f008 fbdd 	bl	800abd8 <__errno>
 800241e:	2316      	movs	r3, #22
 8002420:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002426:	bd08      	pop	{r3, pc}

08002428 <_exit>:

void _exit (int status)
{
 8002428:	b508      	push	{r3, lr}
	_kill(status, -1);
 800242a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800242e:	f7ff fff3 	bl	8002418 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002432:	e7fe      	b.n	8002432 <_exit+0xa>

08002434 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002434:	b570      	push	{r4, r5, r6, lr}
 8002436:	460c      	mov	r4, r1
 8002438:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243a:	2500      	movs	r5, #0
 800243c:	e006      	b.n	800244c <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800243e:	f3af 8000 	nop.w
 8002442:	4621      	mov	r1, r4
 8002444:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002448:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800244a:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244c:	42b5      	cmp	r5, r6
 800244e:	dbf6      	blt.n	800243e <_read+0xa>
	}

return len;
}
 8002450:	4630      	mov	r0, r6
 8002452:	bd70      	pop	{r4, r5, r6, pc}

08002454 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002454:	b570      	push	{r4, r5, r6, lr}
 8002456:	460c      	mov	r4, r1
 8002458:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245a:	2500      	movs	r5, #0
 800245c:	e004      	b.n	8002468 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800245e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002462:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002466:	3501      	adds	r5, #1
 8002468:	42b5      	cmp	r5, r6
 800246a:	dbf8      	blt.n	800245e <_write+0xa>
	}
	return len;
}
 800246c:	4630      	mov	r0, r6
 800246e:	bd70      	pop	{r4, r5, r6, pc}

08002470 <_close>:

int _close(int file)
{
	return -1;
}
 8002470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002474:	4770      	bx	lr

08002476 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002476:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800247a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800247c:	2000      	movs	r0, #0
 800247e:	4770      	bx	lr

08002480 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002480:	2001      	movs	r0, #1
 8002482:	4770      	bx	lr

08002484 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002484:	2000      	movs	r0, #0
 8002486:	4770      	bx	lr

08002488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002488:	b510      	push	{r4, lr}
 800248a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800248c:	4a0c      	ldr	r2, [pc, #48]	; (80024c0 <_sbrk+0x38>)
 800248e:	490d      	ldr	r1, [pc, #52]	; (80024c4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002490:	480d      	ldr	r0, [pc, #52]	; (80024c8 <_sbrk+0x40>)
 8002492:	6800      	ldr	r0, [r0, #0]
 8002494:	b140      	cbz	r0, 80024a8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002496:	480c      	ldr	r0, [pc, #48]	; (80024c8 <_sbrk+0x40>)
 8002498:	6800      	ldr	r0, [r0, #0]
 800249a:	4403      	add	r3, r0
 800249c:	1a52      	subs	r2, r2, r1
 800249e:	4293      	cmp	r3, r2
 80024a0:	d806      	bhi.n	80024b0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80024a2:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <_sbrk+0x40>)
 80024a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80024a6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80024a8:	4807      	ldr	r0, [pc, #28]	; (80024c8 <_sbrk+0x40>)
 80024aa:	4c08      	ldr	r4, [pc, #32]	; (80024cc <_sbrk+0x44>)
 80024ac:	6004      	str	r4, [r0, #0]
 80024ae:	e7f2      	b.n	8002496 <_sbrk+0xe>
    errno = ENOMEM;
 80024b0:	f008 fb92 	bl	800abd8 <__errno>
 80024b4:	230c      	movs	r3, #12
 80024b6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80024b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024bc:	e7f3      	b.n	80024a6 <_sbrk+0x1e>
 80024be:	bf00      	nop
 80024c0:	20020000 	.word	0x20020000
 80024c4:	00000400 	.word	0x00000400
 80024c8:	20000900 	.word	0x20000900
 80024cc:	200026e8 	.word	0x200026e8

080024d0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024d0:	4a03      	ldr	r2, [pc, #12]	; (80024e0 <SystemInit+0x10>)
 80024d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80024d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim20);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024e4:	b084      	sub	sp, #16

  if(tim_baseHandle->Instance==TIM5)
 80024e6:	6803      	ldr	r3, [r0, #0]
 80024e8:	4a1c      	ldr	r2, [pc, #112]	; (800255c <HAL_TIM_Base_MspInit+0x78>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d013      	beq.n	8002516 <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 80024ee:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <HAL_TIM_Base_MspInit+0x7c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d01c      	beq.n	800252e <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM15)
 80024f4:	4a1b      	ldr	r2, [pc, #108]	; (8002564 <HAL_TIM_Base_MspInit+0x80>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d024      	beq.n	8002544 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM20)
 80024fa:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <HAL_TIM_Base_MspInit+0x84>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d114      	bne.n	800252a <HAL_TIM_Base_MspInit+0x46>
  {
  /* USER CODE BEGIN TIM20_MspInit 0 */

  /* USER CODE END TIM20_MspInit 0 */
    /* TIM20 clock enable */
    __HAL_RCC_TIM20_CLK_ENABLE();
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_TIM_Base_MspInit+0x88>)
 8002502:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002504:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002508:	661a      	str	r2, [r3, #96]	; 0x60
 800250a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002510:	9303      	str	r3, [sp, #12]
 8002512:	9b03      	ldr	r3, [sp, #12]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8002514:	e009      	b.n	800252a <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_TIM_Base_MspInit+0x88>)
 8002518:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800251a:	f042 0208 	orr.w	r2, r2, #8
 800251e:	659a      	str	r2, [r3, #88]	; 0x58
 8002520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	9b00      	ldr	r3, [sp, #0]
}
 800252a:	b004      	add	sp, #16
 800252c:	4770      	bx	lr
    __HAL_RCC_TIM8_CLK_ENABLE();
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <HAL_TIM_Base_MspInit+0x88>)
 8002530:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002532:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002536:	661a      	str	r2, [r3, #96]	; 0x60
 8002538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	9b01      	ldr	r3, [sp, #4]
 8002542:	e7f2      	b.n	800252a <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_TIM_Base_MspInit+0x88>)
 8002546:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002548:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800254c:	661a      	str	r2, [r3, #96]	; 0x60
 800254e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002554:	9302      	str	r3, [sp, #8]
 8002556:	9b02      	ldr	r3, [sp, #8]
 8002558:	e7e7      	b.n	800252a <HAL_TIM_Base_MspInit+0x46>
 800255a:	bf00      	nop
 800255c:	40000c00 	.word	0x40000c00
 8002560:	40013400 	.word	0x40013400
 8002564:	40014000 	.word	0x40014000
 8002568:	40015000 	.word	0x40015000
 800256c:	40021000 	.word	0x40021000

08002570 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002570:	b500      	push	{lr}
 8002572:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002574:	2300      	movs	r3, #0
 8002576:	9305      	str	r3, [sp, #20]
 8002578:	9306      	str	r3, [sp, #24]
 800257a:	9307      	str	r3, [sp, #28]
 800257c:	9308      	str	r3, [sp, #32]
 800257e:	9309      	str	r3, [sp, #36]	; 0x24
  if(timHandle->Instance==TIM5)
 8002580:	6803      	ldr	r3, [r0, #0]
 8002582:	4a33      	ldr	r2, [pc, #204]	; (8002650 <HAL_TIM_MspPostInit+0xe0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00b      	beq.n	80025a0 <HAL_TIM_MspPostInit+0x30>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 8002588:	4a32      	ldr	r2, [pc, #200]	; (8002654 <HAL_TIM_MspPostInit+0xe4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d01e      	beq.n	80025cc <HAL_TIM_MspPostInit+0x5c>

  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM15)
 800258e:	4a32      	ldr	r2, [pc, #200]	; (8002658 <HAL_TIM_MspPostInit+0xe8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d031      	beq.n	80025f8 <HAL_TIM_MspPostInit+0x88>

  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM20)
 8002594:	4a31      	ldr	r2, [pc, #196]	; (800265c <HAL_TIM_MspPostInit+0xec>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d044      	beq.n	8002624 <HAL_TIM_MspPostInit+0xb4>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 800259a:	b00b      	add	sp, #44	; 0x2c
 800259c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025a0:	4b2f      	ldr	r3, [pc, #188]	; (8002660 <HAL_TIM_MspPostInit+0xf0>)
 80025a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025a4:	f042 0220 	orr.w	r2, r2, #32
 80025a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80025aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM2_Pin|PWM3_Pin|PWM4_Pin;
 80025b4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80025b8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ba:	2302      	movs	r3, #2
 80025bc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 80025be:	2306      	movs	r3, #6
 80025c0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025c2:	a905      	add	r1, sp, #20
 80025c4:	4827      	ldr	r0, [pc, #156]	; (8002664 <HAL_TIM_MspPostInit+0xf4>)
 80025c6:	f001 ffdb 	bl	8004580 <HAL_GPIO_Init>
 80025ca:	e7e6      	b.n	800259a <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025cc:	4b24      	ldr	r3, [pc, #144]	; (8002660 <HAL_TIM_MspPostInit+0xf0>)
 80025ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025d0:	f042 0204 	orr.w	r2, r2, #4
 80025d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80025d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	9302      	str	r3, [sp, #8]
 80025de:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM10_Pin|PWM11_Pin|PWM12_Pin|PWM13_Pin;
 80025e0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80025e4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80025ea:	2304      	movs	r3, #4
 80025ec:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ee:	a905      	add	r1, sp, #20
 80025f0:	481d      	ldr	r0, [pc, #116]	; (8002668 <HAL_TIM_MspPostInit+0xf8>)
 80025f2:	f001 ffc5 	bl	8004580 <HAL_GPIO_Init>
 80025f6:	e7d0      	b.n	800259a <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_TIM_MspPostInit+0xf0>)
 80025fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025fc:	f042 0220 	orr.w	r2, r2, #32
 8002600:	64da      	str	r2, [r3, #76]	; 0x4c
 8002602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	9303      	str	r3, [sp, #12]
 800260a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = PWM5_Pin;
 800260c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002610:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002612:	2302      	movs	r3, #2
 8002614:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
 8002616:	2303      	movs	r3, #3
 8002618:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(PWM5_GPIO_Port, &GPIO_InitStruct);
 800261a:	a905      	add	r1, sp, #20
 800261c:	4811      	ldr	r0, [pc, #68]	; (8002664 <HAL_TIM_MspPostInit+0xf4>)
 800261e:	f001 ffaf 	bl	8004580 <HAL_GPIO_Init>
 8002622:	e7ba      	b.n	800259a <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002624:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <HAL_TIM_MspPostInit+0xf0>)
 8002626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002628:	f042 0220 	orr.w	r2, r2, #32
 800262c:	64da      	str	r2, [r3, #76]	; 0x4c
 800262e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	9304      	str	r3, [sp, #16]
 8002636:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = PWM6_Pin|PWM7_Pin|PWM8_Pin|PWM9_Pin;
 8002638:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800263c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263e:	2302      	movs	r3, #2
 8002640:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 8002642:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002644:	a905      	add	r1, sp, #20
 8002646:	4807      	ldr	r0, [pc, #28]	; (8002664 <HAL_TIM_MspPostInit+0xf4>)
 8002648:	f001 ff9a 	bl	8004580 <HAL_GPIO_Init>
}
 800264c:	e7a5      	b.n	800259a <HAL_TIM_MspPostInit+0x2a>
 800264e:	bf00      	nop
 8002650:	40000c00 	.word	0x40000c00
 8002654:	40013400 	.word	0x40013400
 8002658:	40014000 	.word	0x40014000
 800265c:	40015000 	.word	0x40015000
 8002660:	40021000 	.word	0x40021000
 8002664:	48001400 	.word	0x48001400
 8002668:	48000800 	.word	0x48000800

0800266c <MX_TIM5_Init>:
{
 800266c:	b500      	push	{lr}
 800266e:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002670:	2300      	movs	r3, #0
 8002672:	930a      	str	r3, [sp, #40]	; 0x28
 8002674:	930b      	str	r3, [sp, #44]	; 0x2c
 8002676:	930c      	str	r3, [sp, #48]	; 0x30
 8002678:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800267a:	9307      	str	r3, [sp, #28]
 800267c:	9308      	str	r3, [sp, #32]
 800267e:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	9302      	str	r3, [sp, #8]
 8002686:	9303      	str	r3, [sp, #12]
 8002688:	9304      	str	r3, [sp, #16]
 800268a:	9305      	str	r3, [sp, #20]
 800268c:	9306      	str	r3, [sp, #24]
  htim5.Instance = TIM5;
 800268e:	4830      	ldr	r0, [pc, #192]	; (8002750 <MX_TIM5_Init+0xe4>)
 8002690:	4a30      	ldr	r2, [pc, #192]	; (8002754 <MX_TIM5_Init+0xe8>)
 8002692:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 10;
 8002694:	220a      	movs	r2, #10
 8002696:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002698:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 10000;
 800269a:	f242 7210 	movw	r2, #10000	; 0x2710
 800269e:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a0:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80026a6:	f004 fde1 	bl	800726c <HAL_TIM_Base_Init>
 80026aa:	2800      	cmp	r0, #0
 80026ac:	d13a      	bne.n	8002724 <MX_TIM5_Init+0xb8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b2:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026b4:	a90a      	add	r1, sp, #40	; 0x28
 80026b6:	4826      	ldr	r0, [pc, #152]	; (8002750 <MX_TIM5_Init+0xe4>)
 80026b8:	f004 ff30 	bl	800751c <HAL_TIM_ConfigClockSource>
 80026bc:	2800      	cmp	r0, #0
 80026be:	d134      	bne.n	800272a <MX_TIM5_Init+0xbe>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80026c0:	4823      	ldr	r0, [pc, #140]	; (8002750 <MX_TIM5_Init+0xe4>)
 80026c2:	f004 fe03 	bl	80072cc <HAL_TIM_PWM_Init>
 80026c6:	2800      	cmp	r0, #0
 80026c8:	d132      	bne.n	8002730 <MX_TIM5_Init+0xc4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ce:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026d0:	a907      	add	r1, sp, #28
 80026d2:	481f      	ldr	r0, [pc, #124]	; (8002750 <MX_TIM5_Init+0xe4>)
 80026d4:	f004 ffcc 	bl	8007670 <HAL_TIMEx_MasterConfigSynchronization>
 80026d8:	bb68      	cbnz	r0, 8002736 <MX_TIM5_Init+0xca>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026da:	2360      	movs	r3, #96	; 0x60
 80026dc:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 200;
 80026de:	23c8      	movs	r3, #200	; 0xc8
 80026e0:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026e2:	2300      	movs	r3, #0
 80026e4:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026e6:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026e8:	2204      	movs	r2, #4
 80026ea:	4669      	mov	r1, sp
 80026ec:	4818      	ldr	r0, [pc, #96]	; (8002750 <MX_TIM5_Init+0xe4>)
 80026ee:	f004 fe6b 	bl	80073c8 <HAL_TIM_PWM_ConfigChannel>
 80026f2:	bb18      	cbnz	r0, 800273c <MX_TIM5_Init+0xd0>
  sConfigOC.Pulse = 400;
 80026f4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80026f8:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026fa:	2208      	movs	r2, #8
 80026fc:	4669      	mov	r1, sp
 80026fe:	4814      	ldr	r0, [pc, #80]	; (8002750 <MX_TIM5_Init+0xe4>)
 8002700:	f004 fe62 	bl	80073c8 <HAL_TIM_PWM_ConfigChannel>
 8002704:	b9e8      	cbnz	r0, 8002742 <MX_TIM5_Init+0xd6>
  sConfigOC.Pulse = 600;
 8002706:	f44f 7316 	mov.w	r3, #600	; 0x258
 800270a:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800270c:	220c      	movs	r2, #12
 800270e:	4669      	mov	r1, sp
 8002710:	480f      	ldr	r0, [pc, #60]	; (8002750 <MX_TIM5_Init+0xe4>)
 8002712:	f004 fe59 	bl	80073c8 <HAL_TIM_PWM_ConfigChannel>
 8002716:	b9b8      	cbnz	r0, 8002748 <MX_TIM5_Init+0xdc>
  HAL_TIM_MspPostInit(&htim5);
 8002718:	480d      	ldr	r0, [pc, #52]	; (8002750 <MX_TIM5_Init+0xe4>)
 800271a:	f7ff ff29 	bl	8002570 <HAL_TIM_MspPostInit>
}
 800271e:	b00f      	add	sp, #60	; 0x3c
 8002720:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002724:	f7ff fb84 	bl	8001e30 <Error_Handler>
 8002728:	e7c1      	b.n	80026ae <MX_TIM5_Init+0x42>
    Error_Handler();
 800272a:	f7ff fb81 	bl	8001e30 <Error_Handler>
 800272e:	e7c7      	b.n	80026c0 <MX_TIM5_Init+0x54>
    Error_Handler();
 8002730:	f7ff fb7e 	bl	8001e30 <Error_Handler>
 8002734:	e7c9      	b.n	80026ca <MX_TIM5_Init+0x5e>
    Error_Handler();
 8002736:	f7ff fb7b 	bl	8001e30 <Error_Handler>
 800273a:	e7ce      	b.n	80026da <MX_TIM5_Init+0x6e>
    Error_Handler();
 800273c:	f7ff fb78 	bl	8001e30 <Error_Handler>
 8002740:	e7d8      	b.n	80026f4 <MX_TIM5_Init+0x88>
    Error_Handler();
 8002742:	f7ff fb75 	bl	8001e30 <Error_Handler>
 8002746:	e7de      	b.n	8002706 <MX_TIM5_Init+0x9a>
    Error_Handler();
 8002748:	f7ff fb72 	bl	8001e30 <Error_Handler>
 800274c:	e7e4      	b.n	8002718 <MX_TIM5_Init+0xac>
 800274e:	bf00      	nop
 8002750:	2000099c 	.word	0x2000099c
 8002754:	40000c00 	.word	0x40000c00

08002758 <MX_TIM8_Init>:
{
 8002758:	b510      	push	{r4, lr}
 800275a:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800275c:	2400      	movs	r4, #0
 800275e:	9418      	str	r4, [sp, #96]	; 0x60
 8002760:	9419      	str	r4, [sp, #100]	; 0x64
 8002762:	941a      	str	r4, [sp, #104]	; 0x68
 8002764:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002766:	9415      	str	r4, [sp, #84]	; 0x54
 8002768:	9416      	str	r4, [sp, #88]	; 0x58
 800276a:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 800276c:	940e      	str	r4, [sp, #56]	; 0x38
 800276e:	940f      	str	r4, [sp, #60]	; 0x3c
 8002770:	9410      	str	r4, [sp, #64]	; 0x40
 8002772:	9411      	str	r4, [sp, #68]	; 0x44
 8002774:	9412      	str	r4, [sp, #72]	; 0x48
 8002776:	9413      	str	r4, [sp, #76]	; 0x4c
 8002778:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800277a:	2234      	movs	r2, #52	; 0x34
 800277c:	4621      	mov	r1, r4
 800277e:	a801      	add	r0, sp, #4
 8002780:	f008 fa64 	bl	800ac4c <memset>
  htim8.Instance = TIM8;
 8002784:	4846      	ldr	r0, [pc, #280]	; (80028a0 <MX_TIM8_Init+0x148>)
 8002786:	4b47      	ldr	r3, [pc, #284]	; (80028a4 <MX_TIM8_Init+0x14c>)
 8002788:	6003      	str	r3, [r0, #0]
  htim8.Init.Prescaler = 0;
 800278a:	6044      	str	r4, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278c:	6084      	str	r4, [r0, #8]
  htim8.Init.Period = 65535;
 800278e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002792:	60c3      	str	r3, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002794:	6104      	str	r4, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 8002796:	6144      	str	r4, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002798:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800279a:	f004 fd67 	bl	800726c <HAL_TIM_Base_Init>
 800279e:	2800      	cmp	r0, #0
 80027a0:	d162      	bne.n	8002868 <MX_TIM8_Init+0x110>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027a6:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80027a8:	a918      	add	r1, sp, #96	; 0x60
 80027aa:	483d      	ldr	r0, [pc, #244]	; (80028a0 <MX_TIM8_Init+0x148>)
 80027ac:	f004 feb6 	bl	800751c <HAL_TIM_ConfigClockSource>
 80027b0:	2800      	cmp	r0, #0
 80027b2:	d15c      	bne.n	800286e <MX_TIM8_Init+0x116>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80027b4:	483a      	ldr	r0, [pc, #232]	; (80028a0 <MX_TIM8_Init+0x148>)
 80027b6:	f004 fd89 	bl	80072cc <HAL_TIM_PWM_Init>
 80027ba:	2800      	cmp	r0, #0
 80027bc:	d15a      	bne.n	8002874 <MX_TIM8_Init+0x11c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027c2:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c4:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80027c6:	a915      	add	r1, sp, #84	; 0x54
 80027c8:	4835      	ldr	r0, [pc, #212]	; (80028a0 <MX_TIM8_Init+0x148>)
 80027ca:	f004 ff51 	bl	8007670 <HAL_TIMEx_MasterConfigSynchronization>
 80027ce:	2800      	cmp	r0, #0
 80027d0:	d153      	bne.n	800287a <MX_TIM8_Init+0x122>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027d2:	2360      	movs	r3, #96	; 0x60
 80027d4:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 1000;
 80027d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027da:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027dc:	2200      	movs	r2, #0
 80027de:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027e0:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027e2:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027e4:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027e6:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027e8:	a90e      	add	r1, sp, #56	; 0x38
 80027ea:	482d      	ldr	r0, [pc, #180]	; (80028a0 <MX_TIM8_Init+0x148>)
 80027ec:	f004 fdec 	bl	80073c8 <HAL_TIM_PWM_ConfigChannel>
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d145      	bne.n	8002880 <MX_TIM8_Init+0x128>
  sConfigOC.Pulse = 2000;
 80027f4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80027f8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027fa:	2204      	movs	r2, #4
 80027fc:	a90e      	add	r1, sp, #56	; 0x38
 80027fe:	4828      	ldr	r0, [pc, #160]	; (80028a0 <MX_TIM8_Init+0x148>)
 8002800:	f004 fde2 	bl	80073c8 <HAL_TIM_PWM_ConfigChannel>
 8002804:	2800      	cmp	r0, #0
 8002806:	d13e      	bne.n	8002886 <MX_TIM8_Init+0x12e>
  sConfigOC.Pulse = 4000;
 8002808:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800280c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800280e:	2208      	movs	r2, #8
 8002810:	a90e      	add	r1, sp, #56	; 0x38
 8002812:	4823      	ldr	r0, [pc, #140]	; (80028a0 <MX_TIM8_Init+0x148>)
 8002814:	f004 fdd8 	bl	80073c8 <HAL_TIM_PWM_ConfigChannel>
 8002818:	2800      	cmp	r0, #0
 800281a:	d137      	bne.n	800288c <MX_TIM8_Init+0x134>
  sConfigOC.Pulse = 8000;
 800281c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8002820:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002822:	220c      	movs	r2, #12
 8002824:	a90e      	add	r1, sp, #56	; 0x38
 8002826:	481e      	ldr	r0, [pc, #120]	; (80028a0 <MX_TIM8_Init+0x148>)
 8002828:	f004 fdce 	bl	80073c8 <HAL_TIM_PWM_ConfigChannel>
 800282c:	2800      	cmp	r0, #0
 800282e:	d130      	bne.n	8002892 <MX_TIM8_Init+0x13a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002830:	2300      	movs	r3, #0
 8002832:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002834:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002836:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002838:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800283a:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800283c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002840:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002842:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002844:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002846:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002848:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800284c:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800284e:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002850:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002852:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002854:	a901      	add	r1, sp, #4
 8002856:	4812      	ldr	r0, [pc, #72]	; (80028a0 <MX_TIM8_Init+0x148>)
 8002858:	f004 ff60 	bl	800771c <HAL_TIMEx_ConfigBreakDeadTime>
 800285c:	b9e0      	cbnz	r0, 8002898 <MX_TIM8_Init+0x140>
  HAL_TIM_MspPostInit(&htim8);
 800285e:	4810      	ldr	r0, [pc, #64]	; (80028a0 <MX_TIM8_Init+0x148>)
 8002860:	f7ff fe86 	bl	8002570 <HAL_TIM_MspPostInit>
}
 8002864:	b01c      	add	sp, #112	; 0x70
 8002866:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002868:	f7ff fae2 	bl	8001e30 <Error_Handler>
 800286c:	e799      	b.n	80027a2 <MX_TIM8_Init+0x4a>
    Error_Handler();
 800286e:	f7ff fadf 	bl	8001e30 <Error_Handler>
 8002872:	e79f      	b.n	80027b4 <MX_TIM8_Init+0x5c>
    Error_Handler();
 8002874:	f7ff fadc 	bl	8001e30 <Error_Handler>
 8002878:	e7a1      	b.n	80027be <MX_TIM8_Init+0x66>
    Error_Handler();
 800287a:	f7ff fad9 	bl	8001e30 <Error_Handler>
 800287e:	e7a8      	b.n	80027d2 <MX_TIM8_Init+0x7a>
    Error_Handler();
 8002880:	f7ff fad6 	bl	8001e30 <Error_Handler>
 8002884:	e7b6      	b.n	80027f4 <MX_TIM8_Init+0x9c>
    Error_Handler();
 8002886:	f7ff fad3 	bl	8001e30 <Error_Handler>
 800288a:	e7bd      	b.n	8002808 <MX_TIM8_Init+0xb0>
    Error_Handler();
 800288c:	f7ff fad0 	bl	8001e30 <Error_Handler>
 8002890:	e7c4      	b.n	800281c <MX_TIM8_Init+0xc4>
    Error_Handler();
 8002892:	f7ff facd 	bl	8001e30 <Error_Handler>
 8002896:	e7cb      	b.n	8002830 <MX_TIM8_Init+0xd8>
    Error_Handler();
 8002898:	f7ff faca 	bl	8001e30 <Error_Handler>
 800289c:	e7df      	b.n	800285e <MX_TIM8_Init+0x106>
 800289e:	bf00      	nop
 80028a0:	200009e8 	.word	0x200009e8
 80028a4:	40013400 	.word	0x40013400

080028a8 <MX_TIM15_Init>:
{
 80028a8:	b510      	push	{r4, lr}
 80028aa:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ac:	2400      	movs	r4, #0
 80028ae:	9418      	str	r4, [sp, #96]	; 0x60
 80028b0:	9419      	str	r4, [sp, #100]	; 0x64
 80028b2:	941a      	str	r4, [sp, #104]	; 0x68
 80028b4:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b6:	9415      	str	r4, [sp, #84]	; 0x54
 80028b8:	9416      	str	r4, [sp, #88]	; 0x58
 80028ba:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028bc:	940e      	str	r4, [sp, #56]	; 0x38
 80028be:	940f      	str	r4, [sp, #60]	; 0x3c
 80028c0:	9410      	str	r4, [sp, #64]	; 0x40
 80028c2:	9411      	str	r4, [sp, #68]	; 0x44
 80028c4:	9412      	str	r4, [sp, #72]	; 0x48
 80028c6:	9413      	str	r4, [sp, #76]	; 0x4c
 80028c8:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028ca:	2234      	movs	r2, #52	; 0x34
 80028cc:	4621      	mov	r1, r4
 80028ce:	a801      	add	r0, sp, #4
 80028d0:	f008 f9bc 	bl	800ac4c <memset>
  htim15.Instance = TIM15;
 80028d4:	482e      	ldr	r0, [pc, #184]	; (8002990 <MX_TIM15_Init+0xe8>)
 80028d6:	4b2f      	ldr	r3, [pc, #188]	; (8002994 <MX_TIM15_Init+0xec>)
 80028d8:	6003      	str	r3, [r0, #0]
  htim15.Init.Prescaler = 0;
 80028da:	6044      	str	r4, [r0, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028dc:	6084      	str	r4, [r0, #8]
  htim15.Init.Period = 32768;
 80028de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028e2:	60c3      	str	r3, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e4:	6104      	str	r4, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 80028e6:	6144      	str	r4, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e8:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80028ea:	f004 fcbf 	bl	800726c <HAL_TIM_Base_Init>
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d13c      	bne.n	800296c <MX_TIM15_Init+0xc4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028f6:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80028f8:	a918      	add	r1, sp, #96	; 0x60
 80028fa:	4825      	ldr	r0, [pc, #148]	; (8002990 <MX_TIM15_Init+0xe8>)
 80028fc:	f004 fe0e 	bl	800751c <HAL_TIM_ConfigClockSource>
 8002900:	2800      	cmp	r0, #0
 8002902:	d136      	bne.n	8002972 <MX_TIM15_Init+0xca>
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002904:	4822      	ldr	r0, [pc, #136]	; (8002990 <MX_TIM15_Init+0xe8>)
 8002906:	f004 fce1 	bl	80072cc <HAL_TIM_PWM_Init>
 800290a:	2800      	cmp	r0, #0
 800290c:	d134      	bne.n	8002978 <MX_TIM15_Init+0xd0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002912:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002914:	a915      	add	r1, sp, #84	; 0x54
 8002916:	481e      	ldr	r0, [pc, #120]	; (8002990 <MX_TIM15_Init+0xe8>)
 8002918:	f004 feaa 	bl	8007670 <HAL_TIMEx_MasterConfigSynchronization>
 800291c:	2800      	cmp	r0, #0
 800291e:	d12e      	bne.n	800297e <MX_TIM15_Init+0xd6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002920:	2360      	movs	r3, #96	; 0x60
 8002922:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 16000;
 8002924:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8002928:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800292a:	2300      	movs	r3, #0
 800292c:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800292e:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002930:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002932:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002934:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002936:	2204      	movs	r2, #4
 8002938:	a90e      	add	r1, sp, #56	; 0x38
 800293a:	4815      	ldr	r0, [pc, #84]	; (8002990 <MX_TIM15_Init+0xe8>)
 800293c:	f004 fd44 	bl	80073c8 <HAL_TIM_PWM_ConfigChannel>
 8002940:	bb00      	cbnz	r0, 8002984 <MX_TIM15_Init+0xdc>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002942:	2300      	movs	r3, #0
 8002944:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002946:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002948:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800294a:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800294c:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800294e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002952:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002954:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002956:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002958:	a901      	add	r1, sp, #4
 800295a:	480d      	ldr	r0, [pc, #52]	; (8002990 <MX_TIM15_Init+0xe8>)
 800295c:	f004 fede 	bl	800771c <HAL_TIMEx_ConfigBreakDeadTime>
 8002960:	b998      	cbnz	r0, 800298a <MX_TIM15_Init+0xe2>
  HAL_TIM_MspPostInit(&htim15);
 8002962:	480b      	ldr	r0, [pc, #44]	; (8002990 <MX_TIM15_Init+0xe8>)
 8002964:	f7ff fe04 	bl	8002570 <HAL_TIM_MspPostInit>
}
 8002968:	b01c      	add	sp, #112	; 0x70
 800296a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800296c:	f7ff fa60 	bl	8001e30 <Error_Handler>
 8002970:	e7bf      	b.n	80028f2 <MX_TIM15_Init+0x4a>
    Error_Handler();
 8002972:	f7ff fa5d 	bl	8001e30 <Error_Handler>
 8002976:	e7c5      	b.n	8002904 <MX_TIM15_Init+0x5c>
    Error_Handler();
 8002978:	f7ff fa5a 	bl	8001e30 <Error_Handler>
 800297c:	e7c7      	b.n	800290e <MX_TIM15_Init+0x66>
    Error_Handler();
 800297e:	f7ff fa57 	bl	8001e30 <Error_Handler>
 8002982:	e7cd      	b.n	8002920 <MX_TIM15_Init+0x78>
    Error_Handler();
 8002984:	f7ff fa54 	bl	8001e30 <Error_Handler>
 8002988:	e7db      	b.n	8002942 <MX_TIM15_Init+0x9a>
    Error_Handler();
 800298a:	f7ff fa51 	bl	8001e30 <Error_Handler>
 800298e:	e7e8      	b.n	8002962 <MX_TIM15_Init+0xba>
 8002990:	20000904 	.word	0x20000904
 8002994:	40014000 	.word	0x40014000

08002998 <MX_TIM20_Init>:
{
 8002998:	b510      	push	{r4, lr}
 800299a:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800299c:	2400      	movs	r4, #0
 800299e:	9418      	str	r4, [sp, #96]	; 0x60
 80029a0:	9419      	str	r4, [sp, #100]	; 0x64
 80029a2:	941a      	str	r4, [sp, #104]	; 0x68
 80029a4:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a6:	9415      	str	r4, [sp, #84]	; 0x54
 80029a8:	9416      	str	r4, [sp, #88]	; 0x58
 80029aa:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029ac:	940e      	str	r4, [sp, #56]	; 0x38
 80029ae:	940f      	str	r4, [sp, #60]	; 0x3c
 80029b0:	9410      	str	r4, [sp, #64]	; 0x40
 80029b2:	9411      	str	r4, [sp, #68]	; 0x44
 80029b4:	9412      	str	r4, [sp, #72]	; 0x48
 80029b6:	9413      	str	r4, [sp, #76]	; 0x4c
 80029b8:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029ba:	2234      	movs	r2, #52	; 0x34
 80029bc:	4621      	mov	r1, r4
 80029be:	a801      	add	r0, sp, #4
 80029c0:	f008 f944 	bl	800ac4c <memset>
  htim20.Instance = TIM20;
 80029c4:	4846      	ldr	r0, [pc, #280]	; (8002ae0 <MX_TIM20_Init+0x148>)
 80029c6:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <MX_TIM20_Init+0x14c>)
 80029c8:	6003      	str	r3, [r0, #0]
  htim20.Init.Prescaler = 0;
 80029ca:	6044      	str	r4, [r0, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029cc:	6084      	str	r4, [r0, #8]
  htim20.Init.Period = 16000;
 80029ce:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80029d2:	60c3      	str	r3, [r0, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d4:	6104      	str	r4, [r0, #16]
  htim20.Init.RepetitionCounter = 0;
 80029d6:	6144      	str	r4, [r0, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029d8:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 80029da:	f004 fc47 	bl	800726c <HAL_TIM_Base_Init>
 80029de:	2800      	cmp	r0, #0
 80029e0:	d162      	bne.n	8002aa8 <MX_TIM20_Init+0x110>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029e6:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 80029e8:	a918      	add	r1, sp, #96	; 0x60
 80029ea:	483d      	ldr	r0, [pc, #244]	; (8002ae0 <MX_TIM20_Init+0x148>)
 80029ec:	f004 fd96 	bl	800751c <HAL_TIM_ConfigClockSource>
 80029f0:	2800      	cmp	r0, #0
 80029f2:	d15c      	bne.n	8002aae <MX_TIM20_Init+0x116>
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 80029f4:	483a      	ldr	r0, [pc, #232]	; (8002ae0 <MX_TIM20_Init+0x148>)
 80029f6:	f004 fc69 	bl	80072cc <HAL_TIM_PWM_Init>
 80029fa:	2800      	cmp	r0, #0
 80029fc:	d15a      	bne.n	8002ab4 <MX_TIM20_Init+0x11c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029fe:	2300      	movs	r3, #0
 8002a00:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a02:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a04:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8002a06:	a915      	add	r1, sp, #84	; 0x54
 8002a08:	4835      	ldr	r0, [pc, #212]	; (8002ae0 <MX_TIM20_Init+0x148>)
 8002a0a:	f004 fe31 	bl	8007670 <HAL_TIMEx_MasterConfigSynchronization>
 8002a0e:	2800      	cmp	r0, #0
 8002a10:	d153      	bne.n	8002aba <MX_TIM20_Init+0x122>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a12:	2360      	movs	r3, #96	; 0x60
 8002a14:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 8000;
 8002a16:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8002a1a:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a20:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a22:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a24:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a26:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a28:	a90e      	add	r1, sp, #56	; 0x38
 8002a2a:	482d      	ldr	r0, [pc, #180]	; (8002ae0 <MX_TIM20_Init+0x148>)
 8002a2c:	f004 fccc 	bl	80073c8 <HAL_TIM_PWM_ConfigChannel>
 8002a30:	2800      	cmp	r0, #0
 8002a32:	d145      	bne.n	8002ac0 <MX_TIM20_Init+0x128>
  sConfigOC.Pulse = 10000;
 8002a34:	f242 7310 	movw	r3, #10000	; 0x2710
 8002a38:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	a90e      	add	r1, sp, #56	; 0x38
 8002a3e:	4828      	ldr	r0, [pc, #160]	; (8002ae0 <MX_TIM20_Init+0x148>)
 8002a40:	f004 fcc2 	bl	80073c8 <HAL_TIM_PWM_ConfigChannel>
 8002a44:	2800      	cmp	r0, #0
 8002a46:	d13e      	bne.n	8002ac6 <MX_TIM20_Init+0x12e>
  sConfigOC.Pulse = 12000;
 8002a48:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8002a4c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a4e:	2208      	movs	r2, #8
 8002a50:	a90e      	add	r1, sp, #56	; 0x38
 8002a52:	4823      	ldr	r0, [pc, #140]	; (8002ae0 <MX_TIM20_Init+0x148>)
 8002a54:	f004 fcb8 	bl	80073c8 <HAL_TIM_PWM_ConfigChannel>
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	d137      	bne.n	8002acc <MX_TIM20_Init+0x134>
  sConfigOC.Pulse = 15000;
 8002a5c:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002a60:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a62:	220c      	movs	r2, #12
 8002a64:	a90e      	add	r1, sp, #56	; 0x38
 8002a66:	481e      	ldr	r0, [pc, #120]	; (8002ae0 <MX_TIM20_Init+0x148>)
 8002a68:	f004 fcae 	bl	80073c8 <HAL_TIM_PWM_ConfigChannel>
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	d130      	bne.n	8002ad2 <MX_TIM20_Init+0x13a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a74:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a76:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a78:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a7a:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a80:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a82:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002a84:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002a86:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002a88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a8c:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002a8e:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002a90:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a92:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8002a94:	a901      	add	r1, sp, #4
 8002a96:	4812      	ldr	r0, [pc, #72]	; (8002ae0 <MX_TIM20_Init+0x148>)
 8002a98:	f004 fe40 	bl	800771c <HAL_TIMEx_ConfigBreakDeadTime>
 8002a9c:	b9e0      	cbnz	r0, 8002ad8 <MX_TIM20_Init+0x140>
  HAL_TIM_MspPostInit(&htim20);
 8002a9e:	4810      	ldr	r0, [pc, #64]	; (8002ae0 <MX_TIM20_Init+0x148>)
 8002aa0:	f7ff fd66 	bl	8002570 <HAL_TIM_MspPostInit>
}
 8002aa4:	b01c      	add	sp, #112	; 0x70
 8002aa6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002aa8:	f7ff f9c2 	bl	8001e30 <Error_Handler>
 8002aac:	e799      	b.n	80029e2 <MX_TIM20_Init+0x4a>
    Error_Handler();
 8002aae:	f7ff f9bf 	bl	8001e30 <Error_Handler>
 8002ab2:	e79f      	b.n	80029f4 <MX_TIM20_Init+0x5c>
    Error_Handler();
 8002ab4:	f7ff f9bc 	bl	8001e30 <Error_Handler>
 8002ab8:	e7a1      	b.n	80029fe <MX_TIM20_Init+0x66>
    Error_Handler();
 8002aba:	f7ff f9b9 	bl	8001e30 <Error_Handler>
 8002abe:	e7a8      	b.n	8002a12 <MX_TIM20_Init+0x7a>
    Error_Handler();
 8002ac0:	f7ff f9b6 	bl	8001e30 <Error_Handler>
 8002ac4:	e7b6      	b.n	8002a34 <MX_TIM20_Init+0x9c>
    Error_Handler();
 8002ac6:	f7ff f9b3 	bl	8001e30 <Error_Handler>
 8002aca:	e7bd      	b.n	8002a48 <MX_TIM20_Init+0xb0>
    Error_Handler();
 8002acc:	f7ff f9b0 	bl	8001e30 <Error_Handler>
 8002ad0:	e7c4      	b.n	8002a5c <MX_TIM20_Init+0xc4>
    Error_Handler();
 8002ad2:	f7ff f9ad 	bl	8001e30 <Error_Handler>
 8002ad6:	e7cb      	b.n	8002a70 <MX_TIM20_Init+0xd8>
    Error_Handler();
 8002ad8:	f7ff f9aa 	bl	8001e30 <Error_Handler>
 8002adc:	e7df      	b.n	8002a9e <MX_TIM20_Init+0x106>
 8002ade:	bf00      	nop
 8002ae0:	20000950 	.word	0x20000950
 8002ae4:	40015000 	.word	0x40015000

08002ae8 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002ae8:	b508      	push	{r3, lr}
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002aea:	4817      	ldr	r0, [pc, #92]	; (8002b48 <MX_UART4_Init+0x60>)
 8002aec:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <MX_UART4_Init+0x64>)
 8002aee:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8002af0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002af4:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002af6:	2300      	movs	r3, #0
 8002af8:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002afa:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002afc:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002afe:	220c      	movs	r2, #12
 8002b00:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b02:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b04:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b06:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b08:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b0a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002b0c:	f005 f941 	bl	8007d92 <HAL_UART_Init>
 8002b10:	b970      	cbnz	r0, 8002b30 <MX_UART4_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b12:	2100      	movs	r1, #0
 8002b14:	480c      	ldr	r0, [pc, #48]	; (8002b48 <MX_UART4_Init+0x60>)
 8002b16:	f005 f9b4 	bl	8007e82 <HAL_UARTEx_SetTxFifoThreshold>
 8002b1a:	b960      	cbnz	r0, 8002b36 <MX_UART4_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	480a      	ldr	r0, [pc, #40]	; (8002b48 <MX_UART4_Init+0x60>)
 8002b20:	f005 f9d4 	bl	8007ecc <HAL_UARTEx_SetRxFifoThreshold>
 8002b24:	b950      	cbnz	r0, 8002b3c <MX_UART4_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002b26:	4808      	ldr	r0, [pc, #32]	; (8002b48 <MX_UART4_Init+0x60>)
 8002b28:	f005 f98c 	bl	8007e44 <HAL_UARTEx_DisableFifoMode>
 8002b2c:	b948      	cbnz	r0, 8002b42 <MX_UART4_Init+0x5a>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002b2e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002b30:	f7ff f97e 	bl	8001e30 <Error_Handler>
 8002b34:	e7ed      	b.n	8002b12 <MX_UART4_Init+0x2a>
    Error_Handler();
 8002b36:	f7ff f97b 	bl	8001e30 <Error_Handler>
 8002b3a:	e7ef      	b.n	8002b1c <MX_UART4_Init+0x34>
    Error_Handler();
 8002b3c:	f7ff f978 	bl	8001e30 <Error_Handler>
 8002b40:	e7f1      	b.n	8002b26 <MX_UART4_Init+0x3e>
    Error_Handler();
 8002b42:	f7ff f975 	bl	8001e30 <Error_Handler>
}
 8002b46:	e7f2      	b.n	8002b2e <MX_UART4_Init+0x46>
 8002b48:	20000b54 	.word	0x20000b54
 8002b4c:	40004c00 	.word	0x40004c00

08002b50 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002b50:	b508      	push	{r3, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002b52:	4817      	ldr	r0, [pc, #92]	; (8002bb0 <MX_UART5_Init+0x60>)
 8002b54:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <MX_UART5_Init+0x64>)
 8002b56:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 8002b58:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002b5c:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002b62:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002b64:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002b66:	220c      	movs	r2, #12
 8002b68:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b6a:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b6c:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b6e:	6203      	str	r3, [r0, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b70:	6243      	str	r3, [r0, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b72:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002b74:	f005 f90d 	bl	8007d92 <HAL_UART_Init>
 8002b78:	b970      	cbnz	r0, 8002b98 <MX_UART5_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	480c      	ldr	r0, [pc, #48]	; (8002bb0 <MX_UART5_Init+0x60>)
 8002b7e:	f005 f980 	bl	8007e82 <HAL_UARTEx_SetTxFifoThreshold>
 8002b82:	b960      	cbnz	r0, 8002b9e <MX_UART5_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b84:	2100      	movs	r1, #0
 8002b86:	480a      	ldr	r0, [pc, #40]	; (8002bb0 <MX_UART5_Init+0x60>)
 8002b88:	f005 f9a0 	bl	8007ecc <HAL_UARTEx_SetRxFifoThreshold>
 8002b8c:	b950      	cbnz	r0, 8002ba4 <MX_UART5_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002b8e:	4808      	ldr	r0, [pc, #32]	; (8002bb0 <MX_UART5_Init+0x60>)
 8002b90:	f005 f958 	bl	8007e44 <HAL_UARTEx_DisableFifoMode>
 8002b94:	b948      	cbnz	r0, 8002baa <MX_UART5_Init+0x5a>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002b96:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002b98:	f7ff f94a 	bl	8001e30 <Error_Handler>
 8002b9c:	e7ed      	b.n	8002b7a <MX_UART5_Init+0x2a>
    Error_Handler();
 8002b9e:	f7ff f947 	bl	8001e30 <Error_Handler>
 8002ba2:	e7ef      	b.n	8002b84 <MX_UART5_Init+0x34>
    Error_Handler();
 8002ba4:	f7ff f944 	bl	8001e30 <Error_Handler>
 8002ba8:	e7f1      	b.n	8002b8e <MX_UART5_Init+0x3e>
    Error_Handler();
 8002baa:	f7ff f941 	bl	8001e30 <Error_Handler>
}
 8002bae:	e7f2      	b.n	8002b96 <MX_UART5_Init+0x46>
 8002bb0:	20000be4 	.word	0x20000be4
 8002bb4:	40005000 	.word	0x40005000

08002bb8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	b0a6      	sub	sp, #152	; 0x98

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	a81e      	add	r0, sp, #120	; 0x78
 8002bc2:	f008 f843 	bl	800ac4c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	9118      	str	r1, [sp, #96]	; 0x60
 8002bca:	9119      	str	r1, [sp, #100]	; 0x64
 8002bcc:	911a      	str	r1, [sp, #104]	; 0x68
 8002bce:	911b      	str	r1, [sp, #108]	; 0x6c
 8002bd0:	911c      	str	r1, [sp, #112]	; 0x70
 8002bd2:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bd4:	2254      	movs	r2, #84	; 0x54
 8002bd6:	a803      	add	r0, sp, #12
 8002bd8:	f008 f838 	bl	800ac4c <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	9303      	str	r3, [sp, #12]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002be0:	a803      	add	r0, sp, #12
 8002be2:	f003 fedf 	bl	80069a4 <HAL_RCCEx_PeriphCLKConfig>
 8002be6:	2800      	cmp	r0, #0
 8002be8:	f040 80d2 	bne.w	8002d90 <MX_USART1_UART_Init+0x1d8>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002bec:	4b6a      	ldr	r3, [pc, #424]	; (8002d98 <MX_USART1_UART_Init+0x1e0>)
 8002bee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bf4:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002bf6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bf8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002bfc:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002bfe:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c0a:	f002 0201 	and.w	r2, r2, #1
 8002c0e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8002c10:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c18:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c20:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002c22:	9b00      	ldr	r3, [sp, #0]
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOG);
  /**USART1 GPIO Configuration
  PA10   ------> USART1_RX
  PG9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c28:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c2a:	2602      	movs	r6, #2
 8002c2c:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c2e:	2400      	movs	r4, #0
 8002c30:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c32:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c34:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002c36:	2507      	movs	r5, #7
 8002c38:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3a:	a918      	add	r1, sp, #96	; 0x60
 8002c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c40:	f005 fa32 	bl	80080a8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002c44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c48:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c4a:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c4c:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c4e:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c50:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002c52:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c54:	a918      	add	r1, sp, #96	; 0x60
 8002c56:	4851      	ldr	r0, [pc, #324]	; (8002d9c <MX_USART1_UART_Init+0x1e4>)
 8002c58:	f005 fa26 	bl	80080a8 <LL_GPIO_Init>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8002c5c:	4b50      	ldr	r3, [pc, #320]	; (8002da0 <MX_USART1_UART_Init+0x1e8>)
 8002c5e:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8002c62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c66:	f042 0218 	orr.w	r2, r2, #24
 8002c6a:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8002c6e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c74:	f022 0210 	bic.w	r2, r2, #16
 8002c78:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8002c7a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c7c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002c80:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8002c82:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c84:	f022 0220 	bic.w	r2, r2, #32
 8002c88:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8002c8a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c90:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8002c92:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c98:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8002c9a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c9c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ca0:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8002ca2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ca4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ca8:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8002caa:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8002cae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cb2:	f042 0219 	orr.w	r2, r2, #25
 8002cb6:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8002cba:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002cbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002cc2:	f022 0210 	bic.w	r2, r2, #16
 8002cc6:	f042 0210 	orr.w	r2, r2, #16
 8002cca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8002cce:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002cd2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002cd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8002cda:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002cde:	f022 0220 	bic.w	r2, r2, #32
 8002ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8002ce6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8002cf2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002cf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8002cfe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002d02:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8002d0a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002d0e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8002d16:	941e      	str	r4, [sp, #120]	; 0x78
  USART_InitStruct.BaudRate = 115200;
 8002d18:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002d1c:	931f      	str	r3, [sp, #124]	; 0x7c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002d1e:	9420      	str	r4, [sp, #128]	; 0x80
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002d20:	9421      	str	r4, [sp, #132]	; 0x84
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002d22:	9422      	str	r4, [sp, #136]	; 0x88
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002d24:	230c      	movs	r3, #12
 8002d26:	9323      	str	r3, [sp, #140]	; 0x8c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002d28:	9424      	str	r4, [sp, #144]	; 0x90
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002d2a:	9425      	str	r4, [sp, #148]	; 0x94
  LL_USART_Init(USART1, &USART_InitStruct);
 8002d2c:	a91e      	add	r1, sp, #120	; 0x78
 8002d2e:	481d      	ldr	r0, [pc, #116]	; (8002da4 <MX_USART1_UART_Init+0x1ec>)
 8002d30:	f005 fbd0 	bl	80084d4 <LL_USART_Init>
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8002d34:	4b1c      	ldr	r3, [pc, #112]	; (8002da8 <MX_USART1_UART_Init+0x1f0>)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d36:	e853 2f00 	ldrex	r2, [r3]
 8002d3a:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3e:	e843 2100 	strex	r1, r2, [r3]
 8002d42:	2900      	cmp	r1, #0
 8002d44:	d1f6      	bne.n	8002d34 <MX_USART1_UART_Init+0x17c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d46:	e853 2f00 	ldrex	r2, [r3]
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8002d4a:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4e:	e843 2100 	strex	r1, r2, [r3]
 8002d52:	2900      	cmp	r1, #0
 8002d54:	d1f7      	bne.n	8002d46 <MX_USART1_UART_Init+0x18e>
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8002d56:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <MX_USART1_UART_Init+0x1ec>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002d5e:	601a      	str	r2, [r3, #0]
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d6e:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8002d78:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <MX_USART1_UART_Init+0x1ec>)
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002d80:	d0fa      	beq.n	8002d78 <MX_USART1_UART_Init+0x1c0>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8002d82:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <MX_USART1_UART_Init+0x1ec>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002d8a:	d0f5      	beq.n	8002d78 <MX_USART1_UART_Init+0x1c0>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d8c:	b026      	add	sp, #152	; 0x98
 8002d8e:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8002d90:	f7ff f84e 	bl	8001e30 <Error_Handler>
 8002d94:	e72a      	b.n	8002bec <MX_USART1_UART_Init+0x34>
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	48001800 	.word	0x48001800
 8002da0:	40020000 	.word	0x40020000
 8002da4:	40013800 	.word	0x40013800
 8002da8:	40013808 	.word	0x40013808

08002dac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002dac:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dae:	4817      	ldr	r0, [pc, #92]	; (8002e0c <MX_USART2_UART_Init+0x60>)
 8002db0:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <MX_USART2_UART_Init+0x64>)
 8002db2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002db4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002db8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dbe:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dc0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002dc2:	220c      	movs	r2, #12
 8002dc4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dc6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dc8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dca:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002dcc:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dce:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dd0:	f004 ffdf 	bl	8007d92 <HAL_UART_Init>
 8002dd4:	b970      	cbnz	r0, 8002df4 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	480c      	ldr	r0, [pc, #48]	; (8002e0c <MX_USART2_UART_Init+0x60>)
 8002dda:	f005 f852 	bl	8007e82 <HAL_UARTEx_SetTxFifoThreshold>
 8002dde:	b960      	cbnz	r0, 8002dfa <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002de0:	2100      	movs	r1, #0
 8002de2:	480a      	ldr	r0, [pc, #40]	; (8002e0c <MX_USART2_UART_Init+0x60>)
 8002de4:	f005 f872 	bl	8007ecc <HAL_UARTEx_SetRxFifoThreshold>
 8002de8:	b950      	cbnz	r0, 8002e00 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002dea:	4808      	ldr	r0, [pc, #32]	; (8002e0c <MX_USART2_UART_Init+0x60>)
 8002dec:	f005 f82a 	bl	8007e44 <HAL_UARTEx_DisableFifoMode>
 8002df0:	b948      	cbnz	r0, 8002e06 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002df2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002df4:	f7ff f81c 	bl	8001e30 <Error_Handler>
 8002df8:	e7ed      	b.n	8002dd6 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8002dfa:	f7ff f819 	bl	8001e30 <Error_Handler>
 8002dfe:	e7ef      	b.n	8002de0 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8002e00:	f7ff f816 	bl	8001e30 <Error_Handler>
 8002e04:	e7f1      	b.n	8002dea <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8002e06:	f7ff f813 	bl	8001e30 <Error_Handler>
}
 8002e0a:	e7f2      	b.n	8002df2 <MX_USART2_UART_Init+0x46>
 8002e0c:	20000a34 	.word	0x20000a34
 8002e10:	40004400 	.word	0x40004400

08002e14 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e14:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e16:	4817      	ldr	r0, [pc, #92]	; (8002e74 <MX_USART3_UART_Init+0x60>)
 8002e18:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <MX_USART3_UART_Init+0x64>)
 8002e1a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8002e1c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002e20:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e22:	2300      	movs	r3, #0
 8002e24:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e26:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e28:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e2a:	220c      	movs	r2, #12
 8002e2c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e2e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e30:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e32:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e34:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e36:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e38:	f004 ffab 	bl	8007d92 <HAL_UART_Init>
 8002e3c:	b970      	cbnz	r0, 8002e5c <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e3e:	2100      	movs	r1, #0
 8002e40:	480c      	ldr	r0, [pc, #48]	; (8002e74 <MX_USART3_UART_Init+0x60>)
 8002e42:	f005 f81e 	bl	8007e82 <HAL_UARTEx_SetTxFifoThreshold>
 8002e46:	b960      	cbnz	r0, 8002e62 <MX_USART3_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e48:	2100      	movs	r1, #0
 8002e4a:	480a      	ldr	r0, [pc, #40]	; (8002e74 <MX_USART3_UART_Init+0x60>)
 8002e4c:	f005 f83e 	bl	8007ecc <HAL_UARTEx_SetRxFifoThreshold>
 8002e50:	b950      	cbnz	r0, 8002e68 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e52:	4808      	ldr	r0, [pc, #32]	; (8002e74 <MX_USART3_UART_Init+0x60>)
 8002e54:	f004 fff6 	bl	8007e44 <HAL_UARTEx_DisableFifoMode>
 8002e58:	b948      	cbnz	r0, 8002e6e <MX_USART3_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e5a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002e5c:	f7fe ffe8 	bl	8001e30 <Error_Handler>
 8002e60:	e7ed      	b.n	8002e3e <MX_USART3_UART_Init+0x2a>
    Error_Handler();
 8002e62:	f7fe ffe5 	bl	8001e30 <Error_Handler>
 8002e66:	e7ef      	b.n	8002e48 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 8002e68:	f7fe ffe2 	bl	8001e30 <Error_Handler>
 8002e6c:	e7f1      	b.n	8002e52 <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 8002e6e:	f7fe ffdf 	bl	8001e30 <Error_Handler>
}
 8002e72:	e7f2      	b.n	8002e5a <MX_USART3_UART_Init+0x46>
 8002e74:	20000ac4 	.word	0x20000ac4
 8002e78:	40004800 	.word	0x40004800

08002e7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	b0a4      	sub	sp, #144	; 0x90
 8002e80:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e82:	2100      	movs	r1, #0
 8002e84:	911f      	str	r1, [sp, #124]	; 0x7c
 8002e86:	9120      	str	r1, [sp, #128]	; 0x80
 8002e88:	9121      	str	r1, [sp, #132]	; 0x84
 8002e8a:	9122      	str	r1, [sp, #136]	; 0x88
 8002e8c:	9123      	str	r1, [sp, #140]	; 0x8c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e8e:	2254      	movs	r2, #84	; 0x54
 8002e90:	a80a      	add	r0, sp, #40	; 0x28
 8002e92:	f007 fedb 	bl	800ac4c <memset>
  if(uartHandle->Instance==UART4)
 8002e96:	6823      	ldr	r3, [r4, #0]
 8002e98:	4a66      	ldr	r2, [pc, #408]	; (8003034 <HAL_UART_MspInit+0x1b8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_UART_MspInit+0x3a>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART5)
 8002e9e:	4a66      	ldr	r2, [pc, #408]	; (8003038 <HAL_UART_MspInit+0x1bc>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d033      	beq.n	8002f0c <HAL_UART_MspInit+0x90>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002ea4:	4a65      	ldr	r2, [pc, #404]	; (800303c <HAL_UART_MspInit+0x1c0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d06f      	beq.n	8002f8a <HAL_UART_MspInit+0x10e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8002eaa:	4a65      	ldr	r2, [pc, #404]	; (8003040 <HAL_UART_MspInit+0x1c4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	f000 8096 	beq.w	8002fde <HAL_UART_MspInit+0x162>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002eb2:	b024      	add	sp, #144	; 0x90
 8002eb4:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eba:	a80a      	add	r0, sp, #40	; 0x28
 8002ebc:	f003 fd72 	bl	80069a4 <HAL_RCCEx_PeriphCLKConfig>
 8002ec0:	bb08      	cbnz	r0, 8002f06 <HAL_UART_MspInit+0x8a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ec2:	4b60      	ldr	r3, [pc, #384]	; (8003044 <HAL_UART_MspInit+0x1c8>)
 8002ec4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ec6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002eca:	659a      	str	r2, [r3, #88]	; 0x58
 8002ecc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ece:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002ed2:	9201      	str	r2, [sp, #4]
 8002ed4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ed8:	f042 0204 	orr.w	r2, r2, #4
 8002edc:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	9302      	str	r3, [sp, #8]
 8002ee6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ee8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002eec:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef6:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002ef8:	2305      	movs	r3, #5
 8002efa:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002efc:	a91f      	add	r1, sp, #124	; 0x7c
 8002efe:	4852      	ldr	r0, [pc, #328]	; (8003048 <HAL_UART_MspInit+0x1cc>)
 8002f00:	f001 fb3e 	bl	8004580 <HAL_GPIO_Init>
 8002f04:	e7d5      	b.n	8002eb2 <HAL_UART_MspInit+0x36>
      Error_Handler();
 8002f06:	f7fe ff93 	bl	8001e30 <Error_Handler>
 8002f0a:	e7da      	b.n	8002ec2 <HAL_UART_MspInit+0x46>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002f0c:	2310      	movs	r3, #16
 8002f0e:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f10:	a80a      	add	r0, sp, #40	; 0x28
 8002f12:	f003 fd47 	bl	80069a4 <HAL_RCCEx_PeriphCLKConfig>
 8002f16:	2800      	cmp	r0, #0
 8002f18:	d134      	bne.n	8002f84 <HAL_UART_MspInit+0x108>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002f1a:	4b4a      	ldr	r3, [pc, #296]	; (8003044 <HAL_UART_MspInit+0x1c8>)
 8002f1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f1e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f22:	659a      	str	r2, [r3, #88]	; 0x58
 8002f24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f26:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f2a:	9203      	str	r2, [sp, #12]
 8002f2c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f30:	f042 0204 	orr.w	r2, r2, #4
 8002f34:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f38:	f002 0204 	and.w	r2, r2, #4
 8002f3c:	9204      	str	r2, [sp, #16]
 8002f3e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f42:	f042 0208 	orr.w	r2, r2, #8
 8002f46:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	9305      	str	r3, [sp, #20]
 8002f50:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = LIN_TX_Pin;
 8002f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f56:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f58:	2602      	movs	r6, #2
 8002f5a:	9620      	str	r6, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2400      	movs	r4, #0
 8002f5e:	9421      	str	r4, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f60:	9422      	str	r4, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002f62:	2505      	movs	r5, #5
 8002f64:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(LIN_TX_GPIO_Port, &GPIO_InitStruct);
 8002f66:	a91f      	add	r1, sp, #124	; 0x7c
 8002f68:	4837      	ldr	r0, [pc, #220]	; (8003048 <HAL_UART_MspInit+0x1cc>)
 8002f6a:	f001 fb09 	bl	8004580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIN_RX_Pin;
 8002f6e:	2304      	movs	r3, #4
 8002f70:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f72:	9620      	str	r6, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	9421      	str	r4, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f76:	9422      	str	r4, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002f78:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(LIN_RX_GPIO_Port, &GPIO_InitStruct);
 8002f7a:	a91f      	add	r1, sp, #124	; 0x7c
 8002f7c:	4833      	ldr	r0, [pc, #204]	; (800304c <HAL_UART_MspInit+0x1d0>)
 8002f7e:	f001 faff 	bl	8004580 <HAL_GPIO_Init>
 8002f82:	e796      	b.n	8002eb2 <HAL_UART_MspInit+0x36>
      Error_Handler();
 8002f84:	f7fe ff54 	bl	8001e30 <Error_Handler>
 8002f88:	e7c7      	b.n	8002f1a <HAL_UART_MspInit+0x9e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f8e:	a80a      	add	r0, sp, #40	; 0x28
 8002f90:	f003 fd08 	bl	80069a4 <HAL_RCCEx_PeriphCLKConfig>
 8002f94:	bb00      	cbnz	r0, 8002fd8 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f96:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <HAL_UART_MspInit+0x1c8>)
 8002f98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f9a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002f9e:	659a      	str	r2, [r3, #88]	; 0x58
 8002fa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fa2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002fa6:	9206      	str	r2, [sp, #24]
 8002fa8:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002faa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fac:	f042 0202 	orr.w	r2, r2, #2
 8002fb0:	64da      	str	r2, [r3, #76]	; 0x4c
 8002fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	9307      	str	r3, [sp, #28]
 8002fba:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002fbc:	2318      	movs	r3, #24
 8002fbe:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc8:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fca:	2307      	movs	r3, #7
 8002fcc:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fce:	a91f      	add	r1, sp, #124	; 0x7c
 8002fd0:	481f      	ldr	r0, [pc, #124]	; (8003050 <HAL_UART_MspInit+0x1d4>)
 8002fd2:	f001 fad5 	bl	8004580 <HAL_GPIO_Init>
 8002fd6:	e76c      	b.n	8002eb2 <HAL_UART_MspInit+0x36>
      Error_Handler();
 8002fd8:	f7fe ff2a 	bl	8001e30 <Error_Handler>
 8002fdc:	e7db      	b.n	8002f96 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002fde:	2304      	movs	r3, #4
 8002fe0:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fe2:	a80a      	add	r0, sp, #40	; 0x28
 8002fe4:	f003 fcde 	bl	80069a4 <HAL_RCCEx_PeriphCLKConfig>
 8002fe8:	bb08      	cbnz	r0, 800302e <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fea:	4b16      	ldr	r3, [pc, #88]	; (8003044 <HAL_UART_MspInit+0x1c8>)
 8002fec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002ff2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ff4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ff6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002ffa:	9208      	str	r2, [sp, #32]
 8002ffc:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003000:	f042 0202 	orr.w	r2, r2, #2
 8003004:	64da      	str	r2, [r3, #76]	; 0x4c
 8003006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	9309      	str	r3, [sp, #36]	; 0x24
 800300e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003010:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003014:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003016:	2302      	movs	r3, #2
 8003018:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	2300      	movs	r3, #0
 800301c:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301e:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003020:	2307      	movs	r3, #7
 8003022:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003024:	a91f      	add	r1, sp, #124	; 0x7c
 8003026:	480a      	ldr	r0, [pc, #40]	; (8003050 <HAL_UART_MspInit+0x1d4>)
 8003028:	f001 faaa 	bl	8004580 <HAL_GPIO_Init>
}
 800302c:	e741      	b.n	8002eb2 <HAL_UART_MspInit+0x36>
      Error_Handler();
 800302e:	f7fe feff 	bl	8001e30 <Error_Handler>
 8003032:	e7da      	b.n	8002fea <HAL_UART_MspInit+0x16e>
 8003034:	40004c00 	.word	0x40004c00
 8003038:	40005000 	.word	0x40005000
 800303c:	40004400 	.word	0x40004400
 8003040:	40004800 	.word	0x40004800
 8003044:	40021000 	.word	0x40021000
 8003048:	48000800 	.word	0x48000800
 800304c:	48000c00 	.word	0x48000c00
 8003050:	48000400 	.word	0x48000400

08003054 <Reset_Handler>:
 8003054:	480d      	ldr	r0, [pc, #52]	; (800308c <LoopForever+0x2>)
 8003056:	4685      	mov	sp, r0
 8003058:	480d      	ldr	r0, [pc, #52]	; (8003090 <LoopForever+0x6>)
 800305a:	490e      	ldr	r1, [pc, #56]	; (8003094 <LoopForever+0xa>)
 800305c:	4a0e      	ldr	r2, [pc, #56]	; (8003098 <LoopForever+0xe>)
 800305e:	2300      	movs	r3, #0
 8003060:	e002      	b.n	8003068 <LoopCopyDataInit>

08003062 <CopyDataInit>:
 8003062:	58d4      	ldr	r4, [r2, r3]
 8003064:	50c4      	str	r4, [r0, r3]
 8003066:	3304      	adds	r3, #4

08003068 <LoopCopyDataInit>:
 8003068:	18c4      	adds	r4, r0, r3
 800306a:	428c      	cmp	r4, r1
 800306c:	d3f9      	bcc.n	8003062 <CopyDataInit>
 800306e:	4a0b      	ldr	r2, [pc, #44]	; (800309c <LoopForever+0x12>)
 8003070:	4c0b      	ldr	r4, [pc, #44]	; (80030a0 <LoopForever+0x16>)
 8003072:	2300      	movs	r3, #0
 8003074:	e001      	b.n	800307a <LoopFillZerobss>

08003076 <FillZerobss>:
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	3204      	adds	r2, #4

0800307a <LoopFillZerobss>:
 800307a:	42a2      	cmp	r2, r4
 800307c:	d3fb      	bcc.n	8003076 <FillZerobss>
 800307e:	f7ff fa27 	bl	80024d0 <SystemInit>
 8003082:	f007 fdaf 	bl	800abe4 <__libc_init_array>
 8003086:	f7fe ff0f 	bl	8001ea8 <main>

0800308a <LoopForever>:
 800308a:	e7fe      	b.n	800308a <LoopForever>
 800308c:	20020000 	.word	0x20020000
 8003090:	20000000 	.word	0x20000000
 8003094:	20000358 	.word	0x20000358
 8003098:	080106e4 	.word	0x080106e4
 800309c:	20000358 	.word	0x20000358
 80030a0:	200026e4 	.word	0x200026e4

080030a4 <ADC1_2_IRQHandler>:
 80030a4:	e7fe      	b.n	80030a4 <ADC1_2_IRQHandler>
	...

080030a8 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80030a8:	4b10      	ldr	r3, [pc, #64]	; (80030ec <HAL_InitTick+0x44>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	b90b      	cbnz	r3, 80030b2 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80030ae:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80030b0:	4770      	bx	lr
{
 80030b2:	b510      	push	{r4, lr}
 80030b4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80030b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80030be:	4a0c      	ldr	r2, [pc, #48]	; (80030f0 <HAL_InitTick+0x48>)
 80030c0:	6810      	ldr	r0, [r2, #0]
 80030c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80030c6:	f000 fd7f 	bl	8003bc8 <HAL_SYSTICK_Config>
 80030ca:	b968      	cbnz	r0, 80030e8 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030cc:	2c0f      	cmp	r4, #15
 80030ce:	d901      	bls.n	80030d4 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80030d0:	2001      	movs	r0, #1
 80030d2:	e00a      	b.n	80030ea <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030d4:	2200      	movs	r2, #0
 80030d6:	4621      	mov	r1, r4
 80030d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030dc:	f000 fd2e 	bl	8003b3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030e0:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <HAL_InitTick+0x4c>)
 80030e2:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80030e4:	2000      	movs	r0, #0
 80030e6:	e000      	b.n	80030ea <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80030e8:	2001      	movs	r0, #1
}
 80030ea:	bd10      	pop	{r4, pc}
 80030ec:	20000004 	.word	0x20000004
 80030f0:	20000000 	.word	0x20000000
 80030f4:	20000008 	.word	0x20000008

080030f8 <HAL_Init>:
{
 80030f8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030fa:	2003      	movs	r0, #3
 80030fc:	f000 fd0c 	bl	8003b18 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003100:	2000      	movs	r0, #0
 8003102:	f7ff ffd1 	bl	80030a8 <HAL_InitTick>
 8003106:	b110      	cbz	r0, 800310e <HAL_Init+0x16>
    status = HAL_ERROR;
 8003108:	2401      	movs	r4, #1
}
 800310a:	4620      	mov	r0, r4
 800310c:	bd10      	pop	{r4, pc}
 800310e:	4604      	mov	r4, r0
    HAL_MspInit();
 8003110:	f7ff f91e 	bl	8002350 <HAL_MspInit>
 8003114:	e7f9      	b.n	800310a <HAL_Init+0x12>
	...

08003118 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003118:	4a03      	ldr	r2, [pc, #12]	; (8003128 <HAL_IncTick+0x10>)
 800311a:	6813      	ldr	r3, [r2, #0]
 800311c:	4903      	ldr	r1, [pc, #12]	; (800312c <HAL_IncTick+0x14>)
 800311e:	6809      	ldr	r1, [r1, #0]
 8003120:	440b      	add	r3, r1
 8003122:	6013      	str	r3, [r2, #0]
}
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000c74 	.word	0x20000c74
 800312c:	20000004 	.word	0x20000004

08003130 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003130:	4b01      	ldr	r3, [pc, #4]	; (8003138 <HAL_GetTick+0x8>)
 8003132:	6818      	ldr	r0, [r3, #0]
}
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000c74 	.word	0x20000c74

0800313c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800313c:	b538      	push	{r3, r4, r5, lr}
 800313e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003140:	f7ff fff6 	bl	8003130 <HAL_GetTick>
 8003144:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003146:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800314a:	d002      	beq.n	8003152 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800314c:	4b04      	ldr	r3, [pc, #16]	; (8003160 <HAL_Delay+0x24>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003152:	f7ff ffed 	bl	8003130 <HAL_GetTick>
 8003156:	1b40      	subs	r0, r0, r5
 8003158:	42a0      	cmp	r0, r4
 800315a:	d3fa      	bcc.n	8003152 <HAL_Delay+0x16>
  {
  }
}
 800315c:	bd38      	pop	{r3, r4, r5, pc}
 800315e:	bf00      	nop
 8003160:	20000004 	.word	0x20000004

08003164 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003164:	b530      	push	{r4, r5, lr}
 8003166:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003168:	2300      	movs	r3, #0
 800316a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800316c:	2800      	cmp	r0, #0
 800316e:	f000 8138 	beq.w	80033e2 <HAL_ADC_Init+0x27e>
 8003172:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003174:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003176:	b313      	cbz	r3, 80031be <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003178:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8003180:	d005      	beq.n	800318e <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8003188:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800318c:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800318e:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003190:	6893      	ldr	r3, [r2, #8]
 8003192:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003196:	d11f      	bne.n	80031d8 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 8003198:	6893      	ldr	r3, [r2, #8]
 800319a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800319e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a6:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031a8:	4b8f      	ldr	r3, [pc, #572]	; (80033e8 <HAL_ADC_Init+0x284>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	099b      	lsrs	r3, r3, #6
 80031ae:	4a8f      	ldr	r2, [pc, #572]	; (80033ec <HAL_ADC_Init+0x288>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	3301      	adds	r3, #1
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80031bc:	e009      	b.n	80031d2 <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 80031be:	f7fe f87b 	bl	80012b8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80031c2:	2300      	movs	r3, #0
 80031c4:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80031c6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80031ca:	e7d5      	b.n	8003178 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80031cc:	9b01      	ldr	r3, [sp, #4]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80031d2:	9b01      	ldr	r3, [sp, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f9      	bne.n	80031cc <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031d8:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031da:	6893      	ldr	r3, [r2, #8]
 80031dc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80031e0:	d13d      	bne.n	800325e <HAL_ADC_Init+0xfa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80031e4:	f043 0310 	orr.w	r3, r3, #16
 80031e8:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80031f2:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031f4:	6893      	ldr	r3, [r2, #8]
 80031f6:	f013 0304 	ands.w	r3, r3, #4
 80031fa:	d000      	beq.n	80031fe <HAL_ADC_Init+0x9a>
 80031fc:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031fe:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003200:	f011 0f10 	tst.w	r1, #16
 8003204:	f040 80e6 	bne.w	80033d4 <HAL_ADC_Init+0x270>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003208:	2b00      	cmp	r3, #0
 800320a:	f040 80e3 	bne.w	80033d4 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800320e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003210:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003214:	f043 0302 	orr.w	r3, r3, #2
 8003218:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800321a:	6893      	ldr	r3, [r2, #8]
 800321c:	f013 0f01 	tst.w	r3, #1
 8003220:	d13e      	bne.n	80032a0 <HAL_ADC_Init+0x13c>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003222:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003226:	d01c      	beq.n	8003262 <HAL_ADC_Init+0xfe>
 8003228:	4b71      	ldr	r3, [pc, #452]	; (80033f0 <HAL_ADC_Init+0x28c>)
 800322a:	429a      	cmp	r2, r3
 800322c:	d019      	beq.n	8003262 <HAL_ADC_Init+0xfe>
 800322e:	4b71      	ldr	r3, [pc, #452]	; (80033f4 <HAL_ADC_Init+0x290>)
 8003230:	6899      	ldr	r1, [r3, #8]
 8003232:	f011 0101 	ands.w	r1, r1, #1
 8003236:	d000      	beq.n	800323a <HAL_ADC_Init+0xd6>
 8003238:	2101      	movs	r1, #1
 800323a:	4b6f      	ldr	r3, [pc, #444]	; (80033f8 <HAL_ADC_Init+0x294>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f013 0301 	ands.w	r3, r3, #1
 8003242:	d000      	beq.n	8003246 <HAL_ADC_Init+0xe2>
 8003244:	2301      	movs	r3, #1
 8003246:	430b      	orrs	r3, r1
 8003248:	496c      	ldr	r1, [pc, #432]	; (80033fc <HAL_ADC_Init+0x298>)
 800324a:	6889      	ldr	r1, [r1, #8]
 800324c:	f011 0101 	ands.w	r1, r1, #1
 8003250:	d000      	beq.n	8003254 <HAL_ADC_Init+0xf0>
 8003252:	2101      	movs	r1, #1
 8003254:	430b      	orrs	r3, r1
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	e012      	b.n	8003284 <HAL_ADC_Init+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800325e:	2000      	movs	r0, #0
 8003260:	e7c8      	b.n	80031f4 <HAL_ADC_Init+0x90>
 8003262:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f013 0301 	ands.w	r3, r3, #1
 800326c:	d000      	beq.n	8003270 <HAL_ADC_Init+0x10c>
 800326e:	2301      	movs	r3, #1
 8003270:	495f      	ldr	r1, [pc, #380]	; (80033f0 <HAL_ADC_Init+0x28c>)
 8003272:	6889      	ldr	r1, [r1, #8]
 8003274:	f011 0101 	ands.w	r1, r1, #1
 8003278:	d000      	beq.n	800327c <HAL_ADC_Init+0x118>
 800327a:	2101      	movs	r1, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800327c:	430b      	orrs	r3, r1
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b163      	cbz	r3, 80032a0 <HAL_ADC_Init+0x13c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003286:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800328a:	d072      	beq.n	8003372 <HAL_ADC_Init+0x20e>
 800328c:	4b58      	ldr	r3, [pc, #352]	; (80033f0 <HAL_ADC_Init+0x28c>)
 800328e:	429a      	cmp	r2, r3
 8003290:	d06d      	beq.n	800336e <HAL_ADC_Init+0x20a>
 8003292:	495b      	ldr	r1, [pc, #364]	; (8003400 <HAL_ADC_Init+0x29c>)
 8003294:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003296:	688a      	ldr	r2, [r1, #8]
 8003298:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800329c:	4313      	orrs	r3, r2
 800329e:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032a0:	7f62      	ldrb	r2, [r4, #29]
                hadc->Init.Overrun                                                     |
 80032a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032a4:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 80032a8:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 80032aa:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 80032ac:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 80032ae:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032b0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032b8:	2a01      	cmp	r2, #1
 80032ba:	d05c      	beq.n	8003376 <HAL_ADC_Init+0x212>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80032be:	b122      	cbz	r2, 80032ca <HAL_ADC_Init+0x166>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032c0:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80032c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80032c6:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032c8:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80032ca:	6821      	ldr	r1, [r4, #0]
 80032cc:	68cd      	ldr	r5, [r1, #12]
 80032ce:	4a4d      	ldr	r2, [pc, #308]	; (8003404 <HAL_ADC_Init+0x2a0>)
 80032d0:	402a      	ands	r2, r5
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60cb      	str	r3, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80032d6:	6822      	ldr	r2, [r4, #0]
 80032d8:	6913      	ldr	r3, [r2, #16]
 80032da:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80032de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032e4:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032e6:	688b      	ldr	r3, [r1, #8]
 80032e8:	f013 0304 	ands.w	r3, r3, #4
 80032ec:	d000      	beq.n	80032f0 <HAL_ADC_Init+0x18c>
 80032ee:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032f0:	688a      	ldr	r2, [r1, #8]
 80032f2:	f012 0208 	ands.w	r2, r2, #8
 80032f6:	d000      	beq.n	80032fa <HAL_ADC_Init+0x196>
 80032f8:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032fa:	bb4b      	cbnz	r3, 8003350 <HAL_ADC_Init+0x1ec>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032fc:	bb42      	cbnz	r2, 8003350 <HAL_ADC_Init+0x1ec>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032fe:	7f22      	ldrb	r2, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003300:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003304:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003306:	ea43 3282 	orr.w	r2, r3, r2, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800330a:	68cb      	ldr	r3, [r1, #12]
 800330c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003310:	f023 0302 	bic.w	r3, r3, #2
 8003314:	4313      	orrs	r3, r2
 8003316:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003318:	6923      	ldr	r3, [r4, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d030      	beq.n	8003380 <HAL_ADC_Init+0x21c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800331e:	6822      	ldr	r2, [r4, #0]
 8003320:	6913      	ldr	r3, [r2, #16]
 8003322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003326:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003328:	6822      	ldr	r2, [r4, #0]
 800332a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800332e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003332:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003336:	6921      	ldr	r1, [r4, #16]
 8003338:	430b      	orrs	r3, r1
 800333a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800333e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003342:	2b01      	cmp	r3, #1
 8003344:	d02b      	beq.n	800339e <HAL_ADC_Init+0x23a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003346:	6822      	ldr	r2, [r4, #0]
 8003348:	6913      	ldr	r3, [r2, #16]
 800334a:	f023 0301 	bic.w	r3, r3, #1
 800334e:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003350:	6963      	ldr	r3, [r4, #20]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d035      	beq.n	80033c2 <HAL_ADC_Init+0x25e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003356:	6822      	ldr	r2, [r4, #0]
 8003358:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800335a:	f023 030f 	bic.w	r3, r3, #15
 800335e:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003360:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003362:	f023 0303 	bic.w	r3, r3, #3
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800336c:	e037      	b.n	80033de <HAL_ADC_Init+0x27a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800336e:	4926      	ldr	r1, [pc, #152]	; (8003408 <HAL_ADC_Init+0x2a4>)
 8003370:	e790      	b.n	8003294 <HAL_ADC_Init+0x130>
 8003372:	4925      	ldr	r1, [pc, #148]	; (8003408 <HAL_ADC_Init+0x2a4>)
 8003374:	e78e      	b.n	8003294 <HAL_ADC_Init+0x130>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003376:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003378:	3a01      	subs	r2, #1
 800337a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800337e:	e79d      	b.n	80032bc <HAL_ADC_Init+0x158>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003380:	6822      	ldr	r2, [r4, #0]
 8003382:	6913      	ldr	r3, [r2, #16]
 8003384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003388:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800338a:	6822      	ldr	r2, [r4, #0]
 800338c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003390:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003394:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003398:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800339c:	e7cf      	b.n	800333e <HAL_ADC_Init+0x1da>
        MODIFY_REG(hadc->Instance->CFGR2,
 800339e:	6821      	ldr	r1, [r4, #0]
 80033a0:	690b      	ldr	r3, [r1, #16]
 80033a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80033a6:	f023 0304 	bic.w	r3, r3, #4
 80033aa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80033ac:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80033ae:	432a      	orrs	r2, r5
 80033b0:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80033b2:	432a      	orrs	r2, r5
 80033b4:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80033b6:	432a      	orrs	r2, r5
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	610b      	str	r3, [r1, #16]
 80033c0:	e7c6      	b.n	8003350 <HAL_ADC_Init+0x1ec>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033c2:	6821      	ldr	r1, [r4, #0]
 80033c4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80033c6:	f023 030f 	bic.w	r3, r3, #15
 80033ca:	6a22      	ldr	r2, [r4, #32]
 80033cc:	3a01      	subs	r2, #1
 80033ce:	4313      	orrs	r3, r2
 80033d0:	630b      	str	r3, [r1, #48]	; 0x30
 80033d2:	e7c5      	b.n	8003360 <HAL_ADC_Init+0x1fc>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80033d6:	f043 0310 	orr.w	r3, r3, #16
 80033da:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033dc:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 80033de:	b003      	add	sp, #12
 80033e0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80033e2:	2001      	movs	r0, #1
 80033e4:	e7fb      	b.n	80033de <HAL_ADC_Init+0x27a>
 80033e6:	bf00      	nop
 80033e8:	20000000 	.word	0x20000000
 80033ec:	053e2d63 	.word	0x053e2d63
 80033f0:	50000100 	.word	0x50000100
 80033f4:	50000400 	.word	0x50000400
 80033f8:	50000500 	.word	0x50000500
 80033fc:	50000600 	.word	0x50000600
 8003400:	50000700 	.word	0x50000700
 8003404:	fff04007 	.word	0xfff04007
 8003408:	50000300 	.word	0x50000300

0800340c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800340c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003410:	2200      	movs	r2, #0
 8003412:	9201      	str	r2, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003414:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8003418:	2a01      	cmp	r2, #1
 800341a:	f000 8284 	beq.w	8003926 <HAL_ADC_ConfigChannel+0x51a>
 800341e:	4603      	mov	r3, r0
 8003420:	2201      	movs	r2, #1
 8003422:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003426:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003428:	68a8      	ldr	r0, [r5, #8]
 800342a:	f010 0f04 	tst.w	r0, #4
 800342e:	d009      	beq.n	8003444 <HAL_ADC_ConfigChannel+0x38>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003430:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003432:	f042 0220 	orr.w	r2, r2, #32
 8003436:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003438:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003440:	b003      	add	sp, #12
 8003442:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003444:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003446:	3530      	adds	r5, #48	; 0x30
 8003448:	0a22      	lsrs	r2, r4, #8
 800344a:	0092      	lsls	r2, r2, #2
 800344c:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8003450:	58a8      	ldr	r0, [r5, r2]
 8003452:	f004 0e1f 	and.w	lr, r4, #31
 8003456:	241f      	movs	r4, #31
 8003458:	fa04 f40e 	lsl.w	r4, r4, lr
 800345c:	ea20 0004 	bic.w	r0, r0, r4
 8003460:	680c      	ldr	r4, [r1, #0]
 8003462:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8003466:	fa0c fc0e 	lsl.w	ip, ip, lr
 800346a:	ea40 000c 	orr.w	r0, r0, ip
 800346e:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003470:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003472:	6882      	ldr	r2, [r0, #8]
 8003474:	f012 0204 	ands.w	r2, r2, #4
 8003478:	d000      	beq.n	800347c <HAL_ADC_ConfigChannel+0x70>
 800347a:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800347c:	6884      	ldr	r4, [r0, #8]
 800347e:	f014 0408 	ands.w	r4, r4, #8
 8003482:	d000      	beq.n	8003486 <HAL_ADC_ConfigChannel+0x7a>
 8003484:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003486:	2a00      	cmp	r2, #0
 8003488:	d150      	bne.n	800352c <HAL_ADC_ConfigChannel+0x120>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800348a:	2c00      	cmp	r4, #0
 800348c:	d14e      	bne.n	800352c <HAL_ADC_ConfigChannel+0x120>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800348e:	688f      	ldr	r7, [r1, #8]
 8003490:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 8003494:	f000 8086 	beq.w	80035a4 <HAL_ADC_ConfigChannel+0x198>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003498:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800349a:	3014      	adds	r0, #20
 800349c:	0e72      	lsrs	r2, r6, #25
 800349e:	0092      	lsls	r2, r2, #2
 80034a0:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 80034a4:	5885      	ldr	r5, [r0, r2]
 80034a6:	f3c6 5e04 	ubfx	lr, r6, #20, #5
 80034aa:	f04f 0c07 	mov.w	ip, #7
 80034ae:	fa0c fc0e 	lsl.w	ip, ip, lr
 80034b2:	ea25 0c0c 	bic.w	ip, r5, ip
 80034b6:	fa07 f50e 	lsl.w	r5, r7, lr
 80034ba:	ea4c 0505 	orr.w	r5, ip, r5
 80034be:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80034c0:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80034c2:	6942      	ldr	r2, [r0, #20]
 80034c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034c8:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80034ca:	694d      	ldr	r5, [r1, #20]
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	68c2      	ldr	r2, [r0, #12]
 80034d0:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80034d4:	0052      	lsls	r2, r2, #1
 80034d6:	fa05 f202 	lsl.w	r2, r5, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034da:	690e      	ldr	r6, [r1, #16]
 80034dc:	2e04      	cmp	r6, #4
 80034de:	d079      	beq.n	80035d4 <HAL_ADC_ConfigChannel+0x1c8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034e0:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 80034e2:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80034e6:	4dae      	ldr	r5, [pc, #696]	; (80037a0 <HAL_ADC_ConfigChannel+0x394>)
 80034e8:	403d      	ands	r5, r7
 80034ea:	680f      	ldr	r7, [r1, #0]
 80034ec:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 80034f0:	433a      	orrs	r2, r7
 80034f2:	4315      	orrs	r5, r2
 80034f4:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80034f8:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	690e      	ldr	r6, [r1, #16]
 8003500:	6988      	ldr	r0, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003502:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8003504:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 8003508:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 800350c:	4328      	orrs	r0, r5
 800350e:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	690d      	ldr	r5, [r1, #16]
 8003516:	7f08      	ldrb	r0, [r1, #28]
 8003518:	2801      	cmp	r0, #1
 800351a:	d058      	beq.n	80035ce <HAL_ADC_ConfigChannel+0x1c2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800351c:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 800351e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8003522:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8003526:	4304      	orrs	r4, r0
 8003528:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800352c:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800352e:	6890      	ldr	r0, [r2, #8]
 8003530:	f010 0f01 	tst.w	r0, #1
 8003534:	d112      	bne.n	800355c <HAL_ADC_ConfigChannel+0x150>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003536:	6808      	ldr	r0, [r1, #0]
 8003538:	68cd      	ldr	r5, [r1, #12]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800353a:	4c9a      	ldr	r4, [pc, #616]	; (80037a4 <HAL_ADC_ConfigChannel+0x398>)
 800353c:	42a5      	cmp	r5, r4
 800353e:	f000 80b1 	beq.w	80036a4 <HAL_ADC_ConfigChannel+0x298>
    CLEAR_BIT(ADCx->DIFSEL,
 8003542:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8003546:	f3c0 0012 	ubfx	r0, r0, #0, #19
 800354a:	ea24 0000 	bic.w	r0, r4, r0
 800354e:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003552:	68c8      	ldr	r0, [r1, #12]
 8003554:	4a93      	ldr	r2, [pc, #588]	; (80037a4 <HAL_ADC_ConfigChannel+0x398>)
 8003556:	4290      	cmp	r0, r2
 8003558:	f000 80ac 	beq.w	80036b4 <HAL_ADC_ConfigChannel+0x2a8>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800355c:	680a      	ldr	r2, [r1, #0]
 800355e:	4992      	ldr	r1, [pc, #584]	; (80037a8 <HAL_ADC_ConfigChannel+0x39c>)
 8003560:	420a      	tst	r2, r1
 8003562:	f000 81da 	beq.w	800391a <HAL_ADC_ConfigChannel+0x50e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003566:	6819      	ldr	r1, [r3, #0]
 8003568:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800356c:	f000 8173 	beq.w	8003856 <HAL_ADC_ConfigChannel+0x44a>
 8003570:	488e      	ldr	r0, [pc, #568]	; (80037ac <HAL_ADC_ConfigChannel+0x3a0>)
 8003572:	4281      	cmp	r1, r0
 8003574:	f000 816c 	beq.w	8003850 <HAL_ADC_ConfigChannel+0x444>
 8003578:	488d      	ldr	r0, [pc, #564]	; (80037b0 <HAL_ADC_ConfigChannel+0x3a4>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800357a:	6880      	ldr	r0, [r0, #8]
 800357c:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003580:	4d8c      	ldr	r5, [pc, #560]	; (80037b4 <HAL_ADC_ConfigChannel+0x3a8>)
 8003582:	42aa      	cmp	r2, r5
 8003584:	f000 8169 	beq.w	800385a <HAL_ADC_ConfigChannel+0x44e>
 8003588:	4d8b      	ldr	r5, [pc, #556]	; (80037b8 <HAL_ADC_ConfigChannel+0x3ac>)
 800358a:	42aa      	cmp	r2, r5
 800358c:	f000 8165 	beq.w	800385a <HAL_ADC_ConfigChannel+0x44e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003590:	4d8a      	ldr	r5, [pc, #552]	; (80037bc <HAL_ADC_ConfigChannel+0x3b0>)
 8003592:	42aa      	cmp	r2, r5
 8003594:	f000 8194 	beq.w	80038c0 <HAL_ADC_ConfigChannel+0x4b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003598:	4d89      	ldr	r5, [pc, #548]	; (80037c0 <HAL_ADC_ConfigChannel+0x3b4>)
 800359a:	42aa      	cmp	r2, r5
 800359c:	f000 81a8 	beq.w	80038f0 <HAL_ADC_ConfigChannel+0x4e4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a0:	2000      	movs	r0, #0
 80035a2:	e74a      	b.n	800343a <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80035a4:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80035a6:	3014      	adds	r0, #20
 80035a8:	0e6a      	lsrs	r2, r5, #25
 80035aa:	0092      	lsls	r2, r2, #2
 80035ac:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 80035b0:	5886      	ldr	r6, [r0, r2]
 80035b2:	f3c5 5504 	ubfx	r5, r5, #20, #5
 80035b6:	2707      	movs	r7, #7
 80035b8:	fa07 f505 	lsl.w	r5, r7, r5
 80035bc:	ea26 0505 	bic.w	r5, r6, r5
 80035c0:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80035c2:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80035c4:	6942      	ldr	r2, [r0, #20]
 80035c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80035ca:	6142      	str	r2, [r0, #20]
}
 80035cc:	e77d      	b.n	80034ca <HAL_ADC_ConfigChannel+0xbe>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80035ce:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80035d2:	e7a3      	b.n	800351c <HAL_ADC_ConfigChannel+0x110>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80035d4:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80035d6:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035d8:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035dc:	680a      	ldr	r2, [r1, #0]
 80035de:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80035e2:	bb85      	cbnz	r5, 8003646 <HAL_ADC_ConfigChannel+0x23a>
 80035e4:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035e8:	4294      	cmp	r4, r2
 80035ea:	d034      	beq.n	8003656 <HAL_ADC_ConfigChannel+0x24a>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035ec:	681c      	ldr	r4, [r3, #0]
 80035ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035f0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80035f2:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035f6:	680a      	ldr	r2, [r1, #0]
 80035f8:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80035fc:	bb85      	cbnz	r5, 8003660 <HAL_ADC_ConfigChannel+0x254>
 80035fe:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003602:	4290      	cmp	r0, r2
 8003604:	d034      	beq.n	8003670 <HAL_ADC_ConfigChannel+0x264>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003606:	681c      	ldr	r4, [r3, #0]
 8003608:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800360a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800360c:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003610:	680a      	ldr	r2, [r1, #0]
 8003612:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003616:	bb85      	cbnz	r5, 800367a <HAL_ADC_ConfigChannel+0x26e>
 8003618:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800361c:	4290      	cmp	r0, r2
 800361e:	d034      	beq.n	800368a <HAL_ADC_ConfigChannel+0x27e>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003620:	681c      	ldr	r4, [r3, #0]
 8003622:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003624:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003626:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800362a:	680a      	ldr	r2, [r1, #0]
 800362c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003630:	bb85      	cbnz	r5, 8003694 <HAL_ADC_ConfigChannel+0x288>
 8003632:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003636:	4290      	cmp	r0, r2
 8003638:	f47f af78 	bne.w	800352c <HAL_ADC_ConfigChannel+0x120>
  MODIFY_REG(*preg,
 800363c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800363e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003642:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 8003644:	e772      	b.n	800352c <HAL_ADC_ConfigChannel+0x120>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800364a:	b112      	cbz	r2, 8003652 <HAL_ADC_ConfigChannel+0x246>
  return __builtin_clz(value);
 800364c:	fab2 f282 	clz	r2, r2
 8003650:	e7ca      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x1dc>
    return 32U;
 8003652:	2220      	movs	r2, #32
 8003654:	e7c8      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(*preg,
 8003656:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8003658:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800365c:	6602      	str	r2, [r0, #96]	; 0x60
}
 800365e:	e7c5      	b.n	80035ec <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003660:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003664:	b112      	cbz	r2, 800366c <HAL_ADC_ConfigChannel+0x260>
  return __builtin_clz(value);
 8003666:	fab2 f282 	clz	r2, r2
 800366a:	e7ca      	b.n	8003602 <HAL_ADC_ConfigChannel+0x1f6>
    return 32U;
 800366c:	2220      	movs	r2, #32
 800366e:	e7c8      	b.n	8003602 <HAL_ADC_ConfigChannel+0x1f6>
  MODIFY_REG(*preg,
 8003670:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003672:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003676:	6662      	str	r2, [r4, #100]	; 0x64
}
 8003678:	e7c5      	b.n	8003606 <HAL_ADC_ConfigChannel+0x1fa>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800367e:	b112      	cbz	r2, 8003686 <HAL_ADC_ConfigChannel+0x27a>
  return __builtin_clz(value);
 8003680:	fab2 f282 	clz	r2, r2
 8003684:	e7ca      	b.n	800361c <HAL_ADC_ConfigChannel+0x210>
    return 32U;
 8003686:	2220      	movs	r2, #32
 8003688:	e7c8      	b.n	800361c <HAL_ADC_ConfigChannel+0x210>
  MODIFY_REG(*preg,
 800368a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800368c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003690:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8003692:	e7c5      	b.n	8003620 <HAL_ADC_ConfigChannel+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003694:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003698:	b112      	cbz	r2, 80036a0 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 800369a:	fab2 f282 	clz	r2, r2
 800369e:	e7ca      	b.n	8003636 <HAL_ADC_ConfigChannel+0x22a>
    return 32U;
 80036a0:	2220      	movs	r2, #32
 80036a2:	e7c8      	b.n	8003636 <HAL_ADC_ConfigChannel+0x22a>
    SET_BIT(ADCx->DIFSEL,
 80036a4:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 80036a8:	f3c0 0012 	ubfx	r0, r0, #0, #19
 80036ac:	4320      	orrs	r0, r4
 80036ae:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 80036b2:	e74e      	b.n	8003552 <HAL_ADC_ConfigChannel+0x146>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036b4:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036b6:	680a      	ldr	r2, [r1, #0]
 80036b8:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80036bc:	2d00      	cmp	r5, #0
 80036be:	d138      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x326>
 80036c0:	0e90      	lsrs	r0, r2, #26
 80036c2:	3001      	adds	r0, #1
 80036c4:	f000 001f 	and.w	r0, r0, #31
 80036c8:	2809      	cmp	r0, #9
 80036ca:	bf8c      	ite	hi
 80036cc:	2000      	movhi	r0, #0
 80036ce:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036d0:	2800      	cmp	r0, #0
 80036d2:	d077      	beq.n	80037c4 <HAL_ADC_ConfigChannel+0x3b8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036d4:	2d00      	cmp	r5, #0
 80036d6:	d13b      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x344>
 80036d8:	0e90      	lsrs	r0, r2, #26
 80036da:	3001      	adds	r0, #1
 80036dc:	0680      	lsls	r0, r0, #26
 80036de:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80036e2:	2d00      	cmp	r5, #0
 80036e4:	d140      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x35c>
 80036e6:	0e96      	lsrs	r6, r2, #26
 80036e8:	3601      	adds	r6, #1
 80036ea:	f006 071f 	and.w	r7, r6, #31
 80036ee:	2601      	movs	r6, #1
 80036f0:	40be      	lsls	r6, r7
 80036f2:	4330      	orrs	r0, r6
 80036f4:	2d00      	cmp	r5, #0
 80036f6:	d145      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x378>
 80036f8:	0e92      	lsrs	r2, r2, #26
 80036fa:	3201      	adds	r2, #1
 80036fc:	f002 021f 	and.w	r2, r2, #31
 8003700:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003704:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003706:	4302      	orrs	r2, r0
 8003708:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800370a:	f104 0614 	add.w	r6, r4, #20
 800370e:	0e55      	lsrs	r5, r2, #25
 8003710:	00ad      	lsls	r5, r5, #2
 8003712:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8003716:	5974      	ldr	r4, [r6, r5]
 8003718:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800371c:	f04f 0c07 	mov.w	ip, #7
 8003720:	fa0c fc02 	lsl.w	ip, ip, r2
 8003724:	ea24 0c0c 	bic.w	ip, r4, ip
 8003728:	4090      	lsls	r0, r2
 800372a:	ea4c 0000 	orr.w	r0, ip, r0
 800372e:	5170      	str	r0, [r6, r5]
}
 8003730:	e714      	b.n	800355c <HAL_ADC_ConfigChannel+0x150>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003736:	b148      	cbz	r0, 800374c <HAL_ADC_ConfigChannel+0x340>
  return __builtin_clz(value);
 8003738:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800373c:	3001      	adds	r0, #1
 800373e:	f000 001f 	and.w	r0, r0, #31
 8003742:	2809      	cmp	r0, #9
 8003744:	bf8c      	ite	hi
 8003746:	2000      	movhi	r0, #0
 8003748:	2001      	movls	r0, #1
 800374a:	e7c1      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 800374c:	2020      	movs	r0, #32
 800374e:	e7f5      	b.n	800373c <HAL_ADC_ConfigChannel+0x330>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003754:	b130      	cbz	r0, 8003764 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003756:	fab0 f080 	clz	r0, r0
 800375a:	3001      	adds	r0, #1
 800375c:	0680      	lsls	r0, r0, #26
 800375e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003762:	e7be      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x2d6>
    return 32U;
 8003764:	2020      	movs	r0, #32
 8003766:	e7f8      	b.n	800375a <HAL_ADC_ConfigChannel+0x34e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003768:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800376c:	b146      	cbz	r6, 8003780 <HAL_ADC_ConfigChannel+0x374>
  return __builtin_clz(value);
 800376e:	fab6 f686 	clz	r6, r6
 8003772:	3601      	adds	r6, #1
 8003774:	f006 061f 	and.w	r6, r6, #31
 8003778:	2701      	movs	r7, #1
 800377a:	fa07 f606 	lsl.w	r6, r7, r6
 800377e:	e7b8      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x2e6>
    return 32U;
 8003780:	2620      	movs	r6, #32
 8003782:	e7f6      	b.n	8003772 <HAL_ADC_ConfigChannel+0x366>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003788:	b142      	cbz	r2, 800379c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800378a:	fab2 f282 	clz	r2, r2
 800378e:	3201      	adds	r2, #1
 8003790:	f002 021f 	and.w	r2, r2, #31
 8003794:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003798:	0512      	lsls	r2, r2, #20
 800379a:	e7b4      	b.n	8003706 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800379c:	2220      	movs	r2, #32
 800379e:	e7f6      	b.n	800378e <HAL_ADC_ConfigChannel+0x382>
 80037a0:	03fff000 	.word	0x03fff000
 80037a4:	407f0000 	.word	0x407f0000
 80037a8:	80080000 	.word	0x80080000
 80037ac:	50000100 	.word	0x50000100
 80037b0:	50000700 	.word	0x50000700
 80037b4:	c3210000 	.word	0xc3210000
 80037b8:	90c00010 	.word	0x90c00010
 80037bc:	c7520000 	.word	0xc7520000
 80037c0:	cb840000 	.word	0xcb840000
 80037c4:	b9cd      	cbnz	r5, 80037fa <HAL_ADC_ConfigChannel+0x3ee>
 80037c6:	0e90      	lsrs	r0, r2, #26
 80037c8:	3001      	adds	r0, #1
 80037ca:	0680      	lsls	r0, r0, #26
 80037cc:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80037d0:	b9fd      	cbnz	r5, 8003812 <HAL_ADC_ConfigChannel+0x406>
 80037d2:	0e96      	lsrs	r6, r2, #26
 80037d4:	3601      	adds	r6, #1
 80037d6:	f006 071f 	and.w	r7, r6, #31
 80037da:	2601      	movs	r6, #1
 80037dc:	40be      	lsls	r6, r7
 80037de:	4330      	orrs	r0, r6
 80037e0:	bb2d      	cbnz	r5, 800382e <HAL_ADC_ConfigChannel+0x422>
 80037e2:	0e92      	lsrs	r2, r2, #26
 80037e4:	3201      	adds	r2, #1
 80037e6:	f002 021f 	and.w	r2, r2, #31
 80037ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80037ee:	3a1e      	subs	r2, #30
 80037f0:	0512      	lsls	r2, r2, #20
 80037f2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037f6:	4302      	orrs	r2, r0
 80037f8:	e786      	b.n	8003708 <HAL_ADC_ConfigChannel+0x2fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80037fe:	b130      	cbz	r0, 800380e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003800:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003804:	3001      	adds	r0, #1
 8003806:	0680      	lsls	r0, r0, #26
 8003808:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800380c:	e7e0      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x3c4>
    return 32U;
 800380e:	2020      	movs	r0, #32
 8003810:	e7f8      	b.n	8003804 <HAL_ADC_ConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003812:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8003816:	b146      	cbz	r6, 800382a <HAL_ADC_ConfigChannel+0x41e>
  return __builtin_clz(value);
 8003818:	fab6 f686 	clz	r6, r6
 800381c:	3601      	adds	r6, #1
 800381e:	f006 061f 	and.w	r6, r6, #31
 8003822:	2701      	movs	r7, #1
 8003824:	fa07 f606 	lsl.w	r6, r7, r6
 8003828:	e7d9      	b.n	80037de <HAL_ADC_ConfigChannel+0x3d2>
    return 32U;
 800382a:	2620      	movs	r6, #32
 800382c:	e7f6      	b.n	800381c <HAL_ADC_ConfigChannel+0x410>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003832:	b15a      	cbz	r2, 800384c <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8003834:	fab2 f282 	clz	r2, r2
 8003838:	3201      	adds	r2, #1
 800383a:	f002 021f 	and.w	r2, r2, #31
 800383e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003842:	3a1e      	subs	r2, #30
 8003844:	0512      	lsls	r2, r2, #20
 8003846:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800384a:	e7d4      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x3ea>
    return 32U;
 800384c:	2220      	movs	r2, #32
 800384e:	e7f3      	b.n	8003838 <HAL_ADC_ConfigChannel+0x42c>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003850:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8003854:	e691      	b.n	800357a <HAL_ADC_ConfigChannel+0x16e>
 8003856:	4835      	ldr	r0, [pc, #212]	; (800392c <HAL_ADC_ConfigChannel+0x520>)
 8003858:	e68f      	b.n	800357a <HAL_ADC_ConfigChannel+0x16e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800385a:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800385e:	f47f ae97 	bne.w	8003590 <HAL_ADC_ConfigChannel+0x184>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003862:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003866:	d004      	beq.n	8003872 <HAL_ADC_ConfigChannel+0x466>
 8003868:	4a31      	ldr	r2, [pc, #196]	; (8003930 <HAL_ADC_ConfigChannel+0x524>)
 800386a:	4291      	cmp	r1, r2
 800386c:	d001      	beq.n	8003872 <HAL_ADC_ConfigChannel+0x466>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800386e:	2000      	movs	r0, #0
 8003870:	e5e3      	b.n	800343a <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003872:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003876:	d019      	beq.n	80038ac <HAL_ADC_ConfigChannel+0x4a0>
 8003878:	4a2e      	ldr	r2, [pc, #184]	; (8003934 <HAL_ADC_ConfigChannel+0x528>)
 800387a:	4291      	cmp	r1, r2
 800387c:	d014      	beq.n	80038a8 <HAL_ADC_ConfigChannel+0x49c>
 800387e:	492e      	ldr	r1, [pc, #184]	; (8003938 <HAL_ADC_ConfigChannel+0x52c>)
 8003880:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003884:	688a      	ldr	r2, [r1, #8]
 8003886:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800388a:	4314      	orrs	r4, r2
 800388c:	608c      	str	r4, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800388e:	4a2b      	ldr	r2, [pc, #172]	; (800393c <HAL_ADC_ConfigChannel+0x530>)
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	0992      	lsrs	r2, r2, #6
 8003894:	492a      	ldr	r1, [pc, #168]	; (8003940 <HAL_ADC_ConfigChannel+0x534>)
 8003896:	fba1 1202 	umull	r1, r2, r1, r2
 800389a:	0992      	lsrs	r2, r2, #6
 800389c:	3201      	adds	r2, #1
 800389e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80038a2:	0092      	lsls	r2, r2, #2
 80038a4:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80038a6:	e006      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x4aa>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038a8:	4920      	ldr	r1, [pc, #128]	; (800392c <HAL_ADC_ConfigChannel+0x520>)
 80038aa:	e7e9      	b.n	8003880 <HAL_ADC_ConfigChannel+0x474>
 80038ac:	491f      	ldr	r1, [pc, #124]	; (800392c <HAL_ADC_ConfigChannel+0x520>)
 80038ae:	e7e7      	b.n	8003880 <HAL_ADC_ConfigChannel+0x474>
            wait_loop_index--;
 80038b0:	9a01      	ldr	r2, [sp, #4]
 80038b2:	3a01      	subs	r2, #1
 80038b4:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80038b6:	9a01      	ldr	r2, [sp, #4]
 80038b8:	2a00      	cmp	r2, #0
 80038ba:	d1f9      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x4a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038bc:	2000      	movs	r0, #0
 80038be:	e5bc      	b.n	800343a <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038c0:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80038c4:	f47f ae68 	bne.w	8003598 <HAL_ADC_ConfigChannel+0x18c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038c8:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80038cc:	d00e      	beq.n	80038ec <HAL_ADC_ConfigChannel+0x4e0>
 80038ce:	4a19      	ldr	r2, [pc, #100]	; (8003934 <HAL_ADC_ConfigChannel+0x528>)
 80038d0:	4291      	cmp	r1, r2
 80038d2:	d009      	beq.n	80038e8 <HAL_ADC_ConfigChannel+0x4dc>
 80038d4:	4918      	ldr	r1, [pc, #96]	; (8003938 <HAL_ADC_ConfigChannel+0x52c>)
 80038d6:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 80038da:	688a      	ldr	r2, [r1, #8]
 80038dc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80038e0:	4314      	orrs	r4, r2
 80038e2:	608c      	str	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038e4:	2000      	movs	r0, #0
}
 80038e6:	e5a8      	b.n	800343a <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038e8:	4910      	ldr	r1, [pc, #64]	; (800392c <HAL_ADC_ConfigChannel+0x520>)
 80038ea:	e7f4      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x4ca>
 80038ec:	490f      	ldr	r1, [pc, #60]	; (800392c <HAL_ADC_ConfigChannel+0x520>)
 80038ee:	e7f2      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x4ca>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038f0:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80038f4:	d113      	bne.n	800391e <HAL_ADC_ConfigChannel+0x512>
        if (ADC_VREFINT_INSTANCE(hadc))
 80038f6:	4a0f      	ldr	r2, [pc, #60]	; (8003934 <HAL_ADC_ConfigChannel+0x528>)
 80038f8:	4291      	cmp	r1, r2
 80038fa:	d012      	beq.n	8003922 <HAL_ADC_ConfigChannel+0x516>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038fc:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003900:	d009      	beq.n	8003916 <HAL_ADC_ConfigChannel+0x50a>
 8003902:	480d      	ldr	r0, [pc, #52]	; (8003938 <HAL_ADC_ConfigChannel+0x52c>)
 8003904:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003908:	6881      	ldr	r1, [r0, #8]
 800390a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800390e:	430a      	orrs	r2, r1
 8003910:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003912:	2000      	movs	r0, #0
}
 8003914:	e591      	b.n	800343a <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003916:	4805      	ldr	r0, [pc, #20]	; (800392c <HAL_ADC_ConfigChannel+0x520>)
 8003918:	e7f4      	b.n	8003904 <HAL_ADC_ConfigChannel+0x4f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800391a:	2000      	movs	r0, #0
 800391c:	e58d      	b.n	800343a <HAL_ADC_ConfigChannel+0x2e>
 800391e:	2000      	movs	r0, #0
 8003920:	e58b      	b.n	800343a <HAL_ADC_ConfigChannel+0x2e>
 8003922:	2000      	movs	r0, #0
 8003924:	e589      	b.n	800343a <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8003926:	2002      	movs	r0, #2
 8003928:	e58a      	b.n	8003440 <HAL_ADC_ConfigChannel+0x34>
 800392a:	bf00      	nop
 800392c:	50000300 	.word	0x50000300
 8003930:	50000600 	.word	0x50000600
 8003934:	50000100 	.word	0x50000100
 8003938:	50000700 	.word	0x50000700
 800393c:	20000000 	.word	0x20000000
 8003940:	053e2d63 	.word	0x053e2d63

08003944 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003944:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8003948:	2a01      	cmp	r2, #1
 800394a:	f000 80d6 	beq.w	8003afa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
{
 800394e:	b410      	push	{r4}
 8003950:	b09d      	sub	sp, #116	; 0x74
 8003952:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003954:	2201      	movs	r2, #1
 8003956:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800395a:	2200      	movs	r2, #0
 800395c:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800395e:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003960:	6800      	ldr	r0, [r0, #0]
 8003962:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003966:	d047      	beq.n	80039f8 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8003968:	4a65      	ldr	r2, [pc, #404]	; (8003b00 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800396a:	4290      	cmp	r0, r2
 800396c:	d047      	beq.n	80039fe <HAL_ADCEx_MultiModeConfigChannel+0xba>
 800396e:	2200      	movs	r2, #0
 8003970:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8003972:	9a01      	ldr	r2, [sp, #4]
 8003974:	2a00      	cmp	r2, #0
 8003976:	d046      	beq.n	8003a06 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003978:	6892      	ldr	r2, [r2, #8]
 800397a:	f012 0204 	ands.w	r2, r2, #4
 800397e:	d000      	beq.n	8003982 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003980:	2201      	movs	r2, #1
 8003982:	6884      	ldr	r4, [r0, #8]
 8003984:	f014 0f04 	tst.w	r4, #4
 8003988:	f040 80a7 	bne.w	8003ada <HAL_ADCEx_MultiModeConfigChannel+0x196>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 800398c:	2a00      	cmp	r2, #0
 800398e:	f040 80a4 	bne.w	8003ada <HAL_ADCEx_MultiModeConfigChannel+0x196>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003992:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003996:	d042      	beq.n	8003a1e <HAL_ADCEx_MultiModeConfigChannel+0xda>
 8003998:	4a5a      	ldr	r2, [pc, #360]	; (8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800399a:	4290      	cmp	r0, r2
 800399c:	d03c      	beq.n	8003a18 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 800399e:	4a5a      	ldr	r2, [pc, #360]	; (8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039a0:	6808      	ldr	r0, [r1, #0]
 80039a2:	2800      	cmp	r0, #0
 80039a4:	d05c      	beq.n	8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80039a6:	6890      	ldr	r0, [r2, #8]
 80039a8:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80039ac:	684c      	ldr	r4, [r1, #4]
 80039ae:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 80039b2:	ea44 344c 	orr.w	r4, r4, ip, lsl #13
 80039b6:	4320      	orrs	r0, r4
 80039b8:	6090      	str	r0, [r2, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80039c0:	d02f      	beq.n	8003a22 <HAL_ADCEx_MultiModeConfigChannel+0xde>
 80039c2:	4c50      	ldr	r4, [pc, #320]	; (8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80039c4:	42a0      	cmp	r0, r4
 80039c6:	d02c      	beq.n	8003a22 <HAL_ADCEx_MultiModeConfigChannel+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039c8:	484d      	ldr	r0, [pc, #308]	; (8003b00 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80039ca:	6884      	ldr	r4, [r0, #8]
 80039cc:	f014 0401 	ands.w	r4, r4, #1
 80039d0:	d000      	beq.n	80039d4 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80039d2:	2401      	movs	r4, #1
 80039d4:	484d      	ldr	r0, [pc, #308]	; (8003b0c <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 80039d6:	6880      	ldr	r0, [r0, #8]
 80039d8:	f010 0001 	ands.w	r0, r0, #1
 80039dc:	d000      	beq.n	80039e0 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80039de:	2001      	movs	r0, #1
 80039e0:	4320      	orrs	r0, r4
 80039e2:	4c4b      	ldr	r4, [pc, #300]	; (8003b10 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80039e4:	68a4      	ldr	r4, [r4, #8]
 80039e6:	f014 0401 	ands.w	r4, r4, #1
 80039ea:	d000      	beq.n	80039ee <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80039ec:	2401      	movs	r4, #1
 80039ee:	4320      	orrs	r0, r4
 80039f0:	bf0c      	ite	eq
 80039f2:	2001      	moveq	r0, #1
 80039f4:	2000      	movne	r0, #0
 80039f6:	e025      	b.n	8003a44 <HAL_ADCEx_MultiModeConfigChannel+0x100>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80039f8:	4a42      	ldr	r2, [pc, #264]	; (8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80039fa:	9201      	str	r2, [sp, #4]
 80039fc:	e7b9      	b.n	8003972 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 80039fe:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003a02:	9201      	str	r2, [sp, #4]
 8003a04:	e7b5      	b.n	8003972 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a08:	f042 0220 	orr.w	r2, r2, #32
 8003a0c:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 8003a14:	2001      	movs	r0, #1
 8003a16:	e068      	b.n	8003aea <HAL_ADCEx_MultiModeConfigChannel+0x1a6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a18:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8003a1c:	e7c0      	b.n	80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8003a1e:	4a3d      	ldr	r2, [pc, #244]	; (8003b14 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003a20:	e7be      	b.n	80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8003a22:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003a26:	6880      	ldr	r0, [r0, #8]
 8003a28:	f010 0001 	ands.w	r0, r0, #1
 8003a2c:	d000      	beq.n	8003a30 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8003a2e:	2001      	movs	r0, #1
 8003a30:	4c34      	ldr	r4, [pc, #208]	; (8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003a32:	68a4      	ldr	r4, [r4, #8]
 8003a34:	f014 0401 	ands.w	r4, r4, #1
 8003a38:	d000      	beq.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8003a3a:	2401      	movs	r4, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a3c:	4320      	orrs	r0, r4
 8003a3e:	bf0c      	ite	eq
 8003a40:	2001      	moveq	r0, #1
 8003a42:	2000      	movne	r0, #0
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d054      	beq.n	8003af2 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a48:	6890      	ldr	r0, [r2, #8]
 8003a4a:	f420 6071 	bic.w	r0, r0, #3856	; 0xf10
 8003a4e:	f020 000f 	bic.w	r0, r0, #15
 8003a52:	680c      	ldr	r4, [r1, #0]
 8003a54:	6889      	ldr	r1, [r1, #8]
 8003a56:	4321      	orrs	r1, r4
 8003a58:	4308      	orrs	r0, r1
 8003a5a:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	e041      	b.n	8003ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a60:	6891      	ldr	r1, [r2, #8]
 8003a62:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8003a66:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a68:	6819      	ldr	r1, [r3, #0]
 8003a6a:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003a6e:	d01a      	beq.n	8003aa6 <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8003a70:	4824      	ldr	r0, [pc, #144]	; (8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003a72:	4281      	cmp	r1, r0
 8003a74:	d017      	beq.n	8003aa6 <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8003a76:	4922      	ldr	r1, [pc, #136]	; (8003b00 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003a78:	6888      	ldr	r0, [r1, #8]
 8003a7a:	f010 0001 	ands.w	r0, r0, #1
 8003a7e:	d000      	beq.n	8003a82 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003a80:	2001      	movs	r0, #1
 8003a82:	4922      	ldr	r1, [pc, #136]	; (8003b0c <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8003a84:	6889      	ldr	r1, [r1, #8]
 8003a86:	f011 0101 	ands.w	r1, r1, #1
 8003a8a:	d000      	beq.n	8003a8e <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	4301      	orrs	r1, r0
 8003a90:	481f      	ldr	r0, [pc, #124]	; (8003b10 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003a92:	6880      	ldr	r0, [r0, #8]
 8003a94:	f010 0001 	ands.w	r0, r0, #1
 8003a98:	d000      	beq.n	8003a9c <HAL_ADCEx_MultiModeConfigChannel+0x158>
 8003a9a:	2001      	movs	r0, #1
 8003a9c:	4301      	orrs	r1, r0
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2101      	moveq	r1, #1
 8003aa2:	2100      	movne	r1, #0
 8003aa4:	e010      	b.n	8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x184>
 8003aa6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8003aaa:	6889      	ldr	r1, [r1, #8]
 8003aac:	f011 0101 	ands.w	r1, r1, #1
 8003ab0:	d000      	beq.n	8003ab4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	4813      	ldr	r0, [pc, #76]	; (8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003ab6:	6880      	ldr	r0, [r0, #8]
 8003ab8:	f010 0001 	ands.w	r0, r0, #1
 8003abc:	d000      	beq.n	8003ac0 <HAL_ADCEx_MultiModeConfigChannel+0x17c>
 8003abe:	2001      	movs	r0, #1
 8003ac0:	4301      	orrs	r1, r0
 8003ac2:	bf0c      	ite	eq
 8003ac4:	2101      	moveq	r1, #1
 8003ac6:	2100      	movne	r1, #0
 8003ac8:	b1a9      	cbz	r1, 8003af6 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003aca:	6891      	ldr	r1, [r2, #8]
 8003acc:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8003ad0:	f021 010f 	bic.w	r1, r1, #15
 8003ad4:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	e004      	b.n	8003ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ada:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003adc:	f042 0220 	orr.w	r2, r2, #32
 8003ae0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ae2:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003aea:	b01d      	add	sp, #116	; 0x74
 8003aec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003af0:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003af2:	2000      	movs	r0, #0
 8003af4:	e7f6      	b.n	8003ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
 8003af6:	2000      	movs	r0, #0
 8003af8:	e7f4      	b.n	8003ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  __HAL_LOCK(hadc);
 8003afa:	2002      	movs	r0, #2
}
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	50000400 	.word	0x50000400
 8003b04:	50000100 	.word	0x50000100
 8003b08:	50000700 	.word	0x50000700
 8003b0c:	50000500 	.word	0x50000500
 8003b10:	50000600 	.word	0x50000600
 8003b14:	50000300 	.word	0x50000300

08003b18 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b18:	4a07      	ldr	r2, [pc, #28]	; (8003b38 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003b1a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b20:	041b      	lsls	r3, r3, #16
 8003b22:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b24:	0200      	lsls	r0, r0, #8
 8003b26:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b2a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003b34:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003b36:	4770      	bx	lr
 8003b38:	e000ed00 	.word	0xe000ed00

08003b3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b3c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b3e:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <HAL_NVIC_SetPriority+0x68>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b46:	f1c3 0c07 	rsb	ip, r3, #7
 8003b4a:	f1bc 0f04 	cmp.w	ip, #4
 8003b4e:	bf28      	it	cs
 8003b50:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b54:	f103 0e04 	add.w	lr, r3, #4
 8003b58:	f1be 0f06 	cmp.w	lr, #6
 8003b5c:	d918      	bls.n	8003b90 <HAL_NVIC_SetPriority+0x54>
 8003b5e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b60:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8003b64:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003b68:	ea21 010c 	bic.w	r1, r1, ip
 8003b6c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b6e:	fa0e f303 	lsl.w	r3, lr, r3
 8003b72:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b76:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	db0b      	blt.n	8003b94 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b7c:	0109      	lsls	r1, r1, #4
 8003b7e:	b2c9      	uxtb	r1, r1
 8003b80:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003b84:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003b88:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003b8c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b90:	2300      	movs	r3, #0
 8003b92:	e7e5      	b.n	8003b60 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b94:	f000 000f 	and.w	r0, r0, #15
 8003b98:	0109      	lsls	r1, r1, #4
 8003b9a:	b2c9      	uxtb	r1, r1
 8003b9c:	4b02      	ldr	r3, [pc, #8]	; (8003ba8 <HAL_NVIC_SetPriority+0x6c>)
 8003b9e:	5419      	strb	r1, [r3, r0]
 8003ba0:	e7f4      	b.n	8003b8c <HAL_NVIC_SetPriority+0x50>
 8003ba2:	bf00      	nop
 8003ba4:	e000ed00 	.word	0xe000ed00
 8003ba8:	e000ed14 	.word	0xe000ed14

08003bac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003bac:	2800      	cmp	r0, #0
 8003bae:	db07      	blt.n	8003bc0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bb0:	f000 021f 	and.w	r2, r0, #31
 8003bb4:	0940      	lsrs	r0, r0, #5
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	4093      	lsls	r3, r2
 8003bba:	4a02      	ldr	r2, [pc, #8]	; (8003bc4 <HAL_NVIC_EnableIRQ+0x18>)
 8003bbc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	e000e100 	.word	0xe000e100

08003bc8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bc8:	3801      	subs	r0, #1
 8003bca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003bce:	d20b      	bcs.n	8003be8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bd0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003bd4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd6:	4a05      	ldr	r2, [pc, #20]	; (8003bec <HAL_SYSTICK_Config+0x24>)
 8003bd8:	21f0      	movs	r1, #240	; 0xf0
 8003bda:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bde:	2000      	movs	r0, #0
 8003be0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003be2:	2207      	movs	r2, #7
 8003be4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003be6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003be8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003bea:	4770      	bx	lr
 8003bec:	e000ed00 	.word	0xe000ed00

08003bf0 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d038      	beq.n	8003c66 <HAL_CRC_Init+0x76>
{
 8003bf4:	b510      	push	{r4, lr}
 8003bf6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003bf8:	7f43      	ldrb	r3, [r0, #29]
 8003bfa:	b31b      	cbz	r3, 8003c44 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003c00:	7923      	ldrb	r3, [r4, #4]
 8003c02:	bb1b      	cbnz	r3, 8003c4c <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	4a19      	ldr	r2, [pc, #100]	; (8003c6c <HAL_CRC_Init+0x7c>)
 8003c08:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003c0a:	6822      	ldr	r2, [r4, #0]
 8003c0c:	6893      	ldr	r3, [r2, #8]
 8003c0e:	f023 0318 	bic.w	r3, r3, #24
 8003c12:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003c14:	7963      	ldrb	r3, [r4, #5]
 8003c16:	bb13      	cbnz	r3, 8003c5e <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003c18:	6823      	ldr	r3, [r4, #0]
 8003c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c1e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003c20:	6822      	ldr	r2, [r4, #0]
 8003c22:	6893      	ldr	r3, [r2, #8]
 8003c24:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003c28:	6961      	ldr	r1, [r4, #20]
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003c2e:	6822      	ldr	r2, [r4, #0]
 8003c30:	6893      	ldr	r3, [r2, #8]
 8003c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c36:	69a1      	ldr	r1, [r4, #24]
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8003c40:	2000      	movs	r0, #0
}
 8003c42:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8003c44:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8003c46:	f7fd fca3 	bl	8001590 <HAL_CRC_MspInit>
 8003c4a:	e7d7      	b.n	8003bfc <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003c4c:	68e2      	ldr	r2, [r4, #12]
 8003c4e:	68a1      	ldr	r1, [r4, #8]
 8003c50:	4620      	mov	r0, r4
 8003c52:	f000 f80d 	bl	8003c70 <HAL_CRCEx_Polynomial_Set>
 8003c56:	2800      	cmp	r0, #0
 8003c58:	d0dc      	beq.n	8003c14 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	e7f1      	b.n	8003c42 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	6922      	ldr	r2, [r4, #16]
 8003c62:	611a      	str	r2, [r3, #16]
 8003c64:	e7dc      	b.n	8003c20 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8003c66:	2001      	movs	r0, #1
}
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	04c11db7 	.word	0x04c11db7

08003c70 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003c70:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003c72:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003c74:	461c      	mov	r4, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b134      	cbz	r4, 8003c88 <HAL_CRCEx_Polynomial_Set+0x18>
 8003c7a:	f003 0c1f 	and.w	ip, r3, #31
 8003c7e:	fa21 fc0c 	lsr.w	ip, r1, ip
 8003c82:	f01c 0f01 	tst.w	ip, #1
 8003c86:	d0f5      	beq.n	8003c74 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8003c88:	2a18      	cmp	r2, #24
 8003c8a:	d822      	bhi.n	8003cd2 <HAL_CRCEx_Polynomial_Set+0x62>
 8003c8c:	e8df f002 	tbb	[pc, r2]
 8003c90:	2121210f 	.word	0x2121210f
 8003c94:	21212121 	.word	0x21212121
 8003c98:	2121211d 	.word	0x2121211d
 8003c9c:	21212121 	.word	0x21212121
 8003ca0:	21212119 	.word	0x21212119
 8003ca4:	21212121 	.word	0x21212121
 8003ca8:	0d          	.byte	0x0d
 8003ca9:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003caa:	2b06      	cmp	r3, #6
 8003cac:	d815      	bhi.n	8003cda <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003cae:	6803      	ldr	r3, [r0, #0]
 8003cb0:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003cb2:	6801      	ldr	r1, [r0, #0]
 8003cb4:	688b      	ldr	r3, [r1, #8]
 8003cb6:	f023 0318 	bic.w	r3, r3, #24
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	608a      	str	r2, [r1, #8]
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	e008      	b.n	8003cd4 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 8003cc2:	2b07      	cmp	r3, #7
 8003cc4:	d9f3      	bls.n	8003cae <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	e004      	b.n	8003cd4 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 8003cca:	2b0f      	cmp	r3, #15
 8003ccc:	d9ef      	bls.n	8003cae <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8003cce:	2001      	movs	r0, #1
 8003cd0:	e000      	b.n	8003cd4 <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 8003cd2:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 8003cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cd8:	4770      	bx	lr
        status =   HAL_ERROR;
 8003cda:	2001      	movs	r0, #1
 8003cdc:	e7fa      	b.n	8003cd4 <HAL_CRCEx_Polynomial_Set+0x64>

08003cde <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8003cde:	b170      	cbz	r0, 8003cfe <HAL_DAC_Init+0x20>
{
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003ce4:	7903      	ldrb	r3, [r0, #4]
 8003ce6:	b133      	cbz	r3, 8003cf6 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003cec:	2000      	movs	r0, #0
 8003cee:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8003cf4:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8003cf6:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8003cf8:	f7fd fcbc 	bl	8001674 <HAL_DAC_MspInit>
 8003cfc:	e7f4      	b.n	8003ce8 <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8003cfe:	2001      	movs	r0, #1
}
 8003d00:	4770      	bx	lr
	...

08003d04 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d04:	7943      	ldrb	r3, [r0, #5]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	f000 80f4 	beq.w	8003ef4 <HAL_DAC_ConfigChannel+0x1f0>
{
 8003d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d10:	4604      	mov	r4, r0
 8003d12:	460e      	mov	r6, r1
 8003d14:	4615      	mov	r5, r2
  __HAL_LOCK(hdac);
 8003d16:	2301      	movs	r3, #1
 8003d18:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003d1e:	688b      	ldr	r3, [r1, #8]
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d017      	beq.n	8003d54 <HAL_DAC_ConfigChannel+0x50>
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003d24:	69f3      	ldr	r3, [r6, #28]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d05e      	beq.n	8003de8 <HAL_DAC_ConfigChannel+0xe4>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003d2e:	f005 0510 	and.w	r5, r5, #16
 8003d32:	2307      	movs	r3, #7
 8003d34:	40ab      	lsls	r3, r5
 8003d36:	ea27 0703 	bic.w	r7, r7, r3
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003d3a:	69b3      	ldr	r3, [r6, #24]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d060      	beq.n	8003e02 <HAL_DAC_ConfigChannel+0xfe>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	f000 80bd 	beq.w	8003ec0 <HAL_DAC_ConfigChannel+0x1bc>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003d46:	6973      	ldr	r3, [r6, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f040 80bc 	bne.w	8003ec6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003d4e:	f04f 0801 	mov.w	r8, #1
 8003d52:	e058      	b.n	8003e06 <HAL_DAC_ConfigChannel+0x102>
    tickstart = HAL_GetTick();
 8003d54:	f7ff f9ec 	bl	8003130 <HAL_GetTick>
 8003d58:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8003d5a:	b17d      	cbz	r5, 8003d7c <HAL_DAC_ConfigChannel+0x78>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003d5c:	6823      	ldr	r3, [r4, #0]
 8003d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	da3a      	bge.n	8003dda <HAL_DAC_ConfigChannel+0xd6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003d64:	f7ff f9e4 	bl	8003130 <HAL_GetTick>
 8003d68:	1bc0      	subs	r0, r0, r7
 8003d6a:	2801      	cmp	r0, #1
 8003d6c:	d9f6      	bls.n	8003d5c <HAL_DAC_ConfigChannel+0x58>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003d6e:	6923      	ldr	r3, [r4, #16]
 8003d70:	f043 0308 	orr.w	r3, r3, #8
 8003d74:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003d76:	2003      	movs	r0, #3
 8003d78:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8003d7a:	e09f      	b.n	8003ebc <HAL_DAC_ConfigChannel+0x1b8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d80:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003d84:	d00b      	beq.n	8003d9e <HAL_DAC_ConfigChannel+0x9a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003d86:	f7ff f9d3 	bl	8003130 <HAL_GetTick>
 8003d8a:	1bc0      	subs	r0, r0, r7
 8003d8c:	2801      	cmp	r0, #1
 8003d8e:	d9f5      	bls.n	8003d7c <HAL_DAC_ConfigChannel+0x78>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003d90:	6923      	ldr	r3, [r4, #16]
 8003d92:	f043 0308 	orr.w	r3, r3, #8
 8003d96:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003d98:	2003      	movs	r0, #3
 8003d9a:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8003d9c:	e08e      	b.n	8003ebc <HAL_DAC_ConfigChannel+0x1b8>
      HAL_Delay(1);
 8003d9e:	2001      	movs	r0, #1
 8003da0:	f7ff f9cc 	bl	800313c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003daa:	6820      	ldr	r0, [r4, #0]
 8003dac:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003dae:	f005 0110 	and.w	r1, r5, #16
 8003db2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003db6:	408b      	lsls	r3, r1
 8003db8:	ea22 0203 	bic.w	r2, r2, r3
 8003dbc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003dbe:	408b      	lsls	r3, r1
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	6482      	str	r2, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003dc4:	6820      	ldr	r0, [r4, #0]
 8003dc6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003dc8:	22ff      	movs	r2, #255	; 0xff
 8003dca:	408a      	lsls	r2, r1
 8003dcc:	ea23 0302 	bic.w	r3, r3, r2
 8003dd0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003dd2:	408a      	lsls	r2, r1
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003dd8:	e7a4      	b.n	8003d24 <HAL_DAC_ConfigChannel+0x20>
      HAL_Delay(1U);
 8003dda:	2001      	movs	r0, #1
 8003ddc:	f7ff f9ae 	bl	800313c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003de4:	645a      	str	r2, [r3, #68]	; 0x44
 8003de6:	e7e0      	b.n	8003daa <HAL_DAC_ConfigChannel+0xa6>
    tmpreg1 = hdac->Instance->CCR;
 8003de8:	6821      	ldr	r1, [r4, #0]
 8003dea:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003dec:	f005 0010 	and.w	r0, r5, #16
 8003df0:	231f      	movs	r3, #31
 8003df2:	4083      	lsls	r3, r0
 8003df4:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003df8:	6a33      	ldr	r3, [r6, #32]
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003dfa:	4083      	lsls	r3, r0
 8003dfc:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 8003dfe:	638b      	str	r3, [r1, #56]	; 0x38
 8003e00:	e793      	b.n	8003d2a <HAL_DAC_ConfigChannel+0x26>
    connectOnChip = 0x00000000UL;
 8003e02:	f04f 0800 	mov.w	r8, #0
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003e06:	68b3      	ldr	r3, [r6, #8]
 8003e08:	6972      	ldr	r2, [r6, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	ea43 0308 	orr.w	r3, r3, r8
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003e10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e14:	40aa      	lsls	r2, r5
 8003e16:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003e1a:	7932      	ldrb	r2, [r6, #4]
 8003e1c:	2a01      	cmp	r2, #1
 8003e1e:	d055      	beq.n	8003ecc <HAL_DAC_ConfigChannel+0x1c8>
 8003e20:	f04f 0800 	mov.w	r8, #0
 8003e24:	ea48 0303 	orr.w	r3, r8, r3
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e2c:	40aa      	lsls	r2, r5
 8003e2e:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003e32:	7972      	ldrb	r2, [r6, #5]
 8003e34:	2a01      	cmp	r2, #1
 8003e36:	d04c      	beq.n	8003ed2 <HAL_DAC_ConfigChannel+0x1ce>
 8003e38:	f04f 0800 	mov.w	r8, #0
 8003e3c:	ea48 0803 	orr.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003e40:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003e44:	6833      	ldr	r3, [r6, #0]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d046      	beq.n	8003ed8 <HAL_DAC_ConfigChannel+0x1d4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003e4a:	431f      	orrs	r7, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e4c:	fa08 f805 	lsl.w	r8, r8, r5
 8003e50:	ea48 0707 	orr.w	r7, r8, r7
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003e58:	6821      	ldr	r1, [r4, #0]
 8003e5a:	680b      	ldr	r3, [r1, #0]
 8003e5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e60:	40aa      	lsls	r2, r5
 8003e62:	ea23 0302 	bic.w	r3, r3, r2
 8003e66:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e68:	6821      	ldr	r1, [r4, #0]
 8003e6a:	680b      	ldr	r3, [r1, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003e6c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003e70:	40aa      	lsls	r2, r5
 8003e72:	ea23 0202 	bic.w	r2, r3, r2
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003e76:	68f3      	ldr	r3, [r6, #12]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e78:	40ab      	lsls	r3, r5
 8003e7a:	4313      	orrs	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e7c:	600b      	str	r3, [r1, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003e7e:	6821      	ldr	r1, [r4, #0]
 8003e80:	680b      	ldr	r3, [r1, #0]
 8003e82:	22c0      	movs	r2, #192	; 0xc0
 8003e84:	40aa      	lsls	r2, r5
 8003e86:	ea23 0302 	bic.w	r3, r3, r2
 8003e8a:	600b      	str	r3, [r1, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003e8c:	68f2      	ldr	r2, [r6, #12]
 8003e8e:	f3c2 0383 	ubfx	r3, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003e92:	6932      	ldr	r2, [r6, #16]
 8003e94:	0892      	lsrs	r2, r2, #2
 8003e96:	0212      	lsls	r2, r2, #8
 8003e98:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8003e9c:	431a      	orrs	r2, r3
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003e9e:	6820      	ldr	r0, [r4, #0]
 8003ea0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003ea2:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003ea6:	40a9      	lsls	r1, r5
 8003ea8:	ea23 0301 	bic.w	r3, r3, r1
 8003eac:	fa02 f505 	lsl.w	r5, r2, r5
 8003eb0:	431d      	orrs	r5, r3
 8003eb2:	6605      	str	r5, [r0, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003eb8:	2000      	movs	r0, #0
 8003eba:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8003ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8003ec0:	f04f 0801 	mov.w	r8, #1
 8003ec4:	e79f      	b.n	8003e06 <HAL_DAC_ConfigChannel+0x102>
      connectOnChip = 0x00000000UL;
 8003ec6:	f04f 0800 	mov.w	r8, #0
 8003eca:	e79c      	b.n	8003e06 <HAL_DAC_ConfigChannel+0x102>
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003ecc:	f44f 7880 	mov.w	r8, #256	; 0x100
 8003ed0:	e7a8      	b.n	8003e24 <HAL_DAC_ConfigChannel+0x120>
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003ed2:	f44f 7800 	mov.w	r8, #512	; 0x200
 8003ed6:	e7b1      	b.n	8003e3c <HAL_DAC_ConfigChannel+0x138>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003ed8:	f002 fd3a 	bl	8006950 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003edc:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <HAL_DAC_ConfigChannel+0x1f4>)
 8003ede:	4298      	cmp	r0, r3
 8003ee0:	d902      	bls.n	8003ee8 <HAL_DAC_ConfigChannel+0x1e4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003ee2:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8003ee6:	e7b1      	b.n	8003e4c <HAL_DAC_ConfigChannel+0x148>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003ee8:	4b04      	ldr	r3, [pc, #16]	; (8003efc <HAL_DAC_ConfigChannel+0x1f8>)
 8003eea:	4298      	cmp	r0, r3
 8003eec:	d9ae      	bls.n	8003e4c <HAL_DAC_ConfigChannel+0x148>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003eee:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8003ef2:	e7ab      	b.n	8003e4c <HAL_DAC_ConfigChannel+0x148>
  __HAL_LOCK(hdac);
 8003ef4:	2002      	movs	r0, #2
}
 8003ef6:	4770      	bx	lr
 8003ef8:	09896800 	.word	0x09896800
 8003efc:	04c4b400 	.word	0x04c4b400

08003f00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f00:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f02:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8003f04:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8003f06:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003f08:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003f0a:	b114      	cbz	r4, 8003f12 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f0c:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8003f0e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8003f10:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f12:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003f14:	f004 0c1f 	and.w	ip, r4, #31
 8003f18:	2401      	movs	r4, #1
 8003f1a:	fa04 f40c 	lsl.w	r4, r4, ip
 8003f1e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003f20:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f22:	6804      	ldr	r4, [r0, #0]
 8003f24:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f26:	6883      	ldr	r3, [r0, #8]
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d005      	beq.n	8003f38 <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003f2c:	6803      	ldr	r3, [r0, #0]
 8003f2e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003f30:	6803      	ldr	r3, [r0, #0]
 8003f32:	60da      	str	r2, [r3, #12]
  }
}
 8003f34:	bc30      	pop	{r4, r5}
 8003f36:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003f38:	6803      	ldr	r3, [r0, #0]
 8003f3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003f3c:	6803      	ldr	r3, [r0, #0]
 8003f3e:	60d9      	str	r1, [r3, #12]
 8003f40:	e7f8      	b.n	8003f34 <DMA_SetConfig+0x34>
	...

08003f44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f44:	6803      	ldr	r3, [r0, #0]
 8003f46:	4a0c      	ldr	r2, [pc, #48]	; (8003f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d813      	bhi.n	8003f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003f4c:	490b      	ldr	r1, [pc, #44]	; (8003f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	3b08      	subs	r3, #8
 8003f52:	4a0b      	ldr	r2, [pc, #44]	; (8003f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003f58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003f5a:	f022 0203 	bic.w	r2, r2, #3
 8003f5e:	440a      	add	r2, r1
 8003f60:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f62:	4a08      	ldr	r2, [pc, #32]	; (8003f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8003f64:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f66:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	6503      	str	r3, [r0, #80]	; 0x50
}
 8003f72:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003f74:	4904      	ldr	r1, [pc, #16]	; (8003f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8003f76:	e7ea      	b.n	8003f4e <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 8003f78:	40020407 	.word	0x40020407
 8003f7c:	40020800 	.word	0x40020800
 8003f80:	cccccccd 	.word	0xcccccccd
 8003f84:	40020880 	.word	0x40020880
 8003f88:	40020820 	.word	0x40020820

08003f8c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f8c:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f8e:	4a07      	ldr	r2, [pc, #28]	; (8003fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8003f90:	441a      	add	r2, r3
 8003f92:	0092      	lsls	r2, r2, #2
 8003f94:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f96:	4a06      	ldr	r2, [pc, #24]	; (8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8003f98:	6582      	str	r2, [r0, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	1000823f 	.word	0x1000823f
 8003fb0:	40020940 	.word	0x40020940

08003fb4 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003fb4:	2800      	cmp	r0, #0
 8003fb6:	d05b      	beq.n	8004070 <HAL_DMA_Init+0xbc>
{
 8003fb8:	b510      	push	{r4, lr}
 8003fba:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fbc:	6801      	ldr	r1, [r0, #0]
 8003fbe:	4b2d      	ldr	r3, [pc, #180]	; (8004074 <HAL_DMA_Init+0xc0>)
 8003fc0:	4299      	cmp	r1, r3
 8003fc2:	d83d      	bhi.n	8004040 <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003fc4:	4b2c      	ldr	r3, [pc, #176]	; (8004078 <HAL_DMA_Init+0xc4>)
 8003fc6:	440b      	add	r3, r1
 8003fc8:	4a2c      	ldr	r2, [pc, #176]	; (800407c <HAL_DMA_Init+0xc8>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	091b      	lsrs	r3, r3, #4
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003fd4:	4b2a      	ldr	r3, [pc, #168]	; (8004080 <HAL_DMA_Init+0xcc>)
 8003fd6:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fd8:	2302      	movs	r3, #2
 8003fda:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8003fde:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003fe0:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8003fe4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8003fe8:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fea:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8003fec:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fee:	6920      	ldr	r0, [r4, #16]
 8003ff0:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ff2:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff4:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ff6:	69a0      	ldr	r0, [r4, #24]
 8003ff8:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ffa:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ffc:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ffe:	6a20      	ldr	r0, [r4, #32]
 8004000:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8004002:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8004004:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004006:	4620      	mov	r0, r4
 8004008:	f7ff ff9c 	bl	8003f44 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800400c:	68a3      	ldr	r3, [r4, #8]
 800400e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004012:	d020      	beq.n	8004056 <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004014:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004016:	7922      	ldrb	r2, [r4, #4]
 8004018:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800401a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800401c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800401e:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004020:	6863      	ldr	r3, [r4, #4]
 8004022:	3b01      	subs	r3, #1
 8004024:	2b03      	cmp	r3, #3
 8004026:	d919      	bls.n	800405c <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800402c:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800402e:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004030:	2000      	movs	r0, #0
 8004032:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8004034:	2301      	movs	r3, #1
 8004036:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 800403a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800403e:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004040:	4b10      	ldr	r3, [pc, #64]	; (8004084 <HAL_DMA_Init+0xd0>)
 8004042:	440b      	add	r3, r1
 8004044:	4a0d      	ldr	r2, [pc, #52]	; (800407c <HAL_DMA_Init+0xc8>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	091b      	lsrs	r3, r3, #4
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004050:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <HAL_DMA_Init+0xd4>)
 8004052:	6403      	str	r3, [r0, #64]	; 0x40
 8004054:	e7c0      	b.n	8003fd8 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004056:	2300      	movs	r3, #0
 8004058:	6063      	str	r3, [r4, #4]
 800405a:	e7db      	b.n	8004014 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800405c:	4620      	mov	r0, r4
 800405e:	f7ff ff95 	bl	8003f8c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004062:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004068:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800406a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	e7df      	b.n	8004030 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8004070:	2001      	movs	r0, #1
}
 8004072:	4770      	bx	lr
 8004074:	40020407 	.word	0x40020407
 8004078:	bffdfff8 	.word	0xbffdfff8
 800407c:	cccccccd 	.word	0xcccccccd
 8004080:	40020000 	.word	0x40020000
 8004084:	bffdfbf8 	.word	0xbffdfbf8
 8004088:	40020400 	.word	0x40020400

0800408c <HAL_DMA_DeInit>:
  if (NULL == hdma)
 800408c:	2800      	cmp	r0, #0
 800408e:	d04b      	beq.n	8004128 <HAL_DMA_DeInit+0x9c>
{
 8004090:	b538      	push	{r3, r4, r5, lr}
 8004092:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8004094:	6802      	ldr	r2, [r0, #0]
 8004096:	6813      	ldr	r3, [r2, #0]
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800409e:	6802      	ldr	r2, [r0, #0]
 80040a0:	4b22      	ldr	r3, [pc, #136]	; (800412c <HAL_DMA_DeInit+0xa0>)
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d82c      	bhi.n	8004100 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80040a6:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_DMA_DeInit+0xa4>)
 80040a8:	4413      	add	r3, r2
 80040aa:	4922      	ldr	r1, [pc, #136]	; (8004134 <HAL_DMA_DeInit+0xa8>)
 80040ac:	fba1 1303 	umull	r1, r3, r1, r3
 80040b0:	091b      	lsrs	r3, r3, #4
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80040b6:	4b20      	ldr	r3, [pc, #128]	; (8004138 <HAL_DMA_DeInit+0xac>)
 80040b8:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR  = 0;
 80040ba:	2500      	movs	r5, #0
 80040bc:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80040be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80040c0:	f003 021f 	and.w	r2, r3, #31
 80040c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80040c6:	2301      	movs	r3, #1
 80040c8:	4093      	lsls	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040cc:	4620      	mov	r0, r4
 80040ce:	f7ff ff39 	bl	8003f44 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0;
 80040d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80040d4:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80040d8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80040da:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040dc:	6863      	ldr	r3, [r4, #4]
 80040de:	3b01      	subs	r3, #1
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d918      	bls.n	8004116 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 80040e4:	2000      	movs	r0, #0
 80040e6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80040e8:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80040ea:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 80040ec:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80040ee:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80040f0:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80040f2:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040f4:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80040f6:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80040fa:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80040fe:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004100:	4b0e      	ldr	r3, [pc, #56]	; (800413c <HAL_DMA_DeInit+0xb0>)
 8004102:	4413      	add	r3, r2
 8004104:	490b      	ldr	r1, [pc, #44]	; (8004134 <HAL_DMA_DeInit+0xa8>)
 8004106:	fba1 1303 	umull	r1, r3, r1, r3
 800410a:	091b      	lsrs	r3, r3, #4
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <HAL_DMA_DeInit+0xb4>)
 8004112:	6403      	str	r3, [r0, #64]	; 0x40
 8004114:	e7d1      	b.n	80040ba <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004116:	4620      	mov	r0, r4
 8004118:	f7ff ff38 	bl	8003f8c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800411c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800411e:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004120:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004122:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	e7dd      	b.n	80040e4 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8004128:	2001      	movs	r0, #1
}
 800412a:	4770      	bx	lr
 800412c:	40020407 	.word	0x40020407
 8004130:	bffdfff8 	.word	0xbffdfff8
 8004134:	cccccccd 	.word	0xcccccccd
 8004138:	40020000 	.word	0x40020000
 800413c:	bffdfbf8 	.word	0xbffdfbf8
 8004140:	40020400 	.word	0x40020400

08004144 <HAL_DMA_Start_IT>:
{
 8004144:	b538      	push	{r3, r4, r5, lr}
 8004146:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004148:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 800414c:	2801      	cmp	r0, #1
 800414e:	d041      	beq.n	80041d4 <HAL_DMA_Start_IT+0x90>
 8004150:	2001      	movs	r0, #1
 8004152:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8004156:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800415a:	b2c0      	uxtb	r0, r0
 800415c:	2801      	cmp	r0, #1
 800415e:	d004      	beq.n	800416a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8004160:	2300      	movs	r3, #0
 8004162:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8004166:	2002      	movs	r0, #2
}
 8004168:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800416a:	2002      	movs	r0, #2
 800416c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004170:	2000      	movs	r0, #0
 8004172:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004174:	6825      	ldr	r5, [r4, #0]
 8004176:	6828      	ldr	r0, [r5, #0]
 8004178:	f020 0001 	bic.w	r0, r0, #1
 800417c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800417e:	4620      	mov	r0, r4
 8004180:	f7ff febe 	bl	8003f00 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004184:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004186:	b1d3      	cbz	r3, 80041be <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004188:	6822      	ldr	r2, [r4, #0]
 800418a:	6813      	ldr	r3, [r2, #0]
 800418c:	f043 030e 	orr.w	r3, r3, #14
 8004190:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004192:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800419a:	d003      	beq.n	80041a4 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a2:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80041a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80041a6:	b11b      	cbz	r3, 80041b0 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ae:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80041b0:	6822      	ldr	r2, [r4, #0]
 80041b2:	6813      	ldr	r3, [r2, #0]
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ba:	2000      	movs	r0, #0
 80041bc:	e7d4      	b.n	8004168 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041be:	6822      	ldr	r2, [r4, #0]
 80041c0:	6813      	ldr	r3, [r2, #0]
 80041c2:	f023 0304 	bic.w	r3, r3, #4
 80041c6:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041c8:	6822      	ldr	r2, [r4, #0]
 80041ca:	6813      	ldr	r3, [r2, #0]
 80041cc:	f043 030a 	orr.w	r3, r3, #10
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	e7de      	b.n	8004192 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80041d4:	2002      	movs	r0, #2
 80041d6:	e7c7      	b.n	8004168 <HAL_DMA_Start_IT+0x24>

080041d8 <HAL_DMA_Abort_IT>:
{
 80041d8:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80041da:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d009      	beq.n	80041f8 <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041e4:	2304      	movs	r3, #4
 80041e6:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80041e8:	2301      	movs	r3, #1
 80041ea:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80041ee:	2200      	movs	r2, #0
 80041f0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    status = HAL_ERROR;
 80041f4:	4618      	mov	r0, r3
}
 80041f6:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041f8:	6802      	ldr	r2, [r0, #0]
 80041fa:	6813      	ldr	r3, [r2, #0]
 80041fc:	f023 030e 	bic.w	r3, r3, #14
 8004200:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004202:	6802      	ldr	r2, [r0, #0]
 8004204:	6813      	ldr	r3, [r2, #0]
 8004206:	f023 0301 	bic.w	r3, r3, #1
 800420a:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800420c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800420e:	6813      	ldr	r3, [r2, #0]
 8004210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004214:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004216:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004218:	f003 021f 	and.w	r2, r3, #31
 800421c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800421e:	2301      	movs	r3, #1
 8004220:	4093      	lsls	r3, r2
 8004222:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004224:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004226:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004228:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800422a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800422c:	b133      	cbz	r3, 800423c <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004234:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004236:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004238:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800423a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800423c:	2301      	movs	r3, #1
 800423e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004242:	2300      	movs	r3, #0
 8004244:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8004248:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800424a:	b113      	cbz	r3, 8004252 <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 800424c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800424e:	2000      	movs	r0, #0
 8004250:	e7d1      	b.n	80041f6 <HAL_DMA_Abort_IT+0x1e>
 8004252:	2000      	movs	r0, #0
 8004254:	e7cf      	b.n	80041f6 <HAL_DMA_Abort_IT+0x1e>

08004256 <HAL_DMA_IRQHandler>:
{
 8004256:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004258:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800425a:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800425c:	6804      	ldr	r4, [r0, #0]
 800425e:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004260:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	2204      	movs	r2, #4
 8004268:	409a      	lsls	r2, r3
 800426a:	420a      	tst	r2, r1
 800426c:	d015      	beq.n	800429a <HAL_DMA_IRQHandler+0x44>
 800426e:	f015 0f04 	tst.w	r5, #4
 8004272:	d012      	beq.n	800429a <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	f013 0f20 	tst.w	r3, #32
 800427a:	d103      	bne.n	8004284 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	f023 0304 	bic.w	r3, r3, #4
 8004282:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004284:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004286:	f003 021f 	and.w	r2, r3, #31
 800428a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800428c:	2304      	movs	r3, #4
 800428e:	4093      	lsls	r3, r2
 8004290:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8004292:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004294:	b103      	cbz	r3, 8004298 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8004296:	4798      	blx	r3
}
 8004298:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800429a:	2202      	movs	r2, #2
 800429c:	409a      	lsls	r2, r3
 800429e:	420a      	tst	r2, r1
 80042a0:	d01c      	beq.n	80042dc <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 80042a2:	f015 0f02 	tst.w	r5, #2
 80042a6:	d019      	beq.n	80042dc <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	f013 0f20 	tst.w	r3, #32
 80042ae:	d106      	bne.n	80042be <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	f023 030a 	bic.w	r3, r3, #10
 80042b6:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80042be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80042c0:	f003 021f 	and.w	r2, r3, #31
 80042c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80042c6:	2302      	movs	r3, #2
 80042c8:	4093      	lsls	r3, r2
 80042ca:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 80042cc:	2300      	movs	r3, #0
 80042ce:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 80042d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0df      	beq.n	8004298 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 80042d8:	4798      	blx	r3
 80042da:	e7dd      	b.n	8004298 <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80042dc:	2208      	movs	r2, #8
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	420b      	tst	r3, r1
 80042e4:	d0d8      	beq.n	8004298 <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 80042e6:	f015 0f08 	tst.w	r5, #8
 80042ea:	d0d5      	beq.n	8004298 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	f023 030e 	bic.w	r3, r3, #14
 80042f2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042f4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80042fc:	2201      	movs	r2, #1
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004304:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004306:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800430a:	2300      	movs	r3, #0
 800430c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004310:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0c0      	beq.n	8004298 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004316:	4798      	blx	r3
  return;
 8004318:	e7be      	b.n	8004298 <HAL_DMA_IRQHandler+0x42>

0800431a <HAL_DMA_GetState>:
  return hdma->State;
 800431a:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 800431e:	4770      	bx	lr

08004320 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004320:	b410      	push	{r4}
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004322:	6802      	ldr	r2, [r0, #0]
 8004324:	4b1d      	ldr	r3, [pc, #116]	; (800439c <FDCAN_CalcultateRamBlockAddresses+0x7c>)
 8004326:	429a      	cmp	r2, r3
 8004328:	d028      	beq.n	800437c <FDCAN_CalcultateRamBlockAddresses+0x5c>
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800432a:	491d      	ldr	r1, [pc, #116]	; (80043a0 <FDCAN_CalcultateRamBlockAddresses+0x80>)
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800432c:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <FDCAN_CalcultateRamBlockAddresses+0x84>)
 800432e:	429a      	cmp	r2, r3
 8004330:	d026      	beq.n	8004380 <FDCAN_CalcultateRamBlockAddresses+0x60>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004332:	6401      	str	r1, [r0, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004334:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004338:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800433c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800433e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004342:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004346:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800434a:	6443      	str	r3, [r0, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800434c:	6802      	ldr	r2, [r0, #0]
 800434e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004352:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004356:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004358:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 800435c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004360:	f101 03b0 	add.w	r3, r1, #176	; 0xb0
 8004364:	6483      	str	r3, [r0, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004366:	f501 73c4 	add.w	r3, r1, #392	; 0x188
 800436a:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800436c:	f501 7318 	add.w	r3, r1, #608	; 0x260
 8004370:	6503      	str	r3, [r0, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004372:	f501 731e 	add.w	r3, r1, #632	; 0x278
 8004376:	6543      	str	r3, [r0, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004378:	460b      	mov	r3, r1
 800437a:	e007      	b.n	800438c <FDCAN_CalcultateRamBlockAddresses+0x6c>
    SramCanInstanceBase += SRAMCAN_SIZE;
 800437c:	490a      	ldr	r1, [pc, #40]	; (80043a8 <FDCAN_CalcultateRamBlockAddresses+0x88>)
 800437e:	e7d5      	b.n	800432c <FDCAN_CalcultateRamBlockAddresses+0xc>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004380:	f501 61d4 	add.w	r1, r1, #1696	; 0x6a0
 8004384:	e7d5      	b.n	8004332 <FDCAN_CalcultateRamBlockAddresses+0x12>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004386:	2200      	movs	r2, #0
 8004388:	f843 2b04 	str.w	r2, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800438c:	f501 7254 	add.w	r2, r1, #848	; 0x350
 8004390:	429a      	cmp	r2, r3
 8004392:	d8f8      	bhi.n	8004386 <FDCAN_CalcultateRamBlockAddresses+0x66>
  }
}
 8004394:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40006800 	.word	0x40006800
 80043a0:	4000a400 	.word	0x4000a400
 80043a4:	40006c00 	.word	0x40006c00
 80043a8:	4000a750 	.word	0x4000a750

080043ac <HAL_FDCAN_Init>:
  if (hfdcan == NULL)
 80043ac:	2800      	cmp	r0, #0
 80043ae:	f000 80e3 	beq.w	8004578 <HAL_FDCAN_Init+0x1cc>
{
 80043b2:	b538      	push	{r3, r4, r5, lr}
 80043b4:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80043b6:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80043ba:	b1d3      	cbz	r3, 80043f2 <HAL_FDCAN_Init+0x46>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80043bc:	6822      	ldr	r2, [r4, #0]
 80043be:	6993      	ldr	r3, [r2, #24]
 80043c0:	f023 0310 	bic.w	r3, r3, #16
 80043c4:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 80043c6:	f7fe feb3 	bl	8003130 <HAL_GetTick>
 80043ca:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	699a      	ldr	r2, [r3, #24]
 80043d0:	f012 0f08 	tst.w	r2, #8
 80043d4:	d012      	beq.n	80043fc <HAL_FDCAN_Init+0x50>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80043d6:	f7fe feab 	bl	8003130 <HAL_GetTick>
 80043da:	1b40      	subs	r0, r0, r5
 80043dc:	280a      	cmp	r0, #10
 80043de:	d9f5      	bls.n	80043cc <HAL_FDCAN_Init+0x20>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80043e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80043e8:	2303      	movs	r3, #3
 80043ea:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80043ee:	2001      	movs	r0, #1
}
 80043f0:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 80043f2:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 80043f6:	f7fd fa1f 	bl	8001838 <HAL_FDCAN_MspInit>
 80043fa:	e7df      	b.n	80043bc <HAL_FDCAN_Init+0x10>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80043fc:	699a      	ldr	r2, [r3, #24]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8004404:	f7fe fe94 	bl	8003130 <HAL_GetTick>
 8004408:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	699a      	ldr	r2, [r3, #24]
 800440e:	f012 0f01 	tst.w	r2, #1
 8004412:	d10d      	bne.n	8004430 <HAL_FDCAN_Init+0x84>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004414:	f7fe fe8c 	bl	8003130 <HAL_GetTick>
 8004418:	1b40      	subs	r0, r0, r5
 800441a:	280a      	cmp	r0, #10
 800441c:	d9f5      	bls.n	800440a <HAL_FDCAN_Init+0x5e>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800441e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004426:	2303      	movs	r3, #3
 8004428:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 800442c:	2001      	movs	r0, #1
 800442e:	e7df      	b.n	80043f0 <HAL_FDCAN_Init+0x44>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	f042 0202 	orr.w	r2, r2, #2
 8004436:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8004438:	6822      	ldr	r2, [r4, #0]
 800443a:	4b50      	ldr	r3, [pc, #320]	; (800457c <HAL_FDCAN_Init+0x1d0>)
 800443c:	429a      	cmp	r2, r3
 800443e:	d042      	beq.n	80044c6 <HAL_FDCAN_Init+0x11a>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004440:	7c23      	ldrb	r3, [r4, #16]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d045      	beq.n	80044d2 <HAL_FDCAN_Init+0x126>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004446:	6822      	ldr	r2, [r4, #0]
 8004448:	6993      	ldr	r3, [r2, #24]
 800444a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800444e:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004450:	7c63      	ldrb	r3, [r4, #17]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d043      	beq.n	80044de <HAL_FDCAN_Init+0x132>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004456:	6822      	ldr	r2, [r4, #0]
 8004458:	6993      	ldr	r3, [r2, #24]
 800445a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800445e:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004460:	7ca3      	ldrb	r3, [r4, #18]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d041      	beq.n	80044ea <HAL_FDCAN_Init+0x13e>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004466:	6822      	ldr	r2, [r4, #0]
 8004468:	6993      	ldr	r3, [r2, #24]
 800446a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800446e:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004470:	6822      	ldr	r2, [r4, #0]
 8004472:	6993      	ldr	r3, [r2, #24]
 8004474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004478:	68a1      	ldr	r1, [r4, #8]
 800447a:	430b      	orrs	r3, r1
 800447c:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800447e:	6822      	ldr	r2, [r4, #0]
 8004480:	6993      	ldr	r3, [r2, #24]
 8004482:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8004486:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004488:	6822      	ldr	r2, [r4, #0]
 800448a:	6913      	ldr	r3, [r2, #16]
 800448c:	f023 0310 	bic.w	r3, r3, #16
 8004490:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004492:	68e3      	ldr	r3, [r4, #12]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d02e      	beq.n	80044f6 <HAL_FDCAN_Init+0x14a>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004498:	2b00      	cmp	r3, #0
 800449a:	d031      	beq.n	8004500 <HAL_FDCAN_Init+0x154>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800449c:	2b02      	cmp	r3, #2
 800449e:	d054      	beq.n	800454a <HAL_FDCAN_Init+0x19e>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80044a0:	6822      	ldr	r2, [r4, #0]
 80044a2:	6993      	ldr	r3, [r2, #24]
 80044a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a8:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80044aa:	6822      	ldr	r2, [r4, #0]
 80044ac:	6913      	ldr	r3, [r2, #16]
 80044ae:	f043 0310 	orr.w	r3, r3, #16
 80044b2:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80044b4:	68e3      	ldr	r3, [r4, #12]
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d122      	bne.n	8004500 <HAL_FDCAN_Init+0x154>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80044ba:	6822      	ldr	r2, [r4, #0]
 80044bc:	6993      	ldr	r3, [r2, #24]
 80044be:	f043 0320 	orr.w	r3, r3, #32
 80044c2:	6193      	str	r3, [r2, #24]
 80044c4:	e01c      	b.n	8004500 <HAL_FDCAN_Init+0x154>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80044c6:	6862      	ldr	r2, [r4, #4]
 80044c8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80044cc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 80044d0:	e7b6      	b.n	8004440 <HAL_FDCAN_Init+0x94>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80044d2:	6822      	ldr	r2, [r4, #0]
 80044d4:	6993      	ldr	r3, [r2, #24]
 80044d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044da:	6193      	str	r3, [r2, #24]
 80044dc:	e7b8      	b.n	8004450 <HAL_FDCAN_Init+0xa4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80044de:	6822      	ldr	r2, [r4, #0]
 80044e0:	6993      	ldr	r3, [r2, #24]
 80044e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044e6:	6193      	str	r3, [r2, #24]
 80044e8:	e7ba      	b.n	8004460 <HAL_FDCAN_Init+0xb4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80044ea:	6822      	ldr	r2, [r4, #0]
 80044ec:	6993      	ldr	r3, [r2, #24]
 80044ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044f2:	6193      	str	r3, [r2, #24]
 80044f4:	e7bc      	b.n	8004470 <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80044f6:	6822      	ldr	r2, [r4, #0]
 80044f8:	6993      	ldr	r3, [r2, #24]
 80044fa:	f043 0304 	orr.w	r3, r3, #4
 80044fe:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004500:	69a3      	ldr	r3, [r4, #24]
 8004502:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004504:	69e3      	ldr	r3, [r4, #28]
 8004506:	3b01      	subs	r3, #1
 8004508:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800450a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800450e:	6a22      	ldr	r2, [r4, #32]
 8004510:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004512:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004514:	6962      	ldr	r2, [r4, #20]
 8004516:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004518:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800451a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800451e:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004520:	68a3      	ldr	r3, [r4, #8]
 8004522:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004526:	d016      	beq.n	8004556 <HAL_FDCAN_Init+0x1aa>
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004528:	6822      	ldr	r2, [r4, #0]
 800452a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800452e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004530:	430b      	orrs	r3, r1
 8004532:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004536:	4620      	mov	r0, r4
 8004538:	f7ff fef2 	bl	8004320 <FDCAN_CalcultateRamBlockAddresses>
  hfdcan->LatestTxFifoQRequest = 0U;
 800453c:	2000      	movs	r0, #0
 800453e:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004540:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004542:	2301      	movs	r3, #1
 8004544:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return HAL_OK;
 8004548:	e752      	b.n	80043f0 <HAL_FDCAN_Init+0x44>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800454a:	6822      	ldr	r2, [r4, #0]
 800454c:	6993      	ldr	r3, [r2, #24]
 800454e:	f043 0320 	orr.w	r3, r3, #32
 8004552:	6193      	str	r3, [r2, #24]
 8004554:	e7d4      	b.n	8004500 <HAL_FDCAN_Init+0x154>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004556:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004558:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800455a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800455c:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800455e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004562:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004564:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004566:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800456a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800456c:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800456e:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004570:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004574:	60cb      	str	r3, [r1, #12]
 8004576:	e7d7      	b.n	8004528 <HAL_FDCAN_Init+0x17c>
    return HAL_ERROR;
 8004578:	2001      	movs	r0, #1
}
 800457a:	4770      	bx	lr
 800457c:	40006400 	.word	0x40006400

08004580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004582:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8004584:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004586:	e062      	b.n	800464e <HAL_GPIO_Init+0xce>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004588:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800458a:	005e      	lsls	r6, r3, #1
 800458c:	2403      	movs	r4, #3
 800458e:	40b4      	lsls	r4, r6
 8004590:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004594:	68cc      	ldr	r4, [r1, #12]
 8004596:	40b4      	lsls	r4, r6
 8004598:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800459a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800459c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800459e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045a2:	684c      	ldr	r4, [r1, #4]
 80045a4:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80045a8:	409c      	lsls	r4, r3
 80045aa:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 80045ae:	6044      	str	r4, [r0, #4]
 80045b0:	e05e      	b.n	8004670 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045b2:	08dd      	lsrs	r5, r3, #3
 80045b4:	3508      	adds	r5, #8
 80045b6:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045ba:	f003 0407 	and.w	r4, r3, #7
 80045be:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80045c2:	240f      	movs	r4, #15
 80045c4:	fa04 f40c 	lsl.w	r4, r4, ip
 80045c8:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045cc:	690c      	ldr	r4, [r1, #16]
 80045ce:	fa04 f40c 	lsl.w	r4, r4, ip
 80045d2:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80045d6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80045da:	e060      	b.n	800469e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045dc:	2405      	movs	r4, #5
 80045de:	e000      	b.n	80045e2 <HAL_GPIO_Init+0x62>
 80045e0:	2400      	movs	r4, #0
 80045e2:	fa04 f40e 	lsl.w	r4, r4, lr
 80045e6:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045e8:	f10c 0c02 	add.w	ip, ip, #2
 80045ec:	4d55      	ldr	r5, [pc, #340]	; (8004744 <HAL_GPIO_Init+0x1c4>)
 80045ee:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045f2:	4c55      	ldr	r4, [pc, #340]	; (8004748 <HAL_GPIO_Init+0x1c8>)
 80045f4:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 80045f6:	43d4      	mvns	r4, r2
 80045f8:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045fc:	684f      	ldr	r7, [r1, #4]
 80045fe:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8004602:	d001      	beq.n	8004608 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8004604:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004608:	4d4f      	ldr	r5, [pc, #316]	; (8004748 <HAL_GPIO_Init+0x1c8>)
 800460a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 800460c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 800460e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004612:	684f      	ldr	r7, [r1, #4]
 8004614:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8004618:	d001      	beq.n	800461e <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 800461a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800461e:	4d4a      	ldr	r5, [pc, #296]	; (8004748 <HAL_GPIO_Init+0x1c8>)
 8004620:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 8004622:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8004624:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004628:	684f      	ldr	r7, [r1, #4]
 800462a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800462e:	d001      	beq.n	8004634 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8004630:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8004634:	4d44      	ldr	r5, [pc, #272]	; (8004748 <HAL_GPIO_Init+0x1c8>)
 8004636:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004638:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800463a:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800463c:	684e      	ldr	r6, [r1, #4]
 800463e:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8004642:	d001      	beq.n	8004648 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8004644:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8004648:	4a3f      	ldr	r2, [pc, #252]	; (8004748 <HAL_GPIO_Init+0x1c8>)
 800464a:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 800464c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800464e:	680a      	ldr	r2, [r1, #0]
 8004650:	fa32 f403 	lsrs.w	r4, r2, r3
 8004654:	d074      	beq.n	8004740 <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004656:	f04f 0c01 	mov.w	ip, #1
 800465a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800465e:	ea1c 0202 	ands.w	r2, ip, r2
 8004662:	d0f3      	beq.n	800464c <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004664:	684c      	ldr	r4, [r1, #4]
 8004666:	f004 0403 	and.w	r4, r4, #3
 800466a:	3c01      	subs	r4, #1
 800466c:	2c01      	cmp	r4, #1
 800466e:	d98b      	bls.n	8004588 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004670:	684c      	ldr	r4, [r1, #4]
 8004672:	f004 0403 	and.w	r4, r4, #3
 8004676:	2c03      	cmp	r4, #3
 8004678:	d00c      	beq.n	8004694 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800467a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800467c:	005d      	lsls	r5, r3, #1
 800467e:	f04f 0c03 	mov.w	ip, #3
 8004682:	fa0c fc05 	lsl.w	ip, ip, r5
 8004686:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800468a:	688c      	ldr	r4, [r1, #8]
 800468c:	40ac      	lsls	r4, r5
 800468e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8004692:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004694:	684c      	ldr	r4, [r1, #4]
 8004696:	f004 0403 	and.w	r4, r4, #3
 800469a:	2c02      	cmp	r4, #2
 800469c:	d089      	beq.n	80045b2 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 800469e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046a0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80046a4:	f04f 0c03 	mov.w	ip, #3
 80046a8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80046ac:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046b0:	684c      	ldr	r4, [r1, #4]
 80046b2:	f004 0403 	and.w	r4, r4, #3
 80046b6:	fa04 f40e 	lsl.w	r4, r4, lr
 80046ba:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80046be:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046c0:	684c      	ldr	r4, [r1, #4]
 80046c2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80046c6:	d0c1      	beq.n	800464c <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046c8:	4c20      	ldr	r4, [pc, #128]	; (800474c <HAL_GPIO_Init+0x1cc>)
 80046ca:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80046cc:	f045 0501 	orr.w	r5, r5, #1
 80046d0:	6625      	str	r5, [r4, #96]	; 0x60
 80046d2:	6e24      	ldr	r4, [r4, #96]	; 0x60
 80046d4:	f004 0401 	and.w	r4, r4, #1
 80046d8:	9401      	str	r4, [sp, #4]
 80046da:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80046dc:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80046e0:	f10c 0502 	add.w	r5, ip, #2
 80046e4:	4c17      	ldr	r4, [pc, #92]	; (8004744 <HAL_GPIO_Init+0x1c4>)
 80046e6:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046ea:	f003 0403 	and.w	r4, r3, #3
 80046ee:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80046f2:	240f      	movs	r4, #15
 80046f4:	fa04 f40e 	lsl.w	r4, r4, lr
 80046f8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046fc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004700:	f43f af6e 	beq.w	80045e0 <HAL_GPIO_Init+0x60>
 8004704:	4c12      	ldr	r4, [pc, #72]	; (8004750 <HAL_GPIO_Init+0x1d0>)
 8004706:	42a0      	cmp	r0, r4
 8004708:	d012      	beq.n	8004730 <HAL_GPIO_Init+0x1b0>
 800470a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800470e:	42a0      	cmp	r0, r4
 8004710:	d010      	beq.n	8004734 <HAL_GPIO_Init+0x1b4>
 8004712:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004716:	42a0      	cmp	r0, r4
 8004718:	d00e      	beq.n	8004738 <HAL_GPIO_Init+0x1b8>
 800471a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800471e:	42a0      	cmp	r0, r4
 8004720:	d00c      	beq.n	800473c <HAL_GPIO_Init+0x1bc>
 8004722:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004726:	42a0      	cmp	r0, r4
 8004728:	f43f af58 	beq.w	80045dc <HAL_GPIO_Init+0x5c>
 800472c:	2406      	movs	r4, #6
 800472e:	e758      	b.n	80045e2 <HAL_GPIO_Init+0x62>
 8004730:	2401      	movs	r4, #1
 8004732:	e756      	b.n	80045e2 <HAL_GPIO_Init+0x62>
 8004734:	2402      	movs	r4, #2
 8004736:	e754      	b.n	80045e2 <HAL_GPIO_Init+0x62>
 8004738:	2403      	movs	r4, #3
 800473a:	e752      	b.n	80045e2 <HAL_GPIO_Init+0x62>
 800473c:	2404      	movs	r4, #4
 800473e:	e750      	b.n	80045e2 <HAL_GPIO_Init+0x62>
  }
}
 8004740:	b003      	add	sp, #12
 8004742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004744:	40010000 	.word	0x40010000
 8004748:	40010400 	.word	0x40010400
 800474c:	40021000 	.word	0x40021000
 8004750:	48000400 	.word	0x48000400

08004754 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004754:	b10a      	cbz	r2, 800475a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004756:	6181      	str	r1, [r0, #24]
 8004758:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800475a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800475c:	4770      	bx	lr

0800475e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800475e:	6803      	ldr	r3, [r0, #0]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	f012 0f02 	tst.w	r2, #2
 8004766:	d001      	beq.n	800476c <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004768:	2200      	movs	r2, #0
 800476a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800476c:	6803      	ldr	r3, [r0, #0]
 800476e:	699a      	ldr	r2, [r3, #24]
 8004770:	f012 0f01 	tst.w	r2, #1
 8004774:	d103      	bne.n	800477e <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004776:	699a      	ldr	r2, [r3, #24]
 8004778:	f042 0201 	orr.w	r2, r2, #1
 800477c:	619a      	str	r2, [r3, #24]
  }
}
 800477e:	4770      	bx	lr

08004780 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004780:	f011 0f01 	tst.w	r1, #1
 8004784:	d009      	beq.n	800479a <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004786:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800478a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800478e:	2b28      	cmp	r3, #40	; 0x28
 8004790:	d001      	beq.n	8004796 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004792:	23f2      	movs	r3, #242	; 0xf2
 8004794:	e002      	b.n	800479c <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004796:	2342      	movs	r3, #66	; 0x42
 8004798:	e000      	b.n	800479c <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 800479a:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800479c:	f011 0f02 	tst.w	r1, #2
 80047a0:	d009      	beq.n	80047b6 <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80047a2:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80047a6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80047aa:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80047ae:	2a28      	cmp	r2, #40	; 0x28
 80047b0:	d010      	beq.n	80047d4 <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047b2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80047b6:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80047ba:	d10d      	bne.n	80047d8 <I2C_Disable_IRQ+0x58>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80047bc:	2910      	cmp	r1, #16
 80047be:	d00e      	beq.n	80047de <I2C_Disable_IRQ+0x5e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80047c0:	2920      	cmp	r1, #32
 80047c2:	d00f      	beq.n	80047e4 <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80047c4:	2940      	cmp	r1, #64	; 0x40
 80047c6:	d010      	beq.n	80047ea <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80047c8:	6801      	ldr	r1, [r0, #0]
 80047ca:	680a      	ldr	r2, [r1, #0]
 80047cc:	ea22 0303 	bic.w	r3, r2, r3
 80047d0:	600b      	str	r3, [r1, #0]
}
 80047d2:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80047d4:	4663      	mov	r3, ip
 80047d6:	e7ee      	b.n	80047b6 <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047d8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80047dc:	e7ee      	b.n	80047bc <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80047de:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80047e2:	e7ed      	b.n	80047c0 <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 80047e4:	f043 0320 	orr.w	r3, r3, #32
 80047e8:	e7ec      	b.n	80047c4 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 80047ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ee:	e7eb      	b.n	80047c8 <I2C_Disable_IRQ+0x48>

080047f0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80047f0:	2800      	cmp	r0, #0
 80047f2:	d059      	beq.n	80048a8 <HAL_I2C_Init+0xb8>
{
 80047f4:	b510      	push	{r4, lr}
 80047f6:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047f8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d043      	beq.n	8004888 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004800:	2324      	movs	r3, #36	; 0x24
 8004802:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004806:	6822      	ldr	r2, [r4, #0]
 8004808:	6813      	ldr	r3, [r2, #0]
 800480a:	f023 0301 	bic.w	r3, r3, #1
 800480e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004810:	6863      	ldr	r3, [r4, #4]
 8004812:	6822      	ldr	r2, [r4, #0]
 8004814:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004818:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800481a:	6822      	ldr	r2, [r4, #0]
 800481c:	6893      	ldr	r3, [r2, #8]
 800481e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004822:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004824:	68e3      	ldr	r3, [r4, #12]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d033      	beq.n	8004892 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800482a:	68a3      	ldr	r3, [r4, #8]
 800482c:	6822      	ldr	r2, [r4, #0]
 800482e:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8004832:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004834:	68e3      	ldr	r3, [r4, #12]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d031      	beq.n	800489e <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800483a:	6822      	ldr	r2, [r4, #0]
 800483c:	6853      	ldr	r3, [r2, #4]
 800483e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004846:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004848:	6822      	ldr	r2, [r4, #0]
 800484a:	68d3      	ldr	r3, [r2, #12]
 800484c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004850:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004852:	6923      	ldr	r3, [r4, #16]
 8004854:	6962      	ldr	r2, [r4, #20]
 8004856:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004858:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800485a:	6822      	ldr	r2, [r4, #0]
 800485c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004860:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004862:	69e3      	ldr	r3, [r4, #28]
 8004864:	6a21      	ldr	r1, [r4, #32]
 8004866:	6822      	ldr	r2, [r4, #0]
 8004868:	430b      	orrs	r3, r1
 800486a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800486c:	6822      	ldr	r2, [r4, #0]
 800486e:	6813      	ldr	r3, [r2, #0]
 8004870:	f043 0301 	orr.w	r3, r3, #1
 8004874:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004876:	2000      	movs	r0, #0
 8004878:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800487a:	2320      	movs	r3, #32
 800487c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004880:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004882:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004886:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004888:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800488c:	f7fd f9f6 	bl	8001c7c <HAL_I2C_MspInit>
 8004890:	e7b6      	b.n	8004800 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004892:	68a3      	ldr	r3, [r4, #8]
 8004894:	6822      	ldr	r2, [r4, #0]
 8004896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800489a:	6093      	str	r3, [r2, #8]
 800489c:	e7ca      	b.n	8004834 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048a4:	605a      	str	r2, [r3, #4]
 80048a6:	e7c8      	b.n	800483a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80048a8:	2001      	movs	r0, #1
}
 80048aa:	4770      	bx	lr

080048ac <HAL_I2C_EV_IRQHandler>:
{
 80048ac:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80048ae:	6803      	ldr	r3, [r0, #0]
 80048b0:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80048b2:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 80048b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80048b6:	b103      	cbz	r3, 80048ba <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 80048b8:	4798      	blx	r3
}
 80048ba:	bd08      	pop	{r3, pc}

080048bc <HAL_I2C_SlaveTxCpltCallback>:
}
 80048bc:	4770      	bx	lr

080048be <HAL_I2C_SlaveRxCpltCallback>:
}
 80048be:	4770      	bx	lr

080048c0 <I2C_ITSlaveSeqCplt>:
{
 80048c0:	b510      	push	{r4, lr}
 80048c2:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80048c4:	6803      	ldr	r3, [r0, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c8:	2100      	movs	r1, #0
 80048ca:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80048ce:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80048d2:	d00e      	beq.n	80048f2 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048da:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80048dc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b29      	cmp	r3, #41	; 0x29
 80048e4:	d00d      	beq.n	8004902 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80048e6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b2a      	cmp	r3, #42	; 0x2a
 80048ee:	d018      	beq.n	8004922 <I2C_ITSlaveSeqCplt+0x62>
}
 80048f0:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80048f2:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80048f6:	d0f1      	beq.n	80048dc <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	e7ec      	b.n	80048dc <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004902:	2328      	movs	r3, #40	; 0x28
 8004904:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004908:	2321      	movs	r3, #33	; 0x21
 800490a:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800490c:	2101      	movs	r1, #1
 800490e:	4620      	mov	r0, r4
 8004910:	f7ff ff36 	bl	8004780 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004914:	2300      	movs	r3, #0
 8004916:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800491a:	4620      	mov	r0, r4
 800491c:	f7ff ffce 	bl	80048bc <HAL_I2C_SlaveTxCpltCallback>
 8004920:	e7e6      	b.n	80048f0 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004922:	2328      	movs	r3, #40	; 0x28
 8004924:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004928:	2322      	movs	r3, #34	; 0x22
 800492a:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800492c:	2102      	movs	r1, #2
 800492e:	4620      	mov	r0, r4
 8004930:	f7ff ff26 	bl	8004780 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004934:	2300      	movs	r3, #0
 8004936:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800493a:	4620      	mov	r0, r4
 800493c:	f7ff ffbf 	bl	80048be <HAL_I2C_SlaveRxCpltCallback>
}
 8004940:	e7d6      	b.n	80048f0 <I2C_ITSlaveSeqCplt+0x30>

08004942 <HAL_I2C_AddrCallback>:
}
 8004942:	4770      	bx	lr

08004944 <I2C_ITAddrCplt>:
{
 8004944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004946:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004948:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800494c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004950:	2b28      	cmp	r3, #40	; 0x28
 8004952:	d006      	beq.n	8004962 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004954:	6803      	ldr	r3, [r0, #0]
 8004956:	2208      	movs	r2, #8
 8004958:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800495a:	2300      	movs	r3, #0
 800495c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8004960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8004962:	6803      	ldr	r3, [r0, #0]
 8004964:	699e      	ldr	r6, [r3, #24]
 8004966:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800496a:	699a      	ldr	r2, [r3, #24]
 800496c:	0c12      	lsrs	r2, r2, #16
 800496e:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004978:	68df      	ldr	r7, [r3, #12]
 800497a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800497e:	68c1      	ldr	r1, [r0, #12]
 8004980:	2902      	cmp	r1, #2
 8004982:	d122      	bne.n	80049ca <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004984:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8004988:	f015 0f06 	tst.w	r5, #6
 800498c:	d110      	bne.n	80049b0 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 800498e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004990:	3101      	adds	r1, #1
 8004992:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004994:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004996:	2902      	cmp	r1, #2
 8004998:	d1e2      	bne.n	8004960 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 800499a:	2100      	movs	r1, #0
 800499c:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800499e:	2008      	movs	r0, #8
 80049a0:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80049a2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80049a6:	4631      	mov	r1, r6
 80049a8:	4620      	mov	r0, r4
 80049aa:	f7ff ffca 	bl	8004942 <HAL_I2C_AddrCallback>
 80049ae:	e7d7      	b.n	8004960 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80049b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049b4:	f7ff fee4 	bl	8004780 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80049b8:	2300      	movs	r3, #0
 80049ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80049be:	463a      	mov	r2, r7
 80049c0:	4631      	mov	r1, r6
 80049c2:	4620      	mov	r0, r4
 80049c4:	f7ff ffbd 	bl	8004942 <HAL_I2C_AddrCallback>
 80049c8:	e7ca      	b.n	8004960 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80049ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049ce:	f7ff fed7 	bl	8004780 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80049d2:	2300      	movs	r3, #0
 80049d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80049d8:	462a      	mov	r2, r5
 80049da:	4631      	mov	r1, r6
 80049dc:	4620      	mov	r0, r4
 80049de:	f7ff ffb0 	bl	8004942 <HAL_I2C_AddrCallback>
 80049e2:	e7bd      	b.n	8004960 <I2C_ITAddrCplt+0x1c>

080049e4 <HAL_I2C_ListenCpltCallback>:
}
 80049e4:	4770      	bx	lr
	...

080049e8 <I2C_ITListenCplt>:
{
 80049e8:	b510      	push	{r4, lr}
 80049ea:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049ec:	4b17      	ldr	r3, [pc, #92]	; (8004a4c <I2C_ITListenCplt+0x64>)
 80049ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80049f0:	2300      	movs	r3, #0
 80049f2:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80049f4:	2220      	movs	r2, #32
 80049f6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fa:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 80049fe:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004a00:	f011 0f04 	tst.w	r1, #4
 8004a04:	d013      	beq.n	8004a2e <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a06:	6803      	ldr	r3, [r0, #0]
 8004a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004a0c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a0e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004a10:	3301      	adds	r3, #1
 8004a12:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8004a14:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8004a16:	b153      	cbz	r3, 8004a2e <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8004a1c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a26:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004a28:	f043 0304 	orr.w	r3, r3, #4
 8004a2c:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a2e:	f248 0103 	movw	r1, #32771	; 0x8003
 8004a32:	4620      	mov	r0, r4
 8004a34:	f7ff fea4 	bl	8004780 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	2210      	movs	r2, #16
 8004a3c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8004a44:	4620      	mov	r0, r4
 8004a46:	f7ff ffcd 	bl	80049e4 <HAL_I2C_ListenCpltCallback>
}
 8004a4a:	bd10      	pop	{r4, pc}
 8004a4c:	ffff0000 	.word	0xffff0000

08004a50 <HAL_I2C_ErrorCallback>:
}
 8004a50:	4770      	bx	lr

08004a52 <HAL_I2C_AbortCpltCallback>:
}
 8004a52:	4770      	bx	lr

08004a54 <I2C_TreatErrorCallback>:
{
 8004a54:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a56:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b60      	cmp	r3, #96	; 0x60
 8004a5e:	d006      	beq.n	8004a6e <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004a64:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004a68:	f7ff fff2 	bl	8004a50 <HAL_I2C_ErrorCallback>
}
 8004a6c:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004a6e:	2320      	movs	r3, #32
 8004a70:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004a78:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a7c:	f7ff ffe9 	bl	8004a52 <HAL_I2C_AbortCpltCallback>
 8004a80:	e7f4      	b.n	8004a6c <I2C_TreatErrorCallback+0x18>
	...

08004a84 <I2C_ITError>:
{
 8004a84:	b510      	push	{r4, lr}
 8004a86:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004a88:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a92:	4a3b      	ldr	r2, [pc, #236]	; (8004b80 <I2C_ITError+0xfc>)
 8004a94:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004a96:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8004a98:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004a9e:	3b28      	subs	r3, #40	; 0x28
 8004aa0:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d819      	bhi.n	8004ada <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004aa6:	2103      	movs	r1, #3
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f7ff fe69 	bl	8004780 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004aae:	2328      	movs	r3, #40	; 0x28
 8004ab0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004ab4:	4b33      	ldr	r3, [pc, #204]	; (8004b84 <I2C_ITError+0x100>)
 8004ab6:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8004ab8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004aba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004abc:	b11a      	cbz	r2, 8004ac6 <I2C_ITError+0x42>
 8004abe:	2b11      	cmp	r3, #17
 8004ac0:	d01b      	beq.n	8004afa <I2C_ITError+0x76>
 8004ac2:	2b21      	cmp	r3, #33	; 0x21
 8004ac4:	d019      	beq.n	8004afa <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004ac6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004ac8:	b11a      	cbz	r2, 8004ad2 <I2C_ITError+0x4e>
 8004aca:	2b12      	cmp	r3, #18
 8004acc:	d036      	beq.n	8004b3c <I2C_ITError+0xb8>
 8004ace:	2b22      	cmp	r3, #34	; 0x22
 8004ad0:	d034      	beq.n	8004b3c <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f7ff ffbe 	bl	8004a54 <I2C_TreatErrorCallback>
}
 8004ad8:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ada:	f248 0103 	movw	r1, #32771	; 0x8003
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f7ff fe4e 	bl	8004780 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004ae4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b60      	cmp	r3, #96	; 0x60
 8004aec:	d002      	beq.n	8004af4 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 8004aee:	2320      	movs	r3, #32
 8004af0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	6363      	str	r3, [r4, #52]	; 0x34
 8004af8:	e7de      	b.n	8004ab8 <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004b02:	d003      	beq.n	8004b0c <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b0a:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b0c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004b0e:	f7ff fc04 	bl	800431a <HAL_DMA_GetState>
 8004b12:	2801      	cmp	r0, #1
 8004b14:	d00e      	beq.n	8004b34 <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b18:	4a1b      	ldr	r2, [pc, #108]	; (8004b88 <I2C_ITError+0x104>)
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b22:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004b24:	f7ff fb58 	bl	80041d8 <HAL_DMA_Abort_IT>
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	d0d5      	beq.n	8004ad8 <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b2c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004b2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004b30:	4798      	blx	r3
 8004b32:	e7d1      	b.n	8004ad8 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8004b34:	4620      	mov	r0, r4
 8004b36:	f7ff ff8d 	bl	8004a54 <I2C_TreatErrorCallback>
 8004b3a:	e7cd      	b.n	8004ad8 <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004b44:	d003      	beq.n	8004b4e <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b4c:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b4e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004b50:	f7ff fbe3 	bl	800431a <HAL_DMA_GetState>
 8004b54:	2801      	cmp	r0, #1
 8004b56:	d00e      	beq.n	8004b76 <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b5a:	4a0b      	ldr	r2, [pc, #44]	; (8004b88 <I2C_ITError+0x104>)
 8004b5c:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b64:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004b66:	f7ff fb37 	bl	80041d8 <HAL_DMA_Abort_IT>
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	d0b4      	beq.n	8004ad8 <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b6e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004b70:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004b72:	4798      	blx	r3
 8004b74:	e7b0      	b.n	8004ad8 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8004b76:	4620      	mov	r0, r4
 8004b78:	f7ff ff6c 	bl	8004a54 <I2C_TreatErrorCallback>
 8004b7c:	e7ac      	b.n	8004ad8 <I2C_ITError+0x54>
 8004b7e:	bf00      	nop
 8004b80:	ffff0000 	.word	0xffff0000
 8004b84:	08004cf5 	.word	0x08004cf5
 8004b88:	08004ead 	.word	0x08004ead

08004b8c <I2C_ITSlaveCplt>:
{
 8004b8c:	b570      	push	{r4, r5, r6, lr}
 8004b8e:	4604      	mov	r4, r0
 8004b90:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004b92:	6802      	ldr	r2, [r0, #0]
 8004b94:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004b96:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004b9a:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b9c:	2120      	movs	r1, #32
 8004b9e:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ba0:	2b21      	cmp	r3, #33	; 0x21
 8004ba2:	d00d      	beq.n	8004bc0 <I2C_ITSlaveCplt+0x34>
 8004ba4:	2b29      	cmp	r3, #41	; 0x29
 8004ba6:	d00b      	beq.n	8004bc0 <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ba8:	2b22      	cmp	r3, #34	; 0x22
 8004baa:	d001      	beq.n	8004bb0 <I2C_ITSlaveCplt+0x24>
 8004bac:	2b2a      	cmp	r3, #42	; 0x2a
 8004bae:	d10e      	bne.n	8004bce <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004bb0:	f248 0102 	movw	r1, #32770	; 0x8002
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f7ff fde3 	bl	8004780 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bba:	2322      	movs	r3, #34	; 0x22
 8004bbc:	6323      	str	r3, [r4, #48]	; 0x30
 8004bbe:	e006      	b.n	8004bce <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004bc0:	f248 0101 	movw	r1, #32769	; 0x8001
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	f7ff fddb 	bl	8004780 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bca:	2321      	movs	r3, #33	; 0x21
 8004bcc:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004bce:	6822      	ldr	r2, [r4, #0]
 8004bd0:	6853      	ldr	r3, [r2, #4]
 8004bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd6:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8004bd8:	6822      	ldr	r2, [r4, #0]
 8004bda:	6853      	ldr	r3, [r2, #4]
 8004bdc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004be0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004be4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f7ff fdb5 	bl	800475e <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004bf4:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8004bf8:	d040      	beq.n	8004c7c <I2C_ITSlaveCplt+0xf0>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004bfa:	6822      	ldr	r2, [r4, #0]
 8004bfc:	6813      	ldr	r3, [r2, #0]
 8004bfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c02:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8004c04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c06:	b11b      	cbz	r3, 8004c10 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004c10:	f015 0f04 	tst.w	r5, #4
 8004c14:	d011      	beq.n	8004c3a <I2C_ITSlaveCplt+0xae>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004c16:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c20:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c24:	3301      	adds	r3, #1
 8004c26:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8004c28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004c2a:	b133      	cbz	r3, 8004c3a <I2C_ITSlaveCplt+0xae>
      hi2c->XferSize--;
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004c30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8004c3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	b11b      	cbz	r3, 8004c48 <I2C_ITSlaveCplt+0xbc>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004c42:	f043 0304 	orr.w	r3, r3, #4
 8004c46:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004c4e:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c50:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004c52:	bb1b      	cbnz	r3, 8004c9c <I2C_ITSlaveCplt+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004c54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c5a:	d12d      	bne.n	8004cb8 <I2C_ITSlaveCplt+0x12c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c5c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b22      	cmp	r3, #34	; 0x22
 8004c64:	d038      	beq.n	8004cd8 <I2C_ITSlaveCplt+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004c66:	2320      	movs	r3, #32
 8004c68:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004c70:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c74:	4620      	mov	r0, r4
 8004c76:	f7ff fe21 	bl	80048bc <HAL_I2C_SlaveTxCpltCallback>
}
 8004c7a:	e02c      	b.n	8004cd6 <I2C_ITSlaveCplt+0x14a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c7c:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8004c80:	d0c6      	beq.n	8004c10 <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c82:	6822      	ldr	r2, [r4, #0]
 8004c84:	6813      	ldr	r3, [r2, #0]
 8004c86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c8a:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8004c8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0be      	beq.n	8004c10 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004c9a:	e7b9      	b.n	8004c10 <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004c9c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f7ff fef0 	bl	8004a84 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ca4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b28      	cmp	r3, #40	; 0x28
 8004cac:	d113      	bne.n	8004cd6 <I2C_ITSlaveCplt+0x14a>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004cae:	4629      	mov	r1, r5
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f7ff fe99 	bl	80049e8 <I2C_ITListenCplt>
 8004cb6:	e00e      	b.n	8004cd6 <I2C_ITSlaveCplt+0x14a>
    I2C_ITSlaveSeqCplt(hi2c);
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f7ff fe01 	bl	80048c0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cbe:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <I2C_ITSlaveCplt+0x164>)
 8004cc0:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004cc2:	2320      	movs	r3, #32
 8004cc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ccc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f7ff fe87 	bl	80049e4 <HAL_I2C_ListenCpltCallback>
}
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004cd8:	2320      	movs	r3, #32
 8004cda:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ce2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f7ff fde9 	bl	80048be <HAL_I2C_SlaveRxCpltCallback>
 8004cec:	e7f3      	b.n	8004cd6 <I2C_ITSlaveCplt+0x14a>
 8004cee:	bf00      	nop
 8004cf0:	ffff0000 	.word	0xffff0000

08004cf4 <I2C_Slave_ISR_IT>:
{
 8004cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8004cf6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8004cf8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	f000 809e 	beq.w	8004e3e <I2C_Slave_ISR_IT+0x14a>
 8004d02:	4604      	mov	r4, r0
 8004d04:	460d      	mov	r5, r1
 8004d06:	4616      	mov	r6, r2
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004d0e:	f011 0f20 	tst.w	r1, #32
 8004d12:	d002      	beq.n	8004d1a <I2C_Slave_ISR_IT+0x26>
 8004d14:	f012 0f20 	tst.w	r2, #32
 8004d18:	d119      	bne.n	8004d4e <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004d1a:	f015 0f10 	tst.w	r5, #16
 8004d1e:	d03e      	beq.n	8004d9e <I2C_Slave_ISR_IT+0xaa>
 8004d20:	f016 0f10 	tst.w	r6, #16
 8004d24:	d03b      	beq.n	8004d9e <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 8004d26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	bb43      	cbnz	r3, 8004d7e <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004d2c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b28      	cmp	r3, #40	; 0x28
 8004d34:	d00e      	beq.n	8004d54 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004d36:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b29      	cmp	r3, #41	; 0x29
 8004d3e:	d011      	beq.n	8004d64 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d40:	6823      	ldr	r3, [r4, #0]
 8004d42:	2210      	movs	r2, #16
 8004d44:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8004d46:	2000      	movs	r0, #0
 8004d48:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8004d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004d4e:	f7ff ff1d 	bl	8004b8c <I2C_ITSlaveCplt>
 8004d52:	e7e2      	b.n	8004d1a <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004d54:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8004d58:	d1ed      	bne.n	8004d36 <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004d5a:	4629      	mov	r1, r5
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f7ff fe43 	bl	80049e8 <I2C_ITListenCplt>
 8004d62:	e7f0      	b.n	8004d46 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004d64:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8004d68:	d0ea      	beq.n	8004d40 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	2210      	movs	r2, #16
 8004d6e:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8004d70:	4620      	mov	r0, r4
 8004d72:	f7ff fcf4 	bl	800475e <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8004d76:	4620      	mov	r0, r4
 8004d78:	f7ff fda2 	bl	80048c0 <I2C_ITSlaveSeqCplt>
 8004d7c:	e7e3      	b.n	8004d46 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	2210      	movs	r2, #16
 8004d82:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004d86:	f043 0304 	orr.w	r3, r3, #4
 8004d8a:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004d8c:	b117      	cbz	r7, 8004d94 <I2C_Slave_ISR_IT+0xa0>
 8004d8e:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8004d92:	d1d8      	bne.n	8004d46 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d94:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004d96:	4620      	mov	r0, r4
 8004d98:	f7ff fe74 	bl	8004a84 <I2C_ITError>
 8004d9c:	e7d3      	b.n	8004d46 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004d9e:	f015 0f04 	tst.w	r5, #4
 8004da2:	d01f      	beq.n	8004de4 <I2C_Slave_ISR_IT+0xf0>
 8004da4:	f016 0f04 	tst.w	r6, #4
 8004da8:	d01c      	beq.n	8004de4 <I2C_Slave_ISR_IT+0xf0>
    if (hi2c->XferCount > 0U)
 8004daa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	b173      	cbz	r3, 8004dce <I2C_Slave_ISR_IT+0xda>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004db4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004db6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dba:	3301      	adds	r3, #1
 8004dbc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004dbe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004dc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8004dce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1b7      	bne.n	8004d46 <I2C_Slave_ISR_IT+0x52>
 8004dd6:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8004dda:	d0b4      	beq.n	8004d46 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8004ddc:	4620      	mov	r0, r4
 8004dde:	f7ff fd6f 	bl	80048c0 <I2C_ITSlaveSeqCplt>
 8004de2:	e7b0      	b.n	8004d46 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004de4:	f015 0f08 	tst.w	r5, #8
 8004de8:	d002      	beq.n	8004df0 <I2C_Slave_ISR_IT+0xfc>
 8004dea:	f016 0f08 	tst.w	r6, #8
 8004dee:	d118      	bne.n	8004e22 <I2C_Slave_ISR_IT+0x12e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004df0:	f015 0f02 	tst.w	r5, #2
 8004df4:	d0a7      	beq.n	8004d46 <I2C_Slave_ISR_IT+0x52>
 8004df6:	f016 0f02 	tst.w	r6, #2
 8004dfa:	d0a4      	beq.n	8004d46 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 8004dfc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	b1a3      	cbz	r3, 8004e2c <I2C_Slave_ISR_IT+0x138>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e02:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	7812      	ldrb	r2, [r2, #0]
 8004e08:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004e10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004e1a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	8523      	strh	r3, [r4, #40]	; 0x28
 8004e20:	e791      	b.n	8004d46 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004e22:	4629      	mov	r1, r5
 8004e24:	4620      	mov	r0, r4
 8004e26:	f7ff fd8d 	bl	8004944 <I2C_ITAddrCplt>
 8004e2a:	e78c      	b.n	8004d46 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004e2c:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8004e30:	d001      	beq.n	8004e36 <I2C_Slave_ISR_IT+0x142>
 8004e32:	2f00      	cmp	r7, #0
 8004e34:	d187      	bne.n	8004d46 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8004e36:	4620      	mov	r0, r4
 8004e38:	f7ff fd42 	bl	80048c0 <I2C_ITSlaveSeqCplt>
 8004e3c:	e783      	b.n	8004d46 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8004e3e:	2002      	movs	r0, #2
 8004e40:	e784      	b.n	8004d4c <I2C_Slave_ISR_IT+0x58>

08004e42 <HAL_I2C_ER_IRQHandler>:
{
 8004e42:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004e44:	6802      	ldr	r2, [r0, #0]
 8004e46:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004e48:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004e4a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004e4e:	d009      	beq.n	8004e64 <HAL_I2C_ER_IRQHandler+0x22>
 8004e50:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004e54:	d006      	beq.n	8004e64 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004e56:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004e58:	f044 0401 	orr.w	r4, r4, #1
 8004e5c:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e5e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8004e62:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004e64:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004e68:	d00a      	beq.n	8004e80 <HAL_I2C_ER_IRQHandler+0x3e>
 8004e6a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004e6e:	d007      	beq.n	8004e80 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004e70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004e72:	f042 0208 	orr.w	r2, r2, #8
 8004e76:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e78:	6802      	ldr	r2, [r0, #0]
 8004e7a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004e7e:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004e80:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004e84:	d00a      	beq.n	8004e9c <HAL_I2C_ER_IRQHandler+0x5a>
 8004e86:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004e8a:	d007      	beq.n	8004e9c <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004e8c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004e8e:	f043 0302 	orr.w	r3, r3, #2
 8004e92:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e94:	6803      	ldr	r3, [r0, #0]
 8004e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e9a:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8004e9c:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004e9e:	f011 0f0b 	tst.w	r1, #11
 8004ea2:	d100      	bne.n	8004ea6 <HAL_I2C_ER_IRQHandler+0x64>
}
 8004ea4:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 8004ea6:	f7ff fded 	bl	8004a84 <I2C_ITError>
}
 8004eaa:	e7fb      	b.n	8004ea4 <HAL_I2C_ER_IRQHandler+0x62>

08004eac <I2C_DMAAbort>:
{
 8004eac:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004eae:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 8004eb0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004eb2:	b10b      	cbz	r3, 8004eb8 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 8004eb8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004eba:	b10b      	cbz	r3, 8004ec0 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 8004ec0:	f7ff fdc8 	bl	8004a54 <I2C_TreatErrorCallback>
}
 8004ec4:	bd08      	pop	{r3, pc}

08004ec6 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b20      	cmp	r3, #32
 8004ece:	d124      	bne.n	8004f1a <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ed0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d022      	beq.n	8004f1e <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ede:	2324      	movs	r3, #36	; 0x24
 8004ee0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ee4:	6802      	ldr	r2, [r0, #0]
 8004ee6:	6813      	ldr	r3, [r2, #0]
 8004ee8:	f023 0301 	bic.w	r3, r3, #1
 8004eec:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004eee:	6802      	ldr	r2, [r0, #0]
 8004ef0:	6813      	ldr	r3, [r2, #0]
 8004ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ef6:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ef8:	6802      	ldr	r2, [r0, #0]
 8004efa:	6813      	ldr	r3, [r2, #0]
 8004efc:	4319      	orrs	r1, r3
 8004efe:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f00:	6802      	ldr	r2, [r0, #0]
 8004f02:	6813      	ldr	r3, [r2, #0]
 8004f04:	f043 0301 	orr.w	r3, r3, #1
 8004f08:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f0a:	2320      	movs	r3, #32
 8004f0c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f10:	2300      	movs	r3, #0
 8004f12:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004f16:	4618      	mov	r0, r3
 8004f18:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004f1a:	2002      	movs	r0, #2
 8004f1c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004f1e:	2002      	movs	r0, #2
  }
}
 8004f20:	4770      	bx	lr

08004f22 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f22:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d122      	bne.n	8004f72 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f2c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d020      	beq.n	8004f76 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8004f34:	2301      	movs	r3, #1
 8004f36:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f3a:	2324      	movs	r3, #36	; 0x24
 8004f3c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f40:	6802      	ldr	r2, [r0, #0]
 8004f42:	6813      	ldr	r3, [r2, #0]
 8004f44:	f023 0301 	bic.w	r3, r3, #1
 8004f48:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f4a:	6802      	ldr	r2, [r0, #0]
 8004f4c:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f52:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f56:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f58:	6802      	ldr	r2, [r0, #0]
 8004f5a:	6813      	ldr	r3, [r2, #0]
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f62:	2320      	movs	r3, #32
 8004f64:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f68:	2300      	movs	r3, #0
 8004f6a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004f6e:	4618      	mov	r0, r3
 8004f70:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004f72:	2002      	movs	r0, #2
 8004f74:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004f76:	2002      	movs	r0, #2
  }
}
 8004f78:	4770      	bx	lr

08004f7a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f7a:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f7c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004f80:	d043      	beq.n	800500a <HAL_PCD_EP_DB_Receive+0x90>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f82:	6804      	ldr	r4, [r0, #0]
 8004f84:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8004f88:	f891 c000 	ldrb.w	ip, [r1]
 8004f8c:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 8004f90:	fa1e f383 	uxtah	r3, lr, r3
 8004f94:	4423      	add	r3, r4
 8004f96:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 8004f9a:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8004f9e:	698b      	ldr	r3, [r1, #24]
 8004fa0:	42a3      	cmp	r3, r4
 8004fa2:	d328      	bcc.n	8004ff6 <HAL_PCD_EP_DB_Receive+0x7c>
    {
      ep->xfer_len -= count;
 8004fa4:	1b1b      	subs	r3, r3, r4
 8004fa6:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8004fa8:	698b      	ldr	r3, [r1, #24]
 8004faa:	b97b      	cbnz	r3, 8004fcc <HAL_PCD_EP_DB_Receive+0x52>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004fac:	6805      	ldr	r5, [r0, #0]
 8004fae:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc8:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004fcc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004fd0:	d00e      	beq.n	8004ff0 <HAL_PCD_EP_DB_Receive+0x76>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004fd2:	6802      	ldr	r2, [r0, #0]
 8004fd4:	780d      	ldrb	r5, [r1, #0]
 8004fd6:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fec:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 8004ff0:	b924      	cbnz	r4, 8004ffc <HAL_PCD_EP_DB_Receive+0x82>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	618b      	str	r3, [r1, #24]
 8004ffa:	e7d5      	b.n	8004fa8 <HAL_PCD_EP_DB_Receive+0x2e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004ffc:	4623      	mov	r3, r4
 8004ffe:	890a      	ldrh	r2, [r1, #8]
 8005000:	6949      	ldr	r1, [r1, #20]
 8005002:	6800      	ldr	r0, [r0, #0]
 8005004:	f004 fa1d 	bl	8009442 <USB_ReadPMA>
 8005008:	e7f3      	b.n	8004ff2 <HAL_PCD_EP_DB_Receive+0x78>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800500a:	6804      	ldr	r4, [r0, #0]
 800500c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8005010:	f891 c000 	ldrb.w	ip, [r1]
 8005014:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 8005018:	fa1e f383 	uxtah	r3, lr, r3
 800501c:	4423      	add	r3, r4
 800501e:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	; 0x406
 8005022:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 8005026:	698b      	ldr	r3, [r1, #24]
 8005028:	42a3      	cmp	r3, r4
 800502a:	d32f      	bcc.n	800508c <HAL_PCD_EP_DB_Receive+0x112>
      ep->xfer_len -= count;
 800502c:	1b1b      	subs	r3, r3, r4
 800502e:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8005030:	698b      	ldr	r3, [r1, #24]
 8005032:	b97b      	cbnz	r3, 8005054 <HAL_PCD_EP_DB_Receive+0xda>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005034:	6805      	ldr	r5, [r0, #0]
 8005036:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 800503a:	b29b      	uxth	r3, r3
 800503c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005044:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800504c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005050:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005054:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005058:	d10f      	bne.n	800507a <HAL_PCD_EP_DB_Receive+0x100>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800505a:	6802      	ldr	r2, [r0, #0]
 800505c:	f891 c000 	ldrb.w	ip, [r1]
 8005060:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8005064:	b29b      	uxth	r3, r3
 8005066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005072:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005076:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 800507a:	2c00      	cmp	r4, #0
 800507c:	d0b9      	beq.n	8004ff2 <HAL_PCD_EP_DB_Receive+0x78>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800507e:	4623      	mov	r3, r4
 8005080:	894a      	ldrh	r2, [r1, #10]
 8005082:	6949      	ldr	r1, [r1, #20]
 8005084:	6800      	ldr	r0, [r0, #0]
 8005086:	f004 f9dc 	bl	8009442 <USB_ReadPMA>
 800508a:	e7b2      	b.n	8004ff2 <HAL_PCD_EP_DB_Receive+0x78>
      ep->xfer_len = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	618b      	str	r3, [r1, #24]
 8005090:	e7ce      	b.n	8005030 <HAL_PCD_EP_DB_Receive+0xb6>

08005092 <HAL_PCD_Init>:
  if (hpcd == NULL)
 8005092:	2800      	cmp	r0, #0
 8005094:	d06d      	beq.n	8005172 <HAL_PCD_Init+0xe0>
{
 8005096:	b530      	push	{r4, r5, lr}
 8005098:	b087      	sub	sp, #28
 800509a:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800509c:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80050a0:	b13b      	cbz	r3, 80050b2 <HAL_PCD_Init+0x20>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80050a2:	2303      	movs	r3, #3
 80050a4:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80050a8:	6820      	ldr	r0, [r4, #0]
 80050aa:	f003 faa8 	bl	80085fe <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050ae:	2300      	movs	r3, #0
 80050b0:	e01f      	b.n	80050f2 <HAL_PCD_Init+0x60>
    hpcd->Lock = HAL_UNLOCKED;
 80050b2:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80050b6:	f005 fc35 	bl	800a924 <HAL_PCD_MspInit>
 80050ba:	e7f2      	b.n	80050a2 <HAL_PCD_Init+0x10>
    hpcd->IN_ep[i].is_in = 1U;
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80050c2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80050c6:	2001      	movs	r0, #1
 80050c8:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 80050ca:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80050ce:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050d2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80050d6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80050da:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050dc:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 80050e0:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 80050e4:	2000      	movs	r0, #0
 80050e6:	f88c 0003 	strb.w	r0, [ip, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050ea:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050ec:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80050ee:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050f0:	b2d3      	uxtb	r3, r2
 80050f2:	6860      	ldr	r0, [r4, #4]
 80050f4:	4283      	cmp	r3, r0
 80050f6:	d3e1      	bcc.n	80050bc <HAL_PCD_Init+0x2a>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050f8:	2300      	movs	r3, #0
 80050fa:	e016      	b.n	800512a <HAL_PCD_Init+0x98>
    hpcd->OUT_ep[i].is_in = 0U;
 80050fc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005100:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005104:	2100      	movs	r1, #0
 8005106:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 800510a:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800510e:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005112:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005116:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800511a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800511e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005122:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005126:	3301      	adds	r3, #1
 8005128:	b2db      	uxtb	r3, r3
 800512a:	4298      	cmp	r0, r3
 800512c:	d8e6      	bhi.n	80050fc <HAL_PCD_Init+0x6a>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800512e:	46a4      	mov	ip, r4
 8005130:	f85c 5b10 	ldr.w	r5, [ip], #16
 8005134:	46ee      	mov	lr, sp
 8005136:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800513a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800513e:	f8dc 3000 	ldr.w	r3, [ip]
 8005142:	f8ce 3000 	str.w	r3, [lr]
 8005146:	1d23      	adds	r3, r4, #4
 8005148:	cb0e      	ldmia	r3, {r1, r2, r3}
 800514a:	4628      	mov	r0, r5
 800514c:	f003 fa61 	bl	8008612 <USB_DevInit>
  hpcd->USB_Address = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005156:	2301      	movs	r3, #1
 8005158:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 800515c:	69e3      	ldr	r3, [r4, #28]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d002      	beq.n	8005168 <HAL_PCD_Init+0xd6>
  return HAL_OK;
 8005162:	2000      	movs	r0, #0
}
 8005164:	b007      	add	sp, #28
 8005166:	bd30      	pop	{r4, r5, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005168:	4620      	mov	r0, r4
 800516a:	f000 fee8 	bl	8005f3e <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 800516e:	2000      	movs	r0, #0
 8005170:	e7f8      	b.n	8005164 <HAL_PCD_Init+0xd2>
    return HAL_ERROR;
 8005172:	2001      	movs	r0, #1
}
 8005174:	4770      	bx	lr

08005176 <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 8005176:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800517a:	2b01      	cmp	r3, #1
 800517c:	d00e      	beq.n	800519c <HAL_PCD_Start+0x26>
{
 800517e:	b510      	push	{r4, lr}
 8005180:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005182:	2301      	movs	r3, #1
 8005184:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005188:	6800      	ldr	r0, [r0, #0]
 800518a:	f003 fa2f 	bl	80085ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800518e:	6820      	ldr	r0, [r4, #0]
 8005190:	f003 fd84 	bl	8008c9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005194:	2000      	movs	r0, #0
 8005196:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800519a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800519c:	2002      	movs	r0, #2
}
 800519e:	4770      	bx	lr

080051a0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	4605      	mov	r5, r0
 80051a4:	460c      	mov	r4, r1
 80051a6:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80051a8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80051ac:	f000 8109 	beq.w	80053c2 <HAL_PCD_EP_DB_Transmit+0x222>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051b0:	6802      	ldr	r2, [r0, #0]
 80051b2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80051b6:	7809      	ldrb	r1, [r1, #0]
 80051b8:	00c8      	lsls	r0, r1, #3
 80051ba:	fa10 f383 	uxtah	r3, r0, r3
 80051be:	4413      	add	r3, r2
 80051c0:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80051c4:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 80051c8:	69a3      	ldr	r3, [r4, #24]
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d951      	bls.n	8005272 <HAL_PCD_EP_DB_Transmit+0xd2>
    {
      ep->xfer_len -= TxPctSize;
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80051d2:	69a3      	ldr	r3, [r4, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d168      	bne.n	80052aa <HAL_PCD_EP_DB_Transmit+0x10a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051d8:	7863      	ldrb	r3, [r4, #1]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d14c      	bne.n	8005278 <HAL_PCD_EP_DB_Transmit+0xd8>
 80051de:	682a      	ldr	r2, [r5, #0]
 80051e0:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80051e4:	fa12 f383 	uxtah	r3, r2, r3
 80051e8:	4403      	add	r3, r0
 80051ea:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80051ee:	b292      	uxth	r2, r2
 80051f0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80051f4:	b292      	uxth	r2, r2
 80051f6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80051fa:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80051fe:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005202:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005206:	b292      	uxth	r2, r2
 8005208:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800520c:	6829      	ldr	r1, [r5, #0]
 800520e:	7862      	ldrb	r2, [r4, #1]
 8005210:	2a00      	cmp	r2, #0
 8005212:	d13d      	bne.n	8005290 <HAL_PCD_EP_DB_Transmit+0xf0>
 8005214:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8005218:	fa11 f383 	uxtah	r3, r1, r3
 800521c:	7822      	ldrb	r2, [r4, #0]
 800521e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005222:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005226:	b292      	uxth	r2, r2
 8005228:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800522c:	b292      	uxth	r2, r2
 800522e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005232:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005236:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800523a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800523e:	b292      	uxth	r2, r2
 8005240:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005244:	7821      	ldrb	r1, [r4, #0]
 8005246:	4628      	mov	r0, r5
 8005248:	f005 fbb0 	bl	800a9ac <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800524c:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8005250:	d040      	beq.n	80052d4 <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005252:	682a      	ldr	r2, [r5, #0]
 8005254:	7821      	ldrb	r1, [r4, #0]
 8005256:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800525a:	b29b      	uxth	r3, r3
 800525c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800526c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8005270:	e030      	b.n	80052d4 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	61a3      	str	r3, [r4, #24]
 8005276:	e7ac      	b.n	80051d2 <HAL_PCD_EP_DB_Transmit+0x32>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005278:	2b01      	cmp	r3, #1
 800527a:	d1c7      	bne.n	800520c <HAL_PCD_EP_DB_Transmit+0x6c>
 800527c:	682a      	ldr	r2, [r5, #0]
 800527e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005282:	fa12 f383 	uxtah	r3, r2, r3
 8005286:	4403      	add	r3, r0
 8005288:	2200      	movs	r2, #0
 800528a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800528e:	e7bd      	b.n	800520c <HAL_PCD_EP_DB_Transmit+0x6c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005290:	2a01      	cmp	r2, #1
 8005292:	d1d7      	bne.n	8005244 <HAL_PCD_EP_DB_Transmit+0xa4>
 8005294:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8005298:	fa11 f383 	uxtah	r3, r1, r3
 800529c:	7821      	ldrb	r1, [r4, #0]
 800529e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80052a2:	2200      	movs	r2, #0
 80052a4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80052a8:	e7cc      	b.n	8005244 <HAL_PCD_EP_DB_Transmit+0xa4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80052aa:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80052ae:	d00d      	beq.n	80052cc <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80052b0:	6828      	ldr	r0, [r5, #0]
 80052b2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c8:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80052cc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d012      	beq.n	80052fa <HAL_PCD_EP_DB_Transmit+0x15a>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80052d4:	682a      	ldr	r2, [r5, #0]
 80052d6:	7821      	ldrb	r1, [r4, #0]
 80052d8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80052ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 80052f6:	2000      	movs	r0, #0
 80052f8:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 80052fa:	6963      	ldr	r3, [r4, #20]
 80052fc:	4413      	add	r3, r2
 80052fe:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8005300:	69e3      	ldr	r3, [r4, #28]
 8005302:	4413      	add	r3, r2
 8005304:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8005306:	6a21      	ldr	r1, [r4, #32]
 8005308:	6923      	ldr	r3, [r4, #16]
 800530a:	4299      	cmp	r1, r3
 800530c:	d31b      	bcc.n	8005346 <HAL_PCD_EP_DB_Transmit+0x1a6>
          ep->xfer_len_db -= len;
 800530e:	1ac9      	subs	r1, r1, r3
 8005310:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005312:	7862      	ldrb	r2, [r4, #1]
 8005314:	2a00      	cmp	r2, #0
 8005316:	d13f      	bne.n	8005398 <HAL_PCD_EP_DB_Transmit+0x1f8>
 8005318:	6829      	ldr	r1, [r5, #0]
 800531a:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800531e:	fa11 f282 	uxtah	r2, r1, r2
 8005322:	7821      	ldrb	r1, [r4, #0]
 8005324:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005328:	2b3e      	cmp	r3, #62	; 0x3e
 800532a:	d918      	bls.n	800535e <HAL_PCD_EP_DB_Transmit+0x1be>
 800532c:	0959      	lsrs	r1, r3, #5
 800532e:	f013 0f1f 	tst.w	r3, #31
 8005332:	d100      	bne.n	8005336 <HAL_PCD_EP_DB_Transmit+0x196>
 8005334:	3901      	subs	r1, #1
 8005336:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800533a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800533e:	b289      	uxth	r1, r1
 8005340:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8005344:	e02a      	b.n	800539c <HAL_PCD_EP_DB_Transmit+0x1fc>
        else if (ep->xfer_len_db == 0U)
 8005346:	b921      	cbnz	r1, 8005352 <HAL_PCD_EP_DB_Transmit+0x1b2>
          ep->xfer_fill_db = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 800534e:	4613      	mov	r3, r2
 8005350:	e7df      	b.n	8005312 <HAL_PCD_EP_DB_Transmit+0x172>
          ep->xfer_fill_db = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8005358:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 800535a:	460b      	mov	r3, r1
 800535c:	e7d9      	b.n	8005312 <HAL_PCD_EP_DB_Transmit+0x172>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800535e:	b98b      	cbnz	r3, 8005384 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8005360:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8005364:	b289      	uxth	r1, r1
 8005366:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800536a:	b289      	uxth	r1, r1
 800536c:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8005370:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8005374:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005378:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800537c:	b289      	uxth	r1, r1
 800537e:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8005382:	e00b      	b.n	800539c <HAL_PCD_EP_DB_Transmit+0x1fc>
 8005384:	0859      	lsrs	r1, r3, #1
 8005386:	f013 0f01 	tst.w	r3, #1
 800538a:	d000      	beq.n	800538e <HAL_PCD_EP_DB_Transmit+0x1ee>
 800538c:	3101      	adds	r1, #1
 800538e:	0289      	lsls	r1, r1, #10
 8005390:	b289      	uxth	r1, r1
 8005392:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8005396:	e001      	b.n	800539c <HAL_PCD_EP_DB_Transmit+0x1fc>
 8005398:	2a01      	cmp	r2, #1
 800539a:	d006      	beq.n	80053aa <HAL_PCD_EP_DB_Transmit+0x20a>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800539c:	b29b      	uxth	r3, r3
 800539e:	8922      	ldrh	r2, [r4, #8]
 80053a0:	6961      	ldr	r1, [r4, #20]
 80053a2:	6828      	ldr	r0, [r5, #0]
 80053a4:	f003 fc89 	bl	8008cba <USB_WritePMA>
 80053a8:	e794      	b.n	80052d4 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80053aa:	6829      	ldr	r1, [r5, #0]
 80053ac:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80053b0:	fa11 f282 	uxtah	r2, r1, r2
 80053b4:	7821      	ldrb	r1, [r4, #0]
 80053b6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80053ba:	b299      	uxth	r1, r3
 80053bc:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80053c0:	e7ec      	b.n	800539c <HAL_PCD_EP_DB_Transmit+0x1fc>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053c2:	6802      	ldr	r2, [r0, #0]
 80053c4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80053c8:	7809      	ldrb	r1, [r1, #0]
 80053ca:	00c8      	lsls	r0, r1, #3
 80053cc:	fa10 f383 	uxtah	r3, r0, r3
 80053d0:	4413      	add	r3, r2
 80053d2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80053d6:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 80053da:	69a3      	ldr	r3, [r4, #24]
 80053dc:	4293      	cmp	r3, r2
 80053de:	d352      	bcc.n	8005486 <HAL_PCD_EP_DB_Transmit+0x2e6>
      ep->xfer_len -= TxPctSize;
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 80053e4:	69a3      	ldr	r3, [r4, #24]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d169      	bne.n	80054be <HAL_PCD_EP_DB_Transmit+0x31e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053ea:	7863      	ldrb	r3, [r4, #1]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d14d      	bne.n	800548c <HAL_PCD_EP_DB_Transmit+0x2ec>
 80053f0:	682a      	ldr	r2, [r5, #0]
 80053f2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80053f6:	fa12 f383 	uxtah	r3, r2, r3
 80053fa:	4418      	add	r0, r3
 80053fc:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 8005400:	b29b      	uxth	r3, r3
 8005402:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005406:	b29b      	uxth	r3, r3
 8005408:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 800540c:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 8005410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005418:	b29b      	uxth	r3, r3
 800541a:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800541e:	6829      	ldr	r1, [r5, #0]
 8005420:	7862      	ldrb	r2, [r4, #1]
 8005422:	2a00      	cmp	r2, #0
 8005424:	d13e      	bne.n	80054a4 <HAL_PCD_EP_DB_Transmit+0x304>
 8005426:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 800542a:	fa11 f383 	uxtah	r3, r1, r3
 800542e:	7822      	ldrb	r2, [r4, #0]
 8005430:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005434:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005438:	b292      	uxth	r2, r2
 800543a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800543e:	b292      	uxth	r2, r2
 8005440:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005444:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005448:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800544c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005450:	b292      	uxth	r2, r2
 8005452:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005456:	7821      	ldrb	r1, [r4, #0]
 8005458:	4628      	mov	r0, r5
 800545a:	f005 faa7 	bl	800a9ac <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800545e:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8005462:	f47f af37 	bne.w	80052d4 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005466:	682a      	ldr	r2, [r5, #0]
 8005468:	7821      	ldrb	r1, [r4, #0]
 800546a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800546e:	b29b      	uxth	r3, r3
 8005470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800547c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005480:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8005484:	e726      	b.n	80052d4 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	61a3      	str	r3, [r4, #24]
 800548a:	e7ab      	b.n	80053e4 <HAL_PCD_EP_DB_Transmit+0x244>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800548c:	2b01      	cmp	r3, #1
 800548e:	d1c6      	bne.n	800541e <HAL_PCD_EP_DB_Transmit+0x27e>
 8005490:	682a      	ldr	r2, [r5, #0]
 8005492:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005496:	fa12 f383 	uxtah	r3, r2, r3
 800549a:	4418      	add	r0, r3
 800549c:	2300      	movs	r3, #0
 800549e:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 80054a2:	e7bc      	b.n	800541e <HAL_PCD_EP_DB_Transmit+0x27e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054a4:	2a01      	cmp	r2, #1
 80054a6:	d1d6      	bne.n	8005456 <HAL_PCD_EP_DB_Transmit+0x2b6>
 80054a8:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80054ac:	fa11 f383 	uxtah	r3, r1, r3
 80054b0:	7821      	ldrb	r1, [r4, #0]
 80054b2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80054bc:	e7cb      	b.n	8005456 <HAL_PCD_EP_DB_Transmit+0x2b6>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80054be:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80054c2:	d10d      	bne.n	80054e0 <HAL_PCD_EP_DB_Transmit+0x340>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80054c4:	6828      	ldr	r0, [r5, #0]
 80054c6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054dc:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80054e0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	f47f aef5 	bne.w	80052d4 <HAL_PCD_EP_DB_Transmit+0x134>
        ep->xfer_buff += TxPctSize;
 80054ea:	6963      	ldr	r3, [r4, #20]
 80054ec:	4413      	add	r3, r2
 80054ee:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 80054f0:	69e3      	ldr	r3, [r4, #28]
 80054f2:	4413      	add	r3, r2
 80054f4:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 80054f6:	6a21      	ldr	r1, [r4, #32]
 80054f8:	6923      	ldr	r3, [r4, #16]
 80054fa:	4299      	cmp	r1, r3
 80054fc:	d31b      	bcc.n	8005536 <HAL_PCD_EP_DB_Transmit+0x396>
          ep->xfer_len_db -= len;
 80054fe:	1ac9      	subs	r1, r1, r3
 8005500:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005502:	6829      	ldr	r1, [r5, #0]
 8005504:	7862      	ldrb	r2, [r4, #1]
 8005506:	2a00      	cmp	r2, #0
 8005508:	d13e      	bne.n	8005588 <HAL_PCD_EP_DB_Transmit+0x3e8>
 800550a:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800550e:	fa11 f282 	uxtah	r2, r1, r2
 8005512:	7821      	ldrb	r1, [r4, #0]
 8005514:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005518:	2b3e      	cmp	r3, #62	; 0x3e
 800551a:	d918      	bls.n	800554e <HAL_PCD_EP_DB_Transmit+0x3ae>
 800551c:	0959      	lsrs	r1, r3, #5
 800551e:	f013 0f1f 	tst.w	r3, #31
 8005522:	d100      	bne.n	8005526 <HAL_PCD_EP_DB_Transmit+0x386>
 8005524:	3901      	subs	r1, #1
 8005526:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800552a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800552e:	b289      	uxth	r1, r1
 8005530:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8005534:	e02a      	b.n	800558c <HAL_PCD_EP_DB_Transmit+0x3ec>
        else if (ep->xfer_len_db == 0U)
 8005536:	b921      	cbnz	r1, 8005542 <HAL_PCD_EP_DB_Transmit+0x3a2>
          ep->xfer_fill_db = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 800553e:	4613      	mov	r3, r2
 8005540:	e7df      	b.n	8005502 <HAL_PCD_EP_DB_Transmit+0x362>
          ep->xfer_len_db = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8005546:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 800554a:	460b      	mov	r3, r1
 800554c:	e7d9      	b.n	8005502 <HAL_PCD_EP_DB_Transmit+0x362>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800554e:	b98b      	cbnz	r3, 8005574 <HAL_PCD_EP_DB_Transmit+0x3d4>
 8005550:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8005554:	b289      	uxth	r1, r1
 8005556:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800555a:	b289      	uxth	r1, r1
 800555c:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8005560:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8005564:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005568:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800556c:	b289      	uxth	r1, r1
 800556e:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8005572:	e00b      	b.n	800558c <HAL_PCD_EP_DB_Transmit+0x3ec>
 8005574:	0859      	lsrs	r1, r3, #1
 8005576:	f013 0f01 	tst.w	r3, #1
 800557a:	d000      	beq.n	800557e <HAL_PCD_EP_DB_Transmit+0x3de>
 800557c:	3101      	adds	r1, #1
 800557e:	0289      	lsls	r1, r1, #10
 8005580:	b289      	uxth	r1, r1
 8005582:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8005586:	e001      	b.n	800558c <HAL_PCD_EP_DB_Transmit+0x3ec>
 8005588:	2a01      	cmp	r2, #1
 800558a:	d006      	beq.n	800559a <HAL_PCD_EP_DB_Transmit+0x3fa>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800558c:	b29b      	uxth	r3, r3
 800558e:	8962      	ldrh	r2, [r4, #10]
 8005590:	6961      	ldr	r1, [r4, #20]
 8005592:	6828      	ldr	r0, [r5, #0]
 8005594:	f003 fb91 	bl	8008cba <USB_WritePMA>
 8005598:	e69c      	b.n	80052d4 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800559a:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800559e:	fa11 f282 	uxtah	r2, r1, r2
 80055a2:	7821      	ldrb	r1, [r4, #0]
 80055a4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80055a8:	b299      	uxth	r1, r3
 80055aa:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 80055ae:	e7ed      	b.n	800558c <HAL_PCD_EP_DB_Transmit+0x3ec>

080055b0 <PCD_EP_ISR_Handler>:
{
 80055b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055b4:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80055b6:	e0ca      	b.n	800574e <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80055b8:	8803      	ldrh	r3, [r0, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80055c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80055d0:	6829      	ldr	r1, [r5, #0]
 80055d2:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80055d6:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 80055da:	00d2      	lsls	r2, r2, #3
 80055dc:	fa12 f383 	uxtah	r3, r2, r3
 80055e0:	440b      	add	r3, r1
 80055e2:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80055e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055ea:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80055ec:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80055ee:	4413      	add	r3, r2
 80055f0:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80055f2:	2100      	movs	r1, #0
 80055f4:	4628      	mov	r0, r5
 80055f6:	f005 f9d9 	bl	800a9ac <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80055fa:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 80a5 	beq.w	800574e <PCD_EP_ISR_Handler+0x19e>
 8005604:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	f040 80a1 	bne.w	800574e <PCD_EP_ISR_Handler+0x19e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800560c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8005610:	682a      	ldr	r2, [r5, #0]
 8005612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005616:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8005620:	e095      	b.n	800574e <PCD_EP_ISR_Handler+0x19e>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005622:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005626:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 800562a:	00d2      	lsls	r2, r2, #3
 800562c:	fa12 f383 	uxtah	r3, r2, r3
 8005630:	4403      	add	r3, r0
 8005632:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8005636:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800563a:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800563e:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8005642:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 8005646:	f003 fefc 	bl	8009442 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800564a:	682a      	ldr	r2, [r5, #0]
 800564c:	8813      	ldrh	r3, [r2, #0]
 800564e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005652:	051b      	lsls	r3, r3, #20
 8005654:	0d1b      	lsrs	r3, r3, #20
 8005656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800565a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800565c:	4628      	mov	r0, r5
 800565e:	f005 f991 	bl	800a984 <HAL_PCD_SetupStageCallback>
 8005662:	e074      	b.n	800574e <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005664:	b989      	cbnz	r1, 800568a <PCD_EP_ISR_Handler+0xda>
 8005666:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800566a:	b292      	uxth	r2, r2
 800566c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005670:	b292      	uxth	r2, r2
 8005672:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005676:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800567a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800567e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005682:	b292      	uxth	r2, r2
 8005684:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005688:	e0bf      	b.n	800580a <PCD_EP_ISR_Handler+0x25a>
 800568a:	084a      	lsrs	r2, r1, #1
 800568c:	f011 0f01 	tst.w	r1, #1
 8005690:	d000      	beq.n	8005694 <PCD_EP_ISR_Handler+0xe4>
 8005692:	3201      	adds	r2, #1
 8005694:	0292      	lsls	r2, r2, #10
 8005696:	b292      	uxth	r2, r2
 8005698:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800569c:	e0b5      	b.n	800580a <PCD_EP_ISR_Handler+0x25a>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800569e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80056a2:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80056a4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80056a8:	f040 80be 	bne.w	8005828 <PCD_EP_ISR_Handler+0x278>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80056ac:	f016 0f80 	tst.w	r6, #128	; 0x80
 80056b0:	d04d      	beq.n	800574e <PCD_EP_ISR_Handler+0x19e>
        ep = &hpcd->IN_ep[epindex];
 80056b2:	1c62      	adds	r2, r4, #1
 80056b4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80056b8:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80056bc:	6828      	ldr	r0, [r5, #0]
 80056be:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80056c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->type != EP_TYPE_BULK)
 80056da:	78cb      	ldrb	r3, [r1, #3]
 80056dc:	2b02      	cmp	r3, #2
 80056de:	f000 81a7 	beq.w	8005a30 <PCD_EP_ISR_Handler+0x480>
          ep->xfer_len = 0U;
 80056e2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80056e6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80056ea:	2200      	movs	r2, #0
 80056ec:	641a      	str	r2, [r3, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 80056ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056f2:	b323      	cbz	r3, 800573e <PCD_EP_ISR_Handler+0x18e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80056f4:	f016 0f40 	tst.w	r6, #64	; 0x40
 80056f8:	f000 8163 	beq.w	80059c2 <PCD_EP_ISR_Handler+0x412>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056fc:	784b      	ldrb	r3, [r1, #1]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f040 814c 	bne.w	800599c <PCD_EP_ISR_Handler+0x3ec>
 8005704:	682a      	ldr	r2, [r5, #0]
 8005706:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800570a:	fa12 f383 	uxtah	r3, r2, r3
 800570e:	1c62      	adds	r2, r4, #1
 8005710:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005714:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8005718:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800571c:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8005720:	b292      	uxth	r2, r2
 8005722:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005726:	b292      	uxth	r2, r2
 8005728:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800572c:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8005730:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005734:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005738:	b292      	uxth	r2, r2
 800573a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800573e:	3401      	adds	r4, #1
 8005740:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005744:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 8005748:	4628      	mov	r0, r5
 800574a:	f005 f92f 	bl	800a9ac <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800574e:	6828      	ldr	r0, [r5, #0]
 8005750:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8005754:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005758:	f000 81ae 	beq.w	8005ab8 <PCD_EP_ISR_Handler+0x508>
    wIstr = hpcd->Instance->ISTR;
 800575c:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8005760:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8005762:	f014 040f 	ands.w	r4, r4, #15
 8005766:	d19a      	bne.n	800569e <PCD_EP_ISR_Handler+0xee>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005768:	f013 0f10 	tst.w	r3, #16
 800576c:	f43f af24 	beq.w	80055b8 <PCD_EP_ISR_Handler+0x8>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005770:	8803      	ldrh	r3, [r0, #0]
 8005772:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005774:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005778:	f47f af53 	bne.w	8005622 <PCD_EP_ISR_Handler+0x72>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800577c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005780:	d0e5      	beq.n	800574e <PCD_EP_ISR_Handler+0x19e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005782:	8803      	ldrh	r3, [r0, #0]
 8005784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005788:	051b      	lsls	r3, r3, #20
 800578a:	0d1b      	lsrs	r3, r3, #20
 800578c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005790:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005792:	6828      	ldr	r0, [r5, #0]
 8005794:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005798:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 800579c:	00d2      	lsls	r2, r2, #3
 800579e:	fa12 f383 	uxtah	r3, r2, r3
 80057a2:	4403      	add	r3, r0
 80057a4:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80057a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057ac:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80057b0:	b18b      	cbz	r3, 80057d6 <PCD_EP_ISR_Handler+0x226>
 80057b2:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 80057b6:	b171      	cbz	r1, 80057d6 <PCD_EP_ISR_Handler+0x226>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80057b8:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 80057bc:	f003 fe41 	bl	8009442 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80057c0:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 80057c4:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 80057c8:	4413      	add	r3, r2
 80057ca:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80057ce:	2100      	movs	r1, #0
 80057d0:	4628      	mov	r0, r5
 80057d2:	f005 f8df 	bl	800a994 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80057d6:	682b      	ldr	r3, [r5, #0]
 80057d8:	881a      	ldrh	r2, [r3, #0]
 80057da:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80057de:	d1b6      	bne.n	800574e <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80057e0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80057e4:	fa13 f382 	uxtah	r3, r3, r2
 80057e8:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 80057ec:	293e      	cmp	r1, #62	; 0x3e
 80057ee:	f67f af39 	bls.w	8005664 <PCD_EP_ISR_Handler+0xb4>
 80057f2:	094a      	lsrs	r2, r1, #5
 80057f4:	f011 0f1f 	tst.w	r1, #31
 80057f8:	d100      	bne.n	80057fc <PCD_EP_ISR_Handler+0x24c>
 80057fa:	3a01      	subs	r2, #1
 80057fc:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8005800:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005804:	b292      	uxth	r2, r2
 8005806:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800580a:	682a      	ldr	r2, [r5, #0]
 800580c:	8813      	ldrh	r3, [r2, #0]
 800580e:	b29b      	uxth	r3, r3
 8005810:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005818:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800581c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005824:	8013      	strh	r3, [r2, #0]
 8005826:	e792      	b.n	800574e <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005828:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800582c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005830:	051b      	lsls	r3, r3, #20
 8005832:	0d1b      	lsrs	r3, r3, #20
 8005834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005838:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 800583c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005840:	00c9      	lsls	r1, r1, #3
 8005842:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005846:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 800584a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800584e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005852:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8005856:	2b00      	cmp	r3, #0
 8005858:	d140      	bne.n	80058dc <PCD_EP_ISR_Handler+0x32c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800585a:	6828      	ldr	r0, [r5, #0]
 800585c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005860:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005864:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005868:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 800586c:	00d2      	lsls	r2, r2, #3
 800586e:	fa12 f383 	uxtah	r3, r2, r3
 8005872:	4403      	add	r3, r0
 8005874:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8005878:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 800587c:	bb17      	cbnz	r7, 80058c4 <PCD_EP_ISR_Handler+0x314>
        ep->xfer_count += count;
 800587e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005882:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005886:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800588a:	443a      	add	r2, r7
 800588c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8005890:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8005894:	443a      	add	r2, r7
 8005896:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800589a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800589e:	b13b      	cbz	r3, 80058b0 <PCD_EP_ISR_Handler+0x300>
 80058a0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80058a4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80058a8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80058ac:	429f      	cmp	r7, r3
 80058ae:	d270      	bcs.n	8005992 <PCD_EP_ISR_Handler+0x3e2>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80058b0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80058b4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80058b8:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80058bc:	4628      	mov	r0, r5
 80058be:	f005 f869 	bl	800a994 <HAL_PCD_DataOutStageCallback>
 80058c2:	e6f3      	b.n	80056ac <PCD_EP_ISR_Handler+0xfc>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80058c4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80058c8:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80058cc:	463b      	mov	r3, r7
 80058ce:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 80058d2:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80058d6:	f003 fdb4 	bl	8009442 <USB_ReadPMA>
 80058da:	e7d0      	b.n	800587e <PCD_EP_ISR_Handler+0x2ce>
          if (ep->type == EP_TYPE_BULK)
 80058dc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80058e0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80058e4:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d033      	beq.n	8005954 <PCD_EP_ISR_Handler+0x3a4>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80058ec:	6829      	ldr	r1, [r5, #0]
 80058ee:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80058f2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80058f6:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 80058fa:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005910:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005914:	6828      	ldr	r0, [r5, #0]
 8005916:	f892 3168 	ldrb.w	r3, [r2, #360]	; 0x168
 800591a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800591e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005922:	d01e      	beq.n	8005962 <PCD_EP_ISR_Handler+0x3b2>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005924:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	fa13 f382 	uxtah	r3, r3, r2
 800592e:	4403      	add	r3, r0
 8005930:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	; 0x402
 8005934:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8005938:	2f00      	cmp	r7, #0
 800593a:	d0a0      	beq.n	800587e <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800593c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005940:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005944:	463b      	mov	r3, r7
 8005946:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 800594a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800594e:	f003 fd78 	bl	8009442 <USB_ReadPMA>
 8005952:	e794      	b.n	800587e <PCD_EP_ISR_Handler+0x2ce>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005954:	4632      	mov	r2, r6
 8005956:	4641      	mov	r1, r8
 8005958:	4628      	mov	r0, r5
 800595a:	f7ff fb0e 	bl	8004f7a <HAL_PCD_EP_DB_Receive>
 800595e:	4607      	mov	r7, r0
 8005960:	e78d      	b.n	800587e <PCD_EP_ISR_Handler+0x2ce>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005962:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	fa13 f382 	uxtah	r3, r3, r2
 800596c:	4403      	add	r3, r0
 800596e:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8005972:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8005976:	2f00      	cmp	r7, #0
 8005978:	d081      	beq.n	800587e <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800597a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800597e:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005982:	463b      	mov	r3, r7
 8005984:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8005988:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800598c:	f003 fd59 	bl	8009442 <USB_ReadPMA>
 8005990:	e775      	b.n	800587e <PCD_EP_ISR_Handler+0x2ce>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005992:	4641      	mov	r1, r8
 8005994:	6828      	ldr	r0, [r5, #0]
 8005996:	f003 f9a4 	bl	8008ce2 <USB_EPStartXfer>
 800599a:	e687      	b.n	80056ac <PCD_EP_ISR_Handler+0xfc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800599c:	2b01      	cmp	r3, #1
 800599e:	f47f aece 	bne.w	800573e <PCD_EP_ISR_Handler+0x18e>
 80059a2:	682a      	ldr	r2, [r5, #0]
 80059a4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80059a8:	fa12 f383 	uxtah	r3, r2, r3
 80059ac:	1c62      	adds	r2, r4, #1
 80059ae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80059b2:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 80059b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059ba:	2200      	movs	r2, #0
 80059bc:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80059c0:	e6bd      	b.n	800573e <PCD_EP_ISR_Handler+0x18e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059c2:	6829      	ldr	r1, [r5, #0]
 80059c4:	1c63      	adds	r3, r4, #1
 80059c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80059ca:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80059ce:	785a      	ldrb	r2, [r3, #1]
 80059d0:	b9e2      	cbnz	r2, 8005a0c <PCD_EP_ISR_Handler+0x45c>
 80059d2:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80059d6:	fa11 f383 	uxtah	r3, r1, r3
 80059da:	1c62      	adds	r2, r4, #1
 80059dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80059e0:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 80059e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059e8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80059ec:	b292      	uxth	r2, r2
 80059ee:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80059f2:	b292      	uxth	r2, r2
 80059f4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80059f8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80059fc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005a00:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005a04:	b292      	uxth	r2, r2
 8005a06:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005a0a:	e698      	b.n	800573e <PCD_EP_ISR_Handler+0x18e>
 8005a0c:	2a01      	cmp	r2, #1
 8005a0e:	f47f ae96 	bne.w	800573e <PCD_EP_ISR_Handler+0x18e>
 8005a12:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8005a16:	fa11 f383 	uxtah	r3, r1, r3
 8005a1a:	1c62      	adds	r2, r4, #1
 8005a1c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005a20:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8005a24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005a2e:	e686      	b.n	800573e <PCD_EP_ISR_Handler+0x18e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005a30:	f416 7f80 	tst.w	r6, #256	; 0x100
 8005a34:	d13b      	bne.n	8005aae <PCD_EP_ISR_Handler+0x4fe>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005a36:	6828      	ldr	r0, [r5, #0]
 8005a38:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005a3c:	1c62      	adds	r2, r4, #1
 8005a3e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005a42:	f815 6032 	ldrb.w	r6, [r5, r2, lsl #3]
 8005a46:	00f2      	lsls	r2, r6, #3
 8005a48:	fa12 f383 	uxtah	r3, r2, r3
 8005a4c:	4403      	add	r3, r0
 8005a4e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8005a52:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 8005a56:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005a5a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005a5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d910      	bls.n	8005a86 <PCD_EP_ISR_Handler+0x4d6>
              ep->xfer_len -= TxPctSize;
 8005a64:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 8005a68:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 8005a6c:	1ad2      	subs	r2, r2, r3
 8005a6e:	643a      	str	r2, [r7, #64]	; 0x40
            if (ep->xfer_len == 0U)
 8005a70:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005a74:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005a78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a7a:	b95a      	cbnz	r2, 8005a94 <PCD_EP_ISR_Handler+0x4e4>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a7c:	4631      	mov	r1, r6
 8005a7e:	4628      	mov	r0, r5
 8005a80:	f004 ff94 	bl	800a9ac <HAL_PCD_DataInStageCallback>
 8005a84:	e663      	b.n	800574e <PCD_EP_ISR_Handler+0x19e>
              ep->xfer_len = 0U;
 8005a86:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005a8a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005a8e:	2700      	movs	r7, #0
 8005a90:	6417      	str	r7, [r2, #64]	; 0x40
 8005a92:	e7ed      	b.n	8005a70 <PCD_EP_ISR_Handler+0x4c0>
              ep->xfer_buff += TxPctSize;
 8005a94:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005a98:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005a9c:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8005a9e:	441e      	add	r6, r3
 8005aa0:	63d6      	str	r6, [r2, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8005aa2:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8005aa4:	4423      	add	r3, r4
 8005aa6:	6453      	str	r3, [r2, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005aa8:	f003 f91b 	bl	8008ce2 <USB_EPStartXfer>
 8005aac:	e64f      	b.n	800574e <PCD_EP_ISR_Handler+0x19e>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005aae:	4632      	mov	r2, r6
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	f7ff fb75 	bl	80051a0 <HAL_PCD_EP_DB_Transmit>
 8005ab6:	e64a      	b.n	800574e <PCD_EP_ISR_Handler+0x19e>
}
 8005ab8:	2000      	movs	r0, #0
 8005aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005abe <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8005abe:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d00d      	beq.n	8005ae2 <HAL_PCD_SetAddress+0x24>
{
 8005ac6:	b510      	push	{r4, lr}
 8005ac8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005aca:	2301      	movs	r3, #1
 8005acc:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005ad0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005ad4:	6800      	ldr	r0, [r0, #0]
 8005ad6:	f003 f8db 	bl	8008c90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005ada:	2000      	movs	r0, #0
 8005adc:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005ae0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8005ae2:	2002      	movs	r0, #2
}
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_PCD_IRQHandler>:
{
 8005ae6:	b510      	push	{r4, lr}
 8005ae8:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005aea:	6800      	ldr	r0, [r0, #0]
 8005aec:	f003 f8e1 	bl	8008cb2 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005af0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8005af4:	d123      	bne.n	8005b3e <HAL_PCD_IRQHandler+0x58>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005af6:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8005afa:	d124      	bne.n	8005b46 <HAL_PCD_IRQHandler+0x60>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005afc:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8005b00:	d132      	bne.n	8005b68 <HAL_PCD_IRQHandler+0x82>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005b02:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8005b06:	d139      	bne.n	8005b7c <HAL_PCD_IRQHandler+0x96>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005b08:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8005b0c:	d140      	bne.n	8005b90 <HAL_PCD_IRQHandler+0xaa>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005b0e:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8005b12:	d167      	bne.n	8005be4 <HAL_PCD_IRQHandler+0xfe>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005b14:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005b18:	f040 8081 	bne.w	8005c1e <HAL_PCD_IRQHandler+0x138>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005b1c:	f410 7f00 	tst.w	r0, #512	; 0x200
 8005b20:	f040 80ad 	bne.w	8005c7e <HAL_PCD_IRQHandler+0x198>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005b24:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005b28:	d027      	beq.n	8005b7a <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005b2a:	6822      	ldr	r2, [r4, #0]
 8005b2c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8005b3c:	e01d      	b.n	8005b7a <HAL_PCD_IRQHandler+0x94>
    (void)PCD_EP_ISR_Handler(hpcd);
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f7ff fd36 	bl	80055b0 <PCD_EP_ISR_Handler>
    return;
 8005b44:	e019      	b.n	8005b7a <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005b46:	6822      	ldr	r2, [r4, #0]
 8005b48:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f004 ff38 	bl	800a9ce <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005b5e:	2100      	movs	r1, #0
 8005b60:	4620      	mov	r0, r4
 8005b62:	f7ff ffac 	bl	8005abe <HAL_PCD_SetAddress>
    return;
 8005b66:	e008      	b.n	8005b7a <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005b68:	6822      	ldr	r2, [r4, #0]
 8005b6a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8005b7a:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005b7c:	6822      	ldr	r2, [r4, #0]
 8005b7e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8005b8e:	e7f4      	b.n	8005b7a <HAL_PCD_IRQHandler+0x94>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005b90:	6822      	ldr	r2, [r4, #0]
 8005b92:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	f023 0304 	bic.w	r3, r3, #4
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005ba2:	6822      	ldr	r2, [r4, #0]
 8005ba4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	f023 0308 	bic.w	r3, r3, #8
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8005bb4:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d00c      	beq.n	8005bd6 <HAL_PCD_IRQHandler+0xf0>
    HAL_PCD_ResumeCallback(hpcd);
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f004 ff29 	bl	800aa14 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005bc2:	6822      	ldr	r2, [r4, #0]
 8005bc4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8005bd4:	e7d1      	b.n	8005b7a <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f004 ffd1 	bl	800ab84 <HAL_PCDEx_LPM_Callback>
 8005be2:	e7eb      	b.n	8005bbc <HAL_PCD_IRQHandler+0xd6>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005be4:	6822      	ldr	r2, [r4, #0]
 8005be6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	f043 0308 	orr.w	r3, r3, #8
 8005bf0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005bf4:	6822      	ldr	r2, [r4, #0]
 8005bf6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005c06:	6822      	ldr	r2, [r4, #0]
 8005c08:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	f043 0304 	orr.w	r3, r3, #4
 8005c12:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8005c16:	4620      	mov	r0, r4
 8005c18:	f004 feec 	bl	800a9f4 <HAL_PCD_SuspendCallback>
    return;
 8005c1c:	e7ad      	b.n	8005b7a <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005c1e:	6822      	ldr	r2, [r4, #0]
 8005c20:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005c30:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8005c34:	b9fb      	cbnz	r3, 8005c76 <HAL_PCD_IRQHandler+0x190>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005c36:	6822      	ldr	r2, [r4, #0]
 8005c38:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f043 0304 	orr.w	r3, r3, #4
 8005c42:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005c46:	6822      	ldr	r2, [r4, #0]
 8005c48:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	f043 0308 	orr.w	r3, r3, #8
 8005c52:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8005c56:	2101      	movs	r1, #1
 8005c58:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005c62:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8005c66:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8005c6a:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f004 ff88 	bl	800ab84 <HAL_PCDEx_LPM_Callback>
 8005c74:	e781      	b.n	8005b7a <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_SuspendCallback(hpcd);
 8005c76:	4620      	mov	r0, r4
 8005c78:	f004 febc 	bl	800a9f4 <HAL_PCD_SuspendCallback>
    return;
 8005c7c:	e77d      	b.n	8005b7a <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005c7e:	6822      	ldr	r2, [r4, #0]
 8005c80:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8005c90:	4620      	mov	r0, r4
 8005c92:	f004 fe96 	bl	800a9c2 <HAL_PCD_SOFCallback>
    return;
 8005c96:	e770      	b.n	8005b7a <HAL_PCD_IRQHandler+0x94>

08005c98 <HAL_PCD_EP_Open>:
{
 8005c98:	b510      	push	{r4, lr}
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8005c9e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005ca2:	d12a      	bne.n	8005cfa <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ca4:	f001 0007 	and.w	r0, r1, #7
 8005ca8:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8005cac:	00c9      	lsls	r1, r1, #3
 8005cae:	f501 7eb4 	add.w	lr, r1, #360	; 0x168
 8005cb2:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 8005cb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005cba:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8005cbe:	f04f 0e00 	mov.w	lr, #0
 8005cc2:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cc6:	f00c 0c07 	and.w	ip, ip, #7
 8005cca:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 8005cce:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8005cd0:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8005cd2:	784a      	ldrb	r2, [r1, #1]
 8005cd4:	b10a      	cbz	r2, 8005cda <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8005cd6:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d019      	beq.n	8005d12 <HAL_PCD_EP_Open+0x7a>
  __HAL_LOCK(hpcd);
 8005cde:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d018      	beq.n	8005d18 <HAL_PCD_EP_Open+0x80>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005cec:	6820      	ldr	r0, [r4, #0]
 8005cee:	f002 fca1 	bl	8008634 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005cf8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cfa:	f001 0007 	and.w	r0, r1, #7
 8005cfe:	3001      	adds	r0, #1
 8005d00:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8005d04:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 8005d08:	f04f 0e01 	mov.w	lr, #1
 8005d0c:	f881 e001 	strb.w	lr, [r1, #1]
 8005d10:	e7d9      	b.n	8005cc6 <HAL_PCD_EP_Open+0x2e>
    ep->data_pid_start = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	710b      	strb	r3, [r1, #4]
 8005d16:	e7e2      	b.n	8005cde <HAL_PCD_EP_Open+0x46>
  __HAL_LOCK(hpcd);
 8005d18:	2002      	movs	r0, #2
 8005d1a:	e7ed      	b.n	8005cf8 <HAL_PCD_EP_Open+0x60>

08005d1c <HAL_PCD_EP_Close>:
{
 8005d1c:	b510      	push	{r4, lr}
 8005d1e:	4604      	mov	r4, r0
 8005d20:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8005d22:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005d26:	d11f      	bne.n	8005d68 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d28:	f001 0207 	and.w	r2, r1, #7
 8005d2c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005d30:	00c9      	lsls	r1, r1, #3
 8005d32:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005d36:	4401      	add	r1, r0
    ep->is_in = 0U;
 8005d38:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005d3c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8005d40:	2000      	movs	r0, #0
 8005d42:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8005d4c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d013      	beq.n	8005d7c <HAL_PCD_EP_Close+0x60>
 8005d54:	2301      	movs	r3, #1
 8005d56:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005d5a:	6820      	ldr	r0, [r4, #0]
 8005d5c:	f002 fe37 	bl	80089ce <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d60:	2000      	movs	r0, #0
 8005d62:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005d66:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d68:	f001 0207 	and.w	r2, r1, #7
 8005d6c:	3201      	adds	r2, #1
 8005d6e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005d72:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8005d76:	2001      	movs	r0, #1
 8005d78:	7048      	strb	r0, [r1, #1]
 8005d7a:	e7e4      	b.n	8005d46 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8005d7c:	2002      	movs	r0, #2
 8005d7e:	e7f2      	b.n	8005d66 <HAL_PCD_EP_Close+0x4a>

08005d80 <HAL_PCD_EP_Receive>:
{
 8005d80:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d82:	f001 0407 	and.w	r4, r1, #7
 8005d86:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005d8a:	00c9      	lsls	r1, r1, #3
 8005d8c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005d90:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8005d92:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8005d96:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8005d9a:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 8005d9e:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
  ep->is_in = 0U;
 8005da8:	f88c 3169 	strb.w	r3, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dac:	f88c 4168 	strb.w	r4, [ip, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005db0:	b924      	cbnz	r4, 8005dbc <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005db2:	6800      	ldr	r0, [r0, #0]
 8005db4:	f002 ff95 	bl	8008ce2 <USB_EPStartXfer>
}
 8005db8:	2000      	movs	r0, #0
 8005dba:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005dbc:	6800      	ldr	r0, [r0, #0]
 8005dbe:	f002 ff90 	bl	8008ce2 <USB_EPStartXfer>
 8005dc2:	e7f9      	b.n	8005db8 <HAL_PCD_EP_Receive+0x38>

08005dc4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005dc4:	f001 0107 	and.w	r1, r1, #7
 8005dc8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005dcc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8005dd0:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8005dd4:	4770      	bx	lr

08005dd6 <HAL_PCD_EP_Transmit>:
{
 8005dd6:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dd8:	f001 0407 	and.w	r4, r1, #7
 8005ddc:	f104 0c01 	add.w	ip, r4, #1
 8005de0:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8005de4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 8005de8:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
 8005dec:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8005df0:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
  ep->xfer_len = len;
 8005df4:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
  ep->xfer_len_db = len;
 8005dfe:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
  ep->xfer_count = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44
  ep->is_in = 1U;
 8005e08:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e0a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8005e0e:	f800 403c 	strb.w	r4, [r0, ip, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e12:	b924      	cbnz	r4, 8005e1e <HAL_PCD_EP_Transmit+0x48>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005e14:	6800      	ldr	r0, [r0, #0]
 8005e16:	f002 ff64 	bl	8008ce2 <USB_EPStartXfer>
}
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005e1e:	6800      	ldr	r0, [r0, #0]
 8005e20:	f002 ff5f 	bl	8008ce2 <USB_EPStartXfer>
 8005e24:	e7f9      	b.n	8005e1a <HAL_PCD_EP_Transmit+0x44>

08005e26 <HAL_PCD_EP_SetStall>:
{
 8005e26:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005e28:	f001 0207 	and.w	r2, r1, #7
 8005e2c:	6841      	ldr	r1, [r0, #4]
 8005e2e:	428a      	cmp	r2, r1
 8005e30:	d82a      	bhi.n	8005e88 <HAL_PCD_EP_SetStall+0x62>
{
 8005e32:	b510      	push	{r4, lr}
 8005e34:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8005e36:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e3a:	d11d      	bne.n	8005e78 <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 8005e3c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005e40:	00c9      	lsls	r1, r1, #3
 8005e42:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005e46:	4401      	add	r1, r0
    ep->is_in = 0U;
 8005e48:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e4c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005e50:	2000      	movs	r0, #0
 8005e52:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8005e56:	2301      	movs	r3, #1
 8005e58:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e5a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8005e5c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d013      	beq.n	8005e8c <HAL_PCD_EP_SetStall+0x66>
 8005e64:	2301      	movs	r3, #1
 8005e66:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e6a:	6820      	ldr	r0, [r4, #0]
 8005e6c:	f002 fe9a 	bl	8008ba4 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8005e70:	2000      	movs	r0, #0
 8005e72:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005e76:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e78:	1c53      	adds	r3, r2, #1
 8005e7a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005e7e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8005e82:	2001      	movs	r0, #1
 8005e84:	7048      	strb	r0, [r1, #1]
 8005e86:	e7e6      	b.n	8005e56 <HAL_PCD_EP_SetStall+0x30>
    return HAL_ERROR;
 8005e88:	2001      	movs	r0, #1
}
 8005e8a:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8005e8c:	2002      	movs	r0, #2
 8005e8e:	e7f2      	b.n	8005e76 <HAL_PCD_EP_SetStall+0x50>

08005e90 <HAL_PCD_EP_ClrStall>:
{
 8005e90:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005e92:	f001 010f 	and.w	r1, r1, #15
 8005e96:	6842      	ldr	r2, [r0, #4]
 8005e98:	4291      	cmp	r1, r2
 8005e9a:	d830      	bhi.n	8005efe <HAL_PCD_EP_ClrStall+0x6e>
{
 8005e9c:	b510      	push	{r4, lr}
 8005e9e:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8005ea0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ea4:	d121      	bne.n	8005eea <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ea6:	f003 0207 	and.w	r2, r3, #7
 8005eaa:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005eae:	00c9      	lsls	r1, r1, #3
 8005eb0:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005eb4:	4401      	add	r1, r0
    ep->is_in = 0U;
 8005eb6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005eba:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8005ece:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d015      	beq.n	8005f02 <HAL_PCD_EP_ClrStall+0x72>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005edc:	6820      	ldr	r0, [r4, #0]
 8005ede:	f002 fe86 	bl	8008bee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005ee8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eea:	f003 0207 	and.w	r2, r3, #7
 8005eee:	3201      	adds	r2, #1
 8005ef0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005ef4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8005ef8:	2001      	movs	r0, #1
 8005efa:	7048      	strb	r0, [r1, #1]
 8005efc:	e7e2      	b.n	8005ec4 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8005efe:	2001      	movs	r0, #1
}
 8005f00:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8005f02:	2002      	movs	r0, #2
 8005f04:	e7f0      	b.n	8005ee8 <HAL_PCD_EP_ClrStall+0x58>

08005f06 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005f06:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005f0a:	d00b      	beq.n	8005f24 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f0c:	f001 0107 	and.w	r1, r1, #7
 8005f10:	3101      	adds	r1, #1
 8005f12:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005f16:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005f1a:	b952      	cbnz	r2, 8005f32 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005f1c:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005f1e:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8005f20:	2000      	movs	r0, #0
 8005f22:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8005f24:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005f28:	00c9      	lsls	r1, r1, #3
 8005f2a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005f2e:	4401      	add	r1, r0
 8005f30:	e7f3      	b.n	8005f1a <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8005f32:	2201      	movs	r2, #1
 8005f34:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005f36:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005f38:	0c1b      	lsrs	r3, r3, #16
 8005f3a:	814b      	strh	r3, [r1, #10]
 8005f3c:	e7f0      	b.n	8005f20 <HAL_PCDEx_PMAConfig+0x1a>

08005f3e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f3e:	4603      	mov	r3, r0

  USB_TypeDef *USBx = hpcd->Instance;
 8005f40:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 8005f42:	2101      	movs	r1, #1
 8005f44:	f8c0 12e8 	str.w	r1, [r0, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005f48:	2000      	movs	r0, #0
 8005f4a:	f883 02e0 	strb.w	r0, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005f4e:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	430b      	orrs	r3, r1
 8005f56:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005f5a:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	f043 0302 	orr.w	r3, r3, #2
 8005f64:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8005f68:	4770      	bx	lr
	...

08005f6c <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d136      	bne.n	8005fde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f70:	4b3e      	ldr	r3, [pc, #248]	; (800606c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f7c:	d008      	beq.n	8005f90 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f7e:	4a3b      	ldr	r2, [pc, #236]	; (800606c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8005f80:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8005f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f90:	4a36      	ldr	r2, [pc, #216]	; (800606c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8005f92:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8005f96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f9a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f9e:	6813      	ldr	r3, [r2, #0]
 8005fa0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005fa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fa8:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005faa:	4b31      	ldr	r3, [pc, #196]	; (8006070 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2232      	movs	r2, #50	; 0x32
 8005fb0:	fb02 f303 	mul.w	r3, r2, r3
 8005fb4:	4a2f      	ldr	r2, [pc, #188]	; (8006074 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8005fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fba:	0c9b      	lsrs	r3, r3, #18
 8005fbc:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fbe:	e000      	b.n	8005fc2 <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8005fc0:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fc2:	4a2a      	ldr	r2, [pc, #168]	; (800606c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8005fc4:	6952      	ldr	r2, [r2, #20]
 8005fc6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005fca:	d001      	beq.n	8005fd0 <HAL_PWREx_ControlVoltageScaling+0x64>
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1f7      	bne.n	8005fc0 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fd0:	4b26      	ldr	r3, [pc, #152]	; (800606c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005fd8:	d144      	bne.n	8006064 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 8005fda:	2000      	movs	r0, #0
 8005fdc:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fde:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005fe2:	d008      	beq.n	8005ff6 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005fe4:	4a21      	ldr	r2, [pc, #132]	; (800606c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8005fe6:	6813      	ldr	r3, [r2, #0]
 8005fe8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005fec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ff0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ff6:	4b1d      	ldr	r3, [pc, #116]	; (800606c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006002:	d008      	beq.n	8006016 <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006004:	4a19      	ldr	r2, [pc, #100]	; (800606c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006006:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800600a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800600e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8006012:	2000      	movs	r0, #0
 8006014:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006016:	4a15      	ldr	r2, [pc, #84]	; (800606c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006018:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800601c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006020:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006024:	6813      	ldr	r3, [r2, #0]
 8006026:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800602a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800602e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006030:	4b0f      	ldr	r3, [pc, #60]	; (8006070 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2232      	movs	r2, #50	; 0x32
 8006036:	fb02 f303 	mul.w	r3, r2, r3
 800603a:	4a0e      	ldr	r2, [pc, #56]	; (8006074 <HAL_PWREx_ControlVoltageScaling+0x108>)
 800603c:	fba2 2303 	umull	r2, r3, r2, r3
 8006040:	0c9b      	lsrs	r3, r3, #18
 8006042:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006044:	e000      	b.n	8006048 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 8006046:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006048:	4a08      	ldr	r2, [pc, #32]	; (800606c <HAL_PWREx_ControlVoltageScaling+0x100>)
 800604a:	6952      	ldr	r2, [r2, #20]
 800604c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006050:	d001      	beq.n	8006056 <HAL_PWREx_ControlVoltageScaling+0xea>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f7      	bne.n	8006046 <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800605e:	d103      	bne.n	8006068 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8006060:	2000      	movs	r0, #0
 8006062:	4770      	bx	lr
        return HAL_TIMEOUT;
 8006064:	2003      	movs	r0, #3
 8006066:	4770      	bx	lr
        return HAL_TIMEOUT;
 8006068:	2003      	movs	r0, #3
}
 800606a:	4770      	bx	lr
 800606c:	40007000 	.word	0x40007000
 8006070:	20000000 	.word	0x20000000
 8006074:	431bde83 	.word	0x431bde83

08006078 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006078:	4a02      	ldr	r2, [pc, #8]	; (8006084 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800607a:	6893      	ldr	r3, [r2, #8]
 800607c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006080:	6093      	str	r3, [r2, #8]
}
 8006082:	4770      	bx	lr
 8006084:	40007000 	.word	0x40007000

08006088 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800608c:	4605      	mov	r5, r0
 800608e:	460f      	mov	r7, r1
 8006090:	4616      	mov	r6, r2
 8006092:	4699      	mov	r9, r3
 8006094:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006098:	682c      	ldr	r4, [r5, #0]
 800609a:	68a4      	ldr	r4, [r4, #8]
 800609c:	423c      	tst	r4, r7
 800609e:	bf14      	ite	ne
 80060a0:	f04f 0c01 	movne.w	ip, #1
 80060a4:	f04f 0c00 	moveq.w	ip, #0
 80060a8:	45b4      	cmp	ip, r6
 80060aa:	d014      	beq.n	80060d6 <QSPI_WaitFlagStateUntilTimeout+0x4e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ac:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80060b0:	d0f2      	beq.n	8006098 <QSPI_WaitFlagStateUntilTimeout+0x10>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b2:	f7fd f83d 	bl	8003130 <HAL_GetTick>
 80060b6:	eba0 0009 	sub.w	r0, r0, r9
 80060ba:	4540      	cmp	r0, r8
 80060bc:	d802      	bhi.n	80060c4 <QSPI_WaitFlagStateUntilTimeout+0x3c>
 80060be:	f1b8 0f00 	cmp.w	r8, #0
 80060c2:	d1e9      	bne.n	8006098 <QSPI_WaitFlagStateUntilTimeout+0x10>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80060c4:	2304      	movs	r3, #4
 80060c6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80060ca:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80060cc:	f043 0301 	orr.w	r3, r3, #1
 80060d0:	646b      	str	r3, [r5, #68]	; 0x44

        return HAL_ERROR;
 80060d2:	2001      	movs	r0, #1
 80060d4:	e000      	b.n	80060d8 <QSPI_WaitFlagStateUntilTimeout+0x50>
      }
    }
  }
  return HAL_OK;
 80060d6:	2000      	movs	r0, #0
}
 80060d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080060dc <HAL_QSPI_SetTimeout>:
  hqspi->Timeout = Timeout;
 80060dc:	6481      	str	r1, [r0, #72]	; 0x48
}
 80060de:	4770      	bx	lr

080060e0 <HAL_QSPI_Init>:
{
 80060e0:	b570      	push	{r4, r5, r6, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80060e6:	f7fd f823 	bl	8003130 <HAL_GetTick>
  if(hqspi == NULL)
 80060ea:	2c00      	cmp	r4, #0
 80060ec:	d04c      	beq.n	8006188 <HAL_QSPI_Init+0xa8>
 80060ee:	4606      	mov	r6, r0
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80060f0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d03c      	beq.n	8006172 <HAL_QSPI_Init+0x92>
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80060f8:	6825      	ldr	r5, [r4, #0]
 80060fa:	682a      	ldr	r2, [r5, #0]
 80060fc:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8006100:	68a1      	ldr	r1, [r4, #8]
 8006102:	3901      	subs	r1, #1
 8006104:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006108:	602a      	str	r2, [r5, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800610a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	4633      	mov	r3, r6
 8006110:	2200      	movs	r2, #0
 8006112:	2120      	movs	r1, #32
 8006114:	4620      	mov	r0, r4
 8006116:	f7ff ffb7 	bl	8006088 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800611a:	bb28      	cbnz	r0, 8006168 <HAL_QSPI_Init+0x88>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800611c:	6821      	ldr	r1, [r4, #0]
 800611e:	680b      	ldr	r3, [r1, #0]
 8006120:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006124:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006128:	6865      	ldr	r5, [r4, #4]
 800612a:	68e2      	ldr	r2, [r4, #12]
 800612c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8006130:	69e5      	ldr	r5, [r4, #28]
 8006132:	432a      	orrs	r2, r5
 8006134:	6a25      	ldr	r5, [r4, #32]
 8006136:	432a      	orrs	r2, r5
 8006138:	4313      	orrs	r3, r2
 800613a:	600b      	str	r3, [r1, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800613c:	6821      	ldr	r1, [r4, #0]
 800613e:	684a      	ldr	r2, [r1, #4]
 8006140:	4b12      	ldr	r3, [pc, #72]	; (800618c <HAL_QSPI_Init+0xac>)
 8006142:	4013      	ands	r3, r2
 8006144:	6925      	ldr	r5, [r4, #16]
 8006146:	6962      	ldr	r2, [r4, #20]
 8006148:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800614c:	69a5      	ldr	r5, [r4, #24]
 800614e:	432a      	orrs	r2, r5
 8006150:	4313      	orrs	r3, r2
 8006152:	604b      	str	r3, [r1, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8006154:	6822      	ldr	r2, [r4, #0]
 8006156:	6813      	ldr	r3, [r2, #0]
 8006158:	f043 0301 	orr.w	r3, r3, #1
 800615c:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800615e:	2300      	movs	r3, #0
 8006160:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8006162:	2301      	movs	r3, #1
 8006164:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8006168:	2300      	movs	r3, #0
 800616a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800616e:	b002      	add	sp, #8
 8006170:	bd70      	pop	{r4, r5, r6, pc}
    hqspi->Lock = HAL_UNLOCKED;
 8006172:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8006176:	4620      	mov	r0, r4
 8006178:	f7fc f822 	bl	80021c0 <HAL_QSPI_MspInit>
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800617c:	f241 3188 	movw	r1, #5000	; 0x1388
 8006180:	4620      	mov	r0, r4
 8006182:	f7ff ffab 	bl	80060dc <HAL_QSPI_SetTimeout>
 8006186:	e7b7      	b.n	80060f8 <HAL_QSPI_Init+0x18>
    return HAL_ERROR;
 8006188:	2001      	movs	r0, #1
 800618a:	e7f0      	b.n	800616e <HAL_QSPI_Init+0x8e>
 800618c:	ffe0f8fe 	.word	0xffe0f8fe

08006190 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006190:	4b12      	ldr	r3, [pc, #72]	; (80061dc <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006198:	68d8      	ldr	r0, [r3, #12]
 800619a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800619e:	1c43      	adds	r3, r0, #1

  switch (pllsource)
 80061a0:	2a03      	cmp	r2, #3
 80061a2:	d011      	beq.n	80061c8 <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061a4:	480e      	ldr	r0, [pc, #56]	; (80061e0 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 80061a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80061aa:	4b0c      	ldr	r3, [pc, #48]	; (80061dc <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80061b2:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061b6:	4b09      	ldr	r3, [pc, #36]	; (80061dc <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80061be:	3301      	adds	r3, #1
 80061c0:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 80061c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80061c6:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061c8:	4806      	ldr	r0, [pc, #24]	; (80061e4 <RCC_GetSysClockFreqFromPLLSource+0x54>)
 80061ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80061ce:	4b03      	ldr	r3, [pc, #12]	; (80061dc <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80061d6:	fb03 f000 	mul.w	r0, r3, r0
    break;
 80061da:	e7ec      	b.n	80061b6 <RCC_GetSysClockFreqFromPLLSource+0x26>
 80061dc:	40021000 	.word	0x40021000
 80061e0:	00f42400 	.word	0x00f42400
 80061e4:	007a1200 	.word	0x007a1200

080061e8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80061e8:	2800      	cmp	r0, #0
 80061ea:	f000 8254 	beq.w	8006696 <HAL_RCC_OscConfig+0x4ae>
{
 80061ee:	b570      	push	{r4, r5, r6, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061f4:	6803      	ldr	r3, [r0, #0]
 80061f6:	f013 0f01 	tst.w	r3, #1
 80061fa:	d037      	beq.n	800626c <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061fc:	4aa4      	ldr	r2, [pc, #656]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 80061fe:	6893      	ldr	r3, [r2, #8]
 8006200:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006204:	68d2      	ldr	r2, [r2, #12]
 8006206:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800620a:	2b0c      	cmp	r3, #12
 800620c:	d023      	beq.n	8006256 <HAL_RCC_OscConfig+0x6e>
 800620e:	2b08      	cmp	r3, #8
 8006210:	d023      	beq.n	800625a <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006212:	6863      	ldr	r3, [r4, #4]
 8006214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006218:	d04e      	beq.n	80062b8 <HAL_RCC_OscConfig+0xd0>
 800621a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800621e:	d051      	beq.n	80062c4 <HAL_RCC_OscConfig+0xdc>
 8006220:	4b9b      	ldr	r3, [pc, #620]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006230:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006232:	6863      	ldr	r3, [r4, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d052      	beq.n	80062de <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 8006238:	f7fc ff7a 	bl	8003130 <HAL_GetTick>
 800623c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800623e:	4b94      	ldr	r3, [pc, #592]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006246:	d111      	bne.n	800626c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006248:	f7fc ff72 	bl	8003130 <HAL_GetTick>
 800624c:	1b40      	subs	r0, r0, r5
 800624e:	2864      	cmp	r0, #100	; 0x64
 8006250:	d9f5      	bls.n	800623e <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8006252:	2003      	movs	r0, #3
 8006254:	e228      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006256:	2a03      	cmp	r2, #3
 8006258:	d1d9      	bne.n	800620e <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800625a:	4b8d      	ldr	r3, [pc, #564]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006262:	d003      	beq.n	800626c <HAL_RCC_OscConfig+0x84>
 8006264:	6863      	ldr	r3, [r4, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 8217 	beq.w	800669a <HAL_RCC_OscConfig+0x4b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	f013 0f02 	tst.w	r3, #2
 8006272:	d05d      	beq.n	8006330 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006274:	4a86      	ldr	r2, [pc, #536]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 8006276:	6893      	ldr	r3, [r2, #8]
 8006278:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800627c:	68d2      	ldr	r2, [r2, #12]
 800627e:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006282:	2b0c      	cmp	r3, #12
 8006284:	d03a      	beq.n	80062fc <HAL_RCC_OscConfig+0x114>
 8006286:	2b04      	cmp	r3, #4
 8006288:	d03a      	beq.n	8006300 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800628a:	68e3      	ldr	r3, [r4, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d075      	beq.n	800637c <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8006290:	4a7f      	ldr	r2, [pc, #508]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 8006292:	6813      	ldr	r3, [r2, #0]
 8006294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006298:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800629a:	f7fc ff49 	bl	8003130 <HAL_GetTick>
 800629e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062a0:	4b7b      	ldr	r3, [pc, #492]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80062a8:	d15f      	bne.n	800636a <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062aa:	f7fc ff41 	bl	8003130 <HAL_GetTick>
 80062ae:	1b40      	subs	r0, r0, r5
 80062b0:	2802      	cmp	r0, #2
 80062b2:	d9f5      	bls.n	80062a0 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 80062b4:	2003      	movs	r0, #3
 80062b6:	e1f7      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062b8:	4a75      	ldr	r2, [pc, #468]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 80062ba:	6813      	ldr	r3, [r2, #0]
 80062bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	e7b6      	b.n	8006232 <HAL_RCC_OscConfig+0x4a>
 80062c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062c8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	e7a9      	b.n	8006232 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 80062de:	f7fc ff27 	bl	8003130 <HAL_GetTick>
 80062e2:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062e4:	4b6a      	ldr	r3, [pc, #424]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80062ec:	d0be      	beq.n	800626c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062ee:	f7fc ff1f 	bl	8003130 <HAL_GetTick>
 80062f2:	1b40      	subs	r0, r0, r5
 80062f4:	2864      	cmp	r0, #100	; 0x64
 80062f6:	d9f5      	bls.n	80062e4 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 80062f8:	2003      	movs	r0, #3
 80062fa:	e1d5      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80062fc:	2a02      	cmp	r2, #2
 80062fe:	d1c2      	bne.n	8006286 <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006300:	4b63      	ldr	r3, [pc, #396]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006308:	d003      	beq.n	8006312 <HAL_RCC_OscConfig+0x12a>
 800630a:	68e3      	ldr	r3, [r4, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 81c6 	beq.w	800669e <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006312:	4a5f      	ldr	r2, [pc, #380]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 8006314:	6853      	ldr	r3, [r2, #4]
 8006316:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800631a:	6921      	ldr	r1, [r4, #16]
 800631c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006320:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006322:	4b5c      	ldr	r3, [pc, #368]	; (8006494 <HAL_RCC_OscConfig+0x2ac>)
 8006324:	6818      	ldr	r0, [r3, #0]
 8006326:	f7fc febf 	bl	80030a8 <HAL_InitTick>
 800632a:	2800      	cmp	r0, #0
 800632c:	f040 81b9 	bne.w	80066a2 <HAL_RCC_OscConfig+0x4ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	f013 0f08 	tst.w	r3, #8
 8006336:	d04c      	beq.n	80063d2 <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006338:	6963      	ldr	r3, [r4, #20]
 800633a:	b39b      	cbz	r3, 80063a4 <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 800633c:	4a54      	ldr	r2, [pc, #336]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 800633e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006342:	f043 0301 	orr.w	r3, r3, #1
 8006346:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800634a:	f7fc fef1 	bl	8003130 <HAL_GetTick>
 800634e:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006350:	4b4f      	ldr	r3, [pc, #316]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 8006352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006356:	f013 0f02 	tst.w	r3, #2
 800635a:	d13a      	bne.n	80063d2 <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800635c:	f7fc fee8 	bl	8003130 <HAL_GetTick>
 8006360:	1b40      	subs	r0, r0, r5
 8006362:	2802      	cmp	r0, #2
 8006364:	d9f4      	bls.n	8006350 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 8006366:	2003      	movs	r0, #3
 8006368:	e19e      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800636a:	4a49      	ldr	r2, [pc, #292]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 800636c:	6853      	ldr	r3, [r2, #4]
 800636e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006372:	6921      	ldr	r1, [r4, #16]
 8006374:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006378:	6053      	str	r3, [r2, #4]
 800637a:	e7d9      	b.n	8006330 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 800637c:	4a44      	ldr	r2, [pc, #272]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 800637e:	6813      	ldr	r3, [r2, #0]
 8006380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006384:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006386:	f7fc fed3 	bl	8003130 <HAL_GetTick>
 800638a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800638c:	4b40      	ldr	r3, [pc, #256]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006394:	d0cc      	beq.n	8006330 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006396:	f7fc fecb 	bl	8003130 <HAL_GetTick>
 800639a:	1b40      	subs	r0, r0, r5
 800639c:	2802      	cmp	r0, #2
 800639e:	d9f5      	bls.n	800638c <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 80063a0:	2003      	movs	r0, #3
 80063a2:	e181      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_LSI_DISABLE();
 80063a4:	4a3a      	ldr	r2, [pc, #232]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 80063a6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80063aa:	f023 0301 	bic.w	r3, r3, #1
 80063ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80063b2:	f7fc febd 	bl	8003130 <HAL_GetTick>
 80063b6:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063b8:	4b35      	ldr	r3, [pc, #212]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 80063ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063be:	f013 0f02 	tst.w	r3, #2
 80063c2:	d006      	beq.n	80063d2 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063c4:	f7fc feb4 	bl	8003130 <HAL_GetTick>
 80063c8:	1b40      	subs	r0, r0, r5
 80063ca:	2802      	cmp	r0, #2
 80063cc:	d9f4      	bls.n	80063b8 <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 80063ce:	2003      	movs	r0, #3
 80063d0:	e16a      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	f013 0f04 	tst.w	r3, #4
 80063d8:	f000 8081 	beq.w	80064de <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80063dc:	4b2c      	ldr	r3, [pc, #176]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 80063de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80063e4:	d136      	bne.n	8006454 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80063e6:	4b2a      	ldr	r3, [pc, #168]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 80063e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80063ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80063ee:	659a      	str	r2, [r3, #88]	; 0x58
 80063f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063f6:	9301      	str	r3, [sp, #4]
 80063f8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80063fa:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063fc:	4b26      	ldr	r3, [pc, #152]	; (8006498 <HAL_RCC_OscConfig+0x2b0>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006404:	d028      	beq.n	8006458 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006406:	68a3      	ldr	r3, [r4, #8]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d039      	beq.n	8006480 <HAL_RCC_OscConfig+0x298>
 800640c:	2b05      	cmp	r3, #5
 800640e:	d045      	beq.n	800649c <HAL_RCC_OscConfig+0x2b4>
 8006410:	4b1f      	ldr	r3, [pc, #124]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 8006412:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006416:	f022 0201 	bic.w	r2, r2, #1
 800641a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800641e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006422:	f022 0204 	bic.w	r2, r2, #4
 8006426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800642a:	68a3      	ldr	r3, [r4, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d043      	beq.n	80064b8 <HAL_RCC_OscConfig+0x2d0>
      tickstart = HAL_GetTick();
 8006430:	f7fc fe7e 	bl	8003130 <HAL_GetTick>
 8006434:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006436:	4b16      	ldr	r3, [pc, #88]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 8006438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643c:	f013 0f02 	tst.w	r3, #2
 8006440:	d14c      	bne.n	80064dc <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006442:	f7fc fe75 	bl	8003130 <HAL_GetTick>
 8006446:	1b80      	subs	r0, r0, r6
 8006448:	f241 3388 	movw	r3, #5000	; 0x1388
 800644c:	4298      	cmp	r0, r3
 800644e:	d9f2      	bls.n	8006436 <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 8006450:	2003      	movs	r0, #3
 8006452:	e129      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
    FlagStatus       pwrclkchanged = RESET;
 8006454:	2500      	movs	r5, #0
 8006456:	e7d1      	b.n	80063fc <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006458:	4a0f      	ldr	r2, [pc, #60]	; (8006498 <HAL_RCC_OscConfig+0x2b0>)
 800645a:	6813      	ldr	r3, [r2, #0]
 800645c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006460:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006462:	f7fc fe65 	bl	8003130 <HAL_GetTick>
 8006466:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006468:	4b0b      	ldr	r3, [pc, #44]	; (8006498 <HAL_RCC_OscConfig+0x2b0>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006470:	d1c9      	bne.n	8006406 <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006472:	f7fc fe5d 	bl	8003130 <HAL_GetTick>
 8006476:	1b80      	subs	r0, r0, r6
 8006478:	2802      	cmp	r0, #2
 800647a:	d9f5      	bls.n	8006468 <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 800647c:	2003      	movs	r0, #3
 800647e:	e113      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006480:	4a03      	ldr	r2, [pc, #12]	; (8006490 <HAL_RCC_OscConfig+0x2a8>)
 8006482:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006486:	f043 0301 	orr.w	r3, r3, #1
 800648a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800648e:	e7cc      	b.n	800642a <HAL_RCC_OscConfig+0x242>
 8006490:	40021000 	.word	0x40021000
 8006494:	20000008 	.word	0x20000008
 8006498:	40007000 	.word	0x40007000
 800649c:	4b8a      	ldr	r3, [pc, #552]	; (80066c8 <HAL_RCC_OscConfig+0x4e0>)
 800649e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80064a2:	f042 0204 	orr.w	r2, r2, #4
 80064a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80064aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80064ae:	f042 0201 	orr.w	r2, r2, #1
 80064b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80064b6:	e7b8      	b.n	800642a <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 80064b8:	f7fc fe3a 	bl	8003130 <HAL_GetTick>
 80064bc:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80064be:	4b82      	ldr	r3, [pc, #520]	; (80066c8 <HAL_RCC_OscConfig+0x4e0>)
 80064c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c4:	f013 0f02 	tst.w	r3, #2
 80064c8:	d008      	beq.n	80064dc <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ca:	f7fc fe31 	bl	8003130 <HAL_GetTick>
 80064ce:	1b80      	subs	r0, r0, r6
 80064d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80064d4:	4298      	cmp	r0, r3
 80064d6:	d9f2      	bls.n	80064be <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 80064d8:	2003      	movs	r0, #3
 80064da:	e0e5      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
    if (pwrclkchanged == SET)
 80064dc:	b9e5      	cbnz	r5, 8006518 <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	f013 0f20 	tst.w	r3, #32
 80064e4:	d035      	beq.n	8006552 <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80064e6:	69a3      	ldr	r3, [r4, #24]
 80064e8:	b1e3      	cbz	r3, 8006524 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 80064ea:	4a77      	ldr	r2, [pc, #476]	; (80066c8 <HAL_RCC_OscConfig+0x4e0>)
 80064ec:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80064f0:	f043 0301 	orr.w	r3, r3, #1
 80064f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80064f8:	f7fc fe1a 	bl	8003130 <HAL_GetTick>
 80064fc:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064fe:	4b72      	ldr	r3, [pc, #456]	; (80066c8 <HAL_RCC_OscConfig+0x4e0>)
 8006500:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006504:	f013 0f02 	tst.w	r3, #2
 8006508:	d123      	bne.n	8006552 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800650a:	f7fc fe11 	bl	8003130 <HAL_GetTick>
 800650e:	1b40      	subs	r0, r0, r5
 8006510:	2802      	cmp	r0, #2
 8006512:	d9f4      	bls.n	80064fe <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 8006514:	2003      	movs	r0, #3
 8006516:	e0c7      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006518:	4a6b      	ldr	r2, [pc, #428]	; (80066c8 <HAL_RCC_OscConfig+0x4e0>)
 800651a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800651c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006520:	6593      	str	r3, [r2, #88]	; 0x58
 8006522:	e7dc      	b.n	80064de <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 8006524:	4a68      	ldr	r2, [pc, #416]	; (80066c8 <HAL_RCC_OscConfig+0x4e0>)
 8006526:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800652a:	f023 0301 	bic.w	r3, r3, #1
 800652e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8006532:	f7fc fdfd 	bl	8003130 <HAL_GetTick>
 8006536:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006538:	4b63      	ldr	r3, [pc, #396]	; (80066c8 <HAL_RCC_OscConfig+0x4e0>)
 800653a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800653e:	f013 0f02 	tst.w	r3, #2
 8006542:	d006      	beq.n	8006552 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006544:	f7fc fdf4 	bl	8003130 <HAL_GetTick>
 8006548:	1b40      	subs	r0, r0, r5
 800654a:	2802      	cmp	r0, #2
 800654c:	d9f4      	bls.n	8006538 <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 800654e:	2003      	movs	r0, #3
 8006550:	e0aa      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006552:	69e3      	ldr	r3, [r4, #28]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 80a6 	beq.w	80066a6 <HAL_RCC_OscConfig+0x4be>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800655a:	4a5b      	ldr	r2, [pc, #364]	; (80066c8 <HAL_RCC_OscConfig+0x4e0>)
 800655c:	6892      	ldr	r2, [r2, #8]
 800655e:	f002 020c 	and.w	r2, r2, #12
 8006562:	2a0c      	cmp	r2, #12
 8006564:	d069      	beq.n	800663a <HAL_RCC_OscConfig+0x452>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006566:	2b02      	cmp	r3, #2
 8006568:	d01d      	beq.n	80065a6 <HAL_RCC_OscConfig+0x3be>
        __HAL_RCC_PLL_DISABLE();
 800656a:	4b57      	ldr	r3, [pc, #348]	; (80066c8 <HAL_RCC_OscConfig+0x4e0>)
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006572:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	f022 0203 	bic.w	r2, r2, #3
 800657a:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8006582:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006586:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8006588:	f7fc fdd2 	bl	8003130 <HAL_GetTick>
 800658c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800658e:	4b4e      	ldr	r3, [pc, #312]	; (80066c8 <HAL_RCC_OscConfig+0x4e0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006596:	d04e      	beq.n	8006636 <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006598:	f7fc fdca 	bl	8003130 <HAL_GetTick>
 800659c:	1b00      	subs	r0, r0, r4
 800659e:	2802      	cmp	r0, #2
 80065a0:	d9f5      	bls.n	800658e <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 80065a2:	2003      	movs	r0, #3
 80065a4:	e080      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_DISABLE();
 80065a6:	4a48      	ldr	r2, [pc, #288]	; (80066c8 <HAL_RCC_OscConfig+0x4e0>)
 80065a8:	6813      	ldr	r3, [r2, #0]
 80065aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065ae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80065b0:	f7fc fdbe 	bl	8003130 <HAL_GetTick>
 80065b4:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065b6:	4b44      	ldr	r3, [pc, #272]	; (80066c8 <HAL_RCC_OscConfig+0x4e0>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80065be:	d006      	beq.n	80065ce <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c0:	f7fc fdb6 	bl	8003130 <HAL_GetTick>
 80065c4:	1b40      	subs	r0, r0, r5
 80065c6:	2802      	cmp	r0, #2
 80065c8:	d9f5      	bls.n	80065b6 <HAL_RCC_OscConfig+0x3ce>
            return HAL_TIMEOUT;
 80065ca:	2003      	movs	r0, #3
 80065cc:	e06c      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065ce:	4a3e      	ldr	r2, [pc, #248]	; (80066c8 <HAL_RCC_OscConfig+0x4e0>)
 80065d0:	68d3      	ldr	r3, [r2, #12]
 80065d2:	493e      	ldr	r1, [pc, #248]	; (80066cc <HAL_RCC_OscConfig+0x4e4>)
 80065d4:	4019      	ands	r1, r3
 80065d6:	6a23      	ldr	r3, [r4, #32]
 80065d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80065da:	3801      	subs	r0, #1
 80065dc:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80065e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80065e2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80065e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80065e8:	0840      	lsrs	r0, r0, #1
 80065ea:	3801      	subs	r0, #1
 80065ec:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80065f0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80065f2:	0840      	lsrs	r0, r0, #1
 80065f4:	3801      	subs	r0, #1
 80065f6:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80065fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80065fc:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8006600:	430b      	orrs	r3, r1
 8006602:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8006604:	6813      	ldr	r3, [r2, #0]
 8006606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800660a:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800660c:	68d3      	ldr	r3, [r2, #12]
 800660e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006612:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8006614:	f7fc fd8c 	bl	8003130 <HAL_GetTick>
 8006618:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800661a:	4b2b      	ldr	r3, [pc, #172]	; (80066c8 <HAL_RCC_OscConfig+0x4e0>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006622:	d106      	bne.n	8006632 <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006624:	f7fc fd84 	bl	8003130 <HAL_GetTick>
 8006628:	1b00      	subs	r0, r0, r4
 800662a:	2802      	cmp	r0, #2
 800662c:	d9f5      	bls.n	800661a <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 800662e:	2003      	movs	r0, #3
 8006630:	e03a      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 8006632:	2000      	movs	r0, #0
 8006634:	e038      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
 8006636:	2000      	movs	r0, #0
 8006638:	e036      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800663a:	2b01      	cmp	r3, #1
 800663c:	d036      	beq.n	80066ac <HAL_RCC_OscConfig+0x4c4>
      temp_pllckcfg = RCC->PLLCFGR;
 800663e:	4b22      	ldr	r3, [pc, #136]	; (80066c8 <HAL_RCC_OscConfig+0x4e0>)
 8006640:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006642:	f003 0103 	and.w	r1, r3, #3
 8006646:	6a22      	ldr	r2, [r4, #32]
 8006648:	4291      	cmp	r1, r2
 800664a:	d131      	bne.n	80066b0 <HAL_RCC_OscConfig+0x4c8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800664c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006650:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006652:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006654:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8006658:	d12c      	bne.n	80066b4 <HAL_RCC_OscConfig+0x4cc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800665a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800665e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006660:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006664:	d128      	bne.n	80066b8 <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006666:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800666a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800666c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8006670:	d124      	bne.n	80066bc <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006672:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8006676:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006678:	0852      	lsrs	r2, r2, #1
 800667a:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800667c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8006680:	d11e      	bne.n	80066c0 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006682:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8006686:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006688:	0852      	lsrs	r2, r2, #1
 800668a:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800668c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8006690:	d118      	bne.n	80066c4 <HAL_RCC_OscConfig+0x4dc>
  return HAL_OK;
 8006692:	2000      	movs	r0, #0
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
    return HAL_ERROR;
 8006696:	2001      	movs	r0, #1
}
 8006698:	4770      	bx	lr
        return HAL_ERROR;
 800669a:	2001      	movs	r0, #1
 800669c:	e004      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 800669e:	2001      	movs	r0, #1
 80066a0:	e002      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
          return HAL_ERROR;
 80066a2:	2001      	movs	r0, #1
 80066a4:	e000      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 80066a6:	2000      	movs	r0, #0
}
 80066a8:	b002      	add	sp, #8
 80066aa:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80066ac:	2001      	movs	r0, #1
 80066ae:	e7fb      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 80066b0:	2001      	movs	r0, #1
 80066b2:	e7f9      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
 80066b4:	2001      	movs	r0, #1
 80066b6:	e7f7      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
 80066b8:	2001      	movs	r0, #1
 80066ba:	e7f5      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
 80066bc:	2001      	movs	r0, #1
 80066be:	e7f3      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
 80066c0:	2001      	movs	r0, #1
 80066c2:	e7f1      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
 80066c4:	2001      	movs	r0, #1
 80066c6:	e7ef      	b.n	80066a8 <HAL_RCC_OscConfig+0x4c0>
 80066c8:	40021000 	.word	0x40021000
 80066cc:	019f800c 	.word	0x019f800c

080066d0 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80066d0:	4b1e      	ldr	r3, [pc, #120]	; (800674c <HAL_RCC_GetSysClockFreq+0x7c>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f003 030c 	and.w	r3, r3, #12
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d033      	beq.n	8006744 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80066dc:	4b1b      	ldr	r3, [pc, #108]	; (800674c <HAL_RCC_GetSysClockFreq+0x7c>)
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 030c 	and.w	r3, r3, #12
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d02f      	beq.n	8006748 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80066e8:	4b18      	ldr	r3, [pc, #96]	; (800674c <HAL_RCC_GetSysClockFreq+0x7c>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f003 030c 	and.w	r3, r3, #12
 80066f0:	2b0c      	cmp	r3, #12
 80066f2:	d001      	beq.n	80066f8 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 80066f4:	2000      	movs	r0, #0
}
 80066f6:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066f8:	4b14      	ldr	r3, [pc, #80]	; (800674c <HAL_RCC_GetSysClockFreq+0x7c>)
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006700:	68d8      	ldr	r0, [r3, #12]
 8006702:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8006706:	1c43      	adds	r3, r0, #1
    switch (pllsource)
 8006708:	2a03      	cmp	r2, #3
 800670a:	d011      	beq.n	8006730 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800670c:	4810      	ldr	r0, [pc, #64]	; (8006750 <HAL_RCC_GetSysClockFreq+0x80>)
 800670e:	fbb0 f0f3 	udiv	r0, r0, r3
 8006712:	4b0e      	ldr	r3, [pc, #56]	; (800674c <HAL_RCC_GetSysClockFreq+0x7c>)
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800671a:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800671e:	4b0b      	ldr	r3, [pc, #44]	; (800674c <HAL_RCC_GetSysClockFreq+0x7c>)
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8006726:	3301      	adds	r3, #1
 8006728:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800672a:	fbb0 f0f3 	udiv	r0, r0, r3
 800672e:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006730:	4808      	ldr	r0, [pc, #32]	; (8006754 <HAL_RCC_GetSysClockFreq+0x84>)
 8006732:	fbb0 f0f3 	udiv	r0, r0, r3
 8006736:	4b05      	ldr	r3, [pc, #20]	; (800674c <HAL_RCC_GetSysClockFreq+0x7c>)
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800673e:	fb03 f000 	mul.w	r0, r3, r0
      break;
 8006742:	e7ec      	b.n	800671e <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8006744:	4802      	ldr	r0, [pc, #8]	; (8006750 <HAL_RCC_GetSysClockFreq+0x80>)
 8006746:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8006748:	4802      	ldr	r0, [pc, #8]	; (8006754 <HAL_RCC_GetSysClockFreq+0x84>)
 800674a:	4770      	bx	lr
 800674c:	40021000 	.word	0x40021000
 8006750:	00f42400 	.word	0x00f42400
 8006754:	007a1200 	.word	0x007a1200

08006758 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006758:	2800      	cmp	r0, #0
 800675a:	f000 80e6 	beq.w	800692a <HAL_RCC_ClockConfig+0x1d2>
{
 800675e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006760:	460c      	mov	r4, r1
 8006762:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006764:	4b74      	ldr	r3, [pc, #464]	; (8006938 <HAL_RCC_ClockConfig+0x1e0>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 030f 	and.w	r3, r3, #15
 800676c:	428b      	cmp	r3, r1
 800676e:	d20b      	bcs.n	8006788 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006770:	4a71      	ldr	r2, [pc, #452]	; (8006938 <HAL_RCC_ClockConfig+0x1e0>)
 8006772:	6813      	ldr	r3, [r2, #0]
 8006774:	f023 030f 	bic.w	r3, r3, #15
 8006778:	430b      	orrs	r3, r1
 800677a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800677c:	6813      	ldr	r3, [r2, #0]
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	428b      	cmp	r3, r1
 8006784:	f040 80d3 	bne.w	800692e <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006788:	682e      	ldr	r6, [r5, #0]
 800678a:	f016 0601 	ands.w	r6, r6, #1
 800678e:	d05f      	beq.n	8006850 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006790:	686b      	ldr	r3, [r5, #4]
 8006792:	2b03      	cmp	r3, #3
 8006794:	d02f      	beq.n	80067f6 <HAL_RCC_ClockConfig+0x9e>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006796:	2b02      	cmp	r3, #2
 8006798:	d04d      	beq.n	8006836 <HAL_RCC_ClockConfig+0xde>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800679a:	4b68      	ldr	r3, [pc, #416]	; (800693c <HAL_RCC_ClockConfig+0x1e4>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80067a2:	f000 80c6 	beq.w	8006932 <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80067a6:	f7ff ff93 	bl	80066d0 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80067aa:	4b65      	ldr	r3, [pc, #404]	; (8006940 <HAL_RCC_ClockConfig+0x1e8>)
 80067ac:	4298      	cmp	r0, r3
 80067ae:	d94d      	bls.n	800684c <HAL_RCC_ClockConfig+0xf4>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80067b0:	4a62      	ldr	r2, [pc, #392]	; (800693c <HAL_RCC_ClockConfig+0x1e4>)
 80067b2:	6893      	ldr	r3, [r2, #8]
 80067b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80067be:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067c0:	4a5e      	ldr	r2, [pc, #376]	; (800693c <HAL_RCC_ClockConfig+0x1e4>)
 80067c2:	6893      	ldr	r3, [r2, #8]
 80067c4:	f023 0303 	bic.w	r3, r3, #3
 80067c8:	6869      	ldr	r1, [r5, #4]
 80067ca:	430b      	orrs	r3, r1
 80067cc:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80067ce:	f7fc fcaf 	bl	8003130 <HAL_GetTick>
 80067d2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067d4:	4b59      	ldr	r3, [pc, #356]	; (800693c <HAL_RCC_ClockConfig+0x1e4>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f003 030c 	and.w	r3, r3, #12
 80067dc:	686a      	ldr	r2, [r5, #4]
 80067de:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80067e2:	d035      	beq.n	8006850 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e4:	f7fc fca4 	bl	8003130 <HAL_GetTick>
 80067e8:	1bc0      	subs	r0, r0, r7
 80067ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80067ee:	4298      	cmp	r0, r3
 80067f0:	d9f0      	bls.n	80067d4 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 80067f2:	2003      	movs	r0, #3
 80067f4:	e078      	b.n	80068e8 <HAL_RCC_ClockConfig+0x190>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067f6:	4b51      	ldr	r3, [pc, #324]	; (800693c <HAL_RCC_ClockConfig+0x1e4>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80067fe:	d101      	bne.n	8006804 <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8006800:	2001      	movs	r0, #1
 8006802:	e071      	b.n	80068e8 <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006804:	f7ff fcc4 	bl	8006190 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8006808:	4b4d      	ldr	r3, [pc, #308]	; (8006940 <HAL_RCC_ClockConfig+0x1e8>)
 800680a:	4298      	cmp	r0, r3
 800680c:	d91a      	bls.n	8006844 <HAL_RCC_ClockConfig+0xec>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800680e:	4b4b      	ldr	r3, [pc, #300]	; (800693c <HAL_RCC_ClockConfig+0x1e4>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8006816:	d005      	beq.n	8006824 <HAL_RCC_ClockConfig+0xcc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006818:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800681a:	f016 0602 	ands.w	r6, r6, #2
 800681e:	d0cf      	beq.n	80067c0 <HAL_RCC_ClockConfig+0x68>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006820:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006822:	b98b      	cbnz	r3, 8006848 <HAL_RCC_ClockConfig+0xf0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006824:	4a45      	ldr	r2, [pc, #276]	; (800693c <HAL_RCC_ClockConfig+0x1e4>)
 8006826:	6893      	ldr	r3, [r2, #8]
 8006828:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800682c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006830:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006832:	2680      	movs	r6, #128	; 0x80
 8006834:	e7c4      	b.n	80067c0 <HAL_RCC_ClockConfig+0x68>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006836:	4b41      	ldr	r3, [pc, #260]	; (800693c <HAL_RCC_ClockConfig+0x1e4>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800683e:	d1b2      	bne.n	80067a6 <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 8006840:	2001      	movs	r0, #1
 8006842:	e051      	b.n	80068e8 <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006844:	2600      	movs	r6, #0
 8006846:	e7bb      	b.n	80067c0 <HAL_RCC_ClockConfig+0x68>
 8006848:	2600      	movs	r6, #0
 800684a:	e7b9      	b.n	80067c0 <HAL_RCC_ClockConfig+0x68>
 800684c:	2600      	movs	r6, #0
 800684e:	e7b7      	b.n	80067c0 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006850:	682b      	ldr	r3, [r5, #0]
 8006852:	f013 0f02 	tst.w	r3, #2
 8006856:	d048      	beq.n	80068ea <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006858:	f013 0f04 	tst.w	r3, #4
 800685c:	d004      	beq.n	8006868 <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800685e:	4a37      	ldr	r2, [pc, #220]	; (800693c <HAL_RCC_ClockConfig+0x1e4>)
 8006860:	6893      	ldr	r3, [r2, #8]
 8006862:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006866:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	f013 0f08 	tst.w	r3, #8
 800686e:	d006      	beq.n	800687e <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006870:	4a32      	ldr	r2, [pc, #200]	; (800693c <HAL_RCC_ClockConfig+0x1e4>)
 8006872:	6893      	ldr	r3, [r2, #8]
 8006874:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006878:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800687c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800687e:	4a2f      	ldr	r2, [pc, #188]	; (800693c <HAL_RCC_ClockConfig+0x1e4>)
 8006880:	6893      	ldr	r3, [r2, #8]
 8006882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006886:	68a9      	ldr	r1, [r5, #8]
 8006888:	430b      	orrs	r3, r1
 800688a:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800688c:	4b2a      	ldr	r3, [pc, #168]	; (8006938 <HAL_RCC_ClockConfig+0x1e0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 030f 	and.w	r3, r3, #15
 8006894:	42a3      	cmp	r3, r4
 8006896:	d830      	bhi.n	80068fa <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006898:	682b      	ldr	r3, [r5, #0]
 800689a:	f013 0f04 	tst.w	r3, #4
 800689e:	d006      	beq.n	80068ae <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068a0:	4a26      	ldr	r2, [pc, #152]	; (800693c <HAL_RCC_ClockConfig+0x1e4>)
 80068a2:	6893      	ldr	r3, [r2, #8]
 80068a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80068a8:	68e9      	ldr	r1, [r5, #12]
 80068aa:	430b      	orrs	r3, r1
 80068ac:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068ae:	682b      	ldr	r3, [r5, #0]
 80068b0:	f013 0f08 	tst.w	r3, #8
 80068b4:	d007      	beq.n	80068c6 <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068b6:	4a21      	ldr	r2, [pc, #132]	; (800693c <HAL_RCC_ClockConfig+0x1e4>)
 80068b8:	6893      	ldr	r3, [r2, #8]
 80068ba:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80068be:	6929      	ldr	r1, [r5, #16]
 80068c0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80068c4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80068c6:	f7ff ff03 	bl	80066d0 <HAL_RCC_GetSysClockFreq>
 80068ca:	4b1c      	ldr	r3, [pc, #112]	; (800693c <HAL_RCC_ClockConfig+0x1e4>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80068d2:	4a1c      	ldr	r2, [pc, #112]	; (8006944 <HAL_RCC_ClockConfig+0x1ec>)
 80068d4:	5cd3      	ldrb	r3, [r2, r3]
 80068d6:	f003 031f 	and.w	r3, r3, #31
 80068da:	40d8      	lsrs	r0, r3
 80068dc:	4b1a      	ldr	r3, [pc, #104]	; (8006948 <HAL_RCC_ClockConfig+0x1f0>)
 80068de:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80068e0:	4b1a      	ldr	r3, [pc, #104]	; (800694c <HAL_RCC_ClockConfig+0x1f4>)
 80068e2:	6818      	ldr	r0, [r3, #0]
 80068e4:	f7fc fbe0 	bl	80030a8 <HAL_InitTick>
}
 80068e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 80068ea:	2e80      	cmp	r6, #128	; 0x80
 80068ec:	d1ce      	bne.n	800688c <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80068ee:	4a13      	ldr	r2, [pc, #76]	; (800693c <HAL_RCC_ClockConfig+0x1e4>)
 80068f0:	6893      	ldr	r3, [r2, #8]
 80068f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068f6:	6093      	str	r3, [r2, #8]
 80068f8:	e7c8      	b.n	800688c <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068fa:	4a0f      	ldr	r2, [pc, #60]	; (8006938 <HAL_RCC_ClockConfig+0x1e0>)
 80068fc:	6813      	ldr	r3, [r2, #0]
 80068fe:	f023 030f 	bic.w	r3, r3, #15
 8006902:	4323      	orrs	r3, r4
 8006904:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006906:	f7fc fc13 	bl	8003130 <HAL_GetTick>
 800690a:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800690c:	4b0a      	ldr	r3, [pc, #40]	; (8006938 <HAL_RCC_ClockConfig+0x1e0>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 030f 	and.w	r3, r3, #15
 8006914:	42a3      	cmp	r3, r4
 8006916:	d0bf      	beq.n	8006898 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006918:	f7fc fc0a 	bl	8003130 <HAL_GetTick>
 800691c:	1b80      	subs	r0, r0, r6
 800691e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006922:	4298      	cmp	r0, r3
 8006924:	d9f2      	bls.n	800690c <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 8006926:	2003      	movs	r0, #3
 8006928:	e7de      	b.n	80068e8 <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 800692a:	2001      	movs	r0, #1
}
 800692c:	4770      	bx	lr
      return HAL_ERROR;
 800692e:	2001      	movs	r0, #1
 8006930:	e7da      	b.n	80068e8 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 8006932:	2001      	movs	r0, #1
 8006934:	e7d8      	b.n	80068e8 <HAL_RCC_ClockConfig+0x190>
 8006936:	bf00      	nop
 8006938:	40022000 	.word	0x40022000
 800693c:	40021000 	.word	0x40021000
 8006940:	04c4b400 	.word	0x04c4b400
 8006944:	0800f550 	.word	0x0800f550
 8006948:	20000000 	.word	0x20000000
 800694c:	20000008 	.word	0x20000008

08006950 <HAL_RCC_GetHCLKFreq>:
}
 8006950:	4b01      	ldr	r3, [pc, #4]	; (8006958 <HAL_RCC_GetHCLKFreq+0x8>)
 8006952:	6818      	ldr	r0, [r3, #0]
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	20000000 	.word	0x20000000

0800695c <HAL_RCC_GetPCLK1Freq>:
{
 800695c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800695e:	f7ff fff7 	bl	8006950 <HAL_RCC_GetHCLKFreq>
 8006962:	4b05      	ldr	r3, [pc, #20]	; (8006978 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800696a:	4a04      	ldr	r2, [pc, #16]	; (800697c <HAL_RCC_GetPCLK1Freq+0x20>)
 800696c:	5cd3      	ldrb	r3, [r2, r3]
 800696e:	f003 031f 	and.w	r3, r3, #31
}
 8006972:	40d8      	lsrs	r0, r3
 8006974:	bd08      	pop	{r3, pc}
 8006976:	bf00      	nop
 8006978:	40021000 	.word	0x40021000
 800697c:	0800f560 	.word	0x0800f560

08006980 <HAL_RCC_GetPCLK2Freq>:
{
 8006980:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006982:	f7ff ffe5 	bl	8006950 <HAL_RCC_GetHCLKFreq>
 8006986:	4b05      	ldr	r3, [pc, #20]	; (800699c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800698e:	4a04      	ldr	r2, [pc, #16]	; (80069a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006990:	5cd3      	ldrb	r3, [r2, r3]
 8006992:	f003 031f 	and.w	r3, r3, #31
}
 8006996:	40d8      	lsrs	r0, r3
 8006998:	bd08      	pop	{r3, pc}
 800699a:	bf00      	nop
 800699c:	40021000 	.word	0x40021000
 80069a0:	0800f560 	.word	0x0800f560

080069a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069a6:	b083      	sub	sp, #12
 80069a8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069aa:	6803      	ldr	r3, [r0, #0]
 80069ac:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80069b0:	d06e      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xec>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069b2:	4b35      	ldr	r3, [pc, #212]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80069b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80069ba:	d11e      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069bc:	4b32      	ldr	r3, [pc, #200]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80069be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80069c4:	659a      	str	r2, [r3, #88]	; 0x58
 80069c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069cc:	9301      	str	r3, [sp, #4]
 80069ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80069d0:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069d2:	4a2e      	ldr	r2, [pc, #184]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80069d4:	6813      	ldr	r3, [r2, #0]
 80069d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069dc:	f7fc fba8 	bl	8003130 <HAL_GetTick>
 80069e0:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069e2:	4b2a      	ldr	r3, [pc, #168]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80069ea:	d108      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069ec:	f7fc fba0 	bl	8003130 <HAL_GetTick>
 80069f0:	1b40      	subs	r0, r0, r5
 80069f2:	2802      	cmp	r0, #2
 80069f4:	d9f5      	bls.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 80069f6:	2503      	movs	r5, #3
 80069f8:	e002      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 80069fa:	2600      	movs	r6, #0
 80069fc:	e7e9      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069fe:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8006a00:	bb45      	cbnz	r5, 8006a54 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a02:	4b21      	ldr	r3, [pc, #132]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a08:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006a0c:	d015      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x96>
 8006a0e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d012      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a14:	4a1c      	ldr	r2, [pc, #112]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006a16:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a1e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8006a22:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8006a26:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a2a:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8006a2e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006a32:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a3a:	f013 0f01 	tst.w	r3, #1
 8006a3e:	d110      	bne.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 8006a40:	b945      	cbnz	r5, 8006a54 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a42:	4a11      	ldr	r2, [pc, #68]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006a44:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a4c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006a4e:	430b      	orrs	r3, r1
 8006a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a54:	b1ee      	cbz	r6, 8006a92 <HAL_RCCEx_PeriphCLKConfig+0xee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a56:	4a0c      	ldr	r2, [pc, #48]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006a58:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8006a60:	e017      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 8006a62:	f7fc fb65 	bl	8003130 <HAL_GetTick>
 8006a66:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a68:	4b07      	ldr	r3, [pc, #28]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a6e:	f013 0f02 	tst.w	r3, #2
 8006a72:	d1e5      	bne.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a74:	f7fc fb5c 	bl	8003130 <HAL_GetTick>
 8006a78:	1bc0      	subs	r0, r0, r7
 8006a7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a7e:	4298      	cmp	r0, r3
 8006a80:	d9f2      	bls.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 8006a82:	2503      	movs	r5, #3
 8006a84:	e7dc      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8006a86:	bf00      	nop
 8006a88:	40021000 	.word	0x40021000
 8006a8c:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a90:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	f013 0f01 	tst.w	r3, #1
 8006a98:	d008      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a9a:	4a9f      	ldr	r2, [pc, #636]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a9c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006aa0:	f023 0303 	bic.w	r3, r3, #3
 8006aa4:	6861      	ldr	r1, [r4, #4]
 8006aa6:	430b      	orrs	r3, r1
 8006aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	f013 0f02 	tst.w	r3, #2
 8006ab2:	d008      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ab4:	4a98      	ldr	r2, [pc, #608]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ab6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006aba:	f023 030c 	bic.w	r3, r3, #12
 8006abe:	68a1      	ldr	r1, [r4, #8]
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	f013 0f04 	tst.w	r3, #4
 8006acc:	d008      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ace:	4a92      	ldr	r2, [pc, #584]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ad0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006ad4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006ad8:	68e1      	ldr	r1, [r4, #12]
 8006ada:	430b      	orrs	r3, r1
 8006adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	f013 0f08 	tst.w	r3, #8
 8006ae6:	d008      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ae8:	4a8b      	ldr	r2, [pc, #556]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006aea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006aee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006af2:	6921      	ldr	r1, [r4, #16]
 8006af4:	430b      	orrs	r3, r1
 8006af6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	f013 0f10 	tst.w	r3, #16
 8006b00:	d008      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b02:	4a85      	ldr	r2, [pc, #532]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b04:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0c:	6961      	ldr	r1, [r4, #20]
 8006b0e:	430b      	orrs	r3, r1
 8006b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	f013 0f20 	tst.w	r3, #32
 8006b1a:	d008      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b1c:	4a7e      	ldr	r2, [pc, #504]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b1e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006b22:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006b26:	69a1      	ldr	r1, [r4, #24]
 8006b28:	430b      	orrs	r3, r1
 8006b2a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b34:	d008      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b36:	4a78      	ldr	r2, [pc, #480]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b38:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006b3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006b40:	69e1      	ldr	r1, [r4, #28]
 8006b42:	430b      	orrs	r3, r1
 8006b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b4e:	d008      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b50:	4a71      	ldr	r2, [pc, #452]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b52:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006b56:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006b5a:	6a21      	ldr	r1, [r4, #32]
 8006b5c:	430b      	orrs	r3, r1
 8006b5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006b68:	d008      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b6a:	4a6b      	ldr	r2, [pc, #428]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b6c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006b70:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006b74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006b76:	430b      	orrs	r3, r1
 8006b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006b82:	d008      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b84:	4a64      	ldr	r2, [pc, #400]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b86:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8006b8a:	f023 0303 	bic.w	r3, r3, #3
 8006b8e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006b90:	430b      	orrs	r3, r1
 8006b92:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006b9c:	d008      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b9e:	4a5e      	ldr	r2, [pc, #376]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ba0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006ba4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8006ba8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006baa:	430b      	orrs	r3, r1
 8006bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006bb6:	d00c      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006bb8:	4a57      	ldr	r2, [pc, #348]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006bbe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006bc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006bc4:	430b      	orrs	r3, r1
 8006bc6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006bca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006bcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bd0:	d079      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006bd8:	d00c      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006bda:	4a4f      	ldr	r2, [pc, #316]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bdc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006be0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006be4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006be6:	430b      	orrs	r3, r1
 8006be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006bec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bf2:	d06d      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006bfa:	d00c      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006bfc:	4a46      	ldr	r2, [pc, #280]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bfe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006c02:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8006c06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c08:	430b      	orrs	r3, r1
 8006c0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006c0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c14:	d061      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x336>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006c1c:	d00c      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c1e:	4a3e      	ldr	r2, [pc, #248]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c20:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006c24:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8006c28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006c2a:	430b      	orrs	r3, r1
 8006c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c36:	d055      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006c3e:	d00c      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c40:	4a35      	ldr	r2, [pc, #212]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006c46:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8006c4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c58:	d049      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006c60:	d00c      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006c62:	4a2d      	ldr	r2, [pc, #180]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c64:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006c68:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006c6c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006c6e:	430b      	orrs	r3, r1
 8006c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006c74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006c76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c7a:	d03d      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x354>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006c82:	d00c      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006c84:	4a24      	ldr	r2, [pc, #144]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c86:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006c8a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006c8e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006c90:	430b      	orrs	r3, r1
 8006c92:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006c96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c9c:	d031      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x35e>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8006ca4:	d00c      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006ca6:	4a1c      	ldr	r2, [pc, #112]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ca8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8006cac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006cb0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006cb2:	430b      	orrs	r3, r1
 8006cb4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006cb8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006cba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cbe:	d025      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x368>
  }

#endif /* QUADSPI */

  return status;
}
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	b003      	add	sp, #12
 8006cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cc6:	68d3      	ldr	r3, [r2, #12]
 8006cc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ccc:	60d3      	str	r3, [r2, #12]
 8006cce:	e780      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cd0:	68d3      	ldr	r3, [r2, #12]
 8006cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cd6:	60d3      	str	r3, [r2, #12]
 8006cd8:	e78c      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cda:	68d3      	ldr	r3, [r2, #12]
 8006cdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ce0:	60d3      	str	r3, [r2, #12]
 8006ce2:	e798      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ce4:	68d3      	ldr	r3, [r2, #12]
 8006ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cea:	60d3      	str	r3, [r2, #12]
 8006cec:	e7a4      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cee:	68d3      	ldr	r3, [r2, #12]
 8006cf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cf4:	60d3      	str	r3, [r2, #12]
 8006cf6:	e7b0      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006cf8:	68d3      	ldr	r3, [r2, #12]
 8006cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cfe:	60d3      	str	r3, [r2, #12]
 8006d00:	e7bc      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d02:	68d3      	ldr	r3, [r2, #12]
 8006d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d08:	60d3      	str	r3, [r2, #12]
 8006d0a:	e7c8      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d0c:	68d3      	ldr	r3, [r2, #12]
 8006d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d12:	60d3      	str	r3, [r2, #12]
 8006d14:	e7d4      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006d16:	bf00      	nop
 8006d18:	40021000 	.word	0x40021000

08006d1c <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d06f      	beq.n	8006e00 <HAL_SPI_Init+0xe4>
{
 8006d20:	b510      	push	{r4, lr}
 8006d22:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006d26:	b933      	cbnz	r3, 8006d36 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d28:	6843      	ldr	r3, [r0, #4]
 8006d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d2e:	d005      	beq.n	8006d3c <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d30:	2300      	movs	r3, #0
 8006d32:	61c3      	str	r3, [r0, #28]
 8006d34:	e002      	b.n	8006d3c <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d36:	2300      	movs	r3, #0
 8006d38:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d3a:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d40:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d052      	beq.n	8006dee <HAL_SPI_Init+0xd2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d48:	2302      	movs	r3, #2
 8006d4a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d4e:	6822      	ldr	r2, [r4, #0]
 8006d50:	6813      	ldr	r3, [r2, #0]
 8006d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d56:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d58:	68e3      	ldr	r3, [r4, #12]
 8006d5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d5e:	d94c      	bls.n	8006dfa <HAL_SPI_Init+0xde>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d60:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d62:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006d66:	d004      	beq.n	8006d72 <HAL_SPI_Init+0x56>
 8006d68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d6c:	d001      	beq.n	8006d72 <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d72:	6863      	ldr	r3, [r4, #4]
 8006d74:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8006d78:	68a1      	ldr	r1, [r4, #8]
 8006d7a:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8006d7e:	430b      	orrs	r3, r1
 8006d80:	6921      	ldr	r1, [r4, #16]
 8006d82:	f001 0102 	and.w	r1, r1, #2
 8006d86:	430b      	orrs	r3, r1
 8006d88:	6961      	ldr	r1, [r4, #20]
 8006d8a:	f001 0101 	and.w	r1, r1, #1
 8006d8e:	430b      	orrs	r3, r1
 8006d90:	69a1      	ldr	r1, [r4, #24]
 8006d92:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8006d96:	430b      	orrs	r3, r1
 8006d98:	69e1      	ldr	r1, [r4, #28]
 8006d9a:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8006d9e:	430b      	orrs	r3, r1
 8006da0:	6a21      	ldr	r1, [r4, #32]
 8006da2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8006da6:	430b      	orrs	r3, r1
 8006da8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006daa:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8006dae:	6820      	ldr	r0, [r4, #0]
 8006db0:	430b      	orrs	r3, r1
 8006db2:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006db4:	8b63      	ldrh	r3, [r4, #26]
 8006db6:	f003 0304 	and.w	r3, r3, #4
 8006dba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006dbc:	f001 0110 	and.w	r1, r1, #16
 8006dc0:	430b      	orrs	r3, r1
 8006dc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dc4:	f001 0108 	and.w	r1, r1, #8
 8006dc8:	430b      	orrs	r3, r1
 8006dca:	68e1      	ldr	r1, [r4, #12]
 8006dcc:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8006dd0:	430b      	orrs	r3, r1
 8006dd2:	6821      	ldr	r1, [r4, #0]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006dd8:	6822      	ldr	r2, [r4, #0]
 8006dda:	69d3      	ldr	r3, [r2, #28]
 8006ddc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006de0:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006de2:	2000      	movs	r0, #0
 8006de4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006de6:	2301      	movs	r3, #1
 8006de8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8006dec:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8006dee:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8006df2:	4620      	mov	r0, r4
 8006df4:	f7fb fa7a 	bl	80022ec <HAL_SPI_MspInit>
 8006df8:	e7a6      	b.n	8006d48 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006dfa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006dfe:	e7b0      	b.n	8006d62 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8006e00:	2001      	movs	r0, #1
}
 8006e02:	4770      	bx	lr

08006e04 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006e04:	b340      	cbz	r0, 8006e58 <HAL_SRAM_Init+0x54>
{
 8006e06:	b570      	push	{r4, r5, r6, lr}
 8006e08:	460e      	mov	r6, r1
 8006e0a:	4615      	mov	r5, r2
 8006e0c:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006e0e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8006e12:	b1e3      	cbz	r3, 8006e4e <HAL_SRAM_Init+0x4a>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006e14:	4621      	mov	r1, r4
 8006e16:	f851 0b08 	ldr.w	r0, [r1], #8
 8006e1a:	f001 f87d 	bl	8007f18 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006e1e:	68a2      	ldr	r2, [r4, #8]
 8006e20:	4631      	mov	r1, r6
 8006e22:	6820      	ldr	r0, [r4, #0]
 8006e24:	f001 f8e8 	bl	8007ff8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006e28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006e2a:	68a2      	ldr	r2, [r4, #8]
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	6860      	ldr	r0, [r4, #4]
 8006e30:	f001 f915 	bl	800805e <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006e34:	6822      	ldr	r2, [r4, #0]
 8006e36:	68a1      	ldr	r1, [r4, #8]
 8006e38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e3c:	f043 0301 	orr.w	r3, r3, #1
 8006e40:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006e44:	2301      	movs	r3, #1
 8006e46:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8006e4a:	2000      	movs	r0, #0
}
 8006e4c:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 8006e4e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SRAM_MspInit(hsram);
 8006e52:	f7fa fdbb 	bl	80019cc <HAL_SRAM_MspInit>
 8006e56:	e7dd      	b.n	8006e14 <HAL_SRAM_Init+0x10>
    return HAL_ERROR;
 8006e58:	2001      	movs	r0, #1
}
 8006e5a:	4770      	bx	lr

08006e5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e5c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e5e:	6a03      	ldr	r3, [r0, #32]
 8006e60:	f023 0301 	bic.w	r3, r3, #1
 8006e64:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e66:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e68:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e6a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006e70:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e74:	680c      	ldr	r4, [r1, #0]
 8006e76:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e78:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e7c:	688c      	ldr	r4, [r1, #8]
 8006e7e:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e80:	4c21      	ldr	r4, [pc, #132]	; (8006f08 <TIM_OC1_SetConfig+0xac>)
 8006e82:	42a0      	cmp	r0, r4
 8006e84:	d013      	beq.n	8006eae <TIM_OC1_SetConfig+0x52>
 8006e86:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006e8a:	42a0      	cmp	r0, r4
 8006e8c:	d00f      	beq.n	8006eae <TIM_OC1_SetConfig+0x52>
 8006e8e:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8006e92:	42a0      	cmp	r0, r4
 8006e94:	d00b      	beq.n	8006eae <TIM_OC1_SetConfig+0x52>
 8006e96:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006e9a:	42a0      	cmp	r0, r4
 8006e9c:	d007      	beq.n	8006eae <TIM_OC1_SetConfig+0x52>
 8006e9e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006ea2:	42a0      	cmp	r0, r4
 8006ea4:	d003      	beq.n	8006eae <TIM_OC1_SetConfig+0x52>
 8006ea6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006eaa:	42a0      	cmp	r0, r4
 8006eac:	d105      	bne.n	8006eba <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006eae:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006eb2:	68cc      	ldr	r4, [r1, #12]
 8006eb4:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006eb6:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eba:	4c13      	ldr	r4, [pc, #76]	; (8006f08 <TIM_OC1_SetConfig+0xac>)
 8006ebc:	42a0      	cmp	r0, r4
 8006ebe:	d013      	beq.n	8006ee8 <TIM_OC1_SetConfig+0x8c>
 8006ec0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006ec4:	42a0      	cmp	r0, r4
 8006ec6:	d00f      	beq.n	8006ee8 <TIM_OC1_SetConfig+0x8c>
 8006ec8:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8006ecc:	42a0      	cmp	r0, r4
 8006ece:	d00b      	beq.n	8006ee8 <TIM_OC1_SetConfig+0x8c>
 8006ed0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006ed4:	42a0      	cmp	r0, r4
 8006ed6:	d007      	beq.n	8006ee8 <TIM_OC1_SetConfig+0x8c>
 8006ed8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006edc:	42a0      	cmp	r0, r4
 8006ede:	d003      	beq.n	8006ee8 <TIM_OC1_SetConfig+0x8c>
 8006ee0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006ee4:	42a0      	cmp	r0, r4
 8006ee6:	d107      	bne.n	8006ef8 <TIM_OC1_SetConfig+0x9c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ee8:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006eec:	694c      	ldr	r4, [r1, #20]
 8006eee:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ef2:	698d      	ldr	r5, [r1, #24]
 8006ef4:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef8:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006efa:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006efc:	684a      	ldr	r2, [r1, #4]
 8006efe:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f00:	6203      	str	r3, [r0, #32]
}
 8006f02:	bc30      	pop	{r4, r5}
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	40012c00 	.word	0x40012c00

08006f0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f0c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f0e:	6a03      	ldr	r3, [r0, #32]
 8006f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f14:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f16:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f18:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f1a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f20:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f24:	680d      	ldr	r5, [r1, #0]
 8006f26:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f2c:	688d      	ldr	r5, [r1, #8]
 8006f2e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f32:	4d1c      	ldr	r5, [pc, #112]	; (8006fa4 <TIM_OC3_SetConfig+0x98>)
 8006f34:	42a8      	cmp	r0, r5
 8006f36:	d007      	beq.n	8006f48 <TIM_OC3_SetConfig+0x3c>
 8006f38:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006f3c:	42a8      	cmp	r0, r5
 8006f3e:	d003      	beq.n	8006f48 <TIM_OC3_SetConfig+0x3c>
 8006f40:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8006f44:	42a8      	cmp	r0, r5
 8006f46:	d106      	bne.n	8006f56 <TIM_OC3_SetConfig+0x4a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f4c:	68cd      	ldr	r5, [r1, #12]
 8006f4e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f56:	4d13      	ldr	r5, [pc, #76]	; (8006fa4 <TIM_OC3_SetConfig+0x98>)
 8006f58:	42a8      	cmp	r0, r5
 8006f5a:	d013      	beq.n	8006f84 <TIM_OC3_SetConfig+0x78>
 8006f5c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006f60:	42a8      	cmp	r0, r5
 8006f62:	d00f      	beq.n	8006f84 <TIM_OC3_SetConfig+0x78>
 8006f64:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006f68:	42a8      	cmp	r0, r5
 8006f6a:	d00b      	beq.n	8006f84 <TIM_OC3_SetConfig+0x78>
 8006f6c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006f70:	42a8      	cmp	r0, r5
 8006f72:	d007      	beq.n	8006f84 <TIM_OC3_SetConfig+0x78>
 8006f74:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006f78:	42a8      	cmp	r0, r5
 8006f7a:	d003      	beq.n	8006f84 <TIM_OC3_SetConfig+0x78>
 8006f7c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006f80:	42a8      	cmp	r0, r5
 8006f82:	d107      	bne.n	8006f94 <TIM_OC3_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f84:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f88:	694c      	ldr	r4, [r1, #20]
 8006f8a:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f8e:	698c      	ldr	r4, [r1, #24]
 8006f90:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f94:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f96:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f98:	684a      	ldr	r2, [r1, #4]
 8006f9a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f9c:	6203      	str	r3, [r0, #32]
}
 8006f9e:	bc30      	pop	{r4, r5}
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	40012c00 	.word	0x40012c00

08006fa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fa8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006faa:	6a03      	ldr	r3, [r0, #32]
 8006fac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fb0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fb2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fb6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fb8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006fbc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fc0:	680d      	ldr	r5, [r1, #0]
 8006fc2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fca:	688d      	ldr	r5, [r1, #8]
 8006fcc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006fd0:	4d1b      	ldr	r5, [pc, #108]	; (8007040 <TIM_OC4_SetConfig+0x98>)
 8006fd2:	42a8      	cmp	r0, r5
 8006fd4:	d007      	beq.n	8006fe6 <TIM_OC4_SetConfig+0x3e>
 8006fd6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006fda:	42a8      	cmp	r0, r5
 8006fdc:	d003      	beq.n	8006fe6 <TIM_OC4_SetConfig+0x3e>
 8006fde:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8006fe2:	42a8      	cmp	r0, r5
 8006fe4:	d106      	bne.n	8006ff4 <TIM_OC4_SetConfig+0x4c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006fe6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006fea:	68cd      	ldr	r5, [r1, #12]
 8006fec:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff4:	4d12      	ldr	r5, [pc, #72]	; (8007040 <TIM_OC4_SetConfig+0x98>)
 8006ff6:	42a8      	cmp	r0, r5
 8006ff8:	d013      	beq.n	8007022 <TIM_OC4_SetConfig+0x7a>
 8006ffa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006ffe:	42a8      	cmp	r0, r5
 8007000:	d00f      	beq.n	8007022 <TIM_OC4_SetConfig+0x7a>
 8007002:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007006:	42a8      	cmp	r0, r5
 8007008:	d00b      	beq.n	8007022 <TIM_OC4_SetConfig+0x7a>
 800700a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800700e:	42a8      	cmp	r0, r5
 8007010:	d007      	beq.n	8007022 <TIM_OC4_SetConfig+0x7a>
 8007012:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007016:	42a8      	cmp	r0, r5
 8007018:	d003      	beq.n	8007022 <TIM_OC4_SetConfig+0x7a>
 800701a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800701e:	42a8      	cmp	r0, r5
 8007020:	d107      	bne.n	8007032 <TIM_OC4_SetConfig+0x8a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007022:	f424 4c40 	bic.w	ip, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007026:	694c      	ldr	r4, [r1, #20]
 8007028:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800702c:	698c      	ldr	r4, [r1, #24]
 800702e:	ea4c 1484 	orr.w	r4, ip, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007032:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007034:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007036:	684a      	ldr	r2, [r1, #4]
 8007038:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800703a:	6203      	str	r3, [r0, #32]
}
 800703c:	bc30      	pop	{r4, r5}
 800703e:	4770      	bx	lr
 8007040:	40012c00 	.word	0x40012c00

08007044 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007044:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007046:	6a03      	ldr	r3, [r0, #32]
 8007048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800704c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800704e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007050:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007052:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007054:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007058:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800705c:	680d      	ldr	r5, [r1, #0]
 800705e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007060:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007064:	688d      	ldr	r5, [r1, #8]
 8007066:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800706a:	4d11      	ldr	r5, [pc, #68]	; (80070b0 <TIM_OC5_SetConfig+0x6c>)
 800706c:	42a8      	cmp	r0, r5
 800706e:	d013      	beq.n	8007098 <TIM_OC5_SetConfig+0x54>
 8007070:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007074:	42a8      	cmp	r0, r5
 8007076:	d00f      	beq.n	8007098 <TIM_OC5_SetConfig+0x54>
 8007078:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800707c:	42a8      	cmp	r0, r5
 800707e:	d00b      	beq.n	8007098 <TIM_OC5_SetConfig+0x54>
 8007080:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007084:	42a8      	cmp	r0, r5
 8007086:	d007      	beq.n	8007098 <TIM_OC5_SetConfig+0x54>
 8007088:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800708c:	42a8      	cmp	r0, r5
 800708e:	d003      	beq.n	8007098 <TIM_OC5_SetConfig+0x54>
 8007090:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007094:	42a8      	cmp	r0, r5
 8007096:	d104      	bne.n	80070a2 <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007098:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800709c:	694d      	ldr	r5, [r1, #20]
 800709e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070a2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070a4:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070a6:	684a      	ldr	r2, [r1, #4]
 80070a8:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070aa:	6203      	str	r3, [r0, #32]
}
 80070ac:	bc30      	pop	{r4, r5}
 80070ae:	4770      	bx	lr
 80070b0:	40012c00 	.word	0x40012c00

080070b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070b4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070b6:	6a03      	ldr	r3, [r0, #32]
 80070b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80070bc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070be:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070c2:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070c4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80070c8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070cc:	680d      	ldr	r5, [r1, #0]
 80070ce:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070d6:	688d      	ldr	r5, [r1, #8]
 80070d8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070dc:	4d11      	ldr	r5, [pc, #68]	; (8007124 <TIM_OC6_SetConfig+0x70>)
 80070de:	42a8      	cmp	r0, r5
 80070e0:	d013      	beq.n	800710a <TIM_OC6_SetConfig+0x56>
 80070e2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80070e6:	42a8      	cmp	r0, r5
 80070e8:	d00f      	beq.n	800710a <TIM_OC6_SetConfig+0x56>
 80070ea:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80070ee:	42a8      	cmp	r0, r5
 80070f0:	d00b      	beq.n	800710a <TIM_OC6_SetConfig+0x56>
 80070f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80070f6:	42a8      	cmp	r0, r5
 80070f8:	d007      	beq.n	800710a <TIM_OC6_SetConfig+0x56>
 80070fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80070fe:	42a8      	cmp	r0, r5
 8007100:	d003      	beq.n	800710a <TIM_OC6_SetConfig+0x56>
 8007102:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007106:	42a8      	cmp	r0, r5
 8007108:	d104      	bne.n	8007114 <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800710a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800710e:	694d      	ldr	r5, [r1, #20]
 8007110:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007114:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007116:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007118:	684a      	ldr	r2, [r1, #4]
 800711a:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800711c:	6203      	str	r3, [r0, #32]
}
 800711e:	bc30      	pop	{r4, r5}
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	40012c00 	.word	0x40012c00

08007128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007128:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800712a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800712c:	6a04      	ldr	r4, [r0, #32]
 800712e:	f024 0401 	bic.w	r4, r4, #1
 8007132:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007134:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007136:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800713a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800713e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8007142:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007144:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007146:	6203      	str	r3, [r0, #32]
}
 8007148:	f85d 4b04 	ldr.w	r4, [sp], #4
 800714c:	4770      	bx	lr

0800714e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800714e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007150:	6a04      	ldr	r4, [r0, #32]
 8007152:	f024 0410 	bic.w	r4, r4, #16
 8007156:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007158:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800715a:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800715c:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007160:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007164:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007168:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800716c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800716e:	6203      	str	r3, [r0, #32]
}
 8007170:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007174:	4770      	bx	lr

08007176 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007176:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007178:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800717c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007180:	430b      	orrs	r3, r1
 8007182:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007186:	6083      	str	r3, [r0, #8]
}
 8007188:	4770      	bx	lr

0800718a <HAL_TIM_PWM_MspInit>:
}
 800718a:	4770      	bx	lr

0800718c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800718c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800718e:	4a36      	ldr	r2, [pc, #216]	; (8007268 <TIM_Base_SetConfig+0xdc>)
 8007190:	4290      	cmp	r0, r2
 8007192:	d016      	beq.n	80071c2 <TIM_Base_SetConfig+0x36>
 8007194:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007198:	d013      	beq.n	80071c2 <TIM_Base_SetConfig+0x36>
 800719a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800719e:	4290      	cmp	r0, r2
 80071a0:	d00f      	beq.n	80071c2 <TIM_Base_SetConfig+0x36>
 80071a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071a6:	4290      	cmp	r0, r2
 80071a8:	d00b      	beq.n	80071c2 <TIM_Base_SetConfig+0x36>
 80071aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071ae:	4290      	cmp	r0, r2
 80071b0:	d007      	beq.n	80071c2 <TIM_Base_SetConfig+0x36>
 80071b2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80071b6:	4290      	cmp	r0, r2
 80071b8:	d003      	beq.n	80071c2 <TIM_Base_SetConfig+0x36>
 80071ba:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80071be:	4290      	cmp	r0, r2
 80071c0:	d103      	bne.n	80071ca <TIM_Base_SetConfig+0x3e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80071c6:	684a      	ldr	r2, [r1, #4]
 80071c8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071ca:	4a27      	ldr	r2, [pc, #156]	; (8007268 <TIM_Base_SetConfig+0xdc>)
 80071cc:	4290      	cmp	r0, r2
 80071ce:	d022      	beq.n	8007216 <TIM_Base_SetConfig+0x8a>
 80071d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80071d4:	d01f      	beq.n	8007216 <TIM_Base_SetConfig+0x8a>
 80071d6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80071da:	4290      	cmp	r0, r2
 80071dc:	d01b      	beq.n	8007216 <TIM_Base_SetConfig+0x8a>
 80071de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071e2:	4290      	cmp	r0, r2
 80071e4:	d017      	beq.n	8007216 <TIM_Base_SetConfig+0x8a>
 80071e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071ea:	4290      	cmp	r0, r2
 80071ec:	d013      	beq.n	8007216 <TIM_Base_SetConfig+0x8a>
 80071ee:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80071f2:	4290      	cmp	r0, r2
 80071f4:	d00f      	beq.n	8007216 <TIM_Base_SetConfig+0x8a>
 80071f6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80071fa:	4290      	cmp	r0, r2
 80071fc:	d00b      	beq.n	8007216 <TIM_Base_SetConfig+0x8a>
 80071fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007202:	4290      	cmp	r0, r2
 8007204:	d007      	beq.n	8007216 <TIM_Base_SetConfig+0x8a>
 8007206:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800720a:	4290      	cmp	r0, r2
 800720c:	d003      	beq.n	8007216 <TIM_Base_SetConfig+0x8a>
 800720e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007212:	4290      	cmp	r0, r2
 8007214:	d103      	bne.n	800721e <TIM_Base_SetConfig+0x92>
    tmpcr1 &= ~TIM_CR1_CKD;
 8007216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800721a:	68ca      	ldr	r2, [r1, #12]
 800721c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800721e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007222:	694a      	ldr	r2, [r1, #20]
 8007224:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007226:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007228:	688b      	ldr	r3, [r1, #8]
 800722a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800722c:	680b      	ldr	r3, [r1, #0]
 800722e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007230:	4b0d      	ldr	r3, [pc, #52]	; (8007268 <TIM_Base_SetConfig+0xdc>)
 8007232:	4298      	cmp	r0, r3
 8007234:	d013      	beq.n	800725e <TIM_Base_SetConfig+0xd2>
 8007236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800723a:	4298      	cmp	r0, r3
 800723c:	d00f      	beq.n	800725e <TIM_Base_SetConfig+0xd2>
 800723e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007242:	4298      	cmp	r0, r3
 8007244:	d00b      	beq.n	800725e <TIM_Base_SetConfig+0xd2>
 8007246:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800724a:	4298      	cmp	r0, r3
 800724c:	d007      	beq.n	800725e <TIM_Base_SetConfig+0xd2>
 800724e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007252:	4298      	cmp	r0, r3
 8007254:	d003      	beq.n	800725e <TIM_Base_SetConfig+0xd2>
 8007256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725a:	4298      	cmp	r0, r3
 800725c:	d101      	bne.n	8007262 <TIM_Base_SetConfig+0xd6>
    TIMx->RCR = Structure->RepetitionCounter;
 800725e:	690b      	ldr	r3, [r1, #16]
 8007260:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007262:	2301      	movs	r3, #1
 8007264:	6143      	str	r3, [r0, #20]
}
 8007266:	4770      	bx	lr
 8007268:	40012c00 	.word	0x40012c00

0800726c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800726c:	b360      	cbz	r0, 80072c8 <HAL_TIM_Base_Init+0x5c>
{
 800726e:	b510      	push	{r4, lr}
 8007270:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007272:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007276:	b313      	cbz	r3, 80072be <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8007278:	2302      	movs	r3, #2
 800727a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800727e:	4621      	mov	r1, r4
 8007280:	f851 0b04 	ldr.w	r0, [r1], #4
 8007284:	f7ff ff82 	bl	800718c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007288:	2301      	movs	r3, #1
 800728a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800728e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007292:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007296:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800729a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800729e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80072aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072ae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80072b2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80072b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80072ba:	2000      	movs	r0, #0
}
 80072bc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80072be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80072c2:	f7fb f90f 	bl	80024e4 <HAL_TIM_Base_MspInit>
 80072c6:	e7d7      	b.n	8007278 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80072c8:	2001      	movs	r0, #1
}
 80072ca:	4770      	bx	lr

080072cc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80072cc:	b360      	cbz	r0, 8007328 <HAL_TIM_PWM_Init+0x5c>
{
 80072ce:	b510      	push	{r4, lr}
 80072d0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80072d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80072d6:	b313      	cbz	r3, 800731e <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80072d8:	2302      	movs	r3, #2
 80072da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072de:	4621      	mov	r1, r4
 80072e0:	f851 0b04 	ldr.w	r0, [r1], #4
 80072e4:	f7ff ff52 	bl	800718c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072e8:	2301      	movs	r3, #1
 80072ea:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80072f2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80072f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80072fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80072fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007306:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800730a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800730e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007312:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007316:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800731a:	2000      	movs	r0, #0
}
 800731c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800731e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007322:	f7ff ff32 	bl	800718a <HAL_TIM_PWM_MspInit>
 8007326:	e7d7      	b.n	80072d8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8007328:	2001      	movs	r0, #1
}
 800732a:	4770      	bx	lr

0800732c <TIM_OC2_SetConfig>:
{
 800732c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800732e:	6a03      	ldr	r3, [r0, #32]
 8007330:	f023 0310 	bic.w	r3, r3, #16
 8007334:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007336:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007338:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800733a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800733c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007340:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007344:	680d      	ldr	r5, [r1, #0]
 8007346:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800734a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800734e:	688d      	ldr	r5, [r1, #8]
 8007350:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007354:	4d1b      	ldr	r5, [pc, #108]	; (80073c4 <TIM_OC2_SetConfig+0x98>)
 8007356:	42a8      	cmp	r0, r5
 8007358:	d007      	beq.n	800736a <TIM_OC2_SetConfig+0x3e>
 800735a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800735e:	42a8      	cmp	r0, r5
 8007360:	d003      	beq.n	800736a <TIM_OC2_SetConfig+0x3e>
 8007362:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8007366:	42a8      	cmp	r0, r5
 8007368:	d106      	bne.n	8007378 <TIM_OC2_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC2NP;
 800736a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800736e:	68cd      	ldr	r5, [r1, #12]
 8007370:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007378:	4d12      	ldr	r5, [pc, #72]	; (80073c4 <TIM_OC2_SetConfig+0x98>)
 800737a:	42a8      	cmp	r0, r5
 800737c:	d013      	beq.n	80073a6 <TIM_OC2_SetConfig+0x7a>
 800737e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007382:	42a8      	cmp	r0, r5
 8007384:	d00f      	beq.n	80073a6 <TIM_OC2_SetConfig+0x7a>
 8007386:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800738a:	42a8      	cmp	r0, r5
 800738c:	d00b      	beq.n	80073a6 <TIM_OC2_SetConfig+0x7a>
 800738e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007392:	42a8      	cmp	r0, r5
 8007394:	d007      	beq.n	80073a6 <TIM_OC2_SetConfig+0x7a>
 8007396:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800739a:	42a8      	cmp	r0, r5
 800739c:	d003      	beq.n	80073a6 <TIM_OC2_SetConfig+0x7a>
 800739e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80073a2:	42a8      	cmp	r0, r5
 80073a4:	d107      	bne.n	80073b6 <TIM_OC2_SetConfig+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073a6:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073aa:	694c      	ldr	r4, [r1, #20]
 80073ac:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073b0:	698c      	ldr	r4, [r1, #24]
 80073b2:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80073b6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80073b8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80073ba:	684a      	ldr	r2, [r1, #4]
 80073bc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80073be:	6203      	str	r3, [r0, #32]
}
 80073c0:	bc30      	pop	{r4, r5}
 80073c2:	4770      	bx	lr
 80073c4:	40012c00 	.word	0x40012c00

080073c8 <HAL_TIM_PWM_ConfigChannel>:
{
 80073c8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80073ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	f000 8095 	beq.w	80074fe <HAL_TIM_PWM_ConfigChannel+0x136>
 80073d4:	4604      	mov	r4, r0
 80073d6:	460d      	mov	r5, r1
 80073d8:	2301      	movs	r3, #1
 80073da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80073de:	2a14      	cmp	r2, #20
 80073e0:	f200 8088 	bhi.w	80074f4 <HAL_TIM_PWM_ConfigChannel+0x12c>
 80073e4:	e8df f002 	tbb	[pc, r2]
 80073e8:	8686860b 	.word	0x8686860b
 80073ec:	8686861f 	.word	0x8686861f
 80073f0:	86868634 	.word	0x86868634
 80073f4:	86868648 	.word	0x86868648
 80073f8:	8686865d 	.word	0x8686865d
 80073fc:	71          	.byte	0x71
 80073fd:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073fe:	6800      	ldr	r0, [r0, #0]
 8007400:	f7ff fd2c 	bl	8006e5c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007404:	6822      	ldr	r2, [r4, #0]
 8007406:	6993      	ldr	r3, [r2, #24]
 8007408:	f043 0308 	orr.w	r3, r3, #8
 800740c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800740e:	6822      	ldr	r2, [r4, #0]
 8007410:	6993      	ldr	r3, [r2, #24]
 8007412:	f023 0304 	bic.w	r3, r3, #4
 8007416:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007418:	6822      	ldr	r2, [r4, #0]
 800741a:	6993      	ldr	r3, [r2, #24]
 800741c:	6929      	ldr	r1, [r5, #16]
 800741e:	430b      	orrs	r3, r1
 8007420:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007422:	2000      	movs	r0, #0
      break;
 8007424:	e067      	b.n	80074f6 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007426:	6800      	ldr	r0, [r0, #0]
 8007428:	f7ff ff80 	bl	800732c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800742c:	6822      	ldr	r2, [r4, #0]
 800742e:	6993      	ldr	r3, [r2, #24]
 8007430:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007434:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007436:	6822      	ldr	r2, [r4, #0]
 8007438:	6993      	ldr	r3, [r2, #24]
 800743a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800743e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007440:	6822      	ldr	r2, [r4, #0]
 8007442:	6993      	ldr	r3, [r2, #24]
 8007444:	6929      	ldr	r1, [r5, #16]
 8007446:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800744a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800744c:	2000      	movs	r0, #0
      break;
 800744e:	e052      	b.n	80074f6 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007450:	6800      	ldr	r0, [r0, #0]
 8007452:	f7ff fd5b 	bl	8006f0c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007456:	6822      	ldr	r2, [r4, #0]
 8007458:	69d3      	ldr	r3, [r2, #28]
 800745a:	f043 0308 	orr.w	r3, r3, #8
 800745e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007460:	6822      	ldr	r2, [r4, #0]
 8007462:	69d3      	ldr	r3, [r2, #28]
 8007464:	f023 0304 	bic.w	r3, r3, #4
 8007468:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800746a:	6822      	ldr	r2, [r4, #0]
 800746c:	69d3      	ldr	r3, [r2, #28]
 800746e:	6929      	ldr	r1, [r5, #16]
 8007470:	430b      	orrs	r3, r1
 8007472:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007474:	2000      	movs	r0, #0
      break;
 8007476:	e03e      	b.n	80074f6 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007478:	6800      	ldr	r0, [r0, #0]
 800747a:	f7ff fd95 	bl	8006fa8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800747e:	6822      	ldr	r2, [r4, #0]
 8007480:	69d3      	ldr	r3, [r2, #28]
 8007482:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007486:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007488:	6822      	ldr	r2, [r4, #0]
 800748a:	69d3      	ldr	r3, [r2, #28]
 800748c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007490:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007492:	6822      	ldr	r2, [r4, #0]
 8007494:	69d3      	ldr	r3, [r2, #28]
 8007496:	6929      	ldr	r1, [r5, #16]
 8007498:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800749c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800749e:	2000      	movs	r0, #0
      break;
 80074a0:	e029      	b.n	80074f6 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074a2:	6800      	ldr	r0, [r0, #0]
 80074a4:	f7ff fdce 	bl	8007044 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074a8:	6822      	ldr	r2, [r4, #0]
 80074aa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80074ac:	f043 0308 	orr.w	r3, r3, #8
 80074b0:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074b2:	6822      	ldr	r2, [r4, #0]
 80074b4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80074b6:	f023 0304 	bic.w	r3, r3, #4
 80074ba:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074bc:	6822      	ldr	r2, [r4, #0]
 80074be:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80074c0:	6929      	ldr	r1, [r5, #16]
 80074c2:	430b      	orrs	r3, r1
 80074c4:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 80074c6:	2000      	movs	r0, #0
      break;
 80074c8:	e015      	b.n	80074f6 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074ca:	6800      	ldr	r0, [r0, #0]
 80074cc:	f7ff fdf2 	bl	80070b4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074d0:	6822      	ldr	r2, [r4, #0]
 80074d2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80074d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80074d8:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80074da:	6822      	ldr	r2, [r4, #0]
 80074dc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80074de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074e2:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80074e4:	6822      	ldr	r2, [r4, #0]
 80074e6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80074e8:	6929      	ldr	r1, [r5, #16]
 80074ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80074ee:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 80074f0:	2000      	movs	r0, #0
      break;
 80074f2:	e000      	b.n	80074f6 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 80074f4:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80074f6:	2300      	movs	r3, #0
 80074f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80074fc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80074fe:	2002      	movs	r0, #2
 8007500:	e7fc      	b.n	80074fc <HAL_TIM_PWM_ConfigChannel+0x134>

08007502 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007502:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007504:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007506:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800750a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800750e:	430a      	orrs	r2, r1
 8007510:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007514:	6082      	str	r2, [r0, #8]
}
 8007516:	f85d 4b04 	ldr.w	r4, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800751c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007520:	2b01      	cmp	r3, #1
 8007522:	f000 809b 	beq.w	800765c <HAL_TIM_ConfigClockSource+0x140>
{
 8007526:	b510      	push	{r4, lr}
 8007528:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800752a:	2301      	movs	r3, #1
 800752c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007530:	2302      	movs	r3, #2
 8007532:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007536:	6802      	ldr	r2, [r0, #0]
 8007538:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800753a:	4b49      	ldr	r3, [pc, #292]	; (8007660 <HAL_TIM_ConfigClockSource+0x144>)
 800753c:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800753e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8007540:	680b      	ldr	r3, [r1, #0]
 8007542:	2b70      	cmp	r3, #112	; 0x70
 8007544:	d061      	beq.n	800760a <HAL_TIM_ConfigClockSource+0xee>
 8007546:	d831      	bhi.n	80075ac <HAL_TIM_ConfigClockSource+0x90>
 8007548:	2b50      	cmp	r3, #80	; 0x50
 800754a:	d078      	beq.n	800763e <HAL_TIM_ConfigClockSource+0x122>
 800754c:	d90c      	bls.n	8007568 <HAL_TIM_ConfigClockSource+0x4c>
 800754e:	2b60      	cmp	r3, #96	; 0x60
 8007550:	d12a      	bne.n	80075a8 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007552:	68ca      	ldr	r2, [r1, #12]
 8007554:	6849      	ldr	r1, [r1, #4]
 8007556:	6820      	ldr	r0, [r4, #0]
 8007558:	f7ff fdf9 	bl	800714e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800755c:	2160      	movs	r1, #96	; 0x60
 800755e:	6820      	ldr	r0, [r4, #0]
 8007560:	f7ff fe09 	bl	8007176 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007564:	2000      	movs	r0, #0
      break;
 8007566:	e038      	b.n	80075da <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8007568:	2b40      	cmp	r3, #64	; 0x40
 800756a:	d10a      	bne.n	8007582 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800756c:	68ca      	ldr	r2, [r1, #12]
 800756e:	6849      	ldr	r1, [r1, #4]
 8007570:	6820      	ldr	r0, [r4, #0]
 8007572:	f7ff fdd9 	bl	8007128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007576:	2140      	movs	r1, #64	; 0x40
 8007578:	6820      	ldr	r0, [r4, #0]
 800757a:	f7ff fdfc 	bl	8007176 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800757e:	2000      	movs	r0, #0
      break;
 8007580:	e02b      	b.n	80075da <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8007582:	d867      	bhi.n	8007654 <HAL_TIM_ConfigClockSource+0x138>
 8007584:	2b20      	cmp	r3, #32
 8007586:	d007      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x7c>
 8007588:	d903      	bls.n	8007592 <HAL_TIM_ConfigClockSource+0x76>
 800758a:	2b30      	cmp	r3, #48	; 0x30
 800758c:	d004      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800758e:	2001      	movs	r0, #1
 8007590:	e023      	b.n	80075da <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8007592:	b10b      	cbz	r3, 8007598 <HAL_TIM_ConfigClockSource+0x7c>
 8007594:	2b10      	cmp	r3, #16
 8007596:	d105      	bne.n	80075a4 <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007598:	4619      	mov	r1, r3
 800759a:	6820      	ldr	r0, [r4, #0]
 800759c:	f7ff fdeb 	bl	8007176 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80075a0:	2000      	movs	r0, #0
      break;
 80075a2:	e01a      	b.n	80075da <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 80075a4:	2001      	movs	r0, #1
 80075a6:	e018      	b.n	80075da <HAL_TIM_ConfigClockSource+0xbe>
 80075a8:	2001      	movs	r0, #1
 80075aa:	e016      	b.n	80075da <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80075ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075b0:	d038      	beq.n	8007624 <HAL_TIM_ConfigClockSource+0x108>
 80075b2:	d90e      	bls.n	80075d2 <HAL_TIM_ConfigClockSource+0xb6>
 80075b4:	4a2b      	ldr	r2, [pc, #172]	; (8007664 <HAL_TIM_ConfigClockSource+0x148>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d0ee      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x7c>
 80075ba:	d915      	bls.n	80075e8 <HAL_TIM_ConfigClockSource+0xcc>
 80075bc:	4a2a      	ldr	r2, [pc, #168]	; (8007668 <HAL_TIM_ConfigClockSource+0x14c>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d0ea      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x7c>
 80075c2:	3210      	adds	r2, #16
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d0e7      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x7c>
 80075c8:	3a20      	subs	r2, #32
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d0e4      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 80075ce:	2001      	movs	r0, #1
 80075d0:	e003      	b.n	80075da <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80075d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075d6:	d13f      	bne.n	8007658 <HAL_TIM_ConfigClockSource+0x13c>
 80075d8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80075da:	2301      	movs	r3, #1
 80075dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80075e0:	2300      	movs	r3, #0
 80075e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80075e6:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80075e8:	3a20      	subs	r2, #32
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d0d4      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x7c>
 80075ee:	d904      	bls.n	80075fa <HAL_TIM_ConfigClockSource+0xde>
 80075f0:	4a1e      	ldr	r2, [pc, #120]	; (800766c <HAL_TIM_ConfigClockSource+0x150>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d0d0      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 80075f6:	2001      	movs	r0, #1
 80075f8:	e7ef      	b.n	80075da <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80075fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075fe:	d0cb      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x7c>
 8007600:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007604:	d0c8      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8007606:	2001      	movs	r0, #1
 8007608:	e7e7      	b.n	80075da <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 800760a:	68cb      	ldr	r3, [r1, #12]
 800760c:	684a      	ldr	r2, [r1, #4]
 800760e:	6889      	ldr	r1, [r1, #8]
 8007610:	6820      	ldr	r0, [r4, #0]
 8007612:	f7ff ff76 	bl	8007502 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007616:	6822      	ldr	r2, [r4, #0]
 8007618:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800761a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800761e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007620:	2000      	movs	r0, #0
      break;
 8007622:	e7da      	b.n	80075da <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 8007624:	68cb      	ldr	r3, [r1, #12]
 8007626:	684a      	ldr	r2, [r1, #4]
 8007628:	6889      	ldr	r1, [r1, #8]
 800762a:	6820      	ldr	r0, [r4, #0]
 800762c:	f7ff ff69 	bl	8007502 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007630:	6822      	ldr	r2, [r4, #0]
 8007632:	6893      	ldr	r3, [r2, #8]
 8007634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007638:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800763a:	2000      	movs	r0, #0
      break;
 800763c:	e7cd      	b.n	80075da <HAL_TIM_ConfigClockSource+0xbe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800763e:	68ca      	ldr	r2, [r1, #12]
 8007640:	6849      	ldr	r1, [r1, #4]
 8007642:	6820      	ldr	r0, [r4, #0]
 8007644:	f7ff fd70 	bl	8007128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007648:	2150      	movs	r1, #80	; 0x50
 800764a:	6820      	ldr	r0, [r4, #0]
 800764c:	f7ff fd93 	bl	8007176 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007650:	2000      	movs	r0, #0
      break;
 8007652:	e7c2      	b.n	80075da <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8007654:	2001      	movs	r0, #1
 8007656:	e7c0      	b.n	80075da <HAL_TIM_ConfigClockSource+0xbe>
 8007658:	2001      	movs	r0, #1
 800765a:	e7be      	b.n	80075da <HAL_TIM_ConfigClockSource+0xbe>
  __HAL_LOCK(htim);
 800765c:	2002      	movs	r0, #2
}
 800765e:	4770      	bx	lr
 8007660:	ffce0088 	.word	0xffce0088
 8007664:	00100040 	.word	0x00100040
 8007668:	00100060 	.word	0x00100060
 800766c:	00100030 	.word	0x00100030

08007670 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007670:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007674:	2b01      	cmp	r3, #1
 8007676:	d04c      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
{
 8007678:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800767a:	2301      	movs	r3, #1
 800767c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007680:	2302      	movs	r3, #2
 8007682:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007686:	6802      	ldr	r2, [r0, #0]
 8007688:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800768a:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800768c:	4d22      	ldr	r5, [pc, #136]	; (8007718 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800768e:	42aa      	cmp	r2, r5
 8007690:	d007      	beq.n	80076a2 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8007692:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007696:	42aa      	cmp	r2, r5
 8007698:	d003      	beq.n	80076a2 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800769a:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800769e:	42aa      	cmp	r2, r5
 80076a0:	d103      	bne.n	80076aa <HAL_TIMEx_MasterConfigSynchronization+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076a6:	684d      	ldr	r5, [r1, #4]
 80076a8:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076aa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80076ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076b2:	680d      	ldr	r5, [r1, #0]
 80076b4:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076b6:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076b8:	6803      	ldr	r3, [r0, #0]
 80076ba:	4a17      	ldr	r2, [pc, #92]	; (8007718 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d01a      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80076c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c4:	d017      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80076c6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d013      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80076ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d00f      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80076d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00b      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80076de:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d007      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80076e6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d003      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80076ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d104      	bne.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0x90>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076f6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076fa:	688a      	ldr	r2, [r1, #8]
 80076fc:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076fe:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007700:	2301      	movs	r3, #1
 8007702:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007706:	2300      	movs	r3, #0
 8007708:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800770c:	4618      	mov	r0, r3
}
 800770e:	bc30      	pop	{r4, r5}
 8007710:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007712:	2002      	movs	r0, #2
}
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	40012c00 	.word	0x40012c00

0800771c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800771c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007720:	2b01      	cmp	r3, #1
 8007722:	d060      	beq.n	80077e6 <HAL_TIMEx_ConfigBreakDeadTime+0xca>
{
 8007724:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8007726:	2301      	movs	r3, #1
 8007728:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800772c:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800772e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007732:	688a      	ldr	r2, [r1, #8]
 8007734:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007736:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800773a:	684a      	ldr	r2, [r1, #4]
 800773c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800773e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007742:	680a      	ldr	r2, [r1, #0]
 8007744:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800774a:	690a      	ldr	r2, [r1, #16]
 800774c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800774e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007752:	694a      	ldr	r2, [r1, #20]
 8007754:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800775a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800775c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800775e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8007762:	698a      	ldr	r2, [r1, #24]
 8007764:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007768:	6802      	ldr	r2, [r0, #0]
 800776a:	4c20      	ldr	r4, [pc, #128]	; (80077ec <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 800776c:	42a2      	cmp	r2, r4
 800776e:	d007      	beq.n	8007780 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007770:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007774:	42a2      	cmp	r2, r4
 8007776:	d003      	beq.n	8007780 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007778:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800777c:	42a2      	cmp	r2, r4
 800777e:	d103      	bne.n	8007788 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007784:	69cc      	ldr	r4, [r1, #28]
 8007786:	4323      	orrs	r3, r4
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007788:	4c18      	ldr	r4, [pc, #96]	; (80077ec <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 800778a:	42a2      	cmp	r2, r4
 800778c:	d007      	beq.n	800779e <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800778e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007792:	42a2      	cmp	r2, r4
 8007794:	d003      	beq.n	800779e <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8007796:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800779a:	42a2      	cmp	r2, r4
 800779c:	d11b      	bne.n	80077d6 <HAL_TIMEx_ConfigBreakDeadTime+0xba>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800779e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077a2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80077a4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80077a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077ac:	6a0c      	ldr	r4, [r1, #32]
 80077ae:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80077b0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80077b4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80077b6:	4323      	orrs	r3, r4

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80077b8:	4c0c      	ldr	r4, [pc, #48]	; (80077ec <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 80077ba:	42a2      	cmp	r2, r4
 80077bc:	d007      	beq.n	80077ce <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 80077be:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80077c2:	42a2      	cmp	r2, r4
 80077c4:	d003      	beq.n	80077ce <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 80077c6:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80077ca:	42a2      	cmp	r2, r4
 80077cc:	d103      	bne.n	80077d6 <HAL_TIMEx_ConfigBreakDeadTime+0xba>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80077ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80077d2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80077d4:	430b      	orrs	r3, r1
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80077d6:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80077d8:	2300      	movs	r3, #0
 80077da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80077de:	4618      	mov	r0, r3
}
 80077e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077e4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80077e6:	2002      	movs	r0, #2
}
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	40012c00 	.word	0x40012c00

080077f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077f0:	b570      	push	{r4, r5, r6, lr}
 80077f2:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80077f4:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077f6:	6883      	ldr	r3, [r0, #8]
 80077f8:	6902      	ldr	r2, [r0, #16]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	6942      	ldr	r2, [r0, #20]
 80077fe:	4313      	orrs	r3, r2
 8007800:	69c2      	ldr	r2, [r0, #28]
 8007802:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007804:	6808      	ldr	r0, [r1, #0]
 8007806:	4a96      	ldr	r2, [pc, #600]	; (8007a60 <UART_SetConfig+0x270>)
 8007808:	4002      	ands	r2, r0
 800780a:	4313      	orrs	r3, r2
 800780c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800780e:	6822      	ldr	r2, [r4, #0]
 8007810:	6853      	ldr	r3, [r2, #4]
 8007812:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007816:	68e1      	ldr	r1, [r4, #12]
 8007818:	430b      	orrs	r3, r1
 800781a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800781c:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800781e:	6822      	ldr	r2, [r4, #0]
 8007820:	4b90      	ldr	r3, [pc, #576]	; (8007a64 <UART_SetConfig+0x274>)
 8007822:	429a      	cmp	r2, r3
 8007824:	d001      	beq.n	800782a <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007826:	6a23      	ldr	r3, [r4, #32]
 8007828:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800782a:	6893      	ldr	r3, [r2, #8]
 800782c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007830:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007834:	430b      	orrs	r3, r1
 8007836:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007838:	6822      	ldr	r2, [r4, #0]
 800783a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800783c:	f023 030f 	bic.w	r3, r3, #15
 8007840:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007842:	430b      	orrs	r3, r1
 8007844:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	4a87      	ldr	r2, [pc, #540]	; (8007a68 <UART_SetConfig+0x278>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d010      	beq.n	8007870 <UART_SetConfig+0x80>
 800784e:	4a87      	ldr	r2, [pc, #540]	; (8007a6c <UART_SetConfig+0x27c>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d021      	beq.n	8007898 <UART_SetConfig+0xa8>
 8007854:	4a86      	ldr	r2, [pc, #536]	; (8007a70 <UART_SetConfig+0x280>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d037      	beq.n	80078ca <UART_SetConfig+0xda>
 800785a:	4a86      	ldr	r2, [pc, #536]	; (8007a74 <UART_SetConfig+0x284>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d05c      	beq.n	800791a <UART_SetConfig+0x12a>
 8007860:	4a85      	ldr	r2, [pc, #532]	; (8007a78 <UART_SetConfig+0x288>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d06b      	beq.n	800793e <UART_SetConfig+0x14e>
 8007866:	4a7f      	ldr	r2, [pc, #508]	; (8007a64 <UART_SetConfig+0x274>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d07d      	beq.n	8007968 <UART_SetConfig+0x178>
 800786c:	2210      	movs	r2, #16
 800786e:	e03a      	b.n	80078e6 <UART_SetConfig+0xf6>
 8007870:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8007874:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007878:	f002 0203 	and.w	r2, r2, #3
 800787c:	2a03      	cmp	r2, #3
 800787e:	d809      	bhi.n	8007894 <UART_SetConfig+0xa4>
 8007880:	e8df f002 	tbb	[pc, r2]
 8007884:	06870402 	.word	0x06870402
 8007888:	2201      	movs	r2, #1
 800788a:	e02c      	b.n	80078e6 <UART_SetConfig+0xf6>
 800788c:	2204      	movs	r2, #4
 800788e:	e02a      	b.n	80078e6 <UART_SetConfig+0xf6>
 8007890:	2208      	movs	r2, #8
 8007892:	e028      	b.n	80078e6 <UART_SetConfig+0xf6>
 8007894:	2210      	movs	r2, #16
 8007896:	e026      	b.n	80078e6 <UART_SetConfig+0xf6>
 8007898:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 800789c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80078a0:	f002 020c 	and.w	r2, r2, #12
 80078a4:	2a0c      	cmp	r2, #12
 80078a6:	d80e      	bhi.n	80078c6 <UART_SetConfig+0xd6>
 80078a8:	e8df f002 	tbb	[pc, r2]
 80078ac:	0d0d0d07 	.word	0x0d0d0d07
 80078b0:	0d0d0d09 	.word	0x0d0d0d09
 80078b4:	0d0d0d75 	.word	0x0d0d0d75
 80078b8:	0b          	.byte	0x0b
 80078b9:	00          	.byte	0x00
 80078ba:	2200      	movs	r2, #0
 80078bc:	e013      	b.n	80078e6 <UART_SetConfig+0xf6>
 80078be:	2204      	movs	r2, #4
 80078c0:	e011      	b.n	80078e6 <UART_SetConfig+0xf6>
 80078c2:	2208      	movs	r2, #8
 80078c4:	e00f      	b.n	80078e6 <UART_SetConfig+0xf6>
 80078c6:	2210      	movs	r2, #16
 80078c8:	e00d      	b.n	80078e6 <UART_SetConfig+0xf6>
 80078ca:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80078ce:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80078d2:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80078d6:	2a20      	cmp	r2, #32
 80078d8:	d05f      	beq.n	800799a <UART_SetConfig+0x1aa>
 80078da:	d81a      	bhi.n	8007912 <UART_SetConfig+0x122>
 80078dc:	2a00      	cmp	r2, #0
 80078de:	d05e      	beq.n	800799e <UART_SetConfig+0x1ae>
 80078e0:	2a10      	cmp	r2, #16
 80078e2:	d15e      	bne.n	80079a2 <UART_SetConfig+0x1b2>
 80078e4:	2204      	movs	r2, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078e6:	495f      	ldr	r1, [pc, #380]	; (8007a64 <UART_SetConfig+0x274>)
 80078e8:	428b      	cmp	r3, r1
 80078ea:	d076      	beq.n	80079da <UART_SetConfig+0x1ea>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078ec:	69e0      	ldr	r0, [r4, #28]
 80078ee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80078f2:	f000 80c9 	beq.w	8007a88 <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078f6:	2a08      	cmp	r2, #8
 80078f8:	f200 8134 	bhi.w	8007b64 <UART_SetConfig+0x374>
 80078fc:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007900:	011900f7 	.word	0x011900f7
 8007904:	013200f5 	.word	0x013200f5
 8007908:	0132011c 	.word	0x0132011c
 800790c:	01320132 	.word	0x01320132
 8007910:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007912:	2a30      	cmp	r2, #48	; 0x30
 8007914:	d147      	bne.n	80079a6 <UART_SetConfig+0x1b6>
 8007916:	2208      	movs	r2, #8
 8007918:	e7e5      	b.n	80078e6 <UART_SetConfig+0xf6>
 800791a:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 800791e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007922:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8007926:	2a80      	cmp	r2, #128	; 0x80
 8007928:	d03f      	beq.n	80079aa <UART_SetConfig+0x1ba>
 800792a:	d804      	bhi.n	8007936 <UART_SetConfig+0x146>
 800792c:	b3fa      	cbz	r2, 80079ae <UART_SetConfig+0x1be>
 800792e:	2a40      	cmp	r2, #64	; 0x40
 8007930:	d13f      	bne.n	80079b2 <UART_SetConfig+0x1c2>
 8007932:	2204      	movs	r2, #4
 8007934:	e7d7      	b.n	80078e6 <UART_SetConfig+0xf6>
 8007936:	2ac0      	cmp	r2, #192	; 0xc0
 8007938:	d13d      	bne.n	80079b6 <UART_SetConfig+0x1c6>
 800793a:	2208      	movs	r2, #8
 800793c:	e7d3      	b.n	80078e6 <UART_SetConfig+0xf6>
 800793e:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8007942:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007946:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800794a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800794e:	d034      	beq.n	80079ba <UART_SetConfig+0x1ca>
 8007950:	d805      	bhi.n	800795e <UART_SetConfig+0x16e>
 8007952:	b3a2      	cbz	r2, 80079be <UART_SetConfig+0x1ce>
 8007954:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007958:	d133      	bne.n	80079c2 <UART_SetConfig+0x1d2>
 800795a:	2204      	movs	r2, #4
 800795c:	e7c3      	b.n	80078e6 <UART_SetConfig+0xf6>
 800795e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007962:	d130      	bne.n	80079c6 <UART_SetConfig+0x1d6>
 8007964:	2208      	movs	r2, #8
 8007966:	e7be      	b.n	80078e6 <UART_SetConfig+0xf6>
 8007968:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 800796c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007970:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8007974:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007978:	d027      	beq.n	80079ca <UART_SetConfig+0x1da>
 800797a:	d805      	bhi.n	8007988 <UART_SetConfig+0x198>
 800797c:	b33a      	cbz	r2, 80079ce <UART_SetConfig+0x1de>
 800797e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007982:	d126      	bne.n	80079d2 <UART_SetConfig+0x1e2>
 8007984:	2204      	movs	r2, #4
 8007986:	e7ae      	b.n	80078e6 <UART_SetConfig+0xf6>
 8007988:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800798c:	d123      	bne.n	80079d6 <UART_SetConfig+0x1e6>
 800798e:	2208      	movs	r2, #8
 8007990:	e7a9      	b.n	80078e6 <UART_SetConfig+0xf6>
 8007992:	2202      	movs	r2, #2
 8007994:	e7a7      	b.n	80078e6 <UART_SetConfig+0xf6>
 8007996:	2202      	movs	r2, #2
 8007998:	e7a5      	b.n	80078e6 <UART_SetConfig+0xf6>
 800799a:	2202      	movs	r2, #2
 800799c:	e7a3      	b.n	80078e6 <UART_SetConfig+0xf6>
 800799e:	2200      	movs	r2, #0
 80079a0:	e7a1      	b.n	80078e6 <UART_SetConfig+0xf6>
 80079a2:	2210      	movs	r2, #16
 80079a4:	e79f      	b.n	80078e6 <UART_SetConfig+0xf6>
 80079a6:	2210      	movs	r2, #16
 80079a8:	e79d      	b.n	80078e6 <UART_SetConfig+0xf6>
 80079aa:	2202      	movs	r2, #2
 80079ac:	e79b      	b.n	80078e6 <UART_SetConfig+0xf6>
 80079ae:	2200      	movs	r2, #0
 80079b0:	e799      	b.n	80078e6 <UART_SetConfig+0xf6>
 80079b2:	2210      	movs	r2, #16
 80079b4:	e797      	b.n	80078e6 <UART_SetConfig+0xf6>
 80079b6:	2210      	movs	r2, #16
 80079b8:	e795      	b.n	80078e6 <UART_SetConfig+0xf6>
 80079ba:	2202      	movs	r2, #2
 80079bc:	e793      	b.n	80078e6 <UART_SetConfig+0xf6>
 80079be:	2200      	movs	r2, #0
 80079c0:	e791      	b.n	80078e6 <UART_SetConfig+0xf6>
 80079c2:	2210      	movs	r2, #16
 80079c4:	e78f      	b.n	80078e6 <UART_SetConfig+0xf6>
 80079c6:	2210      	movs	r2, #16
 80079c8:	e78d      	b.n	80078e6 <UART_SetConfig+0xf6>
 80079ca:	2202      	movs	r2, #2
 80079cc:	e78b      	b.n	80078e6 <UART_SetConfig+0xf6>
 80079ce:	2200      	movs	r2, #0
 80079d0:	e789      	b.n	80078e6 <UART_SetConfig+0xf6>
 80079d2:	2210      	movs	r2, #16
 80079d4:	e787      	b.n	80078e6 <UART_SetConfig+0xf6>
 80079d6:	2210      	movs	r2, #16
 80079d8:	e785      	b.n	80078e6 <UART_SetConfig+0xf6>
    switch (clocksource)
 80079da:	2a08      	cmp	r2, #8
 80079dc:	f200 80b2 	bhi.w	8007b44 <UART_SetConfig+0x354>
 80079e0:	e8df f002 	tbb	[pc, r2]
 80079e4:	b03bb008 	.word	0xb03bb008
 80079e8:	b0b0b038 	.word	0xb0b0b038
 80079ec:	05          	.byte	0x05
 80079ed:	00          	.byte	0x00
 80079ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80079f2:	e004      	b.n	80079fe <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f4:	f7fe ffb2 	bl	800695c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80079f8:	2800      	cmp	r0, #0
 80079fa:	f000 80a5 	beq.w	8007b48 <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80079fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007a00:	4b1e      	ldr	r3, [pc, #120]	; (8007a7c <UART_SetConfig+0x28c>)
 8007a02:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007a06:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a0a:	6865      	ldr	r5, [r4, #4]
 8007a0c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007a10:	4299      	cmp	r1, r3
 8007a12:	f200 809b 	bhi.w	8007b4c <UART_SetConfig+0x35c>
 8007a16:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007a1a:	f200 8099 	bhi.w	8007b50 <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a1e:	2600      	movs	r6, #0
 8007a20:	4633      	mov	r3, r6
 8007a22:	4631      	mov	r1, r6
 8007a24:	f7f9 f958 	bl	8000cd8 <__aeabi_uldivmod>
 8007a28:	0209      	lsls	r1, r1, #8
 8007a2a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007a2e:	0200      	lsls	r0, r0, #8
 8007a30:	086b      	lsrs	r3, r5, #1
 8007a32:	18c0      	adds	r0, r0, r3
 8007a34:	462a      	mov	r2, r5
 8007a36:	4633      	mov	r3, r6
 8007a38:	f141 0100 	adc.w	r1, r1, #0
 8007a3c:	f7f9 f94c 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a40:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8007a44:	4b0e      	ldr	r3, [pc, #56]	; (8007a80 <UART_SetConfig+0x290>)
 8007a46:	429a      	cmp	r2, r3
 8007a48:	f200 8084 	bhi.w	8007b54 <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	60d8      	str	r0, [r3, #12]
 8007a50:	4630      	mov	r0, r6
 8007a52:	e065      	b.n	8007b20 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 8007a54:	f7fe fe3c 	bl	80066d0 <HAL_RCC_GetSysClockFreq>
        break;
 8007a58:	e7ce      	b.n	80079f8 <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 8007a5a:	480a      	ldr	r0, [pc, #40]	; (8007a84 <UART_SetConfig+0x294>)
 8007a5c:	e7cf      	b.n	80079fe <UART_SetConfig+0x20e>
 8007a5e:	bf00      	nop
 8007a60:	cfff69f3 	.word	0xcfff69f3
 8007a64:	40008000 	.word	0x40008000
 8007a68:	40013800 	.word	0x40013800
 8007a6c:	40004400 	.word	0x40004400
 8007a70:	40004800 	.word	0x40004800
 8007a74:	40004c00 	.word	0x40004c00
 8007a78:	40005000 	.word	0x40005000
 8007a7c:	0800f568 	.word	0x0800f568
 8007a80:	000ffcff 	.word	0x000ffcff
 8007a84:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8007a88:	2a08      	cmp	r2, #8
 8007a8a:	d865      	bhi.n	8007b58 <UART_SetConfig+0x368>
 8007a8c:	e8df f002 	tbb	[pc, r2]
 8007a90:	64052707 	.word	0x64052707
 8007a94:	6464642a 	.word	0x6464642a
 8007a98:	0b          	.byte	0x0b
 8007a99:	00          	.byte	0x00
 8007a9a:	4835      	ldr	r0, [pc, #212]	; (8007b70 <UART_SetConfig+0x380>)
 8007a9c:	e003      	b.n	8007aa6 <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a9e:	f7fe ff5d 	bl	800695c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d05a      	beq.n	8007b5c <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aa6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007aa8:	4b32      	ldr	r3, [pc, #200]	; (8007b74 <UART_SetConfig+0x384>)
 8007aaa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007aae:	fbb0 f0f3 	udiv	r0, r0, r3
 8007ab2:	6862      	ldr	r2, [r4, #4]
 8007ab4:	0853      	lsrs	r3, r2, #1
 8007ab6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8007aba:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007abe:	f1a0 0210 	sub.w	r2, r0, #16
 8007ac2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d84a      	bhi.n	8007b60 <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007aca:	b283      	uxth	r3, r0
 8007acc:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ad0:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8007ad4:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	60d8      	str	r0, [r3, #12]
 8007ada:	2000      	movs	r0, #0
 8007adc:	e020      	b.n	8007b20 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ade:	f7fe ff4f 	bl	8006980 <HAL_RCC_GetPCLK2Freq>
        break;
 8007ae2:	e7de      	b.n	8007aa2 <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 8007ae4:	f7fe fdf4 	bl	80066d0 <HAL_RCC_GetSysClockFreq>
        break;
 8007ae8:	e7db      	b.n	8007aa2 <UART_SetConfig+0x2b2>
    switch (clocksource)
 8007aea:	4821      	ldr	r0, [pc, #132]	; (8007b70 <UART_SetConfig+0x380>)
 8007aec:	e003      	b.n	8007af6 <UART_SetConfig+0x306>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aee:	f7fe ff35 	bl	800695c <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d038      	beq.n	8007b68 <UART_SetConfig+0x378>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007af6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007af8:	4b1e      	ldr	r3, [pc, #120]	; (8007b74 <UART_SetConfig+0x384>)
 8007afa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007afe:	fbb0 f0f3 	udiv	r0, r0, r3
 8007b02:	6863      	ldr	r3, [r4, #4]
 8007b04:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007b08:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b0c:	f1a0 0210 	sub.w	r2, r0, #16
 8007b10:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d829      	bhi.n	8007b6c <UART_SetConfig+0x37c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b18:	6823      	ldr	r3, [r4, #0]
 8007b1a:	b280      	uxth	r0, r0
 8007b1c:	60d8      	str	r0, [r3, #12]
 8007b1e:	2000      	movs	r0, #0
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b20:	2301      	movs	r3, #1
 8007b22:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007b26:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8007b2e:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 8007b30:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b32:	f7fe ff25 	bl	8006980 <HAL_RCC_GetPCLK2Freq>
        break;
 8007b36:	e7dc      	b.n	8007af2 <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 8007b38:	f7fe fdca 	bl	80066d0 <HAL_RCC_GetSysClockFreq>
        break;
 8007b3c:	e7d9      	b.n	8007af2 <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 8007b3e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007b42:	e7d8      	b.n	8007af6 <UART_SetConfig+0x306>
    switch (clocksource)
 8007b44:	2001      	movs	r0, #1
 8007b46:	e7eb      	b.n	8007b20 <UART_SetConfig+0x330>
 8007b48:	2000      	movs	r0, #0
 8007b4a:	e7e9      	b.n	8007b20 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8007b4c:	2001      	movs	r0, #1
 8007b4e:	e7e7      	b.n	8007b20 <UART_SetConfig+0x330>
 8007b50:	2001      	movs	r0, #1
 8007b52:	e7e5      	b.n	8007b20 <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 8007b54:	2001      	movs	r0, #1
 8007b56:	e7e3      	b.n	8007b20 <UART_SetConfig+0x330>
    switch (clocksource)
 8007b58:	2001      	movs	r0, #1
 8007b5a:	e7e1      	b.n	8007b20 <UART_SetConfig+0x330>
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	e7df      	b.n	8007b20 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8007b60:	2001      	movs	r0, #1
 8007b62:	e7dd      	b.n	8007b20 <UART_SetConfig+0x330>
    switch (clocksource)
 8007b64:	2001      	movs	r0, #1
 8007b66:	e7db      	b.n	8007b20 <UART_SetConfig+0x330>
 8007b68:	2000      	movs	r0, #0
 8007b6a:	e7d9      	b.n	8007b20 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8007b6c:	2001      	movs	r0, #1
 8007b6e:	e7d7      	b.n	8007b20 <UART_SetConfig+0x330>
 8007b70:	00f42400 	.word	0x00f42400
 8007b74:	0800f568 	.word	0x0800f568

08007b78 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b78:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007b7a:	f013 0f01 	tst.w	r3, #1
 8007b7e:	d006      	beq.n	8007b8e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b80:	6802      	ldr	r2, [r0, #0]
 8007b82:	6853      	ldr	r3, [r2, #4]
 8007b84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007b88:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007b8a:	430b      	orrs	r3, r1
 8007b8c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007b90:	f013 0f02 	tst.w	r3, #2
 8007b94:	d006      	beq.n	8007ba4 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b96:	6802      	ldr	r2, [r0, #0]
 8007b98:	6853      	ldr	r3, [r2, #4]
 8007b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b9e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007ba0:	430b      	orrs	r3, r1
 8007ba2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ba4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007ba6:	f013 0f04 	tst.w	r3, #4
 8007baa:	d006      	beq.n	8007bba <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bac:	6802      	ldr	r2, [r0, #0]
 8007bae:	6853      	ldr	r3, [r2, #4]
 8007bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bb4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007bb6:	430b      	orrs	r3, r1
 8007bb8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007bbc:	f013 0f08 	tst.w	r3, #8
 8007bc0:	d006      	beq.n	8007bd0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bc2:	6802      	ldr	r2, [r0, #0]
 8007bc4:	6853      	ldr	r3, [r2, #4]
 8007bc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bca:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bd0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007bd2:	f013 0f10 	tst.w	r3, #16
 8007bd6:	d006      	beq.n	8007be6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bd8:	6802      	ldr	r2, [r0, #0]
 8007bda:	6893      	ldr	r3, [r2, #8]
 8007bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007be0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007be2:	430b      	orrs	r3, r1
 8007be4:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007be6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007be8:	f013 0f20 	tst.w	r3, #32
 8007bec:	d006      	beq.n	8007bfc <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bee:	6802      	ldr	r2, [r0, #0]
 8007bf0:	6893      	ldr	r3, [r2, #8]
 8007bf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bf6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007bf8:	430b      	orrs	r3, r1
 8007bfa:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bfc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007bfe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007c02:	d00a      	beq.n	8007c1a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c04:	6802      	ldr	r2, [r0, #0]
 8007c06:	6853      	ldr	r3, [r2, #4]
 8007c08:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007c0c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007c0e:	430b      	orrs	r3, r1
 8007c10:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c12:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c18:	d00b      	beq.n	8007c32 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c1a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007c1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007c20:	d006      	beq.n	8007c30 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c22:	6802      	ldr	r2, [r0, #0]
 8007c24:	6853      	ldr	r3, [r2, #4]
 8007c26:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007c2a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007c2c:	430b      	orrs	r3, r1
 8007c2e:	6053      	str	r3, [r2, #4]
  }
}
 8007c30:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c32:	6802      	ldr	r2, [r0, #0]
 8007c34:	6853      	ldr	r3, [r2, #4]
 8007c36:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007c3a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007c3c:	430b      	orrs	r3, r1
 8007c3e:	6053      	str	r3, [r2, #4]
 8007c40:	e7eb      	b.n	8007c1a <UART_AdvFeatureConfig+0xa2>

08007c42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c46:	4605      	mov	r5, r0
 8007c48:	460f      	mov	r7, r1
 8007c4a:	4616      	mov	r6, r2
 8007c4c:	4699      	mov	r9, r3
 8007c4e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c52:	682c      	ldr	r4, [r5, #0]
 8007c54:	69e4      	ldr	r4, [r4, #28]
 8007c56:	ea37 0304 	bics.w	r3, r7, r4
 8007c5a:	bf0c      	ite	eq
 8007c5c:	f04f 0c01 	moveq.w	ip, #1
 8007c60:	f04f 0c00 	movne.w	ip, #0
 8007c64:	45b4      	cmp	ip, r6
 8007c66:	d157      	bne.n	8007d18 <UART_WaitOnFlagUntilTimeout+0xd6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c68:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8007c6c:	d0f1      	beq.n	8007c52 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c6e:	f7fb fa5f 	bl	8003130 <HAL_GetTick>
 8007c72:	eba0 0009 	sub.w	r0, r0, r9
 8007c76:	4540      	cmp	r0, r8
 8007c78:	d82f      	bhi.n	8007cda <UART_WaitOnFlagUntilTimeout+0x98>
 8007c7a:	f1b8 0f00 	cmp.w	r8, #0
 8007c7e:	d02c      	beq.n	8007cda <UART_WaitOnFlagUntilTimeout+0x98>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c80:	682b      	ldr	r3, [r5, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	f012 0f04 	tst.w	r2, #4
 8007c88:	d0e3      	beq.n	8007c52 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c8a:	69da      	ldr	r2, [r3, #28]
 8007c8c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007c90:	d0df      	beq.n	8007c52 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c96:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c98:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9a:	e852 3f00 	ldrex	r3, [r2]
 8007c9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca2:	e842 3100 	strex	r1, r3, [r2]
 8007ca6:	2900      	cmp	r1, #0
 8007ca8:	d1f6      	bne.n	8007c98 <UART_WaitOnFlagUntilTimeout+0x56>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007caa:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	f102 0308 	add.w	r3, r2, #8
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb8:	3208      	adds	r2, #8
 8007cba:	e842 3100 	strex	r1, r3, [r2]
 8007cbe:	2900      	cmp	r1, #0
 8007cc0:	d1f3      	bne.n	8007caa <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 8007cc2:	2320      	movs	r3, #32
 8007cc4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007cc8:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ccc:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80

          return HAL_TIMEOUT;
 8007cd6:	2003      	movs	r0, #3
 8007cd8:	e01f      	b.n	8007d1a <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007cda:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cdc:	e852 3f00 	ldrex	r3, [r2]
 8007ce0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce4:	e842 3100 	strex	r1, r3, [r2]
 8007ce8:	2900      	cmp	r1, #0
 8007cea:	d1f6      	bne.n	8007cda <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cec:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cee:	f102 0308 	add.w	r3, r2, #8
 8007cf2:	e853 3f00 	ldrex	r3, [r3]
 8007cf6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfa:	3208      	adds	r2, #8
 8007cfc:	e842 3100 	strex	r1, r3, [r2]
 8007d00:	2900      	cmp	r1, #0
 8007d02:	d1f3      	bne.n	8007cec <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8007d04:	2320      	movs	r3, #32
 8007d06:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007d0a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8007d14:	2003      	movs	r0, #3
 8007d16:	e000      	b.n	8007d1a <UART_WaitOnFlagUntilTimeout+0xd8>
        }
      }
    }
  }
  return HAL_OK;
 8007d18:	2000      	movs	r0, #0
}
 8007d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007d1e <UART_CheckIdleState>:
{
 8007d1e:	b530      	push	{r4, r5, lr}
 8007d20:	b083      	sub	sp, #12
 8007d22:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d24:	2300      	movs	r3, #0
 8007d26:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8007d2a:	f7fb fa01 	bl	8003130 <HAL_GetTick>
 8007d2e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d30:	6822      	ldr	r2, [r4, #0]
 8007d32:	6812      	ldr	r2, [r2, #0]
 8007d34:	f012 0f08 	tst.w	r2, #8
 8007d38:	d10f      	bne.n	8007d5a <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f013 0f04 	tst.w	r3, #4
 8007d42:	d118      	bne.n	8007d76 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8007d44:	2320      	movs	r3, #32
 8007d46:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007d4a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4e:	2000      	movs	r0, #0
 8007d50:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8007d52:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007d56:	b003      	add	sp, #12
 8007d58:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	4603      	mov	r3, r0
 8007d62:	2200      	movs	r2, #0
 8007d64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f7ff ff6a 	bl	8007c42 <UART_WaitOnFlagUntilTimeout>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	d0e3      	beq.n	8007d3a <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8007d72:	2003      	movs	r0, #3
 8007d74:	e7ef      	b.n	8007d56 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	462b      	mov	r3, r5
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d84:	4620      	mov	r0, r4
 8007d86:	f7ff ff5c 	bl	8007c42 <UART_WaitOnFlagUntilTimeout>
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d0da      	beq.n	8007d44 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8007d8e:	2003      	movs	r0, #3
 8007d90:	e7e1      	b.n	8007d56 <UART_CheckIdleState+0x38>

08007d92 <HAL_UART_Init>:
  if (huart == NULL)
 8007d92:	b378      	cbz	r0, 8007df4 <HAL_UART_Init+0x62>
{
 8007d94:	b510      	push	{r4, lr}
 8007d96:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007d98:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8007d9c:	b30b      	cbz	r3, 8007de2 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8007d9e:	2324      	movs	r3, #36	; 0x24
 8007da0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8007da4:	6822      	ldr	r2, [r4, #0]
 8007da6:	6813      	ldr	r3, [r2, #0]
 8007da8:	f023 0301 	bic.w	r3, r3, #1
 8007dac:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007dae:	4620      	mov	r0, r4
 8007db0:	f7ff fd1e 	bl	80077f0 <UART_SetConfig>
 8007db4:	2801      	cmp	r0, #1
 8007db6:	d013      	beq.n	8007de0 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007db8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007dba:	b9bb      	cbnz	r3, 8007dec <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dbc:	6822      	ldr	r2, [r4, #0]
 8007dbe:	6853      	ldr	r3, [r2, #4]
 8007dc0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007dc4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dc6:	6822      	ldr	r2, [r4, #0]
 8007dc8:	6893      	ldr	r3, [r2, #8]
 8007dca:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007dce:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007dd0:	6822      	ldr	r2, [r4, #0]
 8007dd2:	6813      	ldr	r3, [r2, #0]
 8007dd4:	f043 0301 	orr.w	r3, r3, #1
 8007dd8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f7ff ff9f 	bl	8007d1e <UART_CheckIdleState>
}
 8007de0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007de2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8007de6:	f7fb f849 	bl	8002e7c <HAL_UART_MspInit>
 8007dea:	e7d8      	b.n	8007d9e <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8007dec:	4620      	mov	r0, r4
 8007dee:	f7ff fec3 	bl	8007b78 <UART_AdvFeatureConfig>
 8007df2:	e7e3      	b.n	8007dbc <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8007df4:	2001      	movs	r0, #1
}
 8007df6:	4770      	bx	lr

08007df8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007df8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8007dfa:	b92b      	cbnz	r3, 8007e08 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e02:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8007e06:	4770      	bx	lr
{
 8007e08:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e0a:	6803      	ldr	r3, [r0, #0]
 8007e0c:	689a      	ldr	r2, [r3, #8]
 8007e0e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e12:	6899      	ldr	r1, [r3, #8]
 8007e14:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e16:	4d09      	ldr	r5, [pc, #36]	; (8007e3c <UARTEx_SetNbDataToProcess+0x44>)
 8007e18:	5c6b      	ldrb	r3, [r5, r1]
 8007e1a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e1c:	4c08      	ldr	r4, [pc, #32]	; (8007e40 <UARTEx_SetNbDataToProcess+0x48>)
 8007e1e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e20:	fb93 f3f1 	sdiv	r3, r3, r1
 8007e24:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e28:	5cab      	ldrb	r3, [r5, r2]
 8007e2a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e2c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e32:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8007e36:	bc30      	pop	{r4, r5}
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	0800f588 	.word	0x0800f588
 8007e40:	0800f580 	.word	0x0800f580

08007e44 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8007e44:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d018      	beq.n	8007e7e <HAL_UARTEx_DisableFifoMode+0x3a>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007e52:	2324      	movs	r3, #36	; 0x24
 8007e54:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e58:	6803      	ldr	r3, [r0, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007e5c:	6819      	ldr	r1, [r3, #0]
 8007e5e:	f021 0101 	bic.w	r1, r1, #1
 8007e62:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e64:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e6c:	6801      	ldr	r1, [r0, #0]
 8007e6e:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007e70:	2220      	movs	r2, #32
 8007e72:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007e76:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007e7e:	2002      	movs	r0, #2
}
 8007e80:	4770      	bx	lr

08007e82 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8007e82:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007e84:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d01d      	beq.n	8007ec8 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	2301      	movs	r3, #1
 8007e90:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007e94:	2324      	movs	r3, #36	; 0x24
 8007e96:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e9a:	6803      	ldr	r3, [r0, #0]
 8007e9c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	f022 0201 	bic.w	r2, r2, #1
 8007ea4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ea6:	6802      	ldr	r2, [r0, #0]
 8007ea8:	6893      	ldr	r3, [r2, #8]
 8007eaa:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8007eae:	4319      	orrs	r1, r3
 8007eb0:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007eb2:	f7ff ffa1 	bl	8007df8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007eba:	2320      	movs	r3, #32
 8007ebc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007ec6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007ec8:	2002      	movs	r0, #2
 8007eca:	e7fc      	b.n	8007ec6 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08007ecc <HAL_UARTEx_SetRxFifoThreshold>:
{
 8007ecc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007ece:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d01d      	beq.n	8007f12 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	2301      	movs	r3, #1
 8007eda:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007ede:	2324      	movs	r3, #36	; 0x24
 8007ee0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ee4:	6803      	ldr	r3, [r0, #0]
 8007ee6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	f022 0201 	bic.w	r2, r2, #1
 8007eee:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ef0:	6802      	ldr	r2, [r0, #0]
 8007ef2:	6893      	ldr	r3, [r2, #8]
 8007ef4:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8007ef8:	4319      	orrs	r1, r3
 8007efa:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007efc:	f7ff ff7c 	bl	8007df8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007f04:	2320      	movs	r3, #32
 8007f06:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007f10:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007f12:	2002      	movs	r0, #2
 8007f14:	e7fc      	b.n	8007f10 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08007f18 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8007f18:	b430      	push	{r4, r5}
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007f1a:	680a      	ldr	r2, [r1, #0]
 8007f1c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8007f20:	f023 0301 	bic.w	r3, r3, #1
 8007f24:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8007f28:	688b      	ldr	r3, [r1, #8]
 8007f2a:	2b08      	cmp	r3, #8
 8007f2c:	d036      	beq.n	8007f9c <FMC_NORSRAM_Init+0x84>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007f2e:	2400      	movs	r4, #0
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007f30:	684a      	ldr	r2, [r1, #4]
  btcr_reg = (flashaccess                   | \
 8007f32:	4322      	orrs	r2, r4
              Init->DataAddressMux          | \
 8007f34:	4313      	orrs	r3, r2
              Init->MemoryType              | \
              Init->MemoryDataWidth         | \
 8007f36:	68ca      	ldr	r2, [r1, #12]
              Init->MemoryType              | \
 8007f38:	4313      	orrs	r3, r2
              Init->BurstAccessMode         | \
 8007f3a:	690a      	ldr	r2, [r1, #16]
              Init->MemoryDataWidth         | \
 8007f3c:	4313      	orrs	r3, r2
              Init->WaitSignalPolarity      | \
 8007f3e:	694a      	ldr	r2, [r1, #20]
              Init->BurstAccessMode         | \
 8007f40:	4313      	orrs	r3, r2
              Init->WaitSignalActive        | \
 8007f42:	698a      	ldr	r2, [r1, #24]
              Init->WaitSignalPolarity      | \
 8007f44:	4313      	orrs	r3, r2
              Init->WriteOperation          | \
 8007f46:	69ca      	ldr	r2, [r1, #28]
              Init->WaitSignalActive        | \
 8007f48:	4313      	orrs	r3, r2
              Init->WaitSignal              | \
 8007f4a:	6a0a      	ldr	r2, [r1, #32]
              Init->WriteOperation          | \
 8007f4c:	4313      	orrs	r3, r2
              Init->ExtendedMode            | \
 8007f4e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
              Init->WaitSignal              | \
 8007f50:	4313      	orrs	r3, r2
              Init->AsynchronousWait        | \
 8007f52:	6a8a      	ldr	r2, [r1, #40]	; 0x28
              Init->ExtendedMode            | \
 8007f54:	4313      	orrs	r3, r2
              Init->WriteBurst);
 8007f56:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8007f58:	4313      	orrs	r3, r2

  btcr_reg |= Init->ContinuousClock;
 8007f5a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8007f5c:	4313      	orrs	r3, r2
  btcr_reg |= Init->WriteFifo;
 8007f5e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8007f60:	431a      	orrs	r2, r3
  btcr_reg |= Init->NBLSetupTime;
 8007f62:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8007f64:	431a      	orrs	r2, r3
  btcr_reg |= Init->PageSize;
 8007f66:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8007f68:	431a      	orrs	r2, r3
  mask |= FMC_BCR1_CCLKEN;
  mask |= FMC_BCR1_WFDIS;
  mask |= FMC_BCRx_NBLSET;
  mask |= FMC_BCRx_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007f6a:	680c      	ldr	r4, [r1, #0]
 8007f6c:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8007f70:	4b20      	ldr	r3, [pc, #128]	; (8007ff4 <FMC_NORSRAM_Init+0xdc>)
 8007f72:	402b      	ands	r3, r5
 8007f74:	4313      	orrs	r3, r2
 8007f76:	f840 3024 	str.w	r3, [r0, r4, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8007f7a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8007f7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f80:	d00e      	beq.n	8007fa0 <FMC_NORSRAM_Init+0x88>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8007f82:	680b      	ldr	r3, [r1, #0]
 8007f84:	b11b      	cbz	r3, 8007f8e <FMC_NORSRAM_Init+0x76>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8007f86:	6803      	ldr	r3, [r0, #0]
 8007f88:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	6003      	str	r3, [r0, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 8007f8e:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d00d      	beq.n	8007fb2 <FMC_NORSRAM_Init+0x9a>
        break;
    }
  }

  return HAL_OK;
}
 8007f96:	2000      	movs	r0, #0
 8007f98:	bc30      	pop	{r4, r5}
 8007f9a:	4770      	bx	lr
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007f9c:	2440      	movs	r4, #64	; 0x40
 8007f9e:	e7c7      	b.n	8007f30 <FMC_NORSRAM_Init+0x18>
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8007fa0:	680a      	ldr	r2, [r1, #0]
 8007fa2:	2a00      	cmp	r2, #0
 8007fa4:	d0ed      	beq.n	8007f82 <FMC_NORSRAM_Init+0x6a>
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8007fa6:	6802      	ldr	r2, [r0, #0]
 8007fa8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8007fac:	4313      	orrs	r3, r2
 8007fae:	6003      	str	r3, [r0, #0]
 8007fb0:	e7e7      	b.n	8007f82 <FMC_NORSRAM_Init+0x6a>
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8007fb2:	6a03      	ldr	r3, [r0, #32]
 8007fb4:	0c1b      	lsrs	r3, r3, #16
 8007fb6:	041b      	lsls	r3, r3, #16
 8007fb8:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	6203      	str	r3, [r0, #32]
    switch (Init->NSBank)
 8007fbe:	680b      	ldr	r3, [r1, #0]
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d00c      	beq.n	8007fde <FMC_NORSRAM_Init+0xc6>
 8007fc4:	2b04      	cmp	r3, #4
 8007fc6:	d00f      	beq.n	8007fe8 <FMC_NORSRAM_Init+0xd0>
 8007fc8:	b123      	cbz	r3, 8007fd4 <FMC_NORSRAM_Init+0xbc>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 8007fca:	6a03      	ldr	r3, [r0, #32]
 8007fcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fd0:	6203      	str	r3, [r0, #32]
        break;
 8007fd2:	e7e0      	b.n	8007f96 <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 8007fd4:	6a03      	ldr	r3, [r0, #32]
 8007fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fda:	6203      	str	r3, [r0, #32]
        break;
 8007fdc:	e7db      	b.n	8007f96 <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 8007fde:	6a03      	ldr	r3, [r0, #32]
 8007fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fe4:	6203      	str	r3, [r0, #32]
        break;
 8007fe6:	e7d6      	b.n	8007f96 <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 8007fe8:	6a03      	ldr	r3, [r0, #32]
 8007fea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fee:	6203      	str	r3, [r0, #32]
        break;
 8007ff0:	e7d1      	b.n	8007f96 <FMC_NORSRAM_Init+0x7e>
 8007ff2:	bf00      	nop
 8007ff4:	ff000480 	.word	0xff000480

08007ff8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007ff8:	b410      	push	{r4}
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007ffa:	3201      	adds	r2, #1
 8007ffc:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8008000:	680b      	ldr	r3, [r1, #0]
 8008002:	684c      	ldr	r4, [r1, #4]
 8008004:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8008008:	688c      	ldr	r4, [r1, #8]
 800800a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800800e:	68cc      	ldr	r4, [r1, #12]
 8008010:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 8008014:	690c      	ldr	r4, [r1, #16]
 8008016:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800801a:	694c      	ldr	r4, [r1, #20]
 800801c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8008020:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8008024:	698c      	ldr	r4, [r1, #24]
 8008026:	f1a4 0c02 	sub.w	ip, r4, #2
 800802a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 800802e:	69cc      	ldr	r4, [r1, #28]
 8008030:	4323      	orrs	r3, r4
 8008032:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008036:	6803      	ldr	r3, [r0, #0]
 8008038:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800803c:	d00b      	beq.n	8008056 <FMC_NORSRAM_Timing_Init+0x5e>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800803e:	6843      	ldr	r3, [r0, #4]
 8008040:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8008044:	694a      	ldr	r2, [r1, #20]
 8008046:	3a01      	subs	r2, #1
 8008048:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800804c:	6843      	ldr	r3, [r0, #4]
 800804e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008052:	4313      	orrs	r3, r2
 8008054:	6043      	str	r3, [r0, #4]
  }

  return HAL_OK;
}
 8008056:	2000      	movs	r0, #0
 8008058:	f85d 4b04 	ldr.w	r4, [sp], #4
 800805c:	4770      	bx	lr

0800805e <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800805e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008062:	d005      	beq.n	8008070 <FMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008064:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008068:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800806c:	2000      	movs	r0, #0
 800806e:	4770      	bx	lr
{
 8008070:	b410      	push	{r4}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008072:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8008076:	f003 6c7f 	and.w	ip, r3, #267386880	; 0xff00000
 800807a:	680b      	ldr	r3, [r1, #0]
 800807c:	684c      	ldr	r4, [r1, #4]
 800807e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8008082:	688c      	ldr	r4, [r1, #8]
 8008084:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8008088:	68cc      	ldr	r4, [r1, #12]
 800808a:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 800808e:	69cc      	ldr	r4, [r1, #28]
 8008090:	4323      	orrs	r3, r4
 8008092:	6909      	ldr	r1, [r1, #16]
 8008094:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008098:	ea4c 0303 	orr.w	r3, ip, r3
 800809c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 80080a0:	2000      	movs	r0, #0
 80080a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80080a8:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80080aa:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ac:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80080b0:	b112      	cbz	r2, 80080b8 <LL_GPIO_Init+0x10>
  return __builtin_clz(value);
 80080b2:	fab2 f282 	clz	r2, r2
 80080b6:	e04e      	b.n	8008156 <LL_GPIO_Init+0xae>
    return 32U;
 80080b8:	2220      	movs	r2, #32

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80080ba:	e04c      	b.n	8008156 <LL_GPIO_Init+0xae>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80080bc:	688e      	ldr	r6, [r1, #8]
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80080be:	6885      	ldr	r5, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080c0:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 80080c4:	b1e4      	cbz	r4, 8008100 <LL_GPIO_Init+0x58>
  return __builtin_clz(value);
 80080c6:	fab4 f484 	clz	r4, r4
 80080ca:	0064      	lsls	r4, r4, #1
 80080cc:	f04f 0c03 	mov.w	ip, #3
 80080d0:	fa0c f404 	lsl.w	r4, ip, r4
 80080d4:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080d8:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 80080dc:	b194      	cbz	r4, 8008104 <LL_GPIO_Init+0x5c>
  return __builtin_clz(value);
 80080de:	fab4 f484 	clz	r4, r4
 80080e2:	0064      	lsls	r4, r4, #1
 80080e4:	fa06 f404 	lsl.w	r4, r6, r4
 80080e8:	432c      	orrs	r4, r5
 80080ea:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80080ec:	680d      	ldr	r5, [r1, #0]
 80080ee:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80080f0:	6844      	ldr	r4, [r0, #4]
 80080f2:	ea24 0405 	bic.w	r4, r4, r5
 80080f6:	fb06 f505 	mul.w	r5, r6, r5
 80080fa:	432c      	orrs	r4, r5
 80080fc:	6044      	str	r4, [r0, #4]
}
 80080fe:	e039      	b.n	8008174 <LL_GPIO_Init+0xcc>
    return 32U;
 8008100:	2420      	movs	r4, #32
 8008102:	e7e2      	b.n	80080ca <LL_GPIO_Init+0x22>
 8008104:	2420      	movs	r4, #32
 8008106:	e7ec      	b.n	80080e2 <LL_GPIO_Init+0x3a>
 8008108:	2420      	movs	r4, #32
 800810a:	e03b      	b.n	8008184 <LL_GPIO_Init+0xdc>
 800810c:	2420      	movs	r4, #32
 800810e:	e046      	b.n	800819e <LL_GPIO_Init+0xf6>
 8008110:	2420      	movs	r4, #32
 8008112:	e056      	b.n	80081c2 <LL_GPIO_Init+0x11a>
 8008114:	2420      	movs	r4, #32
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008116:	00a4      	lsls	r4, r4, #2
 8008118:	fa06 f404 	lsl.w	r4, r6, r4
 800811c:	432c      	orrs	r4, r5
 800811e:	6204      	str	r4, [r0, #32]
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008120:	684e      	ldr	r6, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008122:	6805      	ldr	r5, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008124:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8008128:	2c00      	cmp	r4, #0
 800812a:	d075      	beq.n	8008218 <LL_GPIO_Init+0x170>
  return __builtin_clz(value);
 800812c:	fab4 f484 	clz	r4, r4
 8008130:	0064      	lsls	r4, r4, #1
 8008132:	f04f 0c03 	mov.w	ip, #3
 8008136:	fa0c f404 	lsl.w	r4, ip, r4
 800813a:	ea25 0404 	bic.w	r4, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800813e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8008142:	2b00      	cmp	r3, #0
 8008144:	d06a      	beq.n	800821c <LL_GPIO_Init+0x174>
  return __builtin_clz(value);
 8008146:	fab3 f383 	clz	r3, r3
 800814a:	005b      	lsls	r3, r3, #1
 800814c:	fa06 f303 	lsl.w	r3, r6, r3
 8008150:	4323      	orrs	r3, r4
 8008152:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8008154:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008156:	680b      	ldr	r3, [r1, #0]
 8008158:	fa33 f402 	lsrs.w	r4, r3, r2
 800815c:	d060      	beq.n	8008220 <LL_GPIO_Init+0x178>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800815e:	f04f 0c01 	mov.w	ip, #1
 8008162:	fa0c fc02 	lsl.w	ip, ip, r2
    if (currentpin != 0x00u)
 8008166:	ea1c 0303 	ands.w	r3, ip, r3
 800816a:	d0f3      	beq.n	8008154 <LL_GPIO_Init+0xac>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800816c:	684c      	ldr	r4, [r1, #4]
 800816e:	3c01      	subs	r4, #1
 8008170:	2c01      	cmp	r4, #1
 8008172:	d9a3      	bls.n	80080bc <LL_GPIO_Init+0x14>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008174:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008176:	68c5      	ldr	r5, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008178:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800817c:	2c00      	cmp	r4, #0
 800817e:	d0c3      	beq.n	8008108 <LL_GPIO_Init+0x60>
  return __builtin_clz(value);
 8008180:	fab4 f484 	clz	r4, r4
 8008184:	0064      	lsls	r4, r4, #1
 8008186:	f04f 0c03 	mov.w	ip, #3
 800818a:	fa0c f404 	lsl.w	r4, ip, r4
 800818e:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008192:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8008196:	2c00      	cmp	r4, #0
 8008198:	d0b8      	beq.n	800810c <LL_GPIO_Init+0x64>
  return __builtin_clz(value);
 800819a:	fab4 f484 	clz	r4, r4
 800819e:	0064      	lsls	r4, r4, #1
 80081a0:	fa06 f404 	lsl.w	r4, r6, r4
 80081a4:	432c      	orrs	r4, r5
 80081a6:	60c4      	str	r4, [r0, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80081a8:	684c      	ldr	r4, [r1, #4]
 80081aa:	2c02      	cmp	r4, #2
 80081ac:	d1b8      	bne.n	8008120 <LL_GPIO_Init+0x78>
        if (currentpin < LL_GPIO_PIN_8)
 80081ae:	2bff      	cmp	r3, #255	; 0xff
 80081b0:	d814      	bhi.n	80081dc <LL_GPIO_Init+0x134>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80081b2:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80081b4:	6a05      	ldr	r5, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081b6:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 80081ba:	2c00      	cmp	r4, #0
 80081bc:	d0a8      	beq.n	8008110 <LL_GPIO_Init+0x68>
  return __builtin_clz(value);
 80081be:	fab4 f484 	clz	r4, r4
 80081c2:	00a4      	lsls	r4, r4, #2
 80081c4:	270f      	movs	r7, #15
 80081c6:	fa07 f404 	lsl.w	r4, r7, r4
 80081ca:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ce:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 80081d2:	2c00      	cmp	r4, #0
 80081d4:	d09e      	beq.n	8008114 <LL_GPIO_Init+0x6c>
  return __builtin_clz(value);
 80081d6:	fab4 f484 	clz	r4, r4
 80081da:	e79c      	b.n	8008116 <LL_GPIO_Init+0x6e>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80081dc:	694f      	ldr	r7, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80081de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081e0:	0a1c      	lsrs	r4, r3, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081e2:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80081e6:	b19d      	cbz	r5, 8008210 <LL_GPIO_Init+0x168>
  return __builtin_clz(value);
 80081e8:	fab5 f585 	clz	r5, r5
 80081ec:	00ad      	lsls	r5, r5, #2
 80081ee:	f04f 0c0f 	mov.w	ip, #15
 80081f2:	fa0c f505 	lsl.w	r5, ip, r5
 80081f6:	ea26 0505 	bic.w	r5, r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081fa:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80081fe:	b14c      	cbz	r4, 8008214 <LL_GPIO_Init+0x16c>
  return __builtin_clz(value);
 8008200:	fab4 f484 	clz	r4, r4
 8008204:	00a4      	lsls	r4, r4, #2
 8008206:	fa07 f404 	lsl.w	r4, r7, r4
 800820a:	432c      	orrs	r4, r5
 800820c:	6244      	str	r4, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800820e:	e787      	b.n	8008120 <LL_GPIO_Init+0x78>
    return 32U;
 8008210:	2520      	movs	r5, #32
 8008212:	e7eb      	b.n	80081ec <LL_GPIO_Init+0x144>
 8008214:	2420      	movs	r4, #32
 8008216:	e7f5      	b.n	8008204 <LL_GPIO_Init+0x15c>
 8008218:	2420      	movs	r4, #32
 800821a:	e789      	b.n	8008130 <LL_GPIO_Init+0x88>
 800821c:	2320      	movs	r3, #32
 800821e:	e794      	b.n	800814a <LL_GPIO_Init+0xa2>
  }
  return (SUCCESS);
}
 8008220:	2000      	movs	r0, #0
 8008222:	bcf0      	pop	{r4, r5, r6, r7}
 8008224:	4770      	bx	lr
	...

08008228 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008228:	4b04      	ldr	r3, [pc, #16]	; (800823c <RCC_GetHCLKClockFreq+0x14>)
 800822a:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800822c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008230:	4a03      	ldr	r2, [pc, #12]	; (8008240 <RCC_GetHCLKClockFreq+0x18>)
 8008232:	5cd3      	ldrb	r3, [r2, r3]
 8008234:	f003 031f 	and.w	r3, r3, #31
}
 8008238:	40d8      	lsrs	r0, r3
 800823a:	4770      	bx	lr
 800823c:	40021000 	.word	0x40021000
 8008240:	0800f550 	.word	0x0800f550

08008244 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008244:	4b04      	ldr	r3, [pc, #16]	; (8008258 <RCC_GetPCLK1ClockFreq+0x14>)
 8008246:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8008248:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800824c:	4a03      	ldr	r2, [pc, #12]	; (800825c <RCC_GetPCLK1ClockFreq+0x18>)
 800824e:	5cd3      	ldrb	r3, [r2, r3]
 8008250:	f003 031f 	and.w	r3, r3, #31
}
 8008254:	40d8      	lsrs	r0, r3
 8008256:	4770      	bx	lr
 8008258:	40021000 	.word	0x40021000
 800825c:	0800f560 	.word	0x0800f560

08008260 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008260:	4b04      	ldr	r3, [pc, #16]	; (8008274 <RCC_GetPCLK2ClockFreq+0x14>)
 8008262:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8008264:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008268:	4a03      	ldr	r2, [pc, #12]	; (8008278 <RCC_GetPCLK2ClockFreq+0x18>)
 800826a:	5cd3      	ldrb	r3, [r2, r3]
 800826c:	f003 031f 	and.w	r3, r3, #31
}
 8008270:	40d8      	lsrs	r0, r3
 8008272:	4770      	bx	lr
 8008274:	40021000 	.word	0x40021000
 8008278:	0800f560 	.word	0x0800f560

0800827c <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800827c:	4b0e      	ldr	r3, [pc, #56]	; (80082b8 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8008284:	2b03      	cmp	r3, #3
 8008286:	d014      	beq.n	80082b2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8008288:	480c      	ldr	r0, [pc, #48]	; (80082bc <RCC_PLL_GetFreqDomain_SYS+0x40>)
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800828a:	4a0b      	ldr	r2, [pc, #44]	; (80082b8 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 800828c:	68d3      	ldr	r3, [r2, #12]
 800828e:	f3c3 2306 	ubfx	r3, r3, #8, #7

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008292:	fb03 f000 	mul.w	r0, r3, r0
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008296:	68d3      	ldr	r3, [r2, #12]
 8008298:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800829c:	3301      	adds	r3, #1
 800829e:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80082a2:	68d3      	ldr	r3, [r2, #12]
 80082a4:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80082a8:	3301      	adds	r3, #1
 80082aa:	005b      	lsls	r3, r3, #1
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80082ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80082b0:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 80082b2:	4803      	ldr	r0, [pc, #12]	; (80082c0 <RCC_PLL_GetFreqDomain_SYS+0x44>)
 80082b4:	e7e9      	b.n	800828a <RCC_PLL_GetFreqDomain_SYS+0xe>
 80082b6:	bf00      	nop
 80082b8:	40021000 	.word	0x40021000
 80082bc:	00f42400 	.word	0x00f42400
 80082c0:	007a1200 	.word	0x007a1200

080082c4 <RCC_GetSystemClockFreq>:
{
 80082c4:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80082c6:	4b07      	ldr	r3, [pc, #28]	; (80082e4 <RCC_GetSystemClockFreq+0x20>)
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 80082ce:	2b08      	cmp	r3, #8
 80082d0:	d004      	beq.n	80082dc <RCC_GetSystemClockFreq+0x18>
 80082d2:	2b0c      	cmp	r3, #12
 80082d4:	d104      	bne.n	80082e0 <RCC_GetSystemClockFreq+0x1c>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80082d6:	f7ff ffd1 	bl	800827c <RCC_PLL_GetFreqDomain_SYS>
      break;
 80082da:	e002      	b.n	80082e2 <RCC_GetSystemClockFreq+0x1e>
      frequency = HSE_VALUE;
 80082dc:	4802      	ldr	r0, [pc, #8]	; (80082e8 <RCC_GetSystemClockFreq+0x24>)
 80082de:	e000      	b.n	80082e2 <RCC_GetSystemClockFreq+0x1e>
  switch (LL_RCC_GetSysClkSource())
 80082e0:	4802      	ldr	r0, [pc, #8]	; (80082ec <RCC_GetSystemClockFreq+0x28>)
}
 80082e2:	bd08      	pop	{r3, pc}
 80082e4:	40021000 	.word	0x40021000
 80082e8:	007a1200 	.word	0x007a1200
 80082ec:	00f42400 	.word	0x00f42400

080082f0 <LL_RCC_GetUSARTClockFreq>:
{
 80082f0:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80082f2:	2803      	cmp	r0, #3
 80082f4:	d005      	beq.n	8008302 <LL_RCC_GetUSARTClockFreq+0x12>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80082f6:	280c      	cmp	r0, #12
 80082f8:	d02c      	beq.n	8008354 <LL_RCC_GetUSARTClockFreq+0x64>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80082fa:	2830      	cmp	r0, #48	; 0x30
 80082fc:	d053      	beq.n	80083a6 <LL_RCC_GetUSARTClockFreq+0xb6>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80082fe:	2000      	movs	r0, #0
}
 8008300:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8008302:	4b3d      	ldr	r3, [pc, #244]	; (80083f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 8008304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008308:	4003      	ands	r3, r0
 800830a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800830e:	4b3b      	ldr	r3, [pc, #236]	; (80083fc <LL_RCC_GetUSARTClockFreq+0x10c>)
 8008310:	4298      	cmp	r0, r3
 8008312:	d00f      	beq.n	8008334 <LL_RCC_GetUSARTClockFreq+0x44>
 8008314:	f1b0 1f03 	cmp.w	r0, #196611	; 0x30003
 8008318:	d013      	beq.n	8008342 <LL_RCC_GetUSARTClockFreq+0x52>
 800831a:	3b01      	subs	r3, #1
 800831c:	4298      	cmp	r0, r3
 800831e:	d006      	beq.n	800832e <LL_RCC_GetUSARTClockFreq+0x3e>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008320:	f7ff ffd0 	bl	80082c4 <RCC_GetSystemClockFreq>
 8008324:	f7ff ff80 	bl	8008228 <RCC_GetHCLKClockFreq>
 8008328:	f7ff ff9a 	bl	8008260 <RCC_GetPCLK2ClockFreq>
        break;
 800832c:	e7e8      	b.n	8008300 <LL_RCC_GetUSARTClockFreq+0x10>
        usart_frequency = RCC_GetSystemClockFreq();
 800832e:	f7ff ffc9 	bl	80082c4 <RCC_GetSystemClockFreq>
        break;
 8008332:	e7e5      	b.n	8008300 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008334:	4b30      	ldr	r3, [pc, #192]	; (80083f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 8008336:	6818      	ldr	r0, [r3, #0]
 8008338:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800833c:	d0e0      	beq.n	8008300 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = HSI_VALUE;
 800833e:	4830      	ldr	r0, [pc, #192]	; (8008400 <LL_RCC_GetUSARTClockFreq+0x110>)
 8008340:	e7de      	b.n	8008300 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008342:	4b2d      	ldr	r3, [pc, #180]	; (80083f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 8008344:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8008348:	f010 0002 	ands.w	r0, r0, #2
 800834c:	d0d8      	beq.n	8008300 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = LSE_VALUE;
 800834e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008352:	e7d5      	b.n	8008300 <LL_RCC_GetUSARTClockFreq+0x10>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8008354:	4b28      	ldr	r3, [pc, #160]	; (80083f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 8008356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800835a:	4003      	ands	r3, r0
 800835c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8008360:	4b28      	ldr	r3, [pc, #160]	; (8008404 <LL_RCC_GetUSARTClockFreq+0x114>)
 8008362:	4298      	cmp	r0, r3
 8008364:	d00f      	beq.n	8008386 <LL_RCC_GetUSARTClockFreq+0x96>
 8008366:	f1b0 1f0c 	cmp.w	r0, #786444	; 0xc000c
 800836a:	d013      	beq.n	8008394 <LL_RCC_GetUSARTClockFreq+0xa4>
 800836c:	3b04      	subs	r3, #4
 800836e:	4298      	cmp	r0, r3
 8008370:	d006      	beq.n	8008380 <LL_RCC_GetUSARTClockFreq+0x90>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008372:	f7ff ffa7 	bl	80082c4 <RCC_GetSystemClockFreq>
 8008376:	f7ff ff57 	bl	8008228 <RCC_GetHCLKClockFreq>
 800837a:	f7ff ff63 	bl	8008244 <RCC_GetPCLK1ClockFreq>
        break;
 800837e:	e7bf      	b.n	8008300 <LL_RCC_GetUSARTClockFreq+0x10>
        usart_frequency = RCC_GetSystemClockFreq();
 8008380:	f7ff ffa0 	bl	80082c4 <RCC_GetSystemClockFreq>
        break;
 8008384:	e7bc      	b.n	8008300 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008386:	4b1c      	ldr	r3, [pc, #112]	; (80083f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 8008388:	6818      	ldr	r0, [r3, #0]
 800838a:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800838e:	d0b7      	beq.n	8008300 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = HSI_VALUE;
 8008390:	481b      	ldr	r0, [pc, #108]	; (8008400 <LL_RCC_GetUSARTClockFreq+0x110>)
 8008392:	e7b5      	b.n	8008300 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008394:	4b18      	ldr	r3, [pc, #96]	; (80083f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 8008396:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800839a:	f010 0002 	ands.w	r0, r0, #2
 800839e:	d0af      	beq.n	8008300 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = LSE_VALUE;
 80083a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80083a4:	e7ac      	b.n	8008300 <LL_RCC_GetUSARTClockFreq+0x10>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80083a6:	4b14      	ldr	r3, [pc, #80]	; (80083f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 80083a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ac:	4003      	ands	r3, r0
 80083ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80083b2:	4b15      	ldr	r3, [pc, #84]	; (8008408 <LL_RCC_GetUSARTClockFreq+0x118>)
 80083b4:	4298      	cmp	r0, r3
 80083b6:	d00f      	beq.n	80083d8 <LL_RCC_GetUSARTClockFreq+0xe8>
 80083b8:	f1b0 1f30 	cmp.w	r0, #3145776	; 0x300030
 80083bc:	d013      	beq.n	80083e6 <LL_RCC_GetUSARTClockFreq+0xf6>
 80083be:	3b10      	subs	r3, #16
 80083c0:	4298      	cmp	r0, r3
 80083c2:	d006      	beq.n	80083d2 <LL_RCC_GetUSARTClockFreq+0xe2>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80083c4:	f7ff ff7e 	bl	80082c4 <RCC_GetSystemClockFreq>
 80083c8:	f7ff ff2e 	bl	8008228 <RCC_GetHCLKClockFreq>
 80083cc:	f7ff ff3a 	bl	8008244 <RCC_GetPCLK1ClockFreq>
          break;
 80083d0:	e796      	b.n	8008300 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = RCC_GetSystemClockFreq();
 80083d2:	f7ff ff77 	bl	80082c4 <RCC_GetSystemClockFreq>
          break;
 80083d6:	e793      	b.n	8008300 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80083d8:	4b07      	ldr	r3, [pc, #28]	; (80083f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 80083da:	6818      	ldr	r0, [r3, #0]
 80083dc:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80083e0:	d08e      	beq.n	8008300 <LL_RCC_GetUSARTClockFreq+0x10>
            usart_frequency = HSI_VALUE;
 80083e2:	4807      	ldr	r0, [pc, #28]	; (8008400 <LL_RCC_GetUSARTClockFreq+0x110>)
 80083e4:	e78c      	b.n	8008300 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80083e6:	4b04      	ldr	r3, [pc, #16]	; (80083f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 80083e8:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80083ec:	f010 0002 	ands.w	r0, r0, #2
 80083f0:	d086      	beq.n	8008300 <LL_RCC_GetUSARTClockFreq+0x10>
            usart_frequency = LSE_VALUE;
 80083f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return usart_frequency;
 80083f6:	e783      	b.n	8008300 <LL_RCC_GetUSARTClockFreq+0x10>
 80083f8:	40021000 	.word	0x40021000
 80083fc:	00030002 	.word	0x00030002
 8008400:	00f42400 	.word	0x00f42400
 8008404:	000c0008 	.word	0x000c0008
 8008408:	00300020 	.word	0x00300020

0800840c <LL_RCC_GetUARTClockFreq>:
{
 800840c:	b510      	push	{r4, lr}
 800840e:	4604      	mov	r4, r0
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8008410:	28c0      	cmp	r0, #192	; 0xc0
 8008412:	d004      	beq.n	800841e <LL_RCC_GetUARTClockFreq+0x12>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8008414:	2000      	movs	r0, #0
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8008416:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 800841a:	d029      	beq.n	8008470 <LL_RCC_GetUARTClockFreq+0x64>
}
 800841c:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800841e:	4b29      	ldr	r3, [pc, #164]	; (80084c4 <LL_RCC_GetUARTClockFreq+0xb8>)
 8008420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008424:	4003      	ands	r3, r0
 8008426:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800842a:	4a27      	ldr	r2, [pc, #156]	; (80084c8 <LL_RCC_GetUARTClockFreq+0xbc>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d00f      	beq.n	8008450 <LL_RCC_GetUARTClockFreq+0x44>
 8008430:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8008434:	d013      	beq.n	800845e <LL_RCC_GetUARTClockFreq+0x52>
 8008436:	3a40      	subs	r2, #64	; 0x40
 8008438:	4293      	cmp	r3, r2
 800843a:	d006      	beq.n	800844a <LL_RCC_GetUARTClockFreq+0x3e>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800843c:	f7ff ff42 	bl	80082c4 <RCC_GetSystemClockFreq>
 8008440:	f7ff fef2 	bl	8008228 <RCC_GetHCLKClockFreq>
 8008444:	f7ff fefe 	bl	8008244 <RCC_GetPCLK1ClockFreq>
        break;
 8008448:	e7e5      	b.n	8008416 <LL_RCC_GetUARTClockFreq+0xa>
        uart_frequency = RCC_GetSystemClockFreq();
 800844a:	f7ff ff3b 	bl	80082c4 <RCC_GetSystemClockFreq>
        break;
 800844e:	e7e2      	b.n	8008416 <LL_RCC_GetUARTClockFreq+0xa>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008450:	4b1c      	ldr	r3, [pc, #112]	; (80084c4 <LL_RCC_GetUARTClockFreq+0xb8>)
 8008452:	6818      	ldr	r0, [r3, #0]
 8008454:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8008458:	d0dd      	beq.n	8008416 <LL_RCC_GetUARTClockFreq+0xa>
          uart_frequency = HSI_VALUE;
 800845a:	481c      	ldr	r0, [pc, #112]	; (80084cc <LL_RCC_GetUARTClockFreq+0xc0>)
 800845c:	e7db      	b.n	8008416 <LL_RCC_GetUARTClockFreq+0xa>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800845e:	4b19      	ldr	r3, [pc, #100]	; (80084c4 <LL_RCC_GetUARTClockFreq+0xb8>)
 8008460:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8008464:	f010 0002 	ands.w	r0, r0, #2
 8008468:	d0d5      	beq.n	8008416 <LL_RCC_GetUARTClockFreq+0xa>
          uart_frequency = LSE_VALUE;
 800846a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800846e:	e7d2      	b.n	8008416 <LL_RCC_GetUARTClockFreq+0xa>
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8008470:	4b14      	ldr	r3, [pc, #80]	; (80084c4 <LL_RCC_GetUARTClockFreq+0xb8>)
 8008472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008476:	4023      	ands	r3, r4
 8008478:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800847c:	4b14      	ldr	r3, [pc, #80]	; (80084d0 <LL_RCC_GetUARTClockFreq+0xc4>)
 800847e:	429c      	cmp	r4, r3
 8008480:	d010      	beq.n	80084a4 <LL_RCC_GetUARTClockFreq+0x98>
 8008482:	f1b4 2f03 	cmp.w	r4, #50332416	; 0x3000300
 8008486:	d014      	beq.n	80084b2 <LL_RCC_GetUARTClockFreq+0xa6>
 8008488:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800848c:	429c      	cmp	r4, r3
 800848e:	d006      	beq.n	800849e <LL_RCC_GetUARTClockFreq+0x92>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008490:	f7ff ff18 	bl	80082c4 <RCC_GetSystemClockFreq>
 8008494:	f7ff fec8 	bl	8008228 <RCC_GetHCLKClockFreq>
 8008498:	f7ff fed4 	bl	8008244 <RCC_GetPCLK1ClockFreq>
        break;
 800849c:	e7be      	b.n	800841c <LL_RCC_GetUARTClockFreq+0x10>
        uart_frequency = RCC_GetSystemClockFreq();
 800849e:	f7ff ff11 	bl	80082c4 <RCC_GetSystemClockFreq>
        break;
 80084a2:	e7bb      	b.n	800841c <LL_RCC_GetUARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80084a4:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <LL_RCC_GetUARTClockFreq+0xb8>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80084ac:	d0b6      	beq.n	800841c <LL_RCC_GetUARTClockFreq+0x10>
          uart_frequency = HSI_VALUE;
 80084ae:	4807      	ldr	r0, [pc, #28]	; (80084cc <LL_RCC_GetUARTClockFreq+0xc0>)
 80084b0:	e7b4      	b.n	800841c <LL_RCC_GetUARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80084b2:	4b04      	ldr	r3, [pc, #16]	; (80084c4 <LL_RCC_GetUARTClockFreq+0xb8>)
 80084b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084b8:	f013 0f02 	tst.w	r3, #2
 80084bc:	d0ae      	beq.n	800841c <LL_RCC_GetUARTClockFreq+0x10>
          uart_frequency = LSE_VALUE;
 80084be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return uart_frequency;
 80084c2:	e7ab      	b.n	800841c <LL_RCC_GetUARTClockFreq+0x10>
 80084c4:	40021000 	.word	0x40021000
 80084c8:	00c00080 	.word	0x00c00080
 80084cc:	00f42400 	.word	0x00f42400
 80084d0:	03000200 	.word	0x03000200

080084d4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80084d4:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80084d6:	6803      	ldr	r3, [r0, #0]
 80084d8:	f013 0f01 	tst.w	r3, #1
 80084dc:	d175      	bne.n	80085ca <LL_USART_Init+0xf6>
 80084de:	4604      	mov	r4, r0
 80084e0:	460d      	mov	r5, r1
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80084e2:	6803      	ldr	r3, [r0, #0]
 80084e4:	4a3a      	ldr	r2, [pc, #232]	; (80085d0 <LL_USART_Init+0xfc>)
 80084e6:	401a      	ands	r2, r3
 80084e8:	688b      	ldr	r3, [r1, #8]
 80084ea:	6909      	ldr	r1, [r1, #16]
 80084ec:	430b      	orrs	r3, r1
 80084ee:	6969      	ldr	r1, [r5, #20]
 80084f0:	430b      	orrs	r3, r1
 80084f2:	69e9      	ldr	r1, [r5, #28]
 80084f4:	430b      	orrs	r3, r1
 80084f6:	4313      	orrs	r3, r2
 80084f8:	6003      	str	r3, [r0, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80084fa:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80084fc:	6842      	ldr	r2, [r0, #4]
 80084fe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008502:	4313      	orrs	r3, r2
 8008504:	6043      	str	r3, [r0, #4]
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8008506:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8008508:	6882      	ldr	r2, [r0, #8]
 800850a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800850e:	4313      	orrs	r3, r2
 8008510:	6083      	str	r3, [r0, #8]

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8008512:	4b30      	ldr	r3, [pc, #192]	; (80085d4 <LL_USART_Init+0x100>)
 8008514:	4298      	cmp	r0, r3
 8008516:	d013      	beq.n	8008540 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 8008518:	4b2f      	ldr	r3, [pc, #188]	; (80085d8 <LL_USART_Init+0x104>)
 800851a:	4298      	cmp	r0, r3
 800851c:	d019      	beq.n	8008552 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
    }
    else if (USARTx == USART3)
 800851e:	4b2f      	ldr	r3, [pc, #188]	; (80085dc <LL_USART_Init+0x108>)
 8008520:	4298      	cmp	r0, r3
 8008522:	d01a      	beq.n	800855a <LL_USART_Init+0x86>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8008524:	4b2e      	ldr	r3, [pc, #184]	; (80085e0 <LL_USART_Init+0x10c>)
 8008526:	4298      	cmp	r0, r3
 8008528:	d01b      	beq.n	8008562 <LL_USART_Init+0x8e>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800852a:	4b2e      	ldr	r3, [pc, #184]	; (80085e4 <LL_USART_Init+0x110>)
 800852c:	4298      	cmp	r0, r3
 800852e:	d01c      	beq.n	800856a <LL_USART_Init+0x96>
  ErrorStatus status = ERROR;
 8008530:	2001      	movs	r0, #1
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8008532:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008534:	f022 020f 	bic.w	r2, r2, #15
 8008538:	882b      	ldrh	r3, [r5, #0]
 800853a:	4313      	orrs	r3, r2
 800853c:	62e3      	str	r3, [r4, #44]	; 0x2c
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 800853e:	bd38      	pop	{r3, r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8008540:	2003      	movs	r0, #3
 8008542:	f7ff fed5 	bl	80082f0 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8008546:	2800      	cmp	r0, #0
 8008548:	d03d      	beq.n	80085c6 <LL_USART_Init+0xf2>
        && (USART_InitStruct->BaudRate != 0U))
 800854a:	686a      	ldr	r2, [r5, #4]
 800854c:	b992      	cbnz	r2, 8008574 <LL_USART_Init+0xa0>
  ErrorStatus status = ERROR;
 800854e:	2001      	movs	r0, #1
 8008550:	e7ef      	b.n	8008532 <LL_USART_Init+0x5e>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8008552:	200c      	movs	r0, #12
 8008554:	f7ff fecc 	bl	80082f0 <LL_RCC_GetUSARTClockFreq>
 8008558:	e7f5      	b.n	8008546 <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800855a:	2030      	movs	r0, #48	; 0x30
 800855c:	f7ff fec8 	bl	80082f0 <LL_RCC_GetUSARTClockFreq>
 8008560:	e7f1      	b.n	8008546 <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8008562:	20c0      	movs	r0, #192	; 0xc0
 8008564:	f7ff ff52 	bl	800840c <LL_RCC_GetUARTClockFreq>
 8008568:	e7ed      	b.n	8008546 <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800856a:	f44f 7040 	mov.w	r0, #768	; 0x300
 800856e:	f7ff ff4d 	bl	800840c <LL_RCC_GetUARTClockFreq>
 8008572:	e7e8      	b.n	8008546 <LL_USART_Init+0x72>
      LL_USART_SetBaudRate(USARTx,
 8008574:	682b      	ldr	r3, [r5, #0]
 8008576:	69e9      	ldr	r1, [r5, #28]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8008578:	2b0b      	cmp	r3, #11
 800857a:	d80f      	bhi.n	800859c <LL_USART_Init+0xc8>
  else if (BaudRate == 0U)
 800857c:	b172      	cbz	r2, 800859c <LL_USART_Init+0xc8>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800857e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008582:	d00d      	beq.n	80085a0 <LL_USART_Init+0xcc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8008584:	b2db      	uxtb	r3, r3
 8008586:	4918      	ldr	r1, [pc, #96]	; (80085e8 <LL_USART_Init+0x114>)
 8008588:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800858c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008590:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008594:	fbb3 f3f2 	udiv	r3, r3, r2
 8008598:	b29b      	uxth	r3, r3
 800859a:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 800859c:	2000      	movs	r0, #0
}
 800859e:	e7c8      	b.n	8008532 <LL_USART_Init+0x5e>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	4911      	ldr	r1, [pc, #68]	; (80085e8 <LL_USART_Init+0x114>)
 80085a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80085a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80085ac:	0853      	lsrs	r3, r2, #1
 80085ae:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80085b2:	fbb0 f3f2 	udiv	r3, r0, r2
    brrtemp = usartdiv & 0xFFF0U;
 80085b6:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80085ba:	401a      	ands	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085bc:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80085c0:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 80085c2:	60e3      	str	r3, [r4, #12]
 80085c4:	e7ea      	b.n	800859c <LL_USART_Init+0xc8>
  ErrorStatus status = ERROR;
 80085c6:	2001      	movs	r0, #1
 80085c8:	e7b3      	b.n	8008532 <LL_USART_Init+0x5e>
 80085ca:	2001      	movs	r0, #1
 80085cc:	e7b7      	b.n	800853e <LL_USART_Init+0x6a>
 80085ce:	bf00      	nop
 80085d0:	efff69f3 	.word	0xefff69f3
 80085d4:	40013800 	.word	0x40013800
 80085d8:	40004400 	.word	0x40004400
 80085dc:	40004800 	.word	0x40004800
 80085e0:	40004c00 	.word	0x40004c00
 80085e4:	40005000 	.word	0x40005000
 80085e8:	0800f590 	.word	0x0800f590

080085ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80085ec:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80085ee:	2000      	movs	r0, #0
 80085f0:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80085f4:	f64b 7280 	movw	r2, #49024	; 0xbf80
 80085f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 80085fc:	4770      	bx	lr

080085fe <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80085fe:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8008602:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8008606:	045b      	lsls	r3, r3, #17
 8008608:	0c5b      	lsrs	r3, r3, #17
 800860a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800860e:	2000      	movs	r0, #0
 8008610:	4770      	bx	lr

08008612 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008612:	b084      	sub	sp, #16
 8008614:	4684      	mov	ip, r0
 8008616:	a801      	add	r0, sp, #4
 8008618:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800861c:	2301      	movs	r3, #1
 800861e:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008622:	2000      	movs	r0, #0
 8008624:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008628:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800862c:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 8008630:	b004      	add	sp, #16
 8008632:	4770      	bx	lr

08008634 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008634:	b510      	push	{r4, lr}
 8008636:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008638:	780a      	ldrb	r2, [r1, #0]
 800863a:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
 800863e:	fa1f fc8c 	uxth.w	ip, ip
 8008642:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 8008646:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800864a:	fa1f fc8c 	uxth.w	ip, ip

  /* initialize Endpoint */
  switch (ep->type)
 800864e:	78c8      	ldrb	r0, [r1, #3]
 8008650:	2803      	cmp	r0, #3
 8008652:	d862      	bhi.n	800871a <USB_ActivateEndpoint+0xe6>
 8008654:	e8df f000 	tbb	[pc, r0]
 8008658:	59025d56 	.word	0x59025d56
 800865c:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800865e:	f248 0e80 	movw	lr, #32896	; 0x8080
 8008662:	ea4c 0c0e 	orr.w	ip, ip, lr
 8008666:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800866a:	f891 c000 	ldrb.w	ip, [r1]
 800866e:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8008672:	b212      	sxth	r2, r2
 8008674:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008678:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800867c:	ea4c 0202 	orr.w	r2, ip, r2
 8008680:	b292      	uxth	r2, r2
 8008682:	ea42 020e 	orr.w	r2, r2, lr
 8008686:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 800868a:	7b0a      	ldrb	r2, [r1, #12]
 800868c:	2a00      	cmp	r2, #0
 800868e:	f040 80c2 	bne.w	8008816 <USB_ActivateEndpoint+0x1e2>
  {
    if (ep->is_in != 0U)
 8008692:	784a      	ldrb	r2, [r1, #1]
 8008694:	2a00      	cmp	r2, #0
 8008696:	d051      	beq.n	800873c <USB_ActivateEndpoint+0x108>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008698:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800869c:	fa13 f282 	uxtah	r2, r3, r2
 80086a0:	780c      	ldrb	r4, [r1, #0]
 80086a2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80086a6:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 80086aa:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80086ae:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80086b2:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086b6:	780c      	ldrb	r4, [r1, #0]
 80086b8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80086bc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80086c0:	d00c      	beq.n	80086dc <USB_ActivateEndpoint+0xa8>
 80086c2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80086c6:	b292      	uxth	r2, r2
 80086c8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80086cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80086d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086d4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80086d8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80086dc:	78ca      	ldrb	r2, [r1, #3]
 80086de:	2a01      	cmp	r2, #1
 80086e0:	d01d      	beq.n	800871e <USB_ActivateEndpoint+0xea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80086e2:	7809      	ldrb	r1, [r1, #0]
 80086e4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80086e8:	b292      	uxth	r2, r2
 80086ea:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80086ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086f2:	f082 0220 	eor.w	r2, r2, #32
 80086f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086fe:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8008702:	e066      	b.n	80087d2 <USB_ActivateEndpoint+0x19e>
      wEpRegVal |= USB_EP_CONTROL;
 8008704:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
      break;
 8008708:	e7a9      	b.n	800865e <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_INTERRUPT;
 800870a:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800870e:	2000      	movs	r0, #0
      break;
 8008710:	e7a5      	b.n	800865e <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008712:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8008716:	2000      	movs	r0, #0
      break;
 8008718:	e7a1      	b.n	800865e <USB_ActivateEndpoint+0x2a>
      ret = HAL_ERROR;
 800871a:	2001      	movs	r0, #1
 800871c:	e79f      	b.n	800865e <USB_ActivateEndpoint+0x2a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800871e:	7809      	ldrb	r1, [r1, #0]
 8008720:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008724:	b292      	uxth	r2, r2
 8008726:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800872a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800872e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008732:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008736:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800873a:	e04a      	b.n	80087d2 <USB_ActivateEndpoint+0x19e>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800873c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8008740:	fa13 f282 	uxtah	r2, r3, r2
 8008744:	780c      	ldrb	r4, [r1, #0]
 8008746:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800874a:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 800874e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008752:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008756:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800875a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800875e:	fa13 f282 	uxtah	r2, r3, r2
 8008762:	780c      	ldrb	r4, [r1, #0]
 8008764:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008768:	690c      	ldr	r4, [r1, #16]
 800876a:	2c3e      	cmp	r4, #62	; 0x3e
 800876c:	d932      	bls.n	80087d4 <USB_ActivateEndpoint+0x1a0>
 800876e:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 8008772:	f014 0f1f 	tst.w	r4, #31
 8008776:	d101      	bne.n	800877c <USB_ActivateEndpoint+0x148>
 8008778:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800877c:	ea6f 6ccc 	mvn.w	ip, ip, lsl #27
 8008780:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 8008784:	fa1f fc8c 	uxth.w	ip, ip
 8008788:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800878c:	780c      	ldrb	r4, [r1, #0]
 800878e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008792:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8008796:	d00c      	beq.n	80087b2 <USB_ActivateEndpoint+0x17e>
 8008798:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800879c:	b292      	uxth	r2, r2
 800879e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80087a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80087a6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80087aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80087ae:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087b2:	7809      	ldrb	r1, [r1, #0]
 80087b4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80087b8:	b292      	uxth	r2, r2
 80087ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80087be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80087c2:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80087c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80087ce:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80087d2:	bd10      	pop	{r4, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80087d4:	b98c      	cbnz	r4, 80087fa <USB_ActivateEndpoint+0x1c6>
 80087d6:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 80087da:	b2a4      	uxth	r4, r4
 80087dc:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80087e0:	b2a4      	uxth	r4, r4
 80087e2:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 80087e6:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 80087ea:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80087ee:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80087f2:	b2a4      	uxth	r4, r4
 80087f4:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 80087f8:	e7c8      	b.n	800878c <USB_ActivateEndpoint+0x158>
 80087fa:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80087fe:	f014 0f01 	tst.w	r4, #1
 8008802:	d001      	beq.n	8008808 <USB_ActivateEndpoint+0x1d4>
 8008804:	f10c 0c01 	add.w	ip, ip, #1
 8008808:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 800880c:	fa1f fc8c 	uxth.w	ip, ip
 8008810:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
 8008814:	e7ba      	b.n	800878c <USB_ActivateEndpoint+0x158>
    if (ep->type == EP_TYPE_BULK)
 8008816:	78ca      	ldrb	r2, [r1, #3]
 8008818:	2a02      	cmp	r2, #2
 800881a:	d072      	beq.n	8008902 <USB_ActivateEndpoint+0x2ce>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800881c:	780c      	ldrb	r4, [r1, #0]
 800881e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008822:	b292      	uxth	r2, r2
 8008824:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8008828:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800882c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008830:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008834:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008838:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800883c:	fa13 f282 	uxtah	r2, r3, r2
 8008840:	f891 c000 	ldrb.w	ip, [r1]
 8008844:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8008848:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800884c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008850:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008854:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
 8008858:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800885c:	fa13 f282 	uxtah	r2, r3, r2
 8008860:	f891 c000 	ldrb.w	ip, [r1]
 8008864:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8008868:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 800886c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008870:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008874:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404
    if (ep->is_in == 0U)
 8008878:	784a      	ldrb	r2, [r1, #1]
 800887a:	2a00      	cmp	r2, #0
 800887c:	d150      	bne.n	8008920 <USB_ActivateEndpoint+0x2ec>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800887e:	780c      	ldrb	r4, [r1, #0]
 8008880:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008884:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8008888:	d00c      	beq.n	80088a4 <USB_ActivateEndpoint+0x270>
 800888a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800888e:	b292      	uxth	r2, r2
 8008890:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008894:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008898:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800889c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80088a0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088a4:	780c      	ldrb	r4, [r1, #0]
 80088a6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80088aa:	f012 0f40 	tst.w	r2, #64	; 0x40
 80088ae:	d00c      	beq.n	80088ca <USB_ActivateEndpoint+0x296>
 80088b0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80088b4:	b292      	uxth	r2, r2
 80088b6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80088ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80088be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088c2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80088c6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088ca:	f891 c000 	ldrb.w	ip, [r1]
 80088ce:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 80088d2:	b292      	uxth	r2, r2
 80088d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80088d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80088dc:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80088e0:	f248 0480 	movw	r4, #32896	; 0x8080
 80088e4:	4322      	orrs	r2, r4
 80088e6:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088ea:	7809      	ldrb	r1, [r1, #0]
 80088ec:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80088f0:	b292      	uxth	r2, r2
 80088f2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80088f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088fa:	4322      	orrs	r2, r4
 80088fc:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8008900:	e767      	b.n	80087d2 <USB_ActivateEndpoint+0x19e>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008902:	780c      	ldrb	r4, [r1, #0]
 8008904:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008908:	b292      	uxth	r2, r2
 800890a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800890e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008912:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8008916:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800891a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800891e:	e78b      	b.n	8008838 <USB_ActivateEndpoint+0x204>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008920:	780c      	ldrb	r4, [r1, #0]
 8008922:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008926:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800892a:	d00c      	beq.n	8008946 <USB_ActivateEndpoint+0x312>
 800892c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008930:	b292      	uxth	r2, r2
 8008932:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008936:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800893a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800893e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008942:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008946:	780c      	ldrb	r4, [r1, #0]
 8008948:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800894c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008950:	d00c      	beq.n	800896c <USB_ActivateEndpoint+0x338>
 8008952:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008956:	b292      	uxth	r2, r2
 8008958:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800895c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008960:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008964:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008968:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800896c:	78ca      	ldrb	r2, [r1, #3]
 800896e:	2a01      	cmp	r2, #1
 8008970:	d01e      	beq.n	80089b0 <USB_ActivateEndpoint+0x37c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008972:	780c      	ldrb	r4, [r1, #0]
 8008974:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008978:	b292      	uxth	r2, r2
 800897a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800897e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008982:	f082 0220 	eor.w	r2, r2, #32
 8008986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800898a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800898e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008992:	7809      	ldrb	r1, [r1, #0]
 8008994:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008998:	b292      	uxth	r2, r2
 800899a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800899e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80089a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80089aa:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80089ae:	e710      	b.n	80087d2 <USB_ActivateEndpoint+0x19e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089b0:	780c      	ldrb	r4, [r1, #0]
 80089b2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80089b6:	b292      	uxth	r2, r2
 80089b8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80089bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80089c8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 80089cc:	e7e1      	b.n	8008992 <USB_ActivateEndpoint+0x35e>

080089ce <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80089ce:	7b0b      	ldrb	r3, [r1, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d146      	bne.n	8008a62 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 80089d4:	784b      	ldrb	r3, [r1, #1]
 80089d6:	b313      	cbz	r3, 8008a1e <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089d8:	780a      	ldrb	r2, [r1, #0]
 80089da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80089de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80089e2:	d00c      	beq.n	80089fe <USB_DeactivateEndpoint+0x30>
 80089e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089fa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089fe:	780a      	ldrb	r2, [r1, #0]
 8008a00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a16:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a1e:	780a      	ldrb	r2, [r1, #0]
 8008a20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008a24:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008a28:	d00c      	beq.n	8008a44 <USB_DeactivateEndpoint+0x76>
 8008a2a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a40:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a44:	780a      	ldrb	r2, [r1, #0]
 8008a46:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a5c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008a60:	e7db      	b.n	8008a1a <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8008a62:	784b      	ldrb	r3, [r1, #1]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d14e      	bne.n	8008b06 <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a68:	780a      	ldrb	r2, [r1, #0]
 8008a6a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008a6e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008a72:	d00c      	beq.n	8008a8e <USB_DeactivateEndpoint+0xc0>
 8008a74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a8a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a8e:	780a      	ldrb	r2, [r1, #0]
 8008a90:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008a94:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008a98:	d00c      	beq.n	8008ab4 <USB_DeactivateEndpoint+0xe6>
 8008a9a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ab0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8008ab4:	780a      	ldrb	r2, [r1, #0]
 8008ab6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ac8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008acc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ad0:	780b      	ldrb	r3, [r1, #0]
 8008ad2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008ad6:	b292      	uxth	r2, r2
 8008ad8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008adc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008ae0:	f248 0c80 	movw	ip, #32896	; 0x8080
 8008ae4:	ea42 020c 	orr.w	r2, r2, ip
 8008ae8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008aec:	780a      	ldrb	r2, [r1, #0]
 8008aee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008afc:	ea43 030c 	orr.w	r3, r3, ip
 8008b00:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008b04:	e789      	b.n	8008a1a <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b06:	780a      	ldrb	r2, [r1, #0]
 8008b08:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008b0c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008b10:	d00c      	beq.n	8008b2c <USB_DeactivateEndpoint+0x15e>
 8008b12:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b28:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b2c:	780a      	ldrb	r2, [r1, #0]
 8008b2e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008b32:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008b36:	d00c      	beq.n	8008b52 <USB_DeactivateEndpoint+0x184>
 8008b38:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b4e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8008b52:	780a      	ldrb	r2, [r1, #0]
 8008b54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b6a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b6e:	780b      	ldrb	r3, [r1, #0]
 8008b70:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008b74:	b292      	uxth	r2, r2
 8008b76:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b7e:	f248 0c80 	movw	ip, #32896	; 0x8080
 8008b82:	ea42 020c 	orr.w	r2, r2, ip
 8008b86:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b8a:	780a      	ldrb	r2, [r1, #0]
 8008b8c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b9a:	ea43 030c 	orr.w	r3, r3, ip
 8008b9e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008ba2:	e73a      	b.n	8008a1a <USB_DeactivateEndpoint+0x4c>

08008ba4 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8008ba4:	784b      	ldrb	r3, [r1, #1]
 8008ba6:	b18b      	cbz	r3, 8008bcc <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008ba8:	780a      	ldrb	r2, [r1, #0]
 8008baa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bb8:	f083 0310 	eor.w	r3, r3, #16
 8008bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bc4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8008bc8:	2000      	movs	r0, #0
 8008bca:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008bcc:	780a      	ldrb	r2, [r1, #0]
 8008bce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bdc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008be8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008bec:	e7ec      	b.n	8008bc8 <USB_EPSetStall+0x24>

08008bee <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8008bee:	7b0b      	ldrb	r3, [r1, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d14b      	bne.n	8008c8c <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8008bf4:	784b      	ldrb	r3, [r1, #1]
 8008bf6:	b333      	cbz	r3, 8008c46 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bf8:	780a      	ldrb	r2, [r1, #0]
 8008bfa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008bfe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008c02:	d00c      	beq.n	8008c1e <USB_EPClearStall+0x30>
 8008c04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c1a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8008c1e:	78cb      	ldrb	r3, [r1, #3]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d033      	beq.n	8008c8c <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c24:	780a      	ldrb	r2, [r1, #0]
 8008c26:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c34:	f083 0320 	eor.w	r3, r3, #32
 8008c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c40:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008c44:	e022      	b.n	8008c8c <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c46:	780a      	ldrb	r2, [r1, #0]
 8008c48:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008c4c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008c50:	d00c      	beq.n	8008c6c <USB_EPClearStall+0x7e>
 8008c52:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c68:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c6c:	780a      	ldrb	r2, [r1, #0]
 8008c6e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c7c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c88:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	4770      	bx	lr

08008c90 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8008c90:	b911      	cbnz	r1, 8008c98 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008c92:	2380      	movs	r3, #128	; 0x80
 8008c94:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8008c98:	2000      	movs	r0, #0
 8008c9a:	4770      	bx	lr

08008c9c <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008c9c:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8008ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8008cae:	2000      	movs	r0, #0
 8008cb0:	4770      	bx	lr

08008cb2 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008cb2:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8008cb6:	b280      	uxth	r0, r0
 8008cb8:	4770      	bx	lr

08008cba <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008cba:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008cbc:	1c5c      	adds	r4, r3, #1
 8008cbe:	0864      	lsrs	r4, r4, #1
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008cc0:	4402      	add	r2, r0
 8008cc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8008cc6:	e007      	b.n	8008cd8 <USB_WritePMA+0x1e>
  {
    temp1 = *pBuf;
 8008cc8:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008cca:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8008ccc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008cd0:	f822 3b02 	strh.w	r3, [r2], #2

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008cd4:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8008cd6:	3c01      	subs	r4, #1
 8008cd8:	2c00      	cmp	r4, #0
 8008cda:	d1f5      	bne.n	8008cc8 <USB_WritePMA+0xe>
  }
}
 8008cdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ce0:	4770      	bx	lr

08008ce2 <USB_EPStartXfer>:
{
 8008ce2:	b570      	push	{r4, r5, r6, lr}
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8008ce8:	784a      	ldrb	r2, [r1, #1]
 8008cea:	2a01      	cmp	r2, #1
 8008cec:	d032      	beq.n	8008d54 <USB_EPStartXfer+0x72>
    if (ep->doublebuffer == 0U)
 8008cee:	7b0b      	ldrb	r3, [r1, #12]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f040 8283 	bne.w	80091fc <USB_EPStartXfer+0x51a>
      if (ep->xfer_len > ep->maxpacket)
 8008cf6:	698b      	ldr	r3, [r1, #24]
 8008cf8:	690a      	ldr	r2, [r1, #16]
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	f240 825d 	bls.w	80091ba <USB_EPStartXfer+0x4d8>
        ep->xfer_len -= len;
 8008d00:	1a9b      	subs	r3, r3, r2
 8008d02:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008d04:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8008d08:	fa15 f383 	uxtah	r3, r5, r3
 8008d0c:	7821      	ldrb	r1, [r4, #0]
 8008d0e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008d12:	2a3e      	cmp	r2, #62	; 0x3e
 8008d14:	f240 8255 	bls.w	80091c2 <USB_EPStartXfer+0x4e0>
 8008d18:	0951      	lsrs	r1, r2, #5
 8008d1a:	f012 0f1f 	tst.w	r2, #31
 8008d1e:	d100      	bne.n	8008d22 <USB_EPStartXfer+0x40>
 8008d20:	3901      	subs	r1, #1
 8008d22:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8008d26:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8008d2a:	b289      	uxth	r1, r1
 8008d2c:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d30:	7822      	ldrb	r2, [r4, #0]
 8008d32:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d40:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d4c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8008d50:	2000      	movs	r0, #0
}
 8008d52:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 8008d54:	698e      	ldr	r6, [r1, #24]
 8008d56:	6909      	ldr	r1, [r1, #16]
 8008d58:	428e      	cmp	r6, r1
 8008d5a:	d900      	bls.n	8008d5e <USB_EPStartXfer+0x7c>
      len = ep->maxpacket;
 8008d5c:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 8008d5e:	7b23      	ldrb	r3, [r4, #12]
 8008d60:	b32b      	cbz	r3, 8008dae <USB_EPStartXfer+0xcc>
      if (ep->type == EP_TYPE_BULK)
 8008d62:	78e3      	ldrb	r3, [r4, #3]
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d044      	beq.n	8008df2 <USB_EPStartXfer+0x110>
        ep->xfer_len_db -= len;
 8008d68:	6a23      	ldr	r3, [r4, #32]
 8008d6a:	1b9b      	subs	r3, r3, r6
 8008d6c:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d6e:	7823      	ldrb	r3, [r4, #0]
 8008d70:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
 8008d74:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008d78:	f000 81dc 	beq.w	8009134 <USB_EPStartXfer+0x452>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d7c:	2a00      	cmp	r2, #0
 8008d7e:	f040 81c9 	bne.w	8009114 <USB_EPStartXfer+0x432>
 8008d82:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8008d86:	fa15 f282 	uxtah	r2, r5, r2
 8008d8a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d8e:	2e3e      	cmp	r6, #62	; 0x3e
 8008d90:	f240 81a3 	bls.w	80090da <USB_EPStartXfer+0x3f8>
 8008d94:	0972      	lsrs	r2, r6, #5
 8008d96:	f016 0f1f 	tst.w	r6, #31
 8008d9a:	d100      	bne.n	8008d9e <USB_EPStartXfer+0xbc>
 8008d9c:	3a01      	subs	r2, #1
 8008d9e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8008da2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008da6:	b292      	uxth	r2, r2
 8008da8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8008dac:	e1bb      	b.n	8009126 <USB_EPStartXfer+0x444>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008dae:	b2b6      	uxth	r6, r6
 8008db0:	4633      	mov	r3, r6
 8008db2:	88e2      	ldrh	r2, [r4, #6]
 8008db4:	6961      	ldr	r1, [r4, #20]
 8008db6:	4628      	mov	r0, r5
 8008db8:	f7ff ff7f 	bl	8008cba <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008dbc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8008dc0:	fa15 f383 	uxtah	r3, r5, r3
 8008dc4:	7822      	ldrb	r2, [r4, #0]
 8008dc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dca:	f8a3 6402 	strh.w	r6, [r3, #1026]	; 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008dce:	7822      	ldrb	r2, [r4, #0]
 8008dd0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dde:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8008de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dea:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8008dee:	2000      	movs	r0, #0
 8008df0:	e7af      	b.n	8008d52 <USB_EPStartXfer+0x70>
        if (ep->xfer_len_db > ep->maxpacket)
 8008df2:	6a23      	ldr	r3, [r4, #32]
 8008df4:	4299      	cmp	r1, r3
 8008df6:	f080 8152 	bcs.w	800909e <USB_EPStartXfer+0x3bc>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008dfa:	7822      	ldrb	r2, [r4, #0]
 8008dfc:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e0a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e12:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 8008e16:	6a23      	ldr	r3, [r4, #32]
 8008e18:	1b9b      	subs	r3, r3, r6
 8008e1a:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008e1c:	7823      	ldrb	r3, [r4, #0]
 8008e1e:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 8008e22:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008e26:	f000 809d 	beq.w	8008f64 <USB_EPStartXfer+0x282>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008e2a:	7862      	ldrb	r2, [r4, #1]
 8008e2c:	bb8a      	cbnz	r2, 8008e92 <USB_EPStartXfer+0x1b0>
 8008e2e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8008e32:	fa15 f282 	uxtah	r2, r5, r2
 8008e36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e3a:	2e3e      	cmp	r6, #62	; 0x3e
 8008e3c:	d90c      	bls.n	8008e58 <USB_EPStartXfer+0x176>
 8008e3e:	0972      	lsrs	r2, r6, #5
 8008e40:	f016 0f1f 	tst.w	r6, #31
 8008e44:	d100      	bne.n	8008e48 <USB_EPStartXfer+0x166>
 8008e46:	3a01      	subs	r2, #1
 8008e48:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8008e4c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008e50:	b292      	uxth	r2, r2
 8008e52:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8008e56:	e01e      	b.n	8008e96 <USB_EPStartXfer+0x1b4>
 8008e58:	b98e      	cbnz	r6, 8008e7e <USB_EPStartXfer+0x19c>
 8008e5a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8008e5e:	b292      	uxth	r2, r2
 8008e60:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008e64:	b292      	uxth	r2, r2
 8008e66:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8008e6a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8008e6e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8008e72:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008e76:	b292      	uxth	r2, r2
 8008e78:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8008e7c:	e00b      	b.n	8008e96 <USB_EPStartXfer+0x1b4>
 8008e7e:	0872      	lsrs	r2, r6, #1
 8008e80:	f016 0f01 	tst.w	r6, #1
 8008e84:	d000      	beq.n	8008e88 <USB_EPStartXfer+0x1a6>
 8008e86:	3201      	adds	r2, #1
 8008e88:	0292      	lsls	r2, r2, #10
 8008e8a:	b292      	uxth	r2, r2
 8008e8c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8008e90:	e001      	b.n	8008e96 <USB_EPStartXfer+0x1b4>
 8008e92:	2a01      	cmp	r2, #1
 8008e94:	d027      	beq.n	8008ee6 <USB_EPStartXfer+0x204>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e96:	b2b3      	uxth	r3, r6
 8008e98:	8962      	ldrh	r2, [r4, #10]
 8008e9a:	6961      	ldr	r1, [r4, #20]
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	f7ff ff0c 	bl	8008cba <USB_WritePMA>
            ep->xfer_buff += len;
 8008ea2:	6963      	ldr	r3, [r4, #20]
 8008ea4:	4433      	add	r3, r6
 8008ea6:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8008ea8:	6a23      	ldr	r3, [r4, #32]
 8008eaa:	6922      	ldr	r2, [r4, #16]
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d924      	bls.n	8008efa <USB_EPStartXfer+0x218>
              ep->xfer_len_db -= len;
 8008eb0:	1b9b      	subs	r3, r3, r6
 8008eb2:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008eb4:	7863      	ldrb	r3, [r4, #1]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d140      	bne.n	8008f3c <USB_EPStartXfer+0x25a>
 8008eba:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8008ebe:	fa15 f383 	uxtah	r3, r5, r3
 8008ec2:	7822      	ldrb	r2, [r4, #0]
 8008ec4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ec8:	2e3e      	cmp	r6, #62	; 0x3e
 8008eca:	d91a      	bls.n	8008f02 <USB_EPStartXfer+0x220>
 8008ecc:	0972      	lsrs	r2, r6, #5
 8008ece:	f016 0f1f 	tst.w	r6, #31
 8008ed2:	d100      	bne.n	8008ed6 <USB_EPStartXfer+0x1f4>
 8008ed4:	3a01      	subs	r2, #1
 8008ed6:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8008eda:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008ede:	b292      	uxth	r2, r2
 8008ee0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8008ee4:	e02c      	b.n	8008f40 <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008ee6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8008eea:	fa15 f282 	uxtah	r2, r5, r2
 8008eee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ef2:	b2b2      	uxth	r2, r6
 8008ef4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8008ef8:	e7cd      	b.n	8008e96 <USB_EPStartXfer+0x1b4>
              ep->xfer_len_db = 0U;
 8008efa:	2200      	movs	r2, #0
 8008efc:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8008efe:	461e      	mov	r6, r3
 8008f00:	e7d8      	b.n	8008eb4 <USB_EPStartXfer+0x1d2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f02:	b98e      	cbnz	r6, 8008f28 <USB_EPStartXfer+0x246>
 8008f04:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8008f08:	b292      	uxth	r2, r2
 8008f0a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008f0e:	b292      	uxth	r2, r2
 8008f10:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8008f14:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8008f18:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8008f1c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008f20:	b292      	uxth	r2, r2
 8008f22:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8008f26:	e00b      	b.n	8008f40 <USB_EPStartXfer+0x25e>
 8008f28:	0872      	lsrs	r2, r6, #1
 8008f2a:	f016 0f01 	tst.w	r6, #1
 8008f2e:	d000      	beq.n	8008f32 <USB_EPStartXfer+0x250>
 8008f30:	3201      	adds	r2, #1
 8008f32:	0292      	lsls	r2, r2, #10
 8008f34:	b292      	uxth	r2, r2
 8008f36:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8008f3a:	e001      	b.n	8008f40 <USB_EPStartXfer+0x25e>
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d006      	beq.n	8008f4e <USB_EPStartXfer+0x26c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f40:	b2b3      	uxth	r3, r6
 8008f42:	8922      	ldrh	r2, [r4, #8]
 8008f44:	6961      	ldr	r1, [r4, #20]
 8008f46:	4628      	mov	r0, r5
 8008f48:	f7ff feb7 	bl	8008cba <USB_WritePMA>
 8008f4c:	e73f      	b.n	8008dce <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f4e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8008f52:	fa15 f383 	uxtah	r3, r5, r3
 8008f56:	7822      	ldrb	r2, [r4, #0]
 8008f58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f5c:	b2b2      	uxth	r2, r6
 8008f5e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8008f62:	e7ed      	b.n	8008f40 <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f64:	7862      	ldrb	r2, [r4, #1]
 8008f66:	bb8a      	cbnz	r2, 8008fcc <USB_EPStartXfer+0x2ea>
 8008f68:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8008f6c:	fa15 f282 	uxtah	r2, r5, r2
 8008f70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f74:	2e3e      	cmp	r6, #62	; 0x3e
 8008f76:	d90c      	bls.n	8008f92 <USB_EPStartXfer+0x2b0>
 8008f78:	0972      	lsrs	r2, r6, #5
 8008f7a:	f016 0f1f 	tst.w	r6, #31
 8008f7e:	d100      	bne.n	8008f82 <USB_EPStartXfer+0x2a0>
 8008f80:	3a01      	subs	r2, #1
 8008f82:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8008f86:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008f8a:	b292      	uxth	r2, r2
 8008f8c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8008f90:	e01e      	b.n	8008fd0 <USB_EPStartXfer+0x2ee>
 8008f92:	b98e      	cbnz	r6, 8008fb8 <USB_EPStartXfer+0x2d6>
 8008f94:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8008f98:	b292      	uxth	r2, r2
 8008f9a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008f9e:	b292      	uxth	r2, r2
 8008fa0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8008fa4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8008fa8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8008fac:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008fb0:	b292      	uxth	r2, r2
 8008fb2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8008fb6:	e00b      	b.n	8008fd0 <USB_EPStartXfer+0x2ee>
 8008fb8:	0872      	lsrs	r2, r6, #1
 8008fba:	f016 0f01 	tst.w	r6, #1
 8008fbe:	d000      	beq.n	8008fc2 <USB_EPStartXfer+0x2e0>
 8008fc0:	3201      	adds	r2, #1
 8008fc2:	0292      	lsls	r2, r2, #10
 8008fc4:	b292      	uxth	r2, r2
 8008fc6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8008fca:	e001      	b.n	8008fd0 <USB_EPStartXfer+0x2ee>
 8008fcc:	2a01      	cmp	r2, #1
 8008fce:	d027      	beq.n	8009020 <USB_EPStartXfer+0x33e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008fd0:	b2b3      	uxth	r3, r6
 8008fd2:	8922      	ldrh	r2, [r4, #8]
 8008fd4:	6961      	ldr	r1, [r4, #20]
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	f7ff fe6f 	bl	8008cba <USB_WritePMA>
            ep->xfer_buff += len;
 8008fdc:	6963      	ldr	r3, [r4, #20]
 8008fde:	4433      	add	r3, r6
 8008fe0:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8008fe2:	6a23      	ldr	r3, [r4, #32]
 8008fe4:	6922      	ldr	r2, [r4, #16]
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d924      	bls.n	8009034 <USB_EPStartXfer+0x352>
              ep->xfer_len_db -= len;
 8008fea:	1b9b      	subs	r3, r3, r6
 8008fec:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008fee:	7863      	ldrb	r3, [r4, #1]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d140      	bne.n	8009076 <USB_EPStartXfer+0x394>
 8008ff4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8008ff8:	fa15 f383 	uxtah	r3, r5, r3
 8008ffc:	7822      	ldrb	r2, [r4, #0]
 8008ffe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009002:	2e3e      	cmp	r6, #62	; 0x3e
 8009004:	d91a      	bls.n	800903c <USB_EPStartXfer+0x35a>
 8009006:	0972      	lsrs	r2, r6, #5
 8009008:	f016 0f1f 	tst.w	r6, #31
 800900c:	d100      	bne.n	8009010 <USB_EPStartXfer+0x32e>
 800900e:	3a01      	subs	r2, #1
 8009010:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8009014:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009018:	b292      	uxth	r2, r2
 800901a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800901e:	e02c      	b.n	800907a <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009020:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8009024:	fa15 f282 	uxtah	r2, r5, r2
 8009028:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800902c:	b2b2      	uxth	r2, r6
 800902e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009032:	e7cd      	b.n	8008fd0 <USB_EPStartXfer+0x2ee>
              ep->xfer_len_db = 0U;
 8009034:	2200      	movs	r2, #0
 8009036:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8009038:	461e      	mov	r6, r3
 800903a:	e7d8      	b.n	8008fee <USB_EPStartXfer+0x30c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800903c:	b98e      	cbnz	r6, 8009062 <USB_EPStartXfer+0x380>
 800903e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009042:	b292      	uxth	r2, r2
 8009044:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009048:	b292      	uxth	r2, r2
 800904a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800904e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009052:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009056:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800905a:	b292      	uxth	r2, r2
 800905c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009060:	e00b      	b.n	800907a <USB_EPStartXfer+0x398>
 8009062:	0872      	lsrs	r2, r6, #1
 8009064:	f016 0f01 	tst.w	r6, #1
 8009068:	d000      	beq.n	800906c <USB_EPStartXfer+0x38a>
 800906a:	3201      	adds	r2, #1
 800906c:	0292      	lsls	r2, r2, #10
 800906e:	b292      	uxth	r2, r2
 8009070:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009074:	e001      	b.n	800907a <USB_EPStartXfer+0x398>
 8009076:	2b01      	cmp	r3, #1
 8009078:	d006      	beq.n	8009088 <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800907a:	b2b3      	uxth	r3, r6
 800907c:	8962      	ldrh	r2, [r4, #10]
 800907e:	6961      	ldr	r1, [r4, #20]
 8009080:	4628      	mov	r0, r5
 8009082:	f7ff fe1a 	bl	8008cba <USB_WritePMA>
 8009086:	e6a2      	b.n	8008dce <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009088:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800908c:	fa15 f383 	uxtah	r3, r5, r3
 8009090:	7822      	ldrb	r2, [r4, #0]
 8009092:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009096:	b2b2      	uxth	r2, r6
 8009098:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800909c:	e7ed      	b.n	800907a <USB_EPStartXfer+0x398>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800909e:	7821      	ldrb	r1, [r4, #0]
 80090a0:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 80090a4:	b292      	uxth	r2, r2
 80090a6:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80090aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80090ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80090b6:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80090ba:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80090be:	fa15 f282 	uxtah	r2, r5, r2
 80090c2:	7821      	ldrb	r1, [r4, #0]
 80090c4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090ce:	8922      	ldrh	r2, [r4, #8]
 80090d0:	6961      	ldr	r1, [r4, #20]
 80090d2:	4628      	mov	r0, r5
 80090d4:	f7ff fdf1 	bl	8008cba <USB_WritePMA>
 80090d8:	e679      	b.n	8008dce <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090da:	b98e      	cbnz	r6, 8009100 <USB_EPStartXfer+0x41e>
 80090dc:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80090e0:	b292      	uxth	r2, r2
 80090e2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80090e6:	b292      	uxth	r2, r2
 80090e8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80090ec:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80090f0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80090f4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80090f8:	b292      	uxth	r2, r2
 80090fa:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80090fe:	e012      	b.n	8009126 <USB_EPStartXfer+0x444>
 8009100:	0872      	lsrs	r2, r6, #1
 8009102:	f016 0f01 	tst.w	r6, #1
 8009106:	d000      	beq.n	800910a <USB_EPStartXfer+0x428>
 8009108:	3201      	adds	r2, #1
 800910a:	0292      	lsls	r2, r2, #10
 800910c:	b292      	uxth	r2, r2
 800910e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009112:	e008      	b.n	8009126 <USB_EPStartXfer+0x444>
 8009114:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8009118:	fa15 f282 	uxtah	r2, r5, r2
 800911c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009120:	b2b2      	uxth	r2, r6
 8009122:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009126:	b2b3      	uxth	r3, r6
 8009128:	8962      	ldrh	r2, [r4, #10]
 800912a:	6961      	ldr	r1, [r4, #20]
 800912c:	4628      	mov	r0, r5
 800912e:	f7ff fdc4 	bl	8008cba <USB_WritePMA>
 8009132:	e64c      	b.n	8008dce <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009134:	bb8a      	cbnz	r2, 800919a <USB_EPStartXfer+0x4b8>
 8009136:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800913a:	fa15 f282 	uxtah	r2, r5, r2
 800913e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009142:	2e3e      	cmp	r6, #62	; 0x3e
 8009144:	d90c      	bls.n	8009160 <USB_EPStartXfer+0x47e>
 8009146:	0972      	lsrs	r2, r6, #5
 8009148:	f016 0f1f 	tst.w	r6, #31
 800914c:	d100      	bne.n	8009150 <USB_EPStartXfer+0x46e>
 800914e:	3a01      	subs	r2, #1
 8009150:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8009154:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009158:	b292      	uxth	r2, r2
 800915a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800915e:	e025      	b.n	80091ac <USB_EPStartXfer+0x4ca>
 8009160:	b98e      	cbnz	r6, 8009186 <USB_EPStartXfer+0x4a4>
 8009162:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8009166:	b292      	uxth	r2, r2
 8009168:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800916c:	b292      	uxth	r2, r2
 800916e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009172:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8009176:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800917a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800917e:	b292      	uxth	r2, r2
 8009180:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009184:	e012      	b.n	80091ac <USB_EPStartXfer+0x4ca>
 8009186:	0872      	lsrs	r2, r6, #1
 8009188:	f016 0f01 	tst.w	r6, #1
 800918c:	d000      	beq.n	8009190 <USB_EPStartXfer+0x4ae>
 800918e:	3201      	adds	r2, #1
 8009190:	0292      	lsls	r2, r2, #10
 8009192:	b292      	uxth	r2, r2
 8009194:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009198:	e008      	b.n	80091ac <USB_EPStartXfer+0x4ca>
 800919a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800919e:	fa15 f282 	uxtah	r2, r5, r2
 80091a2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80091a6:	b2b2      	uxth	r2, r6
 80091a8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091ac:	b2b3      	uxth	r3, r6
 80091ae:	8922      	ldrh	r2, [r4, #8]
 80091b0:	6961      	ldr	r1, [r4, #20]
 80091b2:	4628      	mov	r0, r5
 80091b4:	f7ff fd81 	bl	8008cba <USB_WritePMA>
 80091b8:	e609      	b.n	8008dce <USB_EPStartXfer+0xec>
        ep->xfer_len = 0U;
 80091ba:	2200      	movs	r2, #0
 80091bc:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 80091be:	461a      	mov	r2, r3
 80091c0:	e5a0      	b.n	8008d04 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80091c2:	b98a      	cbnz	r2, 80091e8 <USB_EPStartXfer+0x506>
 80091c4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80091c8:	b292      	uxth	r2, r2
 80091ca:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80091ce:	b292      	uxth	r2, r2
 80091d0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80091d4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80091d8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80091dc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80091e0:	b292      	uxth	r2, r2
 80091e2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80091e6:	e5a3      	b.n	8008d30 <USB_EPStartXfer+0x4e>
 80091e8:	0851      	lsrs	r1, r2, #1
 80091ea:	f012 0f01 	tst.w	r2, #1
 80091ee:	d000      	beq.n	80091f2 <USB_EPStartXfer+0x510>
 80091f0:	3101      	adds	r1, #1
 80091f2:	0289      	lsls	r1, r1, #10
 80091f4:	b289      	uxth	r1, r1
 80091f6:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 80091fa:	e599      	b.n	8008d30 <USB_EPStartXfer+0x4e>
      if (ep->type == EP_TYPE_BULK)
 80091fc:	78cb      	ldrb	r3, [r1, #3]
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d03b      	beq.n	800927a <USB_EPStartXfer+0x598>
      else if (ep->type == EP_TYPE_ISOC)
 8009202:	2b01      	cmp	r3, #1
 8009204:	f040 811b 	bne.w	800943e <USB_EPStartXfer+0x75c>
        if (ep->xfer_len > ep->maxpacket)
 8009208:	6989      	ldr	r1, [r1, #24]
 800920a:	6923      	ldr	r3, [r4, #16]
 800920c:	4299      	cmp	r1, r3
 800920e:	f240 80ca 	bls.w	80093a6 <USB_EPStartXfer+0x6c4>
          ep->xfer_len -= len;
 8009212:	1ac9      	subs	r1, r1, r3
 8009214:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009216:	b9aa      	cbnz	r2, 8009244 <USB_EPStartXfer+0x562>
 8009218:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800921c:	fa15 f282 	uxtah	r2, r5, r2
 8009220:	7821      	ldrb	r1, [r4, #0]
 8009222:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009226:	2b3e      	cmp	r3, #62	; 0x3e
 8009228:	f240 80c1 	bls.w	80093ae <USB_EPStartXfer+0x6cc>
 800922c:	0959      	lsrs	r1, r3, #5
 800922e:	f013 0f1f 	tst.w	r3, #31
 8009232:	d100      	bne.n	8009236 <USB_EPStartXfer+0x554>
 8009234:	3901      	subs	r1, #1
 8009236:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800923a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800923e:	b289      	uxth	r1, r1
 8009240:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8009244:	7862      	ldrb	r2, [r4, #1]
 8009246:	2a00      	cmp	r2, #0
 8009248:	f040 80eb 	bne.w	8009422 <USB_EPStartXfer+0x740>
 800924c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8009250:	fa15 f282 	uxtah	r2, r5, r2
 8009254:	7821      	ldrb	r1, [r4, #0]
 8009256:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800925a:	2b3e      	cmp	r3, #62	; 0x3e
 800925c:	f240 80c4 	bls.w	80093e8 <USB_EPStartXfer+0x706>
 8009260:	0959      	lsrs	r1, r3, #5
 8009262:	f013 0f1f 	tst.w	r3, #31
 8009266:	d100      	bne.n	800926a <USB_EPStartXfer+0x588>
 8009268:	3901      	subs	r1, #1
 800926a:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 800926e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009272:	b29b      	uxth	r3, r3
 8009274:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8009278:	e55a      	b.n	8008d30 <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800927a:	b9aa      	cbnz	r2, 80092a8 <USB_EPStartXfer+0x5c6>
 800927c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009280:	fa10 f383 	uxtah	r3, r0, r3
 8009284:	780a      	ldrb	r2, [r1, #0]
 8009286:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800928a:	6909      	ldr	r1, [r1, #16]
 800928c:	293e      	cmp	r1, #62	; 0x3e
 800928e:	d925      	bls.n	80092dc <USB_EPStartXfer+0x5fa>
 8009290:	094a      	lsrs	r2, r1, #5
 8009292:	f011 0f1f 	tst.w	r1, #31
 8009296:	d100      	bne.n	800929a <USB_EPStartXfer+0x5b8>
 8009298:	3a01      	subs	r2, #1
 800929a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800929e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80092a2:	b292      	uxth	r2, r2
 80092a4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80092a8:	7863      	ldrb	r3, [r4, #1]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d150      	bne.n	8009350 <USB_EPStartXfer+0x66e>
 80092ae:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80092b2:	fa15 f383 	uxtah	r3, r5, r3
 80092b6:	7822      	ldrb	r2, [r4, #0]
 80092b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092bc:	6921      	ldr	r1, [r4, #16]
 80092be:	293e      	cmp	r1, #62	; 0x3e
 80092c0:	d929      	bls.n	8009316 <USB_EPStartXfer+0x634>
 80092c2:	094a      	lsrs	r2, r1, #5
 80092c4:	f011 0f1f 	tst.w	r1, #31
 80092c8:	d100      	bne.n	80092cc <USB_EPStartXfer+0x5ea>
 80092ca:	3a01      	subs	r2, #1
 80092cc:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80092d0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80092d4:	b292      	uxth	r2, r2
 80092d6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80092da:	e03b      	b.n	8009354 <USB_EPStartXfer+0x672>
 80092dc:	b989      	cbnz	r1, 8009302 <USB_EPStartXfer+0x620>
 80092de:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80092e2:	b292      	uxth	r2, r2
 80092e4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80092e8:	b292      	uxth	r2, r2
 80092ea:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80092ee:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80092f2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80092f6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80092fa:	b292      	uxth	r2, r2
 80092fc:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009300:	e7d2      	b.n	80092a8 <USB_EPStartXfer+0x5c6>
 8009302:	084a      	lsrs	r2, r1, #1
 8009304:	f011 0f01 	tst.w	r1, #1
 8009308:	d000      	beq.n	800930c <USB_EPStartXfer+0x62a>
 800930a:	3201      	adds	r2, #1
 800930c:	0292      	lsls	r2, r2, #10
 800930e:	b292      	uxth	r2, r2
 8009310:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009314:	e7c8      	b.n	80092a8 <USB_EPStartXfer+0x5c6>
 8009316:	b989      	cbnz	r1, 800933c <USB_EPStartXfer+0x65a>
 8009318:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800931c:	b292      	uxth	r2, r2
 800931e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009322:	b292      	uxth	r2, r2
 8009324:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009328:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800932c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009330:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009334:	b292      	uxth	r2, r2
 8009336:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800933a:	e00b      	b.n	8009354 <USB_EPStartXfer+0x672>
 800933c:	084a      	lsrs	r2, r1, #1
 800933e:	f011 0f01 	tst.w	r1, #1
 8009342:	d000      	beq.n	8009346 <USB_EPStartXfer+0x664>
 8009344:	3201      	adds	r2, #1
 8009346:	0292      	lsls	r2, r2, #10
 8009348:	b292      	uxth	r2, r2
 800934a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800934e:	e001      	b.n	8009354 <USB_EPStartXfer+0x672>
 8009350:	2b01      	cmp	r3, #1
 8009352:	d01d      	beq.n	8009390 <USB_EPStartXfer+0x6ae>
        if (ep->xfer_count != 0U)
 8009354:	69e3      	ldr	r3, [r4, #28]
 8009356:	2b00      	cmp	r3, #0
 8009358:	f43f acea 	beq.w	8008d30 <USB_EPStartXfer+0x4e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800935c:	7822      	ldrb	r2, [r4, #0]
 800935e:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009362:	f244 0340 	movw	r3, #16448	; 0x4040
 8009366:	ea03 0001 	and.w	r0, r3, r1
 800936a:	438b      	bics	r3, r1
 800936c:	d002      	beq.n	8009374 <USB_EPStartXfer+0x692>
 800936e:	2800      	cmp	r0, #0
 8009370:	f47f acde 	bne.w	8008d30 <USB_EPStartXfer+0x4e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009374:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8009378:	b29b      	uxth	r3, r3
 800937a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800937e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009386:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800938a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800938e:	e4cf      	b.n	8008d30 <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009390:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8009394:	fa15 f383 	uxtah	r3, r5, r3
 8009398:	7822      	ldrb	r2, [r4, #0]
 800939a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800939e:	8a22      	ldrh	r2, [r4, #16]
 80093a0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80093a4:	e7d6      	b.n	8009354 <USB_EPStartXfer+0x672>
          ep->xfer_len = 0U;
 80093a6:	2300      	movs	r3, #0
 80093a8:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 80093aa:	460b      	mov	r3, r1
 80093ac:	e733      	b.n	8009216 <USB_EPStartXfer+0x534>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80093ae:	b98b      	cbnz	r3, 80093d4 <USB_EPStartXfer+0x6f2>
 80093b0:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80093b4:	b289      	uxth	r1, r1
 80093b6:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80093ba:	b289      	uxth	r1, r1
 80093bc:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80093c0:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80093c4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80093c8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80093cc:	b289      	uxth	r1, r1
 80093ce:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80093d2:	e737      	b.n	8009244 <USB_EPStartXfer+0x562>
 80093d4:	0859      	lsrs	r1, r3, #1
 80093d6:	f013 0f01 	tst.w	r3, #1
 80093da:	d000      	beq.n	80093de <USB_EPStartXfer+0x6fc>
 80093dc:	3101      	adds	r1, #1
 80093de:	0289      	lsls	r1, r1, #10
 80093e0:	b289      	uxth	r1, r1
 80093e2:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80093e6:	e72d      	b.n	8009244 <USB_EPStartXfer+0x562>
 80093e8:	b98b      	cbnz	r3, 800940e <USB_EPStartXfer+0x72c>
 80093ea:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 80093fa:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 80093fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009406:	b29b      	uxth	r3, r3
 8009408:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800940c:	e490      	b.n	8008d30 <USB_EPStartXfer+0x4e>
 800940e:	0859      	lsrs	r1, r3, #1
 8009410:	f013 0f01 	tst.w	r3, #1
 8009414:	d000      	beq.n	8009418 <USB_EPStartXfer+0x736>
 8009416:	3101      	adds	r1, #1
 8009418:	028b      	lsls	r3, r1, #10
 800941a:	b29b      	uxth	r3, r3
 800941c:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8009420:	e486      	b.n	8008d30 <USB_EPStartXfer+0x4e>
 8009422:	2a01      	cmp	r2, #1
 8009424:	f47f ac84 	bne.w	8008d30 <USB_EPStartXfer+0x4e>
 8009428:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800942c:	fa15 f282 	uxtah	r2, r5, r2
 8009430:	7821      	ldrb	r1, [r4, #0]
 8009432:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009436:	b29b      	uxth	r3, r3
 8009438:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800943c:	e478      	b.n	8008d30 <USB_EPStartXfer+0x4e>
        return HAL_ERROR;
 800943e:	2001      	movs	r0, #1
 8009440:	e487      	b.n	8008d52 <USB_EPStartXfer+0x70>

08009442 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009442:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009444:	085c      	lsrs	r4, r3, #1
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009446:	4410      	add	r0, r2
 8009448:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800944c:	e007      	b.n	800945e <USB_ReadPMA+0x1c>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800944e:	f830 2b02 	ldrh.w	r2, [r0], #2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009452:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009454:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8009458:	704a      	strb	r2, [r1, #1]
    pBuf++;
 800945a:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800945c:	3c01      	subs	r4, #1
 800945e:	2c00      	cmp	r4, #0
 8009460:	d1f5      	bne.n	800944e <USB_ReadPMA+0xc>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009462:	f013 0f01 	tst.w	r3, #1
 8009466:	d001      	beq.n	800946c <USB_ReadPMA+0x2a>
  {
    temp = *pdwVal;
 8009468:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800946a:	700b      	strb	r3, [r1, #0]
  }
}
 800946c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009470:	4770      	bx	lr
	...

08009474 <LCD_IO_Init>:
/*!
 * @brief Nizkonivojska inicializacija zaslona
 * @internal
 */
static void LCD_IO_Init()
{
 8009474:	b538      	push	{r3, r4, r5, lr}
	LCD_RST_LOW();
 8009476:	4c05      	ldr	r4, [pc, #20]	; (800948c <LCD_IO_Init+0x18>)
 8009478:	2508      	movs	r5, #8
 800947a:	62a5      	str	r5, [r4, #40]	; 0x28
	HAL_Delay(120);
 800947c:	2078      	movs	r0, #120	; 0x78
 800947e:	f7f9 fe5d 	bl	800313c <HAL_Delay>
	LCD_RST_HIGH();
 8009482:	61a5      	str	r5, [r4, #24]
	HAL_Delay(120);
 8009484:	2078      	movs	r0, #120	; 0x78
 8009486:	f7f9 fe59 	bl	800313c <HAL_Delay>
}
 800948a:	bd38      	pop	{r3, r4, r5, pc}
 800948c:	48000c00 	.word	0x48000c00

08009490 <LCD_SetBacklight>:
 * @param state logična vrednost
 */

void LCD_SetBacklight(uint8_t state)
{
	if (state == 1)
 8009490:	2801      	cmp	r0, #1
 8009492:	d003      	beq.n	800949c <LCD_SetBacklight+0xc>
		LCD_BCKL_ON();
	else
		LCD_BCKL_OFF();
 8009494:	4b03      	ldr	r3, [pc, #12]	; (80094a4 <LCD_SetBacklight+0x14>)
 8009496:	2240      	movs	r2, #64	; 0x40
 8009498:	629a      	str	r2, [r3, #40]	; 0x28
}
 800949a:	4770      	bx	lr
		LCD_BCKL_ON();
 800949c:	4b01      	ldr	r3, [pc, #4]	; (80094a4 <LCD_SetBacklight+0x14>)
 800949e:	2240      	movs	r2, #64	; 0x40
 80094a0:	619a      	str	r2, [r3, #24]
 80094a2:	4770      	bx	lr
 80094a4:	48000400 	.word	0x48000400

080094a8 <LCD_FillRect>:
 *
 * Funkcija izbere želeno območje, potem pa tolikokrat pošlje izbrano barvo,
 * kolikor slikovnih točk je potrebnih.
 */
void LCD_FillRect(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint16_t c)
{
 80094a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ac:	4607      	mov	r7, r0
 80094ae:	4688      	mov	r8, r1
 80094b0:	4615      	mov	r5, r2
 80094b2:	461e      	mov	r6, r3
	uint32_t max_count   = ILI9341_GetParam(LCD_AREA);     /* Št. vseh pikslov     */
 80094b4:	2002      	movs	r0, #2
 80094b6:	f000 f967 	bl	8009788 <ILI9341_GetParam>
 80094ba:	4604      	mov	r4, r0
	uint32_t pixel_count = w*h;  /* Dejansko št. pikslov */
 80094bc:	fb06 f305 	mul.w	r3, r6, r5

	if(pixel_count > max_count)
 80094c0:	4298      	cmp	r0, r3
 80094c2:	d300      	bcc.n	80094c6 <LCD_FillRect+0x1e>
	uint32_t pixel_count = w*h;  /* Dejansko št. pikslov */
 80094c4:	461c      	mov	r4, r3
		pixel_count = max_count;

	// Izbor koordinat piksla
	ILI9341_SetDisplayWindow(x, y, w, h);
 80094c6:	4633      	mov	r3, r6
 80094c8:	462a      	mov	r2, r5
 80094ca:	4641      	mov	r1, r8
 80094cc:	4638      	mov	r0, r7
 80094ce:	f000 f87d 	bl	80095cc <ILI9341_SetDisplayWindow>

#ifdef ILI9341_USEDMA
	ILI9341_SendRepeatedDataDMA(c, pixel_count);
 80094d2:	4621      	mov	r1, r4
 80094d4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 80094d8:	f000 f910 	bl	80096fc <ILI9341_SendRepeatedDataDMA>
#else
	ILI9341_SendRepeatedData(c, pixel_count);
#endif

}
 80094dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080094e0 <LCD_ClearScreen>:

/*!
 * @brief Počisti zaslon (prebarvaj s črno barvo)
 */
void LCD_ClearScreen()
{
 80094e0:	b510      	push	{r4, lr}
 80094e2:	b082      	sub	sp, #8
    LCD_FillRect(0, 0, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT), 0);
 80094e4:	2000      	movs	r0, #0
 80094e6:	f000 f94f 	bl	8009788 <ILI9341_GetParam>
 80094ea:	4604      	mov	r4, r0
 80094ec:	2001      	movs	r0, #1
 80094ee:	f000 f94b 	bl	8009788 <ILI9341_GetParam>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2000      	movs	r0, #0
 80094f6:	9000      	str	r0, [sp, #0]
 80094f8:	4622      	mov	r2, r4
 80094fa:	4601      	mov	r1, r0
 80094fc:	f7ff ffd4 	bl	80094a8 <LCD_FillRect>
}
 8009500:	b002      	add	sp, #8
 8009502:	bd10      	pop	{r4, pc}

08009504 <LCD_Init>:
{
 8009504:	b508      	push	{r3, lr}
	LCD_IO_Init();
 8009506:	f7ff ffb5 	bl	8009474 <LCD_IO_Init>
	ILI9341_Init(ILI9341_COLORSPACE_RBG565, ILI9341_MISKO_ROTATE_0);
 800950a:	2103      	movs	r1, #3
 800950c:	2055      	movs	r0, #85	; 0x55
 800950e:	f000 f8ab 	bl	8009668 <ILI9341_Init>
	ILI9341_DisplayOn();
 8009512:	f000 f92d 	bl	8009770 <ILI9341_DisplayOn>
	LCD_ClearScreen();
 8009516:	f7ff ffe3 	bl	80094e0 <LCD_ClearScreen>
	ILI9341_WaitTransfer();
 800951a:	f000 f815 	bl	8009548 <ILI9341_WaitTransfer>
	LCD_SetBacklight(1);
 800951e:	2001      	movs	r0, #1
 8009520:	f7ff ffb6 	bl	8009490 <LCD_SetBacklight>
}
 8009524:	bd08      	pop	{r3, pc}
	...

08009528 <ILI9341_SendData>:
 */
void ILI9341_SendData(LCD_IO_Data_t *data, uint32_t length)
{
	uint8_t increment = LCD_IO_DATA_WRITE_CYCLES;

	for (uint32_t i = 0; i < (length/increment); i += increment)
 8009528:	2300      	movs	r3, #0
 800952a:	e007      	b.n	800953c <ILI9341_SendData+0x14>
		FMC_BANK1_WriteData(data[i]);
 800952c:	f830 c013 	ldrh.w	ip, [r0, r3, lsl #1]
	*(LCD_IO_Data_t *)(FMC_BANK1_MEM) = data;
 8009530:	4a04      	ldr	r2, [pc, #16]	; (8009544 <ILI9341_SendData+0x1c>)
 8009532:	f8a2 c000 	strh.w	ip, [r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009536:	f3bf 8f4f 	dsb	sy
	for (uint32_t i = 0; i < (length/increment); i += increment)
 800953a:	3301      	adds	r3, #1
 800953c:	428b      	cmp	r3, r1
 800953e:	d3f5      	bcc.n	800952c <ILI9341_SendData+0x4>
}
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	60010000 	.word	0x60010000

08009548 <ILI9341_WaitTransfer>:
#endif
}

//! @brief Počakaj na prenos podatka FSMC->Ili9341.
void ILI9341_WaitTransfer()
{
 8009548:	b508      	push	{r3, lr}
#ifdef ILI9341_USEDMA
	while (HAL_DMA_GetState(&hLCDDMA) != HAL_DMA_STATE_READY);
 800954a:	4803      	ldr	r0, [pc, #12]	; (8009558 <ILI9341_WaitTransfer+0x10>)
 800954c:	f7fa fee5 	bl	800431a <HAL_DMA_GetState>
 8009550:	2801      	cmp	r0, #1
 8009552:	d1fa      	bne.n	800954a <ILI9341_WaitTransfer+0x2>
#endif
}
 8009554:	bd08      	pop	{r3, pc}
 8009556:	bf00      	nop
 8009558:	200005d8 	.word	0x200005d8

0800955c <ILI9341_SetAddress>:
{
 800955c:	b510      	push	{r4, lr}
 800955e:	4604      	mov	r4, r0
	ILI9341_WaitTransfer();
 8009560:	f7ff fff2 	bl	8009548 <ILI9341_WaitTransfer>
	FMC_BANK1_SetAddress(*address);
 8009564:	8822      	ldrh	r2, [r4, #0]
	*(LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 8009566:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800956a:	801a      	strh	r2, [r3, #0]
 800956c:	f3bf 8f4f 	dsb	sy
}
 8009570:	bd10      	pop	{r4, pc}
	...

08009574 <ILI9341_SetOrientation>:
{
 8009574:	b510      	push	{r4, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	4604      	mov	r4, r0
	ILI9341_Data_t command   = ILI9341_MAC; /* Memory Access Control */
 800957a:	2336      	movs	r3, #54	; 0x36
 800957c:	f8ad 3006 	strh.w	r3, [sp, #6]
	ILI9341_Data_t parameter = (ILI9341_Data_t)orientations[orientation];
 8009580:	4b10      	ldr	r3, [pc, #64]	; (80095c4 <ILI9341_SetOrientation+0x50>)
 8009582:	f833 3020 	ldrh.w	r3, [r3, r0, lsl #2]
 8009586:	f8ad 3004 	strh.w	r3, [sp, #4]
	ILI9341_SetAddress(&command);
 800958a:	f10d 0006 	add.w	r0, sp, #6
 800958e:	f7ff ffe5 	bl	800955c <ILI9341_SetAddress>
	ILI9341_SendData(&parameter, 1);
 8009592:	2101      	movs	r1, #1
 8009594:	a801      	add	r0, sp, #4
 8009596:	f7ff ffc7 	bl	8009528 <ILI9341_SendData>
	switch (orientation) {
 800959a:	b144      	cbz	r4, 80095ae <ILI9341_SetOrientation+0x3a>
 800959c:	2c03      	cmp	r4, #3
 800959e:	d006      	beq.n	80095ae <ILI9341_SetOrientation+0x3a>
		LCD.width  = ILI9341_WIDTH;
 80095a0:	4b09      	ldr	r3, [pc, #36]	; (80095c8 <ILI9341_SetOrientation+0x54>)
 80095a2:	22f0      	movs	r2, #240	; 0xf0
 80095a4:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_HEIGHT;
 80095a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80095aa:	605a      	str	r2, [r3, #4]
		break;
 80095ac:	e005      	b.n	80095ba <ILI9341_SetOrientation+0x46>
		LCD.width  = ILI9341_HEIGHT;
 80095ae:	4b06      	ldr	r3, [pc, #24]	; (80095c8 <ILI9341_SetOrientation+0x54>)
 80095b0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80095b4:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_WIDTH;
 80095b6:	22f0      	movs	r2, #240	; 0xf0
 80095b8:	605a      	str	r2, [r3, #4]
	LCD.orientation = orientation;
 80095ba:	4b03      	ldr	r3, [pc, #12]	; (80095c8 <ILI9341_SetOrientation+0x54>)
 80095bc:	609c      	str	r4, [r3, #8]
}
 80095be:	b002      	add	sp, #8
 80095c0:	bd10      	pop	{r4, pc}
 80095c2:	bf00      	nop
 80095c4:	0800f5c0 	.word	0x0800f5c0
 80095c8:	20000c78 	.word	0x20000c78

080095cc <ILI9341_SetDisplayWindow>:
{
 80095cc:	b530      	push	{r4, r5, lr}
 80095ce:	b085      	sub	sp, #20
 80095d0:	460c      	mov	r4, r1
 80095d2:	461d      	mov	r5, r3
	command = ILI9341_CASET;
 80095d4:	232a      	movs	r3, #42	; 0x2a
 80095d6:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = (ILI9341_Data_t)(Xpos >> 8U);
 80095da:	f3c0 230f 	ubfx	r3, r0, #8, #16
 80095de:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter[1] = (ILI9341_Data_t)(Xpos & 0xFFU);
 80095e2:	b2c3      	uxtb	r3, r0
 80095e4:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter[2] = (ILI9341_Data_t)((Xpos + Width - 1U) >> 8U);
 80095e8:	1883      	adds	r3, r0, r2
 80095ea:	3b01      	subs	r3, #1
 80095ec:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80095f0:	f8ad 3008 	strh.w	r3, [sp, #8]
	parameter[3] = (ILI9341_Data_t)((Xpos + Width - 1U) & 0xFFU);
 80095f4:	fa12 f080 	uxtah	r0, r2, r0
 80095f8:	b280      	uxth	r0, r0
 80095fa:	3801      	subs	r0, #1
 80095fc:	b2c0      	uxtb	r0, r0
 80095fe:	f8ad 000a 	strh.w	r0, [sp, #10]
	ILI9341_SetAddress(&command);
 8009602:	f10d 000e 	add.w	r0, sp, #14
 8009606:	f7ff ffa9 	bl	800955c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 800960a:	2104      	movs	r1, #4
 800960c:	eb0d 0001 	add.w	r0, sp, r1
 8009610:	f7ff ff8a 	bl	8009528 <ILI9341_SendData>
	command = ILI9341_RASET;
 8009614:	232b      	movs	r3, #43	; 0x2b
 8009616:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter [0] = (ILI9341_Data_t)(Ypos >> 8U);
 800961a:	f3c4 230f 	ubfx	r3, r4, #8, #16
 800961e:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter [1] = (ILI9341_Data_t)(Ypos & 0xFFU);
 8009622:	b2e3      	uxtb	r3, r4
 8009624:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter [2] = (ILI9341_Data_t)((Ypos + Height - 1U) >> 8U);
 8009628:	1962      	adds	r2, r4, r5
 800962a:	3a01      	subs	r2, #1
 800962c:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8009630:	f8ad 2008 	strh.w	r2, [sp, #8]
	parameter [3] = (ILI9341_Data_t)((Ypos + Height - 1U) & 0xFFU);
 8009634:	fa15 f484 	uxtah	r4, r5, r4
 8009638:	b2a4      	uxth	r4, r4
 800963a:	3c01      	subs	r4, #1
 800963c:	b2e4      	uxtb	r4, r4
 800963e:	f8ad 400a 	strh.w	r4, [sp, #10]
	ILI9341_SetAddress(&command);
 8009642:	f10d 000e 	add.w	r0, sp, #14
 8009646:	f7ff ff89 	bl	800955c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 800964a:	2104      	movs	r1, #4
 800964c:	eb0d 0001 	add.w	r0, sp, r1
 8009650:	f7ff ff6a 	bl	8009528 <ILI9341_SendData>
	command = ILI9341_GRAM;
 8009654:	232c      	movs	r3, #44	; 0x2c
 8009656:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 800965a:	f10d 000e 	add.w	r0, sp, #14
 800965e:	f7ff ff7d 	bl	800955c <ILI9341_SetAddress>
}
 8009662:	b005      	add	sp, #20
 8009664:	bd30      	pop	{r4, r5, pc}
	...

08009668 <ILI9341_Init>:
{
 8009668:	b510      	push	{r4, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	4604      	mov	r4, r0
	ILI9341_SetOrientation(orientation);
 800966e:	4608      	mov	r0, r1
 8009670:	f7ff ff80 	bl	8009574 <ILI9341_SetOrientation>
	ILI9341_SetDisplayWindow(0U, 0U, LCD.width, LCD.height);
 8009674:	4a20      	ldr	r2, [pc, #128]	; (80096f8 <ILI9341_Init+0x90>)
 8009676:	6853      	ldr	r3, [r2, #4]
 8009678:	6812      	ldr	r2, [r2, #0]
 800967a:	2100      	movs	r1, #0
 800967c:	4608      	mov	r0, r1
 800967e:	f7ff ffa5 	bl	80095cc <ILI9341_SetDisplayWindow>
	command = ILI9341_SLEEP_OUT;
 8009682:	2311      	movs	r3, #17
 8009684:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 8009688:	f10d 000e 	add.w	r0, sp, #14
 800968c:	f7ff ff66 	bl	800955c <ILI9341_SetAddress>
	HAL_Delay(200);
 8009690:	20c8      	movs	r0, #200	; 0xc8
 8009692:	f7f9 fd53 	bl	800313c <HAL_Delay>
	command = ILI9341_NORMAL_MODE_ON;
 8009696:	2313      	movs	r3, #19
 8009698:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 800969c:	f10d 000e 	add.w	r0, sp, #14
 80096a0:	f7ff ff5c 	bl	800955c <ILI9341_SetAddress>
	HAL_Delay(100);
 80096a4:	2064      	movs	r0, #100	; 0x64
 80096a6:	f7f9 fd49 	bl	800313c <HAL_Delay>
	command = ILI9341_PIXEL_FORMAT;
 80096aa:	233a      	movs	r3, #58	; 0x3a
 80096ac:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = color_space;
 80096b0:	f8ad 4004 	strh.w	r4, [sp, #4]
	ILI9341_SetAddress(&command);
 80096b4:	f10d 000e 	add.w	r0, sp, #14
 80096b8:	f7ff ff50 	bl	800955c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 1);
 80096bc:	2101      	movs	r1, #1
 80096be:	a801      	add	r0, sp, #4
 80096c0:	f7ff ff32 	bl	8009528 <ILI9341_SendData>
	HAL_Delay(100);
 80096c4:	2064      	movs	r0, #100	; 0x64
 80096c6:	f7f9 fd39 	bl	800313c <HAL_Delay>
	command = ILI9341_INTERFACE;
 80096ca:	23f6      	movs	r3, #246	; 0xf6
 80096cc:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = 0x49;
 80096d0:	2349      	movs	r3, #73	; 0x49
 80096d2:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter[1] = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter[2] = 0x20;
 80096dc:	2320      	movs	r3, #32
 80096de:	f8ad 3008 	strh.w	r3, [sp, #8]
	ILI9341_SetAddress(&command);
 80096e2:	f10d 000e 	add.w	r0, sp, #14
 80096e6:	f7ff ff39 	bl	800955c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 3);
 80096ea:	2103      	movs	r1, #3
 80096ec:	a801      	add	r0, sp, #4
 80096ee:	f7ff ff1b 	bl	8009528 <ILI9341_SendData>
}
 80096f2:	b004      	add	sp, #16
 80096f4:	bd10      	pop	{r4, pc}
 80096f6:	bf00      	nop
 80096f8:	20000c78 	.word	0x20000c78

080096fc <ILI9341_SendRepeatedDataDMA>:
{
 80096fc:	b530      	push	{r4, r5, lr}
 80096fe:	b083      	sub	sp, #12
 8009700:	460c      	mov	r4, r1
 8009702:	f8ad 0006 	strh.w	r0, [sp, #6]
	switch (hLCDDMA.Init.PeriphDataAlignment)
 8009706:	4b18      	ldr	r3, [pc, #96]	; (8009768 <ILI9341_SendRepeatedDataDMA+0x6c>)
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	b17b      	cbz	r3, 800972c <ILI9341_SendRepeatedDataDMA+0x30>
 800970c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009710:	d100      	bne.n	8009714 <ILI9341_SendRepeatedDataDMA+0x18>
			len = (num_copies / (2*LCD_IO_DATA_WRITE_CYCLES));
 8009712:	084c      	lsrs	r4, r1, #1
	ILI9341_WaitTransfer();
 8009714:	f7ff ff18 	bl	8009548 <ILI9341_WaitTransfer>
	HAL_DMA_DeInit(&hLCDDMA);
 8009718:	4d13      	ldr	r5, [pc, #76]	; (8009768 <ILI9341_SendRepeatedDataDMA+0x6c>)
 800971a:	4628      	mov	r0, r5
 800971c:	f7fa fcb6 	bl	800408c <HAL_DMA_DeInit>
	hLCDDMA.Init.PeriphInc = DMA_PINC_DISABLE;	// dont increment source address
 8009720:	2300      	movs	r3, #0
 8009722:	60eb      	str	r3, [r5, #12]
	HAL_DMA_Init(&hLCDDMA);
 8009724:	4628      	mov	r0, r5
 8009726:	f7fa fc45 	bl	8003fb4 <HAL_DMA_Init>
 800972a:	e00e      	b.n	800974a <ILI9341_SendRepeatedDataDMA+0x4e>
			len = 2*num_copies/LCD_IO_DATA_WRITE_CYCLES;
 800972c:	004c      	lsls	r4, r1, #1
			break;
 800972e:	e7f1      	b.n	8009714 <ILI9341_SendRepeatedDataDMA+0x18>
			len -= 65535;
 8009730:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
 8009734:	3cff      	subs	r4, #255	; 0xff
			transfer = 65535;
 8009736:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t) &data, (uint32_t)FMC_BANK1_MEM, transfer) != HAL_OK) return 1;
 800973a:	4a0c      	ldr	r2, [pc, #48]	; (800976c <ILI9341_SendRepeatedDataDMA+0x70>)
 800973c:	f10d 0106 	add.w	r1, sp, #6
 8009740:	4809      	ldr	r0, [pc, #36]	; (8009768 <ILI9341_SendRepeatedDataDMA+0x6c>)
 8009742:	f7fa fcff 	bl	8004144 <HAL_DMA_Start_IT>
 8009746:	b960      	cbnz	r0, 8009762 <ILI9341_SendRepeatedDataDMA+0x66>
	while (len);
 8009748:	b134      	cbz	r4, 8009758 <ILI9341_SendRepeatedDataDMA+0x5c>
		ILI9341_WaitTransfer();
 800974a:	f7ff fefd 	bl	8009548 <ILI9341_WaitTransfer>
		if (len > 65535)
 800974e:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8009752:	d2ed      	bcs.n	8009730 <ILI9341_SendRepeatedDataDMA+0x34>
		if (transfer == 0) return 1;
 8009754:	b914      	cbnz	r4, 800975c <ILI9341_SendRepeatedDataDMA+0x60>
 8009756:	2001      	movs	r0, #1
}
 8009758:	b003      	add	sp, #12
 800975a:	bd30      	pop	{r4, r5, pc}
			transfer = len;
 800975c:	4623      	mov	r3, r4
			len = 0;
 800975e:	2400      	movs	r4, #0
 8009760:	e7eb      	b.n	800973a <ILI9341_SendRepeatedDataDMA+0x3e>
		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t) &data, (uint32_t)FMC_BANK1_MEM, transfer) != HAL_OK) return 1;
 8009762:	2001      	movs	r0, #1
 8009764:	e7f8      	b.n	8009758 <ILI9341_SendRepeatedDataDMA+0x5c>
 8009766:	bf00      	nop
 8009768:	200005d8 	.word	0x200005d8
 800976c:	60010000 	.word	0x60010000

08009770 <ILI9341_DisplayOn>:

//! @brief Strojno omogoči zaslon
void ILI9341_DisplayOn()
{
 8009770:	b500      	push	{lr}
 8009772:	b083      	sub	sp, #12
	ILI9341_Data_t command = ILI9341_DISPLAY_ON;
 8009774:	2329      	movs	r3, #41	; 0x29
 8009776:	f8ad 3006 	strh.w	r3, [sp, #6]
	ILI9341_SetAddress(&command);
 800977a:	f10d 0006 	add.w	r0, sp, #6
 800977e:	f7ff feed 	bl	800955c <ILI9341_SetAddress>
}
 8009782:	b003      	add	sp, #12
 8009784:	f85d fb04 	ldr.w	pc, [sp], #4

08009788 <ILI9341_GetParam>:
 */
uint32_t ILI9341_GetParam(LCD_Param_t param)
{
	uint32_t value = 0;

	switch (param) {
 8009788:	2803      	cmp	r0, #3
 800978a:	d803      	bhi.n	8009794 <ILI9341_GetParam+0xc>
 800978c:	e8df f000 	tbb	[pc, r0]
 8009790:	0a0d0704 	.word	0x0a0d0704
 8009794:	2000      	movs	r0, #0
 8009796:	4770      	bx	lr
	case LCD_WIDTH:
		value = LCD.width;
 8009798:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <ILI9341_GetParam+0x28>)
 800979a:	6818      	ldr	r0, [r3, #0]
		break;
 800979c:	4770      	bx	lr
	case LCD_HEIGHT:
		value = LCD.height;
 800979e:	4b04      	ldr	r3, [pc, #16]	; (80097b0 <ILI9341_GetParam+0x28>)
 80097a0:	6858      	ldr	r0, [r3, #4]
		break;
 80097a2:	4770      	bx	lr
	case LCD_AREA:
		value = ILI9341_AREA;
		break;
	case LCD_ORIENTATION:
		value = LCD.orientation;
 80097a4:	4b02      	ldr	r3, [pc, #8]	; (80097b0 <ILI9341_GetParam+0x28>)
 80097a6:	6898      	ldr	r0, [r3, #8]
		break;
 80097a8:	4770      	bx	lr
		value = ILI9341_AREA;
 80097aa:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
	default:
		break;
	}

	return value;
}
 80097ae:	4770      	bx	lr
 80097b0:	20000c78 	.word	0x20000c78

080097b4 <UserPixelSetFunction>:


#include "lcd_ugui.h"

void UserPixelSetFunction(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 80097b4:	b500      	push	{lr}
 80097b6:	b083      	sub	sp, #12
 80097b8:	f8ad 2006 	strh.w	r2, [sp, #6]
	ILI9341_SetDisplayWindow(x, y, 1, 1);
 80097bc:	2301      	movs	r3, #1
 80097be:	461a      	mov	r2, r3
 80097c0:	f7ff ff04 	bl	80095cc <ILI9341_SetDisplayWindow>
	ILI9341_SendData((LCD_IO_Data_t *)&c, 1);
 80097c4:	2101      	movs	r1, #1
 80097c6:	f10d 0006 	add.w	r0, sp, #6
 80097ca:	f7ff fead 	bl	8009528 <ILI9341_SendData>
}
 80097ce:	b003      	add	sp, #12
 80097d0:	f85d fb04 	ldr.w	pc, [sp], #4

080097d4 <_HW_FillFrame_>:

UG_RESULT _HW_FillFrame_(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 80097d4:	b510      	push	{r4, lr}
 80097d6:	b082      	sub	sp, #8
	LCD_FillRect(x1, y1, x2-x1, y2-y1, c);
 80097d8:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 80097dc:	9400      	str	r4, [sp, #0]
 80097de:	1a5b      	subs	r3, r3, r1
 80097e0:	1a12      	subs	r2, r2, r0
 80097e2:	f7ff fe61 	bl	80094a8 <LCD_FillRect>
	return UG_RESULT_OK;
}
 80097e6:	2000      	movs	r0, #0
 80097e8:	b002      	add	sp, #8
 80097ea:	bd10      	pop	{r4, pc}

080097ec <LCD_UG_init>:


UG_GUI gui;

UG_S16 LCD_UG_init(void)
{
 80097ec:	b510      	push	{r4, lr}
	UG_Init(&gui, UserPixelSetFunction, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT));
 80097ee:	2000      	movs	r0, #0
 80097f0:	f7ff ffca 	bl	8009788 <ILI9341_GetParam>
 80097f4:	4604      	mov	r4, r0
 80097f6:	2001      	movs	r0, #1
 80097f8:	f7ff ffc6 	bl	8009788 <ILI9341_GetParam>
 80097fc:	b203      	sxth	r3, r0
 80097fe:	b222      	sxth	r2, r4
 8009800:	490b      	ldr	r1, [pc, #44]	; (8009830 <LCD_UG_init+0x44>)
 8009802:	480c      	ldr	r0, [pc, #48]	; (8009834 <LCD_UG_init+0x48>)
 8009804:	f000 f81c 	bl	8009840 <UG_Init>
	UG_DriverRegister(DRIVER_FILL_FRAME, (void *)_HW_FillFrame_);
 8009808:	490b      	ldr	r1, [pc, #44]	; (8009838 <LCD_UG_init+0x4c>)
 800980a:	2001      	movs	r0, #1
 800980c:	f000 f8b2 	bl	8009974 <UG_DriverRegister>
	UG_DriverEnable(DRIVER_FILL_FRAME);
 8009810:	2001      	movs	r0, #1
 8009812:	f000 f8bd 	bl	8009990 <UG_DriverEnable>

	UG_FontSelect(&FONT_8X12);
 8009816:	4809      	ldr	r0, [pc, #36]	; (800983c <LCD_UG_init+0x50>)
 8009818:	f000 f852 	bl	80098c0 <UG_FontSelect>
	UG_SetForecolor(C_WHITE);
 800981c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009820:	f000 f898 	bl	8009954 <UG_SetForecolor>
	UG_SetBackcolor(C_BLACK);
 8009824:	2000      	movs	r0, #0
 8009826:	f000 f89d 	bl	8009964 <UG_SetBackcolor>
	return 0;
}
 800982a:	2000      	movs	r0, #0
 800982c:	bd10      	pop	{r4, pc}
 800982e:	bf00      	nop
 8009830:	080097b5 	.word	0x080097b5
 8009834:	20000c84 	.word	0x20000c84
 8009838:	080097d5 	.word	0x080097d5
 800983c:	0800f5d0 	.word	0x0800f5d0

08009840 <UG_Init>:

UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 8009840:	6001      	str	r1, [r0, #0]
   g->x_dim = x;
 8009842:	8082      	strh	r2, [r0, #4]
   g->y_dim = y;
 8009844:	80c3      	strh	r3, [r0, #6]
   g->console.x_start = 4;
 8009846:	2104      	movs	r1, #4
 8009848:	8401      	strh	r1, [r0, #32]
   g->console.y_start = 4;
 800984a:	8441      	strh	r1, [r0, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 800984c:	b292      	uxth	r2, r2
 800984e:	3a04      	subs	r2, #4
 8009850:	b292      	uxth	r2, r2
 8009852:	3a01      	subs	r2, #1
 8009854:	b212      	sxth	r2, r2
 8009856:	8482      	strh	r2, [r0, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 8009858:	b29b      	uxth	r3, r3
 800985a:	3b04      	subs	r3, #4
 800985c:	b29b      	uxth	r3, r3
 800985e:	3b01      	subs	r3, #1
 8009860:	b21b      	sxth	r3, r3
 8009862:	84c3      	strh	r3, [r0, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 8009864:	8382      	strh	r2, [r0, #28]
   g->console.y_pos = g->console.y_end;
 8009866:	83c3      	strh	r3, [r0, #30]
   g->char_h_space = 1;
 8009868:	2301      	movs	r3, #1
 800986a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   g->char_v_space = 1;
 800986e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
   g->font.p = NULL;
 8009872:	2300      	movs	r3, #0
 8009874:	62c3      	str	r3, [r0, #44]	; 0x2c
   g->font.char_height = 0;
 8009876:	8683      	strh	r3, [r0, #52]	; 0x34
   g->font.char_width = 0;
 8009878:	8643      	strh	r3, [r0, #50]	; 0x32
   g->font.start_char = 0;
 800987a:	86c3      	strh	r3, [r0, #54]	; 0x36
   g->font.end_char = 0;
 800987c:	8703      	strh	r3, [r0, #56]	; 0x38
   g->font.widths = NULL;
 800987e:	63c3      	str	r3, [r0, #60]	; 0x3c
   #ifdef USE_COLOR_RGB888
   g->desktop_color = 0x5E8BEf;
   #endif
   #ifdef USE_COLOR_RGB565
   g->desktop_color = 0x5C5D;
 8009880:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8009884:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
   #endif
   g->fore_color = C_WHITE;
 8009888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800988c:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
   g->back_color = C_BLACK;
 8009890:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
   g->next_window = NULL;
 8009894:	6103      	str	r3, [r0, #16]
   g->active_window = NULL;
 8009896:	6143      	str	r3, [r0, #20]
   g->last_window = NULL;
 8009898:	6183      	str	r3, [r0, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800989a:	e008      	b.n	80098ae <UG_Init+0x6e>
   {
      g->driver[i].driver = NULL;
 800989c:	f103 0209 	add.w	r2, r3, #9
 80098a0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80098a4:	2100      	movs	r1, #0
 80098a6:	6051      	str	r1, [r2, #4]
      g->driver[i].state = 0;
 80098a8:	7211      	strb	r1, [r2, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80098aa:	3301      	adds	r3, #1
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d9f4      	bls.n	800989c <UG_Init+0x5c>
   }

   gui = g;
 80098b2:	4b02      	ldr	r3, [pc, #8]	; (80098bc <UG_Init+0x7c>)
 80098b4:	6018      	str	r0, [r3, #0]
   return 1;
}
 80098b6:	2001      	movs	r0, #1
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	20000ce8 	.word	0x20000ce8

080098c0 <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 80098c0:	b500      	push	{lr}
   gui->font = *font;
 80098c2:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <UG_FontSelect+0x20>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f103 0c2c 	add.w	ip, r3, #44	; 0x2c
 80098ca:	4686      	mov	lr, r0
 80098cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80098d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80098d4:	f8de 3000 	ldr.w	r3, [lr]
 80098d8:	f8cc 3000 	str.w	r3, [ip]
}
 80098dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80098e0:	20000ce8 	.word	0x20000ce8

080098e4 <UG_FillFrame>:
{
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
}

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80098e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098e8:	b083      	sub	sp, #12
 80098ea:	4606      	mov	r6, r0
 80098ec:	4688      	mov	r8, r1
 80098ee:	4691      	mov	r9, r2
 80098f0:	461d      	mov	r5, r3
 80098f2:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
   UG_S16 n,m;

   if ( x2 < x1 )
 80098f6:	4282      	cmp	r2, r0
 80098f8:	db01      	blt.n	80098fe <UG_FillFrame+0x1a>
 80098fa:	4681      	mov	r9, r0
 80098fc:	4616      	mov	r6, r2
   {
      n = x2;
      x2 = x1;
      x1 = n;
   }
   if ( y2 < y1 )
 80098fe:	4545      	cmp	r5, r8
 8009900:	db02      	blt.n	8009908 <UG_FillFrame+0x24>
 8009902:	462b      	mov	r3, r5
 8009904:	4645      	mov	r5, r8
 8009906:	4698      	mov	r8, r3
      y2 = y1;
      y1 = n;
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8009908:	4b11      	ldr	r3, [pc, #68]	; (8009950 <UG_FillFrame+0x6c>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8009910:	f012 0f02 	tst.w	r2, #2
 8009914:	d017      	beq.n	8009946 <UG_FillFrame+0x62>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8009916:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8009918:	9700      	str	r7, [sp, #0]
 800991a:	4643      	mov	r3, r8
 800991c:	4632      	mov	r2, r6
 800991e:	4629      	mov	r1, r5
 8009920:	4648      	mov	r0, r9
 8009922:	47a0      	blx	r4
 8009924:	b978      	cbnz	r0, 8009946 <UG_FillFrame+0x62>
      for( n=x1; n<=x2; n++ )
      {
         gui->pset(n,m,c);
      }
   }
}
 8009926:	b003      	add	sp, #12
 8009928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
         gui->pset(n,m,c);
 800992c:	4b08      	ldr	r3, [pc, #32]	; (8009950 <UG_FillFrame+0x6c>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	463a      	mov	r2, r7
 8009934:	4629      	mov	r1, r5
 8009936:	4620      	mov	r0, r4
 8009938:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800993a:	3401      	adds	r4, #1
 800993c:	b224      	sxth	r4, r4
 800993e:	42a6      	cmp	r6, r4
 8009940:	daf4      	bge.n	800992c <UG_FillFrame+0x48>
   for( m=y1; m<=y2; m++ )
 8009942:	3501      	adds	r5, #1
 8009944:	b22d      	sxth	r5, r5
 8009946:	45a8      	cmp	r8, r5
 8009948:	dbed      	blt.n	8009926 <UG_FillFrame+0x42>
      for( n=x1; n<=x2; n++ )
 800994a:	464c      	mov	r4, r9
 800994c:	e7f7      	b.n	800993e <UG_FillFrame+0x5a>
 800994e:	bf00      	nop
 8009950:	20000ce8 	.word	0x20000ce8

08009954 <UG_SetForecolor>:
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
   gui->fore_color = c;
 8009954:	4b02      	ldr	r3, [pc, #8]	; (8009960 <UG_SetForecolor+0xc>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
}
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	20000ce8 	.word	0x20000ce8

08009964 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
   gui->back_color = c;
 8009964:	4b02      	ldr	r3, [pc, #8]	; (8009970 <UG_SetBackcolor+0xc>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
}
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	20000ce8 	.word	0x20000ce8

08009974 <UG_DriverRegister>:
/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8009974:	2802      	cmp	r0, #2
 8009976:	d807      	bhi.n	8009988 <UG_DriverRegister+0x14>

   gui->driver[type].driver = driver;
 8009978:	4b04      	ldr	r3, [pc, #16]	; (800998c <UG_DriverRegister+0x18>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3009      	adds	r0, #9
 800997e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8009982:	6041      	str	r1, [r0, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8009984:	2303      	movs	r3, #3
 8009986:	7203      	strb	r3, [r0, #8]
}
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	20000ce8 	.word	0x20000ce8

08009990 <UG_DriverEnable>:

void UG_DriverEnable( UG_U8 type )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8009990:	2802      	cmp	r0, #2
 8009992:	d80f      	bhi.n	80099b4 <UG_DriverEnable+0x24>
   if ( gui->driver[type].state & DRIVER_REGISTERED )
 8009994:	4b08      	ldr	r3, [pc, #32]	; (80099b8 <UG_DriverEnable+0x28>)
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	f100 0309 	add.w	r3, r0, #9
 800999c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80099a0:	7a1b      	ldrb	r3, [r3, #8]
 80099a2:	f013 0f01 	tst.w	r3, #1
 80099a6:	d005      	beq.n	80099b4 <UG_DriverEnable+0x24>
   {
      gui->driver[type].state |= DRIVER_ENABLED;
 80099a8:	3009      	adds	r0, #9
 80099aa:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80099ae:	f043 0302 	orr.w	r3, r3, #2
 80099b2:	7203      	strb	r3, [r0, #8]
   }
}
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	20000ce8 	.word	0x20000ce8

080099bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80099bc:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80099be:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 80099c2:	b184      	cbz	r4, 80099e6 <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80099c4:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80099c8:	b17b      	cbz	r3, 80099ea <USBD_CDC_EP0_RxReady+0x2e>
 80099ca:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80099ce:	28ff      	cmp	r0, #255	; 0xff
 80099d0:	d00d      	beq.n	80099ee <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80099d8:	4621      	mov	r1, r4
 80099da:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80099dc:	23ff      	movs	r3, #255	; 0xff
 80099de:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80099e2:	2000      	movs	r0, #0
}
 80099e4:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80099e6:	2003      	movs	r0, #3
 80099e8:	e7fc      	b.n	80099e4 <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 80099ea:	2000      	movs	r0, #0
 80099ec:	e7fa      	b.n	80099e4 <USBD_CDC_EP0_RxReady+0x28>
 80099ee:	2000      	movs	r0, #0
 80099f0:	e7f8      	b.n	80099e4 <USBD_CDC_EP0_RxReady+0x28>
	...

080099f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80099f4:	2343      	movs	r3, #67	; 0x43
 80099f6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 80099f8:	4800      	ldr	r0, [pc, #0]	; (80099fc <USBD_CDC_GetFSCfgDesc+0x8>)
 80099fa:	4770      	bx	lr
 80099fc:	20000044 	.word	0x20000044

08009a00 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009a00:	2343      	movs	r3, #67	; 0x43
 8009a02:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8009a04:	4800      	ldr	r0, [pc, #0]	; (8009a08 <USBD_CDC_GetHSCfgDesc+0x8>)
 8009a06:	4770      	bx	lr
 8009a08:	20000088 	.word	0x20000088

08009a0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009a0c:	2343      	movs	r3, #67	; 0x43
 8009a0e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8009a10:	4800      	ldr	r0, [pc, #0]	; (8009a14 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8009a12:	4770      	bx	lr
 8009a14:	200000d8 	.word	0x200000d8

08009a18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009a18:	230a      	movs	r3, #10
 8009a1a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8009a1c:	4800      	ldr	r0, [pc, #0]	; (8009a20 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8009a1e:	4770      	bx	lr
 8009a20:	200000cc 	.word	0x200000cc

08009a24 <USBD_CDC_DataOut>:
{
 8009a24:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a26:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8009a2a:	b175      	cbz	r5, 8009a4a <USBD_CDC_DataOut+0x26>
 8009a2c:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009a2e:	f001 f8a3 	bl	800ab78 <USBD_LL_GetRxDataSize>
 8009a32:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009a36:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8009a40:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8009a44:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8009a46:	2000      	movs	r0, #0
}
 8009a48:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8009a4a:	2003      	movs	r0, #3
 8009a4c:	e7fc      	b.n	8009a48 <USBD_CDC_DataOut+0x24>

08009a4e <USBD_CDC_DataIn>:
{
 8009a4e:	b510      	push	{r4, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009a50:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 8009a54:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8009a58:	b353      	cbz	r3, 8009ab0 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009a5a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8009a5e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009a62:	6992      	ldr	r2, [r2, #24]
 8009a64:	b14a      	cbz	r2, 8009a7a <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009a66:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8009a6a:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 8009a6e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009a70:	fbb2 fcf4 	udiv	ip, r2, r4
 8009a74:	fb04 221c 	mls	r2, r4, ip, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009a78:	b172      	cbz	r2, 8009a98 <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009a80:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8009a84:	6914      	ldr	r4, [r2, #16]
 8009a86:	b1ac      	cbz	r4, 8009ab4 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009a88:	460a      	mov	r2, r1
 8009a8a:	f503 7104 	add.w	r1, r3, #528	; 0x210
 8009a8e:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8009a92:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 8009a94:	2000      	movs	r0, #0
}
 8009a96:	bd10      	pop	{r4, pc}
    pdev->ep_in[epnum].total_length = 0U;
 8009a98:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8009a9c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009aa0:	2400      	movs	r4, #0
 8009aa2:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009aa4:	4623      	mov	r3, r4
 8009aa6:	4622      	mov	r2, r4
 8009aa8:	f001 f856 	bl	800ab58 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8009aac:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009aae:	e7f2      	b.n	8009a96 <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 8009ab0:	2003      	movs	r0, #3
 8009ab2:	e7f0      	b.n	8009a96 <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	e7ee      	b.n	8009a96 <USBD_CDC_DataIn+0x48>

08009ab8 <USBD_CDC_Setup>:
{
 8009ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aba:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009abc:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8009ac6:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 8009aca:	2e00      	cmp	r6, #0
 8009acc:	d06c      	beq.n	8009ba8 <USBD_CDC_Setup+0xf0>
 8009ace:	4607      	mov	r7, r0
 8009ad0:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ad2:	780b      	ldrb	r3, [r1, #0]
 8009ad4:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8009ad8:	d02a      	beq.n	8009b30 <USBD_CDC_Setup+0x78>
 8009ada:	2d20      	cmp	r5, #32
 8009adc:	d15e      	bne.n	8009b9c <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 8009ade:	88ca      	ldrh	r2, [r1, #6]
 8009ae0:	b1f2      	cbz	r2, 8009b20 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 8009ae2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009ae6:	d00f      	beq.n	8009b08 <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ae8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	4631      	mov	r1, r6
 8009af0:	7860      	ldrb	r0, [r4, #1]
 8009af2:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009af4:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009af6:	2a07      	cmp	r2, #7
 8009af8:	bf28      	it	cs
 8009afa:	2207      	movcs	r2, #7
 8009afc:	4631      	mov	r1, r6
 8009afe:	4638      	mov	r0, r7
 8009b00:	f000 fdd4 	bl	800a6ac <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8009b04:	2500      	movs	r5, #0
 8009b06:	e04c      	b.n	8009ba2 <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 8009b08:	784b      	ldrb	r3, [r1, #1]
 8009b0a:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009b0e:	798b      	ldrb	r3, [r1, #6]
 8009b10:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009b14:	88ca      	ldrh	r2, [r1, #6]
 8009b16:	4631      	mov	r1, r6
 8009b18:	f000 fddd 	bl	800a6d6 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8009b1c:	2500      	movs	r5, #0
 8009b1e:	e040      	b.n	8009ba2 <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b20:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	2200      	movs	r2, #0
 8009b28:	7848      	ldrb	r0, [r1, #1]
 8009b2a:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8009b2c:	2500      	movs	r5, #0
 8009b2e:	e038      	b.n	8009ba2 <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 8009b30:	784e      	ldrb	r6, [r1, #1]
 8009b32:	2e0b      	cmp	r6, #11
 8009b34:	d82e      	bhi.n	8009b94 <USBD_CDC_Setup+0xdc>
 8009b36:	e8df f006 	tbb	[pc, r6]
 8009b3a:	3406      	.short	0x3406
 8009b3c:	2d2d2d2d 	.word	0x2d2d2d2d
 8009b40:	2d2d2d2d 	.word	0x2d2d2d2d
 8009b44:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b46:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	2b03      	cmp	r3, #3
 8009b4e:	d003      	beq.n	8009b58 <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 8009b50:	f000 fa72 	bl	800a038 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b54:	2503      	movs	r5, #3
 8009b56:	e024      	b.n	8009ba2 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009b58:	2202      	movs	r2, #2
 8009b5a:	a901      	add	r1, sp, #4
 8009b5c:	f000 fda6 	bl	800a6ac <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8009b60:	4635      	mov	r5, r6
 8009b62:	e01e      	b.n	8009ba2 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b64:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d003      	beq.n	8009b76 <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 8009b6e:	f000 fa63 	bl	800a038 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b72:	2503      	movs	r5, #3
 8009b74:	e015      	b.n	8009ba2 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009b76:	2201      	movs	r2, #1
 8009b78:	f10d 0107 	add.w	r1, sp, #7
 8009b7c:	f000 fd96 	bl	800a6ac <USBD_CtlSendData>
 8009b80:	e00f      	b.n	8009ba2 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009b82:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	2b03      	cmp	r3, #3
 8009b8a:	d00a      	beq.n	8009ba2 <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 8009b8c:	f000 fa54 	bl	800a038 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b90:	2503      	movs	r5, #3
 8009b92:	e006      	b.n	8009ba2 <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 8009b94:	f000 fa50 	bl	800a038 <USBD_CtlError>
          ret = USBD_FAIL;
 8009b98:	2503      	movs	r5, #3
          break;
 8009b9a:	e002      	b.n	8009ba2 <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 8009b9c:	f000 fa4c 	bl	800a038 <USBD_CtlError>
      ret = USBD_FAIL;
 8009ba0:	2503      	movs	r5, #3
}
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	b003      	add	sp, #12
 8009ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8009ba8:	2503      	movs	r5, #3
 8009baa:	e7fa      	b.n	8009ba2 <USBD_CDC_Setup+0xea>

08009bac <USBD_CDC_DeInit>:
{
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009bb0:	2181      	movs	r1, #129	; 0x81
 8009bb2:	f000 ff9a 	bl	800aaea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009bb6:	2500      	movs	r5, #0
 8009bb8:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009bba:	2101      	movs	r1, #1
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	f000 ff94 	bl	800aaea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009bc2:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009bc6:	2182      	movs	r1, #130	; 0x82
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f000 ff8e 	bl	800aaea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009bce:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009bd2:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 8009bd6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8009bda:	b14b      	cbz	r3, 8009bf0 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009bdc:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009be4:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8009be8:	f000 fff4 	bl	800abd4 <USBD_static_free>
    pdev->pClassData = NULL;
 8009bec:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8009bf0:	2000      	movs	r0, #0
 8009bf2:	bd38      	pop	{r3, r4, r5, pc}

08009bf4 <USBD_CDC_Init>:
{
 8009bf4:	b570      	push	{r4, r5, r6, lr}
 8009bf6:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009bf8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009bfc:	f000 ffe6 	bl	800abcc <USBD_static_malloc>
  if (hcdc == NULL)
 8009c00:	b3b8      	cbz	r0, 8009c72 <USBD_CDC_Init+0x7e>
 8009c02:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 8009c04:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c08:	7c23      	ldrb	r3, [r4, #16]
 8009c0a:	bbbb      	cbnz	r3, 8009c7c <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c10:	2202      	movs	r2, #2
 8009c12:	2181      	movs	r1, #129	; 0x81
 8009c14:	4620      	mov	r0, r4
 8009c16:	f000 ff5d 	bl	800aad4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c1a:	2501      	movs	r5, #1
 8009c1c:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c22:	2202      	movs	r2, #2
 8009c24:	4629      	mov	r1, r5
 8009c26:	4620      	mov	r0, r4
 8009c28:	f000 ff54 	bl	800aad4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c2c:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c30:	2310      	movs	r3, #16
 8009c32:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c36:	2308      	movs	r3, #8
 8009c38:	2203      	movs	r2, #3
 8009c3a:	2182      	movs	r1, #130	; 0x82
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f000 ff49 	bl	800aad4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009c42:	2301      	movs	r3, #1
 8009c44:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009c48:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4798      	blx	r3
  hcdc->TxState = 0U;
 8009c50:	2300      	movs	r3, #0
 8009c52:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 8009c56:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c5a:	7c25      	ldrb	r5, [r4, #16]
 8009c5c:	bb15      	cbnz	r5, 8009ca4 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c62:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8009c66:	2101      	movs	r1, #1
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f000 ff7d 	bl	800ab68 <USBD_LL_PrepareReceive>
}
 8009c6e:	4628      	mov	r0, r5
 8009c70:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 8009c72:	2300      	movs	r3, #0
 8009c74:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009c78:	2502      	movs	r5, #2
 8009c7a:	e7f8      	b.n	8009c6e <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c7c:	2340      	movs	r3, #64	; 0x40
 8009c7e:	2202      	movs	r2, #2
 8009c80:	2181      	movs	r1, #129	; 0x81
 8009c82:	4620      	mov	r0, r4
 8009c84:	f000 ff26 	bl	800aad4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c88:	2501      	movs	r5, #1
 8009c8a:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c8c:	2340      	movs	r3, #64	; 0x40
 8009c8e:	2202      	movs	r2, #2
 8009c90:	4629      	mov	r1, r5
 8009c92:	4620      	mov	r0, r4
 8009c94:	f000 ff1e 	bl	800aad4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c98:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c9c:	2310      	movs	r3, #16
 8009c9e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8009ca2:	e7c8      	b.n	8009c36 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ca4:	2340      	movs	r3, #64	; 0x40
 8009ca6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8009caa:	2101      	movs	r1, #1
 8009cac:	4620      	mov	r0, r4
 8009cae:	f000 ff5b 	bl	800ab68 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8009cb2:	2500      	movs	r5, #0
 8009cb4:	e7db      	b.n	8009c6e <USBD_CDC_Init+0x7a>

08009cb6 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8009cb6:	b119      	cbz	r1, 8009cc0 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8009cb8:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8009cc0:	2003      	movs	r0, #3
}
 8009cc2:	4770      	bx	lr

08009cc4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009cc4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8009cc8:	b12b      	cbz	r3, 8009cd6 <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8009cca:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009cce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8009cd6:	2003      	movs	r0, #3
}
 8009cd8:	4770      	bx	lr

08009cda <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009cda:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8009cde:	b11b      	cbz	r3, 8009ce8 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8009ce0:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8009ce8:	2003      	movs	r0, #3
}
 8009cea:	4770      	bx	lr

08009cec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009cec:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009cee:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8009cf2:	b192      	cbz	r2, 8009d1a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cf4:	7c04      	ldrb	r4, [r0, #16]
 8009cf6:	b944      	cbnz	r4, 8009d0a <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cfc:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8009d00:	2101      	movs	r1, #1
 8009d02:	f000 ff31 	bl	800ab68 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8009d06:	4620      	mov	r0, r4
 8009d08:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d0a:	2340      	movs	r3, #64	; 0x40
 8009d0c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8009d10:	2101      	movs	r1, #1
 8009d12:	f000 ff29 	bl	800ab68 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8009d16:	2400      	movs	r4, #0
 8009d18:	e7f5      	b.n	8009d06 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8009d1a:	2403      	movs	r4, #3
 8009d1c:	e7f3      	b.n	8009d06 <USBD_CDC_ReceivePacket+0x1a>

08009d1e <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d1e:	b198      	cbz	r0, 8009d48 <USBD_Init+0x2a>
{
 8009d20:	b508      	push	{r3, lr}
 8009d22:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009d24:	2000      	movs	r0, #0
 8009d26:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009d2a:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009d2e:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d32:	b109      	cbz	r1, 8009d38 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8009d34:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d38:	2101      	movs	r1, #1
 8009d3a:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8009d3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009d40:	4618      	mov	r0, r3
 8009d42:	f000 fe7b 	bl	800aa3c <USBD_LL_Init>

  return ret;
}
 8009d46:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8009d48:	2003      	movs	r0, #3
}
 8009d4a:	4770      	bx	lr

08009d4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d4c:	b510      	push	{r4, lr}
 8009d4e:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8009d50:	2300      	movs	r3, #0
 8009d52:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8009d56:	b161      	cbz	r1, 8009d72 <USBD_RegisterClass+0x26>
 8009d58:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009d5a:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009d5e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8009d60:	b14b      	cbz	r3, 8009d76 <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009d62:	f10d 0006 	add.w	r0, sp, #6
 8009d66:	4798      	blx	r3
 8009d68:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009d6c:	2000      	movs	r0, #0
}
 8009d6e:	b002      	add	sp, #8
 8009d70:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8009d72:	2003      	movs	r0, #3
 8009d74:	e7fb      	b.n	8009d6e <USBD_RegisterClass+0x22>
  return USBD_OK;
 8009d76:	2000      	movs	r0, #0
 8009d78:	e7f9      	b.n	8009d6e <USBD_RegisterClass+0x22>

08009d7a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d7a:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009d7c:	f000 fea2 	bl	800aac4 <USBD_LL_Start>
}
 8009d80:	bd08      	pop	{r3, pc}

08009d82 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d82:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8009d84:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8009d88:	b113      	cbz	r3, 8009d90 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4798      	blx	r3
  }

  return ret;
}
 8009d8e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009d90:	2003      	movs	r0, #3
 8009d92:	e7fc      	b.n	8009d8e <USBD_SetClassConfig+0xc>

08009d94 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d94:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009d96:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8009d9a:	b10b      	cbz	r3, 8009da0 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	4798      	blx	r3
  }

  return USBD_OK;
}
 8009da0:	2000      	movs	r0, #0
 8009da2:	bd08      	pop	{r3, pc}

08009da4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009da8:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8009dac:	4628      	mov	r0, r5
 8009dae:	f000 f92f 	bl	800a010 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009db2:	2301      	movs	r3, #1
 8009db4:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009db8:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8009dbc:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009dc0:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 8009dc4:	f001 031f 	and.w	r3, r1, #31
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d00d      	beq.n	8009de8 <USBD_LL_SetupStage+0x44>
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	d010      	beq.n	8009df2 <USBD_LL_SetupStage+0x4e>
 8009dd0:	b12b      	cbz	r3, 8009dde <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009dd2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f000 fe8f 	bl	800aafa <USBD_LL_StallEP>
      break;
 8009ddc:	e003      	b.n	8009de6 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009dde:	4629      	mov	r1, r5
 8009de0:	4620      	mov	r0, r4
 8009de2:	f000 fae4 	bl	800a3ae <USBD_StdDevReq>
  }

  return ret;
}
 8009de6:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009de8:	4629      	mov	r1, r5
 8009dea:	4620      	mov	r0, r4
 8009dec:	f000 fb17 	bl	800a41e <USBD_StdItfReq>
      break;
 8009df0:	e7f9      	b.n	8009de6 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009df2:	4629      	mov	r1, r5
 8009df4:	4620      	mov	r0, r4
 8009df6:	f000 fb46 	bl	800a486 <USBD_StdEPReq>
      break;
 8009dfa:	e7f4      	b.n	8009de6 <USBD_LL_SetupStage+0x42>

08009dfc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009e00:	460d      	mov	r5, r1
 8009e02:	bb41      	cbnz	r1, 8009e56 <USBD_LL_DataOutStage+0x5a>
 8009e04:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009e06:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8009e0a:	2a03      	cmp	r2, #3
 8009e0c:	d001      	beq.n	8009e12 <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 8009e0e:	4608      	mov	r0, r1
}
 8009e10:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8009e12:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8009e16:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8009e1a:	4291      	cmp	r1, r2
 8009e1c:	d809      	bhi.n	8009e32 <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e1e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	2b03      	cmp	r3, #3
 8009e26:	d00f      	beq.n	8009e48 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f000 fc6b 	bl	800a704 <USBD_CtlSendStatus>
  return USBD_OK;
 8009e2e:	4628      	mov	r0, r5
 8009e30:	e7ee      	b.n	8009e10 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8009e32:	1a89      	subs	r1, r1, r2
 8009e34:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009e38:	428a      	cmp	r2, r1
 8009e3a:	bf28      	it	cs
 8009e3c:	460a      	movcs	r2, r1
 8009e3e:	4619      	mov	r1, r3
 8009e40:	f000 fc58 	bl	800a6f4 <USBD_CtlContinueRx>
  return USBD_OK;
 8009e44:	4628      	mov	r0, r5
 8009e46:	e7e3      	b.n	8009e10 <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 8009e48:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d0ea      	beq.n	8009e28 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 8009e52:	4798      	blx	r3
 8009e54:	e7e8      	b.n	8009e28 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e56:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	2b03      	cmp	r3, #3
 8009e5e:	d001      	beq.n	8009e64 <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 8009e60:	2000      	movs	r0, #0
 8009e62:	e7d5      	b.n	8009e10 <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 8009e64:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	b10b      	cbz	r3, 8009e70 <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009e6c:	4798      	blx	r3
        if (ret != USBD_OK)
 8009e6e:	e7cf      	b.n	8009e10 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 8009e70:	2000      	movs	r0, #0
 8009e72:	e7cd      	b.n	8009e10 <USBD_LL_DataOutStage+0x14>

08009e74 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009e74:	b538      	push	{r3, r4, r5, lr}
 8009e76:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009e78:	460d      	mov	r5, r1
 8009e7a:	2900      	cmp	r1, #0
 8009e7c:	d14a      	bne.n	8009f14 <USBD_LL_DataInStage+0xa0>
 8009e7e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e80:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8009e84:	2a02      	cmp	r2, #2
 8009e86:	d005      	beq.n	8009e94 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009e88:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d03c      	beq.n	8009f0a <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 8009e90:	4628      	mov	r0, r5
}
 8009e92:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8009e94:	69c2      	ldr	r2, [r0, #28]
 8009e96:	6a01      	ldr	r1, [r0, #32]
 8009e98:	428a      	cmp	r2, r1
 8009e9a:	d80e      	bhi.n	8009eba <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 8009e9c:	428a      	cmp	r2, r1
 8009e9e:	d018      	beq.n	8009ed2 <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	2b03      	cmp	r3, #3
 8009ea8:	d027      	beq.n	8009efa <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009eaa:	2180      	movs	r1, #128	; 0x80
 8009eac:	4620      	mov	r0, r4
 8009eae:	f000 fe24 	bl	800aafa <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f000 fc31 	bl	800a71a <USBD_CtlReceiveStatus>
 8009eb8:	e7e6      	b.n	8009e88 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8009eba:	1a52      	subs	r2, r2, r1
 8009ebc:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	f000 fc01 	bl	800a6c6 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	4619      	mov	r1, r3
 8009eca:	4620      	mov	r0, r4
 8009ecc:	f000 fe4c 	bl	800ab68 <USBD_LL_PrepareReceive>
 8009ed0:	e7da      	b.n	8009e88 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8009ed2:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8009ed4:	4299      	cmp	r1, r3
 8009ed6:	d8e3      	bhi.n	8009ea0 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 8009ed8:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d2df      	bcs.n	8009ea0 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	f000 fbef 	bl	800a6c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009ee8:	2100      	movs	r1, #0
 8009eea:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009eee:	460b      	mov	r3, r1
 8009ef0:	460a      	mov	r2, r1
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f000 fe38 	bl	800ab68 <USBD_LL_PrepareReceive>
 8009ef8:	e7c6      	b.n	8009e88 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 8009efa:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d0d2      	beq.n	8009eaa <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 8009f04:	4620      	mov	r0, r4
 8009f06:	4798      	blx	r3
 8009f08:	e7cf      	b.n	8009eaa <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8009f10:	4628      	mov	r0, r5
 8009f12:	e7be      	b.n	8009e92 <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f14:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b03      	cmp	r3, #3
 8009f1c:	d001      	beq.n	8009f22 <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 8009f1e:	2000      	movs	r0, #0
 8009f20:	e7b7      	b.n	8009e92 <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 8009f22:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8009f26:	695b      	ldr	r3, [r3, #20]
 8009f28:	b10b      	cbz	r3, 8009f2e <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009f2a:	4798      	blx	r3
        if (ret != USBD_OK)
 8009f2c:	e7b1      	b.n	8009e92 <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 8009f2e:	2000      	movs	r0, #0
 8009f30:	e7af      	b.n	8009e92 <USBD_LL_DataInStage+0x1e>

08009f32 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f32:	2301      	movs	r3, #1
 8009f34:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8009f3e:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8009f40:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009f44:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8009f48:	b1f3      	cbz	r3, 8009f88 <USBD_LL_Reset+0x56>
{
 8009f4a:	b570      	push	{r4, r5, r6, lr}
 8009f4c:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 8009f4e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8009f52:	b11a      	cbz	r2, 8009f5c <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	b10b      	cbz	r3, 8009f5c <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009f58:	2100      	movs	r1, #0
 8009f5a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f5c:	2340      	movs	r3, #64	; 0x40
 8009f5e:	2200      	movs	r2, #0
 8009f60:	4611      	mov	r1, r2
 8009f62:	4620      	mov	r0, r4
 8009f64:	f000 fdb6 	bl	800aad4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009f68:	2601      	movs	r6, #1
 8009f6a:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f6e:	2540      	movs	r5, #64	; 0x40
 8009f70:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f74:	462b      	mov	r3, r5
 8009f76:	2200      	movs	r2, #0
 8009f78:	2180      	movs	r1, #128	; 0x80
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f000 fdaa 	bl	800aad4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009f80:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f82:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 8009f84:	2000      	movs	r0, #0
}
 8009f86:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8009f88:	2003      	movs	r0, #3
}
 8009f8a:	4770      	bx	lr

08009f8c <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8009f8c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8009f8e:	2000      	movs	r0, #0
 8009f90:	4770      	bx	lr

08009f92 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8009f92:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009f9c:	2304      	movs	r3, #4
 8009f9e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	4770      	bx	lr

08009fa6 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009fa6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	2b04      	cmp	r3, #4
 8009fae:	d001      	beq.n	8009fb4 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8009fb4:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8009fbe:	e7f7      	b.n	8009fb0 <USBD_LL_Resume+0xa>

08009fc0 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8009fc0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8009fc4:	b162      	cbz	r2, 8009fe0 <USBD_LL_SOF+0x20>
{
 8009fc6:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fc8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d001      	beq.n	8009fd6 <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 8009fd2:	2000      	movs	r0, #0
}
 8009fd4:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8009fd6:	69d3      	ldr	r3, [r2, #28]
 8009fd8:	b123      	cbz	r3, 8009fe4 <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 8009fda:	4798      	blx	r3
  return USBD_OK;
 8009fdc:	2000      	movs	r0, #0
 8009fde:	e7f9      	b.n	8009fd4 <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 8009fe0:	2003      	movs	r0, #3
}
 8009fe2:	4770      	bx	lr
  return USBD_OK;
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	e7f5      	b.n	8009fd4 <USBD_LL_SOF+0x14>

08009fe8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009fe8:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8009fea:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8009fec:	e002      	b.n	8009ff4 <USBD_GetLen+0xc>
  {
    len++;
 8009fee:	3001      	adds	r0, #1
 8009ff0:	b2c0      	uxtb	r0, r0
    pbuff++;
 8009ff2:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8009ff4:	781a      	ldrb	r2, [r3, #0]
 8009ff6:	2a00      	cmp	r2, #0
 8009ff8:	d1f9      	bne.n	8009fee <USBD_GetLen+0x6>
  }

  return len;
}
 8009ffa:	4770      	bx	lr

08009ffc <USBD_SetFeature>:
{
 8009ffc:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ffe:	884b      	ldrh	r3, [r1, #2]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d000      	beq.n	800a006 <USBD_SetFeature+0xa>
}
 800a004:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800a006:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a00a:	f000 fb7b 	bl	800a704 <USBD_CtlSendStatus>
}
 800a00e:	e7f9      	b.n	800a004 <USBD_SetFeature+0x8>

0800a010 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800a010:	780b      	ldrb	r3, [r1, #0]
 800a012:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800a014:	784b      	ldrb	r3, [r1, #1]
 800a016:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800a018:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800a01a:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a01c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800a020:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800a022:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800a024:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a026:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800a02a:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800a02c:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800a02e:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a030:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800a034:	80c3      	strh	r3, [r0, #6]
}
 800a036:	4770      	bx	lr

0800a038 <USBD_CtlError>:
{
 800a038:	b510      	push	{r4, lr}
 800a03a:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a03c:	2180      	movs	r1, #128	; 0x80
 800a03e:	f000 fd5c 	bl	800aafa <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a042:	2100      	movs	r1, #0
 800a044:	4620      	mov	r0, r4
 800a046:	f000 fd58 	bl	800aafa <USBD_LL_StallEP>
}
 800a04a:	bd10      	pop	{r4, pc}

0800a04c <USBD_GetDescriptor>:
{
 800a04c:	b530      	push	{r4, r5, lr}
 800a04e:	b083      	sub	sp, #12
 800a050:	4604      	mov	r4, r0
 800a052:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800a054:	2300      	movs	r3, #0
 800a056:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800a05a:	884a      	ldrh	r2, [r1, #2]
 800a05c:	0a13      	lsrs	r3, r2, #8
 800a05e:	3b01      	subs	r3, #1
 800a060:	2b0e      	cmp	r3, #14
 800a062:	f200 80bc 	bhi.w	800a1de <USBD_GetDescriptor+0x192>
 800a066:	e8df f003 	tbb	[pc, r3]
 800a06a:	3015      	.short	0x3015
 800a06c:	9ebaba44 	.word	0x9ebaba44
 800a070:	bababaab 	.word	0xbababaab
 800a074:	babababa 	.word	0xbabababa
 800a078:	08          	.byte	0x08
 800a079:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a07a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a07e:	69db      	ldr	r3, [r3, #28]
 800a080:	b123      	cbz	r3, 800a08c <USBD_GetDescriptor+0x40>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a082:	f10d 0106 	add.w	r1, sp, #6
 800a086:	7c00      	ldrb	r0, [r0, #16]
 800a088:	4798      	blx	r3
  if (err != 0U)
 800a08a:	e00a      	b.n	800a0a2 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800a08c:	4629      	mov	r1, r5
 800a08e:	f7ff ffd3 	bl	800a038 <USBD_CtlError>
  if (err != 0U)
 800a092:	e018      	b.n	800a0c6 <USBD_GetDescriptor+0x7a>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a094:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f10d 0106 	add.w	r1, sp, #6
 800a09e:	7c00      	ldrb	r0, [r0, #16]
 800a0a0:	4798      	blx	r3
  if (req->wLength != 0U)
 800a0a2:	88ea      	ldrh	r2, [r5, #6]
 800a0a4:	2a00      	cmp	r2, #0
 800a0a6:	f000 80a3 	beq.w	800a1f0 <USBD_GetDescriptor+0x1a4>
    if (len != 0U)
 800a0aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 8099 	beq.w	800a1e6 <USBD_GetDescriptor+0x19a>
      len = MIN(len, req->wLength);
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	bf28      	it	cs
 800a0b8:	461a      	movcs	r2, r3
 800a0ba:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0be:	4601      	mov	r1, r0
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f000 faf3 	bl	800a6ac <USBD_CtlSendData>
}
 800a0c6:	b003      	add	sp, #12
 800a0c8:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0ca:	7c03      	ldrb	r3, [r0, #16]
 800a0cc:	b943      	cbnz	r3, 800a0e0 <USBD_GetDescriptor+0x94>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a0ce:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d4:	f10d 0006 	add.w	r0, sp, #6
 800a0d8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0da:	2302      	movs	r3, #2
 800a0dc:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a0de:	e7e0      	b.n	800a0a2 <USBD_GetDescriptor+0x56>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a0e0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e6:	f10d 0006 	add.w	r0, sp, #6
 800a0ea:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0ec:	2302      	movs	r3, #2
 800a0ee:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a0f0:	e7d7      	b.n	800a0a2 <USBD_GetDescriptor+0x56>
      switch ((uint8_t)(req->wValue))
 800a0f2:	b2d2      	uxtb	r2, r2
 800a0f4:	2a05      	cmp	r2, #5
 800a0f6:	d852      	bhi.n	800a19e <USBD_GetDescriptor+0x152>
 800a0f8:	e8df f002 	tbb	[pc, r2]
 800a0fc:	2a1d1003 	.word	0x2a1d1003
 800a100:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a102:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	b123      	cbz	r3, 800a114 <USBD_GetDescriptor+0xc8>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a10a:	f10d 0106 	add.w	r1, sp, #6
 800a10e:	7c00      	ldrb	r0, [r0, #16]
 800a110:	4798      	blx	r3
  if (err != 0U)
 800a112:	e7c6      	b.n	800a0a2 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a114:	4629      	mov	r1, r5
 800a116:	f7ff ff8f 	bl	800a038 <USBD_CtlError>
  if (err != 0U)
 800a11a:	e7d4      	b.n	800a0c6 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a11c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	b123      	cbz	r3, 800a12e <USBD_GetDescriptor+0xe2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a124:	f10d 0106 	add.w	r1, sp, #6
 800a128:	7c00      	ldrb	r0, [r0, #16]
 800a12a:	4798      	blx	r3
  if (err != 0U)
 800a12c:	e7b9      	b.n	800a0a2 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a12e:	4629      	mov	r1, r5
 800a130:	f7ff ff82 	bl	800a038 <USBD_CtlError>
  if (err != 0U)
 800a134:	e7c7      	b.n	800a0c6 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a136:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	b123      	cbz	r3, 800a148 <USBD_GetDescriptor+0xfc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a13e:	f10d 0106 	add.w	r1, sp, #6
 800a142:	7c00      	ldrb	r0, [r0, #16]
 800a144:	4798      	blx	r3
  if (err != 0U)
 800a146:	e7ac      	b.n	800a0a2 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a148:	4629      	mov	r1, r5
 800a14a:	f7ff ff75 	bl	800a038 <USBD_CtlError>
  if (err != 0U)
 800a14e:	e7ba      	b.n	800a0c6 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a150:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	b123      	cbz	r3, 800a162 <USBD_GetDescriptor+0x116>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a158:	f10d 0106 	add.w	r1, sp, #6
 800a15c:	7c00      	ldrb	r0, [r0, #16]
 800a15e:	4798      	blx	r3
  if (err != 0U)
 800a160:	e79f      	b.n	800a0a2 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a162:	4629      	mov	r1, r5
 800a164:	f7ff ff68 	bl	800a038 <USBD_CtlError>
  if (err != 0U)
 800a168:	e7ad      	b.n	800a0c6 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a16a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a16e:	695b      	ldr	r3, [r3, #20]
 800a170:	b123      	cbz	r3, 800a17c <USBD_GetDescriptor+0x130>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a172:	f10d 0106 	add.w	r1, sp, #6
 800a176:	7c00      	ldrb	r0, [r0, #16]
 800a178:	4798      	blx	r3
  if (err != 0U)
 800a17a:	e792      	b.n	800a0a2 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a17c:	4629      	mov	r1, r5
 800a17e:	f7ff ff5b 	bl	800a038 <USBD_CtlError>
  if (err != 0U)
 800a182:	e7a0      	b.n	800a0c6 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a184:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	b123      	cbz	r3, 800a196 <USBD_GetDescriptor+0x14a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a18c:	f10d 0106 	add.w	r1, sp, #6
 800a190:	7c00      	ldrb	r0, [r0, #16]
 800a192:	4798      	blx	r3
  if (err != 0U)
 800a194:	e785      	b.n	800a0a2 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a196:	4629      	mov	r1, r5
 800a198:	f7ff ff4e 	bl	800a038 <USBD_CtlError>
  if (err != 0U)
 800a19c:	e793      	b.n	800a0c6 <USBD_GetDescriptor+0x7a>
          USBD_CtlError(pdev, req);
 800a19e:	4629      	mov	r1, r5
 800a1a0:	f7ff ff4a 	bl	800a038 <USBD_CtlError>
  if (err != 0U)
 800a1a4:	e78f      	b.n	800a0c6 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1a6:	7c03      	ldrb	r3, [r0, #16]
 800a1a8:	b933      	cbnz	r3, 800a1b8 <USBD_GetDescriptor+0x16c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a1aa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a1ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b0:	f10d 0006 	add.w	r0, sp, #6
 800a1b4:	4798      	blx	r3
  if (err != 0U)
 800a1b6:	e774      	b.n	800a0a2 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	f7ff ff3d 	bl	800a038 <USBD_CtlError>
  if (err != 0U)
 800a1be:	e782      	b.n	800a0c6 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1c0:	7c03      	ldrb	r3, [r0, #16]
 800a1c2:	b943      	cbnz	r3, 800a1d6 <USBD_GetDescriptor+0x18a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a1c4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ca:	f10d 0006 	add.w	r0, sp, #6
 800a1ce:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a1d0:	2307      	movs	r3, #7
 800a1d2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a1d4:	e765      	b.n	800a0a2 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800a1d6:	4629      	mov	r1, r5
 800a1d8:	f7ff ff2e 	bl	800a038 <USBD_CtlError>
  if (err != 0U)
 800a1dc:	e773      	b.n	800a0c6 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 800a1de:	4629      	mov	r1, r5
 800a1e0:	f7ff ff2a 	bl	800a038 <USBD_CtlError>
    return;
 800a1e4:	e76f      	b.n	800a0c6 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 800a1e6:	4629      	mov	r1, r5
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f7ff ff25 	bl	800a038 <USBD_CtlError>
 800a1ee:	e76a      	b.n	800a0c6 <USBD_GetDescriptor+0x7a>
    (void)USBD_CtlSendStatus(pdev);
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f000 fa87 	bl	800a704 <USBD_CtlSendStatus>
 800a1f6:	e766      	b.n	800a0c6 <USBD_GetDescriptor+0x7a>

0800a1f8 <USBD_SetAddress>:
{
 800a1f8:	b538      	push	{r3, r4, r5, lr}
 800a1fa:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a1fc:	888b      	ldrh	r3, [r1, #4]
 800a1fe:	b9fb      	cbnz	r3, 800a240 <USBD_SetAddress+0x48>
 800a200:	88cb      	ldrh	r3, [r1, #6]
 800a202:	b9eb      	cbnz	r3, 800a240 <USBD_SetAddress+0x48>
 800a204:	884b      	ldrh	r3, [r1, #2]
 800a206:	2b7f      	cmp	r3, #127	; 0x7f
 800a208:	d81a      	bhi.n	800a240 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a20a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a20e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a212:	b2db      	uxtb	r3, r3
 800a214:	2b03      	cmp	r3, #3
 800a216:	d00c      	beq.n	800a232 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 800a218:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a21c:	4629      	mov	r1, r5
 800a21e:	f000 fc93 	bl	800ab48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a222:	4620      	mov	r0, r4
 800a224:	f000 fa6e 	bl	800a704 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800a228:	b135      	cbz	r5, 800a238 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a22a:	2302      	movs	r3, #2
 800a22c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800a230:	e009      	b.n	800a246 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 800a232:	f7ff ff01 	bl	800a038 <USBD_CtlError>
 800a236:	e006      	b.n	800a246 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a238:	2301      	movs	r3, #1
 800a23a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800a23e:	e002      	b.n	800a246 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 800a240:	4620      	mov	r0, r4
 800a242:	f7ff fef9 	bl	800a038 <USBD_CtlError>
}
 800a246:	bd38      	pop	{r3, r4, r5, pc}

0800a248 <USBD_SetConfig>:
{
 800a248:	b570      	push	{r4, r5, r6, lr}
 800a24a:	4604      	mov	r4, r0
 800a24c:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800a24e:	788d      	ldrb	r5, [r1, #2]
 800a250:	4b2e      	ldr	r3, [pc, #184]	; (800a30c <USBD_SetConfig+0xc4>)
 800a252:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a254:	2d01      	cmp	r5, #1
 800a256:	d810      	bhi.n	800a27a <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800a258:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d00f      	beq.n	800a282 <USBD_SetConfig+0x3a>
 800a262:	2b03      	cmp	r3, #3
 800a264:	d023      	beq.n	800a2ae <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 800a266:	f7ff fee7 	bl	800a038 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a26a:	4b28      	ldr	r3, [pc, #160]	; (800a30c <USBD_SetConfig+0xc4>)
 800a26c:	7819      	ldrb	r1, [r3, #0]
 800a26e:	4620      	mov	r0, r4
 800a270:	f7ff fd90 	bl	8009d94 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a274:	2503      	movs	r5, #3
}
 800a276:	4628      	mov	r0, r5
 800a278:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800a27a:	f7ff fedd 	bl	800a038 <USBD_CtlError>
    return USBD_FAIL;
 800a27e:	2503      	movs	r5, #3
 800a280:	e7f9      	b.n	800a276 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800a282:	b18d      	cbz	r5, 800a2a8 <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 800a284:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a286:	4629      	mov	r1, r5
 800a288:	f7ff fd7b 	bl	8009d82 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a28c:	4605      	mov	r5, r0
 800a28e:	b120      	cbz	r0, 800a29a <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 800a290:	4631      	mov	r1, r6
 800a292:	4620      	mov	r0, r4
 800a294:	f7ff fed0 	bl	800a038 <USBD_CtlError>
 800a298:	e7ed      	b.n	800a276 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800a29a:	4620      	mov	r0, r4
 800a29c:	f000 fa32 	bl	800a704 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800a2a6:	e7e6      	b.n	800a276 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800a2a8:	f000 fa2c 	bl	800a704 <USBD_CtlSendStatus>
 800a2ac:	e7e3      	b.n	800a276 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800a2ae:	b1cd      	cbz	r5, 800a2e4 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 800a2b0:	6841      	ldr	r1, [r0, #4]
 800a2b2:	428d      	cmp	r5, r1
 800a2b4:	d025      	beq.n	800a302 <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a2b6:	b2c9      	uxtb	r1, r1
 800a2b8:	f7ff fd6c 	bl	8009d94 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a2bc:	4b13      	ldr	r3, [pc, #76]	; (800a30c <USBD_SetConfig+0xc4>)
 800a2be:	7819      	ldrb	r1, [r3, #0]
 800a2c0:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f7ff fd5d 	bl	8009d82 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a2c8:	4605      	mov	r5, r0
 800a2ca:	b1b0      	cbz	r0, 800a2fa <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 800a2cc:	4631      	mov	r1, r6
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f7ff feb2 	bl	800a038 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a2d4:	7921      	ldrb	r1, [r4, #4]
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f7ff fd5c 	bl	8009d94 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2dc:	2302      	movs	r3, #2
 800a2de:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800a2e2:	e7c8      	b.n	800a276 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a2ea:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2ec:	4629      	mov	r1, r5
 800a2ee:	f7ff fd51 	bl	8009d94 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f000 fa06 	bl	800a704 <USBD_CtlSendStatus>
 800a2f8:	e7bd      	b.n	800a276 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f000 fa02 	bl	800a704 <USBD_CtlSendStatus>
 800a300:	e7b9      	b.n	800a276 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800a302:	f000 f9ff 	bl	800a704 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800a306:	2500      	movs	r5, #0
 800a308:	e7b5      	b.n	800a276 <USBD_SetConfig+0x2e>
 800a30a:	bf00      	nop
 800a30c:	20000cec 	.word	0x20000cec

0800a310 <USBD_GetConfig>:
{
 800a310:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800a312:	88cb      	ldrh	r3, [r1, #6]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d10b      	bne.n	800a330 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800a318:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d909      	bls.n	800a336 <USBD_GetConfig+0x26>
 800a322:	2b03      	cmp	r3, #3
 800a324:	d109      	bne.n	800a33a <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a326:	2201      	movs	r2, #1
 800a328:	1d01      	adds	r1, r0, #4
 800a32a:	f000 f9bf 	bl	800a6ac <USBD_CtlSendData>
        break;
 800a32e:	e001      	b.n	800a334 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800a330:	f7ff fe82 	bl	800a038 <USBD_CtlError>
}
 800a334:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800a336:	b25b      	sxtb	r3, r3
 800a338:	b913      	cbnz	r3, 800a340 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 800a33a:	f7ff fe7d 	bl	800a038 <USBD_CtlError>
}
 800a33e:	e7f9      	b.n	800a334 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 800a340:	4601      	mov	r1, r0
 800a342:	2300      	movs	r3, #0
 800a344:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a348:	2201      	movs	r2, #1
 800a34a:	f000 f9af 	bl	800a6ac <USBD_CtlSendData>
        break;
 800a34e:	e7f1      	b.n	800a334 <USBD_GetConfig+0x24>

0800a350 <USBD_GetStatus>:
{
 800a350:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800a352:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a356:	3b01      	subs	r3, #1
 800a358:	2b02      	cmp	r3, #2
 800a35a:	d812      	bhi.n	800a382 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800a35c:	88cb      	ldrh	r3, [r1, #6]
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d10c      	bne.n	800a37c <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a362:	2301      	movs	r3, #1
 800a364:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800a366:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800a36a:	b10b      	cbz	r3, 800a370 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a36c:	2303      	movs	r3, #3
 800a36e:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a370:	2202      	movs	r2, #2
 800a372:	f100 010c 	add.w	r1, r0, #12
 800a376:	f000 f999 	bl	800a6ac <USBD_CtlSendData>
}
 800a37a:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800a37c:	f7ff fe5c 	bl	800a038 <USBD_CtlError>
        break;
 800a380:	e7fb      	b.n	800a37a <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800a382:	f7ff fe59 	bl	800a038 <USBD_CtlError>
}
 800a386:	e7f8      	b.n	800a37a <USBD_GetStatus+0x2a>

0800a388 <USBD_ClrFeature>:
{
 800a388:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800a38a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a38e:	3b01      	subs	r3, #1
 800a390:	2b02      	cmp	r3, #2
 800a392:	d809      	bhi.n	800a3a8 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a394:	884b      	ldrh	r3, [r1, #2]
 800a396:	2b01      	cmp	r3, #1
 800a398:	d000      	beq.n	800a39c <USBD_ClrFeature+0x14>
}
 800a39a:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800a39c:	2300      	movs	r3, #0
 800a39e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a3a2:	f000 f9af 	bl	800a704 <USBD_CtlSendStatus>
 800a3a6:	e7f8      	b.n	800a39a <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800a3a8:	f7ff fe46 	bl	800a038 <USBD_CtlError>
}
 800a3ac:	e7f5      	b.n	800a39a <USBD_ClrFeature+0x12>

0800a3ae <USBD_StdDevReq>:
{
 800a3ae:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3b0:	780c      	ldrb	r4, [r1, #0]
 800a3b2:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800a3b6:	2c20      	cmp	r4, #32
 800a3b8:	d006      	beq.n	800a3c8 <USBD_StdDevReq+0x1a>
 800a3ba:	2c40      	cmp	r4, #64	; 0x40
 800a3bc:	d004      	beq.n	800a3c8 <USBD_StdDevReq+0x1a>
 800a3be:	b154      	cbz	r4, 800a3d6 <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 800a3c0:	f7ff fe3a 	bl	800a038 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a3c4:	2400      	movs	r4, #0
      break;
 800a3c6:	e004      	b.n	800a3d2 <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a3c8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	4798      	blx	r3
 800a3d0:	4604      	mov	r4, r0
}
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800a3d6:	784d      	ldrb	r5, [r1, #1]
 800a3d8:	2d09      	cmp	r5, #9
 800a3da:	d81d      	bhi.n	800a418 <USBD_StdDevReq+0x6a>
 800a3dc:	e8df f005 	tbb	[pc, r5]
 800a3e0:	161c1912 	.word	0x161c1912
 800a3e4:	1c05081c 	.word	0x1c05081c
 800a3e8:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800a3ea:	f7ff fe2f 	bl	800a04c <USBD_GetDescriptor>
          break;
 800a3ee:	e7f0      	b.n	800a3d2 <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 800a3f0:	f7ff ff02 	bl	800a1f8 <USBD_SetAddress>
          break;
 800a3f4:	e7ed      	b.n	800a3d2 <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 800a3f6:	f7ff ff27 	bl	800a248 <USBD_SetConfig>
 800a3fa:	4604      	mov	r4, r0
          break;
 800a3fc:	e7e9      	b.n	800a3d2 <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 800a3fe:	f7ff ff87 	bl	800a310 <USBD_GetConfig>
          break;
 800a402:	e7e6      	b.n	800a3d2 <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 800a404:	f7ff ffa4 	bl	800a350 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800a408:	462c      	mov	r4, r5
          break;
 800a40a:	e7e2      	b.n	800a3d2 <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 800a40c:	f7ff fdf6 	bl	8009ffc <USBD_SetFeature>
          break;
 800a410:	e7df      	b.n	800a3d2 <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 800a412:	f7ff ffb9 	bl	800a388 <USBD_ClrFeature>
          break;
 800a416:	e7dc      	b.n	800a3d2 <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 800a418:	f7ff fe0e 	bl	800a038 <USBD_CtlError>
          break;
 800a41c:	e7d9      	b.n	800a3d2 <USBD_StdDevReq+0x24>

0800a41e <USBD_StdItfReq>:
{
 800a41e:	b570      	push	{r4, r5, r6, lr}
 800a420:	4605      	mov	r5, r0
 800a422:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a424:	780b      	ldrb	r3, [r1, #0]
 800a426:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a42a:	2b20      	cmp	r3, #32
 800a42c:	d007      	beq.n	800a43e <USBD_StdItfReq+0x20>
 800a42e:	2b40      	cmp	r3, #64	; 0x40
 800a430:	d005      	beq.n	800a43e <USBD_StdItfReq+0x20>
 800a432:	b123      	cbz	r3, 800a43e <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800a434:	f7ff fe00 	bl	800a038 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a438:	2600      	movs	r6, #0
}
 800a43a:	4630      	mov	r0, r6
 800a43c:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800a43e:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800a442:	3b01      	subs	r3, #1
 800a444:	2b02      	cmp	r3, #2
 800a446:	d818      	bhi.n	800a47a <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a448:	7923      	ldrb	r3, [r4, #4]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d80f      	bhi.n	800a46e <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a44e:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	4621      	mov	r1, r4
 800a456:	4628      	mov	r0, r5
 800a458:	4798      	blx	r3
 800a45a:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a45c:	88e3      	ldrh	r3, [r4, #6]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d1eb      	bne.n	800a43a <USBD_StdItfReq+0x1c>
 800a462:	2800      	cmp	r0, #0
 800a464:	d1e9      	bne.n	800a43a <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800a466:	4628      	mov	r0, r5
 800a468:	f000 f94c 	bl	800a704 <USBD_CtlSendStatus>
 800a46c:	e7e5      	b.n	800a43a <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 800a46e:	4621      	mov	r1, r4
 800a470:	4628      	mov	r0, r5
 800a472:	f7ff fde1 	bl	800a038 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a476:	2600      	movs	r6, #0
 800a478:	e7df      	b.n	800a43a <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 800a47a:	4621      	mov	r1, r4
 800a47c:	4628      	mov	r0, r5
 800a47e:	f7ff fddb 	bl	800a038 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a482:	2600      	movs	r6, #0
          break;
 800a484:	e7d9      	b.n	800a43a <USBD_StdItfReq+0x1c>

0800a486 <USBD_StdEPReq>:
{
 800a486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a488:	4606      	mov	r6, r0
 800a48a:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800a48c:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a48e:	780c      	ldrb	r4, [r1, #0]
 800a490:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800a494:	2c20      	cmp	r4, #32
 800a496:	d008      	beq.n	800a4aa <USBD_StdEPReq+0x24>
 800a498:	b2d9      	uxtb	r1, r3
 800a49a:	2c40      	cmp	r4, #64	; 0x40
 800a49c:	d005      	beq.n	800a4aa <USBD_StdEPReq+0x24>
 800a49e:	b16c      	cbz	r4, 800a4bc <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 800a4a0:	4629      	mov	r1, r5
 800a4a2:	f7ff fdc9 	bl	800a038 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a4a6:	2400      	movs	r4, #0
      break;
 800a4a8:	e006      	b.n	800a4b8 <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a4aa:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	4629      	mov	r1, r5
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	4798      	blx	r3
 800a4b6:	4604      	mov	r4, r0
}
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 800a4bc:	786f      	ldrb	r7, [r5, #1]
 800a4be:	2f01      	cmp	r7, #1
 800a4c0:	d02f      	beq.n	800a522 <USBD_StdEPReq+0x9c>
 800a4c2:	2f03      	cmp	r7, #3
 800a4c4:	d005      	beq.n	800a4d2 <USBD_StdEPReq+0x4c>
 800a4c6:	2f00      	cmp	r7, #0
 800a4c8:	d059      	beq.n	800a57e <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	f7ff fdb4 	bl	800a038 <USBD_CtlError>
          break;
 800a4d0:	e7f2      	b.n	800a4b8 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800a4d2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d005      	beq.n	800a4e8 <USBD_StdEPReq+0x62>
 800a4dc:	2b03      	cmp	r3, #3
 800a4de:	d012      	beq.n	800a506 <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	f7ff fda9 	bl	800a038 <USBD_CtlError>
              break;
 800a4e6:	e7e7      	b.n	800a4b8 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4e8:	b109      	cbz	r1, 800a4ee <USBD_StdEPReq+0x68>
 800a4ea:	2980      	cmp	r1, #128	; 0x80
 800a4ec:	d104      	bne.n	800a4f8 <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 800a4ee:	4629      	mov	r1, r5
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	f7ff fda1 	bl	800a038 <USBD_CtlError>
 800a4f6:	e7df      	b.n	800a4b8 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a4f8:	f000 faff 	bl	800aafa <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4fc:	2180      	movs	r1, #128	; 0x80
 800a4fe:	4630      	mov	r0, r6
 800a500:	f000 fafb 	bl	800aafa <USBD_LL_StallEP>
 800a504:	e7d8      	b.n	800a4b8 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a506:	886b      	ldrh	r3, [r5, #2]
 800a508:	b923      	cbnz	r3, 800a514 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a50a:	b119      	cbz	r1, 800a514 <USBD_StdEPReq+0x8e>
 800a50c:	2980      	cmp	r1, #128	; 0x80
 800a50e:	d001      	beq.n	800a514 <USBD_StdEPReq+0x8e>
 800a510:	88eb      	ldrh	r3, [r5, #6]
 800a512:	b11b      	cbz	r3, 800a51c <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 800a514:	4630      	mov	r0, r6
 800a516:	f000 f8f5 	bl	800a704 <USBD_CtlSendStatus>
              break;
 800a51a:	e7cd      	b.n	800a4b8 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a51c:	f000 faed 	bl	800aafa <USBD_LL_StallEP>
 800a520:	e7f8      	b.n	800a514 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 800a522:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a526:	b2db      	uxtb	r3, r3
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d005      	beq.n	800a538 <USBD_StdEPReq+0xb2>
 800a52c:	2b03      	cmp	r3, #3
 800a52e:	d012      	beq.n	800a556 <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 800a530:	4629      	mov	r1, r5
 800a532:	f7ff fd81 	bl	800a038 <USBD_CtlError>
              break;
 800a536:	e7bf      	b.n	800a4b8 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a538:	b109      	cbz	r1, 800a53e <USBD_StdEPReq+0xb8>
 800a53a:	2980      	cmp	r1, #128	; 0x80
 800a53c:	d104      	bne.n	800a548 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 800a53e:	4629      	mov	r1, r5
 800a540:	4630      	mov	r0, r6
 800a542:	f7ff fd79 	bl	800a038 <USBD_CtlError>
 800a546:	e7b7      	b.n	800a4b8 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a548:	f000 fad7 	bl	800aafa <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a54c:	2180      	movs	r1, #128	; 0x80
 800a54e:	4630      	mov	r0, r6
 800a550:	f000 fad3 	bl	800aafa <USBD_LL_StallEP>
 800a554:	e7b0      	b.n	800a4b8 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a556:	886b      	ldrh	r3, [r5, #2]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1ad      	bne.n	800a4b8 <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 800a55c:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800a560:	d10a      	bne.n	800a578 <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 800a562:	4630      	mov	r0, r6
 800a564:	f000 f8ce 	bl	800a704 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a568:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	4629      	mov	r1, r5
 800a570:	4630      	mov	r0, r6
 800a572:	4798      	blx	r3
 800a574:	4604      	mov	r4, r0
 800a576:	e79f      	b.n	800a4b8 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a578:	f000 fac7 	bl	800ab0a <USBD_LL_ClearStallEP>
 800a57c:	e7f1      	b.n	800a562 <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 800a57e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800a582:	b2d2      	uxtb	r2, r2
 800a584:	2a02      	cmp	r2, #2
 800a586:	d006      	beq.n	800a596 <USBD_StdEPReq+0x110>
 800a588:	2a03      	cmp	r2, #3
 800a58a:	d029      	beq.n	800a5e0 <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 800a58c:	4629      	mov	r1, r5
 800a58e:	f7ff fd53 	bl	800a038 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a592:	463c      	mov	r4, r7
              break;
 800a594:	e790      	b.n	800a4b8 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a596:	b109      	cbz	r1, 800a59c <USBD_StdEPReq+0x116>
 800a598:	2980      	cmp	r1, #128	; 0x80
 800a59a:	d113      	bne.n	800a5c4 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a59c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a5a0:	d115      	bne.n	800a5ce <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5a2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5a6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a5aa:	0089      	lsls	r1, r1, #2
 800a5ac:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800a5b0:	4431      	add	r1, r6
 800a5b2:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a5b8:	2202      	movs	r2, #2
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f000 f876 	bl	800a6ac <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a5c0:	463c      	mov	r4, r7
              break;
 800a5c2:	e779      	b.n	800a4b8 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 800a5c4:	4629      	mov	r1, r5
 800a5c6:	f7ff fd37 	bl	800a038 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ca:	463c      	mov	r4, r7
                break;
 800a5cc:	e774      	b.n	800a4b8 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5ce:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a5d2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a5d6:	0089      	lsls	r1, r1, #2
 800a5d8:	3110      	adds	r1, #16
 800a5da:	4431      	add	r1, r6
 800a5dc:	3104      	adds	r1, #4
 800a5de:	e7e9      	b.n	800a5b4 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 800a5e0:	b25b      	sxtb	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	db1f      	blt.n	800a626 <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a5e6:	f001 020f 	and.w	r2, r1, #15
 800a5ea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a5ee:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a5f2:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800a5f6:	b322      	cbz	r2, 800a642 <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	db27      	blt.n	800a64c <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5fc:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a600:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a604:	009c      	lsls	r4, r3, #2
 800a606:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 800a60a:	4434      	add	r4, r6
 800a60c:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a60e:	b109      	cbz	r1, 800a614 <USBD_StdEPReq+0x18e>
 800a610:	2980      	cmp	r1, #128	; 0x80
 800a612:	d124      	bne.n	800a65e <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 800a614:	2300      	movs	r3, #0
 800a616:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a618:	2202      	movs	r2, #2
 800a61a:	4621      	mov	r1, r4
 800a61c:	4630      	mov	r0, r6
 800a61e:	f000 f845 	bl	800a6ac <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a622:	463c      	mov	r4, r7
              break;
 800a624:	e748      	b.n	800a4b8 <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a626:	f001 020f 	and.w	r2, r1, #15
 800a62a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a62e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a632:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800a634:	2a00      	cmp	r2, #0
 800a636:	d1df      	bne.n	800a5f8 <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 800a638:	4629      	mov	r1, r5
 800a63a:	f7ff fcfd 	bl	800a038 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a63e:	463c      	mov	r4, r7
                  break;
 800a640:	e73a      	b.n	800a4b8 <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 800a642:	4629      	mov	r1, r5
 800a644:	f7ff fcf8 	bl	800a038 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a648:	463c      	mov	r4, r7
                  break;
 800a64a:	e735      	b.n	800a4b8 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a64c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800a650:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a654:	009c      	lsls	r4, r3, #2
 800a656:	3410      	adds	r4, #16
 800a658:	4434      	add	r4, r6
 800a65a:	3404      	adds	r4, #4
 800a65c:	e7d7      	b.n	800a60e <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a65e:	4630      	mov	r0, r6
 800a660:	f000 fa5b 	bl	800ab1a <USBD_LL_IsStallEP>
 800a664:	b110      	cbz	r0, 800a66c <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 800a666:	2301      	movs	r3, #1
 800a668:	6023      	str	r3, [r4, #0]
 800a66a:	e7d5      	b.n	800a618 <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 800a66c:	2300      	movs	r3, #0
 800a66e:	6023      	str	r3, [r4, #0]
 800a670:	e7d2      	b.n	800a618 <USBD_StdEPReq+0x192>

0800a672 <USBD_GetString>:
  if (desc == NULL)
 800a672:	b1d0      	cbz	r0, 800a6aa <USBD_GetString+0x38>
{
 800a674:	b570      	push	{r4, r5, r6, lr}
 800a676:	460d      	mov	r5, r1
 800a678:	4616      	mov	r6, r2
 800a67a:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a67c:	f7ff fcb4 	bl	8009fe8 <USBD_GetLen>
 800a680:	1c43      	adds	r3, r0, #1
 800a682:	005b      	lsls	r3, r3, #1
 800a684:	b29b      	uxth	r3, r3
 800a686:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800a688:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a68a:	2303      	movs	r3, #3
 800a68c:	706b      	strb	r3, [r5, #1]
  idx++;
 800a68e:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800a690:	e007      	b.n	800a6a2 <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 800a692:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800a694:	3401      	adds	r4, #1
    idx++;
 800a696:	1c5a      	adds	r2, r3, #1
 800a698:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800a69a:	2100      	movs	r1, #0
 800a69c:	54a9      	strb	r1, [r5, r2]
    idx++;
 800a69e:	3302      	adds	r3, #2
 800a6a0:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800a6a2:	7822      	ldrb	r2, [r4, #0]
 800a6a4:	2a00      	cmp	r2, #0
 800a6a6:	d1f4      	bne.n	800a692 <USBD_GetString+0x20>
}
 800a6a8:	bd70      	pop	{r4, r5, r6, pc}
 800a6aa:	4770      	bx	lr

0800a6ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a6ac:	b508      	push	{r3, lr}
 800a6ae:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a6b0:	2202      	movs	r2, #2
 800a6b2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a6b6:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a6b8:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6ba:	460a      	mov	r2, r1
 800a6bc:	2100      	movs	r1, #0
 800a6be:	f000 fa4b 	bl	800ab58 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	bd08      	pop	{r3, pc}

0800a6c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a6c6:	b508      	push	{r3, lr}
 800a6c8:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6ca:	460a      	mov	r2, r1
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	f000 fa43 	bl	800ab58 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a6d2:	2000      	movs	r0, #0
 800a6d4:	bd08      	pop	{r3, pc}

0800a6d6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a6d6:	b508      	push	{r3, lr}
 800a6d8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a6da:	2203      	movs	r2, #3
 800a6dc:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a6e0:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a6e4:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6e8:	460a      	mov	r2, r1
 800a6ea:	2100      	movs	r1, #0
 800a6ec:	f000 fa3c 	bl	800ab68 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a6f0:	2000      	movs	r0, #0
 800a6f2:	bd08      	pop	{r3, pc}

0800a6f4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a6f4:	b508      	push	{r3, lr}
 800a6f6:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6f8:	460a      	mov	r2, r1
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	f000 fa34 	bl	800ab68 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a700:	2000      	movs	r0, #0
 800a702:	bd08      	pop	{r3, pc}

0800a704 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a704:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a706:	2204      	movs	r2, #4
 800a708:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a70c:	2300      	movs	r3, #0
 800a70e:	461a      	mov	r2, r3
 800a710:	4619      	mov	r1, r3
 800a712:	f000 fa21 	bl	800ab58 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a716:	2000      	movs	r0, #0
 800a718:	bd08      	pop	{r3, pc}

0800a71a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a71a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a71c:	2205      	movs	r2, #5
 800a71e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a722:	2300      	movs	r3, #0
 800a724:	461a      	mov	r2, r3
 800a726:	4619      	mov	r1, r3
 800a728:	f000 fa1e 	bl	800ab68 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a72c:	2000      	movs	r0, #0
 800a72e:	bd08      	pop	{r3, pc}

0800a730 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a730:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a732:	2200      	movs	r2, #0
 800a734:	490f      	ldr	r1, [pc, #60]	; (800a774 <MX_USB_Device_Init+0x44>)
 800a736:	4810      	ldr	r0, [pc, #64]	; (800a778 <MX_USB_Device_Init+0x48>)
 800a738:	f7ff faf1 	bl	8009d1e <USBD_Init>
 800a73c:	b970      	cbnz	r0, 800a75c <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a73e:	490f      	ldr	r1, [pc, #60]	; (800a77c <MX_USB_Device_Init+0x4c>)
 800a740:	480d      	ldr	r0, [pc, #52]	; (800a778 <MX_USB_Device_Init+0x48>)
 800a742:	f7ff fb03 	bl	8009d4c <USBD_RegisterClass>
 800a746:	b960      	cbnz	r0, 800a762 <MX_USB_Device_Init+0x32>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a748:	490d      	ldr	r1, [pc, #52]	; (800a780 <MX_USB_Device_Init+0x50>)
 800a74a:	480b      	ldr	r0, [pc, #44]	; (800a778 <MX_USB_Device_Init+0x48>)
 800a74c:	f7ff fab3 	bl	8009cb6 <USBD_CDC_RegisterInterface>
 800a750:	b950      	cbnz	r0, 800a768 <MX_USB_Device_Init+0x38>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a752:	4809      	ldr	r0, [pc, #36]	; (800a778 <MX_USB_Device_Init+0x48>)
 800a754:	f7ff fb11 	bl	8009d7a <USBD_Start>
 800a758:	b948      	cbnz	r0, 800a76e <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a75a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800a75c:	f7f7 fb68 	bl	8001e30 <Error_Handler>
 800a760:	e7ed      	b.n	800a73e <MX_USB_Device_Init+0xe>
    Error_Handler();
 800a762:	f7f7 fb65 	bl	8001e30 <Error_Handler>
 800a766:	e7ef      	b.n	800a748 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a768:	f7f7 fb62 	bl	8001e30 <Error_Handler>
 800a76c:	e7f1      	b.n	800a752 <MX_USB_Device_Init+0x22>
    Error_Handler();
 800a76e:	f7f7 fb5f 	bl	8001e30 <Error_Handler>
}
 800a772:	e7f2      	b.n	800a75a <MX_USB_Device_Init+0x2a>
 800a774:	20000130 	.word	0x20000130
 800a778:	20000cf0 	.word	0x20000cf0
 800a77c:	2000000c 	.word	0x2000000c
 800a780:	2000011c 	.word	0x2000011c

0800a784 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800a784:	2000      	movs	r0, #0
 800a786:	4770      	bx	lr

0800a788 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800a788:	2000      	movs	r0, #0
 800a78a:	4770      	bx	lr

0800a78c <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800a78c:	2000      	movs	r0, #0
 800a78e:	4770      	bx	lr

0800a790 <CDC_Receive_FS>:
{
 800a790:	b510      	push	{r4, lr}
 800a792:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a794:	4c04      	ldr	r4, [pc, #16]	; (800a7a8 <CDC_Receive_FS+0x18>)
 800a796:	4620      	mov	r0, r4
 800a798:	f7ff fa9f 	bl	8009cda <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a79c:	4620      	mov	r0, r4
 800a79e:	f7ff faa5 	bl	8009cec <USBD_CDC_ReceivePacket>
}
 800a7a2:	2000      	movs	r0, #0
 800a7a4:	bd10      	pop	{r4, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20000cf0 	.word	0x20000cf0

0800a7ac <CDC_Init_FS>:
{
 800a7ac:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a7ae:	4c06      	ldr	r4, [pc, #24]	; (800a7c8 <CDC_Init_FS+0x1c>)
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	4906      	ldr	r1, [pc, #24]	; (800a7cc <CDC_Init_FS+0x20>)
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f7ff fa85 	bl	8009cc4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a7ba:	4905      	ldr	r1, [pc, #20]	; (800a7d0 <CDC_Init_FS+0x24>)
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f7ff fa8c 	bl	8009cda <USBD_CDC_SetRxBuffer>
}
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	bd10      	pop	{r4, pc}
 800a7c6:	bf00      	nop
 800a7c8:	20000cf0 	.word	0x20000cf0
 800a7cc:	200017c0 	.word	0x200017c0
 800a7d0:	20000fc0 	.word	0x20000fc0

0800a7d4 <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800a7d4:	2312      	movs	r3, #18
 800a7d6:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 800a7d8:	4800      	ldr	r0, [pc, #0]	; (800a7dc <USBD_CDC_DeviceDescriptor+0x8>)
 800a7da:	4770      	bx	lr
 800a7dc:	20000150 	.word	0x20000150

0800a7e0 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a7e0:	2304      	movs	r3, #4
 800a7e2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800a7e4:	4800      	ldr	r0, [pc, #0]	; (800a7e8 <USBD_CDC_LangIDStrDescriptor+0x8>)
 800a7e6:	4770      	bx	lr
 800a7e8:	20000164 	.word	0x20000164

0800a7ec <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d21e      	bcs.n	800a830 <IntToUnicode+0x44>
{
 800a7f2:	b500      	push	{lr}
 800a7f4:	e010      	b.n	800a818 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7f6:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 800a7fa:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 800a7fe:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800a800:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800a804:	f10c 0c01 	add.w	ip, ip, #1
 800a808:	f04f 0e00 	mov.w	lr, #0
 800a80c:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 800a810:	3301      	adds	r3, #1
 800a812:	b2db      	uxtb	r3, r3
 800a814:	4293      	cmp	r3, r2
 800a816:	d209      	bcs.n	800a82c <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 800a818:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 800a81c:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 800a820:	d2e9      	bcs.n	800a7f6 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800a822:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800a826:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800a82a:	e7e8      	b.n	800a7fe <IntToUnicode+0x12>
  }
}
 800a82c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a830:	4770      	bx	lr
	...

0800a834 <Get_SerialNum>:
{
 800a834:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a836:	4b0b      	ldr	r3, [pc, #44]	; (800a864 <Get_SerialNum+0x30>)
 800a838:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a83c:	f8d3 4594 	ldr.w	r4, [r3, #1428]	; 0x594
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a840:	f8d3 3598 	ldr.w	r3, [r3, #1432]	; 0x598
  if (deviceserial0 != 0)
 800a844:	18c0      	adds	r0, r0, r3
 800a846:	d100      	bne.n	800a84a <Get_SerialNum+0x16>
}
 800a848:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a84a:	4d07      	ldr	r5, [pc, #28]	; (800a868 <Get_SerialNum+0x34>)
 800a84c:	2208      	movs	r2, #8
 800a84e:	1ca9      	adds	r1, r5, #2
 800a850:	f7ff ffcc 	bl	800a7ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a854:	2204      	movs	r2, #4
 800a856:	f105 0112 	add.w	r1, r5, #18
 800a85a:	4620      	mov	r0, r4
 800a85c:	f7ff ffc6 	bl	800a7ec <IntToUnicode>
}
 800a860:	e7f2      	b.n	800a848 <Get_SerialNum+0x14>
 800a862:	bf00      	nop
 800a864:	1fff7000 	.word	0x1fff7000
 800a868:	20000168 	.word	0x20000168

0800a86c <USBD_CDC_SerialStrDescriptor>:
{
 800a86c:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800a86e:	231a      	movs	r3, #26
 800a870:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800a872:	f7ff ffdf 	bl	800a834 <Get_SerialNum>
}
 800a876:	4801      	ldr	r0, [pc, #4]	; (800a87c <USBD_CDC_SerialStrDescriptor+0x10>)
 800a878:	bd08      	pop	{r3, pc}
 800a87a:	bf00      	nop
 800a87c:	20000168 	.word	0x20000168

0800a880 <USBD_CDC_ProductStrDescriptor>:
{
 800a880:	b508      	push	{r3, lr}
 800a882:	460a      	mov	r2, r1
  if(speed == 0)
 800a884:	b928      	cbnz	r0, 800a892 <USBD_CDC_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a886:	4905      	ldr	r1, [pc, #20]	; (800a89c <USBD_CDC_ProductStrDescriptor+0x1c>)
 800a888:	4805      	ldr	r0, [pc, #20]	; (800a8a0 <USBD_CDC_ProductStrDescriptor+0x20>)
 800a88a:	f7ff fef2 	bl	800a672 <USBD_GetString>
}
 800a88e:	4803      	ldr	r0, [pc, #12]	; (800a89c <USBD_CDC_ProductStrDescriptor+0x1c>)
 800a890:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a892:	4902      	ldr	r1, [pc, #8]	; (800a89c <USBD_CDC_ProductStrDescriptor+0x1c>)
 800a894:	4802      	ldr	r0, [pc, #8]	; (800a8a0 <USBD_CDC_ProductStrDescriptor+0x20>)
 800a896:	f7ff feec 	bl	800a672 <USBD_GetString>
 800a89a:	e7f8      	b.n	800a88e <USBD_CDC_ProductStrDescriptor+0xe>
 800a89c:	20001fc0 	.word	0x20001fc0
 800a8a0:	080101e4 	.word	0x080101e4

0800a8a4 <USBD_CDC_ManufacturerStrDescriptor>:
{
 800a8a4:	b510      	push	{r4, lr}
 800a8a6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a8a8:	4c03      	ldr	r4, [pc, #12]	; (800a8b8 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 800a8aa:	4621      	mov	r1, r4
 800a8ac:	4803      	ldr	r0, [pc, #12]	; (800a8bc <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 800a8ae:	f7ff fee0 	bl	800a672 <USBD_GetString>
}
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	bd10      	pop	{r4, pc}
 800a8b6:	bf00      	nop
 800a8b8:	20001fc0 	.word	0x20001fc0
 800a8bc:	080101fc 	.word	0x080101fc

0800a8c0 <USBD_CDC_ConfigStrDescriptor>:
{
 800a8c0:	b508      	push	{r3, lr}
 800a8c2:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800a8c4:	b928      	cbnz	r0, 800a8d2 <USBD_CDC_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a8c6:	4905      	ldr	r1, [pc, #20]	; (800a8dc <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800a8c8:	4805      	ldr	r0, [pc, #20]	; (800a8e0 <USBD_CDC_ConfigStrDescriptor+0x20>)
 800a8ca:	f7ff fed2 	bl	800a672 <USBD_GetString>
}
 800a8ce:	4803      	ldr	r0, [pc, #12]	; (800a8dc <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800a8d0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a8d2:	4902      	ldr	r1, [pc, #8]	; (800a8dc <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800a8d4:	4802      	ldr	r0, [pc, #8]	; (800a8e0 <USBD_CDC_ConfigStrDescriptor+0x20>)
 800a8d6:	f7ff fecc 	bl	800a672 <USBD_GetString>
 800a8da:	e7f8      	b.n	800a8ce <USBD_CDC_ConfigStrDescriptor+0xe>
 800a8dc:	20001fc0 	.word	0x20001fc0
 800a8e0:	08010210 	.word	0x08010210

0800a8e4 <USBD_CDC_InterfaceStrDescriptor>:
{
 800a8e4:	b508      	push	{r3, lr}
 800a8e6:	460a      	mov	r2, r1
  if(speed == 0)
 800a8e8:	b928      	cbnz	r0, 800a8f6 <USBD_CDC_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a8ea:	4905      	ldr	r1, [pc, #20]	; (800a900 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800a8ec:	4805      	ldr	r0, [pc, #20]	; (800a904 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 800a8ee:	f7ff fec0 	bl	800a672 <USBD_GetString>
}
 800a8f2:	4803      	ldr	r0, [pc, #12]	; (800a900 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800a8f4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a8f6:	4902      	ldr	r1, [pc, #8]	; (800a900 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800a8f8:	4802      	ldr	r0, [pc, #8]	; (800a904 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 800a8fa:	f7ff feba 	bl	800a672 <USBD_GetString>
 800a8fe:	e7f8      	b.n	800a8f2 <USBD_CDC_InterfaceStrDescriptor+0xe>
 800a900:	20001fc0 	.word	0x20001fc0
 800a904:	0801021c 	.word	0x0801021c

0800a908 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800a908:	2803      	cmp	r0, #3
 800a90a:	d805      	bhi.n	800a918 <USBD_Get_USB_Status+0x10>
 800a90c:	e8df f000 	tbb	[pc, r0]
 800a910:	05020405 	.word	0x05020405
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a914:	2001      	movs	r0, #1
    break;
 800a916:	4770      	bx	lr
      usb_status = USBD_FAIL;
 800a918:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800a91a:	4770      	bx	lr

0800a91c <SystemClockConfig_Resume>:
{
 800a91c:	b508      	push	{r3, lr}
  SystemClock_Config();
 800a91e:	f7f7 fa89 	bl	8001e34 <SystemClock_Config>
}
 800a922:	bd08      	pop	{r3, pc}

0800a924 <HAL_PCD_MspInit>:
{
 800a924:	b510      	push	{r4, lr}
 800a926:	b096      	sub	sp, #88	; 0x58
 800a928:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a92a:	2254      	movs	r2, #84	; 0x54
 800a92c:	2100      	movs	r1, #0
 800a92e:	a801      	add	r0, sp, #4
 800a930:	f000 f98c 	bl	800ac4c <memset>
  if(pcdHandle->Instance==USB)
 800a934:	6822      	ldr	r2, [r4, #0]
 800a936:	4b11      	ldr	r3, [pc, #68]	; (800a97c <HAL_PCD_MspInit+0x58>)
 800a938:	429a      	cmp	r2, r3
 800a93a:	d001      	beq.n	800a940 <HAL_PCD_MspInit+0x1c>
}
 800a93c:	b016      	add	sp, #88	; 0x58
 800a93e:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a944:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a946:	a801      	add	r0, sp, #4
 800a948:	f7fc f82c 	bl	80069a4 <HAL_RCCEx_PeriphCLKConfig>
 800a94c:	b990      	cbnz	r0, 800a974 <HAL_PCD_MspInit+0x50>
    __HAL_RCC_USB_CLK_ENABLE();
 800a94e:	4b0c      	ldr	r3, [pc, #48]	; (800a980 <HAL_PCD_MspInit+0x5c>)
 800a950:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a952:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a956:	659a      	str	r2, [r3, #88]	; 0x58
 800a958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a95a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a962:	2200      	movs	r2, #0
 800a964:	4611      	mov	r1, r2
 800a966:	2014      	movs	r0, #20
 800a968:	f7f9 f8e8 	bl	8003b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a96c:	2014      	movs	r0, #20
 800a96e:	f7f9 f91d 	bl	8003bac <HAL_NVIC_EnableIRQ>
}
 800a972:	e7e3      	b.n	800a93c <HAL_PCD_MspInit+0x18>
      Error_Handler();
 800a974:	f7f7 fa5c 	bl	8001e30 <Error_Handler>
 800a978:	e7e9      	b.n	800a94e <HAL_PCD_MspInit+0x2a>
 800a97a:	bf00      	nop
 800a97c:	40005c00 	.word	0x40005c00
 800a980:	40021000 	.word	0x40021000

0800a984 <HAL_PCD_SetupStageCallback>:
{
 800a984:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a986:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800a98a:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800a98e:	f7ff fa09 	bl	8009da4 <USBD_LL_SetupStage>
}
 800a992:	bd08      	pop	{r3, pc}

0800a994 <HAL_PCD_DataOutStageCallback>:
{
 800a994:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a996:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800a99a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a99e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800a9a2:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800a9a6:	f7ff fa29 	bl	8009dfc <USBD_LL_DataOutStage>
}
 800a9aa:	bd08      	pop	{r3, pc}

0800a9ac <HAL_PCD_DataInStageCallback>:
{
 800a9ac:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a9ae:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800a9b2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a9b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9b8:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800a9bc:	f7ff fa5a 	bl	8009e74 <USBD_LL_DataInStage>
}
 800a9c0:	bd08      	pop	{r3, pc}

0800a9c2 <HAL_PCD_SOFCallback>:
{
 800a9c2:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a9c4:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800a9c8:	f7ff fafa 	bl	8009fc0 <USBD_LL_SOF>
}
 800a9cc:	bd08      	pop	{r3, pc}

0800a9ce <HAL_PCD_ResetCallback>:
{
 800a9ce:	b510      	push	{r4, lr}
 800a9d0:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a9d2:	6883      	ldr	r3, [r0, #8]
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	d109      	bne.n	800a9ec <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a9d8:	2101      	movs	r1, #1
 800a9da:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800a9de:	f7ff fad5 	bl	8009f8c <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a9e2:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800a9e6:	f7ff faa4 	bl	8009f32 <USBD_LL_Reset>
}
 800a9ea:	bd10      	pop	{r4, pc}
    Error_Handler();
 800a9ec:	f7f7 fa20 	bl	8001e30 <Error_Handler>
 800a9f0:	e7f2      	b.n	800a9d8 <HAL_PCD_ResetCallback+0xa>
	...

0800a9f4 <HAL_PCD_SuspendCallback>:
{
 800a9f4:	b510      	push	{r4, lr}
 800a9f6:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a9f8:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800a9fc:	f7ff fac9 	bl	8009f92 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800aa00:	69a3      	ldr	r3, [r4, #24]
 800aa02:	b123      	cbz	r3, 800aa0e <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa04:	4a02      	ldr	r2, [pc, #8]	; (800aa10 <HAL_PCD_SuspendCallback+0x1c>)
 800aa06:	6913      	ldr	r3, [r2, #16]
 800aa08:	f043 0306 	orr.w	r3, r3, #6
 800aa0c:	6113      	str	r3, [r2, #16]
}
 800aa0e:	bd10      	pop	{r4, pc}
 800aa10:	e000ed00 	.word	0xe000ed00

0800aa14 <HAL_PCD_ResumeCallback>:
{
 800aa14:	b510      	push	{r4, lr}
 800aa16:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800aa18:	6983      	ldr	r3, [r0, #24]
 800aa1a:	b923      	cbnz	r3, 800aa26 <HAL_PCD_ResumeCallback+0x12>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa1c:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800aa20:	f7ff fac1 	bl	8009fa6 <USBD_LL_Resume>
}
 800aa24:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa26:	4a04      	ldr	r2, [pc, #16]	; (800aa38 <HAL_PCD_ResumeCallback+0x24>)
 800aa28:	6913      	ldr	r3, [r2, #16]
 800aa2a:	f023 0306 	bic.w	r3, r3, #6
 800aa2e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800aa30:	f7ff ff74 	bl	800a91c <SystemClockConfig_Resume>
 800aa34:	e7f2      	b.n	800aa1c <HAL_PCD_ResumeCallback+0x8>
 800aa36:	bf00      	nop
 800aa38:	e000ed00 	.word	0xe000ed00

0800aa3c <USBD_LL_Init>:
{
 800aa3c:	b510      	push	{r4, lr}
 800aa3e:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800aa40:	481e      	ldr	r0, [pc, #120]	; (800aabc <USBD_LL_Init+0x80>)
 800aa42:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800aa46:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Instance = USB;
 800aa4a:	4b1d      	ldr	r3, [pc, #116]	; (800aac0 <USBD_LL_Init+0x84>)
 800aa4c:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800aa4e:	2308      	movs	r3, #8
 800aa50:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800aa52:	2302      	movs	r3, #2
 800aa54:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aa56:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800aa5c:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800aa5e:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800aa60:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aa62:	f7fa fb16 	bl	8005092 <HAL_PCD_Init>
 800aa66:	bb30      	cbnz	r0, 800aab6 <USBD_LL_Init+0x7a>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800aa68:	2318      	movs	r3, #24
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	4611      	mov	r1, r2
 800aa6e:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800aa72:	f7fb fa48 	bl	8005f06 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800aa76:	2358      	movs	r3, #88	; 0x58
 800aa78:	2200      	movs	r2, #0
 800aa7a:	2180      	movs	r1, #128	; 0x80
 800aa7c:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800aa80:	f7fb fa41 	bl	8005f06 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800aa84:	23c0      	movs	r3, #192	; 0xc0
 800aa86:	2200      	movs	r2, #0
 800aa88:	2181      	movs	r1, #129	; 0x81
 800aa8a:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800aa8e:	f7fb fa3a 	bl	8005f06 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800aa92:	f44f 7388 	mov.w	r3, #272	; 0x110
 800aa96:	2200      	movs	r2, #0
 800aa98:	2101      	movs	r1, #1
 800aa9a:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800aa9e:	f7fb fa32 	bl	8005f06 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800aaa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	2182      	movs	r1, #130	; 0x82
 800aaaa:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800aaae:	f7fb fa2a 	bl	8005f06 <HAL_PCDEx_PMAConfig>
}
 800aab2:	2000      	movs	r0, #0
 800aab4:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800aab6:	f7f7 f9bb 	bl	8001e30 <Error_Handler>
 800aaba:	e7d5      	b.n	800aa68 <USBD_LL_Init+0x2c>
 800aabc:	200021c0 	.word	0x200021c0
 800aac0:	40005c00 	.word	0x40005c00

0800aac4 <USBD_LL_Start>:
{
 800aac4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800aac6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800aaca:	f7fa fb54 	bl	8005176 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800aace:	f7ff ff1b 	bl	800a908 <USBD_Get_USB_Status>
}
 800aad2:	bd08      	pop	{r3, pc}

0800aad4 <USBD_LL_OpenEP>:
{
 800aad4:	b508      	push	{r3, lr}
 800aad6:	4694      	mov	ip, r2
 800aad8:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aada:	4663      	mov	r3, ip
 800aadc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800aae0:	f7fb f8da 	bl	8005c98 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800aae4:	f7ff ff10 	bl	800a908 <USBD_Get_USB_Status>
}
 800aae8:	bd08      	pop	{r3, pc}

0800aaea <USBD_LL_CloseEP>:
{
 800aaea:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aaec:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800aaf0:	f7fb f914 	bl	8005d1c <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaf4:	f7ff ff08 	bl	800a908 <USBD_Get_USB_Status>
}
 800aaf8:	bd08      	pop	{r3, pc}

0800aafa <USBD_LL_StallEP>:
{
 800aafa:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aafc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ab00:	f7fb f991 	bl	8005e26 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab04:	f7ff ff00 	bl	800a908 <USBD_Get_USB_Status>
}
 800ab08:	bd08      	pop	{r3, pc}

0800ab0a <USBD_LL_ClearStallEP>:
{
 800ab0a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ab0c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ab10:	f7fb f9be 	bl	8005e90 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab14:	f7ff fef8 	bl	800a908 <USBD_Get_USB_Status>
}
 800ab18:	bd08      	pop	{r3, pc}

0800ab1a <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab1a:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800ab1e:	f011 0f80 	tst.w	r1, #128	; 0x80
 800ab22:	d108      	bne.n	800ab36 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab24:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800ab28:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ab2c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ab30:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800ab34:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab36:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800ab3a:	3101      	adds	r1, #1
 800ab3c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ab40:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ab44:	7888      	ldrb	r0, [r1, #2]
 800ab46:	4770      	bx	lr

0800ab48 <USBD_LL_SetUSBAddress>:
{
 800ab48:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab4a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ab4e:	f7fa ffb6 	bl	8005abe <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab52:	f7ff fed9 	bl	800a908 <USBD_Get_USB_Status>
}
 800ab56:	bd08      	pop	{r3, pc}

0800ab58 <USBD_LL_Transmit>:
{
 800ab58:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab5a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ab5e:	f7fb f93a 	bl	8005dd6 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab62:	f7ff fed1 	bl	800a908 <USBD_Get_USB_Status>
}
 800ab66:	bd08      	pop	{r3, pc}

0800ab68 <USBD_LL_PrepareReceive>:
{
 800ab68:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab6a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ab6e:	f7fb f907 	bl	8005d80 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab72:	f7ff fec9 	bl	800a908 <USBD_Get_USB_Status>
}
 800ab76:	bd08      	pop	{r3, pc}

0800ab78 <USBD_LL_GetRxDataSize>:
{
 800ab78:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab7a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ab7e:	f7fb f921 	bl	8005dc4 <HAL_PCD_EP_GetRxCount>
}
 800ab82:	bd08      	pop	{r3, pc}

0800ab84 <HAL_PCDEx_LPM_Callback>:
{
 800ab84:	b510      	push	{r4, lr}
 800ab86:	4604      	mov	r4, r0
  switch (msg)
 800ab88:	b111      	cbz	r1, 800ab90 <HAL_PCDEx_LPM_Callback+0xc>
 800ab8a:	2901      	cmp	r1, #1
 800ab8c:	d00f      	beq.n	800abae <HAL_PCDEx_LPM_Callback+0x2a>
}
 800ab8e:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 800ab90:	6983      	ldr	r3, [r0, #24]
 800ab92:	b923      	cbnz	r3, 800ab9e <HAL_PCDEx_LPM_Callback+0x1a>
    USBD_LL_Resume(hpcd->pData);
 800ab94:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800ab98:	f7ff fa05 	bl	8009fa6 <USBD_LL_Resume>
    break;
 800ab9c:	e7f7      	b.n	800ab8e <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 800ab9e:	f7ff febd 	bl	800a91c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aba2:	4a09      	ldr	r2, [pc, #36]	; (800abc8 <HAL_PCDEx_LPM_Callback+0x44>)
 800aba4:	6913      	ldr	r3, [r2, #16]
 800aba6:	f023 0306 	bic.w	r3, r3, #6
 800abaa:	6113      	str	r3, [r2, #16]
 800abac:	e7f2      	b.n	800ab94 <HAL_PCDEx_LPM_Callback+0x10>
    USBD_LL_Suspend(hpcd->pData);
 800abae:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800abb2:	f7ff f9ee 	bl	8009f92 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800abb6:	69a3      	ldr	r3, [r4, #24]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d0e8      	beq.n	800ab8e <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800abbc:	4a02      	ldr	r2, [pc, #8]	; (800abc8 <HAL_PCDEx_LPM_Callback+0x44>)
 800abbe:	6913      	ldr	r3, [r2, #16]
 800abc0:	f043 0306 	orr.w	r3, r3, #6
 800abc4:	6113      	str	r3, [r2, #16]
}
 800abc6:	e7e2      	b.n	800ab8e <HAL_PCDEx_LPM_Callback+0xa>
 800abc8:	e000ed00 	.word	0xe000ed00

0800abcc <USBD_static_malloc>:
}
 800abcc:	4800      	ldr	r0, [pc, #0]	; (800abd0 <USBD_static_malloc+0x4>)
 800abce:	4770      	bx	lr
 800abd0:	200024b4 	.word	0x200024b4

0800abd4 <USBD_static_free>:
}
 800abd4:	4770      	bx	lr
	...

0800abd8 <__errno>:
 800abd8:	4b01      	ldr	r3, [pc, #4]	; (800abe0 <__errno+0x8>)
 800abda:	6818      	ldr	r0, [r3, #0]
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	20000184 	.word	0x20000184

0800abe4 <__libc_init_array>:
 800abe4:	b570      	push	{r4, r5, r6, lr}
 800abe6:	4d0d      	ldr	r5, [pc, #52]	; (800ac1c <__libc_init_array+0x38>)
 800abe8:	4c0d      	ldr	r4, [pc, #52]	; (800ac20 <__libc_init_array+0x3c>)
 800abea:	1b64      	subs	r4, r4, r5
 800abec:	10a4      	asrs	r4, r4, #2
 800abee:	2600      	movs	r6, #0
 800abf0:	42a6      	cmp	r6, r4
 800abf2:	d109      	bne.n	800ac08 <__libc_init_array+0x24>
 800abf4:	4d0b      	ldr	r5, [pc, #44]	; (800ac24 <__libc_init_array+0x40>)
 800abf6:	4c0c      	ldr	r4, [pc, #48]	; (800ac28 <__libc_init_array+0x44>)
 800abf8:	f004 fc96 	bl	800f528 <_init>
 800abfc:	1b64      	subs	r4, r4, r5
 800abfe:	10a4      	asrs	r4, r4, #2
 800ac00:	2600      	movs	r6, #0
 800ac02:	42a6      	cmp	r6, r4
 800ac04:	d105      	bne.n	800ac12 <__libc_init_array+0x2e>
 800ac06:	bd70      	pop	{r4, r5, r6, pc}
 800ac08:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac0c:	4798      	blx	r3
 800ac0e:	3601      	adds	r6, #1
 800ac10:	e7ee      	b.n	800abf0 <__libc_init_array+0xc>
 800ac12:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac16:	4798      	blx	r3
 800ac18:	3601      	adds	r6, #1
 800ac1a:	e7f2      	b.n	800ac02 <__libc_init_array+0x1e>
 800ac1c:	080106dc 	.word	0x080106dc
 800ac20:	080106dc 	.word	0x080106dc
 800ac24:	080106dc 	.word	0x080106dc
 800ac28:	080106e0 	.word	0x080106e0

0800ac2c <malloc>:
 800ac2c:	4b02      	ldr	r3, [pc, #8]	; (800ac38 <malloc+0xc>)
 800ac2e:	4601      	mov	r1, r0
 800ac30:	6818      	ldr	r0, [r3, #0]
 800ac32:	f000 b87f 	b.w	800ad34 <_malloc_r>
 800ac36:	bf00      	nop
 800ac38:	20000184 	.word	0x20000184

0800ac3c <free>:
 800ac3c:	4b02      	ldr	r3, [pc, #8]	; (800ac48 <free+0xc>)
 800ac3e:	4601      	mov	r1, r0
 800ac40:	6818      	ldr	r0, [r3, #0]
 800ac42:	f000 b80b 	b.w	800ac5c <_free_r>
 800ac46:	bf00      	nop
 800ac48:	20000184 	.word	0x20000184

0800ac4c <memset>:
 800ac4c:	4402      	add	r2, r0
 800ac4e:	4603      	mov	r3, r0
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d100      	bne.n	800ac56 <memset+0xa>
 800ac54:	4770      	bx	lr
 800ac56:	f803 1b01 	strb.w	r1, [r3], #1
 800ac5a:	e7f9      	b.n	800ac50 <memset+0x4>

0800ac5c <_free_r>:
 800ac5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac5e:	2900      	cmp	r1, #0
 800ac60:	d044      	beq.n	800acec <_free_r+0x90>
 800ac62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac66:	9001      	str	r0, [sp, #4]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f1a1 0404 	sub.w	r4, r1, #4
 800ac6e:	bfb8      	it	lt
 800ac70:	18e4      	addlt	r4, r4, r3
 800ac72:	f003 f83f 	bl	800dcf4 <__malloc_lock>
 800ac76:	4a1e      	ldr	r2, [pc, #120]	; (800acf0 <_free_r+0x94>)
 800ac78:	9801      	ldr	r0, [sp, #4]
 800ac7a:	6813      	ldr	r3, [r2, #0]
 800ac7c:	b933      	cbnz	r3, 800ac8c <_free_r+0x30>
 800ac7e:	6063      	str	r3, [r4, #4]
 800ac80:	6014      	str	r4, [r2, #0]
 800ac82:	b003      	add	sp, #12
 800ac84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac88:	f003 b83a 	b.w	800dd00 <__malloc_unlock>
 800ac8c:	42a3      	cmp	r3, r4
 800ac8e:	d908      	bls.n	800aca2 <_free_r+0x46>
 800ac90:	6825      	ldr	r5, [r4, #0]
 800ac92:	1961      	adds	r1, r4, r5
 800ac94:	428b      	cmp	r3, r1
 800ac96:	bf01      	itttt	eq
 800ac98:	6819      	ldreq	r1, [r3, #0]
 800ac9a:	685b      	ldreq	r3, [r3, #4]
 800ac9c:	1949      	addeq	r1, r1, r5
 800ac9e:	6021      	streq	r1, [r4, #0]
 800aca0:	e7ed      	b.n	800ac7e <_free_r+0x22>
 800aca2:	461a      	mov	r2, r3
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	b10b      	cbz	r3, 800acac <_free_r+0x50>
 800aca8:	42a3      	cmp	r3, r4
 800acaa:	d9fa      	bls.n	800aca2 <_free_r+0x46>
 800acac:	6811      	ldr	r1, [r2, #0]
 800acae:	1855      	adds	r5, r2, r1
 800acb0:	42a5      	cmp	r5, r4
 800acb2:	d10b      	bne.n	800accc <_free_r+0x70>
 800acb4:	6824      	ldr	r4, [r4, #0]
 800acb6:	4421      	add	r1, r4
 800acb8:	1854      	adds	r4, r2, r1
 800acba:	42a3      	cmp	r3, r4
 800acbc:	6011      	str	r1, [r2, #0]
 800acbe:	d1e0      	bne.n	800ac82 <_free_r+0x26>
 800acc0:	681c      	ldr	r4, [r3, #0]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	6053      	str	r3, [r2, #4]
 800acc6:	4421      	add	r1, r4
 800acc8:	6011      	str	r1, [r2, #0]
 800acca:	e7da      	b.n	800ac82 <_free_r+0x26>
 800accc:	d902      	bls.n	800acd4 <_free_r+0x78>
 800acce:	230c      	movs	r3, #12
 800acd0:	6003      	str	r3, [r0, #0]
 800acd2:	e7d6      	b.n	800ac82 <_free_r+0x26>
 800acd4:	6825      	ldr	r5, [r4, #0]
 800acd6:	1961      	adds	r1, r4, r5
 800acd8:	428b      	cmp	r3, r1
 800acda:	bf04      	itt	eq
 800acdc:	6819      	ldreq	r1, [r3, #0]
 800acde:	685b      	ldreq	r3, [r3, #4]
 800ace0:	6063      	str	r3, [r4, #4]
 800ace2:	bf04      	itt	eq
 800ace4:	1949      	addeq	r1, r1, r5
 800ace6:	6021      	streq	r1, [r4, #0]
 800ace8:	6054      	str	r4, [r2, #4]
 800acea:	e7ca      	b.n	800ac82 <_free_r+0x26>
 800acec:	b003      	add	sp, #12
 800acee:	bd30      	pop	{r4, r5, pc}
 800acf0:	200026d4 	.word	0x200026d4

0800acf4 <sbrk_aligned>:
 800acf4:	b570      	push	{r4, r5, r6, lr}
 800acf6:	4e0e      	ldr	r6, [pc, #56]	; (800ad30 <sbrk_aligned+0x3c>)
 800acf8:	460c      	mov	r4, r1
 800acfa:	6831      	ldr	r1, [r6, #0]
 800acfc:	4605      	mov	r5, r0
 800acfe:	b911      	cbnz	r1, 800ad06 <sbrk_aligned+0x12>
 800ad00:	f000 ff06 	bl	800bb10 <_sbrk_r>
 800ad04:	6030      	str	r0, [r6, #0]
 800ad06:	4621      	mov	r1, r4
 800ad08:	4628      	mov	r0, r5
 800ad0a:	f000 ff01 	bl	800bb10 <_sbrk_r>
 800ad0e:	1c43      	adds	r3, r0, #1
 800ad10:	d00a      	beq.n	800ad28 <sbrk_aligned+0x34>
 800ad12:	1cc4      	adds	r4, r0, #3
 800ad14:	f024 0403 	bic.w	r4, r4, #3
 800ad18:	42a0      	cmp	r0, r4
 800ad1a:	d007      	beq.n	800ad2c <sbrk_aligned+0x38>
 800ad1c:	1a21      	subs	r1, r4, r0
 800ad1e:	4628      	mov	r0, r5
 800ad20:	f000 fef6 	bl	800bb10 <_sbrk_r>
 800ad24:	3001      	adds	r0, #1
 800ad26:	d101      	bne.n	800ad2c <sbrk_aligned+0x38>
 800ad28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	bd70      	pop	{r4, r5, r6, pc}
 800ad30:	200026d8 	.word	0x200026d8

0800ad34 <_malloc_r>:
 800ad34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad38:	1ccd      	adds	r5, r1, #3
 800ad3a:	f025 0503 	bic.w	r5, r5, #3
 800ad3e:	3508      	adds	r5, #8
 800ad40:	2d0c      	cmp	r5, #12
 800ad42:	bf38      	it	cc
 800ad44:	250c      	movcc	r5, #12
 800ad46:	2d00      	cmp	r5, #0
 800ad48:	4607      	mov	r7, r0
 800ad4a:	db01      	blt.n	800ad50 <_malloc_r+0x1c>
 800ad4c:	42a9      	cmp	r1, r5
 800ad4e:	d905      	bls.n	800ad5c <_malloc_r+0x28>
 800ad50:	230c      	movs	r3, #12
 800ad52:	603b      	str	r3, [r7, #0]
 800ad54:	2600      	movs	r6, #0
 800ad56:	4630      	mov	r0, r6
 800ad58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad5c:	4e2e      	ldr	r6, [pc, #184]	; (800ae18 <_malloc_r+0xe4>)
 800ad5e:	f002 ffc9 	bl	800dcf4 <__malloc_lock>
 800ad62:	6833      	ldr	r3, [r6, #0]
 800ad64:	461c      	mov	r4, r3
 800ad66:	bb34      	cbnz	r4, 800adb6 <_malloc_r+0x82>
 800ad68:	4629      	mov	r1, r5
 800ad6a:	4638      	mov	r0, r7
 800ad6c:	f7ff ffc2 	bl	800acf4 <sbrk_aligned>
 800ad70:	1c43      	adds	r3, r0, #1
 800ad72:	4604      	mov	r4, r0
 800ad74:	d14d      	bne.n	800ae12 <_malloc_r+0xde>
 800ad76:	6834      	ldr	r4, [r6, #0]
 800ad78:	4626      	mov	r6, r4
 800ad7a:	2e00      	cmp	r6, #0
 800ad7c:	d140      	bne.n	800ae00 <_malloc_r+0xcc>
 800ad7e:	6823      	ldr	r3, [r4, #0]
 800ad80:	4631      	mov	r1, r6
 800ad82:	4638      	mov	r0, r7
 800ad84:	eb04 0803 	add.w	r8, r4, r3
 800ad88:	f000 fec2 	bl	800bb10 <_sbrk_r>
 800ad8c:	4580      	cmp	r8, r0
 800ad8e:	d13a      	bne.n	800ae06 <_malloc_r+0xd2>
 800ad90:	6821      	ldr	r1, [r4, #0]
 800ad92:	3503      	adds	r5, #3
 800ad94:	1a6d      	subs	r5, r5, r1
 800ad96:	f025 0503 	bic.w	r5, r5, #3
 800ad9a:	3508      	adds	r5, #8
 800ad9c:	2d0c      	cmp	r5, #12
 800ad9e:	bf38      	it	cc
 800ada0:	250c      	movcc	r5, #12
 800ada2:	4629      	mov	r1, r5
 800ada4:	4638      	mov	r0, r7
 800ada6:	f7ff ffa5 	bl	800acf4 <sbrk_aligned>
 800adaa:	3001      	adds	r0, #1
 800adac:	d02b      	beq.n	800ae06 <_malloc_r+0xd2>
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	442b      	add	r3, r5
 800adb2:	6023      	str	r3, [r4, #0]
 800adb4:	e00e      	b.n	800add4 <_malloc_r+0xa0>
 800adb6:	6822      	ldr	r2, [r4, #0]
 800adb8:	1b52      	subs	r2, r2, r5
 800adba:	d41e      	bmi.n	800adfa <_malloc_r+0xc6>
 800adbc:	2a0b      	cmp	r2, #11
 800adbe:	d916      	bls.n	800adee <_malloc_r+0xba>
 800adc0:	1961      	adds	r1, r4, r5
 800adc2:	42a3      	cmp	r3, r4
 800adc4:	6025      	str	r5, [r4, #0]
 800adc6:	bf18      	it	ne
 800adc8:	6059      	strne	r1, [r3, #4]
 800adca:	6863      	ldr	r3, [r4, #4]
 800adcc:	bf08      	it	eq
 800adce:	6031      	streq	r1, [r6, #0]
 800add0:	5162      	str	r2, [r4, r5]
 800add2:	604b      	str	r3, [r1, #4]
 800add4:	4638      	mov	r0, r7
 800add6:	f104 060b 	add.w	r6, r4, #11
 800adda:	f002 ff91 	bl	800dd00 <__malloc_unlock>
 800adde:	f026 0607 	bic.w	r6, r6, #7
 800ade2:	1d23      	adds	r3, r4, #4
 800ade4:	1af2      	subs	r2, r6, r3
 800ade6:	d0b6      	beq.n	800ad56 <_malloc_r+0x22>
 800ade8:	1b9b      	subs	r3, r3, r6
 800adea:	50a3      	str	r3, [r4, r2]
 800adec:	e7b3      	b.n	800ad56 <_malloc_r+0x22>
 800adee:	6862      	ldr	r2, [r4, #4]
 800adf0:	42a3      	cmp	r3, r4
 800adf2:	bf0c      	ite	eq
 800adf4:	6032      	streq	r2, [r6, #0]
 800adf6:	605a      	strne	r2, [r3, #4]
 800adf8:	e7ec      	b.n	800add4 <_malloc_r+0xa0>
 800adfa:	4623      	mov	r3, r4
 800adfc:	6864      	ldr	r4, [r4, #4]
 800adfe:	e7b2      	b.n	800ad66 <_malloc_r+0x32>
 800ae00:	4634      	mov	r4, r6
 800ae02:	6876      	ldr	r6, [r6, #4]
 800ae04:	e7b9      	b.n	800ad7a <_malloc_r+0x46>
 800ae06:	230c      	movs	r3, #12
 800ae08:	603b      	str	r3, [r7, #0]
 800ae0a:	4638      	mov	r0, r7
 800ae0c:	f002 ff78 	bl	800dd00 <__malloc_unlock>
 800ae10:	e7a1      	b.n	800ad56 <_malloc_r+0x22>
 800ae12:	6025      	str	r5, [r4, #0]
 800ae14:	e7de      	b.n	800add4 <_malloc_r+0xa0>
 800ae16:	bf00      	nop
 800ae18:	200026d4 	.word	0x200026d4

0800ae1c <__cvt>:
 800ae1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae20:	ec55 4b10 	vmov	r4, r5, d0
 800ae24:	2d00      	cmp	r5, #0
 800ae26:	460e      	mov	r6, r1
 800ae28:	4619      	mov	r1, r3
 800ae2a:	462b      	mov	r3, r5
 800ae2c:	bfbb      	ittet	lt
 800ae2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ae32:	461d      	movlt	r5, r3
 800ae34:	2300      	movge	r3, #0
 800ae36:	232d      	movlt	r3, #45	; 0x2d
 800ae38:	700b      	strb	r3, [r1, #0]
 800ae3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ae40:	4691      	mov	r9, r2
 800ae42:	f023 0820 	bic.w	r8, r3, #32
 800ae46:	bfbc      	itt	lt
 800ae48:	4622      	movlt	r2, r4
 800ae4a:	4614      	movlt	r4, r2
 800ae4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae50:	d005      	beq.n	800ae5e <__cvt+0x42>
 800ae52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae56:	d100      	bne.n	800ae5a <__cvt+0x3e>
 800ae58:	3601      	adds	r6, #1
 800ae5a:	2102      	movs	r1, #2
 800ae5c:	e000      	b.n	800ae60 <__cvt+0x44>
 800ae5e:	2103      	movs	r1, #3
 800ae60:	ab03      	add	r3, sp, #12
 800ae62:	9301      	str	r3, [sp, #4]
 800ae64:	ab02      	add	r3, sp, #8
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	ec45 4b10 	vmov	d0, r4, r5
 800ae6c:	4653      	mov	r3, sl
 800ae6e:	4632      	mov	r2, r6
 800ae70:	f001 fdbe 	bl	800c9f0 <_dtoa_r>
 800ae74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ae78:	4607      	mov	r7, r0
 800ae7a:	d102      	bne.n	800ae82 <__cvt+0x66>
 800ae7c:	f019 0f01 	tst.w	r9, #1
 800ae80:	d022      	beq.n	800aec8 <__cvt+0xac>
 800ae82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae86:	eb07 0906 	add.w	r9, r7, r6
 800ae8a:	d110      	bne.n	800aeae <__cvt+0x92>
 800ae8c:	783b      	ldrb	r3, [r7, #0]
 800ae8e:	2b30      	cmp	r3, #48	; 0x30
 800ae90:	d10a      	bne.n	800aea8 <__cvt+0x8c>
 800ae92:	2200      	movs	r2, #0
 800ae94:	2300      	movs	r3, #0
 800ae96:	4620      	mov	r0, r4
 800ae98:	4629      	mov	r1, r5
 800ae9a:	f7f5 fe3d 	bl	8000b18 <__aeabi_dcmpeq>
 800ae9e:	b918      	cbnz	r0, 800aea8 <__cvt+0x8c>
 800aea0:	f1c6 0601 	rsb	r6, r6, #1
 800aea4:	f8ca 6000 	str.w	r6, [sl]
 800aea8:	f8da 3000 	ldr.w	r3, [sl]
 800aeac:	4499      	add	r9, r3
 800aeae:	2200      	movs	r2, #0
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	4629      	mov	r1, r5
 800aeb6:	f7f5 fe2f 	bl	8000b18 <__aeabi_dcmpeq>
 800aeba:	b108      	cbz	r0, 800aec0 <__cvt+0xa4>
 800aebc:	f8cd 900c 	str.w	r9, [sp, #12]
 800aec0:	2230      	movs	r2, #48	; 0x30
 800aec2:	9b03      	ldr	r3, [sp, #12]
 800aec4:	454b      	cmp	r3, r9
 800aec6:	d307      	bcc.n	800aed8 <__cvt+0xbc>
 800aec8:	9b03      	ldr	r3, [sp, #12]
 800aeca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aecc:	1bdb      	subs	r3, r3, r7
 800aece:	4638      	mov	r0, r7
 800aed0:	6013      	str	r3, [r2, #0]
 800aed2:	b004      	add	sp, #16
 800aed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed8:	1c59      	adds	r1, r3, #1
 800aeda:	9103      	str	r1, [sp, #12]
 800aedc:	701a      	strb	r2, [r3, #0]
 800aede:	e7f0      	b.n	800aec2 <__cvt+0xa6>

0800aee0 <__exponent>:
 800aee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aee2:	4603      	mov	r3, r0
 800aee4:	2900      	cmp	r1, #0
 800aee6:	bfb8      	it	lt
 800aee8:	4249      	neglt	r1, r1
 800aeea:	f803 2b02 	strb.w	r2, [r3], #2
 800aeee:	bfb4      	ite	lt
 800aef0:	222d      	movlt	r2, #45	; 0x2d
 800aef2:	222b      	movge	r2, #43	; 0x2b
 800aef4:	2909      	cmp	r1, #9
 800aef6:	7042      	strb	r2, [r0, #1]
 800aef8:	dd2a      	ble.n	800af50 <__exponent+0x70>
 800aefa:	f10d 0407 	add.w	r4, sp, #7
 800aefe:	46a4      	mov	ip, r4
 800af00:	270a      	movs	r7, #10
 800af02:	46a6      	mov	lr, r4
 800af04:	460a      	mov	r2, r1
 800af06:	fb91 f6f7 	sdiv	r6, r1, r7
 800af0a:	fb07 1516 	mls	r5, r7, r6, r1
 800af0e:	3530      	adds	r5, #48	; 0x30
 800af10:	2a63      	cmp	r2, #99	; 0x63
 800af12:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800af16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800af1a:	4631      	mov	r1, r6
 800af1c:	dcf1      	bgt.n	800af02 <__exponent+0x22>
 800af1e:	3130      	adds	r1, #48	; 0x30
 800af20:	f1ae 0502 	sub.w	r5, lr, #2
 800af24:	f804 1c01 	strb.w	r1, [r4, #-1]
 800af28:	1c44      	adds	r4, r0, #1
 800af2a:	4629      	mov	r1, r5
 800af2c:	4561      	cmp	r1, ip
 800af2e:	d30a      	bcc.n	800af46 <__exponent+0x66>
 800af30:	f10d 0209 	add.w	r2, sp, #9
 800af34:	eba2 020e 	sub.w	r2, r2, lr
 800af38:	4565      	cmp	r5, ip
 800af3a:	bf88      	it	hi
 800af3c:	2200      	movhi	r2, #0
 800af3e:	4413      	add	r3, r2
 800af40:	1a18      	subs	r0, r3, r0
 800af42:	b003      	add	sp, #12
 800af44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af4a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800af4e:	e7ed      	b.n	800af2c <__exponent+0x4c>
 800af50:	2330      	movs	r3, #48	; 0x30
 800af52:	3130      	adds	r1, #48	; 0x30
 800af54:	7083      	strb	r3, [r0, #2]
 800af56:	70c1      	strb	r1, [r0, #3]
 800af58:	1d03      	adds	r3, r0, #4
 800af5a:	e7f1      	b.n	800af40 <__exponent+0x60>

0800af5c <_printf_float>:
 800af5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af60:	ed2d 8b02 	vpush	{d8}
 800af64:	b08d      	sub	sp, #52	; 0x34
 800af66:	460c      	mov	r4, r1
 800af68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800af6c:	4616      	mov	r6, r2
 800af6e:	461f      	mov	r7, r3
 800af70:	4605      	mov	r5, r0
 800af72:	f002 fe9b 	bl	800dcac <_localeconv_r>
 800af76:	f8d0 a000 	ldr.w	sl, [r0]
 800af7a:	4650      	mov	r0, sl
 800af7c:	f7f5 f950 	bl	8000220 <strlen>
 800af80:	2300      	movs	r3, #0
 800af82:	930a      	str	r3, [sp, #40]	; 0x28
 800af84:	6823      	ldr	r3, [r4, #0]
 800af86:	9305      	str	r3, [sp, #20]
 800af88:	f8d8 3000 	ldr.w	r3, [r8]
 800af8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800af90:	3307      	adds	r3, #7
 800af92:	f023 0307 	bic.w	r3, r3, #7
 800af96:	f103 0208 	add.w	r2, r3, #8
 800af9a:	f8c8 2000 	str.w	r2, [r8]
 800af9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800afa6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800afaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800afae:	9307      	str	r3, [sp, #28]
 800afb0:	f8cd 8018 	str.w	r8, [sp, #24]
 800afb4:	ee08 0a10 	vmov	s16, r0
 800afb8:	4b9f      	ldr	r3, [pc, #636]	; (800b238 <_printf_float+0x2dc>)
 800afba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afc2:	f7f5 fddb 	bl	8000b7c <__aeabi_dcmpun>
 800afc6:	bb88      	cbnz	r0, 800b02c <_printf_float+0xd0>
 800afc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afcc:	4b9a      	ldr	r3, [pc, #616]	; (800b238 <_printf_float+0x2dc>)
 800afce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afd2:	f7f5 fdb5 	bl	8000b40 <__aeabi_dcmple>
 800afd6:	bb48      	cbnz	r0, 800b02c <_printf_float+0xd0>
 800afd8:	2200      	movs	r2, #0
 800afda:	2300      	movs	r3, #0
 800afdc:	4640      	mov	r0, r8
 800afde:	4649      	mov	r1, r9
 800afe0:	f7f5 fda4 	bl	8000b2c <__aeabi_dcmplt>
 800afe4:	b110      	cbz	r0, 800afec <_printf_float+0x90>
 800afe6:	232d      	movs	r3, #45	; 0x2d
 800afe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afec:	4b93      	ldr	r3, [pc, #588]	; (800b23c <_printf_float+0x2e0>)
 800afee:	4894      	ldr	r0, [pc, #592]	; (800b240 <_printf_float+0x2e4>)
 800aff0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aff4:	bf94      	ite	ls
 800aff6:	4698      	movls	r8, r3
 800aff8:	4680      	movhi	r8, r0
 800affa:	2303      	movs	r3, #3
 800affc:	6123      	str	r3, [r4, #16]
 800affe:	9b05      	ldr	r3, [sp, #20]
 800b000:	f023 0204 	bic.w	r2, r3, #4
 800b004:	6022      	str	r2, [r4, #0]
 800b006:	f04f 0900 	mov.w	r9, #0
 800b00a:	9700      	str	r7, [sp, #0]
 800b00c:	4633      	mov	r3, r6
 800b00e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b010:	4621      	mov	r1, r4
 800b012:	4628      	mov	r0, r5
 800b014:	f000 f9d8 	bl	800b3c8 <_printf_common>
 800b018:	3001      	adds	r0, #1
 800b01a:	f040 8090 	bne.w	800b13e <_printf_float+0x1e2>
 800b01e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b022:	b00d      	add	sp, #52	; 0x34
 800b024:	ecbd 8b02 	vpop	{d8}
 800b028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b02c:	4642      	mov	r2, r8
 800b02e:	464b      	mov	r3, r9
 800b030:	4640      	mov	r0, r8
 800b032:	4649      	mov	r1, r9
 800b034:	f7f5 fda2 	bl	8000b7c <__aeabi_dcmpun>
 800b038:	b140      	cbz	r0, 800b04c <_printf_float+0xf0>
 800b03a:	464b      	mov	r3, r9
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	bfbc      	itt	lt
 800b040:	232d      	movlt	r3, #45	; 0x2d
 800b042:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b046:	487f      	ldr	r0, [pc, #508]	; (800b244 <_printf_float+0x2e8>)
 800b048:	4b7f      	ldr	r3, [pc, #508]	; (800b248 <_printf_float+0x2ec>)
 800b04a:	e7d1      	b.n	800aff0 <_printf_float+0x94>
 800b04c:	6863      	ldr	r3, [r4, #4]
 800b04e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b052:	9206      	str	r2, [sp, #24]
 800b054:	1c5a      	adds	r2, r3, #1
 800b056:	d13f      	bne.n	800b0d8 <_printf_float+0x17c>
 800b058:	2306      	movs	r3, #6
 800b05a:	6063      	str	r3, [r4, #4]
 800b05c:	9b05      	ldr	r3, [sp, #20]
 800b05e:	6861      	ldr	r1, [r4, #4]
 800b060:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b064:	2300      	movs	r3, #0
 800b066:	9303      	str	r3, [sp, #12]
 800b068:	ab0a      	add	r3, sp, #40	; 0x28
 800b06a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b06e:	ab09      	add	r3, sp, #36	; 0x24
 800b070:	ec49 8b10 	vmov	d0, r8, r9
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	6022      	str	r2, [r4, #0]
 800b078:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b07c:	4628      	mov	r0, r5
 800b07e:	f7ff fecd 	bl	800ae1c <__cvt>
 800b082:	9b06      	ldr	r3, [sp, #24]
 800b084:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b086:	2b47      	cmp	r3, #71	; 0x47
 800b088:	4680      	mov	r8, r0
 800b08a:	d108      	bne.n	800b09e <_printf_float+0x142>
 800b08c:	1cc8      	adds	r0, r1, #3
 800b08e:	db02      	blt.n	800b096 <_printf_float+0x13a>
 800b090:	6863      	ldr	r3, [r4, #4]
 800b092:	4299      	cmp	r1, r3
 800b094:	dd41      	ble.n	800b11a <_printf_float+0x1be>
 800b096:	f1ab 0b02 	sub.w	fp, fp, #2
 800b09a:	fa5f fb8b 	uxtb.w	fp, fp
 800b09e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b0a2:	d820      	bhi.n	800b0e6 <_printf_float+0x18a>
 800b0a4:	3901      	subs	r1, #1
 800b0a6:	465a      	mov	r2, fp
 800b0a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b0ac:	9109      	str	r1, [sp, #36]	; 0x24
 800b0ae:	f7ff ff17 	bl	800aee0 <__exponent>
 800b0b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0b4:	1813      	adds	r3, r2, r0
 800b0b6:	2a01      	cmp	r2, #1
 800b0b8:	4681      	mov	r9, r0
 800b0ba:	6123      	str	r3, [r4, #16]
 800b0bc:	dc02      	bgt.n	800b0c4 <_printf_float+0x168>
 800b0be:	6822      	ldr	r2, [r4, #0]
 800b0c0:	07d2      	lsls	r2, r2, #31
 800b0c2:	d501      	bpl.n	800b0c8 <_printf_float+0x16c>
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	6123      	str	r3, [r4, #16]
 800b0c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d09c      	beq.n	800b00a <_printf_float+0xae>
 800b0d0:	232d      	movs	r3, #45	; 0x2d
 800b0d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0d6:	e798      	b.n	800b00a <_printf_float+0xae>
 800b0d8:	9a06      	ldr	r2, [sp, #24]
 800b0da:	2a47      	cmp	r2, #71	; 0x47
 800b0dc:	d1be      	bne.n	800b05c <_printf_float+0x100>
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1bc      	bne.n	800b05c <_printf_float+0x100>
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e7b9      	b.n	800b05a <_printf_float+0xfe>
 800b0e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b0ea:	d118      	bne.n	800b11e <_printf_float+0x1c2>
 800b0ec:	2900      	cmp	r1, #0
 800b0ee:	6863      	ldr	r3, [r4, #4]
 800b0f0:	dd0b      	ble.n	800b10a <_printf_float+0x1ae>
 800b0f2:	6121      	str	r1, [r4, #16]
 800b0f4:	b913      	cbnz	r3, 800b0fc <_printf_float+0x1a0>
 800b0f6:	6822      	ldr	r2, [r4, #0]
 800b0f8:	07d0      	lsls	r0, r2, #31
 800b0fa:	d502      	bpl.n	800b102 <_printf_float+0x1a6>
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	440b      	add	r3, r1
 800b100:	6123      	str	r3, [r4, #16]
 800b102:	65a1      	str	r1, [r4, #88]	; 0x58
 800b104:	f04f 0900 	mov.w	r9, #0
 800b108:	e7de      	b.n	800b0c8 <_printf_float+0x16c>
 800b10a:	b913      	cbnz	r3, 800b112 <_printf_float+0x1b6>
 800b10c:	6822      	ldr	r2, [r4, #0]
 800b10e:	07d2      	lsls	r2, r2, #31
 800b110:	d501      	bpl.n	800b116 <_printf_float+0x1ba>
 800b112:	3302      	adds	r3, #2
 800b114:	e7f4      	b.n	800b100 <_printf_float+0x1a4>
 800b116:	2301      	movs	r3, #1
 800b118:	e7f2      	b.n	800b100 <_printf_float+0x1a4>
 800b11a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b11e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b120:	4299      	cmp	r1, r3
 800b122:	db05      	blt.n	800b130 <_printf_float+0x1d4>
 800b124:	6823      	ldr	r3, [r4, #0]
 800b126:	6121      	str	r1, [r4, #16]
 800b128:	07d8      	lsls	r0, r3, #31
 800b12a:	d5ea      	bpl.n	800b102 <_printf_float+0x1a6>
 800b12c:	1c4b      	adds	r3, r1, #1
 800b12e:	e7e7      	b.n	800b100 <_printf_float+0x1a4>
 800b130:	2900      	cmp	r1, #0
 800b132:	bfd4      	ite	le
 800b134:	f1c1 0202 	rsble	r2, r1, #2
 800b138:	2201      	movgt	r2, #1
 800b13a:	4413      	add	r3, r2
 800b13c:	e7e0      	b.n	800b100 <_printf_float+0x1a4>
 800b13e:	6823      	ldr	r3, [r4, #0]
 800b140:	055a      	lsls	r2, r3, #21
 800b142:	d407      	bmi.n	800b154 <_printf_float+0x1f8>
 800b144:	6923      	ldr	r3, [r4, #16]
 800b146:	4642      	mov	r2, r8
 800b148:	4631      	mov	r1, r6
 800b14a:	4628      	mov	r0, r5
 800b14c:	47b8      	blx	r7
 800b14e:	3001      	adds	r0, #1
 800b150:	d12c      	bne.n	800b1ac <_printf_float+0x250>
 800b152:	e764      	b.n	800b01e <_printf_float+0xc2>
 800b154:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b158:	f240 80e0 	bls.w	800b31c <_printf_float+0x3c0>
 800b15c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b160:	2200      	movs	r2, #0
 800b162:	2300      	movs	r3, #0
 800b164:	f7f5 fcd8 	bl	8000b18 <__aeabi_dcmpeq>
 800b168:	2800      	cmp	r0, #0
 800b16a:	d034      	beq.n	800b1d6 <_printf_float+0x27a>
 800b16c:	4a37      	ldr	r2, [pc, #220]	; (800b24c <_printf_float+0x2f0>)
 800b16e:	2301      	movs	r3, #1
 800b170:	4631      	mov	r1, r6
 800b172:	4628      	mov	r0, r5
 800b174:	47b8      	blx	r7
 800b176:	3001      	adds	r0, #1
 800b178:	f43f af51 	beq.w	800b01e <_printf_float+0xc2>
 800b17c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b180:	429a      	cmp	r2, r3
 800b182:	db02      	blt.n	800b18a <_printf_float+0x22e>
 800b184:	6823      	ldr	r3, [r4, #0]
 800b186:	07d8      	lsls	r0, r3, #31
 800b188:	d510      	bpl.n	800b1ac <_printf_float+0x250>
 800b18a:	ee18 3a10 	vmov	r3, s16
 800b18e:	4652      	mov	r2, sl
 800b190:	4631      	mov	r1, r6
 800b192:	4628      	mov	r0, r5
 800b194:	47b8      	blx	r7
 800b196:	3001      	adds	r0, #1
 800b198:	f43f af41 	beq.w	800b01e <_printf_float+0xc2>
 800b19c:	f04f 0800 	mov.w	r8, #0
 800b1a0:	f104 091a 	add.w	r9, r4, #26
 800b1a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	4543      	cmp	r3, r8
 800b1aa:	dc09      	bgt.n	800b1c0 <_printf_float+0x264>
 800b1ac:	6823      	ldr	r3, [r4, #0]
 800b1ae:	079b      	lsls	r3, r3, #30
 800b1b0:	f100 8105 	bmi.w	800b3be <_printf_float+0x462>
 800b1b4:	68e0      	ldr	r0, [r4, #12]
 800b1b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1b8:	4298      	cmp	r0, r3
 800b1ba:	bfb8      	it	lt
 800b1bc:	4618      	movlt	r0, r3
 800b1be:	e730      	b.n	800b022 <_printf_float+0xc6>
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	464a      	mov	r2, r9
 800b1c4:	4631      	mov	r1, r6
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	47b8      	blx	r7
 800b1ca:	3001      	adds	r0, #1
 800b1cc:	f43f af27 	beq.w	800b01e <_printf_float+0xc2>
 800b1d0:	f108 0801 	add.w	r8, r8, #1
 800b1d4:	e7e6      	b.n	800b1a4 <_printf_float+0x248>
 800b1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	dc39      	bgt.n	800b250 <_printf_float+0x2f4>
 800b1dc:	4a1b      	ldr	r2, [pc, #108]	; (800b24c <_printf_float+0x2f0>)
 800b1de:	2301      	movs	r3, #1
 800b1e0:	4631      	mov	r1, r6
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	47b8      	blx	r7
 800b1e6:	3001      	adds	r0, #1
 800b1e8:	f43f af19 	beq.w	800b01e <_printf_float+0xc2>
 800b1ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	d102      	bne.n	800b1fa <_printf_float+0x29e>
 800b1f4:	6823      	ldr	r3, [r4, #0]
 800b1f6:	07d9      	lsls	r1, r3, #31
 800b1f8:	d5d8      	bpl.n	800b1ac <_printf_float+0x250>
 800b1fa:	ee18 3a10 	vmov	r3, s16
 800b1fe:	4652      	mov	r2, sl
 800b200:	4631      	mov	r1, r6
 800b202:	4628      	mov	r0, r5
 800b204:	47b8      	blx	r7
 800b206:	3001      	adds	r0, #1
 800b208:	f43f af09 	beq.w	800b01e <_printf_float+0xc2>
 800b20c:	f04f 0900 	mov.w	r9, #0
 800b210:	f104 0a1a 	add.w	sl, r4, #26
 800b214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b216:	425b      	negs	r3, r3
 800b218:	454b      	cmp	r3, r9
 800b21a:	dc01      	bgt.n	800b220 <_printf_float+0x2c4>
 800b21c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b21e:	e792      	b.n	800b146 <_printf_float+0x1ea>
 800b220:	2301      	movs	r3, #1
 800b222:	4652      	mov	r2, sl
 800b224:	4631      	mov	r1, r6
 800b226:	4628      	mov	r0, r5
 800b228:	47b8      	blx	r7
 800b22a:	3001      	adds	r0, #1
 800b22c:	f43f aef7 	beq.w	800b01e <_printf_float+0xc2>
 800b230:	f109 0901 	add.w	r9, r9, #1
 800b234:	e7ee      	b.n	800b214 <_printf_float+0x2b8>
 800b236:	bf00      	nop
 800b238:	7fefffff 	.word	0x7fefffff
 800b23c:	08010230 	.word	0x08010230
 800b240:	08010234 	.word	0x08010234
 800b244:	0801023c 	.word	0x0801023c
 800b248:	08010238 	.word	0x08010238
 800b24c:	08010240 	.word	0x08010240
 800b250:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b252:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b254:	429a      	cmp	r2, r3
 800b256:	bfa8      	it	ge
 800b258:	461a      	movge	r2, r3
 800b25a:	2a00      	cmp	r2, #0
 800b25c:	4691      	mov	r9, r2
 800b25e:	dc37      	bgt.n	800b2d0 <_printf_float+0x374>
 800b260:	f04f 0b00 	mov.w	fp, #0
 800b264:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b268:	f104 021a 	add.w	r2, r4, #26
 800b26c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b26e:	9305      	str	r3, [sp, #20]
 800b270:	eba3 0309 	sub.w	r3, r3, r9
 800b274:	455b      	cmp	r3, fp
 800b276:	dc33      	bgt.n	800b2e0 <_printf_float+0x384>
 800b278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b27c:	429a      	cmp	r2, r3
 800b27e:	db3b      	blt.n	800b2f8 <_printf_float+0x39c>
 800b280:	6823      	ldr	r3, [r4, #0]
 800b282:	07da      	lsls	r2, r3, #31
 800b284:	d438      	bmi.n	800b2f8 <_printf_float+0x39c>
 800b286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b288:	9a05      	ldr	r2, [sp, #20]
 800b28a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b28c:	1a9a      	subs	r2, r3, r2
 800b28e:	eba3 0901 	sub.w	r9, r3, r1
 800b292:	4591      	cmp	r9, r2
 800b294:	bfa8      	it	ge
 800b296:	4691      	movge	r9, r2
 800b298:	f1b9 0f00 	cmp.w	r9, #0
 800b29c:	dc35      	bgt.n	800b30a <_printf_float+0x3ae>
 800b29e:	f04f 0800 	mov.w	r8, #0
 800b2a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2a6:	f104 0a1a 	add.w	sl, r4, #26
 800b2aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2ae:	1a9b      	subs	r3, r3, r2
 800b2b0:	eba3 0309 	sub.w	r3, r3, r9
 800b2b4:	4543      	cmp	r3, r8
 800b2b6:	f77f af79 	ble.w	800b1ac <_printf_float+0x250>
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	4652      	mov	r2, sl
 800b2be:	4631      	mov	r1, r6
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	47b8      	blx	r7
 800b2c4:	3001      	adds	r0, #1
 800b2c6:	f43f aeaa 	beq.w	800b01e <_printf_float+0xc2>
 800b2ca:	f108 0801 	add.w	r8, r8, #1
 800b2ce:	e7ec      	b.n	800b2aa <_printf_float+0x34e>
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	4642      	mov	r2, r8
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	47b8      	blx	r7
 800b2da:	3001      	adds	r0, #1
 800b2dc:	d1c0      	bne.n	800b260 <_printf_float+0x304>
 800b2de:	e69e      	b.n	800b01e <_printf_float+0xc2>
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	4631      	mov	r1, r6
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	9205      	str	r2, [sp, #20]
 800b2e8:	47b8      	blx	r7
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	f43f ae97 	beq.w	800b01e <_printf_float+0xc2>
 800b2f0:	9a05      	ldr	r2, [sp, #20]
 800b2f2:	f10b 0b01 	add.w	fp, fp, #1
 800b2f6:	e7b9      	b.n	800b26c <_printf_float+0x310>
 800b2f8:	ee18 3a10 	vmov	r3, s16
 800b2fc:	4652      	mov	r2, sl
 800b2fe:	4631      	mov	r1, r6
 800b300:	4628      	mov	r0, r5
 800b302:	47b8      	blx	r7
 800b304:	3001      	adds	r0, #1
 800b306:	d1be      	bne.n	800b286 <_printf_float+0x32a>
 800b308:	e689      	b.n	800b01e <_printf_float+0xc2>
 800b30a:	9a05      	ldr	r2, [sp, #20]
 800b30c:	464b      	mov	r3, r9
 800b30e:	4442      	add	r2, r8
 800b310:	4631      	mov	r1, r6
 800b312:	4628      	mov	r0, r5
 800b314:	47b8      	blx	r7
 800b316:	3001      	adds	r0, #1
 800b318:	d1c1      	bne.n	800b29e <_printf_float+0x342>
 800b31a:	e680      	b.n	800b01e <_printf_float+0xc2>
 800b31c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b31e:	2a01      	cmp	r2, #1
 800b320:	dc01      	bgt.n	800b326 <_printf_float+0x3ca>
 800b322:	07db      	lsls	r3, r3, #31
 800b324:	d538      	bpl.n	800b398 <_printf_float+0x43c>
 800b326:	2301      	movs	r3, #1
 800b328:	4642      	mov	r2, r8
 800b32a:	4631      	mov	r1, r6
 800b32c:	4628      	mov	r0, r5
 800b32e:	47b8      	blx	r7
 800b330:	3001      	adds	r0, #1
 800b332:	f43f ae74 	beq.w	800b01e <_printf_float+0xc2>
 800b336:	ee18 3a10 	vmov	r3, s16
 800b33a:	4652      	mov	r2, sl
 800b33c:	4631      	mov	r1, r6
 800b33e:	4628      	mov	r0, r5
 800b340:	47b8      	blx	r7
 800b342:	3001      	adds	r0, #1
 800b344:	f43f ae6b 	beq.w	800b01e <_printf_float+0xc2>
 800b348:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b34c:	2200      	movs	r2, #0
 800b34e:	2300      	movs	r3, #0
 800b350:	f7f5 fbe2 	bl	8000b18 <__aeabi_dcmpeq>
 800b354:	b9d8      	cbnz	r0, 800b38e <_printf_float+0x432>
 800b356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b358:	f108 0201 	add.w	r2, r8, #1
 800b35c:	3b01      	subs	r3, #1
 800b35e:	4631      	mov	r1, r6
 800b360:	4628      	mov	r0, r5
 800b362:	47b8      	blx	r7
 800b364:	3001      	adds	r0, #1
 800b366:	d10e      	bne.n	800b386 <_printf_float+0x42a>
 800b368:	e659      	b.n	800b01e <_printf_float+0xc2>
 800b36a:	2301      	movs	r3, #1
 800b36c:	4652      	mov	r2, sl
 800b36e:	4631      	mov	r1, r6
 800b370:	4628      	mov	r0, r5
 800b372:	47b8      	blx	r7
 800b374:	3001      	adds	r0, #1
 800b376:	f43f ae52 	beq.w	800b01e <_printf_float+0xc2>
 800b37a:	f108 0801 	add.w	r8, r8, #1
 800b37e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b380:	3b01      	subs	r3, #1
 800b382:	4543      	cmp	r3, r8
 800b384:	dcf1      	bgt.n	800b36a <_printf_float+0x40e>
 800b386:	464b      	mov	r3, r9
 800b388:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b38c:	e6dc      	b.n	800b148 <_printf_float+0x1ec>
 800b38e:	f04f 0800 	mov.w	r8, #0
 800b392:	f104 0a1a 	add.w	sl, r4, #26
 800b396:	e7f2      	b.n	800b37e <_printf_float+0x422>
 800b398:	2301      	movs	r3, #1
 800b39a:	4642      	mov	r2, r8
 800b39c:	e7df      	b.n	800b35e <_printf_float+0x402>
 800b39e:	2301      	movs	r3, #1
 800b3a0:	464a      	mov	r2, r9
 800b3a2:	4631      	mov	r1, r6
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	47b8      	blx	r7
 800b3a8:	3001      	adds	r0, #1
 800b3aa:	f43f ae38 	beq.w	800b01e <_printf_float+0xc2>
 800b3ae:	f108 0801 	add.w	r8, r8, #1
 800b3b2:	68e3      	ldr	r3, [r4, #12]
 800b3b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3b6:	1a5b      	subs	r3, r3, r1
 800b3b8:	4543      	cmp	r3, r8
 800b3ba:	dcf0      	bgt.n	800b39e <_printf_float+0x442>
 800b3bc:	e6fa      	b.n	800b1b4 <_printf_float+0x258>
 800b3be:	f04f 0800 	mov.w	r8, #0
 800b3c2:	f104 0919 	add.w	r9, r4, #25
 800b3c6:	e7f4      	b.n	800b3b2 <_printf_float+0x456>

0800b3c8 <_printf_common>:
 800b3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3cc:	4616      	mov	r6, r2
 800b3ce:	4699      	mov	r9, r3
 800b3d0:	688a      	ldr	r2, [r1, #8]
 800b3d2:	690b      	ldr	r3, [r1, #16]
 800b3d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	bfb8      	it	lt
 800b3dc:	4613      	movlt	r3, r2
 800b3de:	6033      	str	r3, [r6, #0]
 800b3e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3e4:	4607      	mov	r7, r0
 800b3e6:	460c      	mov	r4, r1
 800b3e8:	b10a      	cbz	r2, 800b3ee <_printf_common+0x26>
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	6033      	str	r3, [r6, #0]
 800b3ee:	6823      	ldr	r3, [r4, #0]
 800b3f0:	0699      	lsls	r1, r3, #26
 800b3f2:	bf42      	ittt	mi
 800b3f4:	6833      	ldrmi	r3, [r6, #0]
 800b3f6:	3302      	addmi	r3, #2
 800b3f8:	6033      	strmi	r3, [r6, #0]
 800b3fa:	6825      	ldr	r5, [r4, #0]
 800b3fc:	f015 0506 	ands.w	r5, r5, #6
 800b400:	d106      	bne.n	800b410 <_printf_common+0x48>
 800b402:	f104 0a19 	add.w	sl, r4, #25
 800b406:	68e3      	ldr	r3, [r4, #12]
 800b408:	6832      	ldr	r2, [r6, #0]
 800b40a:	1a9b      	subs	r3, r3, r2
 800b40c:	42ab      	cmp	r3, r5
 800b40e:	dc26      	bgt.n	800b45e <_printf_common+0x96>
 800b410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b414:	1e13      	subs	r3, r2, #0
 800b416:	6822      	ldr	r2, [r4, #0]
 800b418:	bf18      	it	ne
 800b41a:	2301      	movne	r3, #1
 800b41c:	0692      	lsls	r2, r2, #26
 800b41e:	d42b      	bmi.n	800b478 <_printf_common+0xb0>
 800b420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b424:	4649      	mov	r1, r9
 800b426:	4638      	mov	r0, r7
 800b428:	47c0      	blx	r8
 800b42a:	3001      	adds	r0, #1
 800b42c:	d01e      	beq.n	800b46c <_printf_common+0xa4>
 800b42e:	6823      	ldr	r3, [r4, #0]
 800b430:	68e5      	ldr	r5, [r4, #12]
 800b432:	6832      	ldr	r2, [r6, #0]
 800b434:	f003 0306 	and.w	r3, r3, #6
 800b438:	2b04      	cmp	r3, #4
 800b43a:	bf08      	it	eq
 800b43c:	1aad      	subeq	r5, r5, r2
 800b43e:	68a3      	ldr	r3, [r4, #8]
 800b440:	6922      	ldr	r2, [r4, #16]
 800b442:	bf0c      	ite	eq
 800b444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b448:	2500      	movne	r5, #0
 800b44a:	4293      	cmp	r3, r2
 800b44c:	bfc4      	itt	gt
 800b44e:	1a9b      	subgt	r3, r3, r2
 800b450:	18ed      	addgt	r5, r5, r3
 800b452:	2600      	movs	r6, #0
 800b454:	341a      	adds	r4, #26
 800b456:	42b5      	cmp	r5, r6
 800b458:	d11a      	bne.n	800b490 <_printf_common+0xc8>
 800b45a:	2000      	movs	r0, #0
 800b45c:	e008      	b.n	800b470 <_printf_common+0xa8>
 800b45e:	2301      	movs	r3, #1
 800b460:	4652      	mov	r2, sl
 800b462:	4649      	mov	r1, r9
 800b464:	4638      	mov	r0, r7
 800b466:	47c0      	blx	r8
 800b468:	3001      	adds	r0, #1
 800b46a:	d103      	bne.n	800b474 <_printf_common+0xac>
 800b46c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b474:	3501      	adds	r5, #1
 800b476:	e7c6      	b.n	800b406 <_printf_common+0x3e>
 800b478:	18e1      	adds	r1, r4, r3
 800b47a:	1c5a      	adds	r2, r3, #1
 800b47c:	2030      	movs	r0, #48	; 0x30
 800b47e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b482:	4422      	add	r2, r4
 800b484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b48c:	3302      	adds	r3, #2
 800b48e:	e7c7      	b.n	800b420 <_printf_common+0x58>
 800b490:	2301      	movs	r3, #1
 800b492:	4622      	mov	r2, r4
 800b494:	4649      	mov	r1, r9
 800b496:	4638      	mov	r0, r7
 800b498:	47c0      	blx	r8
 800b49a:	3001      	adds	r0, #1
 800b49c:	d0e6      	beq.n	800b46c <_printf_common+0xa4>
 800b49e:	3601      	adds	r6, #1
 800b4a0:	e7d9      	b.n	800b456 <_printf_common+0x8e>
	...

0800b4a4 <_printf_i>:
 800b4a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a8:	7e0f      	ldrb	r7, [r1, #24]
 800b4aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4ac:	2f78      	cmp	r7, #120	; 0x78
 800b4ae:	4691      	mov	r9, r2
 800b4b0:	4680      	mov	r8, r0
 800b4b2:	460c      	mov	r4, r1
 800b4b4:	469a      	mov	sl, r3
 800b4b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4ba:	d807      	bhi.n	800b4cc <_printf_i+0x28>
 800b4bc:	2f62      	cmp	r7, #98	; 0x62
 800b4be:	d80a      	bhi.n	800b4d6 <_printf_i+0x32>
 800b4c0:	2f00      	cmp	r7, #0
 800b4c2:	f000 80d8 	beq.w	800b676 <_printf_i+0x1d2>
 800b4c6:	2f58      	cmp	r7, #88	; 0x58
 800b4c8:	f000 80a3 	beq.w	800b612 <_printf_i+0x16e>
 800b4cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4d4:	e03a      	b.n	800b54c <_printf_i+0xa8>
 800b4d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4da:	2b15      	cmp	r3, #21
 800b4dc:	d8f6      	bhi.n	800b4cc <_printf_i+0x28>
 800b4de:	a101      	add	r1, pc, #4	; (adr r1, 800b4e4 <_printf_i+0x40>)
 800b4e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4e4:	0800b53d 	.word	0x0800b53d
 800b4e8:	0800b551 	.word	0x0800b551
 800b4ec:	0800b4cd 	.word	0x0800b4cd
 800b4f0:	0800b4cd 	.word	0x0800b4cd
 800b4f4:	0800b4cd 	.word	0x0800b4cd
 800b4f8:	0800b4cd 	.word	0x0800b4cd
 800b4fc:	0800b551 	.word	0x0800b551
 800b500:	0800b4cd 	.word	0x0800b4cd
 800b504:	0800b4cd 	.word	0x0800b4cd
 800b508:	0800b4cd 	.word	0x0800b4cd
 800b50c:	0800b4cd 	.word	0x0800b4cd
 800b510:	0800b65d 	.word	0x0800b65d
 800b514:	0800b581 	.word	0x0800b581
 800b518:	0800b63f 	.word	0x0800b63f
 800b51c:	0800b4cd 	.word	0x0800b4cd
 800b520:	0800b4cd 	.word	0x0800b4cd
 800b524:	0800b67f 	.word	0x0800b67f
 800b528:	0800b4cd 	.word	0x0800b4cd
 800b52c:	0800b581 	.word	0x0800b581
 800b530:	0800b4cd 	.word	0x0800b4cd
 800b534:	0800b4cd 	.word	0x0800b4cd
 800b538:	0800b647 	.word	0x0800b647
 800b53c:	682b      	ldr	r3, [r5, #0]
 800b53e:	1d1a      	adds	r2, r3, #4
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	602a      	str	r2, [r5, #0]
 800b544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b54c:	2301      	movs	r3, #1
 800b54e:	e0a3      	b.n	800b698 <_printf_i+0x1f4>
 800b550:	6820      	ldr	r0, [r4, #0]
 800b552:	6829      	ldr	r1, [r5, #0]
 800b554:	0606      	lsls	r6, r0, #24
 800b556:	f101 0304 	add.w	r3, r1, #4
 800b55a:	d50a      	bpl.n	800b572 <_printf_i+0xce>
 800b55c:	680e      	ldr	r6, [r1, #0]
 800b55e:	602b      	str	r3, [r5, #0]
 800b560:	2e00      	cmp	r6, #0
 800b562:	da03      	bge.n	800b56c <_printf_i+0xc8>
 800b564:	232d      	movs	r3, #45	; 0x2d
 800b566:	4276      	negs	r6, r6
 800b568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b56c:	485e      	ldr	r0, [pc, #376]	; (800b6e8 <_printf_i+0x244>)
 800b56e:	230a      	movs	r3, #10
 800b570:	e019      	b.n	800b5a6 <_printf_i+0x102>
 800b572:	680e      	ldr	r6, [r1, #0]
 800b574:	602b      	str	r3, [r5, #0]
 800b576:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b57a:	bf18      	it	ne
 800b57c:	b236      	sxthne	r6, r6
 800b57e:	e7ef      	b.n	800b560 <_printf_i+0xbc>
 800b580:	682b      	ldr	r3, [r5, #0]
 800b582:	6820      	ldr	r0, [r4, #0]
 800b584:	1d19      	adds	r1, r3, #4
 800b586:	6029      	str	r1, [r5, #0]
 800b588:	0601      	lsls	r1, r0, #24
 800b58a:	d501      	bpl.n	800b590 <_printf_i+0xec>
 800b58c:	681e      	ldr	r6, [r3, #0]
 800b58e:	e002      	b.n	800b596 <_printf_i+0xf2>
 800b590:	0646      	lsls	r6, r0, #25
 800b592:	d5fb      	bpl.n	800b58c <_printf_i+0xe8>
 800b594:	881e      	ldrh	r6, [r3, #0]
 800b596:	4854      	ldr	r0, [pc, #336]	; (800b6e8 <_printf_i+0x244>)
 800b598:	2f6f      	cmp	r7, #111	; 0x6f
 800b59a:	bf0c      	ite	eq
 800b59c:	2308      	moveq	r3, #8
 800b59e:	230a      	movne	r3, #10
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5a6:	6865      	ldr	r5, [r4, #4]
 800b5a8:	60a5      	str	r5, [r4, #8]
 800b5aa:	2d00      	cmp	r5, #0
 800b5ac:	bfa2      	ittt	ge
 800b5ae:	6821      	ldrge	r1, [r4, #0]
 800b5b0:	f021 0104 	bicge.w	r1, r1, #4
 800b5b4:	6021      	strge	r1, [r4, #0]
 800b5b6:	b90e      	cbnz	r6, 800b5bc <_printf_i+0x118>
 800b5b8:	2d00      	cmp	r5, #0
 800b5ba:	d04d      	beq.n	800b658 <_printf_i+0x1b4>
 800b5bc:	4615      	mov	r5, r2
 800b5be:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5c2:	fb03 6711 	mls	r7, r3, r1, r6
 800b5c6:	5dc7      	ldrb	r7, [r0, r7]
 800b5c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5cc:	4637      	mov	r7, r6
 800b5ce:	42bb      	cmp	r3, r7
 800b5d0:	460e      	mov	r6, r1
 800b5d2:	d9f4      	bls.n	800b5be <_printf_i+0x11a>
 800b5d4:	2b08      	cmp	r3, #8
 800b5d6:	d10b      	bne.n	800b5f0 <_printf_i+0x14c>
 800b5d8:	6823      	ldr	r3, [r4, #0]
 800b5da:	07de      	lsls	r6, r3, #31
 800b5dc:	d508      	bpl.n	800b5f0 <_printf_i+0x14c>
 800b5de:	6923      	ldr	r3, [r4, #16]
 800b5e0:	6861      	ldr	r1, [r4, #4]
 800b5e2:	4299      	cmp	r1, r3
 800b5e4:	bfde      	ittt	le
 800b5e6:	2330      	movle	r3, #48	; 0x30
 800b5e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b5ec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b5f0:	1b52      	subs	r2, r2, r5
 800b5f2:	6122      	str	r2, [r4, #16]
 800b5f4:	f8cd a000 	str.w	sl, [sp]
 800b5f8:	464b      	mov	r3, r9
 800b5fa:	aa03      	add	r2, sp, #12
 800b5fc:	4621      	mov	r1, r4
 800b5fe:	4640      	mov	r0, r8
 800b600:	f7ff fee2 	bl	800b3c8 <_printf_common>
 800b604:	3001      	adds	r0, #1
 800b606:	d14c      	bne.n	800b6a2 <_printf_i+0x1fe>
 800b608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b60c:	b004      	add	sp, #16
 800b60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b612:	4835      	ldr	r0, [pc, #212]	; (800b6e8 <_printf_i+0x244>)
 800b614:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b618:	6829      	ldr	r1, [r5, #0]
 800b61a:	6823      	ldr	r3, [r4, #0]
 800b61c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b620:	6029      	str	r1, [r5, #0]
 800b622:	061d      	lsls	r5, r3, #24
 800b624:	d514      	bpl.n	800b650 <_printf_i+0x1ac>
 800b626:	07df      	lsls	r7, r3, #31
 800b628:	bf44      	itt	mi
 800b62a:	f043 0320 	orrmi.w	r3, r3, #32
 800b62e:	6023      	strmi	r3, [r4, #0]
 800b630:	b91e      	cbnz	r6, 800b63a <_printf_i+0x196>
 800b632:	6823      	ldr	r3, [r4, #0]
 800b634:	f023 0320 	bic.w	r3, r3, #32
 800b638:	6023      	str	r3, [r4, #0]
 800b63a:	2310      	movs	r3, #16
 800b63c:	e7b0      	b.n	800b5a0 <_printf_i+0xfc>
 800b63e:	6823      	ldr	r3, [r4, #0]
 800b640:	f043 0320 	orr.w	r3, r3, #32
 800b644:	6023      	str	r3, [r4, #0]
 800b646:	2378      	movs	r3, #120	; 0x78
 800b648:	4828      	ldr	r0, [pc, #160]	; (800b6ec <_printf_i+0x248>)
 800b64a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b64e:	e7e3      	b.n	800b618 <_printf_i+0x174>
 800b650:	0659      	lsls	r1, r3, #25
 800b652:	bf48      	it	mi
 800b654:	b2b6      	uxthmi	r6, r6
 800b656:	e7e6      	b.n	800b626 <_printf_i+0x182>
 800b658:	4615      	mov	r5, r2
 800b65a:	e7bb      	b.n	800b5d4 <_printf_i+0x130>
 800b65c:	682b      	ldr	r3, [r5, #0]
 800b65e:	6826      	ldr	r6, [r4, #0]
 800b660:	6961      	ldr	r1, [r4, #20]
 800b662:	1d18      	adds	r0, r3, #4
 800b664:	6028      	str	r0, [r5, #0]
 800b666:	0635      	lsls	r5, r6, #24
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	d501      	bpl.n	800b670 <_printf_i+0x1cc>
 800b66c:	6019      	str	r1, [r3, #0]
 800b66e:	e002      	b.n	800b676 <_printf_i+0x1d2>
 800b670:	0670      	lsls	r0, r6, #25
 800b672:	d5fb      	bpl.n	800b66c <_printf_i+0x1c8>
 800b674:	8019      	strh	r1, [r3, #0]
 800b676:	2300      	movs	r3, #0
 800b678:	6123      	str	r3, [r4, #16]
 800b67a:	4615      	mov	r5, r2
 800b67c:	e7ba      	b.n	800b5f4 <_printf_i+0x150>
 800b67e:	682b      	ldr	r3, [r5, #0]
 800b680:	1d1a      	adds	r2, r3, #4
 800b682:	602a      	str	r2, [r5, #0]
 800b684:	681d      	ldr	r5, [r3, #0]
 800b686:	6862      	ldr	r2, [r4, #4]
 800b688:	2100      	movs	r1, #0
 800b68a:	4628      	mov	r0, r5
 800b68c:	f7f4 fdd0 	bl	8000230 <memchr>
 800b690:	b108      	cbz	r0, 800b696 <_printf_i+0x1f2>
 800b692:	1b40      	subs	r0, r0, r5
 800b694:	6060      	str	r0, [r4, #4]
 800b696:	6863      	ldr	r3, [r4, #4]
 800b698:	6123      	str	r3, [r4, #16]
 800b69a:	2300      	movs	r3, #0
 800b69c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6a0:	e7a8      	b.n	800b5f4 <_printf_i+0x150>
 800b6a2:	6923      	ldr	r3, [r4, #16]
 800b6a4:	462a      	mov	r2, r5
 800b6a6:	4649      	mov	r1, r9
 800b6a8:	4640      	mov	r0, r8
 800b6aa:	47d0      	blx	sl
 800b6ac:	3001      	adds	r0, #1
 800b6ae:	d0ab      	beq.n	800b608 <_printf_i+0x164>
 800b6b0:	6823      	ldr	r3, [r4, #0]
 800b6b2:	079b      	lsls	r3, r3, #30
 800b6b4:	d413      	bmi.n	800b6de <_printf_i+0x23a>
 800b6b6:	68e0      	ldr	r0, [r4, #12]
 800b6b8:	9b03      	ldr	r3, [sp, #12]
 800b6ba:	4298      	cmp	r0, r3
 800b6bc:	bfb8      	it	lt
 800b6be:	4618      	movlt	r0, r3
 800b6c0:	e7a4      	b.n	800b60c <_printf_i+0x168>
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	4632      	mov	r2, r6
 800b6c6:	4649      	mov	r1, r9
 800b6c8:	4640      	mov	r0, r8
 800b6ca:	47d0      	blx	sl
 800b6cc:	3001      	adds	r0, #1
 800b6ce:	d09b      	beq.n	800b608 <_printf_i+0x164>
 800b6d0:	3501      	adds	r5, #1
 800b6d2:	68e3      	ldr	r3, [r4, #12]
 800b6d4:	9903      	ldr	r1, [sp, #12]
 800b6d6:	1a5b      	subs	r3, r3, r1
 800b6d8:	42ab      	cmp	r3, r5
 800b6da:	dcf2      	bgt.n	800b6c2 <_printf_i+0x21e>
 800b6dc:	e7eb      	b.n	800b6b6 <_printf_i+0x212>
 800b6de:	2500      	movs	r5, #0
 800b6e0:	f104 0619 	add.w	r6, r4, #25
 800b6e4:	e7f5      	b.n	800b6d2 <_printf_i+0x22e>
 800b6e6:	bf00      	nop
 800b6e8:	08010242 	.word	0x08010242
 800b6ec:	08010253 	.word	0x08010253

0800b6f0 <_scanf_float>:
 800b6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f4:	b087      	sub	sp, #28
 800b6f6:	4617      	mov	r7, r2
 800b6f8:	9303      	str	r3, [sp, #12]
 800b6fa:	688b      	ldr	r3, [r1, #8]
 800b6fc:	1e5a      	subs	r2, r3, #1
 800b6fe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b702:	bf83      	ittte	hi
 800b704:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b708:	195b      	addhi	r3, r3, r5
 800b70a:	9302      	strhi	r3, [sp, #8]
 800b70c:	2300      	movls	r3, #0
 800b70e:	bf86      	itte	hi
 800b710:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b714:	608b      	strhi	r3, [r1, #8]
 800b716:	9302      	strls	r3, [sp, #8]
 800b718:	680b      	ldr	r3, [r1, #0]
 800b71a:	468b      	mov	fp, r1
 800b71c:	2500      	movs	r5, #0
 800b71e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b722:	f84b 3b1c 	str.w	r3, [fp], #28
 800b726:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b72a:	4680      	mov	r8, r0
 800b72c:	460c      	mov	r4, r1
 800b72e:	465e      	mov	r6, fp
 800b730:	46aa      	mov	sl, r5
 800b732:	46a9      	mov	r9, r5
 800b734:	9501      	str	r5, [sp, #4]
 800b736:	68a2      	ldr	r2, [r4, #8]
 800b738:	b152      	cbz	r2, 800b750 <_scanf_float+0x60>
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	2b4e      	cmp	r3, #78	; 0x4e
 800b740:	d864      	bhi.n	800b80c <_scanf_float+0x11c>
 800b742:	2b40      	cmp	r3, #64	; 0x40
 800b744:	d83c      	bhi.n	800b7c0 <_scanf_float+0xd0>
 800b746:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b74a:	b2c8      	uxtb	r0, r1
 800b74c:	280e      	cmp	r0, #14
 800b74e:	d93a      	bls.n	800b7c6 <_scanf_float+0xd6>
 800b750:	f1b9 0f00 	cmp.w	r9, #0
 800b754:	d003      	beq.n	800b75e <_scanf_float+0x6e>
 800b756:	6823      	ldr	r3, [r4, #0]
 800b758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b762:	f1ba 0f01 	cmp.w	sl, #1
 800b766:	f200 8113 	bhi.w	800b990 <_scanf_float+0x2a0>
 800b76a:	455e      	cmp	r6, fp
 800b76c:	f200 8105 	bhi.w	800b97a <_scanf_float+0x28a>
 800b770:	2501      	movs	r5, #1
 800b772:	4628      	mov	r0, r5
 800b774:	b007      	add	sp, #28
 800b776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b77a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b77e:	2a0d      	cmp	r2, #13
 800b780:	d8e6      	bhi.n	800b750 <_scanf_float+0x60>
 800b782:	a101      	add	r1, pc, #4	; (adr r1, 800b788 <_scanf_float+0x98>)
 800b784:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b788:	0800b8c7 	.word	0x0800b8c7
 800b78c:	0800b751 	.word	0x0800b751
 800b790:	0800b751 	.word	0x0800b751
 800b794:	0800b751 	.word	0x0800b751
 800b798:	0800b927 	.word	0x0800b927
 800b79c:	0800b8ff 	.word	0x0800b8ff
 800b7a0:	0800b751 	.word	0x0800b751
 800b7a4:	0800b751 	.word	0x0800b751
 800b7a8:	0800b8d5 	.word	0x0800b8d5
 800b7ac:	0800b751 	.word	0x0800b751
 800b7b0:	0800b751 	.word	0x0800b751
 800b7b4:	0800b751 	.word	0x0800b751
 800b7b8:	0800b751 	.word	0x0800b751
 800b7bc:	0800b88d 	.word	0x0800b88d
 800b7c0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b7c4:	e7db      	b.n	800b77e <_scanf_float+0x8e>
 800b7c6:	290e      	cmp	r1, #14
 800b7c8:	d8c2      	bhi.n	800b750 <_scanf_float+0x60>
 800b7ca:	a001      	add	r0, pc, #4	; (adr r0, 800b7d0 <_scanf_float+0xe0>)
 800b7cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b7d0:	0800b87f 	.word	0x0800b87f
 800b7d4:	0800b751 	.word	0x0800b751
 800b7d8:	0800b87f 	.word	0x0800b87f
 800b7dc:	0800b913 	.word	0x0800b913
 800b7e0:	0800b751 	.word	0x0800b751
 800b7e4:	0800b82d 	.word	0x0800b82d
 800b7e8:	0800b869 	.word	0x0800b869
 800b7ec:	0800b869 	.word	0x0800b869
 800b7f0:	0800b869 	.word	0x0800b869
 800b7f4:	0800b869 	.word	0x0800b869
 800b7f8:	0800b869 	.word	0x0800b869
 800b7fc:	0800b869 	.word	0x0800b869
 800b800:	0800b869 	.word	0x0800b869
 800b804:	0800b869 	.word	0x0800b869
 800b808:	0800b869 	.word	0x0800b869
 800b80c:	2b6e      	cmp	r3, #110	; 0x6e
 800b80e:	d809      	bhi.n	800b824 <_scanf_float+0x134>
 800b810:	2b60      	cmp	r3, #96	; 0x60
 800b812:	d8b2      	bhi.n	800b77a <_scanf_float+0x8a>
 800b814:	2b54      	cmp	r3, #84	; 0x54
 800b816:	d077      	beq.n	800b908 <_scanf_float+0x218>
 800b818:	2b59      	cmp	r3, #89	; 0x59
 800b81a:	d199      	bne.n	800b750 <_scanf_float+0x60>
 800b81c:	2d07      	cmp	r5, #7
 800b81e:	d197      	bne.n	800b750 <_scanf_float+0x60>
 800b820:	2508      	movs	r5, #8
 800b822:	e029      	b.n	800b878 <_scanf_float+0x188>
 800b824:	2b74      	cmp	r3, #116	; 0x74
 800b826:	d06f      	beq.n	800b908 <_scanf_float+0x218>
 800b828:	2b79      	cmp	r3, #121	; 0x79
 800b82a:	e7f6      	b.n	800b81a <_scanf_float+0x12a>
 800b82c:	6821      	ldr	r1, [r4, #0]
 800b82e:	05c8      	lsls	r0, r1, #23
 800b830:	d51a      	bpl.n	800b868 <_scanf_float+0x178>
 800b832:	9b02      	ldr	r3, [sp, #8]
 800b834:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b838:	6021      	str	r1, [r4, #0]
 800b83a:	f109 0901 	add.w	r9, r9, #1
 800b83e:	b11b      	cbz	r3, 800b848 <_scanf_float+0x158>
 800b840:	3b01      	subs	r3, #1
 800b842:	3201      	adds	r2, #1
 800b844:	9302      	str	r3, [sp, #8]
 800b846:	60a2      	str	r2, [r4, #8]
 800b848:	68a3      	ldr	r3, [r4, #8]
 800b84a:	3b01      	subs	r3, #1
 800b84c:	60a3      	str	r3, [r4, #8]
 800b84e:	6923      	ldr	r3, [r4, #16]
 800b850:	3301      	adds	r3, #1
 800b852:	6123      	str	r3, [r4, #16]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	3b01      	subs	r3, #1
 800b858:	2b00      	cmp	r3, #0
 800b85a:	607b      	str	r3, [r7, #4]
 800b85c:	f340 8084 	ble.w	800b968 <_scanf_float+0x278>
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	3301      	adds	r3, #1
 800b864:	603b      	str	r3, [r7, #0]
 800b866:	e766      	b.n	800b736 <_scanf_float+0x46>
 800b868:	eb1a 0f05 	cmn.w	sl, r5
 800b86c:	f47f af70 	bne.w	800b750 <_scanf_float+0x60>
 800b870:	6822      	ldr	r2, [r4, #0]
 800b872:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b876:	6022      	str	r2, [r4, #0]
 800b878:	f806 3b01 	strb.w	r3, [r6], #1
 800b87c:	e7e4      	b.n	800b848 <_scanf_float+0x158>
 800b87e:	6822      	ldr	r2, [r4, #0]
 800b880:	0610      	lsls	r0, r2, #24
 800b882:	f57f af65 	bpl.w	800b750 <_scanf_float+0x60>
 800b886:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b88a:	e7f4      	b.n	800b876 <_scanf_float+0x186>
 800b88c:	f1ba 0f00 	cmp.w	sl, #0
 800b890:	d10e      	bne.n	800b8b0 <_scanf_float+0x1c0>
 800b892:	f1b9 0f00 	cmp.w	r9, #0
 800b896:	d10e      	bne.n	800b8b6 <_scanf_float+0x1c6>
 800b898:	6822      	ldr	r2, [r4, #0]
 800b89a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b89e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b8a2:	d108      	bne.n	800b8b6 <_scanf_float+0x1c6>
 800b8a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b8a8:	6022      	str	r2, [r4, #0]
 800b8aa:	f04f 0a01 	mov.w	sl, #1
 800b8ae:	e7e3      	b.n	800b878 <_scanf_float+0x188>
 800b8b0:	f1ba 0f02 	cmp.w	sl, #2
 800b8b4:	d055      	beq.n	800b962 <_scanf_float+0x272>
 800b8b6:	2d01      	cmp	r5, #1
 800b8b8:	d002      	beq.n	800b8c0 <_scanf_float+0x1d0>
 800b8ba:	2d04      	cmp	r5, #4
 800b8bc:	f47f af48 	bne.w	800b750 <_scanf_float+0x60>
 800b8c0:	3501      	adds	r5, #1
 800b8c2:	b2ed      	uxtb	r5, r5
 800b8c4:	e7d8      	b.n	800b878 <_scanf_float+0x188>
 800b8c6:	f1ba 0f01 	cmp.w	sl, #1
 800b8ca:	f47f af41 	bne.w	800b750 <_scanf_float+0x60>
 800b8ce:	f04f 0a02 	mov.w	sl, #2
 800b8d2:	e7d1      	b.n	800b878 <_scanf_float+0x188>
 800b8d4:	b97d      	cbnz	r5, 800b8f6 <_scanf_float+0x206>
 800b8d6:	f1b9 0f00 	cmp.w	r9, #0
 800b8da:	f47f af3c 	bne.w	800b756 <_scanf_float+0x66>
 800b8de:	6822      	ldr	r2, [r4, #0]
 800b8e0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b8e4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b8e8:	f47f af39 	bne.w	800b75e <_scanf_float+0x6e>
 800b8ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b8f0:	6022      	str	r2, [r4, #0]
 800b8f2:	2501      	movs	r5, #1
 800b8f4:	e7c0      	b.n	800b878 <_scanf_float+0x188>
 800b8f6:	2d03      	cmp	r5, #3
 800b8f8:	d0e2      	beq.n	800b8c0 <_scanf_float+0x1d0>
 800b8fa:	2d05      	cmp	r5, #5
 800b8fc:	e7de      	b.n	800b8bc <_scanf_float+0x1cc>
 800b8fe:	2d02      	cmp	r5, #2
 800b900:	f47f af26 	bne.w	800b750 <_scanf_float+0x60>
 800b904:	2503      	movs	r5, #3
 800b906:	e7b7      	b.n	800b878 <_scanf_float+0x188>
 800b908:	2d06      	cmp	r5, #6
 800b90a:	f47f af21 	bne.w	800b750 <_scanf_float+0x60>
 800b90e:	2507      	movs	r5, #7
 800b910:	e7b2      	b.n	800b878 <_scanf_float+0x188>
 800b912:	6822      	ldr	r2, [r4, #0]
 800b914:	0591      	lsls	r1, r2, #22
 800b916:	f57f af1b 	bpl.w	800b750 <_scanf_float+0x60>
 800b91a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b91e:	6022      	str	r2, [r4, #0]
 800b920:	f8cd 9004 	str.w	r9, [sp, #4]
 800b924:	e7a8      	b.n	800b878 <_scanf_float+0x188>
 800b926:	6822      	ldr	r2, [r4, #0]
 800b928:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b92c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b930:	d006      	beq.n	800b940 <_scanf_float+0x250>
 800b932:	0550      	lsls	r0, r2, #21
 800b934:	f57f af0c 	bpl.w	800b750 <_scanf_float+0x60>
 800b938:	f1b9 0f00 	cmp.w	r9, #0
 800b93c:	f43f af0f 	beq.w	800b75e <_scanf_float+0x6e>
 800b940:	0591      	lsls	r1, r2, #22
 800b942:	bf58      	it	pl
 800b944:	9901      	ldrpl	r1, [sp, #4]
 800b946:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b94a:	bf58      	it	pl
 800b94c:	eba9 0101 	subpl.w	r1, r9, r1
 800b950:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b954:	bf58      	it	pl
 800b956:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b95a:	6022      	str	r2, [r4, #0]
 800b95c:	f04f 0900 	mov.w	r9, #0
 800b960:	e78a      	b.n	800b878 <_scanf_float+0x188>
 800b962:	f04f 0a03 	mov.w	sl, #3
 800b966:	e787      	b.n	800b878 <_scanf_float+0x188>
 800b968:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b96c:	4639      	mov	r1, r7
 800b96e:	4640      	mov	r0, r8
 800b970:	4798      	blx	r3
 800b972:	2800      	cmp	r0, #0
 800b974:	f43f aedf 	beq.w	800b736 <_scanf_float+0x46>
 800b978:	e6ea      	b.n	800b750 <_scanf_float+0x60>
 800b97a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b97e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b982:	463a      	mov	r2, r7
 800b984:	4640      	mov	r0, r8
 800b986:	4798      	blx	r3
 800b988:	6923      	ldr	r3, [r4, #16]
 800b98a:	3b01      	subs	r3, #1
 800b98c:	6123      	str	r3, [r4, #16]
 800b98e:	e6ec      	b.n	800b76a <_scanf_float+0x7a>
 800b990:	1e6b      	subs	r3, r5, #1
 800b992:	2b06      	cmp	r3, #6
 800b994:	d825      	bhi.n	800b9e2 <_scanf_float+0x2f2>
 800b996:	2d02      	cmp	r5, #2
 800b998:	d836      	bhi.n	800ba08 <_scanf_float+0x318>
 800b99a:	455e      	cmp	r6, fp
 800b99c:	f67f aee8 	bls.w	800b770 <_scanf_float+0x80>
 800b9a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b9a8:	463a      	mov	r2, r7
 800b9aa:	4640      	mov	r0, r8
 800b9ac:	4798      	blx	r3
 800b9ae:	6923      	ldr	r3, [r4, #16]
 800b9b0:	3b01      	subs	r3, #1
 800b9b2:	6123      	str	r3, [r4, #16]
 800b9b4:	e7f1      	b.n	800b99a <_scanf_float+0x2aa>
 800b9b6:	9802      	ldr	r0, [sp, #8]
 800b9b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9bc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b9c0:	9002      	str	r0, [sp, #8]
 800b9c2:	463a      	mov	r2, r7
 800b9c4:	4640      	mov	r0, r8
 800b9c6:	4798      	blx	r3
 800b9c8:	6923      	ldr	r3, [r4, #16]
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	6123      	str	r3, [r4, #16]
 800b9ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b9d2:	fa5f fa8a 	uxtb.w	sl, sl
 800b9d6:	f1ba 0f02 	cmp.w	sl, #2
 800b9da:	d1ec      	bne.n	800b9b6 <_scanf_float+0x2c6>
 800b9dc:	3d03      	subs	r5, #3
 800b9de:	b2ed      	uxtb	r5, r5
 800b9e0:	1b76      	subs	r6, r6, r5
 800b9e2:	6823      	ldr	r3, [r4, #0]
 800b9e4:	05da      	lsls	r2, r3, #23
 800b9e6:	d52f      	bpl.n	800ba48 <_scanf_float+0x358>
 800b9e8:	055b      	lsls	r3, r3, #21
 800b9ea:	d510      	bpl.n	800ba0e <_scanf_float+0x31e>
 800b9ec:	455e      	cmp	r6, fp
 800b9ee:	f67f aebf 	bls.w	800b770 <_scanf_float+0x80>
 800b9f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b9fa:	463a      	mov	r2, r7
 800b9fc:	4640      	mov	r0, r8
 800b9fe:	4798      	blx	r3
 800ba00:	6923      	ldr	r3, [r4, #16]
 800ba02:	3b01      	subs	r3, #1
 800ba04:	6123      	str	r3, [r4, #16]
 800ba06:	e7f1      	b.n	800b9ec <_scanf_float+0x2fc>
 800ba08:	46aa      	mov	sl, r5
 800ba0a:	9602      	str	r6, [sp, #8]
 800ba0c:	e7df      	b.n	800b9ce <_scanf_float+0x2de>
 800ba0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ba12:	6923      	ldr	r3, [r4, #16]
 800ba14:	2965      	cmp	r1, #101	; 0x65
 800ba16:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ba1a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800ba1e:	6123      	str	r3, [r4, #16]
 800ba20:	d00c      	beq.n	800ba3c <_scanf_float+0x34c>
 800ba22:	2945      	cmp	r1, #69	; 0x45
 800ba24:	d00a      	beq.n	800ba3c <_scanf_float+0x34c>
 800ba26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba2a:	463a      	mov	r2, r7
 800ba2c:	4640      	mov	r0, r8
 800ba2e:	4798      	blx	r3
 800ba30:	6923      	ldr	r3, [r4, #16]
 800ba32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ba36:	3b01      	subs	r3, #1
 800ba38:	1eb5      	subs	r5, r6, #2
 800ba3a:	6123      	str	r3, [r4, #16]
 800ba3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba40:	463a      	mov	r2, r7
 800ba42:	4640      	mov	r0, r8
 800ba44:	4798      	blx	r3
 800ba46:	462e      	mov	r6, r5
 800ba48:	6825      	ldr	r5, [r4, #0]
 800ba4a:	f015 0510 	ands.w	r5, r5, #16
 800ba4e:	d159      	bne.n	800bb04 <_scanf_float+0x414>
 800ba50:	7035      	strb	r5, [r6, #0]
 800ba52:	6823      	ldr	r3, [r4, #0]
 800ba54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ba58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba5c:	d11b      	bne.n	800ba96 <_scanf_float+0x3a6>
 800ba5e:	9b01      	ldr	r3, [sp, #4]
 800ba60:	454b      	cmp	r3, r9
 800ba62:	eba3 0209 	sub.w	r2, r3, r9
 800ba66:	d123      	bne.n	800bab0 <_scanf_float+0x3c0>
 800ba68:	2200      	movs	r2, #0
 800ba6a:	4659      	mov	r1, fp
 800ba6c:	4640      	mov	r0, r8
 800ba6e:	f000 fea9 	bl	800c7c4 <_strtod_r>
 800ba72:	6822      	ldr	r2, [r4, #0]
 800ba74:	9b03      	ldr	r3, [sp, #12]
 800ba76:	f012 0f02 	tst.w	r2, #2
 800ba7a:	ec57 6b10 	vmov	r6, r7, d0
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	d021      	beq.n	800bac6 <_scanf_float+0x3d6>
 800ba82:	9903      	ldr	r1, [sp, #12]
 800ba84:	1d1a      	adds	r2, r3, #4
 800ba86:	600a      	str	r2, [r1, #0]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	e9c3 6700 	strd	r6, r7, [r3]
 800ba8e:	68e3      	ldr	r3, [r4, #12]
 800ba90:	3301      	adds	r3, #1
 800ba92:	60e3      	str	r3, [r4, #12]
 800ba94:	e66d      	b.n	800b772 <_scanf_float+0x82>
 800ba96:	9b04      	ldr	r3, [sp, #16]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d0e5      	beq.n	800ba68 <_scanf_float+0x378>
 800ba9c:	9905      	ldr	r1, [sp, #20]
 800ba9e:	230a      	movs	r3, #10
 800baa0:	462a      	mov	r2, r5
 800baa2:	3101      	adds	r1, #1
 800baa4:	4640      	mov	r0, r8
 800baa6:	f000 ff15 	bl	800c8d4 <_strtol_r>
 800baaa:	9b04      	ldr	r3, [sp, #16]
 800baac:	9e05      	ldr	r6, [sp, #20]
 800baae:	1ac2      	subs	r2, r0, r3
 800bab0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bab4:	429e      	cmp	r6, r3
 800bab6:	bf28      	it	cs
 800bab8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800babc:	4912      	ldr	r1, [pc, #72]	; (800bb08 <_scanf_float+0x418>)
 800babe:	4630      	mov	r0, r6
 800bac0:	f000 f83c 	bl	800bb3c <siprintf>
 800bac4:	e7d0      	b.n	800ba68 <_scanf_float+0x378>
 800bac6:	9903      	ldr	r1, [sp, #12]
 800bac8:	f012 0f04 	tst.w	r2, #4
 800bacc:	f103 0204 	add.w	r2, r3, #4
 800bad0:	600a      	str	r2, [r1, #0]
 800bad2:	d1d9      	bne.n	800ba88 <_scanf_float+0x398>
 800bad4:	f8d3 8000 	ldr.w	r8, [r3]
 800bad8:	ee10 2a10 	vmov	r2, s0
 800badc:	ee10 0a10 	vmov	r0, s0
 800bae0:	463b      	mov	r3, r7
 800bae2:	4639      	mov	r1, r7
 800bae4:	f7f5 f84a 	bl	8000b7c <__aeabi_dcmpun>
 800bae8:	b128      	cbz	r0, 800baf6 <_scanf_float+0x406>
 800baea:	4808      	ldr	r0, [pc, #32]	; (800bb0c <_scanf_float+0x41c>)
 800baec:	f000 f820 	bl	800bb30 <nanf>
 800baf0:	ed88 0a00 	vstr	s0, [r8]
 800baf4:	e7cb      	b.n	800ba8e <_scanf_float+0x39e>
 800baf6:	4630      	mov	r0, r6
 800baf8:	4639      	mov	r1, r7
 800bafa:	f7f5 f89d 	bl	8000c38 <__aeabi_d2f>
 800bafe:	f8c8 0000 	str.w	r0, [r8]
 800bb02:	e7c4      	b.n	800ba8e <_scanf_float+0x39e>
 800bb04:	2500      	movs	r5, #0
 800bb06:	e634      	b.n	800b772 <_scanf_float+0x82>
 800bb08:	08010264 	.word	0x08010264
 800bb0c:	08010670 	.word	0x08010670

0800bb10 <_sbrk_r>:
 800bb10:	b538      	push	{r3, r4, r5, lr}
 800bb12:	4d06      	ldr	r5, [pc, #24]	; (800bb2c <_sbrk_r+0x1c>)
 800bb14:	2300      	movs	r3, #0
 800bb16:	4604      	mov	r4, r0
 800bb18:	4608      	mov	r0, r1
 800bb1a:	602b      	str	r3, [r5, #0]
 800bb1c:	f7f6 fcb4 	bl	8002488 <_sbrk>
 800bb20:	1c43      	adds	r3, r0, #1
 800bb22:	d102      	bne.n	800bb2a <_sbrk_r+0x1a>
 800bb24:	682b      	ldr	r3, [r5, #0]
 800bb26:	b103      	cbz	r3, 800bb2a <_sbrk_r+0x1a>
 800bb28:	6023      	str	r3, [r4, #0]
 800bb2a:	bd38      	pop	{r3, r4, r5, pc}
 800bb2c:	200026dc 	.word	0x200026dc

0800bb30 <nanf>:
 800bb30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bb38 <nanf+0x8>
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	7fc00000 	.word	0x7fc00000

0800bb3c <siprintf>:
 800bb3c:	b40e      	push	{r1, r2, r3}
 800bb3e:	b500      	push	{lr}
 800bb40:	b09c      	sub	sp, #112	; 0x70
 800bb42:	ab1d      	add	r3, sp, #116	; 0x74
 800bb44:	9002      	str	r0, [sp, #8]
 800bb46:	9006      	str	r0, [sp, #24]
 800bb48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb4c:	4809      	ldr	r0, [pc, #36]	; (800bb74 <siprintf+0x38>)
 800bb4e:	9107      	str	r1, [sp, #28]
 800bb50:	9104      	str	r1, [sp, #16]
 800bb52:	4909      	ldr	r1, [pc, #36]	; (800bb78 <siprintf+0x3c>)
 800bb54:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb58:	9105      	str	r1, [sp, #20]
 800bb5a:	6800      	ldr	r0, [r0, #0]
 800bb5c:	9301      	str	r3, [sp, #4]
 800bb5e:	a902      	add	r1, sp, #8
 800bb60:	f002 fe06 	bl	800e770 <_svfiprintf_r>
 800bb64:	9b02      	ldr	r3, [sp, #8]
 800bb66:	2200      	movs	r2, #0
 800bb68:	701a      	strb	r2, [r3, #0]
 800bb6a:	b01c      	add	sp, #112	; 0x70
 800bb6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb70:	b003      	add	sp, #12
 800bb72:	4770      	bx	lr
 800bb74:	20000184 	.word	0x20000184
 800bb78:	ffff0208 	.word	0xffff0208

0800bb7c <sulp>:
 800bb7c:	b570      	push	{r4, r5, r6, lr}
 800bb7e:	4604      	mov	r4, r0
 800bb80:	460d      	mov	r5, r1
 800bb82:	ec45 4b10 	vmov	d0, r4, r5
 800bb86:	4616      	mov	r6, r2
 800bb88:	f002 fc32 	bl	800e3f0 <__ulp>
 800bb8c:	ec51 0b10 	vmov	r0, r1, d0
 800bb90:	b17e      	cbz	r6, 800bbb2 <sulp+0x36>
 800bb92:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bb96:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	dd09      	ble.n	800bbb2 <sulp+0x36>
 800bb9e:	051b      	lsls	r3, r3, #20
 800bba0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bba4:	2400      	movs	r4, #0
 800bba6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bbaa:	4622      	mov	r2, r4
 800bbac:	462b      	mov	r3, r5
 800bbae:	f7f4 fd4b 	bl	8000648 <__aeabi_dmul>
 800bbb2:	bd70      	pop	{r4, r5, r6, pc}
 800bbb4:	0000      	movs	r0, r0
	...

0800bbb8 <_strtod_l>:
 800bbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbbc:	ed2d 8b02 	vpush	{d8}
 800bbc0:	b09d      	sub	sp, #116	; 0x74
 800bbc2:	461f      	mov	r7, r3
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	9318      	str	r3, [sp, #96]	; 0x60
 800bbc8:	4ba2      	ldr	r3, [pc, #648]	; (800be54 <_strtod_l+0x29c>)
 800bbca:	9213      	str	r2, [sp, #76]	; 0x4c
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	9305      	str	r3, [sp, #20]
 800bbd0:	4604      	mov	r4, r0
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	4688      	mov	r8, r1
 800bbd6:	f7f4 fb23 	bl	8000220 <strlen>
 800bbda:	f04f 0a00 	mov.w	sl, #0
 800bbde:	4605      	mov	r5, r0
 800bbe0:	f04f 0b00 	mov.w	fp, #0
 800bbe4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bbe8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bbea:	781a      	ldrb	r2, [r3, #0]
 800bbec:	2a2b      	cmp	r2, #43	; 0x2b
 800bbee:	d04e      	beq.n	800bc8e <_strtod_l+0xd6>
 800bbf0:	d83b      	bhi.n	800bc6a <_strtod_l+0xb2>
 800bbf2:	2a0d      	cmp	r2, #13
 800bbf4:	d834      	bhi.n	800bc60 <_strtod_l+0xa8>
 800bbf6:	2a08      	cmp	r2, #8
 800bbf8:	d834      	bhi.n	800bc64 <_strtod_l+0xac>
 800bbfa:	2a00      	cmp	r2, #0
 800bbfc:	d03e      	beq.n	800bc7c <_strtod_l+0xc4>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	930a      	str	r3, [sp, #40]	; 0x28
 800bc02:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bc04:	7833      	ldrb	r3, [r6, #0]
 800bc06:	2b30      	cmp	r3, #48	; 0x30
 800bc08:	f040 80b0 	bne.w	800bd6c <_strtod_l+0x1b4>
 800bc0c:	7873      	ldrb	r3, [r6, #1]
 800bc0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bc12:	2b58      	cmp	r3, #88	; 0x58
 800bc14:	d168      	bne.n	800bce8 <_strtod_l+0x130>
 800bc16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc18:	9301      	str	r3, [sp, #4]
 800bc1a:	ab18      	add	r3, sp, #96	; 0x60
 800bc1c:	9702      	str	r7, [sp, #8]
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	4a8d      	ldr	r2, [pc, #564]	; (800be58 <_strtod_l+0x2a0>)
 800bc22:	ab19      	add	r3, sp, #100	; 0x64
 800bc24:	a917      	add	r1, sp, #92	; 0x5c
 800bc26:	4620      	mov	r0, r4
 800bc28:	f001 fd38 	bl	800d69c <__gethex>
 800bc2c:	f010 0707 	ands.w	r7, r0, #7
 800bc30:	4605      	mov	r5, r0
 800bc32:	d005      	beq.n	800bc40 <_strtod_l+0x88>
 800bc34:	2f06      	cmp	r7, #6
 800bc36:	d12c      	bne.n	800bc92 <_strtod_l+0xda>
 800bc38:	3601      	adds	r6, #1
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	9617      	str	r6, [sp, #92]	; 0x5c
 800bc3e:	930a      	str	r3, [sp, #40]	; 0x28
 800bc40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f040 8590 	bne.w	800c768 <_strtod_l+0xbb0>
 800bc48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc4a:	b1eb      	cbz	r3, 800bc88 <_strtod_l+0xd0>
 800bc4c:	4652      	mov	r2, sl
 800bc4e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bc52:	ec43 2b10 	vmov	d0, r2, r3
 800bc56:	b01d      	add	sp, #116	; 0x74
 800bc58:	ecbd 8b02 	vpop	{d8}
 800bc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc60:	2a20      	cmp	r2, #32
 800bc62:	d1cc      	bne.n	800bbfe <_strtod_l+0x46>
 800bc64:	3301      	adds	r3, #1
 800bc66:	9317      	str	r3, [sp, #92]	; 0x5c
 800bc68:	e7be      	b.n	800bbe8 <_strtod_l+0x30>
 800bc6a:	2a2d      	cmp	r2, #45	; 0x2d
 800bc6c:	d1c7      	bne.n	800bbfe <_strtod_l+0x46>
 800bc6e:	2201      	movs	r2, #1
 800bc70:	920a      	str	r2, [sp, #40]	; 0x28
 800bc72:	1c5a      	adds	r2, r3, #1
 800bc74:	9217      	str	r2, [sp, #92]	; 0x5c
 800bc76:	785b      	ldrb	r3, [r3, #1]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d1c2      	bne.n	800bc02 <_strtod_l+0x4a>
 800bc7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bc7e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	f040 856e 	bne.w	800c764 <_strtod_l+0xbac>
 800bc88:	4652      	mov	r2, sl
 800bc8a:	465b      	mov	r3, fp
 800bc8c:	e7e1      	b.n	800bc52 <_strtod_l+0x9a>
 800bc8e:	2200      	movs	r2, #0
 800bc90:	e7ee      	b.n	800bc70 <_strtod_l+0xb8>
 800bc92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bc94:	b13a      	cbz	r2, 800bca6 <_strtod_l+0xee>
 800bc96:	2135      	movs	r1, #53	; 0x35
 800bc98:	a81a      	add	r0, sp, #104	; 0x68
 800bc9a:	f002 fcb4 	bl	800e606 <__copybits>
 800bc9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bca0:	4620      	mov	r0, r4
 800bca2:	f002 f873 	bl	800dd8c <_Bfree>
 800bca6:	3f01      	subs	r7, #1
 800bca8:	2f04      	cmp	r7, #4
 800bcaa:	d806      	bhi.n	800bcba <_strtod_l+0x102>
 800bcac:	e8df f007 	tbb	[pc, r7]
 800bcb0:	1714030a 	.word	0x1714030a
 800bcb4:	0a          	.byte	0x0a
 800bcb5:	00          	.byte	0x00
 800bcb6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800bcba:	0728      	lsls	r0, r5, #28
 800bcbc:	d5c0      	bpl.n	800bc40 <_strtod_l+0x88>
 800bcbe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bcc2:	e7bd      	b.n	800bc40 <_strtod_l+0x88>
 800bcc4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800bcc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bcca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bcce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bcd2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bcd6:	e7f0      	b.n	800bcba <_strtod_l+0x102>
 800bcd8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800be5c <_strtod_l+0x2a4>
 800bcdc:	e7ed      	b.n	800bcba <_strtod_l+0x102>
 800bcde:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bce2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bce6:	e7e8      	b.n	800bcba <_strtod_l+0x102>
 800bce8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bcea:	1c5a      	adds	r2, r3, #1
 800bcec:	9217      	str	r2, [sp, #92]	; 0x5c
 800bcee:	785b      	ldrb	r3, [r3, #1]
 800bcf0:	2b30      	cmp	r3, #48	; 0x30
 800bcf2:	d0f9      	beq.n	800bce8 <_strtod_l+0x130>
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d0a3      	beq.n	800bc40 <_strtod_l+0x88>
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	f04f 0900 	mov.w	r9, #0
 800bcfe:	9304      	str	r3, [sp, #16]
 800bd00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd02:	9308      	str	r3, [sp, #32]
 800bd04:	f8cd 901c 	str.w	r9, [sp, #28]
 800bd08:	464f      	mov	r7, r9
 800bd0a:	220a      	movs	r2, #10
 800bd0c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800bd0e:	7806      	ldrb	r6, [r0, #0]
 800bd10:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bd14:	b2d9      	uxtb	r1, r3
 800bd16:	2909      	cmp	r1, #9
 800bd18:	d92a      	bls.n	800bd70 <_strtod_l+0x1b8>
 800bd1a:	9905      	ldr	r1, [sp, #20]
 800bd1c:	462a      	mov	r2, r5
 800bd1e:	f002 fe2f 	bl	800e980 <strncmp>
 800bd22:	b398      	cbz	r0, 800bd8c <_strtod_l+0x1d4>
 800bd24:	2000      	movs	r0, #0
 800bd26:	4632      	mov	r2, r6
 800bd28:	463d      	mov	r5, r7
 800bd2a:	9005      	str	r0, [sp, #20]
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2a65      	cmp	r2, #101	; 0x65
 800bd30:	d001      	beq.n	800bd36 <_strtod_l+0x17e>
 800bd32:	2a45      	cmp	r2, #69	; 0x45
 800bd34:	d118      	bne.n	800bd68 <_strtod_l+0x1b0>
 800bd36:	b91d      	cbnz	r5, 800bd40 <_strtod_l+0x188>
 800bd38:	9a04      	ldr	r2, [sp, #16]
 800bd3a:	4302      	orrs	r2, r0
 800bd3c:	d09e      	beq.n	800bc7c <_strtod_l+0xc4>
 800bd3e:	2500      	movs	r5, #0
 800bd40:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800bd44:	f108 0201 	add.w	r2, r8, #1
 800bd48:	9217      	str	r2, [sp, #92]	; 0x5c
 800bd4a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800bd4e:	2a2b      	cmp	r2, #43	; 0x2b
 800bd50:	d075      	beq.n	800be3e <_strtod_l+0x286>
 800bd52:	2a2d      	cmp	r2, #45	; 0x2d
 800bd54:	d07b      	beq.n	800be4e <_strtod_l+0x296>
 800bd56:	f04f 0c00 	mov.w	ip, #0
 800bd5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bd5e:	2909      	cmp	r1, #9
 800bd60:	f240 8082 	bls.w	800be68 <_strtod_l+0x2b0>
 800bd64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bd68:	2600      	movs	r6, #0
 800bd6a:	e09d      	b.n	800bea8 <_strtod_l+0x2f0>
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	e7c4      	b.n	800bcfa <_strtod_l+0x142>
 800bd70:	2f08      	cmp	r7, #8
 800bd72:	bfd8      	it	le
 800bd74:	9907      	ldrle	r1, [sp, #28]
 800bd76:	f100 0001 	add.w	r0, r0, #1
 800bd7a:	bfda      	itte	le
 800bd7c:	fb02 3301 	mlale	r3, r2, r1, r3
 800bd80:	9307      	strle	r3, [sp, #28]
 800bd82:	fb02 3909 	mlagt	r9, r2, r9, r3
 800bd86:	3701      	adds	r7, #1
 800bd88:	9017      	str	r0, [sp, #92]	; 0x5c
 800bd8a:	e7bf      	b.n	800bd0c <_strtod_l+0x154>
 800bd8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd8e:	195a      	adds	r2, r3, r5
 800bd90:	9217      	str	r2, [sp, #92]	; 0x5c
 800bd92:	5d5a      	ldrb	r2, [r3, r5]
 800bd94:	2f00      	cmp	r7, #0
 800bd96:	d037      	beq.n	800be08 <_strtod_l+0x250>
 800bd98:	9005      	str	r0, [sp, #20]
 800bd9a:	463d      	mov	r5, r7
 800bd9c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bda0:	2b09      	cmp	r3, #9
 800bda2:	d912      	bls.n	800bdca <_strtod_l+0x212>
 800bda4:	2301      	movs	r3, #1
 800bda6:	e7c2      	b.n	800bd2e <_strtod_l+0x176>
 800bda8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdaa:	1c5a      	adds	r2, r3, #1
 800bdac:	9217      	str	r2, [sp, #92]	; 0x5c
 800bdae:	785a      	ldrb	r2, [r3, #1]
 800bdb0:	3001      	adds	r0, #1
 800bdb2:	2a30      	cmp	r2, #48	; 0x30
 800bdb4:	d0f8      	beq.n	800bda8 <_strtod_l+0x1f0>
 800bdb6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bdba:	2b08      	cmp	r3, #8
 800bdbc:	f200 84d9 	bhi.w	800c772 <_strtod_l+0xbba>
 800bdc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdc2:	9005      	str	r0, [sp, #20]
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	9308      	str	r3, [sp, #32]
 800bdc8:	4605      	mov	r5, r0
 800bdca:	3a30      	subs	r2, #48	; 0x30
 800bdcc:	f100 0301 	add.w	r3, r0, #1
 800bdd0:	d014      	beq.n	800bdfc <_strtod_l+0x244>
 800bdd2:	9905      	ldr	r1, [sp, #20]
 800bdd4:	4419      	add	r1, r3
 800bdd6:	9105      	str	r1, [sp, #20]
 800bdd8:	462b      	mov	r3, r5
 800bdda:	eb00 0e05 	add.w	lr, r0, r5
 800bdde:	210a      	movs	r1, #10
 800bde0:	4573      	cmp	r3, lr
 800bde2:	d113      	bne.n	800be0c <_strtod_l+0x254>
 800bde4:	182b      	adds	r3, r5, r0
 800bde6:	2b08      	cmp	r3, #8
 800bde8:	f105 0501 	add.w	r5, r5, #1
 800bdec:	4405      	add	r5, r0
 800bdee:	dc1c      	bgt.n	800be2a <_strtod_l+0x272>
 800bdf0:	9907      	ldr	r1, [sp, #28]
 800bdf2:	230a      	movs	r3, #10
 800bdf4:	fb03 2301 	mla	r3, r3, r1, r2
 800bdf8:	9307      	str	r3, [sp, #28]
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bdfe:	1c51      	adds	r1, r2, #1
 800be00:	9117      	str	r1, [sp, #92]	; 0x5c
 800be02:	7852      	ldrb	r2, [r2, #1]
 800be04:	4618      	mov	r0, r3
 800be06:	e7c9      	b.n	800bd9c <_strtod_l+0x1e4>
 800be08:	4638      	mov	r0, r7
 800be0a:	e7d2      	b.n	800bdb2 <_strtod_l+0x1fa>
 800be0c:	2b08      	cmp	r3, #8
 800be0e:	dc04      	bgt.n	800be1a <_strtod_l+0x262>
 800be10:	9e07      	ldr	r6, [sp, #28]
 800be12:	434e      	muls	r6, r1
 800be14:	9607      	str	r6, [sp, #28]
 800be16:	3301      	adds	r3, #1
 800be18:	e7e2      	b.n	800bde0 <_strtod_l+0x228>
 800be1a:	f103 0c01 	add.w	ip, r3, #1
 800be1e:	f1bc 0f10 	cmp.w	ip, #16
 800be22:	bfd8      	it	le
 800be24:	fb01 f909 	mulle.w	r9, r1, r9
 800be28:	e7f5      	b.n	800be16 <_strtod_l+0x25e>
 800be2a:	2d10      	cmp	r5, #16
 800be2c:	bfdc      	itt	le
 800be2e:	230a      	movle	r3, #10
 800be30:	fb03 2909 	mlale	r9, r3, r9, r2
 800be34:	e7e1      	b.n	800bdfa <_strtod_l+0x242>
 800be36:	2300      	movs	r3, #0
 800be38:	9305      	str	r3, [sp, #20]
 800be3a:	2301      	movs	r3, #1
 800be3c:	e77c      	b.n	800bd38 <_strtod_l+0x180>
 800be3e:	f04f 0c00 	mov.w	ip, #0
 800be42:	f108 0202 	add.w	r2, r8, #2
 800be46:	9217      	str	r2, [sp, #92]	; 0x5c
 800be48:	f898 2002 	ldrb.w	r2, [r8, #2]
 800be4c:	e785      	b.n	800bd5a <_strtod_l+0x1a2>
 800be4e:	f04f 0c01 	mov.w	ip, #1
 800be52:	e7f6      	b.n	800be42 <_strtod_l+0x28a>
 800be54:	080104b8 	.word	0x080104b8
 800be58:	0801026c 	.word	0x0801026c
 800be5c:	7ff00000 	.word	0x7ff00000
 800be60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800be62:	1c51      	adds	r1, r2, #1
 800be64:	9117      	str	r1, [sp, #92]	; 0x5c
 800be66:	7852      	ldrb	r2, [r2, #1]
 800be68:	2a30      	cmp	r2, #48	; 0x30
 800be6a:	d0f9      	beq.n	800be60 <_strtod_l+0x2a8>
 800be6c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800be70:	2908      	cmp	r1, #8
 800be72:	f63f af79 	bhi.w	800bd68 <_strtod_l+0x1b0>
 800be76:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800be7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800be7c:	9206      	str	r2, [sp, #24]
 800be7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800be80:	1c51      	adds	r1, r2, #1
 800be82:	9117      	str	r1, [sp, #92]	; 0x5c
 800be84:	7852      	ldrb	r2, [r2, #1]
 800be86:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800be8a:	2e09      	cmp	r6, #9
 800be8c:	d937      	bls.n	800befe <_strtod_l+0x346>
 800be8e:	9e06      	ldr	r6, [sp, #24]
 800be90:	1b89      	subs	r1, r1, r6
 800be92:	2908      	cmp	r1, #8
 800be94:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800be98:	dc02      	bgt.n	800bea0 <_strtod_l+0x2e8>
 800be9a:	4576      	cmp	r6, lr
 800be9c:	bfa8      	it	ge
 800be9e:	4676      	movge	r6, lr
 800bea0:	f1bc 0f00 	cmp.w	ip, #0
 800bea4:	d000      	beq.n	800bea8 <_strtod_l+0x2f0>
 800bea6:	4276      	negs	r6, r6
 800bea8:	2d00      	cmp	r5, #0
 800beaa:	d14d      	bne.n	800bf48 <_strtod_l+0x390>
 800beac:	9904      	ldr	r1, [sp, #16]
 800beae:	4301      	orrs	r1, r0
 800beb0:	f47f aec6 	bne.w	800bc40 <_strtod_l+0x88>
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	f47f aee1 	bne.w	800bc7c <_strtod_l+0xc4>
 800beba:	2a69      	cmp	r2, #105	; 0x69
 800bebc:	d027      	beq.n	800bf0e <_strtod_l+0x356>
 800bebe:	dc24      	bgt.n	800bf0a <_strtod_l+0x352>
 800bec0:	2a49      	cmp	r2, #73	; 0x49
 800bec2:	d024      	beq.n	800bf0e <_strtod_l+0x356>
 800bec4:	2a4e      	cmp	r2, #78	; 0x4e
 800bec6:	f47f aed9 	bne.w	800bc7c <_strtod_l+0xc4>
 800beca:	499f      	ldr	r1, [pc, #636]	; (800c148 <_strtod_l+0x590>)
 800becc:	a817      	add	r0, sp, #92	; 0x5c
 800bece:	f001 fe3d 	bl	800db4c <__match>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	f43f aed2 	beq.w	800bc7c <_strtod_l+0xc4>
 800bed8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	2b28      	cmp	r3, #40	; 0x28
 800bede:	d12d      	bne.n	800bf3c <_strtod_l+0x384>
 800bee0:	499a      	ldr	r1, [pc, #616]	; (800c14c <_strtod_l+0x594>)
 800bee2:	aa1a      	add	r2, sp, #104	; 0x68
 800bee4:	a817      	add	r0, sp, #92	; 0x5c
 800bee6:	f001 fe45 	bl	800db74 <__hexnan>
 800beea:	2805      	cmp	r0, #5
 800beec:	d126      	bne.n	800bf3c <_strtod_l+0x384>
 800beee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bef0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800bef4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bef8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800befc:	e6a0      	b.n	800bc40 <_strtod_l+0x88>
 800befe:	210a      	movs	r1, #10
 800bf00:	fb01 2e0e 	mla	lr, r1, lr, r2
 800bf04:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bf08:	e7b9      	b.n	800be7e <_strtod_l+0x2c6>
 800bf0a:	2a6e      	cmp	r2, #110	; 0x6e
 800bf0c:	e7db      	b.n	800bec6 <_strtod_l+0x30e>
 800bf0e:	4990      	ldr	r1, [pc, #576]	; (800c150 <_strtod_l+0x598>)
 800bf10:	a817      	add	r0, sp, #92	; 0x5c
 800bf12:	f001 fe1b 	bl	800db4c <__match>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	f43f aeb0 	beq.w	800bc7c <_strtod_l+0xc4>
 800bf1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf1e:	498d      	ldr	r1, [pc, #564]	; (800c154 <_strtod_l+0x59c>)
 800bf20:	3b01      	subs	r3, #1
 800bf22:	a817      	add	r0, sp, #92	; 0x5c
 800bf24:	9317      	str	r3, [sp, #92]	; 0x5c
 800bf26:	f001 fe11 	bl	800db4c <__match>
 800bf2a:	b910      	cbnz	r0, 800bf32 <_strtod_l+0x37a>
 800bf2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf2e:	3301      	adds	r3, #1
 800bf30:	9317      	str	r3, [sp, #92]	; 0x5c
 800bf32:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c164 <_strtod_l+0x5ac>
 800bf36:	f04f 0a00 	mov.w	sl, #0
 800bf3a:	e681      	b.n	800bc40 <_strtod_l+0x88>
 800bf3c:	4886      	ldr	r0, [pc, #536]	; (800c158 <_strtod_l+0x5a0>)
 800bf3e:	f002 fd17 	bl	800e970 <nan>
 800bf42:	ec5b ab10 	vmov	sl, fp, d0
 800bf46:	e67b      	b.n	800bc40 <_strtod_l+0x88>
 800bf48:	9b05      	ldr	r3, [sp, #20]
 800bf4a:	9807      	ldr	r0, [sp, #28]
 800bf4c:	1af3      	subs	r3, r6, r3
 800bf4e:	2f00      	cmp	r7, #0
 800bf50:	bf08      	it	eq
 800bf52:	462f      	moveq	r7, r5
 800bf54:	2d10      	cmp	r5, #16
 800bf56:	9306      	str	r3, [sp, #24]
 800bf58:	46a8      	mov	r8, r5
 800bf5a:	bfa8      	it	ge
 800bf5c:	f04f 0810 	movge.w	r8, #16
 800bf60:	f7f4 faf8 	bl	8000554 <__aeabi_ui2d>
 800bf64:	2d09      	cmp	r5, #9
 800bf66:	4682      	mov	sl, r0
 800bf68:	468b      	mov	fp, r1
 800bf6a:	dd13      	ble.n	800bf94 <_strtod_l+0x3dc>
 800bf6c:	4b7b      	ldr	r3, [pc, #492]	; (800c15c <_strtod_l+0x5a4>)
 800bf6e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bf72:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bf76:	f7f4 fb67 	bl	8000648 <__aeabi_dmul>
 800bf7a:	4682      	mov	sl, r0
 800bf7c:	4648      	mov	r0, r9
 800bf7e:	468b      	mov	fp, r1
 800bf80:	f7f4 fae8 	bl	8000554 <__aeabi_ui2d>
 800bf84:	4602      	mov	r2, r0
 800bf86:	460b      	mov	r3, r1
 800bf88:	4650      	mov	r0, sl
 800bf8a:	4659      	mov	r1, fp
 800bf8c:	f7f4 f9a6 	bl	80002dc <__adddf3>
 800bf90:	4682      	mov	sl, r0
 800bf92:	468b      	mov	fp, r1
 800bf94:	2d0f      	cmp	r5, #15
 800bf96:	dc38      	bgt.n	800c00a <_strtod_l+0x452>
 800bf98:	9b06      	ldr	r3, [sp, #24]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	f43f ae50 	beq.w	800bc40 <_strtod_l+0x88>
 800bfa0:	dd24      	ble.n	800bfec <_strtod_l+0x434>
 800bfa2:	2b16      	cmp	r3, #22
 800bfa4:	dc0b      	bgt.n	800bfbe <_strtod_l+0x406>
 800bfa6:	496d      	ldr	r1, [pc, #436]	; (800c15c <_strtod_l+0x5a4>)
 800bfa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bfac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfb0:	4652      	mov	r2, sl
 800bfb2:	465b      	mov	r3, fp
 800bfb4:	f7f4 fb48 	bl	8000648 <__aeabi_dmul>
 800bfb8:	4682      	mov	sl, r0
 800bfba:	468b      	mov	fp, r1
 800bfbc:	e640      	b.n	800bc40 <_strtod_l+0x88>
 800bfbe:	9a06      	ldr	r2, [sp, #24]
 800bfc0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	db20      	blt.n	800c00a <_strtod_l+0x452>
 800bfc8:	4c64      	ldr	r4, [pc, #400]	; (800c15c <_strtod_l+0x5a4>)
 800bfca:	f1c5 050f 	rsb	r5, r5, #15
 800bfce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bfd2:	4652      	mov	r2, sl
 800bfd4:	465b      	mov	r3, fp
 800bfd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfda:	f7f4 fb35 	bl	8000648 <__aeabi_dmul>
 800bfde:	9b06      	ldr	r3, [sp, #24]
 800bfe0:	1b5d      	subs	r5, r3, r5
 800bfe2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bfe6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bfea:	e7e3      	b.n	800bfb4 <_strtod_l+0x3fc>
 800bfec:	9b06      	ldr	r3, [sp, #24]
 800bfee:	3316      	adds	r3, #22
 800bff0:	db0b      	blt.n	800c00a <_strtod_l+0x452>
 800bff2:	9b05      	ldr	r3, [sp, #20]
 800bff4:	1b9e      	subs	r6, r3, r6
 800bff6:	4b59      	ldr	r3, [pc, #356]	; (800c15c <_strtod_l+0x5a4>)
 800bff8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800bffc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c000:	4650      	mov	r0, sl
 800c002:	4659      	mov	r1, fp
 800c004:	f7f4 fc4a 	bl	800089c <__aeabi_ddiv>
 800c008:	e7d6      	b.n	800bfb8 <_strtod_l+0x400>
 800c00a:	9b06      	ldr	r3, [sp, #24]
 800c00c:	eba5 0808 	sub.w	r8, r5, r8
 800c010:	4498      	add	r8, r3
 800c012:	f1b8 0f00 	cmp.w	r8, #0
 800c016:	dd74      	ble.n	800c102 <_strtod_l+0x54a>
 800c018:	f018 030f 	ands.w	r3, r8, #15
 800c01c:	d00a      	beq.n	800c034 <_strtod_l+0x47c>
 800c01e:	494f      	ldr	r1, [pc, #316]	; (800c15c <_strtod_l+0x5a4>)
 800c020:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c024:	4652      	mov	r2, sl
 800c026:	465b      	mov	r3, fp
 800c028:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c02c:	f7f4 fb0c 	bl	8000648 <__aeabi_dmul>
 800c030:	4682      	mov	sl, r0
 800c032:	468b      	mov	fp, r1
 800c034:	f038 080f 	bics.w	r8, r8, #15
 800c038:	d04f      	beq.n	800c0da <_strtod_l+0x522>
 800c03a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c03e:	dd22      	ble.n	800c086 <_strtod_l+0x4ce>
 800c040:	2500      	movs	r5, #0
 800c042:	462e      	mov	r6, r5
 800c044:	9507      	str	r5, [sp, #28]
 800c046:	9505      	str	r5, [sp, #20]
 800c048:	2322      	movs	r3, #34	; 0x22
 800c04a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c164 <_strtod_l+0x5ac>
 800c04e:	6023      	str	r3, [r4, #0]
 800c050:	f04f 0a00 	mov.w	sl, #0
 800c054:	9b07      	ldr	r3, [sp, #28]
 800c056:	2b00      	cmp	r3, #0
 800c058:	f43f adf2 	beq.w	800bc40 <_strtod_l+0x88>
 800c05c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c05e:	4620      	mov	r0, r4
 800c060:	f001 fe94 	bl	800dd8c <_Bfree>
 800c064:	9905      	ldr	r1, [sp, #20]
 800c066:	4620      	mov	r0, r4
 800c068:	f001 fe90 	bl	800dd8c <_Bfree>
 800c06c:	4631      	mov	r1, r6
 800c06e:	4620      	mov	r0, r4
 800c070:	f001 fe8c 	bl	800dd8c <_Bfree>
 800c074:	9907      	ldr	r1, [sp, #28]
 800c076:	4620      	mov	r0, r4
 800c078:	f001 fe88 	bl	800dd8c <_Bfree>
 800c07c:	4629      	mov	r1, r5
 800c07e:	4620      	mov	r0, r4
 800c080:	f001 fe84 	bl	800dd8c <_Bfree>
 800c084:	e5dc      	b.n	800bc40 <_strtod_l+0x88>
 800c086:	4b36      	ldr	r3, [pc, #216]	; (800c160 <_strtod_l+0x5a8>)
 800c088:	9304      	str	r3, [sp, #16]
 800c08a:	2300      	movs	r3, #0
 800c08c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c090:	4650      	mov	r0, sl
 800c092:	4659      	mov	r1, fp
 800c094:	4699      	mov	r9, r3
 800c096:	f1b8 0f01 	cmp.w	r8, #1
 800c09a:	dc21      	bgt.n	800c0e0 <_strtod_l+0x528>
 800c09c:	b10b      	cbz	r3, 800c0a2 <_strtod_l+0x4ea>
 800c09e:	4682      	mov	sl, r0
 800c0a0:	468b      	mov	fp, r1
 800c0a2:	4b2f      	ldr	r3, [pc, #188]	; (800c160 <_strtod_l+0x5a8>)
 800c0a4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c0a8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c0ac:	4652      	mov	r2, sl
 800c0ae:	465b      	mov	r3, fp
 800c0b0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c0b4:	f7f4 fac8 	bl	8000648 <__aeabi_dmul>
 800c0b8:	4b2a      	ldr	r3, [pc, #168]	; (800c164 <_strtod_l+0x5ac>)
 800c0ba:	460a      	mov	r2, r1
 800c0bc:	400b      	ands	r3, r1
 800c0be:	492a      	ldr	r1, [pc, #168]	; (800c168 <_strtod_l+0x5b0>)
 800c0c0:	428b      	cmp	r3, r1
 800c0c2:	4682      	mov	sl, r0
 800c0c4:	d8bc      	bhi.n	800c040 <_strtod_l+0x488>
 800c0c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c0ca:	428b      	cmp	r3, r1
 800c0cc:	bf86      	itte	hi
 800c0ce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c16c <_strtod_l+0x5b4>
 800c0d2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800c0d6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c0da:	2300      	movs	r3, #0
 800c0dc:	9304      	str	r3, [sp, #16]
 800c0de:	e084      	b.n	800c1ea <_strtod_l+0x632>
 800c0e0:	f018 0f01 	tst.w	r8, #1
 800c0e4:	d005      	beq.n	800c0f2 <_strtod_l+0x53a>
 800c0e6:	9b04      	ldr	r3, [sp, #16]
 800c0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ec:	f7f4 faac 	bl	8000648 <__aeabi_dmul>
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	9a04      	ldr	r2, [sp, #16]
 800c0f4:	3208      	adds	r2, #8
 800c0f6:	f109 0901 	add.w	r9, r9, #1
 800c0fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c0fe:	9204      	str	r2, [sp, #16]
 800c100:	e7c9      	b.n	800c096 <_strtod_l+0x4de>
 800c102:	d0ea      	beq.n	800c0da <_strtod_l+0x522>
 800c104:	f1c8 0800 	rsb	r8, r8, #0
 800c108:	f018 020f 	ands.w	r2, r8, #15
 800c10c:	d00a      	beq.n	800c124 <_strtod_l+0x56c>
 800c10e:	4b13      	ldr	r3, [pc, #76]	; (800c15c <_strtod_l+0x5a4>)
 800c110:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c114:	4650      	mov	r0, sl
 800c116:	4659      	mov	r1, fp
 800c118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11c:	f7f4 fbbe 	bl	800089c <__aeabi_ddiv>
 800c120:	4682      	mov	sl, r0
 800c122:	468b      	mov	fp, r1
 800c124:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c128:	d0d7      	beq.n	800c0da <_strtod_l+0x522>
 800c12a:	f1b8 0f1f 	cmp.w	r8, #31
 800c12e:	dd1f      	ble.n	800c170 <_strtod_l+0x5b8>
 800c130:	2500      	movs	r5, #0
 800c132:	462e      	mov	r6, r5
 800c134:	9507      	str	r5, [sp, #28]
 800c136:	9505      	str	r5, [sp, #20]
 800c138:	2322      	movs	r3, #34	; 0x22
 800c13a:	f04f 0a00 	mov.w	sl, #0
 800c13e:	f04f 0b00 	mov.w	fp, #0
 800c142:	6023      	str	r3, [r4, #0]
 800c144:	e786      	b.n	800c054 <_strtod_l+0x49c>
 800c146:	bf00      	nop
 800c148:	0801023d 	.word	0x0801023d
 800c14c:	08010280 	.word	0x08010280
 800c150:	08010235 	.word	0x08010235
 800c154:	080103c4 	.word	0x080103c4
 800c158:	08010670 	.word	0x08010670
 800c15c:	08010550 	.word	0x08010550
 800c160:	08010528 	.word	0x08010528
 800c164:	7ff00000 	.word	0x7ff00000
 800c168:	7ca00000 	.word	0x7ca00000
 800c16c:	7fefffff 	.word	0x7fefffff
 800c170:	f018 0310 	ands.w	r3, r8, #16
 800c174:	bf18      	it	ne
 800c176:	236a      	movne	r3, #106	; 0x6a
 800c178:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c528 <_strtod_l+0x970>
 800c17c:	9304      	str	r3, [sp, #16]
 800c17e:	4650      	mov	r0, sl
 800c180:	4659      	mov	r1, fp
 800c182:	2300      	movs	r3, #0
 800c184:	f018 0f01 	tst.w	r8, #1
 800c188:	d004      	beq.n	800c194 <_strtod_l+0x5dc>
 800c18a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c18e:	f7f4 fa5b 	bl	8000648 <__aeabi_dmul>
 800c192:	2301      	movs	r3, #1
 800c194:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c198:	f109 0908 	add.w	r9, r9, #8
 800c19c:	d1f2      	bne.n	800c184 <_strtod_l+0x5cc>
 800c19e:	b10b      	cbz	r3, 800c1a4 <_strtod_l+0x5ec>
 800c1a0:	4682      	mov	sl, r0
 800c1a2:	468b      	mov	fp, r1
 800c1a4:	9b04      	ldr	r3, [sp, #16]
 800c1a6:	b1c3      	cbz	r3, 800c1da <_strtod_l+0x622>
 800c1a8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c1ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	4659      	mov	r1, fp
 800c1b4:	dd11      	ble.n	800c1da <_strtod_l+0x622>
 800c1b6:	2b1f      	cmp	r3, #31
 800c1b8:	f340 8124 	ble.w	800c404 <_strtod_l+0x84c>
 800c1bc:	2b34      	cmp	r3, #52	; 0x34
 800c1be:	bfde      	ittt	le
 800c1c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c1c4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800c1c8:	fa03 f202 	lslle.w	r2, r3, r2
 800c1cc:	f04f 0a00 	mov.w	sl, #0
 800c1d0:	bfcc      	ite	gt
 800c1d2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c1d6:	ea02 0b01 	andle.w	fp, r2, r1
 800c1da:	2200      	movs	r2, #0
 800c1dc:	2300      	movs	r3, #0
 800c1de:	4650      	mov	r0, sl
 800c1e0:	4659      	mov	r1, fp
 800c1e2:	f7f4 fc99 	bl	8000b18 <__aeabi_dcmpeq>
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d1a2      	bne.n	800c130 <_strtod_l+0x578>
 800c1ea:	9b07      	ldr	r3, [sp, #28]
 800c1ec:	9300      	str	r3, [sp, #0]
 800c1ee:	9908      	ldr	r1, [sp, #32]
 800c1f0:	462b      	mov	r3, r5
 800c1f2:	463a      	mov	r2, r7
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	f001 fe31 	bl	800de5c <__s2b>
 800c1fa:	9007      	str	r0, [sp, #28]
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	f43f af1f 	beq.w	800c040 <_strtod_l+0x488>
 800c202:	9b05      	ldr	r3, [sp, #20]
 800c204:	1b9e      	subs	r6, r3, r6
 800c206:	9b06      	ldr	r3, [sp, #24]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	bfb4      	ite	lt
 800c20c:	4633      	movlt	r3, r6
 800c20e:	2300      	movge	r3, #0
 800c210:	930c      	str	r3, [sp, #48]	; 0x30
 800c212:	9b06      	ldr	r3, [sp, #24]
 800c214:	2500      	movs	r5, #0
 800c216:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c21a:	9312      	str	r3, [sp, #72]	; 0x48
 800c21c:	462e      	mov	r6, r5
 800c21e:	9b07      	ldr	r3, [sp, #28]
 800c220:	4620      	mov	r0, r4
 800c222:	6859      	ldr	r1, [r3, #4]
 800c224:	f001 fd72 	bl	800dd0c <_Balloc>
 800c228:	9005      	str	r0, [sp, #20]
 800c22a:	2800      	cmp	r0, #0
 800c22c:	f43f af0c 	beq.w	800c048 <_strtod_l+0x490>
 800c230:	9b07      	ldr	r3, [sp, #28]
 800c232:	691a      	ldr	r2, [r3, #16]
 800c234:	3202      	adds	r2, #2
 800c236:	f103 010c 	add.w	r1, r3, #12
 800c23a:	0092      	lsls	r2, r2, #2
 800c23c:	300c      	adds	r0, #12
 800c23e:	f001 fd4b 	bl	800dcd8 <memcpy>
 800c242:	ec4b ab10 	vmov	d0, sl, fp
 800c246:	aa1a      	add	r2, sp, #104	; 0x68
 800c248:	a919      	add	r1, sp, #100	; 0x64
 800c24a:	4620      	mov	r0, r4
 800c24c:	f002 f94c 	bl	800e4e8 <__d2b>
 800c250:	ec4b ab18 	vmov	d8, sl, fp
 800c254:	9018      	str	r0, [sp, #96]	; 0x60
 800c256:	2800      	cmp	r0, #0
 800c258:	f43f aef6 	beq.w	800c048 <_strtod_l+0x490>
 800c25c:	2101      	movs	r1, #1
 800c25e:	4620      	mov	r0, r4
 800c260:	f001 fe96 	bl	800df90 <__i2b>
 800c264:	4606      	mov	r6, r0
 800c266:	2800      	cmp	r0, #0
 800c268:	f43f aeee 	beq.w	800c048 <_strtod_l+0x490>
 800c26c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c26e:	9904      	ldr	r1, [sp, #16]
 800c270:	2b00      	cmp	r3, #0
 800c272:	bfab      	itete	ge
 800c274:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c276:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c278:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c27a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c27e:	bfac      	ite	ge
 800c280:	eb03 0902 	addge.w	r9, r3, r2
 800c284:	1ad7      	sublt	r7, r2, r3
 800c286:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c288:	eba3 0801 	sub.w	r8, r3, r1
 800c28c:	4490      	add	r8, r2
 800c28e:	4ba1      	ldr	r3, [pc, #644]	; (800c514 <_strtod_l+0x95c>)
 800c290:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c294:	4598      	cmp	r8, r3
 800c296:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c29a:	f280 80c7 	bge.w	800c42c <_strtod_l+0x874>
 800c29e:	eba3 0308 	sub.w	r3, r3, r8
 800c2a2:	2b1f      	cmp	r3, #31
 800c2a4:	eba2 0203 	sub.w	r2, r2, r3
 800c2a8:	f04f 0101 	mov.w	r1, #1
 800c2ac:	f300 80b1 	bgt.w	800c412 <_strtod_l+0x85a>
 800c2b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c2b4:	930d      	str	r3, [sp, #52]	; 0x34
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	9308      	str	r3, [sp, #32]
 800c2ba:	eb09 0802 	add.w	r8, r9, r2
 800c2be:	9b04      	ldr	r3, [sp, #16]
 800c2c0:	45c1      	cmp	r9, r8
 800c2c2:	4417      	add	r7, r2
 800c2c4:	441f      	add	r7, r3
 800c2c6:	464b      	mov	r3, r9
 800c2c8:	bfa8      	it	ge
 800c2ca:	4643      	movge	r3, r8
 800c2cc:	42bb      	cmp	r3, r7
 800c2ce:	bfa8      	it	ge
 800c2d0:	463b      	movge	r3, r7
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	bfc2      	ittt	gt
 800c2d6:	eba8 0803 	subgt.w	r8, r8, r3
 800c2da:	1aff      	subgt	r7, r7, r3
 800c2dc:	eba9 0903 	subgt.w	r9, r9, r3
 800c2e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	dd17      	ble.n	800c316 <_strtod_l+0x75e>
 800c2e6:	4631      	mov	r1, r6
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	f001 ff10 	bl	800e110 <__pow5mult>
 800c2f0:	4606      	mov	r6, r0
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	f43f aea8 	beq.w	800c048 <_strtod_l+0x490>
 800c2f8:	4601      	mov	r1, r0
 800c2fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f001 fe5d 	bl	800dfbc <__multiply>
 800c302:	900b      	str	r0, [sp, #44]	; 0x2c
 800c304:	2800      	cmp	r0, #0
 800c306:	f43f ae9f 	beq.w	800c048 <_strtod_l+0x490>
 800c30a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c30c:	4620      	mov	r0, r4
 800c30e:	f001 fd3d 	bl	800dd8c <_Bfree>
 800c312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c314:	9318      	str	r3, [sp, #96]	; 0x60
 800c316:	f1b8 0f00 	cmp.w	r8, #0
 800c31a:	f300 808c 	bgt.w	800c436 <_strtod_l+0x87e>
 800c31e:	9b06      	ldr	r3, [sp, #24]
 800c320:	2b00      	cmp	r3, #0
 800c322:	dd08      	ble.n	800c336 <_strtod_l+0x77e>
 800c324:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c326:	9905      	ldr	r1, [sp, #20]
 800c328:	4620      	mov	r0, r4
 800c32a:	f001 fef1 	bl	800e110 <__pow5mult>
 800c32e:	9005      	str	r0, [sp, #20]
 800c330:	2800      	cmp	r0, #0
 800c332:	f43f ae89 	beq.w	800c048 <_strtod_l+0x490>
 800c336:	2f00      	cmp	r7, #0
 800c338:	dd08      	ble.n	800c34c <_strtod_l+0x794>
 800c33a:	9905      	ldr	r1, [sp, #20]
 800c33c:	463a      	mov	r2, r7
 800c33e:	4620      	mov	r0, r4
 800c340:	f001 ff40 	bl	800e1c4 <__lshift>
 800c344:	9005      	str	r0, [sp, #20]
 800c346:	2800      	cmp	r0, #0
 800c348:	f43f ae7e 	beq.w	800c048 <_strtod_l+0x490>
 800c34c:	f1b9 0f00 	cmp.w	r9, #0
 800c350:	dd08      	ble.n	800c364 <_strtod_l+0x7ac>
 800c352:	4631      	mov	r1, r6
 800c354:	464a      	mov	r2, r9
 800c356:	4620      	mov	r0, r4
 800c358:	f001 ff34 	bl	800e1c4 <__lshift>
 800c35c:	4606      	mov	r6, r0
 800c35e:	2800      	cmp	r0, #0
 800c360:	f43f ae72 	beq.w	800c048 <_strtod_l+0x490>
 800c364:	9a05      	ldr	r2, [sp, #20]
 800c366:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c368:	4620      	mov	r0, r4
 800c36a:	f001 ffb7 	bl	800e2dc <__mdiff>
 800c36e:	4605      	mov	r5, r0
 800c370:	2800      	cmp	r0, #0
 800c372:	f43f ae69 	beq.w	800c048 <_strtod_l+0x490>
 800c376:	68c3      	ldr	r3, [r0, #12]
 800c378:	930b      	str	r3, [sp, #44]	; 0x2c
 800c37a:	2300      	movs	r3, #0
 800c37c:	60c3      	str	r3, [r0, #12]
 800c37e:	4631      	mov	r1, r6
 800c380:	f001 ff90 	bl	800e2a4 <__mcmp>
 800c384:	2800      	cmp	r0, #0
 800c386:	da60      	bge.n	800c44a <_strtod_l+0x892>
 800c388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c38a:	ea53 030a 	orrs.w	r3, r3, sl
 800c38e:	f040 8082 	bne.w	800c496 <_strtod_l+0x8de>
 800c392:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c396:	2b00      	cmp	r3, #0
 800c398:	d17d      	bne.n	800c496 <_strtod_l+0x8de>
 800c39a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c39e:	0d1b      	lsrs	r3, r3, #20
 800c3a0:	051b      	lsls	r3, r3, #20
 800c3a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c3a6:	d976      	bls.n	800c496 <_strtod_l+0x8de>
 800c3a8:	696b      	ldr	r3, [r5, #20]
 800c3aa:	b913      	cbnz	r3, 800c3b2 <_strtod_l+0x7fa>
 800c3ac:	692b      	ldr	r3, [r5, #16]
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	dd71      	ble.n	800c496 <_strtod_l+0x8de>
 800c3b2:	4629      	mov	r1, r5
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f001 ff04 	bl	800e1c4 <__lshift>
 800c3bc:	4631      	mov	r1, r6
 800c3be:	4605      	mov	r5, r0
 800c3c0:	f001 ff70 	bl	800e2a4 <__mcmp>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	dd66      	ble.n	800c496 <_strtod_l+0x8de>
 800c3c8:	9904      	ldr	r1, [sp, #16]
 800c3ca:	4a53      	ldr	r2, [pc, #332]	; (800c518 <_strtod_l+0x960>)
 800c3cc:	465b      	mov	r3, fp
 800c3ce:	2900      	cmp	r1, #0
 800c3d0:	f000 8081 	beq.w	800c4d6 <_strtod_l+0x91e>
 800c3d4:	ea02 010b 	and.w	r1, r2, fp
 800c3d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c3dc:	dc7b      	bgt.n	800c4d6 <_strtod_l+0x91e>
 800c3de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c3e2:	f77f aea9 	ble.w	800c138 <_strtod_l+0x580>
 800c3e6:	4b4d      	ldr	r3, [pc, #308]	; (800c51c <_strtod_l+0x964>)
 800c3e8:	4650      	mov	r0, sl
 800c3ea:	4659      	mov	r1, fp
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	f7f4 f92b 	bl	8000648 <__aeabi_dmul>
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	4303      	orrs	r3, r0
 800c3f6:	bf08      	it	eq
 800c3f8:	2322      	moveq	r3, #34	; 0x22
 800c3fa:	4682      	mov	sl, r0
 800c3fc:	468b      	mov	fp, r1
 800c3fe:	bf08      	it	eq
 800c400:	6023      	streq	r3, [r4, #0]
 800c402:	e62b      	b.n	800c05c <_strtod_l+0x4a4>
 800c404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c408:	fa02 f303 	lsl.w	r3, r2, r3
 800c40c:	ea03 0a0a 	and.w	sl, r3, sl
 800c410:	e6e3      	b.n	800c1da <_strtod_l+0x622>
 800c412:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c416:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c41a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c41e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c422:	fa01 f308 	lsl.w	r3, r1, r8
 800c426:	9308      	str	r3, [sp, #32]
 800c428:	910d      	str	r1, [sp, #52]	; 0x34
 800c42a:	e746      	b.n	800c2ba <_strtod_l+0x702>
 800c42c:	2300      	movs	r3, #0
 800c42e:	9308      	str	r3, [sp, #32]
 800c430:	2301      	movs	r3, #1
 800c432:	930d      	str	r3, [sp, #52]	; 0x34
 800c434:	e741      	b.n	800c2ba <_strtod_l+0x702>
 800c436:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c438:	4642      	mov	r2, r8
 800c43a:	4620      	mov	r0, r4
 800c43c:	f001 fec2 	bl	800e1c4 <__lshift>
 800c440:	9018      	str	r0, [sp, #96]	; 0x60
 800c442:	2800      	cmp	r0, #0
 800c444:	f47f af6b 	bne.w	800c31e <_strtod_l+0x766>
 800c448:	e5fe      	b.n	800c048 <_strtod_l+0x490>
 800c44a:	465f      	mov	r7, fp
 800c44c:	d16e      	bne.n	800c52c <_strtod_l+0x974>
 800c44e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c450:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c454:	b342      	cbz	r2, 800c4a8 <_strtod_l+0x8f0>
 800c456:	4a32      	ldr	r2, [pc, #200]	; (800c520 <_strtod_l+0x968>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d128      	bne.n	800c4ae <_strtod_l+0x8f6>
 800c45c:	9b04      	ldr	r3, [sp, #16]
 800c45e:	4651      	mov	r1, sl
 800c460:	b1eb      	cbz	r3, 800c49e <_strtod_l+0x8e6>
 800c462:	4b2d      	ldr	r3, [pc, #180]	; (800c518 <_strtod_l+0x960>)
 800c464:	403b      	ands	r3, r7
 800c466:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c46a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c46e:	d819      	bhi.n	800c4a4 <_strtod_l+0x8ec>
 800c470:	0d1b      	lsrs	r3, r3, #20
 800c472:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c476:	fa02 f303 	lsl.w	r3, r2, r3
 800c47a:	4299      	cmp	r1, r3
 800c47c:	d117      	bne.n	800c4ae <_strtod_l+0x8f6>
 800c47e:	4b29      	ldr	r3, [pc, #164]	; (800c524 <_strtod_l+0x96c>)
 800c480:	429f      	cmp	r7, r3
 800c482:	d102      	bne.n	800c48a <_strtod_l+0x8d2>
 800c484:	3101      	adds	r1, #1
 800c486:	f43f addf 	beq.w	800c048 <_strtod_l+0x490>
 800c48a:	4b23      	ldr	r3, [pc, #140]	; (800c518 <_strtod_l+0x960>)
 800c48c:	403b      	ands	r3, r7
 800c48e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c492:	f04f 0a00 	mov.w	sl, #0
 800c496:	9b04      	ldr	r3, [sp, #16]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1a4      	bne.n	800c3e6 <_strtod_l+0x82e>
 800c49c:	e5de      	b.n	800c05c <_strtod_l+0x4a4>
 800c49e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4a2:	e7ea      	b.n	800c47a <_strtod_l+0x8c2>
 800c4a4:	4613      	mov	r3, r2
 800c4a6:	e7e8      	b.n	800c47a <_strtod_l+0x8c2>
 800c4a8:	ea53 030a 	orrs.w	r3, r3, sl
 800c4ac:	d08c      	beq.n	800c3c8 <_strtod_l+0x810>
 800c4ae:	9b08      	ldr	r3, [sp, #32]
 800c4b0:	b1db      	cbz	r3, 800c4ea <_strtod_l+0x932>
 800c4b2:	423b      	tst	r3, r7
 800c4b4:	d0ef      	beq.n	800c496 <_strtod_l+0x8de>
 800c4b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4b8:	9a04      	ldr	r2, [sp, #16]
 800c4ba:	4650      	mov	r0, sl
 800c4bc:	4659      	mov	r1, fp
 800c4be:	b1c3      	cbz	r3, 800c4f2 <_strtod_l+0x93a>
 800c4c0:	f7ff fb5c 	bl	800bb7c <sulp>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	460b      	mov	r3, r1
 800c4c8:	ec51 0b18 	vmov	r0, r1, d8
 800c4cc:	f7f3 ff06 	bl	80002dc <__adddf3>
 800c4d0:	4682      	mov	sl, r0
 800c4d2:	468b      	mov	fp, r1
 800c4d4:	e7df      	b.n	800c496 <_strtod_l+0x8de>
 800c4d6:	4013      	ands	r3, r2
 800c4d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c4dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c4e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c4e4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c4e8:	e7d5      	b.n	800c496 <_strtod_l+0x8de>
 800c4ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4ec:	ea13 0f0a 	tst.w	r3, sl
 800c4f0:	e7e0      	b.n	800c4b4 <_strtod_l+0x8fc>
 800c4f2:	f7ff fb43 	bl	800bb7c <sulp>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	ec51 0b18 	vmov	r0, r1, d8
 800c4fe:	f7f3 feeb 	bl	80002d8 <__aeabi_dsub>
 800c502:	2200      	movs	r2, #0
 800c504:	2300      	movs	r3, #0
 800c506:	4682      	mov	sl, r0
 800c508:	468b      	mov	fp, r1
 800c50a:	f7f4 fb05 	bl	8000b18 <__aeabi_dcmpeq>
 800c50e:	2800      	cmp	r0, #0
 800c510:	d0c1      	beq.n	800c496 <_strtod_l+0x8de>
 800c512:	e611      	b.n	800c138 <_strtod_l+0x580>
 800c514:	fffffc02 	.word	0xfffffc02
 800c518:	7ff00000 	.word	0x7ff00000
 800c51c:	39500000 	.word	0x39500000
 800c520:	000fffff 	.word	0x000fffff
 800c524:	7fefffff 	.word	0x7fefffff
 800c528:	08010298 	.word	0x08010298
 800c52c:	4631      	mov	r1, r6
 800c52e:	4628      	mov	r0, r5
 800c530:	f002 f836 	bl	800e5a0 <__ratio>
 800c534:	ec59 8b10 	vmov	r8, r9, d0
 800c538:	ee10 0a10 	vmov	r0, s0
 800c53c:	2200      	movs	r2, #0
 800c53e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c542:	4649      	mov	r1, r9
 800c544:	f7f4 fafc 	bl	8000b40 <__aeabi_dcmple>
 800c548:	2800      	cmp	r0, #0
 800c54a:	d07a      	beq.n	800c642 <_strtod_l+0xa8a>
 800c54c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d04a      	beq.n	800c5e8 <_strtod_l+0xa30>
 800c552:	4b95      	ldr	r3, [pc, #596]	; (800c7a8 <_strtod_l+0xbf0>)
 800c554:	2200      	movs	r2, #0
 800c556:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c55a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c7a8 <_strtod_l+0xbf0>
 800c55e:	f04f 0800 	mov.w	r8, #0
 800c562:	4b92      	ldr	r3, [pc, #584]	; (800c7ac <_strtod_l+0xbf4>)
 800c564:	403b      	ands	r3, r7
 800c566:	930d      	str	r3, [sp, #52]	; 0x34
 800c568:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c56a:	4b91      	ldr	r3, [pc, #580]	; (800c7b0 <_strtod_l+0xbf8>)
 800c56c:	429a      	cmp	r2, r3
 800c56e:	f040 80b0 	bne.w	800c6d2 <_strtod_l+0xb1a>
 800c572:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c576:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c57a:	ec4b ab10 	vmov	d0, sl, fp
 800c57e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c582:	f001 ff35 	bl	800e3f0 <__ulp>
 800c586:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c58a:	ec53 2b10 	vmov	r2, r3, d0
 800c58e:	f7f4 f85b 	bl	8000648 <__aeabi_dmul>
 800c592:	4652      	mov	r2, sl
 800c594:	465b      	mov	r3, fp
 800c596:	f7f3 fea1 	bl	80002dc <__adddf3>
 800c59a:	460b      	mov	r3, r1
 800c59c:	4983      	ldr	r1, [pc, #524]	; (800c7ac <_strtod_l+0xbf4>)
 800c59e:	4a85      	ldr	r2, [pc, #532]	; (800c7b4 <_strtod_l+0xbfc>)
 800c5a0:	4019      	ands	r1, r3
 800c5a2:	4291      	cmp	r1, r2
 800c5a4:	4682      	mov	sl, r0
 800c5a6:	d960      	bls.n	800c66a <_strtod_l+0xab2>
 800c5a8:	ee18 3a90 	vmov	r3, s17
 800c5ac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d104      	bne.n	800c5be <_strtod_l+0xa06>
 800c5b4:	ee18 3a10 	vmov	r3, s16
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	f43f ad45 	beq.w	800c048 <_strtod_l+0x490>
 800c5be:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c7c0 <_strtod_l+0xc08>
 800c5c2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c5c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	f001 fbdf 	bl	800dd8c <_Bfree>
 800c5ce:	9905      	ldr	r1, [sp, #20]
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	f001 fbdb 	bl	800dd8c <_Bfree>
 800c5d6:	4631      	mov	r1, r6
 800c5d8:	4620      	mov	r0, r4
 800c5da:	f001 fbd7 	bl	800dd8c <_Bfree>
 800c5de:	4629      	mov	r1, r5
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f001 fbd3 	bl	800dd8c <_Bfree>
 800c5e6:	e61a      	b.n	800c21e <_strtod_l+0x666>
 800c5e8:	f1ba 0f00 	cmp.w	sl, #0
 800c5ec:	d11b      	bne.n	800c626 <_strtod_l+0xa6e>
 800c5ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5f2:	b9f3      	cbnz	r3, 800c632 <_strtod_l+0xa7a>
 800c5f4:	4b6c      	ldr	r3, [pc, #432]	; (800c7a8 <_strtod_l+0xbf0>)
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	4640      	mov	r0, r8
 800c5fa:	4649      	mov	r1, r9
 800c5fc:	f7f4 fa96 	bl	8000b2c <__aeabi_dcmplt>
 800c600:	b9d0      	cbnz	r0, 800c638 <_strtod_l+0xa80>
 800c602:	4640      	mov	r0, r8
 800c604:	4649      	mov	r1, r9
 800c606:	4b6c      	ldr	r3, [pc, #432]	; (800c7b8 <_strtod_l+0xc00>)
 800c608:	2200      	movs	r2, #0
 800c60a:	f7f4 f81d 	bl	8000648 <__aeabi_dmul>
 800c60e:	4680      	mov	r8, r0
 800c610:	4689      	mov	r9, r1
 800c612:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c616:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c61a:	9315      	str	r3, [sp, #84]	; 0x54
 800c61c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c620:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c624:	e79d      	b.n	800c562 <_strtod_l+0x9aa>
 800c626:	f1ba 0f01 	cmp.w	sl, #1
 800c62a:	d102      	bne.n	800c632 <_strtod_l+0xa7a>
 800c62c:	2f00      	cmp	r7, #0
 800c62e:	f43f ad83 	beq.w	800c138 <_strtod_l+0x580>
 800c632:	4b62      	ldr	r3, [pc, #392]	; (800c7bc <_strtod_l+0xc04>)
 800c634:	2200      	movs	r2, #0
 800c636:	e78e      	b.n	800c556 <_strtod_l+0x99e>
 800c638:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c7b8 <_strtod_l+0xc00>
 800c63c:	f04f 0800 	mov.w	r8, #0
 800c640:	e7e7      	b.n	800c612 <_strtod_l+0xa5a>
 800c642:	4b5d      	ldr	r3, [pc, #372]	; (800c7b8 <_strtod_l+0xc00>)
 800c644:	4640      	mov	r0, r8
 800c646:	4649      	mov	r1, r9
 800c648:	2200      	movs	r2, #0
 800c64a:	f7f3 fffd 	bl	8000648 <__aeabi_dmul>
 800c64e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c650:	4680      	mov	r8, r0
 800c652:	4689      	mov	r9, r1
 800c654:	b933      	cbnz	r3, 800c664 <_strtod_l+0xaac>
 800c656:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c65a:	900e      	str	r0, [sp, #56]	; 0x38
 800c65c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c65e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c662:	e7dd      	b.n	800c620 <_strtod_l+0xa68>
 800c664:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c668:	e7f9      	b.n	800c65e <_strtod_l+0xaa6>
 800c66a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c66e:	9b04      	ldr	r3, [sp, #16]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d1a8      	bne.n	800c5c6 <_strtod_l+0xa0e>
 800c674:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c678:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c67a:	0d1b      	lsrs	r3, r3, #20
 800c67c:	051b      	lsls	r3, r3, #20
 800c67e:	429a      	cmp	r2, r3
 800c680:	d1a1      	bne.n	800c5c6 <_strtod_l+0xa0e>
 800c682:	4640      	mov	r0, r8
 800c684:	4649      	mov	r1, r9
 800c686:	f7f4 fb3f 	bl	8000d08 <__aeabi_d2lz>
 800c68a:	f7f3 ffaf 	bl	80005ec <__aeabi_l2d>
 800c68e:	4602      	mov	r2, r0
 800c690:	460b      	mov	r3, r1
 800c692:	4640      	mov	r0, r8
 800c694:	4649      	mov	r1, r9
 800c696:	f7f3 fe1f 	bl	80002d8 <__aeabi_dsub>
 800c69a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c69c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c6a0:	ea43 030a 	orr.w	r3, r3, sl
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	4680      	mov	r8, r0
 800c6a8:	4689      	mov	r9, r1
 800c6aa:	d055      	beq.n	800c758 <_strtod_l+0xba0>
 800c6ac:	a336      	add	r3, pc, #216	; (adr r3, 800c788 <_strtod_l+0xbd0>)
 800c6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b2:	f7f4 fa3b 	bl	8000b2c <__aeabi_dcmplt>
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	f47f acd0 	bne.w	800c05c <_strtod_l+0x4a4>
 800c6bc:	a334      	add	r3, pc, #208	; (adr r3, 800c790 <_strtod_l+0xbd8>)
 800c6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c2:	4640      	mov	r0, r8
 800c6c4:	4649      	mov	r1, r9
 800c6c6:	f7f4 fa4f 	bl	8000b68 <__aeabi_dcmpgt>
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	f43f af7b 	beq.w	800c5c6 <_strtod_l+0xa0e>
 800c6d0:	e4c4      	b.n	800c05c <_strtod_l+0x4a4>
 800c6d2:	9b04      	ldr	r3, [sp, #16]
 800c6d4:	b333      	cbz	r3, 800c724 <_strtod_l+0xb6c>
 800c6d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c6dc:	d822      	bhi.n	800c724 <_strtod_l+0xb6c>
 800c6de:	a32e      	add	r3, pc, #184	; (adr r3, 800c798 <_strtod_l+0xbe0>)
 800c6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e4:	4640      	mov	r0, r8
 800c6e6:	4649      	mov	r1, r9
 800c6e8:	f7f4 fa2a 	bl	8000b40 <__aeabi_dcmple>
 800c6ec:	b1a0      	cbz	r0, 800c718 <_strtod_l+0xb60>
 800c6ee:	4649      	mov	r1, r9
 800c6f0:	4640      	mov	r0, r8
 800c6f2:	f7f4 fa81 	bl	8000bf8 <__aeabi_d2uiz>
 800c6f6:	2801      	cmp	r0, #1
 800c6f8:	bf38      	it	cc
 800c6fa:	2001      	movcc	r0, #1
 800c6fc:	f7f3 ff2a 	bl	8000554 <__aeabi_ui2d>
 800c700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c702:	4680      	mov	r8, r0
 800c704:	4689      	mov	r9, r1
 800c706:	bb23      	cbnz	r3, 800c752 <_strtod_l+0xb9a>
 800c708:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c70c:	9010      	str	r0, [sp, #64]	; 0x40
 800c70e:	9311      	str	r3, [sp, #68]	; 0x44
 800c710:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c714:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c71a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c71c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c720:	1a9b      	subs	r3, r3, r2
 800c722:	9309      	str	r3, [sp, #36]	; 0x24
 800c724:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c728:	eeb0 0a48 	vmov.f32	s0, s16
 800c72c:	eef0 0a68 	vmov.f32	s1, s17
 800c730:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c734:	f001 fe5c 	bl	800e3f0 <__ulp>
 800c738:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c73c:	ec53 2b10 	vmov	r2, r3, d0
 800c740:	f7f3 ff82 	bl	8000648 <__aeabi_dmul>
 800c744:	ec53 2b18 	vmov	r2, r3, d8
 800c748:	f7f3 fdc8 	bl	80002dc <__adddf3>
 800c74c:	4682      	mov	sl, r0
 800c74e:	468b      	mov	fp, r1
 800c750:	e78d      	b.n	800c66e <_strtod_l+0xab6>
 800c752:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c756:	e7db      	b.n	800c710 <_strtod_l+0xb58>
 800c758:	a311      	add	r3, pc, #68	; (adr r3, 800c7a0 <_strtod_l+0xbe8>)
 800c75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75e:	f7f4 f9e5 	bl	8000b2c <__aeabi_dcmplt>
 800c762:	e7b2      	b.n	800c6ca <_strtod_l+0xb12>
 800c764:	2300      	movs	r3, #0
 800c766:	930a      	str	r3, [sp, #40]	; 0x28
 800c768:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c76a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c76c:	6013      	str	r3, [r2, #0]
 800c76e:	f7ff ba6b 	b.w	800bc48 <_strtod_l+0x90>
 800c772:	2a65      	cmp	r2, #101	; 0x65
 800c774:	f43f ab5f 	beq.w	800be36 <_strtod_l+0x27e>
 800c778:	2a45      	cmp	r2, #69	; 0x45
 800c77a:	f43f ab5c 	beq.w	800be36 <_strtod_l+0x27e>
 800c77e:	2301      	movs	r3, #1
 800c780:	f7ff bb94 	b.w	800beac <_strtod_l+0x2f4>
 800c784:	f3af 8000 	nop.w
 800c788:	94a03595 	.word	0x94a03595
 800c78c:	3fdfffff 	.word	0x3fdfffff
 800c790:	35afe535 	.word	0x35afe535
 800c794:	3fe00000 	.word	0x3fe00000
 800c798:	ffc00000 	.word	0xffc00000
 800c79c:	41dfffff 	.word	0x41dfffff
 800c7a0:	94a03595 	.word	0x94a03595
 800c7a4:	3fcfffff 	.word	0x3fcfffff
 800c7a8:	3ff00000 	.word	0x3ff00000
 800c7ac:	7ff00000 	.word	0x7ff00000
 800c7b0:	7fe00000 	.word	0x7fe00000
 800c7b4:	7c9fffff 	.word	0x7c9fffff
 800c7b8:	3fe00000 	.word	0x3fe00000
 800c7bc:	bff00000 	.word	0xbff00000
 800c7c0:	7fefffff 	.word	0x7fefffff

0800c7c4 <_strtod_r>:
 800c7c4:	4b01      	ldr	r3, [pc, #4]	; (800c7cc <_strtod_r+0x8>)
 800c7c6:	f7ff b9f7 	b.w	800bbb8 <_strtod_l>
 800c7ca:	bf00      	nop
 800c7cc:	200001ec 	.word	0x200001ec

0800c7d0 <_strtol_l.constprop.0>:
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7d6:	d001      	beq.n	800c7dc <_strtol_l.constprop.0+0xc>
 800c7d8:	2b24      	cmp	r3, #36	; 0x24
 800c7da:	d906      	bls.n	800c7ea <_strtol_l.constprop.0+0x1a>
 800c7dc:	f7fe f9fc 	bl	800abd8 <__errno>
 800c7e0:	2316      	movs	r3, #22
 800c7e2:	6003      	str	r3, [r0, #0]
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c8d0 <_strtol_l.constprop.0+0x100>
 800c7ee:	460d      	mov	r5, r1
 800c7f0:	462e      	mov	r6, r5
 800c7f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c7fa:	f017 0708 	ands.w	r7, r7, #8
 800c7fe:	d1f7      	bne.n	800c7f0 <_strtol_l.constprop.0+0x20>
 800c800:	2c2d      	cmp	r4, #45	; 0x2d
 800c802:	d132      	bne.n	800c86a <_strtol_l.constprop.0+0x9a>
 800c804:	782c      	ldrb	r4, [r5, #0]
 800c806:	2701      	movs	r7, #1
 800c808:	1cb5      	adds	r5, r6, #2
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d05b      	beq.n	800c8c6 <_strtol_l.constprop.0+0xf6>
 800c80e:	2b10      	cmp	r3, #16
 800c810:	d109      	bne.n	800c826 <_strtol_l.constprop.0+0x56>
 800c812:	2c30      	cmp	r4, #48	; 0x30
 800c814:	d107      	bne.n	800c826 <_strtol_l.constprop.0+0x56>
 800c816:	782c      	ldrb	r4, [r5, #0]
 800c818:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c81c:	2c58      	cmp	r4, #88	; 0x58
 800c81e:	d14d      	bne.n	800c8bc <_strtol_l.constprop.0+0xec>
 800c820:	786c      	ldrb	r4, [r5, #1]
 800c822:	2310      	movs	r3, #16
 800c824:	3502      	adds	r5, #2
 800c826:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c82a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c82e:	f04f 0c00 	mov.w	ip, #0
 800c832:	fbb8 f9f3 	udiv	r9, r8, r3
 800c836:	4666      	mov	r6, ip
 800c838:	fb03 8a19 	mls	sl, r3, r9, r8
 800c83c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c840:	f1be 0f09 	cmp.w	lr, #9
 800c844:	d816      	bhi.n	800c874 <_strtol_l.constprop.0+0xa4>
 800c846:	4674      	mov	r4, lr
 800c848:	42a3      	cmp	r3, r4
 800c84a:	dd24      	ble.n	800c896 <_strtol_l.constprop.0+0xc6>
 800c84c:	f1bc 0f00 	cmp.w	ip, #0
 800c850:	db1e      	blt.n	800c890 <_strtol_l.constprop.0+0xc0>
 800c852:	45b1      	cmp	r9, r6
 800c854:	d31c      	bcc.n	800c890 <_strtol_l.constprop.0+0xc0>
 800c856:	d101      	bne.n	800c85c <_strtol_l.constprop.0+0x8c>
 800c858:	45a2      	cmp	sl, r4
 800c85a:	db19      	blt.n	800c890 <_strtol_l.constprop.0+0xc0>
 800c85c:	fb06 4603 	mla	r6, r6, r3, r4
 800c860:	f04f 0c01 	mov.w	ip, #1
 800c864:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c868:	e7e8      	b.n	800c83c <_strtol_l.constprop.0+0x6c>
 800c86a:	2c2b      	cmp	r4, #43	; 0x2b
 800c86c:	bf04      	itt	eq
 800c86e:	782c      	ldrbeq	r4, [r5, #0]
 800c870:	1cb5      	addeq	r5, r6, #2
 800c872:	e7ca      	b.n	800c80a <_strtol_l.constprop.0+0x3a>
 800c874:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c878:	f1be 0f19 	cmp.w	lr, #25
 800c87c:	d801      	bhi.n	800c882 <_strtol_l.constprop.0+0xb2>
 800c87e:	3c37      	subs	r4, #55	; 0x37
 800c880:	e7e2      	b.n	800c848 <_strtol_l.constprop.0+0x78>
 800c882:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c886:	f1be 0f19 	cmp.w	lr, #25
 800c88a:	d804      	bhi.n	800c896 <_strtol_l.constprop.0+0xc6>
 800c88c:	3c57      	subs	r4, #87	; 0x57
 800c88e:	e7db      	b.n	800c848 <_strtol_l.constprop.0+0x78>
 800c890:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c894:	e7e6      	b.n	800c864 <_strtol_l.constprop.0+0x94>
 800c896:	f1bc 0f00 	cmp.w	ip, #0
 800c89a:	da05      	bge.n	800c8a8 <_strtol_l.constprop.0+0xd8>
 800c89c:	2322      	movs	r3, #34	; 0x22
 800c89e:	6003      	str	r3, [r0, #0]
 800c8a0:	4646      	mov	r6, r8
 800c8a2:	b942      	cbnz	r2, 800c8b6 <_strtol_l.constprop.0+0xe6>
 800c8a4:	4630      	mov	r0, r6
 800c8a6:	e79e      	b.n	800c7e6 <_strtol_l.constprop.0+0x16>
 800c8a8:	b107      	cbz	r7, 800c8ac <_strtol_l.constprop.0+0xdc>
 800c8aa:	4276      	negs	r6, r6
 800c8ac:	2a00      	cmp	r2, #0
 800c8ae:	d0f9      	beq.n	800c8a4 <_strtol_l.constprop.0+0xd4>
 800c8b0:	f1bc 0f00 	cmp.w	ip, #0
 800c8b4:	d000      	beq.n	800c8b8 <_strtol_l.constprop.0+0xe8>
 800c8b6:	1e69      	subs	r1, r5, #1
 800c8b8:	6011      	str	r1, [r2, #0]
 800c8ba:	e7f3      	b.n	800c8a4 <_strtol_l.constprop.0+0xd4>
 800c8bc:	2430      	movs	r4, #48	; 0x30
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d1b1      	bne.n	800c826 <_strtol_l.constprop.0+0x56>
 800c8c2:	2308      	movs	r3, #8
 800c8c4:	e7af      	b.n	800c826 <_strtol_l.constprop.0+0x56>
 800c8c6:	2c30      	cmp	r4, #48	; 0x30
 800c8c8:	d0a5      	beq.n	800c816 <_strtol_l.constprop.0+0x46>
 800c8ca:	230a      	movs	r3, #10
 800c8cc:	e7ab      	b.n	800c826 <_strtol_l.constprop.0+0x56>
 800c8ce:	bf00      	nop
 800c8d0:	080102c1 	.word	0x080102c1

0800c8d4 <_strtol_r>:
 800c8d4:	f7ff bf7c 	b.w	800c7d0 <_strtol_l.constprop.0>

0800c8d8 <quorem>:
 800c8d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8dc:	6903      	ldr	r3, [r0, #16]
 800c8de:	690c      	ldr	r4, [r1, #16]
 800c8e0:	42a3      	cmp	r3, r4
 800c8e2:	4607      	mov	r7, r0
 800c8e4:	f2c0 8081 	blt.w	800c9ea <quorem+0x112>
 800c8e8:	3c01      	subs	r4, #1
 800c8ea:	f101 0814 	add.w	r8, r1, #20
 800c8ee:	f100 0514 	add.w	r5, r0, #20
 800c8f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8f6:	9301      	str	r3, [sp, #4]
 800c8f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c8fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c900:	3301      	adds	r3, #1
 800c902:	429a      	cmp	r2, r3
 800c904:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c908:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c90c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c910:	d331      	bcc.n	800c976 <quorem+0x9e>
 800c912:	f04f 0e00 	mov.w	lr, #0
 800c916:	4640      	mov	r0, r8
 800c918:	46ac      	mov	ip, r5
 800c91a:	46f2      	mov	sl, lr
 800c91c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c920:	b293      	uxth	r3, r2
 800c922:	fb06 e303 	mla	r3, r6, r3, lr
 800c926:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	ebaa 0303 	sub.w	r3, sl, r3
 800c930:	f8dc a000 	ldr.w	sl, [ip]
 800c934:	0c12      	lsrs	r2, r2, #16
 800c936:	fa13 f38a 	uxtah	r3, r3, sl
 800c93a:	fb06 e202 	mla	r2, r6, r2, lr
 800c93e:	9300      	str	r3, [sp, #0]
 800c940:	9b00      	ldr	r3, [sp, #0]
 800c942:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c946:	b292      	uxth	r2, r2
 800c948:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c94c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c950:	f8bd 3000 	ldrh.w	r3, [sp]
 800c954:	4581      	cmp	r9, r0
 800c956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c95a:	f84c 3b04 	str.w	r3, [ip], #4
 800c95e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c962:	d2db      	bcs.n	800c91c <quorem+0x44>
 800c964:	f855 300b 	ldr.w	r3, [r5, fp]
 800c968:	b92b      	cbnz	r3, 800c976 <quorem+0x9e>
 800c96a:	9b01      	ldr	r3, [sp, #4]
 800c96c:	3b04      	subs	r3, #4
 800c96e:	429d      	cmp	r5, r3
 800c970:	461a      	mov	r2, r3
 800c972:	d32e      	bcc.n	800c9d2 <quorem+0xfa>
 800c974:	613c      	str	r4, [r7, #16]
 800c976:	4638      	mov	r0, r7
 800c978:	f001 fc94 	bl	800e2a4 <__mcmp>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	db24      	blt.n	800c9ca <quorem+0xf2>
 800c980:	3601      	adds	r6, #1
 800c982:	4628      	mov	r0, r5
 800c984:	f04f 0c00 	mov.w	ip, #0
 800c988:	f858 2b04 	ldr.w	r2, [r8], #4
 800c98c:	f8d0 e000 	ldr.w	lr, [r0]
 800c990:	b293      	uxth	r3, r2
 800c992:	ebac 0303 	sub.w	r3, ip, r3
 800c996:	0c12      	lsrs	r2, r2, #16
 800c998:	fa13 f38e 	uxtah	r3, r3, lr
 800c99c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c9a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9aa:	45c1      	cmp	r9, r8
 800c9ac:	f840 3b04 	str.w	r3, [r0], #4
 800c9b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c9b4:	d2e8      	bcs.n	800c988 <quorem+0xb0>
 800c9b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c9be:	b922      	cbnz	r2, 800c9ca <quorem+0xf2>
 800c9c0:	3b04      	subs	r3, #4
 800c9c2:	429d      	cmp	r5, r3
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	d30a      	bcc.n	800c9de <quorem+0x106>
 800c9c8:	613c      	str	r4, [r7, #16]
 800c9ca:	4630      	mov	r0, r6
 800c9cc:	b003      	add	sp, #12
 800c9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d2:	6812      	ldr	r2, [r2, #0]
 800c9d4:	3b04      	subs	r3, #4
 800c9d6:	2a00      	cmp	r2, #0
 800c9d8:	d1cc      	bne.n	800c974 <quorem+0x9c>
 800c9da:	3c01      	subs	r4, #1
 800c9dc:	e7c7      	b.n	800c96e <quorem+0x96>
 800c9de:	6812      	ldr	r2, [r2, #0]
 800c9e0:	3b04      	subs	r3, #4
 800c9e2:	2a00      	cmp	r2, #0
 800c9e4:	d1f0      	bne.n	800c9c8 <quorem+0xf0>
 800c9e6:	3c01      	subs	r4, #1
 800c9e8:	e7eb      	b.n	800c9c2 <quorem+0xea>
 800c9ea:	2000      	movs	r0, #0
 800c9ec:	e7ee      	b.n	800c9cc <quorem+0xf4>
	...

0800c9f0 <_dtoa_r>:
 800c9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f4:	ed2d 8b04 	vpush	{d8-d9}
 800c9f8:	ec57 6b10 	vmov	r6, r7, d0
 800c9fc:	b093      	sub	sp, #76	; 0x4c
 800c9fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ca00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ca04:	9106      	str	r1, [sp, #24]
 800ca06:	ee10 aa10 	vmov	sl, s0
 800ca0a:	4604      	mov	r4, r0
 800ca0c:	9209      	str	r2, [sp, #36]	; 0x24
 800ca0e:	930c      	str	r3, [sp, #48]	; 0x30
 800ca10:	46bb      	mov	fp, r7
 800ca12:	b975      	cbnz	r5, 800ca32 <_dtoa_r+0x42>
 800ca14:	2010      	movs	r0, #16
 800ca16:	f7fe f909 	bl	800ac2c <malloc>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	6260      	str	r0, [r4, #36]	; 0x24
 800ca1e:	b920      	cbnz	r0, 800ca2a <_dtoa_r+0x3a>
 800ca20:	4ba7      	ldr	r3, [pc, #668]	; (800ccc0 <_dtoa_r+0x2d0>)
 800ca22:	21ea      	movs	r1, #234	; 0xea
 800ca24:	48a7      	ldr	r0, [pc, #668]	; (800ccc4 <_dtoa_r+0x2d4>)
 800ca26:	f001 ffcd 	bl	800e9c4 <__assert_func>
 800ca2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ca2e:	6005      	str	r5, [r0, #0]
 800ca30:	60c5      	str	r5, [r0, #12]
 800ca32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca34:	6819      	ldr	r1, [r3, #0]
 800ca36:	b151      	cbz	r1, 800ca4e <_dtoa_r+0x5e>
 800ca38:	685a      	ldr	r2, [r3, #4]
 800ca3a:	604a      	str	r2, [r1, #4]
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	4093      	lsls	r3, r2
 800ca40:	608b      	str	r3, [r1, #8]
 800ca42:	4620      	mov	r0, r4
 800ca44:	f001 f9a2 	bl	800dd8c <_Bfree>
 800ca48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	601a      	str	r2, [r3, #0]
 800ca4e:	1e3b      	subs	r3, r7, #0
 800ca50:	bfaa      	itet	ge
 800ca52:	2300      	movge	r3, #0
 800ca54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ca58:	f8c8 3000 	strge.w	r3, [r8]
 800ca5c:	4b9a      	ldr	r3, [pc, #616]	; (800ccc8 <_dtoa_r+0x2d8>)
 800ca5e:	bfbc      	itt	lt
 800ca60:	2201      	movlt	r2, #1
 800ca62:	f8c8 2000 	strlt.w	r2, [r8]
 800ca66:	ea33 030b 	bics.w	r3, r3, fp
 800ca6a:	d11b      	bne.n	800caa4 <_dtoa_r+0xb4>
 800ca6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca6e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ca72:	6013      	str	r3, [r2, #0]
 800ca74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca78:	4333      	orrs	r3, r6
 800ca7a:	f000 8592 	beq.w	800d5a2 <_dtoa_r+0xbb2>
 800ca7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca80:	b963      	cbnz	r3, 800ca9c <_dtoa_r+0xac>
 800ca82:	4b92      	ldr	r3, [pc, #584]	; (800cccc <_dtoa_r+0x2dc>)
 800ca84:	e022      	b.n	800cacc <_dtoa_r+0xdc>
 800ca86:	4b92      	ldr	r3, [pc, #584]	; (800ccd0 <_dtoa_r+0x2e0>)
 800ca88:	9301      	str	r3, [sp, #4]
 800ca8a:	3308      	adds	r3, #8
 800ca8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ca8e:	6013      	str	r3, [r2, #0]
 800ca90:	9801      	ldr	r0, [sp, #4]
 800ca92:	b013      	add	sp, #76	; 0x4c
 800ca94:	ecbd 8b04 	vpop	{d8-d9}
 800ca98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca9c:	4b8b      	ldr	r3, [pc, #556]	; (800cccc <_dtoa_r+0x2dc>)
 800ca9e:	9301      	str	r3, [sp, #4]
 800caa0:	3303      	adds	r3, #3
 800caa2:	e7f3      	b.n	800ca8c <_dtoa_r+0x9c>
 800caa4:	2200      	movs	r2, #0
 800caa6:	2300      	movs	r3, #0
 800caa8:	4650      	mov	r0, sl
 800caaa:	4659      	mov	r1, fp
 800caac:	f7f4 f834 	bl	8000b18 <__aeabi_dcmpeq>
 800cab0:	ec4b ab19 	vmov	d9, sl, fp
 800cab4:	4680      	mov	r8, r0
 800cab6:	b158      	cbz	r0, 800cad0 <_dtoa_r+0xe0>
 800cab8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800caba:	2301      	movs	r3, #1
 800cabc:	6013      	str	r3, [r2, #0]
 800cabe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	f000 856b 	beq.w	800d59c <_dtoa_r+0xbac>
 800cac6:	4883      	ldr	r0, [pc, #524]	; (800ccd4 <_dtoa_r+0x2e4>)
 800cac8:	6018      	str	r0, [r3, #0]
 800caca:	1e43      	subs	r3, r0, #1
 800cacc:	9301      	str	r3, [sp, #4]
 800cace:	e7df      	b.n	800ca90 <_dtoa_r+0xa0>
 800cad0:	ec4b ab10 	vmov	d0, sl, fp
 800cad4:	aa10      	add	r2, sp, #64	; 0x40
 800cad6:	a911      	add	r1, sp, #68	; 0x44
 800cad8:	4620      	mov	r0, r4
 800cada:	f001 fd05 	bl	800e4e8 <__d2b>
 800cade:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cae2:	ee08 0a10 	vmov	s16, r0
 800cae6:	2d00      	cmp	r5, #0
 800cae8:	f000 8084 	beq.w	800cbf4 <_dtoa_r+0x204>
 800caec:	ee19 3a90 	vmov	r3, s19
 800caf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800caf4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800caf8:	4656      	mov	r6, sl
 800cafa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cafe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cb02:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cb06:	4b74      	ldr	r3, [pc, #464]	; (800ccd8 <_dtoa_r+0x2e8>)
 800cb08:	2200      	movs	r2, #0
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	4639      	mov	r1, r7
 800cb0e:	f7f3 fbe3 	bl	80002d8 <__aeabi_dsub>
 800cb12:	a365      	add	r3, pc, #404	; (adr r3, 800cca8 <_dtoa_r+0x2b8>)
 800cb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb18:	f7f3 fd96 	bl	8000648 <__aeabi_dmul>
 800cb1c:	a364      	add	r3, pc, #400	; (adr r3, 800ccb0 <_dtoa_r+0x2c0>)
 800cb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb22:	f7f3 fbdb 	bl	80002dc <__adddf3>
 800cb26:	4606      	mov	r6, r0
 800cb28:	4628      	mov	r0, r5
 800cb2a:	460f      	mov	r7, r1
 800cb2c:	f7f3 fd22 	bl	8000574 <__aeabi_i2d>
 800cb30:	a361      	add	r3, pc, #388	; (adr r3, 800ccb8 <_dtoa_r+0x2c8>)
 800cb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb36:	f7f3 fd87 	bl	8000648 <__aeabi_dmul>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	4630      	mov	r0, r6
 800cb40:	4639      	mov	r1, r7
 800cb42:	f7f3 fbcb 	bl	80002dc <__adddf3>
 800cb46:	4606      	mov	r6, r0
 800cb48:	460f      	mov	r7, r1
 800cb4a:	f7f4 f82d 	bl	8000ba8 <__aeabi_d2iz>
 800cb4e:	2200      	movs	r2, #0
 800cb50:	9000      	str	r0, [sp, #0]
 800cb52:	2300      	movs	r3, #0
 800cb54:	4630      	mov	r0, r6
 800cb56:	4639      	mov	r1, r7
 800cb58:	f7f3 ffe8 	bl	8000b2c <__aeabi_dcmplt>
 800cb5c:	b150      	cbz	r0, 800cb74 <_dtoa_r+0x184>
 800cb5e:	9800      	ldr	r0, [sp, #0]
 800cb60:	f7f3 fd08 	bl	8000574 <__aeabi_i2d>
 800cb64:	4632      	mov	r2, r6
 800cb66:	463b      	mov	r3, r7
 800cb68:	f7f3 ffd6 	bl	8000b18 <__aeabi_dcmpeq>
 800cb6c:	b910      	cbnz	r0, 800cb74 <_dtoa_r+0x184>
 800cb6e:	9b00      	ldr	r3, [sp, #0]
 800cb70:	3b01      	subs	r3, #1
 800cb72:	9300      	str	r3, [sp, #0]
 800cb74:	9b00      	ldr	r3, [sp, #0]
 800cb76:	2b16      	cmp	r3, #22
 800cb78:	d85a      	bhi.n	800cc30 <_dtoa_r+0x240>
 800cb7a:	9a00      	ldr	r2, [sp, #0]
 800cb7c:	4b57      	ldr	r3, [pc, #348]	; (800ccdc <_dtoa_r+0x2ec>)
 800cb7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb86:	ec51 0b19 	vmov	r0, r1, d9
 800cb8a:	f7f3 ffcf 	bl	8000b2c <__aeabi_dcmplt>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d050      	beq.n	800cc34 <_dtoa_r+0x244>
 800cb92:	9b00      	ldr	r3, [sp, #0]
 800cb94:	3b01      	subs	r3, #1
 800cb96:	9300      	str	r3, [sp, #0]
 800cb98:	2300      	movs	r3, #0
 800cb9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb9e:	1b5d      	subs	r5, r3, r5
 800cba0:	1e6b      	subs	r3, r5, #1
 800cba2:	9305      	str	r3, [sp, #20]
 800cba4:	bf45      	ittet	mi
 800cba6:	f1c5 0301 	rsbmi	r3, r5, #1
 800cbaa:	9304      	strmi	r3, [sp, #16]
 800cbac:	2300      	movpl	r3, #0
 800cbae:	2300      	movmi	r3, #0
 800cbb0:	bf4c      	ite	mi
 800cbb2:	9305      	strmi	r3, [sp, #20]
 800cbb4:	9304      	strpl	r3, [sp, #16]
 800cbb6:	9b00      	ldr	r3, [sp, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	db3d      	blt.n	800cc38 <_dtoa_r+0x248>
 800cbbc:	9b05      	ldr	r3, [sp, #20]
 800cbbe:	9a00      	ldr	r2, [sp, #0]
 800cbc0:	920a      	str	r2, [sp, #40]	; 0x28
 800cbc2:	4413      	add	r3, r2
 800cbc4:	9305      	str	r3, [sp, #20]
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	9307      	str	r3, [sp, #28]
 800cbca:	9b06      	ldr	r3, [sp, #24]
 800cbcc:	2b09      	cmp	r3, #9
 800cbce:	f200 8089 	bhi.w	800cce4 <_dtoa_r+0x2f4>
 800cbd2:	2b05      	cmp	r3, #5
 800cbd4:	bfc4      	itt	gt
 800cbd6:	3b04      	subgt	r3, #4
 800cbd8:	9306      	strgt	r3, [sp, #24]
 800cbda:	9b06      	ldr	r3, [sp, #24]
 800cbdc:	f1a3 0302 	sub.w	r3, r3, #2
 800cbe0:	bfcc      	ite	gt
 800cbe2:	2500      	movgt	r5, #0
 800cbe4:	2501      	movle	r5, #1
 800cbe6:	2b03      	cmp	r3, #3
 800cbe8:	f200 8087 	bhi.w	800ccfa <_dtoa_r+0x30a>
 800cbec:	e8df f003 	tbb	[pc, r3]
 800cbf0:	59383a2d 	.word	0x59383a2d
 800cbf4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cbf8:	441d      	add	r5, r3
 800cbfa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cbfe:	2b20      	cmp	r3, #32
 800cc00:	bfc1      	itttt	gt
 800cc02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cc06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cc0a:	fa0b f303 	lslgt.w	r3, fp, r3
 800cc0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cc12:	bfda      	itte	le
 800cc14:	f1c3 0320 	rsble	r3, r3, #32
 800cc18:	fa06 f003 	lslle.w	r0, r6, r3
 800cc1c:	4318      	orrgt	r0, r3
 800cc1e:	f7f3 fc99 	bl	8000554 <__aeabi_ui2d>
 800cc22:	2301      	movs	r3, #1
 800cc24:	4606      	mov	r6, r0
 800cc26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cc2a:	3d01      	subs	r5, #1
 800cc2c:	930e      	str	r3, [sp, #56]	; 0x38
 800cc2e:	e76a      	b.n	800cb06 <_dtoa_r+0x116>
 800cc30:	2301      	movs	r3, #1
 800cc32:	e7b2      	b.n	800cb9a <_dtoa_r+0x1aa>
 800cc34:	900b      	str	r0, [sp, #44]	; 0x2c
 800cc36:	e7b1      	b.n	800cb9c <_dtoa_r+0x1ac>
 800cc38:	9b04      	ldr	r3, [sp, #16]
 800cc3a:	9a00      	ldr	r2, [sp, #0]
 800cc3c:	1a9b      	subs	r3, r3, r2
 800cc3e:	9304      	str	r3, [sp, #16]
 800cc40:	4253      	negs	r3, r2
 800cc42:	9307      	str	r3, [sp, #28]
 800cc44:	2300      	movs	r3, #0
 800cc46:	930a      	str	r3, [sp, #40]	; 0x28
 800cc48:	e7bf      	b.n	800cbca <_dtoa_r+0x1da>
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	9308      	str	r3, [sp, #32]
 800cc4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	dc55      	bgt.n	800cd00 <_dtoa_r+0x310>
 800cc54:	2301      	movs	r3, #1
 800cc56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	9209      	str	r2, [sp, #36]	; 0x24
 800cc5e:	e00c      	b.n	800cc7a <_dtoa_r+0x28a>
 800cc60:	2301      	movs	r3, #1
 800cc62:	e7f3      	b.n	800cc4c <_dtoa_r+0x25c>
 800cc64:	2300      	movs	r3, #0
 800cc66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc68:	9308      	str	r3, [sp, #32]
 800cc6a:	9b00      	ldr	r3, [sp, #0]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	9302      	str	r3, [sp, #8]
 800cc70:	3301      	adds	r3, #1
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	9303      	str	r3, [sp, #12]
 800cc76:	bfb8      	it	lt
 800cc78:	2301      	movlt	r3, #1
 800cc7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	6042      	str	r2, [r0, #4]
 800cc80:	2204      	movs	r2, #4
 800cc82:	f102 0614 	add.w	r6, r2, #20
 800cc86:	429e      	cmp	r6, r3
 800cc88:	6841      	ldr	r1, [r0, #4]
 800cc8a:	d93d      	bls.n	800cd08 <_dtoa_r+0x318>
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	f001 f83d 	bl	800dd0c <_Balloc>
 800cc92:	9001      	str	r0, [sp, #4]
 800cc94:	2800      	cmp	r0, #0
 800cc96:	d13b      	bne.n	800cd10 <_dtoa_r+0x320>
 800cc98:	4b11      	ldr	r3, [pc, #68]	; (800cce0 <_dtoa_r+0x2f0>)
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cca0:	e6c0      	b.n	800ca24 <_dtoa_r+0x34>
 800cca2:	2301      	movs	r3, #1
 800cca4:	e7df      	b.n	800cc66 <_dtoa_r+0x276>
 800cca6:	bf00      	nop
 800cca8:	636f4361 	.word	0x636f4361
 800ccac:	3fd287a7 	.word	0x3fd287a7
 800ccb0:	8b60c8b3 	.word	0x8b60c8b3
 800ccb4:	3fc68a28 	.word	0x3fc68a28
 800ccb8:	509f79fb 	.word	0x509f79fb
 800ccbc:	3fd34413 	.word	0x3fd34413
 800ccc0:	080103ce 	.word	0x080103ce
 800ccc4:	080103e5 	.word	0x080103e5
 800ccc8:	7ff00000 	.word	0x7ff00000
 800cccc:	080103ca 	.word	0x080103ca
 800ccd0:	080103c1 	.word	0x080103c1
 800ccd4:	08010241 	.word	0x08010241
 800ccd8:	3ff80000 	.word	0x3ff80000
 800ccdc:	08010550 	.word	0x08010550
 800cce0:	08010440 	.word	0x08010440
 800cce4:	2501      	movs	r5, #1
 800cce6:	2300      	movs	r3, #0
 800cce8:	9306      	str	r3, [sp, #24]
 800ccea:	9508      	str	r5, [sp, #32]
 800ccec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccf0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	2312      	movs	r3, #18
 800ccf8:	e7b0      	b.n	800cc5c <_dtoa_r+0x26c>
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	9308      	str	r3, [sp, #32]
 800ccfe:	e7f5      	b.n	800ccec <_dtoa_r+0x2fc>
 800cd00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cd06:	e7b8      	b.n	800cc7a <_dtoa_r+0x28a>
 800cd08:	3101      	adds	r1, #1
 800cd0a:	6041      	str	r1, [r0, #4]
 800cd0c:	0052      	lsls	r2, r2, #1
 800cd0e:	e7b8      	b.n	800cc82 <_dtoa_r+0x292>
 800cd10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd12:	9a01      	ldr	r2, [sp, #4]
 800cd14:	601a      	str	r2, [r3, #0]
 800cd16:	9b03      	ldr	r3, [sp, #12]
 800cd18:	2b0e      	cmp	r3, #14
 800cd1a:	f200 809d 	bhi.w	800ce58 <_dtoa_r+0x468>
 800cd1e:	2d00      	cmp	r5, #0
 800cd20:	f000 809a 	beq.w	800ce58 <_dtoa_r+0x468>
 800cd24:	9b00      	ldr	r3, [sp, #0]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	dd32      	ble.n	800cd90 <_dtoa_r+0x3a0>
 800cd2a:	4ab7      	ldr	r2, [pc, #732]	; (800d008 <_dtoa_r+0x618>)
 800cd2c:	f003 030f 	and.w	r3, r3, #15
 800cd30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cd34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd38:	9b00      	ldr	r3, [sp, #0]
 800cd3a:	05d8      	lsls	r0, r3, #23
 800cd3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cd40:	d516      	bpl.n	800cd70 <_dtoa_r+0x380>
 800cd42:	4bb2      	ldr	r3, [pc, #712]	; (800d00c <_dtoa_r+0x61c>)
 800cd44:	ec51 0b19 	vmov	r0, r1, d9
 800cd48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cd4c:	f7f3 fda6 	bl	800089c <__aeabi_ddiv>
 800cd50:	f007 070f 	and.w	r7, r7, #15
 800cd54:	4682      	mov	sl, r0
 800cd56:	468b      	mov	fp, r1
 800cd58:	2503      	movs	r5, #3
 800cd5a:	4eac      	ldr	r6, [pc, #688]	; (800d00c <_dtoa_r+0x61c>)
 800cd5c:	b957      	cbnz	r7, 800cd74 <_dtoa_r+0x384>
 800cd5e:	4642      	mov	r2, r8
 800cd60:	464b      	mov	r3, r9
 800cd62:	4650      	mov	r0, sl
 800cd64:	4659      	mov	r1, fp
 800cd66:	f7f3 fd99 	bl	800089c <__aeabi_ddiv>
 800cd6a:	4682      	mov	sl, r0
 800cd6c:	468b      	mov	fp, r1
 800cd6e:	e028      	b.n	800cdc2 <_dtoa_r+0x3d2>
 800cd70:	2502      	movs	r5, #2
 800cd72:	e7f2      	b.n	800cd5a <_dtoa_r+0x36a>
 800cd74:	07f9      	lsls	r1, r7, #31
 800cd76:	d508      	bpl.n	800cd8a <_dtoa_r+0x39a>
 800cd78:	4640      	mov	r0, r8
 800cd7a:	4649      	mov	r1, r9
 800cd7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cd80:	f7f3 fc62 	bl	8000648 <__aeabi_dmul>
 800cd84:	3501      	adds	r5, #1
 800cd86:	4680      	mov	r8, r0
 800cd88:	4689      	mov	r9, r1
 800cd8a:	107f      	asrs	r7, r7, #1
 800cd8c:	3608      	adds	r6, #8
 800cd8e:	e7e5      	b.n	800cd5c <_dtoa_r+0x36c>
 800cd90:	f000 809b 	beq.w	800ceca <_dtoa_r+0x4da>
 800cd94:	9b00      	ldr	r3, [sp, #0]
 800cd96:	4f9d      	ldr	r7, [pc, #628]	; (800d00c <_dtoa_r+0x61c>)
 800cd98:	425e      	negs	r6, r3
 800cd9a:	4b9b      	ldr	r3, [pc, #620]	; (800d008 <_dtoa_r+0x618>)
 800cd9c:	f006 020f 	and.w	r2, r6, #15
 800cda0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda8:	ec51 0b19 	vmov	r0, r1, d9
 800cdac:	f7f3 fc4c 	bl	8000648 <__aeabi_dmul>
 800cdb0:	1136      	asrs	r6, r6, #4
 800cdb2:	4682      	mov	sl, r0
 800cdb4:	468b      	mov	fp, r1
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	2502      	movs	r5, #2
 800cdba:	2e00      	cmp	r6, #0
 800cdbc:	d17a      	bne.n	800ceb4 <_dtoa_r+0x4c4>
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1d3      	bne.n	800cd6a <_dtoa_r+0x37a>
 800cdc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f000 8082 	beq.w	800cece <_dtoa_r+0x4de>
 800cdca:	4b91      	ldr	r3, [pc, #580]	; (800d010 <_dtoa_r+0x620>)
 800cdcc:	2200      	movs	r2, #0
 800cdce:	4650      	mov	r0, sl
 800cdd0:	4659      	mov	r1, fp
 800cdd2:	f7f3 feab 	bl	8000b2c <__aeabi_dcmplt>
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	d079      	beq.n	800cece <_dtoa_r+0x4de>
 800cdda:	9b03      	ldr	r3, [sp, #12]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d076      	beq.n	800cece <_dtoa_r+0x4de>
 800cde0:	9b02      	ldr	r3, [sp, #8]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	dd36      	ble.n	800ce54 <_dtoa_r+0x464>
 800cde6:	9b00      	ldr	r3, [sp, #0]
 800cde8:	4650      	mov	r0, sl
 800cdea:	4659      	mov	r1, fp
 800cdec:	1e5f      	subs	r7, r3, #1
 800cdee:	2200      	movs	r2, #0
 800cdf0:	4b88      	ldr	r3, [pc, #544]	; (800d014 <_dtoa_r+0x624>)
 800cdf2:	f7f3 fc29 	bl	8000648 <__aeabi_dmul>
 800cdf6:	9e02      	ldr	r6, [sp, #8]
 800cdf8:	4682      	mov	sl, r0
 800cdfa:	468b      	mov	fp, r1
 800cdfc:	3501      	adds	r5, #1
 800cdfe:	4628      	mov	r0, r5
 800ce00:	f7f3 fbb8 	bl	8000574 <__aeabi_i2d>
 800ce04:	4652      	mov	r2, sl
 800ce06:	465b      	mov	r3, fp
 800ce08:	f7f3 fc1e 	bl	8000648 <__aeabi_dmul>
 800ce0c:	4b82      	ldr	r3, [pc, #520]	; (800d018 <_dtoa_r+0x628>)
 800ce0e:	2200      	movs	r2, #0
 800ce10:	f7f3 fa64 	bl	80002dc <__adddf3>
 800ce14:	46d0      	mov	r8, sl
 800ce16:	46d9      	mov	r9, fp
 800ce18:	4682      	mov	sl, r0
 800ce1a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ce1e:	2e00      	cmp	r6, #0
 800ce20:	d158      	bne.n	800ced4 <_dtoa_r+0x4e4>
 800ce22:	4b7e      	ldr	r3, [pc, #504]	; (800d01c <_dtoa_r+0x62c>)
 800ce24:	2200      	movs	r2, #0
 800ce26:	4640      	mov	r0, r8
 800ce28:	4649      	mov	r1, r9
 800ce2a:	f7f3 fa55 	bl	80002d8 <__aeabi_dsub>
 800ce2e:	4652      	mov	r2, sl
 800ce30:	465b      	mov	r3, fp
 800ce32:	4680      	mov	r8, r0
 800ce34:	4689      	mov	r9, r1
 800ce36:	f7f3 fe97 	bl	8000b68 <__aeabi_dcmpgt>
 800ce3a:	2800      	cmp	r0, #0
 800ce3c:	f040 8295 	bne.w	800d36a <_dtoa_r+0x97a>
 800ce40:	4652      	mov	r2, sl
 800ce42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ce46:	4640      	mov	r0, r8
 800ce48:	4649      	mov	r1, r9
 800ce4a:	f7f3 fe6f 	bl	8000b2c <__aeabi_dcmplt>
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	f040 8289 	bne.w	800d366 <_dtoa_r+0x976>
 800ce54:	ec5b ab19 	vmov	sl, fp, d9
 800ce58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	f2c0 8148 	blt.w	800d0f0 <_dtoa_r+0x700>
 800ce60:	9a00      	ldr	r2, [sp, #0]
 800ce62:	2a0e      	cmp	r2, #14
 800ce64:	f300 8144 	bgt.w	800d0f0 <_dtoa_r+0x700>
 800ce68:	4b67      	ldr	r3, [pc, #412]	; (800d008 <_dtoa_r+0x618>)
 800ce6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	f280 80d5 	bge.w	800d024 <_dtoa_r+0x634>
 800ce7a:	9b03      	ldr	r3, [sp, #12]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	f300 80d1 	bgt.w	800d024 <_dtoa_r+0x634>
 800ce82:	f040 826f 	bne.w	800d364 <_dtoa_r+0x974>
 800ce86:	4b65      	ldr	r3, [pc, #404]	; (800d01c <_dtoa_r+0x62c>)
 800ce88:	2200      	movs	r2, #0
 800ce8a:	4640      	mov	r0, r8
 800ce8c:	4649      	mov	r1, r9
 800ce8e:	f7f3 fbdb 	bl	8000648 <__aeabi_dmul>
 800ce92:	4652      	mov	r2, sl
 800ce94:	465b      	mov	r3, fp
 800ce96:	f7f3 fe5d 	bl	8000b54 <__aeabi_dcmpge>
 800ce9a:	9e03      	ldr	r6, [sp, #12]
 800ce9c:	4637      	mov	r7, r6
 800ce9e:	2800      	cmp	r0, #0
 800cea0:	f040 8245 	bne.w	800d32e <_dtoa_r+0x93e>
 800cea4:	9d01      	ldr	r5, [sp, #4]
 800cea6:	2331      	movs	r3, #49	; 0x31
 800cea8:	f805 3b01 	strb.w	r3, [r5], #1
 800ceac:	9b00      	ldr	r3, [sp, #0]
 800ceae:	3301      	adds	r3, #1
 800ceb0:	9300      	str	r3, [sp, #0]
 800ceb2:	e240      	b.n	800d336 <_dtoa_r+0x946>
 800ceb4:	07f2      	lsls	r2, r6, #31
 800ceb6:	d505      	bpl.n	800cec4 <_dtoa_r+0x4d4>
 800ceb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cebc:	f7f3 fbc4 	bl	8000648 <__aeabi_dmul>
 800cec0:	3501      	adds	r5, #1
 800cec2:	2301      	movs	r3, #1
 800cec4:	1076      	asrs	r6, r6, #1
 800cec6:	3708      	adds	r7, #8
 800cec8:	e777      	b.n	800cdba <_dtoa_r+0x3ca>
 800ceca:	2502      	movs	r5, #2
 800cecc:	e779      	b.n	800cdc2 <_dtoa_r+0x3d2>
 800cece:	9f00      	ldr	r7, [sp, #0]
 800ced0:	9e03      	ldr	r6, [sp, #12]
 800ced2:	e794      	b.n	800cdfe <_dtoa_r+0x40e>
 800ced4:	9901      	ldr	r1, [sp, #4]
 800ced6:	4b4c      	ldr	r3, [pc, #304]	; (800d008 <_dtoa_r+0x618>)
 800ced8:	4431      	add	r1, r6
 800ceda:	910d      	str	r1, [sp, #52]	; 0x34
 800cedc:	9908      	ldr	r1, [sp, #32]
 800cede:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cee2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cee6:	2900      	cmp	r1, #0
 800cee8:	d043      	beq.n	800cf72 <_dtoa_r+0x582>
 800ceea:	494d      	ldr	r1, [pc, #308]	; (800d020 <_dtoa_r+0x630>)
 800ceec:	2000      	movs	r0, #0
 800ceee:	f7f3 fcd5 	bl	800089c <__aeabi_ddiv>
 800cef2:	4652      	mov	r2, sl
 800cef4:	465b      	mov	r3, fp
 800cef6:	f7f3 f9ef 	bl	80002d8 <__aeabi_dsub>
 800cefa:	9d01      	ldr	r5, [sp, #4]
 800cefc:	4682      	mov	sl, r0
 800cefe:	468b      	mov	fp, r1
 800cf00:	4649      	mov	r1, r9
 800cf02:	4640      	mov	r0, r8
 800cf04:	f7f3 fe50 	bl	8000ba8 <__aeabi_d2iz>
 800cf08:	4606      	mov	r6, r0
 800cf0a:	f7f3 fb33 	bl	8000574 <__aeabi_i2d>
 800cf0e:	4602      	mov	r2, r0
 800cf10:	460b      	mov	r3, r1
 800cf12:	4640      	mov	r0, r8
 800cf14:	4649      	mov	r1, r9
 800cf16:	f7f3 f9df 	bl	80002d8 <__aeabi_dsub>
 800cf1a:	3630      	adds	r6, #48	; 0x30
 800cf1c:	f805 6b01 	strb.w	r6, [r5], #1
 800cf20:	4652      	mov	r2, sl
 800cf22:	465b      	mov	r3, fp
 800cf24:	4680      	mov	r8, r0
 800cf26:	4689      	mov	r9, r1
 800cf28:	f7f3 fe00 	bl	8000b2c <__aeabi_dcmplt>
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	d163      	bne.n	800cff8 <_dtoa_r+0x608>
 800cf30:	4642      	mov	r2, r8
 800cf32:	464b      	mov	r3, r9
 800cf34:	4936      	ldr	r1, [pc, #216]	; (800d010 <_dtoa_r+0x620>)
 800cf36:	2000      	movs	r0, #0
 800cf38:	f7f3 f9ce 	bl	80002d8 <__aeabi_dsub>
 800cf3c:	4652      	mov	r2, sl
 800cf3e:	465b      	mov	r3, fp
 800cf40:	f7f3 fdf4 	bl	8000b2c <__aeabi_dcmplt>
 800cf44:	2800      	cmp	r0, #0
 800cf46:	f040 80b5 	bne.w	800d0b4 <_dtoa_r+0x6c4>
 800cf4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf4c:	429d      	cmp	r5, r3
 800cf4e:	d081      	beq.n	800ce54 <_dtoa_r+0x464>
 800cf50:	4b30      	ldr	r3, [pc, #192]	; (800d014 <_dtoa_r+0x624>)
 800cf52:	2200      	movs	r2, #0
 800cf54:	4650      	mov	r0, sl
 800cf56:	4659      	mov	r1, fp
 800cf58:	f7f3 fb76 	bl	8000648 <__aeabi_dmul>
 800cf5c:	4b2d      	ldr	r3, [pc, #180]	; (800d014 <_dtoa_r+0x624>)
 800cf5e:	4682      	mov	sl, r0
 800cf60:	468b      	mov	fp, r1
 800cf62:	4640      	mov	r0, r8
 800cf64:	4649      	mov	r1, r9
 800cf66:	2200      	movs	r2, #0
 800cf68:	f7f3 fb6e 	bl	8000648 <__aeabi_dmul>
 800cf6c:	4680      	mov	r8, r0
 800cf6e:	4689      	mov	r9, r1
 800cf70:	e7c6      	b.n	800cf00 <_dtoa_r+0x510>
 800cf72:	4650      	mov	r0, sl
 800cf74:	4659      	mov	r1, fp
 800cf76:	f7f3 fb67 	bl	8000648 <__aeabi_dmul>
 800cf7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf7c:	9d01      	ldr	r5, [sp, #4]
 800cf7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf80:	4682      	mov	sl, r0
 800cf82:	468b      	mov	fp, r1
 800cf84:	4649      	mov	r1, r9
 800cf86:	4640      	mov	r0, r8
 800cf88:	f7f3 fe0e 	bl	8000ba8 <__aeabi_d2iz>
 800cf8c:	4606      	mov	r6, r0
 800cf8e:	f7f3 faf1 	bl	8000574 <__aeabi_i2d>
 800cf92:	3630      	adds	r6, #48	; 0x30
 800cf94:	4602      	mov	r2, r0
 800cf96:	460b      	mov	r3, r1
 800cf98:	4640      	mov	r0, r8
 800cf9a:	4649      	mov	r1, r9
 800cf9c:	f7f3 f99c 	bl	80002d8 <__aeabi_dsub>
 800cfa0:	f805 6b01 	strb.w	r6, [r5], #1
 800cfa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfa6:	429d      	cmp	r5, r3
 800cfa8:	4680      	mov	r8, r0
 800cfaa:	4689      	mov	r9, r1
 800cfac:	f04f 0200 	mov.w	r2, #0
 800cfb0:	d124      	bne.n	800cffc <_dtoa_r+0x60c>
 800cfb2:	4b1b      	ldr	r3, [pc, #108]	; (800d020 <_dtoa_r+0x630>)
 800cfb4:	4650      	mov	r0, sl
 800cfb6:	4659      	mov	r1, fp
 800cfb8:	f7f3 f990 	bl	80002dc <__adddf3>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	4640      	mov	r0, r8
 800cfc2:	4649      	mov	r1, r9
 800cfc4:	f7f3 fdd0 	bl	8000b68 <__aeabi_dcmpgt>
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	d173      	bne.n	800d0b4 <_dtoa_r+0x6c4>
 800cfcc:	4652      	mov	r2, sl
 800cfce:	465b      	mov	r3, fp
 800cfd0:	4913      	ldr	r1, [pc, #76]	; (800d020 <_dtoa_r+0x630>)
 800cfd2:	2000      	movs	r0, #0
 800cfd4:	f7f3 f980 	bl	80002d8 <__aeabi_dsub>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	460b      	mov	r3, r1
 800cfdc:	4640      	mov	r0, r8
 800cfde:	4649      	mov	r1, r9
 800cfe0:	f7f3 fda4 	bl	8000b2c <__aeabi_dcmplt>
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	f43f af35 	beq.w	800ce54 <_dtoa_r+0x464>
 800cfea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cfec:	1e6b      	subs	r3, r5, #1
 800cfee:	930f      	str	r3, [sp, #60]	; 0x3c
 800cff0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cff4:	2b30      	cmp	r3, #48	; 0x30
 800cff6:	d0f8      	beq.n	800cfea <_dtoa_r+0x5fa>
 800cff8:	9700      	str	r7, [sp, #0]
 800cffa:	e049      	b.n	800d090 <_dtoa_r+0x6a0>
 800cffc:	4b05      	ldr	r3, [pc, #20]	; (800d014 <_dtoa_r+0x624>)
 800cffe:	f7f3 fb23 	bl	8000648 <__aeabi_dmul>
 800d002:	4680      	mov	r8, r0
 800d004:	4689      	mov	r9, r1
 800d006:	e7bd      	b.n	800cf84 <_dtoa_r+0x594>
 800d008:	08010550 	.word	0x08010550
 800d00c:	08010528 	.word	0x08010528
 800d010:	3ff00000 	.word	0x3ff00000
 800d014:	40240000 	.word	0x40240000
 800d018:	401c0000 	.word	0x401c0000
 800d01c:	40140000 	.word	0x40140000
 800d020:	3fe00000 	.word	0x3fe00000
 800d024:	9d01      	ldr	r5, [sp, #4]
 800d026:	4656      	mov	r6, sl
 800d028:	465f      	mov	r7, fp
 800d02a:	4642      	mov	r2, r8
 800d02c:	464b      	mov	r3, r9
 800d02e:	4630      	mov	r0, r6
 800d030:	4639      	mov	r1, r7
 800d032:	f7f3 fc33 	bl	800089c <__aeabi_ddiv>
 800d036:	f7f3 fdb7 	bl	8000ba8 <__aeabi_d2iz>
 800d03a:	4682      	mov	sl, r0
 800d03c:	f7f3 fa9a 	bl	8000574 <__aeabi_i2d>
 800d040:	4642      	mov	r2, r8
 800d042:	464b      	mov	r3, r9
 800d044:	f7f3 fb00 	bl	8000648 <__aeabi_dmul>
 800d048:	4602      	mov	r2, r0
 800d04a:	460b      	mov	r3, r1
 800d04c:	4630      	mov	r0, r6
 800d04e:	4639      	mov	r1, r7
 800d050:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d054:	f7f3 f940 	bl	80002d8 <__aeabi_dsub>
 800d058:	f805 6b01 	strb.w	r6, [r5], #1
 800d05c:	9e01      	ldr	r6, [sp, #4]
 800d05e:	9f03      	ldr	r7, [sp, #12]
 800d060:	1bae      	subs	r6, r5, r6
 800d062:	42b7      	cmp	r7, r6
 800d064:	4602      	mov	r2, r0
 800d066:	460b      	mov	r3, r1
 800d068:	d135      	bne.n	800d0d6 <_dtoa_r+0x6e6>
 800d06a:	f7f3 f937 	bl	80002dc <__adddf3>
 800d06e:	4642      	mov	r2, r8
 800d070:	464b      	mov	r3, r9
 800d072:	4606      	mov	r6, r0
 800d074:	460f      	mov	r7, r1
 800d076:	f7f3 fd77 	bl	8000b68 <__aeabi_dcmpgt>
 800d07a:	b9d0      	cbnz	r0, 800d0b2 <_dtoa_r+0x6c2>
 800d07c:	4642      	mov	r2, r8
 800d07e:	464b      	mov	r3, r9
 800d080:	4630      	mov	r0, r6
 800d082:	4639      	mov	r1, r7
 800d084:	f7f3 fd48 	bl	8000b18 <__aeabi_dcmpeq>
 800d088:	b110      	cbz	r0, 800d090 <_dtoa_r+0x6a0>
 800d08a:	f01a 0f01 	tst.w	sl, #1
 800d08e:	d110      	bne.n	800d0b2 <_dtoa_r+0x6c2>
 800d090:	4620      	mov	r0, r4
 800d092:	ee18 1a10 	vmov	r1, s16
 800d096:	f000 fe79 	bl	800dd8c <_Bfree>
 800d09a:	2300      	movs	r3, #0
 800d09c:	9800      	ldr	r0, [sp, #0]
 800d09e:	702b      	strb	r3, [r5, #0]
 800d0a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0a2:	3001      	adds	r0, #1
 800d0a4:	6018      	str	r0, [r3, #0]
 800d0a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	f43f acf1 	beq.w	800ca90 <_dtoa_r+0xa0>
 800d0ae:	601d      	str	r5, [r3, #0]
 800d0b0:	e4ee      	b.n	800ca90 <_dtoa_r+0xa0>
 800d0b2:	9f00      	ldr	r7, [sp, #0]
 800d0b4:	462b      	mov	r3, r5
 800d0b6:	461d      	mov	r5, r3
 800d0b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d0bc:	2a39      	cmp	r2, #57	; 0x39
 800d0be:	d106      	bne.n	800d0ce <_dtoa_r+0x6de>
 800d0c0:	9a01      	ldr	r2, [sp, #4]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d1f7      	bne.n	800d0b6 <_dtoa_r+0x6c6>
 800d0c6:	9901      	ldr	r1, [sp, #4]
 800d0c8:	2230      	movs	r2, #48	; 0x30
 800d0ca:	3701      	adds	r7, #1
 800d0cc:	700a      	strb	r2, [r1, #0]
 800d0ce:	781a      	ldrb	r2, [r3, #0]
 800d0d0:	3201      	adds	r2, #1
 800d0d2:	701a      	strb	r2, [r3, #0]
 800d0d4:	e790      	b.n	800cff8 <_dtoa_r+0x608>
 800d0d6:	4ba6      	ldr	r3, [pc, #664]	; (800d370 <_dtoa_r+0x980>)
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f7f3 fab5 	bl	8000648 <__aeabi_dmul>
 800d0de:	2200      	movs	r2, #0
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	4606      	mov	r6, r0
 800d0e4:	460f      	mov	r7, r1
 800d0e6:	f7f3 fd17 	bl	8000b18 <__aeabi_dcmpeq>
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	d09d      	beq.n	800d02a <_dtoa_r+0x63a>
 800d0ee:	e7cf      	b.n	800d090 <_dtoa_r+0x6a0>
 800d0f0:	9a08      	ldr	r2, [sp, #32]
 800d0f2:	2a00      	cmp	r2, #0
 800d0f4:	f000 80d7 	beq.w	800d2a6 <_dtoa_r+0x8b6>
 800d0f8:	9a06      	ldr	r2, [sp, #24]
 800d0fa:	2a01      	cmp	r2, #1
 800d0fc:	f300 80ba 	bgt.w	800d274 <_dtoa_r+0x884>
 800d100:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d102:	2a00      	cmp	r2, #0
 800d104:	f000 80b2 	beq.w	800d26c <_dtoa_r+0x87c>
 800d108:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d10c:	9e07      	ldr	r6, [sp, #28]
 800d10e:	9d04      	ldr	r5, [sp, #16]
 800d110:	9a04      	ldr	r2, [sp, #16]
 800d112:	441a      	add	r2, r3
 800d114:	9204      	str	r2, [sp, #16]
 800d116:	9a05      	ldr	r2, [sp, #20]
 800d118:	2101      	movs	r1, #1
 800d11a:	441a      	add	r2, r3
 800d11c:	4620      	mov	r0, r4
 800d11e:	9205      	str	r2, [sp, #20]
 800d120:	f000 ff36 	bl	800df90 <__i2b>
 800d124:	4607      	mov	r7, r0
 800d126:	2d00      	cmp	r5, #0
 800d128:	dd0c      	ble.n	800d144 <_dtoa_r+0x754>
 800d12a:	9b05      	ldr	r3, [sp, #20]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	dd09      	ble.n	800d144 <_dtoa_r+0x754>
 800d130:	42ab      	cmp	r3, r5
 800d132:	9a04      	ldr	r2, [sp, #16]
 800d134:	bfa8      	it	ge
 800d136:	462b      	movge	r3, r5
 800d138:	1ad2      	subs	r2, r2, r3
 800d13a:	9204      	str	r2, [sp, #16]
 800d13c:	9a05      	ldr	r2, [sp, #20]
 800d13e:	1aed      	subs	r5, r5, r3
 800d140:	1ad3      	subs	r3, r2, r3
 800d142:	9305      	str	r3, [sp, #20]
 800d144:	9b07      	ldr	r3, [sp, #28]
 800d146:	b31b      	cbz	r3, 800d190 <_dtoa_r+0x7a0>
 800d148:	9b08      	ldr	r3, [sp, #32]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	f000 80af 	beq.w	800d2ae <_dtoa_r+0x8be>
 800d150:	2e00      	cmp	r6, #0
 800d152:	dd13      	ble.n	800d17c <_dtoa_r+0x78c>
 800d154:	4639      	mov	r1, r7
 800d156:	4632      	mov	r2, r6
 800d158:	4620      	mov	r0, r4
 800d15a:	f000 ffd9 	bl	800e110 <__pow5mult>
 800d15e:	ee18 2a10 	vmov	r2, s16
 800d162:	4601      	mov	r1, r0
 800d164:	4607      	mov	r7, r0
 800d166:	4620      	mov	r0, r4
 800d168:	f000 ff28 	bl	800dfbc <__multiply>
 800d16c:	ee18 1a10 	vmov	r1, s16
 800d170:	4680      	mov	r8, r0
 800d172:	4620      	mov	r0, r4
 800d174:	f000 fe0a 	bl	800dd8c <_Bfree>
 800d178:	ee08 8a10 	vmov	s16, r8
 800d17c:	9b07      	ldr	r3, [sp, #28]
 800d17e:	1b9a      	subs	r2, r3, r6
 800d180:	d006      	beq.n	800d190 <_dtoa_r+0x7a0>
 800d182:	ee18 1a10 	vmov	r1, s16
 800d186:	4620      	mov	r0, r4
 800d188:	f000 ffc2 	bl	800e110 <__pow5mult>
 800d18c:	ee08 0a10 	vmov	s16, r0
 800d190:	2101      	movs	r1, #1
 800d192:	4620      	mov	r0, r4
 800d194:	f000 fefc 	bl	800df90 <__i2b>
 800d198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	4606      	mov	r6, r0
 800d19e:	f340 8088 	ble.w	800d2b2 <_dtoa_r+0x8c2>
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	4601      	mov	r1, r0
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	f000 ffb2 	bl	800e110 <__pow5mult>
 800d1ac:	9b06      	ldr	r3, [sp, #24]
 800d1ae:	2b01      	cmp	r3, #1
 800d1b0:	4606      	mov	r6, r0
 800d1b2:	f340 8081 	ble.w	800d2b8 <_dtoa_r+0x8c8>
 800d1b6:	f04f 0800 	mov.w	r8, #0
 800d1ba:	6933      	ldr	r3, [r6, #16]
 800d1bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d1c0:	6918      	ldr	r0, [r3, #16]
 800d1c2:	f000 fe95 	bl	800def0 <__hi0bits>
 800d1c6:	f1c0 0020 	rsb	r0, r0, #32
 800d1ca:	9b05      	ldr	r3, [sp, #20]
 800d1cc:	4418      	add	r0, r3
 800d1ce:	f010 001f 	ands.w	r0, r0, #31
 800d1d2:	f000 8092 	beq.w	800d2fa <_dtoa_r+0x90a>
 800d1d6:	f1c0 0320 	rsb	r3, r0, #32
 800d1da:	2b04      	cmp	r3, #4
 800d1dc:	f340 808a 	ble.w	800d2f4 <_dtoa_r+0x904>
 800d1e0:	f1c0 001c 	rsb	r0, r0, #28
 800d1e4:	9b04      	ldr	r3, [sp, #16]
 800d1e6:	4403      	add	r3, r0
 800d1e8:	9304      	str	r3, [sp, #16]
 800d1ea:	9b05      	ldr	r3, [sp, #20]
 800d1ec:	4403      	add	r3, r0
 800d1ee:	4405      	add	r5, r0
 800d1f0:	9305      	str	r3, [sp, #20]
 800d1f2:	9b04      	ldr	r3, [sp, #16]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	dd07      	ble.n	800d208 <_dtoa_r+0x818>
 800d1f8:	ee18 1a10 	vmov	r1, s16
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	4620      	mov	r0, r4
 800d200:	f000 ffe0 	bl	800e1c4 <__lshift>
 800d204:	ee08 0a10 	vmov	s16, r0
 800d208:	9b05      	ldr	r3, [sp, #20]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	dd05      	ble.n	800d21a <_dtoa_r+0x82a>
 800d20e:	4631      	mov	r1, r6
 800d210:	461a      	mov	r2, r3
 800d212:	4620      	mov	r0, r4
 800d214:	f000 ffd6 	bl	800e1c4 <__lshift>
 800d218:	4606      	mov	r6, r0
 800d21a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d06e      	beq.n	800d2fe <_dtoa_r+0x90e>
 800d220:	ee18 0a10 	vmov	r0, s16
 800d224:	4631      	mov	r1, r6
 800d226:	f001 f83d 	bl	800e2a4 <__mcmp>
 800d22a:	2800      	cmp	r0, #0
 800d22c:	da67      	bge.n	800d2fe <_dtoa_r+0x90e>
 800d22e:	9b00      	ldr	r3, [sp, #0]
 800d230:	3b01      	subs	r3, #1
 800d232:	ee18 1a10 	vmov	r1, s16
 800d236:	9300      	str	r3, [sp, #0]
 800d238:	220a      	movs	r2, #10
 800d23a:	2300      	movs	r3, #0
 800d23c:	4620      	mov	r0, r4
 800d23e:	f000 fdc7 	bl	800ddd0 <__multadd>
 800d242:	9b08      	ldr	r3, [sp, #32]
 800d244:	ee08 0a10 	vmov	s16, r0
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f000 81b1 	beq.w	800d5b0 <_dtoa_r+0xbc0>
 800d24e:	2300      	movs	r3, #0
 800d250:	4639      	mov	r1, r7
 800d252:	220a      	movs	r2, #10
 800d254:	4620      	mov	r0, r4
 800d256:	f000 fdbb 	bl	800ddd0 <__multadd>
 800d25a:	9b02      	ldr	r3, [sp, #8]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	4607      	mov	r7, r0
 800d260:	f300 808e 	bgt.w	800d380 <_dtoa_r+0x990>
 800d264:	9b06      	ldr	r3, [sp, #24]
 800d266:	2b02      	cmp	r3, #2
 800d268:	dc51      	bgt.n	800d30e <_dtoa_r+0x91e>
 800d26a:	e089      	b.n	800d380 <_dtoa_r+0x990>
 800d26c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d26e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d272:	e74b      	b.n	800d10c <_dtoa_r+0x71c>
 800d274:	9b03      	ldr	r3, [sp, #12]
 800d276:	1e5e      	subs	r6, r3, #1
 800d278:	9b07      	ldr	r3, [sp, #28]
 800d27a:	42b3      	cmp	r3, r6
 800d27c:	bfbf      	itttt	lt
 800d27e:	9b07      	ldrlt	r3, [sp, #28]
 800d280:	9607      	strlt	r6, [sp, #28]
 800d282:	1af2      	sublt	r2, r6, r3
 800d284:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d286:	bfb6      	itet	lt
 800d288:	189b      	addlt	r3, r3, r2
 800d28a:	1b9e      	subge	r6, r3, r6
 800d28c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d28e:	9b03      	ldr	r3, [sp, #12]
 800d290:	bfb8      	it	lt
 800d292:	2600      	movlt	r6, #0
 800d294:	2b00      	cmp	r3, #0
 800d296:	bfb7      	itett	lt
 800d298:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d29c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d2a0:	1a9d      	sublt	r5, r3, r2
 800d2a2:	2300      	movlt	r3, #0
 800d2a4:	e734      	b.n	800d110 <_dtoa_r+0x720>
 800d2a6:	9e07      	ldr	r6, [sp, #28]
 800d2a8:	9d04      	ldr	r5, [sp, #16]
 800d2aa:	9f08      	ldr	r7, [sp, #32]
 800d2ac:	e73b      	b.n	800d126 <_dtoa_r+0x736>
 800d2ae:	9a07      	ldr	r2, [sp, #28]
 800d2b0:	e767      	b.n	800d182 <_dtoa_r+0x792>
 800d2b2:	9b06      	ldr	r3, [sp, #24]
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	dc18      	bgt.n	800d2ea <_dtoa_r+0x8fa>
 800d2b8:	f1ba 0f00 	cmp.w	sl, #0
 800d2bc:	d115      	bne.n	800d2ea <_dtoa_r+0x8fa>
 800d2be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d2c2:	b993      	cbnz	r3, 800d2ea <_dtoa_r+0x8fa>
 800d2c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d2c8:	0d1b      	lsrs	r3, r3, #20
 800d2ca:	051b      	lsls	r3, r3, #20
 800d2cc:	b183      	cbz	r3, 800d2f0 <_dtoa_r+0x900>
 800d2ce:	9b04      	ldr	r3, [sp, #16]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	9304      	str	r3, [sp, #16]
 800d2d4:	9b05      	ldr	r3, [sp, #20]
 800d2d6:	3301      	adds	r3, #1
 800d2d8:	9305      	str	r3, [sp, #20]
 800d2da:	f04f 0801 	mov.w	r8, #1
 800d2de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f47f af6a 	bne.w	800d1ba <_dtoa_r+0x7ca>
 800d2e6:	2001      	movs	r0, #1
 800d2e8:	e76f      	b.n	800d1ca <_dtoa_r+0x7da>
 800d2ea:	f04f 0800 	mov.w	r8, #0
 800d2ee:	e7f6      	b.n	800d2de <_dtoa_r+0x8ee>
 800d2f0:	4698      	mov	r8, r3
 800d2f2:	e7f4      	b.n	800d2de <_dtoa_r+0x8ee>
 800d2f4:	f43f af7d 	beq.w	800d1f2 <_dtoa_r+0x802>
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	301c      	adds	r0, #28
 800d2fc:	e772      	b.n	800d1e4 <_dtoa_r+0x7f4>
 800d2fe:	9b03      	ldr	r3, [sp, #12]
 800d300:	2b00      	cmp	r3, #0
 800d302:	dc37      	bgt.n	800d374 <_dtoa_r+0x984>
 800d304:	9b06      	ldr	r3, [sp, #24]
 800d306:	2b02      	cmp	r3, #2
 800d308:	dd34      	ble.n	800d374 <_dtoa_r+0x984>
 800d30a:	9b03      	ldr	r3, [sp, #12]
 800d30c:	9302      	str	r3, [sp, #8]
 800d30e:	9b02      	ldr	r3, [sp, #8]
 800d310:	b96b      	cbnz	r3, 800d32e <_dtoa_r+0x93e>
 800d312:	4631      	mov	r1, r6
 800d314:	2205      	movs	r2, #5
 800d316:	4620      	mov	r0, r4
 800d318:	f000 fd5a 	bl	800ddd0 <__multadd>
 800d31c:	4601      	mov	r1, r0
 800d31e:	4606      	mov	r6, r0
 800d320:	ee18 0a10 	vmov	r0, s16
 800d324:	f000 ffbe 	bl	800e2a4 <__mcmp>
 800d328:	2800      	cmp	r0, #0
 800d32a:	f73f adbb 	bgt.w	800cea4 <_dtoa_r+0x4b4>
 800d32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d330:	9d01      	ldr	r5, [sp, #4]
 800d332:	43db      	mvns	r3, r3
 800d334:	9300      	str	r3, [sp, #0]
 800d336:	f04f 0800 	mov.w	r8, #0
 800d33a:	4631      	mov	r1, r6
 800d33c:	4620      	mov	r0, r4
 800d33e:	f000 fd25 	bl	800dd8c <_Bfree>
 800d342:	2f00      	cmp	r7, #0
 800d344:	f43f aea4 	beq.w	800d090 <_dtoa_r+0x6a0>
 800d348:	f1b8 0f00 	cmp.w	r8, #0
 800d34c:	d005      	beq.n	800d35a <_dtoa_r+0x96a>
 800d34e:	45b8      	cmp	r8, r7
 800d350:	d003      	beq.n	800d35a <_dtoa_r+0x96a>
 800d352:	4641      	mov	r1, r8
 800d354:	4620      	mov	r0, r4
 800d356:	f000 fd19 	bl	800dd8c <_Bfree>
 800d35a:	4639      	mov	r1, r7
 800d35c:	4620      	mov	r0, r4
 800d35e:	f000 fd15 	bl	800dd8c <_Bfree>
 800d362:	e695      	b.n	800d090 <_dtoa_r+0x6a0>
 800d364:	2600      	movs	r6, #0
 800d366:	4637      	mov	r7, r6
 800d368:	e7e1      	b.n	800d32e <_dtoa_r+0x93e>
 800d36a:	9700      	str	r7, [sp, #0]
 800d36c:	4637      	mov	r7, r6
 800d36e:	e599      	b.n	800cea4 <_dtoa_r+0x4b4>
 800d370:	40240000 	.word	0x40240000
 800d374:	9b08      	ldr	r3, [sp, #32]
 800d376:	2b00      	cmp	r3, #0
 800d378:	f000 80ca 	beq.w	800d510 <_dtoa_r+0xb20>
 800d37c:	9b03      	ldr	r3, [sp, #12]
 800d37e:	9302      	str	r3, [sp, #8]
 800d380:	2d00      	cmp	r5, #0
 800d382:	dd05      	ble.n	800d390 <_dtoa_r+0x9a0>
 800d384:	4639      	mov	r1, r7
 800d386:	462a      	mov	r2, r5
 800d388:	4620      	mov	r0, r4
 800d38a:	f000 ff1b 	bl	800e1c4 <__lshift>
 800d38e:	4607      	mov	r7, r0
 800d390:	f1b8 0f00 	cmp.w	r8, #0
 800d394:	d05b      	beq.n	800d44e <_dtoa_r+0xa5e>
 800d396:	6879      	ldr	r1, [r7, #4]
 800d398:	4620      	mov	r0, r4
 800d39a:	f000 fcb7 	bl	800dd0c <_Balloc>
 800d39e:	4605      	mov	r5, r0
 800d3a0:	b928      	cbnz	r0, 800d3ae <_dtoa_r+0x9be>
 800d3a2:	4b87      	ldr	r3, [pc, #540]	; (800d5c0 <_dtoa_r+0xbd0>)
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d3aa:	f7ff bb3b 	b.w	800ca24 <_dtoa_r+0x34>
 800d3ae:	693a      	ldr	r2, [r7, #16]
 800d3b0:	3202      	adds	r2, #2
 800d3b2:	0092      	lsls	r2, r2, #2
 800d3b4:	f107 010c 	add.w	r1, r7, #12
 800d3b8:	300c      	adds	r0, #12
 800d3ba:	f000 fc8d 	bl	800dcd8 <memcpy>
 800d3be:	2201      	movs	r2, #1
 800d3c0:	4629      	mov	r1, r5
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f000 fefe 	bl	800e1c4 <__lshift>
 800d3c8:	9b01      	ldr	r3, [sp, #4]
 800d3ca:	f103 0901 	add.w	r9, r3, #1
 800d3ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	9305      	str	r3, [sp, #20]
 800d3d6:	f00a 0301 	and.w	r3, sl, #1
 800d3da:	46b8      	mov	r8, r7
 800d3dc:	9304      	str	r3, [sp, #16]
 800d3de:	4607      	mov	r7, r0
 800d3e0:	4631      	mov	r1, r6
 800d3e2:	ee18 0a10 	vmov	r0, s16
 800d3e6:	f7ff fa77 	bl	800c8d8 <quorem>
 800d3ea:	4641      	mov	r1, r8
 800d3ec:	9002      	str	r0, [sp, #8]
 800d3ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d3f2:	ee18 0a10 	vmov	r0, s16
 800d3f6:	f000 ff55 	bl	800e2a4 <__mcmp>
 800d3fa:	463a      	mov	r2, r7
 800d3fc:	9003      	str	r0, [sp, #12]
 800d3fe:	4631      	mov	r1, r6
 800d400:	4620      	mov	r0, r4
 800d402:	f000 ff6b 	bl	800e2dc <__mdiff>
 800d406:	68c2      	ldr	r2, [r0, #12]
 800d408:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800d40c:	4605      	mov	r5, r0
 800d40e:	bb02      	cbnz	r2, 800d452 <_dtoa_r+0xa62>
 800d410:	4601      	mov	r1, r0
 800d412:	ee18 0a10 	vmov	r0, s16
 800d416:	f000 ff45 	bl	800e2a4 <__mcmp>
 800d41a:	4602      	mov	r2, r0
 800d41c:	4629      	mov	r1, r5
 800d41e:	4620      	mov	r0, r4
 800d420:	9207      	str	r2, [sp, #28]
 800d422:	f000 fcb3 	bl	800dd8c <_Bfree>
 800d426:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d42a:	ea43 0102 	orr.w	r1, r3, r2
 800d42e:	9b04      	ldr	r3, [sp, #16]
 800d430:	430b      	orrs	r3, r1
 800d432:	464d      	mov	r5, r9
 800d434:	d10f      	bne.n	800d456 <_dtoa_r+0xa66>
 800d436:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d43a:	d02a      	beq.n	800d492 <_dtoa_r+0xaa2>
 800d43c:	9b03      	ldr	r3, [sp, #12]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	dd02      	ble.n	800d448 <_dtoa_r+0xa58>
 800d442:	9b02      	ldr	r3, [sp, #8]
 800d444:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d448:	f88b a000 	strb.w	sl, [fp]
 800d44c:	e775      	b.n	800d33a <_dtoa_r+0x94a>
 800d44e:	4638      	mov	r0, r7
 800d450:	e7ba      	b.n	800d3c8 <_dtoa_r+0x9d8>
 800d452:	2201      	movs	r2, #1
 800d454:	e7e2      	b.n	800d41c <_dtoa_r+0xa2c>
 800d456:	9b03      	ldr	r3, [sp, #12]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	db04      	blt.n	800d466 <_dtoa_r+0xa76>
 800d45c:	9906      	ldr	r1, [sp, #24]
 800d45e:	430b      	orrs	r3, r1
 800d460:	9904      	ldr	r1, [sp, #16]
 800d462:	430b      	orrs	r3, r1
 800d464:	d122      	bne.n	800d4ac <_dtoa_r+0xabc>
 800d466:	2a00      	cmp	r2, #0
 800d468:	ddee      	ble.n	800d448 <_dtoa_r+0xa58>
 800d46a:	ee18 1a10 	vmov	r1, s16
 800d46e:	2201      	movs	r2, #1
 800d470:	4620      	mov	r0, r4
 800d472:	f000 fea7 	bl	800e1c4 <__lshift>
 800d476:	4631      	mov	r1, r6
 800d478:	ee08 0a10 	vmov	s16, r0
 800d47c:	f000 ff12 	bl	800e2a4 <__mcmp>
 800d480:	2800      	cmp	r0, #0
 800d482:	dc03      	bgt.n	800d48c <_dtoa_r+0xa9c>
 800d484:	d1e0      	bne.n	800d448 <_dtoa_r+0xa58>
 800d486:	f01a 0f01 	tst.w	sl, #1
 800d48a:	d0dd      	beq.n	800d448 <_dtoa_r+0xa58>
 800d48c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d490:	d1d7      	bne.n	800d442 <_dtoa_r+0xa52>
 800d492:	2339      	movs	r3, #57	; 0x39
 800d494:	f88b 3000 	strb.w	r3, [fp]
 800d498:	462b      	mov	r3, r5
 800d49a:	461d      	mov	r5, r3
 800d49c:	3b01      	subs	r3, #1
 800d49e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d4a2:	2a39      	cmp	r2, #57	; 0x39
 800d4a4:	d071      	beq.n	800d58a <_dtoa_r+0xb9a>
 800d4a6:	3201      	adds	r2, #1
 800d4a8:	701a      	strb	r2, [r3, #0]
 800d4aa:	e746      	b.n	800d33a <_dtoa_r+0x94a>
 800d4ac:	2a00      	cmp	r2, #0
 800d4ae:	dd07      	ble.n	800d4c0 <_dtoa_r+0xad0>
 800d4b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d4b4:	d0ed      	beq.n	800d492 <_dtoa_r+0xaa2>
 800d4b6:	f10a 0301 	add.w	r3, sl, #1
 800d4ba:	f88b 3000 	strb.w	r3, [fp]
 800d4be:	e73c      	b.n	800d33a <_dtoa_r+0x94a>
 800d4c0:	9b05      	ldr	r3, [sp, #20]
 800d4c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d4c6:	4599      	cmp	r9, r3
 800d4c8:	d047      	beq.n	800d55a <_dtoa_r+0xb6a>
 800d4ca:	ee18 1a10 	vmov	r1, s16
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	220a      	movs	r2, #10
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	f000 fc7c 	bl	800ddd0 <__multadd>
 800d4d8:	45b8      	cmp	r8, r7
 800d4da:	ee08 0a10 	vmov	s16, r0
 800d4de:	f04f 0300 	mov.w	r3, #0
 800d4e2:	f04f 020a 	mov.w	r2, #10
 800d4e6:	4641      	mov	r1, r8
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	d106      	bne.n	800d4fa <_dtoa_r+0xb0a>
 800d4ec:	f000 fc70 	bl	800ddd0 <__multadd>
 800d4f0:	4680      	mov	r8, r0
 800d4f2:	4607      	mov	r7, r0
 800d4f4:	f109 0901 	add.w	r9, r9, #1
 800d4f8:	e772      	b.n	800d3e0 <_dtoa_r+0x9f0>
 800d4fa:	f000 fc69 	bl	800ddd0 <__multadd>
 800d4fe:	4639      	mov	r1, r7
 800d500:	4680      	mov	r8, r0
 800d502:	2300      	movs	r3, #0
 800d504:	220a      	movs	r2, #10
 800d506:	4620      	mov	r0, r4
 800d508:	f000 fc62 	bl	800ddd0 <__multadd>
 800d50c:	4607      	mov	r7, r0
 800d50e:	e7f1      	b.n	800d4f4 <_dtoa_r+0xb04>
 800d510:	9b03      	ldr	r3, [sp, #12]
 800d512:	9302      	str	r3, [sp, #8]
 800d514:	9d01      	ldr	r5, [sp, #4]
 800d516:	ee18 0a10 	vmov	r0, s16
 800d51a:	4631      	mov	r1, r6
 800d51c:	f7ff f9dc 	bl	800c8d8 <quorem>
 800d520:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d524:	9b01      	ldr	r3, [sp, #4]
 800d526:	f805 ab01 	strb.w	sl, [r5], #1
 800d52a:	1aea      	subs	r2, r5, r3
 800d52c:	9b02      	ldr	r3, [sp, #8]
 800d52e:	4293      	cmp	r3, r2
 800d530:	dd09      	ble.n	800d546 <_dtoa_r+0xb56>
 800d532:	ee18 1a10 	vmov	r1, s16
 800d536:	2300      	movs	r3, #0
 800d538:	220a      	movs	r2, #10
 800d53a:	4620      	mov	r0, r4
 800d53c:	f000 fc48 	bl	800ddd0 <__multadd>
 800d540:	ee08 0a10 	vmov	s16, r0
 800d544:	e7e7      	b.n	800d516 <_dtoa_r+0xb26>
 800d546:	9b02      	ldr	r3, [sp, #8]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	bfc8      	it	gt
 800d54c:	461d      	movgt	r5, r3
 800d54e:	9b01      	ldr	r3, [sp, #4]
 800d550:	bfd8      	it	le
 800d552:	2501      	movle	r5, #1
 800d554:	441d      	add	r5, r3
 800d556:	f04f 0800 	mov.w	r8, #0
 800d55a:	ee18 1a10 	vmov	r1, s16
 800d55e:	2201      	movs	r2, #1
 800d560:	4620      	mov	r0, r4
 800d562:	f000 fe2f 	bl	800e1c4 <__lshift>
 800d566:	4631      	mov	r1, r6
 800d568:	ee08 0a10 	vmov	s16, r0
 800d56c:	f000 fe9a 	bl	800e2a4 <__mcmp>
 800d570:	2800      	cmp	r0, #0
 800d572:	dc91      	bgt.n	800d498 <_dtoa_r+0xaa8>
 800d574:	d102      	bne.n	800d57c <_dtoa_r+0xb8c>
 800d576:	f01a 0f01 	tst.w	sl, #1
 800d57a:	d18d      	bne.n	800d498 <_dtoa_r+0xaa8>
 800d57c:	462b      	mov	r3, r5
 800d57e:	461d      	mov	r5, r3
 800d580:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d584:	2a30      	cmp	r2, #48	; 0x30
 800d586:	d0fa      	beq.n	800d57e <_dtoa_r+0xb8e>
 800d588:	e6d7      	b.n	800d33a <_dtoa_r+0x94a>
 800d58a:	9a01      	ldr	r2, [sp, #4]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d184      	bne.n	800d49a <_dtoa_r+0xaaa>
 800d590:	9b00      	ldr	r3, [sp, #0]
 800d592:	3301      	adds	r3, #1
 800d594:	9300      	str	r3, [sp, #0]
 800d596:	2331      	movs	r3, #49	; 0x31
 800d598:	7013      	strb	r3, [r2, #0]
 800d59a:	e6ce      	b.n	800d33a <_dtoa_r+0x94a>
 800d59c:	4b09      	ldr	r3, [pc, #36]	; (800d5c4 <_dtoa_r+0xbd4>)
 800d59e:	f7ff ba95 	b.w	800cacc <_dtoa_r+0xdc>
 800d5a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	f47f aa6e 	bne.w	800ca86 <_dtoa_r+0x96>
 800d5aa:	4b07      	ldr	r3, [pc, #28]	; (800d5c8 <_dtoa_r+0xbd8>)
 800d5ac:	f7ff ba8e 	b.w	800cacc <_dtoa_r+0xdc>
 800d5b0:	9b02      	ldr	r3, [sp, #8]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	dcae      	bgt.n	800d514 <_dtoa_r+0xb24>
 800d5b6:	9b06      	ldr	r3, [sp, #24]
 800d5b8:	2b02      	cmp	r3, #2
 800d5ba:	f73f aea8 	bgt.w	800d30e <_dtoa_r+0x91e>
 800d5be:	e7a9      	b.n	800d514 <_dtoa_r+0xb24>
 800d5c0:	08010440 	.word	0x08010440
 800d5c4:	08010240 	.word	0x08010240
 800d5c8:	080103c1 	.word	0x080103c1

0800d5cc <rshift>:
 800d5cc:	6903      	ldr	r3, [r0, #16]
 800d5ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d5d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d5da:	f100 0414 	add.w	r4, r0, #20
 800d5de:	dd45      	ble.n	800d66c <rshift+0xa0>
 800d5e0:	f011 011f 	ands.w	r1, r1, #31
 800d5e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d5e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d5ec:	d10c      	bne.n	800d608 <rshift+0x3c>
 800d5ee:	f100 0710 	add.w	r7, r0, #16
 800d5f2:	4629      	mov	r1, r5
 800d5f4:	42b1      	cmp	r1, r6
 800d5f6:	d334      	bcc.n	800d662 <rshift+0x96>
 800d5f8:	1a9b      	subs	r3, r3, r2
 800d5fa:	009b      	lsls	r3, r3, #2
 800d5fc:	1eea      	subs	r2, r5, #3
 800d5fe:	4296      	cmp	r6, r2
 800d600:	bf38      	it	cc
 800d602:	2300      	movcc	r3, #0
 800d604:	4423      	add	r3, r4
 800d606:	e015      	b.n	800d634 <rshift+0x68>
 800d608:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d60c:	f1c1 0820 	rsb	r8, r1, #32
 800d610:	40cf      	lsrs	r7, r1
 800d612:	f105 0e04 	add.w	lr, r5, #4
 800d616:	46a1      	mov	r9, r4
 800d618:	4576      	cmp	r6, lr
 800d61a:	46f4      	mov	ip, lr
 800d61c:	d815      	bhi.n	800d64a <rshift+0x7e>
 800d61e:	1a9a      	subs	r2, r3, r2
 800d620:	0092      	lsls	r2, r2, #2
 800d622:	3a04      	subs	r2, #4
 800d624:	3501      	adds	r5, #1
 800d626:	42ae      	cmp	r6, r5
 800d628:	bf38      	it	cc
 800d62a:	2200      	movcc	r2, #0
 800d62c:	18a3      	adds	r3, r4, r2
 800d62e:	50a7      	str	r7, [r4, r2]
 800d630:	b107      	cbz	r7, 800d634 <rshift+0x68>
 800d632:	3304      	adds	r3, #4
 800d634:	1b1a      	subs	r2, r3, r4
 800d636:	42a3      	cmp	r3, r4
 800d638:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d63c:	bf08      	it	eq
 800d63e:	2300      	moveq	r3, #0
 800d640:	6102      	str	r2, [r0, #16]
 800d642:	bf08      	it	eq
 800d644:	6143      	streq	r3, [r0, #20]
 800d646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d64a:	f8dc c000 	ldr.w	ip, [ip]
 800d64e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d652:	ea4c 0707 	orr.w	r7, ip, r7
 800d656:	f849 7b04 	str.w	r7, [r9], #4
 800d65a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d65e:	40cf      	lsrs	r7, r1
 800d660:	e7da      	b.n	800d618 <rshift+0x4c>
 800d662:	f851 cb04 	ldr.w	ip, [r1], #4
 800d666:	f847 cf04 	str.w	ip, [r7, #4]!
 800d66a:	e7c3      	b.n	800d5f4 <rshift+0x28>
 800d66c:	4623      	mov	r3, r4
 800d66e:	e7e1      	b.n	800d634 <rshift+0x68>

0800d670 <__hexdig_fun>:
 800d670:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d674:	2b09      	cmp	r3, #9
 800d676:	d802      	bhi.n	800d67e <__hexdig_fun+0xe>
 800d678:	3820      	subs	r0, #32
 800d67a:	b2c0      	uxtb	r0, r0
 800d67c:	4770      	bx	lr
 800d67e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d682:	2b05      	cmp	r3, #5
 800d684:	d801      	bhi.n	800d68a <__hexdig_fun+0x1a>
 800d686:	3847      	subs	r0, #71	; 0x47
 800d688:	e7f7      	b.n	800d67a <__hexdig_fun+0xa>
 800d68a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d68e:	2b05      	cmp	r3, #5
 800d690:	d801      	bhi.n	800d696 <__hexdig_fun+0x26>
 800d692:	3827      	subs	r0, #39	; 0x27
 800d694:	e7f1      	b.n	800d67a <__hexdig_fun+0xa>
 800d696:	2000      	movs	r0, #0
 800d698:	4770      	bx	lr
	...

0800d69c <__gethex>:
 800d69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a0:	ed2d 8b02 	vpush	{d8}
 800d6a4:	b089      	sub	sp, #36	; 0x24
 800d6a6:	ee08 0a10 	vmov	s16, r0
 800d6aa:	9304      	str	r3, [sp, #16]
 800d6ac:	4bb4      	ldr	r3, [pc, #720]	; (800d980 <__gethex+0x2e4>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	9301      	str	r3, [sp, #4]
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	468b      	mov	fp, r1
 800d6b6:	4690      	mov	r8, r2
 800d6b8:	f7f2 fdb2 	bl	8000220 <strlen>
 800d6bc:	9b01      	ldr	r3, [sp, #4]
 800d6be:	f8db 2000 	ldr.w	r2, [fp]
 800d6c2:	4403      	add	r3, r0
 800d6c4:	4682      	mov	sl, r0
 800d6c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d6ca:	9305      	str	r3, [sp, #20]
 800d6cc:	1c93      	adds	r3, r2, #2
 800d6ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d6d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d6d6:	32fe      	adds	r2, #254	; 0xfe
 800d6d8:	18d1      	adds	r1, r2, r3
 800d6da:	461f      	mov	r7, r3
 800d6dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d6e0:	9100      	str	r1, [sp, #0]
 800d6e2:	2830      	cmp	r0, #48	; 0x30
 800d6e4:	d0f8      	beq.n	800d6d8 <__gethex+0x3c>
 800d6e6:	f7ff ffc3 	bl	800d670 <__hexdig_fun>
 800d6ea:	4604      	mov	r4, r0
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	d13a      	bne.n	800d766 <__gethex+0xca>
 800d6f0:	9901      	ldr	r1, [sp, #4]
 800d6f2:	4652      	mov	r2, sl
 800d6f4:	4638      	mov	r0, r7
 800d6f6:	f001 f943 	bl	800e980 <strncmp>
 800d6fa:	4605      	mov	r5, r0
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d168      	bne.n	800d7d2 <__gethex+0x136>
 800d700:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d704:	eb07 060a 	add.w	r6, r7, sl
 800d708:	f7ff ffb2 	bl	800d670 <__hexdig_fun>
 800d70c:	2800      	cmp	r0, #0
 800d70e:	d062      	beq.n	800d7d6 <__gethex+0x13a>
 800d710:	4633      	mov	r3, r6
 800d712:	7818      	ldrb	r0, [r3, #0]
 800d714:	2830      	cmp	r0, #48	; 0x30
 800d716:	461f      	mov	r7, r3
 800d718:	f103 0301 	add.w	r3, r3, #1
 800d71c:	d0f9      	beq.n	800d712 <__gethex+0x76>
 800d71e:	f7ff ffa7 	bl	800d670 <__hexdig_fun>
 800d722:	2301      	movs	r3, #1
 800d724:	fab0 f480 	clz	r4, r0
 800d728:	0964      	lsrs	r4, r4, #5
 800d72a:	4635      	mov	r5, r6
 800d72c:	9300      	str	r3, [sp, #0]
 800d72e:	463a      	mov	r2, r7
 800d730:	4616      	mov	r6, r2
 800d732:	3201      	adds	r2, #1
 800d734:	7830      	ldrb	r0, [r6, #0]
 800d736:	f7ff ff9b 	bl	800d670 <__hexdig_fun>
 800d73a:	2800      	cmp	r0, #0
 800d73c:	d1f8      	bne.n	800d730 <__gethex+0x94>
 800d73e:	9901      	ldr	r1, [sp, #4]
 800d740:	4652      	mov	r2, sl
 800d742:	4630      	mov	r0, r6
 800d744:	f001 f91c 	bl	800e980 <strncmp>
 800d748:	b980      	cbnz	r0, 800d76c <__gethex+0xd0>
 800d74a:	b94d      	cbnz	r5, 800d760 <__gethex+0xc4>
 800d74c:	eb06 050a 	add.w	r5, r6, sl
 800d750:	462a      	mov	r2, r5
 800d752:	4616      	mov	r6, r2
 800d754:	3201      	adds	r2, #1
 800d756:	7830      	ldrb	r0, [r6, #0]
 800d758:	f7ff ff8a 	bl	800d670 <__hexdig_fun>
 800d75c:	2800      	cmp	r0, #0
 800d75e:	d1f8      	bne.n	800d752 <__gethex+0xb6>
 800d760:	1bad      	subs	r5, r5, r6
 800d762:	00ad      	lsls	r5, r5, #2
 800d764:	e004      	b.n	800d770 <__gethex+0xd4>
 800d766:	2400      	movs	r4, #0
 800d768:	4625      	mov	r5, r4
 800d76a:	e7e0      	b.n	800d72e <__gethex+0x92>
 800d76c:	2d00      	cmp	r5, #0
 800d76e:	d1f7      	bne.n	800d760 <__gethex+0xc4>
 800d770:	7833      	ldrb	r3, [r6, #0]
 800d772:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d776:	2b50      	cmp	r3, #80	; 0x50
 800d778:	d13b      	bne.n	800d7f2 <__gethex+0x156>
 800d77a:	7873      	ldrb	r3, [r6, #1]
 800d77c:	2b2b      	cmp	r3, #43	; 0x2b
 800d77e:	d02c      	beq.n	800d7da <__gethex+0x13e>
 800d780:	2b2d      	cmp	r3, #45	; 0x2d
 800d782:	d02e      	beq.n	800d7e2 <__gethex+0x146>
 800d784:	1c71      	adds	r1, r6, #1
 800d786:	f04f 0900 	mov.w	r9, #0
 800d78a:	7808      	ldrb	r0, [r1, #0]
 800d78c:	f7ff ff70 	bl	800d670 <__hexdig_fun>
 800d790:	1e43      	subs	r3, r0, #1
 800d792:	b2db      	uxtb	r3, r3
 800d794:	2b18      	cmp	r3, #24
 800d796:	d82c      	bhi.n	800d7f2 <__gethex+0x156>
 800d798:	f1a0 0210 	sub.w	r2, r0, #16
 800d79c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d7a0:	f7ff ff66 	bl	800d670 <__hexdig_fun>
 800d7a4:	1e43      	subs	r3, r0, #1
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	2b18      	cmp	r3, #24
 800d7aa:	d91d      	bls.n	800d7e8 <__gethex+0x14c>
 800d7ac:	f1b9 0f00 	cmp.w	r9, #0
 800d7b0:	d000      	beq.n	800d7b4 <__gethex+0x118>
 800d7b2:	4252      	negs	r2, r2
 800d7b4:	4415      	add	r5, r2
 800d7b6:	f8cb 1000 	str.w	r1, [fp]
 800d7ba:	b1e4      	cbz	r4, 800d7f6 <__gethex+0x15a>
 800d7bc:	9b00      	ldr	r3, [sp, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	bf14      	ite	ne
 800d7c2:	2700      	movne	r7, #0
 800d7c4:	2706      	moveq	r7, #6
 800d7c6:	4638      	mov	r0, r7
 800d7c8:	b009      	add	sp, #36	; 0x24
 800d7ca:	ecbd 8b02 	vpop	{d8}
 800d7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d2:	463e      	mov	r6, r7
 800d7d4:	4625      	mov	r5, r4
 800d7d6:	2401      	movs	r4, #1
 800d7d8:	e7ca      	b.n	800d770 <__gethex+0xd4>
 800d7da:	f04f 0900 	mov.w	r9, #0
 800d7de:	1cb1      	adds	r1, r6, #2
 800d7e0:	e7d3      	b.n	800d78a <__gethex+0xee>
 800d7e2:	f04f 0901 	mov.w	r9, #1
 800d7e6:	e7fa      	b.n	800d7de <__gethex+0x142>
 800d7e8:	230a      	movs	r3, #10
 800d7ea:	fb03 0202 	mla	r2, r3, r2, r0
 800d7ee:	3a10      	subs	r2, #16
 800d7f0:	e7d4      	b.n	800d79c <__gethex+0x100>
 800d7f2:	4631      	mov	r1, r6
 800d7f4:	e7df      	b.n	800d7b6 <__gethex+0x11a>
 800d7f6:	1bf3      	subs	r3, r6, r7
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	4621      	mov	r1, r4
 800d7fc:	2b07      	cmp	r3, #7
 800d7fe:	dc0b      	bgt.n	800d818 <__gethex+0x17c>
 800d800:	ee18 0a10 	vmov	r0, s16
 800d804:	f000 fa82 	bl	800dd0c <_Balloc>
 800d808:	4604      	mov	r4, r0
 800d80a:	b940      	cbnz	r0, 800d81e <__gethex+0x182>
 800d80c:	4b5d      	ldr	r3, [pc, #372]	; (800d984 <__gethex+0x2e8>)
 800d80e:	4602      	mov	r2, r0
 800d810:	21de      	movs	r1, #222	; 0xde
 800d812:	485d      	ldr	r0, [pc, #372]	; (800d988 <__gethex+0x2ec>)
 800d814:	f001 f8d6 	bl	800e9c4 <__assert_func>
 800d818:	3101      	adds	r1, #1
 800d81a:	105b      	asrs	r3, r3, #1
 800d81c:	e7ee      	b.n	800d7fc <__gethex+0x160>
 800d81e:	f100 0914 	add.w	r9, r0, #20
 800d822:	f04f 0b00 	mov.w	fp, #0
 800d826:	f1ca 0301 	rsb	r3, sl, #1
 800d82a:	f8cd 9008 	str.w	r9, [sp, #8]
 800d82e:	f8cd b000 	str.w	fp, [sp]
 800d832:	9306      	str	r3, [sp, #24]
 800d834:	42b7      	cmp	r7, r6
 800d836:	d340      	bcc.n	800d8ba <__gethex+0x21e>
 800d838:	9802      	ldr	r0, [sp, #8]
 800d83a:	9b00      	ldr	r3, [sp, #0]
 800d83c:	f840 3b04 	str.w	r3, [r0], #4
 800d840:	eba0 0009 	sub.w	r0, r0, r9
 800d844:	1080      	asrs	r0, r0, #2
 800d846:	0146      	lsls	r6, r0, #5
 800d848:	6120      	str	r0, [r4, #16]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f000 fb50 	bl	800def0 <__hi0bits>
 800d850:	1a30      	subs	r0, r6, r0
 800d852:	f8d8 6000 	ldr.w	r6, [r8]
 800d856:	42b0      	cmp	r0, r6
 800d858:	dd63      	ble.n	800d922 <__gethex+0x286>
 800d85a:	1b87      	subs	r7, r0, r6
 800d85c:	4639      	mov	r1, r7
 800d85e:	4620      	mov	r0, r4
 800d860:	f000 fef4 	bl	800e64c <__any_on>
 800d864:	4682      	mov	sl, r0
 800d866:	b1a8      	cbz	r0, 800d894 <__gethex+0x1f8>
 800d868:	1e7b      	subs	r3, r7, #1
 800d86a:	1159      	asrs	r1, r3, #5
 800d86c:	f003 021f 	and.w	r2, r3, #31
 800d870:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d874:	f04f 0a01 	mov.w	sl, #1
 800d878:	fa0a f202 	lsl.w	r2, sl, r2
 800d87c:	420a      	tst	r2, r1
 800d87e:	d009      	beq.n	800d894 <__gethex+0x1f8>
 800d880:	4553      	cmp	r3, sl
 800d882:	dd05      	ble.n	800d890 <__gethex+0x1f4>
 800d884:	1eb9      	subs	r1, r7, #2
 800d886:	4620      	mov	r0, r4
 800d888:	f000 fee0 	bl	800e64c <__any_on>
 800d88c:	2800      	cmp	r0, #0
 800d88e:	d145      	bne.n	800d91c <__gethex+0x280>
 800d890:	f04f 0a02 	mov.w	sl, #2
 800d894:	4639      	mov	r1, r7
 800d896:	4620      	mov	r0, r4
 800d898:	f7ff fe98 	bl	800d5cc <rshift>
 800d89c:	443d      	add	r5, r7
 800d89e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d8a2:	42ab      	cmp	r3, r5
 800d8a4:	da4c      	bge.n	800d940 <__gethex+0x2a4>
 800d8a6:	ee18 0a10 	vmov	r0, s16
 800d8aa:	4621      	mov	r1, r4
 800d8ac:	f000 fa6e 	bl	800dd8c <_Bfree>
 800d8b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	6013      	str	r3, [r2, #0]
 800d8b6:	27a3      	movs	r7, #163	; 0xa3
 800d8b8:	e785      	b.n	800d7c6 <__gethex+0x12a>
 800d8ba:	1e73      	subs	r3, r6, #1
 800d8bc:	9a05      	ldr	r2, [sp, #20]
 800d8be:	9303      	str	r3, [sp, #12]
 800d8c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d019      	beq.n	800d8fc <__gethex+0x260>
 800d8c8:	f1bb 0f20 	cmp.w	fp, #32
 800d8cc:	d107      	bne.n	800d8de <__gethex+0x242>
 800d8ce:	9b02      	ldr	r3, [sp, #8]
 800d8d0:	9a00      	ldr	r2, [sp, #0]
 800d8d2:	f843 2b04 	str.w	r2, [r3], #4
 800d8d6:	9302      	str	r3, [sp, #8]
 800d8d8:	2300      	movs	r3, #0
 800d8da:	9300      	str	r3, [sp, #0]
 800d8dc:	469b      	mov	fp, r3
 800d8de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d8e2:	f7ff fec5 	bl	800d670 <__hexdig_fun>
 800d8e6:	9b00      	ldr	r3, [sp, #0]
 800d8e8:	f000 000f 	and.w	r0, r0, #15
 800d8ec:	fa00 f00b 	lsl.w	r0, r0, fp
 800d8f0:	4303      	orrs	r3, r0
 800d8f2:	9300      	str	r3, [sp, #0]
 800d8f4:	f10b 0b04 	add.w	fp, fp, #4
 800d8f8:	9b03      	ldr	r3, [sp, #12]
 800d8fa:	e00d      	b.n	800d918 <__gethex+0x27c>
 800d8fc:	9b03      	ldr	r3, [sp, #12]
 800d8fe:	9a06      	ldr	r2, [sp, #24]
 800d900:	4413      	add	r3, r2
 800d902:	42bb      	cmp	r3, r7
 800d904:	d3e0      	bcc.n	800d8c8 <__gethex+0x22c>
 800d906:	4618      	mov	r0, r3
 800d908:	9901      	ldr	r1, [sp, #4]
 800d90a:	9307      	str	r3, [sp, #28]
 800d90c:	4652      	mov	r2, sl
 800d90e:	f001 f837 	bl	800e980 <strncmp>
 800d912:	9b07      	ldr	r3, [sp, #28]
 800d914:	2800      	cmp	r0, #0
 800d916:	d1d7      	bne.n	800d8c8 <__gethex+0x22c>
 800d918:	461e      	mov	r6, r3
 800d91a:	e78b      	b.n	800d834 <__gethex+0x198>
 800d91c:	f04f 0a03 	mov.w	sl, #3
 800d920:	e7b8      	b.n	800d894 <__gethex+0x1f8>
 800d922:	da0a      	bge.n	800d93a <__gethex+0x29e>
 800d924:	1a37      	subs	r7, r6, r0
 800d926:	4621      	mov	r1, r4
 800d928:	ee18 0a10 	vmov	r0, s16
 800d92c:	463a      	mov	r2, r7
 800d92e:	f000 fc49 	bl	800e1c4 <__lshift>
 800d932:	1bed      	subs	r5, r5, r7
 800d934:	4604      	mov	r4, r0
 800d936:	f100 0914 	add.w	r9, r0, #20
 800d93a:	f04f 0a00 	mov.w	sl, #0
 800d93e:	e7ae      	b.n	800d89e <__gethex+0x202>
 800d940:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d944:	42a8      	cmp	r0, r5
 800d946:	dd72      	ble.n	800da2e <__gethex+0x392>
 800d948:	1b45      	subs	r5, r0, r5
 800d94a:	42ae      	cmp	r6, r5
 800d94c:	dc36      	bgt.n	800d9bc <__gethex+0x320>
 800d94e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d952:	2b02      	cmp	r3, #2
 800d954:	d02a      	beq.n	800d9ac <__gethex+0x310>
 800d956:	2b03      	cmp	r3, #3
 800d958:	d02c      	beq.n	800d9b4 <__gethex+0x318>
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d11c      	bne.n	800d998 <__gethex+0x2fc>
 800d95e:	42ae      	cmp	r6, r5
 800d960:	d11a      	bne.n	800d998 <__gethex+0x2fc>
 800d962:	2e01      	cmp	r6, #1
 800d964:	d112      	bne.n	800d98c <__gethex+0x2f0>
 800d966:	9a04      	ldr	r2, [sp, #16]
 800d968:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d96c:	6013      	str	r3, [r2, #0]
 800d96e:	2301      	movs	r3, #1
 800d970:	6123      	str	r3, [r4, #16]
 800d972:	f8c9 3000 	str.w	r3, [r9]
 800d976:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d978:	2762      	movs	r7, #98	; 0x62
 800d97a:	601c      	str	r4, [r3, #0]
 800d97c:	e723      	b.n	800d7c6 <__gethex+0x12a>
 800d97e:	bf00      	nop
 800d980:	080104b8 	.word	0x080104b8
 800d984:	08010440 	.word	0x08010440
 800d988:	08010451 	.word	0x08010451
 800d98c:	1e71      	subs	r1, r6, #1
 800d98e:	4620      	mov	r0, r4
 800d990:	f000 fe5c 	bl	800e64c <__any_on>
 800d994:	2800      	cmp	r0, #0
 800d996:	d1e6      	bne.n	800d966 <__gethex+0x2ca>
 800d998:	ee18 0a10 	vmov	r0, s16
 800d99c:	4621      	mov	r1, r4
 800d99e:	f000 f9f5 	bl	800dd8c <_Bfree>
 800d9a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	6013      	str	r3, [r2, #0]
 800d9a8:	2750      	movs	r7, #80	; 0x50
 800d9aa:	e70c      	b.n	800d7c6 <__gethex+0x12a>
 800d9ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d1f2      	bne.n	800d998 <__gethex+0x2fc>
 800d9b2:	e7d8      	b.n	800d966 <__gethex+0x2ca>
 800d9b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d1d5      	bne.n	800d966 <__gethex+0x2ca>
 800d9ba:	e7ed      	b.n	800d998 <__gethex+0x2fc>
 800d9bc:	1e6f      	subs	r7, r5, #1
 800d9be:	f1ba 0f00 	cmp.w	sl, #0
 800d9c2:	d131      	bne.n	800da28 <__gethex+0x38c>
 800d9c4:	b127      	cbz	r7, 800d9d0 <__gethex+0x334>
 800d9c6:	4639      	mov	r1, r7
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	f000 fe3f 	bl	800e64c <__any_on>
 800d9ce:	4682      	mov	sl, r0
 800d9d0:	117b      	asrs	r3, r7, #5
 800d9d2:	2101      	movs	r1, #1
 800d9d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d9d8:	f007 071f 	and.w	r7, r7, #31
 800d9dc:	fa01 f707 	lsl.w	r7, r1, r7
 800d9e0:	421f      	tst	r7, r3
 800d9e2:	4629      	mov	r1, r5
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	bf18      	it	ne
 800d9e8:	f04a 0a02 	orrne.w	sl, sl, #2
 800d9ec:	1b76      	subs	r6, r6, r5
 800d9ee:	f7ff fded 	bl	800d5cc <rshift>
 800d9f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d9f6:	2702      	movs	r7, #2
 800d9f8:	f1ba 0f00 	cmp.w	sl, #0
 800d9fc:	d048      	beq.n	800da90 <__gethex+0x3f4>
 800d9fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da02:	2b02      	cmp	r3, #2
 800da04:	d015      	beq.n	800da32 <__gethex+0x396>
 800da06:	2b03      	cmp	r3, #3
 800da08:	d017      	beq.n	800da3a <__gethex+0x39e>
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d109      	bne.n	800da22 <__gethex+0x386>
 800da0e:	f01a 0f02 	tst.w	sl, #2
 800da12:	d006      	beq.n	800da22 <__gethex+0x386>
 800da14:	f8d9 0000 	ldr.w	r0, [r9]
 800da18:	ea4a 0a00 	orr.w	sl, sl, r0
 800da1c:	f01a 0f01 	tst.w	sl, #1
 800da20:	d10e      	bne.n	800da40 <__gethex+0x3a4>
 800da22:	f047 0710 	orr.w	r7, r7, #16
 800da26:	e033      	b.n	800da90 <__gethex+0x3f4>
 800da28:	f04f 0a01 	mov.w	sl, #1
 800da2c:	e7d0      	b.n	800d9d0 <__gethex+0x334>
 800da2e:	2701      	movs	r7, #1
 800da30:	e7e2      	b.n	800d9f8 <__gethex+0x35c>
 800da32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da34:	f1c3 0301 	rsb	r3, r3, #1
 800da38:	9315      	str	r3, [sp, #84]	; 0x54
 800da3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d0f0      	beq.n	800da22 <__gethex+0x386>
 800da40:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800da44:	f104 0314 	add.w	r3, r4, #20
 800da48:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800da4c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800da50:	f04f 0c00 	mov.w	ip, #0
 800da54:	4618      	mov	r0, r3
 800da56:	f853 2b04 	ldr.w	r2, [r3], #4
 800da5a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800da5e:	d01c      	beq.n	800da9a <__gethex+0x3fe>
 800da60:	3201      	adds	r2, #1
 800da62:	6002      	str	r2, [r0, #0]
 800da64:	2f02      	cmp	r7, #2
 800da66:	f104 0314 	add.w	r3, r4, #20
 800da6a:	d13f      	bne.n	800daec <__gethex+0x450>
 800da6c:	f8d8 2000 	ldr.w	r2, [r8]
 800da70:	3a01      	subs	r2, #1
 800da72:	42b2      	cmp	r2, r6
 800da74:	d10a      	bne.n	800da8c <__gethex+0x3f0>
 800da76:	1171      	asrs	r1, r6, #5
 800da78:	2201      	movs	r2, #1
 800da7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800da7e:	f006 061f 	and.w	r6, r6, #31
 800da82:	fa02 f606 	lsl.w	r6, r2, r6
 800da86:	421e      	tst	r6, r3
 800da88:	bf18      	it	ne
 800da8a:	4617      	movne	r7, r2
 800da8c:	f047 0720 	orr.w	r7, r7, #32
 800da90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800da92:	601c      	str	r4, [r3, #0]
 800da94:	9b04      	ldr	r3, [sp, #16]
 800da96:	601d      	str	r5, [r3, #0]
 800da98:	e695      	b.n	800d7c6 <__gethex+0x12a>
 800da9a:	4299      	cmp	r1, r3
 800da9c:	f843 cc04 	str.w	ip, [r3, #-4]
 800daa0:	d8d8      	bhi.n	800da54 <__gethex+0x3b8>
 800daa2:	68a3      	ldr	r3, [r4, #8]
 800daa4:	459b      	cmp	fp, r3
 800daa6:	db19      	blt.n	800dadc <__gethex+0x440>
 800daa8:	6861      	ldr	r1, [r4, #4]
 800daaa:	ee18 0a10 	vmov	r0, s16
 800daae:	3101      	adds	r1, #1
 800dab0:	f000 f92c 	bl	800dd0c <_Balloc>
 800dab4:	4681      	mov	r9, r0
 800dab6:	b918      	cbnz	r0, 800dac0 <__gethex+0x424>
 800dab8:	4b1a      	ldr	r3, [pc, #104]	; (800db24 <__gethex+0x488>)
 800daba:	4602      	mov	r2, r0
 800dabc:	2184      	movs	r1, #132	; 0x84
 800dabe:	e6a8      	b.n	800d812 <__gethex+0x176>
 800dac0:	6922      	ldr	r2, [r4, #16]
 800dac2:	3202      	adds	r2, #2
 800dac4:	f104 010c 	add.w	r1, r4, #12
 800dac8:	0092      	lsls	r2, r2, #2
 800daca:	300c      	adds	r0, #12
 800dacc:	f000 f904 	bl	800dcd8 <memcpy>
 800dad0:	4621      	mov	r1, r4
 800dad2:	ee18 0a10 	vmov	r0, s16
 800dad6:	f000 f959 	bl	800dd8c <_Bfree>
 800dada:	464c      	mov	r4, r9
 800dadc:	6923      	ldr	r3, [r4, #16]
 800dade:	1c5a      	adds	r2, r3, #1
 800dae0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dae4:	6122      	str	r2, [r4, #16]
 800dae6:	2201      	movs	r2, #1
 800dae8:	615a      	str	r2, [r3, #20]
 800daea:	e7bb      	b.n	800da64 <__gethex+0x3c8>
 800daec:	6922      	ldr	r2, [r4, #16]
 800daee:	455a      	cmp	r2, fp
 800daf0:	dd0b      	ble.n	800db0a <__gethex+0x46e>
 800daf2:	2101      	movs	r1, #1
 800daf4:	4620      	mov	r0, r4
 800daf6:	f7ff fd69 	bl	800d5cc <rshift>
 800dafa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dafe:	3501      	adds	r5, #1
 800db00:	42ab      	cmp	r3, r5
 800db02:	f6ff aed0 	blt.w	800d8a6 <__gethex+0x20a>
 800db06:	2701      	movs	r7, #1
 800db08:	e7c0      	b.n	800da8c <__gethex+0x3f0>
 800db0a:	f016 061f 	ands.w	r6, r6, #31
 800db0e:	d0fa      	beq.n	800db06 <__gethex+0x46a>
 800db10:	4453      	add	r3, sl
 800db12:	f1c6 0620 	rsb	r6, r6, #32
 800db16:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800db1a:	f000 f9e9 	bl	800def0 <__hi0bits>
 800db1e:	42b0      	cmp	r0, r6
 800db20:	dbe7      	blt.n	800daf2 <__gethex+0x456>
 800db22:	e7f0      	b.n	800db06 <__gethex+0x46a>
 800db24:	08010440 	.word	0x08010440

0800db28 <L_shift>:
 800db28:	f1c2 0208 	rsb	r2, r2, #8
 800db2c:	0092      	lsls	r2, r2, #2
 800db2e:	b570      	push	{r4, r5, r6, lr}
 800db30:	f1c2 0620 	rsb	r6, r2, #32
 800db34:	6843      	ldr	r3, [r0, #4]
 800db36:	6804      	ldr	r4, [r0, #0]
 800db38:	fa03 f506 	lsl.w	r5, r3, r6
 800db3c:	432c      	orrs	r4, r5
 800db3e:	40d3      	lsrs	r3, r2
 800db40:	6004      	str	r4, [r0, #0]
 800db42:	f840 3f04 	str.w	r3, [r0, #4]!
 800db46:	4288      	cmp	r0, r1
 800db48:	d3f4      	bcc.n	800db34 <L_shift+0xc>
 800db4a:	bd70      	pop	{r4, r5, r6, pc}

0800db4c <__match>:
 800db4c:	b530      	push	{r4, r5, lr}
 800db4e:	6803      	ldr	r3, [r0, #0]
 800db50:	3301      	adds	r3, #1
 800db52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db56:	b914      	cbnz	r4, 800db5e <__match+0x12>
 800db58:	6003      	str	r3, [r0, #0]
 800db5a:	2001      	movs	r0, #1
 800db5c:	bd30      	pop	{r4, r5, pc}
 800db5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800db66:	2d19      	cmp	r5, #25
 800db68:	bf98      	it	ls
 800db6a:	3220      	addls	r2, #32
 800db6c:	42a2      	cmp	r2, r4
 800db6e:	d0f0      	beq.n	800db52 <__match+0x6>
 800db70:	2000      	movs	r0, #0
 800db72:	e7f3      	b.n	800db5c <__match+0x10>

0800db74 <__hexnan>:
 800db74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db78:	680b      	ldr	r3, [r1, #0]
 800db7a:	115e      	asrs	r6, r3, #5
 800db7c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800db80:	f013 031f 	ands.w	r3, r3, #31
 800db84:	b087      	sub	sp, #28
 800db86:	bf18      	it	ne
 800db88:	3604      	addne	r6, #4
 800db8a:	2500      	movs	r5, #0
 800db8c:	1f37      	subs	r7, r6, #4
 800db8e:	4690      	mov	r8, r2
 800db90:	6802      	ldr	r2, [r0, #0]
 800db92:	9301      	str	r3, [sp, #4]
 800db94:	4682      	mov	sl, r0
 800db96:	f846 5c04 	str.w	r5, [r6, #-4]
 800db9a:	46b9      	mov	r9, r7
 800db9c:	463c      	mov	r4, r7
 800db9e:	9502      	str	r5, [sp, #8]
 800dba0:	46ab      	mov	fp, r5
 800dba2:	7851      	ldrb	r1, [r2, #1]
 800dba4:	1c53      	adds	r3, r2, #1
 800dba6:	9303      	str	r3, [sp, #12]
 800dba8:	b341      	cbz	r1, 800dbfc <__hexnan+0x88>
 800dbaa:	4608      	mov	r0, r1
 800dbac:	9205      	str	r2, [sp, #20]
 800dbae:	9104      	str	r1, [sp, #16]
 800dbb0:	f7ff fd5e 	bl	800d670 <__hexdig_fun>
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	d14f      	bne.n	800dc58 <__hexnan+0xe4>
 800dbb8:	9904      	ldr	r1, [sp, #16]
 800dbba:	9a05      	ldr	r2, [sp, #20]
 800dbbc:	2920      	cmp	r1, #32
 800dbbe:	d818      	bhi.n	800dbf2 <__hexnan+0x7e>
 800dbc0:	9b02      	ldr	r3, [sp, #8]
 800dbc2:	459b      	cmp	fp, r3
 800dbc4:	dd13      	ble.n	800dbee <__hexnan+0x7a>
 800dbc6:	454c      	cmp	r4, r9
 800dbc8:	d206      	bcs.n	800dbd8 <__hexnan+0x64>
 800dbca:	2d07      	cmp	r5, #7
 800dbcc:	dc04      	bgt.n	800dbd8 <__hexnan+0x64>
 800dbce:	462a      	mov	r2, r5
 800dbd0:	4649      	mov	r1, r9
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f7ff ffa8 	bl	800db28 <L_shift>
 800dbd8:	4544      	cmp	r4, r8
 800dbda:	d950      	bls.n	800dc7e <__hexnan+0x10a>
 800dbdc:	2300      	movs	r3, #0
 800dbde:	f1a4 0904 	sub.w	r9, r4, #4
 800dbe2:	f844 3c04 	str.w	r3, [r4, #-4]
 800dbe6:	f8cd b008 	str.w	fp, [sp, #8]
 800dbea:	464c      	mov	r4, r9
 800dbec:	461d      	mov	r5, r3
 800dbee:	9a03      	ldr	r2, [sp, #12]
 800dbf0:	e7d7      	b.n	800dba2 <__hexnan+0x2e>
 800dbf2:	2929      	cmp	r1, #41	; 0x29
 800dbf4:	d156      	bne.n	800dca4 <__hexnan+0x130>
 800dbf6:	3202      	adds	r2, #2
 800dbf8:	f8ca 2000 	str.w	r2, [sl]
 800dbfc:	f1bb 0f00 	cmp.w	fp, #0
 800dc00:	d050      	beq.n	800dca4 <__hexnan+0x130>
 800dc02:	454c      	cmp	r4, r9
 800dc04:	d206      	bcs.n	800dc14 <__hexnan+0xa0>
 800dc06:	2d07      	cmp	r5, #7
 800dc08:	dc04      	bgt.n	800dc14 <__hexnan+0xa0>
 800dc0a:	462a      	mov	r2, r5
 800dc0c:	4649      	mov	r1, r9
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f7ff ff8a 	bl	800db28 <L_shift>
 800dc14:	4544      	cmp	r4, r8
 800dc16:	d934      	bls.n	800dc82 <__hexnan+0x10e>
 800dc18:	f1a8 0204 	sub.w	r2, r8, #4
 800dc1c:	4623      	mov	r3, r4
 800dc1e:	f853 1b04 	ldr.w	r1, [r3], #4
 800dc22:	f842 1f04 	str.w	r1, [r2, #4]!
 800dc26:	429f      	cmp	r7, r3
 800dc28:	d2f9      	bcs.n	800dc1e <__hexnan+0xaa>
 800dc2a:	1b3b      	subs	r3, r7, r4
 800dc2c:	f023 0303 	bic.w	r3, r3, #3
 800dc30:	3304      	adds	r3, #4
 800dc32:	3401      	adds	r4, #1
 800dc34:	3e03      	subs	r6, #3
 800dc36:	42b4      	cmp	r4, r6
 800dc38:	bf88      	it	hi
 800dc3a:	2304      	movhi	r3, #4
 800dc3c:	4443      	add	r3, r8
 800dc3e:	2200      	movs	r2, #0
 800dc40:	f843 2b04 	str.w	r2, [r3], #4
 800dc44:	429f      	cmp	r7, r3
 800dc46:	d2fb      	bcs.n	800dc40 <__hexnan+0xcc>
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	b91b      	cbnz	r3, 800dc54 <__hexnan+0xe0>
 800dc4c:	4547      	cmp	r7, r8
 800dc4e:	d127      	bne.n	800dca0 <__hexnan+0x12c>
 800dc50:	2301      	movs	r3, #1
 800dc52:	603b      	str	r3, [r7, #0]
 800dc54:	2005      	movs	r0, #5
 800dc56:	e026      	b.n	800dca6 <__hexnan+0x132>
 800dc58:	3501      	adds	r5, #1
 800dc5a:	2d08      	cmp	r5, #8
 800dc5c:	f10b 0b01 	add.w	fp, fp, #1
 800dc60:	dd06      	ble.n	800dc70 <__hexnan+0xfc>
 800dc62:	4544      	cmp	r4, r8
 800dc64:	d9c3      	bls.n	800dbee <__hexnan+0x7a>
 800dc66:	2300      	movs	r3, #0
 800dc68:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc6c:	2501      	movs	r5, #1
 800dc6e:	3c04      	subs	r4, #4
 800dc70:	6822      	ldr	r2, [r4, #0]
 800dc72:	f000 000f 	and.w	r0, r0, #15
 800dc76:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800dc7a:	6022      	str	r2, [r4, #0]
 800dc7c:	e7b7      	b.n	800dbee <__hexnan+0x7a>
 800dc7e:	2508      	movs	r5, #8
 800dc80:	e7b5      	b.n	800dbee <__hexnan+0x7a>
 800dc82:	9b01      	ldr	r3, [sp, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d0df      	beq.n	800dc48 <__hexnan+0xd4>
 800dc88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc8c:	f1c3 0320 	rsb	r3, r3, #32
 800dc90:	fa22 f303 	lsr.w	r3, r2, r3
 800dc94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dc98:	401a      	ands	r2, r3
 800dc9a:	f846 2c04 	str.w	r2, [r6, #-4]
 800dc9e:	e7d3      	b.n	800dc48 <__hexnan+0xd4>
 800dca0:	3f04      	subs	r7, #4
 800dca2:	e7d1      	b.n	800dc48 <__hexnan+0xd4>
 800dca4:	2004      	movs	r0, #4
 800dca6:	b007      	add	sp, #28
 800dca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dcac <_localeconv_r>:
 800dcac:	4800      	ldr	r0, [pc, #0]	; (800dcb0 <_localeconv_r+0x4>)
 800dcae:	4770      	bx	lr
 800dcb0:	200002dc 	.word	0x200002dc

0800dcb4 <__ascii_mbtowc>:
 800dcb4:	b082      	sub	sp, #8
 800dcb6:	b901      	cbnz	r1, 800dcba <__ascii_mbtowc+0x6>
 800dcb8:	a901      	add	r1, sp, #4
 800dcba:	b142      	cbz	r2, 800dcce <__ascii_mbtowc+0x1a>
 800dcbc:	b14b      	cbz	r3, 800dcd2 <__ascii_mbtowc+0x1e>
 800dcbe:	7813      	ldrb	r3, [r2, #0]
 800dcc0:	600b      	str	r3, [r1, #0]
 800dcc2:	7812      	ldrb	r2, [r2, #0]
 800dcc4:	1e10      	subs	r0, r2, #0
 800dcc6:	bf18      	it	ne
 800dcc8:	2001      	movne	r0, #1
 800dcca:	b002      	add	sp, #8
 800dccc:	4770      	bx	lr
 800dcce:	4610      	mov	r0, r2
 800dcd0:	e7fb      	b.n	800dcca <__ascii_mbtowc+0x16>
 800dcd2:	f06f 0001 	mvn.w	r0, #1
 800dcd6:	e7f8      	b.n	800dcca <__ascii_mbtowc+0x16>

0800dcd8 <memcpy>:
 800dcd8:	440a      	add	r2, r1
 800dcda:	4291      	cmp	r1, r2
 800dcdc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dce0:	d100      	bne.n	800dce4 <memcpy+0xc>
 800dce2:	4770      	bx	lr
 800dce4:	b510      	push	{r4, lr}
 800dce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcee:	4291      	cmp	r1, r2
 800dcf0:	d1f9      	bne.n	800dce6 <memcpy+0xe>
 800dcf2:	bd10      	pop	{r4, pc}

0800dcf4 <__malloc_lock>:
 800dcf4:	4801      	ldr	r0, [pc, #4]	; (800dcfc <__malloc_lock+0x8>)
 800dcf6:	f000 be96 	b.w	800ea26 <__retarget_lock_acquire_recursive>
 800dcfa:	bf00      	nop
 800dcfc:	200026e0 	.word	0x200026e0

0800dd00 <__malloc_unlock>:
 800dd00:	4801      	ldr	r0, [pc, #4]	; (800dd08 <__malloc_unlock+0x8>)
 800dd02:	f000 be91 	b.w	800ea28 <__retarget_lock_release_recursive>
 800dd06:	bf00      	nop
 800dd08:	200026e0 	.word	0x200026e0

0800dd0c <_Balloc>:
 800dd0c:	b570      	push	{r4, r5, r6, lr}
 800dd0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dd10:	4604      	mov	r4, r0
 800dd12:	460d      	mov	r5, r1
 800dd14:	b976      	cbnz	r6, 800dd34 <_Balloc+0x28>
 800dd16:	2010      	movs	r0, #16
 800dd18:	f7fc ff88 	bl	800ac2c <malloc>
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	6260      	str	r0, [r4, #36]	; 0x24
 800dd20:	b920      	cbnz	r0, 800dd2c <_Balloc+0x20>
 800dd22:	4b18      	ldr	r3, [pc, #96]	; (800dd84 <_Balloc+0x78>)
 800dd24:	4818      	ldr	r0, [pc, #96]	; (800dd88 <_Balloc+0x7c>)
 800dd26:	2166      	movs	r1, #102	; 0x66
 800dd28:	f000 fe4c 	bl	800e9c4 <__assert_func>
 800dd2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd30:	6006      	str	r6, [r0, #0]
 800dd32:	60c6      	str	r6, [r0, #12]
 800dd34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dd36:	68f3      	ldr	r3, [r6, #12]
 800dd38:	b183      	cbz	r3, 800dd5c <_Balloc+0x50>
 800dd3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dd42:	b9b8      	cbnz	r0, 800dd74 <_Balloc+0x68>
 800dd44:	2101      	movs	r1, #1
 800dd46:	fa01 f605 	lsl.w	r6, r1, r5
 800dd4a:	1d72      	adds	r2, r6, #5
 800dd4c:	0092      	lsls	r2, r2, #2
 800dd4e:	4620      	mov	r0, r4
 800dd50:	f000 fc9d 	bl	800e68e <_calloc_r>
 800dd54:	b160      	cbz	r0, 800dd70 <_Balloc+0x64>
 800dd56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dd5a:	e00e      	b.n	800dd7a <_Balloc+0x6e>
 800dd5c:	2221      	movs	r2, #33	; 0x21
 800dd5e:	2104      	movs	r1, #4
 800dd60:	4620      	mov	r0, r4
 800dd62:	f000 fc94 	bl	800e68e <_calloc_r>
 800dd66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd68:	60f0      	str	r0, [r6, #12]
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d1e4      	bne.n	800dd3a <_Balloc+0x2e>
 800dd70:	2000      	movs	r0, #0
 800dd72:	bd70      	pop	{r4, r5, r6, pc}
 800dd74:	6802      	ldr	r2, [r0, #0]
 800dd76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dd80:	e7f7      	b.n	800dd72 <_Balloc+0x66>
 800dd82:	bf00      	nop
 800dd84:	080103ce 	.word	0x080103ce
 800dd88:	080104cc 	.word	0x080104cc

0800dd8c <_Bfree>:
 800dd8c:	b570      	push	{r4, r5, r6, lr}
 800dd8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dd90:	4605      	mov	r5, r0
 800dd92:	460c      	mov	r4, r1
 800dd94:	b976      	cbnz	r6, 800ddb4 <_Bfree+0x28>
 800dd96:	2010      	movs	r0, #16
 800dd98:	f7fc ff48 	bl	800ac2c <malloc>
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	6268      	str	r0, [r5, #36]	; 0x24
 800dda0:	b920      	cbnz	r0, 800ddac <_Bfree+0x20>
 800dda2:	4b09      	ldr	r3, [pc, #36]	; (800ddc8 <_Bfree+0x3c>)
 800dda4:	4809      	ldr	r0, [pc, #36]	; (800ddcc <_Bfree+0x40>)
 800dda6:	218a      	movs	r1, #138	; 0x8a
 800dda8:	f000 fe0c 	bl	800e9c4 <__assert_func>
 800ddac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ddb0:	6006      	str	r6, [r0, #0]
 800ddb2:	60c6      	str	r6, [r0, #12]
 800ddb4:	b13c      	cbz	r4, 800ddc6 <_Bfree+0x3a>
 800ddb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ddb8:	6862      	ldr	r2, [r4, #4]
 800ddba:	68db      	ldr	r3, [r3, #12]
 800ddbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ddc0:	6021      	str	r1, [r4, #0]
 800ddc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ddc6:	bd70      	pop	{r4, r5, r6, pc}
 800ddc8:	080103ce 	.word	0x080103ce
 800ddcc:	080104cc 	.word	0x080104cc

0800ddd0 <__multadd>:
 800ddd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddd4:	690d      	ldr	r5, [r1, #16]
 800ddd6:	4607      	mov	r7, r0
 800ddd8:	460c      	mov	r4, r1
 800ddda:	461e      	mov	r6, r3
 800dddc:	f101 0c14 	add.w	ip, r1, #20
 800dde0:	2000      	movs	r0, #0
 800dde2:	f8dc 3000 	ldr.w	r3, [ip]
 800dde6:	b299      	uxth	r1, r3
 800dde8:	fb02 6101 	mla	r1, r2, r1, r6
 800ddec:	0c1e      	lsrs	r6, r3, #16
 800ddee:	0c0b      	lsrs	r3, r1, #16
 800ddf0:	fb02 3306 	mla	r3, r2, r6, r3
 800ddf4:	b289      	uxth	r1, r1
 800ddf6:	3001      	adds	r0, #1
 800ddf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ddfc:	4285      	cmp	r5, r0
 800ddfe:	f84c 1b04 	str.w	r1, [ip], #4
 800de02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800de06:	dcec      	bgt.n	800dde2 <__multadd+0x12>
 800de08:	b30e      	cbz	r6, 800de4e <__multadd+0x7e>
 800de0a:	68a3      	ldr	r3, [r4, #8]
 800de0c:	42ab      	cmp	r3, r5
 800de0e:	dc19      	bgt.n	800de44 <__multadd+0x74>
 800de10:	6861      	ldr	r1, [r4, #4]
 800de12:	4638      	mov	r0, r7
 800de14:	3101      	adds	r1, #1
 800de16:	f7ff ff79 	bl	800dd0c <_Balloc>
 800de1a:	4680      	mov	r8, r0
 800de1c:	b928      	cbnz	r0, 800de2a <__multadd+0x5a>
 800de1e:	4602      	mov	r2, r0
 800de20:	4b0c      	ldr	r3, [pc, #48]	; (800de54 <__multadd+0x84>)
 800de22:	480d      	ldr	r0, [pc, #52]	; (800de58 <__multadd+0x88>)
 800de24:	21b5      	movs	r1, #181	; 0xb5
 800de26:	f000 fdcd 	bl	800e9c4 <__assert_func>
 800de2a:	6922      	ldr	r2, [r4, #16]
 800de2c:	3202      	adds	r2, #2
 800de2e:	f104 010c 	add.w	r1, r4, #12
 800de32:	0092      	lsls	r2, r2, #2
 800de34:	300c      	adds	r0, #12
 800de36:	f7ff ff4f 	bl	800dcd8 <memcpy>
 800de3a:	4621      	mov	r1, r4
 800de3c:	4638      	mov	r0, r7
 800de3e:	f7ff ffa5 	bl	800dd8c <_Bfree>
 800de42:	4644      	mov	r4, r8
 800de44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800de48:	3501      	adds	r5, #1
 800de4a:	615e      	str	r6, [r3, #20]
 800de4c:	6125      	str	r5, [r4, #16]
 800de4e:	4620      	mov	r0, r4
 800de50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de54:	08010440 	.word	0x08010440
 800de58:	080104cc 	.word	0x080104cc

0800de5c <__s2b>:
 800de5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de60:	460c      	mov	r4, r1
 800de62:	4615      	mov	r5, r2
 800de64:	461f      	mov	r7, r3
 800de66:	2209      	movs	r2, #9
 800de68:	3308      	adds	r3, #8
 800de6a:	4606      	mov	r6, r0
 800de6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800de70:	2100      	movs	r1, #0
 800de72:	2201      	movs	r2, #1
 800de74:	429a      	cmp	r2, r3
 800de76:	db09      	blt.n	800de8c <__s2b+0x30>
 800de78:	4630      	mov	r0, r6
 800de7a:	f7ff ff47 	bl	800dd0c <_Balloc>
 800de7e:	b940      	cbnz	r0, 800de92 <__s2b+0x36>
 800de80:	4602      	mov	r2, r0
 800de82:	4b19      	ldr	r3, [pc, #100]	; (800dee8 <__s2b+0x8c>)
 800de84:	4819      	ldr	r0, [pc, #100]	; (800deec <__s2b+0x90>)
 800de86:	21ce      	movs	r1, #206	; 0xce
 800de88:	f000 fd9c 	bl	800e9c4 <__assert_func>
 800de8c:	0052      	lsls	r2, r2, #1
 800de8e:	3101      	adds	r1, #1
 800de90:	e7f0      	b.n	800de74 <__s2b+0x18>
 800de92:	9b08      	ldr	r3, [sp, #32]
 800de94:	6143      	str	r3, [r0, #20]
 800de96:	2d09      	cmp	r5, #9
 800de98:	f04f 0301 	mov.w	r3, #1
 800de9c:	6103      	str	r3, [r0, #16]
 800de9e:	dd16      	ble.n	800dece <__s2b+0x72>
 800dea0:	f104 0909 	add.w	r9, r4, #9
 800dea4:	46c8      	mov	r8, r9
 800dea6:	442c      	add	r4, r5
 800dea8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800deac:	4601      	mov	r1, r0
 800deae:	3b30      	subs	r3, #48	; 0x30
 800deb0:	220a      	movs	r2, #10
 800deb2:	4630      	mov	r0, r6
 800deb4:	f7ff ff8c 	bl	800ddd0 <__multadd>
 800deb8:	45a0      	cmp	r8, r4
 800deba:	d1f5      	bne.n	800dea8 <__s2b+0x4c>
 800debc:	f1a5 0408 	sub.w	r4, r5, #8
 800dec0:	444c      	add	r4, r9
 800dec2:	1b2d      	subs	r5, r5, r4
 800dec4:	1963      	adds	r3, r4, r5
 800dec6:	42bb      	cmp	r3, r7
 800dec8:	db04      	blt.n	800ded4 <__s2b+0x78>
 800deca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dece:	340a      	adds	r4, #10
 800ded0:	2509      	movs	r5, #9
 800ded2:	e7f6      	b.n	800dec2 <__s2b+0x66>
 800ded4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ded8:	4601      	mov	r1, r0
 800deda:	3b30      	subs	r3, #48	; 0x30
 800dedc:	220a      	movs	r2, #10
 800dede:	4630      	mov	r0, r6
 800dee0:	f7ff ff76 	bl	800ddd0 <__multadd>
 800dee4:	e7ee      	b.n	800dec4 <__s2b+0x68>
 800dee6:	bf00      	nop
 800dee8:	08010440 	.word	0x08010440
 800deec:	080104cc 	.word	0x080104cc

0800def0 <__hi0bits>:
 800def0:	0c03      	lsrs	r3, r0, #16
 800def2:	041b      	lsls	r3, r3, #16
 800def4:	b9d3      	cbnz	r3, 800df2c <__hi0bits+0x3c>
 800def6:	0400      	lsls	r0, r0, #16
 800def8:	2310      	movs	r3, #16
 800defa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800defe:	bf04      	itt	eq
 800df00:	0200      	lsleq	r0, r0, #8
 800df02:	3308      	addeq	r3, #8
 800df04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800df08:	bf04      	itt	eq
 800df0a:	0100      	lsleq	r0, r0, #4
 800df0c:	3304      	addeq	r3, #4
 800df0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800df12:	bf04      	itt	eq
 800df14:	0080      	lsleq	r0, r0, #2
 800df16:	3302      	addeq	r3, #2
 800df18:	2800      	cmp	r0, #0
 800df1a:	db05      	blt.n	800df28 <__hi0bits+0x38>
 800df1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800df20:	f103 0301 	add.w	r3, r3, #1
 800df24:	bf08      	it	eq
 800df26:	2320      	moveq	r3, #32
 800df28:	4618      	mov	r0, r3
 800df2a:	4770      	bx	lr
 800df2c:	2300      	movs	r3, #0
 800df2e:	e7e4      	b.n	800defa <__hi0bits+0xa>

0800df30 <__lo0bits>:
 800df30:	6803      	ldr	r3, [r0, #0]
 800df32:	f013 0207 	ands.w	r2, r3, #7
 800df36:	4601      	mov	r1, r0
 800df38:	d00b      	beq.n	800df52 <__lo0bits+0x22>
 800df3a:	07da      	lsls	r2, r3, #31
 800df3c:	d423      	bmi.n	800df86 <__lo0bits+0x56>
 800df3e:	0798      	lsls	r0, r3, #30
 800df40:	bf49      	itett	mi
 800df42:	085b      	lsrmi	r3, r3, #1
 800df44:	089b      	lsrpl	r3, r3, #2
 800df46:	2001      	movmi	r0, #1
 800df48:	600b      	strmi	r3, [r1, #0]
 800df4a:	bf5c      	itt	pl
 800df4c:	600b      	strpl	r3, [r1, #0]
 800df4e:	2002      	movpl	r0, #2
 800df50:	4770      	bx	lr
 800df52:	b298      	uxth	r0, r3
 800df54:	b9a8      	cbnz	r0, 800df82 <__lo0bits+0x52>
 800df56:	0c1b      	lsrs	r3, r3, #16
 800df58:	2010      	movs	r0, #16
 800df5a:	b2da      	uxtb	r2, r3
 800df5c:	b90a      	cbnz	r2, 800df62 <__lo0bits+0x32>
 800df5e:	3008      	adds	r0, #8
 800df60:	0a1b      	lsrs	r3, r3, #8
 800df62:	071a      	lsls	r2, r3, #28
 800df64:	bf04      	itt	eq
 800df66:	091b      	lsreq	r3, r3, #4
 800df68:	3004      	addeq	r0, #4
 800df6a:	079a      	lsls	r2, r3, #30
 800df6c:	bf04      	itt	eq
 800df6e:	089b      	lsreq	r3, r3, #2
 800df70:	3002      	addeq	r0, #2
 800df72:	07da      	lsls	r2, r3, #31
 800df74:	d403      	bmi.n	800df7e <__lo0bits+0x4e>
 800df76:	085b      	lsrs	r3, r3, #1
 800df78:	f100 0001 	add.w	r0, r0, #1
 800df7c:	d005      	beq.n	800df8a <__lo0bits+0x5a>
 800df7e:	600b      	str	r3, [r1, #0]
 800df80:	4770      	bx	lr
 800df82:	4610      	mov	r0, r2
 800df84:	e7e9      	b.n	800df5a <__lo0bits+0x2a>
 800df86:	2000      	movs	r0, #0
 800df88:	4770      	bx	lr
 800df8a:	2020      	movs	r0, #32
 800df8c:	4770      	bx	lr
	...

0800df90 <__i2b>:
 800df90:	b510      	push	{r4, lr}
 800df92:	460c      	mov	r4, r1
 800df94:	2101      	movs	r1, #1
 800df96:	f7ff feb9 	bl	800dd0c <_Balloc>
 800df9a:	4602      	mov	r2, r0
 800df9c:	b928      	cbnz	r0, 800dfaa <__i2b+0x1a>
 800df9e:	4b05      	ldr	r3, [pc, #20]	; (800dfb4 <__i2b+0x24>)
 800dfa0:	4805      	ldr	r0, [pc, #20]	; (800dfb8 <__i2b+0x28>)
 800dfa2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dfa6:	f000 fd0d 	bl	800e9c4 <__assert_func>
 800dfaa:	2301      	movs	r3, #1
 800dfac:	6144      	str	r4, [r0, #20]
 800dfae:	6103      	str	r3, [r0, #16]
 800dfb0:	bd10      	pop	{r4, pc}
 800dfb2:	bf00      	nop
 800dfb4:	08010440 	.word	0x08010440
 800dfb8:	080104cc 	.word	0x080104cc

0800dfbc <__multiply>:
 800dfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc0:	4691      	mov	r9, r2
 800dfc2:	690a      	ldr	r2, [r1, #16]
 800dfc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	bfb8      	it	lt
 800dfcc:	460b      	movlt	r3, r1
 800dfce:	460c      	mov	r4, r1
 800dfd0:	bfbc      	itt	lt
 800dfd2:	464c      	movlt	r4, r9
 800dfd4:	4699      	movlt	r9, r3
 800dfd6:	6927      	ldr	r7, [r4, #16]
 800dfd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dfdc:	68a3      	ldr	r3, [r4, #8]
 800dfde:	6861      	ldr	r1, [r4, #4]
 800dfe0:	eb07 060a 	add.w	r6, r7, sl
 800dfe4:	42b3      	cmp	r3, r6
 800dfe6:	b085      	sub	sp, #20
 800dfe8:	bfb8      	it	lt
 800dfea:	3101      	addlt	r1, #1
 800dfec:	f7ff fe8e 	bl	800dd0c <_Balloc>
 800dff0:	b930      	cbnz	r0, 800e000 <__multiply+0x44>
 800dff2:	4602      	mov	r2, r0
 800dff4:	4b44      	ldr	r3, [pc, #272]	; (800e108 <__multiply+0x14c>)
 800dff6:	4845      	ldr	r0, [pc, #276]	; (800e10c <__multiply+0x150>)
 800dff8:	f240 115d 	movw	r1, #349	; 0x15d
 800dffc:	f000 fce2 	bl	800e9c4 <__assert_func>
 800e000:	f100 0514 	add.w	r5, r0, #20
 800e004:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e008:	462b      	mov	r3, r5
 800e00a:	2200      	movs	r2, #0
 800e00c:	4543      	cmp	r3, r8
 800e00e:	d321      	bcc.n	800e054 <__multiply+0x98>
 800e010:	f104 0314 	add.w	r3, r4, #20
 800e014:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e018:	f109 0314 	add.w	r3, r9, #20
 800e01c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e020:	9202      	str	r2, [sp, #8]
 800e022:	1b3a      	subs	r2, r7, r4
 800e024:	3a15      	subs	r2, #21
 800e026:	f022 0203 	bic.w	r2, r2, #3
 800e02a:	3204      	adds	r2, #4
 800e02c:	f104 0115 	add.w	r1, r4, #21
 800e030:	428f      	cmp	r7, r1
 800e032:	bf38      	it	cc
 800e034:	2204      	movcc	r2, #4
 800e036:	9201      	str	r2, [sp, #4]
 800e038:	9a02      	ldr	r2, [sp, #8]
 800e03a:	9303      	str	r3, [sp, #12]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d80c      	bhi.n	800e05a <__multiply+0x9e>
 800e040:	2e00      	cmp	r6, #0
 800e042:	dd03      	ble.n	800e04c <__multiply+0x90>
 800e044:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d05a      	beq.n	800e102 <__multiply+0x146>
 800e04c:	6106      	str	r6, [r0, #16]
 800e04e:	b005      	add	sp, #20
 800e050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e054:	f843 2b04 	str.w	r2, [r3], #4
 800e058:	e7d8      	b.n	800e00c <__multiply+0x50>
 800e05a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e05e:	f1ba 0f00 	cmp.w	sl, #0
 800e062:	d024      	beq.n	800e0ae <__multiply+0xf2>
 800e064:	f104 0e14 	add.w	lr, r4, #20
 800e068:	46a9      	mov	r9, r5
 800e06a:	f04f 0c00 	mov.w	ip, #0
 800e06e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e072:	f8d9 1000 	ldr.w	r1, [r9]
 800e076:	fa1f fb82 	uxth.w	fp, r2
 800e07a:	b289      	uxth	r1, r1
 800e07c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e080:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e084:	f8d9 2000 	ldr.w	r2, [r9]
 800e088:	4461      	add	r1, ip
 800e08a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e08e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e092:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e096:	b289      	uxth	r1, r1
 800e098:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e09c:	4577      	cmp	r7, lr
 800e09e:	f849 1b04 	str.w	r1, [r9], #4
 800e0a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e0a6:	d8e2      	bhi.n	800e06e <__multiply+0xb2>
 800e0a8:	9a01      	ldr	r2, [sp, #4]
 800e0aa:	f845 c002 	str.w	ip, [r5, r2]
 800e0ae:	9a03      	ldr	r2, [sp, #12]
 800e0b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e0b4:	3304      	adds	r3, #4
 800e0b6:	f1b9 0f00 	cmp.w	r9, #0
 800e0ba:	d020      	beq.n	800e0fe <__multiply+0x142>
 800e0bc:	6829      	ldr	r1, [r5, #0]
 800e0be:	f104 0c14 	add.w	ip, r4, #20
 800e0c2:	46ae      	mov	lr, r5
 800e0c4:	f04f 0a00 	mov.w	sl, #0
 800e0c8:	f8bc b000 	ldrh.w	fp, [ip]
 800e0cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e0d0:	fb09 220b 	mla	r2, r9, fp, r2
 800e0d4:	4492      	add	sl, r2
 800e0d6:	b289      	uxth	r1, r1
 800e0d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e0dc:	f84e 1b04 	str.w	r1, [lr], #4
 800e0e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e0e4:	f8be 1000 	ldrh.w	r1, [lr]
 800e0e8:	0c12      	lsrs	r2, r2, #16
 800e0ea:	fb09 1102 	mla	r1, r9, r2, r1
 800e0ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e0f2:	4567      	cmp	r7, ip
 800e0f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e0f8:	d8e6      	bhi.n	800e0c8 <__multiply+0x10c>
 800e0fa:	9a01      	ldr	r2, [sp, #4]
 800e0fc:	50a9      	str	r1, [r5, r2]
 800e0fe:	3504      	adds	r5, #4
 800e100:	e79a      	b.n	800e038 <__multiply+0x7c>
 800e102:	3e01      	subs	r6, #1
 800e104:	e79c      	b.n	800e040 <__multiply+0x84>
 800e106:	bf00      	nop
 800e108:	08010440 	.word	0x08010440
 800e10c:	080104cc 	.word	0x080104cc

0800e110 <__pow5mult>:
 800e110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e114:	4615      	mov	r5, r2
 800e116:	f012 0203 	ands.w	r2, r2, #3
 800e11a:	4606      	mov	r6, r0
 800e11c:	460f      	mov	r7, r1
 800e11e:	d007      	beq.n	800e130 <__pow5mult+0x20>
 800e120:	4c25      	ldr	r4, [pc, #148]	; (800e1b8 <__pow5mult+0xa8>)
 800e122:	3a01      	subs	r2, #1
 800e124:	2300      	movs	r3, #0
 800e126:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e12a:	f7ff fe51 	bl	800ddd0 <__multadd>
 800e12e:	4607      	mov	r7, r0
 800e130:	10ad      	asrs	r5, r5, #2
 800e132:	d03d      	beq.n	800e1b0 <__pow5mult+0xa0>
 800e134:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e136:	b97c      	cbnz	r4, 800e158 <__pow5mult+0x48>
 800e138:	2010      	movs	r0, #16
 800e13a:	f7fc fd77 	bl	800ac2c <malloc>
 800e13e:	4602      	mov	r2, r0
 800e140:	6270      	str	r0, [r6, #36]	; 0x24
 800e142:	b928      	cbnz	r0, 800e150 <__pow5mult+0x40>
 800e144:	4b1d      	ldr	r3, [pc, #116]	; (800e1bc <__pow5mult+0xac>)
 800e146:	481e      	ldr	r0, [pc, #120]	; (800e1c0 <__pow5mult+0xb0>)
 800e148:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e14c:	f000 fc3a 	bl	800e9c4 <__assert_func>
 800e150:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e154:	6004      	str	r4, [r0, #0]
 800e156:	60c4      	str	r4, [r0, #12]
 800e158:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e15c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e160:	b94c      	cbnz	r4, 800e176 <__pow5mult+0x66>
 800e162:	f240 2171 	movw	r1, #625	; 0x271
 800e166:	4630      	mov	r0, r6
 800e168:	f7ff ff12 	bl	800df90 <__i2b>
 800e16c:	2300      	movs	r3, #0
 800e16e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e172:	4604      	mov	r4, r0
 800e174:	6003      	str	r3, [r0, #0]
 800e176:	f04f 0900 	mov.w	r9, #0
 800e17a:	07eb      	lsls	r3, r5, #31
 800e17c:	d50a      	bpl.n	800e194 <__pow5mult+0x84>
 800e17e:	4639      	mov	r1, r7
 800e180:	4622      	mov	r2, r4
 800e182:	4630      	mov	r0, r6
 800e184:	f7ff ff1a 	bl	800dfbc <__multiply>
 800e188:	4639      	mov	r1, r7
 800e18a:	4680      	mov	r8, r0
 800e18c:	4630      	mov	r0, r6
 800e18e:	f7ff fdfd 	bl	800dd8c <_Bfree>
 800e192:	4647      	mov	r7, r8
 800e194:	106d      	asrs	r5, r5, #1
 800e196:	d00b      	beq.n	800e1b0 <__pow5mult+0xa0>
 800e198:	6820      	ldr	r0, [r4, #0]
 800e19a:	b938      	cbnz	r0, 800e1ac <__pow5mult+0x9c>
 800e19c:	4622      	mov	r2, r4
 800e19e:	4621      	mov	r1, r4
 800e1a0:	4630      	mov	r0, r6
 800e1a2:	f7ff ff0b 	bl	800dfbc <__multiply>
 800e1a6:	6020      	str	r0, [r4, #0]
 800e1a8:	f8c0 9000 	str.w	r9, [r0]
 800e1ac:	4604      	mov	r4, r0
 800e1ae:	e7e4      	b.n	800e17a <__pow5mult+0x6a>
 800e1b0:	4638      	mov	r0, r7
 800e1b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1b6:	bf00      	nop
 800e1b8:	08010618 	.word	0x08010618
 800e1bc:	080103ce 	.word	0x080103ce
 800e1c0:	080104cc 	.word	0x080104cc

0800e1c4 <__lshift>:
 800e1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1c8:	460c      	mov	r4, r1
 800e1ca:	6849      	ldr	r1, [r1, #4]
 800e1cc:	6923      	ldr	r3, [r4, #16]
 800e1ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e1d2:	68a3      	ldr	r3, [r4, #8]
 800e1d4:	4607      	mov	r7, r0
 800e1d6:	4691      	mov	r9, r2
 800e1d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e1dc:	f108 0601 	add.w	r6, r8, #1
 800e1e0:	42b3      	cmp	r3, r6
 800e1e2:	db0b      	blt.n	800e1fc <__lshift+0x38>
 800e1e4:	4638      	mov	r0, r7
 800e1e6:	f7ff fd91 	bl	800dd0c <_Balloc>
 800e1ea:	4605      	mov	r5, r0
 800e1ec:	b948      	cbnz	r0, 800e202 <__lshift+0x3e>
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	4b2a      	ldr	r3, [pc, #168]	; (800e29c <__lshift+0xd8>)
 800e1f2:	482b      	ldr	r0, [pc, #172]	; (800e2a0 <__lshift+0xdc>)
 800e1f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e1f8:	f000 fbe4 	bl	800e9c4 <__assert_func>
 800e1fc:	3101      	adds	r1, #1
 800e1fe:	005b      	lsls	r3, r3, #1
 800e200:	e7ee      	b.n	800e1e0 <__lshift+0x1c>
 800e202:	2300      	movs	r3, #0
 800e204:	f100 0114 	add.w	r1, r0, #20
 800e208:	f100 0210 	add.w	r2, r0, #16
 800e20c:	4618      	mov	r0, r3
 800e20e:	4553      	cmp	r3, sl
 800e210:	db37      	blt.n	800e282 <__lshift+0xbe>
 800e212:	6920      	ldr	r0, [r4, #16]
 800e214:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e218:	f104 0314 	add.w	r3, r4, #20
 800e21c:	f019 091f 	ands.w	r9, r9, #31
 800e220:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e224:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e228:	d02f      	beq.n	800e28a <__lshift+0xc6>
 800e22a:	f1c9 0e20 	rsb	lr, r9, #32
 800e22e:	468a      	mov	sl, r1
 800e230:	f04f 0c00 	mov.w	ip, #0
 800e234:	681a      	ldr	r2, [r3, #0]
 800e236:	fa02 f209 	lsl.w	r2, r2, r9
 800e23a:	ea42 020c 	orr.w	r2, r2, ip
 800e23e:	f84a 2b04 	str.w	r2, [sl], #4
 800e242:	f853 2b04 	ldr.w	r2, [r3], #4
 800e246:	4298      	cmp	r0, r3
 800e248:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e24c:	d8f2      	bhi.n	800e234 <__lshift+0x70>
 800e24e:	1b03      	subs	r3, r0, r4
 800e250:	3b15      	subs	r3, #21
 800e252:	f023 0303 	bic.w	r3, r3, #3
 800e256:	3304      	adds	r3, #4
 800e258:	f104 0215 	add.w	r2, r4, #21
 800e25c:	4290      	cmp	r0, r2
 800e25e:	bf38      	it	cc
 800e260:	2304      	movcc	r3, #4
 800e262:	f841 c003 	str.w	ip, [r1, r3]
 800e266:	f1bc 0f00 	cmp.w	ip, #0
 800e26a:	d001      	beq.n	800e270 <__lshift+0xac>
 800e26c:	f108 0602 	add.w	r6, r8, #2
 800e270:	3e01      	subs	r6, #1
 800e272:	4638      	mov	r0, r7
 800e274:	612e      	str	r6, [r5, #16]
 800e276:	4621      	mov	r1, r4
 800e278:	f7ff fd88 	bl	800dd8c <_Bfree>
 800e27c:	4628      	mov	r0, r5
 800e27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e282:	f842 0f04 	str.w	r0, [r2, #4]!
 800e286:	3301      	adds	r3, #1
 800e288:	e7c1      	b.n	800e20e <__lshift+0x4a>
 800e28a:	3904      	subs	r1, #4
 800e28c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e290:	f841 2f04 	str.w	r2, [r1, #4]!
 800e294:	4298      	cmp	r0, r3
 800e296:	d8f9      	bhi.n	800e28c <__lshift+0xc8>
 800e298:	e7ea      	b.n	800e270 <__lshift+0xac>
 800e29a:	bf00      	nop
 800e29c:	08010440 	.word	0x08010440
 800e2a0:	080104cc 	.word	0x080104cc

0800e2a4 <__mcmp>:
 800e2a4:	b530      	push	{r4, r5, lr}
 800e2a6:	6902      	ldr	r2, [r0, #16]
 800e2a8:	690c      	ldr	r4, [r1, #16]
 800e2aa:	1b12      	subs	r2, r2, r4
 800e2ac:	d10e      	bne.n	800e2cc <__mcmp+0x28>
 800e2ae:	f100 0314 	add.w	r3, r0, #20
 800e2b2:	3114      	adds	r1, #20
 800e2b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e2b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e2bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e2c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e2c4:	42a5      	cmp	r5, r4
 800e2c6:	d003      	beq.n	800e2d0 <__mcmp+0x2c>
 800e2c8:	d305      	bcc.n	800e2d6 <__mcmp+0x32>
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	4610      	mov	r0, r2
 800e2ce:	bd30      	pop	{r4, r5, pc}
 800e2d0:	4283      	cmp	r3, r0
 800e2d2:	d3f3      	bcc.n	800e2bc <__mcmp+0x18>
 800e2d4:	e7fa      	b.n	800e2cc <__mcmp+0x28>
 800e2d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e2da:	e7f7      	b.n	800e2cc <__mcmp+0x28>

0800e2dc <__mdiff>:
 800e2dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e0:	460c      	mov	r4, r1
 800e2e2:	4606      	mov	r6, r0
 800e2e4:	4611      	mov	r1, r2
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	4690      	mov	r8, r2
 800e2ea:	f7ff ffdb 	bl	800e2a4 <__mcmp>
 800e2ee:	1e05      	subs	r5, r0, #0
 800e2f0:	d110      	bne.n	800e314 <__mdiff+0x38>
 800e2f2:	4629      	mov	r1, r5
 800e2f4:	4630      	mov	r0, r6
 800e2f6:	f7ff fd09 	bl	800dd0c <_Balloc>
 800e2fa:	b930      	cbnz	r0, 800e30a <__mdiff+0x2e>
 800e2fc:	4b3a      	ldr	r3, [pc, #232]	; (800e3e8 <__mdiff+0x10c>)
 800e2fe:	4602      	mov	r2, r0
 800e300:	f240 2132 	movw	r1, #562	; 0x232
 800e304:	4839      	ldr	r0, [pc, #228]	; (800e3ec <__mdiff+0x110>)
 800e306:	f000 fb5d 	bl	800e9c4 <__assert_func>
 800e30a:	2301      	movs	r3, #1
 800e30c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e310:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e314:	bfa4      	itt	ge
 800e316:	4643      	movge	r3, r8
 800e318:	46a0      	movge	r8, r4
 800e31a:	4630      	mov	r0, r6
 800e31c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e320:	bfa6      	itte	ge
 800e322:	461c      	movge	r4, r3
 800e324:	2500      	movge	r5, #0
 800e326:	2501      	movlt	r5, #1
 800e328:	f7ff fcf0 	bl	800dd0c <_Balloc>
 800e32c:	b920      	cbnz	r0, 800e338 <__mdiff+0x5c>
 800e32e:	4b2e      	ldr	r3, [pc, #184]	; (800e3e8 <__mdiff+0x10c>)
 800e330:	4602      	mov	r2, r0
 800e332:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e336:	e7e5      	b.n	800e304 <__mdiff+0x28>
 800e338:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e33c:	6926      	ldr	r6, [r4, #16]
 800e33e:	60c5      	str	r5, [r0, #12]
 800e340:	f104 0914 	add.w	r9, r4, #20
 800e344:	f108 0514 	add.w	r5, r8, #20
 800e348:	f100 0e14 	add.w	lr, r0, #20
 800e34c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e350:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e354:	f108 0210 	add.w	r2, r8, #16
 800e358:	46f2      	mov	sl, lr
 800e35a:	2100      	movs	r1, #0
 800e35c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e360:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e364:	fa1f f883 	uxth.w	r8, r3
 800e368:	fa11 f18b 	uxtah	r1, r1, fp
 800e36c:	0c1b      	lsrs	r3, r3, #16
 800e36e:	eba1 0808 	sub.w	r8, r1, r8
 800e372:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e376:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e37a:	fa1f f888 	uxth.w	r8, r8
 800e37e:	1419      	asrs	r1, r3, #16
 800e380:	454e      	cmp	r6, r9
 800e382:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e386:	f84a 3b04 	str.w	r3, [sl], #4
 800e38a:	d8e7      	bhi.n	800e35c <__mdiff+0x80>
 800e38c:	1b33      	subs	r3, r6, r4
 800e38e:	3b15      	subs	r3, #21
 800e390:	f023 0303 	bic.w	r3, r3, #3
 800e394:	3304      	adds	r3, #4
 800e396:	3415      	adds	r4, #21
 800e398:	42a6      	cmp	r6, r4
 800e39a:	bf38      	it	cc
 800e39c:	2304      	movcc	r3, #4
 800e39e:	441d      	add	r5, r3
 800e3a0:	4473      	add	r3, lr
 800e3a2:	469e      	mov	lr, r3
 800e3a4:	462e      	mov	r6, r5
 800e3a6:	4566      	cmp	r6, ip
 800e3a8:	d30e      	bcc.n	800e3c8 <__mdiff+0xec>
 800e3aa:	f10c 0203 	add.w	r2, ip, #3
 800e3ae:	1b52      	subs	r2, r2, r5
 800e3b0:	f022 0203 	bic.w	r2, r2, #3
 800e3b4:	3d03      	subs	r5, #3
 800e3b6:	45ac      	cmp	ip, r5
 800e3b8:	bf38      	it	cc
 800e3ba:	2200      	movcc	r2, #0
 800e3bc:	441a      	add	r2, r3
 800e3be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e3c2:	b17b      	cbz	r3, 800e3e4 <__mdiff+0x108>
 800e3c4:	6107      	str	r7, [r0, #16]
 800e3c6:	e7a3      	b.n	800e310 <__mdiff+0x34>
 800e3c8:	f856 8b04 	ldr.w	r8, [r6], #4
 800e3cc:	fa11 f288 	uxtah	r2, r1, r8
 800e3d0:	1414      	asrs	r4, r2, #16
 800e3d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e3d6:	b292      	uxth	r2, r2
 800e3d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e3dc:	f84e 2b04 	str.w	r2, [lr], #4
 800e3e0:	1421      	asrs	r1, r4, #16
 800e3e2:	e7e0      	b.n	800e3a6 <__mdiff+0xca>
 800e3e4:	3f01      	subs	r7, #1
 800e3e6:	e7ea      	b.n	800e3be <__mdiff+0xe2>
 800e3e8:	08010440 	.word	0x08010440
 800e3ec:	080104cc 	.word	0x080104cc

0800e3f0 <__ulp>:
 800e3f0:	b082      	sub	sp, #8
 800e3f2:	ed8d 0b00 	vstr	d0, [sp]
 800e3f6:	9b01      	ldr	r3, [sp, #4]
 800e3f8:	4912      	ldr	r1, [pc, #72]	; (800e444 <__ulp+0x54>)
 800e3fa:	4019      	ands	r1, r3
 800e3fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e400:	2900      	cmp	r1, #0
 800e402:	dd05      	ble.n	800e410 <__ulp+0x20>
 800e404:	2200      	movs	r2, #0
 800e406:	460b      	mov	r3, r1
 800e408:	ec43 2b10 	vmov	d0, r2, r3
 800e40c:	b002      	add	sp, #8
 800e40e:	4770      	bx	lr
 800e410:	4249      	negs	r1, r1
 800e412:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e416:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e41a:	f04f 0200 	mov.w	r2, #0
 800e41e:	f04f 0300 	mov.w	r3, #0
 800e422:	da04      	bge.n	800e42e <__ulp+0x3e>
 800e424:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e428:	fa41 f300 	asr.w	r3, r1, r0
 800e42c:	e7ec      	b.n	800e408 <__ulp+0x18>
 800e42e:	f1a0 0114 	sub.w	r1, r0, #20
 800e432:	291e      	cmp	r1, #30
 800e434:	bfda      	itte	le
 800e436:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e43a:	fa20 f101 	lsrle.w	r1, r0, r1
 800e43e:	2101      	movgt	r1, #1
 800e440:	460a      	mov	r2, r1
 800e442:	e7e1      	b.n	800e408 <__ulp+0x18>
 800e444:	7ff00000 	.word	0x7ff00000

0800e448 <__b2d>:
 800e448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e44a:	6905      	ldr	r5, [r0, #16]
 800e44c:	f100 0714 	add.w	r7, r0, #20
 800e450:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e454:	1f2e      	subs	r6, r5, #4
 800e456:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e45a:	4620      	mov	r0, r4
 800e45c:	f7ff fd48 	bl	800def0 <__hi0bits>
 800e460:	f1c0 0320 	rsb	r3, r0, #32
 800e464:	280a      	cmp	r0, #10
 800e466:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e4e4 <__b2d+0x9c>
 800e46a:	600b      	str	r3, [r1, #0]
 800e46c:	dc14      	bgt.n	800e498 <__b2d+0x50>
 800e46e:	f1c0 0e0b 	rsb	lr, r0, #11
 800e472:	fa24 f10e 	lsr.w	r1, r4, lr
 800e476:	42b7      	cmp	r7, r6
 800e478:	ea41 030c 	orr.w	r3, r1, ip
 800e47c:	bf34      	ite	cc
 800e47e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e482:	2100      	movcs	r1, #0
 800e484:	3015      	adds	r0, #21
 800e486:	fa04 f000 	lsl.w	r0, r4, r0
 800e48a:	fa21 f10e 	lsr.w	r1, r1, lr
 800e48e:	ea40 0201 	orr.w	r2, r0, r1
 800e492:	ec43 2b10 	vmov	d0, r2, r3
 800e496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e498:	42b7      	cmp	r7, r6
 800e49a:	bf3a      	itte	cc
 800e49c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e4a0:	f1a5 0608 	subcc.w	r6, r5, #8
 800e4a4:	2100      	movcs	r1, #0
 800e4a6:	380b      	subs	r0, #11
 800e4a8:	d017      	beq.n	800e4da <__b2d+0x92>
 800e4aa:	f1c0 0c20 	rsb	ip, r0, #32
 800e4ae:	fa04 f500 	lsl.w	r5, r4, r0
 800e4b2:	42be      	cmp	r6, r7
 800e4b4:	fa21 f40c 	lsr.w	r4, r1, ip
 800e4b8:	ea45 0504 	orr.w	r5, r5, r4
 800e4bc:	bf8c      	ite	hi
 800e4be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e4c2:	2400      	movls	r4, #0
 800e4c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e4c8:	fa01 f000 	lsl.w	r0, r1, r0
 800e4cc:	fa24 f40c 	lsr.w	r4, r4, ip
 800e4d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e4d4:	ea40 0204 	orr.w	r2, r0, r4
 800e4d8:	e7db      	b.n	800e492 <__b2d+0x4a>
 800e4da:	ea44 030c 	orr.w	r3, r4, ip
 800e4de:	460a      	mov	r2, r1
 800e4e0:	e7d7      	b.n	800e492 <__b2d+0x4a>
 800e4e2:	bf00      	nop
 800e4e4:	3ff00000 	.word	0x3ff00000

0800e4e8 <__d2b>:
 800e4e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e4ec:	4689      	mov	r9, r1
 800e4ee:	2101      	movs	r1, #1
 800e4f0:	ec57 6b10 	vmov	r6, r7, d0
 800e4f4:	4690      	mov	r8, r2
 800e4f6:	f7ff fc09 	bl	800dd0c <_Balloc>
 800e4fa:	4604      	mov	r4, r0
 800e4fc:	b930      	cbnz	r0, 800e50c <__d2b+0x24>
 800e4fe:	4602      	mov	r2, r0
 800e500:	4b25      	ldr	r3, [pc, #148]	; (800e598 <__d2b+0xb0>)
 800e502:	4826      	ldr	r0, [pc, #152]	; (800e59c <__d2b+0xb4>)
 800e504:	f240 310a 	movw	r1, #778	; 0x30a
 800e508:	f000 fa5c 	bl	800e9c4 <__assert_func>
 800e50c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e510:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e514:	bb35      	cbnz	r5, 800e564 <__d2b+0x7c>
 800e516:	2e00      	cmp	r6, #0
 800e518:	9301      	str	r3, [sp, #4]
 800e51a:	d028      	beq.n	800e56e <__d2b+0x86>
 800e51c:	4668      	mov	r0, sp
 800e51e:	9600      	str	r6, [sp, #0]
 800e520:	f7ff fd06 	bl	800df30 <__lo0bits>
 800e524:	9900      	ldr	r1, [sp, #0]
 800e526:	b300      	cbz	r0, 800e56a <__d2b+0x82>
 800e528:	9a01      	ldr	r2, [sp, #4]
 800e52a:	f1c0 0320 	rsb	r3, r0, #32
 800e52e:	fa02 f303 	lsl.w	r3, r2, r3
 800e532:	430b      	orrs	r3, r1
 800e534:	40c2      	lsrs	r2, r0
 800e536:	6163      	str	r3, [r4, #20]
 800e538:	9201      	str	r2, [sp, #4]
 800e53a:	9b01      	ldr	r3, [sp, #4]
 800e53c:	61a3      	str	r3, [r4, #24]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	bf14      	ite	ne
 800e542:	2202      	movne	r2, #2
 800e544:	2201      	moveq	r2, #1
 800e546:	6122      	str	r2, [r4, #16]
 800e548:	b1d5      	cbz	r5, 800e580 <__d2b+0x98>
 800e54a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e54e:	4405      	add	r5, r0
 800e550:	f8c9 5000 	str.w	r5, [r9]
 800e554:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e558:	f8c8 0000 	str.w	r0, [r8]
 800e55c:	4620      	mov	r0, r4
 800e55e:	b003      	add	sp, #12
 800e560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e568:	e7d5      	b.n	800e516 <__d2b+0x2e>
 800e56a:	6161      	str	r1, [r4, #20]
 800e56c:	e7e5      	b.n	800e53a <__d2b+0x52>
 800e56e:	a801      	add	r0, sp, #4
 800e570:	f7ff fcde 	bl	800df30 <__lo0bits>
 800e574:	9b01      	ldr	r3, [sp, #4]
 800e576:	6163      	str	r3, [r4, #20]
 800e578:	2201      	movs	r2, #1
 800e57a:	6122      	str	r2, [r4, #16]
 800e57c:	3020      	adds	r0, #32
 800e57e:	e7e3      	b.n	800e548 <__d2b+0x60>
 800e580:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e584:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e588:	f8c9 0000 	str.w	r0, [r9]
 800e58c:	6918      	ldr	r0, [r3, #16]
 800e58e:	f7ff fcaf 	bl	800def0 <__hi0bits>
 800e592:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e596:	e7df      	b.n	800e558 <__d2b+0x70>
 800e598:	08010440 	.word	0x08010440
 800e59c:	080104cc 	.word	0x080104cc

0800e5a0 <__ratio>:
 800e5a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a4:	4688      	mov	r8, r1
 800e5a6:	4669      	mov	r1, sp
 800e5a8:	4681      	mov	r9, r0
 800e5aa:	f7ff ff4d 	bl	800e448 <__b2d>
 800e5ae:	a901      	add	r1, sp, #4
 800e5b0:	4640      	mov	r0, r8
 800e5b2:	ec55 4b10 	vmov	r4, r5, d0
 800e5b6:	f7ff ff47 	bl	800e448 <__b2d>
 800e5ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e5be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e5c2:	eba3 0c02 	sub.w	ip, r3, r2
 800e5c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e5ca:	1a9b      	subs	r3, r3, r2
 800e5cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e5d0:	ec51 0b10 	vmov	r0, r1, d0
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	bfd6      	itet	le
 800e5d8:	460a      	movle	r2, r1
 800e5da:	462a      	movgt	r2, r5
 800e5dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e5e0:	468b      	mov	fp, r1
 800e5e2:	462f      	mov	r7, r5
 800e5e4:	bfd4      	ite	le
 800e5e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e5ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	ee10 2a10 	vmov	r2, s0
 800e5f4:	465b      	mov	r3, fp
 800e5f6:	4639      	mov	r1, r7
 800e5f8:	f7f2 f950 	bl	800089c <__aeabi_ddiv>
 800e5fc:	ec41 0b10 	vmov	d0, r0, r1
 800e600:	b003      	add	sp, #12
 800e602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e606 <__copybits>:
 800e606:	3901      	subs	r1, #1
 800e608:	b570      	push	{r4, r5, r6, lr}
 800e60a:	1149      	asrs	r1, r1, #5
 800e60c:	6914      	ldr	r4, [r2, #16]
 800e60e:	3101      	adds	r1, #1
 800e610:	f102 0314 	add.w	r3, r2, #20
 800e614:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e618:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e61c:	1f05      	subs	r5, r0, #4
 800e61e:	42a3      	cmp	r3, r4
 800e620:	d30c      	bcc.n	800e63c <__copybits+0x36>
 800e622:	1aa3      	subs	r3, r4, r2
 800e624:	3b11      	subs	r3, #17
 800e626:	f023 0303 	bic.w	r3, r3, #3
 800e62a:	3211      	adds	r2, #17
 800e62c:	42a2      	cmp	r2, r4
 800e62e:	bf88      	it	hi
 800e630:	2300      	movhi	r3, #0
 800e632:	4418      	add	r0, r3
 800e634:	2300      	movs	r3, #0
 800e636:	4288      	cmp	r0, r1
 800e638:	d305      	bcc.n	800e646 <__copybits+0x40>
 800e63a:	bd70      	pop	{r4, r5, r6, pc}
 800e63c:	f853 6b04 	ldr.w	r6, [r3], #4
 800e640:	f845 6f04 	str.w	r6, [r5, #4]!
 800e644:	e7eb      	b.n	800e61e <__copybits+0x18>
 800e646:	f840 3b04 	str.w	r3, [r0], #4
 800e64a:	e7f4      	b.n	800e636 <__copybits+0x30>

0800e64c <__any_on>:
 800e64c:	f100 0214 	add.w	r2, r0, #20
 800e650:	6900      	ldr	r0, [r0, #16]
 800e652:	114b      	asrs	r3, r1, #5
 800e654:	4298      	cmp	r0, r3
 800e656:	b510      	push	{r4, lr}
 800e658:	db11      	blt.n	800e67e <__any_on+0x32>
 800e65a:	dd0a      	ble.n	800e672 <__any_on+0x26>
 800e65c:	f011 011f 	ands.w	r1, r1, #31
 800e660:	d007      	beq.n	800e672 <__any_on+0x26>
 800e662:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e666:	fa24 f001 	lsr.w	r0, r4, r1
 800e66a:	fa00 f101 	lsl.w	r1, r0, r1
 800e66e:	428c      	cmp	r4, r1
 800e670:	d10b      	bne.n	800e68a <__any_on+0x3e>
 800e672:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e676:	4293      	cmp	r3, r2
 800e678:	d803      	bhi.n	800e682 <__any_on+0x36>
 800e67a:	2000      	movs	r0, #0
 800e67c:	bd10      	pop	{r4, pc}
 800e67e:	4603      	mov	r3, r0
 800e680:	e7f7      	b.n	800e672 <__any_on+0x26>
 800e682:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e686:	2900      	cmp	r1, #0
 800e688:	d0f5      	beq.n	800e676 <__any_on+0x2a>
 800e68a:	2001      	movs	r0, #1
 800e68c:	e7f6      	b.n	800e67c <__any_on+0x30>

0800e68e <_calloc_r>:
 800e68e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e690:	fba1 2402 	umull	r2, r4, r1, r2
 800e694:	b94c      	cbnz	r4, 800e6aa <_calloc_r+0x1c>
 800e696:	4611      	mov	r1, r2
 800e698:	9201      	str	r2, [sp, #4]
 800e69a:	f7fc fb4b 	bl	800ad34 <_malloc_r>
 800e69e:	9a01      	ldr	r2, [sp, #4]
 800e6a0:	4605      	mov	r5, r0
 800e6a2:	b930      	cbnz	r0, 800e6b2 <_calloc_r+0x24>
 800e6a4:	4628      	mov	r0, r5
 800e6a6:	b003      	add	sp, #12
 800e6a8:	bd30      	pop	{r4, r5, pc}
 800e6aa:	220c      	movs	r2, #12
 800e6ac:	6002      	str	r2, [r0, #0]
 800e6ae:	2500      	movs	r5, #0
 800e6b0:	e7f8      	b.n	800e6a4 <_calloc_r+0x16>
 800e6b2:	4621      	mov	r1, r4
 800e6b4:	f7fc faca 	bl	800ac4c <memset>
 800e6b8:	e7f4      	b.n	800e6a4 <_calloc_r+0x16>

0800e6ba <__ssputs_r>:
 800e6ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6be:	688e      	ldr	r6, [r1, #8]
 800e6c0:	429e      	cmp	r6, r3
 800e6c2:	4682      	mov	sl, r0
 800e6c4:	460c      	mov	r4, r1
 800e6c6:	4690      	mov	r8, r2
 800e6c8:	461f      	mov	r7, r3
 800e6ca:	d838      	bhi.n	800e73e <__ssputs_r+0x84>
 800e6cc:	898a      	ldrh	r2, [r1, #12]
 800e6ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e6d2:	d032      	beq.n	800e73a <__ssputs_r+0x80>
 800e6d4:	6825      	ldr	r5, [r4, #0]
 800e6d6:	6909      	ldr	r1, [r1, #16]
 800e6d8:	eba5 0901 	sub.w	r9, r5, r1
 800e6dc:	6965      	ldr	r5, [r4, #20]
 800e6de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e6e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	444b      	add	r3, r9
 800e6ea:	106d      	asrs	r5, r5, #1
 800e6ec:	429d      	cmp	r5, r3
 800e6ee:	bf38      	it	cc
 800e6f0:	461d      	movcc	r5, r3
 800e6f2:	0553      	lsls	r3, r2, #21
 800e6f4:	d531      	bpl.n	800e75a <__ssputs_r+0xa0>
 800e6f6:	4629      	mov	r1, r5
 800e6f8:	f7fc fb1c 	bl	800ad34 <_malloc_r>
 800e6fc:	4606      	mov	r6, r0
 800e6fe:	b950      	cbnz	r0, 800e716 <__ssputs_r+0x5c>
 800e700:	230c      	movs	r3, #12
 800e702:	f8ca 3000 	str.w	r3, [sl]
 800e706:	89a3      	ldrh	r3, [r4, #12]
 800e708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e70c:	81a3      	strh	r3, [r4, #12]
 800e70e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e716:	6921      	ldr	r1, [r4, #16]
 800e718:	464a      	mov	r2, r9
 800e71a:	f7ff fadd 	bl	800dcd8 <memcpy>
 800e71e:	89a3      	ldrh	r3, [r4, #12]
 800e720:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e728:	81a3      	strh	r3, [r4, #12]
 800e72a:	6126      	str	r6, [r4, #16]
 800e72c:	6165      	str	r5, [r4, #20]
 800e72e:	444e      	add	r6, r9
 800e730:	eba5 0509 	sub.w	r5, r5, r9
 800e734:	6026      	str	r6, [r4, #0]
 800e736:	60a5      	str	r5, [r4, #8]
 800e738:	463e      	mov	r6, r7
 800e73a:	42be      	cmp	r6, r7
 800e73c:	d900      	bls.n	800e740 <__ssputs_r+0x86>
 800e73e:	463e      	mov	r6, r7
 800e740:	6820      	ldr	r0, [r4, #0]
 800e742:	4632      	mov	r2, r6
 800e744:	4641      	mov	r1, r8
 800e746:	f000 f970 	bl	800ea2a <memmove>
 800e74a:	68a3      	ldr	r3, [r4, #8]
 800e74c:	1b9b      	subs	r3, r3, r6
 800e74e:	60a3      	str	r3, [r4, #8]
 800e750:	6823      	ldr	r3, [r4, #0]
 800e752:	4433      	add	r3, r6
 800e754:	6023      	str	r3, [r4, #0]
 800e756:	2000      	movs	r0, #0
 800e758:	e7db      	b.n	800e712 <__ssputs_r+0x58>
 800e75a:	462a      	mov	r2, r5
 800e75c:	f000 f97f 	bl	800ea5e <_realloc_r>
 800e760:	4606      	mov	r6, r0
 800e762:	2800      	cmp	r0, #0
 800e764:	d1e1      	bne.n	800e72a <__ssputs_r+0x70>
 800e766:	6921      	ldr	r1, [r4, #16]
 800e768:	4650      	mov	r0, sl
 800e76a:	f7fc fa77 	bl	800ac5c <_free_r>
 800e76e:	e7c7      	b.n	800e700 <__ssputs_r+0x46>

0800e770 <_svfiprintf_r>:
 800e770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e774:	4698      	mov	r8, r3
 800e776:	898b      	ldrh	r3, [r1, #12]
 800e778:	061b      	lsls	r3, r3, #24
 800e77a:	b09d      	sub	sp, #116	; 0x74
 800e77c:	4607      	mov	r7, r0
 800e77e:	460d      	mov	r5, r1
 800e780:	4614      	mov	r4, r2
 800e782:	d50e      	bpl.n	800e7a2 <_svfiprintf_r+0x32>
 800e784:	690b      	ldr	r3, [r1, #16]
 800e786:	b963      	cbnz	r3, 800e7a2 <_svfiprintf_r+0x32>
 800e788:	2140      	movs	r1, #64	; 0x40
 800e78a:	f7fc fad3 	bl	800ad34 <_malloc_r>
 800e78e:	6028      	str	r0, [r5, #0]
 800e790:	6128      	str	r0, [r5, #16]
 800e792:	b920      	cbnz	r0, 800e79e <_svfiprintf_r+0x2e>
 800e794:	230c      	movs	r3, #12
 800e796:	603b      	str	r3, [r7, #0]
 800e798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e79c:	e0d1      	b.n	800e942 <_svfiprintf_r+0x1d2>
 800e79e:	2340      	movs	r3, #64	; 0x40
 800e7a0:	616b      	str	r3, [r5, #20]
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800e7a6:	2320      	movs	r3, #32
 800e7a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7b0:	2330      	movs	r3, #48	; 0x30
 800e7b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e95c <_svfiprintf_r+0x1ec>
 800e7b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7ba:	f04f 0901 	mov.w	r9, #1
 800e7be:	4623      	mov	r3, r4
 800e7c0:	469a      	mov	sl, r3
 800e7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7c6:	b10a      	cbz	r2, 800e7cc <_svfiprintf_r+0x5c>
 800e7c8:	2a25      	cmp	r2, #37	; 0x25
 800e7ca:	d1f9      	bne.n	800e7c0 <_svfiprintf_r+0x50>
 800e7cc:	ebba 0b04 	subs.w	fp, sl, r4
 800e7d0:	d00b      	beq.n	800e7ea <_svfiprintf_r+0x7a>
 800e7d2:	465b      	mov	r3, fp
 800e7d4:	4622      	mov	r2, r4
 800e7d6:	4629      	mov	r1, r5
 800e7d8:	4638      	mov	r0, r7
 800e7da:	f7ff ff6e 	bl	800e6ba <__ssputs_r>
 800e7de:	3001      	adds	r0, #1
 800e7e0:	f000 80aa 	beq.w	800e938 <_svfiprintf_r+0x1c8>
 800e7e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7e6:	445a      	add	r2, fp
 800e7e8:	9209      	str	r2, [sp, #36]	; 0x24
 800e7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	f000 80a2 	beq.w	800e938 <_svfiprintf_r+0x1c8>
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7fe:	f10a 0a01 	add.w	sl, sl, #1
 800e802:	9304      	str	r3, [sp, #16]
 800e804:	9307      	str	r3, [sp, #28]
 800e806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e80a:	931a      	str	r3, [sp, #104]	; 0x68
 800e80c:	4654      	mov	r4, sl
 800e80e:	2205      	movs	r2, #5
 800e810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e814:	4851      	ldr	r0, [pc, #324]	; (800e95c <_svfiprintf_r+0x1ec>)
 800e816:	f7f1 fd0b 	bl	8000230 <memchr>
 800e81a:	9a04      	ldr	r2, [sp, #16]
 800e81c:	b9d8      	cbnz	r0, 800e856 <_svfiprintf_r+0xe6>
 800e81e:	06d0      	lsls	r0, r2, #27
 800e820:	bf44      	itt	mi
 800e822:	2320      	movmi	r3, #32
 800e824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e828:	0711      	lsls	r1, r2, #28
 800e82a:	bf44      	itt	mi
 800e82c:	232b      	movmi	r3, #43	; 0x2b
 800e82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e832:	f89a 3000 	ldrb.w	r3, [sl]
 800e836:	2b2a      	cmp	r3, #42	; 0x2a
 800e838:	d015      	beq.n	800e866 <_svfiprintf_r+0xf6>
 800e83a:	9a07      	ldr	r2, [sp, #28]
 800e83c:	4654      	mov	r4, sl
 800e83e:	2000      	movs	r0, #0
 800e840:	f04f 0c0a 	mov.w	ip, #10
 800e844:	4621      	mov	r1, r4
 800e846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e84a:	3b30      	subs	r3, #48	; 0x30
 800e84c:	2b09      	cmp	r3, #9
 800e84e:	d94e      	bls.n	800e8ee <_svfiprintf_r+0x17e>
 800e850:	b1b0      	cbz	r0, 800e880 <_svfiprintf_r+0x110>
 800e852:	9207      	str	r2, [sp, #28]
 800e854:	e014      	b.n	800e880 <_svfiprintf_r+0x110>
 800e856:	eba0 0308 	sub.w	r3, r0, r8
 800e85a:	fa09 f303 	lsl.w	r3, r9, r3
 800e85e:	4313      	orrs	r3, r2
 800e860:	9304      	str	r3, [sp, #16]
 800e862:	46a2      	mov	sl, r4
 800e864:	e7d2      	b.n	800e80c <_svfiprintf_r+0x9c>
 800e866:	9b03      	ldr	r3, [sp, #12]
 800e868:	1d19      	adds	r1, r3, #4
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	9103      	str	r1, [sp, #12]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	bfbb      	ittet	lt
 800e872:	425b      	neglt	r3, r3
 800e874:	f042 0202 	orrlt.w	r2, r2, #2
 800e878:	9307      	strge	r3, [sp, #28]
 800e87a:	9307      	strlt	r3, [sp, #28]
 800e87c:	bfb8      	it	lt
 800e87e:	9204      	strlt	r2, [sp, #16]
 800e880:	7823      	ldrb	r3, [r4, #0]
 800e882:	2b2e      	cmp	r3, #46	; 0x2e
 800e884:	d10c      	bne.n	800e8a0 <_svfiprintf_r+0x130>
 800e886:	7863      	ldrb	r3, [r4, #1]
 800e888:	2b2a      	cmp	r3, #42	; 0x2a
 800e88a:	d135      	bne.n	800e8f8 <_svfiprintf_r+0x188>
 800e88c:	9b03      	ldr	r3, [sp, #12]
 800e88e:	1d1a      	adds	r2, r3, #4
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	9203      	str	r2, [sp, #12]
 800e894:	2b00      	cmp	r3, #0
 800e896:	bfb8      	it	lt
 800e898:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e89c:	3402      	adds	r4, #2
 800e89e:	9305      	str	r3, [sp, #20]
 800e8a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e96c <_svfiprintf_r+0x1fc>
 800e8a4:	7821      	ldrb	r1, [r4, #0]
 800e8a6:	2203      	movs	r2, #3
 800e8a8:	4650      	mov	r0, sl
 800e8aa:	f7f1 fcc1 	bl	8000230 <memchr>
 800e8ae:	b140      	cbz	r0, 800e8c2 <_svfiprintf_r+0x152>
 800e8b0:	2340      	movs	r3, #64	; 0x40
 800e8b2:	eba0 000a 	sub.w	r0, r0, sl
 800e8b6:	fa03 f000 	lsl.w	r0, r3, r0
 800e8ba:	9b04      	ldr	r3, [sp, #16]
 800e8bc:	4303      	orrs	r3, r0
 800e8be:	3401      	adds	r4, #1
 800e8c0:	9304      	str	r3, [sp, #16]
 800e8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8c6:	4826      	ldr	r0, [pc, #152]	; (800e960 <_svfiprintf_r+0x1f0>)
 800e8c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8cc:	2206      	movs	r2, #6
 800e8ce:	f7f1 fcaf 	bl	8000230 <memchr>
 800e8d2:	2800      	cmp	r0, #0
 800e8d4:	d038      	beq.n	800e948 <_svfiprintf_r+0x1d8>
 800e8d6:	4b23      	ldr	r3, [pc, #140]	; (800e964 <_svfiprintf_r+0x1f4>)
 800e8d8:	bb1b      	cbnz	r3, 800e922 <_svfiprintf_r+0x1b2>
 800e8da:	9b03      	ldr	r3, [sp, #12]
 800e8dc:	3307      	adds	r3, #7
 800e8de:	f023 0307 	bic.w	r3, r3, #7
 800e8e2:	3308      	adds	r3, #8
 800e8e4:	9303      	str	r3, [sp, #12]
 800e8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8e8:	4433      	add	r3, r6
 800e8ea:	9309      	str	r3, [sp, #36]	; 0x24
 800e8ec:	e767      	b.n	800e7be <_svfiprintf_r+0x4e>
 800e8ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8f2:	460c      	mov	r4, r1
 800e8f4:	2001      	movs	r0, #1
 800e8f6:	e7a5      	b.n	800e844 <_svfiprintf_r+0xd4>
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	3401      	adds	r4, #1
 800e8fc:	9305      	str	r3, [sp, #20]
 800e8fe:	4619      	mov	r1, r3
 800e900:	f04f 0c0a 	mov.w	ip, #10
 800e904:	4620      	mov	r0, r4
 800e906:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e90a:	3a30      	subs	r2, #48	; 0x30
 800e90c:	2a09      	cmp	r2, #9
 800e90e:	d903      	bls.n	800e918 <_svfiprintf_r+0x1a8>
 800e910:	2b00      	cmp	r3, #0
 800e912:	d0c5      	beq.n	800e8a0 <_svfiprintf_r+0x130>
 800e914:	9105      	str	r1, [sp, #20]
 800e916:	e7c3      	b.n	800e8a0 <_svfiprintf_r+0x130>
 800e918:	fb0c 2101 	mla	r1, ip, r1, r2
 800e91c:	4604      	mov	r4, r0
 800e91e:	2301      	movs	r3, #1
 800e920:	e7f0      	b.n	800e904 <_svfiprintf_r+0x194>
 800e922:	ab03      	add	r3, sp, #12
 800e924:	9300      	str	r3, [sp, #0]
 800e926:	462a      	mov	r2, r5
 800e928:	4b0f      	ldr	r3, [pc, #60]	; (800e968 <_svfiprintf_r+0x1f8>)
 800e92a:	a904      	add	r1, sp, #16
 800e92c:	4638      	mov	r0, r7
 800e92e:	f7fc fb15 	bl	800af5c <_printf_float>
 800e932:	1c42      	adds	r2, r0, #1
 800e934:	4606      	mov	r6, r0
 800e936:	d1d6      	bne.n	800e8e6 <_svfiprintf_r+0x176>
 800e938:	89ab      	ldrh	r3, [r5, #12]
 800e93a:	065b      	lsls	r3, r3, #25
 800e93c:	f53f af2c 	bmi.w	800e798 <_svfiprintf_r+0x28>
 800e940:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e942:	b01d      	add	sp, #116	; 0x74
 800e944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e948:	ab03      	add	r3, sp, #12
 800e94a:	9300      	str	r3, [sp, #0]
 800e94c:	462a      	mov	r2, r5
 800e94e:	4b06      	ldr	r3, [pc, #24]	; (800e968 <_svfiprintf_r+0x1f8>)
 800e950:	a904      	add	r1, sp, #16
 800e952:	4638      	mov	r0, r7
 800e954:	f7fc fda6 	bl	800b4a4 <_printf_i>
 800e958:	e7eb      	b.n	800e932 <_svfiprintf_r+0x1c2>
 800e95a:	bf00      	nop
 800e95c:	08010624 	.word	0x08010624
 800e960:	0801062e 	.word	0x0801062e
 800e964:	0800af5d 	.word	0x0800af5d
 800e968:	0800e6bb 	.word	0x0800e6bb
 800e96c:	0801062a 	.word	0x0801062a

0800e970 <nan>:
 800e970:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e978 <nan+0x8>
 800e974:	4770      	bx	lr
 800e976:	bf00      	nop
 800e978:	00000000 	.word	0x00000000
 800e97c:	7ff80000 	.word	0x7ff80000

0800e980 <strncmp>:
 800e980:	b510      	push	{r4, lr}
 800e982:	b17a      	cbz	r2, 800e9a4 <strncmp+0x24>
 800e984:	4603      	mov	r3, r0
 800e986:	3901      	subs	r1, #1
 800e988:	1884      	adds	r4, r0, r2
 800e98a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e98e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e992:	4290      	cmp	r0, r2
 800e994:	d101      	bne.n	800e99a <strncmp+0x1a>
 800e996:	42a3      	cmp	r3, r4
 800e998:	d101      	bne.n	800e99e <strncmp+0x1e>
 800e99a:	1a80      	subs	r0, r0, r2
 800e99c:	bd10      	pop	{r4, pc}
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	d1f3      	bne.n	800e98a <strncmp+0xa>
 800e9a2:	e7fa      	b.n	800e99a <strncmp+0x1a>
 800e9a4:	4610      	mov	r0, r2
 800e9a6:	e7f9      	b.n	800e99c <strncmp+0x1c>

0800e9a8 <__ascii_wctomb>:
 800e9a8:	b149      	cbz	r1, 800e9be <__ascii_wctomb+0x16>
 800e9aa:	2aff      	cmp	r2, #255	; 0xff
 800e9ac:	bf85      	ittet	hi
 800e9ae:	238a      	movhi	r3, #138	; 0x8a
 800e9b0:	6003      	strhi	r3, [r0, #0]
 800e9b2:	700a      	strbls	r2, [r1, #0]
 800e9b4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e9b8:	bf98      	it	ls
 800e9ba:	2001      	movls	r0, #1
 800e9bc:	4770      	bx	lr
 800e9be:	4608      	mov	r0, r1
 800e9c0:	4770      	bx	lr
	...

0800e9c4 <__assert_func>:
 800e9c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e9c6:	4614      	mov	r4, r2
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	4b09      	ldr	r3, [pc, #36]	; (800e9f0 <__assert_func+0x2c>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	4605      	mov	r5, r0
 800e9d0:	68d8      	ldr	r0, [r3, #12]
 800e9d2:	b14c      	cbz	r4, 800e9e8 <__assert_func+0x24>
 800e9d4:	4b07      	ldr	r3, [pc, #28]	; (800e9f4 <__assert_func+0x30>)
 800e9d6:	9100      	str	r1, [sp, #0]
 800e9d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e9dc:	4906      	ldr	r1, [pc, #24]	; (800e9f8 <__assert_func+0x34>)
 800e9de:	462b      	mov	r3, r5
 800e9e0:	f000 f80e 	bl	800ea00 <fiprintf>
 800e9e4:	f000 fa84 	bl	800eef0 <abort>
 800e9e8:	4b04      	ldr	r3, [pc, #16]	; (800e9fc <__assert_func+0x38>)
 800e9ea:	461c      	mov	r4, r3
 800e9ec:	e7f3      	b.n	800e9d6 <__assert_func+0x12>
 800e9ee:	bf00      	nop
 800e9f0:	20000184 	.word	0x20000184
 800e9f4:	08010635 	.word	0x08010635
 800e9f8:	08010642 	.word	0x08010642
 800e9fc:	08010670 	.word	0x08010670

0800ea00 <fiprintf>:
 800ea00:	b40e      	push	{r1, r2, r3}
 800ea02:	b503      	push	{r0, r1, lr}
 800ea04:	4601      	mov	r1, r0
 800ea06:	ab03      	add	r3, sp, #12
 800ea08:	4805      	ldr	r0, [pc, #20]	; (800ea20 <fiprintf+0x20>)
 800ea0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea0e:	6800      	ldr	r0, [r0, #0]
 800ea10:	9301      	str	r3, [sp, #4]
 800ea12:	f000 f87d 	bl	800eb10 <_vfiprintf_r>
 800ea16:	b002      	add	sp, #8
 800ea18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea1c:	b003      	add	sp, #12
 800ea1e:	4770      	bx	lr
 800ea20:	20000184 	.word	0x20000184

0800ea24 <__retarget_lock_init_recursive>:
 800ea24:	4770      	bx	lr

0800ea26 <__retarget_lock_acquire_recursive>:
 800ea26:	4770      	bx	lr

0800ea28 <__retarget_lock_release_recursive>:
 800ea28:	4770      	bx	lr

0800ea2a <memmove>:
 800ea2a:	4288      	cmp	r0, r1
 800ea2c:	b510      	push	{r4, lr}
 800ea2e:	eb01 0402 	add.w	r4, r1, r2
 800ea32:	d902      	bls.n	800ea3a <memmove+0x10>
 800ea34:	4284      	cmp	r4, r0
 800ea36:	4623      	mov	r3, r4
 800ea38:	d807      	bhi.n	800ea4a <memmove+0x20>
 800ea3a:	1e43      	subs	r3, r0, #1
 800ea3c:	42a1      	cmp	r1, r4
 800ea3e:	d008      	beq.n	800ea52 <memmove+0x28>
 800ea40:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea44:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea48:	e7f8      	b.n	800ea3c <memmove+0x12>
 800ea4a:	4402      	add	r2, r0
 800ea4c:	4601      	mov	r1, r0
 800ea4e:	428a      	cmp	r2, r1
 800ea50:	d100      	bne.n	800ea54 <memmove+0x2a>
 800ea52:	bd10      	pop	{r4, pc}
 800ea54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea58:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea5c:	e7f7      	b.n	800ea4e <memmove+0x24>

0800ea5e <_realloc_r>:
 800ea5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea62:	4680      	mov	r8, r0
 800ea64:	4614      	mov	r4, r2
 800ea66:	460e      	mov	r6, r1
 800ea68:	b921      	cbnz	r1, 800ea74 <_realloc_r+0x16>
 800ea6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea6e:	4611      	mov	r1, r2
 800ea70:	f7fc b960 	b.w	800ad34 <_malloc_r>
 800ea74:	b92a      	cbnz	r2, 800ea82 <_realloc_r+0x24>
 800ea76:	f7fc f8f1 	bl	800ac5c <_free_r>
 800ea7a:	4625      	mov	r5, r4
 800ea7c:	4628      	mov	r0, r5
 800ea7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea82:	f000 fc59 	bl	800f338 <_malloc_usable_size_r>
 800ea86:	4284      	cmp	r4, r0
 800ea88:	4607      	mov	r7, r0
 800ea8a:	d802      	bhi.n	800ea92 <_realloc_r+0x34>
 800ea8c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea90:	d812      	bhi.n	800eab8 <_realloc_r+0x5a>
 800ea92:	4621      	mov	r1, r4
 800ea94:	4640      	mov	r0, r8
 800ea96:	f7fc f94d 	bl	800ad34 <_malloc_r>
 800ea9a:	4605      	mov	r5, r0
 800ea9c:	2800      	cmp	r0, #0
 800ea9e:	d0ed      	beq.n	800ea7c <_realloc_r+0x1e>
 800eaa0:	42bc      	cmp	r4, r7
 800eaa2:	4622      	mov	r2, r4
 800eaa4:	4631      	mov	r1, r6
 800eaa6:	bf28      	it	cs
 800eaa8:	463a      	movcs	r2, r7
 800eaaa:	f7ff f915 	bl	800dcd8 <memcpy>
 800eaae:	4631      	mov	r1, r6
 800eab0:	4640      	mov	r0, r8
 800eab2:	f7fc f8d3 	bl	800ac5c <_free_r>
 800eab6:	e7e1      	b.n	800ea7c <_realloc_r+0x1e>
 800eab8:	4635      	mov	r5, r6
 800eaba:	e7df      	b.n	800ea7c <_realloc_r+0x1e>

0800eabc <__sfputc_r>:
 800eabc:	6893      	ldr	r3, [r2, #8]
 800eabe:	3b01      	subs	r3, #1
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	b410      	push	{r4}
 800eac4:	6093      	str	r3, [r2, #8]
 800eac6:	da08      	bge.n	800eada <__sfputc_r+0x1e>
 800eac8:	6994      	ldr	r4, [r2, #24]
 800eaca:	42a3      	cmp	r3, r4
 800eacc:	db01      	blt.n	800ead2 <__sfputc_r+0x16>
 800eace:	290a      	cmp	r1, #10
 800ead0:	d103      	bne.n	800eada <__sfputc_r+0x1e>
 800ead2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ead6:	f000 b94b 	b.w	800ed70 <__swbuf_r>
 800eada:	6813      	ldr	r3, [r2, #0]
 800eadc:	1c58      	adds	r0, r3, #1
 800eade:	6010      	str	r0, [r2, #0]
 800eae0:	7019      	strb	r1, [r3, #0]
 800eae2:	4608      	mov	r0, r1
 800eae4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eae8:	4770      	bx	lr

0800eaea <__sfputs_r>:
 800eaea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaec:	4606      	mov	r6, r0
 800eaee:	460f      	mov	r7, r1
 800eaf0:	4614      	mov	r4, r2
 800eaf2:	18d5      	adds	r5, r2, r3
 800eaf4:	42ac      	cmp	r4, r5
 800eaf6:	d101      	bne.n	800eafc <__sfputs_r+0x12>
 800eaf8:	2000      	movs	r0, #0
 800eafa:	e007      	b.n	800eb0c <__sfputs_r+0x22>
 800eafc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb00:	463a      	mov	r2, r7
 800eb02:	4630      	mov	r0, r6
 800eb04:	f7ff ffda 	bl	800eabc <__sfputc_r>
 800eb08:	1c43      	adds	r3, r0, #1
 800eb0a:	d1f3      	bne.n	800eaf4 <__sfputs_r+0xa>
 800eb0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb10 <_vfiprintf_r>:
 800eb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb14:	460d      	mov	r5, r1
 800eb16:	b09d      	sub	sp, #116	; 0x74
 800eb18:	4614      	mov	r4, r2
 800eb1a:	4698      	mov	r8, r3
 800eb1c:	4606      	mov	r6, r0
 800eb1e:	b118      	cbz	r0, 800eb28 <_vfiprintf_r+0x18>
 800eb20:	6983      	ldr	r3, [r0, #24]
 800eb22:	b90b      	cbnz	r3, 800eb28 <_vfiprintf_r+0x18>
 800eb24:	f000 fb06 	bl	800f134 <__sinit>
 800eb28:	4b89      	ldr	r3, [pc, #548]	; (800ed50 <_vfiprintf_r+0x240>)
 800eb2a:	429d      	cmp	r5, r3
 800eb2c:	d11b      	bne.n	800eb66 <_vfiprintf_r+0x56>
 800eb2e:	6875      	ldr	r5, [r6, #4]
 800eb30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb32:	07d9      	lsls	r1, r3, #31
 800eb34:	d405      	bmi.n	800eb42 <_vfiprintf_r+0x32>
 800eb36:	89ab      	ldrh	r3, [r5, #12]
 800eb38:	059a      	lsls	r2, r3, #22
 800eb3a:	d402      	bmi.n	800eb42 <_vfiprintf_r+0x32>
 800eb3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb3e:	f7ff ff72 	bl	800ea26 <__retarget_lock_acquire_recursive>
 800eb42:	89ab      	ldrh	r3, [r5, #12]
 800eb44:	071b      	lsls	r3, r3, #28
 800eb46:	d501      	bpl.n	800eb4c <_vfiprintf_r+0x3c>
 800eb48:	692b      	ldr	r3, [r5, #16]
 800eb4a:	b9eb      	cbnz	r3, 800eb88 <_vfiprintf_r+0x78>
 800eb4c:	4629      	mov	r1, r5
 800eb4e:	4630      	mov	r0, r6
 800eb50:	f000 f960 	bl	800ee14 <__swsetup_r>
 800eb54:	b1c0      	cbz	r0, 800eb88 <_vfiprintf_r+0x78>
 800eb56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb58:	07dc      	lsls	r4, r3, #31
 800eb5a:	d50e      	bpl.n	800eb7a <_vfiprintf_r+0x6a>
 800eb5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb60:	b01d      	add	sp, #116	; 0x74
 800eb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb66:	4b7b      	ldr	r3, [pc, #492]	; (800ed54 <_vfiprintf_r+0x244>)
 800eb68:	429d      	cmp	r5, r3
 800eb6a:	d101      	bne.n	800eb70 <_vfiprintf_r+0x60>
 800eb6c:	68b5      	ldr	r5, [r6, #8]
 800eb6e:	e7df      	b.n	800eb30 <_vfiprintf_r+0x20>
 800eb70:	4b79      	ldr	r3, [pc, #484]	; (800ed58 <_vfiprintf_r+0x248>)
 800eb72:	429d      	cmp	r5, r3
 800eb74:	bf08      	it	eq
 800eb76:	68f5      	ldreq	r5, [r6, #12]
 800eb78:	e7da      	b.n	800eb30 <_vfiprintf_r+0x20>
 800eb7a:	89ab      	ldrh	r3, [r5, #12]
 800eb7c:	0598      	lsls	r0, r3, #22
 800eb7e:	d4ed      	bmi.n	800eb5c <_vfiprintf_r+0x4c>
 800eb80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb82:	f7ff ff51 	bl	800ea28 <__retarget_lock_release_recursive>
 800eb86:	e7e9      	b.n	800eb5c <_vfiprintf_r+0x4c>
 800eb88:	2300      	movs	r3, #0
 800eb8a:	9309      	str	r3, [sp, #36]	; 0x24
 800eb8c:	2320      	movs	r3, #32
 800eb8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb92:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb96:	2330      	movs	r3, #48	; 0x30
 800eb98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ed5c <_vfiprintf_r+0x24c>
 800eb9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eba0:	f04f 0901 	mov.w	r9, #1
 800eba4:	4623      	mov	r3, r4
 800eba6:	469a      	mov	sl, r3
 800eba8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebac:	b10a      	cbz	r2, 800ebb2 <_vfiprintf_r+0xa2>
 800ebae:	2a25      	cmp	r2, #37	; 0x25
 800ebb0:	d1f9      	bne.n	800eba6 <_vfiprintf_r+0x96>
 800ebb2:	ebba 0b04 	subs.w	fp, sl, r4
 800ebb6:	d00b      	beq.n	800ebd0 <_vfiprintf_r+0xc0>
 800ebb8:	465b      	mov	r3, fp
 800ebba:	4622      	mov	r2, r4
 800ebbc:	4629      	mov	r1, r5
 800ebbe:	4630      	mov	r0, r6
 800ebc0:	f7ff ff93 	bl	800eaea <__sfputs_r>
 800ebc4:	3001      	adds	r0, #1
 800ebc6:	f000 80aa 	beq.w	800ed1e <_vfiprintf_r+0x20e>
 800ebca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebcc:	445a      	add	r2, fp
 800ebce:	9209      	str	r2, [sp, #36]	; 0x24
 800ebd0:	f89a 3000 	ldrb.w	r3, [sl]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	f000 80a2 	beq.w	800ed1e <_vfiprintf_r+0x20e>
 800ebda:	2300      	movs	r3, #0
 800ebdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebe4:	f10a 0a01 	add.w	sl, sl, #1
 800ebe8:	9304      	str	r3, [sp, #16]
 800ebea:	9307      	str	r3, [sp, #28]
 800ebec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ebf0:	931a      	str	r3, [sp, #104]	; 0x68
 800ebf2:	4654      	mov	r4, sl
 800ebf4:	2205      	movs	r2, #5
 800ebf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebfa:	4858      	ldr	r0, [pc, #352]	; (800ed5c <_vfiprintf_r+0x24c>)
 800ebfc:	f7f1 fb18 	bl	8000230 <memchr>
 800ec00:	9a04      	ldr	r2, [sp, #16]
 800ec02:	b9d8      	cbnz	r0, 800ec3c <_vfiprintf_r+0x12c>
 800ec04:	06d1      	lsls	r1, r2, #27
 800ec06:	bf44      	itt	mi
 800ec08:	2320      	movmi	r3, #32
 800ec0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec0e:	0713      	lsls	r3, r2, #28
 800ec10:	bf44      	itt	mi
 800ec12:	232b      	movmi	r3, #43	; 0x2b
 800ec14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec18:	f89a 3000 	ldrb.w	r3, [sl]
 800ec1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ec1e:	d015      	beq.n	800ec4c <_vfiprintf_r+0x13c>
 800ec20:	9a07      	ldr	r2, [sp, #28]
 800ec22:	4654      	mov	r4, sl
 800ec24:	2000      	movs	r0, #0
 800ec26:	f04f 0c0a 	mov.w	ip, #10
 800ec2a:	4621      	mov	r1, r4
 800ec2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec30:	3b30      	subs	r3, #48	; 0x30
 800ec32:	2b09      	cmp	r3, #9
 800ec34:	d94e      	bls.n	800ecd4 <_vfiprintf_r+0x1c4>
 800ec36:	b1b0      	cbz	r0, 800ec66 <_vfiprintf_r+0x156>
 800ec38:	9207      	str	r2, [sp, #28]
 800ec3a:	e014      	b.n	800ec66 <_vfiprintf_r+0x156>
 800ec3c:	eba0 0308 	sub.w	r3, r0, r8
 800ec40:	fa09 f303 	lsl.w	r3, r9, r3
 800ec44:	4313      	orrs	r3, r2
 800ec46:	9304      	str	r3, [sp, #16]
 800ec48:	46a2      	mov	sl, r4
 800ec4a:	e7d2      	b.n	800ebf2 <_vfiprintf_r+0xe2>
 800ec4c:	9b03      	ldr	r3, [sp, #12]
 800ec4e:	1d19      	adds	r1, r3, #4
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	9103      	str	r1, [sp, #12]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	bfbb      	ittet	lt
 800ec58:	425b      	neglt	r3, r3
 800ec5a:	f042 0202 	orrlt.w	r2, r2, #2
 800ec5e:	9307      	strge	r3, [sp, #28]
 800ec60:	9307      	strlt	r3, [sp, #28]
 800ec62:	bfb8      	it	lt
 800ec64:	9204      	strlt	r2, [sp, #16]
 800ec66:	7823      	ldrb	r3, [r4, #0]
 800ec68:	2b2e      	cmp	r3, #46	; 0x2e
 800ec6a:	d10c      	bne.n	800ec86 <_vfiprintf_r+0x176>
 800ec6c:	7863      	ldrb	r3, [r4, #1]
 800ec6e:	2b2a      	cmp	r3, #42	; 0x2a
 800ec70:	d135      	bne.n	800ecde <_vfiprintf_r+0x1ce>
 800ec72:	9b03      	ldr	r3, [sp, #12]
 800ec74:	1d1a      	adds	r2, r3, #4
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	9203      	str	r2, [sp, #12]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	bfb8      	it	lt
 800ec7e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ec82:	3402      	adds	r4, #2
 800ec84:	9305      	str	r3, [sp, #20]
 800ec86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ed6c <_vfiprintf_r+0x25c>
 800ec8a:	7821      	ldrb	r1, [r4, #0]
 800ec8c:	2203      	movs	r2, #3
 800ec8e:	4650      	mov	r0, sl
 800ec90:	f7f1 face 	bl	8000230 <memchr>
 800ec94:	b140      	cbz	r0, 800eca8 <_vfiprintf_r+0x198>
 800ec96:	2340      	movs	r3, #64	; 0x40
 800ec98:	eba0 000a 	sub.w	r0, r0, sl
 800ec9c:	fa03 f000 	lsl.w	r0, r3, r0
 800eca0:	9b04      	ldr	r3, [sp, #16]
 800eca2:	4303      	orrs	r3, r0
 800eca4:	3401      	adds	r4, #1
 800eca6:	9304      	str	r3, [sp, #16]
 800eca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecac:	482c      	ldr	r0, [pc, #176]	; (800ed60 <_vfiprintf_r+0x250>)
 800ecae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ecb2:	2206      	movs	r2, #6
 800ecb4:	f7f1 fabc 	bl	8000230 <memchr>
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	d03f      	beq.n	800ed3c <_vfiprintf_r+0x22c>
 800ecbc:	4b29      	ldr	r3, [pc, #164]	; (800ed64 <_vfiprintf_r+0x254>)
 800ecbe:	bb1b      	cbnz	r3, 800ed08 <_vfiprintf_r+0x1f8>
 800ecc0:	9b03      	ldr	r3, [sp, #12]
 800ecc2:	3307      	adds	r3, #7
 800ecc4:	f023 0307 	bic.w	r3, r3, #7
 800ecc8:	3308      	adds	r3, #8
 800ecca:	9303      	str	r3, [sp, #12]
 800eccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecce:	443b      	add	r3, r7
 800ecd0:	9309      	str	r3, [sp, #36]	; 0x24
 800ecd2:	e767      	b.n	800eba4 <_vfiprintf_r+0x94>
 800ecd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecd8:	460c      	mov	r4, r1
 800ecda:	2001      	movs	r0, #1
 800ecdc:	e7a5      	b.n	800ec2a <_vfiprintf_r+0x11a>
 800ecde:	2300      	movs	r3, #0
 800ece0:	3401      	adds	r4, #1
 800ece2:	9305      	str	r3, [sp, #20]
 800ece4:	4619      	mov	r1, r3
 800ece6:	f04f 0c0a 	mov.w	ip, #10
 800ecea:	4620      	mov	r0, r4
 800ecec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecf0:	3a30      	subs	r2, #48	; 0x30
 800ecf2:	2a09      	cmp	r2, #9
 800ecf4:	d903      	bls.n	800ecfe <_vfiprintf_r+0x1ee>
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d0c5      	beq.n	800ec86 <_vfiprintf_r+0x176>
 800ecfa:	9105      	str	r1, [sp, #20]
 800ecfc:	e7c3      	b.n	800ec86 <_vfiprintf_r+0x176>
 800ecfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed02:	4604      	mov	r4, r0
 800ed04:	2301      	movs	r3, #1
 800ed06:	e7f0      	b.n	800ecea <_vfiprintf_r+0x1da>
 800ed08:	ab03      	add	r3, sp, #12
 800ed0a:	9300      	str	r3, [sp, #0]
 800ed0c:	462a      	mov	r2, r5
 800ed0e:	4b16      	ldr	r3, [pc, #88]	; (800ed68 <_vfiprintf_r+0x258>)
 800ed10:	a904      	add	r1, sp, #16
 800ed12:	4630      	mov	r0, r6
 800ed14:	f7fc f922 	bl	800af5c <_printf_float>
 800ed18:	4607      	mov	r7, r0
 800ed1a:	1c78      	adds	r0, r7, #1
 800ed1c:	d1d6      	bne.n	800eccc <_vfiprintf_r+0x1bc>
 800ed1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed20:	07d9      	lsls	r1, r3, #31
 800ed22:	d405      	bmi.n	800ed30 <_vfiprintf_r+0x220>
 800ed24:	89ab      	ldrh	r3, [r5, #12]
 800ed26:	059a      	lsls	r2, r3, #22
 800ed28:	d402      	bmi.n	800ed30 <_vfiprintf_r+0x220>
 800ed2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed2c:	f7ff fe7c 	bl	800ea28 <__retarget_lock_release_recursive>
 800ed30:	89ab      	ldrh	r3, [r5, #12]
 800ed32:	065b      	lsls	r3, r3, #25
 800ed34:	f53f af12 	bmi.w	800eb5c <_vfiprintf_r+0x4c>
 800ed38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed3a:	e711      	b.n	800eb60 <_vfiprintf_r+0x50>
 800ed3c:	ab03      	add	r3, sp, #12
 800ed3e:	9300      	str	r3, [sp, #0]
 800ed40:	462a      	mov	r2, r5
 800ed42:	4b09      	ldr	r3, [pc, #36]	; (800ed68 <_vfiprintf_r+0x258>)
 800ed44:	a904      	add	r1, sp, #16
 800ed46:	4630      	mov	r0, r6
 800ed48:	f7fc fbac 	bl	800b4a4 <_printf_i>
 800ed4c:	e7e4      	b.n	800ed18 <_vfiprintf_r+0x208>
 800ed4e:	bf00      	nop
 800ed50:	08010694 	.word	0x08010694
 800ed54:	080106b4 	.word	0x080106b4
 800ed58:	08010674 	.word	0x08010674
 800ed5c:	08010624 	.word	0x08010624
 800ed60:	0801062e 	.word	0x0801062e
 800ed64:	0800af5d 	.word	0x0800af5d
 800ed68:	0800eaeb 	.word	0x0800eaeb
 800ed6c:	0801062a 	.word	0x0801062a

0800ed70 <__swbuf_r>:
 800ed70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed72:	460e      	mov	r6, r1
 800ed74:	4614      	mov	r4, r2
 800ed76:	4605      	mov	r5, r0
 800ed78:	b118      	cbz	r0, 800ed82 <__swbuf_r+0x12>
 800ed7a:	6983      	ldr	r3, [r0, #24]
 800ed7c:	b90b      	cbnz	r3, 800ed82 <__swbuf_r+0x12>
 800ed7e:	f000 f9d9 	bl	800f134 <__sinit>
 800ed82:	4b21      	ldr	r3, [pc, #132]	; (800ee08 <__swbuf_r+0x98>)
 800ed84:	429c      	cmp	r4, r3
 800ed86:	d12b      	bne.n	800ede0 <__swbuf_r+0x70>
 800ed88:	686c      	ldr	r4, [r5, #4]
 800ed8a:	69a3      	ldr	r3, [r4, #24]
 800ed8c:	60a3      	str	r3, [r4, #8]
 800ed8e:	89a3      	ldrh	r3, [r4, #12]
 800ed90:	071a      	lsls	r2, r3, #28
 800ed92:	d52f      	bpl.n	800edf4 <__swbuf_r+0x84>
 800ed94:	6923      	ldr	r3, [r4, #16]
 800ed96:	b36b      	cbz	r3, 800edf4 <__swbuf_r+0x84>
 800ed98:	6923      	ldr	r3, [r4, #16]
 800ed9a:	6820      	ldr	r0, [r4, #0]
 800ed9c:	1ac0      	subs	r0, r0, r3
 800ed9e:	6963      	ldr	r3, [r4, #20]
 800eda0:	b2f6      	uxtb	r6, r6
 800eda2:	4283      	cmp	r3, r0
 800eda4:	4637      	mov	r7, r6
 800eda6:	dc04      	bgt.n	800edb2 <__swbuf_r+0x42>
 800eda8:	4621      	mov	r1, r4
 800edaa:	4628      	mov	r0, r5
 800edac:	f000 f92e 	bl	800f00c <_fflush_r>
 800edb0:	bb30      	cbnz	r0, 800ee00 <__swbuf_r+0x90>
 800edb2:	68a3      	ldr	r3, [r4, #8]
 800edb4:	3b01      	subs	r3, #1
 800edb6:	60a3      	str	r3, [r4, #8]
 800edb8:	6823      	ldr	r3, [r4, #0]
 800edba:	1c5a      	adds	r2, r3, #1
 800edbc:	6022      	str	r2, [r4, #0]
 800edbe:	701e      	strb	r6, [r3, #0]
 800edc0:	6963      	ldr	r3, [r4, #20]
 800edc2:	3001      	adds	r0, #1
 800edc4:	4283      	cmp	r3, r0
 800edc6:	d004      	beq.n	800edd2 <__swbuf_r+0x62>
 800edc8:	89a3      	ldrh	r3, [r4, #12]
 800edca:	07db      	lsls	r3, r3, #31
 800edcc:	d506      	bpl.n	800eddc <__swbuf_r+0x6c>
 800edce:	2e0a      	cmp	r6, #10
 800edd0:	d104      	bne.n	800eddc <__swbuf_r+0x6c>
 800edd2:	4621      	mov	r1, r4
 800edd4:	4628      	mov	r0, r5
 800edd6:	f000 f919 	bl	800f00c <_fflush_r>
 800edda:	b988      	cbnz	r0, 800ee00 <__swbuf_r+0x90>
 800eddc:	4638      	mov	r0, r7
 800edde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ede0:	4b0a      	ldr	r3, [pc, #40]	; (800ee0c <__swbuf_r+0x9c>)
 800ede2:	429c      	cmp	r4, r3
 800ede4:	d101      	bne.n	800edea <__swbuf_r+0x7a>
 800ede6:	68ac      	ldr	r4, [r5, #8]
 800ede8:	e7cf      	b.n	800ed8a <__swbuf_r+0x1a>
 800edea:	4b09      	ldr	r3, [pc, #36]	; (800ee10 <__swbuf_r+0xa0>)
 800edec:	429c      	cmp	r4, r3
 800edee:	bf08      	it	eq
 800edf0:	68ec      	ldreq	r4, [r5, #12]
 800edf2:	e7ca      	b.n	800ed8a <__swbuf_r+0x1a>
 800edf4:	4621      	mov	r1, r4
 800edf6:	4628      	mov	r0, r5
 800edf8:	f000 f80c 	bl	800ee14 <__swsetup_r>
 800edfc:	2800      	cmp	r0, #0
 800edfe:	d0cb      	beq.n	800ed98 <__swbuf_r+0x28>
 800ee00:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ee04:	e7ea      	b.n	800eddc <__swbuf_r+0x6c>
 800ee06:	bf00      	nop
 800ee08:	08010694 	.word	0x08010694
 800ee0c:	080106b4 	.word	0x080106b4
 800ee10:	08010674 	.word	0x08010674

0800ee14 <__swsetup_r>:
 800ee14:	4b32      	ldr	r3, [pc, #200]	; (800eee0 <__swsetup_r+0xcc>)
 800ee16:	b570      	push	{r4, r5, r6, lr}
 800ee18:	681d      	ldr	r5, [r3, #0]
 800ee1a:	4606      	mov	r6, r0
 800ee1c:	460c      	mov	r4, r1
 800ee1e:	b125      	cbz	r5, 800ee2a <__swsetup_r+0x16>
 800ee20:	69ab      	ldr	r3, [r5, #24]
 800ee22:	b913      	cbnz	r3, 800ee2a <__swsetup_r+0x16>
 800ee24:	4628      	mov	r0, r5
 800ee26:	f000 f985 	bl	800f134 <__sinit>
 800ee2a:	4b2e      	ldr	r3, [pc, #184]	; (800eee4 <__swsetup_r+0xd0>)
 800ee2c:	429c      	cmp	r4, r3
 800ee2e:	d10f      	bne.n	800ee50 <__swsetup_r+0x3c>
 800ee30:	686c      	ldr	r4, [r5, #4]
 800ee32:	89a3      	ldrh	r3, [r4, #12]
 800ee34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee38:	0719      	lsls	r1, r3, #28
 800ee3a:	d42c      	bmi.n	800ee96 <__swsetup_r+0x82>
 800ee3c:	06dd      	lsls	r5, r3, #27
 800ee3e:	d411      	bmi.n	800ee64 <__swsetup_r+0x50>
 800ee40:	2309      	movs	r3, #9
 800ee42:	6033      	str	r3, [r6, #0]
 800ee44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ee48:	81a3      	strh	r3, [r4, #12]
 800ee4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee4e:	e03e      	b.n	800eece <__swsetup_r+0xba>
 800ee50:	4b25      	ldr	r3, [pc, #148]	; (800eee8 <__swsetup_r+0xd4>)
 800ee52:	429c      	cmp	r4, r3
 800ee54:	d101      	bne.n	800ee5a <__swsetup_r+0x46>
 800ee56:	68ac      	ldr	r4, [r5, #8]
 800ee58:	e7eb      	b.n	800ee32 <__swsetup_r+0x1e>
 800ee5a:	4b24      	ldr	r3, [pc, #144]	; (800eeec <__swsetup_r+0xd8>)
 800ee5c:	429c      	cmp	r4, r3
 800ee5e:	bf08      	it	eq
 800ee60:	68ec      	ldreq	r4, [r5, #12]
 800ee62:	e7e6      	b.n	800ee32 <__swsetup_r+0x1e>
 800ee64:	0758      	lsls	r0, r3, #29
 800ee66:	d512      	bpl.n	800ee8e <__swsetup_r+0x7a>
 800ee68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee6a:	b141      	cbz	r1, 800ee7e <__swsetup_r+0x6a>
 800ee6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee70:	4299      	cmp	r1, r3
 800ee72:	d002      	beq.n	800ee7a <__swsetup_r+0x66>
 800ee74:	4630      	mov	r0, r6
 800ee76:	f7fb fef1 	bl	800ac5c <_free_r>
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	6363      	str	r3, [r4, #52]	; 0x34
 800ee7e:	89a3      	ldrh	r3, [r4, #12]
 800ee80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee84:	81a3      	strh	r3, [r4, #12]
 800ee86:	2300      	movs	r3, #0
 800ee88:	6063      	str	r3, [r4, #4]
 800ee8a:	6923      	ldr	r3, [r4, #16]
 800ee8c:	6023      	str	r3, [r4, #0]
 800ee8e:	89a3      	ldrh	r3, [r4, #12]
 800ee90:	f043 0308 	orr.w	r3, r3, #8
 800ee94:	81a3      	strh	r3, [r4, #12]
 800ee96:	6923      	ldr	r3, [r4, #16]
 800ee98:	b94b      	cbnz	r3, 800eeae <__swsetup_r+0x9a>
 800ee9a:	89a3      	ldrh	r3, [r4, #12]
 800ee9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eea4:	d003      	beq.n	800eeae <__swsetup_r+0x9a>
 800eea6:	4621      	mov	r1, r4
 800eea8:	4630      	mov	r0, r6
 800eeaa:	f000 fa05 	bl	800f2b8 <__smakebuf_r>
 800eeae:	89a0      	ldrh	r0, [r4, #12]
 800eeb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eeb4:	f010 0301 	ands.w	r3, r0, #1
 800eeb8:	d00a      	beq.n	800eed0 <__swsetup_r+0xbc>
 800eeba:	2300      	movs	r3, #0
 800eebc:	60a3      	str	r3, [r4, #8]
 800eebe:	6963      	ldr	r3, [r4, #20]
 800eec0:	425b      	negs	r3, r3
 800eec2:	61a3      	str	r3, [r4, #24]
 800eec4:	6923      	ldr	r3, [r4, #16]
 800eec6:	b943      	cbnz	r3, 800eeda <__swsetup_r+0xc6>
 800eec8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eecc:	d1ba      	bne.n	800ee44 <__swsetup_r+0x30>
 800eece:	bd70      	pop	{r4, r5, r6, pc}
 800eed0:	0781      	lsls	r1, r0, #30
 800eed2:	bf58      	it	pl
 800eed4:	6963      	ldrpl	r3, [r4, #20]
 800eed6:	60a3      	str	r3, [r4, #8]
 800eed8:	e7f4      	b.n	800eec4 <__swsetup_r+0xb0>
 800eeda:	2000      	movs	r0, #0
 800eedc:	e7f7      	b.n	800eece <__swsetup_r+0xba>
 800eede:	bf00      	nop
 800eee0:	20000184 	.word	0x20000184
 800eee4:	08010694 	.word	0x08010694
 800eee8:	080106b4 	.word	0x080106b4
 800eeec:	08010674 	.word	0x08010674

0800eef0 <abort>:
 800eef0:	b508      	push	{r3, lr}
 800eef2:	2006      	movs	r0, #6
 800eef4:	f000 fa50 	bl	800f398 <raise>
 800eef8:	2001      	movs	r0, #1
 800eefa:	f7f3 fa95 	bl	8002428 <_exit>
	...

0800ef00 <__sflush_r>:
 800ef00:	898a      	ldrh	r2, [r1, #12]
 800ef02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef06:	4605      	mov	r5, r0
 800ef08:	0710      	lsls	r0, r2, #28
 800ef0a:	460c      	mov	r4, r1
 800ef0c:	d458      	bmi.n	800efc0 <__sflush_r+0xc0>
 800ef0e:	684b      	ldr	r3, [r1, #4]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	dc05      	bgt.n	800ef20 <__sflush_r+0x20>
 800ef14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	dc02      	bgt.n	800ef20 <__sflush_r+0x20>
 800ef1a:	2000      	movs	r0, #0
 800ef1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef22:	2e00      	cmp	r6, #0
 800ef24:	d0f9      	beq.n	800ef1a <__sflush_r+0x1a>
 800ef26:	2300      	movs	r3, #0
 800ef28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ef2c:	682f      	ldr	r7, [r5, #0]
 800ef2e:	602b      	str	r3, [r5, #0]
 800ef30:	d032      	beq.n	800ef98 <__sflush_r+0x98>
 800ef32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef34:	89a3      	ldrh	r3, [r4, #12]
 800ef36:	075a      	lsls	r2, r3, #29
 800ef38:	d505      	bpl.n	800ef46 <__sflush_r+0x46>
 800ef3a:	6863      	ldr	r3, [r4, #4]
 800ef3c:	1ac0      	subs	r0, r0, r3
 800ef3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef40:	b10b      	cbz	r3, 800ef46 <__sflush_r+0x46>
 800ef42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef44:	1ac0      	subs	r0, r0, r3
 800ef46:	2300      	movs	r3, #0
 800ef48:	4602      	mov	r2, r0
 800ef4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef4c:	6a21      	ldr	r1, [r4, #32]
 800ef4e:	4628      	mov	r0, r5
 800ef50:	47b0      	blx	r6
 800ef52:	1c43      	adds	r3, r0, #1
 800ef54:	89a3      	ldrh	r3, [r4, #12]
 800ef56:	d106      	bne.n	800ef66 <__sflush_r+0x66>
 800ef58:	6829      	ldr	r1, [r5, #0]
 800ef5a:	291d      	cmp	r1, #29
 800ef5c:	d82c      	bhi.n	800efb8 <__sflush_r+0xb8>
 800ef5e:	4a2a      	ldr	r2, [pc, #168]	; (800f008 <__sflush_r+0x108>)
 800ef60:	40ca      	lsrs	r2, r1
 800ef62:	07d6      	lsls	r6, r2, #31
 800ef64:	d528      	bpl.n	800efb8 <__sflush_r+0xb8>
 800ef66:	2200      	movs	r2, #0
 800ef68:	6062      	str	r2, [r4, #4]
 800ef6a:	04d9      	lsls	r1, r3, #19
 800ef6c:	6922      	ldr	r2, [r4, #16]
 800ef6e:	6022      	str	r2, [r4, #0]
 800ef70:	d504      	bpl.n	800ef7c <__sflush_r+0x7c>
 800ef72:	1c42      	adds	r2, r0, #1
 800ef74:	d101      	bne.n	800ef7a <__sflush_r+0x7a>
 800ef76:	682b      	ldr	r3, [r5, #0]
 800ef78:	b903      	cbnz	r3, 800ef7c <__sflush_r+0x7c>
 800ef7a:	6560      	str	r0, [r4, #84]	; 0x54
 800ef7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef7e:	602f      	str	r7, [r5, #0]
 800ef80:	2900      	cmp	r1, #0
 800ef82:	d0ca      	beq.n	800ef1a <__sflush_r+0x1a>
 800ef84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef88:	4299      	cmp	r1, r3
 800ef8a:	d002      	beq.n	800ef92 <__sflush_r+0x92>
 800ef8c:	4628      	mov	r0, r5
 800ef8e:	f7fb fe65 	bl	800ac5c <_free_r>
 800ef92:	2000      	movs	r0, #0
 800ef94:	6360      	str	r0, [r4, #52]	; 0x34
 800ef96:	e7c1      	b.n	800ef1c <__sflush_r+0x1c>
 800ef98:	6a21      	ldr	r1, [r4, #32]
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	47b0      	blx	r6
 800efa0:	1c41      	adds	r1, r0, #1
 800efa2:	d1c7      	bne.n	800ef34 <__sflush_r+0x34>
 800efa4:	682b      	ldr	r3, [r5, #0]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d0c4      	beq.n	800ef34 <__sflush_r+0x34>
 800efaa:	2b1d      	cmp	r3, #29
 800efac:	d001      	beq.n	800efb2 <__sflush_r+0xb2>
 800efae:	2b16      	cmp	r3, #22
 800efb0:	d101      	bne.n	800efb6 <__sflush_r+0xb6>
 800efb2:	602f      	str	r7, [r5, #0]
 800efb4:	e7b1      	b.n	800ef1a <__sflush_r+0x1a>
 800efb6:	89a3      	ldrh	r3, [r4, #12]
 800efb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efbc:	81a3      	strh	r3, [r4, #12]
 800efbe:	e7ad      	b.n	800ef1c <__sflush_r+0x1c>
 800efc0:	690f      	ldr	r7, [r1, #16]
 800efc2:	2f00      	cmp	r7, #0
 800efc4:	d0a9      	beq.n	800ef1a <__sflush_r+0x1a>
 800efc6:	0793      	lsls	r3, r2, #30
 800efc8:	680e      	ldr	r6, [r1, #0]
 800efca:	bf08      	it	eq
 800efcc:	694b      	ldreq	r3, [r1, #20]
 800efce:	600f      	str	r7, [r1, #0]
 800efd0:	bf18      	it	ne
 800efd2:	2300      	movne	r3, #0
 800efd4:	eba6 0807 	sub.w	r8, r6, r7
 800efd8:	608b      	str	r3, [r1, #8]
 800efda:	f1b8 0f00 	cmp.w	r8, #0
 800efde:	dd9c      	ble.n	800ef1a <__sflush_r+0x1a>
 800efe0:	6a21      	ldr	r1, [r4, #32]
 800efe2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800efe4:	4643      	mov	r3, r8
 800efe6:	463a      	mov	r2, r7
 800efe8:	4628      	mov	r0, r5
 800efea:	47b0      	blx	r6
 800efec:	2800      	cmp	r0, #0
 800efee:	dc06      	bgt.n	800effe <__sflush_r+0xfe>
 800eff0:	89a3      	ldrh	r3, [r4, #12]
 800eff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eff6:	81a3      	strh	r3, [r4, #12]
 800eff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800effc:	e78e      	b.n	800ef1c <__sflush_r+0x1c>
 800effe:	4407      	add	r7, r0
 800f000:	eba8 0800 	sub.w	r8, r8, r0
 800f004:	e7e9      	b.n	800efda <__sflush_r+0xda>
 800f006:	bf00      	nop
 800f008:	20400001 	.word	0x20400001

0800f00c <_fflush_r>:
 800f00c:	b538      	push	{r3, r4, r5, lr}
 800f00e:	690b      	ldr	r3, [r1, #16]
 800f010:	4605      	mov	r5, r0
 800f012:	460c      	mov	r4, r1
 800f014:	b913      	cbnz	r3, 800f01c <_fflush_r+0x10>
 800f016:	2500      	movs	r5, #0
 800f018:	4628      	mov	r0, r5
 800f01a:	bd38      	pop	{r3, r4, r5, pc}
 800f01c:	b118      	cbz	r0, 800f026 <_fflush_r+0x1a>
 800f01e:	6983      	ldr	r3, [r0, #24]
 800f020:	b90b      	cbnz	r3, 800f026 <_fflush_r+0x1a>
 800f022:	f000 f887 	bl	800f134 <__sinit>
 800f026:	4b14      	ldr	r3, [pc, #80]	; (800f078 <_fflush_r+0x6c>)
 800f028:	429c      	cmp	r4, r3
 800f02a:	d11b      	bne.n	800f064 <_fflush_r+0x58>
 800f02c:	686c      	ldr	r4, [r5, #4]
 800f02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d0ef      	beq.n	800f016 <_fflush_r+0xa>
 800f036:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f038:	07d0      	lsls	r0, r2, #31
 800f03a:	d404      	bmi.n	800f046 <_fflush_r+0x3a>
 800f03c:	0599      	lsls	r1, r3, #22
 800f03e:	d402      	bmi.n	800f046 <_fflush_r+0x3a>
 800f040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f042:	f7ff fcf0 	bl	800ea26 <__retarget_lock_acquire_recursive>
 800f046:	4628      	mov	r0, r5
 800f048:	4621      	mov	r1, r4
 800f04a:	f7ff ff59 	bl	800ef00 <__sflush_r>
 800f04e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f050:	07da      	lsls	r2, r3, #31
 800f052:	4605      	mov	r5, r0
 800f054:	d4e0      	bmi.n	800f018 <_fflush_r+0xc>
 800f056:	89a3      	ldrh	r3, [r4, #12]
 800f058:	059b      	lsls	r3, r3, #22
 800f05a:	d4dd      	bmi.n	800f018 <_fflush_r+0xc>
 800f05c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f05e:	f7ff fce3 	bl	800ea28 <__retarget_lock_release_recursive>
 800f062:	e7d9      	b.n	800f018 <_fflush_r+0xc>
 800f064:	4b05      	ldr	r3, [pc, #20]	; (800f07c <_fflush_r+0x70>)
 800f066:	429c      	cmp	r4, r3
 800f068:	d101      	bne.n	800f06e <_fflush_r+0x62>
 800f06a:	68ac      	ldr	r4, [r5, #8]
 800f06c:	e7df      	b.n	800f02e <_fflush_r+0x22>
 800f06e:	4b04      	ldr	r3, [pc, #16]	; (800f080 <_fflush_r+0x74>)
 800f070:	429c      	cmp	r4, r3
 800f072:	bf08      	it	eq
 800f074:	68ec      	ldreq	r4, [r5, #12]
 800f076:	e7da      	b.n	800f02e <_fflush_r+0x22>
 800f078:	08010694 	.word	0x08010694
 800f07c:	080106b4 	.word	0x080106b4
 800f080:	08010674 	.word	0x08010674

0800f084 <std>:
 800f084:	2300      	movs	r3, #0
 800f086:	b510      	push	{r4, lr}
 800f088:	4604      	mov	r4, r0
 800f08a:	e9c0 3300 	strd	r3, r3, [r0]
 800f08e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f092:	6083      	str	r3, [r0, #8]
 800f094:	8181      	strh	r1, [r0, #12]
 800f096:	6643      	str	r3, [r0, #100]	; 0x64
 800f098:	81c2      	strh	r2, [r0, #14]
 800f09a:	6183      	str	r3, [r0, #24]
 800f09c:	4619      	mov	r1, r3
 800f09e:	2208      	movs	r2, #8
 800f0a0:	305c      	adds	r0, #92	; 0x5c
 800f0a2:	f7fb fdd3 	bl	800ac4c <memset>
 800f0a6:	4b05      	ldr	r3, [pc, #20]	; (800f0bc <std+0x38>)
 800f0a8:	6263      	str	r3, [r4, #36]	; 0x24
 800f0aa:	4b05      	ldr	r3, [pc, #20]	; (800f0c0 <std+0x3c>)
 800f0ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800f0ae:	4b05      	ldr	r3, [pc, #20]	; (800f0c4 <std+0x40>)
 800f0b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f0b2:	4b05      	ldr	r3, [pc, #20]	; (800f0c8 <std+0x44>)
 800f0b4:	6224      	str	r4, [r4, #32]
 800f0b6:	6323      	str	r3, [r4, #48]	; 0x30
 800f0b8:	bd10      	pop	{r4, pc}
 800f0ba:	bf00      	nop
 800f0bc:	0800f3d1 	.word	0x0800f3d1
 800f0c0:	0800f3f3 	.word	0x0800f3f3
 800f0c4:	0800f42b 	.word	0x0800f42b
 800f0c8:	0800f44f 	.word	0x0800f44f

0800f0cc <_cleanup_r>:
 800f0cc:	4901      	ldr	r1, [pc, #4]	; (800f0d4 <_cleanup_r+0x8>)
 800f0ce:	f000 b8af 	b.w	800f230 <_fwalk_reent>
 800f0d2:	bf00      	nop
 800f0d4:	0800f00d 	.word	0x0800f00d

0800f0d8 <__sfmoreglue>:
 800f0d8:	b570      	push	{r4, r5, r6, lr}
 800f0da:	2268      	movs	r2, #104	; 0x68
 800f0dc:	1e4d      	subs	r5, r1, #1
 800f0de:	4355      	muls	r5, r2
 800f0e0:	460e      	mov	r6, r1
 800f0e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f0e6:	f7fb fe25 	bl	800ad34 <_malloc_r>
 800f0ea:	4604      	mov	r4, r0
 800f0ec:	b140      	cbz	r0, 800f100 <__sfmoreglue+0x28>
 800f0ee:	2100      	movs	r1, #0
 800f0f0:	e9c0 1600 	strd	r1, r6, [r0]
 800f0f4:	300c      	adds	r0, #12
 800f0f6:	60a0      	str	r0, [r4, #8]
 800f0f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f0fc:	f7fb fda6 	bl	800ac4c <memset>
 800f100:	4620      	mov	r0, r4
 800f102:	bd70      	pop	{r4, r5, r6, pc}

0800f104 <__sfp_lock_acquire>:
 800f104:	4801      	ldr	r0, [pc, #4]	; (800f10c <__sfp_lock_acquire+0x8>)
 800f106:	f7ff bc8e 	b.w	800ea26 <__retarget_lock_acquire_recursive>
 800f10a:	bf00      	nop
 800f10c:	200026e1 	.word	0x200026e1

0800f110 <__sfp_lock_release>:
 800f110:	4801      	ldr	r0, [pc, #4]	; (800f118 <__sfp_lock_release+0x8>)
 800f112:	f7ff bc89 	b.w	800ea28 <__retarget_lock_release_recursive>
 800f116:	bf00      	nop
 800f118:	200026e1 	.word	0x200026e1

0800f11c <__sinit_lock_acquire>:
 800f11c:	4801      	ldr	r0, [pc, #4]	; (800f124 <__sinit_lock_acquire+0x8>)
 800f11e:	f7ff bc82 	b.w	800ea26 <__retarget_lock_acquire_recursive>
 800f122:	bf00      	nop
 800f124:	200026e2 	.word	0x200026e2

0800f128 <__sinit_lock_release>:
 800f128:	4801      	ldr	r0, [pc, #4]	; (800f130 <__sinit_lock_release+0x8>)
 800f12a:	f7ff bc7d 	b.w	800ea28 <__retarget_lock_release_recursive>
 800f12e:	bf00      	nop
 800f130:	200026e2 	.word	0x200026e2

0800f134 <__sinit>:
 800f134:	b510      	push	{r4, lr}
 800f136:	4604      	mov	r4, r0
 800f138:	f7ff fff0 	bl	800f11c <__sinit_lock_acquire>
 800f13c:	69a3      	ldr	r3, [r4, #24]
 800f13e:	b11b      	cbz	r3, 800f148 <__sinit+0x14>
 800f140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f144:	f7ff bff0 	b.w	800f128 <__sinit_lock_release>
 800f148:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f14c:	6523      	str	r3, [r4, #80]	; 0x50
 800f14e:	4b13      	ldr	r3, [pc, #76]	; (800f19c <__sinit+0x68>)
 800f150:	4a13      	ldr	r2, [pc, #76]	; (800f1a0 <__sinit+0x6c>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	62a2      	str	r2, [r4, #40]	; 0x28
 800f156:	42a3      	cmp	r3, r4
 800f158:	bf04      	itt	eq
 800f15a:	2301      	moveq	r3, #1
 800f15c:	61a3      	streq	r3, [r4, #24]
 800f15e:	4620      	mov	r0, r4
 800f160:	f000 f820 	bl	800f1a4 <__sfp>
 800f164:	6060      	str	r0, [r4, #4]
 800f166:	4620      	mov	r0, r4
 800f168:	f000 f81c 	bl	800f1a4 <__sfp>
 800f16c:	60a0      	str	r0, [r4, #8]
 800f16e:	4620      	mov	r0, r4
 800f170:	f000 f818 	bl	800f1a4 <__sfp>
 800f174:	2200      	movs	r2, #0
 800f176:	60e0      	str	r0, [r4, #12]
 800f178:	2104      	movs	r1, #4
 800f17a:	6860      	ldr	r0, [r4, #4]
 800f17c:	f7ff ff82 	bl	800f084 <std>
 800f180:	68a0      	ldr	r0, [r4, #8]
 800f182:	2201      	movs	r2, #1
 800f184:	2109      	movs	r1, #9
 800f186:	f7ff ff7d 	bl	800f084 <std>
 800f18a:	68e0      	ldr	r0, [r4, #12]
 800f18c:	2202      	movs	r2, #2
 800f18e:	2112      	movs	r1, #18
 800f190:	f7ff ff78 	bl	800f084 <std>
 800f194:	2301      	movs	r3, #1
 800f196:	61a3      	str	r3, [r4, #24]
 800f198:	e7d2      	b.n	800f140 <__sinit+0xc>
 800f19a:	bf00      	nop
 800f19c:	0801022c 	.word	0x0801022c
 800f1a0:	0800f0cd 	.word	0x0800f0cd

0800f1a4 <__sfp>:
 800f1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1a6:	4607      	mov	r7, r0
 800f1a8:	f7ff ffac 	bl	800f104 <__sfp_lock_acquire>
 800f1ac:	4b1e      	ldr	r3, [pc, #120]	; (800f228 <__sfp+0x84>)
 800f1ae:	681e      	ldr	r6, [r3, #0]
 800f1b0:	69b3      	ldr	r3, [r6, #24]
 800f1b2:	b913      	cbnz	r3, 800f1ba <__sfp+0x16>
 800f1b4:	4630      	mov	r0, r6
 800f1b6:	f7ff ffbd 	bl	800f134 <__sinit>
 800f1ba:	3648      	adds	r6, #72	; 0x48
 800f1bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f1c0:	3b01      	subs	r3, #1
 800f1c2:	d503      	bpl.n	800f1cc <__sfp+0x28>
 800f1c4:	6833      	ldr	r3, [r6, #0]
 800f1c6:	b30b      	cbz	r3, 800f20c <__sfp+0x68>
 800f1c8:	6836      	ldr	r6, [r6, #0]
 800f1ca:	e7f7      	b.n	800f1bc <__sfp+0x18>
 800f1cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f1d0:	b9d5      	cbnz	r5, 800f208 <__sfp+0x64>
 800f1d2:	4b16      	ldr	r3, [pc, #88]	; (800f22c <__sfp+0x88>)
 800f1d4:	60e3      	str	r3, [r4, #12]
 800f1d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f1da:	6665      	str	r5, [r4, #100]	; 0x64
 800f1dc:	f7ff fc22 	bl	800ea24 <__retarget_lock_init_recursive>
 800f1e0:	f7ff ff96 	bl	800f110 <__sfp_lock_release>
 800f1e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f1e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f1ec:	6025      	str	r5, [r4, #0]
 800f1ee:	61a5      	str	r5, [r4, #24]
 800f1f0:	2208      	movs	r2, #8
 800f1f2:	4629      	mov	r1, r5
 800f1f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f1f8:	f7fb fd28 	bl	800ac4c <memset>
 800f1fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f200:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f204:	4620      	mov	r0, r4
 800f206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f208:	3468      	adds	r4, #104	; 0x68
 800f20a:	e7d9      	b.n	800f1c0 <__sfp+0x1c>
 800f20c:	2104      	movs	r1, #4
 800f20e:	4638      	mov	r0, r7
 800f210:	f7ff ff62 	bl	800f0d8 <__sfmoreglue>
 800f214:	4604      	mov	r4, r0
 800f216:	6030      	str	r0, [r6, #0]
 800f218:	2800      	cmp	r0, #0
 800f21a:	d1d5      	bne.n	800f1c8 <__sfp+0x24>
 800f21c:	f7ff ff78 	bl	800f110 <__sfp_lock_release>
 800f220:	230c      	movs	r3, #12
 800f222:	603b      	str	r3, [r7, #0]
 800f224:	e7ee      	b.n	800f204 <__sfp+0x60>
 800f226:	bf00      	nop
 800f228:	0801022c 	.word	0x0801022c
 800f22c:	ffff0001 	.word	0xffff0001

0800f230 <_fwalk_reent>:
 800f230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f234:	4606      	mov	r6, r0
 800f236:	4688      	mov	r8, r1
 800f238:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f23c:	2700      	movs	r7, #0
 800f23e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f242:	f1b9 0901 	subs.w	r9, r9, #1
 800f246:	d505      	bpl.n	800f254 <_fwalk_reent+0x24>
 800f248:	6824      	ldr	r4, [r4, #0]
 800f24a:	2c00      	cmp	r4, #0
 800f24c:	d1f7      	bne.n	800f23e <_fwalk_reent+0xe>
 800f24e:	4638      	mov	r0, r7
 800f250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f254:	89ab      	ldrh	r3, [r5, #12]
 800f256:	2b01      	cmp	r3, #1
 800f258:	d907      	bls.n	800f26a <_fwalk_reent+0x3a>
 800f25a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f25e:	3301      	adds	r3, #1
 800f260:	d003      	beq.n	800f26a <_fwalk_reent+0x3a>
 800f262:	4629      	mov	r1, r5
 800f264:	4630      	mov	r0, r6
 800f266:	47c0      	blx	r8
 800f268:	4307      	orrs	r7, r0
 800f26a:	3568      	adds	r5, #104	; 0x68
 800f26c:	e7e9      	b.n	800f242 <_fwalk_reent+0x12>

0800f26e <__swhatbuf_r>:
 800f26e:	b570      	push	{r4, r5, r6, lr}
 800f270:	460e      	mov	r6, r1
 800f272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f276:	2900      	cmp	r1, #0
 800f278:	b096      	sub	sp, #88	; 0x58
 800f27a:	4614      	mov	r4, r2
 800f27c:	461d      	mov	r5, r3
 800f27e:	da08      	bge.n	800f292 <__swhatbuf_r+0x24>
 800f280:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f284:	2200      	movs	r2, #0
 800f286:	602a      	str	r2, [r5, #0]
 800f288:	061a      	lsls	r2, r3, #24
 800f28a:	d410      	bmi.n	800f2ae <__swhatbuf_r+0x40>
 800f28c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f290:	e00e      	b.n	800f2b0 <__swhatbuf_r+0x42>
 800f292:	466a      	mov	r2, sp
 800f294:	f000 f902 	bl	800f49c <_fstat_r>
 800f298:	2800      	cmp	r0, #0
 800f29a:	dbf1      	blt.n	800f280 <__swhatbuf_r+0x12>
 800f29c:	9a01      	ldr	r2, [sp, #4]
 800f29e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f2a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f2a6:	425a      	negs	r2, r3
 800f2a8:	415a      	adcs	r2, r3
 800f2aa:	602a      	str	r2, [r5, #0]
 800f2ac:	e7ee      	b.n	800f28c <__swhatbuf_r+0x1e>
 800f2ae:	2340      	movs	r3, #64	; 0x40
 800f2b0:	2000      	movs	r0, #0
 800f2b2:	6023      	str	r3, [r4, #0]
 800f2b4:	b016      	add	sp, #88	; 0x58
 800f2b6:	bd70      	pop	{r4, r5, r6, pc}

0800f2b8 <__smakebuf_r>:
 800f2b8:	898b      	ldrh	r3, [r1, #12]
 800f2ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f2bc:	079d      	lsls	r5, r3, #30
 800f2be:	4606      	mov	r6, r0
 800f2c0:	460c      	mov	r4, r1
 800f2c2:	d507      	bpl.n	800f2d4 <__smakebuf_r+0x1c>
 800f2c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f2c8:	6023      	str	r3, [r4, #0]
 800f2ca:	6123      	str	r3, [r4, #16]
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	6163      	str	r3, [r4, #20]
 800f2d0:	b002      	add	sp, #8
 800f2d2:	bd70      	pop	{r4, r5, r6, pc}
 800f2d4:	ab01      	add	r3, sp, #4
 800f2d6:	466a      	mov	r2, sp
 800f2d8:	f7ff ffc9 	bl	800f26e <__swhatbuf_r>
 800f2dc:	9900      	ldr	r1, [sp, #0]
 800f2de:	4605      	mov	r5, r0
 800f2e0:	4630      	mov	r0, r6
 800f2e2:	f7fb fd27 	bl	800ad34 <_malloc_r>
 800f2e6:	b948      	cbnz	r0, 800f2fc <__smakebuf_r+0x44>
 800f2e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2ec:	059a      	lsls	r2, r3, #22
 800f2ee:	d4ef      	bmi.n	800f2d0 <__smakebuf_r+0x18>
 800f2f0:	f023 0303 	bic.w	r3, r3, #3
 800f2f4:	f043 0302 	orr.w	r3, r3, #2
 800f2f8:	81a3      	strh	r3, [r4, #12]
 800f2fa:	e7e3      	b.n	800f2c4 <__smakebuf_r+0xc>
 800f2fc:	4b0d      	ldr	r3, [pc, #52]	; (800f334 <__smakebuf_r+0x7c>)
 800f2fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800f300:	89a3      	ldrh	r3, [r4, #12]
 800f302:	6020      	str	r0, [r4, #0]
 800f304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f308:	81a3      	strh	r3, [r4, #12]
 800f30a:	9b00      	ldr	r3, [sp, #0]
 800f30c:	6163      	str	r3, [r4, #20]
 800f30e:	9b01      	ldr	r3, [sp, #4]
 800f310:	6120      	str	r0, [r4, #16]
 800f312:	b15b      	cbz	r3, 800f32c <__smakebuf_r+0x74>
 800f314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f318:	4630      	mov	r0, r6
 800f31a:	f000 f8d1 	bl	800f4c0 <_isatty_r>
 800f31e:	b128      	cbz	r0, 800f32c <__smakebuf_r+0x74>
 800f320:	89a3      	ldrh	r3, [r4, #12]
 800f322:	f023 0303 	bic.w	r3, r3, #3
 800f326:	f043 0301 	orr.w	r3, r3, #1
 800f32a:	81a3      	strh	r3, [r4, #12]
 800f32c:	89a0      	ldrh	r0, [r4, #12]
 800f32e:	4305      	orrs	r5, r0
 800f330:	81a5      	strh	r5, [r4, #12]
 800f332:	e7cd      	b.n	800f2d0 <__smakebuf_r+0x18>
 800f334:	0800f0cd 	.word	0x0800f0cd

0800f338 <_malloc_usable_size_r>:
 800f338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f33c:	1f18      	subs	r0, r3, #4
 800f33e:	2b00      	cmp	r3, #0
 800f340:	bfbc      	itt	lt
 800f342:	580b      	ldrlt	r3, [r1, r0]
 800f344:	18c0      	addlt	r0, r0, r3
 800f346:	4770      	bx	lr

0800f348 <_raise_r>:
 800f348:	291f      	cmp	r1, #31
 800f34a:	b538      	push	{r3, r4, r5, lr}
 800f34c:	4604      	mov	r4, r0
 800f34e:	460d      	mov	r5, r1
 800f350:	d904      	bls.n	800f35c <_raise_r+0x14>
 800f352:	2316      	movs	r3, #22
 800f354:	6003      	str	r3, [r0, #0]
 800f356:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f35a:	bd38      	pop	{r3, r4, r5, pc}
 800f35c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f35e:	b112      	cbz	r2, 800f366 <_raise_r+0x1e>
 800f360:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f364:	b94b      	cbnz	r3, 800f37a <_raise_r+0x32>
 800f366:	4620      	mov	r0, r4
 800f368:	f000 f830 	bl	800f3cc <_getpid_r>
 800f36c:	462a      	mov	r2, r5
 800f36e:	4601      	mov	r1, r0
 800f370:	4620      	mov	r0, r4
 800f372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f376:	f000 b817 	b.w	800f3a8 <_kill_r>
 800f37a:	2b01      	cmp	r3, #1
 800f37c:	d00a      	beq.n	800f394 <_raise_r+0x4c>
 800f37e:	1c59      	adds	r1, r3, #1
 800f380:	d103      	bne.n	800f38a <_raise_r+0x42>
 800f382:	2316      	movs	r3, #22
 800f384:	6003      	str	r3, [r0, #0]
 800f386:	2001      	movs	r0, #1
 800f388:	e7e7      	b.n	800f35a <_raise_r+0x12>
 800f38a:	2400      	movs	r4, #0
 800f38c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f390:	4628      	mov	r0, r5
 800f392:	4798      	blx	r3
 800f394:	2000      	movs	r0, #0
 800f396:	e7e0      	b.n	800f35a <_raise_r+0x12>

0800f398 <raise>:
 800f398:	4b02      	ldr	r3, [pc, #8]	; (800f3a4 <raise+0xc>)
 800f39a:	4601      	mov	r1, r0
 800f39c:	6818      	ldr	r0, [r3, #0]
 800f39e:	f7ff bfd3 	b.w	800f348 <_raise_r>
 800f3a2:	bf00      	nop
 800f3a4:	20000184 	.word	0x20000184

0800f3a8 <_kill_r>:
 800f3a8:	b538      	push	{r3, r4, r5, lr}
 800f3aa:	4d07      	ldr	r5, [pc, #28]	; (800f3c8 <_kill_r+0x20>)
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	4608      	mov	r0, r1
 800f3b2:	4611      	mov	r1, r2
 800f3b4:	602b      	str	r3, [r5, #0]
 800f3b6:	f7f3 f82f 	bl	8002418 <_kill>
 800f3ba:	1c43      	adds	r3, r0, #1
 800f3bc:	d102      	bne.n	800f3c4 <_kill_r+0x1c>
 800f3be:	682b      	ldr	r3, [r5, #0]
 800f3c0:	b103      	cbz	r3, 800f3c4 <_kill_r+0x1c>
 800f3c2:	6023      	str	r3, [r4, #0]
 800f3c4:	bd38      	pop	{r3, r4, r5, pc}
 800f3c6:	bf00      	nop
 800f3c8:	200026dc 	.word	0x200026dc

0800f3cc <_getpid_r>:
 800f3cc:	f7f3 b822 	b.w	8002414 <_getpid>

0800f3d0 <__sread>:
 800f3d0:	b510      	push	{r4, lr}
 800f3d2:	460c      	mov	r4, r1
 800f3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3d8:	f000 f894 	bl	800f504 <_read_r>
 800f3dc:	2800      	cmp	r0, #0
 800f3de:	bfab      	itete	ge
 800f3e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f3e2:	89a3      	ldrhlt	r3, [r4, #12]
 800f3e4:	181b      	addge	r3, r3, r0
 800f3e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f3ea:	bfac      	ite	ge
 800f3ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800f3ee:	81a3      	strhlt	r3, [r4, #12]
 800f3f0:	bd10      	pop	{r4, pc}

0800f3f2 <__swrite>:
 800f3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3f6:	461f      	mov	r7, r3
 800f3f8:	898b      	ldrh	r3, [r1, #12]
 800f3fa:	05db      	lsls	r3, r3, #23
 800f3fc:	4605      	mov	r5, r0
 800f3fe:	460c      	mov	r4, r1
 800f400:	4616      	mov	r6, r2
 800f402:	d505      	bpl.n	800f410 <__swrite+0x1e>
 800f404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f408:	2302      	movs	r3, #2
 800f40a:	2200      	movs	r2, #0
 800f40c:	f000 f868 	bl	800f4e0 <_lseek_r>
 800f410:	89a3      	ldrh	r3, [r4, #12]
 800f412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f41a:	81a3      	strh	r3, [r4, #12]
 800f41c:	4632      	mov	r2, r6
 800f41e:	463b      	mov	r3, r7
 800f420:	4628      	mov	r0, r5
 800f422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f426:	f000 b817 	b.w	800f458 <_write_r>

0800f42a <__sseek>:
 800f42a:	b510      	push	{r4, lr}
 800f42c:	460c      	mov	r4, r1
 800f42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f432:	f000 f855 	bl	800f4e0 <_lseek_r>
 800f436:	1c43      	adds	r3, r0, #1
 800f438:	89a3      	ldrh	r3, [r4, #12]
 800f43a:	bf15      	itete	ne
 800f43c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f43e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f442:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f446:	81a3      	strheq	r3, [r4, #12]
 800f448:	bf18      	it	ne
 800f44a:	81a3      	strhne	r3, [r4, #12]
 800f44c:	bd10      	pop	{r4, pc}

0800f44e <__sclose>:
 800f44e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f452:	f000 b813 	b.w	800f47c <_close_r>
	...

0800f458 <_write_r>:
 800f458:	b538      	push	{r3, r4, r5, lr}
 800f45a:	4d07      	ldr	r5, [pc, #28]	; (800f478 <_write_r+0x20>)
 800f45c:	4604      	mov	r4, r0
 800f45e:	4608      	mov	r0, r1
 800f460:	4611      	mov	r1, r2
 800f462:	2200      	movs	r2, #0
 800f464:	602a      	str	r2, [r5, #0]
 800f466:	461a      	mov	r2, r3
 800f468:	f7f2 fff4 	bl	8002454 <_write>
 800f46c:	1c43      	adds	r3, r0, #1
 800f46e:	d102      	bne.n	800f476 <_write_r+0x1e>
 800f470:	682b      	ldr	r3, [r5, #0]
 800f472:	b103      	cbz	r3, 800f476 <_write_r+0x1e>
 800f474:	6023      	str	r3, [r4, #0]
 800f476:	bd38      	pop	{r3, r4, r5, pc}
 800f478:	200026dc 	.word	0x200026dc

0800f47c <_close_r>:
 800f47c:	b538      	push	{r3, r4, r5, lr}
 800f47e:	4d06      	ldr	r5, [pc, #24]	; (800f498 <_close_r+0x1c>)
 800f480:	2300      	movs	r3, #0
 800f482:	4604      	mov	r4, r0
 800f484:	4608      	mov	r0, r1
 800f486:	602b      	str	r3, [r5, #0]
 800f488:	f7f2 fff2 	bl	8002470 <_close>
 800f48c:	1c43      	adds	r3, r0, #1
 800f48e:	d102      	bne.n	800f496 <_close_r+0x1a>
 800f490:	682b      	ldr	r3, [r5, #0]
 800f492:	b103      	cbz	r3, 800f496 <_close_r+0x1a>
 800f494:	6023      	str	r3, [r4, #0]
 800f496:	bd38      	pop	{r3, r4, r5, pc}
 800f498:	200026dc 	.word	0x200026dc

0800f49c <_fstat_r>:
 800f49c:	b538      	push	{r3, r4, r5, lr}
 800f49e:	4d07      	ldr	r5, [pc, #28]	; (800f4bc <_fstat_r+0x20>)
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	4608      	mov	r0, r1
 800f4a6:	4611      	mov	r1, r2
 800f4a8:	602b      	str	r3, [r5, #0]
 800f4aa:	f7f2 ffe4 	bl	8002476 <_fstat>
 800f4ae:	1c43      	adds	r3, r0, #1
 800f4b0:	d102      	bne.n	800f4b8 <_fstat_r+0x1c>
 800f4b2:	682b      	ldr	r3, [r5, #0]
 800f4b4:	b103      	cbz	r3, 800f4b8 <_fstat_r+0x1c>
 800f4b6:	6023      	str	r3, [r4, #0]
 800f4b8:	bd38      	pop	{r3, r4, r5, pc}
 800f4ba:	bf00      	nop
 800f4bc:	200026dc 	.word	0x200026dc

0800f4c0 <_isatty_r>:
 800f4c0:	b538      	push	{r3, r4, r5, lr}
 800f4c2:	4d06      	ldr	r5, [pc, #24]	; (800f4dc <_isatty_r+0x1c>)
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	4604      	mov	r4, r0
 800f4c8:	4608      	mov	r0, r1
 800f4ca:	602b      	str	r3, [r5, #0]
 800f4cc:	f7f2 ffd8 	bl	8002480 <_isatty>
 800f4d0:	1c43      	adds	r3, r0, #1
 800f4d2:	d102      	bne.n	800f4da <_isatty_r+0x1a>
 800f4d4:	682b      	ldr	r3, [r5, #0]
 800f4d6:	b103      	cbz	r3, 800f4da <_isatty_r+0x1a>
 800f4d8:	6023      	str	r3, [r4, #0]
 800f4da:	bd38      	pop	{r3, r4, r5, pc}
 800f4dc:	200026dc 	.word	0x200026dc

0800f4e0 <_lseek_r>:
 800f4e0:	b538      	push	{r3, r4, r5, lr}
 800f4e2:	4d07      	ldr	r5, [pc, #28]	; (800f500 <_lseek_r+0x20>)
 800f4e4:	4604      	mov	r4, r0
 800f4e6:	4608      	mov	r0, r1
 800f4e8:	4611      	mov	r1, r2
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	602a      	str	r2, [r5, #0]
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	f7f2 ffc8 	bl	8002484 <_lseek>
 800f4f4:	1c43      	adds	r3, r0, #1
 800f4f6:	d102      	bne.n	800f4fe <_lseek_r+0x1e>
 800f4f8:	682b      	ldr	r3, [r5, #0]
 800f4fa:	b103      	cbz	r3, 800f4fe <_lseek_r+0x1e>
 800f4fc:	6023      	str	r3, [r4, #0]
 800f4fe:	bd38      	pop	{r3, r4, r5, pc}
 800f500:	200026dc 	.word	0x200026dc

0800f504 <_read_r>:
 800f504:	b538      	push	{r3, r4, r5, lr}
 800f506:	4d07      	ldr	r5, [pc, #28]	; (800f524 <_read_r+0x20>)
 800f508:	4604      	mov	r4, r0
 800f50a:	4608      	mov	r0, r1
 800f50c:	4611      	mov	r1, r2
 800f50e:	2200      	movs	r2, #0
 800f510:	602a      	str	r2, [r5, #0]
 800f512:	461a      	mov	r2, r3
 800f514:	f7f2 ff8e 	bl	8002434 <_read>
 800f518:	1c43      	adds	r3, r0, #1
 800f51a:	d102      	bne.n	800f522 <_read_r+0x1e>
 800f51c:	682b      	ldr	r3, [r5, #0]
 800f51e:	b103      	cbz	r3, 800f522 <_read_r+0x1e>
 800f520:	6023      	str	r3, [r4, #0]
 800f522:	bd38      	pop	{r3, r4, r5, pc}
 800f524:	200026dc 	.word	0x200026dc

0800f528 <_init>:
 800f528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f52a:	bf00      	nop
 800f52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f52e:	bc08      	pop	{r3}
 800f530:	469e      	mov	lr, r3
 800f532:	4770      	bx	lr

0800f534 <_fini>:
 800f534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f536:	bf00      	nop
 800f538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f53a:	bc08      	pop	{r3}
 800f53c:	469e      	mov	lr, r3
 800f53e:	4770      	bx	lr
